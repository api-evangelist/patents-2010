---

title: Remote registration for enterprise applications
abstract: A partner registration module can provide for an automatic registration of partners to a central server. An entire partner registration process can be automated from end to end, providing a unified process for registering partners. The partner registration module can be fully compatible with current registration agents and next generation registration agents.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08695076&OS=08695076&RS=08695076
owner: Oracle International Corporation
number: 08695076
owner_city: Redwood Shores
owner_country: US
publication_date: 20100630
---
This application claims priority of U.S. Provisional Patent Application Ser. No. 61 315 633 filed on Mar. 19 2010. The subject matter of the earlier filed application is hereby incorporated by reference.

One embodiment is directed generally to a computer system and in particular to access management computer systems.

Single sign on SSO is a property of managing access of multiple computer systems that are independent but also related. Under SSO once a user securely signs on to a central server such as a SSO server a user gains access to all computer systems identified as partner applications or partners or agents that have delegated their authentication functions to the server. This means that the user does not have to securely sign on to each partner.

For example if a user tries to access a partner that has delegated its authentication function to a SSO server the user is redirected to the SSO server where the SSO server challenges the use for credentials such as a user name and password. After verifying the user s credentials the SSO server sets a session cookie and passes an authentication token to the partner. The partner then serves up the requested content. If a user tries to access a second partner that has also delegated its authentication function to the SSO server the user is again redirected to the SSO server. However this time the SSO server does not challenge the user for credentials a second time. Instead the SSO server uses the session cookie to validate the user identity. Upon validating the identity of the user the SSO server passes an authentication token to the second partner and the second partner serves up the requested content. Thus the user only needs to sign on to the SSO server one time.

In order to implement SSO each partner that wishes to delegate its authentication functions is required to have previously registered with a central server such as a SSO server. Each partner is required to register with the central server among other reasons so that the central server can properly receive redirected requests and can properly send authentication tokens back to each partner. Partner registration processes are discussed below in greater detail.

One embodiment of the invention is directed to a computer readable medium having instructions stored thereon that when executed by a processor cause the processor to perform a method. The instructions include creating a request object and transmitting the request object to an access server where the request object includes information of a partner application and provisioning the partner application in the access server based on the request object. The instructions further include generating a response object based on the provisioning of the partner application and transmitting the response object to a web server. The instructions further include applying the response object to deploy the partner application at the web server.

Another embodiment of the invention is directed to a computer readable medium having instructions stored thereon that when executed by a processor cause the processor to perform a method. The instructions include delegating provisioning rights to a web server and transmitting an external event using information of a partner application to an access server where the external events calls a procedure that provisions the partner application. The instructions further include generating a response object based on the provisioning of the partner application and transmitting the response object to the web server. The instructions further include applying the response object to deploy the partner application at the web server.

According to one embodiment of the invention a partner registration module can provide for an automatic registration of partners to a central server. According to the embodiment the entire partner registration process can be automated from end to end providing a unified process for registering partners. According to the embodiment of the invention the partner registration module can be fully compatible with current registration agents and next generation registration agents.

As previously described in order to implement SSO each partner that wishes to participate in SSO and delegate its authentication functions to a central server must first register with the central server. There can be many different partner registration processes depending on how SSO is implemented.

One example of a partner registration process is an Oracle AS Single Sign On OSSO partner registration process from Oracle Corp. In the OSSO partner registration process an OSSO partner also identified as an OSSO agent registers with a SSO server. An administrator of the partner runs a script on the partner s Oracle Hypertext Transfer Protocol HTTP server also identified as a web server in order to register the partner with an SSO server. The script is run within an Oracle HTTP Server module that provides OracleAS applications with authentication known as a mod osso module. The mod osso module enables partners to accept authenticated user information instead of a user name and password once a user has logged in to the SSO server. If the Oracle HTTP server is run on a UNIX platform the script is an ssoreg.sh script. If the Oracle HTTP server is run on a Windows platform the script is an ssoreg.bat batch file. The script causes the SSO server to look up the partner s information in an Oracle Internet Directory connect to an Oracle Database register the partner and generate an osso.conf file. The osso.conf file is used to deploy and initiate the applications necessary for the partner to communicate with the SSO server. The SSO server then transmits the osso.conf file to the administrator of the partner. The administrator of the partner than places the osso.conf file in the appropriate directory and runs the osso.conf file to deploy and initiate the applications necessary for the partner to communicate with the SSO Server.

Another example of a partner registration process is an Oracle Access Manager OAM partner registration process from Oracle Corp. An OAM partner registration process involves a policy manager an access gate and an access server. A policy manager provides a login interface to an access system and allows administrators to define resources to be protected and to group resources into policy domains. A policy domain comprises resource types to protect rules for protection policies for protection and administrative rights. The policy manager has a component identified as an access system console. The access system console permits administrators to add change and remove access clients and access servers configure authentication and authorization schemes configure master audit settings and configure host identities.

An access gate also identified as an OAM agent is a custom web gate that processes resource requests from user applications by intercepting the resource requests and forwarding them to an access server for authentication and authorization. A web gate is an out of the box access client for HTTP resources.

An access server is a standalone server or a collection of servers that provide authentication authorization and auditing AAA services. The access server validates credentials authorizes users and manages user sessions. The access server receives requests from an access client and queries authentication authorization and auditing rules in a directory server.

The OAM partner registration process requires at least one access server to be installed. An access server instance in an access system console is first created. Next a transport security level for installation is selected. The three transport security levels for installation are open simple and cert. In an open transport security level an access gate and the access server communicate over an open protocol with no security. In a simple transport security level a password is shared between an access gate and the access server for security where an access gate must provide a password in order to communicate with the access server. A certificate is then generated from the password. In a cert transport security level an access gate provides a pre generated certificate from a third party to the access server in order to communicate with the access server. Once a transport security level is selected the access server is installed and configured with configuration parameters.

Once at least one access server is installed an access gate can be installed on a web server and configured. An access gate instance in an access system console is first created. The access gate instance is then associated with the access server. Next the same transport security level for installation i.e. open simple or cert as the access server is selected. The access gate is then installed which results in the access gate generating an ObAccessClient.xml file. The ObAccessClient.xml file contains the configuration parameters for the access gate. The web server is then restarted and the access gate initiates a handshake with the access server which establishes a communication protocol between the two entities based on the transport security level selected by both entities.

As illustrated in the preceding partner registration examples a partner registration process generally includes a series of manual steps for each partner that registers with a central server. Because the steps are manual the possibility exists for steps to be implemented inconsistently for each partner. For example if a database connection failed during a partner registration process a partner may only be partially registered with the central server. Because the steps for a partner registration process are manual there is no way to compensate for a failed partner registration process without retracing all the manual steps. When many partners have been registered retracing the manual steps for each partner can be time consuming and labor intensive. Thus according to an embodiment of the invention a new partner registration process is described that can support existing partner registration agents and can be extendible so that it can support any future partner registration agents.

A computer readable medium may be any available medium that can be accessed by processor . A computer readable medium may include both a volatile and nonvolatile medium a removable and non removable medium a communication medium and a storage medium. A communication medium may include computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and may include any other form of information delivery medium known in the art. A storage medium may include RAM flash memory ROM erasable programmable read only memory EPROM electrically erasable programmable read only memory EEPROM registers hard disk a removable disk a compact disk read only memory CD ROM or any other form of storage medium known in the art.

Processor can also be operatively coupled via bus to a display such as a Liquid Crystal Display LCD . Display can display information to the user. A keyboard and a cursor control device such as a computer mouse can also be operatively coupled to bus to enable the user to interface with system .

According to one embodiment memory can store software modules that may provide functionality when executed by processor . The modules can include an operating system a partner registration module as well as other functional modules . Operating system can provide an operating system functionality for system . Partner registration module can provide functionality for registering a partner as will be described in more detail below. System can also be part of a larger system. Thus system can include one or more additional functional modules to include the additional functionality. For example functional modules may include modules that are part of the Oracle Access Manager product from Oracle Corporation.

Processor can also be operatively coupled via bus to a database . Database can store data in an integrated collection of logically related records or files. Database can be an operational database an analytical database a data warehouse a distributed database an end user database an external database a navigational database an in memory database a document oriented database a real time database a relational database an object oriented database or any other database known in the art.

According to the embodiment the partner registration module can include three features. The first feature is that the partner registration module can support existing registration agents such as OAM agents and OSSO agents identified in as functional blocks OAM agents and OSSO agents . According to the embodiment the partner registration module can generate an artifact such as a configuration file that each existing registration agent uses to register a partner. For example the partner registration module can generate an OAM configuration file such as an ObAccessClient.xml file for an OAM agent. As another example the partner registration module can generate an OSSO configuration file such as an osso.conf file for an OSSO agent.

The second feature is that the partner registration module can be extendible so that it can support any future partner registration agents identified in as functional block NGAM agents . This means that the partner registration module can be configured to produce any necessary artifacts required by partner registration agents that are developed in the future.

The third feature is that the partner registration module can support partner registration processes under two secure modes out of band mode and in band mode identified in as functional blocks out of band mode and in band mode . In out of band mode a security administrator does not delegate access rights to the partner administrator and the partner administrator must send a request file to the security administrator requesting to register the partner. The security administrator subsequently registers the partner and sends a response object back to the partner administrator. In an in band mode a security administrator delegates access rights to a partner administrator and allows the partner administrator to run an automated remote registration tool which generates an external event in order to register the partner.

At step according to the embodiment security admin provisions the partner in an NGAM server. The provisioning of the partner includes transmitting XML files to a user interface tool identified in as NGAM admin console . At step security admin receives a response from NGAM admin console and generates response metadata. The response can be specific to the type of partner being registered. Security admin stores the response metadata in a response object such as one or more XML files identified in as XML files . At step security admin transmits XML files to application admin to enable application admin to complete the configuration of an agent. At step application admin applies the response object using tool to deploy the agent. The application of the response object can include creating an artifact where the artifact can bootstrap the agent. The successful deployment of the agent is identified in as NGAM agent deployment .

According to the embodiment backward compatibility is provided and thus the provisioning of current agents such as OSSO and OAM agents does not change. For example application admin receives an osso.conf file when application admin is an OSSO agent. Likewise application admin receives an ObAccessClient.xml file when application admin is an OAM agent.

At step application admin runs tool . Tool can contain parameters based on the type of agent that application admin is. Tool can then transmit an external event to an SSO controller not shown through an API call identified in as API call . At step the partner application is registered and response metadata is generated. The response metadata is then stored in a response object. At step the response object is transmitted to application admin . The response object is in a specific format expected by the partner application. At step application admin applies the response object using tool to deploy the agent. The application of the response object can include creating an artifact where the artifact can bootstrap the agent. The successful deployment of the agent is identified in by NGAM agent deployment .

The illustrated embodiment also includes server instance . In one embodiment of the invention server instance is a WebLogic Server WLS instance. Server instance includes NGAM.ear archive . As one of ordinary skill in the art would readily appreciate an Enterprise Archive EAR is a file format for packaging one or more modules in a single archive so that the deployment of the various modules onto an application server occur simultaneously. NGAM.ear archive includes OAM proxy OSSO proxy controller which is an SSO controller remote registration of partners module partner and trust module and system configuration identified in as System Config .

According to the illustrated embodiment of the invention the remote registration of partners occurs through external events. In the illustrated embodiment remote registration tool triggers event which is sent to controller through a protocol binding layer. OAM proxy directly invokes an API on partner and trust module to lookup specific key and configuration information. After receiving a response remote registration tool generates an ObAccessClient.xml file and stores the file at web server instance .

Likewise in the illustrated embodiment remote registration tool triggers event which is sent to controller though a protocol binding layer. OSSO proxy directly invokes an API on partner and trust module to lookup specific key and configuration information. After receiving a response remote registration tool generates an osso.conf file and stores the file at web server instance .

According to the embodiment web server instance includes partner registration module NGAM PR Tool Apache server and web gate where web gate includes an ObAccessClient.xml file. Web server instance includes partner registration module NGAM PR Tool Apache server and mod osso module where mod osso module includes an osso.conf file. Server instance includes NGAM.ear archive . As one of ordinary skill in the art would readily appreciate an EAR is a file format for packaging one or more modules in a single archive so that the deployment of the various modules onto an application server occurs simultaneously. NGAM.ear archive includes OAM proxy OSSO proxy Controller which is an SSO controller NGAM partner registration module partner and trust module and system configuration identified in as System Config .

According to the embodiment of the invention functional module SSO REG can perform OSSO partner registration operations in two secure modes out of band mode identified in as functional block and in band mode identified in as functional block . In an out of band mode functional module SSO REG can create a request object used in the OSSO partner registration process SSO REG Req.xml identified in as functional block . In an in band mode functional module SSO REG can create a request object used in the OSSO partner registration process API call SSO REG EVT identified in as functional block . In either an out of band mode or an in band mode functional module SSO REG can create a response object used in the OSSO partner registration process SSO REG Res.xml identified in as functional block . Functional module SSO REG can then use the response object to create a configuration file for the OSSO partner registration process osso.conf file identified in as functional block .

According to the embodiment of the invention functional module OAM REG can perform OAM partner registration operations in two secure modes out of band mode identified in as functional block and in band mode identified in as functional block . In an out of band mode functional module OAM REG can create a request object used in the OAM partner registration process OAM REG Req.xml identified in as functional block . In an in band mode functional module OAM REG can create a request object used in the OAM partner registration process API call OAM REG EVT identified in as functional block . In either an out of band mode or an in band mode functional module OAM REG can create a response object used in the OAM partner registration process OAM REG Res.xml identified in as functional block . Functional module OAM REG can then use the response object to create a configuration file for the OAM partner registration process ObAccessClient.xml file identified in as functional block .

According to an embodiment of the invention a version of a partner registration tool i.e. partner registration tool of can be initiated from a command line interface. As one of ordinary skill in the art would readily appreciate a command line interface is an interface which allows a user to interact with a software module by typing commands to perform specific tasks. The next section describes the command line version of the partner registration tool including the different parameters of the command line version. Below is an example of the command line version of the partner registration tool 

The ToolLocation parameter identifies a version of the two versions of the partner registration tool to invoke. As previously discussed the partner registration tool comprises a partner registration module that is run on a client e.g. partner registration module NGAM PR Tool or partner registration module NGAM PR Tool of and a partner registration module that is run on a server e.g. NGAM partner registration module of . The ToolLocation parameter can have one of two values Clnt and Srvr . The Clnt value invokes the partner registration module that is run on a client and the Srvr value invokes the partner registration module that is run on a server. According to the embodiment the ToolLocation parameter can have a default value of either Clnt or Srvr. If a user types the ToolLocation parameter at a command line interface without also typing a value the version of the partner registration tool that corresponds to the default value is invoked.

The PartnerType parameter identifies a partner type that is to be registered and thus identifies a functional module of the three functional modules configured to generate configuration files to invoke. As previously discussed the partner registration tool comprises a functional module for the OSSO partner registration process e.g. functional module SSO REG of a functional module for the OAM partner registration process e.g. functional module OAM REG of and a functional module that can support next generation agents e.g. functional module NGAM AREG of . The PartnerType parameter can have one of three values OSSO OAM and NGAM Agent. The OSSO value invokes the functional module for the OSSO partner registration process. The OAM value invokes the functional module for the OAM partner registration process. The NGAM Agent value invokes the functional module that can support next generation agents. According to the embodiment the PartnerType parameter can have a default value of either OSSO OAM or NGAM Agent. If a user types the PartnerType parameter at a command line interface without also typing a value the functional module of the partner registration tool that corresponds to the default value is invoked.

The SecureMode parameter identifies a secure mode of the two secure modes that a partner registration process can operate in. As previously discussed a partner registration process can operate in one of two secure modes out of band mode and in band mode. The SecureMode parameter can have one of two values Out of Band and In Band. The Out of Band value indicates that the partner registration process should operate in an out of band mode and the In Band value indicates that the partner registration process should operate in an in band mode. According to the embodiment the SecureMode parameter can have a default value of either Out of Band or In Band. If a user types the SecureMode parameter at a command line interface without also typing a value the partner registration process operates in a secure mode that corresponds to the default value.

The RgstrPr parameter is used to perform input and output partner registration processing depending on a tool location a partner type and a security mode. The RgstrPr parameter can take a file name as an input and a file name as an input.

In an embodiment where a PartnerType parameter includes a value of OSSO the RgstrPr parameter can be used to perform input and output OSSO partner registration processing. Specifically in an embodiment where a ToolLocation parameter includes a value of Clnt a PartnerType parameter includes a value of OSSO and a SecurityMode parameter includes a value of In Band the RgstrPr parameter can be used to generate an API call SSO REG EVT and to send the API call to a controller as shown in the below example 

In an alternate embodiment where a ToolLocation parameter includes a value of Clnt a PartnerType parameter includes a value of OSSO and a SecurityMode parameter includes a value of Out of Band the RgstrPr parameter can be used to generate an XML file SSO REG Req.xml and to send the XML file to a security administrator as shown in the below example 

In an alternate embodiment where a ToolLocation parameter includes a value of Srvr a PartnerType parameter includes a value of OSSO and a SecurityMode parameter includes a value of In Band the RgstrPr parameter can be used to generate an XML file SSO REG Res.xml and to send the XML file to an application administrator as shown in the below example 

In an alternate embodiment where a ToolLocation parameter includes a value of Srvr a PartnerType parameter includes a value of OSSO and a SecurityMode parameter includes a value of Out of Band the RgstrPr parameter can be used to generate an XML file SSO REG Res.xml and to send the XML file to an application administrator as shown in the below example 

In an embodiment where a PartnerType parameter includes a value of OAM the RgstrPr parameter can be used to perform input and output OAM partner registration processing. Specifically in an embodiment where a ToolLocation parameter includes a value of Clnt a PartnerType parameter includes a value of OAM and a SecurityMode parameter includes a value of In Band the RgstrPr parameter can be used to generate an API call OAM REG EVT and to send the API call to a controller as shown in the below example 

In an alternate embodiment where a ToolLocation parameter includes a value of Clnt a PartnerType parameter includes a value of OAM and a SecurityMode parameter includes a value of Out of Band the RgstrPr parameter can be used to generate an XML file OAM REG Req.xml and to send the XML file to a security administrator as shown in the below example 

In an alternate embodiment where a ToolLocation parameter includes a value of Srvr a PartnerType parameter includes a value of OAM and a SecurityMode parameter includes a value of In Band the RgstrPr parameter can be used to generate an XML file OAM REG Res.xml and to send the XML file to an application administrator as shown in the below example 

In an alternate embodiment where a ToolLocation parameter includes a value of Srvr a PartnerType parameter includes a value of OAM and a SecurityMode parameter includes a value of Out of Band the RgstrPr parameter can be used to generate an XML file OAM REG Res.xml and to send the XML file to an application administrator as shown in the below example 

The RgstrPr Final parameter is used to generate a configuration file to confirm the partner registration process based on the partner type. The RgstrPr Final parameter can take a file name as an input and a file name as an output. In an embodiment of the invention the RgstrPr Final parameter can be used to generate an OSSO configuration file as shown in the below example 

In another embodiment of the invention the RgstrPr Final parameter can be used to generate an OAM configuration file as shown in the below example 

According to the embodiment of the invention at web server an administrator of a partner application identified in as application admin requests that a partner registration module that is run on a client identified in as tool create a request object. Tool creates a request object containing the specific partner application details and then transmits the request object to a security administrator identified in as security admin at NGAM access server . In an embodiment where the partner registration process is an OSSO partner registration process the request object contains a superset of elements based on the OSSO partner registration process. In an alternative embodiment where the partner registration process is an OAM partner registration process the request object contains a superset of elements based on the OAM partner registration process.

According to the embodiment tool creates metadata for the request object in an XML file format identified in as XML files and transmits the request object to security admin . In an embodiment involving an OSSO partner registration process metadata produced by tool includes an SSO REG Req.xml file with OSSO parameters in an XML format. In an alternate embodiment involving an OAM partner registration process metadata produced by tool includes an OAM REG Req.xml file with OAM parameters in an XML format.

At NGAM access server after receiving XML files a partner registration module that is run on a server identified in as tool interacts with tool to provision the partner registration. Specifically at step according to the embodiment security admin provisions the partner in NGAM access server using tool . The provisioning of the partner includes transmitting XML files to NGAM admin console . At step tool receives a response and generates a response object in a format expected by application admin . At step tool transmits the response object in the format identified in as XML files to application admin .

At step application admin applies the response object transmitted by security admin using tool to deploy the agent. The successful deployment of the agent is identified in as NGAM agent deployment . According to the embodiment backward compatibility is provided and thus the provisioning of current agents such as OSSO and OAM agents does not change. For example according to an embodiment an OSSO functional module of tool not shown can generate a modified osso.conf file configured to bootstrap a mod osso module. According to an alternate embodiment an OAM functional module of tool not shown can generate an ObAccessClient.xml file configured to bootstrap an OAM webgate.

At step module SSO REG generates metadata identified in as metadata in response to a request by application admin where the metadata includes specific OSSO partner details stores the metadata in an request object SSO REG Req.xml identified in as XML files and sends the request object to security admin . At step module SSO REG provisions the OSSO partner in the NGAM server. The provisioning of the partner includes transmitting XML files to NGAM admin console . At step module SSO REG generates a response object SSO REG.xml identified in as XML files . According to the embodiment the response object is in the same XML file format as the request object.

At step module SSO REG transmits the response object back to application admin . At step module SSO REG generates an osso.conf file based on the response object transmitted by module SSO REG . At step application admin places the osso.conf file in the appropriate directory and bootstraps an OSSO agent not shown which resides at HTTP server .

To further understand the out of band OSSO partner registration process the next section describes the command line version of the partner registration tool and parameters for an OSSO partner in an out of band mode. An example of the command line version of module NGAM PR ClntTOOL which produces a SSO REG Req.xml file is shown below 

The parameters ToolLocation PartnerType SecureMode and RgstrPr have previously been described. To produce the SSO REG Req.xml file the details of input file OSSO REG Para should be specified in the command line version of the partner registration tool. The details of OSSO REG Para are described below.

The oracle home path parameter indicates a directory path of an Oracle HTTP server. The site name parameter indicates an effective host name and port of the partner application being registered by the partner registration process. The mod osso url parameter indicates an effective uniform resource locator URL of the partner application. The virtualhost parameter is an optional parameter that is only included if an HTTP virtual host is being registered. The update mode parameter is an optional parameter which causes the partner registration tool to either create a new partner registration record delete an existing partner registration record or modify an existing partner registration record. The remote midtier parameter is an optional parameter which causes the partner registration tool to register the partner application at a remote midtier. The config file parameter indicates the location of the osso.conf file. The parameter is optional except when the virtualhost parameter or the remote midtier parameter is specified. The admin info parameter is an optional parameter which indicates a user name of the mod osso administration. The admin id parameter is an optional parameter which indicates any additional information such as an e mail address about the administrator.

As can be seen in the above example the parameters of the SSO REG Req.xml file are determined from the parameters of the OSSO REG Para input file.

Next an example of the command line version of module NGAM PR SvrTOOL which produces a SSO REG Res.xml file is shown below 

The SSO REG Res.xml file can be a basis for creating a osso.conf file. A sso server version parameter identifies a token format to use. A cipher key parameter indicates a shared key used to encrypt tokens. A site id parameter identifies the partner application to a SSO server. A login url parameter indicates a URL of the SSO server in other words the URL that a user of a partner application is redirected for authentication. A logout url parameter indicates where to redirect a user of a partner application to invoke a global SSO logout.

Next an example of the command line version of module NGAM PR ClntTOOL which produces an osso.conf file is shown below 

The parameters of the osso.conf file are the same as the parameters for the SSO REG Res.xml file described above.

At step module OAM REG generates metadata identified in as metadata in response to a request by application admin where the metadata includes specific OAM partner details stores the metadata in an request object OAM REG Req.xml identified in as XML files and sends the request object to security admin . At step module OAM REG provisions the OAM partner in the NGAM server. The provisioning of the partner includes transmitting XML files to NGAM Admin Console . At step module OAM REG generates a response object OAM REG Res.xml identified in as XML files . According to the embodiment the response object is in the same XML file format as the request object.

At step module OAM REG transmits the request object back to application admin . At step module OAM REG generates an ObAccessClient.xml file based on the response object transmitted by module OAM REG . At step application admin places the ObAccessClient.xml file in the appropriate directory and bootstraps an OAM agent not shown which resides at HTTP server .

Thus according to the embodiment of the invention modules OAM REG and OAM REG support configuration operations between HTTP server and NGAM access server to exchange a request object and a response object and to produce an ObAccessClient.xml file. In the embodiment there can be frequently polling to exchange configuration parameters between HTTP server and NGAM access server .

To further understand the out of band OAM partner registration process the next section describes the command line version of the partner registration tool and parameters. An example of the command line version of module NGAM PR ClntTOOL which produces an OAM REG Req.xml file is shown below 

To produce the OAM REG Req.xml file the details of parameter file OAM REG Para can be specified in the command line version of module NGAM PR ClntTOOL . The OAM REG Para file includes the following parameters Name Hostname Port Debug Debug File Name Transport Security Maximum Client Session Time Number of Threads Policy Manager API Support Mode Audit to Database Audit to File Audit File Name Audit File Size Buffer Size File Rotation Interval Engine Configuration Refresh Period URL Prefix Reload Period Password Policy Reload Period Maximum Elements in User Cache User Cache Timeout Maximum Elements in Policy Cache Policy Cache Timeout SNMP State SNMP Agent Registration Port Session Token Cache and Maximum Elements in Session Token Cache.

The Name parameter identifies the name of the access server. The Hostname parameter identifies the name of the web server that is hosting the access server. The Port parameter indicates the port number the access server is listening to. The Debug parameter indicates whether debugging is on or off. The Debug File Name parameter indicates the name of the access server s debug file.

The Transport Security parameter indicates a level of transport security to and from the access server. Available options are 1 Open 2 Simple and 3 Cert. Open indicates no transport security. Simple indicates encrypted transport security with prepackaged certificates. Cert indicates encrypted transport security. The Maximum Client Session Time parameter indicates a duration in hours for a connection between an access gate and an access server. The Number of Threads parameter indicates a maximum number of service threads allowed on the access server. By default the number of threads is set to 60. The Policy Manager API Support Mode parameter indicates whether a policy manager engine within the access server is enabled.

The Audit to Database parameter indicates that audit information is to be written to a database. The Audit to File parameter indicates that audit information is to be written to a file. The Audit File Name parameter indicates a path of an audit file. The Audit File Size parameter indicates a maximum size of an audit buffer in bytes. The Buffer Size parameter indicates a size of an audit buffer in bytes. The File Rotation Interval indicates a time in seconds that an audit file can exist.

The Engine Configuration Refresh Period parameter indicates a frequency in seconds of configuration updates to an access server. The URL Prefix Reload Period indicates a frequency in seconds with which new URLs are recognized by the access server. The Password Policy Reload Period indicates a frequency in seconds with which new password policies are recognized by the access server.

The Maximum Elements in User Cache parameter indicates a number of authenticated users that can be saved in a cache for the access server. The User Cache Timeout parameter indicates a maximum time in seconds for inactive user data to reside in cache. The Maximum Elements in Policy Cache parameter indicates a maximum number of elements that can be stored in a policy cache. The Policy Cache Timeout parameter indicates a maximum time in seconds for inactive policy data to reside in cache.

The SNMP State parameter specifies whether Simple Network Management Protocol SNMP is enabled or not. The SNMP Agent Registration Port parameter indicates a port number of the SNMP agent. The Session Token Cache parameter enables a session token cache that can be used when decrypting a user s session token on an access server. The Maximum Elements in Session Token Cache parameter indicates a maximum number of decrypted session tokens that can be kept in a cache.

Next an example of the command line version of module NGAM PR SvrTOOL which produces a OAM REG Res.xml file is shown below 

Next an example of the command line version of module NGAM PR ClntTOOL which produces an ObAccessClient.xml file is shown below 

The ObAccessClient.xml file includes the following configuration parameters AccessGate Description State Hostname Port AccessGate Password Debug Maximum User Session Time Idle Session Time Maximum Connections Transport Security IPValidation IPValidation Exception Maximum Client Session Time Failover Threshold Access Server Timeout Threshold Sleep For Maximum Elements in Cache Cache Timeout Impersonation Username Impersonation Password Policy Manager API Support Mode Primary HTTP Cooke Domain Preferred HTTP Host DenyOnNotProtected CachePragmaHeader CacheControlHeader LogOutUrls and User Defined Parameters.

The AccessGate parameter indicates the name of an access gate. The Description parameter indicates additional information to identify the access gate. The State parameter indicates whether the access gate is enabled or disabled. The Hostname parameter indicates a name of the machine hosting the access gate. The Port parameter identifies a web server port protected by the access gate when deployed as a web gate. The Port parameter is an optional parameter.

The AccessGate Password parameter indicates a unique password for the access gate. The Debug parameter enables debugging. The Maximum User Session Time parameter indicates a maximum amount of time in seconds that a user s authentication session is valid regardless of their activity. The Idle Session Time parameter indicates an amount of time in seconds that a user s authentication session remains valid without accessing any resources protected by the access gate. The Maximum Connections parameter indicates a maximum number of connections that an access gate can establish. The AccessGate Password parameter is an optional parameter.

The Transport Security parameter indicates a level of transport security to and from the access server. Available options are 1 Open 2 Simple and 3 Cert. Open indicates no transport security. Simple indicates encrypted transport security with prepackaged certificates. Cert indicates encrypted transport security. The IPValidation parameter is used to determine whether a client s IP address is the same as a stored IP address generated for single sign on. The IPValidationException parameter indicates a list of IP addresses that are excluded from IP address validation. The Maximum Client Session Time parameter indicates a maximum amount in hours for a connection maintained to the access server by the access gate. The Failover Threshold parameter indicates a number that represents a point where an access gate opens connections to secondary access servers.

The Access Server Timeout Threshold indicates a number in seconds to wait for a response from the access server. The Sleep For parameter indicates a number in seconds that represents how often the access gate checks its connections to access server. The Maximum Elements in Cache parameter indicates a number of elements maintained in the cache. The Cache Timeout parameter indicates an amount of time that cached information remains in a cache of the access gate when neither used nor references.

The Impersonation Username parameter indicates a name of a trusted user created to be a user for impersonations. The Impersonation Password parameter indicates a password for the trusted user to be used for impersonation. The Policy Manager API Support Mode parameter indicates whether a policy manager engine within the access server is enabled. The Primary HTTP Cookie Domain parameter describes a web server domain on which an access gate is deployed. The Preferred HTTP Host parameter defines how a host name appears in all HTTP requests when a user attempts to access a protected web server.

The DenyOnNotProtected parameter determines whether all requests for web pages on a web server protected by a web gate are denied unless access is explicitly allowed by a policy. The CachePragmaHeader and CacheControlHeader parameter each control a browser s cache. The LogOutUrls parameter configures one or more specific URLs that log out a user. The User Defined Parameters parameter allows a user to define his own set of parameters.

According to the embodiment of the invention at NGAM access server a security administrator identified in as security admin delegates provisioning rights to an application administrator identified in as application admin of NGAM web server using NGAM admin console . After security admin has delegated provisioning rights to application admin application admin can use NGAM admin console or a partner registration tool identified in as tool utilizing specific credentials and authorizations provided by security admin .

At step according to the embodiment of the invention application admin runs a remote registration tool. According to the embodiment the remote registration tool includes tool . Tool can contain parameters based on the types of agents e.g. OSSO or OAM agents . For an OSSO partner registration process a functional module of tool has specific parameters for an OSSO agent. For an OAM partner registration process a functional module of tool has specific parameters for an OAM agent. According to the embodiment tool then transmits an external event identified in as API call to a NGAM controller e.g. SSO controller not shown . API call automatically registers the partner application with the NGAM server using NGAM admin console .

At step based on API call a partner registration tool identified in as tool creates a response object. The generated response object can be a specific format expected by an agent such as an OSSO agent or an OAM agent. For example in an OSSO partner registration process the response object can be used to create an osso.conf file. As another example in a OAM partner registration process the response object can be used to create an ObAccessClient.xml file.

At step tool sends the response object to tool at NGAM web server . At step tool applies the response object to deploy and restart a specific agent such as an OSSO agent or an OAM agent for bootstrapping of a communication between the agent and NGAM access server . In other words tool interacts with the agent e.g. OSSO agent or OAM agent to support backward compatibility. In an embodiment implementing an OSSO partner registration process a functional module of tool produces an osso.conf file. In an alternate embodiment implementing an OAM partner registration process a functional module of tool produces an ObAccessClient.xml file.

According to the embodiment of the invention at NGAM access server security admin delegates provisioning rights to application admin of HTTP server using NGAM admin console . After security admin has delegated provisioning rights to application admin application admin can use NGAM admin console or module SSO REG utilizing specific credentials and authorizations provided by security admin . Application admin then runs a remote registration tool i.e. modules NGAM RR ClntTool and NGAM RR SvrTool for an OSSO partner registration process.

At step module SSO REG creates an external event and transmits the external event to a SSO controller not shown upon a request from application admin . According to the embodiment of the invention the external event can be created as an API call OSSO Partner Registration Event or SSO REG EVT identified in as API call . Module SSO REG receives API call sent by module SSO REG via the SSO controller not shown and automatically registers the partner application using NGAM admin console . At step module SSO REG generates a response object SSO REG Res.xml based on API call . According to the embodiment the response object is in an XML file format expected by application admin . At step module SSO REG transmits the response object back to application admin .

At step module SSO REG generates an osso.conf file based on the response object transmitted by module SSO REG . At step application admin places the osso.conf file in the appropriate directory and bootstraps an OSSO agent not shown which resides at HTTP server .

To further understand the in band OSSO partner registration process the next section describes the command line version of the partner registration tool and parameters for an OSSO partner in an in band mode. An example of the command line version of module NGAM RR ClntTOOL which initiates the OSSO partner registration process in an in band mode is shown below 

The detailed parameters of OSSO REG Para are described above in relation to the OSSO partner registration process in an out of band mode.

Next an example of the command line version of module NGAM RR SvrTOOL which produces a SSO REG Res.xml file is shown below 

Next an example of the command line version of module NGAM RR ClntTOOL which produces an osso.conf file is shown below 

The parameters of the osso.conf file are the same as the parameters for the SSO REG Res.xml file described above in relation to the OSSO partner registration process in an out of band mode.

According to the embodiment of the invention at NGAM access server security admin delegates provisioning rights to application admin of HTTP server using NGAM admin console . After security admin has delegated provisioning rights to application admin application admin can use NGAM admin console or module OAM REG utilizing specific credentials and authorizations provided by security admin . Application admin then runs a remote registration tool i.e. modules NGAM RR ClntTool and NGAM RR SvrTool for an OAM partner registration process.

At step module OAM REG creates an external event and transmits the external event to a SSO controller not shown upon a request from application admin . According to the embodiment of the invention the external event can be created as an API call OAM Partner Registration Event or OAM REG EVT identified in as API call . Module OAM REG receives API call sent by module OAM REG via the SSO controller not shown and automatically registers the partner application using NGAM admin console . At step module OAM REG generates a response object OAM REG Res.xml based on API call . According to the embodiment the response object is in an XML file format expected by application admin . At step module OAM REG transmits the response object back to application admin .

At step module OAM REG generates an ObAccessClient.xml file based on the response object transmitted by module OAM REG . At step application admin places the ObAccessClient.xml file in the appropriate directory and bootstraps an OAM agent not shown which resides at HTTP server .

Thus according to the embodiment of the invention modules OAM REG and OAM REG support configuration operations between HTTP server and NGAM access server to exchange a request object and a response object and to produce an ObAccessClient.xml file. In the embodiment there can be frequently polling to exchange configuration parameters between HTTP server and NGAM access server .

To further understand the out of band OAM partner registration process the next section describes the command line version of the partner registration tool and parameters. An example of the command line version of module NGAM RR ClntTOOL which initiates the OAM partner registration process in an in band mode is shown below 

The detailed parameters of OAM REG Para are described above in relation to the OAM partner registration process in an out of band mode.

Next an example of the command line version of module NGAM RR SvrTool which produces a OAM REG Res.xml file is shown below 

The detailed parameters of OAM REG Para are described above in relation to the OAM partner registration process in an out of band mode.

Next an example of the command line version of module NGAM RR ClntTool which produces an ObAccessClient.xml file is shown below 

The illustrated embodiment includes NGAM controller . NGAM controller is a binding block for NGAM and enables transparent communications between different NGAM components. NGAM controller creates a hub for adding pluggable components. NGAM controller is configured to receive events from OSSO OAM agent . In an embodiment OSSO OAM agent is an OSSO agent. In another embodiment OSSO OAM agent is an OAM agent.

According to the embodiment an NGAM controller layer comprises the following components a master controller events event handlers flow controllers and individual engine controllers. Individual engine controllers can communicate with each other by events. A master controller can orchestrate NGAM event flows through flow controllers. Engine controllers can act as event handlers as well based flow controllers.

A master controller can act as a communication hub for all controllers. A protocol binding layer PBL can call the master controller with an AmRequest object. The PBL is an interface for agents and proxies to communicate with an NGAM server. The PBL can convert protocol specific messages to standard messages and vice versa. The PBL can include transport handlers and protocol handlers. A transport handler can handle a transport protocol such as HTTP and Transmission Control Protocol Internet Protocol TCP IP . A protocol handler can handle a message protocol such as Security Assertion Markup Language SAML Network Access Protection NAP eXtensible Access Control Markup Language XACML and an OSSO protocol. The master controller can use the AmRequest object to create a corresponding event. Specifically the PBL can add an event hint to the AmRequest object and the master controller can utilize an event factory to create an event based on the event hint. The master controller can then pass the created event to registered event handlers also identified as controllers .

A flow controller can define methods to control the event flow. If the PBL decides a base event for a certain request is the basis of a request a controller which handles the first event can set the flow controller for the created event. For example when receiving an authentication request the PBL can set a base Event Hint as SSO AUTHENTICATE. The master controller than can create an sso authenticate event for the base Event Hint. The event handler chosen for the sso authenticate event can become a SSO controller and acts as the flow controller and is responsible for orchestrating the event flow with respect to SSO authentication requests. Based on the previous events and status the SSO controller can decide the next event to be process.

According to the embodiment NGAM controller includes a PBL a master controller and a ConfigController also known as a SSO controller . The illustrated embodiment also includes a partner registration module identified in as partner registration module and a partner and trust module identified in as P T module . As previously described in an in band mode a partner registration module can interact with an NGAM controller to handle external events in a partner registration process. This section details how a partner registration process can be achieved by interactions with NGAM controllers according to an embodiment of the invention.

First according to the embodiment OSSO OAM agent transmits an external event to PBL of NGAM controller . In an embodiment where OSSO OAM agent is an OSSO agent OSSO OAM Agent transmits an SSO REG EVT . SSO REG EVT is used to ultimately create an osso.conf file to complete an OSSO partner registration process. In another embodiment where OSSO OAM agent is an OAM agent OSSO OAM Agent transmits an OAM REG EVT . OAM REG EVT is used to ultimately create a ObAccessClient.xml file to complete an OAM partner registration process.

Next PBL changes external event into an AmRequest object . PBL then transmits AmRequest object to master controller of NGAM controller . Master controller then creates a standard NGAM event Register Agent based on AmRequest object and transmits the event to SSO controller of NGAM controller . SSO controller manages the event flow and transmits response to master controller .

Master controller then verifies OSSO OAM agent with an event Validate Client . Validate Client is transmitted to partner registration module and subsequently transmitted to P T module . Response is then transmitted back to partner registration module which is subsequently transmitted back to master controller . Master controller then requests that partner registration module generate a key by transmitting a standard event Create Client Key . Partner registration module subsequently generates a symmetric key for partner application and transmits response to master controller . Master controller then transmits the symmetric key to PBL via Send Client Key and PBL transmits the symmetric key to OSSO OAM Agent via Client Key .

According to the embodiment the created key is then verified. Specifically OSSO OAM agent transmits Verify Client Key to PBL . PBL then creates an object Am Request and transmits Am Request to master controller . Master controller then transmits Verify Client Regist to SSO controller and SSO controller transmits response to master controller . Master controller then requests a client key by transmitting Get Client Key to partner registration module and in response partner registration module transmits the client key via response . Master controller then verifies the client key by transmitting Verify Key to partner registration module and in turn partner registration module transmits Verify Key to P T module . P T module then confirms that the client key is verified and transmits response to partner registration module and in turn partner registration module transmits response to master controller . Master controller then notifies PBL of the successful verification by transmitting Registr Success to PBL and in turn PBL transmits Registr Success to OSSO OAM agent .

According to the embodiment application application and application each transmit a request to register the respective partner application. For each application Key Gen generates a symmetric key and replies to each application with the generated key. In the illustrated embodiment module Key Gen generates symmetric key KEY for application i.e. an OAM agent and transmits KEY to application . Module Key Gen also generates symmetric key KEY for application i.e. an OSSO agent and transmits KEY to application . Module Key Gen also generates symmetric key KEY for application i.e. an NGAM agent and transmits Key to application .

In the embodiment NGAM remote registration of partners module then transmits mapping information of the generated key key and the type of agent to partner trust module . In the illustrated embodiment the mapping information indicates that KEY is mapped to application KEY is mapped to application and KEY is mapped to application . Partner trust module then persists the mapping in system configuration . Specifically partner trust module persists the mapping in storage . Partner trust module also provides APIs for an SSO controller or authentication engine to retrieve the partner keys and agent configuration.

According to the embodiment module Key Gen generates a symmetric key randomly with a different encryption method dependent on a type of agent. For example to generate a symmetric key of an OSSO agent module Key Gen can use and Advanced Encryption Standard AES which includes a 128 bit block cipher supporting keys of 128 192 and 256 bits.

As previously discussed module Partner Trust of provides APIs for an SSO controller or authentication engine to retrieve the partner keys and agent configuration. According to an embodiment of the invention the APIs construct a logical object which represents a partner application identified as an PartnerInfo object and calls a partner manager logical object identified as an PartnerManager object to add the PartnerInfo object to a storage.

The PartnerInfo and PartnerInfo String x methods create a PartnerInfo object with a random or specified ID. The PartnerInfo.setBasicProperty String key String value method adds a regular property name value pair. The PartnerInfo.setKey String identifier Key k method adds a key with a specified name. The PartnerManager.setPartnerInfo PartnerInfo newInfo method adds the partner information to the Partner and Trust storage.

According to the embodiment system includes multiple access server instances access server which is an access server instance which uses an open transport security level access server which is an access server instance which uses a simple transport security level and access server instance which is an access server which uses a cert transport security level. When OAM agent attempts to register with an access server system will connect OAM agent to an access server which uses a same transport security level as a requested transport security level of OAM agent. For example if OAM agent requests to register using an open transport security level then system will connect OAM agent with access server . However if OAM agent requests to register using a simple transport security level then system will connect OAM agent with access server . Likewise if OAM agent requests to register using a cert transport security level then system will connect OAM agent with access server . In an alternate embodiment if there is not an available access server instance using a transport security level requested by OAM agent then system transmits an error message to OAM agent .

At the partner registration module creates a request object and transmits the request object to an access server where the request object includes information of a partner application. At the partner registration module provisions the partner application in the access server based on the request object. At the partner registration module generates a response object based on the provisioning of the partner application. At the partner registration module transmits the response object to a web server. At the partner registration module applies the response object to deploy the partner application at the web server.

Thus according to an embodiment of the invention a partner registration module can support partner registration operations under two secure modes out of band and in band. The partner registration operations can be performed through the partner registration module. Therefore according to the embodiment partner registrations can be automated and provide secure access to key systems while still retaining accessibility. Furthermore the partner registration module can integrate diverse partner registration processes such as an OSSO partner registration process and an OAM partner registration process.

The features structures or characteristics of the invention described throughout this specification may be combined in any suitable manner in one or more embodiments. For example the usage of an embodiment one embodiment some embodiments certain embodiment certain embodiments or other similar language throughout this specification refers to the fact that a particular feature structure or characteristic described in connection with the embodiment may be included in at least one embodiment of the present invention. Thus appearances of the phrases an embodiment one embodiment some embodiments a certain embodiment certain embodiments or other similar language throughout this specification do not necessarily all refer to the same group of embodiments and the described features structures or characteristics may be combined in any suitable manner in one or more embodiments.

One having ordinary skill in the art will readily understand that the invention as discussed above may be practiced with steps in a different order and or with elements in configurations which are different than those which are disclosed. Therefore although the invention has been described based upon these preferred embodiments it would be apparent to those of skill in the art that certain modifications variations and alternative constructions would be apparent while remaining within the spirit and scope of the invention. In order to determine the metes and bounds of the invention therefore reference should be made to the appended claims.

