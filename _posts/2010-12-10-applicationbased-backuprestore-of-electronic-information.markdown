---

title: Application-based backup-restore of electronic information
abstract: Systems and methods for storing and restoring backup data. One method includes receiving, while a current view of an application is displayed in a user interface, a first user input requesting a history view associated with the current view of the application. The history view is displayed in response to the first user input, the history view including at least a first visual representation of an earlier version of the current view of the application, the earlier version including a first element. A second user input is received while the history view is displayed. The second user input requesting that the current view of the application be modified according to the earlier version, at least with regard to the first element. The current view of the application is modified in response to the second user input according to the earlier version, at least with regard to the first element.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08504527&OS=08504527&RS=08504527
owner: Apple Inc.
number: 08504527
owner_city: Cupertino
owner_country: US
publication_date: 20101210
---
This application is a continuation application of and claims priority to U.S. application Ser. No. 11 499 250 filed on Aug. 4 2006 now U.S. Pat. No. 7 860 839.

This application is generally related to the following jointly owned and co pending patent applications each incorporated herein by reference in its entirety 

The disclosed implementations relate generally to storing and restoring data. A hallmark of modern graphical user interfaces is that they allow a large number of graphical objects or items to be displayed on a display screen at the same time. Leading personal computer operating systems such as Apple Mac OS provide user interfaces in which a number of windows can be displayed overlapped resized moved configured and reformatted according to the needs of the user or application. Taskbars menus virtual buttons and other user interface elements provide mechanisms for accessing and activating windows even when they are hidden behind other windows.

With the sophisticated tools available users are encouraged not only to create and save a multitude of items in their computers but to revise or otherwise improve on them over time. For example a user can work with a certain file and thereafter save its current version on a storage device. The next day however the user may have had second thoughts about the revisions or may have come up with new ideas and therefore opens the file again.

The revision process is usually straightforward if the user wants to add more material to the file or make changes to what is there. But it is typically more difficult for a user who has changed his her mind about changes that were previously made and wants the file back as it was once before. Application programs for word processing typically let the user undo previous edits of a text at least up to a predefined number of past revisions. The undo feature also usually is configured so that the previously made revisions must be undone in reverse chronological order that is the user must first undo the most recently made edit then the second most recent one and so on. If the user saves and closes the document and thereafter opens it again it may not be possible to automatically undo any previous edits.

Systems and methods are provided for storing and restoring backup data. The backup data can relate to previous state of particular applications. The previous states of the applications can be presented in a backup interface. In one implementation a user can enter the backup interface from the application window e.g. iTunes . Views presented in the backup interface can represent past states of the application e.g. state of the iTunes library .

In general in one aspect a method is provided. The method includes receiving while a current view of an application is displayed in a user interface a first user input requesting that a history view associated with the current view of the application be displayed. The history view is displayed in response to the first user input the history view including at least a first visual representation of an earlier version of the current view of the application the earlier version including a first element. A second user input is received while the history view is displayed. The second user input requesting that the current view of the application be modified according to the earlier version at least with regard to the first element. The current view of the application is modified in response to the second user input according to the earlier version at least with regard to the first element.

Implementations of the method can include one or more of the following features. The first user input requesting the history view can be initiated in the current view of the application. The second user input can request that the modification be limited to the first element and wherein the modification modifies the current view of the application to include the first element and does not otherwise modify the current view of the application.

The first element can be a particular set of application data that is not stored as typical file data. The set of application data can include mail messages address book entries or audio data. The first visual representation can be included in a timeline presented in the history view the timeline including several visual representations of earlier versions of the current view of the application. The earlier versions of the current view of the application can be obtained at times defined by a schedule or by a rule. The earlier versions of the current view of the application can be obtained at times when at least one predefined event occurred.

The history view can further include an input control for modifying the timeline to include only at least one of the visual representations whose corresponding earlier version differs from the current view of the application. The history view can further include a rollover function providing that the timeline is displayed when a user controlled cursor is located over the timeline and that the timeline is not displayed when the user controlled cursor is not located over the timeline. The application can be an audio application and the first element can be a playlist. The application can be an e mail application and the first element can be an inbox. The application can be an e mail application and the first element can be a calendar. The application can be an address book application and the first element can be a directory of contacts. The application can be a messaging application and the first element can be a buddy list.

In general in one aspect a computer program product is provided. The computer program product includes instructions to generate on a display device a user interface. The user interface includes a view display area for presenting a current view of an application. The user interface also includes a history view display area for presenting a history view associated with the current view of the application the history view including at least a first visual representation of an earlier version of the current view of the application and an input control for initiating a restoration of the current view of the application according to at least a portion of the earlier version.

Implementations can include one or more of the following features. The earlier version can include at least a first element that a user can select and wherein initiation of the input control after the selection initiates the restoration of the current view of the application according to only the first element of the earlier version. The first visual representation can be included in a timeline presented in the history view the timeline including several visual representations of earlier versions of the current view of the application. The history view can further include another input control for modifying the timeline to include only at least one of the visual representations whose corresponding earlier version differs from the current view of the application.

In general in one aspect a method is provided. The method includes defining one or more criteria for capturing a state of a view of a user interface of an application. The state of the view is captured in accordance with the criteria. A prompt is received to suspend presentation of a current view and present a captured view. The captured view is reinstated into the current view of the user interface. Defining the one or more criteria can include receiving a user input in the user interface of the application setting one or more parameters associated with the one or more criteria.

In general in one aspect a method is provided. The method includes receiving while a current view of a system settings interface is displayed in a user interface a first user input requesting that a history view associated with the current view of the system settings interface be displayed. The history view is displayed in response to the first user input the history view including at least a first visual representation of an earlier version of the current view of the system setting interface the earlier version including one or more preferences. A second user input is received while the history view is displayed. The second user input requests that the current view of the system settings interface be modified according to the earlier version at least with regard to a first preference of the one or more preferences. The current view of the system settings interface are modified in response to the second user input according to the earlier version at least with regard to the first preference.

Implementations can include one or more of the following features. The system settings interface can be an input device settings interface and the one or more preferences are keyboard and mouse settings. The system settings interface can be a user interface settings interface and the one or more preferences are user interface preferences.

The details of the various aspects of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features aspects and advantages of the invention will become apparent from the description the drawings and the claims.

The computer also includes a local storage device and a graphics module e.g. graphics card for storing information and generating graphical objects respectively. The local storage device can be a computer readable medium. The term computer readable medium refers to any medium that includes data and or participates in providing instructions to a processor for execution including without limitation non volatile media e.g. optical or magnetic disks volatile media e.g. memory and transmission media. Transmission media includes without limitation coaxial cables copper wire fiber optics and computer buses. Transmission media can also take the form of acoustic light or radio frequency waves.

While modifications of a user interface view are described herein with respect to a personal computer it should be apparent that the disclosed implementations can be incorporated in or integrated with any electronic device that has a user interface including without limitation portable and desktop computers servers electronics media players game devices mobile phones email devices personal digital assistants PDAs embedded devices televisions other consumer electronic devices etc.

Systems and methods are provided for modifying an interface view e.g. a user interface view . The systems and methods can be stand alone or otherwise integrated into a more comprehensive application. In the materials presented below an integrated system and method for modifying a user interface view is disclosed. However one of ordinary skill in the art will recognize that the engines methods processes and the like that are described can themselves be an individual process or application part of an operating system a plug in an application or the like.

In one implementation the system and methods can be implemented as one or more plug ins that are installed and run on the personal computer . The plug ins are configured to interact with an operating system e.g. MAC OS X WINDOWS XP LINUX etc. and to perform the various functions as described with respect to the Figures. A system and method for modifying a user interface view can also be implemented as one or more software applications running on the computer . Such a system and method can be characterized as a framework or model that can be implemented on various platforms and or networks e.g. client server networks wireless networks stand alone computers portable electronic devices mobile phones etc. and or embedded or bundled with one or more software applications e.g. email media player browser etc. .

The computer includes the backup component that allows for the storage of versions of the computer s files or other items for example within the local storage or in an external storage repository. In one implementation the backup component also allows a user to select any of the stored versions and use it to initiate a restoration of that version in the computer.

Each application program can include an application programming interface API . The architecture can utilize API techniques to enhance application programs with further functionality. For example the API can link several applications together for providing a single service on all linked applications. Particularly the time machine architecture can utilize API techniques to enhance application programs with the time machine functionality. The API tools can link several applications to the time machine engine by using an API for providing a similar menu or icon for each application. For example the API can be used by the time machine when generating a backup version of a current state of the application. As another example the API can be used when the application is restored through the time machine to a state that corresponds to a backup version. Although API is shown in as part of application programs the API can be separate from the application programs . For example the API can be separately located and made available by the system for use by one or more of the application programs .

In one implementation the backup component provides back up and restoration capability for the system. Many different items or elements can be the subject of a backup in the system. For example folders files items information portions directories images system parameters playlists address books e mails e mail folders a state of an application or state of the system preferences e.g. user or system preferences and the like all can be candidates for archiving. Other types are also possible. In this example the backup component includes a local storage device and an external storage device . Versions can be stored on either of them. Any number of local and or external storage devices can be used by the backup component for storing versions. In one implementation no local storage is provided.

The backup component can interact with one or more of the applications using the corresponding API. In one implementation this can provide backing up of that application s files state or other items and can provide for user restoration of a selected backed up version to name two examples. In one implementation the backup component runs as a background task on an operating system that is not visible to the user. The backup component can be capable of running across multiple user accounts.

The backup component includes an activity monitoring engine . In one implementation the activity monitoring engine monitors for changes within applications e.g. application files or state that are targeted for backup operations. A change can also include the addition of new files or other data structures or deletion of existing ones.

In one implementation the activity monitoring engine is capable of discerning between a substantive change e.g. the text within a document has been modified and a non substantive change e.g. the play count within an iTunes playlist has been updated or several changes cancel each other out through its interaction with the application programs . The activity monitoring engine can for example create a list of modified elements to be used when a backup event is eventually triggered. In one implementation the activity monitoring engine can monitor the system for periods of inactivity. The activity monitoring engine can then trigger a backup event during a period of time in which the backup operation will not cause a system slowdown for an active user.

A preference management engine specifies some operating parameters of the backup component . In one implementation preference management engine contains user specified and or system default application parameters for the backup component . These can include settings for the details of capturing and storing the views. For example the preference management engine can determine the frequency of a backup capture the storage location for the backup versions the types of elements e.g. files or other items that are eligible for backup capture and the events which trigger a backup capture periodic or event driven etc. .

In one implementation the preference management engine can detect that a new storage device is being added to the system and prompt the user whether it should be included as a backup repository. Files and other items can be scheduled for a backup operation due to location e.g. everything on the C drive and within D photos a correlation with specific applications e.g. all pictures music e mail in an inbox an address book and system settings or a combination of strategies. Different types of items can be scheduled to be stored on different devices or on different segments of a storage device during a backup operation. In one implementation the backup component stores the versions in a format corresponding to a file system structure.

A backup management engine coordinates the collection storage and retrieval of views performed by the backup component . For example the backup management engine can trigger the activity monitoring engine to watch for activities that satisfy a requirement specified in the preference management engine .

A change identifying engine locates specific elements e.g. monitored files or other items within to determine if they have changed. The change identifying engine can be capable of discerning a substantive change from a non substantive change similar to the example described above for the activity monitoring engine . In one implementation the change identifying engine traverses a target set of elements e.g. files or other items comparing a previous version to the current version to determine whether or not a modification has occurred.

A backup capture engine locates views e.g. elements files or other items that are to be backed up. The backup capture engine can invoke the activity monitoring engine and or the change identifying engine for example to generate a capture list. The backup capture engine can then store copies of these elements in one or more targeted storage repositories. The backup capture engine can track multiple version copies of each item included in the backup repository.

The backup component includes a backup restoration engine to restore previous versions of views e.g. files or other items . In one implementation the backup restoration engine provides a user interface e.g. a graphical user interface where a user can select the item s to be restored.

As shown in a user has launched an iTunes application window available from Apple Computer in Cupertino Calif. which is currently presented in the foreground and a chat application and a mail application that are presented in the background. In particular the iTunes application is here displaying contents of the user s library which lists the user s songs. The iTunes application can be used for accessing playing and organizing media such as digital music pictures and video files.

The time machine application can be activated to back up or restore media content within the iTunes application or another application. In one implementation the user can activate a time machine session from the user interface using a user selectable time machine icon in the application launch bar . As another example the time machine session can be activated from the menu bar . The menu bar can include a time machine options menu in addition to the activation selection. The time machine options menu can include selections allowing a user to specify data to include in a particular backup. For example in iTunes the user can identify which content to back up e.g. playlists but not play counts purchased songs but not others etc. . In addition the user can recover songs that were previously included but are now missing from the iTunes library. For example the user can have made at least one backup of the missing songs at an earlier date and can enter the time machine to search for the missing songs or files in a backup snapshot of the iTunes application allowing for the restoration of a view corresponding to that prior time. As used herein a snapshot refers to a backup element stored in a historical archive that includes a backup of selected items or content as specified by the backup component . In other implementations the user can choose to enter the time machine directly from an operating system menu. In some implementations the time machine architecture can include several icons or menus available in other locations within the user interface or running applications thereby providing several options for activating or launching the time machine engine.

The timeline can include a number of snapshots representing earlier versions or states of the iTunes library that have been backed up. Each snapshot provides a screenshot representation of the earlier version of the iTunes library at a particular point in time. In some implementations the timeline includes a visual representation of backup elements such as a miniature version of the earlier state. The time line can appear across the top portion of the time machine interface as shown . Alternatively the timeline may not appear in the top portion of the time machine interface until a user moves their cursor to or otherwise activates the timeline e.g. by activating the top portion of the interface .

The time machine user interface can also include function controls. For example the interface can include arrow buttons and to navigate the snapshots forward or backward. Arrow buttons and can allow the user to navigate to additional snapshots not shown in the current timeline window thus there can be a large number of snapshots from which to select.

The interface can include a restore button that when selected restores the view to the selected state represented by the selected snapshot. In some implementations this terminates the session of the time machine. A user can select one element in a snapshot and then select the restore button to modify the current version of the element selected e.g. restore the state of the view . For example in iTunes the user can select a few songs to restore and this can trigger the restore button to display a more precise message such as restore selection only. 

In one implementation a changed items only checkbox control filters the snapshots to show only those that differ from the current state. In one implementation the checkbox control does not refer to the incremental changes between snapshots in the timeline but rather when invoked acts to omit those snapshots whose states are identical to the current state of the iTunes library from presentation in the timeline. For example if the most recent snapshot is identical to the snapshot that occurs earlier in time selecting the changed items only checkbox control in one implementation causes the time machine to cease displaying one of these versions e.g. by removing the snapshot from the timeline. This can help the user to view only snapshots that contain changes to the current version.

An information button provides information regarding the selected snapshot. In one implementation selecting the information button opens a panel display. The panel display can provide information including the date and time the snapshot was made the location of actual contents in a snapshot the size of the snapshot and a comment section to name a few examples. A close button can be selected to exit the time machine and return the user to the user interface . In some implementations the time machine engine can automatically close upon a particular snapshot being restored. In some implementations the user can minimize the time machine for purposes of navigating to other applications such as an email application or a web browser.

In this example the source library displayed in the selected snapshot includes songs that are not found in the current version of the library. In particular those include twelve songs by the artist Gorillaz. For example the user can delete these twelve songs from the source library after the earlier version was backed up. The user may wish to restore these twelve missing songs and can do so by using the time machine user interface . illustrates one implementation of the restoration of partial content from a snapshot.

As shown in there is a source pane in the application window for navigating the content. For example the user can select a particular photo album to view the contents in the photo album e.g. photographs images and video content . In this example the user has selected a Library item and the iPhoto application has presented to the user all of the images in the library . In some implementations the user can select one or more albums to display the contents of each such album in the iPhoto application. For example the user can select a Last 12 Months photo album and this can display all images collected in the selected album in the application window . In some implementations the contents can be displayed as thumbnail images such as thumbnail image . In other implementations the contents can be displayed in list form using the file name as the displayed image. The contents in each photo album can be different sets of images for example organized by event theme time category and the like. In some implementations a photograph count can be presented to the user showing how many images are in the current application window . In general the user can create delete or transfer images in the photo albums and the photograph count can adjust accordingly when a photograph is added or deleted from the application window or when the user switches between photo albums. As shown the photograph count displays 1 973 photos indicating that there are 1 973 photographs in the current user library .

In addition to creating deleting and transferring images in the photo album the user can also modify the images by selecting various photograph options shown in a control panel . The control panel can include options allowing the user to rotate edit email or generally move the images into other configurations. For example the control panel can present options to the user to select images from several photo albums to create a book or calendar entry using the selected images. As another example the panel provides that the user can search for images using the application.

The above examples involve backup versions of music libraries or photo albums. Many different types of applications items system settings preferences elements or processes can be backed up and made accessible through a time machine. is a screen shot showing the time machine interface used with a Keyboard Mouse settings pane. This function can be one that is provided as part of the operation system . Other aspects of the operating system can similarly be subject to time machine operations. For example preferences associated with other input devices system settings e.g. display device preferences printer preferences and user interface settings e.g. preferences defining a look and feel of the user interface such as colors background images and screensaver preferences . there are probably other kinds of system settings we can talk about here too 

In this example a presentation window is shown displaying a system settings interface e.g. a control panel for keyboard and mouse settings in a computer system. The user can enter the time machine interface to restore previous system or device settings. Upon entering the time machine interface a timeline can show snapshots corresponding to earlier versions of the keyboard and mouse settings. For example the user may wish to return to a default setting for a mouse. Here the user can search through the timeline for a previous setting such as a default and select a restore button to restore the mouse settings to that of the selected snapshot settings. In addition the timeline can display a change indicator with the date or filename under the snapshots to indicate a change in a selected snapshot relative to another snapshot . For example the snapshot displays Jul. 13 2005 and the change indicator because there are differences between the selected snapshot and the Jul. 13 2005 snapshot .

The user can wish to compare settings between two snapshots without initially restoring either of them. Some implementations can include a compare icon that a user can select to display both snapshots in the presentation window for comparison.

As another example is a screen shot showing a time machine interface for an address book application which can be a distinct application or part of another application such as an e mail application . In this example a presentation window is showing an address book application. Address book information within the application can be revised over time and the time machine application can be used to restore for example lost or deleted contact information within an address book. In some implementations the user can restore a directory of contacts by selecting a snapshot that includes at least one directory not present in a current snapshot.

The user can also restore a complete address book by selecting a particular snapshot containing the address book and next selecting a restore button . As shown in the time machine interface in this implementation does not include a timeline for the user to select snapshots from. In some implementations the user can navigate through snapshots using the control buttons and . As another example the timeline can appear as a rollover effect when a cursor or the pointing device is placed on the corresponding area of the interface. In some implementations the user can select an item timeline icon to open a timeline view of snapshots which can present text information about one or more snapshots and optionally facilitate navigation to any snapshot. In some implementations the timeline view can be toggled off and on using the item timeline icon .

The time machine interface can also be used to present backup information relating to an e mail application. For example the user can enter the time machine interface to restore any or all contents or data associated with the e mail application such as data associated with an inbox folder a sent items folder a deleted items folder an address book calendar preferences or any other data of the e mail application. For example in one implementation the user can restore inbox messages that were permanently deleted from the e mail application. The user can enter the time machine interface and select a snapshot that includes the deleted inbox messages. In one implementation the user can restore the entire inbox from that snapshot. Alternatively the user can select only particular inbox messages to restore using the time machine interface. Similarly the user can restore deleted message from other folders as well as contact information that was deleted.

In another implementation the time machine interface can be used to present backup information associated with a messaging application. For example the user can enter the time machine interface to restore one or more deleted friends from a buddy list deleted conversations preferences and the like.

In the above description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding. It will be apparent however to one skilled in the art that implementations can be practiced without these specific details. In other instances structures and devices are shown in block diagram form in order to avoid obscuring the disclosure.

In particular one skilled in the art will recognize that other architectures and graphics environments can be used and that the examples can be implemented using graphics tools and products other than those described above. In particular the client server approach is merely one example of an architecture for providing the functionality described herein one skilled in the art will recognize that other non client server approaches can also be used. Some portions of the detailed description are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the discussion it is appreciated that throughout the description discussions utilizing terms such as processing or computing or calculating or determining or displaying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

An apparatus for performing the operations herein can be specially constructed for the required purposes or it can comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program can be stored in a computer readable storage medium such as but is not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing data including electronic instructions and each coupled to a computer system bus.

The algorithms and modules presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems can be used with programs in accordance with the teachings herein or it can prove convenient to construct more specialized apparatuses to perform the method steps. The required structure for a variety of these systems will appear from the description. In addition the present examples are not described with reference to any particular programming language. It will be appreciated that a variety of programming languages can be used to implement the teachings as described herein. Furthermore as will be apparent to one of ordinary skill in the relevant art the modules features attributes methodologies and other aspects can be implemented as software hardware firmware or any combination of the three. Of course wherever a component is implemented as software the component can be implemented as a standalone program as part of a larger program as a plurality of separate programs as a statically or dynamically linked library as a kernel loadable module as a device driver and or in every and any other way known now or in the future to those of skill in the art of computer programming. Additionally the present description is in no way limited to implementation in any specific operating system or environment.

The subject matter described in this specification can be implemented as one or more computer program products i.e. one or more modules of computer program instructions encoded on a computer readable medium for execution by or to control the operation of data processing apparatus. The instructions can be organized into modules or engines in different numbers and combinations from the exemplary modules described. The computer readable medium can be a machine readable storage device a machine readable storage substrate a memory device a composition of matter effecting a machine readable propagated signal or a combination of one or more them. The term data processing apparatus encompasses all apparatus devices and machines for processing data including by way of example a programmable processor a computer or multiple processors or computers. The apparatus can include in addition to hardware code that creates an execution environment for the computer program in question e.g. code that constitutes processor firmware a protocol stack a database management system an operating system or a combination of one or more of them. A propagated signal is an artificially generated signal e.g. a machine generated electrical optical or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus.

While this specification contains many specifics these should not be construed as limitations on the scope of what may be claimed but rather as descriptions of features specific to particular implementations of the subject matter. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a subcombination or variation of a subcombination.

Similarly while operations are depicted in the drawings in a particular order this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. In certain circumstances multitasking and parallel processing may be advantageous. Moreover the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.

The subject matter of this specification has been described in terms of particular embodiments but other embodiments can be implemented and are within the scope of the following claims. For example the actions recited in the claims can be performed in a different order and still achieve desirable results. As one example the processes depicted in the accompanying figures do not necessarily require the particular order shown or sequential order to achieve desirable results. In certain implementations multitasking and parallel processing may be advantageous. Other variations are within the scope of the following claims.

