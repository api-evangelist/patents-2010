---

title: Polling in a virtualized information handling system
abstract: A software thread is dispatched for causing the system to poll a device for determining whether a condition has occurred. Subsequently, the software thread is undispatched and, in response thereto, an interrupt is enabled on the device, so that the device is enabled to generate the interrupt in response to an occurrence of the condition, and so that the system ceases polling the device for determining whether the condition has occurred. Eventually, the software thread is redispatched and, in response thereto, the interrupt is disabled on the device, so that the system resumes polling the device for determining whether the condition has occurred.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08122167&OS=08122167&RS=08122167
owner: International Business Machines Corporation
number: 08122167
owner_city: Armonk
owner_country: US
publication_date: 20100806
---
The disclosures herein relate in general to information handling systems and in particular to polling in a virtualized information handling system.

A virtualized information handling system can dispatch a partition under a software hypervisor time slicing window technique. A user direct access programming library uDAPL defines a set of application programming interfaces APIs for remote direct memory access RDMA transfers of information in the system. A uDAPL based operation may have a latency of a few microseconds while a software hypervisor may have a time slicing window of a few milliseconds. In that manner uDAPL based operations raise a potential challenge for the software hypervisor virtualization.

A software thread is dispatched for causing the system to poll a device for determining whether a condition has occurred. Subsequently the software thread is undispatched and in response thereto an interrupt is enabled on the device so that the device is enabled to generate the interrupt in response to an occurrence of the condition and so that the system ceases polling the device for determining whether the condition has occurred. Eventually the software thread is redispatched and in response thereto the interrupt is disabled on the device so that the system resumes polling the device for determining whether the condition has occurred.

As shown in the system includes multiple processors and which are coupled to a system bus for communicating information between such processors. Also the system bus is coupled to a a memory controller cache for communicating information between the system bus and local memories and and b an input output I O bridge for communicating information between the system bus and an I O bus . In the example of the memory controller cache and the I O bridge are integral with one another.

The system is a logically partitioned LPAR information handling system for simultaneously executing a multiple heterogeneous operating systems b multiple instances of a single operating system and or c one or more software programs within any such operating system. The system assigns such operating systems to respective logical partitions so that an operating system accesses devices that are likewise assigned by the system to such operating system s respective logical partition. In one example the system executes a first instance of a first operating system within a first logical partition a second instance or image of the first operating system within a second logical partition and a second operating system within a third logical partition.

Accordingly the system assigns various devices to the logical partitions. Such devices include I O adapters and a memory mapped graphics adapter e.g. for communicating with a display device and a hard disk adapter for communicating with a hard disk . In the illustrative embodiment the local memories and are dual in line memory modules DIMMs and the system assigns different portions of their total memory to respective logical partitions. In one example a the processors and the I O adapters and and a first portion of the total memory of the local memories and are assigned to the first logical partition by the system and b the processor the graphics adapter the hard disk adapter and a second portion of the total memory of the local memories and are assigned to the second logical partition by the system .

A host bridge is connected to the I O bus for communicating information between the I O bus and a local bus . As shown in a for communicating information between the I O adapter and the local bus the I O adapter is coupled to the local bus through an I O slot a bus and a bridge and b for communicating information between the I O adapter and the local bus the I O adapter is coupled to the local bus through an I O slot a bus and the bridge . Also the bridge communicates information between the bus and the bus . The I O adapters and are installed within the I O slots and respectively. The I O adapters and communicate information between the system and other devices such as other network computers e.g. clients of the system .

A host bridge is connected to the I O bus for communicating information between the I O bus and a local bus . As shown in a for communicating information between the I O adapter and the local bus the I O adapter is coupled to the local bus through an I O slot a bus and a bridge and b for communicating information between the I O adapter and the local bus the I O adapter is coupled to the local bus through an I O slot a bus and the bridge . Also the bridge communicates information between the bus and the bus . The I O adapters and are installed within the I O slots and respectively. The I O adapters and communicate information between the system and other devices such as modems or network adapters.

A host bridge is connected to the I O bus for communicating information between the I O bus and a local bus . As shown in a for communicating information between the graphics adapter and the local bus the graphics adapter is coupled to the local bus through an I O slot a bus and a bridge and b for communicating information between the hard disk adapter and the local bus the hard disk adapter is coupled to the local bus through an I O slot a bus and the bridge . Also the bridge communicates information between the bus and the bus . The graphics adapter and the hard disk adapter are installed within the I O slots and respectively.

A host bridge is connected to the I O bus for communicating information between the I O bus and a local bus . As shown in for communicating information between the I O adapter and the local bus the I O adapter is coupled to the local bus through an I O slot another bus and a bridge . The I O adapter is installed within the I O slot .

Through the local bus the host bridge is further connected to service processor mailbox interface and ISA industry standard architecture bus access pass through logic . Such logic forwards communications between the local bus and a PCI ISA bridge. As shown in a the PCI ISA bridge is coupled through an ISA bus to a service processor and a non volatile random access memory NVRAM b through a local PCI bus the service processor is directly connected to the logic and the PCI ISA bridge c through multiple JTAG IC busses the service processor is directly connected to the processors and d multiple ATTN lines of the processors and are connected to an interrupt input line of the service processor and e the service processor is connected to its own local memory and a user interface OP panel. The JTAG IC busses include JTAG scan busses as defined by Institute for Electrical and Electronics Engineers standard 1149.1 and or Philips IC busses.

In response to the system being initially powered the service processor a inventories the system topology by interrogating the processors and the memory controller cache and the I O bridge through the JTAG IC busses b executes built in self tests BISTs basic assurance tests BATs and memory tests on various elements of such topology and c through the OP panel reports errors if any from such tests.

After sufficient completion of such tests the system loads executable software code into the local memories and . In response to signals from the service processor the processors and execute such code. The service processor monitors such execution and reports errors if any from such execution. For example the service processor monitors cooling fan speed and operation thermal sensors power supply regulators and recoverable and non recoverable errors if any that are reported by the processors and the local memories and and or the I O bridge . The service processor a saves and reports through the OP panel such errors and other information about such monitoring and b performs other suitable operations in response to such errors and other information.

The tier shows a microprocessor that supports multiple cores in the tier including one or more of the processors and . In the example of the tier shows a core and a core . As shown in the core supports a hardware thread and a hardware thread in the tier and such threads support a virtual processor in the tier .

The core supports a hardware thread and a hardware thread in the tier and such threads support a virtual processor in the tier . The virtual processor supports a logical processor and a logical processor in the tier which in turn support a software thread and a software thread in the tier . The virtual processor supports a logical processor and a logical processor in the tier which in turn support a software thread and a software thread in the tier .

A partition hosted operating system at a tier causes the hardware threads of such virtual processors to dispatch one or more software threads at a tier to such logical processors. For example the partition hosted operating system at the tier causes a the hardware thread to dispatch the software thread at the tier to the logical processor and b the hardware thread to dispatch the software thread at the tier to the logical processor . If a virtual processor becomes preempted or blocked then the software hypervisor causes the system to create and manage a ready to run queue of blocked and ready to run virtual processors which the software hypervisor causes the system to select for dispatch to a suitable processor e.g. one or more of the processors and in response to elimination of such preemption or blockage condition.

In response to instructions of the software hypervisor the system dispatches at the tier additional virtual processors e.g. the virtual processor to additional cores e.g. the core resulting in activation at the tier of additional logical processors. The partition hosted operating system at the tier causes the hardware threads of such additional virtual processors to dispatch additional software threads at the tier to such additional logical processors.

Accordingly the software hypervisor causes allocation of the system hardware resources to various active partitions. The software hypervisor implements a time slicing window technique. With such a technique in successive time slicing windows the software hypervisor causes a suitable cycle of dispatching and undispatching for effectively allocating the system hardware resources to be shared among several virtual processors in a time division multiplexed manner.

For example at the start of a first time slicing window the software hypervisor causes dispatching of a first one or more virtual processors by allocating one or more of such hardware resources to the first one or more virtual processors. At the start of a second time slicing window upon expiration of the first time slicing window the software hypervisor causes undispatching of the first one or more virtual processors and dispatching of a second one or more virtual processors by reallocating such hardware resources to the second one or more virtual processors. Similarly at the start of a third time slicing window upon expiration of the second time slicing window the software hypervisor causes undispatching of the second one or more virtual processors and dispatching of either a the first one or more virtual processors by reallocating such hardware resources to the first one or more virtual processors or b an additional one or more virtual processors if any by reallocating such hardware resources to the additional one or more virtual processors.

In one example of a partition s operation a the I O adapter communicates information between the system and InfiniBand network devices and b one or more software threads of the partition cause their supporting hardware threads to actively e.g. on a substantially continuous basis poll the I O adapter e.g. memory associated with the I O adapter for determining whether the I O adapter has i completed an event event completion and or ii requested a service from the system service request . Such polling reduces latency because it reduces overhead that would otherwise be incurred from handling an interrupt e.g. an interrupt generated by the I O adapter in response to such event completion and or service request . In response to such event completion and or service request the system communicates information to and or from the I O adapter .

The system is operable to conduct such polling in various ways such as busy wait in user space yield semantics or event short sleeps. Accordingly even if a virtual processor is idle one or more of its software threads may have been in the process of causing such polling. To indicate that the software thread is in the process of causing such polling the system sets an associated polling flag which the system stores in its memory so that the software thread s associated polling flag has a logical 1 true state. Conversely to indicate that the software thread is not in the process of causing such polling the system clears the software thread s associated polling flag so that the software thread s associated polling flag has a logical 0 false state.

InfiniBand is one example of a remote direct memory access RDMA implementation. In the system a user direct access programming library uDAPL defines a set of application programming interfaces APIs for RDMA transfers of information. A uDAPL based operation may have a latency of a few microseconds while the software hypervisor may have a time slicing window of a few milliseconds. In response to a suitable interrupt the software hypervisor causes dispatching of a partition and dispatching of virtual processors that support such partition sooner than otherwise scheduled under the software hypervisor time slicing window technique. In that manner uDAPL based operations raise a potential challenge for the software hypervisor virtualization.

If the particular virtual processor is executing a polling thread then the operation continues from the step to a step at which the software hypervisor causes undispatching of the particular virtual processor and enabling of a hardware interrupt on the I O adapter which is being actively polled by the polling thread in this example so that the system ceases such polling. After the step the operation continues to a step . Conversely if the particular virtual processor is not executing a polling thread then the operation continues from the step to a step at which the software hypervisor causes undispatching of the particular virtual processor. After the step the operation continues to the step .

At the step the operation self loops until a suitable moment for redispatching the particular virtual processor. In response to the suitable moment for redispatching the particular virtual processor the operation continues from the step to a step at which the software hypervisor causes redispatching of the particular virtual processor and disabling of the aforementioned hardware interrupt if previously enabled at the step on the I O adapter so that the system resumes such polling if previously ceased at the step . After the step the operation ends.

After the step yet before the step the I O adapter generates the hardware interrupt in response to such event completion and or service request. In response to such generated hardware interrupt the software hypervisor causes the system to increase a priority of redispatching the particular virtual processor so that the particular virtual processor may be redispatched at the step sooner than otherwise scheduled under the software hypervisor time slicing window technique. After the particular virtual processor is so redispatched at the step the system executes the particular virtual processor s software threads for communicating information to and or from the I O adapter in response to such event completion and or service request so that such event completion and or service request is suitably handled in a more timely manner. In the illustrative embodiment the software thread operations are programmable without reference to the software hypervisor operations.

As will be appreciated by one skilled in the art aspects of the illustrative embodiments may be embodied as a system method or computer program product. Accordingly aspects of the illustrative embodiments may take the form of an entirely hardware embodiment an entirely software embodiment including but not limited to firmware resident software or microcode or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the illustrative embodiments may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be used in the illustrative embodiment. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF or any suitable combination of the foregoing .

Computer program code for carrying out operations for aspects of the illustrative embodiments may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. The remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the illustrative embodiments are described with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to the illustrative embodiments. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus are processable to cause performance of the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to operate in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions that implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions that execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to the illustrative embodiments. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which includes one or more executable instructions for implementing the specified logical operation s . In some alternative implementations the operations noted in the block may occur out of the order noted in the Figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. Each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified operations or acts or combinations of special purpose hardware and computer instructions.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the inventions. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description herein has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the inventions in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the inventions. The embodiment was chosen and described in order to best explain the principles of the inventions and the practical application and to enable others of ordinary skill in the art to understand the inventions for various embodiments with various modifications as are suited to the particular use contemplated.

