---

title: Automation of testing for user interface applications
abstract: A host software application implementing business processes and providing a graphical display associated with a user interface (UI) for a user in a client program executing on a client frontend device that is separate from a backend device storing metadata associated with the UI may be initiated. An automation graphical symbol may provide the user with an option to initiate a test on events of the host software application, during execution of the host software application. A request from the user may be received, to initiate a test on events of the host software application. Information may be received from the user indicating one or more selected specific events for performing the test. The test may be initiated on the selected specific events, based on a state of execution of the host software application at an initial time of the user indicating the selected specific events for performing the test.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08589883&OS=08589883&RS=08589883
owner: SAP AG
number: 08589883
owner_city: Walldorf
owner_country: DE
publication_date: 20100722
---
This description relates to automation of testing for applications associated with user interfaces at client devices.

Many businesses and organizations may utilize services e.g. software applications that may be provided by one or more providers that may offer user interfaces UIs for accessing applications that may be customized for a particular user. For example a user may desire access via a frontend client device to customer invoice applications that are customized to that particular user. As other examples the user may also desire access to applications for managing customer relationships financial management management of projects management of supply chain networks management of supplier relationships support for executive management and management of compliance with laws and regulations. Customization may be furnished by the provider or the user may have a capability to customize particular aspects of an application or service. Further the provider may host the software and associated data on one or more provider backend devices including host servers. The users may then access the services via remote connections e.g. via the Internet using various client frontend devices e.g. a server local to the user with connecting devices desktop computers laptop computers handheld devices etc. . The users may then be able to access powerful functionality e.g. business processes without requiring a significant up front investment by the user in extensive Information Technology IT personnel and equipment for example as part of the user s business setup.

However in accessing such services via remote connections a significant amount of processing resources may be consumed e.g. processor time bandwidth by transporting service information e.g. software and data between the backend and the frontend devices. For example if a user enters data into a form displayed on a client device and the information needs to be transported to the backend for processing for each entered value in various fields the overhead for supporting round trip data transports may become significant. Further if a user such as a developer needs to test various processes to ensure that they will execute properly when needed by a user the test results may become somewhat unreliable due to the added overhead of computing via several layers between the backend and the client device.

According to one general aspect a user interface manager may be configured to initiate execution of a host software application implementing one or more business processes and providing a graphical display associated with a user interface UI for a user in a client program executing on a client frontend device that is separate from a backend device storing metadata associated with the UI. An automation trigger display engine may be configured to display an automation graphical symbol within the graphical display providing the user with an option to initiate a test on one or more events of the host software application during execution of the host software application. An automation controller input engine may be configured to receive a request from the user via an action associated with the automation graphical symbol to initiate a test on one or more events of the host software application. An event selection engine may be configured to receive information from the user indicating one or more selected specific events for performing the test. An automation explorer engine may be configured to initiate the test on the selected specific events based on a state of execution of the host software application at an initial time of the user indicating the selected specific events for performing the test.

One or more implementations may include the following features. For example the user interface manager may be configured to initiate execution of the host software application implementing one or more business processes and providing a graphical display associated with the user interface UI for the user in a client program including a browser the host software application executing in one of Silverlight Flash Java and ASP.NET on the client frontend device. As another example the user interface manager may be configured to receive a model of the UI from a metadata repository located at the backend device and interpret the model of the UI for execution by the client program.

As another example the event selection engine may be configured to receive a request to record one or more events occurring during execution of the host software application by the user. The automation explorer engine may be configured to request storage of the recorded events as a script in a script database located at the backend device and request storage of data associated with the recorded events at the time of recording the respective events. As a further example the automation explorer engine may be configured to retrieve the script of recorded events and the data associated with the recorded events from a script database located at the backend device and initiate execution of the script to generate test results for the user.

As yet another example the event selection engine may be configured to receive a request to retrieve from a script database located on the backend device one or more scripts that include events that occur during execution of the host software application and data associated with the events.

According to another general aspect a computer program product may be tangibly embodied on a computer readable medium and may include executable code that when executed is configured to cause at least one data processing apparatus to perform the following operations. Specifically the executable code may cause the data processing apparatus to initiate execution of a host software application implementing one or more business processes and providing a graphical display associated with a user interface UI for a user in a client program executing on a client frontend device that is separate from a backend device storing metadata associated with the UI. The instructions may further cause the data processing apparatus to display an automation graphical symbol within the graphical display providing the user with an option to initiate a test on one or more events of the host software application during execution of the host software application. The instructions may cause the data processing apparatus to receive a request from the user via an action associated with the automation graphical symbol to initiate a test on one or more events of the host software application. The instructions may cause the data processing apparatus to receive information from the user indicating one or more selected specific events for performing the test. The instructions may cause the data processing apparatus to initiate the test on the selected specific events based on a state of execution of the host software application at an initial time of the user indicating the selected specific events for performing the test.

One or more implementations may include the following features. For example initiating execution of the host software application may include initiating execution of the software application implementing one or more business processes and providing a graphical display associated with a user interface UI for a user in a client program including a browser the host software application executing in one of Silverlight Flash Java and ASP.NET on a client frontend device. As another example initiating execution of the host software application may include receiving a model of the UI from a metadata repository located at the backend device and interpreting the model of the UI for execution by the client program.

As another example receiving information from the user indicating one or more selected specific events may include receiving a request to record one or more events occurring during execution of the host software application by the user requesting storage of the recorded events as a script in a database located at the backend device and requesting storage of data associated with the recorded events at the time of recording the respective events. As a further example initiating the test on the selected specific events may include retrieving the script of recorded events and the data associated with the recorded events from a script database located at the backend device and initiating execution of the script to generate test results for the user.

As another example receiving information from the user indicating one or more selected specific events may include receiving a request to retrieve from a script database located on the backend device one or more scripts that include events that occur during execution of the host software application and data associated with the events.

As another example the executable code when executed may cause the at least one data processing apparatus to determine whether the selected specific events raise one or more error conditions and display error messages associated with determined error conditions.

According to another general aspect a client engine may be configured to initiate execution of a frontend software application that provides a graphical display associated with a script composer for a user in a client program executing on a client frontend device and display a script graphical symbol within the graphical display providing the user with an option to select scripts including one or more events that occur during execution of a hosted software application. An automation center engine may include a script composer engine and an automation explorer engine. The script composer engine may be configured to generate a scenario including a start event and an end event generating the scenario including receiving a request from the user via an action associated with the script graphical symbol to select a first script and obtaining the selected first script and associating the selected first script with a first selected script graphical symbol displayed within the graphical display. The automation explorer engine may be configured to initiate a test on the generated scenario.

One or more implementations may include the following features. For example the composer engine may be configured to obtain the selected first script based on retrieving the selected first script from a database located at a backend device. For example the automation center engine may include a recorder engine configured to record one or more events occurring during execution of the host software application by the user on the client frontend device and receive a request to store the recorded events as a script. Further the automation explorer engine may be configured to store the recorded events as a script in a database located at the backend device and store data associated with the recorded events at the time of recording the respective events.

As another example the script composer engine may be configured to associate a role value with the first script.

As another example the script composer engine may be configured to receive a request from the user via an action associated with the script graphical symbol to select a second script obtain the selected second script and associate the selected second script with a second selected script graphical symbol displayed within the graphical display and receive an input from the user requesting a display of a graphical connector symbol indicating a connection of an output graphical symbol on the first selected script graphical symbol to an input graphical symbol within the graphical display.

As another example the script composer engine may be configured to receive a request from the user via an action associated with a conditional graphical symbol to select a conditional step for inclusion in the scenario receive input values from the user indicating actions associated with a plurality of conditions associated with the conditional step and store the input values in association with the conditional step in a database.

As yet another example the script composer engine may be configured to display data graphical symbols associated with displayed script graphical symbols in a data pool display area within the graphical display and display respective input indicators and output indicators on each data graphical symbol when the user moves a cursor over a graphical symbol included in the displayed scenario that is associated with the respective data graphical symbol.

The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features will be apparent from the description and drawings and from the claims.

In the example of the system allows a user to generate and run tests on applications associated with UIs on client devices. By generating and running such tests in a client program such as a browser application on the client device the user may obtain results faster and more efficiently than testing that may be generated and run on a backend server.

In one or more users may use a display device while connected locally to a client frontend device to use and test user interface applications that may be stored and served from a backend device . A backend controller may manage operations on the backend device and a network communication engine may manage communication between the backend device and the frontend device via a network protocol e.g. Hypertext Transfer Protocol HTTP or Hypertext Transfer Protocol Secure HTTPS .

A metadata repository may store information related to the UIs such as metadata representations of the UIs that may be sent to client frontend devices for interpretation for executing the UIs on the client frontend devices . Since the UI information is stored on the backend device one or more representations of UIs may be viewed as an aggregate of the UI s metadata as a host software application that is downloaded to client frontend devices for interpretation and execution. According to an example embodiment the UI metadata may be implemented in eXtensible Markup Language XML and may include descriptive data such as processes to be executed display information such as buttons data entry fields display fields and information related to input output data associated with the UI. Role information may also be stored with the metadata e.g. a role of manager may be required for execution of a UI by a user .

A script database may be used for example by a testing system to store scripts data and roles . The scripts may include process code for various activities a user may want to perform for example for business processes. The scripts may be generated automatically e.g. by a user executing UI models simultaneously with the recording of the script or they may be generated via line by line input of code by a user . The data and roles may be stored separately from the scripts as the scripts may be loosely bound to certain entities such as global variables. The data may include data that may be input and or output for any of the scripts and relationships between the individual scripts and data and roles may be stored with the scripts . The roles may be used for indicating particular entities that may be associated with certain scripts . For example a manager role may be assigned to a script that embodies an approval of a business transaction while an employee role may be assigned to a script that embodies a business process for filling out a sales order. While these entities may be described in terms of business processes it is to be understood that these entities may also be used in other situations besides management of business functions.

The client frontend device may include a client program that may be used for executing processes associated with the UIs for sending information to the user for receiving input from the user and for displaying images on the display for the user as well as managing a flow of information between the browser and the backend device . For example the client program may include a browser such as Internet Explorer Firefox or Chrome. For example a browser may include a plugin such as Microsoft Silverlight to handle execution of the processes associated with the UIs and displaying information on the display for the user . Such a client program or browser plugin may include a graphical subsystem for rendering user interfaces in Windows based applications which may provide a consistent programming model for building applications and provide a clear separation between the user interface and business logic. Using such a browser plugin for example may eliminate a need for a Java stack e.g. a Java J2EE server stack for execution of processes on the client frontend device thereby providing an environment using a more lean stack for execution and communication. Such an environment may provide a more efficient and more timely execution of processes related to the needs of the user . In an example implementation the client program may be run independently of a browser. Other applications that may be used may include ASP.NET Flash or Java e.g. Java EE 6 .

A client engine may include an automation client automation peers UI controls a UI manager and an interpreter . The automation client is configured to perform the automated testing of UIs on the client frontend device as discussed further below. The automation peers include information that may describe what is possible in following particular paths of execution e.g. via a tree type structure for traversal of scripts and business processes to verify a valid path of traversal. For example decisions may be based on whether a get value or a set value operation may be performed and whether a next object may be accessed.

In an example implementation the automation peers may be implemented via a .NET framework feature wherein classes may utilize an IAutomationPeer Interface which exposes the running instances by a standard to external automation tools. The automation peer composition tree may include a condensed aggregated or extended view of a physical control tree and may expose the composition such that an appropriate external view is provided to other tools.

The UI controls may be configured to manage control structures related to the UI e.g. input fields drop boxes tables charts etc. . The UI manager may be configured to manage interpretation of the UIs via the interpreter as well as any input and output between the UIs and the user or operations between the UI and the backend device . For example the UI manager may receive a metadata representation of a UI and may request its interpretation via the interpreter so that a graphical display may be rendered on the display device for interaction with the user .

The automation client which may be integrated into the client engine with the UI manager may include an automation trigger display engine an automation controller input engine and an event selection engine which are discussed in more detail below.

An automation center engine manages the automation of testing of scripts and processes such as business processes associated with the UIs. According to an example embodiment the user interface manager may be configured to initiate execution of a host software application e.g. the host software application implementing one or more business processes and providing a graphical display associated with a user interface UI for the user in the client program executing on the client frontend device that is separate from the backend device storing metadata associated with the UI e.g. in the metadata repository .

According to an example embodiment the automation trigger display engine may be configured to display an automation graphical symbol within the graphical display providing the user with an option to initiate a test on one or more events of the host software application during execution of the host software application . For example a button labeled Automation may be displayed within the graphical display of UI operations to provide the user with a clickable icon for requesting a test on one or more processes included in a UI. The user may desire the test to ensure that certain activities are valid according to the design of the UI or the user may wish to view progress of execution of steps within the process e.g. inputs and outputs to ensure that execution is correct and efficient. The automation controller input engine may be configured to receive a request from the user via an action associated with the automation graphical symbol to initiate a test on one or more events of the host software application . For example the user may click on an Automation button to request the test.

According to an example embodiment the event selection engine may be configured to receive information from the user indicating one or more selected specific events for performing the test. According to an example embodiment an automation center engine may include an automation explorer engine configured to initiate the test on the selected specific events based on a state of execution of the host software application at an initial time of the user indicating the selected specific events for performing the test. For example the user may wish to test a process associated with a UI for an employee entering data in a sales order. For example the user may wish to execute the UI and simultaneously record a script for testing or may wish to assemble a string of scripts as a scenario for testing or the user may wish to code a script line by line for batch testing. As another example the user may wish to retrieve a script or scenario that was previously saved in the backend device or the frontend device and run a test on the script or scenario possibly making edits to the script or scenario to test various aspects of execution.

According to an example embodiment the user interface manager may be configured to initiate execution of the host software application implementing one or more business processes and providing a graphical display associated with the user interface UI for the user in a client program including a browser e.g. client program the host software application executing in one of Silverlight Flash Java and ASP.NET on the client frontend device .

According to an example embodiment the user interface manager may be configured to receive a model of the UI from a metadata repository located at the backend device e.g. metadata repository and interpret the model of the UI for execution by the client program e.g. via the interpreter .

According to an example embodiment the event selection engine may be configured to receive a request to record one or more events occurring during execution of the host software application by the user request storage of the recorded events as a script e.g. script in a script database located at the backend device e.g. script database and request storage of data e.g. data associated with the recorded events at the time of recording the respective events.

According to an example embodiment the automation explorer engine may be configured to retrieve the script of recorded events and the data associated with the recorded events from a script database e.g. script database located at the backend device and initiate execution of the script to generate test results for the user .

According to an example embodiment the event selection engine may be configured to receive a request to retrieve from a script database located on the backend device e.g. script database one or more scripts that include events that occur during execution of the host software application and data associated with the events.

According to an example embodiment the automation center engine may include a script composer engine configured to generate a scenario including a start event and an end event. Generating the scenario may include receiving a request from the user via an action associated with the script graphical symbol to select a first script obtaining the selected first script and associating the selected first script with a first selected script graphical symbol displayed within the graphical display. For example a script graphical symbol may be selected by the user from a graphical display area of Items and an already existing script may be retrieved e.g. from the script database and associated with the graphical script symbol in a scenario area of the graphical display.

According to an example embodiment the automation explorer engine may be configured to initiate a test on the generated scenario.

According to an example embodiment the automation center engine includes a recorder engine configured to record one or more events occurring during execution of the host software application by the user on the client frontend device and receive a request to store the recorded events as a script. According to an example embodiment the automation explorer engine may be configured to store the recorded events as a script in a database located at the backend device and store data associated with the recorded events at the time of recording the respective events.

According to an example embodiment the script composer engine may be configured to associate a role value with the first script. For example the user may associate a graphical display symbol indicating a role value to the script and may assign a value to the role e.g. manager role employee role president role . For example if a role of manager is assigned to a script then logon and logoff steps may be added to the scenario to ensure that only authorized entities are allowed to participate in activities embodied within execution of a script e.g. only a manager may authorize or approve certain activities .

According to an example embodiment the script composer engine may be configured to receive a request from the user via an action associated with the script graphical symbol to select a second script obtain the selected second script and associate the selected second script with a second selected script graphical symbol displayed within the graphical display and receive an input from the user requesting a display of a graphical connector symbol indicating a connection of an output graphical symbol on the first selected script graphical symbol to an input graphical symbol within the graphical display. For example the user may request a second script from the script database and may place a graphical script symbol associated with the second script to the right of the first script symbol and may connect the first script symbol to the second script symbol to indicate a path of execution or interpretation from the first script to the second script.

According to an example embodiment the script composer engine may be configured to receive a request from the user via an action associated with a conditional graphical symbol to select a conditional step for inclusion in the scenario receive input values from the user indicating actions associated with a plurality of conditions associated with the conditional step and store the input values in association with the conditional step in a database e.g. script database . For example a conditional symbol may be selected by the user from an Items area of the graphical display and the user may associate various conditions with branch symbols on the conditional symbol e.g. for a condition of cancel the user may set up a branch to an exit while for a condition of a manager s approval the user may branch to a step of completing a transaction initiated by an employee etc. .

According to an example embodiment the script composer engine may be configured to display data graphical symbols associated with displayed script graphical symbols in a data pool display area within the graphical display and display respective input indicators and output indicators on each data graphical symbol when the user moves a cursor over a graphical symbol included in the displayed scenario that is associated with the respective data graphical symbol. Thus the user may quickly determine whether each graphical symbol is correctly associated with expected data inputs and outputs or none of either .

According to an example embodiment a pool editor engine may be configured to provide the user with access to data pools and role pools to associate information with the pools and to edit such information. For example if a role pool is associated with a particular user e.g. manager the user may edit the information to other values. Further the user may add other entities to a pool or delete entities from the pool. Pools may be associated with scripts by the user .

A script player engine may be configured to play scripts for testing by the user . The scripts may be created for example in eXtensible Markup Language XML and may be played by traversal of automation peers .

A program player engine may be configured to play a program during execution of a script for example based on an interpretation of a UI by the interpreter

During execution of a script or scenario an error log may be generated and sent from the automation explorer engine to an automation services manager for storage in an error logs database located on the backend device . The automation explorer engine may also send the generated scripts data and roles discussed above to the automation services manager for storage in the script database . The automation services manager may also receive requests for retrieval of error logs scripts data or roles and may retrieve them respectively from the error logs database or the script database for transfer to the automation explorer engine for processing on the client frontend device .

For example the user interface manager of may initiate execution of the host software application implementing one or more business processes and providing a graphical display associated with a UI for the user in the client program executing on the client frontend device that is separate from the backend device storing metadata associated with the UI e.g. in the metadata repository .

An automation graphical symbol may be displayed within the graphical display providing the user with an option to initiate a test on one or more events of the host software application during execution of the host software application .

For example the automation trigger display engine of may display an automation graphical symbol within the graphical display providing the user with an option to initiate a test on one or more events of the host software application during execution of the host software application as discussed previously. For example a button labeled Automation may be displayed within the graphical display of UI operations to provide the user with a clickable icon for requesting a test on one or more processes included in a UI. The user may desire the test to ensure that certain activities are valid according to the design of the UI or the user may wish to view progress of execution of steps within the process e.g. inputs and outputs to ensure that execution is correct and efficient as discussed previously.

A request may be received from the user via an action associated with the automation graphical symbol to initiate a test on one or more events of the host software application . For example the automation controller input engine may receive a request from the user via an action associated with the automation graphical symbol to initiate a test on one or more events of the host software application . For example the user may click on an Automation button to request the test as discussed previously.

Information may be received from the user indicating one or more selected specific events for performing the test . For example the event selection engine of may receive information from the user indicating one or more selected specific events for performing the test as discussed previously.

The test on the selected specific events may be initiated based on a state of execution of the host software application at an initial time of the user indicating the selected specific events for performing the test .

For example the automation explorer engine of may initiate the test on the selected specific events based on a state of execution of the host software application at an initial time of the user indicating the selected specific events for performing the test as discussed previously. For example the user may wish to test a process associated with a UI for an employee entering data in a sales order. For example the user may wish to execute the UI and simultaneously record a script for testing or may wish to assemble a string of scripts as a scenario for testing or the user may wish to code a script line by line for batch testing. As another example the user may wish to retrieve a script or scenario that was previously saved in the backend device or the frontend device and run a test on the script or scenario possibly making edits to the script or scenario to test various aspects of execution.

A script graphical symbol may be displayed within the graphical display providing the user with an option to select scripts including one or more events that occur during execution of a hosted software application .

For example the automation trigger display engine of may display an automation graphical symbol within the graphical display providing the user with an option to initiate a test on one or more events of the host software application during execution of the host software application as discussed previously. For example a button labeled Automation may be displayed within the graphical display of UI operations to provide the user with a clickable icon for requesting a test on one or more processes included in a UI. The user may desire the test to ensure that certain activities are valid according to the design of the UI or the user may wish to view progress of execution of steps within the process e.g. inputs and outputs to ensure that execution is correct and efficient as discussed previously.

A scenario may be generated the scenario including a start event and an end event. Generating the scenario may include receiving a request from the user via an action associated with the script graphical symbol to select a first script obtaining the selected first script and associating the selected first script with a first selected script graphical symbol displayed within the graphical display .

For example the script composer engine of may generate a scenario including a start event and an end event as discussed previously. For example a script graphical symbol may be selected by the user from a graphical display area of Items and an already existing script may be retrieved e.g. from the script database and associated with the graphical script symbol in a scenario area of the graphical display.

A test may be initiated on the generated scenario . For example the automation explorer engine of may initiate a test on the generated scenario as discussed previously. The user may desire the test to ensure that certain activities are valid according to the design of the UI or the user may wish to view progress of execution of steps within the process e.g. inputs and outputs to ensure that execution is correct and efficient as discussed previously.

According to an example embodiment a UI component may include a self contained model of a UI that may be declaratively used in another UI model. A declarative interface of a UI component may include in ports and out ports . These ports may be used to implement a loosely coupled behavior in embedding or navigation scenarios. The data of a loosely coupled component are loaded asynchronous i.e. an additional roundtrip between the frontend and backend may be needed . The declarative interface may also include binding for tightly coupled behavior in embed scenarios e.g. synchronous loading working directly on the data model of a parent UI model e.g. via references to the parent data model . The declarative interface may also include configuration . A technical configuration may be exposed e.g. to enable a user to support different styles flavors e.g. statically set at design time.

In an example implementation a mode may be implemented in the framework during execution which provides signals to the automation framework when pending operations such as loading of asynchronous components are complete. The automation may not know all facets of embedding and such signals may thus aid in avoiding errors that may otherwise be caused by initiating automation of elements that may not yet be present.

As shown in a logical component model of a component may be a control provided by a system framework or implemented in association with framework controls e.g. a Silverlight control . A component may be a composite e.g. composite control building block etc. which may include other components e.g. nested composites and or controls . Components may expose an interface or interfaces for actions ports and bindings. A composite may be used and configured in a view composition or used as the target of a navigation as a standalone UI application. The configuration of a non framework component may be done via the exposed declared interface.

According to an example embodiment communications between components may be modeled via semantic navigation targets. In this instance target components are not named directly but navigation may be invoked based on a host business object and an operation. An operation may be a standard operation e.g. display edit list etc. or a custom operation introduced in a navigation registry. The in and out ports of a UI component may be used in the definition of a navigation to identify the involved UI components for the runtime.

A navigation provider may thus replace dynamically at component load generation time the semantic navigation targets by UI components. This concept allows flexibility regarding determination of navigation targets according to use cases. The semantics of a business object and an operation e.g. SalesOrder Open may be used as a navigation query for requesting a navigation target. Each application UI to be used as a navigation target defines a business object and an operation name as navigation target descriptor to indicate which navigation requests it supports.

To support some special use cases e.g. globalization verticalization a third parameter beside business object and operation may be made available which has no fixed semantic but can be defined by the applications e.g. in some cases this third parameter is the country for which a special UI component has to be launched .

User requests may be triggered on the client side during UI runtime. The first user request may be a navigation request that results in a request to the backend to read a UI component. The UI component is read from a central metadata repository in the backend and transported to the frontend. The component manager may instantiate the UI component and a corresponding component controller for the UI component on the client side and triggers the initialization of the UI component on the backend side. The component manager generates a control tree for the UI component out of the controls provided in a central Themed Controls package. These controls ensure uniform look and feel and the ability to change themes consistently. The controls in the themed UI controls package may be enabled in a consistent way for test automation and accessibility and may be provided in a manner such that all native implemented custom UI panes may use the controls. More than one UI component may be needed to render a UI as UI components may embed other UI components e.g. a Work Center component may embed a Work Center View Component and they again may embed OWL components etc. . The top level UI component that is rendered is a root UI component which renders a common frame for all UI components e.g. by rendering the top level navigation and has an ability to open a side car for personalization and help.

For each UI component the generic component controller for that particular component is instantiated. If a custom UI pane is to be rendered then a corresponding custom component controller is instantiated. The component controller ensures that all controls are bound to the proper fields of the UI model and executes all operations that are configured in the event handlers of the UI component. If in the event handlers some script segments are discovered the controller triggers the execution of these scripts in the frontend scripting engine . The component controller may also trigger a roundtrip to the backend device . In that case the backend synchronization manager identifies all changed data in the UI data model in the client and packs only the changed data in a request to the backend. After the backend controller computes the data in the backend all changed data and only the changed data from the backend including all data changed via side effects are transported back to the frontend.

After the client runtime as discussed above triggers the initialization of a UI component in the backend for a first time in a session the UI server runtime may first create a master controller for the complete session and then may generate a component controller for each component that is requested from the client runtime . Each component controller may build a UI data container from the information of the UI model for a component. The master controller may handle the choreography of the different controllers and may build a bracket for all operations targeted for one controller. The master controller may also trigger another runtime and provide the other runtime with all relevant metadata. Relevant information is stored within the models of the UI components.

After the master controller has processed all component controllers it collects all the data that has changed in the UI data container and transports all changed data to the client.

As discussed previously the UI components may be stored in a central metadata repository e.g. similar to metadata repository on the backend device .

A task bar at the top of the display shows several options for the user to select in the automation center. For example the user may select New to generate a new script Open to open an existing script Check to check a script Save to save a script either on the frontend or backend device Properties to view the properties of scripts and script elements and View to view the information as shown for the new sales order script discussed above. A second bar displays example buttons for selection by the user including buttons to record a script play a script stop the playing of a script pause the playing of a script navigation buttons for navigating up or down through the script elements and editing tools for editing a script.

A Join symbol may be used by the user to indicate a join operation in processing. A Logoff symbol Logon symbol not shown may be used by the user to insert a logon element into the scenario so that an entity may be required to login e.g. verify a correct role entity for using a script to validate an order in order to participate in events embodied in the respective scenario scripts.

A Roles area may be used for display of roles and role pools associated with a displayed scenario and respective elements of the scenario. A Data area may display data values and variables and data pools associated with a displayed scenario and its respective elements. A scenario display area may display a scenario during creation by a user or for viewing and editing by a user. As shown in a scenario is displayed that includes a start symbol a script element Create Sales Order a validation element Check for successful creation and an end symbol . Thus the example scenario is created to create a new sales order and validate the successful creation of the sales order.

When providing a script to be associated with the script element the user may elect to dynamically open a host application e.g. an application for requesting employee leave time and record a script via the recorder engine or the user may manually enter a script and save it to a file for later retrieval by the scenario.

In the user selects a file for the data to be associated with the script. In the user selects input data that is type variant. In this example the user is setting up a request by an employee for leave time. The request may require the employee to enter a specific type of leave request e.g. a status of personal leave sick leave etc. and the user may specify which types may be permitted by the script.

As described the techniques of the present description may be provided to enable users to generate and test scripts and scenarios for testing user interfaces in a lean stack client frontend environment.

Implementations of the various techniques described herein may be implemented in digital electronic circuitry or in computer hardware firmware software or in combinations of them. Implementations may implemented as a computer program product i.e. a computer program tangibly embodied in an information carrier e.g. in a machine readable storage device or in a propagated signal for execution by or to control the operation of data processing apparatus e.g. a programmable processor a computer or multiple computers. A computer program such as the computer program s described above can be written in any form of programming language including compiled or interpreted languages and can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program that might implement the techniques mentioned above might be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.

Method steps may be performed by one or more programmable processors executing a computer program to perform functions by operating on input data and generating output. Method steps also may be performed by and an apparatus may be implemented as special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit .

Processors suitable for the execution of a computer program include by way of example both general and special purpose microprocessors and any one or more processors of any kind of digital computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. Elements of a computer may include at least one processor for executing instructions and one or more memory devices for storing instructions and data. Generally a computer also may include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. Information carriers suitable for embodying computer program instructions and data include all forms of non volatile memory including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory may be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user implementations may be implemented on a computer having a display device e.g. a cathode ray tube CRT or liquid crystal display LCD monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input.

Implementations may be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation or any combination of such back end middleware or front end components. Components may be interconnected by any form or medium of digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN and a wide area network WAN e.g. the Internet.

While certain features of the described implementations have been illustrated as described herein many modifications substitutions changes and equivalents will now occur to those skilled in the art. It is therefore to be understood that the appended claims are intended to cover all such modifications and changes as fall within the scope of the embodiments.

