---

title: Interfaces that facilitate solid state storage configuration
abstract: Aspects of the subject matter described herein relate to storage configuration. In aspects, an interface is used to discover the existence, capacity, and characteristics of solid state storage. This information may be provided to a user or storage management process which may use the information to configure the solid state storage. When appropriate, bus bandwidth to the solid state storage as well as bandwidth to memory components of the solid state storage may be configured. Configuration and re-configuration may be performed automatically according to one or more policies maintained locally or remotely.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08447916&OS=08447916&RS=08447916
owner: Microsoft Corporation
number: 08447916
owner_city: Redmond
owner_country: US
publication_date: 20100217
---
Rotational media such as hard drives have been standard in computing environments for many years. Solid state storage however is starting to become a viable option in some environments. As reliability increases and costs decrease solid state storage is poised to take on a larger role in non volatile storage.

Current solid state storage devices typically focus on using the same form factors and interfaces as the hard drives they replace. For example a solid state storage device may include a serial attached SCSI SAS interface or a serial advanced technology attachment SATA interface to provide a well known interface to the solid state storage device. Furthermore the solid state storage device may be housed in a hard drive like enclosure that has connections such that the solid state storage device can easily be inserted in a hard drive slot of a computer system. While compatible packaging solid state storage devices in this manner may limit performance and flexibility and increase costs.

The subject matter claimed herein is not limited to embodiments that solve any disadvantages or that operate only in environments such as those described above. Rather this background is only provided to illustrate one exemplary technology area where some embodiments described herein may be practiced.

Briefly aspects of the subject matter described herein relate to storage configuration. In aspects an interface is used to discover the existence capacity and characteristics of solid state storage. This information may be provided to a user or storage management process which may use the information to configure the solid state storage. When appropriate bus bandwidth to the solid state storage as well as bandwidth to memory components of the solid state storage may be configured. Configuration and re configuration may be performed automatically according to one or more policies maintained locally or remotely.

This Summary is provided to briefly identify some aspects of the subject matter that is further described below in the Detailed Description. This Summary is not intended to identify key or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

The phrase subject matter described herein refers to subject matter described in the Detailed Description unless the context clearly indicates otherwise. The term aspects is to be read as at least one aspect. Identifying aspects of the subject matter described in the Detailed Description is not intended to identify key or essential features of the claimed subject matter.

The aspects described above and other aspects of the subject matter described herein are illustrated by way of example and not limited in the accompanying figures in which like reference numerals indicate similar elements and in which 

As used herein the term includes and its variants are to be read as open ended terms that mean includes but is not limited to. The term or is to be read as and or unless the context clearly dictates otherwise. The term based on is to be read as based at least in part on. The terms one embodiment and an embodiment are to be read as at least one embodiment. The term another embodiment is to be read as at least one other embodiment. Other definitions explicit and implicit may be included below.

Aspects of the subject matter described herein are operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments or configurations that may be suitable for use with aspects of the subject matter described herein comprise personal computers server computers hand held or laptop devices multiprocessor systems microcontroller based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers personal digital assistants PDAs gaming devices printers appliances including set top media center or other appliances automobile embedded or attached computing devices other mobile devices distributed computing environments that include any of the above systems or devices and the like.

Aspects of the subject matter described herein may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures and so forth which perform particular tasks or implement particular abstract data types. Aspects of the subject matter described herein may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing aspects of the subject matter described herein includes a general purpose computing device in the form of a computer . A computer may include any electronic device that is capable of executing an instruction. Components of the computer may include a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus Peripheral Component Interconnect PCI bus also known as Mezzanine bus Peripheral Component Interconnect Extended PCI X bus Advanced Graphics Port AGP and PCI express PCIe .

The computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by the computer and includes both volatile and nonvolatile media and removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media.

Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile discs DVDs or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer .

Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disc drive that reads from or writes to a removable nonvolatile optical disc such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include magnetic tape cassettes flash memory cards digital versatile discs other optical discs digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disc drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers herein to illustrate that at a minimum they are different copies.

A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner a touch sensitive screen a writing tablet or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB .

A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer may include a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

A baseboard management controller e.g. BMC may be embedded on the computer to allow the computer to communicate with other devices out of band e.g. without using an operating system . The BMC may be able to report temperature cooling fan speeds power mode operating system status and the like to a console. The BMC may include a processor that is capable of operating at a very low power draw when other components of the computer are turned off. In addition the BMC may communicate what power capabilities the computer has and may be able to set the power level of the computer . Power capabilities include the different power level s at which the computer is able to operate.

Aspects of the subject matter described herein are operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with aspects of the subject matter described herein include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microcontroller based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

Aspects of the subject matter described herein may be described in the general context of computer executable instructions such as program modules being executed by a mobile device. Generally program modules include routines programs objects components data structures and so forth which perform particular tasks or implement particular abstract data types. Aspects of the subject matter described herein may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

Although the term server is sometimes used herein it is to be understood that a server may be implemented as a machine that has hardware and or software that is typically associated with a personal computer or some other device. Indeed the use of the term server is not intended to limit aspects of the subject matter described herein to machines that have upgraded or enhanced capabilities.

A programming interface or more simply interface may be viewed as any mechanism process or protocol for enabling one or more segment s of code to communicate with or access the functionality provided by one or more other segment s of code. Alternatively a programming interface may be viewed as one or more mechanism s method s function call s module s object s and the like of a component of a system capable of communicative coupling to one or more mechanism s method s function call s module s and the like of other component s . The term segment of code is intended to include one or more instructions or lines of code and includes for example code modules objects subroutines functions and so on regardless of the terminology applied or whether the code segments are separately compiled or whether the code segments are provided as source intermediate or object code whether the code segments are utilized in a runtime system or process or whether they are located on the same or different machines or distributed across multiple machines or whether the functionality represented by the segments of code are implemented wholly in software wholly in hardware or a combination of hardware and software.

Notionally a programming interface may be viewed generically as shown in or . illustrates an interface as a conduit through which first and second code segments communicate. illustrates an interface as comprising interface objects and which may or may not be part of the first and second code segments which enable first and second code segments of a system to communicate via medium . In the view of one may consider interface objects and as separate interfaces of the same system and one may also consider that objects and plus medium comprise the interface. Although show bi directional flow and interfaces on each side of the flow certain implementations may only have information flow in one direction or no information flow as described below or may only have an interface object on one side. By way of example and not limitation terms such as application programming interface API entry point method function subroutine remote procedure call and component object model COM interface are encompassed within the definition of programming interface.

Aspects of such a programming interface may include the method whereby the first code segment transmits information where information is used in its broadest sense and includes data commands requests etc. to the second code segment the method whereby the second code segment receives the information and the structure sequence syntax organization schema timing and content of the information. In this regard the underlying transport medium itself may be unimportant to the operation of the interface whether the medium be wired or wireless or a combination of both as long as the information is transported in the manner defined by the interface. In certain situations information may not be passed in one or both directions in the conventional sense as the information transfer may be either via another mechanism e.g. information placed in a buffer file etc. separate from information flow between the code segments or non existent as when one code segment simply accesses functionality performed by a second code segment. Any or all of these aspects may be used in a given situation for example depending on whether the code segments are part of a system in a loosely coupled or tightly coupled configuration and so this list is to be considered illustrative and non limiting.

This notion of a programming interface is known to those skilled in the art and is clear from the foregoing detailed description. There are however other ways to implement a programming interface and unless expressly excluded these too are intended to be encompassed by the claims set forth at the end of this specification. Such other ways may appear to be more sophisticated or complex than the simplistic view of but they nonetheless perform a similar function to accomplish the same overall result. Below are some illustrative alternative implementations of a programming interface.

A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown some interfaces can be described in terms of divisible sets of functionality. Thus the interface functionality of may be factored to achieve the same result just as one may mathematically provide 24 as 2 times 2 times 3 times 2. Accordingly as illustrated in the function provided by interface may be subdivided to convert the communications of the interface into multiple interfaces and so on while achieving the same result.

As illustrated in the function provided by interface may be subdivided into multiple interfaces and so forth while achieving the same result. Similarly interface of the second code segment which receives information from the first code segment may be factored into multiple interfaces and so forth. When factoring the number of interfaces included with the 1code segment need not match the number of interfaces included with the 2code segment. In either of the cases of the functional spirit of interfaces and remain the same as with respectively.

The factoring of interfaces may also follow associative commutative and other mathematical properties such that the factoring may be difficult to recognize. For instance ordering of operations may be unimportant and consequently a function carried out by an interface may be carried out well in advance of reaching the interface by another piece of code or interface or performed by a separate component of the system. Moreover one of ordinary skill in the programming arts can appreciate that there are a variety of ways of making different function calls that achieve the same result.

In some cases it may be possible to ignore add or redefine certain aspects e.g. parameters of a programming interface while still accomplishing the intended result. This is illustrated in . For example assume interface of includes a function call Square input precision output that includes three parameters input precision and output and which is issued from the 1Code Segment to the 2Code Segment. If the middle parameter precision is of no concern in a given scenario as shown in it could just as well be ignored or even replaced with a meaningless in this situation parameter. An additional parameter of no concern may also be added. In either event the functionality of square can be achieved so long as output is returned after input is squared by the second code segment.

Precision may very well be a meaningful parameter to some downstream or other portion of the computing system however once it is recognized that precision is not necessary for the narrow purpose of calculating the square it may be replaced or ignored. For example instead of passing a valid precision value a meaningless value such as a birth date could be passed without adversely affecting the result. Similarly as shown in interface is replaced by interface redefined to ignore or add parameters to the interface. Interface may similarly be redefined as interface redefined to ignore unnecessary parameters or parameters that may be processed elsewhere. As can be seen in some cases a programming interface may include aspects such as parameters that are not needed for some purpose and so they may be ignored or redefined or processed elsewhere for other purposes.

It may also be feasible to merge some or all of the functionality of two separate code modules such that the interface between them changes form. For example the functionality of may be converted to the functionality of respectively. In the previous 1and 2Code Segments of are merged into a module containing both of them. In this case the code segments may still be communicating with each other but the interface may be adapted to a form which is more suitable to the single module. Thus for example formal Call and Return statements may no longer be necessary but similar processing or response s pursuant to interface may still be in effect. Similarly shown in part or all of interface from may be written inline into interface to form interface . As illustrated interface is divided into A and B and interface portion A has been coded in line with interface to form interface .

For a concrete example consider that the interface from may perform a function call square input output which is received by interface which after processing the value passed with input to square it by the second code segment passes back the squared result with output. In such a case the processing performed by the second code segment squaring input can be performed by the first code segment without a call to the interface.

A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown in one or more piece s of middleware Divorce Interface s since they divorce functionality and or interface functions from the original interface are provided to convert the communications on the first interface to conform them to a different interface in this case interfaces and . This might be done for example where there is an installed base of applications designed to communicate with say an operating system in accordance with the first interface s protocol but then the operating system is changed to use a different interface in this case interfaces and . It can be seen that the original interface used by the 2Code Segment is changed such that it is no longer compatible with the interface used by the 1Code Segment and so an intermediary is used to make the old and new interfaces compatible.

Similarly as shown in a third code segment can be introduced with divorce interface to receive the communications from interface and with divorce interface to transmit e.g. via interface the interface functionality to for example interfaces and redesigned to work with the interface but to provide the same functional result. Similarly the interfaces and may work together to translate the functionality of interfaces and of to a new operating system while providing the same or similar functional result.

Yet another possible variant is to dynamically rewrite the code to replace the interface functionality with something else but which achieves the same overall result. For example there may be a system in which a code segment presented in an intermediate language e.g. Microsoft IL Java ByteCode etc. is provided to a Just in Time JIT compiler or interpreter in an execution environment such as that provided by the .Net framework the Java runtime environment or other similar runtime type environments . The JIT compiler may be written so as to dynamically convert the communications from the 1Code Segment to the 2Code Segment i.e. to conform them to a different interface as may be required by the 2Code Segment either the original or a different 2Code Segment . This is depicted in .

As can be seen in this approach is similar to the Divorce scenario described above. It might be done for example where an installed base of applications are designed to communicate with an operating system in accordance with a first interface protocol but then the operating system is changed to use a different interface. The JIT Compiler may be used to conform the communications on the fly from the installed base applications to the new interface of the operating system. As depicted in this approach of dynamically rewriting the interface s may be applied to dynamically factor or otherwise alter the interface s as well.

It is also noted that the above described scenarios for achieving the same or similar result as an interface via alternative embodiments may also be combined in various ways serially and or in parallel or with other intervening code. Thus the alternative embodiments presented above are not mutually exclusive and may be mixed matched and combined to produce the same or equivalent scenarios to the generic scenarios presented in . It is also noted that as with most programming constructs there are other similar ways of achieving the same or similar functionality of an interface which may not be described herein but nonetheless are represented by the spirit and scope of the subject matter described herein i.e. it is noted that it is at least partly the functionality represented by and the advantageous results enabled by an interface that underlie the value of an interface.

As mentioned previously packaging solid state storage devices in a well known form factor for rotational type interfaces while compatible may limit performance and flexibility and increase costs.

The processors correspond to the processing unit of and the memories corresponds to the RAM of and may be implemented using identical or similar technology as the corresponding components described in .

Although the environment as illustrated includes various components it will be recognized that more fewer or a different combination of these components and others may be employed without departing from the spirit or scope of aspects of the subject matter described herein. Furthermore the components may be configured in a variety of ways as will be understood by those skilled in the art without departing from the spirit or scope of aspects of the subject matter described herein.

The SAS interfaces present a SCSI interface to access the storage and respectively. The SATA interfaces present a SATA interface for interfacing with the storage and respectively. Although not shown parallel ATA PATA interfaces may exist that provide PATA interfaces to access storage. The PCIe interfaces allow access to the solid state storage respectively. The PCIe interfaces may be pass through or other host to device interfaces that are included with the solid state storage see e.g. device interface of .

The storage may include device interfaces that reside on devices housing the storage . The device interfaces may translate commands received from I O controllers into actions used to access data on the storage . Access as used herein may include reading data writing data deleting data updating data a combination including two or more of the above and the like.

The storage may include rotational storage devices such as hard disk drives CD drives DVD drives tape drives other devices that present an SAS or SATA interface and the like.

The PCIe buses may include any bus that operates in accordance with the PCIe standards or the successors to these standards. A PCIe bus may connect to solid state storage sometimes referred to as SSS . In some embodiments a PCIe bus may connect to a controller that is able to communicate with multiple SSS entities.

The solid state storage sometimes referred to as SSS may include device interfaces not shown . These interfaces may be used to discover and configure the SSS . These interfaces may be accessed via the PCIe buses . The term SSS is used herein to refer to one or more solid state storage entities. A solid state storage entity may include a device interface and collection of memory components such as described in conjunction with and .

Note that data travelling to and from the storage may go through several interfaces before the data is available for the processors to use. Each interface may add latency as well as impose various restrictions on what commands may be given to the stores.

Note that data traveling to the SSS may go directly from the I O controllers to the SSS via the PCIe buses without any intervening SAS or SATA interface. In one embodiment the I O controllers and may be embedded in the processors and respectively.

When configuring an apparatus storage may be partitioned and formatted with file systems. In addition one or more of storage components may be configured in a RAID configuration to boost performance or reliability. An operating system or other programs may also be installed on the storage. When the apparatus is booted up interfaces associated with the storage may be used to discover the storage and report information about the storage to their respective I O controllers.

The storage may be hot swappable to allow for insertion into and removal from the apparatus while the apparatus is turned on. Storage may be connected to a back plane of a computer. The back plane may be connected to a controller. The storage may be enclosed in an enclosure that facilitates inserting and removing the storage from the apparatus.

SSS may be created using NAND NOR flash memory or other memory components. The non volatile memory of SSS may be provided as a collection of memory components e.g. chips where each memory device includes a specified amount of memory. SSS may consume less power and perform better than a rotational hard drive of similar capacity although this is not a requirement of aspects of the subject matter described herein.

In one configuration an SSS may be configured with a dual interface to be interface compatible with common rotating storage devices. In other words the SSS may include a device interface such as an SAS or SATA interface as well as another interface e.g. a PCIe or other interface . The SAS or SATA interface may allow compatibility with software that is unaware of how to utilize the other interface while the other interface may be used to discover and configure additional characteristics of the SSS as well as access data of the SSS.

In one configuration an SSS may be laid out on a card e.g. a PCIe card that may be inserted in a slot of the computer. is a block diagram that illustrates some exemplary components of an SSS card in accordance with aspects of the subject matter described herein. The SSS card illustrated in is not intended to limit layout form factor or number of components that may be included on an SSS. Indeed in other embodiments the layout number and arrangement of memory components and the physical attachment mechanism may vary. For example some PCIe based cards may have a mechanism that allows a system administrator or the like to hot swap the cards from the front of a computer similar to how how swappable hard drives can be swapped in today s systems.

The card may include arrays of memory devices e.g. memory chips laid out on the card . The card may include a device interface that allows the external entities to communicate with the card via a backplane interface e.g. PCIe . The memory capacity of the card may vary depending on the number of memory components and memory capacity of each of the memory components placed on the card . The device interface may provide a way of discovering configuring and accessing the memory of the card .

Although PCIe is sometimes referred to herein aspects of the subject matter described herein may also be applied to other bus interfaces and form factors currently existing or yet to be developed. For example the device interface may be directly connected to a processor bus or even embedded inside a processor in some implementations.

The SSS may include one or more device interfaces while the SSS may include one or more device interfaces . In one embodiment the device interfaces comprise an interface other than a SCSI SATA or PATA interface. In one embodiment there is no SCSI SATA or PATA interface disposed between the host processor and the device interfaces .

Each device interface may have one or more channels sometimes called device lanes by which it may communicate with memory of the device. A device may have a maximum number of device lanes that are to be shared to access memory of the device. The number of device lanes up to the maximum a device interface uses to communicate with a discrete memory component may be configured via the device interface. Allocating more device lanes to designated discrete memory components may increase the bandwidth to or reliability of communication with the designated discrete memory components.

For example referring to the SSS may include discrete memory components that have been divided into physical partitions . The SSS may be configured to have various numbers of device lanes to each of the physical partitions . As illustrated in there may be four device lanes to the physical partition two device lanes to the physical partition one device lane to the physical partition and one device lane to the physical partition . The number of device lanes to each physical partition may be configurable.

Returning to the number of host lanes from the host interfaces to the device interfaces may also be configurable. In one embodiment an apparatus may be configurable to assign a certain number of host lanes to each device interface. In another embodiment an apparatus may be configurable to assign certain host lanes to certain device lanes. In yet another embodiment an apparatus may be configurable to assign percentages of available host lanes to each device interface.

The examples above for options for configuring device and host lanes are not intended to be all inclusive or exhaustive. Indeed based on the teachings herein those skilled in the art may recognize other host or device lane configuration options that may also be used without departing from the spirit and scope of aspects of the subject matter described herein.

Upon request the device interfaces may provide information about the SSS . This information may for example include 

1. SSS capacity. SSS capacity may include the amount of memory available the number of discrete memory devices and the like.

A. Maximum minimum size for a physical partition of the SSS. For example a SSS may support partitioning discrete memory components contained thereon into groups where each group physically represents a separate store to external entities. In other words to an operating system or other software interacting with the SSS the SSS may present a plurality of different storage devices. A group of storage components of an SSS that is presented to software as a physical device is sometimes referred to herein as a physical partition of the SSS. A device interface may allow partitioning discrete memory components based on the number of discrete memory components via a specified memory size e.g. certain amount of memory or the like.

B. Granularity for sizes of physical partitions. For example an SSS may be able to put a discrete memory component in one physical partition or another but may not be able to put a portion of the discrete memory component in one physical partition and another portion of the discrete memory component in another physical partition. Some SSS however may allow discrete memory components to be split between physical partitions. Some SSS may only be able to partition discrete memory components in some pre defined multiple. For example an SSS may be able to create a physical partition having 2 4 6 or some other even number of discrete memory components.

C. Memory reliability. An SSS may support various options for memory reliability. For example certain discrete memory components may be allocated as spares. Allocating these spares is sometimes referred to as over provisioning. Some solid state memory can only be written to a certain number of times before the memory becomes unusable. If a used memory component fails or is close to failing the data of the memory component may be transferred to a spare and subsequent access to the memory component may be directed to the spare. This failover capacity of an SSS may be implemented directly on the SSS itself or may be implemented external to the SSS.

For example an SSS may include components that track the reliability or wearing of discrete memory portions of the SSS and may re route access requests to a spare automatically when a memory component fails or is close to failing. An interface may allow fine grained requests e.g. a number that indicate how many spares are to be allocated or may allow coarser grained requests that indicate a level of reliability e.g. high medium low etc.

In external implementations a component e.g. software or hardware external to the SSS may receive or keep track of information that indicates whether a device is failing and may take actions to route access requests to a spare. This information may take many forms including keeping track of how many times memory locations have been written to and re routing access requests accordingly receiving reliability reports from the device comparing hashes checksums or other data computed from or returned from memory of the device with hashes checksums or other data computed from or returned from other storage and so forth.

Similarly the SSS may natively support wear leveling. With wear leveling writes to the device are distributed so that memory of the SSS wears evenly. By distributing the writes the number of writes to any particular location may be kept in line with writes to other locations so that the memory in the particular location will not wear out significantly faster than other memory of the device. In some implementations a device may not natively support wear leveling. In these implementations an external component may distribute writes as appropriate.

D. RAID capabilities. SSS may natively support one or more RAID configurations for discrete memory components of the SSS. In a RAID configuration the SSS may perform RAID functionality that treats different hardware partitions as different storage devices for RAID purposes . Thus two or more physical partitions on a device may be used together for RAID 0 RAID 1 RAID 3 RAID 4 RAID 5 RAID 10 RAID 01 or some other RAID configuration.

In some cases a host interface or other component may support RAID configurations that span two or more separate SSS entities e.g. memory on different cards . In these cases one or more of the SSS entities may or may not natively support RAID although memory on the devices may still be used in a RAID configuration using the host interface or other component.

E. Bandwidth capabilities. An apparatus may support configuring host lanes to SSS or even assigning certain host lanes to physical partitions of SSS as mentioned previously. SSS may support configuring the number of device lanes to each physical partition of memory devices as mentioned previously. In some implementations the number of device lanes to a particular physical partition may be indicated via the device interface. In other implementations SSS may support a request to give a specified portion of the device s bandwidth to a particular physical partition.

F. Multipath capabilities. SSS may support configuring multiple device lanes to a group of memory components for reliability purposes. Similarly an apparatus may support configuring multiple host lanes to an SSS for reliability purposes. For example if one or more lanes to a group of memory components host interface or host controller become inoperable other lanes if any may be used to communicate with memory components.

G. Power capabilities. SSS may support different performance options bandwidth speed of reads writes memory capacity based on power states of the device. SSS may also support different power management options.

H. Failure mode. SSS may go into a degraded state and perform at a lower level e.g. fewer writes reads per second . It may just perform at full throttle until it burns itself up. It may be able to fail into other storage by transferring data to the other storage.

I. Reporting capabilities. SSS may be able to indicate status regarding memory components. For example the SSS may be able to indicate the number of times on average that a memory component can be written to before failure. As another example SSS may be able to indicate a projected remaining time for functioning based on historic usage patterns and available spares.

J. Encryption capabilities. SSS may support encryption and may have the ability to encrypt and decrypt data stored on the SSS or any physical partition thereof.

The host processor may comprise one or more processors similar to the processing unit of . The host interfaces provide an interface by which the host processor may communicate with the SSS . The host interfaces may be included on the host processor or may be separate from outside of the host processor .

The host processor may execute instructions to discover capabilities of the solid state storage via the host interfaces . The host processor may work in conjunction with the host interfaces and the device interfaces to discover the capabilities. The processor may place data regarding the capabilities in a data structure. The host processor may execute functions of an interface to access data in the data structure to provide to a calling process.

The term function as used herein may be thought of as a portion of code hardware firmware or the like that may be executed to perform one or more tasks. In software although a function may include a block of code that returns data it is not limited to blocks of code that return data. A function may also perform a specific task without returning any data. Furthermore a function may or may not have input parameters. A function may include a subroutine a subprogram a procedure method routine or the like. A function may be implemented by a predefined protocol specified elsewhere. For example writing certain data to a region on the host interface may cause a function to execute.

In response to a process requesting information regarding an SSS via an interface the host processor may execute one or more functions including one or more of the following 

a function for determining capability of the solid state storage of allocating a portion of memory of the solid state storage to use when other memory of the solid state storage fails e.g. over provisioning 

a function for determining whether the solid state storage supports automatic failover from failed memory components to other memory components 

a function for determining bandwidth configurations for the device a bandwidth configuration indicating a number of device lanes to a physical partition of memory of the solid state storage 

a function for determining multipath capabilities of the solid state storage and or of host lanes to the solid state storage 

an extensibility function that returns data regarding additional capabilities of the solid state device 

A process may obtain information about capabilities of the SSS through an interface that indicates the functions above. These functions may obtain data from the data structure previously mentioned and provide the data to a calling process. A purpose of the interface is to provide a common interface by which applications OS components and other software on the host processor may discover the capacity and characteristics of different SSS. The interface may also provide a common interface by which applications OS components and other software may access data on SSS without having knowledge of the physical configuration of the SSS.

If an SSS does not support a particular feature the host processor may indicate this fact to a calling process. Alternatively for some features that are not supported on the SSS the host processor and or the host interfaces may implement the additional features external to the SSS such that a calling process can safely assume that the feature exists. For example the host interface may implement wear leveling RAID capabilities or other features that may not reside natively on an SSS.

The software interface may comprise an interface by which the policy manager the user interface and the remote management interface may instruct the host processor to discover determine characteristics of and configure the devices . The software interface may provide data to the policy manager the user interface the remote management interface or other caller to indicate characteristics of the devices provide data requested from the devices and provide reporting data regarding the devices .

The policy manager may automatically configure a solid state device based on a policy and characteristics of one or more processes. For example a database application may have different storage needs from a word processing application. Furthermore these needs may change over time. In response the policy manager may again configure the SSS.

The policy manager may configure the devices by sending requests via the software interface . The policy manager may receive information regarding an SSS or process on the apparatus via the software interface . As used herein the term configure means configure in the case of an SSS that has not been configured and re configure in the case of an SSS that has already been configured.

The term process and its variants as used herein may include one or more traditional processes threads components libraries objects that perform tasks and the like. A process may be implemented in hardware software or a combination of hardware and software. In an embodiment a process is any mechanism however called capable of or used in performing an action. A process may be distributed over multiple devices or a single device.

The user interface is operable to receive input indicative of one or more configuration settings to apply to an SSS. The configuration settings indicated by a user may include configuring one or more physical partitions host lanes device lanes provisioning of the solid state device as a cache defining one or more policies for configuring the host lanes to the solid state device and or the device lanes to memory components of the solid state device and defining policies that govern automatic provisioning configuration and assignment of memory of the SSS to act as a cache for a process other configuration settings mentioned previously and the like. Similar to the policy manager the user interface may communicate via the software interface to obtain information about an SSS and to configure the SSS.

The remote management interface allows a process on another apparatus to obtain information about an SSS and or processes installed or executing on the apparatus . The remote management interface also allows a process e.g. a management process on another apparatus to configure an SSS. The remote management interface may communicate via the software interface to obtain information about an SSS and to configure the SSS. The remote management interface may be used in conjunction with a management console to configure and manage SSS on a plurality of computers.

Turning to at block the actions begin. At block capabilities of SSS are discovered. The SSS may potentially reside on one or more hardware components of a computer. For example the SSS may reside on multiple cards chips or other hardware components of the computer as mentioned previously. Each of the hardware components may potentially have different capabilities. For example two cards may have different configuration capabilities. For example referring to the host processor may access the host interfaces to discover the capabilities of the SSS .

At block the data regarding the capabilities is stored in a data structure. For example referring to data regarding the capabilities may be stored in the RAM dedicated memory associated with the host interfaces or some other memory.

At block the characteristics of the discovered SSS are accessed via an interface. For example referring to capabilities of the SSS may be requested via the software interface . An interface may indicate a plurality of callable functions for determining characteristics of the solid state storage. When called a function may access data in the data structure indicated above to provide one or more characteristics to a calling process.

At block configuration regarding the SSS may be performed. For example a physical partition may be created or changed a number of host lanes to carry data to and or from the SSS may be assigned the number of memory components assigned as spares may be configured or some other configuration may be performed. For example referring to the policy manager the user interface or the remote management interface may request configuring one of the devices via the software interface .

At block an SSS may be accessed via the interface. After an SSS has been configured data may be stored on and retrieved from the SSS. For example referring to an application not shown may access data on a physical partition of the SSS .

At block the SSS may be re configured based on policy. For example if a physical partition of an SSS is becoming full or is close to the number of writes at which the SSS may begin to fail the SSS may be re configured to add more space to the physical partition or assign more memory components as spares to the physical partition. This may be done automatically semi automatically or manually via a policy manager remote management process user interface or the like. For example referring to the policy manager may re configure an SSS based on a policy. A re configuration may occur and re occur at various times after an SSS is discovered.

Turning to at block the actions begin. At block input indicating a configuration command is received. The input may be received from a user interface storage management process or some other entity. For example referring to the host interface may receive input that includes a configuration command for configuring the SSS .

At block the SSS is configured in accordance with the configuration command. This may involve sending one or more requests to the solid state storage. For example referring to the host interface may send multiple requests to the device interface to configure the SSS .

As can be seen from the foregoing detailed description aspects have been described related to storage configuration. While aspects of the subject matter described herein are susceptible to various modifications and alternative constructions certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood however that there is no intention to limit aspects of the claimed subject matter to the specific forms disclosed but on the contrary the intention is to cover all modifications alternative constructions and equivalents falling within the spirit and scope of various aspects of the subject matter described herein.

