---

title: Methods to facilitate primitive batching
abstract: One embodiment of the present invention sets forth a technique for splitting a set of vertices into a plurality of batches for processing. The method includes receiving one or more primitives each containing an associated set of vertices. For each of the one or more primitives, one or more vertices are gathered from the set of vertices, the vertices are arranged into one or more batches, the batch is routed to a processing pipeline line to process each batch as a separate primitive, and the one or more batches are processed to produce results identical to those of processing the entire primitive as a single entity.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09589310&OS=09589310&RS=09589310
owner: NVIDIA Corporation
number: 09589310
owner_city: Santa Clara
owner_country: US
publication_date: 20101005
---
This application claims priority benefit to United States provisional patent application titled METHODS TO FACILITATE DRIVER BATCHING filed on Oct. 7 2009 and having Ser. No. 61 249 550.

The present invention generally relates to GPU drivers and more specifically to batching vertices of a primitive prior to routing the vertices to a GPU.

In conventional graphics processing the OpenGL application programming interface API includes an explicit API visible Begin command and End command that encompass primitive draw commands that cause a graphics processor to render primitives. A driver receives the Begin command and subsequently receives a stream of vertices that comprise the primitives to be rendered followed by the End command. The driver may want to arrange the vertices specified by the application into regular batches for optimal processing by parallel graphics processing units GPUs and for other performance optimizations. The driver is unaware however of the length of the stream of vertices which causes a number of issues.

For example a driver in the current art might store the vertex data specified by the application in a vertex buffer that can be directly accessed by graphics hardware. Instead of passing the vertex data directly to the graphics processor the driver instead passes a single index per vertex which will be used to identify the location of that vertex s data in the vertex buffer. While building these batches there are several good reasons for the driver to want to limit the batch size. Such a limit will permit smaller allocations for the vertex buffer and reduces data transfer by passing compact indices to the GPU. In the current art if each vertex is indexed by sixteen bits and the stream eventually exceeds 65 536 vertices then each index of received vertices included in the stream must be updated to thirty two bits so that the driver may properly index the remaining vertices included in the stream. Such increases require an increased amount of storage space and also reduce the effectiveness of hardware that is optimally configured to interact with sixteen bit indices.

Even in cases where the vertices specified in a primitive are specified in regular form and with a vertex count known when the primitive is first specified splitting large primitives into batches may still be desirable. Batching permits optimizations that skip processing of portions of the primitive that are not visible to the end user and also allows for state changes in the middle of a primitive.

Accordingly what is needed in the art is a technique for transforming a set of primitives into a collection of batches with a reduced number of vertices in each batch while still preserving the semantics of the original API command stream.

One embodiment of the present invention sets forth a technique for splitting a set of vertices into a plurality of batches for processing. The method includes receiving one or more primitives each containing an associated set of vertices. For each of the one or more primitives one or more vertices are gathered from the set of vertices the vertices are arranged into one or more batches the batch is routed to a processing pipeline line to process each batch as a separate primitive and the one or more batches are processed to produce results identical to those of processing the entire primitive as a single entity.

In the following description numerous specific details are set forth to provide a more thorough understanding of the present invention. However it will be apparent to one of skill in the art that the present invention may be practiced without one or more of these specific details. In other instances well known features have not been described in order to avoid obscuring the present invention.

In one embodiment the parallel processing subsystem incorporates circuitry optimized for graphics and video processing including for example video output circuitry and constitutes a graphics processing unit GPU . In another embodiment the parallel processing subsystem incorporates circuitry optimized for general purpose processing while preserving the underlying computational architecture described in greater detail herein. In yet another embodiment the parallel processing subsystem may be integrated with one or more other system elements such as the memory bridge CPU and I O bridge to form a system on chip SoC .

It will be appreciated that the system shown herein is illustrative and that variations and modifications are possible. The connection topology including the number and arrangement of bridges the number of CPUs and the number of parallel processing subsystems may be modified as desired. For instance in some embodiments system memory is connected to CPU directly rather than through a bridge and other devices communicate with system memory via memory bridge and CPU . In other alternative topologies parallel processing subsystem is connected to I O bridge or directly to CPU rather than to memory bridge . In still other embodiments I O bridge and memory bridge might be integrated into a single chip. Large embodiments may include two or more CPUs and two or more parallel processing systems . The particular components shown herein are optional for instance any number of add in cards or peripheral devices might be supported. In some embodiments switch is eliminated and network adapter and add in cards connect directly to I O bridge .

Referring again to in some embodiments some or all of PPUs in parallel processing subsystem are graphics processors with rendering pipelines that can be configured to perform various tasks related to generating pixel data from graphics data supplied by CPU and or system memory via memory bridge and bus interacting with local parallel processing memory which can be used as graphics memory including e.g. a conventional frame buffer to store and update pixel data delivering pixel data to display device and the like. In some embodiments parallel processing subsystem may include one or more PPUs that operate as graphics processors and one or more other PPUs that are used for general purpose computations. The PPUs may be identical or different and each PPU may have its own dedicated parallel processing memory device s or no dedicated parallel processing memory device s . One or more PPUs may output data to display device or each PPU may output data to one or more display devices .

In operation CPU is the master processor of computer system controlling and coordinating operations of other system components. In particular CPU issues commands that control the operation of PPUs . In some embodiments CPU writes a stream of commands for each PPU to a pushbuffer not explicitly shown in either or that may be located in system memory parallel processing memory or another storage location accessible to both CPU and PPU . PPU reads the command stream from the pushbuffer and then executes commands asynchronously relative to the operation of CPU .

Referring back now to each PPU includes an I O input output unit that communicates with the rest of computer system via communication path which connects to memory bridge or in one alternative embodiment directly to CPU . The connection of PPU to the rest of computer system may also be varied. In some embodiments parallel processing subsystem is implemented as an add in card that can be inserted into an expansion slot of computer system . In other embodiments a PPU can be integrated on a single chip with a bus bridge such as memory bridge or I O bridge . In still other embodiments some or all elements of PPU may be integrated on a single chip with CPU .

In one embodiment communication path is a PCI EXPRESS link in which dedicated lanes are allocated to each PPU as is known in the art. Other communication paths may also be used. An I O unit generates packets or other signals for transmission on communication path and also receives all incoming packets or other signals from communication path directing the incoming packets to appropriate components of PPU . For example commands related to processing tasks may be directed to a host interface while commands related to memory operations e.g. reading from or writing to parallel processing memory may be directed to a memory crossbar unit . Host interface reads each pushbuffer and outputs the work specified by the pushbuffer to a front end .

Each PPU advantageously implements a highly parallel processing architecture. As shown in detail PPU includes a processing cluster array that includes a number C of general processing clusters GPCs where C 1. Each GPC is capable of executing a large number e.g. hundreds or thousands of threads concurrently where each thread is an instance of a program. In various applications different GPCs may be allocated for processing different types of programs or for performing different types of computations. For example in a graphics application a first set of GPCs may be allocated to perform tessellation operations and to produce primitive topologies for patches and a second set of GPCs may be allocated to perform tessellation shading to evaluate patch parameters for the primitive topologies and to determine vertex positions and other per vertex attributes. The allocation of GPCs may vary dependent on the workload arising for each type of program or computation.

GPCs receive processing tasks to be executed via a work distribution unit which receives commands defining processing tasks from front end unit . Processing tasks include indices of data to be processed e.g. surface patch data primitive data vertex data and or pixel data as well as state parameters and commands defining how the data is to be processed e.g. what program is to be executed . Work distribution unit may be configured to fetch the indices corresponding to the tasks or work distribution unit may receive the indices from front end . Front end ensures that GPCs are configured to a valid state before the processing specified by the pushbuffers is initiated.

When PPU is used for graphics processing for example the processing workload for each patch is divided into approximately equal sized tasks to enable distribution of the tessellation processing to multiple GPCs . A work distribution unit may be configured to produce tasks at a frequency capable of providing tasks to multiple GPCs for processing. By contrast in conventional systems processing is typically performed by a single processing engine while the other processing engines remain idle waiting for the single processing engine to complete its tasks before beginning their processing tasks. In some embodiments of the present invention portions of GPCs are configured to perform different types of processing. For example a first portion may be configured to perform vertex shading and topology generation a second portion may be configured to perform tessellation and geometry shading and a third portion may be configured to perform pixel shading in screen space to produce a rendered image. Intermediate data produced by GPCs may be stored in buffers to allow the intermediate data to be transmitted between GPCs for further processing.

Memory interface includes a number D of partition units that are each directly coupled to a portion of parallel processing memory where D 1. As shown the number of partition units generally equals the number of DRAM . In other embodiments the number of partition units may not equal the number of memory devices. Persons skilled in the art will appreciate that DRAM may be replaced with other suitable storage devices and can be of generally conventional design. A detailed description is therefore omitted. Render targets such as frame buffers or texture maps may be stored across DRAMs allowing partition units to write portions of each render target in parallel to efficiently use the available bandwidth of parallel processing memory .

Any one of GPCs may process data to be written to any of the DRAMs within parallel processing memory . Crossbar unit is configured to route the output of each GPC to the input of any partition unit or to another GPC for further processing. GPCs communicate with memory interface through crossbar unit to read from or write to various external memory devices. In one embodiment crossbar unit has a connection to memory interface to communicate with I O unit as well as a connection to local parallel processing memory thereby enabling the processing cores within the different GPCs to communicate with system memory or other memory that is not local to PPU . In the embodiment shown in crossbar unit is directly connected with I O unit . Crossbar unit may use virtual channels to separate traffic streams between the GPCs and partition units .

Again GPCs can be programmed to execute processing tasks relating to a wide variety of applications including but not limited to linear and nonlinear data transforms filtering of video and or audio data modeling operations e.g. applying laws of physics to determine position velocity and other attributes of objects image rendering operations e.g. tessellation shader vertex shader geometry shader and or pixel shader programs and so on. PPUs may transfer data from system memory and or local parallel processing memories into internal on chip memory process the data and write result data back to system memory and or local parallel processing memories where such data can be accessed by other system components including CPU or another parallel processing subsystem .

A PPU may be provided with any amount of local parallel processing memory including no local memory and may use local memory and system memory in any combination. For instance a PPU can be a graphics processor in a unified memory architecture UMA embodiment. In such embodiments little or no dedicated graphics parallel processing memory would be provided and PPU would use system memory exclusively or almost exclusively. In UMA embodiments a PPU may be integrated into a bridge chip or processor chip or provided as a discrete chip with a high speed link e.g. PCI EXPRESS connecting the PPU to system memory via a bridge chip or other communication means.

As noted above any number of PPUs can be included in a parallel processing subsystem . For instance multiple PPUs can be provided on a single add in card or multiple add in cards can be connected to communication path or one or more of PPUs can be integrated into a bridge chip. PPUs in a multi PPU system may be identical to or different from one another. For instance different PPUs might have different numbers of processing cores different amounts of local parallel processing memory and so on. Where multiple PPUs are present those PPUs may be operated in parallel to process data at a higher throughput than is possible with a single PPU . Systems incorporating one or more PPUs may be implemented in a variety of configurations and form factors including desktop laptop or handheld personal computers servers workstations game consoles embedded systems and the like.

Operation of GPC is advantageously controlled via a pipeline manager that distributes processing tasks to streaming multiprocessors SPMs . Pipeline manager may also be configured to control a work distribution crossbar by specifying destinations for processed data output by SPMs .

In one embodiment each GPC includes a number M of SPMs where M 1 each SPM configured to process one or more thread groups. Also each SPM advantageously includes an identical set of functional execution units e.g. arithmetic logic units and load store units shown as Exec units and LSUs in that may be pipelined allowing a new instruction to be issued before a previous instruction has finished as is known in the art. Any combination of functional execution units may be provided. In one embodiment the functional units support a variety of operations including integer and floating point arithmetic e.g. addition and multiplication comparison operations Boolean operations AND OR XOR bit shifting and computation of various algebraic functions e.g. planar interpolation trigonometric exponential and logarithmic functions etc. and the same functional unit hardware can be leveraged to perform different operations.

The series of instructions transmitted to a particular GPC constitutes a thread as previously defined herein and the collection of a certain number of concurrently executing threads across the parallel processing engines not shown within an SPM is referred to herein as a warp or thread group. As used herein a thread group refers to a group of threads concurrently executing the same program on different input data with one thread of the group being assigned to a different processing engine within an SPM . A thread group may include fewer threads than the number of processing engines within the SPM in which case some processing engines will be idle during cycles when that thread group is being processed. A thread group may also include more threads than the number of processing engines within the SPM in which case processing will take place over consecutive clock cycles. Since each SPM can support up to G thread groups concurrently it follows that up to G M thread groups can be executing in GPC at any given time.

Additionally a plurality of related thread groups may be active in different phases of execution at the same time within an SPM . This collection of thread groups is referred to herein as a cooperative thread array CTA or thread array. The size of a particular CTA is equal to m k where k is the number of concurrently executing threads in a thread group and is typically an integer multiple of the number of parallel processing engines within the SPM and m is the number of thread groups simultaneously active within the SPM . The size of a CTA is generally determined by the programmer and the amount of hardware resources such as memory or registers available to the CTA.

Each SPM contains an L1 cache not shown or uses space in a corresponding L1 cache outside of the SPM that is used to perform load and store operations. Each SPM also has access to L2 caches within the partition units that are shared among all GPCs and may be used to transfer data between threads. Finally SPMs also have access to off chip global memory which can include e.g. parallel processing memory and or system memory . It is to be understood that any memory external to PPU may be used as global memory. Additionally an L1.5 cache may be included within the GPC configured to receive and hold data fetched from memory via memory interface requested by SPM including instructions uniform data and constant data and provide the requested data to SPM . Embodiments having multiple SPMs in GPC beneficially share common instructions and data cached in L1.5 cache .

Each GPC may include a memory management unit MMU that is configured to map virtual addresses into physical addresses. In other embodiments MMU s may reside within the memory interface . The MMU includes a set of page table entries PTEs used to map a virtual address to a physical address of a tile and optionally a cache line index. The MMU may include address translation lookaside buffers TLB or caches which may reside within multiprocessor SPM or the L1 cache or GPC . The physical address is processed to distribute surface data access locality to allow efficient request interleaving among partition units. The cache line index may be used to determine whether of not a request for a cache line is a hit or miss.

In graphics and computing applications a GPC may be configured such that each SPM is coupled to a texture unit for performing texture mapping operations e.g. determining texture sample positions reading texture data and filtering the texture data. Texture data is read from an internal texture L1 cache not shown or in some embodiments from the L1 cache within SPM and is fetched from an L2 cache parallel processing memory or system memory as needed. Each SPM outputs processed tasks to work distribution crossbar in order to provide the processed task to another GPC for further processing or to store the processed task in an L2 cache parallel processing memory or system memory via crossbar unit . A preROP pre raster operations is configured to receive data from SPM direct data to ROP units within partition units and perform optimizations for color blending organize pixel color data and perform address translations.

It will be appreciated that the core architecture described herein is illustrative and that variations and modifications are possible. Any number of processing units e.g. SPMs or texture units preROPs may be included within a GPC . Further while only one GPC is shown a PPU may include any number of GPCs that are advantageously functionally similar to one another so that execution behavior does not depend on which GPC receives a particular processing task. Further each GPC advantageously operates independently of other GPCs using separate and distinct processing units L1 caches and so on.

In graphics applications ROP is a processing unit that performs raster operations such as stencil z test blending and the like and outputs pixel data as processed graphics data for storage in graphics memory. In some embodiments of the present invention ROP is included within each GPC instead of partition unit and pixel read and write requests are transmitted over crossbar unit instead of pixel fragment data.

The processed graphics data may be displayed on display device or routed for further processing by CPU or by one of the processing entities within parallel processing subsystem . Each partition unit includes a ROP in order to distribute processing of the raster operations. In some embodiments ROP may be configured to compress z or color data that is written to memory and decompress z or color data that is read from memory.

Persons skilled in the art will understand that the architecture described in in no way limits the scope of the present invention and that the techniques taught herein may be implemented on any properly configured processing unit including without limitation one or more CPUs one or more multi core CPUs one or more PPUs one or more GPCs one or more graphics or special purpose processing units or the like without departing the scope of the present invention.

In embodiments of the present invention it is desirable to use PPU or other processor s of a computing system to execute general purpose computations using thread arrays. Each thread in the thread array is assigned a unique thread identifier thread ID that is accessible to the thread during its execution. The thread ID which can be defined as a one dimensional or multi dimensional numerical value controls various aspects of the thread s processing behavior. For instance a thread ID may be used to determine which portion of the input data set a thread is to process and or to determine which portion of an output data set a thread is to produce or write.

A sequence of per thread instructions may include at least one instruction that defines a cooperative behavior between the representative thread and one or more other threads of the thread array. For example the sequence of per thread instructions might include an instruction to suspend execution of operations for the representative thread at a particular point in the sequence until such time as one or more of the other threads reach that particular point an instruction for the representative thread to store data in a shared memory to which one or more of the other threads have access an instruction for the representative thread to atomically read and update data stored in a shared memory to which one or more of the other threads have access based on their thread IDs or the like. The CTA program can also include an instruction to compute an address in the shared memory from which data is to be read with the address being a function of the thread ID. By defining suitable functions and providing synchronization techniques data can be written to a given location in shared memory by one thread of a CTA and read from that location by a different thread of the same CTA in a predictable manner. Consequently any desired pattern of data sharing among threads can be supported and any thread in a CTA can share data with any other thread in the same CTA. The extent if any of data sharing among threads of a CTA is determined by the CTA program thus it is to be understood that in a particular application that uses CTAs the threads of a CTA might or might not actually share data with each other depending on the CTA program and the terms CTA and thread array are used synonymously herein.

SPM provides on chip internal data storage with different levels of accessibility. Special registers not shown are readable but not writeable by LSU and are used to store parameters defining each CTA thread s position. In one embodiment special registers include one register per CTA thread or per exec unit within SPM that stores a thread ID each thread ID register is accessible only by a respective one of the exec unit . Special registers may also include additional registers readable by all CTA threads or by all LSUs that store a CTA identifier the CTA dimensions the dimensions of a grid to which the CTA belongs and an identifier of a grid to which the CTA belongs. Special registers are written during initialization in response to commands received via front end from device driver and do not change during CTA execution.

A parameter memory not shown stores runtime parameters constants that can be read but not written by any CTA thread or any LSU . In one embodiment device driver provides parameters to the parameter memory before directing SPM to begin execution of a CTA that uses these parameters. Any CTA thread within any CTA or any exec unit within SPM can access global memory through a memory interface . Portions of global memory may be stored in the L1 cache .

Local register file is used by each CTA thread as scratch space each register is allocated for the exclusive use of one thread and data in any of local register file is accessible only to the CTA thread to which it is allocated. Local register file can be implemented as a register file that is physically or logically divided into P lanes each having some number of entries where each entry might store e.g. a 32 bit word . One lane is assigned to each of the N exec units and P load store units LSU and corresponding entries in different lanes can be populated with data for different threads executing the same program to facilitate SIMD execution. Different portions of the lanes can be allocated to different ones of the G concurrent thread groups so that a given entry in the local register file is accessible only to a particular thread. In one embodiment certain entries within the local register file are reserved for storing thread identifiers implementing one of the special registers.

Shared memory is accessible to all CTA threads within a single CTA any location in shared memory is accessible to any CTA thread within the same CTA or to any processing engine within SPM . Shared memory can be implemented as a shared register file or shared on chip cache memory with an interconnect that allows any processing engine to read from or write to any location in the shared memory. In other embodiments shared state space might map onto a per CTA region of off chip memory and be cached in L1 cache . The parameter memory can be implemented as a designated section within the same shared register file or shared cache memory that implements shared memory or as a separate shared register file or on chip cache memory to which the LSUs have read only access. In one embodiment the area that implements the parameter memory is also used to store the CTA ID and grid ID as well as CTA and grid dimensions implementing portions of the special registers. Each LSU in SPM is coupled to a unified address mapping unit that converts an address provided for load and store instructions that are specified in a unified memory space into an address in each distinct memory space. Consequently an instruction may be used to access any of the local shared or global memory spaces by specifying an address in the unified memory space.

The L1 Cache in each SPM can be used to cache private per thread local data and also per application global data. In some embodiments the per CTA shared data may be cached in the L1 cache . The LSUs are coupled to a uniform L1 cache the shared memory and the L1 cache via a memory and cache interconnect . The uniform L1 cache is configured to receive read only data and constants from memory via the L1.5 Cache .

Data assembler processing unit collects vertex data for high order surfaces primitives and the like and outputs the vertex data including the vertex attributes to vertex processing unit . Vertex processing unit is a programmable execution unit that is configured to execute vertex shader programs lighting and transforming vertex data as specified by the vertex shader programs. For example vertex processing unit may be programmed to transform the vertex data from an object based coordinate representation object space to an alternatively based coordinate system such as world space or normalized device coordinates NDC space. Vertex processing unit may read data that is stored in L1 cache parallel processing memory or system memory by data assembler for use in processing the vertex data.

Primitive assembler receives vertex attributes from vertex processing unit reading stored vertex attributes as needed and constructs graphics primitives for processing by tessellation control processing unit . Graphics primitives include triangles line segments points patches and the like.

The tessellation control processing unit treats the input vertices as control points for a geometric patch and transforms these control points from the patch s input represenation often called the patch s basis into a representation suitable for efficient surface evaluation by the tessellation evaluation shader . The tessellation control processing unit also computes tessellation factors for edges of geometric patches. A tessellation factor applies to a single edge and quantifies a view dependent level of detail associated with the edge. A tessellation primitive generator is configured to receive the tessellation factors for edges of a patch and to tessellate the patch into multiple geometric primitives such as line triangle or quadrilateral primitives which are transmitted to a tessellation evaluation processing unit . The tessellation evaluation processing unit operates on parameterized coordinates of the subdivided patch to generate a surface representation and vertex attributes for each vertex associated with the geometric primitives.

Primitive assembler receives vertex attributes from tessellation evaluation processing unit reading stored vertex attributes as needed and constructs graphics primitived for processing by geometry processing unit . Geometry processing unit is a programmable execution unit that is configured to execute geometry shader programs transforming graphics primitives received from primitive assembler as specified by the geometry shader programs. For example geometry processing unit may be programmed to subdivide the graphics primitives into one or more new graphics primitives and calculate parameters such as plane equation coefficients that are used to rasterize the new graphics primitives.

In some embodiments geometry processing unit may also add or delete elements in the geometry stream. Geometry processing unit outputs the parameters and vertices specifying new graphics primitives to primitive assembler which receives the parameters and vertices from the geometry processing unit reading stored vertex attributes as needed and constructs graphics primitives for processing by a viewport scale cull and clip unit . Geometry processing unit may read data that is stored in parallel processing memory or system memory for use in processing the geometry data. Viewport scale cull and clip unit performs clipping culling and viewport scaling and outputs processed graphics primitives to a rasterizer .

Rasterizer scan converts the new graphics primitives and outputs fragments and coverage data to fragment processing unit . Additionally rasterizer may be configured to perform z culling and other z based optimizations.

Fragment processing unit is a programmable execution unit that is configured to execute fragment shader programs transforming fragments received from rasterizer as specified by the fragment shader programs. For example fragment processing unit may be programmed to perform operations such as perspective correction texture mapping shading blending and the like to produce shaded fragments that are output to raster operations unit . Fragment processing unit may read data that is stored in parallel processing memory or system memory for use in processing the fragment data. Fragments may be shaded at pixel sample or other granularity depending on the programmed sampling rate.

Raster operations unit is a processing unit that performs raster operations such as stencil z test blending and the like and outputs pixel data as processed graphics data for storage in graphics memory. The processed graphics data may be stored in graphics memory e.g. parallel processing memory and or system memory for display on display device or for further processing by CPU or parallel processing subsystem . In some embodiments of the present invention raster operations unit is configured to compress z or color data that is written to memory and decompress z or color data that is read from memory.

The present invention introduces the novel concept of adding four split modes to the Begin command passed to the parallel processing subsystem NORMAL BEGIN NORMAL END NORMAL BEGIN OPEN END OPEN BEGIN OPEN END and OPEN BEGIN NORMAL END. In one embodiment the device driver receives a specification of vertex data that comprises one or more primitives each comprising a Begin command one or more vertices worth of vertex data and a final End command. Upon receipt of the first Begin command the device driver begins collecting the vertex data and may be interrupted prior to receiving all of the vertex data to send the thus far collected vertex data referred to herein as a batch to the parallel processing subsystem . This technique may be realized through specification of a split mode as part of the data provided to a Begin command implemented by the parallel processing subsystem described here as BEGIN.OPEN BEGIN OPEN END. Appending such split modes to a Begin command allows for the device driver to route a batch of the vertex data to the parallel processing subsystem thereby segmenting the vertex data into batches that are processed independently by the parallel processing subsystem but having the same overall result as if all the vertices were processed at once.

In the embodiments described herein the NORMAL BEGIN NORMAL END split mode is used to implement a typical Begin and End command sequence where all of the vertex data is entirely gathered into a single batch and is routed to the parallel processing subsystem . The NORMAL BEGIN OPEN END split mode is used to specify the first batch of a Begin and End command sequence where the vertex data are routed to the parallel processing subsystem in at least two batches.

The OPEN BEGIN OPEN END split mode is used to specify batches in the middle of a Begin and End command sequence. The OPEN BEGIN OPEN END split mode allows for batching the vertex data into three or more batches that are routed to the parallel processing subsystem . Finally the OPEN BEGIN NORMAL END split mode is used to specify a final batch of the vertex data which is also routed to the parallel processing subsystem .

The split mode controls the handling of line stipple and edges. For LINES LINE STRIP and LINE LOOP primitives as well as POLYGON primitives drawn as outlines OPEN BEGIN OPEN END and OPEN BEGIN NORMAL END split modes do not reset the line stipple phase at the beginning of the batch. For POLYGON primitives drawn as outlines NORMAL BEGIN OPEN END forces the last edge to be treated an interior edge during rasterization OPEN BEGIN OPEN END forces the first and last edge to be treated as interior edges and lastly OPEN BEGIN NORMAL END forces the first edge to be treated as an interior edge. Marking these selected edges as interior prevents the parallel processing subsystem from drawing diagonal in the interior of polygon. NORMAL BEGIN NORMAL END treats both aspects in conformance to prior art. This special support in the parallel processing subsystem for the three novel split modes ensures that primitives decomposed into batches are drawn identically to those drawn in the non batched prior art method.

The OpenGL application programming interface API includes shader visible unique identification numbers referred to herein as VertexID and PrimitiveID . Each API visible draw command associates each vertex either with a sequentially generated vertexID reset to zero at each Begin and DrawArrays or set to the user specified index value passed in via DrawElements. In addition each individual primitive output by Primitive Assembler is associated with a sequentially increasing PrimitiveID that is reset to zero at the beginning of each API visible primitive.

In the embodiments described herein commands SetVertexID and AddToVertexID are added to control the generation of the previously described VertexID for OPEN BEGIN NORMAL END and OPEN BEGIN OPEN END split modes. Said SetVertexID does set the current VertexID counter value whereas said AddToVertexID adds a value to the current VertexID counter. Such commands allow the device driver to omit sending non visible batches to the Parallel Processing Subsystem while still keeping the shader visible VertexID consistent. A non visible batch is a batch wherein the associated primitives do not affect the final rendered image.

Furthermore said VertexID mechanism is supplemented by a SetCopyVertexID command that allows an auxiliary attribute value to be included in each vertex overriding the generated VertexID . The device driver would make use of said mechanism to remap API visible VertexID values passed in via DrawElements in such a way that despite batching the shader visible VertexID is still consistent. Such a processing is useful when for example converting the VertexID from a 32 bit address space to a 16 bit address space where the batches with 16 bit indices would use vertex index numbers smaller than the original ones provided by the application.

In the embodiments described herein commands SetPrimitiveID and AddToPrimtiveID are added to control the generation of the previously described PrimitiveID for OPEN BEGIN NORMAL END and OPEN BEGIN OPEN END split modes. Said SetPrimitiveID does set the current PrimitiveID counter value whereas said AddPrimitiveID adds a value to the current PrimitiveID counter. Such commands allow the device driver to omit sending non visible batches to the parallel processing subsystem while still keeping the shader visible PrimitiveID consistent with the original command stream.

Additionally the embodiments described herein include a special primitive ID mode in the Begin command sent to the parallel processing subsystem . The supported modes are FIRST where the current PrimitiveID counter is reset to zero at the beginning of the new primitive and UNCHANGED where the PrimitiveID counter retains its current value. The device driver uses the primitive ID mode FIRST for the NORMAL BEGIN NORMAL END and NORMAL BEGIN OPEN END split modes and mode UNCHANGED for the OPEN BEGIN NORMAL END and OPEN BEGIN OPEN END split modes. Using the UNCHANGED mode allows the counter on all batches other than the first of a primitive allows the correct counter value to be maintained for these subsequent batches even if no batches are omitted by the device driver .

Further to create the batch a BEGIN.OPEN BEGIN OPEN END command is used by the device driver to gather the vertices V Vand upon completion of gathering route the batch to the parallel processing subsystem for processing. Finally to create the batch a BEGIN.OPEN BEGIN NORMAL END command is used by the device driver to gather the vertices V Vand Vand upon completion route the batch to the parallel processing subsystem for processing.

When the device driver specifies batch it provides the four vertices V V V and V comprising three lines and . When drawing such a pattern line strip lines and the line pattern continues to match the patterns at the end of line and respectively. For normal line strip primitives specified in the OpenGL API the line pattern is always set to a default initial state when the first line line in this example is drawn. However because batch was specified with BEGIN.OPEN BEGIN NORMAL END the parallel processing subsystem treats the batch as a continuation of batch . As a result line will drawn with the line patterned continued to match the pattern at the end of line from batch .

At step the device driver determines if there is already a currently active batch containing vertex data. If there is the application is attempting to start a new primitive before completing the current one which is treated as an error. If there is no currently active batch processing continues at step where a new empty batch is started. After processing the Begin command the device driver examines the next command from the application at step .

At step the device driver determines if the command specifies new vertex data. If so the device driver determines at step whether there is a currently active batch. If no active batch exists the application is specifying vertex data outside a primitive which is considered an error. The vertex data specified are ignored. Otherwise the new vertex data are added to the currently active batch in step . In step the device driver determines if the active batch is full after the addition of the new vertex data. If not processing continues at step by examining the next command. If the batch is full the device driver determines at step if the active batch is the first batch of the primitive.

If the active batch now full is the first batch of the primitive processing continues at step where the device driver sends the batch to the parallel processing subsystem using the NORMAL BEGIN OPEN END split mode and the FIRST primitive ID mode. After sending the batch the currently active batch is reset and depending on the primitive type up to two vertices are carried over from the previous batch by the device driver to start the new batch. For example in the line loop in the last vertex of the old batch is used as the first vertex of the new batch to ensure that the line loop drawn in batches is continuous. Processing continues with the next command at step . When processing such batches the parallel processing subsystem will reset the stipple phase and the PrimitiveID counter and for POLYGON primitives mark the last vertex of the batch as starting an internal edge.

If the active batch now full is not the first batch of the primitive processing continues at step where the device driver sends the batch to the parallel processing subsystem using the OPEN BEGIN OPEN END split mode and the UNCHANGED primitive ID mode. After sending the batch the currently active batch is reset and depending on the primitive type up to two vertices are carried over from the previous batch by the device driver to start the new batch as described for step . When processing such batches the parallel processing subsystem will leave the stipple phase and the PrimitiveID counter unchanged and for POLYGON primitives mark both the first and the last vertex of the batch as starting an internal edge.

At step the device driver determines if the command is an End command. If so step determines if there is currently an active batch. If there is no active batch the application is attempting to end a primitive that has not been started which is an error. At step the device driver determines if the active batch is the first batch of the primitive.

If the active batch is the first batch of the primitive processing continues at step where the device driver sends the batch to the parallel processing subsystem using the NORMAL BEGIN NORMAL END split mode and the FIRST primitive ID mode. When processing such batches the parallel processing subsystem will reset the stipple phase and the PrimitiveID counter. After sending the batch processing continues with the next command at step .

If the active batch is the first batch of the primitive processing continues at step where the device driver sends the batch to the parallel processing subsystem using the OPEN BEGIN NORMAL END split mode and the UNCHANGED primitive ID mode. When processing such batches the parallel processing subsystem will leave the stipple phase and the PrimitiveID counter unchanged and will mark the first vertex of the batch as starting an internal edge. After sending the batch processing continues with the next command at step assuming that more commands are present as determined in step .

As an alternative to having Begin command with four split modes an alternate embodiment can have a Begin command with two split modes NORMAL and OPEN and an End command with two split modes NORMAL and OPEN. The End command with split modes is sent by the device driver when a batch is full before starting a new batch with a Begin thereby achieving the same ability to split vertices into batches.

One embodiment of the invention may be implemented as a program product for use with a computer system. The program s of the program product define functions of the embodiments including the methods described herein and can be contained on a variety of computer readable storage media. Illustrative computer readable storage media include but are not limited to i non writable storage media e.g. read only memory devices within a computer such as CD ROM disks readable by a CD ROM drive flash memory ROM chips or any type of solid state non volatile semiconductor memory on which information is permanently stored and ii writable storage media e.g. floppy disks within a diskette drive or hard disk drive or any type of solid state random access semiconductor memory on which alterable information is stored.

The invention has been described above with reference to specific embodiments. Persons skilled in the art however will understand that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention as set forth in the appended claims. The foregoing description and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense.

