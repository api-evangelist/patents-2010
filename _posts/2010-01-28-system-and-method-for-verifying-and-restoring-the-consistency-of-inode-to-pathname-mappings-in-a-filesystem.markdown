---

title: System and method for verifying and restoring the consistency of inode to pathname mappings in a filesystem
abstract: A system and method verifies and restores the consistency of inode to pathname mappings. In a first embodiment, an off-line verification procedure is modified to verify and correct the primary name inode to pathname mapping information within inodes of a file system. In a second embodiment, an on-line file system verification process is modified to verify inode to pathname mapping information upon the loading of each inode within the file system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09043291&OS=09043291&RS=09043291
owner: NetApp, Inc.
number: 09043291
owner_city: Sunnyvale
owner_country: US
publication_date: 20100128
---
This application is a continuation of U.S. patent application Ser. No. 11 233 441 filed on Sep. 22 2005 by Edward R. Zayas et al. entitled SYSTEM AND METHOD FOR VERIFYING AND RESTORING THE CONSISTENCY OF INODE TO PATHNAME MAPPINGS IN A FILESYSTEM now issued as U.S. Pat. No. 7 707 193 on Apr. 27 2010 the teachings of which are expressly incorporated herein by reference which is related to the following 

U.S. patent application Ser. No. 11 156 679 entitled SYSTEM AND METHOD FOR MAINTAINING MAPPINGS FROM DATA CONTAINERS TO THEIR PARENT DIRECTORIES by Edward Zayas et al. now issued as U.S. Pat. No. 7 739 318 on Jun. 5 2010 the teachings of which are expressly incorporated herein by reference and

U.S. Pat. No. 6 895 413 entitled SYSTEM AND METHOD FOR PERFORMING AN ON LINE CHECK OF A FILE SYSTEM by John K. Edwards the teachings of which are expressly incorporated herein by reference.

The present invention relates to file systems and more specifically to verifying and restoring the consistency of mappings from data containers to their corresponding parent directories in a file system.

A storage system typically comprises one or more storage devices into which information may be entered and from which information may be obtained as desired. The storage system includes a storage operating system that functionally organizes the system by inter alia invoking storage operations in support of a storage service implemented by the system. The storage system may be implemented in accordance with a variety of storage architectures including but not limited to a network attached storage NAS environment a storage area network SAN and a disk assembly directly attached to a client or host computer. The storage devices are typically disk drives organized as a disk array wherein the term disk commonly describes a self contained rotating magnetic media storage device. The term disk in this context is synonymous with hard disk drive HDD or direct access storage device DASD .

Storage of information on the disk array is preferably implemented as one or more storage volumes of physical disks defining an overall logical arrangement of disk space. The disks within a volume are typically organized as one or more groups wherein each group may be operated as a Redundant Array of Independent or Inexpensive Disks RAID . Most RAID implementations enhance the reliability integrity of data storage through the redundant writing of data stripes across a given number of physical disks in the RAID group and the appropriate storing of redundant information parity with respect to the striped data. The physical disks of each RAID group may include disks configured to store striped data i.e. data disks and disks configured to store parity for the data i.e. parity disks . The parity may thereafter be retrieved to enable recovery of data lost when a disk fails. The term RAID and its various implementations are well known and disclosed in by D. A. Patterson G. A. Gibson and R. H. Katz Proceedings of the International Conference on Management of Data SIGMOD June 1988.

The storage operating system of the storage system may implement a high level module such as a file system to logically organize the information stored on the disks as a hierarchical structure of directories files and blocks. For example each on disk file may be implemented as set of data structures i.e. disk blocks configured to store information such as the actual data for the file. These data blocks are organized within a volume block number vbn space that is maintained by the file system. The file system organizes the data blocks within the vbn space as a logical volume each logical volume may be although is not necessarily associated with its own file system. The file system typically consists of a contiguous range of vbns from zero to n for a file system of size n 1 blocks.

A known type of file system is a write anywhere file system that does not over write data on disks. If a data block is retrieved read from disk into a memory of the storage system and dirtied i.e. updated or modified with new data the data block is thereafter stored written to a new location on disk to optimize write performance. A write anywhere file system may initially assume an optimal layout such that the data is substantially contiguously arranged on disks. The optimal disk layout results in efficient access operations particularly for sequential read operations directed to the disks. An example of a write anywhere file system that is configured to operate on a storage system is the Write Anywhere File Layout WAFL file system available from Network Appliance Inc. of Sunnyvale Calif.

The storage system may be configured to operate according to a client server model of information delivery to thereby allow many clients to access the directories files and blocks stored on the system. In this model the client may comprise an application such as a database application executing on a computer that connects to the storage system over a computer network such as a point to point link shared local area network wide area network or virtual private network implemented over a public network such as the Internet. Each client may request the services of the file system by issuing file system protocol messages in the form of packets to the storage system over the network. By supporting a plurality of file system protocols such as the conventional Common Internet File System CIFS and the Network File System NFS protocols the utility of the storage system is enhanced.

Each data container such as a file directory etc. within a file system is typically associated with an inode that serves as the root of a buffer tree of the data container. The buffer tree is an internal representation of blocks for the data container stored in the memory of the storage system and maintained by the file system. The inode is a data structure used to store information such as metadata about the data container whereas the data blocks are structures used to store the actual data for the container. The inode typically contains a set of pointers to other blocks within the file system. For data containers such as files that are sufficiently small the inode may directly point to blocks storing the data of the file. However for larger files the inode points to one or more levels of indirect blocks which in turn may point to additional levels of indirect blocks and or the blocks containing the data.

Certain events occurring within the storage system and or a storage operating system executing thereon may result in a message being displayed to an administrator. For example the storage system may detect that one or more data containers have become corrupted. A pathname provides a way for the administrator to refer to a data container served by the storage system. To that end each pathname typically represents one data container within the hierarchical structure of the file system. However the storage system typically reports the identity of the data container to the administrator by using its associated inode number. The inode number is used internally within the file system to identify the inode associated with the data container and unfortunately is not easily understood by humans. It is therefore desirous for the administrator to know the pathname of the data container to which the message relates so that appropriate action may be taken. One technique for generating inode to pathname information I2P is described in the above incorporated U.S. Pat. No. 7 739 318 entitled SYSTEM AND METHOD FOR GENERATING AND MAINTAINING INODE TO PATHNAME MAPPING INFORMATION by Edward Zayas et al. In such an environment a primary name data structure is included within each inode. The primary name data structure contains information identifying a specific directory entry associated with a primary name of the data container. Illustratively additional names for a data container e.g. hard links may be stored in an alternate name file in a metadata directory within the file system.

In systems that contain I2P mapping information it is possible for the persistently stored I2P information to become corrupted. For example memory may become corrupted due to hardware failures. Such memory corruption may be stored as I2P information on disk thereby resulting in inconsistent I2P information. Other causes of errors may be file system errors and or data corruption due to errors in applications attempting to retrieve I2P mapping information.

A brute force technique for correcting the consistency of I2P information is to delete all of the I2P information and to recompute that information for an entire volume associated with a storage system. A noted disadvantage of such a brute force technique is that in a system with tens or hundreds of millions of data containers the time required to reconstruct all of the I2P mapping information may be significant. Additionally while the I2P information is being reconstructed any commands that attempt to retrieve I2P information will fail.

The present invention overcomes the disadvantages of the prior art by providing a system and method for verifying and restoring the consistency of inode to pathname mappings from a data container to its parent directory within a file system of a storage system. In a first embodiment an off line volume verification tool is modified to inter alia verify the consistency of I2P information within the file system. Any primary name data structures that are identified as inconsistent are repaired so that each data structure contains the appropriate information representative of the primary name for the data container such as a file. An alternate name file is verified and if inconsistencies are noted therein the alternate name file is deleted and an I2P name mapping scanner is invoked to reconstruct the alternate name file.

In a second embodiment of the invention an on line file system verification tool verifies the consistency of I2P information within the file system. The on line verification tool modifies function calls LoadInode and buffer trees LoadBuffer within a storage operating system that load inodes and contents of buffer trees. Before an inode or buffer tree is returned to a process that called the loading function the verification tool performs a check of the inode and related buffer trees. Illustratively this check includes inter alia verifying and repairing the consistency of the I2P information associated with the inode. In this second illustrative embodiment a background process is initiated that sequentially loads inodes to ensure that all of the inodes of the file system are checked even if another process or application does not request a particular inode.

In the illustrative embodiment the memory comprises storage locations that are addressable by the processor and adapters for storing software program code. A portion of the memory may be further organized as a buffer cache for storing certain data structures associated with the present invention. The processor and adapters may in turn comprise processing elements and or logic circuitry configured to execute the software code and manipulate the data structures. Storage operating system portions of which are typically resident in memory and executed by the processing elements functionally organizes the system by inter alia invoking storage operations executed by the storage system. It will be apparent to those skilled in the art that other processing and memory means including various computer readable media may be used for storing and executing program instructions pertaining to the inventive technique described herein.

The network adapter comprises the mechanical electrical and signaling circuitry needed to connect the storage system to a client over a computer network which may comprise a point to point connection or a shared medium such as a local area network. Illustratively the computer network may be embodied as an Ethernet network or a Fibre Channel FC network. The client may communicate with the storage system over network by exchanging discrete frames or packets of data according to pre defined protocols such as the Transmission Control Protocol Internet Protocol TCP IP .

The client may be a general purpose computer configured to execute applications . Moreover the client may interact with the storage system in accordance with a client server model of information delivery. That is the client may request the services of the storage system and the system may return the results of the services requested by the client by exchanging packets over the network . The clients may issue packets including file based access protocols such as the Common Internet File System CIFS protocol or Network File System NFS protocol over TCP IP when accessing information in the form of files and directories. Alternatively the client may issue packets including block based access protocols such as the Small Computer Systems Interface SCSI protocol encapsulated over TCP iSCSI and SCSI encapsulated over Fibre Channel FCP when accessing information in the form of blocks.

The storage adapter cooperates with the storage operating system executing on the system to access information requested by a user or client . The information may be stored on any type of attached array of writable storage device media such as video tape optical DVD magnetic tape bubble memory electronic random access memory micro electro mechanical and any other similar media adapted to store information including data and parity information. However as illustratively described herein the information is preferably stored on the disks such as HDD and or DASD of array . The storage adapter includes input output I O interface circuitry that couples to the disks over an I O interconnect arrangement such as a conventional high performance FC serial link topology.

Storage of information on array is preferably implemented as one or more storage volumes that comprise a collection of physical storage disks cooperating to define an overall logical arrangement of volume block number vbn space on the volume s . Alternately the information may be implemented as one or more aggregates comprising of one or more flexible virtual volumes. Aggregates and flexible volumes are described in detail in U.S. Pat. No. 7 409 494 entitled EXTENSION OF WRITE ANYWHERE FILE SYSTEM LAYOUT by John K. Edwards et al.

The disks within the file system are typically organized as one or more groups wherein each group may be operated as a Redundant Array of Independent or Inexpensive Disks RAID . Most RAID implementations such as a RAID 4 level implementation enhance the reliability integrity of data storage through the redundant writing of data stripes across a given number of physical disks in the RAID group and the appropriate storing of parity information with respect to the striped data. An illustrative example of a RAID implementation is a RAID 4 level implementation although it should be understood that other types and levels of RAID implementations may be used in accordance with the inventive principles described herein.

To facilitate access to the disks the storage operating system illustratively implements a write anywhere file system that cooperates with virtualization modules to virtualize the storage space provided by disks . The file system logically organizes the information as a hierarchical structure of named directories and files on the disks. Each on disk file may be implemented as set of disk blocks configured to store information such as data whereas the directory may be implemented as a specially formatted file in which names and links to other files and directories are stored. The virtualization modules allow the file system to further logically organize information as a hierarchical structure of blocks on the disks that are exported as named logical unit numbers luns .

In the illustrative embodiment the storage operating system is preferably the NetApp Data ONTAP operating system available from Network Appliance Inc. Sunnyvale Calif. that implements a Write Anywhere File Layout WAFL file system. However it is expressly contemplated that any appropriate storage operating system may be enhanced for use in accordance with the inventive principles described herein. As such where the term ONTAP is employed it should be taken broadly to refer to any storage operating system that is otherwise adaptable to the teachings of this invention.

An iSCSI driver layer provides block protocol access over the TCP IP network protocol layers while a FC driver layer receives and transmits block access requests and responses to and from the storage system. The FC and iSCSI drivers provide FC specific and iSCSI specific access control to the blocks and thus manage exports of luns to either iSCSI or FCP or alternatively to both iSCSI and FCP when accessing the blocks on the storage system. In addition the storage operating system includes a storage module embodied as a RAID system that manages the storage and retrieval of information to and from the volumes disks in accordance with I O operations and a disk driver system that implements a disk access protocol such as e.g. the SCSI protocol.

Bridging the disk software layers with the integrated network protocol stack layers is a virtualization system that is implemented by a file system interacting with virtualization modules illustratively embodied as e.g. vdisk module and SCSI target module . The vdisk module cooperates with the file system to enable access by administrative interfaces such as a user interface UI in response to a user system administrator issuing commands to the storage system. The SCSI target module is disposed between the FC and iSCSI drivers and the file system to provide a translation layer of the virtualization system between the block lun space and the file system space where luns are represented as blocks. The UI is disposed over the storage operating system in a manner that enables administrative or user access to the various layers and systems.

The file system is illustratively a message based system that provides logical volume management capabilities for use in access to the information stored on the storage devices such as disks. That is in addition to providing file system semantics the file system provides functions normally associated with a volume manager. These functions include i aggregation of the disks ii aggregation of storage bandwidth of the disks and iii reliability guarantees such as mirroring and or parity RAID . The file system illustratively implements the WAFL file system hereinafter generally the write anywhere file system having an on disk format representation that is block based using e.g. 4 kilobyte KB blocks and using index nodes inodes to identify files and file attributes such as creation time access permissions size and block location . The file system uses files to store metadata describing the layout of its file system these metadata files include among others an inode file. A file handle i.e. an identifier that includes an inode number is used to retrieve an inode from disk.

Broadly stated all inodes of the write anywhere file system are organized into the inode file. Volume information volinfo and file system information fsinfo blocks specify the layout of information in the file system the latter block including an inode of a file that includes all other inodes of the file system the inode file . Each logical volume file system has an fsinfo block that is preferably stored at a fixed location within e.g. a RAID group. The inode of the fsinfo block may directly reference point to blocks of the inode file or may reference indirect blocks of the inode file that in turn reference direct blocks of the inode file. Within each direct block of the inode file are embedded inodes each of which may reference indirect blocks that in turn reference data blocks of a file.

Operationally a request from the client is forwarded as a packet over the computer network and onto the storage system where it is received at the network adapter . A network driver of layer or layer processes the packet and if appropriate passes it on to a network protocol and file access layer for additional processing prior to forwarding to the write anywhere file system . Here the file system generates operations to load retrieve the requested data from disk if it is not resident in core i.e. in the buffer cache . If the information is not in the cache the file system indexes into the inode file using the inode number to access an appropriate entry and retrieve a logical volume block number vbn . The file system then passes a message structure including the logical vbn to the RAID system the logical vbn is mapped to a disk identifier and disk block number disk dbn and sent to an appropriate driver e.g. SCSI of the disk driver system . The disk driver accesses the dbn from the specified disk and loads the requested data block s in buffer cache for processing by the storage system. Upon completion of the request the storage system and operating system returns a reply to the client over the network .

Included in the storage operating system is a set of inode to pathname I2P functions . The I2P functions in conjunction with the file system illustratively implement I2P mapping functionality in accordance with the present invention. One exemplary technique for I2P mappings is described in the above incorporated U.S. Pat. No. 7 739 318. The I2P functions may include various scanners described further below that operate to install remove I2P mappings in accordance with embodiments of the present invention. Additionally the I2P functions may include an application program interface API that is exposed to enable other processes executing within the storage operating system to perform I2P mappings. The API may also be accessible via remote procedure calls RPCs to enable programs executing on other computers in network environment to perform I2P mapping functions.

Also included within the file system is a set of checking processes that implement the novel verification and consistency checking procedures of the present invention. In accordance with a first embodiment of the invention the checking processes include an off line file system verification procedure described further below that may be executed by an administrator. In a second embodiment of the present invention the checking processes may comprise an on line verification procedure that modifies function calls within the storage operating system that load inodes LoadInode and buffer trees LoadBuffer so that before each inode or buffer tree is returned to a process that called the loading function a check is performed of the inode and related buffer trees. When a process executing within the storage operating system calls either the LoadInode or LoadBuffer functions the modified function suspends the return of the requested object until a check is performed. The modified function loads the requested inode or buffer tree and determines if it is associated with a data container e.g. a file or a directory. If the requested inode is a regular file inode then the checking procedure verifies associated buffer trees of the inode. If the selected inode is a directory inode then the checking procedure performs a directory check of the selected inode. Both the file and directory checks verify that the I2P information associated with the data container is correct. Additionally in the second embodiment relating to an on line verification procedure a background process is initiated that sequentially loads inodes. This background process ensures that all inodes of the file system are checked even if another process or application does not request a particular inode.

It should be noted that the software path through the storage operating system layers described above needed to perform data storage access for the client request received at the storage system may alternatively be implemented in hardware. That is in an alternate embodiment of the invention a storage access request data path may be implemented as logic circuitry embodied within a field programmable gate array FPGA or an application specific integrated circuit ASIC . This type of hardware implementation increases the performance of the storage service provided by storage system in response to a request issued by client . Moreover in another alternate embodiment of the invention the processing elements of adapters may be configured to offload some or all of the packet processing and storage access operations respectively from processor to thereby increase the performance of the storage service provided by the system. It is expressly contemplated that the various processes architectures and procedures described herein can be implemented in hardware firmware or software.

As used herein the term storage operating system generally refers to the computer executable code operable to perform a storage function in a storage system e.g. that manages data access and may implement file system semantics. In this sense the ONTAP software is an example of such a storage operating system implemented as a microkernel and including the file system module to implement the write anywhere file system semantics and manage data access. The storage operating system can also be implemented as an application program operating over a general purpose operating system such as UNIX or Windows XP or as a general purpose operating system with configurable functionality which is configured for storage applications as described herein.

In addition it will be understood to those skilled in the art that the inventive technique described herein may apply to any type of special purpose e.g. file server filer or storage appliance or general purpose computer including a standalone computer or portion thereof embodied as or including a storage system . An example of a storage appliance that may be advantageously used with the present invention is described in U.S. patent application Ser. No. 10 215 917 titled MULTI PROTOCOL STORAGE APPLIANCE THAT PROVIDES INTEGRATED SUPPORT FOR FILE AND BLOCK ACCESS PROTOCOLS filed on Aug. 9 2002 now issued as U.S. Pat. No. 7 873 700 on Jan. 18 2011. Moreover the teachings of this invention can be adapted to a variety of storage system architectures including but not limited to a network attached storage environment a storage area network and disk assembly directly attached to a client or host computer. The term storage system should therefore be taken broadly to include such arrangements in addition to any subsystems configured to perform a storage function and associated with other equipment or systems.

The file system such as the write anywhere file system maintains information about the geometry of the underlying physical disks e.g. the number of blocks in each disk in the storage system. The RAID system provides the disk geometry information to the file system for use when creating and maintaining the vbn to disk dbn mappings used to perform write allocation operations. The file system maintains block allocation data structures such as an active map a space map a summary map and snapshot maps. These mapping data structures describe which blocks are currently in use and which are available for use and are used by a write allocator of the file system as existing infrastructure for the logical volume.

Specifically the snapshot map denotes a bitmap file describing which blocks are used by a snapshot. The write anywhere file system such as the WAFL file system has the capability to generate a snapshot of its active file system. An active file system is a file system to which data can be both written and read or more generally an active store that responds to both read and write I O operations. It should be noted that snapshot is a trademark of Network Appliance Inc. and is used for purposes of this patent to designate a persistent consistency point CP image. A persistent consistency point image PCPI is a space conservative point in time read only image of data accessible by name that provides a consistent image of that data such as a storage system at some previous time. More particularly a PCPI is a point in time representation of a storage element such as an active file system file or database stored on a storage device e.g. on disk or other persistent memory and having a name or other identifier that distinguishes it from other PCPIs taken at other points in time. A PCPI can also include other information metadata about the active file system at the particular point in time for which the image is taken. The terms PCPI and snapshot may be used interchangeably through out this patent without derogation of Network Appliance s trademark rights.

The write anywhere file system supports maintains multiple PCPIs that are generally created on a regular schedule. Each PCPI refers to a copy of the file system that diverges from the active file system over time as the active file system is modified. Each PCPI is a restorable version of the storage element e.g. the active file system created at a predetermined point in time and as noted is read only accessible and space conservative . Space conservative denotes that common parts of the storage element in multiple snapshots share the same file system blocks. Only the differences among these various PCPIs require extra storage blocks. The multiple PCPIs of a storage element are not independent copies each consuming disk space therefore creation of a PCPI on the file system is instantaneous since no entity data needs to be copied. Read only accessibility denotes that a PCPI cannot be modified because it is closely coupled to a single writable image in the active file system. The closely coupled association between a file in the active file system and the same file in a PCPI obviates the use of multiple same files. In the example of a WAFL file system PCPIs are described in 3002 by David Hitz et al. published by Network Appliance Inc. and in U.S. Pat. No. 5 819 292 entitled METHOD FOR MAINTAINING CONSISTENT STATES OF A FILE SYSTEM AND FOR CREATING USER ACCESSIBLE READ ONLY COPIES OF A FILE SYSTEM by David Hitz et al. each of which is hereby incorporated by reference as though full set forth herein.

The active map denotes a bitmap file describing which blocks are used by the active file system. As previously described a PCPI may contain metadata describing the file system as it existed at the point in time that the image was taken. In particular a PCPI captures the active map as it existed at the time of PCPI creation this file is also known as the snapshot map for the PCPI. Note that a snapshot map denotes a bitmap file describing which blocks are used by a PCPI. The summary map denotes a file that is an inclusive logical OR bitmap of all snapshot maps. By examining the active and summary maps the file system can determine whether a block is in use by either the active file system or any PCPI. The space map denotes a file including an array of numbers that describes the number of storage blocks used in a block allocation area. In other words the space map is essentially a logical OR bitmap between the active and summary maps to provide a condensed version of available free block areas within the vbn space. Examples of PCPI and block allocation data structures such as the active map space map and summary map are described in U.S. Pat. No. 7 454 445 titled WRITE ALLOCATION BASED ON STORAGE SYSTEM MAP AND SNAPSHOT by Blake Lewis et al. and issued on Nov. 18 2008 which is hereby incorporated by reference.

The fsinfo block A includes a variety of metadata that describes the state of the file system. Fsinfo block A contains a set of volume options including whether I2P mapping is active for the volume . In the illustrative embodiment I2P mapping may be activated deactivated on a per volume basis. An administrator may activate the I2P mapping using a command line interface CLI command implemented by the UI of the storage operating system . An example of such a CLI command is the following volume command 

The fsinfo block A also contains an inode for an inode file . All inodes of the write anywhere file system are organized into the inode file . Like any other file the inode of the inode file is the root of the buffer tree that describes the locations of blocks of the file. As such the inode of the inode file may directly reference point to data blocks of the inode file or may reference indirect blocks of the inode file that in turn reference data blocks of the inode file. In this example the inode for the inode file includes an exemplary buffer tree comprising a plurality of inode file indirect blocks that in turn point to inode file data blocks . Within each data block of the inode file are inodes each of which serves as the root of a file. Among the inodes of the inode file are inodes for special metadata files such as an active map a summary map a space map a root directory and a metadata directory . All user files in the file system are organized under the root directory while various metadata files associated with the file system are stored under the metadata directory . Illustratively the alternate name file is located in the hidden metadata directory . The alternate name file is utilized to store I2P mapping information associated with alternate names of an inode and is illustratively implemented as a B tree to enable fast searches.

The inode file may further include inodes that reference a plurality of PCPIs . These PCPI inodes are the root level inodes of PCPIs of the active file system. Each volume has special reserved inode numbers within its vbn space. In certain illustrative embodiments a plurality of those inode numbers e.g. 31 is reserved for PCPIs. When a PCPI of the active file system is generated a copy of the inode for the inode file is also generated hereinafter the snapshot root and assigned one of the reserved PCPI inode numbers. Thus to access a PCPI at a particular point in time the storage operating system accesses the appropriate PCPI root of the PCPI. In other illustrative embodiments only the PCPI root inodes are utilized.

In the illustrative embodiment a data container such as a file is represented in the write anywhere file system as an inode data structure adapted for storage on the disks . is a schematic block diagram of an inode which illustratively includes a metadata section and a data section . The information stored in the metadata section of each inode describes the data container and as such includes the type e.g. regular directory virtual disk of data container the size of the data container time stamps e.g. access and or modification for the data container ownership i.e. user identifier UID and group ID GID of the data container a link count field and a novel primary name data structure . The link count field tracks the number of names and implicitly the number of hard links associated with the inode. For example a link count of one signifies that there are no hard links to the data container and that the only name associated with the inode is the primary name.

The primary name data structure illustratively includes a parent directory inode field a parent directory cookie field and in alternative embodiments additional fields . The parent directory inode field contains an inode value that is associated with the parent directory of the data container. Thus if the data container is a file bar located in the foo directory i.e. foo bar then the parent directory inode field contains the inode number of the foo directory. The parent directory cookie field illustratively contains a multi bit value that identifies a directory block and entry within the directory block of the directory identified by the parent directory inode field .

The contents of the data section of each inode may be interpreted differently depending upon the type of data container inode defined within the type field . For example the data section of a directory inode contains metadata controlled by the file system whereas the data section of a file inode contains file system data. In this latter case the data section includes a representation of the data associated with the file.

Specifically the data section of a regular on disk inode may include file system data or pointers the latter referencing 4 KB data blocks on disk used to store the file system data. Each pointer is preferably a logical vbn to facilitate efficiency among the file system and the RAID system when accessing the data on disks. Given the restricted size e.g. 192 bytes of the inode file system data having a size that is less than or equal to 64 bytes is represented in its entirety within the data section of that inode. However if the file system data is greater than 64 bytes but less than or equal to 64 KB then the data section of the inode e.g. a first level inode comprises up to 16 pointers each of which references a 4 KB block of data on the disk.

Moreover if the size of the data is greater than 64 KB but less than or equal to 64 megabytes MB then each pointer in the data section of the inode e.g. a second level inode references an indirect block e.g. a first level block that illustratively contains 1024 pointers each of which references a 4 KB data block on disk. For file system data having a size greater than 64 MB each pointer in the data section of the inode e.g. a third level inode references a double indirect block e.g. a second level block that contains 1024 pointers each referencing an indirect e.g. a first level block. The indirect block in turn that contains 1024 pointers each of which references a 4 KB data block on disk. When accessing a file each block of the file may be loaded from disk into the buffer cache .

When an on disk inode or block is loaded from disk into buffer cache its corresponding in core structure embeds the on disk structure. For example the dotted line surrounding the inode indicates the in core representation of the on disk inode structure. The in core structure is a block of memory that stores the on disk structure plus additional information needed to manage data in the memory but not on disk . The additional information may include e.g. a dirty bit . After data in the inode or block is updated modified as instructed by e.g. a write operation the modified data is marked dirty using the dirty bit so that the inode block can be subsequently flushed stored to disk. The in core and on disk format structures of the WAFL file system including the inodes and inode file are disclosed and described in the previously incorporated U.S. Pat. No. 5 819 292 titled METHOD FOR MAINTAINING CONSISTENT STATES OF A FILE SYSTEM AND FOR CREATING USER ACCESSIBLE READ ONLY COPIES OF A FILE SYSTEM by David Hitz et al. issued on Oct. 6 1998.

As described in the above incorporated U.S. Pat. No. 7 739 318 the I2P functions of the storage operating system operate in conjunction with the file system to permit processes to read and or write I2P information from either a primary name data structure within an inode or from an alternate name file. Such reading writing operations described further below may be utilized by the various checking processes of the present invention when determining whether the I2P information is consistent or when repairing the I2P information during the course of the verification procedure. In accordance with the illustrative embodiment of the present invention any reading writing techniques for obtaining setting the I2P information may be utilized. As such these procedures should be taken as exemplary only.

The procedure begins in step and continues to step where the file system and I2P functions retrieve read the primary name data structure from the inode. In step the file system and I2P functions determine whether the primary name data structure contains a zero value. Illustratively a zero value within the primary name data structure signifies that the file system has not yet identified the appropriate I2P mapping information for this inode. This may be because an initial scan described further below has not yet reached this particular inode or may be due to corruption of the information which has resulted in the file system clearing the I2P information to prevent incorrect results being returned. If the primary name data structure within the inode contains a zero value the procedure branches to step signifying that the I2P mapping information is not set before completing in step . Illustratively a caller or program invoking procedure will return to the user information signifying that the I2P mapping information is not available. In alternate embodiments if the primary name data structure is zero then the file system invokes the scanner described further below to generate the appropriate information. In such alternative embodiments the scanner which is part of the I2P functions generates the appropriate primary name data structure contents before reinitiating procedure .

If in step the value is not zero then the procedure continues to step where a determination is made whether the option e.g. a has been selected to display alternate names. If the alternate names option has not been set the procedure branches to step and returns the primary name before completing in step .

However if in step it is determined that the administrator desires to display alternate names the procedure continues to step where a determination is made as to whether the alternate name file contains entries associated with this inode. If the alternate names file does not contain any associated entries then the data container only has a primary name which is returned in step before the procedure completes in step . The primary name is determined by examining the directory entry in the appropriate directory that is identified by the cookie value within the primary name data structure. However if in step there are alternate names identified then the file system returns the primary name and the alternate name s in step before completing in step . The alternate name s are identified in a similar manner to the primary name i.e. the directory is identified by the parent directory inode and a specific entry within the directory is identified by the cookie value.

Once the directory entry has been removed and the link count updated the procedure determines in step whether the link count is greater than zero for the inode. If the link count is not greater than zero then the procedure branches to step and completes. An inode will have a link count when the one and only name associated with it is removed thereby indicating that the data container associated with the inode may be removed from the file system.

In step an alternate name of the data container is promoted to the primary name. Illustratively the first alternate name stored in the alternate name file is selected and stored within the primary name data structure of the inode as the new primary name. Once the newly promoted primary name has been stored the file system and I2P functions remove the promoted alternate name from the alternate name file in step before the procedure completes in step . However if in step it is determined that the name to be deleted is not the primary name the procedure branches to step where the name is removed from the alternate name file. This may be accomplished using conventional B tree removal operations. In alternate embodiments where the alternate name file is not implemented as a B tree appropriate conventional entry removal operations are utilized. In step the appropriate directory entry is removed and the link count of the inode is updated before the procedure completes in step .

The present invention provides a system and method for verifying and restoring the consistency of inode to pathname mappings from a data container to its parent directory within a file system of a storage system. In a first embodiment an off line volume verification tool is modified to inter alia verify the consistency of I2P information within the file system. Any primary name data structures that are identified as inconsistent are repaired so that each data structure contains the appropriate information representative of the primary name for the data container such as a file. The alternate name file is verified and if inconsistencies are noted therein the alternate name file is deleted and an I2P name mapping scanner is invoked to reconstruct the alternate name file.

In a second embodiment of the invention an on line file system verification tool is modified to verify the consistency of the I2P information within the file system. The on line verification tool illustratively modifies function calls e.g. LoadInode and buffer trees LoadBuffer within the storage operating system that load inodes and contents of buffer trees. Before an inode or buffer tree is returned to a process that called the loading function the verification tool performs a check on the inode and related buffer trees. Illustratively this check includes inter alia verifying and repairing the consistency of the I2P information associated with the inode. In the second illustrative embodiment a background process is created that sequentially loads inodes so that all inodes of the file system are checked even if another process or application does not request a particular inode.

In step the verification procedure selects an inode from the inode file and in step verifies the buffer tree associated with the inode. In step the verification procedure then verifies the I2P mapping information for the primary name associated with the selected inode. In step the verification procedure determines whether there are additional inodes to be verified. If so the verification procedure loops back to step and selects another inode. However if there are no additional inodes to be scanned the verification procedure continues to step where it verifies the alternate name file. Verification of the alternate name file includes inter alia ensuring that an appropriate entry appears in the alternate name file for each alternate name identified while scanning the inode file. Similarly such verification may include ensuring that there are no extraneous and or duplicate entries within the alternate name file. In step a determination is made whether the alternate name file is fully consistent. If so the verification procedure continues to step and mounts the volume before resuming client messages in step . The procedure then completes in step .

However if the alternate name file is not consistent then the verification procedure branches to step and removes the alternate name file. Once the alternate name file has been removed the verification procedure then initiates a name mapping scanner to reconstruct the I2P alternate name file. Such a name mapping scanner is further described in the above incorporated U.S. Pat. No. 7 739 318. The name mapping scanner proceeds independently of the verification procedure to populate the alternate name file. The procedure continues to step where the verification procedure mounts the volume before resuming the processing of client messages in step . The procedure then completes in step .

In a second embodiment of the present invention an on line check of the file system modifies the LoadInode and LoadBuffer functions of the storage operating system so that upon the retrieval of an inode and or buffer tree a series of verification checks are performed. The initialization procedure of the illustrative on line file system checking process is shown in . In step an administrator enters an on line checking command via a command line interface CLI or via a graphical user interface GUI or via any other input methodology. In alternate embodiments the storage operating system can be configured so that the file system check automatically initiates upon a set event for example a crash or other error condition. Upon entry of the checking command the file system suspends client messages in step . Suspension of client messages means that the file system will accept file system commands including for example data write and or read commands. However while the client messages are suspended the file system will not act upon these commands. To the process or client initiating the file system command it appears that there is a delay in the execution of the command.

In step the volume to be checked is unmounted. In the illustrative embodiment the unmounting of a volume causes any in core cached information to be flushed to the physical disks of the volume thereby placing these disks in a consistent state. In step the checking routines are initialized. In the illustrative embodiment the file system includes a function that retrieves an inode LoadInode for further processing. To perform on line checking the checking processes modify this LoadInode function to include a check of the file system structure e.g. inode or directory being accessed. The checking process first performs the check of the inode to be retrieved before returning the inode to the process that called the LoadInode function . The volume is then remounted as described in procedure . Once the volume is remounted the file system resumes client messages in step such that client messages which have either been suspended or which are later received by the file system layer are processed using the modified LoadInode function . Thus any request for an inode will first check that inode and associated buffer trees before returning the inode to the calling process. The procedure then completes in step .

In step the space map is loaded. The space map is a map of the various blocks of the file system indicating which blocks are utilized by the active file system and which are free to be allocated. Step the block type map is loaded. The block type map identifies the use of a block. For example a block could be used as a data holding block or as a directory block. Next the PCPI inodes are loaded in step and the snap maps are loaded in step . In step the quota trees are loaded. A quota tree or qtree is a subset of a volume that is defined by a directory. A quota specifies the maximum amount of storage resources available to a qtree. Thus if it is desired to limit storage for a project having many users it is appropriate to specify a quota on a qtree instead of an actual security object. Multiple qtrees can be created on a single volume with each qtree having a different size as desired . However the qtree can also be created without a limit quota . A qtree is essentially a mini volume with the property that every object within the qtree has a qtree ID in its inode. This information is scanned and identified by the file system.

As each of these file system metadata files is loaded using the modified LoadInode function each file also is checked in accordance with the teachings of this invention. Thus by the completion of a volume mount operation the above mentioned file system metadata files have been checked. Note that some files such as the inode file which contain a large quantity of data may be only selectively checked so as to reduce processing time and overhead. It should be noted that the above mentioned metadata files are illustrative and that in alternate embodiments of the present invention additional and or differing metadata files may be checked.

In step the file system checking routine determines the type of inode that has been requested. If the inode requested is a file inode then the checking process performs an inode check as described in procedure . However if the inode requested is a directory inode then the checking process performs a directory check as described in procedure .

To check an inode the buffer trees associated with the inode are verified in accordance with procedure shown in . This procedure operates by traversing the various branches of the buffer tree and verifying certain key items. In step the inode check verifies that all pointers in the buffer tree are valid. If a pointer is directed to an invalid block the pointer is cleared. In step the inode checking process verifies that no cross links exist within a buffer tree. If a block has multiple pointers to it the inode checking process clears all but the first pointer step . Thus the first block to point to a given block is retained with any other blocks having their pointers removed. In step the I2P information for the inode is verified. This illustratively includes e.g. verifying that the primary name data structure is consistent with the file system. The I2P information is verified by for example reading the primary name data structure associated with the inode using e.g. procedure . The retrieved primary name is then compared to the file system to ensure that it is consistent i.e. both the file system and the primary name data structure identify the same name for the data container. If the I2P information is inconsistent the process corrects the primary name data structure. Finally the inode is marked as being checked step . Such marking can be accomplished by modifying a tracking file described further below or by modifying a bit within the inode s metadata.

After the directory tree has been traversed upwards as far as possible the process determines if the directory is linked to the root directory of the volume step . If the directory is not linked to the root directory the process determines if the directory is a special directory that should not be linked to the root directory in step . An example of such a special directory is a metadirectory storing file system metadata. Metadirectories are further described in U.S. Pat. No. 7 386 546 issued on Jun. 10 2008 entitled METADATA DIRECTORY FILE SYSTEM by Douglas Santry et al. If the directory is not a special case then the directory is linked to a lost and found directory step for later processing. The lost and found directory can be accessed by a user or administrator of the storage system to determine what further actions should be taken with respect to these directories.

If the directory does link to the root directory or if the directory is a special case that does not need to link to the root directory the checking process then loads the file system objects that are one level beneath the directory step . These file system objects include for example subdirectories of the selected directory or files stored in the selected directory. Additionally each directory entry is loaded to obtain a list of names that are utilized to verify the alternate name file.

Next the checking process performs the above described buffer tree checks of the buffer trees associated with the directory. In step the process verifies that all pointers within the buffer tree are valid. If there are invalid pointers i.e. a pointer points to an invalid inode or file data block the pointer is cleared. In step the process checks that no cross links exist within the buffer tree. If multiple blocks point to a given block then all but the first pointer is removed in step . Finally in step the directory is marked has having been checked. Such marking can be accomplished by the use of a tracking file described further below.

To ensure that all inodes of the file system are checked in a timely manner a background process not shown is initiated by the file system checking process. By background process it is meant generally a process executing at a low priority within the storage operating system that performs a given function with no user input. The procedure performed by this background process is shown in . A counter N is initially set to a value of one step . The background process then calls the LoadInode function requesting the Nth inode i.e. LoadInode N . The LoadInode function has been modified to incorporate checking and as such the requested inode is checked. Next the counter is increased by one step . The background process determines whether all inodes in the file system have been checked in step by e.g. utilizing the file system tracking files described below. If all inodes have been checked the process then verifies the alternate name file in step . If an entry is missing the process adds the entry. If an entry should not exist i.e. there is no corresponding name in the file system the superfluous entry is removed. The checking process ensures that the alternate name file is consistent with the file system. If the alternate name file is severely corrupted the checking process may remove the alternate name file and initiate an I2P scanner to repopulate the alternate name file.

In the illustrative embodiment the file system checking process creates a file within the file system being checked. This file stores information relating to those inodes buffer trees and directories that have been checked by the file system process. By storing the status within a file on the active file system memory is saved. This file may also be utilized to store alternate names for later verification with the alternate name file.

The foregoing description has been directed to specific embodiments of this invention. It will be apparent however that other variations and modifications may be made to the described embodiments with the attainment of some or all of their advantages. For instance it is expressly contemplated that the teachings of this invention can be implemented as software including a computer readable medium having program instructions executing on a computer hardware firmware or a combination thereof. Accordingly this description is to be taken only by way of example and not to otherwise the scope of the invention. Therefore it is the object of the appended claims to cover all such variations and modifications as come within the true spirit and scope of the invention.

