---

title: JRuby and SIP servlets integration
abstract: A mechanism for JRuby and SIP Servlets integration is disclosed. A method of embodiments of the invention includes deploying, by a Session Initiation Protocol (SIP) Servlets application server, a JRuby application to provide Voice over Internet Protocol (VoIP) services, and associating, by the SIP Servlets application server, a deployment file in a Ruby adaptation layer of a JAVA EE application server with the JRuby application, the deployment file defining a Session Initiation Protocol (SIP) Servlets application name in a SIP configuration section of the deployment file and a name of a class that handles SIP message.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08769109&OS=08769109&RS=08769109
owner: Red Hat, Inc.
number: 08769109
owner_city: Raleigh
owner_country: US
publication_date: 20100330
---
The embodiments of the invention relate generally to telecommunications and more specifically relate to a mechanism for JRuby and SIP Servlets integration.

Java is general purpose concurrent class based and object oriented programming language. It is specifically designed to have as few implementation dependencies as possible. It is intended to let application developers write once run anywhere . The Java Platform includes a Java Virtual Machine JVM which can run byte code. Applications in the Java language are compiled to byte code which is in turn interpreted by the JVM. JVM allows a programmer to implement other programming languages on top of the Java Platform as long as those other languages are able to output byte code. As a result programming languages other than Java can be run by the JVM. The advantage of having different languages running on the Java Platform is so that the features of those languages can benefit from the huge Java ecosystem so that the applications of those programming languages can access standard libraries written in Java and vice versa.

One such different programming language is the Ruby programming language. Ruby is a dynamic interpreted open source programming language with a focus on simplicity and productivity. It has an elegant syntax that is natural to read and easy to write. JRuby is the implementation of the Ruby programming language that can run Ruby applications on the JVM. Ruby is a particular advantageous programming language in the field of Voice over Internet Protocol VoIP . VoIP provides for converged telephony services and other media services e.g. voice data video etc. over the web. Ruby allows a programmer to take full advantage of VoIP services because there is no programming stack required in Ruby. With Ruby there is no need to recompile or redeploy as changes to the Ruby source code are taken live thereby shortening the development lifecycle.

However Ruby does not provide full control over its ability to provide VoIP services. Presently there are two frameworks in Ruby for VoIP services. One is the Sipper framework which is a test framework to test Session Initial Protocol SIP and converged Web applications. Unfortunately the Sipper framework does not allow a programmer to create applications or VoIP services. The other Ruby framework is the Adhersion framework which allows the use of Asterisk an open source communication platform that acts as a gateway to bridge SIP to standard telephony networks to create VoIP services. However Adhersion is limited to Asterisk only and cannot interact directly with SIP or other protocols thereby limiting the programmer s ability to create VoIP services.

As a result the integration of JRuby in a Java environment allowing access to the SIP Servlets specification and other telecommunication specifications such as JSR 309 would be beneficial.

Embodiments of the invention provide a mechanism for JRuby and SIP Servlets integration. A method of embodiments of the invention includes deploying by a Session Initiation Protocol SIP Servlets application server a JRuby application to provide Voice over Internet Protocol VoIP services and associating by the SIP Servlets application server a deployment file in a Ruby adaptation layer of a JAVA EE application server with the JRuby application the deployment file defining a Session Initiation Protocol SIP Servlets application name in a SIP configuration section of the deployment file and a name of a class that handles SIP message.

In the following description numerous details are set forth. It will be apparent however to one skilled in the art that the present invention may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present invention.

Some portions of the detailed descriptions which follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as sending receiving attaching forwarding caching deploying associating or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a machine readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions each coupled to a computer system bus.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear as set forth in the description below. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.

The present invention may be provided as a computer program product or software that may include a machine readable medium having stored thereon instructions which may be used to program a computer system or other electronic devices to perform a process according to the present invention. A machine readable medium includes any mechanism for storing or transmitting information in a form readable by a machine e.g. a computer . For example a machine readable e.g. computer readable medium includes a machine e.g. a computer readable storage medium e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices etc. a machine e.g. computer readable transmission medium non propagating electrical optical or acoustical signals etc.

Embodiments of the invention provide a mechanism for JRuby and SIP servlets integration. Embodiments of the invention achieve the integration of JRuby and SIP servlets through the use of a new deployment file in the JAVA EE application server that allows JRuby applications to deploy VoIP services. In addition embodiments of the invention provide a Ruby controller to Ruby applications that mimics the SIP Servlets API for better Ruby integration.

Communications platform includes an integrated Java Service Logic Execution Environment JSLEE Application Server AS a SIP Servlet AS and a JAVA EE AS . The integrated JSLEE SIP Servlet and JAVA EE application servers combine JSLEE and SIP Servlet specifications with JAVA EE to enable the development deployment and management of applications that integrate voice video and data across a range of networks and devices.

JSLEE is the JAVA EE for communications as it is event driven high throughput and low latency. On the other hand SIP Servlets bridge the gap between communications and enterprise systems. SIP Servlets enables web applications to interface with communications networks and devices. SIP Servlets provide a simple programming model by providing a server side interface describing a container of SIP components or services to make development of SIP services simple.

The integrated JSLEE SIP Servlets and JAVA EE application servers are a single integrated stack with JSLEE SIP Servlets and JAVA EE running in the same JVM . As illustrated the hierarchy of components supporting the integrated JSLEE AS SIP servlet AS and JAVA EE AS components include a JSLEE network abstraction component third party services operating system and third party industry standard hardware . In some embodiments the application servers may reside on the same machine or on separate machine. Also depicted in are JSLEE APIs to interface with other outside applications. In one embodiment the JAVA EE component may be a JBoss application server distributed by Red Hat Inc. of Raleigh N.C. In another embodiment the operating system may be Red Hat Enterprise Linux system.

In one embodiment network abstraction component provides a network abstraction layer for the communications platform . The network abstraction layer provides connectivity between applications of the communications platform and any network environment including an IP network or a Legacy network. In this way application logic is network protocol agnostic so that the application developer is insulated from the underlying network protocol and thereby simplifies porting between networks. The network abstraction is achieved by the external resources via Resource Adapters RAs . For example RAs may include but are not limited to Session Initiation Protocol SIP Extensible Messaging and Presence Protocol XMPP GoogleTalk Asterisk Parlay Diameter Media Real Time Transport Protocol RTP Short Message Peer to Peer Protocol SMPP Intelligent Network Application Part INAP HyperText Transport Protocol HTTP and Production Rules.

In one embodiment management interfaces provide third party application programming interfaces APIs . These third party APIs simplify integrating with core business systems. For example some of the management functions provided by management interfaces may include but are not limited to full visibility for monitoring and management via JMX internal system APIs Event Router Activities Time Facility RA APIs and application APIs service usage service building blocks usage event traffic control . Third party APIs also provide Operational Business Support Systems OSS BSS connectivity.

The use of the modular JAVA EE architecture with JSLEE and SIP Servlets results in a simple and cleanly separable architecture for the implementation of embodiments of the invention. In one embodiment the SIP Servlets application server is capable of deploying one or more Ruby applications . The Ruby application is programmed in JRuby the implementation of the Ruby language that allows Ruby applications to run on a JVM. Embodiments of the invention enable Ruby applications to be deployed by the SIP Servlets application server by introducing a new deployment file in a Ruby adaptation layer of the JAVA EE application server .

In one embodiment the Ruby adaptation layer of the JAVA EE application server is a TorqueBox distribution. The Ruby adaptation layer is built on top of the JAVA EE application server to allow JRuby applications to be deployed into the JAVA EE application server and it exposes enterprise grade services e.g. web services JMS etc. to Ruby applications.

In one embodiment the new deployment file is a yam1 file that includes specifics on how to deploy Voice over Internet Protocol VoIP services. The SIP configuration section of the deployment file allows a programmer to define the application name of the SIP Servlets application and the name of the class that will handle the SIP messages.

Some embodiments of the invention may provide a Ruby controller to Ruby applications in order to mimic the SIP Servlets API for better Ruby integration. To be able to initiate phone call setup from a Ruby or Rails web controller nothing specific has to be done except for leveraging the fact that the Ruby adaptation layer provides the HTTP servlet factory. However in order to be able to receive SIP Messages in a Ruby or Rails application each Telco class must descend at some point from Ruby adaptation Layer Sip Base which is a class provided by SIP Servlets to the Ruby adaptation layer to be able to handle SIP Messages the same way it is done through SIP Servlets in JAVA. Because the Ruby adaptation layer allows a programmer to load third party dependencies it will also allow a JRuby SIP Servlets application to include media and other protocols as well thereby allowing the Ruby application to interact directly with a variety of different Telco protocols.

When the application gets deployed into the SIP Servlets application server the SIP Servlets application server can then determine if the application is a Ruby application or not thereby allowing the SIP Servlets application server to handle over to the Ruby controller all incoming SIP Messages targeted to it correctly. The same applies to SIP Messages generated and sent by the Ruby application.

Embodiments of the invention allow a Ruby application to benefit from the SIP Servlets API which gives full control over SIP to developers to create VoIP Services. Furthermore embodiments of the invention allow for the integration of Ruby applications with other protocols such as Diameter for Billing Media protocols to control any kind of Media Server and any other new protocol that may arise in the future that is JAVA compatible. Lastly embodiments of the invention allow a Ruby application to benefit from the SIP Servlets and JAVA EE integration to allow for high availability services via redundancy and failover and the use of enterprise services such as Web Services REST JMS and so on directly from Ruby. On the other hand the advantage of creating VoIP services in Ruby compared to JAVA is that there is no need to recompile and or redeploy code because changes to the Ruby source code are taken live thereby improving and accelerating the development cycle.

In some embodiments communications platform may be implemented on a single computer or multiple computers. In other embodiments communications platform may be implemented on one or more servers. Communications platform includes a SIP Servlets container . In one embodiment SIP Servlets container is the same as Sip Servlets application server described with respect to . The SIP Servlets container may include an application router and one or more SIP Servlets applications . The application router is a router that decides which application should be invoked based on an arbitrary number of parameters and the initial request.

In one embodiment the SIP Servlets container may deploy a JRuby SIP Servlet application . The deployment of this JRuby application is enabled through a deployment file of a Ruby adaptation layer of a JAVA EE application server of communications platform .

In one example embodiment the JRuby Sip Servlets application may operate as follows. The SIP communications device sends an INVITE to start a call to the SIP Servlets container. An application router decides to route the INVITE to the JRuby SIP Servlets application based on the parameters of the initial request. The JRuby SIP Servlets application handles the INVITE as if it were a regular JAVA SIP Servlets application. In some embodiments the JRuby application can also initiate requests on its own or be a converged HTTP SIP application as well.

Method begins at block where a new deployment file in a Ruby adaptation layer of a JAVA EE application server is created. The new deployment file may be manually created by a user or automatically created by a tool generating the file and deployed in the application server. In one embodiment the new deployment file defines a SIP Servlets application name in a SIP configuration section and if not present will take the name of the new deployment file minus the rails.yml suffix and also a name of a class that will handle SIP messages for that application. Then at block a JRuby application is deployed in a SIP Servlets application server that is communicably coupled to the JAVA EE application server. In one embodiment the JRuby application may be deployed upon its initialization by a user in order to take advantage of its services. The JRuby application is associated with the new deployment file of the Ruby adaptation layer that was created at block . In one embodiment the association is done through the RAILS ROOT property located in the deployment file that specifies the path where the application is located. Lastly at block the deployed JRuby application in the SIP Servlets application server provides VoIP services.

The exemplary computer system includes a processing device a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or Rambus DRAM RDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a data storage device which communicate with each other via a bus .

Processing device represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processing device may be complex instruction set computing CISC microprocessor reduced instruction set computer RISC microprocessor very long instruction word VLIW microprocessor or processor implementing other instruction sets or processors implementing a combination of instruction sets. Processing device may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. The processing device is configured to execute the processing logic for performing the operations and steps discussed herein.

The computer system may further include a network interface device . The computer system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The data storage device may include a machine accessible storage medium on which is stored one or more set of instructions e.g. software embodying any one or more of the methodologies of functions described herein. For example software may store instructions to perform JRuby and SIP servlets integration by communications platform described with respect to . The software may also reside completely or at least partially within the main memory and or within the processing device during execution thereof by the computer system the main memory and the processing device also constituting machine accessible storage media. The software may further be transmitted or received over a network via the network interface device .

The machine readable storage medium may also be used to store instructions to perform method for JRuby and SIP servlets integration described with respect to and or a software library containing methods that call the above applications. While the machine accessible storage medium is shown in an exemplary embodiment to be a single medium the term machine accessible storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine accessible storage medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instruction for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term machine accessible storage medium shall accordingly be taken to include but not be limited to solid state memories and optical and magnetic media.

Whereas many alterations and modifications of the present invention will no doubt become apparent to a person of ordinary skill in the art after having read the foregoing description it is to be understood that any particular embodiment shown and described by way of illustration is in no way intended to be considered limiting. Therefore references to details of various embodiments are not intended to limit the scope of the claims which in themselves recite only those features regarded as the invention.

