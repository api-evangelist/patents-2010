---

title: Computer software development incorporating core and compound services
abstract: A method is provided for providing one or more services by a service provider to a service consumer. The method may include defining a meta-model describing at least one core service and at least one compound service; creating a model for the core service based on the meta-model; and implementing the core service on the service provider based on the model. The method may also include implementing the compound service on the service provider and implementing a generic access interface on the service consumer to dynamically access the core service and the compound service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08473896&OS=08473896&RS=08473896
owner: SAP AG
number: 08473896
owner_city: Walldorf
owner_country: DE
publication_date: 20100708
---
This application is a continuation application of U.S. patent application Ser. No. 11 436 613 filed on May 19 2006 now U.S. Pat. No. 7 770 146 and entitled Computer Software Development Methods And Systems the contents of which are hereby incorporated by reference.

The present invention generally relates to the field of computer application software architectures and more particularly to methods and systems providing model driven service oriented software architectures.

Computer software programs or applications are often developed to solve a particular set of problems within a predetermined environment. However new kinds of problems and changes in the predetermined environment often require modifications or updates of the computer software programs or applications. When complex software programs or applications are involved the changes or updates often take a long time and a large amount of effort to complete. Software models may be used to accommodate these changes or updates and to reduce the amount of effort or time to complete the changes or updates. For example U.S. Patent Application Publication No. 2005 0066338 to Bloesch et al. on Mar. 24 2005 discloses an application programming interface and framework that supports a meta object model for application design and operating system interactions. However such operating system interaction techniques are often ineffective when dealing with large sale network computing applications.

Among network based software applications enterprise service software applications may be developed for an enterprise environment with stable connections high bandwidth and business oriented applications. The enterprise service software are often implemented in a transactional and or stateful manner and may also implemented with a fine granularity in term of functionalities. On the other hand general web service software applications may be developed for regular Internet based applications in a network computing environment where different computers and different network connections are interconnected and the status of the environment may often be unpredictable. Thus the general web service software is often implemented in a non transactional and or stateless manner and may also be implemented with a significantly large granularity in terms of functionalities.

Because the above differences enterprise service software applications and web service software applications are often not compatible with each other. That is enterprise services and web services cannot be accessed by a single software framework without significant changes to the enterprise service software applications and or the web service software applications. Conventional attempts to access both enterprise services and web services may often use extra adaptation layers and extra out of band data e.g. cookies etc. that need to be handled by a specific service.

However such extra software components used by the conventional techniques often require significant amount of software implementations before a new service may be provided. In certain circumstances it may be undesirable or impractical to create such software implementations before providing a new service or services.

Methods and systems consistent with certain features of the disclosed embodiments are directed to solving one or more of the problems set forth above.

One aspect of the present invention includes a method for providing one or more services by a service provider to a service consumer. The method may include defining a meta model describing at least one core service and at least one compound service creating a model for the core service based on the meta model and implementing the core service on the service provider based on the model. The method may also include implementing the compound service on the service provider and implementing a generic access interface on the service consumer to dynamically access the core service and the compound service.

Another aspect of the present invention includes a method for a service consumer accessing services provided by a service provider. The method may include obtaining a service request by the service consumer to request a service provided by the service provider while the service consumer may include a generic access interface and a model access interface. The method may also include determining whether the service requested is a core service or a compound service and determining if the service is a core service whether the model access interface is available for accessing the core service. Further the method may include selecting the model access interface for accessing the service provided by the service provider if the service is a core service and the model access interface is available.

Reference will now be made in detail to exemplary embodiments which are illustrated in the accompanying drawings. The same reference numbers may be used throughout the drawings to refer to the same or like parts.

Intranet may include a private network consisting one or more network segments with restricted network access such as a computer network that associated with an organization or a business entity designed to be accessible by members and or customers with proper authorizations. Provider may be used to host and or implement certain services provided by the business entity. Although only one service provider computer is shown in any number of service provider computers may be included and the services may be distributed over multiple service provider computers.

Internet may include any public accessible network or networks interconnected via transmission control protocol internet protocol TCP IP or any other appropriate types of network protocols. Internet may be generally considered separated from intranet but may be connected to intranet via gateway . Consumer may access provider through Internet and intranet to request services provided by provider . Although only shows only one service consumer computer connected to Internet any number of service consumer computers may be included. Further multiple service consumer computers may access provider simultaneously.

Provider and or consumer may include any appropriate types of computer systems. shows a functional block diagram of an exemplary computer system that may be configured as provider and or consumer to carry out functionalities of provider and or consumer such as computer software applications associated with provider and or consumer functions. In addition computer system may also be configured as a computer platform to design and implement the computer software applications implemented by provider and or consumer . A computer software application may be implemented or created based upon abstract descriptions included in for example design documents and or various models.

As shown in computer system may include a processor a random access memory RAM a read only memory ROM a console an input device a network interface a database and a storage . It is understood that the type and number of listed devices are exemplary only and not intended to be limiting. The number of listed devices may be changed and other devices may be added.

Processor may include any appropriate type of general purpose microprocessor digital signal processor or microcontroller. Processor may execute sequences of computer program instructions to perform various functions as explained above. Processor may be coupled to or access other devices such as RAM ROM console input device network interface database and or storage to execute computer program instructions and or program data.

The computer program instructions may be loaded into RAM for execution by processor from read only memory ROM and or storage . Storage may include any appropriate type of mass storage provided to store any type of information that processor may need to perform computer implemented processes. For example storage may include one or more hard disk devices optical disk devices or other types of storage devices.

Console may provide a graphic user interface GUI or other types of user interfaces to display information to users of computer system . Console may include any appropriate type of computer display device or computer monitor. Input device may be provided for users to input information into computer system . Input device may include a keyboard a mouse or other optical or wireless computer input device etc.

Network interface may provide communication connections such that computer system may be accessed remotely through intranet and or Internet . Database may contain any information used by processor . Database may include any type of commercial or customized database. Database may also include analysis tools for analyzing the information in the database.

Processor may execute certain software programs to implement a software framework to provide services in operational environment . shows an exemplary software architecture of the software framework.

As shown in software architecture may include a service implementation layer a service repository a service layer an access layer a model access and generic access proxy layer enterprise applications web applications other applications etc. Further service implementation layer may include a core service and a compound service . The numbers of software components are exemplary only and not intended to be limiting. Any number of software components may be implemented by software architecture .

Service implementation layer may include any appropriate type of service provided by a service provider e.g. provider . A service may refer to a function that is pre defined self contained and or independent from particular types of software platforms and or from contexts or states of other functions. A service may be accessed through a service interface. A software entity providing the service or a computer platform on which the software entity provides the service may be referred to as a service provider and a software entity requesting the service or a computer platform on which the software entity request the service may be referred to as a service consumer. A service provider may also be a service consumer under certain circumstances. Further in a network computing environment e.g. operational environment where software entities may communicate with each other via various types of connections e.g. network connections or logical connections etc. a service may also be referred to as an endpoint of a connection for exchanging information. Different services may also exchange information through these connections.

Service implementation layer may be configured to include multiple different types of services. These services may be organized as a collection of services with operations defined through corresponding service interfaces. Software architecture may be designed and or configured to provide these services via service implementation layer allowing access to these services by various applications and or managing communications between the services. As such software architecture may be referred to as a service oriented architecture providing solutions in terms of services and their interconnections.

Software architecture may be configured to use software modeling tools to define and organize the services to be provided by service implementation layer . By using the software modeling tools such as unified modeling language UML etc. the services may be organized based a set of models. Series of transformations may be imposed between the models to implement the services. Such transformations such as model mapping model conversion and or code generation etc. may be performed automatically by the software modeling tools or performed manually by users such as software developers. Therefore software architecture may also be referred to as a model driven service oriented architecture.

The models that define services i.e. service specific models provided by service implementation layer may be described in meta models. A meta model may generally refer to a model describing a language such as unified modeling language UML from which models can be expressed. That is the meta model may include building blocks for creating various service specific models such as business models medical models warehouse model etc. For illustrative purposes a service specific model described by a meta model may be referred to as a concrete meta model or simply a model to indicate that the service specific model is defined using a particular meta model and may be subject to certain transformations available to the meta model. For example concrete meta models may be represented by meta data which may be transferred or accessed using certain data exchange standards such as XML metadata interchange XMI etc.

As explained above service implementation layer may include different types of services. In certain embodiments service implementation layer may include a core service and a compound service . Other types of services however may also be used.

A core service may refer to a service supporting a fine granularity of operations that can be individually accessed. The granularity of an operation may refer to the scope or range of attributes of the service to be accessed by the operation. A fine granularity of operations may allow a portion of the attributes or an individual attribute to be accessed or manipulated by a single operation. A core service may include a large number of attributes that may be individually accessed by different operations. Further a core service may be stateful in that the runtime state of the core service may be kept during operations of the core service. For example a core service may include a query interface to provide the status of an individual attribute or change properties of individual properties. Core service may include any appropriate type of implementation of a particular core service i.e. back end implementation of the particular core service and may also include state information related to that service.

For example core service may include a purchase order created during a business transaction. The core service purchase order may include attributes associated with customer information e.g. customer name address phone number etc. order information e.g. order number date location etc. and item information e.g. stock number price location etc. . Further header information may be included in the purchase order to provide an index for accessing the information. Also a note may also be included to record any textual messages.

Further the core service purchase order may allow a service consumer to access certain attributes individually without accessing other attributes. For example the service consumer may access customer information without accessing order information. Alternatively the service consumer may access only customer name only. The amount of data exchanged between the service consumer and the service provider may be limited to only the requested information. In addition as explained the state information of the software execution of core service may be maintained by a service provider of core service .

A compound service may refer to a service supporting a large granularity of operations compared to a core service. A large granularity of operations may allow a large portion of the attributes or all of the attributes to be accessed or manipulated by a single operation. A compound service may thus include a limited number of operations to access service attributes in an entirety or in a large group. Further a compound service may be configured such that it is prevented from individually accessing the service attributes and may be configured to access all or a set of attributes. Such large granularity may involve a large amount of data to be exchanged in a single operation. Also the state information of a compound service often is not maintained during operations of the compound service. Compound service may include any appropriate type of implementation of a particular compound service i.e. back end implementation of the particular compound service .

Following the above example of the purchase order compound service may also include a purchase order service. However the compound service purchase order may only provide limited interfaces that may require a service consumer to access all attributes in a single access which may result in a large amount of data being transferred between the service provider and the service consumer. In addition compound service may be stateless. That is the service provider may be unable to maintain the state information of the software execution of compound service .

Service implementation layer or the back end implementations of core service and compound service may be implemented on any appropriate type of computer hardware platform or software platform based on the models defining core service and compound service . In one embodiment the services included in service implementation layer may be implemented on multiple hardware and or software platforms.

As explained above a meta model may be used to define service specific models. In certain embodiments a unified meta model may be provided to define both core service and compound service . That is complete descriptions of core service and compound service may be included in the unified meta model such as enterprise services definition language ESDL . Concrete meta models of particular services of core service and compound service may be defined using the unified meta model such as a business object model or a purchase order model etc. The meta model and concrete meta models of core service and compound service may be stored in service repository . Therefore service repository may also include various metadata describing services provided by service implementation layer and interfaces for defining and accessing the metadata.

Because the unified meta model may describe a complete list of service interfaces of both core service and compound service definitions common to both core service and compound service may be defined and used for both core service and compound service . Definitions not common to core service and compound service on the other hand may be included separately in the unified meta model.

In the purchase order example above the core service purchase order e.g. core service may be described by a business object meta model under the unified meta model. The business object meta model may include interface operations and types. An interface may be provided for interacting with the service and may be defined by interface patterns i.e. pre defined abstract definitions of the interactions . For example interface patterns may include query access action transaction message dynamic property change notification and or value help etc. Further dynamic property of the business object meta model may include any appropriate run time properties such as enabled disabled mandatory de activated read only create enabled update enabled and or delete enabled etc.

The core service purchase order meta model may include various operations for a service consumer to access the purchase order in core service . For example the core service purchase order meta model may include a read header operation to read the header information of the purchase order a find item operation to search for a particular item in the purchase order a navigate operation to search for indexing information in the purchase order e.g. header information and or a retrieve by association operation to get related information etc. The above described operations are exemplary only and not intended to be limiting and other operations may also be included.

Further compound service purchase order meta model may also be defined under the unified meta model. For example the unified meta model may include a compound service operation or operations such as a read data operation to retrieve all information in the purchase order in one operation.

In certain embodiments when the unified meta model describes interfaces of both core service and compound service the unified meta model may include separate interfaces for core service and compound service . In certain other embodiments the unified meta model may include common interfaces for both core service and compound service . Extra constraints may be added to interface patterns representing the common interfaces to provide additional information describing for example the type of service to be accessed etc. Extra constraints may also be added to interface patterns of core service . If core service is accessed via interfaces of compound service the extra constraints may allow the access with degraded performance such as a slower speed and or with lower efficiency etc.

It should be noted that the business object meta model defining the exemplary purchase order is only for illustrative purposes. Service repository may include any other enterprise related concrete meta model defined under the unified meta model. For example service repository may include a business information meta model for business warehouse and online analytical process OLAP etc. for both core service and compound service .

After concrete meta models are defined under the unified meta model and meta data is generated and stored in service repository core service and compound service may be accessed by software applications through service layer . Service layer may also be created based on concrete meta models and the unified meta model. Service layer may act as a broker for service implementation layer e.g. core service compound service etc. and service repository . For example service layer may use the additional information provided in the extra constraints in the interface patterns to determine whether a service request is intended for core service or compound service . Service layer may also respond to certain requests to access service repository for identifying available services.

Service layer service implementation layer and repository may be implemented by a service provider e.g. provider to provide services. Service consumers may access services by sending service request messages to the service provider and by receiving returned response messages from the service provider. In practice service consumers may access services by using certain client software applications such as enterprise applications web applications and other applications etc.

Enterprise applications may include any appropriate types of software applications designed to access core service and web applications may include any appropriate types of software applications designed to access compound service . Other applications on the other hand may include any appropriate type of third party software applications independently designed to access general services according to a certain common standard without knowledge of particular structures of software architecture . All of enterprise applications web applications and other applications may access service implementation layer through model access and generic access proxy layer .

Model access and generic access proxy layer may include any software programs that facilitate or provide access to service implementation layer . For example model access and generic access proxy layer may provide a generic interface for accessing any services provided by service implementation layer . The generic interface may be used to dynamically look up available service providers and retrieve interfaces and or operations of services provided by the available service providers. The retrieved interfaces and or operations may then be used to access the services. The generic access may be used by any of enterprise applications web applications and other applications to access either core service or compound service .

On the other hand model access and generic access proxy layer may provide a model access interface for accessing any services provided by service implementation layer . The model access interface may include any appropriate type of interface to access a particular concrete meta model. The model access interface may be derived from the concrete meta model and may correspond to a particular meta model class such as a business object meta model etc. Because the particular concrete meta model is pre defined and well documented interfaces of the concrete meta model may be known to software applications e.g. enterprise applications and dynamic looking up or dynamic binding may be unnecessary. That is speed and efficiency may be significantly increased.

Both the model access interface and generic access interface may be necessary for providing and updating services of service implementation layer . For example when a new service i.e. a service to be added or an update to an existing service is implemented in an original software product client applications may use model access interface or interfaces to quickly access the new service. Further when a new service is later added to an existing software product client applications may immediately start accessing the new service via a generic access interface or interfaces without changing the client applications. Model access interface may be later developed and deployed in the client applications to improve the access efficiency of the applications.

Further meta models of the new service or services such as new interfaces new properties etc. may be added to service repository by using any appropriate type of repository configuration tool. The updated repository may respond to inquiries from a service consumer regarding the new service or services.

The client applications e.g. enterprise applications web applications etc. and model access and generic access layer may be implemented by a service consumer or multiple service consumers e.g. consumer . Model access and generic access proxy layer may access service layer of a service provider via access layer .

Access layer may include any appropriate type of software programs providing communication and or other supporting functions according to a particular standard such as distributed component object model DCOM simple object access protocol SOAP common object request broker architecture CORBA JINI network architecture remote procedure call RPC remote method invocation RMI etc. Access layer may be implemented by both a service provider e.g. provider and a service consumer e.g. consumer to exchange information between the service provider and the service consumer.

In certain situations for example where the service provider and the service consumer are implemented on a same computer access layer may also include a direct method invocation DMI interface to allow the service consumer to directly access the services provided by the service provider. In certain embodiments the direct access may be implemented as a software function call.

The creation and or operation of software frameworks or software programs according to software architecture may be carried out by one or more computer systems such as computer system . shows an exemplary software creation process that may be performed by computer system and or a user of computer system and more specifically by processor consistent with certain disclosed embodiments.

As shown in processor may identify one or more core services to be provided in software architecture step . Processor may identify and or document all services to be provided and all interfaces of the services to be supported. Processor may also identify compound services to be provided in software architecture step . In doing so processor may also provide all the interfaces of the identified compound services.

Further processor may define a unified meta model that provides a complete description of the identified core services and the compound services step . The unified meta model may include a complete list of the interfaces of both the core services and the compound services as explained previously. After the unified meta model is defined processor may create one or more models or concrete meta models describing the core services and compound services step . The models may be reused whenever new services are to be added.

Based on the models processor may implement one or more core services e.g. core service for a service provider e.g. provider step . Processor may also implement one or more compound services e.g. compound service for the service provider step . The core services and the compound services may be implemented in different software structures or programming languages. Further processor may also incorporate any third party software programs providing certain core services and or certain compound services.

The various concrete meta models or models may be stored in a model repository. Processor may create and or configure the repository to store the unified meta model the concrete meta models and any metadata or other relevant data in the repository step . Processor may configure the repository using any appropriate type of configuration tool. Further processor may implement other functionalities of the repository such that the repository may be accessed by any service consumer to locate and access services.

Further processor may select access standards e.g. access layer for accessing services e.g. core service and compound service etc. step . Processor may select the access standards based on the software platform programming language operational environment etc. of the services. More than one standard may be supported simultaneously.

Processor may also provide service interfaces e.g. service layer for the core services and the compound services step . Processor may implement the service interfaces independent of the particular core services and compound services to for example reduce or eliminate efforts when updating and or adding new core services and or compound services.

Processor may also implement client software frameworks to access the core services and the compound services. Further processor may implement a generic access interface to access the core services and the compound services step . Processor may implement the generic access interface independent from any particular core service and or compound service such that the generic access interface may be used to access any core service and or compound service based models under the unified meta model. Particular types interfaces and or operations of a service to be accessed may be passed to the generic access interface in run time to access the services dynamically.

Processor may also implement model access interfaces to access a particular service specific meta model implementation step . The model access interfaces may be implemented based on concrete meta model objects that are corresponding to a particular service of the core service and or the compound services. Further processor may implement and deploy client applications that use the model access interfaces and or the generic interfaces step . Users of the client applications may access the core services the compound services or both via the model access interfaces and or the generic interfaces.

After the creation of the software frameworks or software programs the software frameworks or software programs may be deployed by users of the software frameworks or software programs on a service provider. Further new services may be added to the existing or deployed core services and or compound services and the existing services may be updated. shows an exemplary upgrading process for adding a new service or updating an existing service.

As shown in processor may implement a new service or a service update step . The new service or service update may be based on new models with descriptions under the unified meta model. However if interfaces of the new service or service update is not completely included in the pre defined meta model the new interfaces may be added to the meta model and the repository e.g. service repository may also be updated. Updating the repository may be performed by configuring the repository using certain configuration tools as explained above.

Processor may deploy the new service or service update in the existing software framework or software programs step . That is the new service may be added to the back end service implementation layer to be available for access. On the other hand processor may also implement and deploy changes to existing client applications for the new service or the service update based on the generic access interface step . Because the generic access interface may be independent from a particular type of core service or compound service the changes to the existing client applications may be minimum or none. The new service or service update may be accessed after a time period significantly less than the time period required by regular software change or upgrading using the generic access interface.

While the services may be accessed by updated client applications through the generic access interface processor may also implement a model access interface to provide more specific access to the new service or service update step . Although the model access interface may take more time and efforts to implement as compared to the generic access interface the speed and efficiency of the access may be substantially improved.

After the model access interface is implemented processor may implement and deploy changes to the client applications based on the model access interface step . Because more effort may be required to implement and deploy changes to the client applications based on the model access interface as compared to the generic access interface it may take longer before the client applications can access the services. However the services may be accessed first by the generic access interface while the model access interface is being implemented. Thus the services may later be accessed by the model access interface.

A proxy may be generally referred to as a software agent that performs a certain function or functions and or a certain operation or operations on behalf of another application or computer system while not showing the details involved in the another application or computer system. For example business object model proxy may correspond to services of a business object model defined under the unified meta model.

Further software architecture may also include a service manager proxy enterprise data objects direct method invocation DMI and simple object access protocol SOAP channel etc. Those skilled in the art will recognize that the components listed are exemplary only and not intended to be limiting as other components and or different numbers of components may be implemented by software architecture .

A meta model e.g. the unified meta model including complete descriptions on the compound services and the core services provided by business object provider business information provider business process provider and compound service provider may be defined. Service implementation layer may include a business object provider a business information provider a business process provider and a compound service provider . Business object provider business information provider and business process provider may provide various core services.

More particularly business object provider may provide core services based on concrete meta model descriptions of business transactions business information provider may provide core services based on concrete meta models describing business warehouse e.g. database warehouse and online analytical processing OLAP and business process provider may provide core services base on concrete meta models describing business activities designed to produce a specific output for a particular customer or market across time and space within an organization.

The defined meta model concrete meta models and relevant meta data may be stored in service runtime repository e.g. repository and may be accessed during runtime. The services and service runtime repository may be accessed via service manager e.g. service layer .

Further software controller may coordinate interactions between the service providers e.g. business object provider business information provider business process provider and compound service provider service manager and service runtime repository . For example software controller may provide certain service handlers and or web service utilities such as naming and directory services to facilitate accesses to the service providers and or service repository . Software controller may also provide unified message handlings connection channel notifications and or dynamically property handlings etc.

Client applications e.g. enterprise applications web applications other applications etc. may access a service provider via different interfaces. For example client applications may access the service providers using generic client proxy e.g. the generic access interface directly or using generic client proxy via typed proxy . Client applications may also access the service providers using business object model proxy business information model proxy or process object model proxy or using business object model proxy business information model proxy or process object model proxy via typed proxy typed proxy or typed proxy respectively.

Generic client proxy may provide a generic access interface for accessing services provided by service implementation layer . To use the generic access interface provided by generic client proxy information such as corresponding concrete meta models and or metadata may be obtained by client application via repository manager proxy from service runtime repository . Other repository services however may also be used by generic client proxy .

Business object model proxy business information model proxy or process object model proxy may provide model access interfaces for accessing services corresponding to business object provider business information provider or business process provider respectively. The various model proxies may include specific interfaces properties and or operations for a particular type of core service provided by corresponding service providers or corresponding concrete meta models.

The typed proxies e.g. typed proxies to and typed repository proxy etc. may provide a type checked invocation of the corresponding proxies e.g. business object model proxy business information model proxy process object model proxy generic client proxy and repository manager proxy etc. . The type checking provided by the typed proxies may ensure the syntax of any invocation of the corresponding proxies as correct to reduce runtime compiling errors and or other types of runtime errors.

Further the proxies may access the service providers via service manager proxy . Service manger proxy may include functional interfaces or method invocation interfaces to provide connections to the service providers through service manager . Service manager proxy may also include enterprise data objects to provide data containers that are common to some or all proxies. Service manager proxy may provide connections to service manager via direct method invocation or simple object access protocol SOAP channels e.g. access layer etc. . Other middleware standards may also be used.

When direct method invocation is used such as when means client applications is on the same computer platform as the service providers local client proxy may be used to handle method invocations or function calls instead of message processing for other types of accesses. In addition service manager proxy may also support service data objects SDO such that third party applications conforming to the SDO standard may access the service providers via service manager proxy .

Creating and or updating software frameworks according to software architecture may be carried out in a similar manner to the software frameworks or programs according to software architecture . Operational processes of the client applications according to software architecture may include more detailed operations. shows an exemplary client application operational process that may be performed by computer system and more specifically by processor .

As shown in at the beginning of the client application operational process processor may obtain a service request step . Processor may obtain a service request when a user of client applications invokes certain programs of client applications or when requested by any other software programs. After obtaining the service request step processor may determine whether the service requested is a core service or compound service step . If processor determines that the service requested is a compound service step no processor may select generic client proxy step .

On the other hand if processor determines that the service requested is a core service step yes processor may further determine whether a corresponding model proxy e.g. business object model proxy business information model proxy or process object model proxy etc. is available step . If the corresponding model proxy is not available step no processor may also select the generic client proxy step . However if the corresponding model proxy is available step yes processor may select the available model proxy for accessing the requested core service step .

Further processor may determine whether typed access is requested step . If typed access is requested step yes processor may compile and or invoke a corresponding typed proxy such as typed proxies to and typed repository proxy etc. for selected model proxy or generic client proxy step . Processor may also report any compiling error during the typed access. If type access is not requested step no or after the corresponding typed proxy is compiled without error step processor may generate enterprise data objects as a data container used for the service requested and may invoke service manager proxy step to access the service requested.

Processor may also determine whether the request access is a direct or local access step . If the requested access is a direct or local access step yes processor may access the service requested via direct method invocation step . On the other hand if the requested access is not a direct or local access step no processor may access the service requested via SOAP channel . Other connections however may also be used. The service providers may receive the service requested and as previously explained send a corresponding service response to client applications using the access methodologies disclosed above but in reverse order e.g. direct invocation method or SOAP channel service manager proxy etc. .

By using both model access interfaces e.g. the model proxies such as business object model proxy business information Model proxy process object model proxy or repository manager proxy etc. and generic access interfaces e.g. generic client proxy etc. client applications may be able to flexibly access both core services and compound services within the same software framework. Further a new service or an update of an existing service may be provided through the generic access interfaces to significantly reduce time to market and or the amount of implementation efforts while a more sophisticated and more specific solution may be offered later on the new service or service update to increase speed and or efficiency of the software framework.

Accordingly a user or software process may use the unified meta model to define both core services and compound services on the service providers and may also use client software applications to access the core services and the compound services through a common software framework or architecture. Models of the core services and the compound services may be reused within an enterprise to provide tested solutions. Third party software components may also be integrated by using common standards.

Other embodiments features aspects and principles of the disclosed exemplary methods and systems will be apparent to those skilled in the art and may be implemented in various environments and systems. For example third party software application developers may be able to adapt the disclosed software architectures to create software programs utilizing both core services and compound services in web service applications or create client software applications to work with the disclosed service provider architecture etc.

