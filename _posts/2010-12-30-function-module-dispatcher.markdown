---

title: Function module dispatcher
abstract: Disclosed are methods and systems for function module dispatcher. The methods and systems involve generating a multi tenant enabled function module by adding a logical tenant access parameter to a function to be executed in a tenant system. The methods and systems further include receiving access data associated with a central tenant system and input parameters for executing the function module on one or more tenant systems, accessing a central tenant system based on the access data, retrieving tenant access data associated with the tenant system by matching a logical tenant access parameter data received in the input parameters to the multi tenant function call with the tenant access parameter data stored in a destination map and dispatching the call to execute the function module on a respective tenant based on the tenant access data retrieved from the destination map.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08832180&OS=08832180&RS=08832180
owner: SAP AG
number: 08832180
owner_city: Walldorf
owner_country: DE
publication_date: 20101230
---
The field generally relates to function modules and more specifically the field relates to dispatching a request to execute function modules centrally for execution on tenant systems.

Generally in a secured network environment software function modules may be stored across several systems and executed on several tenant systems. Whenever a client system such as a Java client wants to execute a function module on several tenant systems it has to access the tenant systems appropriately. However the several tenant systems may have their own set of access parameters such as user name password host name and port name to login to the respective tenant systems. Further the client may also need to pass its own access parameters to connect to the several tenant systems. However the various parties associated with the tenants may not want to share their access parameters across several tenant systems due to security concerns.

Various embodiments of systems and methods for function module dispatcher are described herein. The methods and systems involve generating a multi tenant enabled function module by adding a logical tenant access parameter to the function.

According to one embodiment access data associated with a central tenant system and input parameters for executing the function module on one or more tenant systems is received. The function module is stored at the central tenant system. The central tenant system is accessed based on the access data. The tenant access data associated with the tenant system is retrieved by matching a logical tenant access parameter data received in the input parameters to the multi tenant function call with the tenant access parameter data stored in a destination map. The request to execute the function module is then dispatched to a respective tenant based on the tenant access data retrieved from the destination map.

These and other benefits and features of embodiments of the invention will be apparent upon consideration of the following detailed description of preferred embodiments thereof presented in connection with the following drawings.

Embodiments of techniques for function module dispatcher are described herein. In the following description numerous specific details are set forth to provide a thorough understanding of various embodiments. One skilled in the relevant art will recognize however that the invention can be practiced without one or more of the specific details or with other methods components materials etc. In other instances well known structures materials or operations are not shown or described in detail to avoid obscuring aspects of the invention.

Reference throughout this specification to one embodiment this embodiment and similar phrases means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus the appearances of these phrases in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore the particular features structures or characteristics may be combined in any suitable manner in one or more embodiments.

A remote function module is an interface for communication between a client and a tenant. The remote function module may be used in several tenant systems. The same remote function module may be executed on the several systems based on a client request. A request from a client may be a remote function call to execute the function module stored at a central system on several tenant systems. The several tenant systems may have different tenant access data. In such cases the remote function request may be dispatched by a multi tenant enabled function module. The multi tenant enabled function module retrieves the tenant access data associated with the tenant system by matching a logical tenant access parameter data received in the input parameters to the multi tenant function call with the tenant access parameter data stored in a destination map. The multi tenant enabled function module may be generated by adding a logical tenant access parameter to a regular function module. The logical tenant access parameter may be a destination parameter. The multi tenant enabled function module may have access to a destination map which includes a mapping of several logical tenant access parameters to tenant access data for several tenant systems. The tenant access data may be retrieved and used to connect to respective tenant systems. By using the logical tenant access parameter data in calling the multi tenant function the client has no need for the tenant access data of various tenant systems.

At configuration time a function module stored at a central tenant system is accessed based for instance by a request from a client to execute the function module in one or more tenant systems . A logical tenant access parameter is added to the function module stored at the central tenant system to convert the function module to a multi tenant enabled function module. The logical tenant access parameter may be implemented as an alpha numeric key according to which the tenant access data may be stored and retrieved in a destination map . On adding the tenant access parameter the function module is enabled to be a multi tenant enabled function module. For instance a function module for a user creation may include input parameters such as user type user name and an associated password. A job creation function module may include input parameters such as job name and job frequency. The job creation function module may specify a job to backup a system at regular frequency. A logical tenant access parameter may be added to the user creation function module and job creation function module which enables the respective function modules to be multi tenant enabled function modules.

According to one embodiment the multi tenant enabled function module may dispatch the function module to execute it in several tenant systems such as tenant system tenant system tenant system and tenant system n .

At a run time the client requests the central tenant system to execute the function module in one or more tenant systems . The request includes access data for central tenant system which may include a host name port name user name and an associated password. The request may also include the input parameters of the function module along with a logical tenant access parameter associated with the tenant system on which the function module may be executed. The request is sent to the central tenant system . On receiving the request the central tenant system retrieves a tenant access data from destination map based on the logical tenant access parameter in the request. The tenant access data may include a logical string a logical address user name and password of the tenant system on which the function module may be executed. Based on the retrieved tenant access data the function module in the central tenant system is dispatched to execute the function module on a respective tenant system.

Consider a scenario of a function module for creating a user account in several tenant systems. The input parameters associated with the creation of the user may be user type user name and password and so on. Based on the input parameters the user creation function module is generated and stored in the central tenant system. A logical tenant access parameter may be added to user creation function module. On adding the logical tenant access parameter the user creation function module becomes a multi tenant enabled function module which may be connected to a destination map storing tenant access data for several tenant systems.

According to one embodiment the destination map associated with the multi tenant enabled function module is configured by a system administrator. The system administrator may include the tenant access data in the destination map.

For instance consider a job creation function module that has to be dispatched for executing in tenant systems such as tenant system tenant system tenant system . The job creation function module may be present in a central tenant system. The central tenant system may receive a request at the input module including access data and input parameters from a client . The access data and the input parameters are passed to the memory of the central tenant system. The memory of the central tenant system may include multi tenant enabled function module . On receiving the request based on the destination name in the input parameters the multi tenant enabled function module retrieves tenant access parameter data from the destination map relating to tenant system tenant system and tenant system . The multi tenant enabled function module dispatches the job creation function module to tenant system tenant system and tenant system .

Some embodiments of the invention may include the above described methods being written as one or more software components. These components and the functionality associated with each may be used by client server distributed or peer computer systems. These components may be written in a computer language corresponding to one or more programming languages such as functional declarative procedural object oriented lower level languages and the like. They may be linked to other components via various application programming interfaces and then compiled into one complete application for a server or a client. Alternatively the components may be implemented in server and client applications. Further these components may be linked together via various distributed programming protocols. Some example embodiments of the invention may include remote procedure calls being used to implement one or more of these components across a distributed programming environment. For example a logic level may reside on a first computer system that is remotely located from a second computer system containing an interface level e.g. a graphical user interface . These first and second computer systems can be configured in a server client peer to peer or some other configuration. The clients can vary in complexity from mobile and handheld devices to thin clients and on to thick clients or even other servers.

The above illustrated software components are tangibly stored on a computer readable storage medium as instructions. The term computer readable storage medium should be taken to include a single medium or multiple media that stores one or more sets of instructions. The term computer readable storage medium should be taken to include any physical article that is capable of undergoing a set of physical changes to physically store encode or otherwise carry a set of instructions for execution by a computer system which causes the computer system to perform any of the methods or process steps described represented or illustrated herein. Examples of computer readable media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROMs DVDs and holographic devices magneto optical media and hardware devices that are specially configured to store and execute such as application specific integrated circuits ASICs programmable logic devices PLDs and ROM and RAM devices. Examples of computer readable instructions include machine code such as produced by a compiler and files containing higher level code that are executed by a computer using an interpreter. For example an embodiment of the invention may be implemented using Java C or other object oriented programming language and development tools. Another embodiment of the invention may be implemented in hard wired circuitry in place of or in combination with machine readable software instructions.

A data source is an information resource. Data sources include sources of data that enable data storage and retrieval. Data sources may include databases such as relational transactional hierarchical multi dimensional e.g. OLAP object oriented databases and the like. Further data sources include tabular data e.g. spreadsheets delimited text files data tagged with a markup language e.g. XML data transactional data unstructured data e.g. text files screen scrapings hierarchical data e.g. data in a file system XML data files a plurality of reports and any other data source accessible through an established protocol such as Open DataBase Connectivity ODBC produced by an underlying software system e.g. ERP system and the like. Data sources may also include a data source where the data is not tangibly stored or otherwise ephemeral such as data streams broadcast data and the like. These data sources can include associated data foundations semantic layers management systems security systems and so on.

In the above description numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize however that the invention can be practiced without one or more of the specific details or with other methods components techniques etc. In other instances well known operations or structures are not shown or described in detail to avoid obscuring aspects of the invention.

Although the processes illustrated and described herein include series of steps it will be appreciated that the different embodiments of the present invention are not limited by the illustrated ordering of steps as some steps may occur in different orders some concurrently with other steps apart from that shown and described herein. In addition not all illustrated steps may be required to implement a methodology in accordance with the present invention. Moreover it will be appreciated that the processes may be implemented in association with the apparatus and systems illustrated and described herein as well as in association with other systems not illustrated.

The above descriptions and illustrations of embodiments of the invention including what is described in the Abstract is not intended to be exhaustive or to limit the invention to the precise forms disclosed. While specific embodiments of and examples for the invention are described herein for illustrative purposes various equivalent modifications are possible within the scope of the invention as those skilled in the relevant art will recognize. These modifications can be made to the invention in light of the above detailed description. Rather the scope of the invention is to be determined by the following claims which are to be interpreted in accordance with established doctrines of claim construction.

