---

title: Generation of macros
abstract: A method and apparatus that learns and generates procedures for machine-to-machine interactions by monitoring user browser interactions with the server. Based on an action by a user of the web browser, a communication is sent from the web browser to the server, which is recorded by a macro recorder. The communication is in a first format such as HTML, which contains human-readable API documentation for a user's interactions with the server. The web browser receives a response to the communication which contains a response in the first format and a response in a second format. The second format is parsed to produce a normalized representation. The normalized representation describes the machine-readable API and the service invocation flow that can be interpreted by a particular programming language to generate service macros to invoke the services programmatically from a remote client to a server that supports the same services for machine-to-machine interaction.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09130975&OS=09130975&RS=09130975
owner: Avaya Inc.
number: 09130975
owner_city: Basking Ridge
owner_country: US
publication_date: 20101110
---
This application claims the benefit under 35 U.S.C. 119 e of U.S. Provisional Application No. 61 350 602 filed Jun. 2 2010 entitled Micro browser A Client Architecture and System to Support Dual RESTful Web Services which is incorporated herein in its entirety by reference.

The system and method relates to generation of macros of communications between web browsers and servers and in particular to generation of macros in different formats.

Today when a software engineer develops an application the software engineer will typically use documentation about how a particular service works. For example a web service may provide documentation about how to access features of the web service in the form of an Application Programming Interface API . The software engineer will take the documentation and generate an application that accesses various services provided by the API. However in many instances the documentation does not always match the API. This can be due to errors that are introduced as the documentation is written. Other problems can occur when specific information about how the API work is left undocumented or there is limited documentation about specific features of the API. For instance a function call may return an undocumented error code or an error code with limited explanation. This can lead to frustration by software engineers and service errors due to the inconsistency and incompleteness in the documentation about the actual APIs. And this is in addition to the increased time and effort to develop applications that use the APIs and are compatible to the required service flow.

There are various ways that providers of services have tried to address this issue. For example extensive testing of API and documentation can be performed. However this leads to increased time and expense in producing the API documentation. Companies have addressed issues like these by providing customer support. This leads to increased technical support costs. What is needed is a way to easily create applications without having to write programs based on separate API documentation this will allow applications to be easily created in less time at less cost and with less error.

The system and method are directed to solving these and other problems and disadvantages of the prior art. They generate procedures for machine to machine service invocation and interaction by monitoring the user browser interactions with the server in which a request to start recording communication exchanges between a web browser and a server is received. Based on an action by a user of the web browser e.g. the user clicking on a button on a web page a communication is sent from the web browser to the server which is recorded by a macro recorder. The communication is in a first format such as Hyper Text Markup Language HTML . The first format may contain human readable API documentation about the server that guides a user s interactions with the server. The web browser receives a response to the communication in which the response contains a response in the first format and also contains a response in a second format. The second format combined with the first format describes the machine readable API about the server. The second format is typically in a micro format that can reside within the first format. A micro browser parses the response in the second format to produce a normalized representation of the response. The normalized representation describes the machine readable API and the service invocation flow without the first format and can be interpreted by a particular programming language to generate service macros to invoke the services programmatically from a remote client to a server that supports the same services for machine to machine interaction. Normalizing the representation of the response can be for example converting a micro format to a computer language such as JavaScript Object Notation JSON RDF Java C and the like. Based on the communication and the normalized representation of the response a macro is created in the computer language.

Other embodiments include sending the communication in the first format and the second format and the ability to start and stop recordings under user control to produce specific macros. In addition an exemplary application development tool is described that allows a user to build applications from the recorded macros. The user can also combine macros to create more complicated macros.

Some embodiments will be illustrated below in conjunction with an exemplary communication system. Although well suited for use with e.g. a system using server s and or database s communications devices etc. the embodiments are not limited to use with any particular type of communication system or configuration of system elements. Those skilled in the art will recognize that the disclosed techniques may be used in any communication application in which it is desirable to provide enhanced program development services.

Network can be any type of network such as the Internet a Local Area Network LAN a Wide Area Network WAN the Public Switched Telephone Network PSTN a cellular network a combination of these and the like. Server can be any type of server such as a web server a file server an application server a database server a directory server and the like.

Micro recorder receives a request to start recording one or more communication exchanges between web browser and server . A communication can be any type of communication in any type of protocol s format s at any layer. The protocol format can be for example any type of application layer protocol such as HTML Extended Markup Language XML File Transfer Protocol FTP XML and the like. The communication can include multiple protocols at multiple layers such as HTML at the application layer and Internet Protocol at the network layer. A communication is sent from web browser in a first format to server . Macro recorder records the communication sent from web browser to server . The recording can occur at one layer or at multiple protocol layers such as at the application layer at the presentation layer at the network layer and the like. Server sends a response to the communication to web browser . The response includes a response in the first format and a response in a second format. For example the first format can be HTML and the second format can be a micro format. A micro format is a format that is embedded within or sent in conjunction with the first format that is ignored by web browser . For instance a micro format can be additional tags within the HTML tags that an HTLM parser within web browser cannot interpret but micro browser can interpret. In essence web browser ignores the micro format and only parses the HTML in the response while micro browser parses the micro format and ignores the HTML.

Micro browser parses the response to produce a normalized representation of the response. A normalized representation of the response can be accomplished by converting the micro format to a different computer language. For instance micro browser can convert the micro format to XHTML JavaScript Object Notation JSON Resource Description Framework RDF Java C and the like. The above examples describe a micro format as the second format. However a micro format is not necessarily required. The only requirement is that the first format can be interpreted parsed by web browser and the second format can be interpreted parsed by micro browser .

Macro recorder generates macro based on the communication and the normalized representation of the response. For example if the communication was sent in HTML and the normalized representation of the response converted from a micro format is in a JSON format macro recorder can convert the HTML in the communication to JSON and produce macro in JSON. In this example macro contains JSON code of the communication and the response. One advantage is that macro is in a computer language that may be more flexible and provides more features than the first format. This is done while web browser and server communicate in the first format e.g. HTML .

The process begins in step when a request to start recording one or more communication exchanges between web browser and server is received by macro recorder . The request to start recording could be sent based on a user clicking on a record button in web browser i.e. a button of a browser plug in or application running in browser . An action occurs in step that initiates a communication being sent in step A. For example the action could be a user clicking on a button of a web page being displayed in browser . The action of clicking on the button results in web browser sending a communication in a first format in step A to macro recorder . For instance the communication could be an HTML GET. The communication is recorded by macro recorder and sent to server in step B. Macro recorder may record all or part of the communication. For example macro recorder may only record the application layer of the communication.

In response to the communication server sends a response in step A. The response comprises a response in the first format and a response in a second format. For example if the first format is XHTML then the response will contain a response in XHTML and a response in the second format. Micro browser receives the response in step A as well as web browser in step B. Micro browser parses the response sent in step A to produce a normalized representation of the response in step . This can be done in various ways. For example depending on the second format micro browser can normalize the second format to different types of computer languages such as JSON RDF C Java JavaScript and the like. This way micro browser can generate different types of computer languages depending on what second format server sends in the response to the communication. Macro recorder generates macro based on the communication sent in step A and the normalized representation of the response from step .

In response to receiving the communication sent in step B and optionally the indication of the request to start recording received in step server sends a response in step A. The response comprises a response in the first format and a response in the second format. The second format can be a predetermined format or can be different types of formats based on the optional request to respond with a specific type of second format.

Micro browser receives the response in step A as well as web browser in step B. Micro browser parses the second format in the response sent in step A to produce a normalized representation of the response. The normalized representation of the response is sent to macro recorder in step . The normalized representation of the response can be different based on what type the second format is. For example if the second format were type X the normalized representation of the response can be Java code. If the second format were type Y the normalized representation of the response can be JSON. A request to stop recording is sent to macro recorder in step . The request to stop recording can be generated by a user clicking on a stop recording button in a browser plug in an application and the like. Based on receiving the request to stop recording macro recorder generates macro in step .

Macro recorder sends an indication of the request to stop recording to server in step . An action occurs in step that initiates an additional communication being sent in step to server . For example the action could be a user clicking on a button of a web page being displayed in web browser . The action of clicking on the button results in web browser sending the additional communication in the first format in step . Server receives the additional communication sent in step . Server sends a response to the additional communication to web browser in step based on receiving the indication to stop recording in step the response to the additional communication is sent in the first format but not the second format. Web browser processes the response in the first format sent in step in a normal manner. Micro browser ignores the response sent in step because micro browser is no longer recording communications between web browser and server .

An action occurs in step that initiates a communication being sent in step that contains the first format. Micro browser adds the second format to the communication in step A. The information in the communication in the second format typically comprises information similar to the information in the first format e.g. a micro format . The information in the second format is used by macro recorder to record the communication exchanges between web browser and server . The communication is recorded by macro recorder and sent to server in step B. Micro browser creates and sends a normalized representation of the communication to macro recorder in step .

In response to receiving the communication sent in step B and optionally the indication of the request to start recording received in step server sends a response in step A. The response comprises a response in the first format and a response in the second format. Micro browser receives the response in step A as well as web browser in step B. Micro browser parses the response sent in step A to produce a normalized representation of the response. The normalized representation of the response is sent to macro recorder in step . A request to stop recording is sent to macro recorder in step . The request to stop recording can be generated by a user clicking on a stop recording button in a browser plug in an application and the like. Based on the receiving request to stop recording macro recorder generates macro in step .

Macro recorder sends an indication of the request to stop recording to server in step . An action occurs in step that initiates an additional communication being sent in step to server . For example the action could be a user entering text to a text box in a web page that is being displayed in web browser . The action of entering text in the text box in web browser sends the additional communication in the first format in step . Server receives the additional communication sent in step . Server sends a response to the additional communication to web browser in step based on receiving the indication to stop recording in step the response to the additional communication is sent in the first format but not in the second format. Web browser processes the response sent in step in a normal manner. Micro browser ignores the response sent in step because micro browser is no longer recording communications between web browser and server .

Once a macro is recorded using the processes previously described the recorded macros can be shown as macro icon s in application development tool . A user of application development tool can create application from the recorded macros . For example the user can drag and drop the macro icons to create application . In this example the user has dragged and dropped macros A D to form application . Once the application is developed by the user the user can click on the create application button to create an application . The user can then run application by clicking on the run application button .

The user can also combine macros to create a combined macro . For example the user can select macros C and A and click on the combine macros button to create combined macro . By combining macros the user can easily develop applications . Combined macros can be used as building blocks to build more complex applications in the same manner as an individual macro .

Herein the phrases at least one one or more and and or are open ended expressions that are both conjunctive and disjunctive in operation. For example each of the expressions at least one of A B and C at least one of A B or C one or more of A B and C one or more of A B or C and A B and or C means A alone B alone C alone A and B together A and C together B and C together or A B and C together.

Herein the term a an or another entity refers to one or more of that entity. As such the terms a or an one or more and at least one can be used interchangeably herein. It is also to be noted that the terms comprising including and having can be used interchangeably.

Of course various changes and modifications to the illustrative embodiment described above will be apparent to those skilled in the art. These changes and modifications can be made without departing from the spirit and the scope of the system and method and without diminishing its attendant advantages. The above description and associated figures teach the best mode of the invention. The following claims specify the scope of the invention. Note that some aspects of the best mode may not fall within the scope of the invention as specified by the claims. Those skilled in the art will appreciate that the features described above can be combined in various ways to form multiple variations of the invention. As a result the invention is not limited to the specific embodiments described above but only by the following claims and their equivalents.

