---

title: System for processing and using electronic documents
abstract: The illustrative embodiments provide a system and method for processing a document. A data storage unit is provided to store data corresponding to the document, several documents processed at a previous time, and a set of rules. A rule in the set of rules may include a rule identifier, a directive to proceed to a second rule based on a condition, a specification of a data component, the specification configured to include a data component identifier, a data component attribute, and a directive to proceed to a second specification of a second data component based on a second condition. A rules-based engine is provided that may communicate with the data storage unit and may execute a rule in the set of rules. The set of rules may include rules for parsing, validating, identifying, relating, selecting, extracting, transforming, generating, analyzing, error correcting, reporting, and sending.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08108368&OS=08108368&RS=08108368
owner: 
number: 08108368
owner_city: 
owner_country: 
publication_date: 20100813
---
This application is a Continuation of U.S. patent application Ser. No. 11 903 071 filed on Sep. 20 2007 now U.S. Pat. No. 7 778 982 the entire teachings of which are herein incorporated by reference.

The principles of the present invention relate generally to an improved data processing system and in particular to an improved document processing system. Still more particularly the principles of the present invention relate to a method apparatus and computer usable program product for processing and using electronic documents.

Businesses exchange electronic documents with each other in order to conduct business transactions. For example such electronic documents may include requests for product information orders for products invoices for sold goods and services shipping notice and confirmation of orders received.

For these and other similar purposes many business transactions rely on electronic documents that have been standardized such as by a standard description to include in a specific transaction for a specific industry. American National Standards Institute ANSI has developed standards for electronic documents used in a variety of business transactions under a specification called the X.12 specification. Similarly the United Nations has promulgated a different set of standards for electronic documents under a standard called the United Nations Electronic Data Interchange for Administration Commerce and Transport UNEDIFACT or UN EDIFACT .

Parties such as business organizations often develop their own proprietary standards for the electronic documents they exchange with other parties such as their business partners. These proprietary standards include specifications for electronic documents that may be based on a standard such as ANSI X.12 or UN EDIFACT standard or may be a completely proprietary design.

Electronic documents conforming to a particular standard are usually referred to as a document of that standard. For example an X.12 document is an electronic document that conforms to X.12 standards.

Electronic documents generally include information organized in some structure. The organization of that structure may be specified by a standard such as ANSI X.12. The organization of the structure may be specified in the document itself such as an extensible markup language XML document.

Using X.12 documents as an example the complete electronic document from start to finish is called a document. Within the organization of the document data is organized in smaller organizations called segments. A piece of data in a segment is called a data element. Within a segment data elements are arranged in a variety of ways.

Data elements may be separated from each other by specialized characters called delimiters. Alternatively data elements may be separated from each other by fixed lengths of the data elements themselves. Segments are also separated from each other by delimiters or fixed lengths of the segments just as data elements.

Data elements can be grouped together to form composite data within a segment. Segments can be grouped together to form a transaction within the document. Occasionally several documents can be grouped together to form a file in a data transmission.

Software applications are used to facilitate the exchange of electronic documents between parties. These software applications primarily ensure that an electronic document is communicated to and is understandable by the intended recipient of that document. Such software applications are available as software products that a party can acquire and use for their own electronic document needs. Third parties also provide services based on such software applications and a party can use such third party services for exchanging electronic documents with another party.

The illustrative embodiments provide a system and method for processing a document. A data storage unit is provided to store data corresponding to the document several documents processed at a previous time and a set of rules. A rule in the set of rules may include a rule identifier a directive to proceed to a second rule based on a condition a specification of a data component the specification configured to include a data component identifier a data component attribute and a directive to proceed to a second specification of a second data component based on a second condition. A rules based engine is provided that may communicate with the data storage unit and may execute a rule in the set of rules. The set of rules may include a rule for parsing a rule for validating a rule for identifying a rule for relating a rule for selecting a rule for extracting a rule for transforming a rule for generating a rule for analyzing a rule for error correcting and a rule for reporting.

A processing engine is provided that may include a parsing component a validating component a relating component and an extracting component. The processing engine may communicate with the data storage unit to process the document in a non sequential manner and may select and execute a rule using the rules based engine. An error correction component is provided that may communicate with the rules based engine the processing engine or both. A data communication component is provided that may communicate with the data storage unit the rules based engine the processing engine the analysis engine the reporting engine the error correction component or any combination thereof.

The system may process the document using the data storage unit the rules based engine the processing engine and the error correction component. The system may transform the document into a set of second documents and generate a third document. The system may use the data communication component to deliver the second documents in the set of second documents to their respective destinations.

The system may also include an analysis engine and a reporting engine each of which may communicate with the rules based engine the processing engine the data storage or any combination thereof. The analysis engine may receive a request for analytical information perform analysis of the stored information according to the request and return a result of the analysis.

The reporting engine may receive a request from a source of the document a destination of a transformed document in a set of transformed documents a destination of a report or an independent party. The system may authenticate the request and or a source of the request before processing the request.

The system may also include a user interface component that may support features to graphically configure the rules in the set of rules to graphically create a new rule to graphically include the new rule in the set of rules and to graphically modify a rule other than the new rule in the set of rules to reference the new rule.

Electronic documents are organized in some structure according to a standard or definition. X.12 documents are organized into file document transaction segment composite data and data element. Electronic documents conforming to other standards or definitions may use different labels for each of these artifacts but essentially organize data in the electronic document in the nested structure. That nested structure includes the largest organization of data where the largest organization of data includes one or more smaller organizations of data at one or more progressively inner levels in the electronic document eventually including the actual data to be communicated at the lowest level.

For the clarity of the description below the highest level of organization in an electronic document is called a document a document may include zero or more transactions a transaction may include zero or more segments a segment may include zero or more composite data or data element and a composite data may include zero or more data elements. The terms used in the description of the illustrative embodiments below are consistent with the terms used for defining X.12 documents and are not intended to limit the illustrative embodiments to X.12 documents. These terms may represent a similar organization of data in any electronic document organized according to any standard or definition whether from a standards body proprietary or a combination thereof. Accordingly the illustrative embodiments may be used for processing any electronic document that uses a similar organization of data in the electronic document.

Illustrative embodiments recognize that existing applications for processing electronic documents existing applications use cumbersome software code and software techniques for the processing the structures involved in the electronic document. For example an existing application may use code for describing a transformation of an electronic document from one structural form to another. Such an application generally requires modification of code if an electronic document changes its organization at any level For example if the sender of an electronic document decides to change a certain piece of information in a data element in the electronic document an existing application requires changes to the code in order to implement that change in the electronic document.

Illustrative embodiments further recognize that the manner in which existing applications process the document is an inefficient way of processing an electronic document. For example an existing application may process an X.12 document which is an electronic document based on the ANSI X.12 standard sequentially form top to bottom Consequently if a party is interested in only a specific piece of information from the X.12 document the application still must process the entire document before the application can provide that information of interest to the party. Furthermore the existing application has to perform that processing sequentially from the first segment to the last segment in order and from the first data element to last data element again in order for making any or all information contained in the electronic document available.

Therefore an improved method and apparatus for processing electronic documents that removes or reduces the above described inefficiencies in the existing applications are described herein. According to the illustrative embodiments an electronic document can be analyzed or processed for any piece of information anywhere in the electronic document. In other words in accordance with the principles of the present invention an electronic document may be analyzed or processed in one or more segments without having to process the entire electronic document. Furthermore an electronic document can be modified and the illustrative embodiments altered without extensive code changes to process the modified electronic document.

With reference to the figures and in particular with reference to exemplary diagram of a data processing environment is provided in which illustrative embodiments may be implemented. is not intended to assert or imply any limitation with regard to the environments in which different embodiments may be implemented Many modifications to the depicted environments may be made.

Two or more data processing systems may be in communication with each other through WAN . depicts computers and being in communication with WAN and consequently in communication with each other through WAN .

A local area network LAN is a data network generally smaller in size and scope than a WAN providing interconnectivity to a smaller number of data processing systems than the WAN. Generally LANs are limited to smaller areas such as homes or offices and may occasionally span areas larger than homes or offices. A WAN may connect several LANs and data processing systems with each other.

Data processing system communicates with data processing system over LAN . Similarly data processing system communicates with data processing system over LAN . A data processing system s connectivity to a LAN or WAN may be wired or wireless. Additionally a data processing system s connectivity to a LAN or WAN may be direct or through intermediate devices such as through gateways modems switches or other data processing systems. A data processing system may run software applications that perform a variety of functions. A software application may run on several data processing systems such that parts of the software application run on separate data processing systems. A software application running on several data processing systems in this manner is called a distributed application.

A data processing system such as data processing system may be a data processing system that is a source of an electronic document whereby that data processing system generates the electronic document. Another data processing system such as data processing system may be a destination of the electronic document whereby that data processing system is the intended receiver of all or part of the information in the electronic document.

With reference to this figure depicts a block diagram of a system for processing an electronic document in accordance with an illustrative embodiment. Processing application may be a software application running on a data processing system such as data processing system in . Processing application may alternatively be a distributed application running on several data processing systems such as on data processing system and across LAN in .

Processing application receives an electronic document which may include document . Processing application processes document such that one or more transformed documents result from the processing. A transformed document is an electronic document including a document that may have different less or more data or conform to a different structure than the document from a source such as document . One or more transformed documents may include part of the data in document more or different data than the data in document organized in same or different structure as in document .

Processing application may also generate report . Report may be a transformed document such as a transformed document in transformed documents . Report may also include information from or about one or more documents such as document and or one or more transformed document . Report may include additional information from an external source computed information based on data in a document processed by processing application . These forms of report are described only as exemplary and are not intended to be biting on the illustrative embodiments. Other forms contents of report will be conceivable from this disclosure.

A party sending an electronic document a party receiving an electronic document or a third party may receive reports or perform analyses using processing application . Data processing system represents any such parry. Analysis using processing application may be performed on an electronic document being processed or in any combination with archived data from previously processed electronic documents in any combination with data from sources other than the electronic documents processed by processing system .

With reference to this figure depicts a block diagram of the various configurations of an exemplary processing application in accordance with an illustrative embodiment. Data processing environment may be implemented using data processing environment in . WAN data processing systems and LANs and are arranged as described with respect to . Processing applications and are each a possible location in data processing systems and respectively where a processing application such as processing application may be configured.

In one embodiment only one processing application from processing applications and may be configured in its corresponding data processing system to function in the manner of the illustrative embodiments described below. In such an embodiment the configured processing application may perform all the processing of an electronic document to enable an exchange of the electronic document between parties.

In another embodiment more than one processing application from processing applications and may be configured in their corresponding data processing systems. In such an embodiment a processing system configured on a particular data processing system may perform only a portion of the processing of an electronic document. One or more other processing systems may perform other portions of the processing thus completing the processing to enable an exchange of the electronic document between parties.

Demarcation line illustrates an exemplary logical source side of data processing environment . Data processing systems and in this exemplary configuration are part of a source data processing system that may generate an electronic document such as document in . Similarly demarcation line illustrates an exemplary logical destination side of data processing environment . Data processing systems and in this exemplary configuration are part of a destination data processing system that may receive an electronic document such as a transformed document from transformed document in .

In one embodiment of such an exemplarily demarcated configuration data processing system may be a document entry system which may generate an electronic document. For example a billing system that generates an invoice in the form of an electronic document may act as a document entry system such as data processing system . The document entry system may include processing application for generating the invoice.

In another embodiment of the exemplarily demarcated configuration data processing system may be a document processing system which may process an electronic document generated by a document entry system For example an invoice submitting system that creates an electronic document including several invoices consolidated from several billing entries entered in another system that may act as a document processing system such as data processing system . The document processing system may include processing application for converting billing entries into invoices.

In another embodiment data processing system may be a clearing house system. A clearing house system accepts an electronic document generated by one party s data processing system and processes the electronic document according to the needs of another party. For example a clearing house system may receive an electronic document including several invoices from a source such as a medical services provider. The clearing house system may transform the file into several electronic documents and send to different destinations such as insurance payer companies. The clearing house system may include processing application for transforming the electronic document from the source to the electronic documents being sent to the destinations.

In another embodiment data processing system may be a document receiver s data node system. A data node system particularly a data node system within a destination paws infrastructure is a data processing system that acts as a clearing house system but for only that destination party. A data node system may process an electronic document generated by one party s system according to the needs of the party that is the destination of that electronic document. A data node system may also monitor or facilitate the movement of data across various data processing systems such as by buffering data for a period of time or while waiting for an event to occur before sending the data to another data processing system For example a document receiver s data node system may receive an electronic document including an invoice. The document receiver s data node system may transform the electronic document into several pieces of information and send to different systems at the destination. The receiver s data node system may include processing application for transforming the electronic document containing the invoice to the pieces of information being sent to the various systems at the destination.

A data node system may also act as a data interface between data processing systems using two different data formats. For example acting in a clearing house system type role the data node system may translate data from one data processing system in one format into data to another data processing system in another format so that the two data processing systems may exchange data with each other.

In another embodiment data processing system may be one of the document receiver s data processing system which may process a piece of information sent to it by the receiver s data node system For example a document receiver s data processing system may receive an identifier for a patient who is named in an invoice. The document receiver s data node system may transform the identifier into patient information perform other functions related to processing an invoice at the destination. The receiver s data node system may include processing application for transforming the patient identifier into patient information at the destination.

The above embodiments are described only as exemplary and are not intended to be limiting on the illustrative embodiments. Many other configurations will be conceivable from this disclosure and are contemplated within the scope of the illustrative embodiments.

Furthermore a particular embedment may be a combination of any of the above described embodiments or other embodiments conceivable from this disclosure. For example in one embodiment a data node system may also act as a document processing system as described above with respect to data processing system and vice versa. In another embodiment a data processing system may include functions of a document processing system a clearing house system and a data node system a document entry system a document receiver s system another data processing system or any combination thereof.

With reference to this figure depicts a block diagram of a processing application in accordance with an illustrative embodiment. Processing application may be implemented using processing application in or any of processing applications or in .

Processing application includes data communication component . Data communication component may provide data communication capabilities to processing application for communicating with a WAN such as WAN in . Through providing such capabilities data communication component may receive electronic documents transmit electronic documents and support any other data communication needs of processing application .

Processing application further includes processing engine . Processing engine is one of the components of processing application that manipulates the electronic documents processed by processing application .

Processing engine includes parsing component validation component relating component and extracting component . Any of these components may use a storage space such as data storage for storing the data during the processing of the electronic document. Data storage may be any type of storage suitable for storing data.

Parsing component may identify an electronic document s data components and separate those data components out based on rules for parsing. Rules and handling of rules in processing application is described in detail herein below. Validation component may validate the structure and contents of the various data components of the electronic document identified by parsing component based on rules for validating. Relating component may identify draw or form relationships amongst the various data components of an electronic document as identified by parsing component based on rules for identifying and rules for relating. Extracting component can select extract transform or present specified data from an electronic document based on rules for selecting rules for extracting and rules for transforming. Extracting component may also select a specific data element identified in an electronic document by parsing component and assign it a label.

The processes of parsing an electronic document validating the data components and their relations extracting information assigning a label and transforming information are processes related to one or more of creating a rule modifying a rule and executing a rule such as a rule for parsing a rule for validating a rule for relating a rule for selecting a rule for extracting a rule for transforming or other rules.

The above described components of processing engine are described only as exemplary for the clarity of the functioning of processing engine . These components are not intended to be limiting on the illustrative embodiments and may be combined modified reorganized or enhanced according to the needs of a particular implementation. For example in one embodiment the functions of validating component may be combined with the functions of parsing component to result in a single component that acts as parsing component as well as validating component .

As another example in another embodiment parsing component and extracting component may be combined to identify specific data in an electronic document from a source label that data transform that data and present that transformed and labeled data into another electronic document for a destination.

Processing application further includes rules based engine . Rules based engine is a component that can be invoked by other components to execute rules. In one embodiment rules based engine may not be a separate component as depicted in but is included in other components that use rules. For example in one embodiment using the form of rules based engine parsing component may include rules based engine .

Rules may be stored in a data storage such as rules . Rules is a data storage for rules and may or may not be separate from data storage . As an example extracting component may invoke rules based engine to execute a rule for extracting from rules . The rule for extracting when executed by rules based engine may enable extracting component to extract a specific data element identified in an electronic document by parsing component and assign it a label provider name as described above.

Rules may include a variety of rules. As in the examples above a rule for parsing may assist in the parsing function of parsing component . For example a rule for parsing pertaining to healthcare claims in an X.12 837 healthcare claim document 837 document may assist parsing component in traversing the 837 document and identifying the various data components of the 837 document.

Similarly a rule for extracting may assist in the extracting and labeling function of extracting component . A rule for identifying may be a rule that helps parsing component in identifying the various data components of a specific electronic document. A rule for validating may assist validating component in validating some data components of an electronic document. A rule for validating may also assist in validating a relationship between data components.

A rule for relating may help relating component in identifying relationships amongst data components of an electronic document based on a certain criterion. A rule for transforming may help extracting component in transforming an extracted data into another form. A rule for selecting may help extracting component in selecting certain data for extraction. A rule for generating may help extracting component in generating a report or another document using some extracted data.

A rule may assist in one or more functions of one or more components. For example a rule may be a rule for parsing as well as a rule for validating in that different instructions in the same rule may help parsing component in parsing and validating component in validating.

These examples of the various rules are described above to show the various types of rules that are possible for use with the described components of processing application . These examples f d e r describe the variety of functions in which these types of rules can assist. However these examples of the various rules are not intended to be limiting on the illustrative embodiments. Many other rules will be conceivable from these examples and associated descriptions. Additionally rules may be combined new rules and rule types may be created and some of the above described rules and rule types may be omitted in specific implementations.

Furthermore the examples of processing an 837 document are used only for the clarity of the description and are not limiting on the illustrative embodiments. Any electronic document may be processed using processing application in the same or similar manner.

Processing application may further include user interface component . User interface component may provide a way for a user to interact with processing application such as for defining or modifying a rule in rules or modifying the processing of a rule in rules based engine .

User interface component may present any human or system interface convenient for a particular implementation. For example in one embedment user interface component may present a graphical user interface on a computing device for a human user to interact with processing application . For example the human user may graphically define modify or remove a rule such that the human user does not have to manipulate software code for configuring a rule. In another embodiment user interface component may present a set of application programming interface API for a system to perform the same exemplary functions. A particular implementation may use these and any other suitable interfaces in any combination in implementing user interface component .

Processing application may further include analysis engine . Analysis engine may help in analyzing data from any electronic documents that may be presently being processed or may have been processed by processing application . Data from present and past electronic documents may be stored in a data storage such as data storage for the purposes of such analyses. For example analyzing the data in this manner analysis engine may be able to find out which payers were late beyond 90 days in paying the claims presented to them

Such analyses may be triggered by a user may be scheduled or may occur as a result of certain events. For example not receiving an acknowledgment of the receipt of a claim by a payer may be an event that triggers an analysis of the data for the pattern of behavior of that payer as to the acknowledgments. Furthermore analysis engine may interact with user interface component so that a human or system user may request specific analysis of the data.

Analysis engine may also interact with rules based engine such that rules based engine may execute certain analysis rules to assist the various analyses performed by analysis engine . For example a rule for analyzing may be that all the names in a set of one or more payer names identify a common payer. Another exemplary analysis rule may be that when a payer fails to acknowledge receipt of a healthcare claim document data pertaining to that fact should be added to the data storage and a report of the number of times that payer has faded to acknowledge a document should be generated. These exemplary rules show that analysis engine may interact with other components of processing application such as reporting engine described next.

Reporting engine generates reports such as the report identified in the previous example of an analysis rule. Reporting engine may also generate reports on the contents of an electronic document presently being processed by processing application was processed in the past by processing application or another system data in data storage or a combination thereof.

Processing application may also include error correcting component . In one embodiment when parsing component encounters an error in parsing an electronic document error correcting component may be able to apply a rule for error correcting from rules and using rules based engine to correct that error. For example if the error in parsing is that a date should be eight digits long but is provided a six digit date an error correction rule may help error correction component in modifying the date in the electronic document to its correct length so that parsing component may proceed

As another example in an X.12 document a segment delimiter may be missing causing parsing component to encounter an error or the validation component failing to validate the structure of the document or the relating component failing to find correlating information from the next segment. Error correction component using an error correction rule may be able to provide the missing delimiter and restart or continue the parsing validating or relating functions.

Note that these components rules and processing functions are described only as exemplary components of processing application . These components rules and processing functions are not intended to be limiting on the illustrative embodiments. Many other new components rules and processing functions or combinations of the same will be apparent from this disclosure.

With reference to a processing rule is depicted in accordance with an illustrative embodiment. Rule may be implemented as a rule in rules in . Rule may be executed by rules based engine . Rule may be used by parsing component in processing engine of processing application in .

Rule is an exemplary processing rule that may be used in the illustrative embodiments for processing an exemplary X.12 version 4010 270 document that pertains to an eligibility and coverage of benefits inquiry in the healthcare industry. A processing rule such as rule may be a rule for parsing and may be used for parsing an electronic document. The rule may contain processing information about various data components of the electronic document. For example rule contains processing information about groups of segments that constitute the X.12 270 document according to a corresponding specification in the ANSI X.12 specifications. Rule may be identified by rule identifier which is a unique identifier for rule within the scope of a processing application.

Each group of segments described in this manner is called a loop. Loop is an example of processing instructions for a loop in the 270 document.

Using loop as an example for illustrating the functioning of the processing instructions in rule each loop is identified by a loop identifier such as loop identifier which in the case of exemplary loop has the value . Informative text can be added after a space or another delimiter following loop identifier . Such information may be ignored in processing or may be used for specific processing functions for example for inserting comments in a processing log.

Loop next lists processing instructions for the various segments that the specification specifies for that loop. For example according to the X.12 version 4010 specification for a document of type 270 segment should be the first segment to occur in loop . A segment that is identified in a loop such as segment in loop may have a segment identifier such as segment identifier which in the exemplary loop is the string nml. Note that a segment identifier is a data component identifier and may be any suing in a segment or data component at a known location. For example a segment identifier may include the first and second data elements in the segment and may further include the delimiter between the first and the second data elements. For example instead of nml segment identifier may have a value of nml 21 which includes nml the segment identifier according to X.12 standards and 21 which is the first data element entity identifier code identifying an entity with a two digit code. is the delimiter that separates the segment identifier and the entity identifier code data element in this example.

A segment may be mandatory or required or optional or situational. Exemplary segment includes usage indicator which may have a value of r for required and s for situational. A segment may repeat a number of times in a loop. An occurrence indicator indicates how many times a segment may repeat in a loop. Exemplary segment includes occurrence indicator whose value in this example is 1 indicating that segment nml may occur exactly once in loop 

Informative text can be added after a space or another delimiter following occurrence indicator . Such information may be ignored in processing or may be used for specific processing functions for example for inserting comments in a processing log. Additional instructions for processing of a particular segment may be added in place of the informative text. For example data elements may be specified by type nature usage repetition content or size in order to process a segment s constituent data elements before progressing to the next segment in the loop.

Once instructions for processing a data component of the electronic document are complete the instructions may include a directive to perform a next function such as to proceed to other instructions for processing other data components of the electronic document. For example when the segments for loop are defined loop may include a directive to proceed to another loop. In the exemplary loop directive includes action . Action in this case is goto which is an instruction to proceed to another loop. Action may be contingent upon one or more conditions.

Here action is shown to depend on condition . Condition here is a segment identifier h 22 which indicates that the action goto should be performed when the next segment after the segments listed in loop has a segment identifier h 22. Target in this example is a loop identifier of a loop whose instructions should be processed next. Here target has a value . Thus exemplary directive in this exemplary loop indicates that the processing of exemplary X.12 270 document should proceed from loop identifier to loop identifier if the segment following segments of loop has segment identifier h 22. 

Thus exemplary rule is designed to process an X.12 version 4010 document 270. A processing rule may be designed according to the illustrative embodiments to process any electronic document. Such processing rule according to the illustrative embodiments may proceed by identifying a data component of the electronic document such as a loop with a group of segments. The processing rule may include a specification of the data component by including one or more data component attributes such as constituent segments constituent data elements or constituent group of segments with their constituent data elements. The specification may further include one or more directives being based on one or more conditions for subsequent processing.

By executing a rule according to the illustrative embodiments as described above the structure of an electronic document may be verified and the content parsed out. Using the structural information and the paned out contents of the electronic document another rule or additional instructions in the same rule can perform additional functions. For example a rule for validating may validate the parsed out content a rule for relating may relate data components with one another.

With reference to h figure depicts a timing diagram representing a processing of an electronic document in accordance with an illustrative embodiment. The interactions of may be implemented using processing application in . The interactions of may be implemented in data processing environment in .

Source may be a source of an electronic document such as data processing system in . Processing application may be processing application in . Destinations are depicted as three destinations as exemplary to show that any number of destinations such as data processing system in may be present in a data processing environment implementing the illustrative embodiments. Report destination may be one of the destinations in destinations or may be another data processing system or user of a report such as data processing system in .

Source may send electronic document to processing application . Processing application may send one or more transformed documents and to one or more destinations in destinations . A destination in destinations may respond to transformed documents and with one or more response documents and .

Furthermore processing application may respond to source with response document . Processing application may send report to report destination .

In one embodiment destinations as well as processing application may not respond with a response document. In another embodiment some destinations in destinations may respond with response documents and others may not. In another embodiment destinations may or may not respond with response documents but processing application may respond with a response document to source . An embodiment may incorporate any of these embodiments and other variations in these embodiments. An embodiment may or may not include report in combination with the above described exemplary embodiments.

With reference to this figure depicts a flowchart of a process of processing an electronic document in accordance with an illustrative embodiment. Process may be implemented in processing application in .

Process may receive an electronic document including one or more documents. The process begins by receiving a document step . The process panes the document step . The process identifies zero or more data components included in the document step . The process identifies relationships between two or more data components identified in step step . Note that steps and are depicted in that order only as exemplary and may be performed in any order depending on the specific implementation of the illustrative embodiments.

The process determines whether the relationships identified in step are valid step . If one or more relationships are not valid No path of step the process proceeds to step to correct the error. The process then determines whether the error has been corrected step . If the error has not been corrected No path of step the process may send an error message such as to a source of the document received in step step . The process ends thereafter.

Returning to step if the relationships identified in step are valid Yes path of step the process proceeds to the process in . Additionally if the error has been corrected Yes path of step the process proceeds to the process in . Note that a specific implementation may be able to proceed to the process in from the Non path of step even if one or more relationships identified in step are not valid such as by making additional determinations. Similarly a specific implementation may be able to proceed to the process in from the Non path of step even if one or more errors have not been corrected.

When process returns from the process in the process transforms the document step . In one embodiment process may end thereafter.

However depicts additional steps that may be incorporated in process . For example process may extract one or more data components from one or more transformed documents generated in step step . Process may use the extracted data components to generate a report step .

Process may also perform other optional functions. For example the process may store the document received in step one or more transformed documents and the report step . Furthermore the process may perform step before sending either the transformed documents or the report. As depicts in one embodiment process may then send the transformed documents to their respective destinations step . The process may send the report to its destination step . The process ends thereafter. In another embodiment the sending of the transformed documents and the report may occur simultaneously with or before the storing of step .

With reference to this figure depicts a flowchart of the error correction process for correcting errors in the data components of an electronic document in accordance with an illustrative embodiment. Process may be implemented in processing application in and may execute in conjunction with the process in .

Process begins by determining whether one or more of the data components in an electronic document are valid step . When process executes in conjunction with process step may be performed after the relationships are determined to be valid in step in or when errors have been corrected in step in .

If a data component is not valid Non path of step the process corrects the error step . The process then determines if the error has been corrected step . If the error has not been corrected Non path of step the process may send an error message such as to a source of the document received in step in step . The process may end thereafter or return to process in . Alternatively process may end also ending process in .

Returning to step if the data components are valid Yes path of step the process ends or returns to the process in . Additionally if the error has been corrected Yes path of step the process ends or proceeds to the process in . Note that a specific implementation may be able to proceed to the process in from the No path of step even if one or more data components are not valid such as by making additional determinations. Similarly a specific implementation may be able to proceed to the process in from the No path of step even if one or more errors have not been corrected.

With reference to this figure depicts a process of performing an analysis of electronic documents in accordance with an illustrative embodiment. Process may be implemented in processing application such as in analysis engine in .

Process begins by receiving a request for analytical information step . Analytical information is information resulting from an analysis of other data such as data from electronic documents currently being processed by the processing application or data from electronic documents that have been processed by the processing application in the past.

In one embodiment process may authenticate the request or the requestor of the analytical information step . The process may then determine if the request or the requestor are valid step . In another embodiment the process may omit the authentication step.

If the request or the requestor are valid Yes path of step or if the implementation of process has omitted step the process performs the requested analysis such as by using rules for analysis in Rules and data in data storage in step . The process generates the requested analytical information step . The process sends the requested analytical information to the requestor step . The process ends thereafter.

Note that the steps of processes and are selected and described only for clarity of the description and are not limiting on the illustrative embodiments. Depicted steps may be combined further divided augmented to deleted or modified in particular implementations.

Thus in the illustrative embodiments described above a computer implemented method apparatus and computer program product provide for processing electronic documents. The illustrative embodiments describe a processing application including a processing engine that parses the electronic documents into its data components validates relates and transforms the electronic documents and its data components and extracts data components from transformed documents into other types of documents. The method apparatus and computer usable program product of the illustrative embodiments present a method of parsing validating relating transforming and extracting electronic documents that may reduce or remove the shortcomings associated with the presently used methods for processing electronic documents.

For example by using the illustrative embodiments an electronic document need not be analyzed parsed or validated sequentially from top to bottom If a party is interested in only a specific piece of information from an electronic document the illustrative embodiments can provide that information of interest to the party without having to process the entire document by suitably configuring the rules for parsing the rules for validating the rules for relating the rules for extracting and other types of rules as needed Thus the illustrative embodiments may make any and all information contained in an electronic document available without processing the electronic document from the first segment to the last segment in order and from the first data element to last data element again in order.

The illustrative embodiments can take the form of an entirely hardware embodiment an entirely software embedment or an embodiment containing both hardware and software elements. Furthermore the illustrative embodiments can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system For the purposes of this description a computer usable or computer readable medium can be any tangible apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROW a rigid magnetic disk and an optical disk Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

Further a computer storage medium may contain or store a computer readable program code such that when the computer readable program code is executed on a computer the execution of this computer readable program code causes the computer to transmit another computer readable program code over a communication link This communication link may use a medium that is for example without limitation physical or wireless.

The above description has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the illustrative embodiments in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art.

