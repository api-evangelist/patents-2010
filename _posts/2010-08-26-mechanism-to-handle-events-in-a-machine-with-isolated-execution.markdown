---

title: Mechanism to handle events in a machine with isolated execution
abstract: A platform and method for secure handling of events in an isolated environment. A processor executing in isolated execution “IsoX” mode may leak data when an event occurs as a result of the event being handled in a traditional manner based on the exception vector. By defining a class of events to be handled in IsoX mode, and switching between a normal memory map and an IsoX memory map dynamically in response to receipt of an event of the class, data security may be maintained in the face of such events.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08671275&OS=08671275&RS=08671275
owner: Intel Corporation
number: 08671275
owner_city: Santa Clara
owner_country: US
publication_date: 20100826
---
This application is a divisional application of U.S. Ser. No. 09 672 368 filed Sep. 28 2000 now U.S. Pat. No. 7 793 111 entitled Mechanism To Handle Events In A Machine With Isolated Execution .

The invention relates to platform security. More specifically the invention relates to handling asynchronous events in a secure manner.

Data security is an ongoing concern in our increasingly data driven society. To that end multimode platforms have been developed to support both normal execution and isolated execution. A section of memory is allocated for use only in the isolated execution mode. Encryption and authentication are used any time isolated data is moved into a non isolated section of memory. In this manner data used and maintained in isolated execution mode is not security compromised. However during isolated execution that data may reside for example in the processor cache in an unencrypted form. Certain asynchronous events may cause that data to be accessible in a normal execution mode thereby compromising the data security.

The present invention relates to a platform and method for secure handling of asynchronous events in an isolated environment. A processor executing in isolated execution IsoX mode may leak data when an asynchronous event occurs as a result of the event being handled in a traditional manner based on the exception vector. By defining a class of asynchronous events to be handled in IsoX mode and switching between a normal memory map and an IsoX memory map dynamically in response to receipt of an asynchronous event of the class data security may be maintained in the face of such events.

In the following description certain terminology is used to discuss features of the present invention. For example a platform includes components that perform different functions on stored information. Examples of a platform include but are not limited or restricted to a computer e.g. desktop a laptop a hand held a server a workstation etc. desktop office equipment e.g. printer scanner a facsimile machine etc. a wireless telephone handset a television set top box and the like. Examples of a component include hardware e.g. an integrated circuit etc. and or one or more software modules. A software module is code that when executed performs a certain function. This code may include an operating system an application an applet or even a nub being a series of code instructions possibly a subset of code from an applet. A link is broadly defined as one or more information carrying mediums e.g. electrical wire optical fiber cable bus or air in combination with wireless signaling technology to establish a communication pathway. This pathway is deemed protected when it is virtually impossible to modify information routed over the pathway without detection.

In addition the term information is defined as one or more bits of data address and or control and a segment is one or more bytes of information. A message is a grouping of information possibly packetized information. Keying material includes any information needed for a specific cryptographic algorithm such as a Digital Signature Algorithm. A one way function is a function mathematical or otherwise that converts information from a variable length to a fixed length referred to as a hash value or digest . The term one way indicates that there does not readily exist an inverse function to recover any discernible portion of the original information from the fixed length hash value. Examples of a hash function include MD5 provided by RSA Data Security of Redwood City Calif. or Secure Hash Algorithm SHA 1 as specified in a 1995 publication Secure Hash Standard FIPS 180 1 entitled Federal Information Processing Standards Publication Apr. 17 1995 .

A platform utilizing an embodiment of the invention may be configured with an isolated execution IsoX architecture. The IsoX architecture includes logical and physical definitions of hardware and software components that interact directly or indirectly with an operating system of the platform. Herein the operating system and a processor of the platform may have several levels of hierarchy referred to as rings which correspond to various operational modes. A ring is a logical division of hardware and software components that are designed to perform dedicated tasks within the platform. The division is typically based on the degree or level of privilege namely the ability to make changes to the platform. For example a ring is the innermost ring being at the highest level of the hierarchy. Ring encompasses the most critical privileged components. Ring is the outermost ring being at the lowest level of the hierarchy. Ring typically encompasses user level applications which are normally given the lowest level of privilege. Ring and ring represent the intermediate rings with decreasing levels of privilege.

Ring includes two portions a normal execution Ring and an isolated execution Ring . The normal execution Ring includes software modules that are critical for the operating system usually referred to as the kernel . These software modules include a primary operating system e.g. kernel software drivers and hardware drivers . The isolated execution Ring includes an operating system OS nub and a processor nub as described below. The OS nub and the processor nub are instances of an OS executive OSE and processor executive PE respectively. The OSE and the PE are part of executive entities that operate in a protected environment associated with the isolated area and the IsoX mode. The processor nub loader is a bootstrap loader code that is responsible for loading the processor nub from the processor or chipset into an isolated area as explained below.

Similarly ring ring and ring include normal execution ring ring ring and isolated execution ring ring and ring respectively. In particular normal execution ring includes N applications and isolated execution ring includes M applets where N and M are positive whole numbers .

One concept of the IsoX architecture is the creation of an isolated region in the system memory which is protected by components of the platform e.g. the processor and chipset . This isolated region referred to herein as an isolated area may also be in cache memory that is protected by a translation look aside TLB access check. Access to this isolated area is permitted only from a front side bus FSB of the processor using special bus cycles referred to as isolated read and write cycles issued by the processor executing in IsoX mode.

The IsoX mode is initialized using a privileged instruction in the processor combined with the processor nub loader . The processor nub loader verifies and loads a ring nub software module e.g. processor nub into the isolated area. For security purposes the processor nub loader is non modifiable tamper resistant and non substitutable. In one embodiment the processor nub loader is implemented in read only memory ROM .

One task of the processor nub is to verify and load the ring OS nub into the isolated area. The OS nub provides links to services in the primary operating system e.g. the unprotected segments of the operating system provides page management within the isolated area and has the responsibility for loading ring application modules including applets to into protected pages allocated in the isolated area. The OS nub may also support paging of data between the isolated area and ordinary e.g. non isolated memory. If so then the OS nub is also responsible for the integrity and confidentiality of the isolated area pages before evicting the page to the ordinary memory and for checking the page contents upon restoration of the page.

Referring now to a diagram of the illustrative elements associated with the operating system and the processor for one embodiment of the invention is shown. For illustration purposes only elements of ring and ring are shown. The various elements in the logical operating architecture access an accessible physical memory according to their ring hierarchy and the execution mode.

The accessible physical memory includes an isolated area and a non isolated area . The isolated area includes applet pages and nub pages . The non isolated area includes application pages and operating system pages . The isolated area is accessible only to components of the operating system and processor operating in the IsoX mode. The non isolated area is accessible to all elements of the ring operating system and processor.

The normal execution ring including the primary OS the software drivers and the hardware drivers can access both the OS pages and the application pages . The normal execution ring including applications to can access only to the application pages . Both the normal execution ring and ring however cannot access the isolated area .

The isolated execution ring including the OS nub and the processor nub can access to both of the isolated area including the applet pages and the nub pages and the non isolated area including the application pages and the OS pages . The isolated execution ring including applets to can access only to the application pages and the applet pages . The applets to reside in the isolated area .

Referring to a block diagram of an illustrative embodiment of a platform utilizing the present invention is shown. In this embodiment platform comprises a processor a chipset a system memory and peripheral components e.g. tokens coupled to a token link and or a token reader in communication with each other. It is further contemplated that the platform may contain optional components such as a non volatile memory e.g. flash and additional peripheral components. Examples of these additional peripheral components include but are not limited or restricted to a mass storage device and one or more input output I O devices . For clarity the specific links for these peripheral components e.g. a Peripheral Component Interconnect PCI bus an accelerated graphics port AGP bus an Industry Standard Architecture ISA bus a Universal Serial Bus USB bus wireless transmitter receiver combinations etc. are not shown.

In general the processor represents a central processing unit of any type of architecture such as complex instruction set computers CISC reduced instruction set computers RISC very long instruction word VLIW or hybrid architecture. In one embodiment the processor includes multiple logical processors. A logical processor sometimes referred to as a thread is a functional unit within a physical processor having an architectural state and physical resources allocated according to a specific partitioning functionality. Thus a multi threaded processor includes multiple logical processors. The processor is compatible with the Intel Architecture IA processor such as a PENTIUM series the IA 32 and IA 64 . It will be appreciated by those skilled in the art that the basic description and operation of the processor applies to either a single processor platform or a multi processor platform.

The processor may operate in a normal execution mode or an IsoX mode. In particular an isolated execution circuit provides a mechanism to allow the processor to operate in an IsoX mode. The isolated execution circuit provides hardware and software support for the IsoX mode. This support includes configuration for isolated execution definition of the isolated area definition e.g. decoding and execution of isolated instructions generation of isolated access bus cycles and generation of isolated mode interrupts. In one embodiment a memory map selection unit exists within the processor to select dynamically between alternative memory maps that may be employed by the processor .

As shown in a host link is a front side bus that provides interface signals to allow the processor to communicate with other processors or the chipset . In addition to normal mode the host link supports an isolated access link mode with corresponding interface signals for isolated read and write cycles when the processor is configured in the IsoX mode. The isolated access link mode is asserted on memory accesses initiated while the processor is in the IsoX mode if the physical address falls within the isolated area address range. The isolated access link mode is also asserted on instruction pre fetch and cache write back cycles if the address is within the isolated area address range. The processor responds to snoop cycles to a cached address within the isolated area address range if the isolated access bus cycle is asserted.

Herein the chipset includes a memory control hub MCH and an input output control hub ICH described below. The MCH and the ICH may be integrated into the same chip or placed in separate chips operating together.

With respect to the chipset a MCH provides control and configuration of memory and input output devices such as the system memory and the ICH . The MCH provides interface circuits to recognize and service attestation cycles and or isolated memory read and write cycles. In addition the MCH has memory range registers e.g. base and length registers to represent the isolated area in the system memory . Once configured the MCH aborts any access to the isolated area when the isolated access link mode is not asserted.

The system memory stores code and data. The system memory is typically implemented with dynamic random access memory DRAM or static random access memory SRAM . The system memory includes the accessible physical memory shown in . The accessible physical memory includes the isolated area and the non isolated area as shown in . The isolated area is the memory area that is defined by the processor when operating in the IsoX mode. Access to the isolated area is restricted and is enforced by the processor and or the chipset that integrates the isolated area functionality. The non isolated area includes a loaded operating system OS . The loaded OS is the portion of the operating system that is typically loaded from the mass storage device via some boot code in a boot storage such as a boot read only memory ROM . Of course the system memory may also include other programs or data which are not shown.

As shown in the ICH supports isolated execution in addition to traditional I O functions. In this embodiment the ICH comprises at least the processor nub loader shown in a hardware protected memory an isolated execution logical processing manager and a token link interface . For clarity only one ICH is shown although platform may be implemented with multiple ICHs. When there are multiple ICHs a designated ICH is selected to control the isolated area configuration and status. This selection may be performed by an external strapping pin. As is known by one skilled in the art other methods of selecting can be used.

The processor nub loader as shown in includes a processor nub loader code and its hash value or digest . After being invoked by execution of an appropriated isolated instruction e.g. ISO INIT by the processor the processor nub loader is transferred to the isolated area . Thereafter the processor nub loader copies the processor nub from the non volatile memory into the isolated area verifies and places a representation of the processor nub e.g. a hash value into the protected memory . Herein the protected memory is implemented as a memory array with single write multiple read capability. This non modifiable capability is controlled by logic or is part of the inherent nature of the memory itself. For example as shown the protected memory may include a plurality of single write multiple read registers.

As shown in the protected memory is configured to support an audit log . An audit log is information concerning the operating environment of the platform namely a listing of data that represents what information has been successfully loaded into the system memory after power on of the platform . For example the representative data may be hash values of each software module loaded into the system memory . These software modules may include the processor nub the OS nub and or any other critical software modules e.g. ring modules loaded into the isolated area . Thus the audit log can act as a fingerprint that identifies information loaded into the platform e.g. the ring code controlling the isolated execution configuration and operation and is used to attest or prove the state of the current isolated execution.

In another embodiment both the protected memory and unprotected memory e.g. a memory array in the non isolated area of the system memory of may collectively provide a protected audit log . The audit log and information concerning the state of the audit log e.g. a total hash value for the representative data within the audit log are stored in the protected memory .

Referring still to the non volatile memory stores non volatile information. Typically the non volatile memory is implemented in flash memory. The non volatile memory includes the processor nub as described above. Additionally the processor nub may also provide application programming interface API abstractions to low level security services provided by other hardware and may be distributed by the original equipment manufacturer OEM or operating system vendor OSV via a boot disk.

The mass storage device stores archive information such as code e.g. processor nub programs files data applications e.g. applications applets e.g. applets to and operating systems. The mass storage device may include a compact disk CD ROM a hard drive or any other magnetic or optic storage devices. The mass storage device also provides a mechanism to read platform readable media. When implemented in software the elements of the present invention are stored in a processor readable medium. The processor readable medium may include any medium that can store or transfer information. Examples of the processor readable medium include an electronic circuit a semiconductor memory device a read only memory ROM a flash memory an erasable programmable ROM EPROM a fiber optic medium a radio frequency RF link and any platform readable media such as a floppy diskette a CD ROM an optical disk a hard disk etc.

In communication with the platform I O devices include stationary or portable user input devices each of which performs one or more I O functions. Examples of a stationary user input device include a keyboard a keypad a mouse a trackball a touch pad and a stylus. Examples of a portable user input device include a handset beeper hand held e.g. personal digital assistant or any wireless device.

A set of control registers from which the current control registers may be loaded are also retained with the processor. The set of control registers includes two subsets an IsoX subset and a normal subset including IsoX IDT IsoX GDT and IsoX CR and IDT GDT and CR respectively. A plurality of selection units such as multiplexers are used to select between the first and second subset of the set of control registers . The selection signal is provided by selection signal generation unit which employs the IsoX mode bit in conjunction with an event vector to generate the selection signal to the multiplexers and . In one embodiment the events to be handled in IsoX mode are stored in a lookup table LUT and the event vector is used as an index to the LUT to identify if the event should be handled in an IsoX mode. By appropriately populating the LUT the OS nub can ensure that any event whether synchronous or asynchronous is handled in isolated execution mode if desired. It is also within the scope and contemplation of the invention for the OS nub to dynamically modify the LUT from time to time.

In this manner the current memory map corresponding to IDT GDT and CR can be dynamically changed responsive to the receipt of an event. Accordingly it is possible to ensure that an asynchronous event such as a machine check which might otherwise cause a data leakage is always handled in isolated mode using an appropriate memory map. Thus on receipt of a machine check selection signal generation unit asserts a selection signal to select control registers and to have their contents loaded into current IDT register current GDT register and current CR register respectively. The exception vector may then be dispatched and will be handled using the IsoX memory map. Other types of events such as non maskable interrupts NMI or clock interrupts may be at the discretion of the OS nub handled in isolated execution mode even where data leakage is not a concern. For example in the context of the clock interrupt requiring that it be handled by the isolated environment avoids denial of service conditions in the OS nub.

The IsoX mode bit is also used to control writes to the first subset of control registers in control register set . By requiring isolated execution mode for any changes to the IsoX subset and software attack by corrupting the memory mapping for asynchronous event handling is prevented.

If at decision block the event is of a class to be handled in an IsoX mode a determination is made at decision whether the platform is in IsoX mode. If it is not in IsoX mode the selection signal generation unit causes the memory map selection unit to load the current control registers with the IsoX memory map at functional block . After the appropriate memory map is loaded or is determined to already be loaded the vector is dispatched and the asynchronous event is handled at function block .

In the foregoing specification the invention has been described with reference to specific embodiments thereof. It will however be evident that various modifications and changes can be made thereto without departing from the broader spirit and scope of the invention as set forth in the appended claims. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense.

