---

title: Computer-hardware, life-extension apparatus and method
abstract: A computer hardware life-extension apparatus and method is disclosed to circumvent hardware-dependent software installation locks, imposed by selected software packages, which may artificially enforce compliance with a minimum set of hardware requirements before allowing installation. Various techniques may be used to circumvent the artificial hardware locks, thereby effectively extending the useful life, and delaying the forced obsolescence, of selected computer hardware. An apparatus and method in accordance with the invention may be used to extend the life of a wide variety of computer hardware, including but not limited to processors, main memory, secondary storage devices, and the like.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08806474&OS=08806474&RS=08806474
owner: 
number: 08806474
owner_city: 
owner_country: 
publication_date: 20100707
---
This application is a continuation of U.S. patent application Ser. No. 10 158 353 filed May 29 2002 which is incorporated herein by reference in its entirety.

This invention relates to computer systems and more particularly to novel systems and methods for extending the useful life and delaying the obsolescence of computer system hardware.

A CPU also known as a processor is the processing center of a computer system. A CPU may be designed with a collection of machine language instructions or instruction set that the processor understands and follows. Program code developed to perform a desired task must ultimately perform its various functions and routines using the instruction set of the processor on which it is processed. As CPU manufacturers such as Intel have released newer and faster processor architectures one hallmark of their evolution and design has been backward compatibility meaning that newer chips will execute the instruction set of previous processors. However program code written for newer architectures may not run on the older processors since new instructions may be utilized. In some cases the instruction set of a new CPU architecture may only include a few new instructions as compared to its predecessor.

For example the Intel 80486 the 486 processor architecture added 6 new instructions to extend its Intel 80386 the 386 instruction set core. Likewise the Intel Pentium added 8 new instructions to its 486 instruction set core. In some cases software may utilize the new instructions and therefore not run on older processors. These new instructions if encountered by an older processor may incur errors in the operation thereof and may cause a system shutdown or the like.

As new instructions are added some software may check the characteristics such as clock speed architecture and the like of the processor on which it is running. Certain instructions when executed simply identify selected characteristics of the processor. These characteristics may be used like flags by the software to decide whether to proceed with execution or to modify execution in some way. For example the CPUID instruction introduced to the core instruction set in upgraded processors may return the values of certain characteristics of a given processor. Some processors may not support this instruction and incur errors when encountered thereby.

Installation programs used to install many software applications may check the characteristics of a processor and require that a computer meet a pre selected set of requirements. For example a purchased software package may state on its packaging a minimum CPU architecture clock speed RAM requirements and secondary storage disk capacity requirements to operate the software. If these minimum system requirements are not met the installation program may abort the installation process and prevent a user from installing the desired software.

Some software manufacturers may justify this action in order to ensure that a software package performs at what the manufacturer considers a satisfactory level. Unfortunately some requirements may be artificially imposed. That is a program may actually run at a satisfactory performance level as deemed by a user of a computer system but the user may be prevented from installing and running the software because the manufacturer has artificially locked out selected computer systems. In a sense the manufacturer of the software has forced obsolescence of the computer system as in the case of Microsoft and the Windows operating system. This may require a user to unnecessarily upgrade or purchase a new computer system satisfying the requirements incurring unneeded frustration effort collateral programming and expense to the user.

In accordance with the issues and problems described hereinbefore what is needed is a software solution whereby an older processor may emulate a newer processor s extended features without incurring a significant performance penalty thereby eliminating the need to unnecessarily upgrade to a newer processor or computer system to host newer operating systems and software.

Alternatively in cases where hardware dependent software locks artificially prevent the installation of software thereby needlessly forcing obsolescence on selected hardware components what are needed are apparatus and methods to circumvent these locks to allow the proper installation and operation of the subject software.

What is further needed is a software solution to make an older processor indistinguishable from a newer processor or a CPU upgrade to substantially all software accessed thereby providing the same features and functionality.

What is further needed is a method to effectively weld such a software solution to an older processor in order to mediate and monitor all access and use of the processor.

In view of the foregoing it is desirable to provide a CPU life extension module that may render a previous CPU indistinguishable from an upgraded CPU to virtually or substantially all operating systems and applications running thereon. Not only may the CPU appear to be an upgraded CPU to all software but the CPU life extension module may provide the same substantive features and functionality of an upgraded CPU. Thus the useful life of a CPU may be extended and needless effort and expense may be avoided by the owners and users thereof. In addition artificial locks and barriers designed to prevent users from installing and using selected software may be bypassed.

While some software may utilize newer instructions intended for an upgraded CPU in many cases the use of these new instructions may be relatively rare. In some cases new instructions may only be used to identify and reject old processors during installation and never occur again. In other cases software may be artificially prevented from running on a particular processor simply due to the lack of a new instruction despite the fact that it is not using any of the new instructions. In many cases software utilizing new instructions may run quite satisfactorily on an older processor if the relatively few newer instructions could be translated into the older processor s native instruction set. Since the new instructions occur relatively infrequently this translation process may result in very little performance degradation.

Consistent with the foregoing needs and in accordance with the invention as embodied and broadly described herein a method and apparatus are disclosed in one embodiment in accordance with the invention as including a processor configured to process data structures comprising executable and operational data. The processor may have a native instruction set that software may use to perform various tasks. A memory device may be operably connected to the processor to store the data structures.

In accordance with the invention the data structures may include a CPU life extension module configured to run on the processor and implement new instructions contained in an upgraded CPU s instruction set. The CPU life extension module may augment the native instruction set of the processor to include additional instructions not previously recognized by the processor.

The CPU life extension module may be further configured to intervene when needed between the processor and data structures processed by the processor such as applications and the operating system in order to appear to software as an upgraded CPU and to provide the same features and functionality of the upgraded CPU. In certain embodiments the user may actually be able to choose the extensions to be applied to the CPU. In order to intervene between the processor and the operating system in certain embodiments the CPU life extension module may be installed as a driver. This may allow the CPU life extension module access to the processor at the highest privilege level.

The processor may be programmed to generate interrupts in response to system faults. The CPU life extension module may be configured to perform its tasks in response to these interrupts. For example the CPU life extension module may be programmed to translate additional instructions not recognized by the processor into the processor s native instruction set for processing. This may be accomplished either statically when an application is being loaded or dynamically during execution by responding to an interrupt generated by the processor whenever an invalid operation code is encountered. An invalid operation code handler may be invoked that may translate the unrecognized operation code into operation codes recognized by the processor. If the operation code is not recognized by the CPU life extension module then the normal invalid operation code procedures may be invoked.

An apparatus and method in accordance with the invention may be programmed to modify system flags to emulate those of an upgraded CPU. For example a processor may include a flags register containing flags to reflect system status. These flags may indicate whether or not a processor includes various features and functions. The CPU life extension module may be programmed to detect READ instructions from and WRITE instructions to the flags register and modify the reads and writes to reflect an extended flag status corresponding to a CPU in an upgraded state. In certain embodiments this may be accomplished by maintaining a virtual flags register within the CPU life extension module.

An apparatus and method in accordance with the invention may configure the processor to generate a stack fault interrupt whenever the processor pushes data onto the processor s stack. This may be accomplished in part by setting the stack size value equal to the address of the current top of the stack. Thus a stack fault handler may then be invoked whenever a value is pushed onto the stack. The stack fault handler may then determine if the operation is pushing values of a flags register onto the stack and if so increment the stack size to allow the flags register to be pushed onto the stack push the flags register onto the stack and then modify the flag values to emulate those of an upgraded CPU. Thus in certain embodiments the modification of the flags register may occur in the copy thereof contained on the stack.

In a similar manner the stack fault handler module may be configured to detect future pop operations e.g. operations pulling values off of the stack corresponding to push operations e.g. operations placing values onto the stack and set breakpoint interrupts to occur in response to the pop operations. A breakpoint handler may then be invoked to decrease the stack size whenever a pop operation occurs. Thus future push operations will continue to incur a stack fault interrupt whenever executed. In other embodiments the stack size may be maintained using approaches such as stack shadowing which may maintain a zero size stack by always invoking a fault handler.

The data structures in accordance with the present invention may include an interrupt vector table having address pointers used to locate interrupt service routines and fault handlers. The CPU life extension module may be configured to modify selected address pointers to point to the interrupt handlers and fault handlers used to implement an apparatus and method in accordance with the invention. These may include an invalid operation code handler stack fault handler breakpoint handler or combinations thereof as needed.

In addition to the foregoing it is desirable to provide an apparatus and method for circumventing hardware dependent software installation locks in a computer system. Thus the useful life of hardware that is artificially excluded from functioning with selected software packages but in reality is capable and adequate to run the software correctly may be extended.

An apparatus and method for providing such may include installing a compliant hardware component such as a compliant CPU memory module or disk drive in a computer system. A compliant hardware component is defined as a component that satisfies the minimum requirements required by the installation routine of a program operating system or software package. The installation routine or program may abort the installation process of the program operating system or software package if the minimum requirements are not satisfied. For example a software installation routine or program may require at least a 233 Mhz Pentium processor at least 128 MB of RAM and 1 GB of available hard disk space. If these minimum requirements are not satisfied and verifiable by a software installation program the installation process may be aborted.

Once installation of the subject software package is complete the compliant hardware component may be removed from the computer system and replaced with a non compliant hardware component that does not satisfy the minimum requirements of the software package but is capable of operating correctly with the software package. The software package may then be operated successfully with the supposedly insufficient hardware. In certain embodiments shutting down and rebooting the computer system may be necessary when replacing the hardware. Thus hardware locks may be circumvented and the useful life of hardware may be extended.

In another embodiment an apparatus and method in accordance with the invention may be performed in a simulated computer environment such as with Connectix s Virtual PC or Insignia s SoftPC in addition to the physical hardware environment hereinbefore discussed. For example an apparatus and method may include installing a software package in a simulated computer environment wherein all of the minimum requirements are satisfied in the simulated environment. For example a simulated environment may provide a sufficient simulated CPU simulated memory module and a simulated hard disk wherein substantially all of the minimum requirements of the software package are satisfied.

Once the software package is installed in the simulated environment the simulator may be replaced by a simulator that does not satisfy the minimum requirements but is actually capable of running with the software package correctly and adequately. The software package may then be operated successfully in the supposedly insufficient simulated environment. In certain embodiments shutting down and rebooting the computer system may be necessary when replacing one simulator with another. Thus as with the physical hardware as discussed hereinbefore hardware locks may be circumvented and the useful life of simulated hardware may be extended in a simulated environment.

It will be readily understood that the components of the present invention as generally described and illustrated in the Figures herein could be arranged and designed in a wide variety of different configurations. Thus the following more detailed description of the embodiments of systems and methods in accordance with the present invention as represented in is not intended to limit the scope of the invention as claimed but is merely representative of certain examples of presently contemplated embodiments in accordance with the invention. The presently described embodiments will be best understood by reference to the drawings wherein like parts are designated by like numerals throughout.

Referring to an apparatus may implement the invention on one or more nodes client computer containing a processor CPU . All components may exist in a single node or may exist in multiple nodes remote from one another. The CPU may be operably connected to a memory device . A memory device may include one or more devices such as a hard drive or other non volatile storage device a read only memory ROM and a random access and usually volatile memory RAM or operational memory .

The apparatus may include an input device for receiving inputs from a user or from another device. Similarly an output device may be provided within the node or accessible within the apparatus . A network card interface card or port may be provided for connecting to outside devices such as the network .

Internally a bus or plurality of buses may operably interconnect the processor memory devices input devices output devices network card and port . The bus may be thought of as a data carrier. As such the bus may be embodied in numerous configurations. Wire fiber optic line wireless electromagnetic communications by visible light infrared and radio frequencies may likewise be implemented as appropriate for the bus and the network .

Input devices may include one or more physical embodiments. For example a keyboard may be used for interaction with the user as may a mouse or stylus pad . A touch screen a telephone or simply a telecommunications line may be used for communication with other devices with a user or the like. Similarly a scanner may be used to receive graphical inputs which may or may not be translated to other formats. The hard drive or other memory device may be used as an input device whether resident within the node or some other node e.g. etc. on the network or from another network .

Output devices may likewise include one or more physical hardware units. For example in general the port may be used to accept inputs into and send outputs from the node . Nevertheless a monitor may provide outputs to a user for feedback during a process or for assisting two way communication between the processor and a user. A printer a hard drive or other device may be used for outputting information as output devices .

In general a network to which a node connects may in turn be connected through a router to another network . In general two nodes may be on a network adjoining networks or may be separated by multiple routers and multiple networks as individual nodes on an internetwork. The individual nodes e.g. may have various communication capabilities.

In certain embodiments a minimum of logical capability may be available in any node . Note that any of the individual nodes may be referred to as may all together as a node or a node . Each may contain a processor with more or less of the other components .

A network may include one or more servers . Servers may be used to manage store communicate transfer access update and the like any practical number of files databases or the like for other nodes on a network . Typically a server may be accessed by all nodes on a network . Nevertheless other special functions including communications applications directory services and the like may be implemented by an individual server or multiple servers .

In general a node may need to communicate over a network with a server a router or nodes . Similarly a node may need to communicate over another network in an internetwork connection with some remote node . Likewise individual components may need to communicate data with one another. A communication link may exist in general between any pair of devices.

Referring to a CPU may include a core instruction set or native instruction set . The instruction set may include all of the instructions or commands that a CPU architecture may recognize and follow. Programs running on the CPU may be required to perform their various tasks using the instruction set of the CPU on which they are running. In this example an Intel 386 instruction set is illustrated as the core instruction set because the 386 is a 32 bit architecture and addition of new instructions by the 486 and Pentium may be easily illustrated. However the principles illustrated herein may be applied to any core instruction set such as that used by the Intel 286 or 8086 architectures.

Subsequent upgraded CPU architectures may have instruction sets containing all of the instructions of a preceding CPU architecture in addition to new instructions and respectively. For example the instruction set of the Intel 486 architecture may provide additional instructions to that used by the 386 architecture . New instructions may include application instructions system instructions control registers and control flags test registers and test flags system flags as well as other miscellaneous function flags and registers

Application instructions in general may include those instructions made available to applications running at any privilege level. System instructions in general may refer to special instructions that may only be available to applications running in the most privileged mode such as by the operating system.

Control registers and control flags are generally registers and flags that provide system level functionality that are used to configure the CPU such as may be required by an operating system. System flags in general may provide system status and available system features and may be available to applications running at a lower privilege level in addition to applications running at a high privilege level such as an operating system.

Test registers and test flags may also be made available to applications running at a high privilege level such as an operating system or system diagnostics. Miscellaneous functions flags and registers refer to any other function flags and registers that the system may use in its operation.

Likewise the Pentium CPU architecture may provide additional instructions to the 486 and 386 architectures. The Pentium architecture may include new application instructions system instructions control registers and control flags test registers and test flags system flags as well as other miscellaneous function flags and registers

In order for a previous architecture such as a 386 architecture to emulate a newer architecture such as a 486 or Pentium the additional instructions need to be welded closely to the previous architecture . That is a core instruction set provided by a physical processor must include the CPU life extension module welded very closely thereto so that applications operating systems and the like perceive the software extended CPU as indistinguishable from the physical upgraded CPU .

Referring to a CPU life extension module may mediate all exchanges of data between the operating system applications and the physical CPU . Thus the CPU life extension module may actually appear in virtually all respects to be an upgraded CPU having an upgraded or enhanced instruction set. Welding the CPU life extension module to the physical CPU may be necessary to prevent the operating system or applications from bypassing the life extension module and making calls directly to the CPU thereby possibly incurring errors and impeding proper functioning of the computer system .

Since the operating system may function at the highest level of privilege obtaining a privilege level whereby the CPU life extension module may have control of all exchanges between the operating system applications and the physical CPU may be difficult to achieve. Therefore in certain embodiments the CPU life extension module may be installed as a system driver. Embodying the CPU life extension module as a driver may allow the life extension module to be inserted between the operating system and the CPU and provide the necessary level of privileged access to the CPU .

Referring to an apparatus and method in accordance with the invention may be stored in system memory . For example system memory may include an operating system that may include various interrupt handlers programmed to execute based on the occurrence of system interrupts. The memory may also include an interrupt vector table that may index the system interrupts to corresponding address pointers.

These address pointers may point to memory locations containing service routines such as drivers programmed to address particular interrupts. Drivers may also be stored in memory and may be configured to control I O devices or other peripheral hardware connected to the computer system . In certain embodiments a CPU life extension module may be installed as a driver to achieve a privilege level equal to that of the operating system .

The CPU life extension module may include other modules to perform its various tasks. The function of these modules will be described in further detail. For example the CPU life extension module may include an invalid operation code handler module a stack fault handler module a breakpoint handler module as well as other modules .

The invalid operation code handler module may be configured to execute in response to operation codes that are not recognized by the CPU . The invalid operation code handler may be programmed to dynamically translate new instructions intended for an upgraded CPU in terms of instructions of the core instruction set . A stack fault handler module may execute upon occurrence of system stack faults including overflows and illegal accesses to the stack. A breakpoint handler module may be executed upon occurrence of breakpoints in program code executed by the processor . Likewise the CPU life extension module may include other handler modules as needed. In addition memory may include applications written to run on the CPU or on an upgraded CPU . These applications may or may not use new instructions not recognized by the CPU having core instruction set .

Referring to a CPU may be configured to process program code that may include a series of instructions . Some instructions may be recognized and processed correctly by a CPU . Newer instructions intended for an upgraded CPU may not be recognized by the CPU and may generate an invalid operation code interrupt or fault in response to such occurrences.

This may in turn trigger the execution of an interrupt service routine or fault handler programmed to handle invalid operation codes . In accordance with the invention the invalid operation code handler may be programmed such that new instructions intended for a CPU upgrade may be translated into operation codes recognized by the CPU . This process will be described in more detail with respect to the description of .

Referring to contents of a memory device may include a real mode interrupt vector table used to index various system interrupts to corresponding address pointers . The address pointers may point to locations in memory containing various interrupt service routines or fault handlers . These interrupt service routines may address various interrupts such as invalid operation codes stack faults breakpoints and the like. The address pointers may be modified to point to the various modules in accordance with the invention such as the invalid operation code handler module the stack fault handler module and the breakpoint handler module . Thus the interrupt service routines may be modified or reprogrammed to achieve the objects of the present invention. The use of real mode examples is not limiting to the scope of the invention but only used to simplify the description of the invention.

For example an invalid operation code may trigger an interrupt that in turn may trigger operation of an interrupt service routine programmed to address invalid operation codes. Normally If the operation code is not recognized by the CPU then a corrective event such as a system shutdown may occur. However the interrupt service routine may be reprogrammed or modified in accordance with the present invention to determine if the operation code is a new instruction intended for an upgraded CPU and translate the instruction into instructions recognized by the CPU .

For example if a CPUID instruction is encountered the interrupt service routine may be programmed to return the characteristics of an upgraded CPU as selected by a user. Thus the interrupt service routine may be reprogrammed to handle new instructions. Likewise other interrupt service routines may also be reprogrammed to perform various tasks in accordance with the present invention.

Referring to in one embodiment the CPU life extension module may begin by saving the current stack size and setting the current stack size to equal the value of the top of the stack. Thus any values pushed onto the stack will create an overflow condition thereby generating a stack fault. The stack fault may trigger the execution of the stack fault handler module that will be described in more detail as part of the description of .

By setting the stack size to the top of the stack any values pushed onto or popped from the stack may be monitored thereby turning over control to the CPU life extension module . This operation may be particularly important when the flags register is pushed onto the stack. The CPU life extension module may then manipulate various flag status values in order to emulate flag status values of an upgraded CPU .

Referring to an invalid operation code handler may begin by executing a test to determine if the operation code is recognized by the CPU life extension module . If the operation code is recognized by the CPU life extension module the operation code may be dynamically translated into instructions recognized by the CPU . These instructions may then be executed by the CPU . Since the invalid operation code may be dynamically translated and executed within the invalid operation code handler the instruction pointer of the CPU may then be incremented in order to proceed to the next instruction. Operation may then be returned to the interrupted program.

If the operation code is not recognized by the CPU life extension module at the test the original invalid operation code handler may then be executed invoking a system shutdown message or the like. Thus new instructions intended for an upgraded CPU may be dynamically translated into instructions recognized by an older CPU .

Referring to as was previously discussed new instructions may include application instructions system instructions control registers and flags test registers and flags system flags and other miscellaneous functions flags and registers . The occurrence of new instructions whether they be application instructions or system instructions may be handled by the invalid operation code handler module upon occurrence of an invalid operation code fault . Thus the new instructions may be dynamically translated into instructions recognized by the CPU .

Modifying the system flag to emulate an upgraded CPU may be much more difficult to implement because the mere reading or writing of a value to a flags register may not generate an error and corresponding interrupt . Thus apparatus and methods are needed to detect READ and WRITE instructions from and to the flags register in order to make modifications to the status contained therein to emulate an upgraded CPU .

The flags register may include bits indicating various system status. For example the flags register may include a carry flag to indicate a carry condition when performing addition a parity flag to detect data integrity and a zero flag that may be set when an arithmetic operation results in zero. In addition other flags may be included to indicate whether a selected CPU includes various features or functions.

For example an ID flag may be used to determine if the processor supports the CPUID instruction. Similarly a VIP flag and a VIF flag may be provided to indicate various status in upgraded CPUs . Thus apparatus and methods are needed to detect READs from and WRITEs to the flag register in order to manipulate the flag values to represent an upgraded CPU .

In certain embodiments this may be accomplished by modifying the handler that responds to stack faults. For example referring to a stack fault handler may be configured to execute whenever a value is pushed onto the stack. As was described with respect to by setting the stack size to the current top of stack any value pushed onto the stack may generate a stack fault. Therefore the push command may then be examined to determine if the flag register is to be pushed onto the stack.

For example a stack fault handler may begin by executing a first test to determine if the stack fault was caused by a value being pushed onto the stack. If so a second test may be executed to determine if the push operation was an attempt to push the flags register onto the stack pushf command . If it is determined at test that the fault was caused by an attempt to push the flags register onto the stack the flag status may then be modified to emulate a desired upgraded CPU . This may involve modifying one or several bits of the flag status values to emulate an upgraded CPU . Once the flag status values are modified to emulate the desired CPU upgrade the stack size may be incremented . However if at the test the push operation is determined not to attempt to push the flags register onto the stack then the flags modification step may be skipped and the stack size may be incremented .

After the stack size has been incremented a test may be performed comparing the current stack size to the saved stack size saved in step and discussed in the description of . If the stack size is greater than the saved stack size then the stack fault handler may execute normal stack fault handling procedures originally corresponding to the operating system . However if in the test the stack size is determined to be less than the saved stack size then the process may continue by actually pushing the subject value onto the stack.

Once the value has been pushed onto the stack the stack fault handler may then locate in the program code the pop operation corresponding to the push operation executed in step . The stack fault handler may then set a breakpoint interrupt to occur in the program code at the location of the pop operation.

One reason for setting a breakpoint interrupt at the location of future pop operations is to allow execution of a breakpoint handler in order to decrement the stack size. Decrementing the stack size after a pop operation is important in order to assure that future push operations will incur stack faults. The breakpoint handler will be described in more detail as part of the description of . After the breakpoint interrupt is set the instruction pointer of the CPU may then be incremented to point to the next instruction in the program code. Control may then be returned to the interrupted program.

Referring to a breakpoint handler may begin by performing a test to determine if the breakpoint corresponds to a pop operation. If the breakpoint does correspond to a pop operation the stack size may then be decremented . However if at the test the breakpoint is determined not to correspond to a pop operation then the breakpoint handler may execute normal breakpoint handling procedures that may have originally been processed by the operating system . Control may then be returned to the CPU .

From the above discussion it will be appreciated that the present invention provides a CPU life extension module that may make a processor emulate a newer CPU. As has been previously described an apparatus and method in accordance with the invention may statically or dynamically translate newer instructions intended for an upgraded CPU into instructions recognized by the processor effectively augmenting the processor s instruction set and providing all the functionality of an upgraded CPU. In addition system flags may be modified to emulate those of an upgraded CPU. As a result the effective life of a CPU may be extended thereby reducing expense and lost time incurred by needing to upgrade a processor.

In certain embodiments the user may be provided the ability to choose the characteristics of the processor that he wishes emulate. Likewise the user may choose to execute the invention in any of the modes real protected V86 etc. of the processor. Thus the processor may emulate a selected upgraded processor by providing the same level of functionality features and may be substantially indistinguishable to all software of certain selected types or even all applicable software accessed thereby including the operating system.

Referring to as was previously discussed manufacturers such as Microsoft may employ various hardware locks to artificially exclude certain computer systems from loading or installing selected software packages. Hardware locks may prevent software installation based on a computer system s processor memory size disk size or conceivably any other hardware device such as hardware used for video sound communications networking and the like. Once a software installation program has verified that a computer system satisfies the minimum requirements the software installation may actually be performed .

For example selected manufacturers may lock out selected processors using CPU locks which may be based on an identification of processor architecture processor speed or a combination thereof. An OS or other software by Microsoft in particular may employ various mechanisms to determine the architecture and speed of a target processor. In general software by Microsoft may employ INTEL s application note AP 485 to identify the processor. The identification of the processor may typically be sufficient to determine the speed of the processor. In some rare cases software by Microsoft may actually execute a sequence of instructions to determine the speed of the processor.

Referring to while continuing to refer generally to each of these operations may be embedded into an installation program such as the Microsoft Windows Installation program which may have no effect on the Windows operating system once it has been installed. In cases where the CPU requirements are artificially imposed a method to circumvent the CPU lock may include installing a compliant CPU e.g. one satisfying the minimum speed and architecture requirements in a computer system in order to permit the proper installation of the Windows operating system. Once the installation is complete the underlying CPU may be physically replaced with a non compliant CPU not satisfying the minimum requirements. The operating system may then be operated correctly and without problems using the non compliant CPU .

Although this example may appear to simply be an academic exercise since an adequate CPU may be present for installation demonstrating the existence of such artificial CPU locks in the Microsoft Windows Installation program as well as other software packages demonstrates the need for methods to circumvent artificially imposed hardware locks . Thus unnecessary expense and labor may be avoided by extending the life of supposedly incompatible processors and software packages may be properly installed and executed including the Windows Operating Systems.

For example in one embodiment a CPU with a specified architecture and performance such as a 233 MHz Pentium may be inserted into a motherboard or equivalent with a socketed CPU such as a Socket 7 motherboard. The CPU may satisfy the installation requirements of a selected software package such as the Windows operating system which may be subsequently installed . Once Windows has been installed on the computer system the computer system may be shut down and the 233 MHz Pentium CPU may be physically replaced with a non compliant CPU such as a 75 MHz Pentium processor. The computer system may then be rebooted . Since the 75 MHz Pentium processor may be fully capable of running Windows the Windows Operating System may be run thereon with substantially no problems.

Referring to while continuing to refer generally to apparatus and methods in accordance with the invention may be generally applied to virtually all hardware in a computer system which is artificially excluded by software locks. For example a compliant hardware component e.g. one satisfying the minimum speed and architecture requirements may be physically installed in a computer system to satisfy the minimum requirements of the software and to permit the proper installation of the software package. Once the installation is complete the underlying hardware component may be physically replaced with a non compliant hardware component not satisfying the minimum requirements. Since the non compliant hardware may be fully capable of functioning with the subject software the software may be operated therewith with substantially no problems.

One may ask whether this example is simply an academic exercise since an adequate hardware component is present during the installation process . However unnecessary expense and labor may be avoided by extending the life of supposedly incompatible hardware to properly install and execute various software packages including the Windows Operating Systems.

For example in one embodiment a hardware component with a specified architecture and performance may be inserted into a computer system . The compliant hardware component may satisfy the installation requirements of a selected software package which may be subsequently installed . Once the software has been installed on the computer system the computer system may be shut down and the hardware component may be physically replaced with a non compliant hardware component. The computer system may then be rebooted and the software package may be run thereon with substantially no problems.

Referring to while continuing to refer generally to apparatus and methods in accordance with the invention may be implemented in a simulated environment as well as with actual physical hardware. In simulated environments such as those created by Connectix s Virtual PC or Insignia s SoftPC a series of steps may be performed to circumvent hardware locks of software installed therewith. For example the Windows Operating System may be initially installed with a simulated CPU that complies with the requirements for Windows installation such as a simulated 233 MHz Pentium CPU .

Once Windows is installed the simulated CPU may be replaced with a down graded version of the simulated CPU simulating a non compliant CPU such as a 75 MHz Pentium processor . The simulated CPU may then be rebooted and the installed Windows operating system may be run in the non compliant simulated environment with substantially no problems. This process may be applied to any simulated hardware component being artificially excluded by software and is not limited to the CPU speeds and architectures recited in this example.

Thus the use of artificial CPU hardware locks in the installation process of the Microsoft Windows Operating System as well as other software packages may artificially limit the ability of various systems to install and use such operating systems and software thereby needlessly forcing obsolescence on the subject hardware. Furthermore the techniques herein described demonstrate that the software once installed is not dependent upon the features that the installation procedure may explicitly enforce during the installation process .

Referring to while continuing to refer generally to memory locks such as those enforced by Microsoft brand software may be based on a combination of callable Windows Application Programming Interfaces APIs and information provided by the BIOS at boot time. Installation programs such as those used to install Microsoft Windows may obtain physical memory resources from the hereinbefore mentioned interfaces. The installation program may subsequently continue or abort the installation process based upon the amount of physical memory that is installed in the computer system .

Therefore in certain embodiments in accordance with the present invention the Windows operating system may be installed on a computer system having sufficient memory to satisfy the minimum requirements. Subsequently the amount of physical memory may be altered such that the minimum requirements are not satisfied. The Windows operating system or other software package may then be operated correctly on the computer system with supposedly insufficient memory resources . Although an adequate amount of physical memory is required for the initial installation demonstrating that memory requirements enforced by the Microsoft Windows Installation program are not actually required for correct operation highlights the need for methods to circumvent these locks .

For example a process in accordance with the invention that may be used to circumvent memory locks may include installing an adequate amount of physical memory into a computer system to meet the minimum requirements of a software package s installation program such as that of Microsoft Windows. The software package in this example Windows may be subsequently installed . The computer system may then be shut down and a portion of the physical memory may be removed from the computer system in order to make the computer system non compliant with Window s minimum memory requirements.

For example assuming the installation was performed with a 16 Megabyte and a 128 Megabyte memory module the 128 Megabyte memory module may be removed to leave only 16 Megabytes of physical memory in the computer system . The selection of radically different capacity memory modules e.g. 16 Megabyte and 128 Megabyte modules may be used to accentuate the artificiality of the Microsoft enforced memory locks . The computer system may then be rebooted and the Windows Operating System may be correctly operated with substantially no problems.

The artificiality of the Microsoft enforced memory locks may be comprehended more completely by understanding that the Microsoft Windows Operating System is designed as a Demand Paged Operating System. Stated otherwise as long as there is a minimal amount of physical memory available in the computer system the Windows Operating System is designed to page memory pages in and out of physical memory by storing copies of the memory pages resident on secondary storage media such as a hard disk network or the like. With this in mind the function of the Microsoft memory locks outside of artificially forcing obsolescence on a computer system appears to serve little purpose.

Referring to while continuing to refer generally to disk locks such as those imposed by Microsoft may be based on a combination of callable Windows Application Programming Interfaces APIs and information provided by the BIOS at boot time. For example software installation programs such as the Microsoft Windows installation program may obtain physical disk resources from these interfaces. The installation program may continue or abort the installation process based on the size of the physical disk installed in the computer system .

Therefore in accordance with the present invention the Windows operating system may be initially installed on a computer system with a physical disk having a capacity sufficient to satisfy Windows minimum requirements. Once Windows is installed the underlying disk capacity may be changed without any negative effects on the operation of the operating system. Although an adequate amount of disk capacity is required for the initial installation demonstrating that the disk capacity requirements enforced by the Microsoft Windows Installation program are not actually required for correct operation highlights the need for methods to circumvent these locks .

For example a process in accordance with the invention which may be used to circumvent disk locks may include installing a disk drive with an adequate capacity to satisfy the minimum requirements of a software package s installation program such as that of Microsoft Windows. In certain embodiments a single partition may be created on the physical disk that utilizes the entire capacity of the physical disk . The software package in this example Windows may then be installed. The computer system may be subsequently shut down and a partition resizing operation may be performed on the disk with a disk utility such as a utility provided by Symantec V Comm or Powerquest e.g. Partition Magic in order to make the system non compliant with the Microsoft enforced minimum disk space requirements. The computer system may then be rebooted and the Windows Operating System may be run thereon with substantially no problems.

The artificiality of the Microsoft enforced disk locks may be comprehended more completely by understanding that Microsoft Windows Operating System is designed as a Demand Paged Operating System. Thus as long as there is an adequate amount of physical disk space available in the computer system the operating system will operate correctly by paging disk pages in and out of physical memory . The actual size of the paging file is based upon the size of the physical capacity of the disk and partition size of the disk drive and not the actual disk space required for the Windows Operating System to operate correctly. Therefore the Microsoft disk locks appear to serve no legitimate purpose. Their purpose is simply artificially forcing obsolescence on a computer system .

The present invention may be embodied in other specific forms without departing from its essence or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the invention is therefore indicated by the appended claims rather than by the foregoing description. All changes within the meaning and range of equivalency of the claims are to be embraced within their scope.

