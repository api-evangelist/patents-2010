---

title: On-device database service for mobile device
abstract: A database system of a mobile device that includes an on-device database service is provided. The on-device database service accepts a connection request from an application, and receives a database command from the application. The on-device database service translates the database command into a structured query language command, and transmits the structured query language command to an embedded database. After a database operation is performed by the embedded database, the on-device database service receives a result of the structured query language command that is transmitted from the embedded database, and the on-device database service transmits the result to the application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08478772&OS=08478772&RS=08478772
owner: Oracle International Corporation
number: 08478772
owner_city: Redwood Shores
owner_country: US
publication_date: 20101021
---
One embodiment is directed to a mobile device and more particularly to a database system for a mobile device.

An embedded database system is a database management system that is integrated with a software application or application that requires access to stored data such that the database system is hidden from the software application s end user. Embedded databases that can handle structured query language SQL commands are typically single threaded and single processing. Implementations of embedded databases generally consist of one of the following interfaces a linked static or dynamic native database library one or more C or C native function calls or a single application connection to a native database library.

These typical implementations suffer from the following drawbacks. First in general only one application can communicate with an embedded database at a given time. In the implementation the embedded database cannot communicate with other applications while concurrently communicating with the first application. This is because only one application can modify the data stored in the embedded database at a time in order to protect the integrity of data in the embedded database. Thus when two or more applications are in contention to access the embedded database one application generally blocks the other applications from accessing the embedded database.

Second in order to communicate with the embedded database an application in general is either required to know what type of database the embedded database is or is required to communicate with an intermediary application generally written in the C or C programming language where the intermediary application is required to know what type of database the embedded database is. Thus either the application or its corresponding intermediary application must include database functions that can communicate with a native database library of the embedded database.

Third typical implementations involve loading a database library of the embedded database into either the application connecting to the embedded database or the intermediary application used to communicate with the embedded database. This leads to higher memory requirements when multiple applications are executing concurrently as each application or its corresponding intermediary application is required to load the database library of the embedded application into memory.

One embodiment is directed to a computer readable medium having instructions stored thereon that when executed by a processor cause the processor to process database commands using an on device database service executed on a mobile device. The instructions include listening for a connection request to a on device database service executed on a mobile device from an application using a socket where the on device database service includes a service that is executed in a background of the mobile device and accepting the connection request from the application using the socket. The instructions further include receiving a database command from the application using the socket and translating the database command into a structured query language command. The instructions further include transmitting the structured query language command to an embedded database and receiving a result of the structured query language command that is transmitted from the embedded database. The instructions further include transmitting the result to the application using the socket.

One embodiment is directed to a database system of a mobile device that includes an on device database service. The on device database service is initiated and is executed in a background of the mobile device. The on device database service receives a connection from an application and processes platform independent database commands for an embedded database of the mobile device. In certain embodiments the on device database service can support concurrent connections from multiple applications allowing multiple applications to access and update the embedded database at the same time. Ultimately the embedded database can be synchronized with an enterprise database that resides on a centralized server using a mobile sync server.

In this specification the term mobile device includes a mobile computing device and a mobile communication device. describe a mobile computing device and a mobile communication device respectively in greater detail in accordance with embodiments.

A computer readable medium may be any available medium that can be accessed by processor . A computer readable medium may include both a volatile and nonvolatile medium a removable and non removable medium a communication medium and a storage medium. A communication medium may include computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and may include any other form of information delivery medium known in the art. A storage medium may include RAM flash memory ROM erasable programmable read only memory EPROM electrically erasable programmable read only memory EEPROM registers hard disk a removable disk a compact disk read only memory CD ROM or any other form of storage medium known in the art.

Processor can also be operatively coupled via bus to a display such as a Liquid Crystal Display LCD . Display can display information to the user. An input device such as a key pad keyboard and touch screen can also be operatively coupled to bus to enable the user to interface with mobile computing device .

According to one embodiment memory can store software modules that can provide functionality when executed by processor . The modules can include an operating system and a user interface module . Operating system can provide an operating system functionality for mobile computing device . User interface module can provide functionality allowing a user to interact with mobile computing device .

The modules stored on memory can also include an on device database service application modules and an embedded database . An on device service is defined as a software process that is executed in a background of a mobile device such as mobile computing device . A software process that is executed in a background of a mobile device is a software process that is executed independently rather under the direct control of a user of the mobile device and does not require any interaction with the user. An on device database service is defined as an on device service with a specific purpose of allowing applications to communicate with an embedded database such as embedded database . Thus according to an embodiment on device database service is a software process that can be initiated by processor using bus . According to the embodiment when on device database service is initiated on device database service can be executed by processor in the background of mobile computing device . This means that on device database service can be executed for any duration of time and does not require user interaction. One of ordinary skill in the art would readily appreciate that on device database service can be referred to as a service or a daemon and that both terms can be used interchangeably. On device database service can process commands that are transmitted by application modules execute corresponding commands accordingly and transmit results of the commands back to application modules . On device database service can provide functionality for processing database commands as will be described in more detail below.

Applications modules are software applications that can be executed by processor via bus and provide specific functionality to mobile computing device . The software applications are also identified as mobile applications or applications. According to an embodiment application modules can be Java Micro Edition ME applications. In one embodiment application modules can includes MIDLET modules. A MIDlet is a software application configured to execute on a mobile device such as mobile computing device that uses a Mobile Information Device Profile MIDP of a Connected Limited Device Configuration CLDC for the Java ME platform. In another embodiment application modules can include Xlet modules. An Xlet is a Java applet configured to execute on a mobile device such as mobile computing device that is part of the Java TV specification of Sun Microsystems Incorporated a subsidiary of Oracle Corporation. The Xlet uses a Personal Basis Profile PBP of a Connected Device Configuration CDC for the Java ME platform. As one of ordinary skill in the art would readily appreciate a Java applet is a software application that is generally smaller than a full feature software application and is configured to perform a specific task or multiple tasks as opposed to a full set of tasks performed by a full feature software application. A Java applet is generally delivered in a form of Java bytecode. In another embodiment application modules can include Java ME main applications. A Java ME main application or main application is any Java ME application that is not an applet or an Xlet. As one of ordinary skill in the art would appreciate a main application is not constrained by the limitations and restrictions particularly concerning a defined lifecycle or security that constrain applets and Xlets. Thus main applications are less limited in starting pausing and stopping during their execution and have more available system functionality when executed.

While in the illustrated embodiment of mobile computing device includes two application modules one of ordinary skill in the art would appreciate that this is an example embodiment and that mobile computing device can include any number of application modules.

Embedded database is a database configured to link directly with a software process that connects to embedded database such as on device database service . Embedded database can execute in a same address space of memory as the software process that connects to embedded database such as on device database service . As a result no inter process communication either over a network or between software processes on mobile computing device is required for database operations. According to an embodiment embedded database includes a database library and one or more database files. A database library is a set of database subroutines configured to perform database operations. The database library can be in any programming language. Examples of programming languages of the database library include C C Java Perl Tcl Python and PHP. The database library is also configured to perform low level operations such as locking transaction logging shared buffer management memory management and similar operations. The database library is also configured to be executed under any type of operating system such as UNIX Linux Windows and Mac OS X. Each database file of the one or more database files is a computer file configured to store data of embedded database in an integrated collection of logically related records. Each database file of the one or more database files can be accessed by the database library of embedded database . According to an embodiment on device database service can communicate with embedded database using a bridge. The bridge can process SQL commands from on device database service by converting a string of text transmitted by on device database service into a format recognized by embedded database .

In one embodiment embedded database is a Berkeley DB database a product of Oracle Corporation. However one of ordinary skill in the art would readily appreciate that this is only an example of an embedded database and that in alternate embodiments embedded database can be any lightweight database that can be executed on a mobile device such as mobile computing device . As defined in this specification a lightweight database is a database that is sufficiently compact so that the database can be executed on a mobile device such as mobile computing device . Examples of lightweight databases include Advantage Database Server EffiProz ElevateDB Embedded InnoDB Empress Embedded Database Extensible Storage Engine eXtremeDB Firebird Embedded HSQLDB Informix Dynamic Server InfinityDB InterBase ITTIA DB NexusDB Raima Database Manager ScimoreDB SolidDB SQLite SQL Server Compact Valentina DB and VistaDB.

According to the embodiment mobile communication device is similar to mobile computing device but does not include certain components that are present in mobile computing device . Specifically mobile communication device does not include user interface module display input device and application modules . Instead according to the embodiment mobile communication device includes bus memory operating system communication device processor on device database service and embedded database . The functionality of these components is similar to the functionality of their respective components illustrated in previously described above and thus are not described in relation to .

Java ME application is a software application that includes program modules written for the Java ME platform and is an example of an application that can execute on a mobile device according to the embodiment. Java ME application can provide a wide range of functionality including but not limited to providing an Internet browser to a user of the mobile device displaying text and graphics to the user playing audio media for the user displaying visual media to the user and communicating with another mobile device. One of ordinary skill in the art would readily appreciate that in alternate embodiments a software application represented by Java ME application in can include program modules written for other mobile platforms. Such other mobile platforms include the Symbian platform the Android platform the .NET Compact Framework the Qt framework the BREW platform the Windows Mobile platform the Palm OS platform the Flash Lite platform and any mobile browser.

Java ME application includes application profile configuration and native operating system OS . Application includes one or more program modules that provide the high level functionality of Java ME application and can be customized based on the high level functionality of Java ME application . In one embodiment application is a main application. In another embodiment application is a MIDlet. As previously described a MIDlet is a software application configured to execute on a mobile device that includes program modules where the program modules include source code written for the Java ME platform. The MIDlet is further configured to use a MIDP of a CLDC which is described below in greater detail. According to the embodiment the MIDlet can be managed by special purpose application management software AMS built into the mobile device. A MIDlet can be created by the AMS typically in response to a request by a user of the mobile device. A MIDlet has three possible states paused active and destroyed. When a MIDlet is in a paused state an instance of a MIDlet is constructed and the instance of the MIDlet is inactive. When the MIDlet is in an active state the MIDlet is active. When the MIDlet is in a destroyed state the MIDlet is terminated and is ready for reclamation by a garbage collector.

Below is example psuedo code of a MIDlet. One of ordinary skill in the art would appreciate that this is merely an example of a MIDlet 

In an alternate embodiment application is an Xlet. As previously described an Xlet is a Java applet configured to execute on a mobile device that is part of the Java TV specification and uses a Personal Basis Profile PBP of a Connected Device Configuration CDC for the Java ME platform. Like a MIDlet an Xlet can be managed by AMS built into the mobile device. An Xlet has four possible states loaded paused active and destroyed. When an Xlet is in a loaded state an instance of the Xlet has been constructed but not initialized. When the Xlet is in a paused state the Xlet has been initialized but is inactive. When the Xlet is in an active state the Xlet is active. When the Xlet is in a destroyed state the Xlet has been terminated and is ready for garbage collection.

Below is example psuedo code of an Xlet. One of ordinary skill in the art would appreciate that this is merely an example of a Xlet 

Profile includes one or more application programming interfaces APIs that support a category of mobile devices within a framework of a chosen configuration. When combined with configuration profile provides core application functionality for software applications that are executed on a mobile device. In an embodiment profile is an MIDP. An MIDP is a set of one or more APIs that provide functionality for applications executed on a mobile device such as user interface functionality network security functionality multimedia and game functionality over the air provisioning functionality and end to end security functionality. When combined with a CLDC an MIDP can provide core functionality in the form of a standard runtime environment and one or more APIs for the mobile device.

In an alternate embodiment profile is a PBP. A PBP is a set of one or more APIs that support resource constrained devices such as mobile devices with a graphical user interface framework. A PBP also includes one or more APIs of a Foundation Profile which provides additional support for applications. A PBP also provides support for an Xlet application programming module. When combined with a CDC a PBP provides a complete application environment for applications and embedded devices.

Configuration includes one or more basic APIs and virtual machine features that comprise a runtime environment for a mobile application. When combined with profile configuration provides core application functionality for software applications that are executed on a mobile device. In an embodiment configuration is a CLDC. A CLDC is a set of one or more basic APIs for resource constrained devices such as mobile devices and includes virtual machine features. When combined with an MIDP a CLDC can provide core functionality in the form of a standard runtime environment and one or more APIs for applications that are executed on a mobile device.

In an alternate embodiment configuration is a CDC. A CDC is a set of one or more basic APIs for resource constrained devices such as mobile devices and includes a virtual machine. In general a CDC includes more basic APIs and thus more functionality than a CLDC. When combined with a PDP a CDC can provide core functionality in the form of a standard runtime environment and one or more APIs for applications that are executed on a mobile device.

Native OS is an underlying operating system of a mobile device. In an embodiment of the invention native OS is similar to operating system of .

On device database service as previously described is a software process that can be initiated and upon initiation can be executed in a background of a mobile device. On device database service includes database service and native OS . Database service is a service or daemon that can be executed in a background of the mobile device and can communicate with Java ME application and embedded database . Database service can process commands that are transmitted by Java ME application execute corresponding commands accordingly and transmit results of the commands back to Java ME application . As previously described native OS is an underlying operating system of a mobile device.

Embedded database as previously described is a database configured to link directly with a software process that connects to embedded database such as database service . According to an embodiment embedded database includes a database library and one or more database files. The database library is configured to perform database operations. The database library is also configured to perform low level operations such as locking transaction logging shared buffer management memory management and similar operations. Each database file of the one or more database files is configured to store data of embedded database in an integrated collection of logically related records. Each database file of the one or more database files can be accessed by the database library of embedded database . In one embodiment embedded database is a Berkeley DB database.

During operation Java ME application may be required to perform a data operation on embedded database . Such a database operation can include selecting one or more data records inserting one or more data records updating one or more data records and deleting one or more data records. According to the embodiment when Java ME application is required to perform a data operation to embedded database Java ME application transmits a connection request to on device database service using socket . A socket as understood by one of ordinary skill in the art is an API configured to perform inter process communication. An inter process communication can occur in a single device or between two or more devices over a network.

Upon receiving a connection request on device database service accepts the connection request from Java ME application . In an embodiment of the invention the acceptance of the connection request from Java ME application by on device database service includes authenticating Java ME application . On device database service can authenticate Java ME application using a well known authentication method known to one of ordinary skill in the relevant art. Subsequently Java ME application transmits a database command to on device database service using socket . According to the embodiment the database command is platform independent. Because the database command is platform independent Java ME application is not required to know what type of database embedded database is. The database command is based on the desired data operation of Java ME application .

Upon receiving the database command from Java ME application on device database service translates the database command into a SQL command. The SQL command is in a format that embedded database can understand. Subsequently on device database service transmits the SQL command to embedded database using bridge . According to the embodiment bridge processes SQL commands from on device database service by converting a string of text transmitted by on device database service into a format recognized by embedded database .

Upon receiving the SQL command from on device database service embedded database performs a database operation that corresponds to the SQL command and transmits a result of the SQL command to on device database service using bridge . Subsequently on device database service transmits the result to Java ME application using socket .

Java ME application on device database service and embedded database of are similar to Java ME application on device database service and embedded database except for the following differences. As previously described Java ME application and on device database service reside on different mobile devices. Thus socket is configured to facilitate communication between Java ME application and on device database service where the communication occurs over a network. Furthermore on device database service includes configuration and native OS . Similar to configuration of configuration includes one or more basic APIs and virtual machine features that comprise a runtime environment for a mobile application. In one embodiment configuration is a CDC. Similar to native OS native OS is an underlying operating system of a mobile device. However because Java ME application and on device database service reside on different mobile devices native OS and native OS are different operating systems.

At the on device database service is initiated and the flow begins. At the on device database service listens for a connection request to the on device database service from an application using a socket. According to an embodiment the on device database service is a service that is executed in a background of a mobile device. In certain embodiments the application is a Java ME application. In one embodiment the Java ME application includes a main application. In another embodiment the Java ME application includes a MIDlet. In another embodiment the Java ME application includes an Xlet.

At the on device database service determines whether a connection request has been received from an application. If the on device database service has not received a connection request the flow returns to and the on device database service continues to listen for a connection request. If the on device database service has received a connection request the flow proceeds to .

At the on device database service accepts the connection request from the application using the socket. In one embodiment the application is executed on a same mobile device that the on device database service is executed on. In another embodiment the application is executed on a second mobile device that is different from the mobile device that the on device database service is executed on.

According to one embodiment accepting the connection request from the application includes authenticating the application. The on device database service can authenticate the application using any authentication method known to one of ordinary skill in the relevant art. By authenticating the application the on device database service can determine that the application is allowed to perform a database operation on an embedded database and can prevent a rogue application from gaining unauthorized access to the embedded database.

According to an embodiment an embedded database is a database configured to link directly with a software process that connects to the embedded database such as the on device database service. According to an embodiment the embedded database includes a database library and one or more database files. The database library is configured to perform database operations. The database library is also configured to perform low level operations such as locking transaction logging shared buffer management memory management and similar operations. Each database file of the one or more database files is configured to store data of the embedded database in an integrated collection of logically related records. Each database file of the one or more database files can be accessed by the database library of the embedded database. In one embodiment the embedded database is a Berkeley DB database.

At the on device database service receives a database command from the application using the socket. The database command is based on a database operation that the application desires to perform on the embedded database. According to an embodiment the database command is platform independent. Because the database command is platform independent the application is not required to know what type of database the embedded database is.

At the on device database service translates the database command into a SQL command. The SQL command is in a format that the embedded database can understand.

At the on device database service transmits the SQL command to the embedded database. According to an embodiment the on device database service transmits the SQL command to the embedded database using a bridge. In accordance with the embodiment the bridge processes SQL commands from the on device database service by converting a string of text transmitted by the on device database service into a format recognized by the embedded database.

At after the embedded database performs a database operation that corresponds to the SQL command the on device database service receives a result of the SQL command transmitted by the embedded database. According to an embodiment the on device database service receives a result of the SQL command transmitted by the embedded database using the bridge.

At the on device database service transmits the request to the application using the socket. Subsequently the flow returns to and the on device database service listens for a new connection request.

Certain embedded databases are concurrent embedded databases that can process two or more structured query language commands currently. An example of a concurrent embedded database is a Berkeley DB database. In an embodiment where an embedded database is a concurrent embedded database the on device database service can process two or more connection requests concurrently and thus the on device database service can process two or more database commands concurrently. As defined in this specification when two or more operations such as connections requests or database commands are performed concurrently at least one portion of an operation overlaps with at least one portion of the other operation or operations so that one operation does not block the other operation or operations from completing.

According to the embodiment while the on device database service performs the functionality illustrated in the on device database service can accept a second connection request to the on device database service from a second application using the socket. The on device database service can receive a second database command from the second application using the socket. Upon receiving the second database command the on device database service can translate the second database command into a second SQL command and transmit the second SQL command to the Berkeley DB database using the bridge. After the Berkeley DB database performs a database operation based on the second SQL command the on device database service receives a second result of the second SQL command transmitted by the Berkley DB database using the bridge and transmits the second result to the second application using the socket. According to the embodiment the transmitting of the SQL command and the result and the transmitting of the second SQL command and the second result are performed concurrently using a database library of the Berkley DB database. More specifically the Berkley DB database includes a database library which provides one or more interfaces for supporting deadlock free multiple reader single and for supporting multiple writer access to the database without violating the integrity of the data in the database.

By performing the transmitting of the SQL command and the result and the transmitting of the second SQL command and the second result concurrently the on device database service coordinates the database operations performed by the Berkeley DB database so that the database operations can be performed concurrently. In alternate embodiments the on device database service can accept any number of connection requests from any number of applications and thus can perform the transmitting of any number of SQL commands as well as the transmitting of any number of results concurrently.

Mobile device can be any type of mobile device that includes an on device database service not shown and an embedded database also not shown . According to embodiments of the invention mobile device can be a mobile computer a mobile phone a smartphone such as an iPhone Blackberry and smartphone executing an Android operating system a PDA a calculator a handheld game console a portable media player a digital still camera a digital video camera a pager a personal navigation device or another similar type of mobile device. In one embodiment of the invention mobile device is similar to mobile computing device of . In alternate embodiments of the invention mobile device can be a gateway a router a hub a digital video recorder a set top box an automobile entertainment system an automobile navigation system a game console a residential gateway a refrigerator a washing machine a factory automation device an assembly line device a factory floor monitoring device or another similar type of mobile device. In one alternate embodiment of the invention mobile device is similar to mobile communication device of .

Mobile sync server is a server that represents a middle tier between an embedded database of mobile device and enterprise database . Mobile sync server is configured to coordinate a synchronization process that synchronizes the embedded database of mobile device with the enterprise database and visa versa.

Network is a network that connects mobile sync server with enterprise database . Network can be any type of network that is known to one of skill in the relevant art. For example network can be a local access network LAN a wide access network WAN a personal area network PAN a home area network HAN a campus area network CAN a metropolitan area network MAN a global area network GAN a storage area network SAN a virtual private network VPN a wireless network a wireless LAN a HomePNA a power line communication network a G.hn network a Bluetooth network an optical fiber network an Ethernet network an active networking network a client server network a peer to peer network a bus network a star network a ring network a mesh network a star bus network a tree network a hierarchical topology network or any other similar type of computer network.

Enterprise database is an enterprise class database that resides on an external database server not shown . In this specification an enterprise class database is defined as a database configured to store a large amount of data such as a database configured to support a large organization i.e. an enterprise organization . Mobile sync server can connect to enterprise database using network . In an embodiment of the invention enterprise data is an Oracle database a product of Oracle Corporation.

According to the embodiment the on device database service of mobile device transmits a sync event to mobile sync server when the on device database service desires to synchronize the embedded database of mobile device with enterprise database and visa versa. A sync event is an event notification that notifies mobile sync server to begin a synchronization process. Upon receiving the sync event the mobile sync server synchronizes data in the embedded database of mobile device with data in the enterprise database. Mobile sync server synchronizes the data by transmitting modifications to the data in the embedded database of mobile device to enterprise database over network . Mobile sync server also synchronizes data in enterprise database with the data in the embedded database of mobile device . Mobile sync server synchronizes the data by transmitting modifications to the data in enterprise database to the embedded database of mobile device over network .

According to the embodiment mobile sync server resolves any conflict where both the embedded database of mobile device and enterprise database modify the same data based on a rule stored within mobile sync server . The rule identifies either the embedded database of mobile device or enterprise database as a priority database and indicated that in the scenario detailed above the priority database wins and the modification of the priority database is persisted in both databases while the modification of the other database is discarded. The rule can be based on a system defined default value or can be configured by a user or administration of mobile sync server .

At the mobile sync server synchronizes data in an embedded database of the mobile device with data in an enterprise database. The mobile sync server synchronizes the data by transmitting modifications to the data in an embedded database of the mobile device to an enterprise database over a network. More specifically the mobile sync server determines modifications made to the embedded database since the embedded database was last synchronized with the enterprise database and transmits the determined modifications to the enterprise database over the network in order to synchronize the embedded database of the mobile device with the enterprise database. In an embodiment the enterprise database is an Oracle database.

At the mobile sync server synchronizes the data in the enterprise database with the data in the embedded database of the mobile device. The mobile sync server synchronizes the data by transmitting modifications to the data in the enterprise database to the embedded database of the mobile device over the network. More specifically the mobile sync server determines modifications made to the enterprise database since the enterprise database was last synchronized with the embedded database of the mobile device and transmits the determined modifications to the embedded database over the network in order to synchronize the enterprise database with the embedded database of the mobile device.

Thus according to an embodiment of the invention an on device database service can be executed in a background of a mobile device. The on device database service can listen for and accept socket connections from applications. The applications can either reside on the same mobile device or a different mobile device. The on device database service handles SQL commands from the applications and coordinates the database operations to an embedded database that also resides on the mobile device. The embedded database is subsequently synched by a mobile server with an enterprise database that resides on a centralized server of a network.

Thus according to an embodiment an on device database service provides for concurrent access to an embedded database where multiple applications can access and update the embedded database. Furthermore according to an embodiment the use of the on device database service allows for faster access to the embedded database. In addition with the use of an on device database service an application does not need to include a native library for communicating with a database library of the embedded database due to the fact that the communication with the embedded database is decoupled from the application to the on device database service. Due to this decoupling only the on device database service loads a database library of the embedded database and links the database library with the on device database service. This avoids each application loading and linking a separate copy of the database library of the embedded database service. Thus this decoupling leads to a less memory intensive database system. Finally the handling of the database commands via a socket based connection to an on device database service allow allows for faster SQL commands to the embedded database using a compressed SQL query.

The features structures or characteristics of the invention described throughout this specification may be combined in any suitable manner in one or more embodiments. For example the usage of one embodiment some embodiments certain embodiment certain embodiments or other similar language throughout this specification refers to the fact that a particular feature structure or characteristic described in connection with the embodiment may be included in at least one embodiment of the present invention. Thus appearances of the phrases one embodiment some embodiments a certain embodiment certain embodiments or other similar language throughout this specification do not necessarily all refer to the same group of embodiments and the described features structures or characteristics may be combined in any suitable manner in one or more embodiments.

One having ordinary skill in the art will readily understand that the invention as discussed above may be practiced with steps in a different order and or with elements in configurations which are different than those which are disclosed. Therefore although the invention has been described based upon these preferred embodiments it would be apparent to those of skill in the art that certain modifications variations and alternative constructions would be apparent while remaining within the spirit and scope of the invention. In order to determine the metes and bounds of the invention therefore reference should be made to the appended claims.

