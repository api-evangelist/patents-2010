---

title: Dynamically determining and utilizing an application programming interface of an electronic device
abstract: A method of dynamically determining and utilizing an application programming interface within an electronic device is presented. In the method, a definition of an object is received from the application programming interface, wherein the definition describes at least a portion of the application programming interface. The object is then generated based on the definition, wherein the object includes data for controlling the electronic device. The object is transferred to the application programming interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09374441&OS=09374441&RS=09374441
owner: EchoStar Technologies L.L.C.
number: 09374441
owner_city: Englewood
owner_country: US
publication_date: 20101008
---
This application claims the benefit of U.S. Provisional Application No. 61 250 396 entitled Dynamically Determining and Utilizing an Application Programming Interface of an Electronic Device and filed Oct. 9 2009 which is hereby incorporated herein by reference in its entirety.

Many electronics equipment manufacturers develop and sell embedded electronic devices to a number of equipment providers each of which may desire to customize the devices according to their own requirements before offering the devices to their own customers. In just one example a television set top box manufacturer may develop a set top box for a number of satellite or cable television service providers. In turn each of the service providers may then deliver one or more of the set top boxes to each of their subscribers to allow the subscribers to receive the television programming the service provider supplies. Since some of the service providers may be mutual competitors each provider likely desires to customize the set top boxes it provides to distinguish its offerings from those of its competitors.

One prominent area in which a television service provider may customize its set top boxes is the user interface which may be the most recognizable characteristic discernable by a subscriber. With respect to a set top box the user interface may encompass the various menus and related information presented to a subscriber via a television display the set of commands available to the subscriber to control the operation of the set top box typically by way of a remote control device and the overall look and feel of how the user interacts with the set top box.

In many cases the set top box manufacturer maintains complete control over the firmware and software resident in the various set top boxes it develops. One reason for this control is that the application programming interface API between the user interface software and the remainder of the software employed in the set top box is often complex in nature and may undergo changes over time as the set top box design matures. As a result the manufacturer often develops the initial form of the user interface and incorporates any subsequent changes thereto based on requirements provided by the service provider. Thus the service provider possesses at most indirect control of the user interface while the manufacturer shoulders the burden of updating the user interface for each separate service provider purchasing the set top box as well as for each type or model of set top box produced.

The enclosed drawings and the following description depict specific embodiments of the invention to teach those skilled in the art how to make and use the best mode of the invention. For the purpose of teaching inventive principles some conventional aspects have been simplified or omitted. Those skilled in the art will appreciate variations of these embodiments that fall within the scope of the invention. Those skilled in the art will also appreciate that the features described below can be combined in various ways to form multiple embodiments of the invention. As a result the invention is not limited to the specific embodiments described below but only by the claims and their equivalents.

As a result of at least some embodiments of the method the specific requirements and capabilities of the electronic device that are embodied in the application programming interface may be determined at execution time thus allowing other software applications communicating with the application programming interface to adapt to a particular version of the application programming interface being utilized in the electronic device at that time. Therefore the software communicating with the application program interface need not be revised recompiled and reloaded for each change in the application programming interface. Similarly since different versions of the electronic device may incorporate at least slightly differing versions of the application programming interface a single version of the software communicating with the application programming interface may be employed in each of the various versions of the electronic device. Other advantages may be recognized from the various implementations of the invention discussed in greater detail below.

The processor may be any processor such as a microprocessor microcontroller or similar control circuitry configured to execute software firmware and the like collectively referred to as software herein stored in the data storage to perform one or more functions or operations expected of the device .

The data storage may be any data storage capable of storing digital data including an operating system one or more software applications and associated software and static data for the processor to access and execute. The data storage may also store variable data pointer information and the like utilized by the processor to execute the software. The data storage may include volatile data storage such as dynamic random access memory DRAM or static random access memory SRAM nonvolatile data storage such as flash memory magnetic disk drives and optical disk drives or combinations thereof.

As noted above the electronic device may further contain the communication interface and the user interface of in some implementations. The communication interface may be a WAN interface such as an interface to communicate via the Internet although other interfaces such as a LAN interface or a wireless network adapter may be employed in other arrangements. Specific examples of the communication interface include but are not limited to an Ethernet interface a cable or digital subscriber line DSL interface a Wi Fi interface a cellular communication network interface a wireless infrared or other optical interface and a wireless radio frequency RF interface.

The user interface of the electronic device is configured to receive commands from a user to control the device . The user interface may include or be coupled with any number of input and or output components to allow the user to interact with the electronic device such as a keyboard keypad mouse joystick touchpad visual monitor video display and or audio speakers. In some cases the user interface may incorporate a remote control interface so that the user need not be positioned within reach of the device to provide input thereto.

In specific examples described below the electronic device is a media content receiver such as a television set top box STB which may be a satellite cable or terrestrial over the air set top box. Typically the set top box receives multiple channels of television programming from at least one audio video source such as a satellite in geosynchronous orbit a coaxial cable head end or a terrestrial antenna. However virtually any type of processor driven electronic device including embedded special purpose devices incorporating software implementing an identifiable application programming interface API may serve as the electronic device in other embodiments.

In addition to the components depicted in the set top box may also include circuitry typically associated with a set top box such as an antenna or cable input to receive the multiple channels of television programming one or more tuners for selecting one of the channels and decoding and or decrypting circuitry and output circuitry for presenting the audio and or visual aspects of the selected channel to the user. Also the set top box may include a digital video recorder DVR unit for recording selected channels of programming for subsequent viewing. However such circuitry is not illustrated in to simplify and focus the following discussion.

More specifically the EPG application A may receive electronic program guide EPG information such as the identity of programs and the particular channel and time at which they may be viewed and provide access to that information. The DVR application B may handle any recording and or retrieval of programs facilitated by a DVR incorporated in the set top box . The service list component C may maintain information on one or more services that may be provided or performed by the set top box . Finally the event component D may detect and transfer events generated within the set top box that require some level of attention or processing.

Also included in the software architecture are user interface software applications or components to be used in conjunction with the user interface of the set top box . As shown the applications or components include a guide component A for accessing and presenting the electronic program guide EPG of the set top box to the user a DVR component B for allowing the user to control the DVR included in the set top box and an information banner component C for presenting information such as the current channel number and call letters the title of the program and so on to the user over a television coupled with the set top box . Generally each of these components is required to access one or more of the STB applications via the API to control the operation of the set top box obtain information concerning programming being received and perform other tasks.

In the specific embodiment of the user interface components are implemented as a web browser application operating within a web browser . One reason for implementing the user interface components in such a manner is that many browsers available today such as Internet Explorer Safari Firefox and others provide support for the use of the JSON JavaScript Object Notation and AJAX Asynchronous JavaScript And XML standards employed herein as is discussed in detail below. In some implementations the browser application is written in JavaScript or Jscript.

Communication software residing between the web browser application and the API facilitates transfer of information therebetween. In the specific example of the components of the communication software include a web client a JSON client an AJAX component an HTTP HyperText Transfer Protocol server and a JSON server . Two or more of these components may be combined to form a single component in other implementations. Each of these components are described in greater detail below.

Generally each of the STB components or applications responds to commands returns responses and performs other duties associated with its area of responsibility via the API . Depending on the specific hardware and software capabilities of the particular model of set top box involved the details of the API such as the number or type of variables received as input or produced as output may change for each model of STB . To determine the characteristics of the API for a particular set top box the communication software helps determine specific details of the API at runtime and thereafter facilitates the use of the API by the user interface software .

To this end as shown in the JSON server in response to receiving an initialization command e.g. by way of a call to a function JS Init may thereafter receive a definition of one or more software objects wherein the definition specifies the API as it pertains to each of the STB applications . In some embodiments this definition may include the identity of various function calls to which the applications answer message formats particular types of data employed as input and output and the like.

As shown in the example of this definition is registered with the JSON server e.g. via a call to a function JS Register by each of the EPG component A operation the DVR component B operation and the service list component C operation .

Generally a software object is a collection of data items possibly associated with functions or other methods capable of manipulating the data items. In the specific case of the JSON server the received definitions are embodied as one or more JSON schemas which are definitions of JSON data structures or objects based on the JSON standardized data format. Essentially a JSON schema provides a contract defining what types and forms of data are required for one of more of the applications in what ways that data may be modified or manipulated and the like. In other words the schema exposes or defines a particular portion of the API to be used by the browser application . As discussed more fully below the browser application will then employ the resulting objects associated with the schemas received via the communication software to initiate commands and other communications with the set top box applications via the API .

As shown in in one embodiment the JSON client may receive an initialization command from the web browser application e.g. via a call to a function JC Init . In response the JSON client may receive a definition or JSON schema of the API as associated with the event component D e.g. by way of a call to a function JC Register operation . In this case the JSON client is the recipient of the schema instead of the JSON server since the event application D is responsible for initiating a communication with the client via the communications software in response to an event occurring within the set top box .

After receiving the schemas the JSON client and the JSON server may exchange the schemas therebetween so that the corresponding client server has access to the schemas defining the API . In the illustrated embodiment of the JSON client and the JSON server perform this exchange or transfer via the AJAX component and the HTTP server depicted therein. Generally the AJAX component operates as a client side module allowing asynchronous retrieval of data from the HTTP server typically using the XmlHttpRequest standard for sending HTTP requests directly to the HTTP server from a scripting language such as JavaScript as well as loading any response data received back into the scripting language. The AJAX component thus facilitates efficient communications between the JSON client and the JSON server . The HTTP server facilitates the transfer of data such as the JSON objects mentioned above to and from the API in a manner compatible with the web browser .

As is often done in other web communication contexts communications between the AJAX component and the HTTP server is performed via a sockets connection . As is described in the context of other embodiments below such a connection may facilitate communication between two processes or entities lying within the same electronic device or located in separate electronic devices.

As shown in the particular example of in order to exchange the schemas the JSON client may request a connection to the JSON server e.g. via a Connect function call operation . In response to the connection request the JSON server issues a response e.g. via a Response function call returning the JSON schemas it has received to the JSON client operation . Similarly in one embodiment the JSON client may receive a corresponding connection request via a call to the Connect function and respond via a Response function call by returning schemas it has received.

Once the JSON client and possibly the JSON server receives the schemas from the corresponding JSON device the JSON schemas may be used to generate JSON objects based on the schemas for the purpose of initiating commands transferring data and the like. provides an example of the web browser application issuing a command to the service list component C using the exposed specifics of the API as represented in one or more of the schemas received by the JSON client . In the example the web application causes the instantiation of a particular object associated with the service list component C via a call to a function new GetService operation .

In response to the request for the object the web client may then provide the new object based on a schema received at the JSON client to the web application operation . As indicated in the web client also facilitates the transfer of JSON objects between the web application and the JSON client . As a result the web client may provide information to the web application concerning the objects and hence the functionality that may be provided by the API . In another implementation the web client or its functionality may reside within the JSON client .

Once the web application acquires access to the JSON object referred to as the GetService object in associated with retrieving a service from the service list component C the web application updates or fills in the variables and other fields of the JSON object required to provide the necessary input to initiate the desired operation or command at the service list component C operation . Thereafter the web application employs a send function call to transfer the updated GetService object via the web client to the JSON client operations and . In turn the JSON client transfers the GetService object via another send function call to the JSON server operation . Having received the descriptions of the various aspects of the API the JSON server is capable of determining the intended destination of the received GetService object i.e. the service list component C . As a result the JSON server submits the GetService object to the service list component C via a GetService function call operation . In one implementation the GetService function call is a callback function specified in the GetService object executed by the service list component C to process the incoming command or request.

In the GetService function the service list component C performs the requested actions noted in the GetService object. In many circumstances these actions result in the generation of response data intended for the source of the command i.e. the web application . The service list component C may enter that response data into the same GetService object it received and send the object back to the JSON server operation via a send function call . The JSON server then forwards the GetService object to the JSON client operation which in turn passes the object to the web client operation . The web client based on its knowledge of the GetService object initiates processing of the response data in the object at the browser application by initiating another callback function specified in the GetService object GetService.callback providing the object itself as input operation .

Oppositely objects may be received at the JSON server and delivered upon request to one of the STB applications for modification and eventual transfer to the browser application for processing. For example an event detected or captured at the event component D of may cause that component D to initiate a new object based on schema registered by the browser application as shown in update the object and transfer it to the browser application for processing. The browser application may then populate the object with any associated response data and return the object via the JSON client and the JSON server to the event application D.

The example illustrated in may be considered an example of a synchronous command in which the requested command is complete prior to the service list component C returning the associated response data in the GetService object. In other implementations asynchronous commands may be executed in which the initial service list component C response indicates that the command was received. Once the command is actually completed the service list component C may then return the GetService object to the web application this time with response data associated with the actual execution and completion of the command.

Since the web browser of is employed as the software platform for the web application to provide user interface functionality for the set top box and a typical HTTP based sockets connection is employed to communicatively couple the browser application with the API the software running within the web browser including the web application the web client the JSON client and the AJAX module need not reside and execute within the set top box . In other words the browser and associated software may be deployed on an electronic device separate from the set top box shown in . Under that scenario the sockets connection may be employed across an external communication link such as an Ethernet connection a WiFi connection an Internet connection and the like. Thus the user interface provided by the web application may be implemented on a device physically remote from the set top box similar to what is currently available via place shifting devices such as the Slingbox by Sling Media Inc but without requiring a separate place shifting device connected to the set top box . Such a configuration may result in a remote network based user interface for the set top box . On the set top box end of the connection the set top box may employ the communication interface of to couple the set top box to the device containing the web application .

In summary at least some embodiments as described herein for determining or exposing and subsequently utilizing an embedded application programming interface in a dynamic manner at runtime provide several benefits. For example by being able to adapt to any of multiple versions of the application programming interface a single version of the web application may be employed across a number of versions of the same set top box as well as different models of the set top box. Such a web application may be developed separately from the software residing in the set top box given the ubiquitous nature of web browser development environments and tools currently available. Further given the flexible nature of web browser functionality across different web browsers and associated hardware platforms reworking of the web application for different computing environments is likely unnecessary. Additionally since the capabilities of the application programming interface are determined at runtime synchronization problems between the capability of the web application and the application programming interface are virtually eliminated. Moreover given the object oriented nature of the embodiments discussed above the usual advantages associated with object oriented programming such as the explicit association of functions with the data to be operated upon apply in the implementations described above.

While several embodiments of the invention have been discussed herein other implementations encompassed by the scope of the invention are possible. For example while the above embodiments focus on implementations involving a television set top box virtually any electronic device employing a processor and software exhibiting an application programming interface may benefit from the principles discussed herein. Further while the web application discussed above provides functionality for a user interface any other type of functionality useful in the operation of the electronic device may be programmed in the web application as described earlier. Additionally aspects of one embodiment disclosed herein may be combined with those of alternative embodiments to create further implementations of the present invention. Thus while the present invention has been described in the context of specific embodiments such descriptions are provided for illustration and not limitation. Accordingly the proper scope of the present invention is delimited only by the following claims and their equivalents.

