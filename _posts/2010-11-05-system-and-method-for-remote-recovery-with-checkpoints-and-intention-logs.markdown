---

title: System and method for remote recovery with checkpoints and intention logs
abstract: Accurate recovery of a primary server at a recovery server is accomplished with reduced network overhead by maintaining at the recovery server checkpoints taken over time of the primary server and an intention log of logical transactions pending and complete by the primary server. The recovery server is brought to the operational state of the primary server as of failure at the primary server by recovering the most recent checkpoint and then executing the transactions indicated by the intention log as received but not complete as of the time that the checkpoint was taken.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08689046&OS=08689046&RS=08689046
owner: International Business Machines Corporation
number: 08689046
owner_city: Armonk
owner_country: US
publication_date: 20101105
---
The present invention relates in general to the field of computer system backup and more particularly to a system and method for remote recovery with checkpoints and intention logs.

Business enterprises often maintain disaster recovery computing resources that can take over when primary computing resources fail such as an application that runs on a server to support multiple clients in performing critical tasks. Although disaster recovery resources can be co located with primary resources businesses often use remote disaster recovery resources to improve disaster recovery reliability. For instance co located primary and disaster recovery resources will both fail if power to their common location is interrupted while simultaneous power failures at primary and remote locations are unlikely.

Remote disaster recovery of a server application workload often involves a hot or cold start of the application workload at a server of the remote location and a pairing with an inexact mirror of the application workload data available at the remote location. Typically the copy of application workload data available at the remote location is an inexact mirror because even synchronous mirroring of the application workload data to the remote location will sometimes result in incomplete copies of the application workload data at the remote location if a failure occurs before completion of processing of a mirror update of currently changing data. Thus a hot or cold start of a workload at a remote location means that the application at the remote location must include code that understands and can recover from an inexact mirror such as by starting the application from a known data recovery rendezvous point. The rendezvous point allows the application at the remote recovery location to bring the application workload data to a consistent state and to proceed forward with new processing after the recovery. A disadvantage of this approach is that the remote recovery software is typically complex and application specific.

An alternative to remote recovery with an inexact mirror is the use of hypervisor checkpointed workload instances as a form of hot start of an application. By pairing a workload checkpoint with a checkpoint of the workload data storage at the same instant the need for a data recovery rendezvous point is removed. This type of checkpointing is used to save a workload and its data for a subsequent restart such as for end of year compliance but is not practical for use in a remote disaster recovery situation because communicating a checkpoint of a workload and its data through a network to a remote location is resource and time prohibitive. An example that illustrates this difficulty in a transaction sensitive environment is a set of ATM clients of a bank that request transactions to a database server. In the example a database server that handles ATM transactions is checkpointed along with its data at time T. The checkpoint is mirrored to a remote disaster recovery site with the mirror accomplished at time T. For purposes of the example checkpoints continue at odd intervals and mirroring continues at even intervals although these operations could be interleaved at different intervals in other example embodiments. If an ATM client receives confirmation of an intermediate transaction to the database between a checkpoint and a mirror i.e. between T and T and a failure occurs after the checkpoint but before the mirroring the disaster recovery site will not have the confirmed transaction as a part of its hot start because the mirror is incomplete. Thus as the result of the failure at a primary server a bank customer who made a deposit at the ATM will not get credit for the deposit. Most solutions that attempt to avoid such lost transactions are complex and very application specific.

Therefore a need has arisen for a system and method which provides a generally applicable solution for disaster recovery that will not miss intermediate transactions.

In accordance with the present invention a system and method are provided which substantially reduce the disadvantages and problems associated with previous methods and systems for disaster recovery of a failed computer system. An intention log tracks transactions started and completed at a primary computer system relative to checkpoints taken of the primary computer system. The primary computer system is recovered at a recovery computer system by restoring the checkpoint and then executing transactions not completed by the primary computer system at the time of the checkpoint used for the recovery.

More specifically a primary server receives ATM transactions and executes the transactions for ATM clients. A checkpoint of the primary server is taken at periodic intervals and then mirrored to a recovery server. A checkpoint taken time is logged to an intention log for the start of each checkpoint and a checkpoint mirroring complete time is logged to the intention log for the completion of the mirroring operation at the recovery server. For each transaction a transaction start time is logged to the intention log and a transaction complete time is logged to the intention log. Mirroring of intention log entries and checkpoints may be done asynchronously as background operations to minimize the impact of network resources. Transaction complete times are sent synchronously so that transactions reported to clients as complete are reflected as complete in the primary and recovery intention logs before the clients receive the results of the transaction. Upon detection of a failure of the primary server recovery is made at the network location of the recovery server by initiating the most recently completed checkpoint as reflected by the intention log and then executing all transactions in the intention log that are not complete at the time the checkpoint was taken.

The present invention provides a number of important technical advantages. One example of an important technical advantage is that logical operations that must be synchronously reflected at both a primary and a recovery network location are small relative in size to checkpointed workload and data. The reduced size reduces overhead at both the primary and recovery network locations as well as network traffic. In addition the continuum of checkpoints of the workload and data at the primary and recovery network locations may occur with less frequency such as many minutes between each checkpoint and the mirroring of the checkpoints can be asynchronous. The solution at a system level provides an adaptable disaster recovery solution to any application with minimal programming support while still allowing individual optimization in specific areas of interest such as by using a solid state drive for the intention log to enhance reliability.

An application level programmable intention log with an interlocked workload and data checkpoint system provides disaster recovery of computer system with reduced network traffic overhead. The intention log is an operating system provided service that records logical inputs at a primary computer system and is mirrored synchronously to two or more recovery network locations for high reliability in the event of multiple failures. An application programming interface of an application executing on the primary computer system logs logical operations at the intention log such as transaction requests by an automated teller machine to deposit or withdraw money and reflects the intention log entries to a remote recovery computer system. When the intent log is paired with temporal knowledge of workload and data checkpoints then recovery from a failure is possible at the recovery network location by reinitiating logical operations not completed as of the most recent checkpoint recovery state. Replay of the incomplete logical operations at the disaster recovery system brings the recovery computer system to the same state as the failed primary computer without missing transactions and without complicated programming at the application level.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon. Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device. Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks. The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Referring now to a block diagram depicts a system for remote disaster recovery of a primary server at recovery server using a checkpoint and an intention log . Recovery server recovers the operating state of primary server in the event of a failure of primary server by maintaining an independent but coordinated intention log that allows a replay of transactions of primary server that were not complete at the time of a most recent checkpoint created for primary server. Primary server handles transaction requests sent from clients through a network such as automated teller machine ATM requests to deposit and withdraw funds. Primary server decodes the transaction requests and then executes logical operations to complete the transaction request such as posting a deposit or withdraw to client s account and then authorizing the requesting ATM client to accept or dispense funds. For example primary server receives a transaction request X from a client to be handled by an application running on primary server . An application programming interface API of application writes a start transaction for X to intention log . The start transaction X is also written to intention log of recovery server such as by synchronously or asynchronously mirror the start transaction request to recovery server through network . For improved data security intention logs can be maintained in non volatile memory such as a solid state drive at primary server and recovery server . Once primary server s application completes transaction X API writes a transaction complete entry for transaction X at intention log of primary server and mirrors the transaction complete entry to intention log of recovery server . Application does not respond to client until the transaction complete is written to both primary server and recovery server intention logs such as with a synchronous write to each intention log by API .

Concurrent with application recording transactions to intention logs checkpoint module takes checkpoints of primary server such as hypervisor workload and data checkpoints that will allow a recovery of the operating state of primary server as of the time of the checkpoint . Checkpoints may be taken at predetermined intervals at periodic intervals or based on other factors such as the number of transactions handled by primary server . In the example embodiment a simultaneous checkpoint of workload and data of primary server is taken at time T and a checkpoint taken entry C is made at intention log of primary server and mirrored to intention log of recovery server . After entry of the checkpoint taken to intention logs checkpoint module starts an asynchronous mirror of checkpoint C to recovery server . By performing the checkpoint mirror as a background operation checkpoint module avoids bottlenecks from overuse of network . When mirror of checkpoint C is complete a checkpoint complete entry is made to intention logs with the time of the completion of mirroring T. Storing the checkpoint at recovery server allows recovery of the operating state of primary server at recovery server as of the time T at which the checkpoint was taken.

In order to accurately recover primary server to recovery server as of a failure of primary system recovery server initiates the checkpoint and then replays transactions that would have been performed by primary server after the time T at which the most recent completely mirrored checkpoint was taken. Upon notification of a failure of primary server a recovery module executing on recovery server restores the operating state from checkpoint as of time T and then executes transactions listed in the intention log as not complete as of time T. Transactions that are not complete as of the time a checkpoint is taken may be identified by a comparison of complete times tracked in intention log or by the order in which transactions and checkpoints are interleaved in intention log .

In the example embodiment at time T primary server receives a transaction request from a client and so API writes a start transaction X to intention log of primary server which is asynchronously mirrored to intention log of recovery server . Application executes the transaction and API synchronously writes a transaction complete to intention log of primary server and recovery server . At this point application has performed the transaction and responded to client the intention log of primary server and recovery server each reflect completion of the transaction however the checkpoint stored at recovery server does not reflect any result of transaction X because the most recent completed checkpoint was taken at time T. If at time T primary server fails recovery module initiates recovery of the operating state of primary server at time T to run on recovery server . Recovery module references intention log to identify checkpoint C as the checkpoint having the most recent complete time T and applies checkpoint C to execute application on recovery server with the checkpoint workload and data associated with time T the time when the checkpoint was taken. Recovery module then references intention log to identify transactions that were not complete as of time T the time at which checkpoint C was taken. In the example embodiment transaction X is identified as not complete as of time T. Accordingly recovery module has application execute transaction X with the workload and data restored by reference to checkpoint C to bring recovery server to the operating state at which primary server failed. Recovery server is then in a condition to take over for primary server . Note that recovery server may execute transactions received by primary server and identified in intention log whether or not completed at the time of failure of primary server . Because a transaction received at primary server is not executed until the transaction start is mirrored to intention log of recovery server all transactions will be accomplished that are acknowledged to a client and unacknowledged client requests can be repeated to recovery server .

Referring now to a flow diagram depicts a process for remote recovery of a primary server with checkpoints and an intention log. The process begins at step with a checkpoint of workload and data at a primary computing device. A time is logged in an intention log for when the checkpoint is taken and a completion time is logged in the intention log for when mirroring of the checkpoint to a recovery computing device is complete. Mirroring of the checkpoint the checkpoint taken time and the checkpoint complete time may be performed asynchronously as a background operation to minimize the impact on system performance. At step a transaction logical input is received at the primary computing device for execution such as an ATM deposit or withdrawal request. The transaction start time is logged at step in an intention log of the primary computing device and the recovery computing device and at step the transaction is executed. At step the transaction is completed and the completion time is logged in the intention log of the primary computing device and the recovery computing device. The primary computing device does not report the transaction as complete to a requesting client device until the transaction is logged as complete at the recovery computing device so that all completed transactions are tracked at the intention log of the recovery computing device. At step a determination is made of whether a predetermined failure condition is met such as a failure of the computing device and if not the process continues to receive and perform transactions. As transactions are performed checkpoints of the primary computing device are taken based upon predetermined conditions such as a time interval since the last checkpoint. If a checkpoint is due the process continues to step to initiate the checkpoint. If the checkpoint is not due the process continues to handle transactions. Note that the interval for the checkpoint may occur when some transactions are still executing and thus not complete.

A failure of the primary computing device may be detected at any point in the process from step to step . Once a failure of the primary computing device is detected the process continues at step with initiation of the most recently completed checkpoint logged in the intention log to bring the recovery computing device to the workload and data operating state of the primary computing device at the time the checkpoint was taken. At step the recovery computing device retrieves transactions from the intention log that were not complete at the time the most recent checkpoint was taken and executes those transactions to bring the recovery computing device to the operating state of the primary computing device at failure. The recovery computing device may execute transactions that were completed by the computing device and thus reported to the client no further action need be taken for such transactions. The recovery computing device may execute transactions that were not complete at the time of failure of the primary computing device the results of such transactions are reported to the clients. The recovery computing device then takes over for subsequent transactions sent from clients.

Although the present invention has been described in detail it should be understood that various changes substitutions and alterations can be made hereto without departing from the spirit and scope of the invention as defined by the appended claims.

