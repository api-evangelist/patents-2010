---

title: Processing method for control apparatus involves controlling job subsequent to proceeding job based on execution result acquired by executing the proceeding job
abstract: A control apparatus controls execution of a job subsequent to a preceding job based on the results of executing the preceding job when executing a plurality of jobs cooperated as job cooperation. The control apparatus holds an execution result obtained by executing the preceding job; acquires the held execution result; and controls the job subsequent to the preceding job based on the acquired execution result.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09459914&OS=09459914&RS=09459914
owner: CANON KABUSHIKI KAISHA
number: 09459914
owner_city: Tokyo
owner_country: JP
publication_date: 20101220
---
The present invention relates to a control apparatus and a processing method therefor where the control apparatus controls execution of a job subsequent to a preceding job based on the results of executing the preceding job when executing a plurality of jobs cooperated as job cooperation.

Conventional job management methods and job execution methods which apply details of the results of executing a preceding job to a subsequent job include pipeline processing used by a UNIX registered trademark shell and DOS commands. With pipeline processing job execution result details outputted from a preceding job are connected to the input of a subsequent job.

Also it has been proposed to apply the idea of pipeline processing to jobs executed by multiple computers on a network e.g. Japanese Patent Laid Open No. 2004 102449 .

However the conventional job management method which connects the output of the preceding job to the input of the subsequent job using pipeline processing has the following problems. Specifically the conventional job management method cannot be applied to the determination of a job to be executed next based on an execution result such as failure or success of the preceding job. Also the execution result details of a preceding job whose execution has already been finished cannot be applied to a subsequent job.

The present invention provides a method and apparatus which can apply the execution result details of a job which has already been executed to a subsequent job.

According to one aspect of the present invention there is provided a processing method for a control apparatus which controls execution of a job subsequent to a preceding job based on results of executing the preceding job when executing a plurality of jobs cooperated as job cooperation the method comprising holding an execution result obtained by executing the preceding job acquiring the execution result held by the holding step and controlling the job subsequent to the preceding job based on the execution result acquired by the acquiring step.

Further features of the present invention will become apparent from the following description of exemplary embodiments with reference to the attached drawings .

Embodiments of the present invention will be described in detail below with reference to the drawings. First cooperative device job management will be described as an embodiment of cloud computing which allows computer processing by a computer on a network to be used as a service via the network.

A REST interface receives a REST Web service call and calls functions corresponding to the job A processing unit or job B processing unit . REST is a technique for specifying a resource using a URI without using SOAP and for acquiring or setting information using HTTP or HTTPS. An HTTP server receives an HTTP or HTTPS request and as required calls the REST interface .

SOAP has high expandability but is accordingly complex to develop and requires time to verify and guarantee operation. On the other hand REST gives a unique URI to each resource using four HTTP methods GET POST PUT and DELETE. This makes it necessary to use as many different URIs as there are resources but REST is easier to develop and check for operation than SOAP. Also whereas typical HTTP communications need to keep a connection established while waiting for a response from a process the use of REST eliminates this need.

That is REST allows a state of asynchronous processing to be treated as a resource which can then be created. Thus a response to a process request can be produced at any time asynchronously without synchronizing the timing of the response with the process request. That is asynchronous processing can be performed relatively easily by describing a resource using REST. The present invention features asynchronous processing using REST for cooperative device job management and cloud computing workflow.

The external storage device includes a hard disk HD flexible disk FD and the like. The external storage device stores various applications database data and user files where the applications include a boot program operating system authentication sever and authentication client.

The system bus is connected with a keyboard controller KBDC used to output input information from a keyboard KBD or a pointing device not shown such as a mouse to the CPU . Also the system bus is connected with a video controller VC and disk controller DKC where the video controller controls display on a display device such as a CRT or liquid crystal panel and the disk controller controls access to the external storage device . Furthermore the system bus is connected with a communications controller COMM I F which controls connection with a local area network LAN .

Network device management software runs on the host computers and . A Web browser used to operate the network device management software runs on the host computer . A network administrator or other user of the network device management software uses the network device management software running on the host computers and via the Web browser running on the host computer . Also the network device management software monitors the digital multifunction peripherals and printing devices connected to the LAN and makes settings for them by communicating with them.

A job starting unit in the REST interface is a module which interprets a REST Web service for job startup received via the HTTP server and starts the job. An execution result acquisition unit is a module which interprets a REST Web service for acquisition of job execution result details and acquires the job execution result details.

The job scheduler periodically monitors schedule information stored in the database and starts a registered job which falls due to be executed. The registered job is started either by a Web server via HTTP or by the job starting unit via the REST interface . In so doing a registered job ID is stored in a URI parameter or the text of an HTTP request. An example of a URI for job startup using a REST Web service is shown below.

https 192.168.0.12 NDM ExecuteJob 10 where 192.168.0.12 is the IP address of the host on which the network device management software runs 10 is the registered job ID of the job to be started NDM is a basic path of the network device management software and ExecuteJob is a path of the REST Web service used to give an instruction to execute the job.

However with this alone a third party can easily create an HTTP request for job startup. Thus a mechanism has been introduced to guarantee that a given request has been issued by the network device management software and that the content has not been falsified. Furthermore a URI parameter is added as required.

A job start request is passed from the HTTP server to the REST interface . Upon determining that the request is a job start request the REST interface transfers processing to the job starting unit . Consequently the job starting unit initiates a job starting process according to the request. Also the job starting unit returns an executed job ID of the registered job after the execution to the caller and the REST interface returns value of the executed job ID as an HTTP response to the sender of the HTTP request.

Next UML unified modeling language classes of a part related to a job will be described with reference to . A registered job information class holds common items of registered jobs held by the network device management software and implements processing of registered jobs. The common items of registered jobs are stored in the database . The common items include a registered job ID which uniquely identifies a registered job a job name given to the job by the user schedule information which specifies execution date time of the job job class information see about a process class which actually processes the job.

The process class is generated dynamically when a job class creation method of the registered job information class is called. The schedule information can be specified in the form of date time such as 8 30 AM on Oct. 13 2009 or periodic execution such as 10 20 PM every Friday. On the other hand jobs executed indirectly by the job cooperation processing unit do not have schedule information in some cases. The registered job information class further includes a method for executing the job represented by the registered job ID.

A registered job detail information class holds detailed information about a registered job contained for example in the job A processing unit and actually executes the job. The registered job detail information class is prepared individually by a provider of each job. For example different registered job detail information classes are implemented for job A and job B. The registered job detail information class holds for example a registered job ID and detailed information about the job associated with the registered job ID. The detailed information about a job contains for example a list of identifiers which uniquely identify network devices handled by the job and a list of settings made to each of the network devices. The information is stored in the database . Furthermore a job execution method is called to execute the job according to the detailed information. In this example settings are delivered to the respective network devices in the list.

An executed job information class which implements processing of executed jobs holds information concerning already executed jobs and common to different pieces of network device management software. The information is stored in the database . The stored information contains the registered job ID of the executed job the executed job ID which uniquely identifies the executed job the date time the job was executed and execution results of the job. The executed job information class also implements a method for acquiring execution result details of the executed job represented by the executed job ID.

An executed job detail information class holds execution result details of an executed job contained for example in the job A processing unit and returns the execution result details. The executed job detail information class is prepared individually by a provider of each job. For example different executed job detail information classes are implemented for job A and job B. The executed job detail information class holds for example an executed job ID and detailed information of the executed job where the executed job ID uniquely identifies the executed job. The execution result details of the executed job includes for example a list of devices set successfully a list of devices set unsuccessfully causes of the successes failures and so on. The execution result details are stored in the database .

Also a result acquisition method defined by the JobIF interface class returns the execution result details of the job having the executed job ID specified by an argument in XML format. Each method creates instances of the registered job detail information class and executed job detail information class and transfer processing to these classes.

Next in S the job starting unit instructs the created registered job information class to execute the job. In S based on the information concerning the class which actually processes the job and contained in the registered job information class the registered job information class creates a class which implements a JobIF interface class in order to execute the job having the registered job ID. In this example since the job represented by the executed job ID is a job A the registered job information class generates a job A class .

After generating the job A class in S the registered job information class calls the job execution method of the JobIF interface implemented by the created job A class . Upon receiving the job execution call in S the job A class creates a registered job detail information class which implements job execution. In S the created registered job detail information class acquires registered job detail information from the database . Then in S the job A class calls the job execution method of the generated registered job detail information class and thereby starts the specified registered job.

The above is the process flow which takes place from the time when the REST interface receives an HTTP request for job execution to the time when the job is actually executed. Incidentally error handling is omitted in the sequence diagram illustrated above.

https 192.168.0.12 NDM JobResult 38 where 192.168.0.12 is the IP address of the host computer on which the network device management software runs 38 is the executed job ID of the executed job whose execution result details are to be acquired NDM is a basic path of the network device management software and JobResult is a path of the REST Web service used to give an instruction to acquire job execution result details. Upon receiving the HTTP request the HTTP server transfers processing to the REST interface . The REST interface checks the URI path of the HTTP request. If the HTTP request specifies job execution result details the REST interface transfers processing to the execution result acquisition unit .

First in S the execution result acquisition unit analyzes a URI and an HTTP request and acquires an appropriate executed job ID. In this case the executed job ID is 38. Next in S the execution result acquisition unit creates an executed job information class having the acquired executed job ID. After that in S creation unit of the executed job information class acquires common information about the executed job related to the specified executed job ID from the database . The common information includes the registered job ID related to the executed job the date time the job was executed and execution results of the job.

In S the execution result acquisition unit calls an execution result acquisition method of the created executed job information class . In the class creation step of S the executed job information class creates a registered job information class related to the acquired registered job ID the created registered job information class is not shown . In S the executed job information class calls the job class creation method of the created registered job information class and thereby creates a job A class which implements the JobIF interface related to the specified executed job.

Next in S the executed job information class calls the result acquisition method of the JobIF interface implemented by the created job A class . In S the called result acquisition method of the job A class creates an executed job detail information class related to the specified executed job ID. Upon creation the executed job detail information class acquires in S the job execution result details related to the assigned executed job ID from the database .

In S the job A class calls an execution result detail acquisition method of the created executed job detail information class . The executed job detail information class returns execution result details as a character string in XML format to the execution result detail acquisition method. The returned XML character string of the execution result details is returned as it is to the executed job information class and the execution result acquisition unit . Then the execution result acquisition unit returns the execution result details to the sender of the HTTP request.

The above is the process flow which takes place from the time when the REST interface receives an HTTP request for acquisition of job execution result details to the time when the job execution result details is actually returned. Incidentally error handling is omitted in the sequence diagram illustrated above.

Specifically the Id elements in the XML path TaskResult SucceededDevices Device indicate the identifiers of the successful devices. On the other hand the Id element in the XML path TaskResult FailedDevices Device indicates the identifier of the unsuccessful device.

Besides the Id elements any XML element can be added to the execution result detail acquisition method for each individual job. In this example an IPAddress has been added to a TaskInformation and Device node.

Now an example of an UI used to define an execution method for the job cooperation processing unit to execute multiple jobs will be described with reference to . is a flowchart showing processing of two jobs executed via the exemplary UI shown in . In S the job cooperation processing unit executes an address book backup job. Next in S job execution results are checked. If it is determined that processing has ended normally or partially processing with respect to part of devices has succeeded and processing with respect to the rest of the devices has failed the flow goes to S to execute an address book setting job for a next address book. In the address book setting job an address book setting process is performed only for the devices for which the preceding job i.e. the address book backup job has been successful. On the other hand if it is determined in S that processing has ended abnormally or canceled the cooperative job processing is terminated.

The address book as referred to herein contains for example telephone numbers and e mail addresses stored in the digital multifunction peripherals where the telephone numbers are used for facsimile transmission and the e mail addresses are used to e mail scanned images. It is assumed that the address book in the digital multifunction peripheral is readable and writable from hosts on the network. In this example the address book backup and address book setting are jobs executed for example by the job A processing unit or job B processing unit .

If an item execute the next job regardless of execution results has been selected as an execution condition for the next job on the UI shown in the job cooperation processing unit selects job regardless of the execution result of job . Also if an item device irrelevant to the present job has been selected as a target of the next job the job cooperation processing unit instructs the job specified as job to select a target device defined independently by job as a target of the job.

When a press of an add the job button is detected a job setting UI is newly inserted after the job for which the button is provided. In this example a job setting UI for job is added after job .

 Target device specifies a device targeted for processing in the job. Available values are J indicating the device specified by the registered job S indicating the device successfully processed by the job represented by the job number of the target device F indicating the device unsuccessfully processed by the job and A indicating all the devices processed by the job. One of these values can be specified for each job. In this example the target device of the job with a job number of 1 is the device specified by the registered job while the target device of the jobs with a job number of 2 or 3 is the device successfully processed by the job with a job number of 1.

In S the job cooperation processing unit acquires data job cooperation definition data which defines specified job cooperation from the database . Next in S the job cooperation processing unit gives an instruction to execute the first job in the acquired job cooperation definition data. In this example the job to be executed first is a firmware delivery job with a registered job ID of 23. The job cooperation processing unit calls for example the following URI and thereby gives an instruction to execute the job.

In response to the call the job starting unit starts the specified registered job and returns the executed job ID which uniquely identifies the executed job to the caller. Consequently the job cooperation processing unit receives the executed job ID. In S the job cooperation processing unit periodically acquires the executed job information class related to the received executed job ID from the database to detect termination of the job execution. When termination of the job execution is confirmed the job cooperation processing unit checks the job cooperation definition data in S. If there is no next job the job cooperation processing unit terminates the job cooperation process.

If there is a next job the job cooperation processing unit compares the execution result of the job with the execution condition of the next job in the job cooperation definition data in S. If it is found that the execution result of the job does not satisfy the execution condition of the next job the job cooperation processing unit terminates the job cooperation process.

On the other hand if the execution result satisfies the execution condition of the next job the job cooperation processing unit extracts information on the next registered job from the job cooperation definition data in S. The job cooperation processing unit sets the extracted information on the target device of the next registered job in S and starts the next registered job in S. When the second job is executed using the job cooperation definition data shown in if the executed job ID of the first job is 152 an URI used for execution of the second registered job is as follows.

In the URI the value of the parameter uri is https 192.168.0.12 NDM JobResult 152 and value of the parameter target is s . This means that the result of the executed job is acquired from https 192.168.0.12 NDM JobResult 152 and that the job whose registered job ID is 42 is executed for the successful device s . A value of f for the target parameter indicates an unsuccessful device and a value of a indicates all the devices. On the other hand if the URI parameter target or uri does not exist the device defined independently by the job represented by the registered job ID is designated as a target of the job.

After starting the job in S the job cooperation processing unit returns to S where the job cooperation processing unit waits until the started job ends. Subsequently the job cooperation processing unit repeats similar processes.

In S the registered job detail information class checks whether or not the execution result details of a previous job already executed are available for use. Then in S the registered job detail information class makes a decision whether to use the execution result details. If a URI used to acquire the job result details have been specified and if the value which indicates the target device is s f or a the registered job detail information class determines whether to use the execution result of the already executed job.

Specifically when the execution result is used the registered job detail information class acquires the execution result details of the already executed job by issuing a request therefor to the appropriate URI in S. On the other hand when the execution result of the already executed job is not used the registered job detail information class designates the device specified by the registered job as a target device of the job in S.

Next in S the registered job detail information class extracts successful devices unsuccessful devices and devices subjected to processing from the acquired execution result details according to the type of the given target device and designates them as target devices of the job. Finally in S the registered job detail information class performs the specified process with respect to the target devices determined in S or S and thereby finishes the job.

The above procedures make it possible to provide information about an already executed job to the job to be executed next allowing the next job to acquire the execution result details of the already executed job. The procedures also make it possible to specify usage of the execution result details of the already executed job allowing the next job to extract data which matches the specified usage from the execution result details according to instructions.

According to the first embodiment the job cooperation processing unit and the job processing units job A processing unit and job B processing unit called by the job cooperation processing unit to execute registered jobs are running on the same host computer. According to the first embodiment both the method for executing a registered job and method for acquiring the result details of an executed job are a URI call by HTTP. Therefore such a call can be made even if the job cooperation processing unit and job processing units exist on different host computers.

Suppose for example network device management software is running on each of the host computers and shown in . It is assumed that there is also a storage device which stores other network device management software running on the network and a device which allows the host computers and to acquire a list of registered jobs from each other s network device management software. Also it is assumed that an HTTP request to the URI shown below can be used to acquire the list of registered jobs from the network device management software running on a host with an IP address of 192.168.0.38. Incidentally the list of registered jobs contains at least the registered job ID and registered job name of each registered job.

Specifically an HTTP request is transmitted to https 192.168.9.38 NDM ExecuteJob 42. Incidentally a URI used to acquire the execution result details of an already executed job and a URI parameter target which indicates an application method are omitted here for the sake of simplicity.

Using the above procedures the job execution control unit which controls execution of multiple jobs can cooperate registered jobs on different hosts with each other.

The first embodiment implements job cooperation for applying the execution result details of a registered job specified via the UI or provided by the job cooperation processing unit to the next registered job. However the method which involves indicating the execution result details of an already executed job to a registered job so that the registered job will acquire the execution result details of the already executed job at the time of execution is not limited to the case where the already executed job has been executed in the job cooperation process. That is the execution result detail of any executed job can be applied to any registered job.

In the third embodiment as an example of applying the execution result details of an already executed job to a registered job a description will be given of a method for implementing a capability to execute the same as an already executed job with respect to devices processed unsuccessful in the already executed job. This process will be referred to herein as recovery. 

https localhost NDM ExecuteJob 62 uri https 3A 2F 2Flocalhost 2FNDM 2FJobResult 2F142 target f where the registered job ID and executed job ID are 62 and 142 respectively. Consequently the same job can be repeated for the device unsuccessfully processed by the executed job.

Cooperative device job management has been described above as an embodiment of a cloud computing system and in a fourth embodiment asynchronous execution of a workflow will be described as an example. According to the fourth embodiment the workflow is executed by a general purpose computer see for example which is connected with multiple devices see for example on the network.

A task starting unit in a REST interface is a module which interprets a REST Web service for task startup received via an HTTP server and starts the task. An execution result acquisition unit is a module which interprets a REST Web service for acquisition of task execution result details and acquires the task execution result details.

A common library provides access to a database as well as provides common components of Web user interfaces. A task scheduler periodically monitors schedule information stored in the database and starts a registered task which falls due to be executed. The registered task is started either by a Web server via HTTP or by the task starting unit via the REST interface .

In the above configuration the workflow processing unit acquires execution results of the preceding task and executes the subsequent task if the execution results satisfy predetermined execution conditions of the subsequent task.

The fourth embodiment makes it possible to provide information about an already executed task to the task to be executed next allowing the next task to acquire the execution result details of the already executed task. The fourth embodiment also makes it possible to specify usage of the execution result details of the already executed task allowing the next task to extract data which matches the specified usage from the execution result details according to instructions.

The configuration according to the fourth embodiment can also be applied to the second and third embodiments. This allows tasks on different computers to start each other. Also the same task can be repeated for the device unsuccessfully processed by an executed task.

Aspects of the present invention can also be realized by a computer of a system or apparatus or devices such as a CPU or MPU that reads out and executes a program recorded on a memory device to perform the functions of the above described embodiment s and by a method the steps of which are performed by a computer of a system or apparatus by for example reading out and executing a program recorded on a memory device to perform the functions of the above described embodiment s . For this purpose the program is provided to the computer for example via a network or from a recording medium of various types serving as the memory device e.g. computer readable medium .

While the present invention has been described with reference to exemplary embodiments it is to be understood that the invention is not limited to the disclosed exemplary embodiments. The scope of the following claims is to be accorded the broadest interpretation so as to encompass all such modifications and equivalent structures and functions.

This application claims the benefit of Japanese Patent Application No. 2010 001572 filed Jan. 6 2010 which is hereby incorporated by reference herein in its entirety.

