---

title: Method and system for high speed options pricing
abstract: A high speed technique for options pricing in the financial industry is disclosed that can provide both high throughput and low latency. Parallel/pipelined architectures are disclosed for computing an option's theoretical fair price. Preferably these parallel/pipelined architectures are deployed in hardware, and more preferably reconfigurable logic such as Field Programmable Gate Arrays (FPGAs) to accelerate the options pricing operations relative to conventional software-based options pricing operations.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08843408&OS=08843408&RS=08843408
owner: IP Reservoir, LLC
number: 08843408
owner_city: St. Louis
owner_country: US
publication_date: 20101026
---
This patent application is a divisional of U.S. patent application Ser. No. 11 760 211 filed Jun. 8 2007 and entitled Method and System for High Speed Options Pricing now U.S. Pat. No. 7 840 482 which claims priority to provisional U.S. patent application 60 814 796 filed Jun. 19 2006 and entitled High Speed Processing of Financial Information Using FPGA Devices the entire disclosures of each of which are incorporated herein by reference.

This patent application is related to the following patent applications U.S. patent application Ser. No. 09 545 472 filed Apr. 7 2000 and entitled Associative Database Scanning and Information Retrieval now U.S. Pat. No. 6 711 558 U.S. patent application Ser. No. 10 153 151 filed May 21 2002 and entitled Associative Database Scanning and Information Retrieval using FPGA Devices now U.S. Pat. No. 7 139 743 U.S. patent application Ser. No. 11 561 615 filed Nov. 20 2006 entitled Method and Apparatus for Processing Financial Information at Hardware Speeds Using FPGA Devices and published as 2007 0078837 published PCT applications WO 05 048134 and WO 05 026925 both filed May 21 2004 and entitled Intelligent Data Storage and Processing Using FPGA Devices U.S. provisional patent application 60 658 418 filed Mar. 3 2005 and entitled Biosequence Similarity Searching Using FPGA Devices U.S. provisional patent application 60 736 081 filed Nov. 11 2005 and entitled Method and Apparatus for Performing Biosequence Similarity Searching PCT patent application PCT US2006 006105 filed Feb. 22 2006 and entitled Method and Apparatus for Performing Biosequence Similarity Searching U.S. patent application Ser. No. 11 293 619 filed Dec. 2 2005 and entitled Method and Device for High Performance Regular Expression Pattern Matching U.S. patent application Ser. No. 11 339 892 filed Jan. 26 2006 and entitled Firmware Socket Module for FPGA Based Pipeline Processing and U.S. patent application Ser. No. 11 381 214 filed May 2 2006 and entitled Method and Apparatus for Approximate Pattern Matching the entire disclosures of each of which are incorporated herein by reference.

The present invention relates to the field of processing financial market data particularly the field of performing options pricing operations on financial market data.

Speed of information delivery is a valuable dimension to the financial instrument trading and brokerage industry. The ability of a trader to obtain analytical information e.g. pricing trade volume trends etc. about financial instruments such as stocks bonds and particularly options as quickly as possible cannot be overstated reductions in information delivery delay on the order of fractions of a second can provide important value to traders. However conventional techniques in the art which rely on software executed on a general purpose processor GPP to compute analytical information for financial instruments generally suffer latency issues due to the computation intensive nature of many financial instrument analytics models.

Options pricing is a function that particularly suffers from computational latency in a conventional GPP based platform. An option is a derivative financial instrument that is related to an underlying financial instrument. An option is a contract that allows the option holder to trade in shares of the underlying financial instrument at a specific price at some time in the future. This future time is related to the option s lifetime also referred to as the option s time to maturity which is the amount of time after which the option to buy sell cannot be exercised. The specific time in the future that the option holder can exercise his her choice depends on the type of the option e.g. an American option can be exercised at any time during the option s lifetime while a European option can only be exercised at the end of the option s lifetime and yet other classes of options can be exercised only at certain pre determined times during their lifetime.

In the parlance of the financial market an option to buy shares is referred to as a call option or call for short and an option to sell shares is referred to as a put option or put for short . The inventors herein note that the teachings of the present invention are equally applicable to both call options and put options.

Within a financial market data stream an offer to buy or sell an option is defined by the following characteristics the identity of the financial instrument underlying the option e.g. IBM stock the number of shares of the underlying financial instrument that are covered by the option the purchase price for the option P the lifetime for the option T the current price of the underlying financial instrument S and the fixed price K at which the option holder has the choice to buy or sell the shares of the underlying financial instrument in the future which is also known as the strike price . An option may additionally include a dividend yield . Another parameter to be included in the trading of options not directly related to the option but to the market is the risk free interest rate r at which the potential option holder can borrow or lend money. The modifier risk free is used to signify that this is the rate of return one could expect on an investment that has zero risk involved with it. Further options characteristics that affect option pricing include whether the option is a call or put and whether the option is an American or European option as explained above.

Based on knowledge of the values for these option characteristics and the risk free interest rate a trader may then assess whether the purchase price P for the option represents a good deal for the trader. While what constitutes a good deal will almost assuredly vary for different traders it is expected that most traders will have an interest in buying or selling an option if the price P for the option is deemed favorable in view of the other option characteristics. Among the challenges in making this assessment as to an option s desirability is the complexity of factors that affect option price and option desirability.

One important consideration in making such an assessment of an option is an estimate of how much the price of the underlying financial instrument can fluctuate in the future. This fluctuation in the price of the underlying financial instrument is commonly referred to as the volatility of the financial instrument. One measure of this volatility is to observe the historical trend of the price of the financial instrument and extrapolate the volatility from the historical trend. Another measure of the volatility can be obtained by approximating within some degree of tolerance the purchase price for the option P with a theoretical fair market option price P that depends on the volatility. The volatility so obtained is termed the implied volatility since it is representative of the volatility of the underlying financial instrument implied by the option. Such a theoretical fair market option price P can be calculated using an option pricing model. Various option pricing models are known in the art or used in a proprietary manner for computing theoretical option prices. Prominent among these models are the Black Scholes option pricing model and the Cox Ross and Rubinstein CRR option pricing model both of which are well known in the art.

As indicated above the downside of using some of these option pricing models to evaluate whether a buy sell offer for an option represents a desirable transaction is that these option pricing models are very computation intensive. Because of their computation intensive nature a delay is introduced between the time that the data regarding the option reaches a trader and the time when the trader has access to the pricing information computed from the option data e.g. the option s implied volatility and or the option s theoretical fair market price . This delay may be costly to the trader in that another party may have already bought the offered option while the trader was awaiting the results of the option pricing model. For example consider the following exemplary scenario. Suppose there is an outstanding bid on an option for stock X that is a firm quote to sell an option to buy 100 shares of Stock X at an option price P of 10.00 per share and wherein the current market price S for Stock X is 25 per share and wherein the option further has values defined for K T and and wherein r is known. Also suppose there are two traders A and B each wanting to buy a call option on 100 shares of stock X but before doing so would like to know whether the option price P of 10.00 per share represents a good deal given the other option characteristics S K T and and the risk free interest rate r . To aid this evaluation process Trader A and Trader B both have their own implementations of an option pricing model and they each would typically apply the values of these option characteristics to their respective implementations of an option pricing model to obtain information that is indicative of whether the call option offer represents a desirable transaction. For the purposes of this example it will be presumed that this offer to sell the call option does in fact represent a good deal to both traders. The trader whose implementation of an option pricing model operates the fastest will have a decided market and investment advantage as he will be able to make an informed investment decision to purchase the call option before the other trader since the winning trader will be informed of the option s desirability while the losing trader is still awaiting the output from his her respective implementation of the option pricing model. Accordingly the losing trader will miss out on the desirable option because the winning trader will have taken that option offer off the market before the losing trader realized that he she wanted to buy it. Thus it can be seen that the speed of a trader s option pricing engine inevitably translates into a trading advantage which even in a single large volume opportunity can amount to significant sums of money. Over time this market advantage can even lead to the success or failure of a trader to attract and keep customers and stay in business.

The ability of a computational engine that implements an option pricing model to quickly produce its output is even more significant when black box trading is taken into consideration. With such black box trading the trader does not eyeball offers to buy sell financial instruments as they tick across a trading screen to decide whether or not he she will buy sell a financial instrument. Instead the trader defines the conditions under which he she will buy sell various financial instruments via a computer implemented algorithm. This algorithm then traverses the offers to buy sell various financial instruments within a market data feed to identify which offers meet the specified conditions. Upon finding a hit on an offer within the feed the algorithm operates to automatically execute a specified trade on the offer without further trader intervention . Thus returning to the above example such an algorithm may have a specified condition to the effect of buy a call option on X shares of ABC stock if the implied volatility for the call option is less than or equal to Z . Another exemplary algorithmic condition could be buy a call option on Y shares of ABC stock if the computed theoretical fair market price for that option is greater than the actual price for the option by at least Z cents . Thus before the algorithm can make a decision as to whether a given call option offer will be purchased the implied volatility and or theoretical fair market price for the option offer will need to be computed via some form of an option pricing model. As explained above with such black box trading the computation latency for computing the implied volatility and or theoretical fair market price is highly important as delays on the order of fractions of a second will be critical in determining which trader is able to strike first to buy or sell options at a desirable price. Given that the inventors envision that black box trading will continue to grow in prominence in future years for example it is estimated that currently greater than 50 of trades are performed automatically via computer generated black box transactions it is believed that high performance computation engines for option pricing will become ever more important to the financial instrument trading industry.

Use of the CRR option pricing model for the analytics discussed above is especially computation intensive as it is both an iterative model and a binomial model. Using the CRR option pricing model an option s theoretical fair market price P can be computed as a function of the following inputs P S K T r a volatility value and n wherein n represents a number of discrete time steps within the option s lifetime that the underlying financial instrument s price may fluctuate. The parameter n is specified by the user of the CRR option pricing algorithm. By iteratively updating the volatility value a until the theoretical fair market price Pfor that option approaches the option s actual market price P an option s implied volatility can be computed. The implied volatility which represents the volatility of the underlying financial instrument at which the option s theoretical fair market price P is within some specified tolerance s of the option s actual purchase price P is an important characteristic of an option that is used by traders to decide whether a given option should be bought or not. However because of the iterative nature of the implied volatility computation and the binomial nature of the theoretical fair market price computation the calculation of implied volatility using the CRR option pricing model is highly computation intensive as noted above. Conventional implementations of the CRR option pricing model to compute implied volatility in software on GPPs are believed by the inventors to be unsatisfactory because of the processing delays experienced while computing the implied volatility.

Based on the foregoing the inventors herein believe that a need in the art exists for accelerating the speed by which option pricing models can be used to evaluate option prices.

As further background the inventors note that in an attempt to promptly deliver financial information to interested parties such as traders a variety of market data platforms have been developed for the purpose of ostensible real time delivery of streaming bid offer and trade information for financial instruments to traders. illustrates an exemplary platform that is currently known in the art and used by traders to support their trading activities including options trading. As shown in the market data platform comprises a plurality of functional units that are configured to carry out data processing operations such as the ones depicted in units including options pricing whereby traders at workstations have access to financial data of interest and whereby trade information can be sent to various exchanges or other outside systems via output path . The purpose and details of the functions performed by functional units are well known in the art. A stream of financial data arrives at the system from an external source such as the exchanges themselves e.g. NYSE NASDAQ etc. over private data communication lines or from extranet providers such as Savvis or BT Radians. The financial data source stream comprises a series of messages that individually represent a new offer to buy or sell a financial instrument an indication of a completed sale of a financial instrument notifications of corrections to previously reported sales of a financial instrument administrative messages related to such transactions and the like. As used herein a financial instrument refers to a contract representing equity ownership debt or credit typically in relation to a corporate of governmental entity wherein the contract is saleable. Examples of financial instruments include stocks bonds options commodities currency traded on currency markets etc. but would not include cash or checks in the sense of how those items are used outside financial trading markets i.e. the purchase of groceries at a grocery store using cash or check would not be covered by the term financial instrument as used herein similarly the withdrawal of 100 in cash from an Automatic Teller Machine using a debit card would not be covered by the term financial instrument as used herein .

Functional units of the system then operate on stream or data derived therefrom to carry out a variety of financial processing tasks. As used herein the term financial market data refers to the data contained in or derived from a series of messages that individually represent a new offer to buy or sell a financial instrument an indication of a completed sale of a financial instrument notifications of corrections to previously reported sales of a financial instrument administrative messages related to such transactions and the like. The term financial market source data refers to a feed of financial market data received directly from a data source such as an exchange itself or a third party provider e.g. a Savvis or BT Radians provider . The term financial market secondary data refers to financial market data that has been derived from financial market source data such as data produced by a feed compression operation a feed handling operation an option pricing operation etc.

Because of the massive computations required to support such a platform current implementations known to the inventors herein typically deploy these functions across a number of individual computer systems that are networked together to thereby achieve the appropriate processing scale for information delivery to traders with an acceptable degree of latency. This distribution process involves partitioning a given function into multiple logical units and implementing each logical unit in software on its own computer system server. The particular partitioning scheme that is used is dependent on the particular function and the nature of the data with which that function works. The inventors believe that a number of different partitioning schemes for market data platforms have been developed over the years. For large market data platforms the scale of deployment across multiple computer systems and servers can be physically massive often filling entire rooms with computer systems and servers thereby contributing to expensive and complex purchasing maintenance and service issues.

This partitioning approach is shown by wherein each functional unit can be thought of as its own computer system or server. Buses and can be used to network different functional units together. For many functions redundancy and scale can be provided by parallel computer systems servers such as those shown in connection with options pricing and others. To the inventors knowledge these functions are deployed in software that is executed by the conventional GPPs resident on the computer systems servers . The nature of GPPs and software systems in the current state of the art known to the inventors herein imposes constraints that limit the performance of these functions. Performance is typically measured as some number of units of computational work that can be performed per unit time on a system commonly called throughput and the time required to perform each individual unit of computational work from start to finish commonly called latency or delay . Also because of the many physical machines required by system communication latencies are introduced into the data processing operations because of the processing overhead involved in transmitting messages to and from different machines.

Despite the improvements to the industry that these systems have provided the inventors herein believe that significant further improvements can be made. In doing so the inventors herein disclose that the underlying technology disclosed in the related and incorporated patents and patent applications identified above can be harnessed in a novel and non obvious way to fundamentally change the system architecture in which market data platforms are deployed.

In above referenced related U.S. Pat. No. 7 139 743 it was first disclosed that reconfigurable logic such as Field Programmable Gate Arrays FPGAs can be deployed to process streaming financial information at hardware speeds. As examples the 743 patent disclosed the use of FPGAs to perform data reduction operations on streaming financial information with specific examples of such data reduction operations being a minimum price function a maximum price function and a latest price function.

Since that time the inventors herein have greatly expanded the scope of functionality for processing streams of financial information with reconfigurable logic.

In accordance with one embodiment of the invention described herein options pricing can be performed at hardware speeds via reconfigurable logic deployed in hardware appliances to greatly accelerate the speed by which option pricing operations can be performed thereby providing important competitive advantages to traders. Thus in accordance with this embodiment of the invention it is disclosed that the options pricing functionality that is performed in software on conventional platforms can be replaced with reconfigurable logic that is configured as an options pricing engine. Such an options pricing engine can perform a number of computations related to options to aid in the evaluation of whether a given option represents a desirable transaction. For example such an options pricing engine can be configured to compute an implied volatility for an option or a theoretical fair market price for an option. The inventors further disclose that in addition to options pricing other functions of a conventional market data platform can be deployed in reconfigurable logic thereby greatly consolidating the distributed nature of the conventional market data platform into fewer and much smaller appliances while still providing acceleration with respect to latency and throughput.

As used herein the term general purpose processor or GPP refers to a hardware device that fetches instructions and executes those instructions for example an Intel Xeon processor or an AMD Opteron processor . The term reconfigurable logic refers to any logic technology whose form and function can be significantly altered i.e. reconfigured in the field post manufacture. This is to be contrasted with a GPP whose function can change post manufacture but whose form is fixed at manufacture. The term software will refer to data processing functionality that is deployed on a GPP. The term firmware will refer to data processing functionality that is deployed on reconfigurable logic.

According to another aspect of the invention the inventors herein have streamlined the manner in which an option s implied volatility and fair market price can be computed thereby providing acceleration independently of whether such functionality is deployed in hardware or software. While it is preferred that the implied volatility and fair market price computations disclosed herein be performed via firmware pipelines deployed in reconfigurable logic the inventors herein further note that the architectural improvements with respect to how the implied volatility and or fair market prices can be computed can also provide acceleration when performed in hardware on custom Application Specific Integrated Circuits ASICs in software on other platforms such as superscalar processors multi core processors graphics processor units GPUs physical processor units PPUs chip multi processors and GPPs or in a hybrid system involving exploitation of hardware including reconfigurable hardware and software techniques executing on a variety of platforms.

With respect to computing an option s implied volatility the inventors disclose that an iterative banded m ary search within the option s volatility space can be performed to identify the volatility value for which the option s theoretical fair market price computed according to an option pricing model approximates the option s actual purchase price to within a predetermined tolerance. This identified volatility value for which the option s computed theoretical fair market price approximates the option s actual purchase price to within a predetermined tolerance can then be used as the option s implied volatility.

With this iterative banded m ary approach a plurality m 1 theoretical fair market prices are preferably computed in parallel for different volatility values within the volatility space for a given iteration thereby providing acceleration with respect to the computation of the implied volatility. At least one and preferably a plurality of conditions are tested to determine whether an additional iteration is needed to find the implied volatility. As explained hereinafter a theoretical fair market price convergence property c is preferably used as one of these conditions. Also as explained hereinafter a volatility convergence property is preferably used as another of these conditions.

Preferably the option pricing model that is used to compute the option s theoretical fair market price is the CRR option pricing model. To accelerate the computation of the option s theoretical fair market price according to the CRR model disclosed herein is a technique for parallelizing and pipelining the computation of the intermediate prices at different time steps within the CRR binomial tree thereby providing acceleration with respect to the computation of the theoretical fair market price according to the CRR option pricing model.

In accordance with another embodiment of the invention disclosed herein is a technique employing a lookup table to retrieve precomputed terms that are used in the computation of a European option s theoretical fair market price. Optionally the theoretical fair market option price can then be used to drive a computation of the implied volatility as described above. Preferably this lookup table is indexed by the European option s volatility and time to maturity. Furthermore in an embodiment wherein the lookup table is used to compute a European option s theoretical fair market price but not its implied volatility it is preferred that an additional lookup table of volatility values indexed by financial instruments be employed to identify a volatility value applicable to the underlying financial instrument of the subject European option. The lookup table terms retrieved from the table and indexed by the option s volatility and time to maturity can be fed to a combinatorial logic stage that is configured to accelerate the computation of the theoretical fair market price by parallelizing the computation of the constituent components of a summation formula for determining the option s theoretical fair market price.

In accordance with yet another embodiment of the invention disclosed herein is a technique for directly computing the terms that are used in the computation of the option s theoretical fair market price. With this technique a plurality of parallel computation modules are preferably employed to compute each term in parallel thereby accelerating the overall computation of the option s theoretical fair market price.

Further still to better map these computational modules onto available processing resources a partitioning scheme can optionally be employed to distribute portions of the term computations across different processing resources.

As noted above these parallel pipelined architectures for computing an option s implied volatility and or theoretical fair market price are preferably deployed in reconfigurable logic thereby providing not only data processing at hardware speeds but also providing flexibility with respect to the parameters and models used in the computations. Preferably a firmware pipeline is deployed on the reconfigurable logic to accelerate at least a portion of these parallel pipelined architectures as explained in greater detail hereinafter. However as stated above it should be noted that processing resources other than reconfigurable logic can be used to implement the streamlined options pricing architectures described herein.

These and other features and advantages of the present invention will be understood by those having ordinary skill in the art upon review of the description and figures hereinafter.

In accordance with an embodiment of the present invention it is desired to efficiently compute an option s implied volatility . is an exemplary plot that illustrates how an option s theoretical fair market option price computed using the CRR option pricing model varies as a function of volatility. Theoretical fair market price refers to the price that should be assigned to the option to prevent riskless arbitrage opportunities i.e. the option should be priced so that the potential option holder cannot make a profit on it without taking any risk. Any of a number of option pricing models can be used to determine an option s theoretical fair market price including but not limited to the CRR option pricing model the Black Scholes option pricing model and other option pricing models both those well known to the public and those that are proprietary to traders and brokerage businesses. In this exemplary embodiment of the invention the CRR option pricing model will be used however it should be noted that a practitioner of the present invention can choose to deploy other option pricing models when computing an option s implied volatility.

Also in this example it is assumed that the stock price S for the stock underlying the option is 100 the strike price K for the option is 100 the time to maturity T for the option is 10 months the interest rate r applicable to the option is 100 compounded annually the dividend yield for the option is 0 and the number of time steps n for the CRR option pricing model is 100. It should be noted that the scale and values shown in this plot are exemplary only as other values and scales may readily be used. For example volatility is typically expressed in terms of standard deviation of the underlying financial instrument price around a mean value for the underlying financial instrument price. With such a scale the volatility values would by definition always be positive. Given that the range of volatility values for most financial instruments will not exceed 2 standard deviations for the purposes of explanation herein it is helpful to illustrate a volatility range of 0 to 2. However it should be noted that other ranges and scales could be used to express a financial instrument s volatility space.

Plot shows that the option price is a monotonically increasing function of volatility. As used herein monotonically increasing refers to a function wherein the first derivative thereof is always a non negative number. With plot as the volatility increases the curve approaches the value S of the stock price which has been assumed to be 100 in this example .

The problem of interest then is that given a purchase price for an option one needs to calculate the volatility value for the option at that purchase price. It should be recalled that the implied volatility is the volatility value for which the option s theoretical fair market price approximates the option s actual purchase price P to within some tolerance. In this example we will assume that the option s actual purchase price P is 92 which results in the option s implied volatility being 0.8 as shown by point on plot of . Because the dependence of the theoretical fair market option price on volatility does not have a closed form an analytic expression cannot readily be used to directly compute the volatility as a function of the theoretical fair market option price. One solution to this problem is an iterative method that iteratively computes the theoretical fair market option price from a given volatility value and iteratively adjusts the volatility value used in the computation until a theoretical fair market option price is computed that is within some tolerance of the actual option purchase price P.

To speed this process parallelism is preferably applied preferably in a banded iterative approach. With the banded iterative approach multiple starting points for volatility values are chosen such that the volatility range is subdivided into a plurality m of bands as shown in . At each iteration the theoretical fair market option price for each of a plurality of volatility values preferably m 1 volatility values . . . that define the boundaries of each volatility band are computed. As noted these computations are preferably performed in parallel. In the example of wherein m is 4 an initial volatility range of 0 to 2 has been subdivided into 4 bands whose boundary volatility values are 0 0.5 1.0 1.5 and 2.0. The theoretical fair market purchase prices P P P P and P are computed for each of these volatility boundary values. After computation of these theoretical fair market option prices the algorithm checks whether any of the computed theoretical fair market option prices are within some tolerance of the actual option purchase price P. If one of the theoretical purchase prices P is within of P then the implied volatility is determined to be equal to . If none of the computed theoretical purchase prices are within of P then another iteration of the algorithm is needed. Thus the tolerance serves as a theoretical fair market price convergence property. As explained below two other conditions a iteration maximum and a volatility convergence property can also optionally be tested to determine whether another iteration is needed.

To intelligently narrow the volatility band within which the algorithm searches for the implied volatility the algorithm determines the volatility band within which the implied volatility resides. Because the theoretical fair market option price is a monotonically increasing function of volatility the volatility band within which the implied volatility resides can be quickly determined by identifying the volatility band for which the theoretical fair market option prices at its boundaries encompass the actual option purchase price P. In the example of the volatility band within which the implied volatility resides is labeled as . As can be seen the volatility value at the lower boundary of band is 0.5 for which the theoretical fair market option price is approximately 90 and the volatility value at the upper boundary of band is 1.0 for which the theoretical fair market option price is approximately 95. Because the actual option purchase price of 92 falls between these two computed theoretical purchase price values band is identified as the volatility band within which the implied volatility resides.

Thus during the next iteration band from the first iteration is subdivided into another plurality m of bands as shown in . Thus in the example of the volatility band boundary values for the second iteration are 0.5 0.625 0.75 0.875 and 1.0. The theoretical fair market purchase prices are then computed for each of these volatility boundary values and a check is once again performed to assess whether the implied volatility has been found by determining whether any of the computed theoretical fair market option prices are within of P. If the implied volatility has not been found then the band within which the implied volatility resides is once again identified. The identified band is then further subdivided into a plurality m of bands during a next iteration as shown in . During this next iteration the parallel computation of theoretical fair market option prices is once again performed with a check to determine whether the implied volatility has been found. Presuming that it has not the algorithm operates to identify band for subdivision during the next iteration. Such iterative narrowing of the volatility band within which the implied volatility resides then continues until the algorithm determines that is has found the implied volatility within a sufficient degree of precision or any one of the other conditions for halting the process are satisfied.

While the example of has used a value of m 4 as an example it should be noted that other values of m could readily be used in this iterative banded search for the implied volatility. Also while the same value of m has been used for each iteration in the examples of it should be noted that the value of m could be different for each iteration if so desired by a practitioner of this embodiment of the present invention. Further still in the examples of each volatility band has been equally sized by essentially dividing the volatility range of interest by m. It should be noted that the volatility bands used in each iteration need not be equally sized. Moreover it this example the initial volatility range was set equal to a range of 0 2 or a full range of volatility . It should be noted that other initial volatility ranges can be used. For example a practitioner of this embodiment of the invention may find it more efficient to intelligently select the initial volatility range. With such intelligent selection the initial volatility range can be selected based on historical volatility values for the option s underlying financial instrument. For example the lowest recorded volatility value for the financial instrument in the past 12 months optionally minus some tolerance can be used as the lower bound of the initial volatility space and the highest recorded volatility value for the financial instrument in the past 12 months optionally plus some tolerance can be used as the upper bound of the initial volatility space.

Next at step the algorithm computes the theoretical fair market option price Pfor each of the volatility band boundary values defined at step . Preferably these computations are performed in parallel as described hereinafter. At step the algorithm computes the differences D D . . . Dbetween each computed theoretical fair market option price and the actual option purchase price P wherein D P P. As with step the computations of step are preferably performed in parallel. Next at step the algorithm checks whether the absolute value of any of the computed differences D D . . . Dis less than . If the absolute values of one of the computed differences Dis less than then at step the algorithm sets the implied volatility equal to the volatility value for which the computed Dis less than E. The algorithm can then stop and output the determined implied volatility.

However if none of the differences Dare less than c then the algorithm proceeds to steps and . Steps and operate to identify the volatility band within which the implied volatility resides. At step the algorithm computes the products D Dfor k 1 2 . . . m 1. Because of the monotonically increasing characteristic of the theoretical fair market option price with respect to volatility there will only be one product that is a negative number because there will only be one band where the actual purchase price falls between the band s theoretical fair market option price boundary values. Thus at step the algorithm will identify the band within which the implied volatility resides by determining which product is a negative number. The volatility boundary values and for which the product of D Dis negative will then be used to define the volatility range to be subdivided during the next iteration step .

Preferably the algorithm also uses two other parameters to control the number of iterations that the algorithm will perform Qand . Qdefines the maximum number of iterations that the algorithm will perform and describes a volatility convergence property that when met will cause the algorithm to stop and output an implied volatility value. The Qcondition operates to decrease the latency of computation by preventing the occurrence of an excessive number of iterations. The condition also operates to decrease computational latency in cases where the volatility band search space around the implied volatility is very small but because of a steep slope of the theoretical fair market price curve within that volatility space the theoretical fair market price convergence condition has not been satisfied. Accordingly the theoretical fair market prices for the different volatility values within the volatility band may possess differences in value that exceed while the differences between the different volatility values may be virtually negligible. In such instances the average volatility value of the narrow volatility band in question is preferably output as the implied volatility. To control the algorithm using these two parameters steps and operate as follows. At step the algorithm computes the difference for the volatility boundary values defined at step and then compares this difference with . If the difference is less than then the algorithm determines that the defined volatility boundaries and the implied volatility have sufficiently converged and at step the algorithm outputs the implied volatility as the average of and 2 . If volatility convergence has not been achieved then the algorithm proceeds to step wherein it checks whether the current iteration q is equal to Q. If q does equal Q then the algorithm returns to step to output the implied volatility as the average of and . If q is less than Qthen the algorithm increments the iteration index q at step . Thereafter the algorithm returns to step for the next iteration wherein the m 1 volatility band boundary values are defined starting from the volatility range defined at step .

The algorithm of can be deployed in either hardware or software or a combination thereof . If deployed in software preferably a plurality of parallel co processors or a multi core processor is used to parallelize and accelerate at least step . However for greater acceleration preferably at least a portion of the algorithm of and more preferably the full algorithm of is deployed in hardware. Preferably this hardware is reconfigurable logic as explained hereinafter.

Each computational module also preferably receives as an input a  enable signal that indicates whether the implied volatility a for that option message has been found as well as a signal that identifies the value of the determined implied volatility although the computational module for the first iteration need not receive these signals as inputs . Combinatorial logic stage preferably sets the  enable signal high if it has found the implied volatility for the option message and then outputs the implied volatility . Preferably a control unit such as the firmware socket module described hereinafter with respect to a reconfigurable logic device embodiment of this aspect of the invention operates to read the  enable and outputs from each computational module to halt the pipelined processing for any message whose implied volatility has already been found. With such control when an option s implied volatility has been found at iteration 3 the pipeline need not wait until the final Qiteration of the pipeline before outputting the implied volatility for the option thereby eliminating unnecessary latency. The combinatorial logic stage also preferably outputs the P S K T n . . . and . . . parameters for use by the next downstream computational module in the pipeline .

As noted above any of a variety of OPMs can be used by the OPM computational units to compute the option s theoretical fair market price. However it is preferred that an OPM based on the CRR OPM be used. Cox Ross and Rubinstein showed that in order to calculate the theoretical fair market price of an option one needs to know only the strike price K the price S of the financial instrument underlying the option the range of movement of S i.e. the volatility the time to maturity T for the option the interest rate r and the dividend yield for the option. The CRR binomial model divides the lifetime T of the option into n discrete steps and assumes that at each step the stock price S can either go up by a fixed multiplicative factor u or go down by a fixed multiplicative factor d. The factors u and d depend on the volatility of the stock the time to maturity of the options and the number of discrete steps n. The upward and downward movement factors can be calculated as follows 

Under the assumption that the stock price changes multiplicatively a binomial tree can be constructed that at each time step represents the possible values of the stock price. illustrates such a binomial tree . Note that at time step i the stock price can take one of i 1 values udS for j 0 1 . . . i. Thus starting from the root node of S the nodes at time step of the tree exhibit values of uS and dS. At time step of tree the leaves exhibit values of uS udS and dS. At time step the leaves exhibit values of uS udS udS and dS and so on until time step n wherein the leaves exhibit values of uS udS udS . . . udS udS and dS.

The theoretical fair market price of the option can then be obtained by working backward through tree from the leaves at time step n through the root . Let C n i j denote the price of the option at the jnode at time step n i for a binomial tree of depth n. Then C n i j can be calculated as max 11 1 1 3 wherein R represents the normalized interest rate wherein 4 and wherein 

It should also be noted that formula 3 is directed toward the theoretical fair market price of call options. For put options the theoretical fair market price can be computed as max 11 1 1 3a which initializes at time step n as follows max 0 for 0 1 6a 

Further still it should be noted that formulas 3 and 3a can be used to compute the theoretical fair market prices for both American and European options.

Preferably the computations for C n i j are implemented in a parallel pipeline architecture as shown in . depicts an exploded view of the OPM computational unit of . OPM computational unit can be realized via a plurality of pipeline stages wherein each pipeline stage comprises at least one computational node . Each pipeline stage is configured to perform the C n i j computations for a given time step. The computational nodes in the first pipeline stage are preferably initialized with the C n 0 j values as determined by formula 6 for call options and by formula 6a for put options. Each computational node also preferably receives as inputs the parameters S K T r n as well as the value of the C P flag that identifies whether the pertinent option is a call or a put. Each computational node is configured to perform the computation defined by formula 3 for C n i j if the option is a call option and the computation defined by formula 3a for C n i j if the option is a put option as defined by the option s C P flag. In a reconfigurable logic implementation of computational node each node can include parallel computational paths one path for formula 3 and the other path for formula 3a wherein control logic can be deployed to route pertinent input values to the appropriate computational path based on the option s call put status. As such each computed value for C n i j is fed to two downstream computational nodes in the next pipeline stage for use in the computation defined by formulas 3 and 3a .

The parallel pipelined nature of the computations performed by the OPM computational unit of significantly accelerates the option pricing computations relative to conventional designs. Assume that it takes fclock cycles to perform the computations at each leaf node of the binomial tree and fclock cycles to perform the computations at each internal node including the root. For a tree of depth n there are n 1 leaf nodes and n n 1 2 internal nodes including the root . The total number of clock cycles to compute the option price on a sequential machine would be n 1 f 0.5n n 1 f. On the other hand using a parallel architecture such as that shown in all of the computations at each time step can be performed concurrently thus reducing the number of clock cycles to n 1 f nf. The complexity for the parallel pipelined architecture then becomes linear in the depth of the tree as opposed to being quadratic in the depth of the tree as it is for a sequential machine. This aspect of the embodiment provides practitioners of the present invention with improved flexibility when designing and using an option pricing engine. A practitioner can use larger values of n relative to what he she could use in a sequential machine for more accurate option price modeling without sacrificing latency or a practitioner can price an option at much higher speeds i.e. achieve a higher throughput by using the same or similar values for n that he she would have used for a sequential machine.

It should also be noted that the combinatorial logic stage can include control logic to reconcile situations where both the theoretical fair market price convergence property defined by E and the volatility convergence property defined by are met. In such instances appropriate control logic can be included to pass the desired implied volatility as an output. If it is preferred that the implied volatility as determined by be used then the control logic can be configured to pass the value identified at step as the output. If it is preferred that the implied volatility as determined by be used then the control logic can be configured to pass the value identified at step as the output. Alternatively the control logic can be configured to pass the average of the two values identified at steps and as the output. Further still the control logic can be configured to pass one of the values as an output based on which tolerance or satisfies one or more conditions.

Thus by determining an option s implied volatility via the parallelized pipelined architecture shown in and significant enhancements to latency and throughput can be provided thereby providing practitioners of the present invention with an important competitive advantage in the financial marketplace.

It should be noted that the iterative banded m ary search disclosed herein in connection with has been described in the context of an option s theoretical fair market price that is a monotonically increasing function of the option s volatility. The inventors further note that the iterative banded m ary search for a particular parameter of interest related to a financial instrument can be performed in connection with other plots where a first parameter related to a financial instrument is a monotonically increasing or monotonically decreasing function of a second parameter related to the financial instrument. Further still the inventors note that the first financial parameter can also be a monotonically strictly increasing or a monotonically strictly decreasing function of the second financial parameter. As used herein monotonically decreasing refers to a function wherein the first derivative thereof is always a non positive number monotonically strictly increasing refers to a function wherein the first derivative thereof is always a number greater than zero and monotonically strictly decreasing refers to a function wherein the first derivative thereof is always a number less than zero.

In accordance with another embodiment of the present invention it is desired to efficiently compute an option s theoretical fair market price. As previously noted the quick computation of fair market prices for options is a high priority problem for traders particularly for traders who perform trades using black box trading algorithms. If a trader or a trader s black box algorithm can detect a difference in the offered price P of an option and that option s theoretical fair market price according to some option pricing model then a trading opportunity may exist for that trader.

With formula 7 the binomial coefficient b denotes the number of occurrences of j up states in n time steps wherein 

If one examines each term in the summation of the binomial pricing model of formula 7 it is observed that the up down factors u d and the up down state prices p q are solely dependent on the number of time steps n the risk free interest rate r and the volatility . Next for purposes of this example one makes the following assumptions 1 an assumption following from the Black Scholes model that the risk free interest rate is constant over the life of the option which helps simplify the options pricing algorithm 2 an assumption that the number of time steps n in the model is the same for all financial instruments which ensures that the computational complexity and thus the latency is constant for pricing different options and 3 an assumption that the options share the same maturity dates. As such one will assume that 3 month call options will mature on the same day regardless of the underlying financial instrument. While not all options that share the same duration will share the same maturity date one can further assume that the number of future maturity dates will be reasonably small on the order of 10 . This assumption is a reasonable one for European options since they can only be exercised at maturity thus options maturing in a particular month will have very similar time to maturities provided they all had a similar start date.

With the architecture shown in and the values of pqband udare precomputed for all values of j and stored in a lookup table that is indexed by volatility and by time to maturity T. Thus A T will represent the array of n 1 values of pqbfor 0 j n and for T and B T will represent the array of n 1 values of udfor 0 j n and for T. As such formula 7 above can be represented as 

While formulas 7 and 12 operate to determine a theoretical fair market price for a European call options it should be noted that this the formula for computing the theoretical fair market price of a European put option can be expressed as 

Thus with reference to and given an option message a lookup unit preferably operates to parse the message to ascertain the identity of the underlying financial instrument from field of the option message and the time to maturity parameter therein from field . A lookup table accessible to unit stores volatility values for various financial instruments. As shown by lookup table is preferably indexed by financial instrument such that the lookup unit can retrieve the volatility measure pertinent to option message via a financial instrument index . The table of volatility values can be computed on either a continuous basis at scheduled intervals e.g. nightly hourly etc. and or on a triggered basis. The volatility values in table could be determined in a number of ways they can be the underlying financial instruments historical volatilities computed using historical volatility values for the underlying financial instrument or they can be previously determined implied volatilities for the underlying financial instrument.

Upon retrieval of the volatility value from lookup table lookup unit then preferably accesses the lookup table using volatility index and time to maturity index taken from message . Indices and identify an entry within table that contains an A B pair . Lookup unit then retrieves the identified A B pair and passes those values to a combinatorial logic stage to compute the fair market option price for the option message .

With the embodiment of the computation of fair market option price preferably utilizes 2 n 1 32 bit floating point multiplications n 1 32 bit floating point subtractions n 1 maximum computations and n 32 bit floating point additions a total of approximately 5n floating point operations. For a software embodiment if one assumes that each operation requires 5 cycles of a 2 GHz processor then each operation requires 2.5 ns. If one further assumes that 256 time steps are sufficient to approximate the lognormal distribution then a fair market option price can be computed in 3.2 s. Further assuming no overhead between fair market price calculations then a single 2 GHz processor should be able to make 312 500 fair market option price calculations per second.

Turning to the amount of memory required for the tables and it is preferred that each element of the arrays A and B be represented as a 32 bit single precision floating point number. Continuing with the assumption that n 255 is sufficient then each entry in table will store 32 bit values for a total of 8192 bits or 1024 bytes.

If one also assumes that three significant digits are sufficient to accurately represent the volatility values this will result in the volatility of any underlying financial instrument assuming one of 1000 possible values. If one further assumes that there are 10 possible maturity dates for all currently traded options although other numbers of possible maturity dates could be used then table will contain 1000 10 entries which results in a total table size of 102 Mbytes. It is expected that the size of the volatility table will be on the order of 10 kbytes. These table sizes suggest that the lookup tables and can readily be stored in RAM and preferably in a high speed memory either processor memory or off chip memory for any embodiments employing a hardware co processor . However it should also be noted that the lookup table s can also be stored in on chip memory such as SDRAM on an FPGA chip if the available memory resources on the chip are sufficient.

As for the regularity with which the lookup tables are computed it is believed that any of a variety of schemes could be employed depending upon the needs and desires of a practitioner of this embodiment of the invention. For example in some situations it may be sufficient to re compute the tables prior to the beginning of each trading day particularly if one assumes that the time to maturity of the option can be measured in days and the risk free interest rate will not change significantly throughout the trading day.

If a more frequent updating of the lookup tables is desired then it is helpful to estimate the rate at which the tables can be recomputed. In order to compute the entries in table one must first compute the parameters u d p and q. It will be assumed that the value of 1 n will be constant. It will further be assumed that the volatility and the risk free interest rate r can vary. Computation of u requires a floating point square root operation multiplication operation and exponential operation. Once u is known the value of d can be found by a single floating point divide operation. Computation of p requires a floating point divide operation a multiplication operation and two subtraction operations. Once p is known the value of q can be found via a single floating point subtraction operation. The inventors herein estimate that the computation of the u d p and q terms can be performed in approximately 200 cycles. If one maximizes the use of intermediate results by using the fully partitioned binomial tree technique exemplified in then a forward pass through the binomial tree requires n logn multiplication operations. Since two passes are required once for the array of price factors and once for the array of probabilities then 2n logn multiplication operations would be needed. Using the same assumptions mentioned above n 256 with 2.5 ns required for each multiplication operation the computation of a lookup table with 1000 100 entries would require approximately 1.024 seconds. Accordingly if a second processor with access to the same system memory is available for continually updating the tables the inventors herein believe that the table can be re computed approximately every 2 seconds.

An alternative to the exemplary embodiment of for computing an option s theoretical fair market price is to directly compute the binomial tree used in the fair market price computation rather than using a lookup table for the terms related to u d p and q .

One approach to such direct computation can utilize the architecture of . With such a direct computation embodiment the volatility value used in the theoretical fair market price computation will need to be passed to the OPM computational unit either from a lookup table of volatility values as shown in connection with or otherwise.

While the examples of have used a value of n 4 it should be understood that a practitioner of this embodiment of the invention can readily use other values of n. It should be noted that a practitioner of the present invention can select a value for n based on the speed and accuracy needs of a trader. Larger values of n will produce a higher degree of accuracy with respect to theoretical fair market price computations but will increase the time needed to compute the theoretical fair market prices. As such the value of n can be set and adjusted as needed to tailor the options pricing techniques described herein to the needs of a given application.

If n 1 parallel multipliers are not available and or one wishes to balance the computational load of module across superscalar processors and hardware co processors one can partition the binomial tree. One can partition any subtree of m steps at step m 2 . depicts an example of partitioning a binomial tree at step . It can be noted that the portion of the binomial tree to the left of partition requires only two paths to compute the terminal prices for the left half of tree . These left half computations can be performed sequentially or by parallel processors threads. illustrates an example of a module for computing the terminal prices of the left subtree using parallel multipliers. As shown in five pipelined stages of two parallel multiplication units and can be used to compute the terminal uS and dS terms and .

At time step the terminal prices and from the left half of tree can be fed to another module preferably a hardware co processor. If the hardware co processor has 10 parallel multipliers available then the terminal prices uS udS udS udS udS udS udS udS udS and dS can be computed in four time steps. Alternatively two hardware co processors with 5 parallel multipliers can be employed to compute those terms in parallel as shown by modules and in and . In module of four pipelined stages compute the terminal prices uS udS udS udS and udS from the input uS price . In module of four pipelined stages compute the terminal prices udS udS udS udS and dS from the input dS price . Thus with the example computational module can be readily formed from modules and . As another alternative a hardware co processor with 5 parallel multipliers can compute the terminal prices in 8 steps by sequentially computing each subtree to the right of partition shown in . It should further be noted that superscalar microprocessor s can be used to perform other operations that may be needed for options pricing or for other analytical functions in parallel using available resources on the superscalar microprocessor s .

It should also be noted that the partitioning technique can be applied recursively to better map the computational load to the particular processing platform used in the practice of this embodiment of the invention. depicts an exemplary step binomial tree where double partitioning has been employed with one partition at time step and another partition at time step . In one embodiment at time step the four intermediate results produced at partition can be fed to a hardware co processor where the hardware co processor is configured to compute one or more subtrees to the right of partition in parallel. In another exemplary embodiment drawing from the example of module can be realized as shown in . Partitioned computational unit outputs the prices uS and dS using two computational paths. The uS term can then be fed to partitioned computational unit to thereby compute the terms uS and udS using two computational paths. In parallel with partitioned computational unit partitioned computational unit can operate on the dS term from unit to thereby compute the terms udS and dS using two computational paths. Thereafter the terms uS udS udS and dS can be fed to four parallel partitioned computational units and to compute the terminal prices shown in tree of .

It should be noted that the same techniques described in connection with can be used to compute the pqbterms via module . depicts an exemplary embodiment of module wherein no partitioning has been used and wherein the binomial tree is of depth n 4. Module comprises n pipelined stages to compute the pqterms via multiplication units and multiplication units being q multipliers and multiplication units being p multipliers . An input value of 1 is fed into the first pipeline stage . The final stage comprises n 1 parallel multiplication units and that perform the bmultiplication operations. It should be noted that more complex implementations of modules can be deployed in accordance with the teachings set forth herein in connection with through .

It should also be noted that the combinatorial logic stage of architecture of can be constructed as shown in for the lookup table embodiment although the multipliers would not be needed as the operations performed by multipliers would be performed within module .

The inventors herein note that the options pricing techniques described in connection with can be implemented on any of a number of platforms in software hardware or a combination of hardware and software. As such as previously explained suitable platforms for deploying the options pricing techniques described herein can include reconfigurable logic devices e.g. FPGAs superscalar processors multicore processors ASICs GPUs PPUs chip multi processors and GPPs.

A preferred platform for the deployment of the options pricing techniques described herein is the market data platform described in the above referenced and incorporated provisional U.S. patent application 60 814 796 an example of which is shown in . The market data platform shown in consolidates the functional units shown in into much fewer physical devices and also offloads much of the data processing performed by the GPPs of the functional units to hardware preferably reconfigurable logic.

For example with the architecture of the feed compressor can be deployed in an appliance such as system described hereinafter with respect to . Feed compressor is used to compress the content of the financial data stream arriving from various individual sources. Examples of compression techniques that can be used include the open standard glib as well as any proprietary compression technique that may be used by a practitioner of the present invention.

Preferably the feed compressor device is deployed in a physical location as close to the feed source as possible to thereby reduce communication costs and latency. For example it would be advantageous to deploy the feed compressor device in a data center of an extranet provider e.g. Savvis BT Radians etc. due to the data center s geographic proximity to the source of the financial market data . Because the compression reduces message sizes within the feed stream it will be advantageous to perform the compression prior to the stream reaching wide area network WAN thereby reducing communication latency through the network because of the smaller message sizes.

WAN preferably comprises an extranet infrastructure or private communication lines for connection on the inbound side to the feed handlers deployed in device . On the outbound side WAN preferably connects with device as explained below. It should be noted that WAN can comprise a single network or multiple networks and segmented by their inbound outbound role in relation to platform . It is also worth noting that a news feed with real time news wire reports can also be fed into WAN for delivery to device .

Device can be deployed in an appliance such as system described hereinafter with respect to . Whereas the conventional GPP based system architecture shown in deployed the functional units of feed handling ticker plant rule based calculation engines an alert generation engine options pricing last value cache LVC servers supplying snapshot and or streaming interfaces historical time series oriented databases with analytics and news databases with search capabilities in software on separate GPPs the architecture of can consolidate these functions either partially or in total in firmware resident on the reconfigurable logic such as one or more FPGAs of device .

Feed handlers LVCs time series databases and news databases can be implemented in device as described in connection with the above referenced and incorporated 60 814 796 application.

The rule based calculation engines which are engines amenable to implementation in a firmware pipeline and that allow a user to create his her own synthetic records whose field values are derived from calculations performed against information obtained from the LVC information extracted from a stream of update messages generated from the LVC or from alternate sources can optionally employ at least in part the options pricing techniques described herein. It should also be noted that the rule based calculation engine can be configured to create new synthetic fields that are included in existing records maintained by the LVC. The new values computed by the engine are computed by following a set of rules or formulas that have been specified for each synthetic field. Thus for example a rule based calculation engine can be configured to compute an option s implied volatility and or theoretical fair market price using the techniques described in connection with and include those values in existing records for the option maintained by the LVC.

The alert generation functionality within device can also be deployed in a firmware pipeline. Alert generation engines are similar to a rule based calculation engine in that they monitor the current state of a financial instrument record or set of financial instrument records and the alert generation engine will trigger an alert when any of a set of specified conditions is met e.g. when an option s actual price P is within some pre specified tolerance of an option s theoretical fair market price . An indication is then delivered via a variety of means to consuming applications or end users that wish to be notified upon the occurrence of the alert. This embodiment of the present invention provides great value by providing a practitioner with the ability to tightly couple alert generation functionality with other applications that react to the alerts generated thereby and reduce the effective latency of data processing e.g. a black box trading algorithm that may respond to an alert detected by the alert generation engine .

Options pricing can be implemented with a firmware pipeline in device via either the rule based calculation engine functionality described above or via a specific options pricing engine. Thus an option pricing engine that is part of device can be configured to perform a number of computations related to received options and their underlying instruments e.g. the theoretical fair market value of an option or the implied volatility of the underlying instrument based upon the market price of the option as described in connection with . However it should be noted that the options pricing engine need not be limited to the techniques described herein with respect to as a wide array of computational rules can be used for pricing options as is known in the art which can be deployed in firmware for platform . As explained above most if not all industry accepted techniques for options pricing are extremely computation intensive which introduces significant latency when the computations are performed in software. However by implementing option pricing in a firmware pipeline the market data platform can significantly accelerate the computation of option pricing thereby providing in important edge to traders who use the present invention.

Traders at workstations or application programs running on an entity s own trading platform can then access the streaming financial data processed by device via a connection to local area network LAN . Through this LAN connection workstations and application program also have access to the data produced by devices and . Like devices and devices and can also be deployed in an appliance such as system described hereinafter with respect to .

As described in the above referenced and incorporated 60 814 796 application device preferably consolidates the following functionality at least partially into firmware resident on reconfigurable logic an order book server an order router direct market access gateways to exchanges Electronic Communication Networks ECNs and other liquidity pools trading engines an auto quote server and a compliance journal. An order book server can employ an options pricing engine or the results from an options pricing engine to enrich the order book data with computed theoretical fair market prices and or implied volatilities for the options. Also an order router can be enhanced by employing an options pricing engine or the results from an options pricing engine. For example the order router may be configured to monitor the status of the order book. In doing so the order router can identify where liquidity exists in the market to help drive its order routing decisions. When making such order routing decisions knowledge of an option s implied volatility and or theoretical fair market price may be helpful. A feed compliance journal could also employ an options pricing engine or the results from an options pricing engine to correlate market prices with theoretical fair market prices and or implied volatilities to identify any potential market abnormalities.

A trading engine within device can also be deployed on reconfigurable logic. An algorithmic trading engine operates to apply a quantitative model to trade orders of a defined quantity to thereby automatically subdivide that trade order into smaller orders whose timing and size are guided by the goals of the quantitative model so as to reduce the impact that the original trade order may have on the current market price. Also a black box trading engine operates to automatically generate trades by following a mathematical model that specifies relationships or conditional parameters for an instrument or set of instruments. To aid this processing the black box trading engine is fed with real time market data. Thus the black box trading engine within device can be fed with the computed implied volatility and or computed fair market price s for each option so that the black box trading engine can make a decision on whether to buy or sell a given option. This combination of a black box trading engine with the accelerated options pricing functionality described herein synergistically creates incredible competitive advantages for practitioners of this embodiment of the invention in that the practitioner can conceivably take action on options available on the market before other traders even realize whether the available option represents a desirable deal or not.

An auto quote server is similar to a black box trading engine. The auto quote server operates to automatically generate firm quotes to buy or sell a particular financial instrument at the behest of a market maker wherein a market maker is a person or entity which quotes a buy and or sell price in a financial instrument hoping to make a profit on the turn or the bid offer spread. By employing an options pricing engine or the results from an options pricing engine an auto quote server s decisions as to what bid ask offers to place in the market can be driven at least in part by the computed theoretical fair market prices and or implied volatilities. For example it is conceivable that the bid offer spread may correlate to an instrument s volatility these and other relationships could be examined by a black box auto quote server that employs an options pricing engine or the results therefrom.

As described in the above referenced and incorporated 60 814 796 application device preferably implements an internal matching system engine in firmware resident on reconfigurable logic device preferably implements an order management system OMS in firmware resident on reconfigurable logic device preferably implements entitlements and reporting functionality device preferably implements management and monitoring and device preferably implements publishing and contribution server functionality.

The data store can be any data storage device system but is preferably some form of a mass storage medium. For example the data store can be a magnetic storage device such as an array of hard disk drives. However it should be noted that other types of storage media may also be suitable for use in the practice of the invention. For example the data store could also be one or more remote data storage devices that are accessed over a network such as the Internet a storage area network SAN or some local area network LAN . Another source destination for data streaming to or from the reconfigurable logic device is network by way of network interface as described above. In the financial industry a network data source e.g. the exchanges themselves a third party provider etc. can provide the financial data stream described above in connection with .

The computer system defined by main processor and RAM is preferably any commodity computer system as would be understood by those having ordinary skill in the art. For example the computer system may be an Intel Xeon system or an AMD Opteron system.

The reconfigurable logic device has firmware modules deployed thereon that define its functionality. In one instantiation the firmware socket module handles the data movement requirements both command data and target data into and out of the reconfigurable logic device thereby providing a consistent application interface to the firmware application module FAM chain that is also deployed on the reconfigurable logic device. The FAMs of the FAM chain are configured to perform specified data processing operations on any data that streams through the chain from the firmware socket module . Preferred examples of FAMs that can be deployed on reconfigurable logic in accordance with a preferred embodiment of the present invention are described above in connection with options pricing. For example the pipeline of including the components therein as embodied by the examples of can be deployed in a FAM chain to compute an option s implied volatility. The combinatorial logic stage of can also be deployed in a FAM chain to compute an option s fair market price if desired by a practitioner of the invention. Furthermore it should be noted that the lookup unit and one or more of the lookup tables described in connection with and could be deployed in the FAM chain if there are sufficient resources available on the reconfigurable logic. Similarly all or portions of the architecture described by can be deployed in a FAM chain to compute an option s theoretical fair market price.

The specific data processing operation that is performed by a FAM can be controlled parameterized by the command data that FAM receives from the firmware socket module . This command data can be FAM specific and upon receipt of the command the FAM will arrange itself to carry out the data processing operation controlled by the received command. For example a FAM that is configured as the initial module of pipeline of can be parameterized to define the values for n r and and the initial volatility band boundary values . . . . In this way a FAM that is configured to compute a specified data value for a given option can be readily re arranged to compute a data value for a different option by simply loading new parameters for the different option in that FAM. In this manner a high throughput can be maintained as multiple options are processed through FAM chain .

Once a FAM has been arranged to perform the data processing operation specified by a received command that FAM is ready to carry out its specified data processing operation on the data stream that it receives from the firmware socket module. Thus a FAM can be arranged through an appropriate command to process a specified stream of data in a specified manner. Once the FAM has completed its data processing operation another command can be sent to that FAM that will cause the FAM to re arrange itself to alter the nature of the data processing operation performed thereby. In a preferred embodiment of the system a FAM may process commands in parallel with data streams. For example new parameters for the next stream of data may be loaded into a parameter cache prior to completion of the current data stream. Not only will the FAM operate at hardware speeds thereby providing a high throughput of data through the FAM but the FAMs can also be flexibly reprogrammed to change the parameters of their data processing operations.

The FAM chain preferably comprises a plurality of firmware application modules FAMs . . . that are arranged in a pipelined sequence. As used herein FAM pipeline FAM pipelined sequence or FAM chain refers to an arrangement of FAMs wherein the output of one FAM is connected to the input of the next FAM in the sequence. This pipelining arrangement allows each FAM to independently operate on any data it receives during a given clock cycle and then pass its output to the next downstream FAM in the sequence during another clock cycle.

A communication path connects the firmware socket module with the input of the first one of the pipelined FAMs . The input of the first FAM serves as the entry point into the FAM chain . A communication path connects the output of the final one of the pipelined FAMs with the firmware socket module . The output of the final FAM serves as the exit point from the FAM chain . Both communication path and communication path are preferably multi bit paths.

The application software layer corresponds to high level functionality such as the type of functionality wherein one or more users or external programs interact with the application to define which data processing operations are to be performed by the FAMs and to define what data those data processing operations are to be performed upon.

The next layer is the module application programming interface API layer which comprises a high level module API and a low level module API . The high level module API can provide generic services to application level software for example managing callbacks . The low level module API manages the operation of the operating system OS level device driver software . A software library interface interfaces the high level module API with the low level module API . Additional details about this software library interface can be found in the above referenced and incorporated patent application Ser. No. 11 339 892.

The interface between the device driver software and the firmware socket module serves as the hardware software interface for the system . The details of this interface are described in greater detail in the above referenced and incorporated patent application Ser. No. 11 339 892.

The interface between the firmware socket module and the FAM chain is the firmware module interface . The details of this interface are described in greater detail in the above referenced and incorporated patent application Ser. No. 11 339 892.

It is worth noting that in either the configuration of or the firmware socket can make memory accessible to the PCI X bus which thereby makes memory available for use by the OS kernel as the buffers for transfers from the disk controller and or network interface controller to the FAMs. It is also worth noting that while a single FPGA is shown on the printed circuit boards of and it should be understood that multiple FPGAs can be supported by either including more than one FPGA on the printed circuit board or by installing more than one printed circuit board in the computer system. depicts an example where numerous FAMs in a single pipeline are deployed across multiple FPGAs.

As shown in inbound data from the kernel to the card is moved across the bus in the computer system to the firmware socket module and then delivered by the firmware socket module to the FAM chain . Outbound data from the card to the kernel are delivered from the FAM chain to the firmware socket module and then delivered by the firmware socket module across the PCI X bus to the software application executing on the computer system. As shown in the three interacting interfaces that are used are the firmware module interface the hardware software interface and the software library interface .

Thus as noted the output of FAM which comprises a stream of option messages is then passed to FAM which is configured as a rule based calculation engine to perform options pricing. FAM also preferably receives data from a real time field value cache to obtain LVC data as does the top 10 list FAM . Cache is preferably embodied by storage . The output from the rule based calculation engine FAM is then passed to parallel FAMs and . FAM can serve as a message multiplexer and receives messages from the outputs of FAMs and . FAM receives the messages multiplexed by FAM and serves to encode those messages to a desired format. FAM serves as an alert generation engine whose function is explained above and whose output exits the pipeline. FAM serves as a value cache update engine to ensuring that cache stays current.

FAM operates to map the known symbol for a financial instrument or set of financial instruments as defined in the parsed message to a symbology that is internal to the platform e.g. mapping the symbol for IBM stock to an internal symbol 12345 . FAM receives the output from FAM and serves to update the LVC cache via memory . The output of FAM is then provided in parallel to FAMs and .

FAM operates as a Top 10 list generator as described above. FAM operates as a Minute Bar generator as described in the above referenced and incorporated 60 814 796 application. FAM operates as an interest entitlement filter as described in the above referenced and incorporated 60 814 796 application and FAM operates as a programmatic calculation engine as described above. In this embodiment the programmatic calculation engine can employ options pricing as described in connection with any of the embodiments of . The outputs from FAMs and are then provided to a message formatter FAM which operates to construct a fixed format message of a desired format from the outputs of FAMs and .

In performing these tasks FAM is aided by memory that stores templates and field maps as well as memory that stores a symbol index. FAM is also aided by memory as well as memory which serves as an LVC cache. Memory is also accessed by FAM while memory is also accessed by FAM . FAM accesses interest entitlement memory as loaded from storage during initialization of the board .

While these figures illustrate several embodiments of FAM pipelines that can be implemented to process real time financial data streams it should be noted that numerous other FAM pipelines could be readily devised and developed by persons having ordinary skill in the art following the teachings herein.

Further still it should be noted that for redundancy purposes and or scaling purposes redundant appliances and can be deployed in a given market data platform .

Furthermore it should also be noted that a practitioner of the present invention may choose to deploy less than all of the functionality described herein in reconfigurable logic. For example device may be arranged to perform only options pricing in reconfigurable logic or some other subset of the functions listed in . If a user later wanted to add additional functionality to device it can do so by simply re configuring the reconfigurable logic of system to add any desired new functionality. Also the dashed boxes shown in enclose data processing functionality that can be considered to belong to the same category of data processing operations. That is devices and can be categorized as management operations. Device can be categorized as providing feed handling processing for data access value added services and historic services. Devices and can be categorized as direct market access trading systems. As improvements to reconfigurable logic continues over time such that more resources become available thereon e.g. more available memory on FPGAs the inventors envision that further consolidation of financial data processing functionality can be achieved by combining data processing operations of like categories as indicated by the dashed boxes thereby further reducing the number of appliances needed to implement platform . Further still in the event of such resource improvements over time for FPGAs it can be foreseen that even further consolidation occur including consolidation of all functionality shown in on a single system .

Thus a platform developed in the practice of the invention can be designed to improve data processing speeds for financial market information all while reducing the number of appliances needed for platform relative to conventional GPP based systems as well as the space consumed by such a platform. With a platform a user such as a trader at a work station or even a customer supplied application software program that accesses the platform via an application programming interface API can obtain a variety of information on the financial markets with less latency than would be expected from a conventional system. This improvement in latency can translate into tremendous value for practitioners of the invention.

While the present invention has been described above in relation to its preferred embodiment various modifications may be made thereto that still fall within the invention s scope.

For example it should be noted that the OPM computational units of can utilize a look up table approach to computing the theoretical fair market option price for a given input as shown in and . Such an OPM computational unit preferably would include a lookup unit in communication with a combinatorial logic stage like that described in connection with . The lookup unit preferably employs a lookup table such as that described in connection with . Lookup unit then operates to 1 receive an option message and an input volatility value 2 parse the option message to identify an index value for indexing the lookup table preferably the value of the option s time to maturity characteristic 3 retrieve the precomputed term s e.g. the A B pair located in the table entry defined by the time to maturity index and the volatility index . The retrieved precomputed term s can then be passed to the combinatorial logic stage which is configured to compute the option s theoretical fair market price.

As another example it should be noted that while the embodiment of depicts a plurality of pipelined computational modules wherein each computational module is configured to perform a different iteration of the algorithm shown in the system can also be configured such that the same computational module performs the computations for all iterations in which case the output from computational module will be fed back to itself for subsequent iterations. While this configuration will likely degrade the system s throughput capabilities such a design may be desirable in view of the amount of processing resources available on a processing platform to reduce the system s required amount of computational resources. In a like manner a hybrid approach can also be taken wherein a plurality of computational modules are arranged in a pipeline but where a subset of the computational modules possibly only one thereof is configured to perform the computations for multiple iterations of the algorithm shown in . In such a configuration a balance between throughput and available computational resources can be sought if the amount of available computational resources poses a challenge.

Similarly it should also be noted that while the embodiment of depicts a plurality of parallel OPM computational units operating within a computational module the computational module can also be configured such that is configured to perform a different iteration of the algorithm shown in the system can also be configured with only one OPM computational unit wherein the single computational unit will sequentially compute the theoretical fair option price for each of the different volatility values for a given iteration. Once again while this design will likely sacrifice throughput such a design may be desirable in view of the amount of computational resources available on a given processing platform. Also as mentioned above a hybrid approach can be taken wherein a plurality of parallel OPM computational units are deployed in the computational module but the number of OPM computational units is not sufficient to separately compute the theoretical fair market prices for each volatility value of a given iteration such that at least one of the OPM computational units operates sequentially on a plurality of the different volatility values for that iteration. Preferably the workload of volatility values for a given iteration would be evenly distributed across the plurality of sequentially operating OPM computational units . It should also be noted that in such a design the combinatorial logic stage would be configured with buffer space in which to store the outputs from the difference computational units while the OPM computational units are sequentially operating on the next set of volatility values for the given iteration.

It should also be noted that with the preferred embodiment the step of identifying the volatility band within which the implied volatility resides comprises defining the band from an upper and lower volatility value for which the computed theoretical fair market prices surround the option s actual purchase price. Another option for identifying the band within which the implied volatility resides is to determine the volatility value corresponding to the computed theoretical fair market price that is closest in value to the option s actual purchase price. The identified band could then be defined by adding some additional width around the determined volatility value in both directions.

Moreover while the preferred embodiment describes that the same pipeline can be used to process both call and put options as well as both American and European options wherein appropriate flags within option messages are used to control whether the pipeline treats a given option message as a call put and or American European option it should be noted that the system can also be configured to maintain multiple separate pipelines wherein each pipeline is configured to a given type of option e.g. a two pipeline system wherein one pipeline is for American options and one pipeline is for European options a two pipeline system wherein one pipeline is for call options and one pipeline is for put options and a four pipeline system wherein one pipeline is for American call options one pipeline is for American put options one pipeline is for European call options and one pipeline is for European put options . In such an embodiment option messages can be directed toward an appropriate pipeline based on its call put flags and or American European flags.

These and other modifications to the invention will be recognizable upon review of the teachings herein. As such the full scope of the present invention is to be defined solely by the appended claims and their legal equivalents.

