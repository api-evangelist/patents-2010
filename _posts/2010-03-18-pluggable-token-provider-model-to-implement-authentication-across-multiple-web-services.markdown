---

title: Pluggable token provider model to implement authentication across multiple web services
abstract: A pluggable token provider model for message level authentication across multiple web services is provided. Web service and token provider implementations within a client application are separated from an actual component that operates the business logic to formulate and understand a web request. The web service components may request web services to be executed and supply the body for the web service message while a common framework maintains the web services metadata, which includes definitions associated with respective tokens. The framework may further maintain token provider implementations that actually fetch authentication tokens and perform the web requests.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08572710&OS=08572710&RS=08572710
owner: Microsoft Corporation
number: 08572710
owner_city: Redmond
owner_country: US
publication_date: 20100318
---
As the complexity of a client applications grows so does the number of web services such applications interact with. Many web services employ authenticated sessions to the server. Some of the standard methods of authentication include using Integrated Windows Authentication IWA client certificate based authentication with mutual transport level security MTLS and various forms of message level authentications. Web services today are increasingly inclined towards message level authentication using the Web Service Security WSS protocol because of its extensibility. A WSS message itself might carry authentication tokens that are derived from Kerberos tickets X.509 certificates or XML tokens e.g. SAML tokens .

Web service implementations may share the authentication token providers. However the token itself used to authenticate at the message level is typically different because the target name of the web service against which the token is validated may differ. Moreover the token providers may be standards based proprietary implementation using a library or proprietary implementation using a protocol.

Thus there is no single interface available that provides the ability to consolidate different technologies such that a communications client can easily authenticate with various web services. Furthermore it is a challenge for enterprise clients as enterprise and cloud based services integrate to operate within an extensible framework that can integrate various web technologies and authenticate with them.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This summary is not intended to exclusively identify key features or essential features of the claimed subject matter nor is it intended as an aid in determining the scope of the claimed subject matter.

Embodiments are directed to a pluggable token provider model for message level authentication across multiple web services. Web service and token provider implementations within a client application may be separated from an actual component that operates the business logic to formulate and understand a web request. The web service components may request web services to be executed and supply the body for the web service message while a common framework may maintain the web services metadata which includes definitions associated with respective tokens. The framework may further maintain token provider implementations that actually fetch authentication tokens and perform the web requests.

These and other features and advantages will be apparent from a reading of the following detailed description and a review of the associated drawings. It is to be understood that both the foregoing general description and the following detailed description are explanatory and do not restrict aspects as claimed.

As briefly described above a pluggable token provider model for message level authentication across multiple web services may be implemented through separation of web service and token provider implementations within a client application from an actual component that operates the business logic to formulate and understand a web request. In the following detailed description references are made to the accompanying drawings that form a part hereof and in which are shown by way of illustrations specific embodiments or examples. These aspects may be combined other aspects may be utilized and structural changes may be made without departing from the spirit or scope of the present disclosure. The following detailed description is therefore not to be taken in a limiting sense and the scope of the present invention is defined by the appended claims and their equivalents.

While the embodiments will be described in the general context of program modules that execute in conjunction with an application program that runs on an operating system on a personal computer those skilled in the art will recognize that aspects may also be implemented in combination with other program modules.

Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that embodiments may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and comparable computing devices. Embodiments may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

Embodiments may be implemented as a computer implemented process method a computing system or as an article of manufacture such as a computer program product or computer readable media. The computer program product may be a computer storage medium readable by a computer system and encoding a computer program that comprises instructions for causing a computer or computing system to perform example process es . The computer readable storage medium can for example be implemented via one or more of a volatile computer memory a non volatile memory a hard drive a flash drive a floppy disk or a compact disk and comparable media.

Throughout this specification the term platform may be a combination of software and hardware components for managing web services and related network communications. Examples of platforms include but are not limited to a hosted service executed over a plurality of servers an application executed on a single server and comparable systems. The term server generally refers to a computing device executing one or more software programs typically in a networked environment. However a server may also be implemented as a virtual server software programs executed on one or more computing devices viewed as a server on the network. More detail on these technologies and example operations is provided below.

In a unified communication UC system such as the one shown in diagram users may communicate via a variety of end devices which are client devices of the UC system. Each client device may be capable of executing one or more communication applications for voice communication video communication instant messaging application sharing data sharing and the like. In addition to their advanced functionality the end devices may also execute applications that facilitate various web services such as participation in social networks web based document sharing searches and comparable ones. Furthermore traditional phone calls and similar communications may also be facilitated by these client devices through an external connection such as through a PBX to a Public Switched Telephone Network PSTN . Client devices may include any type of smart phone cellular phone any computing device executing a communication application a smart automobile console and advanced phone devices with additional functionality.

UC Network s may include a number of servers performing different tasks. For example UC servers provide registration presence and routing functionalities. Routing functionality enables the system to route calls to a user to anyone of the client devices assigned to the user based on default and or user set policies. For example if the user is not available through a regular phone the call may be forwarded to the user s cellular phone and if that is not answering a number of voicemail options may be utilized. Since the end devices can handle additional communication modes UC servers may provide access to these additional communication modes e.g. instant messaging video communication etc. through access server . Access server resides in a perimeter network and enables connectivity through UC network s with other users in one of the additional communication modes. UC servers may include servers that perform combinations of the above described functionalities or specialized servers that only provide a particular functionality. For example home servers providing presence functionality routing servers providing routing functionality and so on. Similarly access server may provide multiple functionalities such as firewall protection and connectivity or only specific functionalities.

Audio Video A V conferencing server provides audio and or video conferencing capabilities by facilitating those over an internal or external network. Mediation server mediates signaling and media to and from other types of networks such as a PSTN or a cellular network. Mediation server may also act as a Session Initiation Protocol SIP user agent.

In a UC system users may have one or more identities which is not necessarily limited to a phone number. The identity may take any form depending on the integrated networks such as a telephone number a Session Initiation Protocol SIP Uniform Resource Identifier URI or any other identifier. While any protocol may be used in a UC system SIP is a commonly used method.

SIP is an application layer control signaling protocol for creating modifying and terminating sessions with one or more participants. It can be used to create two party multiparty or multicast sessions that include Internet telephone calls multimedia distribution and multimedia conferences. SIP is designed to be independent of the underlying transport layer.

SIP clients may use Transport Control Protocol TCP to connect to SIP servers and other SIP endpoints. SIP is primarily used in setting up and tearing down voice or video calls. However it can be used in any application where session initiation is a requirement. These include event subscription and notification terminal mobility and so on. Voice and or video communications are typically done over separate session protocols typically Real Time Protocol RTP .

A UC system may provide a platform for social networking multimodal enterprise communications web based sharing services and similar environments. When a subscriber participates in such an environment they may take advantage of web services managed by one or more external servers e.g. and or by one of the servers internal to the UC system. Some of these services may require credential based authentication. Such services may be facilitated through web service components implemented within each client application. In a system according to embodiments web service and token provider implementations within a client application may be separated from a web service manager component that manages execution of the web services. The web service manager component may be part of a common framework that maintains the web services metadata token provider implementations a credentials manager and relevant interfaces for performing the web requests. More detailed examples are discussed below.

While the example system in has been described with specific components such as mediation server A V server and similar devices embodiments are not limited to these components or system configurations and can be implemented with other system configuration employing fewer or additional components. Functionality of systems employing a pluggable model for message level authentication across multiple web services may also be distributed among the components of the systems differently depending on component capabilities and system configurations. Furthermore embodiments are not limited to unified communication systems. The approaches discussed here may be applied to any data exchange in a networked communication environment using the principles described herein.

Token issuers that the client interacts with may be represented by token provider components in the model. The token provider components may be uniquely identified either with their Universal Resource Identifier URI or name in such a way that they can be referenced by the metadata model component by using web service metadata or WSS policy information fetched from web service components .

The metadata model component is responsible for maintaining information associated with the web service s . The metadata may be fetched employing standard mechanisms like WSDL metadata or WS MEX. Once the metadata is retrieved the metadata model component may maintain a mapping of metadata information with the identifier e.g. Universal Resource Locator URL of the web service that supplies the metadata. The metadata model component may also persist the metadata information in a file or similar persistent storage such that a parsing and retrieval cycle is not repeated every time the application starts.

The components implementing and or consuming web service requests and responses according to embodiments may be ignorant of the underlying token provider and metadata frameworks. These components may simply supply the payload of the web service call to be made e.g. for the Simple Object Access Protocol SOAP body of the web service . Once a particular call is made the web service manager component may extract the base identifier of the call and call into the metadata model component requesting the web service metadata. Once the metadata is retrieved the web services manager component may cycle thorough available bindings in the metadata and select an appropriate one based on the requested operation and authentication type depending on credentials provided by credential manager component . Then the token provider call may be made to fetch the token and the web service manager component may combine these pieces of information to construct an actual web service request e.g. a SOAP request .

The credential manager component may identify credential services also known as Logon Services with a user identifier. Calls made to the credential manager component by other components implementing the credential service may specify the identifier in the context of which a call is made. The credential manager component may be capable of handling multiple types of credentials. Examples of credentials that may be used in a system according to embodiments include but are not limited to username password certificates personal identification numbers and comparable ones. Credential manager component may query the user for credentials or supply any of the inbuilt credentials in the system. The latter may include credentials of the user logged in to the operating system at that time which may be fetched by a system call. If the credentials are to be queried the user interface may be provided with a command to display a prompt. The prompt can be either dismissed by the user by making a cancel actionable or answered by supplying credentials.

Once a credential is supplied to the credential manager component it may be saved in the component s data model for further usage. Saving in the model may be volatile and purged when the application is shutdown or another user logs in to the application. The credentials may be stored in nonvolatile memory following encryption and operating system calls are used for this purpose. For every credential available to the credential manager component the component may maintain a running copy of the success record map between each service as represented by identifier and the success record for that service. The success record might be in one of three states unknown success or failure . The unknown state may be set when the particular credential has never been used by the credential service. Any future calls to the credential manager from the service may give out this credential. A success record in the success state may record the successful usage for the service against a credential and the same may be used by the service until a failure is reported. Further calls into the credential manager component for a successful service s identifier may return the success credential. A failure state may record a logon failure of the service against a credential. Such a credential may not be used again with the service until the system is reset.

Moreover the credential manager component may persist credential information across application restarts by using a system resource like the registry a file and or a credential manager Application Programming Interface API . The credentials may be encrypted for security. Web service transport component may provide communication interface with other applications services such as those executed on server .

For exchanging messages calls between components of client and external resources example protocols such as SOAP and WSS have been mentioned above. SOAP Simple Object Access Protocol is a protocol specification for exchanging structured information in the implementation of web services in computer networks. The protocol utilizes Extensible Markup Language XML as its message format and usually relies on other application layer protocols most notably Remote Procedure Call RPC and HTTP for message negotiation and transmission. A SOAP message may include three parts an envelope defining what is in the message and how to process it a header containing application related information that is to be processed by SOAP nodes along the message path and a body containing information intended for the ultimate recipient of the message .

The SOAP architecture includes several layers of specifications for message format message exchange patterns underlying transport protocol bindings message processing models and protocol extensibility. Web Services Security WSS is a flexible and feature rich extension to SOAP for applying security mechanisms to web services. WSS describes three major mechanisms how to sign SOAP messages to assure integrity how to encrypt SOAP messages to assure confidentiality and how to attach security tokens. The specification allows a variety of signature formats encryptions algorithms trust domains and security token models e.g. X.509 certificates Kerberos tickets user ID password credentials SAML Assertion and custom defined tokens .

Referring to diagram illustrating relevant components interfaces and interactions within a client application according to embodiments is provided. As discussed previously token issuers with which the client interacts may be represented by token provider components in the client. The token provider components may be referenced by the metadata model component by using web service metadata or WSS policy information fetched from web service components and . As shown in diagram multiple token providers may be implemented by having a generic implementation that can be specialized for particular purposes. In a client application according to some embodiments token provider components may expose a GetToken interface and which when supplied with the target for which the token is to be provided supplies a token corresponding to that target. The tokens may be cached for as long as a token is valid and automatically renewed when calls to the token providers are made after the expiration time. Token provider components may register themselves with the metadata model component by calling into a RegisterTokenProvider interface of the latter. The registration may supply a name e.g. a unique name or URI of the token issuer.

The metadata model component is responsible for maintaining information associated with the web service s . The metadata information may be parsed and maintained as a series of binding entries. Each binding entry may include the actual endpoint URI against which the web service request is to be made a SOAP operation and action information of the web service an authentication type supported at the endpoint security policy information corresponding to the endpoint and or a token provider based the token issuer URI in the security policy.

When a GetToken interface call is to be made the security policy information may be included to support different types of tokens the token provider components may retrieve. For example the security policy may have an operating environment key that the token provider component may use to actually construct a RequestSecurityToken call to the token issuer. Once the metadata is retrieved the metadata model component may persist the metadata information in a file or similar persistent storage so that a parsing and retrieval cycle is not repeated every time the application starts.

Web service manager component may receive calls for particular web services through its ExecuteWebRequest interface and extract the base identifier of the call. Web service manager component may then call into the GetMetadata interface of the metadata model component requesting the web service metadata. Once the metadata is retrieved the web services manager component may cycle thorough available bindings in the metadata and select an appropriate one based on the requested operation and authentication type depending on credentials provided by the credential manager component. This may be followed by a token provider call to fetch a relevant token and the web service manager component may combine these pieces of information to construct an actual web service request. If no metadata is available at the metadata model component for a particular request the metadata model component may make a download call to a relevant web service. As discussed previously web service transport component provides interfacing services between the components within the client and other applications services executed on other computing devices.

The example systems in and have been described with specific servers client devices software modules and interactions. Embodiments are not limited to systems according to these example configurations. A pluggable token provider model for message level authentication across multiple web services may be implemented in configurations employing fewer or additional components and performing other tasks. Furthermore specific protocols calls and interfaces have been discussed in conjunction with describing embodiments above. Embodiments are also not restricted to those examples. Other protocols exchanges an interfaces may be implemented in a similar manner using the principles described herein.

As discussed above client applications executed on any of the client devices may include separated web service token provider web service management and credential management components. These components may manage authentication for web service requests through a metadata model as explained above. A communication service or application executed on one or more of the servers or single server may receive request s from users through client devices retrieve relevant data from data store s directly or through database server and provide the requested web service to the user s .

Network s may comprise any topology of servers clients Internet service providers and communication media. A system according to embodiments may have a static or dynamic topology. Network s may include secure networks such as an enterprise network an unsecure network such as a wireless open network or the Internet. Network s may also coordinate communication over other networks such as Public Switched Telephone Network PSTN or cellular networks. Furthermore network s may include short range wireless networks such as Bluetooth or similar ones. Network s provide communication between the nodes described herein. By way of example and not limitation network s may include wireless media such as acoustic RF infrared and other wireless media.

Many other configurations of computing devices applications data sources and data distribution systems may be employed to implement a framework for message level authentication across multiple web services. Furthermore the networked environments discussed in are for illustration purposes only. Embodiments are not limited to the example applications modules or processes.

Communication client application may be any application that facilitates communication between other applications and or modules on computing device and servers relevant to requested web services. Components may include web service components token providers web service managers credential managers and metadata models as discussed previously. Web service requests may be performed through message level authentication accomplished through interactions between the components. Communication client application may be separate application or an integral module of a hosted service that provides enhanced communication services to client devices. This basic configuration is illustrated in by those components within dashed line .

Computing device may have additional features or functionality. For example the computing device may also include additional data storage devices removable and or non removable such as for example magnetic disks optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage . Computer readable storage media may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. System memory removable storage and non removable storage are all examples of computer readable storage media. Computer readable storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computing device . Any such computer readable storage media may be part of computing device . Computing device may also have input device s such as keyboard mouse pen voice input device touch input device and comparable input devices. Output device s such as a display speakers printer and other types of output devices may also be included. These devices are well known in the art and need not be discussed at length here.

Computing device may also contain communication connections that allow the device to communicate with other devices such as over a wired or wireless network in a distributed computing environment a satellite link a cellular link a short range network and comparable mechanisms. Other devices may include computer device s that execute communication applications other web servers and comparable devices. Communication connection s is one example of communication media. Communication media can include therein computer readable instructions data structures program modules or other data. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media.

Example embodiments also include methods. These methods can be implemented in any number of ways including the structures described in this document. One such way is by machine operations of devices of the type described in this document.

Another optional way is for one or more of the individual operations of the methods to be performed in conjunction with one or more human operators performing some. These human operators need not be collocated with each other but each can be only with a machine that performs a portion of the program.

Process begins with operation where a web service request is received from a web service component within the client application at a web service manager component. The web service manager component may locate metadata associated with the requested web service at operation . If the web service manager component determines that credentials are needed at decision operation processing moves to operation where credentials are retrieved from a credential manager component. Otherwise processing may skip to operation where the requested web service is provided under the management of the web service manager component. The credential manager component may be capable of handling multiple types of credentials through associating a single user identity with multiple web services or associating multiple user identities with a single web service.

At operation following the retrieval of the credential s a token associated with the retrieved credential s may be requested from a token provider component. Metadata may be configurably processed for fetching tokens on a per service basis. There may be a token provider component for each web service per service token provider where the token provider components and web services are statically bound or dynamically bound. This is followed by operation where the web service manager component oversees authentication of the requested web service based on the received token. If the authentication is successful the requested web service may be provided at operation .

The operations included in process are for illustration purposes. A pluggable token provider model for message level authentication across multiple web services may be implemented by similar processes with fewer or additional steps as well as in different order of operations using the principles described herein.

The above specification examples and data provide a complete description of the manufacture and use of the composition of the embodiments. Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims and embodiments.

