---

title: Polymorphic automatic test systems and methods
abstract: An Analog/mixed signal automatic test system includes a software architecture that creates a virtual composite instruments through novel software dynamic allocation of low level resources. These virtual composite instruments provide backwards and forwards compatibility to a variety of automatic test equipment, known or available on the market. The virtual composite instruments are free from the normal constraints imposed by hardware implementations. Creation of the virtual composite instruments allows a single piece of automatic test equipment system to emulate many implementations of automatic test equipment, providing higher utilization, and therefore a lower cost test solution for device manufacturers. The test instruments are preferably object controls and are preferably instantiated and controlled by the test system server. This allows multiple users to control the tester simultaneously across, for example, the Internet.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08296612&OS=08296612&RS=08296612
owner: Practical Engineering Inc.
number: 08296612
owner_city: Framingham
owner_country: US
publication_date: 20100301
---
This application is a divisional of U.S. application Ser. No. 10 995 083 filed 11 21 2004 now U.S. Pat. No. 7 673 197 which claims priority from U.S. Prov. Application 60 524 231 filed on Nov. 20 2003 both of which are incorporated by reference.

The invention relates generally to automatic test equipment and more particularly to analog mixed signal automatic test systems.

Automatic test equipment provides the ability for semiconductor device manufacturers to test semiconductor devices. By testing every device the manufacturer can reject or accept the device and separate those rejected prior to them entering commerce.

Testing a semiconductor device typically involves the application of known signals to specific pins while measuring the output reaction of the device to those input signals. The output signals are then compared to the expected reactions and to determine whether the device under test DUT matches specified parametric limits.

Analog mixed signal automatic test equipment architectures have traditionally been designed with sets of instrumentation organized by function with higher cost instruments provided as shared resources and lower cost functions provided as pin by pin resources. For example low accuracy DC sources and meters provide a quick and inexpensive shorts open test at every pin while a shared high accuracy DC source and meter might provide the accuracies necessary for parametric evaluation. All Analog mixed signal automatic test equipment architectures contain a computer with test software to execute the tests automatically in sequence.

Analog mixed signal automatic test equipment software architecture traditionally follows the linear flow programming models where a single test program runs a single device under test in a very specific sequence. The program ends when the tests are gathered and evaluated against pre programmed test limits and a pass fail determination is made.

A variation on the linear flow programming model has been in use under the name of multi site testing in which a single test program running multiple identical DUTs synchronously is performed.

In both types of analog mixed signal automatic test equipment software architecture the job program testing the device under test is given full control of all of the resources within the tester. This means that all resources not needed to test the particular device under test remain idle for the duration of the test program. Importantly traditional analog mixed signal automatic test equipment software architectures do not allow the use of the unused resources for any other tasks during testing.

Traditional automatic test equipment software architectures may use unique and proprietary languages and or language structures. They also generally contain unique and proprietary bus structures. Users write job programs for this automatic test equipment and commonly the cost of writing these job programs exceeds the capital cost of the automatic test equipment. In order to change to another brand of automatic test equipment or to a newer version of the current system it is frequently necessary to port these programs to a new proprietary language at great expense.

Typical automatic test systems have a single executable job program running within a computer s operating system. This means that the control of the program is generally local to the computer that is running the tester. They do not allow for the running of the tester remotely. Since many of these testers operate within clean room environments it is necessary to go to the tester for debugging or setup of the program. Large losses of productivity can sometimes be traced to the suiting up process prior to entering a clean room environment.

Typical automatic test system architectures have a single job program written and run in the regional language English Japanese French etc. of the test system developer. This means that the user of the tester may have to understand the language of the tester manufacturer in order to adequately communicate tester performance during maintenance assistance from the tester manufacturer. Since tester performance is frequently an interpretation of test results from specialized job programs communication can be difficult across language barriers.

There are several prior art test systems such as the Teradyne A360 analog test system. The A360 system is an automatic test equipment ATE that has a physical instrument called M601. The M601 instrument contains seven V I sources one voltmeter and a 9 line 48 pin cross point matrix. The cross point matrix connects any one of the V I sources or the voltmeter to any one of the 48 DUT points as described in A360 Test Engineer s Manual published by and available from Teradyne Inc. 321 Harrison Ave Boston Mass. 1984 . For example in the A360 tester job program a user can connect 10 volts to DUT pin and volts to DUT pin and the Voltmeter to DUT pin . In such a case the A360 test program sets one of the M601 test instrument s seven V I sources e.g. S to 10v connects this V I source to one of the cross point matrix lines e.g. Line and then closes the cross point relay between line and DUT pin . Similarly the A360 test program sets S to 0 volts and connects it to e.g. Line and closes the cross point relay between line and DUT pin . The A360 test program can also connect the voltmeter to Line and close the cross point relay between Line and DUT pin . There are several disadvantages with this architecture that allocates resources to the test job programs at the initialization time and releases them only at the end of the program.

The A360 also has a physical instrument called M625. The M625 instrument is an AC source and measurement instrument consisting of two AC waveform generators for sourcing and a set of notch filters for input and an AC to DC converter. The output of the AC to DC converter can be connected to a system DC voltmeter for measurement of AC waveforms. The instrument can also be directly connected to the DUT as described in A360 Test Engineer s Manual . In a tester job program for example the instrument generates a 100 Hz sine wave as a source to the DUT and then it measures the harmonic noise component of the DUT s output. In this example the DUT s output is primarily 100 Hz with a noise component. The instrument measures the output using a notch filter at the primary frequency to eliminate the 100 Hz primary frequency component so that just the harmonic noise is detected. The noise passes through a bandpass filter that is set to the harmonic frequency of interest. The AC to DC converter then delivers to the DC voltmeter a DC voltage proportional to the amount of harmonic noise at the output. This process is repeated over and over again with different bandpass filter frequencies to measure the different harmonic frequency contents. This architecture is again relatively inefficient.

The A360 also has a physical instrument called M602. The M602 instrument is a single instrument has two high stability limited range voltage sources and one high precision voltmeter. This instrument can be directly connected to a DUT. A tester job program for example may need to provide a highly stable voltage of 10.0000 volts to a DUT to measure the DUT s output with very high precision. The instrument sets one of its two high stability sources to 10.0000 V and connects the M602 meter to the DUT s output for measurement. However this architecture is relatively inflexible since it cannot flexibly replace the connected meter with a meter having a higher accuracy such as the precision calibration meter of the instrument primarily used for test calibration .

Furthermore there are several prior art test systems called virtual test instruments or virtual front panels of test instruments. These test instruments use a windowing software package for example Microsoft Windows or Measurement Studio by National Instruments to provide the equivalent of an instrument front panel in a software form. In these virtual instruments buttons and windows and indicators replicate or mimic the front panel of a benchtop standalone instrument e.g. a digital multi meter DMM or a current source . The virtual front panel of these instruments replaces all or part of the buttons knobs and indicators that would normally be on a front panel of a higher level instrument.

Furthermore there are virtual instruments e.g. provided by National Instruments Inc. that provide a common front panel for multiple different vendor implementations of a common instrument. For example all DMMs share common attributes such as voltage range setting a voltage metering indicator etc. This single common virtual front panel instrument is suitable for operating instruments by different vendors or different models. The term Virtual instrument also describes the use of a common language API application programming interface specification for multiple similar instruments as embodied in the Virtual Instrument Software Architecture VISA standard IEEE 488.1 and IEEE 488.2 .

There is still a need for an automatic test system that solves at least some of the above problems or drawbacks.

The present invention is an analog mixed signal automatic test system method and computer program product having a novel architecture for testing analog and mixed signal semiconductor devices. Advantageously the automatic test system can create virtual composite instruments that mimic or emulate existing instruments and are dynamically allocated to running multiple DUTs with multiple job programs simultaneously.

According to one aspect the automatic test system includes a novel software architecture that provides concurrent running of multiple unique DUTs.

According to another aspect the automatic test system includes a novel software architecture that provides dynamic resource allocation of all tester source meter and control resources.

According to yet another aspect the automatic test system includes a novel software architecture that provides virtualization of loosely connected tester resources into recognizable instruments.

According to yet another aspect the automatic test system includes a novel software architecture that provides server capabilities of all test resources that is exposes all tester resources within a common server .

According to yet another aspect the automatic test system includes a novel software architecture that provides server capabilities of all test resources and graphical user interfaces to allow control and running of the tester in multiple languages remotely and simultaneously.

According to yet another aspect the automatic test system includes a novel software architecture that provides the capability to mimic the structure of other automatic test equipment including various prior art testers i.e. emulate the functionality and hardware architecture of the prior art testers such as the testers described above .

According to yet another aspect an automatic test system includes a hardware layer including at least two resources a server executable including at least two resource instrument components corresponding to the at least two hardware resources and a dynamic resource allocation component.

Preferred embodiments of this aspect include one or more of the following features The automatic test system further includes at least two virtual composite instrument components. The dynamic resource allocation component maintains a list of all available resources and their current state. The dynamic resource allocation component maintains a list of known instruments. The dynamic resource allocation component maintains list of virtual to physical connection possibilities. The dynamic resource allocation component builds a map of virtual to physical resource addresses. The dynamic resource allocation component performs the work of reserving and releasing resource instrument components. The dynamic resource allocation component after dynamically reserving resource components returns the components to an available resource pool when no longer needed.

The automatic test system is adapted to operate as a server. The automatic test system is adapted to interact with multiple clients concurrently or virtually concurrently. The automatic test system is adapted to run multiple job programs virtually concurrently and is adapted to run multiple debug environment components virtually concurrently.

According to yet another aspect a composite instrument component for use in an automatic test instrument includes at least two resource instrument components associated with at least two test elements and a composite instrument template for combining the two resource instrument components to form an interactive object.

Preferred embodiments of this aspect include one or more of the following features At least one of the test elements is a hardware test element. At least one of the test elements includes a combined hardware software test element. The combined hardware software test element may include an analog to digital converter ADC and an analyzer using a Fast Fourier Transform FFT technique.

The interactive object includes definitions provided in a Teradyne test system. Then the resource instrument components of the instrument are controlled by a Teradyne test system language. Alternatively the interactive object includes definitions provided in an LTX test system. Then the resource instrument components are controlled by an LTX test system language. Alternatively the interactive object includes definitions provided in a Credence test system. Then the resource instrument components are controlled by a Credence test system language. Alternatively the interactive object includes definitions provided in a specifically designed test system. Then the resource instrument components are controlled by the language of the specifically designed test system.

The test elements may be hardware sub components or hardware components. At least one of the hardware components is a high level discrete instrument. This high level discrete instrument may be a digital multimeter a voltage source a current source a frequency generator or other.

According to yet another aspect a site component for use in an automatic test instrument includes a test program component including dynamic link library for loading into an address space of a server and a programming environment component arranged to load the test program component into its address space and execute test program functions. The test program component and the programming environment component may be built as executables for running outside the server for remote operation of tester.

According to yet another aspect a server executable for use in an automatic test instrument includes at least two resource instrument components a composite instrument component a dynamic resource allocation component and a site component.

Preferably the composite instrument component includes at least two resource instrument components being associated with at least two test elements and a composite instrument template for combining at least two the resource instrument components to form an interactive object. The dynamic resource allocation component may include a list of resource instrument components including their availability status and a map of virtual composite physical resource addresses.

The polymorphic architecture allows the creation of one or more composite instrument components. A composite instrument is made from the combination of two or more hardware components or sub components of multiple physical instruments for the purpose of creating a new virtual instrument that resembles prior art instruments and responds to any prior art control software.

The dynamic resource allocation process allocates and de allocates one or more complete components or sub components of physical instruments i.e. hardware or software or their combination to facilitate two or more running test job programs dynamically. This allocation process allows resources to be shared among the multiple test job programs running simultaneously but asynchronously. This dynamic resource allocation process has numerous advantages over prior art using static resource allocation i.e. resources are allocated to the test job programs at initialization time and are released only at the end of the program.

The polymorphic automatic test system is a collection of hardware resource components and automated software for implementing measurement specific tasks. The test system combines several metering source and control resources together in software to create a composite instrument. This composite instrument can use different existing languages and does not need one common language.

The virtual composite instruments mimic existing instruments and are dynamically allocated to run multiple DUTs with multiple job programs simultaneously. The control of the virtual composite instruments is done by a tester server architecture that allows for full multi user remote control in multiple regional languages. This provides higher test resource utilization reductions in overall test time reductions in tester size and reductions in maintenance costs.

The novel system can also set up and use one or several virtual composite instrument graphical user interfaces. The novel system can also set up and use one or several virtual composite instrument programming interfaces and or connections.

The automatic test system along with its method and related computer architecture provides one or several of the following advantages The novel system provides an analog mixed signal automatic test equipment software architecture that allows multiple types of DUTs to be run simultaneously and asynchronously thereby allowing tester resources to be released and used by other test programs. This architecture increases the utilization of tester resources and increases the productivity of our novel tester.

The novel system provides an analog mixed signal automatic test equipment software architecture that allows the multitude of available job programming languages to be run without a long and costly re development of the test programs. In order to change to another brand of automatic test equipment or to a newer version of the current system it is no longer necessary to port these programs to a new proprietary language at great expense.

The novel system provides an analog mixed signal automatic test equipment software architecture that allows the complete remote operation of the tester. This means that the control of the program is no longer local to the computer that is running the tester but to the one running the tester remotely. Since many of these testers operate within clean room environments it is no longer needed to go to the tester for debugging or setup of the program.

Thus the novel system provides an analog mixed signal automatic test equipment software architecture that allows the complete remote operation of the tester by multiple users simultaneously and can do so in multiple regional languages.

The described automatic test systems are built on the general state of the art and various current methodologies of Automated Test Equipment for example as described in An Introduction to Mixed Signal IC Test and Measurement by Mark Burns and Gordon W. Roberts Oxford University Press 2001 which is incorporated by reference in its entirety. Below we provide an example of a snippet of test language source used in the novel dynamic resource allocation algorithm. The used snippet is based on Teradyne Pascal Steps Reference Manual published in 1985. Other examples of test languages include those in the following references Motorola DTS Software Manual 1995 Teradyne Image Base Language Manual 1996 . All of these publications are incorporated by reference in their entireties.

The automatic test system builds on several prior art system architectures for example Teradyne A360 A360Z A370 Test Engineering Manual and Teradyne Advanced Mixed Signal Instrumentation Manual 1996 wherein all of these publications are incorporated by reference in their entireties.

The automatic test system also builds on several prior art libraries and databases such as Analog Functional Testing at the Board and Box Level a Teradyne white paper by Stephen Fairbanks and The Measurement Revolution a National Instrument white paper 1999 wherein all of these publications are incorporated by reference in their entireties.

For example hardware layer may include one or a group of each of the following hardware elements A control bit a voltmeter an amp meter a current source a digital drive channel a digital receive channel a clock a time measurement meter an AC source a digitizer an RF source an RF detector an RF meter relays and or optical elements including a laser diode an LED or other sources of electromagnetic radiation and a photodiode a photoresistor or other detectors. Furthermore hardware layer may include groups of dissimilar resources arranged as a superset instrument such as an analog pin measurement unit a probe control unit a handler control unit a serial port controller a cross point matrix and or a relay multiplexer. The automatic test equipment system may also include software constructed instruments without hardware such as a datalogger a post process data analyzer or an oscilloscope window.

Each hardware resource is tightly bound and controlled from within a corresponding resource instrument component A B . . . N . The resource instrument component is a software driver written as a Microsoft COM component. Using component technology provides a robust optimized methodology to control individual resources from multiple sources. Preferably Microsoft COM or .NET technology is used but the present system is not restricted to the use of these technology.

Server executable includes resource instrument components A B . . . N virtual composite instrument components A B . . . M a dynamic resource allocation component and one or multiple site components . A network enables communication between test program executables A . . . N clients and server executable .

Each resource instrument component A B . . . N provides a well defined interface of methods properties and events that define completely the capability of the corresponding resource. Each virtual composite instrument component A B . . . M is an interactive object that defines a collection of resources that emulate prior art instruments. The low level instrument interfaces are passed on to the high level virtual composite instrument. The virtual composite instrument then takes the collection of instrument interfaces and builds a new instrument using the appropriate functionality exposed by the low level interfaces.

For example a new virtual composite instrument may be created by the combination of APMU Analog Pin Measurement Unit V I pin and TMU time measurement unit functionality where the new virtual composite instrument may have 1 or 2 pins which have time measurement capability in addition to V I capability. The virtual composite instrument enables this functionality using a new APMU TMU instrument along with its companion user interface. The new APMU TMU instrument is a virtual composite instrument that does not exist by itself but only if the resources of an APMU and a TMU are available and accessible as explained in connection with . Unlike some prior art instruments this does not require writing code in a test program for two separate instruments i.e. an APMU and a TMU nor the usage of two separate debug user interfaces for debugging the test program code.

Referring to each test program component can be loaded and linked in run time into a site component . Test program component is a Windows COM dynamic link library dll loaded into the server s address space. The programming environment component loads the test program component also a Windows COM dll into its address space and executes test program functions i.e. tests or other sequence related functions when it is accessed through its interface via the production mode user interface or other external debug user interfaces i.e. an instrument user interface .

The test program component and the programming environment component can be built as executables and run outside the server for remote operation of the tester. The test program components A . . . N contain the information needed to sequence hardware resources A . . . N in a way that tests an analog mixed signal semiconductor device under test DUT .

Each site component provides the structure from which to run test program component . Site component requests resources from dynamic resource allocation component . Dynamic resource allocation component responds to the requests from one or several site components to assemble virtual composite instruments from available resources.

Dynamic resource allocation component keeps a list of all available resources A . . . K and their current state. Dynamic resource allocation component also maintains a list of known instruments and a list of virtual to physical connection possibilities . These lists are built either manually for fixed connections interactively through a user interface for user modified connections or dynamically in cases where multiple virtual resources can connect to physical outputs such as in the case of a cross point matrix or a relay multiplexer connection. Upon request dynamic resource allocation component builds a map of virtual to physical resource addresses and maintains one or several maps . Furthermore dynamic resource allocation component performs the work of reserving and releasing resource components as described in connection with .

The output of the test language filter after step is a source program written in the native language of tester . As shown in block this new code may differ slightly syntactically but executes essentially identical functions. The native language source test program is submitted to a compiler step to create either a test program executable or a test program component step shown in for running by the new tester. The difference between either is whether it is being run remotely as an executable or embedded as a dynamic link library .

Regarding the second statement block the missing information for creating the test program is given i.e. connect to output pin . Installation of the second statement will follow the same logic as the first statement for the dynamic resource allocation control . The third statement PEI.Disconnect S or any statement of the type PEI.Release S causes the dynamic resource allocation component to reset the object s state within its reserved physical resource table . Referring to block the fourth statement PEI.STOP causes the dynamic resource allocation component to reset the state of all objects that were created for this site within its reserved physical resource table.

The test program executable or test program component is installed by a user into a specific test site block . The user controlled installation of the test program executable or test program component and execution is as follows The test site launches the running of the test program. Each program statement that includes an instrument statement causes a request from the dynamic resource allocation control shown in block .

Referring to block the test program sets PEI.SET. S V 2.5v and the dynamic resource allocation control looks into its reserved physical resource table in to see if it has already allocated a physical voltage source resource to the site that is requesting it step .

In step if an S instrument already exists it returns the interface to that S instrument step . In step if an S instrument does not exist the dynamic resource allocation control tests if it has all of the information necessary to select or create such an instrument step . In step the system asks if a virtual composite instrument of type S has been defined in the pool of virtual composite instrument components. If this is not the case the algorithm returns a response that indicates that more information is necessary step . If it is determined at step that an S instrument can be created the algorithm checks the available pool of instantiated virtual composite instrument components for availability step .

In step if a virtual composite instrument component is available to emulate an S instrument the allocation algorithm returns the interface to that emulated S instrument and places that state information within its reserved physical resource table step . In step if a virtual composite instrument component is not available to emulate an S instrument the algorithm checks the virtual to physical connection data table to see if a connection can be made by instantiating a new object of the type S to the requested output pin .

In step if there is a reserved physical resource the algorithm checks in step if an identical resource has been released by another test program. In step if there is no identical resource released by another test program the algorithm enters a time out loop and . That is the algorithm waits in the time out to look for a specific time period until an identical resource is released by another test program. The loop testing continues until a suitable object of type S becomes available or a time out occurs. After that period the algorithm returns an error step . If an identical resource is released by another test program the algorithm acquires a reference to the S object step returns the interface to this S instrument step and places that state information within its reserved physical resource table.

In step if there is no reserved physical resource the algorithm checks if an existing reserved S object may become available if it is released at a future time. The error message in step informs the caller of unavailable resources.

The reserved physical resource table is built and maintained dynamically within the dynamic resource allocation component . The virtual to physical resource database is built manually or semi automatically outside of the dynamic resource allocation component and contains a table of known prior art instrumentation the attributes of such instrumentation and the connection capability within the current test system. i.e. a new tester voltage source can be connected to output pins this database can be stored in a file a database or a system registry.

The pool of instantiated and un instantiated virtual composite instruments is created at startup of the server from information contained within other virtual composite instrument components combined with the information within the virtual to physical resource database. While these instantiations can be done dynamically it is generally inefficient to do so.

Referring again to or A and B as described above dynamic resource allocation component allocates resource instrument components A . . . N dynamically and returns them to the available resource pool when done. This maximizes the hardware resource utilization and prevents allocation of the same resource to two or more requestors at the same time.

Server executable component is interfaced to network using an aggregated environment server interface . This allows a uniform single interface point for all resources and optimizes the coordination of client operation. This is done by combining the interfaces of the integral components into aggregated environment server interface wherein resource instrument components virtual composite instrument components site components and dynamic resource allocation component are advantageously grouped within server executable component as shown in .

Server executable component is a server component that allows a plurality of client connections concurrently. It is constructed as COM executable multithreaded and implemented as a singleton. Since this component is built using component technology communications are transparent and functional across a plurality of communication methods including the Internet.

A plurality of production mode user interface client components provide an interface into the running job programs and all running processes for the user Multiple production mode user interface client components can be looking at the same running processes. A plurality of process monitor client components provide an interface for post processing and monitoring running processes.

The job program executables A . . . N are created from a VB.NET tester job language source program that is either created manually or derived from an existing tester job language source by passing it through a tester job language filter which converts known tester job language source into syntactically similar VB.NET tester job language source as mentioned in connection with . The VB.NET tester job language source can be debugged from within a VB.NET programming environment. The VB.NET programming environment has been supplemented by a plurality of virtual composite instrument debug add in components and virtual composite instrument language add in components .

The virtual composite instrument debug add in components are designed to add prior art instrument knowledge to the programming environment. They provide a real time interactive control of all virtual composite instruments from within the VB.NET environment. The virtual composite instrument language environment add in components add program methodology to the VB.NET environment. An example might be a known automatic program generator or a sequence table programmer.

The collection of tester job language filters virtual composite instrument language environment add in components virtual composite instrument debug add in components virtual composite instrument components and the dynamic resource allocation component combine to form the ability to completely mimic or emulate prior art automatic test equipment including test language test development environment hardware instrument functionality and instrument debug capability.

Referring to in order to completely emulate prior art instruments it is necessary that the prior art test programming language is understood and importable with minimal modification required by the test engineer. It is also required that the programming development environment with which he programs and debugs the new test program provides the tools and features that were available within the prior art test programmer s development environment. Also the instrumentation of the prior art tester must be available in order to do the physical testing of DUT. These elements are the necessary ones to completely satisfy this need.

Prior art testers are generally programmed in simple but well described test languages that are variants of different known languages such as Basic C or Pascal. The test language generally supports a subset of the language structures of the known language and libraries of instrument related subroutines functions or procedures. They generally maintain the syntax of the known language but add some syntactical references to that language such as the use of units combined with numbers i.e. 4V means a voltage of amplitude 4.0000 volts .

It is necessary to filter these programs into a source code understandable by the new tester. The tester job language filter is a program that converts the existing prior art test program into a new language supported for component development such as VB VB.NET VC VC VC .NET and Java to name a few. The output of the filter must be syntactically correct and must maintain the flow and structure of the prior art test program.

With many prior art testers a development environment was provided that included capabilities not found in the programming development environments of new languages. Many of the new language program development environments are extensible to the point that it is possible to provide components to add capabilities that emulate the prior art development environment. For example in the Teradyne Pascal Steps development environment there was the notion of a table resembling a device test specification list known as a Sequencer. The Sequencer looked like a table of information that provided information on the test procedure name its limits and the disposition of the part if it violated the test limits. In one preferred embodiment of the invention the use of a virtual composite instrument language environment add in component is added to the VB.Net programming development environment to add the capability to show a procedure in a table similar to the prior art Sequencer table rather than in sequentially programmed lines of code.

Another example might be the use of visual icons to represent test functions that can be built graphically and can be implemented through a virtual composite instrument language environment add in component. Yet another example might be an automatic program generator that could output language statements based on a database input.

Many prior art run time environments contain methods for interacting with the instruments to extract status or results or to change the state of the instrument dynamically.

It is necessary to create a component that allows the interactivity with the user on a demand basis. Virtual composite instrument debug add in components can attach to the interface of existing virtual composite instruments and provide the ability to monitor status or results and to force changes to the state of the emulated virtual composite instrument.

Each prior art instrument must be defined within the boundaries of the new hardware resources available. The virtual composite instrument component contains all of the functions data and capability of the emulated instrument as well as the information necessary to determine what collection of new hardware resources are necessary to provide that instrument capability.

Any hardware resource or collection of hardware resources that has more capability than the prior art instrument can be used. It is important to note that the limits of the prior art instrument must be maintained or a risk of damage to the device under test may occur.

For example in the Teradyne S source the voltage is limited to 60 V and the current is limited to 200 mA. If a new hardware resource can exceed those limits the virtual composite instrument component must and will constrain the outputs to safe values.

The operation of Dynamic Resource Allocation Component is described above in detail in algorithm shown in and in the process provided below. By building the working software of the tester as a server multiple clients multiple job programs and multiple debug environment components can run concurrently. The aspect of the invention allows multiple programs written in different computer languages to be run monitored and debugged concurrently.

By building the working software of the tester as a server using component software technologies multiple clients running the tests in a plurality of locations and regional languages can connect control and view the status of a single or a plurality of running programs across any TCP IP communication path including the Internet.

By building the working software of the tester as a server using component software technologies multiple job programs running in a plurality of locations and regional languages can connect control and view the status of a single or a plurality of running programs across any TCP IP communication path including the Internet. These programs need not be a common device under test but can be a variety of devices under test.

The polymorphic automatic test system uses a graphical user interface that includes graphical objects and commands. The graphical objects are represented on the screen and the commands create edit and or delete the objects.

Different graphical objects embody different concepts. For example an on off switch of a instrument can be represented by a button the button has two states ON and OFF. These states can be represented graphically by changing the image contained within the button to show depression of the button when on. When the user directs a mouse pointer to the button and presses the mouse button the graphical button changes it s image to reflect the changed state. The states may alternatively be shown through text or color or both where the color of the button changes from red to green to denote state or the text changes from ON to OFF to denote state. A prior art voltmeter may have included an indicator made up of a printed scale and a needle pointer that moved to indicate voltage. A graphical representation might include a window containing a picture of the printed scale and an overlay picture of a needle pointer that is redrawn to indicate voltage. Alternatively it could be represented by an image of an LED indicator showing the voltage value. That is the image is reified into a tool. This reification creates new objects that can be manipulated by the user.

The test system also uses an interaction instrument that is a mediator between the user and objects of interest wherein the user modifies an image which in turn acts on the objects.

The test system is a polymorphic test system that enables a single command to act onto several objects of different types. Thus the system s polymorphism not only allows the use of a small number of commands applicable to different drivers but also the use of prior art commands that were designed to control prior art instruments even as reification increases the number of object types. This property allows the system to utilize several different languages.

Applying a command to a group of objects involves polymorphism at several levels. First most commands that apply to an object can also be applied to a group of objects of the same type by applying them to each object in the group. Second such commands can also be applied to a heterogeneous group of objects i.e. objects written in different languages as long as they have meaning for each of the individual object types.

The architecture of the test system enables also reuse that involves previous input previous output or both. The input reuse makes a previous user input available for reuse in the current creation of composite instruments. The system s polymorphism facilitates input reuse because a sequence of actions can be applied in a wider range of composite instrument components.

According to one illustrative example the Teradyne A360 analog test system includes the M601 instrument using a crosspoint matrix as described in the Background. The polymorphic automatic test system does not use the crosspoint matrix due to accuracy limitations but uses preferably a tester per pin architecture. The tester per pin architecture has V I sources and meters on every available DUT pin. These tester per pin resources are accessed and programmed independently. Using the present polymorphic architecture an M601 virtual composite instrument is created using tester per pin hardware resources. Either all 48 tester per pin resources can be allocated to emulate all functions of the M601 virtual instrument or a subset of the tester per pin hardware can be allocated using only those resources that are actually required.

For example the present tester system can emulate the physical Teradyne A360 tester job program in order to connect 10 V to DUT pin 0 volts to DUT pin and the Voltmeter to DUT pin . The actual prior art setup using the crosspoint matrix is described in the Background above. The present test system simply connects the tester per pin resources directly to the DUT pins and utilizing directly the resources. The virtual composite instrument is created out of tester per pin resources connected to DUT pins and . The Virtual Graphical user debug window shows seven V I sources one meter and a crosspoint matrix having 9 lines 48 pins even though such physical instrument is not present within the test system . The programming and debugging of the job program is done without regard to the underlying hardware architecture. The interactive debug window allows interaction based on the seven V I sources one meter and the crosspoint matrix. Toggling a crosspoint for example actually reprograms and connects the appropriate V I source or meter but the user actually sees a crosspoint matrix closure on his debug window.

According to another illustrative example the Teradyne A360 analog test system includes the M625 instrument briefly described in the Background. The present test system preferably uses several arbitrary waveform generators AWG for AC waveform generation. AC signal measurement is done with a set of Notch filters and a digitizer. The AWG s are used because they have far more capability and are more flexible in waveform generation. Digitizers are used since they deal better with complex AC waveforms. The test system generally has many AWG s and digitizers available to connect to the DUT pins. Using the polymorphic architecture the M625 virtual composite instrument is created using the AWG s and the digitizers and notch filters.

In this example the present test system uses a tester per pin architecture using the AWG as the source for a 100 Hz signal to the DUT and a single notch filter connected to the output of the DUT to eliminate the primary frequency. The filtered signal is then connected directly to a digitizer. The digitizer sample is taken on the resultant signal which contains a complex waveform. This waveform is then analyzed using Fast Fourier Transform FFT techniques. All of the harmonic component content are derived from the FFT result.

In the ATE system based on the present polymorphic architecture the M625 virtual composite instrument is created using 2 AWG resources and a Notch filter resource and a digitizer. The virtual graphical user debug window shows two waveform generators a notch filter and a series of bandpass filters even though these physical instruments do not reside within the tester. The programming and debugging of the job program is done without regard to the underlying hardware architecture. The interactive debug window allows interaction based on the two waveform generators notch filter and series of bandpass filters. The change of a bandpass filter for example simply changes the frequency of interest result from the FFT analysis.

According to yet another illustrative example the Teradyne A360 analog test system includes the M602 instrument also briefly described in the Background. The present test system the tester per pin voltage sources are sufficient in stability to provide the source but the meters on these pins may not be of high enough accuracy to satisfy the test requirement. However a precision calibration meter primarily used for test calibration includes a voltmeter of sufficient precision to satisfy the test requirements. The polymorphic test system uses the above described architecture for creating an M602 virtual composite instrument using tester per pin voltage resources for sources and the system calibration meter for measurement.

Specifically in the ATE system based on polymorphic architecture the virtual composite instrument is created out of one or more of the tester per pin voltage resources and the system calibration meter. The virtual graphical user debug window shows two high stability voltage sources and a single high accuracy voltmeter even though that physical instrument is not present within the tester. The programming and debugging of the job program is done without regard to the underlying hardware architecture. The interactive debug window allows interaction based on the two high stability sources and the single high accuracy voltmeter.

A user operates the polymorphic test system by executing the following process The user opens text editor of his choice and creates tester job program source in a selected prior art test system language. The user s output is saved to hard disk or some other data storage media connectable to the system.

The user opens a program development environment that is either Microsoft Visual Studio.NET or Microsoft Visual Basic.NET . The Program Development Environment has been configured to reference multiple Virtual Composite Language Add In Components and Virtual Composite Instrument Debug Components . The Program Development Environment is configured to reference a Tester Job Program Creation wizard. The Tester Job Program Creation wizard is a set of algorithms that automate a typically manual procedure of filtering and saving the tester job program and loading it into the development environment.

The user starts the Tester Job Program Creation wizard and then selects tester job language input filter from the list presented by the Tester Job Program Creation wizard. Then the user selects the tester job program source for input to the selected tester job language input filter . The Tester Job Program Creation wizard processes the tester job program through the selected tester job language filter.

The filter translates the job into VB.NET syntax. In this process the user tester job program is passed through the filter one line at a time. The filter translates all standard program lines into syntactically correct VB.NET language statements. Furthermore the filter maintains a list of all unresolved tags or references. The filter translates all Instrument Program related steps into syntactically correct Virtual Composite Instrument steps. Then the filter continues until end of tester job program source. The filter makes a second pass through the program to resolve all tags and references.

The test job language filter outputs a syntactically correct VB.NET source program. The Tester Job Program Generation wizard saves the output VB.NET source program to hard disk or some other connected data storage media. The Tester Job Program Generation wizard loads the output VB.NET source program into the program development environment. The user builds compiles the program to either an executable test program by pressing the build button on the Program Development Environment. If the build is not successful the user corrects the program and rebuilds until successful. The user saves the output executable program to hard disk or other data storage media.

The user can then choose to run the program from the Program Development Environment or from the Production Mode User Interface. To run from the Program Development Environment the user presses the run button provided in the Program Development Environment. Alternatively to run from the Production Mode User Interface the user starts the Production Mode User Interface Program. The user can load the executable program by selecting the load job program action from the menu bar of the Production Mode User Interface. The executable program is assigned a test site either automatically or by user selection. The Production Mode User Interface loads the selected program from hard disk.

The program runs line by line executing each statement in order. When a statement is reached that refers to a Virtual Composite Instrument execution occurs as follows A call is made to the Dynamic Resource Allocation Module to determine if this virtual composite instrument is already allocated. The dynamic resource allocation module checks the list of instantiated virtual composite instrument components A B . . . N .

The polymorphic test system executes the testing sequences using the particular resources as defined in the tester job program. When a specific Virtual Composite Instrument is no longer needed after performing the test it is released as described above.

When a statement releasing a Virtual Composite Instrument is executed the Dynamic Resource Allocator releases all resources attached to this Virtual Composite Instrument by removing them from the reserved physical resource list. Then the Dynamic Resource Allocator un instantiates the Virtual Composite Instrument.

Program continues all statements in the defined order until an end statement is seen. When the end statement in the program is reached the Dynamic Resource Allocator releases all resources attached to all Virtual Composite Instruments allocated to this site by removing them from the reserved physical resource list. As shown above there may be several sites A . . . N . The Dynamic Resource Allocator un instantiates all of the Virtual Composite Instruments allocated to the site. When the Dynamic Resource Allocator un instantiates all of the Virtual Composite Instruments allocated to all sites the program ends execution.

The polymorphic test system can be used for many testing purposes. In the semiconductor manufacturing industry the test system is used to test various types of semiconductor chips including chips under production. These are used for example as amplifiers voltage regulators power management devices consumer devices TV devices memories imaging chips automotive chips clock generation chips analog to digital converters digital to analog converters rectifiers resistors or diodes. The test system is also used to test flat panel displays and other devices that may not use Si or GaAs wafers. In the hybrid manufacturing industry the test system is used to test hybrid microelectronic circuits e.g. circuits used to combine many semiconductor chips on a ceramic or porcelain substrate for use in areas where heat or temperature is a significant factor such as in the engine compartment of an automobile or in orbiting satellites. In the PC board industry the test system is used to test complete printed circuit boards including boards loaded with many semiconductor chips or other electronic elements. The test system is also used to test various mechanical or electromechanical devices including devices fabricated by micro machining or other process and test biochips.

Having described various embodiments implementations and example of the present invention it should be apparent to those skilled in the relevant art that the foregoing is illustrative only and not limiting. There are other embodiments or elements suitable for the above described embodiments described in the above listed publications all of which are incorporated by reference as if fully reproduced herein. Additional embodiments include combinations of elements described above in connection with the provided embodiment. The functions of any one element may be carried out in various ways in alternative embodiments. Also the functions of several elements may in alternative embodiments be carried out by fewer or a single element.

