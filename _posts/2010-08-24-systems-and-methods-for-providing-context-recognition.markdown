---

title: Systems and methods for providing context recognition
abstract: Systems and methods are disclosed for launching a child application to perform functions on a document created by a parent application without the need for integration of the child application within the parent application. In one implementation, a system detects a child application available for activation by a processor of a computer and determines what functions the child application can perform. The system then determines that the function can operate on an open file, and once the system receives a selection of the function, the system launches the child application and performs the function on the open file. In another implementation, the system determines that the function may operate on a plurality of open files, creates an interface that allows selection of one of the plurality of open files, and launches the child application and performs the function on a selected file.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08381104&OS=08381104&RS=08381104
owner: Litera Technologies, LLC
number: 08381104
owner_city: McLeansville
owner_country: US
publication_date: 20100824
---
This application claims priority from U.S. Provisional Application Ser. No. 61 331 856 filed May 6 2010 the disclosure of which is expressly incorporated herein by reference.

This disclosure generally relates to the management and integration of software products and more particularly to a method and system for managing child software applications that integrate with parent software applications.

For decades a number of software applications have become core products used by professionals to manage various business operations. For instance word processing spreadsheet document processing presentation and drawing software applications such as Microsoft Word EXCEL PowerPoint Visio PROJECT and Adobe Acrobat have become ubiquitous in business and personal computer usage. Users create edit and otherwise manage their documents and other files within these applications. Thus it these types of software applications are referred to herein parent applications.

Since their inception parent applications have steadily gained popularity and now have become the foundation for most business and personal computing environments. As a result third party applications were developed and designed to integrate with parent applications to provide additional features that compliment those of the parent applications. These applications referred to herein as child applications obtained functionality through their integration within a parent application or through user navigation from the child application to a location of a saved file created and or edited in a parent application.

The diversity and growth of child applications has resulted in a computer programming environment where parent applications include multiple child applications that have been integrated within the parent application and expand the capability of the parent application. When a child application is integrated with a parent application the functionality offered by the child application becomes available from within the parent application. The parent application may make the child functionality available through for example a button on a toolbar or through a menu option.

Because however the child applications depend on services provided by the parent application and may not work by themselves the child applications must load when the parent application loads. For example a business user s word processing document might be associated with a number of child applications and thus for example include in its toolbar additional buttons relating to the various functionalities of the child applications. These functionalities may include functionalities to 1 compare the document to another 2 convert the document to PDF 3 format tables of contents and numbering 4 add document identification numbers 5 manage references and other footnotes included in the document 6 enable robust image editing 7 collaborate with other users 8 manage externally designed templates 9 integrate with a document management system 10 track manage and clean metadata 11 conduct and manage screenshots and 12 incorporate contacts from a contact management system. In scenarios where these twelve functionalities need to run one user of a single parent application requires a minimum of twelve integrations. In addition a minimum of twelve additional functionality buttons must be added to the interface of the word processing program thus crowding the field of the word processing s preexisting traditional functionality buttons.

Integrating child applications in a parent application is typically done using the native application programming interface API provided by parent applications such as COM objects ODMA integrations command line integration DLL integration or other known methodologies. Unfortunately these multiple integrations create a computing environment that hinders productivity and causes major delays in the loading of the parent application because all the integrated child applications integrations must also be loaded.

Regardless of the method used to create the integrations the child application s integration resides within the parent application. Each time a user starts the parent application the integrations or add ins as they are commonly called have to load and start. In addition each time a user closes the parent application the add ins have to unload and stop. Thus the greater the number of integrations the longer the time the parent application takes to open or close creating a loss of productivity for the users. Additionally the integrated child applications open the parent application up to a range of potential errors bugs and other technical issues and conflicts caused by multiple child applications seeking integration with the parent application.

However without add ins accessing the functionality of a child application that is dependent upon a parent application requires multiple steps leading to lost productivity. For example a user wishing to compare two versions of the same PDF document in a case where that comparison functionality is not integrated or added in as another functionality in the Word Processing software e.g. Microsoft WORD must first open the document comparison child application then browse to and select the saved versions of the two files to compare and finally submit a request to process the comparison of those two files. Often the IT departments of company networks frustrated by the problems and the consequential support burden created by add ins remove them. The add in removal makes the users workflow somewhat less productive.

Currently there are only two options for dealing with the management and integration of child applications with parent applications. Users may accept the loading and unloading problems related to integrating add ins or remove the add ins and accept the loss of productivity. Both of these are not ideal options to increase the productivity and efficiency of computer users. As such current systems implementing child and parent applications are dated and have reached their capacity to improve productivity related to functionality and workflow efficiency.

Therefore it is desirable to provide users with the functionality offered by child applications without the inherent problems related to the current integration of those functionalities. Thus there is a need for a method and system of software coupling that does not require child applications to integrate with and be presented inside of parent applications or require users to navigate through multiple steps to enable a child application to use files created in a parent application. Methods and systems consistent with the disclosed embodiments of the invention address these and other problems of current child application integrations.

Disclosed embodiments provide a context recognition and activation engine that allows a user to apply the functionality of one or more child applications to the subject matter of a parent application. For example disclosed embodiments may give a user the ability to send a word processing document to one or more child applications such as meta data removal or document comparison applications for processing.

Consistent with disclosed embodiments a method is provided for launching a child application without integrating the child application into parent applications. In one aspect the method includes detecting a child application available to a processor of a computer and determining a function that is associated with the child application. The method may further include determining one or more parameters used to perform the function of the child application and generating information used to display a representation of the function in an interface that is separate from a parent application so that the function is selectable and launches the child application upon selection.

Consistent with other disclosed embodiments a system is provided for launching a child application without integrating the child application into a parent application. In one aspect the system includes a processor and a memory. The memory includes instructions that cause the processor to generate information used to display a representation of a plurality of functions available in a child application so that the plurality of functions are selectable. The memory may further include instructions that cause the processor to recognize an open file created by the parent application. The memory further includes instructions that cause the processor to determine that one of the plurality of functions can be performed on the open file to receive a selection of the representation of the one of the plurality of functions and to launch the child application to perform the one of the plurality of functions on the open file.

Consistent with other disclosed embodiments tangible computer readable storage media may store program instructions that are executable by a processor to implement any of the methods disclosed herein.

It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and are not restrictive of the disclosed embodiments as claimed.

Disclosed embodiments may enable a context recognition and activation engine to recognize opened files created from various parent applications. The activation engine may then make the functionality of child applications available to a user outside of a direct integration relationship with parent applications or the multi step process of navigating to saved locations of those same files. Disclosed embodiments may accomplish this by for example creating an interface or another parent application that includes the API for various child programs. The interface is configured to recognize the functions that each child application can perform and the parent application files the functions can be performed on. In one embodiment the context recognition and activation engine may communicate with an operating system to determine what files are open what parent application opened them and match this information with the child program APIs.

Reference will now be made in detail to exemplary embodiments examples of which are illustrated in the accompanying drawings. Wherever convenient the same reference numbers will be used throughout the drawings to refer to the same or like parts.

In accordance with certain disclosed embodiments a context recognition engine and activation engine may run on a computer system including a number of components such as a processor nonvolatile storage memory operating system input output I O devices and bus . In one aspect a Context Recognition and Activation Engine CRAE engine may comprise context recognition engine and activation engine . CRAE engine may reside in memory and may be loaded from storage or from other external tangible storage medium not shown through I O devices . Instructions in CRAE engine may be executed by processor . In certain embodiments as shown in CRAE engine may comprise a context recognition engine residing on client terminal and activation engine residing on server which is connected to client computer or terminal over network . In other embodiments CRAE engine may reside on server and client terminal may use a thin client to access CRAE engine . In disclosed embodiments activation engine and context recognition engine may be one software file. CRAE engine may work with processor or processor to perform features of disclosed embodiments described below.

In one embodiment a computer system may implement CRAE engine to perform one or more functions consistent with certain embodiments. Computer system may be a general purpose or notebook computer a mobile device with computing ability a server a mainframe computer or any combination of these computers and or affiliated components. Computer system may communicate with network not shown in through I O devices . For example computer system may establish a direct communication link with network such as through a LAN a WAN or other suitable connection that enables computer system to send and receive information as described herein. Computer system may be a standalone system or may be part of a subsystem which may in turn be part of a larger system such as a networked desktop emulator.

Processors and may be one or more known processing devices such as a microprocessor from the Pentium family manufactured by Intel or the Turion family manufactured by AMD . Memory and may be one or more storage devices configured to store information used by processor or to perform certain functions related to disclosed embodiments. Memory may also include instructions that enable a parent application to run on system . Alternatively the instructions that enable a parent application to run on system may be stored in external storage or available from memory over network . Storage may be a volatile or non volatile magnetic semiconductor tape optical removable nonremovable or other type of storage device or tangible computer readable medium.

In one embodiment memory may include one or more context recognition child application and or activation programs or subprograms loaded from storage or elsewhere that when executed by processor perform various procedures operations or processes consistent with disclosed embodiments. For example memory may include context recognition engine that may communicate with operating system to 1 determine and recognize open files 2 determine and recognize the parent application used to open the files and 3 determine what child application functions can be performed on the open files. Memory may also include activation engine that assists in the identification of a file that will be the object of a function of a child application and initiates a call to the child application for the performance of the function on the identified file. Alternatively memory may include activation engine . Memory may also include child applications and an integrative support program that links the other programs and allows them to use a common database provides a common user interface performs basic bookkeeping tasks such as storing the user s input etc. and provides user guidance and help. Memory may also include other programs that perform other functions and processes such as programs that provide communication support Internet access etc. Memory may also include child application and an integrative support program that allow applications in memory to be accessed by system .

Methods systems and articles of manufacture consistent with disclosed embodiments are not limited to separate programs or computers configured to perform dedicated tasks. For example memory may be configured with a context recognition engine that performs one or more functions when executed by processor . For example memory may include program that performs one or more functions of the context recognition engine . Alternatively memory may include multiple programs that collectively perform one or more functions of context recognition engine . Moreover processor may execute one or more programs located remotely from system . For example system may access one or more remote programs such as those found in memory that when executed perform functions related to disclosed embodiments.

Memory may be also be configured with operating system that performs known operating system functions when executed by system . By way of example operating system may include Microsoft Windows Unix Linux Apple Computers type operating systems Personal Digital Assistant PDA type operating systems such as Microsoft CE or other types of operating systems. Accordingly embodiments of the disclosed invention will operate and function with computer systems running any type of operating system. In one aspect operating system may communicate with context recognition engine or activation engine to deliver information about what processes are currently running and what process currently has focus.

I O devices may comprise one or more input devices and one or more output devices that allow data to be received and or transmitted by system . For example I O devices may include one or more input devices such as a keyboard touch screen mouse and the like that enable system to receive data from a user such as selection of a active process selection of a functionality selection of one of a plurality of open processes etc. Further system may include I O devices that communicate with one or more output devices such as a display screen CRT monitor LCD monitor plasma display printer speaker devices and the like that enable system to present data to a user. I O devices may also include one or more digital and or analog communication input output devices that allow system to communicate with other machines and devices. The configuration and number of input and or output devices incorporated in I O devices may vary as appropriate for certain embodiments.

Computer system may also be communicatively connected to one or more databases not shown locally or through network . The databases store information and are accessed and or managed through system . By way of example the databases may be document management systems Microsoft SQL database. SharePoint databases Oracle databases Sybase databases or other relational databases. The databases may include for example data and information related to the API of child applications such as functions performed by the child applications parent applications compatible with the functions parameters required by the functions etc. Systems and methods of disclosed embodiments however are not limited to separate databases or even to the use of a database.

In step CRAE engine may generate information that is used to present on a display device the child application functions available to system . In certain embodiments this may include files available to system through server . In one embodiment CRAE engine generates representations of functions performed by child applications with functions supporting any open file highlighted. In another embodiment CRAE engine may generate information for display that may highlight only those functions that support the file currently in focus. A file in focus may be a file that a user is currently working with using the computer system. For example a file in focus may include a file that is being manipulated or used by a user such as a file that a user has selected to receive user input. User input may include signals or data representing the selection of a key on the keyboard or a mouse click or the selection of a shortcut key such as for Paste. In this example when the file has focus the input is sent to the position of the cursor in the file. As another example a PDF file may be a file in focus when a user currently manipulates the PDF file using one or more commands short cuts or other user input such as highlighting text inserting a watermark etc. In general and as another example a computer system running multiple parent applications may generate interfaces that are displayed collectively on a display device such as two windows one window for a PDF document and a second window for a word processing document. When a user selects the word processing document to perform some operation such as cut and paste etc. the word processing document is a file in focus while the PDF document is not. Alternatively if the user selects the PDF document e.g. by placing a cursor in the PDF document window and thus deselecting the word processing document the PDF document is a file in focus while the word processing document is not. The previous examples are illustrative of different types of scenarios to show a file in focus and are not intended to limit the disclosed embodiments. Other types of operations user inputs and file selections may be implemented to assign a file in focus that are consistent with certain aspects related to the disclosed embodiments.

In step CRAE engine may receive a selection of a child application function. The selection may be responsive to user input or a processor executing a computer program that provides a selection of the child application. In step CRAE engine may determine the open file that will serve as a parameter of the selected function. In step CRAE engine may launch the child application and perform the selected function on the open file that was passed as a parameter to the function. Launching the child application may involve opening or starting the child application or may involve interacting with an already open instance of the child application. In certain embodiments launching may involve opening or starting the child application on a server. In this exemplary manner CRAE engine enables the functionality of a child application to be performed on a file of a parent application without having to be integrated into the parent application and without having a user or computer program independently open the child application to search for the files that the function is performed upon. In certain embodiments CRAE engine may use DirectX to launch the child application.

In step CRAE engine may determine one or more functions associated with each child application available to system . The types of functions associated with each child application may vary based on the type of available child application. For example a meta data scrubber application may be associated with one or more cleaning functions such as a single document cleaning function or a multiple document cleaning function. A screen capture child application may include a full screen capture function a screen region capture function or a function that captures an area of an open window displayed on a display device. The functions associated with a child application may be stored in a data repository such as storage external storage or memory as a part of the API for the child application.

In step CRAE engine may determine the parameters required by each determined child application e.g. what types of files work with a respective function . Once CRAE engine has identified the child applications and the functions associated with each child application CRAE engine generates in step an interface such as a display area that may include the available child applications. illustrates an exemplary display area listing the available child applications. The processes described in steps through are an example of the initialization of context recognition engine and activation engine described in step of .

Child application indication may also be selectable. Upon selection CRAE engine may create a display that enables selection of any open file. In one embodiment in response to a selection of a specific file CRAE engine may determine which function of the selected child application indication operates on the selected file and launch the determined function.

Display may also include settings indicator that may allow a user to customize the settings of a child application and display . When settings indicator is selected CRAE engine may display modifiable child application settings as shown in and

If more than one open file can be a parameter for the selected function then in step CRAE engine may create a display of the open files able to serve as a parameter for the selected function. In some embodiments this display may resemble the display of . In step CRAE engine may receive a selection of one the documents displayed by step . Finally in step CRAE engine may start the child application and perform the selected function on the selected file.

In one embodiment a child application function may require two files as parameters of the function. In this case CRAE engine may select the document in focus as the first parameter e.g. steps and then continue with step to select a second file as the second parameter for the selected function. CRAE engine may repeat this process for as many files as needed by the selected function. The processes described in connection with steps through are an example of determining the open file that will serve as the parameter of the selected function described in step of .

Consistent with disclosed embodiments and this example CRAE engine may recognize the PDF file type and determine the functions that can be performed on a PDF file. As a result CRAE engine may update certain function representations on display as active. As shown in the active function representations may be bolded highlighted rendered in italics or have some other visual indicator. In the example of all of function representations under child application MANAGE PDF are active. In addition function PDF is active under child application COMPARE and function SINGLE DOCUMENT is active under child application CLEAN METADATA. Thus in the example of context recognition system may receive selection of the function REDACT start the MANAGE PDF child application with the REDACT function and use the PDF document in focus as the parameter of the REDACT function.

Once CRAE engine receives a selection of one of the function representations it may create an interface such as window that allows selection of one or more of the open documents. In the example of the COMPARE function requires two files so window allows selection of two of the open documents. In other embodiments window may allow selection of one file or it may allow selection of three or more files. The number of files selectable from window may depend on the number of files a selected function requires as parameters. In the example of after both files have been selected CRAE engine may start the child application associated with the selected function causing the child application to perform the selected function on the two selected files.

The foregoing descriptions have been presented for purposes of illustration and description. They are not exhaustive and do not limit the disclosed embodiments to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from practicing the disclosed embodiments. For example the described implementation includes software but the disclosed embodiments may be implemented as a combination of hardware and software or in hardware alone. Additionally although disclosed aspects are described as being stored in a memory on a computer one skilled in the art will appreciate that these aspects can also be stored on other types of tangible computer readable media such as secondary storage devices like hard disks floppy disks a CD ROM or other forms of RAM or ROM.

Computer programs based on the written description and disclosed methods are within the capabilities of one of ordinary skill in the art. The various programs or program modules can be created using any of the techniques known to one skilled in the art or can be designed in connection with existing software. For example program sections or program modules can be designed in or by means of DirectX .Net Framework .Net Compact Framework and related languages such as Visual Basic C etc. XML Java C JavaScript HTML HTML AJAX or any other now known or later created programming language. One or more of such software sections or modules can be integrated into a computer system or existing browser software.

Other embodiments will be apparent to those skilled in the art from consideration of the specification and practice of the embodiments disclosed herein. The recitations in the claims are to be interpreted broadly based on the language employed in the claims and not limited to examples described in the present specification or during the prosecution of the application which examples are to be construed non exclusive. Further the steps of the disclosed methods may be modified in any manner including by reordering steps and or inserting or deleting steps. It is intended therefore that the specification and examples be considered as exemplary only with a true scope and spirit being indicated by the following claims and their full scope equivalents.

