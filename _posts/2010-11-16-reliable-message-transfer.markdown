---

title: Reliable message transfer
abstract: Various embodiments of systems and methods for reliable message transfer are described herein. In a sender adapter, at least one message is divided into a plurality of message chunks based on a predetermined chunk size. A chunk key is assigned to each of the message chunk to correspond to each message. Further, a chunk sequence key is generated for each of the message chunks to identify a sequence of the message chunks. The plurality of message chunks including the corresponding chunk key and the chunk sequence key is transmitted to a receiver adapter. At the receiver adapter, the plurality of message chunks including the corresponding chunk key and the chunk sequence key are received. Further, the message chunks are grouped based on the corresponding chunk key and each message is reconstructed from the message chunks based on the corresponding chunk sequence key.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08539095&OS=08539095&RS=08539095
owner: SAP AG
number: 08539095
owner_city: Walldorf
owner_country: DE
publication_date: 20101116
---
Embodiments generally relate to computer systems and more particularly to methods and systems for reliable message transfer.

In an enterprise communication system plays a vital role for transferring data from one point to another. Enterprise which involves typical business processes span across different business systems. Also some processes even span across the boundaries of the enterprise to communicate to a third party system. These processes include exchange of electronic documents. In order to establish such inter and intra enterprise business processes infrastructure is provided for a messaging system which includes a set of techniques for exchange of electronic documents among multiple threads in one or more processes. For example NetWeaver Process Integration PI of SAP provides such an infrastructure. However the current infrastructure has one or more limitations as described below.

Currently reliable message transfer is limited to an available memory heap size when processed. If a message having a message size that exceeds the memory heap size is being transferred the messaging system will throw an error and the message transmission will not be achieved. Therefore the message heap size must be as big as the maximum message size during processing of the message which is resource intensive. For example for every single message an upper limit of the message size has to be defined for transferring each message. Also reliability in such message transfer may not be guaranteed. In other words if the transfer breaks down the process of transferring has to be commenced from the beginning.

Therefore a technique for overcoming the above mentioned limitations by providing reliable transfer of messages without having a size limit would be desirable.

Various embodiments of systems and methods for reliable message transfer by processing messages without having a size limit are described herein. In a sender adapter at least one message is divided into a plurality of message chunks based on a predetermined chunk size. A chunk key is assigned to the plurality of message chunks which correspond to each message. Further a chunk sequence key is generated for each of the plurality of message chunks to identify a sequence of the plurality of message chunks in each message based on the assigned chunk key. The plurality of message chunks including the corresponding chunk key and the chunk sequence key are transmitted to a receiver adapter. In one embodiment each of the plurality of message chunks comprises an electronic envelope including a header and a body. The header of the electronic envelope is dynamically configured to comprise a sender ID a receiver ID a time stamp the chunk key the chunk sequence key the chunk size and a chunk mode and the body of the electronic envelope comprises a part of payload data of the at least one message based on the predetermined chunk size.

At the receiver adapter the plurality of message chunks including the corresponding chunk key and the chunk sequence key are received. Further the plurality of message chunks are grouped based on the corresponding chunk key and the message is reconstructed from the plurality of message chunks based on the corresponding chunk sequence key.

These and other benefits and features of embodiments of the invention will be apparent upon consideration of the following detailed description of preferred embodiments thereof presented in connection with the following drawings.

Embodiments of techniques for reliable message transfer by processing messages without having a size limit are described herein. In the following description numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize however that the invention can be practiced without one or more of the specific details or with other methods components materials etc. In other instances well known structures materials or operations are not shown or described in detail to avoid obscuring aspects of the invention.

Reference throughout this specification to one embodiment this embodiment and similar phrases means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus the appearances of these phrases in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore the particular features structures or characteristics may be combined in any suitable manner in one or more embodiments.

At step a chunk key is assigned to the plurality of message chunks to correspond to each message. For example the message chunks associated with a message are assigned with a common chunk key. In other words the chunk key is used to identify the message from which the message chunks are generated. At step a chunk sequence key is generated for each of the plurality of message chunks to identify a sequence of the plurality of message chunks in each message based on the assigned chunk key. For example if a message is divided into five message chunks then the chunk sequence key is generated for each of the five message chunks which helps to reconstruct the message at a receiver adapter.

At step the plurality of message chunks including the corresponding chunk key and the chunk sequence key are transmitted to the receiver adapter. In an embodiment each message chunk includes an electronic envelope. The electronic envelope includes a header and a body. The header of the electronic envelope is dynamically configured to include a sender ID a receiver ID a time stamp the chunk key the chunk sequence key the chunk size and a chunk mode and the body of the electronic envelope includes a part of payload data of the message based on the predetermined chunk size. In one embodiment the chunk mode includes an end mode to identify a last chunk message of the plurality of chunk messages and an active mode to identify other chunk messages of the plurality of chunk messages. The structure of the electronic envelope is described in greater detail in .

In operation one or more messages e.g. and are transferred from the one or more senders e.g. messages and are transferred from the sender and message is transferred from the sender to deliver to the dedicated receiver e.g. receiver through AAE . In one embodiment the sender adapter divides each message e.g. message and into a plurality of message chunks e.g. message is divided into message chunks A B and C message is divided into message chunks A B and C and message is divided into message chunks A B and C . The messaging system is protocol agnostic therefore each message chunk e.g. message chunks A to C A to C and A to C includes an electronic envelope consisting of a header and a body. In one embodiment the header is dynamically configured to include a chunk key a chunk sequence key a chunk mode and a chunk size. The dynamic configuration of the header is described in greater detail in . In one exemplary embodiment the plurality of message chunks is persisted within the messaging system . Thus the message chunks can be read successfully to the messaging system even if the receiver adapter is not available.

In one exemplary embodiment the plurality of message chunks e.g. message chunks A to C A to C and A to C are transferred in the order in which the plurality of message chunks e.g. message chunks A to C A to C and A to C are generated to the receiver adapter through the messaging system .

Further in operation at the receiver adapter the plurality of message chunks e.g. message chunks A to C A to C and A to C are grouped according to the associated chunk key. In one exemplary embodiment a temporary file is created to store the plurality of message chunks corresponding to each message based on the associated chunk key e.g. message chunks A to B are grouped together message chunks A to C are grouped together and message chunks A to C are grouped together . Further the grouped plurality of message chunks are arranged in a sequence as per the associated chunk sequence key to reconstruct each message e.g. messages and as transmitted from the senders e.g. senders and . In one embodiment when the connectivity between the sender adapter and the receiver adapter is temporarily lost no message chunks are lost or duplicated. The message chunks which are not transmitted will be transferred to the receiver adapter than transmitting the whole message as in conventional system when the connection is established. Thus reliability of message transfer is achieved. Also occurrence of errors is optimized as only message chunks are transferred.

In one embodiment the chunk key provides information of the message from which each of the plurality of message chunks are generated. The chunk key helps to group the plurality of message chunks at a receiver adapter. For example the chunk key for each message chunk associated with a particular message includes a common alphanumeric code. In one embodiment the chunk sequence key provides information to identify a sequence of the plurality of message chunks in each message. The chunk sequence key helps to reconstruct the message from the plurality of message chunks in a correct sequence. The chunk mode includes an end mode to identify a last chunk message of the plurality of chunk messages and an active mode to identify other chunk messages of the plurality of chunk messages. In other words the last chunk message includes chunk mode as end and the other chunk messages include chunk mode as active which helps the receiver adapter to know the end of the plurality of chunk messages. In one embodiment the chunk size depicts the size of the message payload as in the body of the electronic envelope. In general the message protocol is enhanced with parameters that allow dividing messages at the sender adapter and reconstructing the same messages at the receiver adapter. In one embodiment the dynamically configured parameters are defined on top of a current message protocol. Thus monitoring and runtime infrastructure of a conventional infrastructure is completely utilized. An example of the header is described in greater detail in .

In one embodiment a chunk size e.g. A of B of and C of provides a size of the payload of each chunk message of the message. For example the chunk size A 5242880 is the payload size of the first message chunk as in . The chunk size B 5242880 is the payload size of the last but one message chunk as in . Further the chunk size 4715564 is the payload size of the last message chunk as in . In general each message chunk includes the message payload of same chunk size as configured in the sender adapter e.g. A and B except for the last message chunk which includes the message payload of the chunk size as configured or less than the configured chunk size e.g. C .

In one embodiment the chunk mode e.g. A of B of and C of is defined wherein the chunk mode provides information whether a message chunk is the last message chunk of the plurality of message chunks of the message. For example the chunk modes A and B depicts as active indicating the message chunk is not the last message chunk of the plurality of message chunks. Further the chunk mode C depicts as end indicating the message chunk as the last message chunk of the plurality of message chunks.

In one embodiment a chunk key e.g. A of B of and C of is defined wherein the chunk key is assigned an alphanumerical value. The numerical value 235233266 denotes that the message chunk belongs to a particular message. Since the plurality of message chunks as depicted only headers in belongs to the same message all chunk keys e.g. A of B of and C of are assigned a common unique number.

Some embodiments of the invention may include the above described methods being written as one or more software components. These components and the functionality associated with each may be used by client server distributed or peer computer systems. These components may be written in a computer language corresponding to one or more programming languages such as functional declarative procedural object oriented lower level languages and the like. They may be linked to other components via various application programming interfaces and then compiled into one complete application for a server or a client. Alternatively the components may be implemented in server and client applications. Further these components may be linked together via various distributed programming protocols. Some example embodiments of the invention may include remote procedure calls being used to implement one or more of these components across a distributed programming environment. For example a logic level may reside on a first computer system that is remotely located from a second computer system containing an interface level e.g. a graphical user interface . These first and second computer systems can be configured in a server client peer to peer or some other configuration. The clients can vary in complexity from mobile and handheld devices to thin clients and on to thick clients or even other servers.

The above illustrated software components are tangibly stored on a computer readable storage medium as instructions. The term computer readable storage medium should be taken to include a single medium or multiple media that stores one or more sets of instructions. The term computer readable storage medium should be taken to include any physical article that is capable of undergoing a set of physical changes to physically store encode or otherwise carry a set of instructions for execution by a computer system which causes the computer system to perform any of the methods or process steps described represented or illustrated herein. Examples of computer readable storage media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROMs DVDs and holographic devices magneto optical media and hardware devices that are specially configured to store and execute such as application specific integrated circuits ASICs programmable logic devices PLDs and ROM and RAM devices. Examples of computer readable instructions include machine code such as produced by a compiler and files containing higher level code that are executed by a computer using an interpreter. For example an embodiment of the invention may be implemented using Java C or other object oriented programming language and development tools. Another embodiment of the invention may be implemented in hard wired circuitry in place of or in combination with machine readable software instructions.

A data source is an information resource. Data sources include sources of data that enable data storage and retrieval. Data sources may include databases such as relational transactional hierarchical multi dimensional e.g. OLAP object oriented databases and the like. Further data sources include tabular data e.g. spreadsheets delimited text files data tagged with a markup language e.g. XML data transactional data unstructured data e.g. text files screen scrapings hierarchical data e.g. data in a file system XML data files a plurality of reports and any other data source accessible through an established protocol such as Open DataBase Connectivity ODBC produced by an underlying software system e.g. ERP system and the like. Data sources may also include a data source where the data is not tangibly stored or otherwise ephemeral such as data streams broadcast data and the like. These data sources can include associated data foundations semantic layers management systems security systems and so on.

In the above description numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize however that the invention can be practiced without one or more of the specific details or with other methods components techniques etc. In other instances well known operations or structures are not shown or described in details to avoid obscuring aspects of the invention.

Although the processes illustrated and described herein include series of steps it will be appreciated that the different embodiments of the present invention are not limited by the illustrated ordering of steps as some steps may occur in different orders some concurrently with other steps apart from that shown and described herein. In addition not all illustrated steps may be required to implement a methodology in accordance with the present invention. Moreover it will be appreciated that the processes may be implemented in association with the apparatus and systems illustrated and described herein as well as in association with other systems not illustrated.

The above descriptions and illustrations of embodiments of the invention including what is described in the Abstract is not intended to be exhaustive or to limit the invention to the precise forms disclosed. While specific embodiments of and examples for the invention are described herein for illustrative purposes various equivalent modifications are possible within the scope of the invention as those skilled in the relevant art will recognize. These modifications can be made to the invention in light of the above detailed description. Rather the scope of the invention is to be determined by the following claims which are to be interpreted in accordance with established doctrines of claim construction.

