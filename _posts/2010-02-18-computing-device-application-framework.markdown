---

title: Computing device application framework
abstract: Systems and methods of providing a computing device application framework. The framework serves as a platform upon which the desktop applications share common data and logic. The framework may include an application component exposes application programming interfaces (APIs) that provides installed applications access to data and services, a download component that maintains versions of the applications installed on a computing device, and a license component that tracks data use and access.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08533723&OS=08533723&RS=08533723
owner: The Weather Channel, LLC
number: 08533723
owner_city: Atlanta
owner_country: US
publication_date: 20100218
---
This application is a continuation of U.S. patent application Ser. No. 10 745 206 now U.S. Pat. No. 7 685 598 filed Dec. 23 2003 which is incorporated by reference in its entirety.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent files or records but otherwise reserves all copyright rights whatsoever. The following notice applies to the software and data as described below and in the drawings hereto Copyright 2003 The Weather Channel All Rights Reserved.

As more and more users turn to the Internet for data and services users are increasingly faced with the daunting task of installing many different desktop applications to access the data and services. Such applications include stock and news tickers weather alerts financial software etc. In many instances users are frustrated because desktop applications that are bundled together by same vendor often operate in a dissimilar unintuitive manner. Also the applications often access the data and services individually rather than in a cooperative fashion which creates addition requests to the vendor s servers for data.

In addition it is difficult for developers to write applications that interact in a consistent manner with other applications that each access a common set of data and services. Developers large and small also have problems in making their latest software applications available for download as it is hard to publicize new versions of applications to end users. Thus it would be beneficial if developers had access to a consistent multi platform multi language interface to data and services that implement a standard business logic and provided an application catalog to end users. The present invention provides such a solution.

The present invention is directed to systems and methods of providing a computing device application framework. The framework may be executed on a computing device in a layer between an operating system and applications that depend on the framework for shared data and services. The framework may include an application component that exposes operating system specific application programming interfaces APIs that are called by the applications to access to the shared data and services a download component that provides for installation of the applications and framework components the download component updating the applications and framework components as new versions are released in accordance with a preference and a license component that restricts access to the framework by determining at an application level using a security mechanism whether each application is authorized to be installed or to access the framework 

The application component may include user interface elements that provide for system wide configuration of the applications and the application component may maintain state information regarding the execution of the applications and the shared data and services.

Additional features and advantages of the invention will be made apparent from the following detailed description of illustrative embodiments that proceeds with reference to the accompanying drawings.

The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The invention may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment program modules and other data may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus .

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and non volatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or non volatile memory such as ROM and RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile non volatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable non volatile magnetic media a magnetic disk drive that reads from or writes to a removable non volatile magnetic disk and an optical disk drive that reads from or writes to a removable non volatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile non volatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

The present invention is directed to a set of libraries and user interface elements that provide information e.g. weather installation and registration services for a particular operating system as a desktop framework. The desktop framework itself is not an end user application but rather a foundation for desktop applications to build upon so that they can share data and operate in an efficient and consistent way. The desktop applications are typically distributed via the Internet using known protocols and delivery mechanisms. While distinct for each platform one of ordinary skill in the art will recognize that the desktop framework can be written for any operating system such as Microsoft Windows Macintosh OS X Linux or embedded PDA and cell phone operating systems.

In accordance with the present invention there are two classes of users of the desktop framework. The first class is end users. End users receive consistent and efficient components that a variety of applications on their computer can use. The applications are registered and configured within the operating system environment in a standard fashion. The applications are preferably automatically updated and users can install new applications as they become available at the click of a button.

The second class of user for the desktop framework is developers creating applications that use the common data e.g. weather information that is manipulated and displayed by the applications. The developers thus will have access to a consistent multi platform multi language interface to the data that implements a common business logic. In addition because applications are one or two clicks away from installation through the Application Catalog feature of desktop framework which will be described below this advantageously speeds the publication and delivery of new applications to end users.

Referring to there is shown an overview of the components that interact with the desktop framework . According to the exemplary embodiment described hereinbelow the desktop framework provides a platform upon which to build weather related applications. Weather information is provided by The Weather Channel s weather.com Web site and is made available to any application that is licensed to use the data. In accordance with the framework all applications have a consistent and reliable interface for the data. While the embodiment below is described with respect to weather data and applications it is noted that other types of data and applications will benefit by operating within the framework .

Servers provide data application downloads and licensing to the desktop framework via a wide area network WAN such as the Internet. In the present embodiment weather data is served by an XML Server images come from a Map Server and videos would be produced by a Video Server . There would also be a collection of client applications that are stored on download servers . A payment gateway provides a communications connection with a third party payment service to enable end users to purchase additional applications and services.

The components libraries and user interface elements of the desktop framework will now be described with reference to . The framework components themselves are divided between a system level user interface and collection of shared libraries implementing desktop application services. These services include the retrieval storage and presentation of weather data the browsing install and updating of desktop applications and the authentication and verification of downloaded files prior to installation.

A weather.framework component is an application framework that provides the core libraries that are installed on the user s computer. The weather.framework provides the ability for other programs to request weather data in one or more of the operating system s native formats. The weather.framework encapsulates system level access to current and cached weather data from weather.com s services. Using only a single instance of weather information on the user s computer increases consistency and improves efficiency of both the client and server.

The weather.framework state engine maintains the current state of the data model and tasks that need to be executed according to predefined rules. An example of a state related task is the need to fetch current conditions every 30 minutes. A weather.framework cache holds weather data locally on the user s machine in accordance with rules defining the aging of the cache. This reduces load on the server and allows applications to use some information even when the computer is not connected to the Internet.

The weather.framework resources include icons and translation tables to correctly present the weather data. Having the resources locally reduces the server load and bandwidth and allows the icons and imagery to be used when the computer is not connected to the Internet. Framework Meta APIs are language independent specifications of the functions and data types for a given framework. External APIs then implement these functions and data types in a given language and for a given Operating System. For example desktop framework applications may access weather data through weather framework APIs such as C Windows Linux .Net Windows Cocoa Macintosh JavaScript DHTML and Java Server Applications .

The user interface for the weather.framework is a set of dialog boxes that collect user preferences for system wide weather configuration. A preferences dialog collects user information such as Location Units and Display of Severe Weather Alerts. A weather.framework key may be used that is a cryptographic license verifying the identity of the framework and allowing it access to the weather.com services.

The connection between the weather.framework and the Weather Servers could be on demand or always open allowing for true push alerts and even push weather. The weather.framework also implements a local weather database with cached results to previous queries. As an alternative the weather.framework may implement peer to peer connections between clients to collect and distribute weather data in order to reduce the bandwidth and resource burden on the servers .

A download.framework component is responsible to maintaining the versions of the software installed on the user s computer. The download.framework updates the weather.framework as new versions of files are released and allows users to install new software without using a web browser or other connection to the Internet.

The download.framework contains the core user interface and system processes to download and install new and updated applications. The User Interface provides the user dialogs to register download and configure framework applications from the application catalog. A System Preferences dialog preferably conforms to the Operating System s standards for control panels and contains global configuration settings such as Username Password Address Age Gender Auto Update Auto Notify and Network Settings. In addition to being stored locally the information may be communicated back to an XML URS database server. The URS database servers is a Universal Registration System. It contains all user and product preferences in a centralized database at weather.com or other service provider . Framework products preferably collect data from the user and send it to URS for centralized storage and authentication.

A Software Catalog displays all of the software available for that Operating System and indicate what software is currently installed. Additionally the catalog will provide descriptions of the products. If the user has selected to be notified when new versions of the installed software are available an Update Notification dialog will alert them when the software catalog is updated. If the user has selected to be notified when new software is added to the catalog a New Application Notification dialog will alert them when the software catalog is updated.

A Version Checker uses the framework s list of installed applications on the user s computer and checks periodically with the download server to determine if there are new or updated products available for that Operating System. If new or updated software is the software either automatically installed or the user is notified of the update. A Downloader downloads new applications and software updates to the user s computer. It can do this interactively when the user chooses to install new software from the Catalog or in the background when an update becomes available for software that is already installed. A Verifier uses checksums and encryption keys to verify that the downloaded software is authentic and not corrupt before it is installed.

An Installer installs new or updated software on the user s computer. It will also uninstall any framework software the user wants to remove. A Download Framework key is used to verify the authenticity of the framework components since the Download Framework has the ability to update itself. A Framework Uninstaller is a separate external program that allows the user to uninstall all desktop framework components

A license.framework component is responsible for keeping track of data use and registration information. Some data may be provided free of charge and other data may require a subscription. Similarly some allocations may require registration and opt in co registration while others may have paid advertising in them. The license.framework component interacts with URS and billing to maintain the user s profile and in the case of subscription products bill them accordingly.

The license.framework provides an interface to or its own implementation of standard cryptographic libraries necessary for SSL and other encrypted network communications. Also it provides an interface to or its own implementation of the client components of a Public Key Infrastructure PM that allows authentication and verification of programs downloaded to a user s computer. The license.framework also provides the framework for securing access to desktop framework data and restricting the programs that use the framework APIs.

The download.framework communicates with the download services over SSL and the registration and co registration transactions for individual application use SSL to protect user data. The content provided may generate its own SSL certificates for the SSL transactions. The content provider may also have its own certifiers and will issue certificates to each Framework and framework application. The frameworks will be able to verify the validity of an application using its public key and allow or deny access to the data accordingly. The license.framework will also have its own key to verify its authenticity.

Thus the framework components in this embodiment reside on top of the services architecture i.e. servers . By using common services and assets such as the weather XML feeds maps and URS the desktop framework will remain current with other services and leverage the web wireless and broadband development efforts.

Referring now to many different desktop applications may be developed to interact with the desktop framework . The exemplary applications described herein are not intended to limit the scope of the present invention as many additional applications may interoperate with the desktop framework . In accordance with an advantageous aspect of the invention the number of applications installed on a user s computer does not affect the number of requests made to the servers as there is only one instance of the desktop framework which would make only one group of requests.

A Weather Manager application serves to control the overall interaction between the user the operating system and the framework . The Weather Manager may be implemented as a Windows Control Panel or MacOS Preferences Pane that enables the user to set global settings such as location and username. The Weather Manager may also have feature listing applications that are available and would use the download.framework component to install them.

A Weather Bar is an application that provides the temperature in the system tray. The Weather Bar may provide alerts to the user with a Toast pop up window and an audio alert if there is a severe weather alert for their location as shown in . The Alert Toast window opens and notifies the user of a severe weather alert that has been issued for their location by the National Weather Service. If the user clicks on the message in the alert toast the Weather Bar may open a main window of a main desktop weather application and switches to an Alerts Tab. If the desktop weather application is not installed the weather bar may open the default browser to weather.com s page for that location and its alert.

A Weather Themes application may be desktop backgrounds and color schemes that change depending on the weather or forecast. A Palm Sync application provides a PalmOS Sync Conduit for a Palm Weather application. The Palm application itself is developed separately from the desktop OS application but the download.framework component may install it and the license.framework component could bill for it together with the Palm Sync application .

An XOAPAPI application XML OAP API is a Software Developer s Kit SDK allowing third parties to develop applications for the desktop framework . XOAPAPI may also administer downloads and revenue sharing with partners who license data for desktop applications while retaining control for the licensor to collect and retain registration information for the users.

A Desktop Weather application may utilize the weather.framework and download.framework functionality to obtain data from the servers . The desktop weather application acts as the main interface to the data as shown in and may be the distribution tool to provide the framework to user s computers. For example users may download the Desktop Weather application from the weather.com Web site. A Weather Calendar may place weather data in a user s calendar and or Personal Information Management PIM applications.

While applications are directed to common uses of weather data albeit now advantageously implemented within the framework there are other uses for weather data. The Sims is a game in which virtual people live virtual lives. The people get houses and jobs and all sorts of other things but there is no weather. The framework can provide weather to The Sims . In this instance the license.framework component may not necessarily interact with the individual user rather it may allow programs developers to license data and bill users separately. Another example are flight simulator games which generally do have weather. However with the framework the flight simulator games could be real time weather data.

Other applications may be an off line browser that would store any previously received weather data so that the framework applications could run even when the computer was not connected to the Internet. The desktop framework may also provide full two way or n way in the case of peer to peer communication with users. This would allow the servers to interface with personal weather stations or corporate networks of stations to upload data. A Weather Toolbar may be provided that install into a browser and would provide weather data and search capabilities to user s browsers.

A Weather Screensaver may be provided that displays computer generated imagery to convey current conditions or forecasts in a non numeric fashion. In addition new themes and seasonal imagery may be made available throughout the year. The user interface of the screensaver products consists of the imagery displayed when the screensaver is running the install dialogs and the configuration dialogs.

As is now clear to one of ordinary skill in the art the download.framework component and license.framework component are useful for data applications beyond weather related data and applications. For example news sports and even general software distribution can work in accordance with desktop framework of the present invention.

As is also apparent the desktop framework of the present invention provides several advantages. First it provides a mechanism by which a family of integrated but substantially different applications can provide more focused value to the end users and increase adoption of the applications Second it allows for automatic updates removing the problem of either forcing updates or users manually updating the applications and framework libraries. Third desktop framework provides easy access and up front promotion of new products on the end user s computer. Finally the desktop framework encapsulates business rules associated with the data allowing third party developers to focus on building applications not re inventing the business logic.

While the present invention has been described in connection with the preferred embodiments of the various Figs. it is to be understood that other similar embodiments may be used or modifications and additions may be made to the described embodiment for performing the same function of the present invention without deviating therefrom. Furthermore it should be emphasized that a variety of computer platforms including handheld device operating systems and other application specific operating systems are contemplated especially as the number of wireless networked devices continues to proliferate. Still further the present invention may be implemented in or across a plurality of processing chips or devices and storage may similarly be effected across a plurality of devices. Therefore the present invention should not be limited to any single embodiment but rather should be construed in breadth and scope in accordance with the appended claims.

