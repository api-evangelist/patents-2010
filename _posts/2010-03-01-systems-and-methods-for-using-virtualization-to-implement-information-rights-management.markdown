---

title: Systems and methods for using virtualization to implement information rights management
abstract: A method for using virtualization to implement information rights management. The method may include: 1) intercepting, at a virtualization module, a request from an application to access data; 2) querying an information-rights-management database for a virtualization policy associated with the access request; 3) receiving, at the virtualization module, the virtualization policy from the information-rights-management database; and 4) controlling access to the data by applying the virtualization policy to the access request in a manner that is transparent to the application. Various other methods, systems, and computer-readable media are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08938808&OS=08938808&RS=08938808
owner: Symantec Corporation
number: 08938808
owner_city: Mountain View
owner_country: US
publication_date: 20100301
---
Organizations that rely extensively on computer systems in carrying out their business need to have control over their internal information. In addition to malware threats organizations may need to protect their information from accidental and intentional employee mishandling. A leak of intellectual property financial data or employee email can potentially harm an organization. As a result some organizations have implemented information rights management systems to protect their digital information.

Many current information rights management systems may protect data by embedding themselves within the applications used to create edit or view information. Information rights management system providers consequentially may tailor their software to support each individual application and each operating system used by their clients. In such systems content may be encrypted in a file system. When a user opens protected content from within an application the application may call into the information rights management system s plug in to interpret the policy associated with that content. The application may cooperate with the plug in to enforce the policy.

There are numerous drawbacks to this approach that have slowed the widespread adoption of information rights management systems. One significant problem with traditional information rights management systems is that many common applications may not support rich plug in architectures that are needed to support information rights management. For those applications capable of supporting information rights management system administrators may need to acquire install and maintain plug ins for each supported application. Unfortunately even if applications are capable of supporting information rights management plug ins enforcing an information rights management policy within a user level application plug in may expose an information rights management system to a wide range of attacks. Furthermore application behavior may be altered by the plug in in undesirable ways and the user interface of the information rights management system may be different within different supported applications. Thus the cost and difficulty of administering such plug ins across an enterprise application base may be prohibitively cumbersome. What is needed therefore is a more efficient and effective mechanism for providing information rights management.

As will be described in greater detail below the instant disclosure generally relates to systems and methods for using virtualization to implement information rights management. For example a computer implemented method for using virtualization to implement information rights management may include 1 intercepting at a virtualization module a request from an application to access data 2 querying an information rights management database for a virtualization policy associated with the access request 3 receiving at the virtualization module the virtualization policy from the information rights management database and 4 controlling access to the data by applying the virtualization policy to the access request in a manner that is transparent to the application.

In some embodiments controlling access to the data may include virtualizing an operating system resource associated with the access request. In such embodiments an operating system may provide a first view of the operating system resource and the operating system resource may be virtualized by providing a second view of the operating system resource to the application.

In some embodiments virtualizing the operating system resource may include decrypting the data to provide decrypted data storing the decrypted data in a secure location and redirecting the access request to the secure location to allow the application to access the decrypted data. Additionally or alternatively the virtualization policy may indicate that the data is read only for the application the virtualization module may create a virtualized copy of the data and the access request is handled by redirecting writes to the data from the application to the virtualized copy of the data.

In some embodiments the access request may include a write attempt and the virtualization module may encrypt the write attempt. According to various embodiments querying the information rights management database for the virtualization policy associated with the access request may include querying a remote information rights management system for the virtualization policy associated with the access request. In certain embodiments the method may be tangibly embodied as computer executable instructions on at least one computer readable storage medium.

According to some embodiments a computer implemented method for using virtualization to implement information rights management may include 1 receiving from a virtualization module a request for a virtualization policy associated with a first data access request of a first application 2 identifying the virtualization policy by searching for one or more policies associated with data identified in the first data access request and 3 sending the virtualization policy to the virtualization module the virtualization policy indicating whether the virtualization module should implement operating system level virtualization to handle the first data access request.

In various embodiments the virtualization policy may include an application specific rule that indicates how data access requests from the first application are handled and a data specific rule that indicates access rights for the data identified in the first data access request. In some embodiments the virtualization module may control access to the data by decrypting the data to provide decrypted data storing the decrypted data in a secure location redirecting the first access request to the secure location to allow the first application to access the decrypted data and redirecting a second access request from a second application to the secure location to allow the second application to access the decrypted data.

According to certain embodiments the virtualization module may include an application virtualization file system filter. Additionally or alternatively the virtualization module may include an object manager programmed to implement operating system level virtualization by modifying a name of a data object identified in the data access request.

In various embodiments a system for using virtualization to implement information rights management may include a virtualization module programmed to 1 intercept a request from an application to access data 2 request a virtualization policy associated with the access request 3 receive the virtualization policy wherein the virtualization policy indicates whether the virtualization module should implement operating system level virtualization to handle the first data access request and 4 control access to the data by applying the virtualization policy to the access request in a manner that is transparent to the application. The system may also include an information rights management module programmed to 1 receive the request for the virtualization policy 2 identify the virtualization policy by searching for one or more policies associated with the data and 3 send the virtualization policy to the virtualization module.

In some embodiments the virtualization module may be programmed to control access to the data by performing at least one of implementing operating system level virtualization by virtualizing an operating system resource associated with the access request blocking access to the data and or allowing access to the data. Additionally or alternatively the virtualization system may be programmed to control access to the data by decrypting the data to provide decrypted data storing the decrypted data in a secure location and redirecting the access request to the secure location to allow the application to access the decrypted data.

According to various embodiments the virtualization policy may indicate that the data is read only for the application. In such embodiments the virtualization system may be programmed to control access to the data by storing a copy of the data in a virtualization layer and redirecting writes to the data from the application to the virtualization layer so that changes are written to the copy of the data.

In certain embodiments the virtualization module may be programmed to control access to the data by modifying a name of a data object identified in the request to access the data. According to at least one embodiment the virtualization module may be located on a client in an enterprise and the information rights management module may be located on an information rights management server of the enterprise. In some embodiments the virtualization module may be further programmed to virtualize an instancing resource of the application.

Features from any of the above mentioned embodiments may be used in combination with one another in accordance with the general principles described herein. These and other embodiments features and advantages will be more fully understood upon reading the following detailed description in conjunction with the accompanying drawings and claims.

Throughout the drawings identical reference characters and descriptions indicate similar but not necessarily identical elements. While the exemplary embodiments described herein are susceptible to various modifications and alternative forms specific embodiments have been shown by way of example in the drawings and will be described in detail herein. However the exemplary embodiments described herein are not intended to be limited to the particular forms disclosed. Rather the instant disclosure covers all modifications equivalents and alternatives falling within the scope of the appended claims.

As will be described in greater detail below the instant disclosure generally relates to systems and methods for using virtualization to implement information rights management. For example a virtualization system may intercept an application s requests to access data. The virtualization system may query an information rights management system for virtualization polices associated with the access requests. The information rights management system may send virtualization policies to the virtualization system. The virtualization policies may indicate whether to block access to data allow access to the data and or implement operating system level virtualization to handle the data access requests. By leveraging operating system level virtualization technologies in this manner embodiments of the instant disclosure may facilitate application agnostic information rights management that is secure user friendly and or provides various other advantages.

The following will provide with reference to detailed descriptions of exemplary systems for using virtualization to implement information rights management. Detailed descriptions of corresponding computer implemented methods will also be provided in connection with . Detailed descriptions of exemplary operating system level virtualization technologies are presented in the discussion corresponding to . In addition detailed descriptions of an exemplary computing system and network architecture capable of implementing one or more of the embodiments described herein will be provided in connection with respectively.

Exemplary system may also include an information rights management module programmed to receive the request for the virtualization policy associated with the data identify the virtualization policy by searching for one or more rules associated with the data and send the virtualization policy to the virtualization module. Although illustrated as separate elements one or more of modules in may represent portions of a single module or application.

In certain embodiments one or more of modules in may represent one or more software applications or programs that when executed by a computing device may cause the computing device to perform one or more tasks. For example as will be described in greater detail below one or more of modules may represent software modules stored and configured to run on one or more computing devices such as the devices illustrated in e.g. computing device computing device and or information rights management server computing system in and or portions of exemplary network architecture in . One or more of modules in may also represent all or portions of one or more special purpose computers configured to perform one or more tasks.

As illustrated in exemplary system may also include an access policy database for storing one or more virtualization policies and or one or more other data access rules. Access policy database may represent portions of a single database or computing device or a plurality of databases or computing devices. For example access policy database may represent a portion of information rights management server in computing system in and or portions of exemplary network architecture in . Alternatively access policy database in may represent one or more physically separate devices capable of being accessed by a computing device such as information rights management server in computing system in and or portions of exemplary network architecture in .

Exemplary system in may be deployed in a variety of ways. For example all or a portion of exemplary system may represent portions of a cloud computing or network based environment such as exemplary system illustrated in . Cloud computing environments may provide various services and applications via the Internet. These cloud based services e.g. software as a service platform as a service infrastructure as a service etc. may be accessible through a web browser or other remote interface. Various functions described herein may be provided through a remote desktop environment or any other cloud based computing environment.

As shown in system may include computing devices and in communication with an information rights management server and a storage system via a network . Computing device may include an application and a virtualization module and computing device may include an application and a virtualization module . Computing devices and generally represents any type or form of computing device capable of reading computer executable instructions. Examples of computing devices and include without limitation laptops desktops servers cellular phones personal digital assistants PDAs multimedia players embedded systems combinations of one or more of the same exemplary computing system in or any other suitable computing device.

As shown information rights management server may include information rights management module and access policy database . Information rights management server generally represents any type or form of computing device that is capable of providing information rights management to one or more client devices. Examples of information rights management server include without limitation application servers and database servers configured to provide various database services and or run certain software applications.

Storage system may include data . Storage system generally represents one or more storage devices configured to store any type of data. For example storage system may be a data store of an enterprise. Storage system may represent a portion computing system in and or portions of exemplary network architecture in . Alternatively storage system may represent one or more physically separate devices capable of being accessed by a computing device such as computing system in and or portions of exemplary network architecture in .

As noted computing device computing device information rights management server and or storage system may communicate over a network . Network generally represents any medium or architecture capable of facilitating communication or data transfer. Examples of network include without limitation an intranet a wide area network a local area network a personal area network the Internet power line communications a cellular network e.g. a GSM Network exemplary network architecture in or the like. Network may facilitate communication or data transfer using wireless or wired connections.

In some embodiments system may represent an enterprise environment with information rights management server managing access to data stored on storage system . As discussed in greater detail in the description of virtualization modules and on computing devices and may communicate with information rights management server to control access to data .

At step in one or more of the systems described herein may intercept a request from an application to access data. For example virtualization module may intercept a request from application to access data on storage system . Virtualization module may intercept the request to access data in a variety of ways and or in a variety of contexts. For example virtualization module may include a file system filter driver and or object manager that intercepts and manages Input Output I O requests from application . Virtualization module may also intercept data access requests from application in any other suitable manner.

In certain embodiments virtualization module may only intercept access requests of application for data external to a process of application . In other words virtualization module may not monitor and or control data access for data of i.e. internal to a process of application .

Application generally represents any type or form of software that includes computer executable instructions. For example application may include a word processor a spreadsheet application a document viewer an image viewer and or editor an audio player and or editor a database application a software development application an email client and or any other type of software application that may be installed on a computing device. Similarly data generally represents any type or form of data accessible by application . Data may in some embodiments include one or more files database entries web pages and or any other data object or data entity.

Virtualization module made intercept various types of requests to access data. For example virtualization module may intercept requests to read data requests to write data requests to delete data requests to modify data requests to copy data requests to move data requests to open data e.g. requests to launch web pages and or any other type of request to access data.

At step in one or more of the systems described herein may query an information rights management database for a virtualization policy associated with the access attempt. A virtualization module may query an information rights management database for a virtualization policy associated with the access request in any suitable manner. For example virtualization module may query information rights management module for a virtualization policy associated with data . In such embodiments information rights management module may then search access policy database for one or more virtualization policies associated with data . Alternatively virtualization module may be programmed to directly interface with access policy database without communicating with information rights management module . In some embodiments all or a portion of access policy database may be stored locally on computing device and virtualization module may query access policy database for a virtualization policy associated with data .

As used herein the phrase virtualization policy generally refers to any type or form of rule or decision indicating how to handle a request to access data. For example a virtualization policy may indicate that a request to access data should be blocked allowed e.g. permitted to continue to the target data without being modified modified and or handled by implementing operating system level virtualization. A virtualization policy may indicate how a data access request should be handled in a variety of ways. In some embodiments virtualization policies may indicate access control decisions made by an information rights management system. Alternatively virtualization policies may include one or more rules that a virtualization module may use to make an access control decision.

As noted virtualization policies may indicate access control decisions made by an information rights management system. In other words a virtualization policy may provide a decision telling a virtualization module that a request to access data should be blocked allowed handled using virtualization or otherwise modified. As an example virtualization module may send a virtualization policy request for a data object to information rights management module . The virtualization policy request may include information identifying the data object the application attempting to access the data object credentials of a user logged onto computing device and or any other suitable information. Information rights management module may query access policy database for access rules associated with the data object the user and or the application. Information rights management module may interpret the rules from access policy database to determine how the application s attempt to access the data object should be handled. Information rights management module may then send a virtualization policy indicating the access control decision to virtualization module .

As an alternative to the previous example virtualization policies may include one or more rules that a virtualization module may use to make an access control decision. For example virtualization module may query information rights management module for a virtualization policy associated with a data access request. Alternatively as previously discussed virtualization module may directly interface with access policy database to retrieve a virtualization policy. In these examples the virtualization policy may include one or more rules that virtualization module may use to make an access control decision for the data access request. Virtualization module may decide to allow the request deny the request and or implement virtualization to handle the request.

As used herein the phrase implement operating system level virtualization to handle a data request generally refers to using any virtualization process for sandboxing data associated with a request. Data access requests may be handled using an application virtualization technology a namespace virtualization technology and or any other suitable operating system level virtualization technology. For example virtualization module may handle an access request for data by decrypting data storing the decrypted data in a secure location and redirecting the access request to the secure location to allow application to access the decrypted data. In some embodiments virtualization module may modify a name of a data object identified in a request to access data e.g. where data comprises the data object to sandbox the data object.

As another example of handling a data access request using virtualization a virtualization policy may indicate that data is read only for the application and the virtualization module may create a copy of the data. In such embodiments the virtualization module may redirect writes to the data from the application to the copy of the data.

A virtualization policy may include one or more application specific rules one or more data specific rules one or more user specific rules and or any other suitable rules. For example a virtualization policy may include an application specific rule that indicates how data access requests from a particular application are handled. In this example a virtualization policy may indicate that application is only allowed to read data unless a data specific policy specifies an exception to this default rule e.g. the virtualization policy may include data specific policies that indicate application cannot access certain data objects application has full read write access to certain data objects etc. .

A virtualization policy may also indicate whether a particular user e.g. a user of computing device has the right to access data. For example virtualization module and or information rights management module may query access policy database for policies associated with a particular user. The user s log on credentials and or other information identifying the user may be used to identify policies associated with the user.

At step in one or more of the systems described herein may receive the virtualization policy from the information rights management database. For example virtualization module may receive a virtualization policy associated with data from access policy database . In some embodiments virtualization module may receive the virtualization policy from access policy database through communication with information rights management module . Alternatively virtualization module may receive a virtualization policy directly from access policy database . Virtualization module may also receive a virtualization policy from access policy database in any other suitable manner.

At step in one or more of the systems described herein may control access to the data by applying the virtualization policy to the access request in a manner that is transparent to the application. For example virtualization module may control an attempt of application to access data by applying a virtualization policy from access policy database to the access request from application .

Virtualization policies may be applied in a variety of ways. For example if a virtualization policy includes an access control decision virtualization module may apply the virtualization policy by enforcing the access control decision. If a virtualization policy includes one or more access control rules virtualization module may apply the virtualization policy by interpreting the access control rules to make an access control decision and may then apply the access control decision.

Access rules may be interpreted in a variety of ways to make access control decisions. In some embodiments a virtualization policy may include a default access rule that is applied unless another rule provides an exception to the default rule. In other embodiments virtualization module may block a data access attempt if any rule indicates that the attempt should be blocked even if other rules indicate the attempt should be allowed . Conversely virtualization module may use virtualization to handle a data access attempt if any rule indicates that the attempt should be allowed even if other rules indicate that the attempt should be blocked . Virtualization module may also use any other algorithm or heuristic to apply access rules to a data access attempt.

As noted a data access attempt may be controlled in a manner that is transparent to the application making the request. As used herein the phrase applying a virtualization policy in a manner that is transparent to an application generally refers to applying virtualization policies without coordination input and or other interaction with the application. In some embodiments a virtualization policy may be applied to an access request in a manner that is transparent to an application by controlling an access request with software external to the application e.g. without having an information rights management plug in installed in the application . The phrase transparent to the application may also refer to applying virtualization policies in a way that does not interfere with an application s operation and or in a way that is not visible to an application.

By controlling data access in a manner that is transparent to an application embodiments of the instant disclosure may provide various features and or advantages over previous solutions. For example virtualization modules disclosed herein may be application agnostic i.e. may be used with various types of applications . Furthermore virtualization modules disclosed herein may implement information rights management for an application s access requests without interfering with the normal operation of the application.

Virtualization module may control access to data in a variety of ways and or in various contexts. For example if the access request is an attempt to read data virtualization module may block the attempt to read the data may allow the attempt to read the data or may implement virtualization to handle the attempt to read the data. In embodiments where the data is decrypted virtualization module may implement virtualization by decrypting a copy of the data storing the data in a secure location and redirecting the read request to the secure location. In such embodiments virtualization module may receive a decryption key from information rights management server and or may access a locally stored decryption key. The data may be decrypted by virtualization module or by any other suitable cryptography module capable of providing the decrypted data within a sandboxed i.e. secure context of computing device .

As another example virtualization module may control access to an attempt to write data. In such embodiments virtualization module may control an attempt to write to data by blocking the write attempt by allowing the write attempt and or by using virtualization to handle write attempt. Virtualization module may handle the write attempt by sandboxing data e.g. making a copy of data in a secure location . As previously discussed virtualization module may also decrypt data . Virtualization module may then allow the write to execute on the copy of data .

As used herein the phrase secure location generally refers to a location that is sandboxed e.g. protected from outside access. A sandbox may include one or more controlled resources for an application. For example a sandbox may include scratch space on disk and or memory. In a sandbox network access the ability to inspect the host system and or the ability to communicate with input devices may not be allowed or may be restricted. Sandboxes may prevent other applications from accessing sandboxed data. Sandboxes may also provide security by controlling and or limiting access to data in any other suitable manner. provide examples of how operating system level virtualization may provide a sandbox for virtualizing data access.

While the previous examples show how data may be sandboxed for a single application in some embodiments two or more applications may be allowed to access data within the same sandbox. For example data access attempts from multiple applications may be redirected to the same virtualization location. Alternatively a virtualization module may respond to data object access requests from two or more applications by mangling the data object s name in each request. For example a copy of the data object may be renamed and requests for the object from each application may be modified by changing the object name in the requests to the new name i.e. the name of the copy of the data object .

According to certain embodiments a virtualization module may control access to data by virtualizing an operating system resource associated with an access request. The virtualization module may virtualize any suitable operating system resource in any suitable way. Operating system resources include without limitation files pipes locks registry entries TCP IP ports services running objects tables and various other operating system components.

The virtualization module may virtualize an operating system resource or multiple resources by providing an application with an alternate view of the resource. In other words an operating system may provide a first view of an operating system resource and the virtualization module may provide a second view of the operating system resource to the application. For example a virtualization module may virtualize a registry key of an operating system by providing an application with a modified copy of the registry key rather than the registry key maintained by the operating system.

The steps shown in may be steps performed by a virtualization module such as virtualization module . Thus may represent a process for providing information rights management from the perspective a client machine. in contrast represents a similar process from the perspective of an application on an information rights management server. For example the steps in may be performed by information rights management module on information rights management server . In other embodiments the one or more of the steps shown in may be performed on an information rights management client and one or more of the steps shown in may be performed on an information rights management server.

At step in one or more of the systems described herein may receive from a virtualization module a request for a virtualization policy associated with a first data access request of a first application. For example information rights management module may receive a request for a virtualization policy associated with an attempt to access data from virtualization module . Information rights management module may receive the request in any suitable way. For example information rights management module may receive the request in any of the manners described in the discussion corresponding to step of .

At step in one more of the systems described herein may identify the virtualization policy by searching for one or more policies associated with data identified in the first access request. For example information rights management module may search access policy database for one or more access rules associated with data . Access rules may be associated with data in any suitable manner. For example access rules may be associated with data in a relational database. In such embodiments a signature e.g. hash fingerprint etc. of data may be associated with an access rule. Information rights management module may receive a signature of data from virtualization module and may use the received signature to lookup the virtualization policy associated with data . Information rights management module may also receive other information e.g. information identifying the application information identifying a user etc. that may be used to look up access rules.

At step in or more of the systems described herein may send a virtualization policy to the virtualization module. For example information rights management module may send the virtualization policy to virtualization module for use in controlling access requests from application to data . As previously noted the virtualization policy may include one or more access rules identified by information rights management module and or an access decision made by information rights management module .

If information rights management module determines that application has the right to access data information rights management server may provide virtualization module with a decryption key for data in addition to providing virtualization module with the virtualization policy.

In some embodiments an application may run only one process at a time for a given profile. In such embodiments virtualization module may virtualize one or more instancing resources of the application. Instancing resources may include any resources that control or are associated with instancing for an application. For example an Internet browser may create an instancing lock file when a first instance of the browser is launched. If a user attempts to launch a second instance of the browser the browser may determine that the instancing lock file already exists. As a result the process for the second instance of the browser may request that the already running process open a new browser window and then the new process may shut down. To enable processes of such a browser or other application to run simultaneously in virtualized and unvirtualized contexts virtualization module may virtualize the instancing lock file so that multiple processes of the application can run at the same time. Virtualization module may also virtualize a named mutex object and or any other instancing resource of an application to facilitate the information rights management virtualization presented herein.

If a data access attempt is to be handled using virtualization layer manager may create a layer e.g. layer and layering system software may redirect the access attempt to layer which may provide a secure context in which an application can access data. Layer manager may control configuration of layering system software through a management Application Programming Interface API .

Application may make another file access attempt to access an unprotected file in base file system . File system filter driver may intercept file access attempt and virtualization module may access a virtualization policy that indicates file access should be allowed without being modified. File system filter driver may therefore allow file access attempt to pass through to base file system . In such embodiments the virtualization policy may be a default policy that indicates access attempts for application should be allowed unless a rule indicating an access restriction exists.

Using application virtualization to provide information rights management may enable a user to edit a read only document by providing an editable copy of the read only document in a virtualization layer. For example a user may direct application which may be MICROSOFT EXCEL to open a financial spreadsheet. File system filter driver may intercept the attempt to open the financial spreadsheet and virtualization module may determine that the access attempt should be handled using virtualization. A read write copy of the financial spreadsheet may be provided in virtualization layer to allow a user to manipulate data in the financial spreadsheet without modifying data in the original spreadsheet in base file system . In such embodiments when application closes the financial document virtualization layer may be deleted and any changes made to the financial document may be deleted. Alternatively when application closes the financial document any changes made to the financial document may be preserved. For example when application closes the document virtualization layer may be deactivated. If application attempts to reopen the document virtualization layer may be activated and application may be provided access to the document in virtualization layer .

For example virtualization module may be programmed to mangle data access attempts from user mode processes e.g. application to provide access to alternate versions of data objects being requested. In other words virtualization module may intercept a data access attempt and rename a data object identified in the access attempt. Virtualization module may implement a copy on access process by duplicating the data object if the data object has not already been duplicated. For example if virtualization module receives a request to write to a file that has not yet been duplicated virtualization module may duplicate a file s content attributes directory structure and or registry key. Virtualization module may then modify the request to name the duplicate file rather than the original file and may allow the write to be executed on the duplicate file.

Processor generally represents any type or form of processing unit capable of processing data or interpreting and executing instructions. In certain embodiments processor may receive instructions from a software application or module. These instructions may cause processor to perform the functions of one or more of the exemplary embodiments described and or illustrated herein. For example processor may perform and or be a means for performing either alone or in combination with other elements one or more of the intercepting querying receiving controlling indicating decrypting storing redirecting identifying sending and or virtualizing steps described herein. Processor may also perform and or be a means for performing any other steps methods or processes described and or illustrated herein.

System memory generally represents any type or form of volatile or non volatile storage device or medium capable of storing data and or other computer readable instructions. Examples of system memory include without limitation random access memory RAM read only memory ROM flash memory or any other suitable memory device. Although not required in certain embodiments computing system may include both a volatile memory unit such as for example system memory and a non volatile storage device such as for example primary storage device as described in detail below . In one example one or more of modules from may be loaded into system memory .

In certain embodiments exemplary computing system may also include one or more components or elements in addition to processor and system memory . For example as illustrated in computing system may include a memory controller an Input Output I O controller and a communication interface each of which may be interconnected via a communication infrastructure . Communication infrastructure generally represents any type or form of infrastructure capable of facilitating communication between one or more components of a computing device. Examples of communication infrastructure include without limitation a communication bus such as an ISA PCI PCIe or similar bus and a network.

Memory controller generally represents any type or form of device capable of handling memory or data or controlling communication between one or more components of computing system . For example in certain embodiments memory controller may control communication between processor system memory and I O controller via communication infrastructure . In certain embodiments memory controller may perform and or be a means for performing either alone or in combination with other elements one or more of the steps or features described and or illustrated herein such as intercepting querying receiving controlling indicating decrypting storing redirecting identifying sending and or virtualizing.

I O controller generally represents any type or form of module capable of coordinating and or controlling the input and output functions of a computing device. For example in certain embodiments I O controller may control or facilitate transfer of data between one or more elements of computing system such as processor system memory communication interface display adapter input interface and storage interface . I O controller may be used for example to perform and or be a means for performing either alone or in combination with other elements one or more of the intercepting querying receiving controlling indicating decrypting storing redirecting identifying sending and or virtualizing steps described herein. I O controller may also be used to perform and or be a means for performing other steps and features set forth in the instant disclosure.

Communication interface broadly represents any type or form of communication device or adapter capable of facilitating communication between exemplary computing system and one or more additional devices. For example in certain embodiments communication interface may facilitate communication between computing system and a private or public network including additional computing systems. Examples of communication interface include without limitation a wired network interface such as a network interface card a wireless network interface such as a wireless network interface card a modem and any other suitable interface. In at least one embodiment communication interface may provide a direct connection to a remote server via a direct link to a network such as the Internet. Communication interface may also indirectly provide such a connection through for example a local area network such as an Ethernet network a personal area network a telephone or cable network a cellular telephone connection a satellite data connection or any other suitable connection.

In certain embodiments communication interface may also represent a host adapter configured to facilitate communication between computing system and one or more additional network or storage devices via an external bus or communications channel. Examples of host adapters include without limitation SCSI host adapters USB host adapters IEEE 1394 host adapters SATA and eSATA host adapters ATA and PATA host adapters Fibre Channel interface adapters Ethernet adapters or the like. Communication interface may also allow computing system to engage in distributed or remote computing. For example communication interface may receive instructions from a remote device or send instructions to a remote device for execution. In certain embodiments communication interface may perform and or be a means for performing either alone or in combination with other elements one or more of the intercepting querying receiving controlling indicating decrypting storing redirecting identifying sending and or virtualizing steps disclosed herein. Communication interface may also be used to perform and or be a means for performing other steps and features set forth in the instant disclosure.

As illustrated in computing system may also include at least one display device coupled to communication infrastructure via a display adapter . Display device generally represents any type or form of device capable of visually displaying information forwarded by display adapter . Similarly display adapter generally represents any type or form of device configured to forward graphics text and other data from communication infrastructure or from a frame buffer as known in the art for display on display device .

As illustrated in exemplary computing system may also include at least one input device coupled to communication infrastructure via an input interface . Input device generally represents any type or form of input device capable of providing input either computer or human generated to exemplary computing system . Examples of input device include without limitation a keyboard a pointing device a speech recognition device or any other input device. In at least one embodiment input device may perform and or be a means for performing either alone or in combination with other elements one or more of the intercepting querying receiving controlling indicating decrypting storing redirecting identifying sending and or virtualizing steps disclosed herein. Input device may also be used to perform and or be a means for performing other steps and features set forth in the instant disclosure.

As illustrated in exemplary computing system may also include a primary storage device and a backup storage device coupled to communication infrastructure via a storage interface . Storage devices and generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. For example storage devices and may be a magnetic disk drive e.g. a so called hard drive a floppy disk drive a magnetic tape drive an optical disk drive a flash drive or the like. Storage interface generally represents any type or form of interface or device for transferring data between storage devices and and other components of computing system . In one example access policy database from may be stored in primary storage device .

In certain embodiments storage devices and may be configured to read from and or write to a removable storage unit configured to store computer software data or other computer readable information. Examples of suitable removable storage units include without limitation a floppy disk a magnetic tape an optical disk a flash memory device or the like. Storage devices and may also include other similar structures or devices for allowing computer software data or other computer readable instructions to be loaded into computing system . For example storage devices and may be configured to read and write software data or other computer readable information. Storage devices and may also be a part of computing system or may be a separate device accessed through other interface systems.

In certain embodiments storage devices and may be used for example to perform and or be a means for performing either alone or in combination with other elements one or more of the intercepting querying receiving controlling indicating decrypting storing redirecting identifying sending and or virtualizing steps disclosed herein. Storage devices and may also be used to perform and or be a means for performing other steps and features set forth in the instant disclosure.

Many other devices or subsystems may be connected to computing system . Conversely all of the components and devices illustrated in need not be present to practice the embodiments described and or illustrated herein. The devices and subsystems referenced above may also be interconnected in different ways from that shown in . Computing system may also employ any number of software firmware and or hardware configurations. For example one or more of the exemplary embodiments disclosed herein may be encoded as a computer program also referred to as computer software software applications computer readable instructions or computer control logic on a computer readable medium. The phrase computer readable medium generally refers to any form of device carrier or medium capable of storing or carrying computer readable instructions. Examples of computer readable media include without limitation transmission type media such as carrier waves and physical media such as magnetic storage media e.g. hard disk drives and floppy disks optical storage media e.g. CD or DVD ROMs electronic storage media e.g. solid state drives and flash media and other distribution systems.

The computer readable medium containing the computer program may be loaded into computing system . All or a portion of the computer program stored on the computer readable medium may then be stored in system memory and or various portions of storage devices and . When executed by processor a computer program loaded into computing system may cause processor to perform and or be a means for performing the functions of one or more of the exemplary embodiments described and or illustrated herein. Additionally or alternatively one or more of the exemplary embodiments described and or illustrated herein may be implemented in firmware and or hardware. For example computing system may be configured as an application specific integrated circuit ASIC adapted to implement one or more of the exemplary embodiments disclosed herein.

Similarly servers and generally represent computing devices or systems such as application servers or database servers configured to provide various database services and or run certain software applications. Network generally represents any telecommunication or computer network including for example an intranet a wide area network WAN a local area network LAN a personal area network PAN or the Internet.

As illustrated in one or more storage devices N may be directly attached to server . Similarly one or more storage devices N may be directly attached to server . Storage devices N and storage devices N generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. In certain embodiments storage devices N and storage devices N may represent network attached storage NAS devices configured to communicate with servers and using various protocols such as NFS SMB or CIFS.

Servers and may also be connected to a storage area network SAN fabric . SAN fabric generally represents any type or form of computer network or architecture capable of facilitating communication between a plurality of storage devices. SAN fabric may facilitate communication between servers and and a plurality of storage devices N and or an intelligent storage array . SAN fabric may also facilitate via network and servers and communication between client systems and and storage devices N and or intelligent storage array in such a manner that devices N and array appear as locally attached devices to client systems and . As with storage devices N and storage devices N storage devices N and intelligent storage array generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions.

In certain embodiments and with reference to exemplary computing system of a communication interface such as communication interface in may be used to provide connectivity between each client system and and network . Client systems and may be able to access information on server or using for example a web browser or other client software. Such software may allow client systems and to access data hosted by server server storage devices N storage devices N storage devices N or intelligent storage array . Although depicts the use of a network such as the Internet for exchanging data the embodiments described and or illustrated herein are not limited to the Internet or any particular network based environment.

In at least one embodiment all or a portion of one or more of the exemplary embodiments disclosed herein may be encoded as a computer program and loaded onto and executed by server server storage devices N storage devices N storage devices N intelligent storage array or any combination thereof. All or a portion of one or more of the exemplary embodiments disclosed herein may also be encoded as a computer program stored in server run by server and distributed to client systems and over network . Accordingly network architecture may perform and or be a means for performing either alone or in combination with other elements one or more of the intercepting querying receiving controlling indicating decrypting storing redirecting identifying sending and or virtualizing steps disclosed herein. Network architecture may also be used to perform and or be a means for performing other steps and features set forth in the instant disclosure.

As detailed above computing system and or one or more components of network architecture may perform and or be a means for performing either alone or in combination with other elements one or more steps of an exemplary method for using virtualization to implement information rights management.

While the foregoing disclosure sets forth various embodiments using specific block diagrams flowcharts and examples each block diagram component flowchart step operation and or component described and or illustrated herein may be implemented individually and or collectively using a wide range of hardware software or firmware or any combination thereof configurations. In addition any disclosure of components contained within other components should be considered exemplary in nature since many other architectures can be implemented to achieve the same functionality.

The process parameters and sequence of steps described and or illustrated herein are given by way of example only and can be varied as desired. For example while the steps illustrated and or described herein may be shown or discussed in a particular order these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.

While various embodiments have been described and or illustrated herein in the context of fully functional computing systems one or more of these exemplary embodiments may be distributed as a program product in a variety of forms regardless of the particular type of computer readable media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script batch or other executable files that may be stored on a computer readable storage medium or in a computing system. In some embodiments these software modules may configure a computing system to perform one or more of the exemplary embodiments disclosed herein.

In addition one or more of the modules described herein may transform data physical devices and or representations of physical devices from one form to another. For example one or more of the modules described herein may transform a computing system into a system for providing virtualized information rights management. One or more of the modules herein may also transform attempts to access data by using virtualization to handle attempts to access data.

The preceding description has been provided to enable others skilled in the art to best utilize various aspects of the exemplary embodiments disclosed herein. This exemplary description is not intended to be exhaustive or to be limited to any precise form disclosed. Many modifications and variations are possible without departing from the spirit and scope of the instant disclosure. The embodiments disclosed herein should be considered in all respects illustrative and not restrictive. Reference should be made to the appended claims and their equivalents in determining the scope of the instant disclosure.

Unless otherwise noted the terms a or an as used in the specification and claims are to be construed as meaning at least one of. In addition for ease of use the words including and having as used in the specification and claims are interchangeable with and have the same meaning as the word comprising. 

