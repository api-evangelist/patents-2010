---

title: Providing preferred seed data for seeding a data deduplicating storage system
abstract: There is disclosed a computer system operable to process a plurality of logical storage unit manifests the manifests comprising respective pluralities of chunk identifiers identifying data chunks in a deduplicated data chunk store The computer system can determine at least one preferred manifest or preferred combination of manifests according to levels of duplication of the chunk identifiers within respective said manifests, and/or within respective combinations of said manifests. The computer system can provide preferred seed data corresponding to data chunks identified by the at least one preferred manifest or preferred combination of manifests. A method and computer readable medium are also disclosed. At least some embodiments facilitate timely and convenient transfer and storage of relevant data chunks to a receiving deduplicated data chunk store of a data storage system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08566519&OS=08566519&RS=08566519
owner: Hewlett-Packard Development Company, L.P.
number: 08566519
owner_city: Houston
owner_country: US
publication_date: 20100709
---
It is known to replicate data from a first data storage system to a second data storage system the second data storage system being located remotely from the first data storage system. For example the first data storage system might provide backup or secondary storage for one or more host computer systems and the second data storage system might enable data backed up to the first data storage system to be recovered to a known state in the event that data stored on the first data storage system becomes unavailable. Where the replicated data is not required to be available for immediate online restore purposes the expense of providing fast high bandwidth communication links to remote sites can render replicating between the first and second data storage systems over a fast communications link uneconomical compared to known alternative methods such as the transportation of data on removable storage between sites. Therefore slower lower bandwidth less expensive communications links are sometimes used for replication whereby the time taken to replicate a specified set of data is longer and is generally planned to be effected within predetermined time limits for example within eight or twenty four hours.

Where both first and second data storage systems employ data deduplication technology then following an initial replication session if subsequent replication sessions contain similar data with relatively few changes as is often the case for example with backup data then the subsequent replication can be performed more efficiently in that only previously un replicated data needs to be communicated over the slower link and previously replicated data can merely be identified over the link using a small footprint chunk identifier. However in a situation for example in which data on one of the first and second data storage systems becomes unavailable it can take an undesirably long time to replicate the data from the remaining available data storage system to a replacement data storage system over the slower communications link because the deduplicated data store of the replacement data storage system will be empty. A similar situation exists when initially replicating to a replication target.

At least some of the host computer systems execute respective storage applications and can for example take the form of the exemplary host computer system shown in . The host computer system comprises data processing apparatus including a computer processor and a computer readable medium in the form of memory for example DRAM or any other convenient form of fast direct access memory. The memory has stored thereon computer program instructions including storage application program instructions and an operating system executable on the processor . The storage application program instructions can be executed by the processor to provide a storage application. For example the storage application can take the form of a backup application such as HP Data Protector or any other suitable application that such as a pointer to a location in the chunk store accesses data from the host computer system and or other computer systems and transforms the accessed data into a form suitable for transmitting to a target backup data storage system . The operating system comprises for example a Linux UNIX or OS X based operating system Microsoft Windows operating system or any other suitable operating system.

The host computer system also includes secondary storage having user data stored thereon. The secondary storage may have slower access than the memory and conveniently comprises a hard disk drive enclosure or any other convenient form of mass storage. The exemplary host computer system comprises an industry standard server having the secondary storage located within the server enclosure. Alternatively the host computer system can include for example a blade server and the secondary storage can be located separately to the server enclosure or the host computer system can be any other convenient form of computer system.

The host computer system also includes a communications interface for communicating with a fast network . The fast network can for example comprise one or more local area networks LANs using for example Gigabit Ethernet technology or any other suitable LAN technology. The communications interface can comprise for example a host bus adapter HBA using iSCSI over Ethernet or Fibre Channel protocols for handling backup data in a tape data storage format a NIC using NFS or CIFS network file system protocols for handling backup data in a NAS file system data storage format or any other convenient type of interface.

The data storage systems can take the form of the exemplary data storage system illustrated in . Data storage system comprises data processing apparatus in the form of a controller having a processor and a computer readable medium in the form of a memory. The memory can comprise for example DRAM or any other convenient form of fast direct access memory. During use of the data storage system the memory has stored thereon computer program instructions executable on the processor including an operating system comprising for example a Linux UNIX or OS X based operating system Microsoft Windows operating system or any other suitable operating system. The data storage system also includes a communications interface for communicating with a fast relatively high bandwidth network a further communications interface for communicating with a relatively slow relatively low bandwidth network and a still further communications interface for communicating with removable storage .

The data storage system also includes secondary storage . The secondary storage may provide slower access speeds than the memory and conveniently comprises hard disk drives or any other convenient form of mass storage. The hardware of the exemplary data storage system can for example be based on an industry standard server. The secondary storage can located in an enclosure together with the data processing apparatus or separately.

The data storage systems at the satellite sites can communicate with the data storage system at the central site to replicate data over a relatively slow low bandwidth network using interfaces such as the interface shown in . The network can for example be any convenient form of wide area network WAN and can provide for example link speeds from about 2 Mbits sec to about 50 Mbits sec or more. The selection of a satisfactory link speed for low bandwidth replication will depend on the amount of data to be replicated in a time that is acceptable to a system manager and whether the link is dedicated to replication or shared with other inter site communications. Generally other factors being equal procuring a lower speed link will result in lower costs than sharing a higher speed link. The WAN link may span for example a few kilometres more than 30 kilometres to mitigate some disaster scenarios such as earthquakes and up to several thousand kilometres depending on latency of the link. The communications interface can for example comprise a network interface card NIC and communication can be over TCP IP socket connections using any suitable message protocol for example a message protocol proprietary to the manufacturer of the data storage system for communication between the data storage system and another data storage system connected to the WAN .

A fast link can be formed between the communications interface and a host communications interface over a fast high bandwidth network for example comprising a Gigabit Ethernet LAN or any other suitable LAN technology. The communications interface can comprise for example a host bus adapter HBA using iSCSI over Ethernet or Fibre Channel protocols for handling backup data in a tape data storage format a NIC using NFS or CIFS network file system protocols for handling backup data in a NAS file system data storage format or any other convenient type of interface.

The communications interface can comprise a HBA for communication with a removable storage device for transferring data to removable storage. The removable storage device can comprise for example a tape drive optical disk drive flash memory or any other convenient type of removable storage device. The HBA can communicate with the removable storage device using for example Serial Attached SCSI SAS USB Fibre Channel SCSI or any other convenient protocol appropriate for the removable storage device.

The program instructions also include modules that when executed by the processor respectively provide a virtual tape library VTL interface a NAS storage interface a data deduplication engine a determiner an offloader and a replication engine as described in further detail below.

The virtual tape library VTL interface is operable to emulate at least one physical tape library facilitating that existing storage applications designed to interact with physical tape libraries can communicate with the interface without significant adaptation and that personnel managing host data backups can maintain current procedures after a physical tape library is changed for a VTL. A communications path can be established between a storage application and the VTL interface using the interfaces and a fast network . A part of the communications path between the VTL interface and the network is illustrated in . The VTL user interface can receive a stream of data in a tape data storage format from a host storage application storage session for example a backup session and can pass data back to a host in response to usual tape storage application command protocols. The VTL user interface also generates a graphical user interface GUI that can be viewed on a presentation resource such has a display device of a computer system connected to the data storage system in any convenient manner for example using a web browser connected across a fast network using the interface .

The data storage systems shown in are each configured using the VTL user interface to provide a plurality of virtual libraries . Each virtual library comprises a configurable collection of virtual slots to to to to to to to and logical storage units in the form of virtual tape cartridges. Virtual tape cartridges are shown represented by crosshatching in slots to and to .

Slots in the virtual libraries of the remote site data storage systems are mapped to slots in the virtual libraries at the central site . As shown in slots in the virtual library map directly to slots in virtual library and slots in virtual library map directly to slots in the virtual library . Some of the slots from virtual libraries and map into virtual library . The slot mappings are user configurable and the slots cartridges and virtual libraries can be presented by the GUI in any convenient manner.

The replication engine is operable to control transmission of data stored on a virtual tape cartridge over the interface and a relatively low bandwidth network link for receipt by a virtual tape library of a further data storage system. For example in virtual tape libraries at remote sites are configured as replication sources and virtual tape libraries at the central site are configured as replication targets for replication of virtual tape cartridges as indicated by arrows and . Such an arrangement can conveniently be employed for example to replicate backed up data to the central site for disaster recovery purposes. The data storage systems each permit configuration of virtual tape libraries as one of a replication source and a replication target. For example to perform restore operations by replicating virtual tape cartridges from a virtual tape library at the central site to a new virtual tape library on for example a replacement data storage system at a remote site the central virtual tape library required to perform restore is reconfigured as a replication source and the new virtual tape library is configured as a replication target.

The program instructions also include a module that when executed by the processor provides a network attached storage NAS interface . The NAS user interface can be provided in addition to or as an alternative to the VTL user interface . A communications path can be established between a storage application and the NAS interface using the interfaces and a fast network . A part of the communications path between the NAS interface and the network is illustrated in . The NAS user interface presents a shared file system to the host storage application. Data storage systems can be configured to provide a desired arrangement of file shares not shown . Each file share can comprise a collection of logical storage units in the form of files not shown . Each file can for example relate to a relatively large backup session file provided by a backup application. In the present embodiment replication source file shares are mapped to replication target file shares on a one to one basis.

Referring to the deduplication engine includes functional modules comprising a chunker a chunk identifier generator in the form of a hasher a matcher and a storer as described in further detail below. The VTL user interface and the NAS user interface can pass data to the deduplication engine for deduplication and storage. In one exemplary embodiment a data buffer for example a ring buffer controlled by the deduplication engine receives data from the VTL or NAS user interface or . The data can conveniently be divided by the deduplication engine into data segments for processing. The segments can be relatively large for example between 5 and 50 Mbytes say about 10 MBytes or any other convenient size. The segments can be of variable size within thresholds segment boundaries being selected according to characteristics of the data. Alternatively fixed sized segments may be selected or any other convenient segment selection process may be employed. The chunker examines data in the buffer and identifies data chunks of a convenient size for processing by the deduplication engine . The chunks may for example be of variable size within thresholds the chunk boundaries being selected according to characteristics of the data and have an average size for example of approximately 4 KBytes or any other convenient size. Alternatively fixed sized chunks may be selected and or the boundaries of the data chunks may be coterminous with file boundaries or any other convenient chunk selection process may be employed.

The hasher is operable to process a data chunk using a hash function that returns a number or hash that can be used as a chunk identifier to identify the chunk . The chunk identifiers are stored in manifests in a manifest store in secondary storage . Each manifest comprises a plurality of chunk identifiers . Conveniently the chunk identifiers corresponding to the chunks in a segment can be stored together in a chunk identifier portion not shown each manifest comprising one or more of the portions. The portions can be relatively large say about 10 MBytes or any other convenient size and a manifest can comprise tens or hundreds of portions. The term hash function is to be understood to refer to any well defined procedure mathematical function or deterministic function that converts a large possibly variable sized amount of data into a small datum. The hash function is selected such that the possibility of two data chunks producing the same hash or colliding is statistically extremely small for the purposes of deduplication. One exemplary suitable hash function is the SHA 1 hash function. The chunk identifiers are represented in by respective letters identical letters denoting identical chunk identifiers .

The matcher is operable to attempt to establish whether a data chunk in a newly arrived segment is identical to a previously processed and stored data chunk. This can be done in any convenient manner. In one exemplary embodiment a sparse index is maintained in memory comprising hooks in the form of chunk identifiers selected according to a predetermined criterion for example using a characteristic of the data such as that the selected identifiers have the value 0 for all their most significant n bits where n is a predetermined number or using any other convenient criterion. Depending on the results of a comparison between chunk identifiers in a received segment and the hooks in the sparse index selected manifest portions that appear to potentially have the most chunks in common with the data segments to be processed are loaded from the manifest store into memory and a comparison made between each chunk identifier in the newly arrived segment and the respective chunk identifiers in the selected manifest portions.

If no match is found for a data chunk of a segment the storer will store the corresponding unmatched data chunk from the buffer to a deduplicated data chunk store in secondary storage . Data chunks are conveniently stored in the data chunk store in relatively large containers having a size for example of say between 2 and 4 Mbytes or any other convenient size. Meta data including a storage locator such as a pointer to a location in the chunk store for a stored data chunk is stored in association with the unmatched chunk identifier in the manifest store . It will be appreciated from the above that there might be some residual level of duplication of data chunks in the data chunk store and the terms deduplication and deduplicated should be understood in this context. Data chunks can be processed to compress the data if desired prior to saving to the chunk store for example using LZO or any other convenient compression algorithm.

If a match is found the storer will not store the corresponding matched data chunk but will obtain from the meta data stored in association with the matching chunk identifier a storage locator for the matching data chunk. The obtained meta data is stored in association with the newly matched chunk identifier in a manifest in the manifest store in secondary storage . Using a sparse index in a manner as described above reduces the amount of fast access memory required to perform matching of large numbers of chunk identifiers. However it will be appreciated that the skilled person will be able to envisage many alternative ways in which to store and match the chunk identifiers and data chunks. If the cost of an increase in size of fast access memory is not a practical impediment at least part of the manifest store and or the data chunk store could be retained in fast access memory.

To replicate a logical storage unit such as a virtual tape cartridge or a file from a logical storage unit collection configured as a replication source to a logical storage unit collection configured as a replication target a replication engine of the source data storage system requests a deduplication engine of the source data storage system to provide from the data chunk store of the source data storage system a manifest corresponding to the logical storage unit to be replicated. The logical storage unit to be replicated is transmitted to the data storage system hosting the target logical storage collection using source and target interfaces and the low bandwidth link . A replication engine of the target data storage system requests a deduplication engine of the target data storage system to perform a matching operation using the transmitted manifest against selected manifest portions stored in the manifest store of the target logical storage unit collection of the target data storage system and to return a list of unmatched chunk identifiers . The matching operation can for example use some similar operations to the matching of newly arrived segments described above. Following receipt of the list of unmatched identifiers the source replication engine requests the source data deduplication engine to provide from a chunk store of the source logical storage unit collection data chunks corresponding to the unmatched chunk identifiers and sends the data chunks to the target data storage system . The target replication engine requests the target deduplication engine to store the received corresponding data chunks and the manifest to be replicated.

In this manner efficient replication of logical storage units over the low bandwidth link is facilitated as long as the chunk store of the target logical storage unit collection has sufficiently numerous and relevant data chunks and corresponding manifests of data identifiers stored thereon to provide a significant number of matches between received chunk identifiers and previously stored chunk identifiers. Also backup data often contains large amounts of identical data arranged in a similar sequence to previous backup data. In some embodiments the order in which data chunks including data chunks appended in later backups are stored in the containers and the selection of containers in which to store data chunks including appended data chunks is managed for example to attempt to increase matching efficiency by reducing the number of containers that need to be accessed during anticipated future backup sessions. This can further facilitate efficient replication and deduplication of backup data.

There are occasions when a chunk store of a replication target virtual storage unit collection contains an insufficient number of relevant chunks to enable efficient replication of logical storage units over the low bandwidth link . For example when it is first decided to replicate backup data to a central site using a new replication target data storage system or following replacement of a failed source data storage system at a remote site . The data storage systems facilitate the provision of seed data from logical storage units of one data storage system to another data storage system using removable storage . In one exemplary embodiment a user of the data storage system or a host computer system or another computer system connected to the data storage system is presented with an option to request generation of a list of at least one logical storage unit suitable for use as seed data and or to request generation of removable physical storage bearing suitable seed data.

In response to receiving a request to proceed from a user the VTL user interface identifies the or each virtual tape cartridge manifest in the instant virtual tape library and requests the determiner to process the or each manifest to determine at least one preferred manifest or preferred combination of manifests according to levels of duplication of the chunk identifiers within the respective manifests or combinations. By way of example the determiner is operable to perform a method illustrated conceptually in and for determining at least one preferred manifest or preferred combination of manifests.

The resulting values in the non duplicates column are compared and the manifest in the example of manifest having the highest non duplicate value is selected as the currently preferred manifest indicated by a tick in . In case of a draw between manifests having equal non duplicate values the drawing manifest with the lowest size value in column is selected. In case of a further draw the first listed of the drawn manifests is selected. If the currently preferred manifest represents a virtual tape cartridge satisfying the input requirements regarding the number and or capacity of tape cartridges the determiner reports the currently preferred manifest as the determined preferred manifest.

If the currently preferred manifest represents a virtual tape cartridge not satisfying the input requirements regarding the number and or capacity of tape cartridges the determiner uses manifest as a root manifest and combines this root manifest with each of the remaining manifests as illustrated in . The resulting combinations of manifests are processed in a similar manner to the processing of the individual manifests described above with a reference to . That is the resulting count values in the non duplicates column are compared and the manifest combination having the highest non duplicates value in example of manifest combination is selected as the currently preferred manifest combination indicated by a tick in . In case of a draw between manifests having equal non duplicate values the drawing manifest with the lowest size value in column is selected. In case of a further draw the first listed of the drawn manifests is selected. If the currently preferred manifest combination represents virtual tape cartridges satisfying the received data input relating to the desired number and or capacity of tape cartridges the determiner reports that manifest combination as the determined preferred manifest combination.

If the currently preferred manifest combination represents virtual tape cartridges not satisfying the received data input relating to the desired number and or capacity of tape cartridges the determiner uses the currently preferred manifest combination as a root and combines this root with each of the remaining manifests as illustrated in . Any manifest which is a subset of the current root for example manifest and manifest in is removed from the list. The resulting values in the non duplicates column are compared and the remaining manifest combination having the highest non duplicates value in the example of manifest combination is selected as the currently preferred manifest combination indicated by a tick in . In case of a draw between manifest combinations having equal nonduplicate values the drawing manifest combination with the lowest size value in column is selected. In case of a further draw the first listed of the drawn manifests is selected. If the currently preferred manifest combination represents virtual tape cartridges satisfying the requirements regarding the number and or capacity of tape cartridges the determiner reports manifest combination to the VTL user interface as the determined preferred manifest combination.

If the currently preferred manifest combination represents virtual tape cartridges not satisfying the requirements regarding the number and or capacity of tape cartridges the determiner iterates the process described in the immediately preceding paragraph until the requirements regarding the number and or capacity of tape cartridges are satisfied and reports of the resulting manifest combination to the VTL user interface as the finally determined preferred manifest combination. The determiner also determines the number of non duplicate hashes in the finally determined preferred manifest combination as a proportion of the number of non duplicate hashes in all manifests to and reports these numbers and or the proportion to the VTL user interface . The VTL user interface presents the reported information to the user using the GUI . For example in the proportion is presented as coverage 52 and a list is presented of tape cartridge identifiers for example barcode numbers of the virtual tape cartridges corresponding to the manifests in the finally determined preferred combination of manifests.

Using the GUI of the method described above with reference to and is employed but the determiner reports to the VTL user interface after each iteration the currently determined preferred manifest or manifest combination. The determiner also determines after each iteration the number of non duplicate hashes in the currently determined preferred manifest combination as a proportion of the number of non duplicate hashes in all manifests to that is the coverage and reports these numbers and or the proportion to the VTL user interface . The VTL user interface presents some details of the virtual tape cartridges corresponding to the currently determined preferred manifest or manifest combination and other reported information to the user using the GUI . For example as shown in the coverage provided by a preferred virtual tape cartridge or preferred combinations of virtual tape cartridges is presented for each of an increasing number of virtual tape cartridges in the range selected by the user. A user activatable show tapes object to is presented alongside the coverage for each tape cartridge or tape cartridge combination in the range. In response to activation of a show tapes object to a tape cartridge identifier list is presented identifying a virtual tape cartridge corresponding to a determined preferred manifest or identifying virtual tape cartridges corresponding to manifests in the determined preferred combination s of manifests.

In alternative embodiments manifests can simply be ranked according to levels of duplication of the chunk identifiers within each manifest combinations of manifests not being considered and a list of corresponding ranked logical storage units provided. However in certain situations for example where many manifests respectively contain significant quantities of similar data this approach is less effective than alternative approaches that consider combinations of manifests.

The offloader is operable to respond to an offload request for example from the VTL user interface to offload a logical storage unit to removable storage. For example a user activatable offload tapes object can be presented to a user to facilitate offload of at least one identified required virtual tape cartridge to at least one physical tape cartridge using a physical tape library or physical tape drive connected to the data storage system through the communications interface . In this case activation of the offload tapes object leads to a further GUI page permitting a user to select desired physical tape cartridges and slots to receive the identified required virtual tapes and presenting a user activatable object for initiating the offload. Alternatively a single click of the offload tapes object could automatically initiate offload using preselected physical tape cartridges and slots. Similarly a user activatable offload tapes object not shown could be presented by GUI in a page that is presented together with the tape cartridge identifier list in response to activation of a show tapes object .

Alternatively where virtual tape cartridges are routinely offloaded to physical tape cartridges using for example a tape library connected to the interface a further activatable object not shown can be provided by the GUI to enable a user to request that the physical tape cartridges containing selected previously offloaded virtual tape cartridges be exported by the tape library. Alternatively a user can simply use the information presented by the GUI to manually identify and access required physical tape cartridges.

In some embodiments the determination of a preferred manifest or manifest combination can be performed using reduced sets of chunk identifiers selected from the respective manifests. For example the processing of the logical storage unit manifests can be performed using only those chunk identifiers within each manifest that have say the value zero assigned to their seven most significant bits or by selecting reduced sets of chunk identifiers based on some other convenient characteristic of the chunk identifiers. Additionally or alternatively only certain bits within each chunk identifier might be used for the processing of the logical storage unit manifests.

The or each physical tape cartridge bearing the or each offloaded preferred virtual tape cartridge is physically transported to a locality of a data storage system to be seeded. The or each virtual tape cartridge is then imported to the data storage system to be seeded using a physical tape library or physical tape drive connected to the data storage system for example using a direct attached connection or a fast network connection.

Offloading can be performed so as to map virtual tape cartridges and physical tape cartridges on a one to one basis. Alternatively where the physical tape cartridge or cartridges to be offloaded have different storage capacity to the virtual tape cartridges more than one virtual tape cartridge may be offloaded to a physical tape cartridge or a virtual tape cartridge may be offloaded partially to one physical tape cartridge and partially to another physical tape cartridge. It is not necessary that virtual tape cartridges used to seed a data storage system are cross referencable between the seeded data storage system and the seeding data storage system. For example the seed data can be stored in dummy virtual tape cartridges created specifically for the purposes of seeding. As long as the seed data has been processed and stored by the receiving data storage system the efficiency of remote replication should be increased.

In response to receiving a request to proceed from a user the NAS user interface identifies the or each file manifest in the instant file share and requests the determiner to process the or each manifest to determine at least one preferred manifest or preferred combination of manifests according to levels of duplication of the chunk identifiers within the respective manifests or combinations. By way of example the determiner is operable to perform a method illustrated conceptually in and for determining at least one preferred manifest or preferred combination of manifests.

The resulting comparative values in column are compared and the manifest in the example of manifest having the highest value is selected as the currently preferred manifest indicated by a tick in . In case of a draw between manifests having equal ratio values the drawing manifest with the largest size value in column is selected. In case of a further draw the first listed of the drawn manifests is selected. If the currently preferred manifest represents a file that reaches the input available storage capacity within a predetermined threshold the determiner reports the currently preferred manifest as the determined preferred manifest.

If the currently preferred manifest represents a file that does not reach the input available storage capacity within the predetermined threshold the determiner uses manifest as a root manifest and combines this root manifest with each of the remaining manifests as illustrated in . Any manifest combination other than the current root that is a subset of the current root is removed from the list or ignored. The resulting combinations of manifests are processed in an analogous manner to the processing of the individual manifests described above with a reference to . That is the resulting comparative values in column are compared and the manifest combination in the example of manifest combination having the highest ratio value is selected as the currently preferred manifest combination indicated by a tick in . In case of a draw between manifests having equal ratio values the drawing manifest with the largest size value in column is selected. In case of a further draw the first listed of the drawn manifests is selected. If the currently preferred manifest combination represents files that reach the input available storage capacity within a predetermined threshold the determiner reports the currently preferred manifest combination as the determined preferred manifest combination. If the currently preferred manifest combination represents files that exceed the input available storage capacity the determiner reports the previously preferred manifest or manifest combination as the determined preferred manifest or manifest combination.

If the currently preferred manifest combination represents files that do not reach the input available storage capacity within the predetermined threshold the determiner uses the currently preferred manifest combination as a root and combines this root with each of the remaining manifests as illustrated in . Any manifest combination other than the current root that is a subset of the current root is removed from the list or ignored. The resulting combinations of manifests are processed in an analogous manner to the processing of the manifest combinations described above with reference to . That is the resulting comparative values in column compared and the manifest combination in the example of manifest combination is selected as a currently preferred manifest combination indicated by a tick in . In case of a draw between manifests having equal ratio values the drawing manifest with the largest size value in column is selected. In case of a further draw the first listed of the drawn manifests is selected. If the currently preferred manifest combination represents files that reach the input available storage capacity within the predetermined threshold or there are no comparisons left to perform the determiner reports the currently preferred manifest combination as the determined preferred manifest combination. If the currently preferred manifest combination represents files that exceed the input available storage capacity the determiner reports the previously preferred manifest or manifest combination as the determined preferred manifest or manifest combination.

If the currently preferred manifest combination represents files that do not reach the input available storage capacity within the predetermined threshold the determiner iterates the process described in the immediately preceding paragraph until the predetermined threshold is met or exceeded. If the currently preferred manifest combination represents files that reach the input available storage capacity within the predetermined threshold or there are no comparisons left to perform the determiner reports the currently preferred manifest combination as the final determined preferred manifest combination. If the currently preferred manifest combination exceeds the input available storage capacity the determiner reports the previously preferred manifest or manifest combination as the final determined preferred manifest or manifest combination. The determiner also determines the number of non duplicate hashes in the finally determined preferred manifest combination as a proportion of the number of non duplicate hashes in all manifests to and reports these numbers and or the proportion to the NAS user interface . The NAS user interface presents the reported achieved coverage information to the user using the GUI for example using an information output box . A data input box for receipt of a destination file address together with a prompt to enter the address can be provided to facilitate transfer of the seed data corresponding to the determined preferred manifest or manifest combination to a desired removable storage destination. A user activatable object can be provided to initiate offload of the finally determined seed data files to the destination file at the received destination file address.

In an alternative embodiment a plurality of logical storage unit manifests identifying a collection of logical storage units can be copied from a data storage system to another computer system for example a host computer system which computer system includes a determiner module similar to the determiner for processing the manifests. The determiner module can for example communicate with or form part of a storage application such as a backup application. The backup application can include GUIs similar to the GUIs described above with respect to and for obtaining user input for example regarding the capacity of removable storage available locally and or over a fast communications link. Additionally or alternatively the backup application can establish from the host or other computer system what type and capacity of removable storage is available. Following processing of the manifests at the host or other computer system the storage application can be used to obtain the finally preferred logical storage units from the data storage system for example using a special application programming interface API provided for this purpose. Seed data for example in the form of finally preferred files can then be copied to the removable storage by the host or other computer system over the local and or fast communications link.

Using a deduplicating data storage system as described above a list of manifests representing respective logical storage units for example respective virtual tape cartridges or file system shares is identified. The manifests are processed for example in a manner as described above to determine at least one preferred manifest or preferred manifest combination according to levels of duplication of data chunk identifiers within respective manifests or preferred manifest combinations. The preferred manifest or manifest combinations comprise data identifiers that identify the stored data chunks that constitute the represented logical storage units.

Removable physical storage for example at least one physical tape cartridge hard disk drive flash memory CD DVD or any other convenient physical storage is then provided bearing the identified data chunks for use as seed data. For example at least one physical tape cartridge can be provided by offloading preferred virtual tape cartridges to the physical tape cartridge using a tape library or tape drive connected over a fast connection to the data storage system . For example the data storage system offload facility can be used to offload the preferred virtual tape cartridges to a physical tape cartridge in a physical tape library through the interface . Alternatively at least one physical tape cartridge can be provided by using an identified previously offloaded physical tape cartridge for example by exporting identified physical tape cartridges from a physical tape library connected to the data storage system. As a further alternative at least one removable storage unit can be provided by the NAS interface copying preferred file shares to the at least one removable storage unit through the interface . Other still further alternatives will be apparent to the ordinarily skilled person.

The removable physical storage bearing the seed data is physically transported to the locality of a data storage system to be seeded that is to a location in which a high bandwidth connection can be conveniently made between the removable storage and the data storage system. The data storage system to be seeded receives the preferred logical storage unit seed data. For example import functionality of the VTL interface can be used to import the contents of the at least one physical seed tape cartridge using a physical tape library in communication with the data storage system to be seeded. According to another example the NAS interface can be used to copy seed data from the removable storage. By storing the seed data non duplicated data chunks from the seed data are stored in the data chunk store of the receiving data storage system in accordance with the usual deduplication process applied to storage data sent to the data storage system .

At least some of the embodiments described above facilitate timely and convenient transfer and storage to a receiving deduplicated data chunk store of relevant data chunks . This can be beneficial for example when employed with systems that use relatively slow and or relatively cheap communication links for replication of data. Using at least some of the embodiments described above the order in which the data chunks are received and stored in the receiving data chunk store is likely to reflect the order of data chunks in future backup data which can assist high efficiency for example in deduplication engines that make use of data chunk order and or locality in the matching process.

Any of the features disclosed in this specification including the accompanying claims abstract and drawings and or any of the steps of any method or process so disclosed may be combined in any combination except combinations were the sum of such features and or steps are mutually exclusive. Each feature disclosed in this specification including the accompanying claims abstract and drawings may be replaced by alternative features serving the same equivalent or similar purpose unless expressly stated otherwise. Thus unless expressly stated otherwise each feature disclosed is one example only of a generic series of equivalent or similar features.

The invention is not restricted to the details of any foregoing embodiments. The claim should not be construed to cover merely the foregoing embodiments but also any embodiments which fall within the scope of the claims including alternative algorithms for determining the preferred manifest or manifest combination some of which will be readily apparent to the ordinarily skilled person reading the foregoing. The invention extends to any novel one or any novel combination of the features disclosed in this specification including the accompanying claims abstract and drawings or to any novel one or any novel combination of the steps of any method or process so disclosed.

Embodiments within the scope of the present invention also include at least one computer readable medium for having above described computer executable program instructions or data structures stored thereon also known as computer software. Such computer readable medium can be any suitable medium accessible by a general purpose or special purpose computer such as host computer system or data storage system . Computer executable instructions may comprise for example instructions and data which cause a general purpose computer special purpose computer or other special purpose processing device to perform a certain function or group of functions. The software of the present invention can be implemented in several different ways. The implementation of the software is not limiting on the invention.

