---

title: Management of device settings via a plurality of interfaces
abstract: The present specification relates to a portable electronic device comprising at least one processor; a display connected to the processor and controllable by the processor; and non-volatile storage configured to maintain a plurality of applications and an application programming interface for enabling generation and control of a title bar, wherein the application programming interface includes a private part for managing the state of the title bar and a public part that provides an interface to the applications.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08756524&OS=08756524&RS=08756524
owner: BlackBerry Limited
number: 08756524
owner_city: Waterloo
owner_country: CA
publication_date: 20100723
---
The present specification relates generally to computing devices and more specifically relates to a method and apparatus for generating a graphical title bar that can be integrated for use with a plurality of device applications having graphical user interfaces.

Mobile electronic devices continue apace to provide greater functionality. Some non limiting examples are helpful. In terms of applications email calendaring contact management are ubiquitous on mobile electronic devices and a large number of enhanced applications beyond these core applications are also being offered. In terms of hardware cameras high resolution displays touch screens are also ubiquitous. In terms of network connectivity devices often include multiple radios to accommodate communication links via different types of core mobile networks as one non limiting example 3G and wireless local area networks as one non limiting example Institute of Electrical and Electronic Engineers Standard 802.11 .

Each application operable on a mobile electronic device may include a user interface for controlling the device display via for example a keyboard and pointing device such as a touch pad or touch screen display. This may be achieved by importing and extending a user interface API for the application. For example a title bar may be used to display information relating to a plurality of applications and or the mobile electronic device.

Developers of applications have been known to implement custom title bar components for displaying information relating to respective applications. This can lead to inconsistent presentation of title bar information across multiple applications on a single device. Furthermore the effort of such developers in designing such customized title bars is duplicated and additional memory and processing resources are required by each application to generate the various icons. Accordingly a technical problem exists in how to optimize memory usage in a device having multiple applications each requiring display of a title bar. Furthermore in some instances developers don t have any control over system notification icon presentations such as battery signals which can lead to a presentation of information that is not contextual enough for the application.

A first aspect of the specification provides a portable electronic device comprising at least one processor a display connected to the at least one processor and controllable by the at least one processor and non volatile storage configured to maintain a plurality of applications and an application programming interface that is common to the plurality of applications for enabling the processor to generate and control a title bar under control of the applications wherein the application programming interface includes a private part for managing the state of the title bar and a public part that provides an interface to the applications.

The title bar can include at least one of current state of information notifications pushed icons and signals. The information can include at least one of an application icon title string and time. The processor can cause the current state of information to be left aligned on the display and the notifications pushed icons and signals to be right aligned on the display.

The application programming interface can include a component for generating one of either a general title of an application or a string that provides information based on the current state of the application.

The application programming interface can include an icon component for generating one of either a general application icon related to an application or an icon that reflects the current state of the application.

The public part can include a TitleBar component. The TitleBar component can be a member of a Screen component that provides a set and get functionality for adding and customizing the TitleBar component whereby any one of the applications that requires display of the title bar extends the TitleBar component in order to avail itself of set and get functionality of the Screen component. The private part can include a TitleBarView class that implements layout for the application programming interface and drawing logic for the title bar a TitleBarModel class for updating components and that is extended by a StandardTitleBarModel that implements data for defining the current state of the StandardTitleBar object and a TitleBarController providing interface functionality with the TitleBarModel class and TitleBarView class. The TitleBar component can be extended by a StandardTitleBar component that provides a public interface and provides a plurality of add remove methods for adding optional components to the title bar. The TitleBar component can have a first package private method to facilitate adding components to the title bar and a second package private method to facilitate removing components from the title bar. Each of the first and second package private method can have a component Key parameter that defines which component to add to the title bar or remove therefrom. The StandardTitleBar component can have at least one optional component containing a pair of functions that are prefixed with add and remove respectively. The StandardTitleBar component can generate a battery icon in the event that charge on a battery of the portable device falls below a predetermined level or is being charged. The StandardTitleBar component can generate an active phone call indicator in the event a call is in progress on the portable device. The TitleBarController can listen and process events and update the TitleBarModel class and inform the TitleBarView class for redrawing the title bar.

A second aspect of the specification provides a method for controlling a display of a portable device capable of executing a plurality of applications the method comprising generating a content region on the display and generating a title bar on the display divided into a plurality of areas including an information area representing current state of information relating to one of the applications and an additional area representing at least one of notifications pushed icons battery alert and signals.

The information area can be left aligned relative to the display whereas the additional area can be right aligned.

The information area can include at least one of a general title of an application or a string that provides information based on the current state of the application or at least one of a general application icon related to an application or an icon that reflects the current state of the application.

Referring now to a schematic representation is provided of a non limiting example of a portable electronic device . It is to be understood that portable electronic device is purely exemplary and it will be apparent to those skilled in the art that a variety of different portable electronic device structures are contemplated. Indeed variations on portable electronic device can include without limitation a cellular telephone a portable email paging device a camera a portable music player a portable video player a portable video game player. Other contemplated variations include devices which are not necessarily portable such as desktop computers.

Referring to device comprises a chassis that supports a display . Display can comprise one or more light emitters such as an array of light emitting diodes LED liquid crystals plasma cells or organic light emitting diodes OLED . Other types of light emitters are contemplated. Chassis also supports a keyboard . It is to be understood that this specification is not limited to any particular structure spacing pitch or shape of keyboard and the depiction in is purely exemplary. For example full or reduced QWERTY keyboards are contemplated. Other types of keyboards are contemplated. Device also comprises a pointing device which can be implemented as a touch pad joystick trackball track wheel or as a touch sensitive membrane on display . Device also comprises a speaker for generating audio output and a microphone for receiving audio input.

Referring to a rear view of device is shown. In device is also shown as comprising a flash and an optical capture unit . It is to be understood that the term optical as used in relation to optical capture unit is not directed to a lens structure or the like but rather to refer to an array of charge couple devices CCD or a functionally equivalent transducer structure that is configured in association with a lens structure to receive an image in the form of electro magnetic energy substantially within the visible spectrum and to convert that energy into an electronic signal which can be further processed. Typically the electronic signal is digitized for storage. The stored digitized image can be further processed and can be generated on display . Flash can activate to provide additional lighting to assist the capture of energy by optical capture . In general it will now be understood that optical capture unit can if desired be implemented or based on a digital camera function as commonly incorporated into portable electronic devices. A battery compartment cover is also shown in with a tab that can be manipulated to unlock cover from chassis and so that cover can be detached from chassis .

Processor in turn is also configured to control display speaker and flash also in accordance with different programming instructions and optionally responsive to different input receive from the input devices.

Processor also connects to a network interface which can be implemented in a present embodiment as a radio configured to communicate over a wireless link although in variants device can also include a network interface for communicating over a wired link. Network interface can thus be generalized as a further input output device that can be utilized by processor to fulfill various programming instructions. It will be understood that interface is configured to correspond with the network architecture that defines such a link. Present commonly employed network architectures for such a link include but are not limited to Global System for Mobile communication GSM General Packet Relay Service GPRS Enhanced Data Rates for GSM Evolution EDGE 3G High Speed Packet Access HSPA Code Division Multiple Access CDMA Evolution Data Optimized EVDO Institute of Electrical and Electronic Engineers IEEE standard 802.11 Wifi Bluetooth or any of their variants or successors. It is also contemplated each network interface can include multiple radios to accommodate the different protocols that may be used to implement different types of links. In the specific non limiting example interface is configured to provide 3G Wifi and Bluetooth links.

Device can be implemented with different configurations than described omitting certain input devices or including extra input devices and likewise omitting certain output devices or including extra input devices.

In a present embodiment device is also configured to maintain within non volatile storage a plurality of applications such as an email application calendar application short message service SMS application and other applications such as for example a phone application social networking application media player application etc.

According to conventional programming methodologies each application may include a user interface for controlling display via for example keyboard and pointing device . This may be achieved by importing and extending a user interface API for the application which may include a public abstract Screen class that manages screen images passed to it from the application as discussed in greater detail below.

A non limiting example of the foregoing is shown in where processor is shown as controlling display to generate a title bar and content region . According to the example embodiment title bar is divided into categories including icons representing a current state of information notifications pushed icons such as active call icon and battery alert icon and signals as described in greater detail below. In the non limiting example shown the information i.e. icon title string and time are left aligned relative to the display whereas the notifications pushed icons and and signals are right aligned.

The information area of the bar may contain information relative to a specific application and may be provided as a generally convenience to a user. The information region may for example include the following components Title String which can be either a general title of the application or a String that provides information based on the current state of the application a dynamically editable Icon Image which can be either a general application icon or an icon that reflects the current state of the application e.g. in a web browser this can be the page icon and a Clock for displaying the current time.

The notifications area provides visual information on the most recent notifications from applications including but not limited to a current application and any other suitable applications.

The pushed status indicators such as and are displayed on the title bar whenever certain defined criteria for being displayed are met. For example the battery alert icon may be displayed when either the battery level drops below 20 the battery is being charged or the application requires that the battery icon always be displayed. Also the battery icon may be displayed by and whenever a particular application requires it.

The signals area provides details on the current connectivity status of the device and may include a radio signal strength indicator type of data connection e.g. 3G EDGE etc. and WiFi GPS BlueTooth and Roaming indicators to be displayed when appropriate e.g. when the service associated with the indicator is enabled and or connected .

Before discussing an example embodiment it is helpful to note that in the absence of a common title bar developers of applications have been known to implement custom title bar components. This can lead to inconsistent presentation of title bar information across multiple applications on a single device . Furthermore the effort of such developers in designing such customized title bars is duplicated and additional memory and processing resources are required by each application to generate the various icons. Accordingly a technical problem exists in how to optimize memory usage in a device having multiple applications each requiring display of a title bar such as the title bar .

In one embodiment an application may invoke a simple application programming interface API for generating the title bar . Since the API is common to all applications that require display of the title bar better processing and memory utilization can result on the device . Also by providing a common API the requirement to develop custom title bars for those applications that require a title bar to be displayed may be avoided. It should however be noted that those applications which operate in full screen mode may not be required to present a title bar.

The private structural part of the API includes two abstract classes and one interface. TitleBarView is the implementing class that provides the UI layout and drawing logic for the title bar and may be extended by a StandardTitleBarView which implements the user interface layout and drawing logic for a standard title bar. TitleBarModel provides functionality to update components and may be extended by a StandardTitleBarModel which implements the data that defines the current state of the StandardTitleBar object . It is the responsibility of the classes that extend the TitleBarModel such as StandardTitleBarModel to define the data and provide validity checks for the data. TitleBarController provides interface functionality with the TitleBarModel and TitleBarView . It is the responsibility of the classes that extend the controller to define what causes changes in the Model and updates to the View.

The public part of the API includes the TitleBar class which is a member of the Screen class and any application that requires display of title bar must extend it in order to avail itself of the set and get functionality of the Screen class. It is the responsibility of the class that implements TitleBar to provide a set of functionality to construct the title bar and define its customizable components. StandardTitleBar accomplishes this by providing several add remove methods for adding optional components to the title bar as shown in .

Returning to the defined classes implementation details of non limiting examples will be set forth. As shown in TitleBar is a component that is added to the Screen class as a field. TitleBar extends Manager and therefore inherits all of the functionality provided by Field and Manager . The only member variable of TitleBar is the TitleBarController object which is package private. It is the responsibility of any internal classes that inherit from TitleBar to define the allocation of the TitleBarController .

TitleBar has two package private methods to facilitate adding and removing components from the title bar TitleBar addComponent String Object and TitleBar removeComponent String . Both have a componentKey parameter that defines which component to add or remove and TitleBar addComponent has a value Object that defines the value of the component. TitleBar passes all component keys and values with no knowledge of what is an appropriate paring or even if the component key is valid and therefore no exceptions to be thrown no matter what component keys and values it passes. In the non limiting example set forth herein there is no public functionality provided by TitleBar although it is contemplated that the TitleBar may optionally be extended.

StandardTitleBar extends TitleBar and is the component class for a standard title bar implementation. As with any title bar implementation StandardTitleBar is required to supply a mechanism to construct an instance of the title bar . According to a non limiting example a hybrid Builder JavaBean pattern is used as described below. However it is contemplated that instances of title bar may be effected via a default constructor.

StandardTitleBar has several optional components. Each optional component contains a pair of functions that are prefixed with add and remove respectively. For example the StandardTitleBar has a component for an application title that is optional. Hence the StandardTitleBar class has two functions to facilitate adding and removing a title from the application s current screen s title bar StandardTitleBar addTitle String title and StandardTitleBar removeTitle .

StandardTitleBar has two push components that are required the battery icon and the active phone call indicator as shown in and discussed below. By default the battery icon will only be shown if the battery level drops below 20 or if the battery is currently charging. However an application can change this behavior by modifying a visibility setting for the icon using StandardTitleBar setBatteryIconVisibility int . Each adder method and the battery s setter returns the StandardTitleBar object that the component was added to. This allows for calls to the adder methods to be chained together.

Since each optional component of the title bar is singular when there are multiple calls to a component s adder function in the cases where new data is provided the latest call overwrites the data provided in previous calls. Adder methods that take data such as the title mentioned above can accept any value that matches its defined parameter s data type including null. The order in which adder methods are called has no effect on the layout of the title bar . The title bar component positioning may be predefined so as not to be altered by the applications that use the title bar implementation.

TitleBarModel encapsulates the data that defines the current state of the title bar . TitleBarModel is not required to do any processing but merely keep the data separate from the view logic and event logic. It has functionality to allow controlled access to its data for example as required by TitleBarView and supplies functionality to manipulate the data that defines the state of the title bar which may be used by the TitleBarController when events require it.

The only functions declared by the TitleBarModel are for initialization. It is the responsibility of the sub classes to define the required accessors for their implementation.

Active Phone Call Controller listens for events related to phone call activity and state is updated based on such events see in 

Notifications Controller listens for events for events related to notifications with new notifications being added to a queue that is maintained by StandardTitleBarModel and removed when a notification dismissal event is received see in GPS Defined if enabled during construction and if active the controller listens for GPS connectivity events and updates the model s GPS notification state based on these events see in BlueTooth The controller listens for BlueTooth connectivity and activity events and updates the model s BlueTooth notification state based on these events see in Battery Defined during construction so as to always by displayed or to be displayed only when reaching a minimum threshold in which case the controller listens for battery update events or a less than 20 event see in Connectivity The controller listens for all events related to connectivity and updates the model s connectivity notifications based on these events see in . Thus for example an application can show the current data connection that it is connected to or using e.g. WiFi or cellular data such as 3G or EDGE network .

The TitleBarController is responsible for coordinating all the parts of the title bar implementation including constructing and communicating changes to the model and the view and the view collecting application specifics through the TitleBar component class listening for system events that affect the title bar s components and then updating the model and the view based on those events.

StandardTitleBarController extends TitleBarController for the standard title bar implementation shown in and its implementation details are as follows 

StandardTitleBarController contains a getter method for each element that is part of the title bar where the getter returns the relevant data for each element.

StandardTitleBarController contains an initialize method for each element that is part of the title bar where the initialize methods update the relevant data for the element without notifying the view to update.

StandardTitleBarController contains an update method for each element that is part of the title bar where the update methods update the relevant data for the element and notify the title bar s view to update and redraw.

StandardTitleBarController provides implementations for each relevant event listener where the methods that implement the event listener interfaces call upon the appropriate update methods for the event.

As discussed above the title bar implementation is integrated into the Screen call which includes setter and getter methods. According to a non limiting example the Screen setTitleBar TitleBar titleBar method takes a TitleBar object as its lone parameter which is predefined by the application and the Screen getTitleBar method returns the current definition of the Screen s TitleBar object. The application determines the type and typecast of the returned object before performing any manipulation.

Non limiting examples of the foregoing are shown in where processor controls display to generate title bar with content selected based on the requirements of application as defined using the API .

While the foregoing provides certain non limiting exemplary embodiments it should be understood that combinations subsets and variations of the foregoing are contemplated within the scope of the appended claims.

