---

title: Solidifying the executable software set of a computer
abstract: System and method for solidifying (or “freezing”) the set of software and configuration data available for execution on a computer. Any additional software installed on the computer after the solidification process will not execute, regardless of whether the installation is initiated or otherwise performed by a person with administrative privilege. The ability to allow new or modified software to execute on the computer rests with an integrity server separate from and outside of the solidified computer. The solidification of software and configuration data proceeds on a level of granularity selectable by the integrity server and any operators thereof.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08561051&OS=08561051&RS=08561051
owner: McAfee, Inc.
number: 08561051
owner_city: Santa Clara
owner_country: US
publication_date: 20101222
---
This Application is a continuation and claims the benefit of priority under 35 U.S.C. 120 of U.S. application Ser. No. 10 935 772 filed Sep. 7 2004 now U.S. Pat. No. 7 873 955 entitled SOLIDIFYING THE EXECUTABLE SOFTWARE SET OF A COMPUTER Inventor E. John Sebes. The disclosure of the prior application is considered part of and is incorporated by reference in the disclosure of this application.

Invention relates generally to computer systems and in particular to fixing the set of software available for execution on a computer.

The set of software available for execution on a computer is generally dynamic and modifiable even when such modification is not desirable. Restricting the ability of users or administrators of a computer to install and remove software or to modify configuration of the existing software is enforced with passwords or verbal and written policies and guidelines. However when passwords are used possessors of administrative passwords generally have access beyond their immediate responsibilities.

Accordingly there is a need for a technique that allows the solidification or freezing of the set of software available for execution on a computer wherein the software is solidified according to a granular policy and wherein the ability to change such a policy resides outside of the solidified computer.

System and method for solidifying or freezing the set of software and configuration data available for execution on a computer. Any additional software installed on the computer after the solidification process will not execute regardless of whether the installation is initiated or otherwise performed by a person with administrative privilege. The ability to allow new or modified software to execute on the computer rests with an integrity server separate from and outside of the solidified computer. The solidification of software and configuration data proceeds on a level of granularity selectable by the integrity server and any operators thereof.

Computer Any computing system comprising an operating system providing a set of resources for use by one or more pieces of software for execution on the computing system.

Software Any set of instructions for execution on a computer. A piece of software may use one or more services or resources as provided by the computer through one or more interfaces.

Interface A language protocol or other boundary for providing a service or making available a resource to a piece of software on a computer. An interface comprises a name space knowledge of which is needed for successful usage of the interface. For a given interface to a service or resource an implementation of the service or resource fulfills requests made through the interface. One example of an interface comprises an Application Programming Interface API such as a system call interface of an operating system wherein the name space comprises system call names or system call addresses and the implementation comprises the portion of the operating system implementing the actual system calls. Another example of an interface comprises a set of function calls to a library wherein the name space comprises function names or function addresses and the implementation comprises the actual library code implementing the functions. Other interface examples include language APIs such as a PERL API Java API PHP API shell script APIs etc. database APIs an interface to a file system of a computer wherein the name space comprises a set of file names and any interface to a container of data.

Invention operates in combination with a computer s operating system in order to solidify or freeze the set of software available for execution on the computer. Any software modified or installed on the computer after the solidification process cannot be executed on the computer regardless of whether the modification or installation was initiated or otherwise performed by a person with administrative privilege or with access to passwords or other such credentials pertaining to the computer. The ability to enable modified or additional software to execute on the computer resides with an entity herein called an integrity server outside of the solidified computer.

Prior to a solidification process computer makes one or more interfaces available to software modules for proper execution of said software modules on computer . A solidification of computer comprises translating one or more of the interfaces provided by computer such that software modules are no longer able to use the translated interfaces. In order to enable a software module to use the translated interfaces and properly execute on such a solidified computer the software module is then translated according to the translated interfaces.

It is an advantageous aspect that individual interfaces can be independently to translated hereinafter also referred to as solidified or frozen or left untranslated hereinafter also referred to as thawed thereby providing a level of granularity for the solidification process. illustrates a set of example states for a solidified computer . The middle six columns represent a set of interfaces which individually can be frozen or thawed. The first row All Interfaces frozen shows all interfaces of system as frozen and hence system is completely solidified. The second row All Interfaces Thawed shows all interfaces of system as thawed lifting protections provided by the solidification process. The third row Software Maintenance shows all interfaces of system translated except software configuration data. This row indicates a state for allowing a user of system to locally change software configuration data shown as an illustrative example for two individual software applications as described in more detail below.

In step the runtime environment of computer is modified such that a request to execute a piece of software results in an attempt to replace the corresponding placeholders given by the corresponding sdiff with translated names according to the mapping table prior to execution of the software. In one embodiment this alteration is set to take effect at the next boot up of computer . In another embodiment the alteration takes effect before the next boot up of computer . In step a mapping table is defined for use by the altered runtime environment. Hereinafter two modes are identified for the runtime environment of computer a restricted mode wherein the runtime environment of computer attempts to replace placeholders in a piece of software according to a corresponding sdiff if such exists and use a mapping table in order to execute the software and an unrestricted mode wherein the runtime environment of computer simply executes software without using any sdiffs or any mapping tables.

In the example name space translation shown in names from an original name space A are translated into names taken from a translation name space A with two example names x and y from the original name space A shown as translated into names x and y from the translated name space A . Note that in general the reverse translation Tneed not map every unique name from the translation name space A into a corresponding unique name in the original name space A. For example a group of names from the translation name space A indicated by z zand zin may be mapped into a null value in the original name space A. This will occur for example when the translation name space is larger than the original name space. Specifically the translation name space A preferably comprises the names in A as a subset such names mapped back to null by the reverse translation T thereby in effect thwarting attempts to use the original untranslated names in A on a solidified system . Additionally the translation name space A preferably comprises a large number of names which are neither in A nor in T A e.g. a large number of randomly generated names or name ranges such names mapped back to null by the reverse translation T thereby thwarting any attempt to guess which names in A map back to the original untranslated names in A.

The execution steps and comprise an attempt to use appropriate reverse translations as given by the mapping table for any references to translated interfaces whether the references names are appropriately translated or not. Therefore if a software S does not have an associated sdiff references comprising untranslated names for referring to a translated interface will be reverse translated into invalid names and will hence cause an execution exception logging and or other error handling. The same applies to a piece of code which has been inserted into a software S after an sdiff has been generated for S in step . On the other hand if a software S does have an associated sdiff references comprising translated names for referring to a translated interface will be appropriately reverse translated to corresponding original names for proper execution on solidified computer .

For a translated piece of software comprising references according to a translated interface to execute correctly several techniques can be used independently or in combination. In a first embodiment computer comprises a translation of an implementation of the corresponding untranslated interface wherein the translated implementation processes requests according to the translated interface. For example a PERL interpreter is modified according to a translated PERL language interface wherein keywords of the PERL language are translated and no longer correspond to standard PERL keywords for example by replacing the standard PERL keyword FOR with a new translated keyword XH5HKJ831H09L for the translated PERL interpreter. In this embodiment a PERL script will execute properly only if the script is in accordance with the translated PERL language interface.

In a second embodiment an implementation of the corresponding untranslated interface is left unmodified. Instead execution engine translates requests expressed according to a translated interface to requests expressed in the corresponding untranslated interface. As an example the PERL interpreter is left unmodified and a PERL script in accordance with the translated interface undergoes a reverse translation before it is handed over to the PERL interpreter for interpretation. Note that in both embodiments if the interface implementation itself uses any translated interfaces secondary interfaces then the interface implementation itself is translated according to the translated secondary interfaces. For example if the PERL interpreter uses the system call interface provided by the operating system of computer and if computer is in a solidified state wherein the system call interface is translated then the PERL interpreter whether modified according to the first embodiment or left unmodified according to the second embodiment is itself translated according to the system call interface translation present on computer . As should be obvious to one of ordinary skill in the art any number of levels of translated interfaces are possible in a solidified computer depending on whether an interface implementation uses translated secondary interfaces or not.

The abstraction of name space translation extends to a third embodiment comprising verifying a checksum for deciding whether or not to execute a piece of software on computer . In this embodiment a piece of software is regarded as its own service having an interface comprising a name space with a single entry namely a name for the piece of software itself. During a solidification process of computer a checksum is associated with the piece of software wherein this association effectively represents a translation of the single entry in the name space. Subsequently when computer receives a request to execute the software computer executes the software only if the checksum properly verifies corresponding to provision of the correct translation of the single entry and refuses to execute the software otherwise. The checksum verification essentially represents a verification that the request to execute the software was according to the translated interface indicating the software and associated checksum as opposed to according to the untranslated interface indicating the software without checksum . This embodiment can be implemented without the use of sdiffs. This embodiment can also be implemented without the use of a mapping table replacing the mapping table lookup with a checksum verification step making use of a mapping which maps pieces of software requested for execution to a a valid checksum leading to grant of execution or to b an invalid checksum including null leading to a refusal of execution.

A name space translation T may be uniquely associated with a particular piece of software S and with a particular solidified system or it may be shared by more than one piece of software or across more than one solidified system . Some techniques for translating an interface and associating such a translated interface with a piece of software are described in copending U.S. patent application entitled Damage Containment By Translation application Ser. No. 10 651 588 filed on Aug. 29 2003 incorporated herein by reference and in copending U.S. patent application entitled Method And System For Containment Of Usage Of Language Interfaces application Ser. No. 10 739 230 filed on Dec. 17 2003 incorporated herein by reference.

In addition to solidifying code portions of the installed software base through name space translation as described above one or more configuration data of the installed software base can be solidified as well independently from the corresponding code portions. This is accomplished by generating a translation of a set of configuration data used by the software. For example consider a piece of software S which reads and or writes configuration data using one or more data files wherein the read and or write operations rely on a knowledge of the corresponding file names. Solidifying some or all of the configuration data comprises translating the corresponding file names and or translating the actual data contained in the files. Such files with translated names and or translated content will be usable to a properly translated piece of software S but not to the original untranslated software S. Proper software translation comprises static replacement of the original file names in S with translated file names and or insertion of instructions hooks into S for dynamically obtaining the translated file names and translated content during run time. As should be obvious to one of ordinary skill in the art this translation technique is not limited to configuration data residing in a file system but can be analogously applied to configuration data accessible through any API or service interface by translating the API or service interface and or translating the content available through the API or service interface.

As described above managing the executable software set of computer comprises managing a the set of sdiffs b mapping table and c the mode restricted mode versus unrestricted mode of the runtime environment of computer hereinafter also collectively referred to as the solidification metadata . It is an advantageous aspect that these three items can be independently managed and computed locally or remotely as described in the following 

To achieve modularity the writing and reading of the sdiffs the mapping table and the runtime mode are separated between a writer module and a reader module with the writer module writing said data onto computer and the reader module retrieving written data when needed. In the embodiments where the computation of said data is performed locally the writer module resides on computer whereas remote computation of said data comprises a remote writer module communicating with computer using authentication for example digital signatures or a secure communications channel such as SSL . In an optional embodiment such a remote writer module does not write all of said data but instead writes a possibly empty subset thereof e.g. the mode only as well as one or more authenticators for validating the entire data. Such authentication may comprise digital signatures transport level authentication such as SSL or any other authentication mechanisms.

Remote management of the solidification metadata by integrity server results in the advantageous aspect that knowledge of the specific unique structure and encoding of the solidification metadata used to enforce a frozen executable software set on computer resides with integrity server and outside of computer . As a consequence while a party other than integrity server may be able to install additional software on frozen system such software remains unexecutable until one or more items in the solidification metadata are properly modified by the integrity server or their local modification is authorized by integrity server so as to enable the additional software to properly execute on frozen system as described above. For example in one embodiment the integrity server generates a modified mapping table and sends it to computer . In another embodiment the integrity server sends data to computer the data for locally generating a new mapping table on computer . In both embodiments it is an advantageous aspect that the knowledge possessed by the integrity server and used to construct or modify a mapping table for a computer is distinct from the knowledge of the actual name space translations of the mapping table .

It is an advantageous aspect that tampering with the solidification metadata is rendered detectable. To accomplish this solidification metadata resident on computer solidification metadata sent by the integrity server to computer and or data sent by the integrity server for locally generating one or more portions of the solidification metadata on computer are authenticated. Such authentication comprises for example digitally signing the solidification metadata or transmitted portions thereof and the data or using other data integrity techniques such as checksums or authentication techniques as should be obvious to one of ordinary skill in the art. Correspondingly computer verifies authenticity and or integrity of the solidification metadata or of the data received from integrity server for locally generating solidification metadata or portions thereof prior to using the solidification metadata or the data. One example comprises the execution engine refusing to execute software if the solidification metadata have been tampered with. Another example comprises computer refusing to update the solidification metadata if data received from integrity server is not successfully authenticated. In another example integrity server verifies authenticity and integrity of the solidification metadata and replaces any compromised portions of the solidification metadata such as a compromised mapping table with freshly generated ones.

Optionally one or more portions of the solidification metadata on the frozen system are periodically regenerated with new name space translations for increased defense against guessing attacks. Process migration techniques can be used to change one or more name space translations associated with a process while the process is executing.

Optionally the translated name spaces need not be persistently stored on frozen system but can instead be computed when frozen system powers up and recomputed at any later times.

It is another advantageous aspect that when modifying a piece of software already resident on frozen system or when installing a new piece of software onto frozen system the integrity server need not perform the actual modification or installation although optionally the integrity server can perform such tasks . The integrity server simply properly modifies the solidification metadata leaving the modification or installation of software to other parties such as a a user or an to administrator of frozen system or b an automatic software modification or installation process. However a modified or newly installed piece of software does not properly execute on the frozen system unless the solidification metadata are appropriately modified by the integrity server and the piece of software is translated according to the mapping table as described above .

Note that the software maintenance state may be further refined to comprise any number of individual interfaces or groups of interfaces by adding appropriate columns to the table of . For example a useful state may distinguish between application configuration data and system configuration data thereby separating system maintenance mode for changing system configuration data from application maintenance mode for changing application configuration data . Another useful state software installation state may comprise an untranslated system call interface while leaving other interfaces translated. This state would be useful for running software installers which do need the system call interface to execute properly. After an installer has completed installation of a software and optionally removal of old versions of the software from computer computer transitions into a state where the system call interface again is solidified i.e. translated . Note that any thusly installed software still undergo translation in order to properly execute on solidified computer . In general it is an advantageous aspect that code execution and system administration on a system can be separated to any desired degree by choosing a set of independent interfaces so as to provide sufficient granularity for generating a large enough set of possible states of computer .

With respect to persistent computer data such as configuration files software instruction code files dynamic libraries operating system registries etc. to which the operating system of system provides one or more interfaces for modifications an optional embodiment allows writes even in a solidified state. However as in a logging or journaling file system such writes are merely logged and pending and not yet committed. Once a user of solidified computer has performed one or more changes i.e. pending write operations the user may request that the integrity server or an administrator thereof commit the user s changes to the solidified computer . The integrity server or an administrator thereof may then review the user s changes and either accept all or part of the changes by committing the accepted changes reject all or part of the changes by rolling back the rejected changes and or leave all of part of the changes for later inspection.

Foregoing described embodiments of the invention are provided as illustrations and descriptions. They are not intended to limit the invention to precise form described. In particular it is contemplated that functional implementation of invention described herein may be implemented equivalently in hardware software firmware and or other available functional components or building blocks and that networks may be wired wireless or a combination of wired and wireless. Other variations and embodiments are possible in light of above teachings and it is thus intended that the scope of invention not be limited by this Detailed Description but rather by Claims following.

