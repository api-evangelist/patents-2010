---

title: Satisfying application dependencies
abstract: The dependencies of an application are identified by intercepting application programming interface calls made by an application. A determination is then made at the runtime of the application as to whether the dependencies of the application are present. If the dependencies are not present, a client device upon which the application is executing is configured such that the dependencies are present and are made available only to the authorized application. If the dependencies are present and the application is authorized to interact with the dependencies, the application is permitted to execute.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09354852&OS=09354852&RS=09354852
owner: Microsoft Technology Licensing, LLC
number: 09354852
owner_city: Redmond
owner_country: US
publication_date: 20101223
---
Computer application programs applications typically have a series of dependencies that are required to successfully deploy and execute the application. These dependencies may include access to resources such as databases applications hardware components network connections and the like. While the device is operating locally within the corporate network of an enterprise many of these dependencies exist by virtue of being connected to the corporate network. However once the device is no longer connected to the corporate network for instance when the device leaves the premises of the corporation the device may no longer be connected to the corporate network. As a result many of the dependencies of the application that were present by virtue of the device being connected to the corporate network are no longer present. Accordingly the application cannot deploy or execute on the device until the dependencies are restored.

One mechanism for restoring application dependencies requires that a connection be established with the corporate network. For instance a corporate user working from home might need to connect to a corporate network via a virtual private network VPN in order to re establish dependencies. However utilizing a connection in this manner may be cumbersome or may expose a corporate network to security threats.

Technologies are described herein for satisfying the dependencies of virtualized applications. Through an implementation of the concepts and technologies presented herein application dependencies can be identified and restored at application runtime. Consequently a client device may successfully deploy and execute an application without having to establish a backend connection between the device and the corporate network. As used herein the term dependencies refers to any resource that an application requires for execution. Dependencies may include but are not limited to configuration settings hardware components network connections access privileges or any other type of resource.

According to one aspect provided herein an application virtualization environment is provided that is capable of executing a virtualized application by configuring a client device such that all dependencies of the virtualized application are present. It should be appreciated that the scope of the present disclosure is not intended to be limited to use within an application virtualization environment. Rather the embodiments disclosed herein may be utilized to satisfy the dependencies of any type of application executing in a virtualized or non virtualized environment.

According to another aspect when a request is received to deploy a virtualized application an application virtualization client component determines whether the dependencies requisite for deploying the virtualized application are present. If the application virtualization client component determines that the dependencies are not present the application virtualization client component configures the client device such that the dependencies are present. If the application virtualization client component determines that the dependencies are present the application virtualization client component deploys the virtualized application for execution.

According to another aspect the application virtualization client component is also configured to provide a security boundary between a virtualized application and a non virtualized application so that the non virtualized application cannot access certain resources. For instance in one embodiment the application virtualization client component intercepts application programming interface API calls made by the virtualized application for accessing resources such as requests to access resources available to the client device. The application virtualization client component then modifies a namespace of the requested resource such that the resource is accessible at a new location. In some embodiments the application virtualization client component may also modify an access control list ACL associated with the resource and pass the API call to the resource stored at the new location. Requests to access the resource from non virtualized applications are not able to access the resource at its new location.

According to another aspect application dependencies are identified prior to runtime by performing a static analysis on the application. In one implementation the virtualized application is installed on a monitoring station that provides an environment where all of the dependencies of the virtualized application are present. A dependency analysis engine of the monitoring station monitors changes made to the monitoring station during the installation and execution of the virtualized application to identify the dependencies. Upon monitoring the virtualized application the dependency analysis engine stores the data identifying the dependencies in a dependency analysis database. The dependency analysis database may be used at runtime of the application to ensure that all required dependencies are present.

This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended that this Summary be used to limit the scope of the claimed subject matter. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.

The following detailed description is directed to technologies for satisfying the dependencies of applications. As discussed briefly above a client device configured in the manner disclosed herein can identify application dependencies and make those dependencies available at application runtime. In this manner the client device can be configured for execution of the application without requiring manual action to satisfy the dependencies such as connecting to a VPN.

While the subject matter described herein is presented in the general context of program modules that execute in conjunction with the execution of an operating system and application programs on a computer system those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the subject matter described herein may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like.

In the following detailed description references are made to the accompanying drawings that form a part hereof and which are shown by way of illustration specific embodiments or examples. Referring now to the drawings in which like numerals represent like elements through the several figures aspects of a computing system and methodology for satisfying application dependencies will be described.

The server is a computing system configured to execute an operating system B and the application virtualization server component . It should be appreciated that the server may be an actual server computer configured to execute the application virtualization server component or may comprise another type of computer system configured to perform the functionality described herein as being performed by the server .

The network illustrated in may comprise a wide area or local area network. For instance the network may be a corporate local area network a wide area network such as the Internet or a combination of multiple wide area and local area networks. It should be appreciated that while a single network has been illustrated in many other networks may be utilized. It should also he appreciated that while a single client device and server have been illustrated in many such devices may be utilized by the embodiments disclosed herein.

As discussed briefly above the client device is configured to execute an application virtualization client component . The application virtualization client component is a software component configured to provide an application virtualization environment. In this regard the application virtualization client component is configured to deploy and execute a virtualized application .

The application virtualization client component provides functionality for encapsulating the execution of the virtualized application from the operating system A. The application virtualization client component might also provide functionality for encapsulating execution of the virtualized application from other application programs and system resources of the client device . For instance the application virtualization client component might virtualize resources of the operating system A or the client device . When the virtualized application attempts to access the physical resources the application virtualization client component presents a virtualized resource to the application . In this manner the virtualized application can be executed in a manner that does not impact the actual resources exposed by the operating system A or the client device .

According to other aspects the application virtualization client component also provides functionality for loading portions of the virtualized application on demand in particular the application virtualization client component may operate in conjunction with the application virtualization server component to stream needed portions of the virtualized application from the server to the client device . In this manner the virtualized application can be accessed at the client device on demand. Moreover because only needed portions of the virtualized application may be streamed from the server to the client device access to the virtualized application may be provided without streaming the entire application from the server to the cheat device .

Additional details regarding the functions provided by the application virtualization client component for encapsulating execution of the virtualized application and for streaming the virtualized application from the server to the client device can be found in U.S. Patent No. 7 225 264 issued May 29 2007 entitled Systems and Methods for Delivering Content over a Computer Network U.S. Patent No. 7 200 632 issued Apr. 3 2007 entitled Method and System for Serving Software Applications to Client Computers U.S. Patent No. 7 451 451 issued Nov. 11 2008 entitled Operating System Abstraction and Protection Layer and U.S. Patent No. issued Sep. 14 2010 entitled Serving Software Applications from Servers for Client Computers each of which is incorporated herein in their entirety by reference.

As will be described in greater detail herein the application virtualization client component may also be configured to ensure that one or more dependencies of the virtualized application are satisfied at a runtime of the application . As used herein the term dependencies refers to any resource that the application requires for execution. Dependencies may include but are not limited to configuration settings hardware components network connections access privileges the presence of specific files in specific locations application resources such as the installation of an anti virus software hardware components such as a monitor or other device memory requirements processing capabilities and others.

As will be discussed in greater detail below the dependencies may be identified during installation of the application prior to runtime of the application or at runtime of the application . For instance when a request to execute the virtualized application is received the application virtualization client component determines whether the dependencies requisite for deploying and or executing the virtualized application are present. If the application virtualization client component determines that the dependencies are not present the application virtualization client component configures the client device such that all of the dependencies are present. Once all of the dependencies are present or satisfied the virtualized application may he deployed. As used herein the term deploy means to make the application available for execution. Additional details regarding configuration of the client device such that all of the dependencies are present are provided below with respect to .

It should be appreciated that the client device may also include a non virtualized external application that may be executed on the operating system A. As will be described in greater detail below the application virtualization client component provides functionality in one embodiment for ensuring that the external application cannot access resources that are utilized by the virtualized application . For instance the application virtualization client component might redirect a request to access to a resource to a location where the resource does not exist. In this way the operating system may respond to the request indicating that the resource requested does not exist or cannot be located. Additional details regarding this process will be provided below with regard to .

As described above the server might include the virtualized application the application virtualization server component and the operating system B. In addition the server may include a dependency analysis engine and a dependency analysis database for storing dependency data identifying the dependencies . It should be appreciated that the dependency analysis database containing dependency data may also be stored and or made accessible to the application virtualization client component of the client device . According to embodiments the server may operate as a monitoring station that is configured to install and execute the virtualized application and to identify the dependencies of the virtualized application . According to various embodiments the dependency analysis engine may identify the dependencies of the virtualized application and store the dependency data identifying the dependencies in the dependency analysis database . A user interface might also be provided for viewing and editing the contents of the database . Additional details regarding various processes provided herein for identifying the dependencies will be provided below with respect to 

It should be appreciated that the embodiments described herein are merely for illustrative purposes and are not intended to limit the scope of the application to the embodiments described herein. Those skilled in the art should appreciate that the technologies described herein may be applied in conjunction with a variety of types of applications and that the embodiments disclosed herein are not limited to satisfying the dependencies of a virtualized application . It should also be understood that the concepts described herein may be applied to any type of application including but not limited to virtualized and non virtualized applications executing in virtualized and non virtualized environments.

When the virtualized application is installed on a device such as the client device the installer for the application might make changes to the device . For instance various files pertaining to the virtualized application may be stored or registry files may be created or modified. The dependency analysis engine monitors the installation of the application to detect any configuration changes made as a result of the installation of the virtualized application . The dependency analysis engine might also compare the configuration of the computer on which it is executing prior to the virtualized application being installed with the configuration after the virtualized application is installed. The dependency analysis engine may then utilize the detected changes to identify the dependencies . Dependency data identifying the dependencies is then stored in the dependency analysis database .

As a part of the learning mode of operation the dependency analysis engine may further monitor the virtualized application during runtime. As the virtualized application is executing the virtualized application may make API calls to access resources. The API call interceptor hooks the API calls made by the virtualized application and passes the calls to the dependency analysis engine where they are inspected to gather information about additional dependencies of the virtualized application . The API calls may include requests to access particular resources such as files databases and the like. In addition the API calls may include requests to access particular applications.

The dependency analysis engine inspects the intercepted API calls to identify runtime dependencies of the virtualized application . The dependency analysis engine may store data identifying runtime dependencies in the dependency analysis database . Additionally data might be stored in the database indicating whether the identified dependencies are provided by an operating system . In alternate embodiments data identifying runtime dependencies may be streamed from the server to the client device . In such embodiments data identifying the dependencies may be packaged in an application package that may be configured to be streamed to the client device . As will be described in greater detail below the data generated during the learning mode of operation is utilized at runtime of the application to ensure that all of the dependencies are available to the application . For instance the dependency data stored in the database might be utilized to determine if the execution of an application is dependent upon any resources that are not provided by an operating system. If so the resources might be made available to the application.

It should be appreciated that not all resources may be made available to the application. In such situations the application may not be able to deploy on the device until the resources are made available and all of the dependencies of the application are properly satisfied. For example a corporation may have documents that can only be accessed from within a corporate building. When a user outside the corporate building runs an application that interacts with those documents the application virtualization client component may prevent the application from accessing the documents. In this case the dependency may be the presence of a corporate IP address indicating that the user is within the corporate building. If the user is not within the corporate building the virtualized application may not be deployed since the dependency corresponding to the presence of a corporate IP address is not satisfied.

According to one implementation when the server is operating in the learning mode the dependency analysis engine . is configured to monitor changes made to the server that identify the dependencies of the virtualized application and store the dependency data identifying the dependencies in the dependency analysis database . The dependencies may include dependencies that are identified by analyzing the installation and configuration of the application as well as dependencies identified by intercepting API calls made by the virtualized application at runtime.

From operation the routine proceeds to operation where the dependency analysis engine monitors for changes made during the installation of the virtualized application . The dependency analysis engine may monitor the changes by comparing the configuration settings of the system after the virtualized application is installed to the configuration settings of the system prior to the installation of the virtualized application . Further the dependency analysis engine may monitor various resources of the system to identify the dependencies such as changes made to a registry or the creation of additional files and folders related to the installation of the virtualized application .

From operation the routine proceeds to operation where the virtualized application is executed. During execution the dependency analysis engine continuously monitors the virtualized application for API calls made by the virtualized application to access resources as well as any configuration changes made as a result of the execution of the virtualized application .

From operation the routine proceeds to operation where the API call interceptor intercepts API calls made by the virtualized application . The API call interceptor may then provide these API calls to the dependency analysis engine . From operation the routine proceeds to operation where the dependency analysis engine inspects the parameters of the intercepted API calls to identify the dependencies of the virtualized application . As described above the API calls may include requests to access a particular resource such as a file an application or a hardware component such as a speaker or a display. As such the dependency analysis engine is capable of determining the runtime dependencies of the virtualized application by inspecting the format and content of the intercepted API calls.

From operation the routine proceeds to operation where the dependency analysis engine stores the dependency data gathered during the installation and execution of the virtualized application that identifies the dependencies in the dependency analysis database . According to one implementation the dependency analysis database may be stored on the server or any other location that is accessible by the client device or the server via the network .

From operation the routine proceeds to operation where a determination is made as to whether each of the dependencies of the virtualized application is added or configured during the installation or deployment of the virtualized application . This may be accomplished for instance by examining an operating system provided registry. Alternately this is accomplished by examining a mapping table that maps API calls to dependencies. The mapping table may include information indicating whether each dependency is provided by an operating system.

From operation the routine proceeds to operation if the dependency is added or configured during the installation or deployment of the application. At operation data is stored in the dependency analysis database indicating that the dependencies that are added or configured during the installation or deployment of the virtualized application will need to be present at the client device at runtime to successfully deploy the virtualized application at the client device . If at operation it is determined that the dependencies are not added or configured during the installation or deployment of the virtualized application the routine proceeds to operation where the routine ends. Similarly from operation the routine also proceeds to operation where the routine ends.

Once the dependencies of the virtualized application have been identified and the dependency data identifying the dependencies is stored in the dependency analysis database the virtualized application may be deployed at the client device . However prior to deploying the virtualized application at the client device the dependencies required for deploying the virtualized application may need to be accessible by the client device . In one implementation the dependency data identifying the dependencies is stored on the client device and utilized by the application virtualization client component to ensure that the dependencies of the virtualized application are present at runtime of the deployment of the virtualized application on the client device . Additional details regarding this process are provided below with respect to .

From operation the routine proceeds to operation where the application virtualization client component determines the dependencies of the virtualized application by querying the dependency analysis database . The application virtualization client component might also query the dependency analysis database to determine whether the identified dependencies are provided by an operation system . If so the dependencies do not need to be restored at runtime by the application virtualization client component .

From operation the routine proceeds to operation where the application virtualization client component determines if all of the dependencies are present. According to some implementations the application virtualization client component may do so by comparing the dependencies determined by the dependency analysis engine during the learning mode to the dependencies present at the client device . If the application virtualization client component determines that all of the dependencies are present the routine proceeds to operation where the application virtualization client component deploys the virtualized application on the client device .

However if at operation the application virtualization client component determines that all of the dependencies are not present at the client device the routine proceeds from operation to operation where the application virtualization client component identifies a missing dependency. A missing dependency may be a resource that is not present or not properly configured. For instance if one of the dependencies includes turning on a firewall at the client device the application virtualization client component may check the client device to see if the firewall is turned on. If the firewall is not turned on then the application virtualization client component identifies the firewall as being a missing dependency.

From operation the routine proceeds to operation where the application virtualization client component configures the client device such that the missing dependency is satisfied. The application virtualization client component may do so by configuring the client device in such a way that the configuration settings of the client device match the configuration settings of the server when the virtualized application was installed and executing on the server . Using the example described above the application virtualization client component may automatically turn on the firewall by changing the firewall settings of the client device . In some embodiments the application virtualization client component might also make a resource available. In this way the application virtualization client component may configure the client device such that the dependencies requisite for deploying and or executing the application are satisfied.

From operation the routine proceeds to operation where the application virtualization client component determines if there are any more missing dependencies . If the application virtualization client component determines that there are more missing dependencies the routine proceeds back to operation where the routine identifies another missing dependency it however the application virtualization client component determines that there are no more missing dependencies the routine proceeds to operation where the application virtualization client component deploys the virtualized application . From operation the routine proceeds to operation where the routine ends. It should be appreciated that the application virtualization client component may not be able to satisfy every dependency required for deploying the virtualized application . For instance in the example described above the application virtualization client component may be unable to satisfy a dependency such as the presence of a corporate IP address which is provided only to devices operating within the corporate building.

When a virtualized application makes an API call to access or modify an external resource a routing layer intercepts the API call and performs two functions. First the routing layer causes the name of the original resource to be modified thereby creating a renamed resource . As a result the external application executing outside of the application virtualization client component cannot look in the expected place for the resource. In this way curious applications are deterred from trying to gain access to the resource. However a determined external application may still open and access the original resource . To prevent any determined external application from accessing the resource the application virtualization client component might also modify an access control list ACL of the original resource to a customized ACL such that the external application cannot open or access the resource . illustrates additional aspects of this process.

It should be appreciated that the application virtualization client component can have multiple copies of a resource and can redirect different processes to see different versions of the resource. For instance the client device might have two copies of a registry value named foo where one copy is set to 0 and the other to 1. When one process accesses the registry value the client device transparently redirects the process to the copy of the resource that is set to 0. When the other process accesses what it thinks is the same registry value the client device transparently redirects this process to the copy of the resource that is set to 1. Both processes are attempting to access the same resource but the client device is redirecting them to differently named instances of that resource without them being aware of it in this way the two processes may perform two separate operations since the two processes are receiving different input values. As a result the client device is capable of providing authorized applications the correct input values while providing unauthorized applications incorrect input values that may provide security to the client device .

In another example when two processes attempt to access the same file the client device could redirect one of them to a valid copy of the file and could inform the other one that the tile did not exist or alternately redirect it to a location where no file existed and allow the operating system to respond As a result the unauthorized process may not be provided access to the file.

The routine begins at operation where the routing layer intercepts an API call made by the virtualized application to access a resource. As described above the routing layer may only intercept API calls made by the virtualized application . From operation the routine proceeds to operation where the routing layer selects a copy of the resource to which the API call made by the virtualized application is to be redirected. The copy of the resource may previously have been saved by the operating system. From operation the routine proceeds to operation where the operating system A further reconfigures an ACL associated with the resource so that the resource is not accessible to external applications operating outside of the application virtualization client component . From operation the routine proceeds to operation where the intercepted API call is routed to the renamed resource .

From operation the routine proceeds to operation where the operating system A receives an API call requesting access to the resource from the external application . According to embodiments since the external application communicates directly with the operating system A without going through the application virtualization client component the operating system A receives the API call from the external application . It should be appreciated however that the external application may send API calls through the application virtualization client component . In such embodiments the application virtualization client component does not do any of the redirection but instead passes the original API call to the operating system A for the operating system A to handle.

From operation the routine proceeds to operation where the operating system A routes the API call from the external application to the original resource . In this way API calls made from non enterprise applications such as the external application may not access the resource . From operation the routine proceeds to operation where the routine ends.

The computer architecture shown in includes a central processing unit CPU a system memory including a random access memory RAM and a read only memory ROM and a system bus that couples the memory to the CPU . A basic input output system BIOS containing the basic routines that help to transfer information between elements within the computer such as during startup is stored in the ROM . The computer further includes a mass storage device for storing an operating system application programs and other program modules which will be described in greater detail below.

The mass storage device is connected to the CPU through a mass storage controller not shown connected to the bus . The mass storage device and its associated computer readable storage media provide non volatile storage for the computer . Although the description of computer readable media contained herein refers to a mass storage device such as a hard disk or CD ROM drive it should be appreciated by those skilled in the art that computer readable storage media can be any available computer storage media that can be accessed by the computer .

By way of example and not limitation computer readable storage media may include volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. For example computer readable storage media includes but is not limited to RAM ROM EPROM EEPROM flash memory or other solid state memory technology CD ROM digital versatile disks DVD HD DVD BLU RAY or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other non transitory medium which can be used to store the desired information and which can be accessed by the computer .

It should be appreciated that the computer readable media disclosed herein also encompasses communication media. Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media. Computer readable storage media does not encompass communication media.

According to various embodiments the computer may operate in a networked environment using logical connections to remote computers through a network such as the network . The computer may connect to the network through a network interface unit connected to the bus . It should be appreciated that the network interface unit may also be utilized to connect to other types of networks and remote computer systems. The computer may also include an input output controller for receiving and processing input from a number of other devices including a keyboard mouse or electronic stylus not shown in . Similarly an input output controller may provide output to a display screen a printer or other type of output device also not shown in .

As mentioned briefly above a number of program modules and data files may be stored in the mass storage device and RAM of the computer including an operating system suitable for controlling the operation of a networked desktop laptop or server computer. The mass storage device and RAM may also store one or more program modules. In particular the mass storage device and the RAM may store the virtualized application the application virtualization client component and or the other software components described above. The mass storage device and RAM may also store other program modules and data such as the dependencies .

In general software applications or modules may when loaded into the CPU and executed transform the CPU and the overall computer from a general purpose computing system into a special purpose computing system customized to perform the functionality presented herein. The CPU may be constructed from any number of transistors or other discrete circuit elements which may individually or collectively assume any number of states. More specifically the CPU may operate as one or more finite state machines in response to executable instructions contained within the software or modules. These computer executable instructions may transform the CPU by specifying how the CPU transitions between states thereby physically transforming the transistors or other discrete hardware elements constituting the CPU .

Encoding the software or modules onto a mass storage device may also transform the physical structure of the mass storage device or associated computer readable storage media. The specific transformation of physical structure may depend on various factors in different implementations of this description. Examples of such factors may include but are not limited to the technology used to implement the computer readable storage media whether the computer readable storage media are characterized as primary or secondary storage and the like. For example if the computer readable storage media is implemented as semiconductor based memory the software or modules may transform the physical state of the semiconductor memory when the software is encoded therein. For example the software may transform the states of transistors capacitors or other discrete circuit elements constituting the semiconductor memory.

As another example the computer readable storage media may be implemented using magnetic or optical technology. In such implementations the software or modules may transform the physical state of magnetic or optical media when the software is encoded therein. These transformations may include altering the magnetic characteristics of particular locations within given magnetic media. These transformations may also include altering the physical features or characteristics of particular locations within given optical media to change the optical characteristics of those locations. Other transformations of physical media are possible without departing from the scope and spirit of the present description with the foregoing examples provided only to facilitate this discussion.

Based on the foregoing it should be appreciated that technologies for ensuring that application dependencies are satisfied at runtime have been presented herein. Although the subject matter presented herein has been described in language specific to computer structural features methodological acts and computer readable media it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features acts or media described herein. Rather the specific features acts and mediums are disclosed as example forms of implementing the claims.

The subject matter described above is provided by way of illustration only and should not be construed as limiting. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described and without departing from the true spirit and scope of the present invention which is set forth in the following claims.

