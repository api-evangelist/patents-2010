---

title: Meta-application framework
abstract: The present disclosure describes a meta-application framework that enables data to be associated with a class of applications called a meta-application. A meta-application entity may store attributes in common across multiple platforms. A platform entity may store attributes in common across multiple devices and/or operating systems. A device entity may be comprised by a particular set of hardware features and an operating system entity may be comprised of a particular set of software feature. Data associated with the meta-application framework may be accessed directly via data manipulation operations or alternatively by application operations via an application programming interface or via the aforementioned data manipulation operations. Applications may then identify application specific behavior at the appropriate level of detail.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09424002&OS=09424002&RS=09424002
owner: Microsoft Technology Licensing, LLC
number: 09424002
owner_city: Redmond
owner_country: US
publication_date: 20101203
---
Software application users conceive of applications differently from application developers. Application users often prefer to think of applications as bundles of functionality independent of implementation details. Diametrically opposed to application users are software application developers who by definition are steeped in implementation details. However with the proliferation of client devices application users presently track application behavior specific not only to a particular device but to a particular set of hardware features comprising a device. With the proliferation of operating systems and operating system versions application users also presently track their particular set of software features comprising their operating system.

Vendors have attempted to simplify this state of affairs by defining a notion of a platform. A platform is a family of devices and or operating systems with features in common. As an example a vendor may sell the same mobile phone in two versions the first with a slide out keyboard and the second with a virtual keyboard on a touch screen. The two versions of the mobile phone might have the same operating system. While the two versions might be considered the same platform an application might run differently on the two phones depending on keyboard type. Similarly two devices from the same vendor with exactly the same hardware features might have different service packs of the same operating system. Despite the potential for different application behavior on the basis of the service packs the two devices would still be considered the same platform. Accordingly application users have come to abstract away implementation details by associating applications with a particular platform.

It is not unusual for a user to run the same software on different platforms. For example a user might have a home personal computer PC running one operating system and a work PC running another operating system. The same person might possess a cell phone running a third operating system and a pad device running a fourth operating system. This same user may wish to view the same document on any of these client devices and because of the differing form factors and operating systems the user experience may widely vary.

An example of how user experience can vary widely across multiple platforms despite nominally running the same application is a user that wishes to view a Microsoft Word 2003 document. The user may have originally authored the document on a work PC running Microsoft Word 2003 on the Microsoft XP operating system. The user may have distributed the document and then received revisions from a co worker in email. If the user was in transit the user might look at the document on his smart phone running Word Mobile . In all three examples the user is reviewing the same content all on some form of Microsoft Word but having different user experience quality due to the different client devices and operating system versions.

In the case of mobile devices it is typical for the same version of the same application to be running on slightly different devices. For example the same application may run on two mobile phones both with the same operating system yet because the first phone has a slide out keyboard but the second phone relies on a virtual keyboard on a touch screen the user experience is different. By way of another example the same application may run on two phones both with the same make model and feature set. However while the application runs full featured on the first phone since it has version 2 of an operating system the application may run in compatibility mode with a partial feature on the second phone since it has version 1 of the operating system.

Because there is no existing framework to associate data with a class of applications at differing levels of implementation detail user ratings of an application that vary according to device or operating system will yield misleading results when aggregated by platform. For example an application may receive high rankings from users running devices with slide out keyboards but low rankings from users running devices with virtual keyboards. Without a framework to associate data with a class of applications at differing levels of detail application users presently track implementation details and application developers presently tolerate customer feedback aggregated at differing and potentially inappropriate levels of implementation detail.

This Summary is provided to introduce simplified concepts for improving discoverability using behavioral data which are further described below in the Detailed Description. This Summary is not intended to identify essential features of the claimed subject matter nor is it intended for use in determining the scope of the claimed subject matter.

This application relates to implementation of a meta application framework. The meta application framework provides for the storage and retrieval of software application data and meta application data. Because software applications may be related to their respective meta applications in some contexts end users and computer applications may retrieve information not only for a software application but also retrieve information for other software applications that relate to the first software application by being associated with a related meta application.

One example context is an end user querying an application store to search for applications that have desirable characteristics across a number of different platforms for instance a text editor that works equally well with mobiles phones with slide out keyboards and those without. The meta application framework may store application and meta application data beyond physical characteristics of platforms or feature sets of applications. Another example context is where the meta application framework is associated with behavioral data and behavioral statistics of users. Because behavioral data extends beyond a single platform or a single application behavioral data may be associated with meta applications. In this context an application s store may identify the present end user search the meta application framework for software applications that have similar behavioral data and proactively display the query results.

As a data storage and retrieval facility the meta application framework may include a meta application schema user and or programmatic interfaces to the meta application schema and components to apply logic to data organized in the meta application schema. Components applied to the meta application schema may include a query component a directory services engine and a behavioral analysis engine. Such components may be applied to additional data external to data stored according to the meta application schema.

An exemplary meta application schema enables the association of data with a class of applications called a meta application. The meta application may be associated with a platform. A platform may be associated with a device and or an operating system. A platform stores attributes common to a family of devices and or operating systems. A device may comprise a set of hardware features and an operating system may comprise a set of software features.

Example methods utilizing the meta application schema include but are not limited to performing direct data manipulation operations on a data store according to the meta application schema. Data manipulation operations may include record creation retrieval update and deletion operations. Alternatively example methods utilizing the meta application schema may include applications operating on the data store according to the meta application schema via an application programming interface API or via the aforementioned direct data manipulation methods.

As noted above a platform is a set of features common across multiple devices and or multiple operating systems. The term platform relates to a set of hardware and software features that collectively may host an application. Accordingly a platform should associate any feature that would change the user experience or behavior of a hosted application with a device or operating system. In this way behavioral differences in applications associated with the same platform may be accounted for. Hardware features associated with a device may include hardware peripheral devices such as memory cards and alternative power sources. Software features associated with an operating system may include such as system utilities that to enhance application performance or device drivers.

As used herein a meta application is a class of applications that have comparable features for some analysis. For example two different text editors may belong to the same meta application by virtue of supporting a text editing surface and cursor cut copy paste features file open save close features. A single meta application may be associated with multiple platforms.

Data about applications and meta applications may be stored in a meta application schema which comprises several data entities. The data entities may correspond to meta applications applications platforms devices and other classes to be tracked by the meta application framework. Exemplary meta application schemas will be discussed below.

Whether a feature should be associated with a meta application or some other entity in the meta application schema depends on what sort of analysis is to be performed. For example if a first text editor supports hotkeys specific to a directional pad D Pad and a second text editor supports hotkeys specific to a touch screen then the features the two text editors have in common might be associated with the same meta application entity but the hotkey features might be associated with the device entity.

Features that cause a change in behavior for an application under different devices operating systems or platforms are not associated with meta applications. Example differences include changes in application performance such as speed or memory footprint under different platforms.

One use for a framework supporting meta applications is in providing applications to platform specific instructions. For example an application that supported features specific to a directional pad D Pad may refer to a meta application framework to determine whether to activate those features.

Another use for a framework supporting meta applications is in providing application stores a structure in which to organize platform specific user feedback. For example an application may have a better user experience on smart phones that supported a slide out keyboard than other platforms. Feedback from users with slide out keyboards could be distinguished from feedback from users without slide out keyboards. Had the user feedback between the two not been separated the feedback might have been aggregated together to provide misleading feedback.

Meta application framework comprises a meta application schema which provides support for meta applications and for platforms.

Data is stored according to meta application schema in data store . Data store broadly includes any memory that may store computer data persistently or temporarily. Accordingly data store may include a hard disk for server implementations and or a random access memory RAM cache for local application run time specific implementations. Data store may include software to facilitate data operations including but not limited to a file system and a database. Databases include but are not limited to relational databases object databases or n tuple store databases.

In particular n tuple store databases are presently used to store metadata and are optimized for the storage and retrieval of n tuples. Properly optimized n tuple store databases can enable the storage and retrieval of extremely large n tuple records. For example Entrez Gene presently stores approximately 172 billion 3 tuples relating to gene sequences. Accordingly n tuple store databases are suitable for high volume high data applications such as cloud based data stores.

N tuple stores typically store data records as 3 tuples or triples. A triple may be comprised of three items a subject predicate and object which show the relationship between the subject and the object. For example the triple Bob Works Microsoft may represent the information the unidirectional relationship that Bob works for Microsoft Corporation. Similarly the triple Bob Married Sue may represent the bidirectional information that Bob is married to Sue. While there are many formats to store triples and n tuples a present standardized format to store triples is a graph store format known as Resource Description Format RDF which may represent subject predicate object triples.

N tuple stores need not be 3 tuple stores. A modification to a 3 tuple store also known as a triplestore is to add an optional fourth field making the triplestore a 4 tuple store. The fourth field would be a flag to indicate that a relationship was bi directional. Thus in the above examples Bob Works Microsoft False would indicate that Bob works for Microsoft but Microsoft does not work for Bob and Bob Married Sue True would indicate that Bob is married to Sue and Sue is married to Bob.

The data in the data store may be accessed according to the meta application schema via a query component . The query component broadly supports data manipulation operations including but not limited to record creation retrieval update and deletion. Queries may include combinations of data manipulation operations for example as implemented in stored procedures or file operations. The query component may be a standalone application to directly access the data store according to the meta application schema . Alternatively the query component may expose an application programming interface API to support programmatic access. Accordingly queries may be static or dynamic. Static queries are defined by an unchanging query string. An example of a static query is a query that a user hand enters into a search engine. Dynamic queries may be generated programmatically during run time. An example of a dynamic query is a query dynamically generated by a client application to perform a lookup against the meta application framework .

In the case that the query component supports an API or is otherwise programmatically accessible additional components may extend the meta application framework to provide new functionality. An example of an additional component is a behavioral or statistical trend analysis of customer feedback of applications on a meta application basis. Another example of an additional component is an application specific interface to query the data store seeking platform device or operating system specific behavior. In this way the meta application framework is operative as a form of lookup or directory service for application attributes.

Application developer queries broadly include any queries relating to product development. Application developer queries may guide future development or alternatively may support running applications. An example of product planning queries is a developer querying the meta application framework via a PC or other client device to investigate trends in application feedback. The developer may determine that feedback for an application is more positive for devices with operating system version X rather than operating system version Y and then may plan features to correct the application s behavior on operating system Y. An example of the meta application framework providing run time support is a developer enabling an application to perform queries to add attributes and data to be tracked by the meta application framework . These added attributes and data will be later accessed by the application during run time. The retrieved data may be used to dynamically alter the application s behavior during run time.

User queries relate to queries by application end users. For example a user may be an application searcher searching for applications to purchase in an application store. The application searcher may access the application store via a client device such as PC . The application store may have a client application running on the client device . Alternatively the application store may reside on an application server as an intervening web application to be accessed via a web browser. The application store may invoke query component and or additional components or may itself be comprised of query component and or additional components . In this example application searcher may be searching for applications specific to his or her platform. The application store may query the meta application framework to distinguish applications on a per platform device or operating system basis. By way of another example after having purchased an application via an application store the application searcher may wish to provide user feedback on a per platform device or operating system basis. An example of user feedback is a rating system such as rating an application with three stars out of a five possible stars to indicate average satisfaction with the application. Another example of user feedback is a user entering a text description of which application features are satisfactory as opposed to application features perceived to be deficient. The application store may have a commentary or feedback feature where a user may associate commentary with applications associated with a meta application. Regardless of the level of implementation detail the meta application framework supports associating feedback at the various levels.

Application queries and relate to queries performed by applications during runtime. Application developers may have stored data or logic in the meta application framework associated with a particular meta application. In one example an application user may run an application on different devices including but not limited to a smart phone netbook and or PC . Alternatively application user might have two client devices and that are identical but run different versions of the same operating system. Both client devices and run the same application.

In both cases the application could potentially be the same executable that dynamically enables or disables features based on platform device or operating system. Such an application could query the meta application framework via a query component or alternatively access additional components via an API. Alternatively the application could incorporate query component or additional components locally. The application might be designed in this fashion so that a development company could reduce versions shipped or otherwise consolidate distribution.

Alternatively the application might download features or run executables based on platform device or operating system. For example an application might have a feature that activated another application such as a text editor. The application might simply retrieve a pre positioned variable that specifies to run MyTextEditor.exe if a text editor is to be invoked. Alternatively the application may dynamically determine which text editor should be invoked by running a query against the meta application framework to determine the highest ranked text editor for that particular meta application. The logic to dynamically determine the highest ranked text editor may reside in the client application or alternatively may reside in the meta application framework itself as an additional component . By way of another example the logic to dynamically determine the highest ranked text editor may be stored in a value within the meta application framework . In this case a developer could distribute patches updates and other logic to be executed by applications simply by placing it in the meta application framework . Dynamically altering the application s behavior during run time based on the meta application framework is described in further detail with respect to .

The meta application framework and applications accessing the meta application framework are capable of being hosted or invoked from a wide range of client devices . Client devices may be any client that runs applications including but not limited to a smart phone PC or netbook . PC may include any device of the standard PC architecture or may include alternative personal computers such as the Macintosh from Apple Computer or workstations including but not limited to UNIX workstations. Client devices not shown may include notebook PCs pad computing devices and gaming consoles.

Meta application aware client applications running on a client device with network capability may then access application servers hosted on an enterprise server or an application server hosted on the general internet . In these embodiments the meta application framework would be hosted at least in part on the application servers.

If a meta application framework aware client application is accessing an enterprise server on a local area network LAN it may connect via any number of LAN connectivity configurations . At the physical layer this may include Ethernet or Wi Fi. At the network session transport layer this may include connectivity via the Transmission Control Protocol Internet Protocol TCP IP or other protocol. If the client framework for application behavioral services is accessing the internet it may connect via standard internet protocols including TCP IP for the network session transport layer and Hypertext Transfer Protocol HTTP at the application layer.

Client devices that do not have network capability might host meta application aware applications and the meta application framework both on the client device.

If accessing the general Internet an independently hosted web server may be accessed. A web server may be a standard enterprise server based on a standard PC architecture that hosts an application server. Exemplary application server software includes Internet Information Server IIS from Microsoft Corporation or Apache Web Server an open source application server. Web server may access a database server also potentially on a standard PC architecture hosting a database. Exemplary databases include Microsoft SQL Server and Oracle. In this way an application behavioral services may run on either 2 tier or 3 tier platforms.

Meta application aware client applications may access web server or the general internet via cell phone protocols including but not limited to Cell Division Multiple Access CDMA Time Division Multiple Access TDMA Frequency Division Multiple Access FDMA and their successor protocols.

Alternatively server infrastructure for meta application framework may be hosted on a cloud computing service . Cloud computing service contains a large number of servers and other computing assets that are potentially in geographically disparate locations. These computing assets may be disaggregated into their constituent central processing units CPUs memory long term storage and other component computing assets. Accordingly the metadata association process the search engine and a digital media object data store when hosted on cloud computing service would have both centralized and distributed data storage on the cloud accessible via a data access API such as Open Database Connectivity ODBC or ADO.Net from Microsoft Corporation. At least part of the meta application framework would be hosted on computing assets in the cloud computing service corresponding to an application server.

Client devices enterprise servers and web servers may all support both on board and removable computer readable media. Computer readable media includes at least two types of computer readable media namely computer storage media and communications media.

Computer storage media includes volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other non transmission medium that can be used to store information for access by a computing device.

In contrast communication media may embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transmission mechanism. As defined herein computer storage media does not include communication media.

Each entity in the meta application schema including but not limited to meta application entity platform entity operating system entity and device entity is associated with one or more attributes. Attributes may be static semi static or dynamic. Static attributes are values that do not change once they are set such as constants. One example would be an attribute lookup value that pi was 3.1415 . . . . Semi static attributes are values that rarely change. One example might be the date of last operating system update. Semi static attribute can potentially have the same value across multiple sessions. Dynamic values are values that may be modified by the user by the application remotely by the developer at any time. Dynamic values may change several time during the same session. Regardless of whether attributes are static semi static or dynamic they are populated with external data . Populating the meta application framework is discussed in further detail with respect to below.

A meta application entity stores data specific to a meta application. In the meta application schema the meta application entity has attributes specific to the meta application. For example a meta application for text editors might contain a font style attribute. Meta application attributes may be core attributes which define the base set of functionality available for an application of that meta application class. Meta application attributes may also define extended or optional functionality for an application in that meta application class. Meta application attributes may also be user defined attributes. Thus the application user could add data specific to his or her user experience.

Platform entity describes features specific to a platform. A meta application entity is associated with one or more platform entities . An example attribute for a platform might be font technology. While all applications in the text editor meta application support fonts and font styles some will use TrueType as their font technology associated with a Microsoft Windows platform. Others may use Adobe PostScript for their font technology associated for example with an Apple MacIntosh platform. Thus in this way an implementation detail such as font technology is shifted from the meta application entity and into another entity such as platform.

Platform behavior may vary according to operating system or hosting device. Accordingly the platform entity may be associated with multiple operating system entities and multiple device entities . For example the Microsoft Windows platform may include the Win32 API both of which are supported in Windows Vista and Windows 7 operating systems. Similarly the Microsoft Windows platform would run with some behavioral differences on different devices such as on a netbook as opposed to on a high performance workstation.

Additional entities may be associated with the platform entity the operating system entity and the device entity without loss of generality.

Accordingly when external data is used to populate the meta application schema the data may be organized according to the level of implementation detail with the meta application entity defining the features specific to a class of applications the device entity storing hardware specific details and the operating system entity storing software specific details. Hardware and software may be grouped into a family of features within the platform entity .

By way of example flow chart illustrates a process to populate the meta application framework starting from the meta application entity and progressively moving to implementation specific entities such as the operating system entity and device entity . As each entity is populated with a new record a reference to the new record may be obtained. This reference may be stored as part of a new record stored in the next entity as will be shown below. Other embodiments may work in reverse where the less abstract entities are populated first through to the more abstract entities using alternative techniques to preserve referential integrity.

The meta application framework may receive data in the form of data values and or new attributes. Data values are values that may be associated with existing attributes and require no change of the meta application schema . When attributes are received those attributes are then added to the entity thus changing the meta application schema .

When the meta application framework receives data at block it may determine if there is a corresponding meta application record in the meta application entity . If the record exists new meta application specific attributes are added as specified and or meta application specific attributes are populated with data values. If new meta application specific data values were added a reference to those values may also be created.

At block the meta application framework performs platform entity specific processing. At block the meta application framework determines if there is platform specific data to be stored. If platform specific data is to be stored the meta application framework searches for an associated platform record. If the record does not exist a new platform record is created at block and platform specific attributes are added as specified and or platform specific attributes are populated with data values. If the record exists then the platform record may be populated in the same way but without reference to a meta application record. Otherwise at block the platform record is associated with its corresponding meta application record for example by storing the reference to the meta application record created at block as part of the platform record.

At block the meta application framework performs device entity specific processing. At block the meta application framework determines if there is device specific data to be stored. If device specific data is to be stored meta application framework searches for an associated device record. If the record does not exist a new device record is created at block and device specific attributes are added as specified and or device specific attributes are populated with data values. If the record exists then the device record may be populated in the same way but without reference to a platform record. Otherwise at block the device record is associated with its corresponding platform record for example by storing the reference to the platform record created at block as part of the device record.

At block the meta application framework performs operating system entity specific processing in an analogous way as block performs for devices. At block the meta application framework performs a check to see if a corresponding operating system record exists and if it does not it creates a new operating system record at block . Operating specific attributes are added and or operating system specific attributes are populated with operating system specific data values. At block a new operating system record may be associated with its corresponding platform record for example by storing the reference to the platform record created at block as part of the operating system record.

While the device entity and operating system entity are shown as being populated sequentially at blocks and the entities may be populated in reverse order or in parallel provided a reference to an associated platform record was created at block . In this way the reference may be stored to preserve referential integrity.

The meta application schema is not necessarily limited to meta application entity platform entity operating system entity and device entity . Additional entities may be populated in an analogous fashion provided that referential integrity is preserved.

At block a user may enter a query in a query application such as an application store or alternatively in an application rating site. The query application may receive user input and translate the query intent into a query string. Alternatively a sophisticated user such as a developer may enter a previously prepared static query string. Similarly if the user is an application the application may submit a hard coded query string.

Upon receipt at block the query component will parse the query string perform syntax checking and perform other query processing. In the event of error the query component may generate an error message or code to the calling query application.

The meta application framework supports data definition and data manipulation operations not only with data corresponding to the meta application schema but also with external data not necessarily stored in the meta application data store . Accordingly at block if the query is a data retrieval query and the meta application framework is to return data the meta application framework also determines at block whether external data is to be returned as well. If external data is to be returned the external data itself or references to the external data are retrieved and at block are associated to meta application framework data in data store . One exemplary technique to link data may be to create a temporary table and to associate references to the external data as per a relational join operation. Another exemplary technique would be to dynamically generate attributes in the meta application schema to store back references to external data. In this way back references would be persisted and would improve performance for subsequent queries.

After the meta application framework completes data retrieval per block and any external data are linked per blocks and the data is returned at block . If errors occur during this processing the meta application framework may generate an error message or code.

At block the meta application framework returns any error messages or codes generated during processing. Otherwise the meta application framework may return a message or code indicating successful processing.

Query processing by an application may be performed as per the discussion of . However applications may furthermore modify their behavior based on the returned data results. is a flow chart of an exemplary query process against the meta application framework by an application. Specifically flow chart illustrates the particular case where an application retrieves data and changes behavior based on the retrieved data. does not preclude other cases where an application may perform queries that do not retrieve data or where an application merely retrieves data without changing behavior.

At block an application generates a query and sends the query to the meta application framework . The application may simply forward a static string or may dynamically generate the query during run time.

At block the meta application framework receives the query and performs query operations at block . Processing may proceed as at block of . Because an application may invoke query component via an API an application might alternatively bypass query parsing and may perform data operations directly.

At block the meta application framework returns data corresponding to the query. In the present example since the application is making a determination on how to change behavior based on information in the meta application framework the query is always a retrieval request. At block the meta application framework performs actions based on the returned data.

If the returned data is a static directive the application may perform a state change in response. State changes include but are not limited to application behavioral changes user interface changes and performance changes. For example an application may determine that for devices with direction pads D Pads it should enable a particular D Pad specific feature. Alternatively an application may determine that for operating systems below a certain version number that certain features should be turned off for lack of operating system support.

If the returned data is a dynamic directive the application may be directed to invoke another application at block . For example an application that integrates with a text editor may query the meta application framework to determine which text editor to invoke. The meta application framework may determine that a new text editor released a few days ago is considered better than the text editor the user was previously using and accordingly may execute the new text editor.

The return data may also provide user defined logic to be executed at block . For example the returned data may be in the form of a script that may be executed within the application. Alternatively the returned data may be in the form of a script that may be executed by a script interpreter on the client device executing independently of the application.

At block any error messages or codes generated during processing returned by the meta application framework .

While illustrates application behavior at blocks and as being performed sequentially other embodiments may process multiple requests concurrently and may perform these blocks in parallel.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

