---

title: Message routing based on modeled semantic relationships
abstract: A system to determine a hierarchical model comprising two or more associated nodes, each of the nodes associated with one or more message producers and one or more message consumers, receive a message from one of the one or more message producers; and route the message to one or more of the one or more message consumers based on the hierarchical model. The hierarchical model may include a root node and a plurality of nodes descending from the root node, the plurality of nodes including the two or more associated nodes, wherein each of the plurality of nodes is associated with a topic, a parent node, one or more child nodes, one or more message producers, and one or more message consumers. Routing the message may comprise traversing two or more nodes of the hierarchical model based on first logic.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09100202&OS=09100202&RS=09100202
owner: Business Objects Software Limited
number: 09100202
owner_city: Dublin
owner_country: IE
publication_date: 20101118
---
Messaging is a generic term referring to protocols which enable communication between software components or applications. Conventional messaging enables distributed communication that is loosely coupled since messaging clients i.e. message producers and message consumers are not required to possess any knowledge of one another. Rather such producers and consumers need only be aware of agreed destinations and messaging formats. Consequently a messaging client can send messages to and receive messages from any other messaging client.

Messaging protocols include queue based protocols topic based publish subscribe protocols and messaging bus based protocols. Queue and topic based protocols link message producers and message consumers using queue names or topic names. illustrates system including two message channels which provide communication between producers and consumers using respectively queue and topic based protocols. Queue enforces a one to one relationship between message producer and message consumer . Accordingly once a message is received at queue and transmitted to consumer that message becomes unavailable to any other consumer.

A topic based protocol on the other hand implies a one to many relationship between a message producer and message consumers. For example a message transmitted by message producer and associated with topic is delivered to message consumers and both of whom are associated with topic e.g. through a registration subscription process . According to the protocols illustrated in a queue name or a topic name provides the only indication of a semantic relationship between a producer of a message and its consumer s . No semantic relationships are defined between producers or between consumers. Accordingly each queue or topic based message channel exists as a substantially independent entity even though logical relationships may exist between producers and or consumers of the message channels.

A message bus based protocol such as Model View Controller may utilize a central component to route messages between producers and consumers. illustrates system implementing such a protocol wherein dispatcher uses routing table to route messages between producers and consumers . For example routing table may associate event ids with one or more consumers. A producer may publish an event along with an event id and dispatcher may determine the consumers which are associated with the event id in routing table and transmit the event to those consumers .

As described with respect to system system also falls short of effectively defining semantic relationships between producers between consumers between producers and consumers and between message channels e.g. represented by individual event ids . In view of the foregoing what is needed is a messaging system to efficiently model semantic relationships among message producers and message consumers. Such a system may enable the application of semantically meaningful routing and filtering algorithms to efficiently leverage these modeled relationships.

The following description is provided to enable any person in the art to make and use the described embodiments and sets forth the best mode contemplated for carrying out some embodiments. Various modifications however will remain readily apparent to those in the art.

Generally each logical component described herein may be implemented by any number of devices coupled via any number of public and or private networks. Two or more of such devices may be located remote from one another and may communicate with one another via any known manner of network s and or via a dedicated connection. Moreover each logical component may comprise any number of hardware and or software elements suitable to provide the functions described herein as well as any other functions.

Producers may comprise any one or more message producers that are or become known. One or more of message producers may comprise a software component or module which produces messages for consumption by one or more message consumers. Such messages may conform to any current or future messaging format and or protocol.

Similarly consumers may comprise any one or more message consumers each of which may comprise a software component or module. One or more of consumers may be an element of a software application and or system that is different from the application system of one or more producers . In this regard each of consumers and producers may be located in any portion of a distributed computing architecture embodying one or more operating systems languages platforms etc.

Model consuming dispatcher receives messages from producers and routes the messages to appropriate ones of consumers . This routing is based on hierarchical relationship model . Hierarchical relationship model defines logical and or semantic relationships among producers and consumers . Hierarchical relationship model may be stored within any number of storage devices that are or become known. As a result and as will be illustrated in examples below message routing and filtering may be determined by semantic rich rules applied to model .

Hierarchical relationship model illustrates the structure of hierarchical relationship model according to some embodiments. Hierarchical relationship model includes nodes through assembled in a tree like structure of parent child ren relationships. Embodiments are not limited to the structure of model .

Root node is associated with child nodes through which may be referred to as child nodes of root node . Similarly nodes and may be considered child nodes of node and grandchild nodes of root node . More generally nodes through are descendent nodes of root node and nodes and are descendent nodes of node .

According to some embodiments each node of hierarchical relationship model is associated with a topic one or more of message producers and one or more of message consumers . All nodes except root node are also associated with one parent node. Moreover each node may be associated with one or more child nodes.

Topic may reflect a messaging topic as is known. For example producers may generate events messages to the selected topics and consumers may subscribe to their interested topics by specifying topic names. However unlike known systems hierarchical relationship model may reflect logical and semantic relationships between various topics i.e. by virtue of their associated nodes consumers and or producers .

ProducerList is used to associate producers with a selected node and by extenstion with the one or more topics associated with the node. Similarly ConsumerList associates consumers with a node and with the one or more topics which are associated with the node.

According to some embodiments a hierarchical assemblage of nodes as described herein facilitates the expression of semantic logical relationships. The associated node tags may also annotate business meanings behind a software implementation. Producers and consumers may therefore attach themselves to a node that reflects their functional semantic scope. A producer or a consumer may register with a particular node or topic before or during runtime in order to be added to the listed producers or consumers associated with the node. Producers and consumers are thereafter further enriched with a hierarchical relationship depending on the nodes to which they are attached.

The nodes themselves may represent any suitable logical entities which exhibit hierarchical relationships. Examples include User Interface UI containers geographic regions and positions in a business organizational chart.

Process may be executed to route messages according to some embodiments. As described above such routing is based on a hierarchical model of two or more associated nodes where each of the nodes is associated with one or more message producers and one or more message consumers.

Accordingly a hierarchical model is initially determined at S. As mentioned above the hierarchical model includes two or more associated nodes where each of the nodes is associated with one or more message producers and one or more message consumers. A hierarchical model according to some embodiments may also include other nodes which are associated to at least one other node but which might not be associated with a message consumer and or might not be associated with a message producer. The nodes of the hierarchical model according to some embodiments may comprise instances of Node of class diagram associated with instances of classes through as illustrated therein.

The hierarchical model may be embodied in any type of suitable data structure. For example the hierarchical model may be specified in database tables which reflect the structure of class diagram . The data structure may be stored in any one or more storage devices including but not limited to Random Access Memory and a hard disk drive.

Determination of the hierarchical model at S may include retrieval of a previously created hierarchical model from a memory i.e. a storage device . In some embodiments the determination at S also includes creation of the hierarchical model. For example a software application developer may generate a hierarchical model to represent relationships within the application and thereby facilitate desired functionality.

Generation of the hierarchical model may initially entail defining the nodes of the model. The nodes may be defined based on a consideration of how messages are distributed within functional units of the system. For example the nodes may mimic the organizational structure of a business with which the software application is associated. On the other hand the nodes may mimic the event originating UI structure of the software application.

Each node is assigned a unique node tag which describes its meaning and the nodes are assembled into a hierarchy based on their relationships to one another. The relationships and the hierarchy may be self evident in view of the definitions of the nodes. Next one or more topics are assigned to each node.

Finally each node of the hierarchical model is associated with zero or more message producers and message consumers. This association may occur at design time and or at runtime e.g. via an Application Programming Interface .

An example of a hierarchical model will now be provided in the context of a UI. Most UI layouts consist of a hierarchy of containers. The hierarchy can be described as a tree with the base application container represented as the root node and each other UI container as a child node descendant from the base application container.

Returning to process a message is received from one or more message producers at S. With reference to system model consuming message dispatcher may receive a message from one of producers at S. Next at S the message is routed to one or more message consumers based on the hierarchical model.

In an initial example it will be assumed that application UI sets its Region to North America at S. Dispatcher determines that this event is to be fired to every lower layer of scope. Model consuming message dispatcher may therefore perform a depth first search beginning on a node where application UI is associated as a message producer and then searching for each child node with which a UI container is associated as a message consumer of update events for this data. More particularly dispatcher may employ logic to perform a depth first search to find all message consumers associated with a node and all its descendants and to route the event to the found message consumers. An example of the logic of the depth first search is expressed in the following pseudo code.

Flow may return from S to S in order to receive and route additional messages. Embodiments may employ many different routing and searching methods by using tree traversal logic that is or becomes known. For example UI is designed to provide comparisons by allowing a user to set canvas independently from application UI . Thereafter canvas should no longer listen for region updates on the parent node i.e. the node associated with application UI since its node has become a producer node. The above logic may be extended to implement this routing. Such extended logic may filter out updates from any producers from a higher i.e. ancestor node if a producer of the same topic is included in the model region of interest. An example of the logic for filtering is expressed in the following pseudo code.

Similarly any change to the region of canvas is only scoped within canvas i.e. to widgets and . In other words updates to canvas should not be routed to widgets and of canvas . illustrates a situation in which the region of canvas is set to Mexico and routing is performed at S according to the latter logic above. Accordingly the update event will be routed to widgets and while widgets and will not receive this update event. illustrates corresponding changes to widgets and and a lack of changes to widgets and .

In contrast to the foregoing operation conventional dispatchers as described in the Background cannot easily group listeners and topics and route events to a particular grouping. Accordingly these dispatchers are deficient in cases where an event on a parent container must be propagated to each sub container located within the parent container but ignored by containers not within the parent container.

Model consuming dispatcher may perform process to route messages based on hierarchical relationship model . More particularly model consuming dispatcher may generate routing table based on hierarchical relationship model and based on those producers and consumers which have registered with topics and therefore associated themselves with corresponding nodes of hierarchical relationship model . Even more particularly dispatcher may generate routing table based on model and on logic which is intended to govern routing based on model as described above. Accordingly after receipt of a message at S dispatcher consults routing table to route the message at S. System may conserve resources by limiting the performance of intensive computations to once during initialization.

Apparatus includes processor operatively coupled to communication device data storage device one or more input devices one or more output devices and memory . Communication device may facilitate communication with external devices such as an external design tool. Input device s may comprise for example a keyboard a keypad a mouse or other pointing device a microphone knob or a switch an infra red IR port a docking station and or a touch screen. Input device s may be used for example to enter information into apparatus . Output device s may comprise for example a display e.g. a display screen a speaker and or a printer.

Data storage device may comprise any appropriate persistent storage device including combinations of magnetic storage devices e.g. magnetic tape hard disk drives and flash memory optical storage devices Read Only Memory ROM devices etc. while memory may comprise Random Access Memory RAM .

Dispatcher of data storage device may comprise program code executable by processor to provide functions described herein including but not limited to process . Embodiments are not limited to execution of these functions by a single apparatus. Hierarchical relationship model may comprise a data structure including associated nodes as described herein while routing table may be based on hierarchical relationship model and used by dispatcher to route messages. Data storage device may also store data and other program code for providing additional functionality and or which are necessary for operation thereof such as device drivers operating system files etc.

Embodiments described herein are solely for the purpose of illustration. Those in the art will recognize other embodiments may be practiced with modifications and alterations to that described above.

