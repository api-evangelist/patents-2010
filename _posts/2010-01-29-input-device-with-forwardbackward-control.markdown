---

title: Input device with forward/backward control
abstract: In a computer system having a display and a keyboard, a computer readable medium includes instructions for invoking a message hook procedure based on a mouse message indicative of a mouse event. Instructions also provide for identifying at least one focus application that has a current keyboard focus and of converting the mouse message into a command for the focus application. The command is then sent to the focus application and the mouse message is prevented from being routed to any other applications. In one embodiment, the commands include the command to page forward or backward through pages of Internet documents. In other embodiments, instead of converting the mouse message into a command, the message hook procedure displays a graphical user interface based on the focus application and the mouse message. The graphical user interface includes one or more commands that the user may select. Based on the selection made by the user, the message hook procedure sends a corresponding command to the focus application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09069395&OS=09069395&RS=09069395
owner: MICROSOFT TECHNOLOGY LICENSING, LLC
number: 09069395
owner_city: Redmond
owner_country: US
publication_date: 20100129
---
This application is a continuation of U.S. patent application Ser. No. 09 998 305 filed Dec. 3 2001 and entitled INPUT DEVICE WITH FORWARD BACKWARD CONTROL which is a continuation of U.S. patent application Ser. No. 09 153 148 filed Sep. 14 1998 entitled INPUT DEVICE WITH FORWARD BACKWARD CONTROL which is abandoned. This application also relates to U.S. patent application Ser. No. 10 004 663 filed Dec. 4 2001 entitled INPUT DEVICE WITH FORWARD BACKWARD CONTROL and which has issued as U.S. Pat. No. 7 639 235 and this application further relates to U.S. patent application Ser. No. 09 152 434 filed Sep. 14 1998 entitled PROXIMITY SENSOR IN A COMPUTER INPUT DEVICE and which issued as U.S. Pat. No. 6 456 275 and this application further relates to U.S. patent application Ser. No. 09 152 443 filed Sep. 14 1998 entitled METHOD OF INTERACTING WITH A COMPUTER USING A PROXIMITY SENSOR IN A COMPUTER INPUT DEVICE and which issued as U.S. Pat. No. 6 396 477 and this application further relates to U.S. patent application Ser. No. 09 286 739 filed on Apr. 6 1999 entitled COMPUTER INPUT DEVICE WITH DIGIT SUPPORT AND NATURAL POSITION ACTUATORS and which issued as U.S. Pat. No. 7 002 552 the contents of each of the above identified applications expressly incorporated herein by reference.

The present invention relates to computer systems. In particular the present invention relates to input devices for computer systems.

In many computer systems users are able to control functions and select displayed items using a pointing device such as a mouse. Information about the status of a mouse such as mouse movement and the activation of switches on the mouse is periodically provided to the computer by the mouse. This information is usually delivered in data packets and is generally received by software programs known as mouse drivers which provide an interface between the hardware of the mouse and the operating system of the computer. In some systems when the mouse driver receives a data packet it generates one or more mouse messages that convey the current status of the mouse including what buttons are depressed on the mouse.

The mouse messages generated by the mouse driver are typically sent to the application that has a display window directly below a mouse cursor or caret on the screen. However in some computer architectures other applications can receive a mouse message by registering a message hook with the operating system. Under these architectures the operating system keeps a list of registered message hooks and when the operating system receives a mouse message it sequentially invokes the message hooks. Each message hook in the list will be invoked unless one of the message hooks consumes the mouse message by returning a value to the operating system that tells the system to stop invoking message hooks in the list and to not send the mouse message to the application that has a window below the mouse cursor.

Currently mice generally have two buttons or three buttons. Therefore applications have been written to accept mouse messages indicating events relating to at most three buttons. They generally do not have the ability to deal with any additional button closure events. In light of this it has not been possible to implement more than three buttons on a mouse in such a way that additional functions can be invoked from currently available applications by depressing one of the additional buttons.

In a computer system having a display and a keyboard a computer readable medium includes instructions for invoking a message hook procedure based on a mouse message indicative of a mouse event. Instructions also provide for identifying at least one focus application that has a current keyboard focus and of converting the mouse message into a command for the focus application. The command is then sent to the focus application and the mouse message is prevented from being routed to any other applications.

In one embodiment the commands include the command to page forward or backward through pages of Internet documents.

In other embodiments of the present invention instead of converting the mouse message into a command the message hook procedure displays a graphical user interface based on the focus application and the mouse message. The graphical user interface includes one or more commands that the user may select. Based on the selection made by the user the message hook procedure sends a corresponding command to the focus application.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a conventional personal computer including a processing unit CPU a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. The system memory includes read only memory ROM and random access memory RAM . A basic input output BIOS containing the basic routine that helps to transfer information between elements within the personal computer such as during start up is stored in ROM . The personal computer further includes a hard disk drive for reading from and writing to a hard disk not shown a magnetic disk drive for reading from or writing to removable magnetic disk and an optical disk drive for reading from or writing to a removable optical disk such as a CD ROM or other optical media. The hard disk drive magnetic disk drive and optical disk drive are connected to the system bus by a hard disk drive interface magnetic disk drive interface and an optical drive interface respectively. The drives and the associated computer readable media provide nonvolatile storage of computer readable instructions data structures program modules and other data for the personal computer .

Although the exemplary environment described herein employs the hard disk the removable magnetic disk and the removable optical disk it should be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer such as magnetic cassettes flash memory cards digital video disks Bernoulli cartridges random access memories RAMs read only memory ROM and the like may also be used in the exemplary operating environment.

A number of program modules may be stored on the hard disk magnetic disk optical disk ROM or RAM including an operating system one or more application programs one or more device drivers other program modules and program data . A user may enter commands and information into the personal computer through input devices such as a keyboard pointing device and a microphone . Other input devices not shown may include a joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a serial port interface that is coupled to the system bus but may be connected by other interfaces such as a sound card a parallel port a game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video adapter . In addition to the monitor personal computers may typically include other peripheral output devices such as a speaker and printers not shown .

The personal computer may operate in a networked environment using logic connections to one or more remote computers such as a remote computer . The remote computer may be another personal computer a hand held device a server a router a network PC a peer device or other network node and typically includes many or all of the elements described above relative to the personal computer although only a memory storage device has been illustrated in . The logic connections depicted in include a local area network LAN and a wide area network WAN . Such networking environments are commonplace in offices enterprise wide computer network Intranets and the Internet.

When used in a LAN networking environment the personal computer is connected to the local area network through a network interface or adapter . When used in a WAN networking environment the personal computer typically includes a modem or other means for establishing communications over the wide area network such as the Internet. The modem which may be internal or external is connected to the system bus via the serial port interface . In a network environment program modules depicted relative to the personal computer or portions thereof may be stored in the remote memory storage devices. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used. For example a wireless communication link may be established between one or more portions of the network.

As shown in mouse includes a ball that rests in a middle portion of lower housing and protrudes through a hole shown in dashed lines in the lower surface of the mouse. X and Y axis transducers and respectively translating motion into electrical signals and each include an encoder wheel shaft and an encoder wheel axially fixed to an end of each encoder wheel shaft . The encoder wheel shafts are oriented perpendicular to each other within lower housing and adjacent to the ball .

A wheel pin and an end pin both shown in dashed lines axially extend from each encoder wheel shaft into a pair of pin holes formed in a pair of supports to rotatably receive the encoder wheel shaft. Each pair of shaft supports rotatably retains one of the encoder wheel shafts . The wheel pin axially extends from the end of the encoder wheel shaft proximal to the encoder wheel . The end pin axially extends from the end of the encoder wheel shaft distal from the encoder wheel .

A spring biased roller projects upwardly from and is rotatably retained by the lower housing . The spring biased roller is positioned opposite to an interior angle formed by the perpendicularly positioned encoder wheel shafts and biases the ball into contact with the encoder wheel shafts and toward the interior angle while allowing the ball to freely rotate and cause the encoder wheel shafts and the encoder wheels to rotate.

A light emitting element such as a light emitting diode LED is positioned on one side of each encoder wheel . A light detecting element such as a phototransistor is positioned opposite each LED on the other side of each encoder wheel . As each encoder wheel rotates light from the LED is alternatively blocked and transmitted through the encoder wheel and received by the phototransistor depending on whether one of several notches in the perimeter of the encoder wheel is positioned between the LED and phototransistor .

A primary switch and a secondary switch are positioned below the primary input button and the secondary input button respectively see whereby actuation of the primary or secondary input button results in actuation of the corresponding switch. A roller switch is positioned adjacent to wheel and can be actuated by depressing wheel downwardly as described below.

The switches and are spaced apart in positions approximately within the front left and right corners of the lower housing respectively to accommodate positioning of the wheel and carriage therebetween. It is desirable to allow a user to depress the primary or secondary buttons and at any portion on the upper surface of these buttons see while still actuating the switches and respectively.

The primary and secondary switches and the roller switch the LEDs and the phototransistors are all mounted on a single printed circuit board and coupled by known means to additional circuitry mounted thereon. Additional circuitry includes a microcontroller and other discrete electronic devices known by those skilled in the relevant art to cause LEDs to emit light to cause phototransistors to produce signals based on the light to receive the signals and to convert these signals to appropriate computer signals to be output over cord to the computer.

Rocker button includes support arms and that have openings used to snap fit rocker button into pins and that are integrally formed in lower housing . Support arms and and pins and are positioned such that rocker button can pivot about an axis between pins and in directions shown in .

Rocker button is in contact with a rocker arm of a rocker arm switch . Rocker arm pivots about a connecting pin extending between two arms of a support . Support is in turn supported by base support which also supports a first switch .

Rocker arm switch is shown in more detail in which provides a perspective view of the rocker arm switch. In rocker arm is shown connected to switch and a second switch by respective plungers and . As button is pivoted it causes rocker arm to pivot about connecting pin causing either plunger to move into switch or plunger to move into switch and thereby closing the respective switch. Since rocker arm can not close both switch and switch at the same time the switches are not independently depressible. In some embodiments switches and include internal springs that open their respective switches when force is not being applied to button . Signals from switches and are provided to additional circuitry of .

In alternative embodiments rocker arm switch is implemented as two discrete switches. In other embodiments the orientation of the rocker arm switch or the discrete switches is different.

As shown more clearly in wheel consists of a disk having an elastomeric covering extending circumferentially around the disk. A pair of pins forming an axle extending axially from opposite sides of the disk . A substantially rectangular cross section hub extends from one of the pins . The pins are snap fit into a pair of round apertures formed by two pairs of upwardly extending fingers formed in a carriage . As explained more fully below carriage is movably retained in position in lower housing .

A pair of vertically extending flanges protrude from opposite sides of an encoder enclosure while a pair of vertically extending ribs protrude from a side of carriage . A pair of vertically extending grooves formed in the ribs each receive one of the flanges of the encoder enclosure so that the encoder closure is securely received by carriage . When so received an inverted U shaped slot in the encoder enclosure is axially aligned with the round apertures of the carriage . The flanges each have a tapered lower end to readily allow the encoder closure to be slid into the grooves during manufacture. A flexible web connector electrically interconnects a portion of the Z axis transducer assembly with the printed circuit board .

The carriage rests upon a pair of springs . A pair of pins extending upwardly from the lower housing extends through and retains a lower portion of springs . Four vertical guides having a substantially 45 angular cross section extend upwardly from the lower housing to slidably retain four corners of the carriage and thereby allow the carriage to slidably rest upon springs while restricting movement of the carriage to sliding movement in a vertical direction.

As a result the wheel can be depressed and the carriage thereby slid downwardly toward the lower housing of the mouse so that a switch engagement arm extending from the carriage opposite the encoder enclosure is moved downwardly to actuate the roller switch . In particular a lower end portion of the switch engagement arm engages and depresses a switch button of the roller switch until a lower surface of a downwardly extending stop portion of the switch engagement arm engages an upper surface of the roller switch to limit downward movement of the switch engagement arm and therefore prevent further downward movement of the switch button . Without the stop portion the switch button of the roller switch might be depressed inwardly too far causing the button to become stuck in the downward position.

Additionally carriage can be depressed downwardly to actuate the roller switch while wheel is rotated. Therefore the user can depress and hold the roller switch thereby generating a switch signal while simultaneously rotating the wheel to generate roller position signals.

Several legs extending downwardly from carriage rest against an upper surface of the lower housing when the wheel is fully depressed to thereby restrict further downward movement of the carriage. A tab extending outwardly from one of the ribs of the carriage and an upper surface of one of the pair of fingers that are opposite the tab rest against stop members and respectively of the upper housing to thereby limit upward movement of the roller and carriage .

Referring to which is a bottom view of upper housing primary button and secondary button primary and secondary buttons and are integrally formed with a resilient hinge member extending from a rearward edge of each of the buttons. Hinge member is received through an opening in upper housing and secured thereto by locking tabs which snap fit into recesses in the hinge member. When the hinge member is retained by the upper housing and the upper housing is secured to the lower housing a pair of switch actuating plungers one extending downward from each of the primary and secondary buttons and are positioned over corresponding ones of the switches and to engage and depress the switches. When upper and lower housings and are secured together wheel extends upward through an oval hole formed between primary and secondary buttons and as shown in .

A channel extends transversely across the hinge member between the left and the right sides thereof to provide an area where the material e.g. plastic forming the hinge member is thinner and thereby provides a hinge line at which the buttons and pivot when depressed. The hinge member is resilient and provides an upwardly directed return force to return the buttons and to their original position after being depressed. Importantly a post extending downwardly from the upper housing is split longitudinally with respect to the housing to form left and right post portions with a gap therebetween. The hinge member has left and right post portions each with a resilient laterally outward primary hinge portion and a resilient laterally inward secondary hinge portion having a hole therebetween sized to receive a corresponding one of the left and right post portions therethrough when the hinge member is secured to the upper housing . By splitting the downwardly extending posts into left and right post portions the left and right secondary hinge portions of the hinge member can extend therebetween and provide an upward return force to the buttons and at a laterally inward side thereof to better distribute the return force applied by the hinge member as will be described below. A longitudinally extending space is provided between the left and right secondary hinge portions to isolate the primary and secondary buttons and so that movement of either button does not cause movement of the other button.

The mouse generates X and Y axis position signals for the computer system generally in a manner typical of most current mice. In operation mouse is moved or slid along a planar surface causing the ball protruding through the hole to rotate. As the ball rotates it rotates the encoder wheel shafts of the X and Y transducers and which in turn rotate the encoder wheels fixed thereon. As the encoder wheels rotate the phototransistors receive pulses of light from the LEDs as the notches sweep past the LEDs. Each phototransistor converts these pulses of light into varying electrical signals which are input to additional circuitry .

The number of transitions between digital 0 and 1 signals detected by additional circuitry indicates the magnitude of mouse travel. Together determination of direction and magnitude of mouse travel are referred to in the art as quadrature calculation. Quadrature calculation is performed by additional circuitry using known techniques to produce count signals indicating movement of mouse along X and Y axes. The count signals are either positive or negative indicating movement of mouse in either forward or reverse direction along a particular axis.

Mouse generates Z axis position signals for the computer system in a manner similar to that for generating X and Y axis signals. The Z axis transducer assembly of produces Z axis signals which are input to additional circuitry . Additional circuitry determines the direction and magnitude of rotation of wheel from these signals using quadrature calculation.

Although mouse has been described in connection with a track ball used to determine movement of the mouse the present invention can also be used with solid state mice that detect movement of the mouse by collecting images of portions of the surface over which the mouse travels.

In a process of the present invention starts when the user manipulates mouse at a step . Based on this manipulation mouse generates a mouse packet that is passed to serial interface at a step . An example of a mouse packet under one embodiment of the present invention is shown in as mouse packet . Those skilled in the art will recognize that the mouse packet and the serial interface described below are used in PS 2 and serial mouse connections. For USB connections the mouse information is sent to the mouse driver using publicly available USB protocols for mice.

In four byte mouse packet is shown in a row and column format with bytes and shown in rows and the individual bits of each of the bytes shown in columns. Byte is the first byte provided by mouse byte is the second byte byte is the third byte and byte is the fourth byte. The columns of bits are organized with the least significant bits on the far right and the most significant bits on the far left. Thus column includes the least significant bits of each of the four bytes and column includes the most significant bits of each of the four bytes.

Within mouse packet first byte includes left button bit right button bit and middle button bit . A 1 in left button bit indicates that the left button is depressed and a 0 in left button bit indicates that the left button is not depressed. Similarly a 1 in right button or middle button bit indicates that the right button or the middle button respectively are depressed and a 0 in either of these bits indicates that their respective button is not depressed.

Fifth bit of byte is the ninth bit of a nine bit signed value that is completed by byte . The nine bit value produced by the combination of bit and byte represents the direction and magnitude of movement of the mouse along the X coordinate. Since the nine bit value is in two s complement format bit indicates the direction of mouse movement such that if it has a value of 0 mouse movement is in a positive X direction and if it has a value of 1 mouse movement is in a negative X direction.

Sixth bit of first byte is the ninth bit of a nine bit signed value that is completed by byte . The combination of bit and third byte produces a value that indicates the magnitude and direction of movement of the mouse along the Y coordinate. Since this value is a two s complement signed value bit indicates the direction of movement along the Y coordinate such that if it has a value of 1 the mouse movement is in a negative Y direction and if it has a value of 0 the mouse movement is in a positive Y direction.

Seventh bit and eighth bit of first byte indicate whether the nine bit values formed by bit and byte and by bit and byte respectively have incurred an overflow condition. This occurs when more than nine bits of movement have been detected by the mouse. In this condition the respective nine bit value should be set to their maximum magnitude for the direction of movement.

The least significant four bits and of fourth byte represent the direction and magnitude of movement of mouse wheel . The value represented by bits and is a signed value wherein a positive value indicates wheel motion toward the user and a negative value indicates wheel motion away from the user.

Bits and are the fifth and sixth bits of byte respectively and indicate closure of switches and respectively of mouse . Thus when bit has a value of 1 switch is closed indicating that upper edge of rocker button is tilted in toward switch .

Returning to when serial interface receives mouse packet it converts the serial information of mouse packet into a set of parallel information and provides the parallel packets to a mouse driver of at a step of . At step mouse driver determines if this is a side button event by examining bits and of mouse packet . If this is not a side button event mouse driver creates a mouse message based on the event at a step . The creation of the mouse message is identical to the manner in which existing mice create mouse messages for non side button events.

If at mouse driver determines that this is a side button event the process of continues at step where mouse driver creates a specialized middle button mouse message. The mouse message is specialized in that one of its parameters includes the identity of the side button that experienced the event.

Under one embodiment where the mouse driver is implemented with an operating system such as Windows NT Windows 95 or Windows 98 provided by Microsoft Corporation of Redmond Wash. mouse driver selects the mouse message from four possible middle button mouse messages. The four middle button mouse messages are divided into two types depending on the location of the cursor within a window. If the cursor is located within a non client area such as a boarder along the window or a toolbar mouse driver generates a WM NCMBUTTONDOWN mouse message when a side button is depressed and a WM NCMBUTTONUP message when a side button is released. When the mouse cursor is positioned over a client portion of a window mouse driver generates a WM MBUTTONDOWN mouse message when a side button is depressed and a WM MBUTTONUP mouse message when a side button is released.

Each of these four mouse messages includes a pointer to a structure containing a set of parameters associated with the message. One of these parameters is the current position of the mouse cursor on the screen. Another parameter in the structure is a thirty two bit value denoted as Extrainfo . In some embodiments mouse driver specializes the middle button mouse message by storing the identity of the side button that was depressed or released.

After mouse driver creates the mouse message at either step or the process of the present invention continues at step of . At step an operating system of receives the mouse message from mouse driver . In some embodiments operating system is a Windows NT a Windows 95 or Windows 98 brand operating system provided by Microsoft Corporation of Redmond Wash.

In some embodiments operating system includes a mouse message hook list that identifies a series of mouse message hook procedures . When operating system receives a mouse message it examines its mouse message hook list to determine if any mouse message hook procedures have registered themselves with operating system . If at least one mouse message hook procedure has registered itself with operating system operating system will pass the mouse message to the registered mouse message hook procedure that appears first on the list.

Under the present invention a message interceptor of which is a message hook procedure developed under the present invention registers itself with operating system at a step before step of and before step of .

Thus after operating system receives a mouse message from mouse driver at step of the operating system passes the mouse message to the first registered mouse message hook procedure at a step . If the message hook is not message interceptor at step the called message hook executes at a step and returns a value to operating system that instructs the operating system to pass the mouse message to the next registered mouse message hook. This is shown in as a return from step to step .

If at step the next message hook in the list is message interceptor the process continues at step where message interceptor determines if this is a middle button mouse message. If this is not a middle button mouse message message interceptor returns a value to operating system to indicate that operating system should pass the mouse message to the next message hook in the list. Thus the process returns to step from step .

If at step message interceptor determines that this is a middle button mouse message it proceeds to step where it examines the Extrainfo parameter associated with the middle button mouse message. If there is no side button information at a step of message interceptor returns a value to operating system to indicate that the operating system should pass the mouse message to the next registered mouse message hook. This is shown in as a return step .

If at step message interceptor determines that the mouse message includes side button information in the Extrainfo parameter message interceptor identifies the current focus window at a step . The current focus window is also known as the top window and is the window designated by the operating system to receive keyboard messages indicative of keystrokes made on the keyboard. It is not necessarily the window directly beneath the mouse cursor because the cursor can be placed outside of the window that is currently receiving keyboard information. To make this determination message interceptor makes a call to an application programming interface API provided by operating system that identifies the current focus window.

At a step of message interceptor determines the command or graphical user interface that is to be used based on the identity of the side button the event that occurred with the side button and the identity of the focus window. This determination can be made with the aid of a database such as an entry in the registry maintained by operating system for operating systems such as Windows NT Windows 95 or Windows 98 . Thus for the same focus window the depression of switch of can have a separate command associated with it than the depression of switch . In addition different focus windows can have different commands associated with the side buttons. For example for one focus window the depression of switch can be associated with a page back function while for another focus window the depression of switch can be associated with an UNDO function.

In addition some focus window side button event combinations are not associated with a command but instead are associated with the production of a graphical user interface that will appear on top of the focus window.

At step message interceptor determines if the current focus window and current side button event are associated with the production of a graphical user interface. If they are associated with a graphical user interface message interceptor makes a call to a graphical user interface program of associated with this side button event and focus window. This occurs at a step of .

If at step of message interceptor determines that the current side button event and focus window are associated with a command or after the user selects a command from the graphical user interface displayed at step message interceptor issues the command to the focus window application which is shown as focus application in . The issuance of this command is shown in step of FIG. B. Based on this command focus application performs a function such as paging back or forward through an Internet document undoing or redoing a previously performed function or paging upward or downward within a document. Examples of these functions are described further below.

After message interceptor has issued the command to focus application message interceptor consumes the mouse message by removing the message from the message chain at a step . This is accomplished by returning a value to operating system that indicates to the operating system that it should not pass the mouse message to any other message hook procedures or to the Window below the mouse cursor.

Through the process of the present invention is able to use an additional mouse button to invoke functions in applications that do not directly support such a button. By using an existing mouse packet protocol and existing mouse messages the present invention is able to make a mouse with more than three buttons functionally compatible with existing applications.

In the prior art in order to page backward to a previous Internet document page the user had to place the cursor over back button and depress and release the left button. Alternatively the user could simultaneously press the Alt key and the left arrow key to cause Internet Explorer 4.0 to page backward to a previous Internet page.

Under an embodiment present invention the user simply has to press and release button of mouse so that switch is depressed while window is the focus window of screen display . It does not matter where the cursor is currently positioned when window button is depressed and released.

In this embodiment this is accomplished by message interceptor which receives two middle button mouse messages that indicate that switch has been depressed and released. Based on these two mouse messages and after identifying that Internet Explorer 4.0 is the focus window message interceptor determines that this button is associated with a page back function. In order to cause Internet Explorer 4.0 to execute a page back function message interceptor posts a series of keyboard messages that falsely indicate that the user has simultaneously depressed the Alt key and the left arrow key and then has released both keys.

When Internet Explorer 4.0 receives these keyboard messages it interprets them as if the user has actually made these keys strokes. Based on these keyboard messages Internet Explorer 4.0 pages backward to the previous Internet document that was shown on display screen . An example of this previous document is shown as previous page in screen display of .

In the prior art users could also page forward to documents that were initially shown after the current page but which are no longer in view because the user has paged backward at some point. Under the prior art the user initiates at page forward command either by positioning the cursor over forward button and depressing and releasing the left button of the mouse or by simultaneously pressing the Alt key and the right arrow key.

Under the present invention the user can page forward to the next Internet page simply by pressing and releasing button such that switch is closed and opened. This causes two mouse messages to be sent to message interceptor which interprets the mouse messages as the depression and release of switch . Based on the identity of the switch that was depressed and released and the fact that Internet Explorer 4.0 is the focus window under one embodiment of the invention message interceptor produces a series of keyboard commands that indicate the simultaneous depression of the Alt key and the right arrow key followed by the simultaneous release of those keys.

Message interceptor then posts these messages to Internet Explorer 4.0 which interprets them as actual keystrokes and thus initiates a page forward function. The result of this page forward function is shown in where forward page is shown in Explorer window of display .

Similar commands can be sent to other applications under the present invention. For instance the depression and the release of switch can be associated with a command to cause an application to undo a previously performed function. For example the depression and release of switch can be associated with the undo function found in Microsoft s word processing program Word . In such an embodiment when message interceptor receives a middle button mouse messages indicating the depression and release of switch it post keyboard messages to Microsoft s Word application that are interpreted by Microsoft s Word application as an instruction to undo the previous performed function. Thus if the user had mistakenly deleted a word from their document simply by depressing and releasing mouse button such that switch is depressed and released they can invoke the undo function of Word and cause the deleted word to reappear in the document. Furthermore the present invention can also be used to invoke the redo function which reverses an undo function performed earlier. For example this function can be invoked in an embodiment of the present invention when the user depresses and releases mouse button such that switch is depressed and released.

In another embodiment of the present invention the depression and release of a side button can be associated with a page down function in the focus application such that when the side button is depressed and released the application pages through a multi page document. In one such embodiment the depression and release of switch is converted into commands that instruct an application to page up through a document and the depression and release of switch is converted into commands that instruct the application to page downward through the document.

Those skilled in the art will recognize that the present invention is not limited to causing applications to perform the functions described above. Other functions may be implemented with the applications described above. In addition although the present invention has been described in connection with specific applications those skilled in the art will recognize that the invention can be used in conjunction with many different types of applications.

In some embodiments after determining that a mouse event has occurred and that the event is associated with a graphical user interface message interceptor waits for a period of time to see if it receives a related second mouse message indicating that a related second mouse event has occurred. The first event and the related second event can include many combinations of events. For example the first event can be the depression and release of a side button on the mouse and the second event can be movement of the mouse or a subsequent depression and release of the side button of the mouse. Alternatively the first event can be the depression of the side button and the second event can be movement of the mouse or the release of the side button. Note that the first and second events can be any of those discussed above or any other suitable combination of events.

If message interceptor receives a related second mouse message within the set period of time it examines the position of the mouse cursor found in the two mouse messages. If the mouse was significantly moved to the left between the time of the first event and the time of the second event message interceptor accesses a database to determine a command to be sent to the focus window. In the example of message interceptor would send a command to perform a back function since the user s movement would have placed the cursor over back button if graphical user interface had been displayed. This command is sent as a series of keyboard messages that are posted to the focus window as discussed above.

If the mouse was moved to the right between the time of the first event and the time of the second event message interceptor retrieves a separate command for the focus window. In the example of message interceptor would send a series of keyboard messages representing a request for a forward function since the user s movement to the right would have placed the mouse cursor over forward button if graphical user interface had been displayed.

Those skilled in the art will recognize that the left and right directions are provided as examples and that message interceptor will also detect up and down movement as well as diagonal movement of the mouse between the time of the first event and the time of the second event.

If the time interval passes without message interceptor receiving a second mouse message indicating that a related second event occurred message interceptor calls the graphical user interface application associated with the current focus window and the graphical user interface application generates the graphical user interface. For example in the graphical user interface application produces graphical user interface .

When message interceptor later receives a second message indicating that a second event occurred it passes the coordinates of the mouse cursor associated with the second message to the graphical user interface application. The graphical user interface application then determines what command the mouse cursor was over when the second event occurred. For instance if the mouse cursor is over forward button when the second event occurs the graphical user interface application identifies the forward function as the selected command.

The selected command is then returned to message interceptor which converts the command into a format accessible by the focus window or which simply passes the command to the focus window. To perform the conversion message interceptor can use a database that describes the format for particular commands and focus windows.

Although only back button and forward button are shown in those skilled in the art will recognize that the graphical user interface application can produce other buttons. In particular buttons may be added vertically above and below arrow and diagonally from arrow . This results in a radial or pie menu such as pie menu of . In addition those skilled in the art will recognize that the size and shape of the buttons can be changed without altering the functions of the present invention.

Although the present invention has been described in connection with mouse having side button those skilled in the art will recognize that the present invention can be practiced with other types of buttons and switches. In particular rocker arm switch can be replaced by two separate switches that are activated by independent buttons. The switches can also be replaced by touch sensors that are capable of providing an electrical signal indicative of when the user is touching a particular area of the mouse. Examples of such touch sensors are found in a U.S. patent application entitled PROXIMITY SENSOR IN AN INPUT DEVICE that was filed on even date herewith the inventors of which were under an obligation to assign their invention to the first assignee of the present application.

In addition those skilled in the art will recognize that although the location of button has been referred to as being on the side of the mouse other embodiments of the present invention place the additional switches or contact sensors at different locations on the mouse. For example the functionality provided by switches and can be realized by placing touch sensors on top of the left button of the mouse. Under such embodiments the present invention operates in the same manner except that the two bits in the mouse packet produced by the mouse represent contact with two separate contact strips on the button instead of the depression or release of side switches and .

To allow a five button mouse of the present invention to operate with a number of different drivers and to allow a driver of the present invention to operate with a number of different mice the mouse and driver are synchronized to each other when the driver first starts. The steps involved in this synchronization process are shown in the flow diagram of .

The process of begins at step where the driver requests a mouse identification ID from the mouse. At step the mouse returns its mouse ID which indicates what type of mouse it is. At step the driver uses the mouse ID to determine how many buttons are on the mouse and whether the mouse has a wheel. This information can be stored on the registry or in some other suitable database.

If the mouse does not have a wheel at step the process ends at step with the driver configured to accept data from a mouse that does not have a wheel. If the mouse does have a wheel at step the driver sends a set of three SET RATE commands to the mouse at step . These commands are combined by the mouse and the combination is interpreted as an instruction to activate the wheel of the mouse by passing wheel data to the driver as the wheel is manipulated.

After step the driver determines if the mouse is a five button mouse at step . If it is not a five button mouse the process ends at step with the driver configured for a mouse with a wheel. If the mouse is a five button mouse at step the driver sends a set of three SET RATE commands to the mouse at step . These commands cause the mouse to activate its fourth and fifth buttons by passing button data related to these two buttons when the buttons are manipulated.

Although the present invention has been described with reference to specific embodiments workers skilled in the art will recognize that changes may be made in form and detail without departing from the spirit and scope of the invention.

