---

title: System and method for associating data relating to features of a data entity
abstract: A system and method for associating data relating to features of an entity. A first and second processor may receive and store first and second data relating to a first and second feature of a data entity in first and second memories. A third processor may store the first and second data in a first file in a third memory with respective time stamps. The first and second processor may receive third and fourth data relating to the first and second features and store the first and second data with respective time stamps. The third processor may compare time stamps and store data relating to the first and second features associated with the most recent time stamp.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08706705&OS=08706705&RS=08706705
owner: Conductor, Inc.
number: 08706705
owner_city: New York
owner_country: US
publication_date: 20101216
---
This disclosure relates to a system and method for associating data relating to features of a data entity where that data may be received and collected at different times.

Referring to the World Wide Web WWW is a distributed database including literally billions of pages accessible through the Internet. Searching and indexing these pages to produce useful results in response to user queries is constantly a challenge. A search engine is typically used to search the WWW.

A typical prior art search engine is shown in . Pages from the internet or other source are accessed through the use of a crawler . Crawler aggregates pages from source to ensure that these pages are searchable. Many algorithms exist for crawlers and in most cases these crawlers follow links in known hypertext documents to obtain other documents. The pages retrieved by crawler are stored in a database . Thereafter these pages are indexed by an indexer . Indexer builds a searchable index of the pages in a database . For example each web page may be broken down into words and respective locations of each word on the page. The pages are then indexed by the words and their respective locations.

In use a user uses a processor to send a search query to a dispatcher . Dispatcher compiles a list of search nodes in cluster to execute the query and forwards the query to those selected search nodes. The search nodes in search node cluster search respective parts of the index and return search results along with a document identifier to dispatcher . Dispatcher merges the received results to produce a final result set displayed to user sorted by ranking scores based on a ranking function. This disclosure describes an improvement over these prior art technologies.

One embodiment of the invention is a method for associating data relating to features of a data entity. The method comprises receiving by a first processor first data relating to a first feature of a data entity at a first time storing by the first processor the first data in a first memory in association with a first time stamp and receiving by a second processor second data relating to a second feature of the data entity at a second time. The method further comprises storing by the second processor the second data in a second memory in association with a second time stamp storing by a third processor the first data in a first file in a third memory in association with a third time stamp storing by the third processor the second data in the first file in the third memory in association with the first data and in association with a fourth time stamp and receiving by the first processor third data relating to the first feature of the data entity at a third time. The method further comprises storing by the first processor the third data in the first memory in association with a fifth time stamp receiving by the second processor fourth data relating to the second feature of the data entity at a fourth time storing by the second processor the fourth data in the second memory in association with an sixth time stamp and comparing by the third processor the third time stamp with the fifth time stamp to determine a first most recent time stamp. The method further comprises determining by the third processor which one of the first data and the third data is associated with the first most recent time stamp comparing by the third processor the fourth time stamp with the sixth time stamp to determine a second most recent time stamp determining by the third processor which one of the second data and the fourth data is associated with the second most recent time stamp and storing by the third processor in a second file the one of the first data and the third data associated with the first most recent time stamp in association with the one of the second data and the fourth data associated with the second more recent time stamp.

Another embodiment of the invention is a system effective to associate data relating to features of a data entity. The system comprises a first processor a first memory in communication with the first processor a second processor a second memory in communication with the second processor a third memory and a third processor in communication with the first processor the second processor and the third memory. The first processor is effective to receive first data relating to a first feature of a data entity at a first time and store the first data in the first memory in association with a first time stamp. The second processor is effective to receive second data relating to a second feature of the data entity at a second time and store the second data in the second memory in association with a second time stamp. The third processor is effective to store the first data in a first file in the third memory in association with a third time stamp and store the second data in the first file in the third memory in association with the first data and in association with a fourth time stamp. The first processor is effective to receive third data relating to the first feature of the data entity at a third time and store the third data in the first memory in association with a fifth time stamp. The second processor is effective to receive fourth data relating to the second feature of the data entity at a fourth time and store the fourth data in the second memory in association with an sixth time stamp. The third processor is effective to compare the third time stamp with the fifth time stamp to determine a first most recent time stamp determine which one of the first data and the third data is associated with the first most recent time stamp compare the fourth time stamp with the sixth time stamp to determine a second most recent time stamp determine which one of the second data and the fourth data is associated with the second most recent time stamp and store in a second file the one of the first data and the third data associated with the first most recent time stamp in association with the one of the second data and the fourth data associated with the second more recent time stamp.

Yet another embodiment of the invention is a report relating to an entity generated by receiving by a first processor first data relating to a first feature of a data entity at a first time and storing by the first processor the first data in a first memory in association with a first time stamp. The report is further generated by receiving by a second processor second data relating to a second feature of the data entity at a second time storing by the second processor the second data in a second memory in association with a second time stamp and storing by a third processor the first data in a first file in a third memory in association with a third time stamp. The report is further generated by storing by the third processor the second data in the first file in the third memory in association with the first data and in association with a fourth time stamp receiving by the first processor third data relating to the first feature of the data entity at a third time and storing by the first processor the third data in the first memory in association with a fifth time stamp. The report is further generated by receiving by the second processor fourth data relating to the second feature of the data entity at a fourth time storing by the second processor the fourth data in the second memory in association with an sixth time stamp and comparing by the third processor the third time stamp with the fifth time stamp to determine a first most recent time stamp. The report is further generated by determining by the third processor which one of the first data and the third data is associated with the first most recent time stamp comparing by the third processor the fourth time stamp with the sixth time stamp to determine a second most recent time stamp and determining by the third processor which one of the second data and the fourth data is associated with the second most recent time stamp. The report is further generated by storing by the third processor in a second file the one of the first data and the third data associated with the first most recent time stamp in association with the one of the second data and the fourth data associated with the second more recent time stamp comparing by the third processor the first file with the second file and generating a report relating to the entity based on the first file and the second file.

In the following detailed description reference is made to the accompanying drawings which form a part thereof. In the drawings similar symbols typically identify similar components unless context indicates otherwise. The illustrative embodiments described in the detailed description drawings and claims are not meant to be limiting. Other embodiments may be utilized and other changes may be made without departing from the spirit or scope of the subject matter presented herein. It will be readily understood that the aspects of the present disclosure as generally described herein and as illustrated in the accompanying figures can be arranged substituted combined separated and or designed in a wide variety of different configurations all of which are explicitly contemplated herein.

Referring to there is shown a system in accordance with an embodiment of the invention. As is described in more detail below system may include collector processors each in communication with a respective memory . A processor may be in communication with memories and with a memory . In operation collector processors and may collect data relating to features of a data entity from a network such as the Internet . Each collector processor may comprise a single processor or housing or multiple processors or housings in communication over a network. Each collector processor may collect data relating to a feature of entity so that in combination collector processors may store a version of entity . For example collector processor may collect data relating to feature A of entity collector processor may collect data relating to feature B of entity and collector processor may collect data relating to feature C of entity .

The inventor s has have learned that as data in network is constantly changing features of entity may change and be collected by collector processors at different times. As discussed in more detail below at particular points in time processor may receive the most recent version of data relating to features A B and C from memories . Processor may associate the versions of data for each of the features and generate a first most recent version data file of entity . At a second later time processor may receive the most recent version of data relating to features A B and C from memories and receive the first most recent version data file . Processor may produce a second most recent version data file for entity . Second most recent version data file may include the most recent data received by processor for each of the features A B and C from memories and memory .

Referring to there is shown more detail of system . As mentioned above each collector processor may store received data relating to respective features in respective memories. Data relating to each of these features may change and be updated and collected by collector processor at different times and rates. As shown in an example collector processor received new data indicating updates or changes to feature A at times 0 to 5 at timed 7 to 8 and at times 10 to 15. Collector processor received new data indicating changes to feature B at time 6. Collector processor received new data indicating changes to feature C at times 0 to 8 and times 10 to 15.

Processor may request a snapshot of the data for entity updated between two particular times. In an example a snapshot of entity may be taken between time 7 and 8 as illustrated by dotted lines . In the example between times 7 and 8 collection processor has stored new data relating to feature A. Processor may store data relating to feature A in a memory in an incomplete data entity structure . Incomplete data entity structure is formatted to include fields for data of all features of entity thereby facilitating a merge and or association of data relating to all features by processor . For data relating to features received by collector processor data relating to feature A is stored in incomplete data entity structure in memory associated with a time stamp . In this case the time stamp is 8 indicating that the data was most recently collected at time 8.

Similarly in the example between times 7 and 8 collection processor has not stored any new data relating to feature B. Processor may thus store no data in an incomplete data entity structure in memory for collector processor . This example is illustrated with a null set 0 shown as being stored in memory in the figure.

Moreover in the example between time 7 and 8 collection processor has stored new data relating to feature C. Processor stores data relating to feature C in a memory in an incomplete data entity structure . For data received by collector processor data relating to feature C is stored associated with a time stamp . In this case the time stamp is 8 indicating that data was most recently collected at time 8. Memories thus act like a staging area making it easier for processor to merge and or associate data received by collector processors .

At a desired time for each feature of data entity processor may compare data stored in memories with data stored in first most recent version data file . As illustrated first most recent version data file may include data relating to each feature along with associated time stamps . Processor may compare time stamp associated with data stored in memories with respective time stamps associated with data stored in memory for the same features. Processor may store data relating to the respective feature associated with the most recent time stamp in second most recent version data file . For example for data relating to feature A memory may have a time stamp that is more recent than time stamp . In this case processor may store data relating to feature A from memory in second most recent data file . In an example for data relating to feature B processor did not store any data in structure . In this case processor may store data relating to feature B from first most recent data file in second most recent data file . In this way a most recent version of a data entity may be stored.

As an example entity could be a URL uniform resource locator . Feature A could be the HTML hypertext markup language relating to a web page at the URL. Feature B could be backlinks to the URL indicating pages which link to the URL. Feature C could be a page rank of the URL. For example an application programming interface available from GOOGLE could be used to generate the page rank data for a particular URL.

In another example entity could be a domain such as a collection of URLS. Feature A could be a site map listing the URLs in the collection. Feature B could be the robot.txt file relating to the domain. Feature C could be a page rank of the root index of the domain.

In another example entity could be a keyword. Feature A could be the text of the keyword. Feature B could be the First 100 results of a search engine results page based on the keyword. Feature C could be a monthly search volume for the keyword.

Most recent version data files may be stored over periods of time and or for many points in time. Processor may also compare most recent version data files to determine differences and store the differences. In this way data relating to entity may be stored in a compressed manner. Moreover memory may create a snapshot of portions of the Internet at particular periods in time. For example if processor creates a snapshot every 5 days the most recent version data file with the newest time stamp will generally be less than 5 days old. Powerful reports may be generated based on most recent version data stored in memory or based on differences between stored most recent version data. For example processor may generate a report indicating how an entity such as a URL or a related web page has changed over time. Prior art techniques might require a processor to sift through a large database of collection logs and attempt to associate data relating to features of an entity.

Memory may store a snapshot of portions of the Internet periodically. In this way data relating to an entity may be stored and later reviewed. Not all data received by collector processors need to be constantly stored which would result in massive amounts of stored data. Memory effectively stores raw data relating to features of entity . This means that even years later raw data relating to features of entity can be analyzed and searched. For example a URL can be reviewed after it was collected and new features of the URL whose importance today may not be appreciated may be extracted and analyzed.

Referring to there is shown a process which could be performed in accordance with an embodiment of the invention. The process could be performed using for example system discussed above. As shown at step S a first processor may receive and store first data relating to a first feature of a data entity in a first memory in association with a time stamp. At step S a second processor may receive and store second data relating to a second feature of a data entity in a second memory in association with a time stamp.

At step S a third processor may store the first and second data in a first file in a third memory with respective time stamps. For example the third processor may use time stamps relating to when the first and second data were stored in the first file. At step S the first processor may receive and store third data relating to the first feature of the data entity in the first memory in association with a time stamp. At step S the second processor may receive and store fourth data relating to the second feature of the data entity in the second memory in association with a time stamp.

At step S the third processor may compare time stamps associated with data relating to the first feature in the first file and in the first memory to determine the most recent time stamp. The third processor may store the data relating to the first feature with the most recent time stamp in a second file. At step S the third processor may compare time stamps associated with data relating to the second feature in the first file and in the second memory to determine the most recent time stamp. The third processor may store the data relating to the second feature associated with the most recent time stamp in a second file in association with the data relating to the first feature. At step S the third processor may generate a report relating to an entity based on the first file and the second file and or differences between the first file and the second file.

While various aspects and embodiments have been disclosed herein other aspects and embodiments will be apparent to those skilled in the art. The various aspects and embodiments disclosed herein are for purposes of illustration and are not intended to be limiting with the true scope and spirit being indicated by the following claims.

