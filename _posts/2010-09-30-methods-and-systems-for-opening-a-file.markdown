---

title: Methods and systems for opening a file
abstract: Methods, systems, and machine readable tangible storage media that can provide for smooth and seamless opening of a file from, for example, a preview are described. A preview of a file can be generated by a non-native viewer or reader application and in response to a command to open a file in a native application, the preview can continue to be displayed while the native application launches such that a user will perceive no interruption in display of the content. The non-native application can pass a display state (e.g. a page number or scroll position) to the native application such that the native application continues to show a user's current position or view port into the file.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08817053&OS=08817053&RS=08817053
owner: Apple Inc.
number: 08817053
owner_city: Cupertino
owner_country: US
publication_date: 20100930
---
At least certain data processing systems currently allow a user on the one hand to open a file to edit or create the file such as a word processing document in a native application and on the other hand to view the file in a non native viewer application which cannot normally create or edit the file. The application which created the file can be considered or referred to as a native application. show an example of a data processing system such as a computer or other consumer electronic device which can either open a file such as a word processing file or an image file etc. or provide a preview of the file without requiring the launching of the application which created the file or which can edit the file. The Quick Look feature of the Macintosh operating system from Apple Inc. of Cupertino Calif. is an example of a non native application that can provide a preview of a file. shows an example of a user interface which can be displayed on a display screen of the data processing system. The user interface can include at least one menu bar which can include a program menu search request icon and other menus to allow a user to select various options or commands from the user interface. A desktop can be similar to desktops on modern computer systems such as those provided by the operating systems known as Mac OS X or Microsoft Windows 7 etc. The desktop can include storage icon and one or more icons for user files such as icons and . The user can cause the system to store the icons so that they can be seen on the desktop or can store the files within folders which can be viewed in one or more windows in one embodiment such as the window which in one embodiment can be a window provided by the Finder program from Apple Inc. of Cupertino Calif. The Finder program is a user interface program for a file management system on the Mac OS X operating system.

In this prior art system a user can select a file such as the file on the desktop or a file within a window and then cause the system to display a preview of the file without launching the native application which created or can edit the file. For example the user can select an icon on the desktop or an icon or name within a window and then press the space bar key or select a preview command from a pop up menu to cause the presentation of the preview of the file in a preview panel which includes the content of the file within the preview panel . The preview panel can include a resize icon allowing the user to resize the preview panel which can behave somewhat like a window and the preview panel can include a close icon which allows a user to close the window by selecting close icon . Further preview panel can include a preview top bar A which can allow a user to control the position or movement of preview panel by selecting the preview top bar and by indicating a movement of the preview top bar e.g. with a cursor or a touch interface etc. . The use of the preview panel may be faster than launching the application to view the file so a user may desire to use the preview function before deciding to launch the application to see the file within a native application which can create or edit the file. If the user wants to launch the native application then the user can enter a command such as a double click action within the preview panel or some other gesture to indicate to the system that the native application is to be launched. The result of launching the native application is shown in .

The process of launching the native application and loading or opening the file includes removing the preview panel from the display screen and then displaying any splash screen of the native application and then loading user interface elements such as menu bar and other user interface features and then showing the content of the file within application window which is a window controlled by the Text Edit program as shown by program menu in the menu bar . The process of opening the file in the prior art can be distracting to a user because the content of the file originally displayed within preview panel is removed from the display in response to a command to open the file and then user interface elements of the launch program begin to appear and at some point in time the content of the file reappears with all of the user interface elements of the launched application surrounding the content. Thus the user s focus is taken away from the content while the application launches itself and loads or opens the file. In some instances it can take several seconds for the launch process to occur and this time diverts the user s attention from the content of the file to other images.

This application relates to one or more methods and systems for opening a file and in particular in one embodiment for opening a file after presenting the file in a preview or reader mode. According to one embodiment a method can include receiving a command to display a preview of a file and displaying the preview in response to the command in a non native application and after the preview is displayed receiving a command while displaying or otherwise presenting the preview to open the file in a native application. After receiving the command to open the file the preview of the content of the file continues to be presented. The preview of the file which is displayed after receiving the command to open the file is displayed while processing the command to open the file and before loading of the application is completed. The displaying of the preview in this manner can occur without user perceptible interruption such that the opening of the file is seamless to the user in the sense that the user is presented with the content of the file without user perceptible interruption. In one embodiment the initial preview provided by the non native application can be a first preview and the preview presented after receiving the command to open the file can be a second preview which is an enlarged version of the first preview or a version of the content generated by the native application such as a snapshot of the content saved when the file was last closed. The method can also include suppressing a splash screen which would otherwise cover the representation of the content or second preview of the content and the method can also include passing a display state of the preview from the non native application to the native application wherein the display state can indicate a viewing position on the content of the file. In one embodiment the display state can also indicate a size of the preview panel or window and the native application can use this size to determine the size of its window to display the content of the file. For example the display state can specify that the preview was displayed in full screen mode and the native application can automatically and directly open a window to display the content of the file in full screen mode so that this window occupies the full screen of the display . In another example the display state can specify the size and position of the preview window or panel and the native application can optionally use the size and position information to open its window in the same size and position or use the size and position as a hint to open its window with a similar but not same size and position . The non native application can be configured to display content of a plurality of different file types including picture files text files movie files spreadsheet files PowerPoint slide files but the non native application cannot normally edit or create content of the plurality of file types.

In another embodiment a method of the present invention can include displaying in a user interface of a file management system such as the Finder program from Apple Inc. or Windows Explorer from Microsoft at least one of an icon and a name of a file and receiving from the user interface a command to open the file in a native application and displaying in response to the command the content of the file by a non native application in a first border or no border while the native application is being launched to open the file. The content can be displayed by the non native application before user interface elements of the native application are displayed and the border or no border can be replaced by a user interface of a window of the native application after the native application has been launched. The border provided by the non native application in one embodiment will not include scroll controls. In one embodiment the displaying of the content of the file occurs while processing of the command to open the file and hence the display of the content by both the non native application and the native application occurs over time seamlessly from a user s perspective because there is no interruption of the presentation of the content of the file after the preview of the content by the non native application has been presented by the non native application.

In another embodiment a method according to the present invention can include displaying a file in a preview mode by a non native application wherein the file is displayed in a display state which represents or indicates a viewable portion of the file in the preview mode. The method can further include receiving a command to open the file in a native application and passing the display state in the preview mode from the non native application to the native application and displaying the file in the native application based on the display state which can indicate a viewable portion of the file in the preview mode. For example if the user was looking at page 2 of the file in the preview mode through the non native application the native application after opening the file will display the file at page 2 rather than page 1 in one embodiment. The display state can include at least one of a page number a scroll position or a movie frame number or movie time or other parameters or indicators of a viewable portion of the file and can also include the preview s size size of window or panel of the preview and position. The passing of the display state can occur in response to the command to open the file. In one embodiment the file is displayed in the preview mode in response to a first input and the command to open the file is invoked by a second input which is different than the first input. In one embodiment the content of the file cannot be created or edited by the non native application and in one embodiment the non native application can be a user interface program for a file management system such as the Finder or Windows Explorer from Microsoft.

Systems methods and machine readable tangible storage medium such as DRAM flash hard disk drives or other magnetic media etc. can provide for seamless and smooth opening of a file as described further herein.

The above summary does not include an exhaustive list of all aspects of the present invention. It is contemplated that the invention includes all systems and methods that can be practiced from all suitable combinations of the various aspects summarized above and also those disclosed in the Detailed Description below.

Various embodiments and aspects of the inventions will be described with reference to details discussed below and the accompanying drawings will illustrate the various embodiments. The following description and drawings are illustrative of the invention and are not to be construed as limiting the invention. Numerous specific details are described to provide a thorough understanding of various embodiments of the present invention. However in certain instances well known or conventional details are not described in order to provide a concise discussion of embodiments of the present inventions.

Reference in the specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in conjunction with the embodiment can be included in at least one embodiment of the invention. The appearances of the phrase in one embodiment in various places in the specification do not necessarily all refer to the same embodiment. The processes depicted in the figures that follow are performed by processing logic that comprises hardware e.g. circuitry dedicated logic etc. software or a combination of both. Although the processes are described below in terms of some sequential operations it should be appreciated that some of the operations described may be performed in a different order. Moreover some operations may be performed in parallel rather than sequentially.

The present description includes material protected by copyrights such as illustrations of graphical user interface images. The owners of the copyrights including the assignee of the present invention hereby reserve their rights including copyright in these materials. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office file or records but otherwise reserves all copyrights whatsoever. Copyright Apple Inc. 2010.

At least certain embodiments of the present invention can provide methods systems and machine readable tangible storage media that can provide for smooth and seamless opening of a file from for example a preview or from a user interface program for a file management system such as the Finder program from Apple Inc. of Cupertino Calif. A preview of a file can be generated by a non native viewer or reader application and in response to a command to open the file in a native application the preview can continue to be displayed while the native application launches such that the user will perceive no interruption after the command to open the file in display of the content in one embodiment. The non native application can pass a display state such as a page number or scroll position to the native application such that the native application continues to show a user s current position or view port in the preview mode into the file and in some embodiments the non native application can also pass the preview panel s size and screen position to the native application as described above. B and C show various aspects of one or more embodiments of the present invention.

The method shown in can begin in operation in which a command is received to display a preview of a file. In one embodiment a user may select a file from a desktop or a folder or a window in a file management system using a cursor and a mouse or using a touch input device such as a direct input touch screen using either a stylus or the user s finger to select the file. The selection can also include the command with a gesture in a touch interface or a further operation can be used such as for example pressing a button e.g. the space bar button on a keyboard or selecting a preview command from a pop up menu or a pull down menu or other menus or tool palettes. The method can continue in operation in which a first preview is displayed or otherwise presented in response to the command. In one embodiment the preview is presented by a non native application which presents the preview. The non native application can be configured as a viewer or reader which can only present or display the content but cannot edit or create the content. A software architecture to use such a viewer or reader is described in conjunction with below. In another embodiment the preview could be created by a native application which can create or edit the content in this embodiment in which the native application presents the preview the native application may do so without presenting any of the user interface of the native application such as menus in a menu bar tool palettes and other controls normally provided in the user interface of the native application and may do so by capturing a snapshot of the window at the last close of the window containing the content of the file.

The method can continue in operation in which a command is received while displaying or otherwise presenting the first preview to open the file in a native application. For example if the native application is a .doc file which is a Microsoft Word file then Microsoft Word will be launched in order to open the file. A user may activate the command by double clicking within the preview panel or window or by double clicking on the icon of the file or the file name of the file or by other methods known in the art to generate a command to open a file. Then in operation the method will continue to display a preview of the file while the file is being opened in the native application. This is unlike the prior art in which the preview is removed or closed from the display in response to the open command while the native application is being launched and the file is being opened. The preview which is generated in operation can in one embodiment be an enlarged version of the initial preview and may be moved on the display screen relative to the initial preview. Several examples are provided further below in connection with .

Continuing with operation displays the complete user interface of the native application after the native application has completed its launch process and the content of the file is now displayed within a window of the native application. In one embodiment the displaying of the initial preview or first preview and the displaying of the preview such as the second preview during the launching of the native application and the opening of the file within the native application can occur seamlessly such that there is no substantial interruption from the user s perspective. For example in one embodiment there may be no substantial user perceptible interruption in the display of the content of the file although more of the content may be shown when the window is enlarged and the content may be moved on the display during the launch process such as the process of operation in . The method can also include suppressing a splash screen which would otherwise cover the representation of the content such as the first or the second preview. The method can also include passing a display state of the first preview from the non native application to the native application wherein the display state can indicate a view port or viewing position on the content of the file such as a page number a scroll position a zoom value a movie frame number or movie time etc. and can also optionally indicate a window panel size or position for the preview as described above. In one embodiment the first preview can have a first border or no border that is replaced by a window frame of the normal user interface of the native application.

In one embodiment a non native application such as the preview generator shown in can be configured to present a preview of each of these various different types of files without invoking or launching the native application which is capable of creating or modifying the corresponding file. Typically the non native application will not be able to create or modify the file but can present the file for viewing and hence the preview generator can be considered to be a reader or viewer application to present the content of the file in a preview mode.

In the example shown in the user has selected the file represented by the icon by positioning the cursor over the icon and has caused the selection of the file and has further provided a command to the system to present a preview of the content of the file. The result of processing that command is shown in in which preview window or panel is displayed and shows the content of the file represented by icon . The preview window includes a preview top bar and scroll controls allowing a user to scroll up and down to see the entire content of the file. Preview top bar can be selected by a user and caused to be moved thereby moving preview window over the desktop . Preview window also includes a close icon which the user can select to close the preview window to cause it to disappear from the desktop . Content includes a lower portion A which cannot be fully seen in but can be seen in as will be explained further below. It will be understood that the user could have selected another file rather than the file associated with icon for example the user could have selected any one of the files shown in window or other files in other windows or could have opened up storage icon and searched or browsed through files contained within the storage represented by storage icon etc. It will be appreciated that the preview shown in can be considered to be the first preview provided in operation of .

The user can after displaying the preview as shown in decide to open the file in a native application which can edit or create that particular type of file. For example the user can double click within content to cause the command to open the file or the user can double click on icon or it can provide a key press or a plurality of key presses through a keyboard or it can use a touch input such as one or more gestures with a user s finger in order to cause the file to be opened. The result of the beginning of the process of opening the file is shown in . At this point the native application has not been fully launched and hence the menu bar for the native application is not present and other user interface features and components of the native application are also not present. Unlike the prior art the preview of the content remains during the launching process that is it remains presented on desktop and in the embodiment shown in it is enlarged relative to preview window but both windows and window are centered about the same location. Because the content of the file remains displayed after receiving the open command and is displayed during the opening process and launching process for the native application the viewer or user is not distracted by an interruption of the display of the content of the file which would occur in the prior art. If the user interface shown in includes a dock which is a known feature of the Macintosh operating system then the user would be able to see that the native application is in the process of being launched while the content of the file is being displayed as shown in .

Window can have no border as is shown in although in other embodiments it can have a border such as a thin frame surrounding the display of the content of the file. It will be understood that if the content fills preview window then the window can be of the same size as window . In one embodiment the display of the content occurs during the entire process of opening the file and launching the application beginning with the open command and ending with the completion of the launch process for the native application. shows the result of the completion of the launch of the native application NativeApp . At this point in time the file has been opened within the native application and is being presented along with the user interface of the native application. From the user s perspective the user has observed the file in the preview mode and then caused the file to be opened and during the process for opening of the file and launching the native application the content of the file has been continuously displayed in one embodiment to the user and it appears as if the user interface is wrapped around the content during the process of launching the application. In one embodiment there is no substantial interruption in the display or presentation of the content between the time at which the user invokes the open command and the time at which the native application completes its launch process. At the end of the launch process the native application s user interface is now displayed including menu bar which includes one or more menu options such as menu option Format to select format commands and program menu NativeApp to select commands for the program and tool bar and tool panel . In addition window is surrounded by scroll controls such as vertical scroll controls and horizontal scroll controls . Content is still displayed within window as it was during the launch process when the second preview was shown as in and operation of . Window now includes window controls which can be conventional controls to allow a user to close a window minimize a window or expand a window etc. Window can also now include a resize icon which can be a conventional resize control on windows as is known in the art.

The sequence of B E and F represent another embodiment in which the first preview such as the first preview referred to in operation is transformed into an enlarged and moved preview which can be a second preview as in operation of . In this embodiment the user can begin as shown in and select a file as shown in and invoke a preview command to cause the display of the preview of the content of the file without invoking the native application to present the file. Then the user can enter a command to launch the application and open the file within the application and during the launch process the second preview is displayed as shown in in this case the second preview is enlarged and moved relative to the first preview shown in and this second preview is displayed while the native application is being launched. Again it will appear to the user in one embodiment as if the content is always presented or displayed but perhaps moved from the beginning of the open command until the native application has completed its launch process and has opened the file. The result of opening the file and completing the launch process is shown in . After the completion of the launch process for a NativeApp the user interface for the NativeApp appears wrapped around window A.

An example of the method of will now be provided in conjunction with C and D. Operation displays at least one of an icon or a name of a file in a user interface and it can be seen that three icons for three files are displayed on desktop and names or icons of files are displayed in window . The user can select one of those files to cause the file to be opened in a native application as in operation and this will result in operation in the activation of a non native application such as the preview generator shown in to cause the presentation of window as shown in while the native application is launching. Hence the content of the file is presented as soon as possible after launch in one embodiment by the preview generator and before the native application completes its launch process as shown in . In one embodiment there can be no substantial interruption in the presentation of the content during the launch process. The window may have no border or a border which is replaced by the border and other user interface features of the native application as shown in and as shown by the transition from .

Each of B C and D represent one stage of a user interface on a display screen . In a user has selected a file such as the file represented by icon and has requested that the system provide a preview of the content of the file which is shown within window as content . Content shows page 1 of the content of the file. Vertical scroll controls allow a user to change the viewing position or display state of the preview by scrolling either up or down. In some embodiments the scrolling may be merely up and down as in the case of or up and down and also horizontally or just horizontally depending upon the environment and the content of the file. The scroll controls allow a user in the embodiment shown in to change the vertical viewing position of the file which the user has done in this case by positioning cursor over the down arrow in window causing page 2 of content to be revealed as shown in . The presentation of the preview shown in may be through a non native application which cannot in one embodiment edit or create the file being presented and can be created through the preview generator described in connection with . While viewing the user interface shown in the user can then invoke a command to open the file associated with icon . In one embodiment the user can move cursor into content within the window and press a mouse s button twice a so called double click action or can double click on the icon or can press one or more keys on a keyboard or can input one or more touch gestures on a touch screen etc. in order to cause the file to be opened. Once the command is received the system responds by displaying window as shown in . Note that in this embodiment the border has been removed and the preview top bar has been removed and the scroll controls have been removed while the native application is in the process of launching and opening the file associated with icon . In this embodiment the content is presented substantially uninterrupted during the launch process from the beginning of the launch process to the end of the launch process of the native application NativeAppX. In this embodiment there is a seamless presentation from the preview mode to the end of the launching process of the content of the file and the presentation of the content appears substantially uninterrupted from the user s perspective.

The resulting user interface after the completion of the launching is shown in and from the user s perspective the user interface of NativeAppX appears to have wrapped around window while it was being presented. For example vertical scroll controls and horizontal scroll controls and tool panel and tool bar and window controls along with the title bar of window which is title bar appear to have been applied or wrapped around content during the launch process while content was in one embodiment continuously displayed without interruption during the launch process from the very beginning of the launch process. Unlike the prior art which showed the beginning of the file at page 1 of the file shows that at the end of the launch process the file is presented at the position last previewed by the user as shown in . In other words the display state in the preview mode was passed to the native application. In one embodiment the passing of the display state may be from the non native application to the native application. The passing of the display state can include passing a page number or a scroll position or a zoom value or a movie frame number or movie time or a combination of any one of these values. The passing of the display state can occur through an API. For example the opening application in this case NativeAppX can place a call to the system or the preview generator requesting a display state from the preview generator which can return display state values such as page numbers scroll positions preview window size or position etc. to the native application during the launch process.

In one embodiment when a file is closed it can seamlessly transition from the opened state back to the location from which it was opened. If the location is visible e.g. the location is an icon on the desktop the file can be closed by a zooming animation which shrinks from the window showing the opened file in a native application to the icon on the desktop. If the location is not visible e.g. the location is within a folder that is closed then the file can be closed by a zooming animation which shrinks from the window showing the opened file in a native application to an icon representing the file which is located near the center point of the window and then the icon can disappear from view. In this embodiment the file can appear to close to its origination point which can give the appearance of a seamless closing to match in reverse the seamless opening described herein. A system in one embodiment can implement either seamless closing or seamless opening or both.

Some embodiments include one or more application programming interfaces APIs in an environment with calling program code interacting with other program code being called through the one or more interfaces. Various function calls messages or other types of invocations which further may include various kinds of parameters can be transferred via the APIs between the calling program and the code being called. In addition an API may provide the calling program code the ability to use data types or classes defined in the API and implemented in the called program code.

At least certain embodiments include an environment with a calling software component interacting with a called software component through an API. A method for operating through an API in this environment includes transferring one or more function calls messages other types of invocations or parameters via the API.

One or more Application Programming Interfaces APIs may be used in some embodiments. An API is an interface implemented by a program code component or hardware component hereinafter API implementing component that allows a different program code component or hardware component hereinafter API calling component to access and use one or more functions methods procedures data structures classes and or other services provided by the API implementing component. An API can define one or more parameters that are passed between the API calling component and the API implementing component.

An API allows a developer of an API calling component which may be a third party developer to leverage specified features provided by an API implementing component. There may be one API calling component or there may be more than one such component. An API can be a source code interface that a computer system or program library provides in order to support requests for services from an application. An operating system OS can have multiple APIs to allow applications running on the OS to call one or more of those APIs and a service such as a program library can have multiple APIs to allow an application that uses the service to call one or more of those APIs. An API can be specified in terms of a programming language that can be interpreted or compiled when an application is built.

In some embodiments the API implementing component may provide more than one API each providing a different view of or with different aspects that access different aspects of the functionality implemented by the API implementing component. For example one API of an API implementing component can provide a first set of functions and can be exposed to third party developers and another API of the API implementing component can be hidden not exposed and provide a subset of the first set of functions and also provide another set of functions such as testing or debugging functions which are not in the first set of functions. In other embodiments the API implementing component may itself call one or more other components via an underlying API and thus be both an API calling component and an API implementing component.

An API defines the language and parameters that API calling components use when accessing and using specified features of the API implementing component. For example an API calling component accesses the specified features of the API implementing component through one or more API calls or invocations embodied for example by function or method calls exposed by the API and passes data and control information using parameters via the API calls or invocations. The API implementing component may return a value through the API in response to an API call from an API calling component. While the API defines the syntax and result of an API call e.g. how to invoke the API call and what the API call does the API may not reveal how the API call accomplishes the function specified by the API call. Various API calls are transferred via the one or more application programming interfaces between the calling API calling component and an API implementing component. Transferring the API calls may include issuing initiating invoking calling receiving returning or responding to the function calls or messages in other words transferring can describe actions by either of the API calling component or the API implementing component. The function calls or other invocations of the API may send or receive one or more parameters through a parameter list or other structure. A parameter can be a constant key data structure object object class variable data type pointer array list or a pointer to a function or method or another way to reference a data or other item to be passed via the API.

Furthermore data types or classes may be provided by the API and implemented by the API implementing component. Thus the API calling component may declare variables use pointers to use or instantiate constant values of such types or classes by using definitions provided in the API.

Generally an API can be used to access a service or data provided by the API implementing component or to initiate performance of an operation or computation provided by the API implementing component. By way of example the API implementing component and the API calling component may each be any one of an operating system a library a device driver an API an application program or other module it should be understood that the API implementing component and the API calling component may be the same or different type of module from each other . API implementing components may in some cases be embodied at least in part in firmware microcode or other hardware logic. In some embodiments an API may allow a client program to use the services provided by a Software Development Kit SDK library. In other embodiments an application or other client program may use an API provided by an Application Framework. In these embodiments the application or client program may incorporate calls to functions or methods provided by the SDK and provided by the API or use data types or objects defined in the SDK and provided by the API. An Application Framework may in these embodiments provide a main event loop for a program that responds to various events defined by the Framework. The API allows the application to specify the events and the responses to the events using the Application Framework. In some implementations an API call can report to an application the capabilities or state of a hardware device including those related to aspects such as input capabilities and state output capabilities and state processing capability power state storage capacity and state communications capability etc. and the API may be implemented in part by firmware microcode or other low level logic that executes in part on the hardware component.

The API calling component may be a local component i.e. on the same data processing system as the API implementing component or a remote component i.e. on a different data processing system from the API implementing component that communicates with the API implementing component through the API over a network. It should be understood that an API implementing component may also act as an API calling component i.e. it may make API calls to an API exposed by a different API implementing component and an API calling component may also act as an API implementing component by implementing an API that is exposed to a different API calling component.

The API may allow multiple API calling components written in different programming languages to communicate with the API implementing component thus the API may include features for translating calls and returns between the API implementing component and the API calling component however the API may be implemented in terms of a specific programming language. An API calling component can in one embedment call APIs from different providers such as a set of APIs from an OS provider and another set of APIs from a plug in provider and another set of APIs from another provider e.g. the provider of a software library or creator of the another set of APIs.

It will be appreciated that the API implementing component may include additional functions methods classes data structures and or other features that are not specified through the API and are not available to the API calling component . It should be understood that the API calling component may be on the same system as the API implementing component or may be located remotely and accesses the API implementing component using the API over a network. While illustrates a single API calling component interacting with the API it should be understood that other API calling components which may be written in different languages or the same language than the API calling component may use the API .

The API implementing component the API and the API calling component may be stored in a tangible machine readable storage medium which includes any mechanism for storing information in a form readable by a machine e.g. a computer or other data processing system . For example a tangible machine readable storage medium includes magnetic disks optical disks random access memory e.g. DRAM read only memory flash memory devices etc.

In Software Stack an exemplary embodiment applications can make calls to Services A or B using several Service APIs and to Operating System OS using several OS APIs. Services A and B can make calls to OS using several OS APIs.

Note that the Service has two APIs one of which Service API receives calls from and returns values to Application and the other Service API receives calls from and returns values to Application . Service which can be for example a software library makes calls to and receives returned values from OS API and Service which can be for example a software library makes calls to and receives returned values from both OS API and OS API . Application makes calls to and receives returned values from OS API .

Any one of the methods described herein can be implemented on a variety of different data processing devices including general purpose computer systems special purpose computer systems etc. For example the data processing systems which may use any one of the methods described herein may include a desktop computer or a laptop computer or a tablet computer or a smart phone or a cellular telephone or a personal digital assistant PDA an embedded electronic device or a consumer electronic device. shows one example of a typical data processing system which may be used with the present invention. Note that while illustrates the various components of a data processing system such as a computer system it is not intended to represent any particular architecture or manner of interconnecting the components as such details are not germane to the present invention. It will also be appreciated that other types of data processing systems which have fewer components than shown or more components than shown in may also be used with the present invention. The data processing system of may be a Macintosh computer from Apple Inc. of Cupertino Calif. As shown in the data processing system includes one or more buses which serve to interconnect the various components of the system. One or more processors are coupled to the one or more buses as is known in the art. Memory may be DRAM or non volatile RAM or may be flash memory or other types of memory. This memory is coupled to the one or more buses using techniques known in the art. The data processing system can also include non volatile memory which may be a hard disk drive or a flash memory or a magnetic optical drive or magnetic memory or an optical drive or other types of memory systems which maintain data even after power is removed from the system. The non volatile memory and the memory are both coupled to the one or more buses using known interfaces and connection techniques. A display controller is coupled to the one or more buses in order to receive display data to be displayed on a display device which can display any one of the user interface features or embodiments described herein. The display device can include an integrated touch input to provide a touch screen. The data processing system can also include one or more input output I O controllers which provide interfaces for one or more I O devices such as one or more mice touch screens touch pads joysticks and other input devices including those known in the art and output devices e.g. speakers . The input output devices are coupled through one or more I O controllers as is known in the art. While shows that the non volatile memory and the memory are coupled to the one or more buses directly rather than through a network interface it will be appreciated that the data processing system may utilize a non volatile memory which is remote from the system such as a network storage device which is coupled to the data processing system through a network interface such as a modem or Ethernet interface or wireless interface such as a wireless WiFi transceiver or a wireless cellular telephone transceiver or a combination of such transceivers. As is known in the art the one or more buses may include one or more bridges or controllers or adapters to interconnect between various buses. In one embodiment the I O controller includes a USB adapter for controlling USB peripherals and can control an Ethernet port or a wireless transceiver or combination of wireless transceivers. It will be apparent from this description that aspects of the present invention may be embodied at least in part in software. That is the techniques and methods described herein may be carried out in a data processing system in response to its processor executing a sequence of instructions contained in a memory such as the memory or the non volatile memory or a combination of such memories and each of these memories is a form of a machine readable tangible storage medium. In various embodiments hardwired circuitry may be used in combination with software instructions to implement the present invention. Thus the techniques are not limited to any specific combination of hardware circuitry and software nor to any particular source for the instructions executed by the data processing system.

In the foregoing specification the invention has been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of the invention as set forth in the following claims. The specification and drawings are accordingly to be regarded in an illustrative sense rather than a restrictive sense.

