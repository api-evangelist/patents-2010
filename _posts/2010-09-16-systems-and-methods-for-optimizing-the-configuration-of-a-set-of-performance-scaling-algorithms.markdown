---

title: Systems and methods for optimizing the configuration of a set of performance scaling algorithms
abstract: Systems and methods for optimizing performance scaling algorithms designated for operation on a mobile device are disclosed. A system memory includes program, use case, and results stores in addition to test logic. The program store contains a set of programs defined by the combination of a performance scaling algorithm and a set of parameters. The use case store contains information that identifies expected tasks to be performed by end users of the mobile device over time. The results store organizes a respective merit value determined after each of the set of programs has been executed for tasks defined by each use case. When executed, the test logic adjusts the mobile device and associates a select program for each of the use cases in response to the stored merit values. The merit values are determined as a function of a performance metric and a power metric.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08320898&OS=08320898&RS=08320898
owner: QUALCOMM Incorporated
number: 08320898
owner_city: San Diego
owner_country: US
publication_date: 20100916
---
Technological advances in wireless communication protocols energy storage density processor performance and efficiency and an increase in the density of cellular transmitters enabled the introduction of wireless digital networks in the 1990s. As use of second generation mobile devices became more widespread it became clear that the demand for data services which include access to the Internet was growing. The introduction of packet switching rather than circuit switching for data transmission with third generation wireless communication systems enabled the increases in data transmission rates required to deliver streaming media to a mobile device.

Today s data network capable mobile devices include high performance processors to provide a plethora of applications to the end user. However the demand for performance results in a corresponding increase in power consumption. The power dissipation in modern processors is rapidly increasing as both clock frequency and the number of transistors required for a given implementation increase. Unfortunately battery technology has not kept pace with the energy requirements of these data network capable wireless devices which leads to a design trade off between application performance and battery life. Even when it is determined that battery life can be sacrificed for full performance heat management may become problematic for both the battery and the electronic circuits within the often hand sized housings.

The demand for processors that provide high performance and low power consumption has led to the use of dynamic voltage and frequency scaling DVFS in processor designs. DVFS enables trade offs between power consumption and performance. Processors designed to take advantage of DVFS allow the clock frequency of the processor to be adjusted with a corresponding adjustment in voltage. Reducing clock frequency alone is not useful since any power savings is offset by an increase in execution time resulting in no net reduction in the total energy consumed. However a reduction in operating voltage results in a proportional savings in power consumed.

The central issue for DVFS enabled processors is how to control the balance between performance and power savings. A conventional DVFS control algorithm uses a measure of idle time to identify a modified performance level that permits a projected workload to be stretched in time to a deadline. That is idle time is reduced by operating the processor at a lower voltage and slower clock frequency. While this approach may be appropriate for a continuous and known workload many mobile device applications are interactive and or place irregular or unpredictable demands on the processor. Thus it is apparent that no one algorithm is optimal for all mobile device applications application combinations and uses.

A method for optimizing the configuration of a set of performance scaling algorithms operative on a mobile device includes the steps of defining a set of performance scaling algorithms suitable for execution on the mobile device identifying a set of parameters appropriate for each of the respective members of the set of performance scaling algorithms associating the set of parameters with the respective member of the set of performance scaling algorithms to define a set of programs identifying a first use case responsive to a set of tasks to be performed on the mobile device applying the set of programs to the first use case to generate a merit value as a function of a performance metric and a power metric and identifying a maximum merit value for the first use case.

In an alternative embodiment of the method for optimizing the configuration of a set of performance scaling algorithms the method further includes the step of selecting a first program from the set of programs to execute for the use case as a function of the maximum merit value.

In some example embodiments the method for optimizing the configuration of a set of performance scaling algorithms is implemented on one of a cellular telephone a pager a personal digital assistant a reader a satellite phone a navigation device or a computing device with a wireless connection.

In an alternative embodiment of the method for optimizing the configuration of a set of performance scaling algorithms the method further includes the steps of identifying a subsequent use case different from the first use case and repeating the steps of applying the set of programs and identifying the maximum merit value for the respective use cases.

In still another alternative embodiment of the immediately preceding method for optimizing the configuration of a set of performance scaling algorithms the method further includes the steps of storing an indication of a member of the set of programs responsible for the maximum merit value for each use case to generate a performance scaling schedule and storing the performance scaling schedule on the mobile device.

In another alternative embodiment of the immediately preceding method for optimizing the configuration of a set of performance scaling algorithms the method further includes the steps of detecting when a particular use case is active on the mobile device and selectively applying a combination of a performance scaling algorithm and a set of parameters on the mobile device.

According to another aspect a system for identifying an optimal configuration for a set of performance scaling algorithms designated for execution on a mobile device is disclosed. The system includes a processor communicatively coupled to a non volatile memory. The non volatile memory has stored therein a program store containing a set of programs defined by a respective combination of a performance scaling algorithm and a set of parameters a use case store containing a set of use cases responsive to a set of tasks to be performed on the mobile device and a results store containing a respective merit value generated after applying each member of the set of programs on the mobile device for each of the members of the set of use cases.

In an example embodiment of the system for identifying an optimal configuration for a set of performance scaling algorithms designated for execution on a mobile device the set of use cases stored in the use case store are defined by a seller of the mobile device.

In an alternative embodiment of the system for identifying an optimal configuration for a set of performance scaling algorithms designated for execution on a mobile device the merit value is a function of a performance metric and a power metric.

In still another alternative embodiment of the system for identifying an optimal configuration for a set of performance scaling algorithms designated for execution on a mobile device the system further includes logic configured to associate a select member of the set of programs for the set of use cases in the use case store.

Moreover a system that identifies an optimal configuration for a set of performance scaling algorithms operative on a mobile device includes mechanisms for storing a set of programs defined by a respective combination of a performance scaling algorithm and a set of parameters mechanisms for controlling operation of the mobile device the mechanisms applying a set of use cases including a set of tasks to be performed on the mobile device mechanisms for determining a performance metric and a power metric responsive to operation of the set of programs over the set of use cases mechanisms for generating a merit value as a function of the performance metric and the power metric mechanisms for identifying and associating a select program with a respective use case to generate a performance scaling schedule and mechanisms for communicating the performance scaling schedule to the mobile device.

In an example embodiment the system that identifies an optimal configuration for a set of performance scaling algorithms operative on a mobile device includes a set of use cases that identify anticipated tasks to be performed on the mobile device as a percentage of time.

In another embodiment the system that identifies an optimal configuration for a set of performance scaling algorithms operative on a mobile device includes a merit value that is generated as the product of the performance metric and the power metric.

In still another aspect a computer program product is disclosed that includes a computer usable medium having a computer readable program code embodied therein. The computer readable program code adapted to execute and to implement a method for optimizing the configuration of a set of performance scaling algorithms operative on a mobile device. The computer program product includes logic configured to define a set of performance scaling algorithms suitable for execution on the mobile device logic configured to identify a set of parameters appropriate for each of the respective members of the set of performance scaling algorithms logic configured to adjust a mobile device under test to operate using a select combination of a performance scaling algorithm and a select set of parameters the logic configured to further adjust the mobile device under test in accordance with a use case logic configured to determine a performance metric and a power metric responsive to operation of the mobile device under test logic configured to generate a merit value as a function of the performance metric and the power metric logic configured to identify and associate a respective combination of a performance scaling algorithm and a respective set of parameters responsible for generating a maximum merit value to generate a point on a performance scaling schedule and logic configured to communicate the performance scaling schedule to the mobile device.

In an alternative embodiment the computer program product adapted to execute and to implement a method for optimizing the configuration of a set of performance scaling algorithms operative on a mobile device further includes logic configured to determine when additional test cases exist the test cases defined by a combination of a respective performance scaling algorithm a respective set of parameters and a respective use case the logic further configured to repetitively adjust the mobile device under test determine the performance metric and the power metric and generate a respective merit value.

In an alternative embodiment the computer program product adapted to execute and to implement a method for optimizing the configuration of a set of performance scaling algorithms operative on a mobile device includes a load balancing algorithm suitable for controlling the execution of multiple processor cores.

In another alternative embodiment the computer program product adapted to execute and to implement a method for optimizing the configuration of a set of performance scaling algorithms operative on a mobile device includes a set of use cases that identify anticipated tasks to be performed on the mobile device as a percentage of time.

In still another alternative embodiment the computer program product adapted to execute and to implement a method for optimizing the configuration of a set of performance scaling algorithms operative on a mobile device includes a merit value that is calculated from the product of the performance metric and the power metric.

In still another aspect a method for optimizing the configuration of a set of performance scaling algorithms operative on a mobile device is disclosed. The method includes the steps of storing a set of performance scaling algorithms suitable for execution on the mobile device associating a set of parameters appropriate for each of the respective members of the set of performance scaling algorithms with the respective member of the set of performance scaling algorithms to define a set of programs identifying a set of use cases responsive to tasks to be performed on the mobile device storing an indication of a member of the set of programs responsible for the maximum merit value for each use case to generate a performance scaling schedule storing the performance scaling schedule on the mobile device detecting when a particular use case is active on the mobile device and selectively applying a combination of performance scaling algorithm and the set of parameters on the mobile device.

In some example embodiments the method for optimizing the configuration of a set of performance scaling algorithms is operative on one of a cellular telephone a pager a personal digital assistant a reader a satellite phone a navigation device or a computing device.

The word exemplary is used herein to mean serving as an example instance or illustration. Any aspect described herein as exemplary is not necessarily to be construed as preferred or advantageous over other aspects.

In this description the term application may also include files having executable content such as object code scripts byte code markup language files and patches. In addition an application referred to herein may also include files that are not executable in nature such as documents that may need to be opened or other data files that need to be accessed.

In this description the term mobile device is used to describe any device operating on a limited capacity power supply such as a battery. Although battery operated mobile devices have been in use for decades technological advances in rechargeable batteries coupled with the advent of third generation 3G wireless technology have enabled numerous mobile devices with multiple capabilities. Therefore a mobile device could be a cellular telephone a satellite telephone a pager a PDA a smartphone a navigation device a smartbook or reader a media player a combination of the aforementioned devices a laptop computer with a wireless connection among others.

The introduction of multiple core processors and dedicated hardware resources for implementing various functions on a mobile device and a continuing desire for improvement in battery life has further complicated the task of dynamically adjusting a mobile device to reduce power consumption while providing an acceptable end user experience. In response an improved mobile device and methods for managing and exposing multiple performance scaling algorithms are disclosed. The number of different mobile devices available the various communication protocols or standards used to communicate with the devices the different types of applications available the different ways that the devices are used etc. make it clear that no single approach or solution can be adjusted or optimized for all possible operational combinations.

In response it is proposed to provide and implement a set of performance scaling algorithms on a mobile device. The availability of the set of performance scaling algorithms provides power saving opportunities while minimizing performance impact when select performance scaling algorithms are correctly applied. It is further proposed to expose the set of performance scaling algorithms to the manufacturers of the various mobile devices. It is believed that the manufacturers will be interested in providing select or optimized performance scaling solutions on mobile devices based on desired performance for various use conditions. These manufacturer select or optimized solutions can be applied at startup. In some situations manufacturers may be willing to expose performance scaling alternatives to their customers via the respective mobile devices. In these situations the manufacturer can provide or modify an application programming interface that would enable an end user to select a desired performance and battery life that can be applied at startup or can provide for a run time selection and replacement of a performance scaling solution in real time. These alternative run time solutions could include a complete disabling of all performance scaling solutions on the mobile device.

The methods for managing and exposing performance scaling algorithms on a mobile device are generally implemented via a combination of software or firmware and hardware. The software and firmware can be stored in a non volatile memory element coupled to one or more processors operable on the mobile device. The software stored in the non volatile memory element is communicated to and executed by a suitable instruction execution system microprocessor . A hardware implementation on a mobile device can include any or a combination of the following technologies which are all well known in the art discrete electronic components a discrete logic circuit s having logic gates for implementing logic functions upon data signals an application specific integrated circuit having appropriate logic gates a programmable gate array s PGA a field programmable gate array FPGA etc.

Referring to this figure is a diagram of an exemplary non limiting aspect of a mobile device in the form of a wireless telephone. As shown the mobile device includes an on chip system that includes a digital signal processor and an analog signal processor that are coupled together. As illustrated in a display controller and a touchscreen controller are coupled to the digital signal processor . A touchscreen display external to the on chip system is coupled to the display controller and the touchscreen controller .

As further illustrated in a stereo audio CODEC may be coupled to the analog signal processor . Moreover an audio amplifier may be coupled to the stereo audio CODEC . In an exemplary aspect a first stereo speaker and a second stereo speaker are coupled to the audio amplifier . shows that a microphone amplifier may be also coupled to the stereo audio CODEC . Additionally a microphone may be coupled to the microphone amplifier . In a particular aspect a frequency modulation FM radio tuner may be coupled to the stereo audio CODEC . Also an FM antenna is coupled to the FM radio tuner . Further stereo headphones may be coupled to the stereo audio CODEC .

In a particular aspect one or more of the method steps described herein may implemented by executable instructions and parameters stored in the memory . These instructions may be executed by the digital signal processor the analog signal processor or another processor to perform the methods described herein. Further the processors the memory the instructions stored therein or a combination thereof may serve as a means for performing one or more of the method steps described herein.

The first core the second core through to the Nth core can be integrated on a single integrated circuit die or they may be integrated or coupled on separate dies in a multiple circuit package. Designers may couple the first core the second core through to the Ncore via one or more shared caches and they may implement message or instruction passing via network topologies such as bus ring mesh and crossbar topologies.

In the illustrated embodiment the RF transceiver is implemented via digital circuit elements and includes at least one processor such as the core processor labeled Core . In this digital implementation the RF transceiver is coupled to the memory via bus .

Each of the bus and the bus may include multiple communication paths via one or more wired or wireless connections as is known in the art. The bus and the bus may have additional elements which are omitted for simplicity such as controllers buffers caches drivers repeaters and receivers to enable communications. Further the bus and the bus may include address control and or data connections to enable appropriate communications among the aforementioned components.

When the logic used by the mobile device is implemented in software as is shown in it should be noted that one or more of startup logic management logic DVFS interface logic applications in application store and portions of the file system may be stored on any computer readable medium for use by or in connection with any computer related system or method.

In the context of this document a computer readable medium is an electronic magnetic optical or other physical device or means that can contain or store a computer program and data for use by or in connection with a computer related system or method. The various logic elements and data stores may be embodied in any computer readable medium for use by or in connection with an instruction execution system apparatus or device such as a computer based system processor containing system or other system that can fetch the instructions from the instruction execution system apparatus or device and execute the instructions. In the context of this document a computer readable medium can be any means that can store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The computer readable medium can be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or propagation medium. More specific examples a non exhaustive list of the computer readable medium would include the following an electrical connection electronic having one or more wires a portable computer diskette magnetic a random access memory RAM electronic a read only memory ROM electronic an erasable programmable read only memory EPROM EEPROM or Flash memory electronic an optical fiber optical and a portable compact disc read only memory CDROM optical . Note that the computer readable medium could even be paper or another suitable medium upon which the program is printed as the program can be electronically captured for instance via optical scanning of the paper or other medium then compiled interpreted or otherwise processed in a suitable manner if necessary and then stored in a computer memory.

In an alternative embodiment where one or more of the startup logic management logic and perhaps the DVFS interface logic are implemented in hardware the various logic may be implemented with any or a combination of the following technologies which are each well known in the art a discrete logic circuit s having logic gates for implementing logic functions upon data signals an application specific integrated circuit ASIC having appropriate combinational logic gates a programmable gate array s PGA a field programmable gate array FPGA etc.

The memory is a non volatile data storage device such as a flash memory or a solid state memory device. Although depicted as a single device the memory may be a distributed memory device with separate data stores coupled to the digital signal processor and or the core or additional processor cores in the RF transceiver .

The startup logic includes one or more executable instructions for selectively identifying loading and executing a select program for managing or controlling the performance of one or more of the available cores such as the first core the second core through to the Ncore . A select program can be found in the program store of the embedded file system and is defined by a specific combination of a performance scaling algorithm and a set of parameters . The select program when executed by one or more of the core processors in the digital signal processor and the core in the RF transceiver may operate in accordance with one or more signals provided by the monitor module to scale the performance of the respective processor core. In this regard the monitor module may provide one or more indicators of events processes applications resource status conditions elapsed time temperature etc.

The management logic includes one or more executable instructions for terminating an operative performance scaling program on one or more of the respective processor cores as well as selectively identifying loading and executing a more suitable replacement program for managing or controlling the performance of one or more of the available cores. The management logic is arranged to perform these functions at run time or while the mobile device is powered and in use by an operator of the device. A replacement program can be found in the program store of the embedded file system and is defined by a specific combination of a performance scaling algorithm and a set of parameters . The replacement program when executed by one or more of the core processors in the digital signal processor or the core in the RF transceiver may operate in accordance with one or more signals provided by the monitor module or one or more signals provided on the respective control inputs of the various processor cores to scale the performance of the respective processor core. In this regard the monitor module may provide one or more indicators of events processes applications resource status conditions elapsed time temperature etc.

The DVFS interface logic or interface logic includes one or more executable instructions for presenting managing and interacting with external inputs to observe configure or otherwise update information stored in the embedded file system . In one embodiment the interface logic may operate in conjunction with manufacturer inputs received via the USB port . These inputs may include one or more programs to be deleted from or added to the program store . Alternatively the inputs may include edits or changes to one or more of the programs in the program store . Moreover the inputs may identify one or more changes to or entire replacements of one or both of the startup logic and the management logic . By way of example the inputs may include a change to the management logic that instructs the mobile device to suspend all performance scaling in the RF transceiver when the received signal power falls below an identified threshold. By way of further example the inputs may include a change to the management logic that instructs the mobile device to apply a desired program when the video codec is active.

The interface logic enables a manufacturer to controllably configure and adjust an end user s experience under defined operating conditions on the mobile device . When the memory is a flash memory one or more of the startup logic the management logic the interface logic the application programs in the application store or information in the embedded file system can be edited replaced or otherwise modified. In some embodiments the interface logic may permit an end user or operator of the mobile device to search locate modify or replace the startup logic the management logic applications in the application store and information in the embedded file system . The operator may use the resulting interface to make changes that will be implemented upon the next startup of the mobile device . Alternatively the operator may use the resulting interface to make changes that are implemented during run time.

The embedded file system includes a hierarchically arranged DVFS store . In this regard the file system may include a reserved section of its total file system capacity for the storage of information for the configuration and management of the various parameters and performance scaling algorithms used by the mobile device . As shown in the DVFS store includes a core store which includes a program store which includes one or more DVFS programs. Each program is defined as a combination of a respective performance scaling algorithm and a set of parameters associated with the specific algorithm. As a further example of the hierarchical nature of the DVFS store a particular member of a set of files may be located and identified by the path of startup core algorithm parameterset. In this example a program is identified by the algorithm in combination with the contents of information stored in the parameter set. For example a conventional DVFS algorithm known as classic may be identified to manage performance scaling on core in accordance with the parameters sample rate samples to increase and samples to decrease as follows startup core classic SampleRate with a value of 100 where the sample rate is in MHz startup core classic SamplesToIncrease with a value of 2 where the samples to increase is an integer and startup core classic SamplesToDecrease with a value of 1 where the samples to decrease is an integer. That is the respective filenames define a parameter and the value of the parameter is identified by the contents of the file. The algorithm is defined by a periodic sampling of the CPU idle percentage and operates in accordance with a low threshold idle and a high threshold idle . If a samples to increase threshold comparator indicates for 2 consecutive samples that performance should be increased the DVFS algorithm increases performance in accordance with a predetermined clock level adjustment. Conversely if a samples to decrease threshold comparator indicates for 1 consecutive sample that performance should be decreased the DVFS algorithm decreases performance in accordance with the predetermined clock level i.e. frequency adjustment. As explained above processor or core operating voltage may be changed together with changes in the clock frequency.

Alternatively or additionally the DVFS store may be arranged such that the search path starts from the most specific with respect to its application i.e. the processor core algorithm and parameter value progresses to the least specific with respect to application. In an example embodiment parameters are defined in the directories core coreAll and default in association with the classic performance scaling algorithm. For example the path core classic SampleRate applies only to the classic algorithm operating on core. This most specific application will override all others. The path coreAll classic SampleRate applies to any processor core running the classic algorithm. This application is not as specific as the example path above but is more specific than default classic SampleRate which applies to any processor core running the classic algorithm. This default application is the least specific and is used only if no other suitable path exists in the DVFS store . The first parameter found will be the one used. The default location will always have a valid parameter file. The architecture of the individual cores the architecture of the one or more shared caches and the mechanism s used to pass instructions between the cores as well as the desired use cases for the mobile device are expected to dictate the nature of the various performance scaling algorithms stored in the memory .

Next as shown in block at least one member of the set of programs is identified for scaling the performance of an identified processor core. In block the identified processor core and the member of the set of programs identified in block are associated with one another. As indicated above this can be accomplished in a file system such as the file system by storing or otherwise arranging algorithms and parameters hierarchically under a specified core identifier. In block an interface that exposes the set of programs and the core associations is created. In optional block a first program is selected for execution to implement performance scaling on the available processor cores at startup. This can be accomplished by a search routine that traverses the DVFS store in an attempt to identify an appropriate DVFS program i.e. a combination of a performance scaling algorithm and a set of parameters for managing the operation of the respective processor core. Thereafter as shown in optional block the first program can be replaced during runtime with a second program upon identification of one or more of a defined event an operating condition a request for particular hardware resources application s etc.

As illustrated in example functionality of the computer program product is illustrated in the form of a flow diagram or method . The method begins with block where a member from a set of programs suitable for scaling the performance of a processor core operable on the mobile device is selected to define a program. As further illustrated in block the set of programs is defined by a respective combination of a performance scaling algorithm and a respective set of parameters that are applied with the algorithm. In block the select program is loaded or otherwise communicated to a processor core on the mobile device . As indicated in block this is accomplished in accordance with a startup sequence. One skilled in the art will understand that the startup sequence can be enabled in firmware software or even the operating system itself. Once the select program is communicated to the respective processor core the select program can be executed to scale the performance of the processor core or other processor cores operative on the mobile device as may be desired.

Thereafter as indicated in block use of the mobile device is monitored to identify a condition indicative that a replacement program from the set of programs is to replace the select program. In block the select program is replaced by the replacement program during run time. As indicated above the replacement of a select program with a replacement program can be accompanied with a managed termination of the select program before the replacement program is loaded and executed.

Having generally described an example embodiment of a mobile device and how an embedded file system therein can be used to manage and expose the application of multiple performance scaling algorithms in association with the embodiments illustrated in reference is now made to which include additional embodiments to illustrate an offline process for optimizing the configuration of multiple performance scaling algorithms and operational parameters on a mobile device.

In this regard is a plot illustrating the development of a performance metric on the mobile device of . The abscissa represents a number of frames of video information that are processed by the mobile device each second. In this regard the abscissa represents an actual performance of the mobile device i.e. rendered frames of video information per second. The ordinate represents a normalized performance. Accordingly the graph illustrates the conversion or development of a performance metric from mobile device performance. The trace shows that a frame rate of about 26 frames per second or fewer is deemed unacceptable and receives a normalized performance score of 0. In contrast a frame rate between about 26 frames per second and a nominal 30 frames per second is acceptable with the nominal frame rate of 30 frames per second receiving a normalized performance score of 1. Any number of factors associated with a select DVFS program e.g. the algorithm the specific value or values of one or more parameters may have the potential for creating such an undesirable performance level. Furthermore the shape of the trace indicates that there is some range of operating voltages and frequencies that could be applied to one or more of the processor cores and or a dedicated video codec on the mobile device to achieve some power savings while still achieving and or maintaining an acceptable level of performance.

The plot in is representative of one performance metric for a video playback feature. As the mobile device is capable of executing numerous other applications any number of additional performance metrics can be developed for comparing and analyzing the relative performance of other features or applications on the mobile device as parameters are adjusted and performance scaling algorithms applied to one or more processor cores.

A second example use case is illustrated in the table of . This second use case includes a short messaging service SMS application in place of the email application of the first use case. In addition to the change in the listed tasks to be performed on the mobile device the second use case includes a distinct set of projected percentages that the end user of the device might be performing the associated task.

Accordingly it is not a trivial matter to identify if one of the available combinations of performance scaling algorithms and parameters on the mobile device is more effective at saving power for a projected use case. A figure of merit or a merit value provides a quantitative measure for comparing the application of N available performance scaling algorithms over M sets of possible parameter combinations against each of the tasks to be performed on the mobile device . The merit value is the product of a normalized performance metric and a corresponding power metric. As indicated above one or more performance metrics can be identified for each task.

The power metric can include a saved power value or a total power used. The total power used may be a better indicator of the relative effectiveness of various performance scaling algorithms and parameters as total power expended by the mobile device has both a static and a dynamic component. A function of the normalized performance metric and the power metric namely the product of these values is shown in the example table and the example table . The values depicted in the table and the table are scaled or normalized on a scale of 0 to 100 with a scaled score or merit value of 0 indicating the most undesirable combination and a merit value of 100 representing the best possible performance and power savings for a given combination of performance scaling algorithm and parameter set. Although the table and the table include the same performance scaling algorithms i.e. algorithm A algorithm B and Algorithm N the corresponding merit values for each of the tasks in the respective use cases is different as the parameters applied is different for each use case.

The information in the example table and the information in the example table still do not readily indicate if a particular performance scaling algorithm will perform better across the entirety of the use case. However a system or composite merit value CMV can be determined from the following equation

A similar data collection procedure can be applied after a mobile device has been delivered to a customer of the device. This would allow tuning and performance scaling algorithm selection to be determined as shown in but for the actual customer usage rather than the projected usage for the mobile device . In addition once it has been determined which performance scaling algorithm and parameter configuration results in the most power saved for a particular use case the mobile device can be configured to detect the use case and apply the performance scaling algorithm and parameter set when that use case is active.

The processor is a hardware device for executing software i.e. programs or sets of executable instructions particularly that stored in memory accessible by the processor such as the memory . The processor can be any custom made or commercially available processor a central processing unit CPU an auxiliary processor among several processors associated with the test system a semiconductor based microprocessor in the form of a microchip or chip set or generally any device for executing instructions.

The input output I O controller manages all information that is received by or communicated from the test system . The I O controller manages information transfers between any number of I O device s including devices such as for example but not limited to a keyboard a mouse a scanner a microphone and or a touch sensitive display etc. The I O device s also include one or more of a modem a radio frequency RF or other transceiver an Ethernet interface a universal serial bus interface etc.

The memory can include any one or combination of volatile memory elements e.g. random access memory RAM such as dynamic random access memory DRAM static random access memory SRAM synchronous dynamic random access memory SDRAM etc. and nonvolatile memory elements e.g. read only memory ROM hard drive tape compact disk read only memory CD ROM etc. . Moreover the memory may incorporate electronic magnetic optical and or other types of storage media. Note that the memory can have a distributed architecture where various components are situated remote from one another but can be accessed by the processor .

The software in the memory may include one or more separate programs or logic each of which comprises an ordered listing of executable instructions for implementing various defined functions. In the example embodiment illustrated in the software in the memory includes the test logic control logic merit logic and the determination logic . In alternative embodiments one or more of the test logic control logic merit logic and the determination logic . may be implemented via one or more distributed computing devices remote from but accessible to the test system .

When the logic used by the test system is implemented in software as is shown in one or more of the test logic control logic merit logic and the determination logic may be stored on any computer readable medium for use by or in connection with any computer related system or method. In addition information identifying performance scaling programs such as algorithms and parameters as stored in program store use cases as stored in use case store and merit values or other results as stored in results store may also be stored on a computer readable medium.

The test logic includes executable instructions for managing the various steps and or tasks for preparing a set of conditions for determining a quantitative result from the mobile device . The test logic works in conjunction with the control logic to configure the mobile device . The control logic sends commands via the I O controller and the communication link that configure the mobile device to function in accordance with a defined combination of a performance scaling algorithm and a set of parameters. In addition the control logic sends commands via these same elements to configure the mobile device to perform a specified task or tasks in accordance with a use case. The test logic is configured to step through any number of desired use cases algorithms and parameters. For each test case the test system receives a power metric and a performance metric from the mobile device . The merit logic receives the power and performance metrics and calculates a merit value or figure of merit for each test case. In turn the test logic sends the merit value from the merit logic to the results store . The results store may include a table such as the example tables shown in and . After all desired test cases have been completed the test logic directs the determination logic to identify a best combination of a performance scaling algorithm and parameter set for each use case. The determination logic may add one or more indicators to a table such as the example table shown in to generate a performance scaling schedule which can be communicated in any number of formats to the mobile device .

Certain steps in the processes or process flows described in this specification naturally precede others for the invention to function as described. However the invention is not limited to the order of the steps described if such order or sequence does not alter the functionality of the invention. That is it is recognized that some steps may be performed before after or in parallel substantially simultaneously with other steps without departing from the scope and spirit of the invention. In some instances certain steps may be omitted or not performed without departing from the invention. Further words such as thereafter then next etc. are not intended to limit the order of the steps. These words are simply used to guide the reader through the description of the exemplary method.

One of ordinary skill in the art of programming is able to write computer code or identify appropriate hardware to implement the disclosed processes without undue difficulty or experimentation. Therefore disclosure of a particular set of executable instructions or detailed hardware devices is not considered necessary for an adequate understanding of how to make and use the invention. The inventive functionality of the claimed mobile device and processes is explained in more detail in the above description and in conjunction with the Figures which may illustrate various process flows.

In one or more exemplary aspects the functions described may be implemented in hardware software firmware or any combination thereof. If implemented in software the functions may be stored on or transmitted as one or more instructions or code on a computer readable medium. Computer readable media include both computer storage media and communication media including any medium that facilitates transfer of a computer program from one place to another. A storage media may be any available media that may be accessed by a computer. By way of example and not limitation such computer readable media may comprise RAM ROM EEPROM CD ROM or other optical disk storage magnetic disk storage or other magnetic storage devices or any other medium that may be used to carry or store desired program code in the form of instructions or data structures and that may be accessed by a computer.

Also any connection is properly termed a computer readable medium. For example if the software is transmitted from a website server or other remote source using a coaxial cable fiber optic cable twisted pair digital subscriber line DSL or wireless technologies such as infrared radio and microwave then the coaxial cable fiber optic cable twisted pair DSL or wireless technologies such as infrared radio and microwave are included in the definition of medium.

Disk and disc as used herein includes compact disc CD laser disc optical disc digital versatile disc DVD floppy disk and blu ray disc where disks usually reproduce data magnetically while discs reproduce data optically with lasers. Combinations of the above should also be included within the scope of computer readable media.

Although selected aspects have been illustrated and described in detail it will be understood that various substitutions and alterations may be made therein without departing from the scope of the present invention as defined by the following claims.

