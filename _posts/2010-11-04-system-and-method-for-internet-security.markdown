---

title: System and method for internet security
abstract: A computer implemented method for preventing SQL injection attacks comprises intercepting a web request associated with a web service at a first software hook in a first web service execution context, persisting at least a portion of the intercepted web request in a storage location associated with the first software hook and accessible to at least one additional execution context, intercepting a database query generated by at least one web service processing operation at a second software hook associated with the execution of the query, wherein the query is generated in response to the intercepted web request and the second hook retrieves the persisted portion of the intercepted web request, comparing a portion of the persisted portion of the intercepted web request with at least a portion of the intercepted database query, and determining, prior to the query being executed, whether the query corresponds to a potential SQL injection attack.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08578487&OS=08578487&RS=08578487
owner: Cylance Inc.
number: 08578487
owner_city: Irvine
owner_country: US
publication_date: 20101104
---
The present disclosure relates to internet security and more particularly to identification and prevention of Structured Query Language SQL injection attempts.

SQL injection is a code injection technique that exploits a security vulnerability occurring in the database layer of an application. The vulnerability is present when user input is either incorrectly filtered for SQL metacharacters which can include for example string literal delimiter characters and other characters that may be dangerous in various circumstances embedded in SQL statements used to access a database or when user input is not strongly typed and thereby unexpectedly executed. SQL injection attacks or SQL insertion attacks can allow unauthorized retrieval and modification of data in a database providing attackers with access to sensitive and otherwise secure data through manipulation of SQL statements. In a worst case scenario SQL injection may even allow the attacker to take full control of the database server.

SQL is a database computer language designed for managing data in relational database management systems RDBMS and provides commands and instructions including data insert query update and delete schema creation and modification and data access control. Many web based applications and web services process user input or web requests to generate a database query in SQL or in a SQL statement or SQL code for accessing a database according to the web service s operations and the user input. SQL injection attacks can use malicious user input to cause the web service to generate SQL statements for accessing the associated database that far exceed the scope of the web service and database creator s intentions including the provision of data to which the user may not normally be granted access.

A web application requiring user authentication provides an example of SQL injection. Upon accessing the web application a visitor or user can encounter a login page requesting a user name and a password. A typical web application may query a database to determine if the user name and password pair is valid authenticating the visitor as the identified user if validated or denying the login attempt otherwise. A common practice in performing such a database query is to construct during the web application s processing a string representing the database query using string concatenation or string formatting facilities to combine a predefined SQL code with the input received from the visitor the result of which is a single string or query string. Generally the database can only differentiate SQL code from data or user input to the extent that the data is properly delimited during the database query s construction. Some web applications may not check the visitor s input for characters having special meaning in SQL statements and database processing. As a result a malicious visitor could use one of the special characters to transcend the boundary between the SQL code and the data intended by the web application thus altering the logic of the query by injecting the malicious user s own SQL code into the generated or constructed query string.

An example of the above event may use the following pseudocode representing the programming in the web application which constructs the underlying SQL database query. Generally the SQL injection vulnerability may be considered to exist in the web application programming in that the web application code generally constructs the SQL database query without performing a check as to whether the generated query is malicious. The following is an example of web application or web service logic that may be used to insecurely construct a database query 

where is a string concatenation operator. The terms username and password each represent a string variable containing the eponymous piece of user input. If the supplied username is Mitch and the supplied password is Wildcats the resulting database query string would be as follows 

In the query the single quote character is used to delimit string data. If the web application does not properly reject or sanitize input containing single quotes for example a malicious visitor can inject SQL code as described above. For instance if the username is entered as Mitch and the password is entered as AnythingGoesHere the following query string is generated as a result 

The character in the input associated with the value username artificially and prematurely ends the first portion of the query recognized as string data within the SQL code. The character denotes an artificial end to the query string and the sequence renders the remainder of the query string as a comment in the SQL code causing the information after the sequence to be ignored by the database. The resulting query string processed by the database therefore only checks the username but not the password and can enable the malicious visitor to login as any user without knowing the correct password. Such malicious input crafted to manipulate the meaning of a database query generated by the web application constitutes one example of a SQL injection attack or SQL injection exploit. In alternative instances SQL injection attacks can be used to access and return data and information stored in the database. For example a SQL injection exploit can be used to return all data within a database in instances where the query is associated with the retrieval and display of data and where the database and or web application exists without appropriate protections.

Systems and methods for preventing SQL injection attacks are described in the present disclosure. In one instance a computer implemented method comprises i intercepting a web request associated with a web service at a first software hook in a first web service execution context ii persisting at least a portion of the intercepted web request in a storage location associated with the first software hook and accessible to at least one additional execution context iii intercepting a database query generated by at least one web service processing operation at a second software hook associated with the execution of the query wherein the query is generated in response to the intercepted web request and the second hook retrieves the persisted portion of the intercepted web request iv comparing a portion of the persisted portion of the intercepted web request with at least a portion of the intercepted database query and v determining prior to the query being executed whether the query corresponds to a potential SQL injection attack.

While generally described as computer implemented software embodied on tangible media that processes and transforms the respective data some or all of the aspects may be computer implemented methods or further included in respective systems or other devices for performing this described functionality. The details of these and other aspects and embodiments of the present disclosure are set forth in the accompanying drawings and the description below. Other features objects and advantages of the disclosure will be apparent from the description and drawings and from the claims.

This disclosure generally describes computer systems software and computer implemented methods for identifying and preventing SQL injection attacks and SQL injection exploits. For example the present disclosure describes a method of linking an end user s request for a web page also defined as a web request or an HTTP request with database queries also SQL queries issued by an associated web server or other back end systems during the handling and processing of the web request. While such links may not normally exist or may exist in such a way that third party software cannot access them the present disclosure enables third party security software to analyze a generated database query in the context of the web request that caused the generation of said database query. The systems and methods provided within the present disclosure can be used to facilitate security analysis of user input associated with web requests e.g. to a web based application or to a web service and more specifically to detect potential attacks attempting to exploit SQL injection vulnerabilities within web pages and web services.

In general a method for establishing a programmatic link between a received web request and any database query issued as a result of processing the received web request is provided. Various software hooks which may include code hooks shims extensions and or filters are installed at one or more predetermined locations along the code path from where a web request is received to where associated database queries are issued. In one example a software hook may comprise a detour hook. A detour hook can intercept the information provided to the location of the software hook reroute the information to a location associated with a security module and return the same or modified information back to the location of the software hook. In other instances the software hook may include a custom database driver or connector. Each hook retrieves data and or references to data such as pointers from the execution context in effect at the time the hook executes and stores that data in a location accessible to the next execution context associated with processing the web request such that the data is accessible to the next hook in the processing chain of events. The data associated with the original web request and or the references to the web request itself is available within the execution context in which a database query is eventually issued assuming the database query was caused by a web request. In some instances the software hooks may be considered of one of two types intermediate hooks and terminal hooks. Intermediate hooks may generally include software hooks that are associated with operations for processing a particular web request prior to a database query being generated. Terminal hooks on the other hand can include the software hooks for intercepting database queries generated in response to a particular web request. The terminal hooks can identify the generated database query and retrieve information associated with the original software hook where appropriate. In some instances terminal hooks may be associated with a database client or database API e.g. ODBC API hooks or Command type method hooks used in the processing of web requests in a particular web service.

The systems and methods of the present disclosure can enable third party web server security software such as a Host Based Intrusion Prevention System HIPS or a Web Application Firewall WAF to analyze a database query in the context of user input included within a received web request that was responsible for generating the database query. The present disclosure can allow security software to detect and deny or sanitize SQL injection attacks prior to the database queries being executed against a database or table for the web service or web based application associated with the original web request. One benefit of the present disclosure is that third party security software solutions can be implemented without the first party software being modified in some instances.

Alternative approaches to analyzing database queries for SQL injection attacks currently provide various drawbacks. For example network based security solutions such as a Network Intrusion Prevention System NIPS must parse all encapsulating protocols over which the web request and or database query are transmitted including those instituting encryption which may require sharing of an otherwise secure encryption key and must do so according to the same parsing rules as the software or systems receiving the request or database query implement. Depending on the location of the system a NIPS may have difficulty prohibiting rather than simply observing the request and generally has no opportunity to monitor a database query where the source and database reside on the same system as the database query never traverses the network. Another shortfall of other alternative systems is the inability to correlate generated database queries to the exact web request that caused the database query to be generated including the portions explicitly supplied by the user . Most security solutions eschew such correlation and attempt to detect SQL injection attacks through whitelists of potential database query templates built by learning or behavior based technologies and or by searching the database queries for known bad signatures of common attacks. Both approaches have disadvantages. A learning based solution may produce false positives meaning it incorrectly detects a benign input or database query as malicious if the input or database query was not previously observed during learning mode. Such false positives may occur during the use of features of the website that were not sufficiently exercised during learning mode and features that were added or changed after learning mode concluded. Further a learning based solution may not provide full protection while in learning mode. It may also learn malicious input or database queries and thereby produce false negatives meaning it fails to detect the input or database queries as malicious when similar attacks are later observed. A signature based solution may be prone to false negatives due to its inflexible set of attack signatures which may in some cases be knowingly weakened by the developers in order to avoid causing false positives and which may be evaded by an attacker who has knowledge of the signatures. Neither a learning based approach nor a signature based approach inherently enables a solution to safely and properly sanitize suspicious database queries.

The present disclosure provides additional benefits based on the hooking approach used therein. For instance executing the hooks adds the overhead of security analysis to the thread or threads more abstractly the code path responsible for processing a web request which can allow the overhead to scale linearly with the number of web requests received. Further properly placed hooks allow certain embodiments of the present disclosure to analyze web requests and database queries exactly as they are received and transmitted by the web page web service or web based application thereby obviating the need to perform any independent protocol parsing that could otherwise pose a security weakness in the system itself e.g. if the independent parsing was implemented improperly or if the parsing logic of the web service or script processor upon which it is modeled changes in the future .

In general the web server is any server that stores and executes operations associated with a web service or another web based application. The web server can receive web requests associated with the web server from the clients associated with the illustrated system as well as clients and other participants or entities not illustrated in . For example the web server may be a Java 2 Platform Enterprise Edition J2EE compliant application server that includes Java technologies such as Enterprise JavaBeans EJB J2EE Connector Architecture JCA Java Messaging Service JMS Java Naming and Directory Interface JNDI and Java Database Connectivity JDBC . In some instances the web server may store a plurality of various other applications and or web services while in other instances the web server may be a dedicated server meant to store and execute a particular web service or web application and its related functionality. In some instances the particular web service associated with the web server may represent a web based application accessed and executed by the associated clients to perform the programmed tasks or operations of the corresponding web service .

At a high level the web server comprises an electronic computing device operable to receive transmit process store or manage data and information associated with the environment . The web server illustrated in can be responsible for receiving application requests from one or more clients or client applications associated with one or more of the other clients included in an illustrated client server relationship or system responding to the received requests by processing said requests in the web service and sending the appropriate responses from the web service back to the requesting client client application or other requesting entity or application. The web service may in some instances process and respond to local requests from a user locally accessing the associated web server . Accordingly in addition to requests from the external clients illustrated in requests associated with a web service may also be sent from internal users external or third party customers and other automated programs or applications communicably coupled to network as well as any other appropriate entities individuals systems or computers.

As used in the present disclosure the term computer is intended to encompass any suitable processing device. For example illustrates a single web server associated with a single web service . However environment can be implemented using any number of web servers associated with one or more web services or other web based applications as well as computers other than servers including a server pool. Indeed each web server may be any computer or processing device such as for example a blade server general purpose personal computer PC Macintosh workstation UNIX based workstation or any other suitable device. In other words the present disclosure contemplates computers other than general purpose computers as well as computers without conventional operating systems. Further the illustrated web server may be adapted to execute any operating system including Linux UNIX Windows Mac OS or any other suitable operating system. According to one implementation one or more web servers may also include or be communicably coupled with a mail server.

In the illustrated implementation of the web server includes an interface a processor and a web service . The interface is used by the web server to communicate with other systems in a client server or other distributed environment including within environment connected to the network e.g. an associated client or the set of cloud based services as well as other systems or entities communicably coupled to the network . depicts a client server environment although environment or a portion thereof may exist within or as a cloud computing network or cloud computing based system. Various other implementations of the illustrated environment can be provided to allow for increased complexity of the illustrated web service such as through the use of a plurality of servers to represent the web server or a plurality of different web services being combined and or associated to complete certain functionality. Generally the interface comprises logic encoded in software and or hardware in a suitable combination and operable to communicate with the network . More specifically the interface may comprise software supporting one or more communication protocols associated with communications such that the network or interface s hardware is operable to communicate physical signals within and outside the illustrated environment .

The web server may be communicably coupled with a network that facilitates wireless or wireline communications between the components of the environment i.e. between the web server the clients and the database server as well as with any other local or remote computer such as additional clients servers or other devices communicably coupled to network including those not illustrated in . While the network is depicted as a single network in network may be comprised of more than one network without departing from the scope of this disclosure so long as at least a portion of the network may facilitate communications between senders and recipients. In some instances the network may include all or a portion of a set of cloud based services storage and other information. The network may be all or a portion of an enterprise or secured network while in another instance at least a portion of the network may represent a connection to the Internet. In some instances a portion of the network may be a virtual private network VPN such as for example the connection between the web server and at least one of the clients . Further all or a portion of the network can comprise either a wireline or wireless link. Example wireless links may include 802.11a b g n 802.20 WiMax and or any other appropriate wireless link. In other words the network encompasses any internal or external network networks sub network or combination thereof operable to facilitate communications between various computing components inside and outside the illustrated environment . The network may communicate for example Internet Protocol IP packets Frame Relay frames Asynchronous Transfer Mode ATM cells voice video data and other suitable information between network addresses. The network may also include one or more local area networks LANs radio access networks RANs metropolitan area networks MANs wide area networks WANs all or a portion of the Internet and or any other communication system or systems at one or more locations. The network however is not a required component in all implementations of the present disclosure.

As illustrated in the web server includes a processor . Although illustrated as a single processor in the web server two or more processors may be used in the illustrated web server according to particular needs desires or particular embodiments of environment . Each processor may be a central processing unit CPU a blade processor an application specific integrated circuit ASIC a field programmable gate array FPGA or another suitable component. Generally the processor executes instructions and manipulates data to perform the operations of the web server and specifically the functionality associated with the corresponding web service and security module . In one implementation the server s processor executes the functionality required to receive and respond to requests and instructions from one or more clients as well as the functionality required to perform the other operations of the associated web service .

Regardless of the particular implementation software may include computer readable instructions firmware wired or programmed hardware or any combination thereof on a tangible and non transitory medium operable when executed to perform at least the processes and operations described herein. Indeed each software component may be fully or partially written or described in any appropriate computer language including C C Java Visual Basic assembler Perl any suitable version of 4GL as well as others. It will be understood that while portions of the software illustrated in are shown as individual modules that implement the various features and functionality through various objects methods or other processes the software may instead include a number of sub modules third party services components libraries and such as appropriate. Conversely the features and functionality of various components can be combined into single components as appropriate. In the illustrated environment the processor executes the corresponding web service stored on the web server as well as the functionality associated with the security module . In some instances the web server may be associated with two or more web services .

At a high level the web service is any application program module process or other software that may execute change delete generate or otherwise manage information associated with a web server . In some instances the web service may operate in response to and in connection with one or more requests received from an associated client . In some instances information associated with a request may be relayed by or provided via the network as well as directly from a particular client . The web service may represent a web based application accessed and executed by remote client via the network e.g. through the Internet or via a cloud based network . Further while illustrated as internal to the web server one or more processes associated with the web service may be stored referenced or executed remotely. For example the illustrated web service may be associated with a plurality of different individual web services where the illustrated web service combines two or more of the web services to perform various operations and processing of received requests. In some instances one or more of those individualized web services may be remotely called by the overall web service or during the web service s execution while another portion of the overall web service may be an interface object or agent bundled for processing and operation at a remote client . Moreover any or all of a particular web service may be a child or sub module of another software module or enterprise application not illustrated without departing from the scope of this disclosure. Still further portions of the web service may be executed or accessed by a user working directly at the corresponding web server as well as remotely at a corresponding client .

The web service may be an application programming interface API or Web API accessed for example via a hypertext transfer protocol HTTP request from a remote system where the web service performs one or more operations in response to the HTTP request. In some instances Simple Object Access Protocol SOAP messages can be used for exchanging structured information within the web service itself or for information sent by or to a particular client or other entity. In some instances the HTTP request sent to the web service i.e. from client via network may include one or more parameters variables or other information associated with the web service s operations. By using those parameters in some instances with other predefined code processing or operations the web service may be capable of generating a responsive message or set of information as a response to the requester. In some instances and as illustrated in the web service may be associated with at least one database such that the web service can receive information associated with a request for information generate a database query based on that received information and or other predefined information and access a particular database to retrieve information therefrom. The illustrated web service includes a web request handler module a web request processor module which includes a database query generator module and a database client API . Each of these modules and APIs provide different portions of functionality to the web service . For example the web request handler module can perform initial processing operations associated with the receipt of a web request or HTTP request associated with the underlying web service . The web request processor module can perform one or more operations on the web request or a subset of information included in the web request such as user supplied input according to the programming and functionality associated with the web service . In some instances the functionality may include determining based on the received web request a set of operations to be performed by the web service . In some instances one or more of those operations may include the generation of a database query based in some instances on at least some of the information included within the initial web request. In those instances the database query generator module of the web request processor can be used to generate a database query according to the operations associated with the web service . Once a database query is generated the web service can provide the database query to the database client API which can be used to provide access to a particular database system associated with the web service . In some instances one web service may be associated with a plurality of databases and or database systems such that the web request processor may determine which of the associated databases to send and execute a particular database query against. As illustrated in the web service is associated with a single set of databases within a database server .

The database server can receive the database queries from and provide query results to the web service or the client via network . The database server includes an interface and a processor similar to those described with regard to interface and processor of the web server . The processor executes a database management system such as the relational database management system RDBMS illustrated in . The RDBMS receives the database query via interface and network and uses its capabilities to execute the received database query against one or more databases located at or communicably coupled to the database server . The RDBMS may access databases internal and or external to the database server such as databases located in a cloud based network via network . In response to executing the database query against the appropriate database the RDBMS receives and returns a set of database query results. The database query results can be returned to the web service for further processing by the web service and further allowing the web service to transmit or present the query results to one or more clients in response to the original web request. In some instances the web server and the database server may comprise a single server or system such that the database query and database query results would not leave or be sent between the servers but rather through internal system communications.

The security module of comprises security software for installing software hooks within an application or other software. In the illustrated example the security module installs one or more software hooks at various locations within and associated with the web service . In the present disclosure hooking refers to a range of techniques used to alter or augment the behavior of an application or software components by intercepting function calls messages and events passed between software components. The code that handles the intercepted function calls events or messages is referred to a hook. In some instances software hooks are inserted while software is already running executing although the software hooks may also be employed prior to the application being started. In the present example various hooks including code hooks shims extensions and or filters are installed at predetermined locations along the code path traversing the time when the web request is initially received by the web service to where database queries are generated. The hooks themselves are used to retrieve data and or references to the data associated with the operations of the web service or suitable application for a particular execution context within the web service at the time the hook executes. The data retrieved by the hook is then stored or referenced in a location that will be accessible in the next execution context and thereby available to the next execution context and the next software hook. In some instances the data can be stored or referenced in web service temporary storage .

The web service temporary storage may be any memory or database module and may take the form of volatile or non volatile memory including without limitation magnetic media optical media random access memory RAM suitable types of read only memory ROM such as electrically erasable read only memory EEROM or electrically erasable programmable read only memory EEPROM removable media or any other suitable local or remote memory component. The web service temporary storage may store various objects or data including classes frameworks applications backup data business objects jobs web pages web page templates database tables process contexts repositories storing services local to the corresponding web server and any other appropriate information including any parameters variables algorithms instructions rules constraints or references thereto associated with the purposes of the corresponding web server and its web service . In some instances the web service temporary storage may be local to the web service and the web server while in other instances the web service temporary storage may be remote from the web service and in some cases the web server itself although communicably coupled to the web service . Further the web service temporary storage may be separate from other memory within the web server or may be a portion of the memory inherent to the web server and the web service such as a thread local storage or other storage location. In some instances the web service temporary storage may be a location associated with one or more SOAP or other messages sent between components of or associated with the web service . For example the information associated with one execution context can be appended to a message and provided to the next execution context initiated in response to the message. The appended information can be retrieved from the message and used for further processing. If a new message is to be sent the previously appended information can again be appended to the new message allowing a third execution context to receive and access the information. Using one or more of these methods information associated with at least a portion of the originally received web request can be maintained and propagated throughout multiple threads and processes used throughout the operation of the web service .

In one embodiment software hooks can be associated with the operating system of the web server . The security module can access the operating system s means of dynamically loading and unloading dynamic linked libraries DLLs allowing the security module to be notified whenever a DLL of interest loads or is removed from the memory associated with the web service or other associated software. In some instances one or more DLLs may have been loaded prior to the security module beginning its operations. In those instances the security module can process each DLL of interest already resident in memory similar to when a new DLL is loaded and identified by the security module . In both instances each DLL of interest to the security module such as those associated with the processing of a web request within the web service or web based application is examined. In some instances software hooks may be added based upon the file name of each examined DLL.

Examples of file names of DLLs in which a software hook may be installed include one or more of the following 

The security module can insert software hooks into these and other DLLs and locations within the web service . Information on a set of predetermined locations into which software hooks are to be initially installed can be included within a set of hook information . Additionally software hooks installed in or associated with one or more processes or threads due to propagation within a particular DLL or other software component can be tracked and also stored in the set of hook information . In general each software hook can store the information associated with the execution context at the particular software hook s location retrieve information associated with a previous execution context for use or inclusion in a future execution context and provide relevant information to the security module for analysis prior to allowing the web service or other processes associated with a particular software hook to continue. For example when a database query is intercepted the database query can be analyzed by the analysis module of the security module . The analysis module can review the database query in light of the information associated with the original web request to determine if a particular database query is malicious or would cause unforeseen or undesirable results and whether the database query can be adequately sanitized in order to perform the intended operations associated with the original web request without allowing an SQL injection mistake or attack to occur.

In one instance each database query is examined character by character by a state machine associated with the analysis module . The analysis module can have a general character level understanding of SQL syntax as well as an understanding of idiosyncrasies of one or more different types of SQL i.e. MySQL . The analysis module can perform basic identification of tokens including string literals name strings and SQL keywords such as FROM INTO LIKE and WHERE allowing the analysis module to make assumptions and decisions regarding which characters should delimit any string that follows the identified token. At the beginning of each identified token the analysis module can compare the portion of the database query beginning there to each string captured from the original web request or HTTP request . The database query and captured strings can be analyzed in a raw form and with common transformations applied to strings e.g. uppercase lowercase conversions HTML escaping and unescaping URL encoding and decoding etc. . If the string matches a portion of the database query and if it contains a character that would modify the syntax of the database query then the database query can be rejected or sanitized i.e. modified to remove any offending character and to place the database query into a state safe for use with the database . An example of an improperly modified database query may include where a string literal is wrapped in single quotes containing an unescaped single quote from the original web request. In those instances the unescaped single quote may be removed from the string literal replaced in the database query and the analysis module and security module may allow the database query to be performed.

The security module may be used in a second embodiment by registering the security module as a COM object installing into the Microsoft .NET Framework s Global Assembly Cache GAC and adding it to the list of .NET Simple Object Access Protocol SOAP extensions via programmatic modification of the soapExtensionTypes tag in the .NET Framework s machine.config file. The operation of the security module is twofold it operates in conjunction with an unmanaged component to hook the ASP.NET database querying methods in processes and application domains of interest and SOAP communications are intercepted allowing the security module to propagate information between .NET Web Services client and server execution contexts. The SOAP extension functionality allows information associated with a web or HTTP request to be made accessible across application domain process and machine boundaries where the web application uses .NET Web Services while the method hooks permit interception and analysis of database queries. In some simple instances where .NET Web Services are not used and information is not shared across systems the .NET Framework may provide access to the web request being processed through the HttpContext.Current.Request property. In those limited instances additional hooks may not be necessary in order to propagate the web or HTTP request throughout the process.

Database queries are generally executed in ASP.NET by instantiating a Command type object assigning a database query string to its CommandText property and invoking one of its Execute or Prepare type methods. The security module thus hooks methods of known Command type objects including for example OdbcCommand OleDbCommand OracleCommand and SqlCommand. Invocations of each hooked method are redirected to a hook procedure with a matching signature associated with the security module . The hook procedure of the security module accesses a Command type object s CommandText property to obtain the database query to be executed retrieves the strings of the causative web or HTTP request and passes the information to the analysis module for analysis. If the database query is approved the hook procedure can call the original method code and return the result to its own caller. If the database query is modified by the analysis module and or the security module the hook procedure can temporarily replace the CommandText property with a modified database query while the original method code executes if the database query can be sanitized. Otherwise the hook procedure can return an error or throw an exception without invoking the original method code thereby preventing the execution of a database query possibly associated with a SQL injection attack.

The security module illustrated in includes an analysis rule set for providing various security rules protocols and other information associated with the analysis. For example the analysis rule set may define which transformations are to be monitored or used when comparing database queries and original web requests. Additionally the analysis rule set can include information on when and how to sanitize potential malicious database queries including lists of user names or other criteria defining when to always sanitize as well as lists of known malicious users whose queries should always or if in doubt be rejected. The analysis rule set can be provided with the initial installation of the security module . In some instances administrators and users associated with the web service and having proper permissions can add user specified rules and protocols thereby allowing the analysis functions to be tailored to a particular use case.

The illustrated environment of also includes one or more clients associated with the web server and its corresponding web service . Each client may be any computing device operable to connect to or communicate with at least the web server using a wireline or wireless connection via the network or another suitable communication means. In general each client may include a processor an interface a graphical user interface GUI and a client application . In general client comprises an electronic computer device operable to receive transmit process and store any appropriate data associated with the environment of . It will be understood that there may be any number of clients associated with or external to environment . For example while illustrated environment includes two clients alternative implementations of environment may include a single client or three or more clients communicably coupled to the network and web server as well as other clients not specifically connected to or associated with a particular web server . In some instances at least one client may be associated with an administrator of the web server and or web service and may be capable of modifying information and data associated with the web server as well as each individual web service and one or more security modules . Additionally there may also be one or more additional clients external to the illustrated portion of environment capable of interacting with the environment via the network . Further the terms client user and visitor may be used interchangeably as appropriate without departing from the scope of this disclosure. Moreover while each client is described in terms of being used by a single user this disclosure contemplates that many users may use one computer or that one user may use multiple computers.

The GUI associated with each client may comprise a graphical user interface operable to for example allow the user of a client to interface with at least a portion of a web server for any suitable purpose such as inputting and interacting with information and data associated with a particular web service within the illustrated environment or otherwise communicably connected thereto such as through network as well as any other suitable application. Generally the GUI provides the particular user with an efficient and user friendly presentation of business data provided by or communicated within the system. The GUI may comprise a plurality of customizable frames or views having interactive fields pull down lists and buttons operated by the user. For example the GUI may provide interactive elements that allow a user to interact with a particular web service . Various portions displays and interfaces of the web service may be presented and accessible to the user through the GUI such as through a client application such as a web browser client based agent or other software application located at the client . Generally the GUI may provide general interactive elements that allow a user to access and utilize various services and functions of the client application as well as the functions associated with the web server s web service . The GUI is often configurable supports a combination of tables and graphs bar line pie status dials etc. and is able to build real time portals where tabs are delineated by key characteristics e.g. site or micro site . Therefore the GUI contemplates any suitable graphical user interface such as a combination of a generic web browser intelligent engine and command line interface CLI that processes information in the platform and efficiently presents the results to the user visually.

As used in this disclosure each client is intended to encompass a personal computer touch screen terminal workstation network computer kiosk wireless data port smart phone personal data assistant PDA one or more processors within these or other devices or any other suitable processing device. For example each client may comprise a computer that includes an input device such as a keypad touch screen mouse or other device that can accept user information and an output device that conveys information associated with the operation of the associated web server and or the client itself including digital data visual information or the GUI. Both the input and output device may include fixed or removable storage media such as a magnetic storage media CD ROM or other suitable media to both receive input from and provide output to users of client through the display namely the GUI .

The processor and the interface of each client may be similar to those described in connection with the web server although alternative implementations of one or more of these components may be used as well as implementations where additional components may also be included. In general the processor is used to execute the operations associated with the client while the interface is used by the client to communicate with other systems in a client server or other distributed environment including within or external to environment by for example connections to network .

While is described as containing or being associated with a plurality of elements not all elements illustrated within environment of may be utilized in each alternative implementation of the present disclosure. For example although depicts a client server environment implementing the connections between the client and the web server any of the components and particularly those associated with the web server can be located in a cloud based networking environment whereby one or more of the processes associated with are performed by a plurality of nodes and processes distributed throughout the cloud based network. Further although depicts the web server and the database server as separate entities in some instances the two may be combined so that the web server and the database server reside on a single server or system. Additionally one or more of the elements described herein may be located external to environment while in other instances certain elements may be included within or as a portion of one or more of the other described elements as well as other elements not described in the illustrated implementation. Further certain elements illustrated in may be combined with other components as well as used for alternative or additional purposes in addition to those purposes described herein.

The database query object is passed to a database client module which then exchanges traffic via arrows and with a database service and its database management system in order to execute the underlying database query against a database associated with the database service . In some instances the database service and the database may be located on a single system while in other instances the two may be located on different systems remote from one another. Similarly the web service and the database service may be located on the same system in some instances while in others the two may be located remote from one another using a network or other method of communication to interact. The database client module may include one or more APIs that allow the web service to exchange information with the database service and to retrieve database information responsive to the database query generated after the web request object s processing operations.

As illustrated in the security module s software hooks are installed at one or more locations associated with the processing of the web request object as well as a location just prior to the web service s sending of the database query object to the database client module . The software hooks and are used to store and retrieve data associated with the initial web request allowing the information to be propagated throughout the web service . The software hooks and orchestrate the copying of the web request data or references to that data to various temporary storage locations illustrated as boxes and . The first software hook is present after the creation of the web request object . The information received from the web request including any user supplied information included therein is stored as illustrated by arrow in a first temporary storage location . The information stored by the first software hook here in temporary storage location is retrieved by the second software hook which copies the information into a second temporary storage location as represented by arrow . As processing of the web request object continues the third software hook retrieves the information from the second temporary storage location and stores a copy into a third temporary storage location as represented by arrow . Arrows and illustrate the duplication operations performed on the initial web request data as processing continues. Each temporary storage location and is accessible by the corresponding software hook. Generally the web request information is propagated when the processing of the web request requires handing off to or processing by a different process thread or machine such that the previous temporary storage location is no longer readily available to the next software hook. By propagating the information throughout the processing operations the initial web request information can be associated with the database query generated at the completion of the web request s processing. As illustrated the final software hook located just prior to the database query s execution can access the third temporary storage location as shown by arrow to retrieve the information associated with the initial web request. The final or terminal software hook can send the database query information and the initial web request information to the security module for comparison and analysis as described in the present disclosure . By correlating the database query with the causative web request and the information included therein a security analysis of the database query can be performed in light of the untrusted user input included with the web request that may have been used in the generation of the database query itself. If the database query is acceptable or deemed to be safe the terminal software hook may allow the database client module to receive the generated database query and allow the web service to retrieve the appropriate information from the corresponding database via the database service . Alternatively the security module may identify at least a portion of the database query as malicious. In doing so the security module can access a set of security rules to determine how to proceed with the database query. In some instances the security rules may allow certain types of database queries to be executed. In other instances the security rules may identify one or more transformations to be made to the database query in light of the initial user input that can sanitize the potentially malicious portions of the database query and use the sanitized database query to access the associated database . In still other instances the security rules may specify that potentially malicious database queries are not to be executed wherein the security module can provide an error message or throw an exception within the web service such that the database query is not performed thereby preventing any potentially malicious SQL injection from occurring.

Four CPU registers in the x86 Windows system architecture are illustrated a stack pointer a base pointer an instruction pointer and a selector . The stack pointer points to the top or numerically lowest address of the current thread s private stack. In some instances the base pointer can point to the head of a linked list of stack frames . The instruction pointer points to the currently executing instructions and the selector allows the current thread s private Thread Information Block TIB to be meaningfully accessed using well defined relative offsets regardless of the TIB s absolute address in memory. These four registers may be known by different names or titles in different architectures. For example on x64 Windows architectures these registers may be identified as RSP RBP RIP and GS.

In order for a web request to be accessible at a given instant during web service execution the web request needs to exist in memory or be available to the system . Thus a connected chain of links from the CPU to the memory where the web request resides is needed. One possible link not shown in to the web request may exist in a global variable which is itself linked to by a static address embedded in instructions that reference it and which are in turn accessed via the instruction pointer . Another possible link also not shown to the web request may exist in a link from a local variable or function argument in a stack frame on the stack which may in turn be referenced via a stack pointer or base pointer with relative memory access. A third link exists created by a particular embodiment of the present disclosure to the web request from the Thread Local Storage TLS which is referenced by the Thread Information Block TIB which in turn is accessible via a dedicated selector register .

One embodiment of the present disclosure can install software hooks not shown at specific points in the code that when reached will create the proposed link in the current thread s private TLS to point to the web request . It will be understood that such a software hook can be positioned so that it is reached while the current execution context contains some readily available link to the web request otherwise the software hook would be unable to reliably locate it. In other words the security module of the present disclosure is intended to intercept execution of a web service process when a link to the web request is readily available and thereafter propagate that link to future execution contexts associated with the web service process. The present disclosure s software hooks that intercept database queries can use the propagated link to the web request in order to correlate each intercepted database query to the corresponding causative web request in order to perform the described analysis on the database query prior to its execution. In some instances additional links to the web request may be provided. For example a link to the web request may be created by a link maintained in a global variable . The code instituting the software hooks not shown could then contain the static address of the global variable embedded in its instructions.

Each column is associated with a different software hook and can each be understood to represent a particular execution context. Each column is labeled with the role of the software hook that is executing while the execution context is in effect or in control of the thread and or process . Elements represent an area of storage such as memory or other suitable location accessible in the execution context or contexts in which it lies while the elements information associated with the web request and the database query generated in response to the web request information represent the data stored therein. Each arrow between different elements represent the act of copying data or a reference thereto from one storage location to another. In some instances the duplication of the data may transcend a thread and or process boundary. When the duplication crosses a process boundary shared storage or inter process communication such as a SOAP or other type of message or communication may be employed. Rows within demarcate storage available to one thread of a process although storage associated with a particular thread or in some instances with a particular process is not always possible or available. Therefore the illustrated rows of Process A Thread Process B Thread and Process B Thread will be understood to be general examples for illustrative purposes.

The application logic flow for a web server processing a particular web request is provided by the illustration of . Starting at the bottom left portion of the illustration a web request is received by the web service and associated web server . Processing proceeds through the web service s code toward the top right portion of . First the web service Process A serializes and transmits the web request to a work process Process B . In the example embodiment of a pair of IPC hooks and is relied upon to follow the web request across the process boundary. Upon receipt the work process at Process B Thread deserializes the web request and performs the step of enqueuing the web request for processing by a worker thread Process B Thread . In order to maintain a link to the web request in the worker thread another pair of the illustrated embodiment s software hooks and collaborate to track the web request from when it is enqueued to when it is dequeued by the worker thread at Process B Thread . At some point during processing the worker thread issues a database query that is intercepted by the database query software hook . Because the work item dequeue software hook placed a copy of or a link to the web request in a readily available storage location the database query software hook is able to retrieve the web request or information associated with the web request and correlate at least a portion of the web request with the intercepted database query. The security module and its analysis module or any other suitable component associated with the illustrated embodiment can analyze the database query and compare it with at least a portion of the correlated web request to determine how to process the intercepted database query prior to execution of the query itself.

At software hooks are installed in at least one location associated with the operations of a web service. As described in association with the software hooks may be installed in a plurality of locations such that the execution contexts associated with the processing of a received web request can propagate or have access to the information included within the web request initiating the operations of the web service. Different types of software hooks may be installed. In some instances software hooks may be installed at predetermined locations within or associated with the web service or web server such as one or more known DLLs or other files processes . In other instances software hooks may be dynamically installed throughout the processes and threads associated with a particular web service. A security module such as the security module of or the security module of may determine the locations at which the software hooks are to be installed. In some instances installing a software hook at a first predetermined location may result in additional software hooks being installed in one or more additional dynamically determined locations such as one or more processes initiated by a component at the first predetermined location. In some instances a particular installed software hook may have a lifetime corresponding and equal to the lifetime of the process with which it is installed or instantiated. For example if a worker process in which a hook has been installed is terminated or recycled by a master process the software hook will be terminated as well. In other instances one or more software hooks may be terminated or replaced after a predetermined period of time.

At a web request associated with the web service is identified. The web request can include user input defined by a user such as through a form or table input provided at a client or client device associated with the web server. The web request may be an HTTP request. The web request can include a uniform resource identifier URI and a host name defining the web service to be accessed and associated with the web request. The URI and the host name can be used by the web server to determine the physical path and file name to access as associated with the web request. In addition the web request can include one or more variables or other information defined by the user or client who submitted the web request. An example of user input may include a user name and a password combination for logging in to a website. The web server may also identify a set of server variables associated with the identified web request including information not explicitly defined in the web request such as the client s IP address and TCP port whether or not Secured Sockets Layer SSL or Transport Layer Security TLS was used with the request and other web request relevant information. Provided the value of the server variables of the URI and host name a string that uniquely identifies the file and or web service being accessed can be constructed.

At at least a portion of the web request is persisted. In some instances the portions of the web request representing any user input may be persisted. Persistence may include storage in volatile or non volatile memory either locally at the web server or external thereto. Additionally portions of the web request may be persisted by appending the information from the web request in a temporary message that is to be sent between processes within or external to the web server such as SOAP based messages.

At processing operations associated with the identified web request and associated with web service or web application invoked by the web request are performed. The appropriate web service associated with the identified web request can determine the variables and information associated with the web request and the appropriate operations to perform.

At a determination is made as to whether the processing operations associated with the web service require a new process s thread s or machine s operations to continue. In other words a determination is made as to whether the web service s operations require a new execution context in which the information associated with the original web request is not otherwise readily available. If a new process thread or machine is required method continues at where information associated with the identified web request is identified. In some instances identifying information associated with the identified web request at can include propagating at least a portion of the identified web request information across a process thread and or machine boundary. Example methods for propagating information across those boundaries are described throughout the present application. In some instances the determination at may also include a determination as to whether inter thread boundaries are crossed during execution of the web service and if so move method to . After is complete method continues at . Returning to the determination of if no new process thread or machine s operations are required by the operations or if the information associated with the original web request is otherwise available method moves immediately to .

At a determination is made as to whether the operations associated with the web service are intercepted by an intermediate software hook installed as a result of the software hook installation of . If an intermediate software hook intercepts the web service operations the information associated with the identified web request is persisted at . Persisting the web request information may include for example storing at least a portion of the web request in a temporary storage location a permanent or otherwise non temporary storage location or appending at least a portion of web request to a message sent between components of the web service web server and or security module as well as other locations components both internal and external to the web server. The operations of can allow the information associated with the original web request to be propagated across processes threads and machines if necessary as well as make the information available for comparison s sake if a database query is generated by the web service s processing operations. Once the information is persisted method continues at . Returning to if it is determined that an intermediate software hook has not intercepted the processing operations of the web service then method moves directly to .

At a determination is made as to whether the operations associated with the web service are intercepted by a terminal software hook installed as a result of the software hook installation of . A terminal software hook may represent a software hook associated with a generated database query. In some instances the terminal software hook may be a software hook installed into or just prior to providing a database query to a database query API. The terminal software hook can intercept the database query access the latest persisted information associated with the original web request including at least the user input associated with the web request if any and use that information to compare the web request to the database query in order to determine if the database query possibly comprises any malicious SQL code. In some instances the terminal software hook may provide the intercepted database query and in some instances the web request information to a security or analysis module to perform any further analysis. If it is determined that the processing operations are not intercepted by a terminal hook method returns to where further processing operations associated with the web service and used to further process the web request are performed. If however the processing operations are intercepted by a terminal hook method continues at .

At a database query analysis is performed by comparing at least a portion of the original web request with the generated database query. In some instances the comparison or analysis performed may be based on a security rule set. The security rule set may a single rule set for all analyses or a plurality of rule sets may be available. In some instances the rule set to be used may be selected based on one or more criteria including the particular web service associated with the web request information associated with the user or entity that submitted the web request information included within or associated with the web request itself such as a source IP address configuration by an administrator or developer e.g. disabling of one rule set and enabling of another or otherwise changing the default action as well as any other suitable criteria. Once the rule set is determined the comparison and or analysis may be performed between the database query and at least a portion of the web request. illustrates example operations associated with the comparison and analysis of the database query in light of the web request information.

At a database query generated in response to the processes of a web service is identified. In some instances the database query is identified by a software hook associated with a database query API or client such that when a database query is generated the software hook can intercept and identify it. At a determination is made as to whether the identified or intercepted database query is associated with a web request. In some instances the determination can be compared against a set of web requests stored and available to the database query software hook in a temporary storage location. If the database query is associated with one of the web requests method continues at . If the database query is not associated with a web request or a web request available to the database query software hook method skips to where the database query can be executed or otherwise allowed to proceed.

At a set of security rules and policies associated with the corresponding web service and the identified database query is identified. In some instances identifying the appropriate set of security rules and policies associated with the web service and database query may be based at least in part on the associated web request. For example a URI and a host name from the web request and in some instances one or more server variables not explicitly included in the web request may be used to generate a string value uniquely identifying the file being accessed. The file being accessed may be associated with a particular set of security rules and policies defining how different types of web requests and database queries are handled. In some instances portions of user input associated with the web request may also be used in the determination of the appropriate security rules and policies. The appropriate security rules and policies can in some instances be tied to the target of the web request. A particular web server may be associated with more than one web service. Using the identity of the web service plus the host name and URI from the web request a unique identifier used to determine the appropriate rule set can be created. A security rules and policy store may include a set of files defining the rules and policies associated with particular web services and variations thereof . The correct file defining the security rules and policies associated with the original web request associated with the database query can be retrieved and implemented for further comparisons and processing. In one embodiment security rules can be defined in an XML document available to the security module where the XML document is arranged in a hierarchy that can parallel the directory tree of the website or associated web service. In that embodiment rules can be accessed by the full path and file name of the file i.e. the web page web service or script that the user requested.

The additional operations illustrated in describe four possible actions 1 Accept which passes on the database query without modification i.e. to the database client or API 2 Sanitize which modifies potentially dangerous portions of the database query that were apparently derived from web request strings in order to make the database query safe 3 Validate which blocks the database query as opposed to modifying it if it contains potentially dangerous portions apparently based on the original web request and 4 Reject which blocks the database query. The identified security rules and policies can determine the appropriate actions and operations to perform when a database query is intercepted. In some instances the identified security rules and policies can also determine how the database query and original web request or portions thereof are compared as well as the potential transformations of the web request and database query to consider and perform such as whether different variations of one or each should be considered. In some instances the additional operations described below are performed by an inspection and comparison of the database query and the original web request or at least a portion thereof based on the security rules and policies defined in the identified set of security rules and policies. Those rules can in some instances be provided to a rules processor component which can also receive the intercepted database query and the corresponding original web request. The comparisons performed by the rules processor can include regular expression pattern matching on the database query and any field of the web request as well as other operations as appropriate. The highest priority matching rule s action is taken based on the set of security rules and processes or if no rule matches a default rule. In some instances the default rule may be Validate. In other words database queries that are determined to be safe are allowed to execute while database queries with possibly malicious content are not.

At a determination is made as to whether the database query is to be validated. If the database query is to be validated method continues at where a determination is made as to whether the database query contains dangerous strings. If the determination at is that no dangerous strings are included in the database query then method moves to where the database query is allowed to be executed. If however dangerous strings are identified at method continues at and the database query is blocked. In some instances such as that described in a database query error message is prepared for presentation to the user or client associated with the web request thus notifying the user or client that the database query could not be validated and will not be executed. Returning to if it is determined that the database query is not to be validated method continues to . At a determination is made as to whether the database query is to be rejected. In some instances this determination is based on the database query itself such as when all database queries to a particular database are to be stopped or suspended. Security rules and policies may also determine rejection. For example an administrator or developer may implement a rule that rejects any database query that is excessively long or that contains a particular string such as xp cmdshell . Conversely an administrator or developer may implement rules to allow sanitize or validate a database query that meets specific criteria and then configure the default rule to reject all other database queries. If the database query is not to be rejected method continues at .

At a determination is made as to whether the security rules and policies allow for the database query to be sanitized where appropriate and possible . If the determination at is that the database query is not to be sanitized method moves to and allows the database query to be executed. If neither validation rejection or sanitization is performed in method it may be considered that the database query will be allowed to execute. If instead a determination is made that the database query is to be sanitized then method continues at . At a determination is made as to whether the database query includes dangerous strings or string content. If no dangerous strings or string content is detected method continues at and the database query is allowed to execute. If however dangerous strings are detected in the determination of method moves to .

At a determination is made as to whether the database query can be sanitized. The determination of whether the database query can be sanitized may be based on the security rules and policies identified at . The determination as to whether a particular database query can be sanitized is a query by query analysis. In one example each database query may be examined character by character by the rules processor component or another suitable component or system . The rules processor component is programmed or provided with an understanding of general character level SQL syntax. In some instances the type of database associated with the database query may also be identified. In some instances the rules processor may identify the database type prior to beginning its processing of the database query in order to assure that variations between databases and SQL commands associated with different types of databases are accounted for. In some instances the type of database may be dynamically determined by accessing the target database or system associated with the database query. In some instances the security rules and policies may change based on the particular type of database associated with the database query. For example at least some of the analysis of the SQL associated with the database query may change based on the determined type of database. The rules processor can perform basic identification of tokens within the database query such as string literals name strings and keywords including FROM INTO LIKE and WHERE. Based on the identified tokens one or more assumptions as to what character or characters should delimit any string that follows those items may be known. At the beginning of each token the rules processor can compare the portion of the database query beginning there to each string included within the original web request. Both the set of raw strings from the web request and a set of common or selected sets of transformations on each string of the web request e.g. uppercase lowercase conversion HTML escaping and unescaping URL encoding and decoding as well as other transformations can be used to compare to the portions of the database query. If the web request string or a transformation thereof matches the portion of the intercepted database query and if the string contains a character that would modify the syntax of the database query then the database query can be sanitized. Restated the portion of the web request string that would modify the syntax of the database query can be modified to provide database query content without the modified syntax. Web request information that may modify the syntax of the database query may include for example a string literal wrapped in single quotes containing an unescaped single quote from the web request thus causing modifications to the database query that may be associated with malicious code. An example of when a dangerous database query cannot be sanitized and therefore must be rejected is if multiple overlapping portions of the database query appear or are determined to be derived from the web request strings. In that case there may not be a well defined order or process for safely performing sanitization making the safest option a rejection of the database query.

If the database query is capable of being sanitized then method continues at where the identified database query is replaced with a sanitized version of the database query i.e. with any potential malicious code removed or modified . Once the sanitized version of the database query is created the sanitized database query can be executed at . In some instances the sanitized database query is used temporarily. For example in a .NET environment the database query may be stored as a command object s CommandText property. When performing a sanitized copy of the database query a copy of the original database query is created a sanitized version of the original query is assigned to the CommandText property the sanitized query is performed and finally the original query string is restored to the CommandText property. By making the replacement temporary and performed by the security module and or the software hook associated with the security module sanitization can be made transparent to the web service. If however the database query is not capable of being sanitized method continues at where a database query error message is prepared for presentation to the associated user or client and the execution of the unsanitized database query is blocked.

Turning to an illustration of process or method associated with the .NET SOAP extension on the client side is provided. At an outgoing .NET SOAP request is intercepted just prior to transmission to the server side. At a determination is made as to whether System.Web.HttpContext.Current.Items which can be considered the illustrated embodiment s web request local storage contains a string container created by the software hook associated the security module. If a string container does not already exist method continues at where a string container is created at from the strings of the web request located within HttpContext.Current.Request the information for which is retrieved at . Whether the string container already exists as determined at or if a new string container is created at at the string container is encoded and appended to the outgoing SOAP message in a manner allowing the encoded string container to be retrieved by the server side instance of the embodiment s SOAP extension without interfering with deserialization. The encoded string container can be a serialized representation of the strings of the web request that is encoded in such a way as to be suitable for transmission as an appendage of or to a SOAP message. Appending information to a SOAP message may include adding and or inserting information into any portion of the SOAP message such as at the beginning of the message at the end of the message or at any suitable location therein. At regular SOAP request processing is resumed i.e. the software hook returns control to the normal operations and the updated SOAP message is sent to the server.

For the server side SOAP extension instance and for all application logic that proceeds from the SOAP server s receipt of a SOAP message the contents of HttpContext.Current.Request will generally be useless. HttpContext.Current.Request may reference a web request however it is generally an internal request that was used in the transmission of the SOAP request message and not the original web request containing user input and data that will be used in the construction and subsequent analysis of the database query associated with the web service. Without the transmission of the string container most or all of the original web request s information would be inaccessible to the server side.

At a determination is made as to whether the outgoing database query is intercepted by an ASP.NET associated hook. If the software hook is not associated with ASP.NET then it is considered of the ASP software hook class and method continues at where a determination is made as to whether the Thread Local Storage TLS contains strings associated with the web request see for related operations associated with ASP based solution . If however the determination at determines that the software hook is associated with an ASP.NET hook then method continues at . At a determination is made as to whether a string container is contained in the HttpContext.Current.Items property. If a string container is contained in the HttpContext.Current.Items property then method continues at where the strings from or associated with the string container are retrieved and to where the retrieved strings are stored in the TLS. If however the HttpContext.Current.Items property does not include a string container then method continues at where a determination is made as to whether the information in HttpContext.Current.Request is valid. As described above HttpContext.Current.Request may not be valid or include information associated with an underlying web request when SOAP requests have been sent across process thread or machine boundaries. If HttpContext.Current.Request is invalid then method continues at . If however HttpContext.Current.Request is valid then method retrieves the valid strings associated with the original web request from HttpContext.Current.Request at . Once those strings are retrieved method continues at where the retrieved strings are stored in the TLS.

Returning to the determination at if neither the ASP based embodiment nor the ASP.NET based embodiment provide data structures of strings at this point then the database query can be determined not to have been caused by a web request or an error or unexpected state was encountered. In those instances method turns to a fail safe and allows the database query to issue without further inspection. However if a data structure and or information associated with the original web request is available then at an analysis of the database query in light of the web request is performed. In some instances the analysis of may be some or all of the operations illustrated in . Once the analysis is completed the appropriate response is provided and method resumes normal database query processing at unless the database query is rejected or sanitized as described in .

The preceding figures and accompanying descriptions illustrate example processes and computer implementable techniques. But environment or its software or other components contemplates using implementing or executing any suitable technique for performing these and other tasks. It will be understood that these processes are for illustration purposes only and that the described or similar techniques may be performed at any appropriate time including concurrently individually or in combination. In addition many of the steps in these processes may take place simultaneously concurrently and or in different orders than as shown. Moreover environment may use processes with additional steps fewer steps and or different steps so long as the methods remain appropriate.

In other words although this disclosure has been described in terms of certain embodiments and generally associated methods alterations and permutations of these embodiments and methods will be apparent to those skilled in the art. For example although embodiments have been primarily described within an ASP or ASP.NET environment any suitable environment including a PHP powered application or web service can be used. Accordingly the above description of example embodiments does not define or constrain this disclosure. Other changes substitutions and alterations are also possible without departing from the spirit and scope of this disclosure.

