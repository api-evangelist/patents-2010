---

title: Managing application features
abstract: A method is used in managing application features. A first XML file is extracted from a first JAR file, and a second XML file is extracted from a second JAR file. Based on an identifier that is common to the first and second XML files and a directory structure that is common to the first and second JAR files, a merging operation is executed on the first and second XML files. An application feature is derived from the results of the merging operation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09047106&OS=09047106&RS=09047106
owner: EMC Corporation
number: 09047106
owner_city: Hopkinton
owner_country: US
publication_date: 20100629
---
Information services and data processing industries in general have rapidly expanded as a result of the need for computer systems to manage and store large amounts of data. As an example financial service companies such as banks mutual fund companies and the like now more than ever before require access to many hundreds of gigabytes or even terabytes of data and files stored in high capacity data storage systems. Other types of service companies have similar needs for data storage.

Data storage system developers have responded to the increased need for storage by integrating high capacity data storage systems data communications devices e.g. switches and computer systems e.g. host computers or servers into so called storage networks or Storage Area Networks SANs. 

In general a storage area network is a collection of data storage systems that are networked together via a switching fabric to a number of host computer systems operating as servers. The host computers access data stored in the data storage systems of a respective storage area network on behalf of client computers that request data from the data storage systems. For example according to conventional applications upon receiving a storage access request a respective host computer in the storage area network accesses a large repository of storage through the switching fabric of the storage area network on behalf of the requesting client. Thus via the host computer e.g. server a client has access to the shared storage system through the host computer. In many applications storage area networks support hi speed acquisitions of data so that the host servers are able to promptly retrieve and store data from the data storage system.

Conventional storage area network management applications typically include a graphical user interface GUI that enables a network manager to graphically manage control and configure various types of hardware and software resources associated with a corresponding managed storage area network. For example one conventional storage management application generates a graphical user interface utilized by a storage administrator to graphically select interact with and manage local or remote devices and software processes associated with the storage area network. Based on use of the graphical user interface in combination with an input device such as a hand operated mouse and corresponding pointer displayed on a viewing screen or other display a storage administrator is able to manage hardware and software entities such as file systems databases storage devices volumes peripherals network data communications devices etc. associated with the storage area network. Consequently a storage management station and associated management software enables a storage administrator a person responsible for managing the storage network to manage the storage area network and its resources.

With respect to ways of handling such management people today use the World Wide Web for a variety of different and diverse tasks for example locating information ordering and buying goods on line and managing their finances. Many users expect that these applications will operate regardless of what type of computer platform is used.

Java technology which is a trademark of Sun Microsystems Inc helps provide a solution by allowing the creation of computer platform independent programs. The Java technology includes an object orientated programming language and a platform on which to run the Java applications. Java is both a compiled and an interpreted language. The source code that has been written by the application developer is compiled into an intermediate form called a Java bytecode which is a platform independent language. At a client machine the Java bytecodes are interpreted by the Java platform and the Java interpreter parses and runs each Java bytecode instruction on the computer. If the Java bytecode is run as an applet which is described below it may first be sent over the network to the client machine. 

The Java platform includes the Application Programming Interface API which is a large collection of ready made software components which provide a variety of capabilities and the Java Virtual Machine JVM which will be explained in the paragraph below. Together the JVM and the API sit on top of the hardware based computer platform and provide a layer of abstraction between the Java program and the underlying hardware.

The JVM is made up of software which can run a Java program on a specific computer platform of a client machine. Before a Java program can be run on a JVM the Java program must first be translated into a format that the JVM recognizes which is called a Java class file format. The Java class file format contains all the information needed by a Java runtime system to define a single Java class.

A Java applet is a small program that can be sent along with a Web page to a user that can perform interactive animations immediate calculations or other tasks without having to send a user request back to the server. As an example as shown in a distributed computer system includes a client computer that is coupled to a server host computer . The computer includes a browser application that in turn includes a requested Web page having an applet embedded therein capable of performing various tasks. In most situations the applet is executed by a JVM that in this example is also resident in the browser .

In order for the JVM to execute the applet the applet s requisite component files including class files images and sounds represented by files must be downloaded from the server to the JVM . Typically the server is part of a distributed network of computers such as the Internet or in some cases could be part of an intranet type of arrangement. In any case the files that are required for the JVM to run the applet include Java class files as well as resource files that are used to support the execution of the applet . Such class files includes a main class file main.class that is used by the JVM as an entry point for execution of the applet . The server also stores other class files such as b.class that are used by the JVM in the furtherance of executing the applet . Various image and sound components used in the execution of the applet are stored in resource files such as c.image .

In order for the JVM to execute the applet it may be required to download some of the class and resource files as needed. This is typically accomplished by sending a file request that takes the form of an http request to the server which responds by providing an http response that includes the URL of the requested file. By way of example the JVM issues a request to retrieve the main class file main.class to which the server responds by sending i.e. downloading the requested file i.e. main.class . This request response procedure is followed for every file for which the JVM requires to execute the applet .

This arrangement is satisfactory for executing most small applets on small local networks. However as the complexity of the applet increases thereby increasing both the size and the number of requested files the performance of the JVM may be substantially degraded since the time required to satisfy the increasingly voluminous requests for the increasingly larger files in an increasingly more complex network of computers becomes greater.

With the introduction of what is referred to as a Java Archive JAR file the performance of network Java applications such as applets is somewhat improved. A JAR file has a platform independent file format that aggregates many files into one. In those applications using JAR files multiple Java applets and their requisite components .class files images and sounds etc. can be bundled in a JAR file and subsequently downloaded to a browser in a single HTTP transaction thereby greatly improving the download speed. In addition the JAR format also supports compression which reduces the file size further improving the download time. For example referring to the applet component files are stored in a single JAR file . Using this arrangement in order for the JVM to execute the applet only a single HTTP file request is required to download the compressed JAR file that contains all the applet component files .

A Java.net.URLClassLoader URLClassLoader class loader may be used for loading classes and resources that are accessed by searching a set of URLs. The URLs can refer either to directories or to JAR files.

A JAR file can define a hierarchical structure that includes one or more folders that include files. In this case when the files are subsequently extracted for access the folders are created and the files are placed in the appropriate folders.

A method is used in managing application features. A first XML file is extracted from a first JAR file and a second XML file is extracted from a second JAR file. Based on an identifier that is common to the first and second XML files and a directory structure that is common to the first and second JAR files a merging operation is executed on the first and second XML files. An application feature is derived from the results of the merging operation.

Described below is a technique for use in managing application features. In accordance with the technique XML merging can be provided to dynamically extend features of an application.

Two common reasons for utilizing JAR files are to 1 group together a number files by appropriate criteria and 2 easily transport a group of files from one place to another. In a Java environment JAR files contain executable code files and other relevant files such as image files. The Java environment has the capability to examine the contents of the JAR files and find the code to execute. In an example implementation an application that utilizes the technique includes several JAR files. In addition in one deployment option the JAR files are located on a storage system e.g. an EMC CLARiiON storage system. These JAR files are downloaded pulled from the storage system and onto a workstation so that the JAR files may be executed to run the application on the workstation. The Java SDK URLClassLoader mechanism allows for dynamically including JAR files and classes into the system at runtime.

In at least one implementation also described below use of the technique helps provide within a GUI framework for an application an ability to merge XML at runtime based on a defined set of XML files or a directory name. In such an implementation when a directory name is provided the application automatically loads all XML files in that directory and merges them. For example in deploying the application based on Java the application has multiple separate JAR files which are included in a runtime path. If JAR files contain a same directory structure the application can make use of XML merging between the JAR files.

Such XML merge and deployment processes help support creation of an application that can be extended after being deployed. For example disjoint application plug ins can extend upon each other without having to interact beforehand.

Referring now to shown is an example of an embodiment of a computer system that may be used in connection with performing the technique described herein. The computer system includes one or more data storage systems connected to host systems through communication medium . The system also includes a management system connected to one or more data storage systems through communication medium . In this embodiment of the computer system the management system and the N servers or hosts may access the data storage systems for example in performing input output I O operations data requests and other operations. The communication medium may be any one or more of a variety of networks or other type of communication connections as known to those skilled in the art. Each of the communication mediums and may be a network connection bus and or other type of data link such as a hardwire or other connections known in the art. For example the communication medium may be the Internet an intranet network or other wireless or other hardwired connection s by which the host systems may access and communicate with the data storage systems and may also communicate with other components not shown that may be included in the computer system . In one embodiment the communication medium may be a LAN connection and the communication medium may be an iSCSI or fibre channel connection.

Each of the host systems and the data storage systems included in the computer system may be connected to the communication medium by any one of a variety of connections as may be provided and supported in accordance with the type of communication medium . Similarly the management system may be connected to the communication medium by any one of variety of connections in accordance with the type of communication medium . The processors included in the host computer systems and management system may be any one of a variety of proprietary or commercially available single or multi processor system such as an Intel based processor or other type of commercially available processor able to support traffic in accordance with each particular embodiment and application.

It should be noted that the particular examples of the hardware and software that may be included in the data storage systems are described herein in more detail and may vary with each particular embodiment. Each of the host computers the management system and data storage systems may all be located at the same physical site or alternatively may also be located in different physical locations. In connection with communication mediums and a variety of different communication protocols may be used such as SCSI Fibre Channel iSCSI and the like. Some or all of the connections by which the hosts management system and data storage system may be connected to their respective communication medium may pass through other communication devices such as a Connectrix or other switching equipment that may exist such as a phone line a repeater a multiplexer or even a satellite. In one embodiment the hosts may communicate with the data storage systems over an iSCSI or fibre channel connection and the management system may communicate with the data storage systems over a separate network connection using TCP IP. It should be noted that although illustrates communications between the hosts and data storage systems being over a first connection and communications between the management system and the data storage systems being over a second different connection an embodiment may also use the same connection. The particular type and number of connections may vary in accordance with particulars of each embodiment.

Each of the host computer systems may perform different types of data operations in accordance with different types of tasks. In the embodiment of any one of the host computers may issue a data request to the data storage systems to perform a data operation. For example an application executing on one of the host computers may perform a read or write operation resulting in one or more data requests to the data storage systems .

The management system may be used in connection with management of the data storage systems . The management system may include hardware and or software components. The management system may include one or more computer processors connected to one or more I O devices such as for example a display or other output device and an input device such as for example a keyboard mouse and the like. A data storage system manager may for example view information about a current storage volume configuration on a display device of the management system .

An embodiment of the data storage systems may include one or more data storage systems. Each of the data storage systems may include one or more data storage devices such as disks. One or more data storage systems may be manufactured by one or more different vendors. Each of the data storage systems included in may be inter connected not shown . Additionally the data storage systems may also be connected to the host systems through any one or more communication connections that may vary with each particular embodiment and device in accordance with the different protocols used in a particular embodiment. The type of communication connection used may vary with certain system parameters and requirements such as those related to bandwidth and throughput required in accordance with a rate of I O requests as may be issued by the host computer systems for example to the data storage systems .

It should be noted that each of the data storage systems may operate stand alone or may also be included as part of a storage area network SAN that includes for example other components such as other data storage systems.

Each of the data storage systems of element may include a plurality of disk devices or volumes. The particular data storage systems and examples as described herein for purposes of illustration should not be construed as a limitation. Other types of commercially available data storage systems as well as processors and hardware controlling access to these particular devices may also be included in an embodiment.

Servers or host systems such as provide data and access control information through channels to the storage systems and the storage systems may also provide data to the host systems also through the channels. The host systems do not address the disk drives of the storage systems directly but rather access to data may be provided to one or more host systems from what the host systems view as a plurality of logical devices or logical volumes LVs . The LVs may or may not correspond to the actual disk drives. For example one or more LVs may reside on a single physical disk drive. Data in a single storage system may be accessed by multiple hosts allowing the hosts to share the data residing therein. An LV or LUN logical unit number may be used to refer to one of the foregoing logically defined devices or volumes.

Components of the management system may include a graphical user interface GUI application which includes a Java applet making network calls to a management interface in data storage systems may be used in connection with interfacing with a user such as a data storage system manager. The GUI may be used to obtain input in connection with inquiries to be made regarding one or more of systems . The GUI may also be used in connection with displaying output for example in response to obtaining information for requested inquiries regarding the one or more of systems . The GUI may be used in connection with one or more applications for performing system management of one or more of systems .

For example XML x may be or include XML listed in as having path scr config replicas subsection replicas tasks as shown within full pathname and XML y may be or include XML listed in as having the same path scr config replicas subsection replicas tasks as shown within full pathname . Thus when XML x is extracted from JAR1 and XML y is extracted from JAR3 both XML x and XML y end up in the same directory scr config replicas subsection replicas tasks with filenames tasklist replicassection.xml and rm tasklist replicassection.xml respectively.

In such a case XML merging and or XML linking as described below may be used to cause XML x and XML y to be processed together as if XML x and XML y were part of the same XML file and functionality. In particular XML x and XML y share a common identifier ID1. As shown in a collapsiblePanes portion of XML x has an identifier and a collapsiblePanes portion of XML x has an identifier since these identifiers are the same REPLICAS TASKS SECTION ID the collapsiblePanes portion of XML x can be treated as incorporating the collapsiblePanes content of XML x for the purposes of producing section . Such treatment causes subsection to be included in section instead of in its own or other section.

Within an XML file a link can be provided to a directory or a file. This can be helpful to make XML more readable and can also increase application performance and reduce memory.

XML merge support allows multiple XML files to be merged together and treated as one which is useful for the GUI framework such that it allows the framework to define common XML into which plug ins can contribute.

For example the framework can define a common dashboard with a few common components and plug ins can add components to the dashboard simply by adding an XML file in the appropriate directory. The plug in s XML file is provided in a JAR file of the plug in not the framework.

One way to use XML merging is by using the directory link feature above. Otherwise a method such as a FxXMLLoader readAnMergeXML method can be used.

While the invention has been disclosed in connection with preferred embodiments shown and described in detail their modifications and improvements thereon will become readily apparent to those skilled in the art. Accordingly the spirit and scope of the present invention should be limited only by the following claims.

