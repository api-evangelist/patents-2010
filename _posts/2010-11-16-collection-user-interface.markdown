---

title: Collection user interface
abstract: Collection user interface techniques are described. In one or more implementations, a plurality of inputs are recognized as gestures received via interaction with a user interface to navigate through a file system of a computing device and select representations of objects managed by file system of the computing device, at least two of which are accessible via different devices. In response, copies of the representations are displayed by the computing device in a collection portion of the user interface. An option is output in conjunction with the collection portion by the computing device that is selectable to initiate a command to be performed using the objects that have corresponding representations included in the collection portion.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08418257&OS=08418257&RS=08418257
owner: Microsoft Corporation
number: 08418257
owner_city: Redmond
owner_country: US
publication_date: 20101116
---
The trustworthiness of applications may vary as greatly as the developers that code the applications. Users for instance traditionally obtained an application from a big box store on a computer readable storage medium e.g. an optical disc and took the medium home to install the application on a home computing device. Thus the store as well as developers of applications that were provided to the store had a strong incentive that the applications worked as desired by the user and were thus trustworthy.

With the proliferation of availability of applications via the Internet however users may be exposed to a variety of applications having varying levels of trustworthiness. For example the coding of the application may be flawed may have been written by a malicious party and so on. Therefore traditional techniques that were employed to access a file system of a computing device may be compromised by these applications.

Collection user interface techniques are described. In one or more implementations a plurality of inputs are recognized as gestures received via interaction with a user interface to navigate through a file system of a computing device and select representations of objects managed by file system of the computing device at least two of which are accessible via different devices. In response copies of the representations are displayed by the computing device in a collection portion of the user interface. An option is output in conjunction with the collection portion by the computing device that is selectable to initiate a command to be performed using the objects that have corresponding representations included in the collection portion.

In one or more implementations a plurality of copies of representations of objects is displayed in a collection portion of a user interface by a computing device. The copies are collected using gestures to specify objects from different locations in a namespace employed by the computing device. Additionally the display of the collection portion persists during navigation of the namespace to locate the representations of the objects. An option is output in conjunction with the collection portion in the user interface by the computing device that is selectable to initiate a command to be performed using the objects that have representations included in the collection portion.

In one or more implementations a first input is recognized as a first gesture to select a first representation of a first file displayed in a user interface by a computing device. In response to the recognition of the first gesture a copy of the first representation is displayed in a collection portion in the user interface. A second input is recognized as a second gesture to select a second representation of a second file displayed in the user interface by the computing device. The first and second objects are accessible via different locations in a namespace employed by the computing device. In response to the recognition of the second gesture a copy of the second representation is displayed in the collection portion in the user interface along with the copy of the first representation. An option is output in conjunction with the collection portion that is selectable to initiate a command to be performed using the first and second objects.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

As previously described the trustworthiness of applications may vary as greatly as the developers that code the applications. Users for example may access an application marketplace via the Internet that provides hundreds and even thousands of applications for download. Because of the vast number of applications that are available however as well as due to the wide range of developers that may provide them trustworthiness of the applications may vary greatly.

Collection user interface techniques are described. In one or more implementations a user interface is provided to allow a user to verify access to a file system requested by an application. Thus the application is not given direct access to the file system e.g. a namespace employed by the computing device in this example and thus has a reduced likelihood of compromising the computing device. The user interface that is employed by the computing device to manage access to the file system may employ a variety of techniques to aide navigation through the file system.

For example the user interface may provide a mechanism to make multiple selections of files in the user interface. The user interface for instance may employ a collection portion that is configured to collect files from different locations in the file system e.g. different locations in a namespace from different devices accessible via the file system and so on. An option may then be provided to initiate a command to be applied to files represented in the collection portion which may involve providing the files to an application that requested access to the files. A variety of techniques may be employed by the collection user interface further discussion of which may be found in relation to the following sections.

In the following discussion an example environment is first described that is operable to perform techniques described herein. Examples procedures are then described which are operable in the example environment as well as in other environments. Likewise the example environment is not limited to performance of the example procedures. Although the following discussion describes collection user interface techniques employed for file management these user interface techniques may be employed by a variety of different user interfaces without departing from the spirit and scope thereof.

The computing device may range from full resource devices with substantial memory and processor resources e.g. personal computers game consoles to a low resource device with limited memory and or processing resources e.g. traditional set top boxes hand held game consoles . Additionally although a single computing device is shown the computing device may be representative of a plurality of different devices such as multiple servers utilized by a business to perform operations a remote control and set top box combination an image capture device e.g. camera and a game console configured to capture gestures and so on.

The computing device may also include an entity e.g. software that causes hardware of the computing device to perform operations e.g. configures processors functional blocks and so on. For example the computing device may include a computer readable medium that may be configured to maintain instructions that cause the computing device and more particularly hardware of the computing device to perform operations. Thus the instructions function to configure the hardware to perform the operations and in this way result in transformation of the hardware to perform the operations. The instructions may be provided by the computer readable medium to the computing device through a variety of different configurations.

One such configuration of a computer readable medium is signal bearing medium and thus is configured to transmit the instructions e.g. as a carrier wave to the hardware of the computing device such as via the network . The computer readable medium may also be configured as a computer readable storage medium and thus is not a signal bearing medium. Examples of a computer readable storage medium include a random access memory RAM read only memory ROM optical discs flash memory hard disk memory and other memory devices that may use magnetic optical and other techniques to store instructions and other data.

Although the network is illustrated as the Internet the network may assume a wide variety of configurations. For example the network may include a wide area network WAN a local area network LAN a wireless network a public telephone network an intranet and so on. Further although a single network is shown the network may be configured to include multiple networks.

The computing device is illustrated as including a file management module . The file management module is representative of functionality to manage a file system . The file management module may be implemented in a variety of ways such as a stand alone application as part of an operating system of the computing device and so on.

The file system employs techniques to organize and store files by the computing device . The file system for instance may employ a hierarchy of folders to manage files e.g. executable and or library files in storage. The file system may also employ a namespace which provides techniques to manage a context in which the files may be organized using abstractions further discussion of which may be found in relation to . A variety of other file management techniques that may be employed by the file management module and file system are contemplated.

Additionally a variety of different files may be managed using the file management module . For example the files may be configured as library files. Library files generally refer to a unit of data that is referenced by another file that executes on the computing device such as an application . Thus the application is an executable file that may access a library file to process the data contained therein. Accordingly a library file may assume a variety of configurations such as a document plug in script and so forth. Likewise the application may also assume a variety of configurations such as a word processor spreadsheet application browser and so on.

The file management module is further illustrated as including a broker module and a picker module . The broker module is representative of functionality of the file management module to manage access of the application to the file system . The broker module for instance may act as an intermediary to locate files requested by the application and provide the files back to the application . Further the files may be provided without the application knowing from where the files were obtained e.g. with the application being aware of the namespace used by the file system .

Additionally the file management module may employ the picker module to configure a user interface such that a user may verify that access to the file system is to be granted. In this way the picker module may allow a user to verify that the application is accessing files as intended further discussion of which may be found in relation to . Further although access to files that are local to the computing device is described the file management module may manage the file system to control access to remote files that are accessible via a service provider over the network e.g. implemented using one or more computing devices peripheral devices that are communicatively coupled to the computing device and so on as further described in relation to .

Generally any of the functions described herein can be implemented using software firmware hardware e.g. fixed logic circuitry manual processing or a combination of these implementations. The terms module and functionality as used herein generally represent hardware software firmware or a combination thereof. In the case of a software implementation the module functionality or logic represents instructions and hardware that performs operations specified by the hardware e.g. one or more processors and or functional blocks.

The system as illustrated includes a first application and a second application which may or may not correspond to the application described in relation to . In this example both the first and second applications communicate with the broker module via one or more application programming interfaces to access the file system .

In the case of the second application a determination has been made that access to the file system is trusted or in other words the second application is trustworthy. For example the second application may be coded by a reputable software provider tested for compatibility and so on. Accordingly the second application may be permitted by the broker module to access the file system without verification by the picker module .

In one implementation this access is permitted without the second application knowing where and or how particular files are arranged in the file system . The second application for instance may be unaware of a namespace used to access the files in the file system . Therefore the broker module may convert requests from the second application received via the API into a form that is understandable to locate files of interest. In this way the broker module may still protect and manage access granted to the second application .

In another implementation the second application may be made aware of where and or how the files are arranged and located within the file system . For instance the second application may be configured to use a namespace supported by the file system such that conversion of the request is not performed by the broker module . A variety of other examples are also contemplated such as to enable direct access to the file system without interacting with the broker module to fully trusted applications.

In the case of the first application in the example illustrated in a determination may be made that access to the file system is not trusted e.g. partially trusted or not permitted whatsoever. In response the broker module may employ the picker module to verify access to the file system that is requested by the first application . The first application for instance may communicate a request via one or more APIs to the broker module to access the file system .

The broker module upon receiving this request may implement the picker module to generate a user interface . The user interface in this example is shown as a portion that includes a description of what access is being requested and what is requesting the access e.g. identify the first application . The user interface is also illustrated as including an option e.g. permit access button that is selectable to permit the requested access. An option to deny the access e.g. Deny Access button is also included in the user interface . Information within the portion of the user interface may be output such that the first application is not aware of what is contained therein and therefore is not made aware of a location of the requested data.

If the user selects the option to permit access e.g. which is illustrated as selecting the Permit Access button using a cursor control device the picker module may permit access to the requested file . A variety of different types of access may be managed by the broker and picker modules singly or in combination. Examples of such access include saving a file opening a file modifying a file moving files and so forth.

The picker module may be configured to provide access to the files via the broker module to the first application in a way such that the first application is unaware of a namespace used by the file system to manage the files . Thus the picker module may protect the file system from access by untrustworthy applications by confirming this access via the user interface . Examples of different configurations of user interfaces that may be used to interact with the file system may be found in relation to .

In one or more implementations the broker module may oversee a plurality of picker modules each configured for a respective one of a plurality of applications. Thus the broker module and the picker module may provide techniques to manage access to the files by the first and second applications while reducing a likelihood that the execution of the applications may compromise the computing device and or other computing devices e.g. one or more computing devices that implement the service provider of .

A namespace may be utilized to organize the file system into a tree structured hierarchy. Folders in the hierarchy may represent the nodes of the tree and act as containers for files and other folders whereas files are the leaves of the tree.

The namespace may be used to manage and provide access to a wide variety of files and other objects employed by the computing system . Examples of such objects include folders and files which are stored on computer readable storage devices in a local file system as well as other objects such as peripheral device communicatively coupled to the computing device remote computing devices and other extensible locations such as control panel applications e.g. executable files of an operating system of the computing device and so on.

The namespace may be used to manage these different objects in a variety of different ways such as through links managing physical storage of files and so forth. Examples of user interfaces that may be used to interact with the namespace may be found in relation to the following section.

The following section describes example user interfaces that may be implemented utilizing the previously described systems and devices. The computing device for instance may output the user interface through execution of instructions on hardware of the computing device e.g. one or more processors and or functional blocks that are configured to perform operations by the instructions. Although these techniques are described for output by the user interface of the picker module these techniques may be employed by a wide variety of different user interfaces without departing from the spirit and scope thereof.

The user interface in this example is illustrated as including a portion that displays representations of files and other objects managed by the file system . In the illustrated examples representations of image files are displayed in a My Pictures folder in a file hierarchy arranged using a namespace. The representations in this example are illustrated as thumbnails although a variety of other representations are also contemplated such as text and so on. Thus this portion of the user interface may be used to navigate through the file system to locate and arrange files and other objects.

The user interface is also displayed as including a collection portion . The collection portion is configured to enable a user of the computing device to collect representations of files and other objects from various locations in the file system as discussed in relation to . In the illustrated example the collection portion includes a representation of a folder Seattle that includes images and a representation of a document Invitation. 

The collection portion may be configured to include dynamic information. An example of this is illustrated by the 2 items selected text that specifies a number of files and other objects included in the collection portion . Other dynamic information is also contemplated such as an indication of where in the file system the files and other objects are located metadata that describes the objects and so forth.

Additionally the collection portion may include an option to initiate a command to be performed using the files and other objects represented in the collection portion . For example the picker module may use functionality to determine which commands are relevant to objects included in the collection portion and include representations of those commands that are selectable to initiate the command. In another example the command may be specified by the application i.e. the type of access desired and the picker module may represent this option in the user interface . Selection of the option may thus be used to verify that this access is to be permitted to the application as previously described in relation to .

Thus the user interface may be output in response to a variety of factors. For example the broker module may receive a request from the application to access the file system . In response the broker module may output the user interface . A variety of other examples are also contemplated. Accordingly the collection portion of the user interface may be displayed when functionality of the portion is desired but removed from the user interface when this functionality is not desired such that the user interface is not cluttered. Representations of files and other objects may be included in the collection portion in a variety of ways an example of which may be found in relation to the following figure.

The second stage illustrates an example result of the gesture of the first stage . A copy of the representation is displayed in the collection portion . Additionally the dynamic information included in the collection portion is updated to reflect that three items are currently selected in the collection portion .

Further the representation that was copied is indicated as such in the portion that is configured to interact with the file system . In this example a border of the representation is illustrated as shadowed and outlined although a variety of other display characteristics may be altered to provide this indication such as color use of an animation highlighting underlining and so on. Thus a user navigating through the file system using the portion may readily determine which files and other objects are already included in the collection portion .

A single selection of the option may then cause a command to be performed on the collection such as to import the files and objects as illustrated to the application . A variety of other commands are also contemplated such as open save upload send and so on. The collection portion may be configured to provide a variety of different visual affordances to aide interaction an example of which is discussed in relation to the following figure.

A variety of different properties of the represented file may be described such as name type date and size as illustrated as well as a variety of other properties such date modified date accessed and so on. In an implementation the output of the portion may be performed just in time upon detection of the gesture. The gesture may be detected by the computing device in a variety of ways such as using touchscreen functionality one or more cameras and so on. Further although this functionality was described in relation to the collection portion this functionality may also be employed elsewhere in the user interface such as the portion to navigate through the file system . In this way a user may navigate through the file system using the portion and collect copies of representations in the collection portion through various locations in the namespace employed by the computing device .

As illustrated a number of objects have been copied to the collection portion than can be shown at any one time using the current style of representations i.e. thumbnails. Accordingly dynamic information may be used to describe the number of objects included. In an implementation a pan gesture may be input using the user s hand to scroll through the representations in the collection portion to view each one if desired. As previously stated an option may then be selected to cause an operation to be performed using the represented objects further discussion of which may be found in relation to the following procedures.

The following discussion describes file management techniques that may be implemented utilizing the previously described systems and devices. Aspects of each of the procedures may be implemented in hardware firmware software or a combination thereof. The procedures are shown as a set of blocks that specify operations performed by one or more devices and are not necessarily limited to the orders shown for performing the operations by the respective blocks. In portions of the following discussion reference will be made to the environment of and the user interfaces of .

In response to this recognition copies of the representations are displayed by the computing device in a collection portion of the user interface block . In this example a copy of the representation e.g. Rainer in is included in the collection portion as well as the portion used to navigate through the file system .

An option is output in conjunction with the portion in the user interface by the computing device the option is selectable to initiate a command to be performed using the objects that have corresponding representations included in the collection portion block . Continuing with the previous example a variety of different options may be displayed to initiate commands using the represented objects e.g. files folders and so on. The command for instance may involve access requested by the application from the broker module determined dynamically based on types of object included in the collection portion and so on.

An option is output in conjunction with the collection portion in the user interface by the computing device that is selectable to initiate a command to be performed using the objects that have representations included in the collection portion block . As described previously a variety of different commands may be represented by the option a single selection of which may be used to cause the command to be performed using objects represented in the collection portion .

Although the invention has been described in language specific to structural features and or methodological acts it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or acts described. Rather the specific features and acts are disclosed as example forms of implementing the claimed invention.

