---

title: Generating an encoded package profile based on executing host processes
abstract: Embodiments relate to generating an encoded package profile based on executing host processes. A physical or virtual client machine can host a set of installed software packages, including operating system, application, and/or other software. A package manager tracks the set of installed packages and updates available for the installed set. The package manager and/or other logic can identify currently executing processes on the client, and determine which package(s) corresponding to that set of executing processes are hosted on the client. The package manager can generate a report to a package server and/or other remote management platform to perform management operations on the client, such as, for example, to terminate executing processes on a target client to permit package update processes to take place. Other network management actions, such as inventorying or grouping virtual machines in a cloud or other network, can likewise be performed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09003389&OS=09003389&RS=09003389
owner: Red Hat, Inc.
number: 09003389
owner_city: Raleigh
owner_country: US
publication_date: 20100525
---
The present teachings relate to systems and methods for generating an encoded package profile based on executing host processes and more particularly to platforms and techniques for inspecting a host machine to identify installed software packages corresponding to one or more executing application or other active processes and generating an encoded profile or identification of that package or packages corresponding to the executing processes.

Users of physical or virtual machines commonly install software packages including package updates to physical or virtual machines. The software packages can each contain a set of component files chosen to perform a given application or task such as for example a group of software applications drivers and or other resources used to install and use messaging or media applications. In instances a software package can contain application software operating system software drivers patches and or other software components grouped as a logical set. The package itself can be formatted in different formats including for instance as a single file entity in a compressed format and or in other data formats.

Software package update managers exist to help a user initiate and perform software package updates such as for example the yum Yellowdog update manager package manager available from Red Hat Inc. Raleigh N.C. and others. In general available software package managers are configured to interact with the set of installed packages on a client and with one or more software package repositories to directly connect to those databases and download available package updates.

The process of initiating software package updates can involve however complications such as installation related software faults. Those irregularities can occur in various scenarios including in the context of preparing package updates to distribute to machines in a managed network. For instance in a managed network which operates a comparatively large number of machines at any given time some of the client or target machines may be currently executing the application or other software which is the object of an intended package update. A systems administrator may have to learn which machines contain those currently executing applications in order to identify those machines and terminate the application or reboot the machine in order to start a subsequent package update process. Current package management platforms may not contain the capability to identify machines containing an arbitrary selected package whose associated application is running on an on the fly basis.

Similarly an administrator may at times wish to identify the packages for the currently executing processes on any machines in a managed network for instance to perform a security audit after a threat is detected which has infected a specific application or for other purposes.

Yet further managed networks may exist or operate in which the client or host machines scheduled to receive package updates do not themselves physically store the associated packages such as may be the case for virtual machines in cloud based networks which do not host or provide disk or other storage for the client population. In that case an administrator of the set of virtual machines may need to interrogate the machines to identify the executing processes of those virtual machines and then determine the subscribed packages corresponding to those processes since direct inspection of stored package objects is not possible.

Existing package update managers may not contain tools or processes to assist in performing audits of executing processes associated with installed packages in these and other scenarios. It may be desirable to provide systems and methods for generating an encoded package profile based on executing host processes in which an administrator or other user can discover the currently executing applications or other processes on a client machine or machines determine the corresponding software package or packages corresponding to those processes encode that package complement and potentially perform package update and or other configuration management operations on the client machine s .

Embodiments of the present teachings relate to systems and methods for generating an encoded package profile based on executing host processes. More particularly embodiments related to platforms and techniques for identifying a set of executing processes which are currently running or executing on a host target or client machine or machines. In aspects the set of executing processes on the client can be identified by a package manager hosted on the client machine and or by the package manager interacting with the operating system of the client machine. The set of executing processes can for instance comprise threads or services associated with one or more applications or other software executing on the client.

In aspects the package manager and or other logic can associate each process in the set of executing processes with one or more packages installed on or subscribed to by the client. Once the packages corresponding to the executing processes are identified the package manager and or other logic can encode a profile or identifier of the set of packages corresponding to the currently executing processes. The encoded identifier can be generated for instance by performing a hash function on the packages names process or application names version numbers package dates and or other package attributes or data. The package manager and or other logic can then transmit the encoded identifier of the package or packages corresponding to the set of executing processes to a remote management platform such as a package server and or other network management platform.

In aspects the package server or other remote management platform can then perform package update operations on the client machine including for instance to send a configuration command to the client to terminate the executing processes corresponding to packages to be updated. The package server can then initiate installation processes on the client to update that package or package. In aspects the package server can likewise perform other management actions on the client including for instance performing security operations on the client network management on the client such as grouping or associating clients having the same set of executing processes and or taking other actions or performing other activities. In aspects the image or profile of the client or clients whose set of executing processes and associated packages have been captured can be stored to local or remote storage for further updating or other activity.

These and other embodiments described herein address the various noted shortcomings in known package update technology and provide a user with enhanced package and system management capability for installing their software package resources with less potential for software conflicts errors or other undesirable results of updating activity.

Reference will now be made in detail to exemplary embodiments of the present teachings which are illustrated in the accompanying drawings. Where possible the same reference numbers will be used throughout the drawings to refer to the same or like parts.

In aspects as shown in the set of installed software packages can be or include packages which comprise the executable files and or other files or data associated with a set of applications installed on the one or more clients . The set of applications can be or include any application operating system utility and or other software such as for example messaging applications spreadsheet or modeling applications media applications social networking applications database applications word processing applications and or other applications or utilities and can in aspects include an operating system drivers and or components thereof. The set of applications can have an associated set of executing processes corresponding to the processes spawned by the run time executables for those applications and can include for instance processes threads services and or other executing software resources to carry out and support the set of applications while in use. The set of installed software packages can each contain a set of component files comprising for example the operating system application and or other executable files and or other files or data making up each individual package in the set of installed software packages . Each package in the set of installed software packages can have an associated set of package attributes which encodes or records package and or file names package and or component file sizes versions dates software requirements an or other attributes related to the software packages and their updates installed on the one or more clients and reflected in the set of installed software packages .

In aspects the package manager can communicate with a network interface such as an Ethernet card or port configured to connect to one or more networks such as the public Internet or other public or private networks. The package manager can thereby connect to one or more package servers and associated one or more package repositories hosting software packages including software package updates operating system resources and or other software or resources for distribution and installation of those software packages.

In aspects in general the package manager can interact with the set of installed software packages the one or more package servers and associated one or more package repositories to identify inventory configure test update and or otherwise manage the set of installed software packages operating on the one or more clients . The package manager can for example provide a user with a set of package update options displayed via user interface such as a graphical user interface or others to select various inventorying test update configuration and or other management activities on the set of installed software packages . The set of package update options can include selections for the installation and or updating of one or more installed packages various installation options such as file locations and others and or other options or parameters for the downloading of software package updates from the one or more package repositories to the set of installed software packages of the one or more clients .

The package manager can also access the set of installed software packages of the one or more clients and perform discovery and inventory operations on the set of executing processes hosted and running on the one or more clients . The package manager can perform those discovery and inventory operations to extract and identify the packages on that machine or machines which have contributed executable files that in turn have spawned the set of executing processes . In connection with determining those packages in the set of installed software packages responsible for the executable files which have spawned or instantiated the set of executing processes the package manager and or other logic can interface to the operating system of the one or more clients for instance via through an application programming interface API of the operating system . The operating system may for instance present an application programming interface API to allow the package manager to request an enumeration of the currently executing threads tasks images services and or other processes reflecting the set of executing processes currently executing or running on the one or more clients . In aspects the list of the set of executing processes may be accessed or requested via a task scheduler or manager of the operating system and or via other interfaces or resources.

In general the package manager and or other logic can associate the set of executing processes with one or more packages in the set of installed software packages installed on the one or more clients and generate an encoded identifier of those packages to transmit to the one or more package servers and or other remote management platforms or services. In aspects the encoded identifier can represent a hashed output based on any one or more of the set of attributes of the identified packages and or can be encapsulated or encoded using other techniques. The one or more package servers and or other remote management platforms or services receiving the encoded identifier can in aspects decode the encoded identifier and determine those packages in the set of installed software packages of the one or more clients which contain which have contributed or are otherwise associated with the set of executing processes . The association between executing files and the packages from which those files were installed can for example be stored and accessed from a package association table stored in the one or more repositories and or other local or remote storage. The information in the package association table can be built and maintained by the one or more package servers and or can be imported from other data stores or sources. The one or more package servers and or other logic can then used the decoded package information to perform various management or configuration operations on the one or more clients singly or collectively based on the discovered inventory of packages corresponding to the set of executing processes on the one or more clients . For instance the one or more package servers can identify the presence of one or more packages in the set of installed software packages scheduled for a package update but whose associated executable files are currently running in an active execution state. To avoid faults in attempted updates on those or other machines the one or more package servers and or other logic can transmit a command to the affected client s in the one or more clients to terminate the set of executing processes and potentially reboot those machines for package installation activity as appropriate. Upon completion of those operations update operations on those machines may proceed since the packages and associated executable files can be more safely updated or replaced.

In aspects the set of package servers and or other remote management platforms can generate further or additional management operations based on the encoded identifier of the packages corresponding to the set of executing processes . As one further example in cases where the one or more clients comprise virtual machines in a cloud based network or other virtual network as part of managed network machines having a matching or identical encoded identifier can be grouped or configured together for instance to impose security policies perform package updates and or perform other management activity on a collective basis. Other configuration and or management activities can be performed on the one or more clients based on the encoded identifier and related data.

As illustrated for example more particularly in the package manager can connect to one or more package servers and associated one or more package repositories via one or more networks . The package manager can present and carry out any selected actions based on the set of update options and or other criteria to initiate and conduct package management activity. The package manager can for instance initiate discovery and inventory activity on the one or more clients to generate the encoded identifier representing those packages having a set of component files which in turn correspond to the set of executing processes . The package manager can as noted access the set of executing processes of the one or more clients via the operating system of that machine or machines to locate the package or packages having executable files corresponding to the set of executing processes . The one or more package servers can then take a variety of package management actions based on the encoded identifier of those packages. For instance the one or more package servers can determine that one or more packages scheduled or identified for update activity has spawned a currently executing process in set of executing processes. The one or more package servers can in such cases issue a command to terminate that process or processes in order to then initiate the distribution and installation of a package update to the associated one or more clients . Other actions can be taken by the one or more package servers and or other remote management platforms or logic.

In aspects as also shown the one or more package servers can identify packages corresponding to the set of executing processes by accessing and or performing a look up in a record such as a package association table . The package association table can be built and maintained by the one or more packager servers and or other remote management platform over time accumulating information related to the package resources and machine state of the one or more clients of the managed network . In aspects the package association table and or other records representing the set of installed software packages the set of executing processes and or other resources of the one or more clients can be hosted or stored in the one or more repositories and or in other local or remote storage.

In terms of the data encoding the package association table illustrates an exemplary configuration of the package association table that may be used in embodiments of systems and methods for generating an encoded package profile based on executing host processes to correlate the set of executing processes and packages in the set of installed software packages . The package association table can capture receive record and associate various fields variables attributes and or other data representing the state of the one or more clients and their machine package resources as well as information identifying currently executing threads or other processes in the set of executing processes . The package association table can for instance record an identification and any related attributes of the set of installed software packages the set of executing processes all packages associated with or related to those processes and or other package related objects or resources of the one or more clients . In aspects as shown the package association table can be accessed by the one or more package servers and or other logic. The package association table can in instances as shown comprise a set of fields or records including the process IDs of the set of executing processes that have been last captured or recorded as of the most recent inspection or reporting event of the one or more clients . In aspects as noted the process IDs can be or include the names of threads and or other executing processes reported by the operating system of the one or more clients. The package association table can capture and store other fields or attributes related to the set of executing processes for instance the initialization or start time of those processes the memory used by those processes the communications ports used or being held in an open state by those processes and or other data or fields. In aspects the package association table can likewise store data or objects including an executable file name corresponding to each individual process ID as well as an associated package ID reflecting the package from which that executable file was extracted or installed.

In aspects as generally shown the package association table can likewise store further fields functions rules and or other attributes of the recorded packages and or component files such as version numbers epochs timestamps and or other fields and or functional data. Functional data can include a dependency field identifying any one or more other downstream processes that may depend on a currently executing process in set of executing processes . While a number of fields attributes and or other data are shown it will be appreciated that other attributes values functions data and or other information can be stored in the package association table and be used to identify package s corresponding to any currently executing process in set of executing processes . In aspects the package association table can be stored by the one or more package servers in the corresponding one or more repositories or can be stored in other local or remote storage.

In the package manager and or other logic can associate one or more package in the set of installed software packages with the set of executing processes currently operating or executing on the one or more clients . For instance the package manager can access the package association table to perform a look up of the package or packages containing the process IDs names of executable files and or other identifiers or attributes of files contained in the set of executing processes . In cases where a currently executing process is registered to or contained in more than one package all packages containing the executable files or other resources corresponding to that process can be identified. In the package manager and or other logic can generate an encoded identifier of the package or packages corresponding to the set of executing processes currently running on the one or more clients . In aspects the encoded identifier can be or include a hash output generated by applying a hash function to package names sizes and or other attributes reflected in the set of package attributes of the subject packages. In aspects when a hash function is applied that function can be or include hash operations such as secure hash algorithm version 1 SHA 1 secure hash algorithm version 2 SHA 2 secure hash algorithm version 3 SHA 3 and or other hashing algorithms or protocols known to those skilled in the art. In aspects other types of encoding other than hash algorithms can be used or in aspects encoded identification can be transmitted in a partially encoded and or other format.

In aspects the encoded identifier can comprise a single encoded object or identifier which encodes or encapsulates all packages in the set of installed software packages corresponding to the set of executing processes . In aspects the encoded identifier can comprise multiple encoded objects or identifiers which each of which separately encodes or encapsulates one or more packages in the set of installed software packages corresponding to the set of executing processes . In aspects in general the encoded identifier can thereby represent a profile identification and or enumeration of the packages in the set of installed software packages on the one or more clients which contribute executable files services and or other resources to the set of executing processes of the one or more clients which are active and running at the time of the inspection or reporting of those processes.

In the package manager and or other logic can transmit the encoded identifier of the package or packages corresponding to the set of executing processes to the one or more package servers and or other remote management platform. In aspects besides or in addition to the one or more package servers the encoded identifier can be transmitted for instance to a network management platform such as a network configuration and or security platform and or other server platform or service. In the one or more package servers and or other remote management platform or logic can decode the encoded identifier of the one or more packages corresponding to the set of executing processes on the one or more clients . The encoded identifier can for instance be decoded by various methods such as by performing a look up against a hash table and or performing other decoding processes on encoded identifier . In the package manager on the one or more clients can terminate the one or more processes in the set of executing processes which are identified and or scheduled for an update and or which are identified to be terminated or suspended for other reasons. In aspects the package manager can terminate the one or more processes whose associated package s in the set of installed software packages are scheduled for an update or other maintenance after receiving a configuration command or other data transmitted to the corresponding one or more clients by the one or more package servers . In the package manager can perform a package update on the associated one or more clients to update the identified package s whether to prepare a scheduled update or otherwise as appropriate. In aspects the package manager can access and download the appropriate package version via the one or more package servers and the corresponding one or more repositories to perform the update maintenance and or other activity.

In the one or more package servers and or other remote management platform the package manager and or other logic can group and or configure all clients in the one or more clients which have the same reported packages as reflected in encoded identifier corresponding to the same set of executing processes in managed network into a set of grouped targets or other machines as appropriate. In aspects it may be desirable to identify those machines in the one or more clients having the same set of executing processes in cases where managed network comprises a virtual and or cloud network and the one or more client machines comprise virtual machines. In such cases performing a discovery process to locate machines having the same set of executing processes may serve to locate identify and group machines for collective management activity such as pushing a package update or installing new packages to those grouped or related machines as appropriate. In the package manager and or other logic can generate an updated encoded identifier reflecting packages corresponding to the set of executing processes on the one or more clients at a subsequent time on those client or clients as appropriate. For instance the package manager can maintain a daily weekly monthly or other schedule with which to sample the set of executing processes on the one or more clients for inventorying updating and or other purposes. In as understood by persons skilled in the art processing can return to a prior processing point jump to a further processing point or end.

The foregoing description is illustrative and variations in configuration and implementation may occur to persons skilled in the art. For example while embodiments have been described in which one package manager is configured to control package enumeration and update activity including the generation of the encoded identifier in embodiments multiple package managers and or other applications software or logic can interact to control the downloading installation testing and other management of software packages to one or more client or other machines. For further example while embodiments have been described in which package update activity is conducted on one client in the one or more clients in embodiments multiple local or remote targets clients and or other machines can register to one or more images of package manager and or other logic or resources to identify executing processes identify corresponding package inventories and or to receive or perform package update or other management activity. Other resources described as singular or integrated can in embodiments be plural or distributed and resources described as multiple or distributed can in embodiments be combined. The scope of the present teachings is accordingly intended to be limited only by the following claims.

