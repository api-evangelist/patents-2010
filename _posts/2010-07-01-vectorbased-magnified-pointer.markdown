---

title: Vector-based magnified pointer
abstract: A method of rendering magnified pointing indicia including the steps of monitoring application program interface messaging and intercepting a call for a unique system pointer identifier. A stored collection of predefined vector shapes is accessed and from that a predefined vector shape from the collection is selected which is correlated to the current system pointer identifier. A convergence point may be established for maximum pointing indicia magnification in addition to a user-selectable desktop magnification level. The vector shape is scaled in synchronization with the desktop magnification level up to the convergence point whereby the vector shape is no longer scaled up once the convergence point is reached. The scaled vector shape is rasterized and displayed to an end user operating a computer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08471870&OS=08471870&RS=08471870
owner: Freedom Scientific, Inc.
number: 08471870
owner_city: St. Petersburg
owner_country: US
publication_date: 20100701
---
This application claims priority to currently pending U.S. Provisional Patent Application Ser. No. 61 222 709 filed Jul. 2 2009 entitled Magnified Pointing Indicia Method the contents of which are herein incorporated by reference.

This invention relates to magnification of computer display interfaces and more specifically to magnification of pointing indicia therein.

Low vision individuals often require magnification of computer screen interfaces to discern text and images. Magnification systems may be built into the operating system itself or may comprise feature rich third party products such as those sold under the MAGIC brand manufactured by Freedom Scientific Inc. based in St. Petersburg Fla.

A deficiency in the current state of the art is that of scaling pointing indicia such as a cursor or caret from small to large dimensions. For example all mouse pointers have a discrete minimum and a common maximum size. The minimum size is a multiple of the system metrics for the mouse pointer. Generally this metric is a 32 32 pixel square under operating systems sold by Microsoft Corporation out of Redmond Wash. under the brands WINDOWS 7 VISTA and XP. However it is common for a mouse pointer to only occupy a 16 16 square top left justified within this metric.

When the screen is magnified to a high level such as 16 fold the mouse pointer becomes pixelated and distracting to the user. Various smoothing techniques may be applied to reduce pixelation but such processes consume CPU cycles and still lead to imperfect results.

Another deficiency in the current state of the art is the over magnification of the pointing indicia. Low vision users are often limited in the magnification they can impose because the pointing indicia are magnified in step with the entire graphic user interface. Thus at high magnification levels i.e. exceeding 16 fold pointing indicia become so large they obscure much of the graphic user interface itself.

An embodiment of the present invention provides a method of rendering a magnified pointing indicia including the steps of monitoring application program interface messaging intercepting a call for a current system pointer identifier such as its handle accessing a stored collection of predefined vector shapes selecting a predefined vector shape from the collection the selected vector shape correlated to the system pointer identifier scaling the vector shape to a magnification level rasterizing the scaled vector shape and displaying the rasterized shape. Instead of or in addition to passively intercepting a call for a current system pointer identifier the operating system is actively polled as to its current settings and the current system pointer identifier is resolved.

To load mouse pointers in a Microsoft Windows environment in which the invention may be used applications call the LoadCursor API function 

If hInstance is NULL then lpCursorName contains an identifier representing one of the standard system cursors. These values may include 

If hInstance is not NULL then lpCursorName contains either a numeric or string identifier representing a graphic image contained in the application s resources. In one embodiment the present invention creates a programmatic dictionary mapping the identifier returned by lpCursorName to a correlated vector shape which may be of various formats including but not limited to CGM SVG ODG EPS PDF SWF WMF EMF and XPS . The dictionary and correlation to the pointer identifier may be performed by a number of programming techniques including but not limited to an INI file XML file CSV file database engine web service or the like. The cursor identification to vector image may be of various relationships including many to one or one to one.

LoadCursor returns a numeric handle to the cursor that was loaded. The foreground application selects the active cursor by calling the SetCursor function. This function takes one of the HCURSOR handles previously created by LoadCursor. By intercepting both of these functions it is possible to keep track of the active cursor being used by an application. By intercepting the SetForegroundWindow function it is possible to determine which application is in the foreground and hence track which application s cursor is active system wide.

The ability to smoothly scale a mouse pointer or other graphical element is greatly enhanced by using vector based images to create the initial cached rasterized images that are ultimately used for final rendering drawing to the screen . The reason for this is that the shapes and elements of the vector based images are described by a formula rather than by a bitmap. Currently all mouse pointers are described by bitmaps. Bitmaps inherently become blocky and stair stepped when magnified. And though there are post scaling treatments that can be applied to artificially smooth a scaled bitmap none produce images that are as crisp and sharply edged as images produced from a scaled vector image.

A vector based image file such as a .WMF file may be imported and correlated to one or more system pointer handles or identifiers. To facilitate efficiency and responsiveness previously rasterized shapes at various magnification levels may be stored and recalled via a cache without having to scale and rasterize the shapes again. Storage of shapes are typically performed on available storage devices which may include but are not limited to magnetic hard drives solid state drives and or RAM.

An alternative embodiment of the invention includes steps for establishing a convergence point for maximum pointing indicia magnification and establishing a user selectable desktop magnification level whereby the pointer indicia magnification and desktop magnification levels are synchronized until the convergence point is reached. After that point the desktop magnification level may increase but the magnification of the pointing indicia remains static. When the desktop magnification level drops below the convergence point then the pointing indicia magnification re synchronizes with the desktop magnification level. The convergence point for decoupling and re coupling pointer GUI magnification may be based on a number of factors including but not limited to pointer overlap of available desktop space magnification level of the GUI the size of the pointer indicia itself software application specific settings event settings i.e. typing into a cell of a spreadsheet keyboard and or mouse events i.e. mouse wheel movement or the like.

In an embodiment of the invention the convergence point is at about 16 fold magnification. In another embodiment of the invention the maximum pointing indicia magnification constitutes about twenty percent of the total desktop area as calculated from the major screen dimension. For example a desktop that is 680 480 pixels has an area of 307 200 square pixels. A pointer magnified to utilize 61 440 pixels would constitute twenty percent of the total desktop area and thus be considered a ceiling value to the pointer size. In yet another embodiment of the invention the convergence point is calculated based on a percentage of screen area according to the minor screen dimension. By using the minor screen dimension the convergence value achieves a reasonable behavior when performing in largely disproportionate screens. For example a monitor that displays a native resolution of 1360 768 pixels yields a major dimension almost 2 that of the minor In conditions like these it s preferable to use the minor dimension since that ensures that the convergence value will never exceed any dimension of the display unless explicitly requested by the user. In the above example a convergence value of 60 based on the major dimension would in fact be 816 vertical pixels and exceed the whole of the minor screen dimension. In yet another embodiment of the invention the convergence point and maximum pointing indicia magnification are application specific. For example in a spreadsheet application it may be necessary to establish a lower convergence point whereby the pointing indicia is relatively smaller to allow a user to view spreadsheet cells easier without overlap. Alternatively a testing program that requires the user to select multiple choice answers might have a higher convergence point. Application specific convergence may be preselected and or user defined according to the needs of the low vision individual.

Another embodiment of the invention provides for a user selectable desktop magnification level that is independent from a user selectable pointing indicia magnification level. In this embodiment of the invention the user invokes mouse keyboard and or other peripheral commands to modify the magnification level of the pointing indicia independently from the GUI magnification level. For example holding down one or more keys on a keyboard while moving a mouse wheel would zoom in or zoom out the GUI while holding down different keys while moving the mouse wheel would zoom in or zoom out only the pointing indicia. A first keystroke command may synchronize the GUI and pointing indicia magnification. A second keystroke command may de synchronize the GUI and pointing indicia magnification.

The invention may be embodied in one or more non transitory computer readable media having computer executable instructions for performing a method of running a software program on a computer the computer operating under an operating system the method including issuing instructions from the software program including identifying a current system pointer identifier from the operating system s application program interface accessing a stored collection of predefined vector shapes selecting a predefined vector shape from the collection the selected vector shape correlated to the current system pointer identifier scaling the vector shape to a magnification level rasterizing the scaled vector shape and displaying the rasterized shape. The instructions stored on the non transitory computer readable media execute as an application distinct from an operating system upon which it runs and interacts at a display driver level to modify screen output. Alternatively the non transitory computer readable media may include an operating system or update thereto to achieve the novel functionality of the present invention.

Turning now to low vision user manipulates views on monitor via mouse and keyboard . Pointing indicia is shown as an arrow cursor for exemplary purposes but could also be a caret. A cursor is the graphical image that represents the mouse and its movements on a Cartesian coordinate plane. It can take many shapes including but not limited to an arrow for pointing a hand an hourglass or an I shaped text selector. The caret on the other hand is the blinking indicia that is used to enter text. When low vision user types on keyboard the letter appears at the caret and the caret moves forward by 1 space. To view the relative magnification levels display text and display graphic are provided in .

In the magnification of the pointing indicia is de coupled from the magnification of the GUI. GUI is magnified to 16 fold while pointing indicia is magnified to only 4 fold. Low vision user may de couple magnification between pointing indicia and GUI using keyboard mouse or a combination thereof. Other peripherals and input systems such as voice recognition systems may be used to effectuate the event. The de coupling may also be automatically and intelligently achieved by the invention. For example a predetermined threshold of mouse inactivity may be detected to incrementally increase or decrease as desired pointing indicia magnification.

Mouse inactivity with extrinsic data may be used to make intelligent magnification decisions. For example if a large amount of text is detected on the GUI in conjunction with mouse inactivity a presumption may be made that the user is reading the text. In such case a highly magnified cursor would only obscure text viewing. Alternatively mouse movement immediately after a period of mouse inactivity may invoke a rapid stepped magnification of the pointing indicia so that it can be easily located by low vision user as he resumes use of pointing indicia . The stepped magnification may be used to provide an animated effect. In other cases a plurality of incrementally modified vector shapes may provide other animation effects such a movement rotation waveforms and the like. As the shapes are vector based sized up to the magnification level rasterized and cached the quality of the graphic and the efficiency of cycling the cached images provide a substantial advantage over the current state of the art.

Yet another embodiment of the invention includes the step of algorithmically detecting erratic movements of mouse by low vision user following a period of mouse inactivity which is indicative of difficulty in find the location of pointing indicia . Erratic movement may include but are not limited to rapid side to side movement and circular movement. Responsive to detection of erratic movements pointing indicia is magnified according to the invention for a predetermined time period then returned to its preselected magnification level. An advantage of this embodiment over the prior art is that erratic movement must follow a predetermined period of inactivity as mouse movement perceived as erratic may be intentional should the user be engaged in a software application that calls for such movement.

Turning to a pointer authoring application is anticipated by the present invention to enable users to create vector shapes and assign them to pointer sets or individual pointers. Pointer sets contain collections of different graphic images for pointer cursor that change depending on the circumstances in which they are displayed. When selecting text to edit a cursor may change to a vertical bar I beam . When panning around a document the cursor may appear as a hand. Graphic editing cursors may appear as pencils brushes and paint buckets depending on the function. When waiting for an operation to finish a wait image may appear such as an hourglass or clock. Other pointing options include selecting fill and line appearances for color patterns transparency and the like. Shapes may be assigned specific software applications. This may be accomplished by inspecting the operating system messaging to identify which application gains focus and applying the appropriate pointer set and or cursor modification as desired. Because the present method allows the rapid clean rendering of sharp and clear images at any dimension animating the pointer cursor is possible. A sequence of stylizations and or changes in dimension in the vector shape may be cached whereby the cursor may appear animated as the sequence is displayed. Mouse wheel scaling parameters and hot key combinations may be assigned to specific shapes and or sets. For example a user may hold down a keyboard combination while scrolling the mouse wheel in different directions to scale up or down the pointer cursor.

In an embodiment of the invention is shown as process . API messaging is monitored for pointer handle call . Cross check is made against vector shape database to match pointer handle call with a preexisting shape in vector shape database . Vector shape database contains one or more vector shapes stored in memory. Database may be a file directory a structured file such as XML a fully relational database or the like. Vector shape database associates pointer handle call with a correlated vector image. For example if pointer handle call requests a hand cursor image cross check determines whether a vector image exists for the hand cursor image. If not then a bit mapped image is scaled up and smoothed. However if a vector image does exist then it is scaled up to the appropriate magnification level and then rasterized into a bitmap. Vector shape is retrieved and scaling function is applied to produce magnified vector shape . Scaling is performed on a vector image by increasing or decreasing the length and width of the image. Because the scaling is done on a vector image there is no pixelation as would be seen in bit mapped scaling. Rasterizing process is applied to magnified vector shape to produce rasterized shape which is then displayed as the pointing indicia.

In an alternative method of obtaining the pointer shape includes the step of intercepting drvSetPointerShape value between operating system and display device driver . The drvSetPointerShape value is cross checked to see if there is a correlated vector shape that is indexed to drvSetPointerShape value . Using drvSetPointerShape value is most appropriate for the fifteen 15 predefined non obsolete cursor types available in the MICROSOFT WINDOWS application programming interface specification.

It will be seen that the advantages set forth above and those made apparent from the foregoing description are efficiently attained and since certain changes may be made in the above construction without departing from the scope of the invention it is intended that all matters contained in the foregoing description or shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense.

