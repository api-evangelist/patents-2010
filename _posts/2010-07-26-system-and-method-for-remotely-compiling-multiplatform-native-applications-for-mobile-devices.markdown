---

title: System and method for remotely compiling multi-platform native applications for mobile devices
abstract: A computer readable medium comprises executable instructions to: provide an SDK to a client computer comprising executable instructions for communicating with a build server, receive an HTML/Javascript source application and a configuration file referencing one or more source application files over a computer network from a client computer to the build server, transmit the HTML/Javascript source application and configuration file to multiple compile servers corresponding to each of multiple mobile device platforms, combine the HTML/Javascript source application with a mobile device platform specific framework source code for each mobile device platform on each compile server, compile the HTML/Javascript source application and framework source code on the compile server to output an executable native application for each mobile device platform, and transmit each executable native application from the compile server to the client computer over a computer network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08612947&OS=08612947&RS=08612947
owner: Adobe Systems Canada Inc.
number: 08612947
owner_city: 
owner_country: CA
publication_date: 20100726
---
The present non provisional patent application claims priority to previously filed U.S. Provisional Patent Application No. 61 230 663 filed Jul. 31 2009 the contents of which are herein incorporated by reference in their entirety as if they had formed part of the following description as originally filed in the present application.

The present invention relates generally to building software applications for mobile devices. More specifically the present invention relates to a system and method for remote compilation of software applications suitable for native execution on multiple mobile device platforms.

The use of mobile devices and in particular handheld mobile devices incorporating computing functions with cellular telephone and data communications commonly referred to as smartphones has grown rapidly in popularity in recent years. This rapid growth has been in part due to the ability of users to install software applications on such mobile devices to customize the operation of the mobile device or to offer additional features or functionality desired by users. In response there has been a growing interest to develop new software applications for mobile devices to provide for consumer demand.

However the market for mobile devices is generally fragmented with multiple types of devices built around different and incompatible mobile device platforms and offered by multiple manufacturers implementing multiple different operating systems and other key aspects differentiating one mobile device platform from another. As a result the process of developing software applications designed to run natively on mobile devices has been challenging as different versions of an application must generally be developed for each mobile device platform each requiring specialized software development skills and detailed knowledge of specific development languages with a general lack of commonality and compatibility between common mobile device platforms. In addition many popular mobile device platforms require specialized software development and or compilation of applications for their mobile device platform to be completed on a particular type or configuration of computer system. For example applications for Apple s iPhone require development on an Apple hardware architecture and Apple software configuration including developing an application in the Objective C language and compiling the application using multiple software components such as Xcode and the iPhone software development kit SDK for example. Similarly applications for Blackberry and Windows Mobile mobile devices require development on a machine running Microsoft Windows and with a particular software configuration including multiple specific development and compiling software components and tools while applications for the Android Nokia Symbian Palm Pre and W3C Widgets mobile device platforms may be developed on machines running several types of operating systems but each require specific and differing software configurations for application development and compiling. Also the process for compiling or building a mobile device application for a single particular platform such as those noted above has commonly required execution of multiple command line steps adding to the time and effort required to build multiple versions of a particular application for use on individual mobile device platforms.

Further complicating the development of mobile device software applications for multiple mobile device platforms has been the differing application programming interface API features and specifications for accessing and utilizing many of the native features and services available on each different mobile device platform. For example the APIs and required application function calls required to access native features such as geolocation such as provided by a global positioning system receiver in a mobile device vibration accelerometer contacts and other native features in common mobile device platforms are all different requiring individual and specialized knowledge for developing native software applications for each platform. Such specialized and incompatible software development requirements has further made developing software applications for multiple mobile device platforms time consuming and inefficient using existing techniques and approaches.

Accordingly in view of the above a need exists for a system and method to facilitate the development of native mobile device applications for multiple different and typically incompatible mobile device platforms.

It is an object of the present invention to provide a system and method for remotely compiling software applications for mobile devices that addresses some of the limitations of the prior art.

Another object of the present invention to provide a system and method for remotely generating native software applications for multiple mobile device platforms that addresses some of the limitations of the prior art.

It is a further object of the invention to provide a computer readable medium and computer implemented method of automated remote compiling of native mobile device applications for multiple mobile device platforms that addresses some of the limitations of the prior art.

According to an embodiment of the invention a computer readable medium is provided comprising executable instructions to provide an SDK to a client computer comprising executable instructions for communicating with a build server receive an HTML Javascript source application and a configuration file referencing one or more files of said source application over a computer network from a client computer to said build server transmit said HTML Javascript source application and said configuration file to multiple compile servers corresponding to each of multiple mobile device platforms combine said HTML Javascript source application with a mobile device platform specific framework source code for each said mobile device platform on each said compile server compile said HTML Javascript source application and said framework source code on said compile server to output an executable native application for each said mobile device platform and transmit each said executable native application from said compile server to said client computer over a computer network.

According to another embodiment a computer readable medium is provided comprising executable instructions to receive an HTML Javascript source application and a configuration file comprising developer certificates corresponding to multiple mobile device platforms over a computer network from a client computer to a build server transmit said HTML Javascript source application and said configuration file to multiple compile servers corresponding to each of said multiple mobile device platforms combine said HTML Javascript source application with a mobile device platform specific framework source code for each said mobile device platform on each said compile server compile said HTML Javascript source application and said framework source code on said compile server to output an executable native application for each said mobile device platform sign each said executable native application using said developer certificate corresponding to each said executable native application to output a signed native application for each said mobile device platform and transmit each said signed native application from said compile server to said client computer over a computer network.

According to a further embodiment of the invention a computer implemented method for automated remote compiling of native applications for multiple mobile device platforms the method comprising providing an SDK to a client computer comprising computer executable instructions for communicating with a build server over a computer network receiving an HTML Javascript source application and a configuration file referencing one or more files of said source application over a computer network from a client computer to said build server transmitting said HTML Javascript source application and said configuration file to multiple compile servers corresponding to each of multiple mobile device platforms combining said HTML Javascript source application with a mobile device platform specific framework source code for each said mobile device platform on each said compile server compiling said HTML Javascript source application and said framework source code on said compile server to output an executable native application for each said mobile device platform and transmitting each said executable native application from said compile server to said client computer over a computer network.

Further advantages of the invention will become apparent when considering the drawings in conjunction with the detailed description.

Build server includes standard computing components for transmitting and receiving data to and from other computers connected over the network including user computer compile servers and and optionally also optional provisioning server . In particular build server includes or is connected to at least one storage repository not shown for storing data which may be transmitted or received to or from other computers. Such storage repository may comprise a conventional data storage device such as a hard disk or solid state memory located with and connected directly to build server or may alternatively comprise a remote data storage repository connected to build server such as a network storage appliance for example. Such build server storage repository may comprise a software development kit or SDK which may be accessed by a user computer and provided to the user computer over network . Such an SDK may comprise one or more software development tools which may be executed on a user computer to facilitate development of software applications for multiple mobile device platforms. In one embodiment the SDK may comprise a script or program expressed in any suitable scripting or programming language for example to facilitate communication between a user computer and the build server over a computer network such as for transmitting HTML Javascript software applications and other data from a user computer to be received by the build server . In another embodiment the SDK may optionally also comprise one or more software development programs to facilitate development of mobile device applications such as an emulator program to emulate multiple mobile device platforms for use in testing and or debugging of mobile device applications written by a user on a user computer or a plugin application for an integrated development environment running on a user computer to facilitate development of mobile device applications on the user computer and transmission of such mobile device applications over the computer network to be received by the build server for compiling for execution on multiple mobile device platforms.

Compile Server A includes standard computing components for sending and receiving data to and from build server . Compile Server A also comprises particular computing components for receiving an HTML Javascript source mobile device application from build server and for compiling the HTML Javascript source application into an executable native application for at least one particular mobile device platform. In one embodiment compile server A comprises an Apple Macintosh computer system including an Apple operating system executing on compile server A that is suitable for compiling a HTML Javascript source application received from build server into an executable native application for an Apple mobile device platform such as the iPhone platform for example. In particular compile server A includes or is connected to at least one compile storage repository not shown for storing data which may be transmitted and or received from other computers such as HTML Javascript applications received from build server or compiled executable native mobile phone applications for example. Such compile storage repository may comprise any suitable data storage device such as a hard disk or solid state memory located with and connected directly to compile server A or may alternatively comprise a remote data storage repository connected to compile server A such as a network storage appliance for example. Such compile server storage repository may comprise at least one framework source code package which may be combined with an HTML Javascript source application received from build server in preparation for compiling to output an executable native mobile device application for a particular mobile device platform such as the Apple iPhone platform for example. In another embodiment compile server A or an associated compile storage repository may also comprise additional data for use in compiling mobile device applications such as additional source code or applications related to additional or optional features which may be added to a compiled executable native mobile device application during compiling for example.

Similar to as described above compile server B includes standard computing components for sending and receiving data to and from build server . Compile Server B also comprises particular computing components for receiving an HTML Javascript source mobile device application from build server and for compiling the HTML Javascript source application into an executable native application for at least one particular mobile device platform. In one embodiment compile server B comprises a Linux and or UNIX server computer system including a Linux and or UNIX operating system executing on compile server B that is suitable for compiling a HTML Javascript source application received from build server into an executable native application for at least one of an Android Palm Pre Nokia Symbian and W3C Widget mobile device platforms for example. In particular compile server B includes or is connected to at least one compile storage repository not shown for storing data which may be transmitted and or received from other computers such as HTML Javascript source applications received from build server or compiled executable native mobile phone applications for example. Such compile storage repository may comprise any suitable data storage device such as a hard disk or solid state memory located with and connected directly to compile server B or may alternatively comprise a remote data storage repository connected to compile server B such as a network storage appliance for example. Such compile server storage repository may comprise at least one framework source code package which may be combined with an HTML Javascript source application received from build server in preparation for compiling to output an executable native mobile device application for a particular mobile device platform such as Android Palm Pre Nokia Symbian and W3C Widget mobile device platforms for example. In another embodiment compile server B or an associated compile storage repository may also comprise additional data for use in compiling mobile device applications such as additional source code or applications related to additional or optional features which may be added to a compiled executable native mobile device application during compiling for example.

Further and similar to as described above compile server C also includes standard computing components for sending and receiving data to and from build server . Compile Server C also comprises particular computing components for receiving an HTML Javascript source mobile device application from build server and for compiling the HTML Javascript source application into an executable native application for at least one particular mobile device platform. In one embodiment compile server C comprises a Microsoft Windows server computer system including a Microsoft Windows operating system executing on compile server C that is suitable for compiling a HTML Javascript source application received from build server into an executable native application for at least one of Windows Mobile and Blackberry mobile device platforms for example. In particular compile server C includes or is connected to at least one compile storage repository not shown for storing data which may be transmitted and or received from other computers such as HTML Javascript source applications received from build server or compiled executable native mobile phone applications for example. Such compile storage repository may comprise any suitable data storage device such as a hard disk or solid state memory located with and connected directly to compile server C or may alternatively comprise a remote data storage repository connected to compile server C such as a network storage appliance for example. Such compile server storage repository may comprise at least one framework source code package which may be combined with an HTML Javascript source application received from build server in preparation for compiling to output an executable native mobile device application for a particular mobile device platform such as Windows Mobile and Blackberry mobile device platforms for example. In another embodiment compile server C or an associated compile storage repository may also comprise additional data for use in compiling mobile device applications such as additional source code or applications related to additional or optional features which may be added to a compiled executable native mobile device application during compiling for example.

Optional provisioning server includes standard computing components for sending and receiving data to and from other computers connected to network . In particular optional provisioning server is connected to at least one provisioning storage repository not shown . Such provisioning repository may comprise any suitable data storage device such as a hard disk or solid state memory located with and connected directly to provisioning server or may comprise a remote data storage facility connected to provisioning server . In one embodiment optional provisioning server may comprise executable native mobile device applications for multiple mobile device platforms which may be received over computer network from build server either directly or optionally through a user computer . Optional provisioning server may also optionally be accessible by one or more mobile devices on multiple mobile device platforms such by over computer network to connect to mobile devices directly or through another user computer for example to transmit executable native mobile device applications corresponding to one of multiple mobile device platforms to mobile devices for installation and use on each such mobile device for example. In one embodiment optional provisioning server may provide executable native mobile device applications for multiple mobile device platforms to a restricted set of mobile device users such as to a corporate group of multi platform mobile devices related to a corporation for example. In another embodiment optional provisioning server may comprise one or more public distribution services for providing mobile device applications to one or more particular type of mobile device platform such as the Apple iTunes App Store for iPhone mobile devices the Blackberry AppWorld store for Blackberry mobile devices the Android Marketplace for Android mobile devices and the Palm Pre App Catalog for Palm Pre mobile devices for example.

In an embodiment of the invention one or more of the following program modules and data files may be stored in the memory of the computer an operating system module and a software development kit or SDK module .

The operating system module may comprise any known executable operating system instructions such as may be suitable for controlling the general operations of a networked user computer and in particular may comprise instructions for handling various system services such as file services or for performing hardware dependent tasks. Operating system module may also comprise instructions for standard computer operation including receiving input from input devices such as a keyboard or mouse and for displaying output in a graphical format on a monitor for example. In particular embodiments operating system module may comprise one or more known proprietary or open source computer operating systems such as for example Windows MacOS UNIX or Linux operating systems.

The exemplary SDK module comprises instructions for communicating with a build server over a computer network to transmit data from the user computer such as mobile device software application source code to be received by the build server . In one embodiment the SDK module includes an exemplary mobile device platform independent HTML Javascript source application for transmission from the user computer to be received by the build server . The exemplary HTML Javascript source application may be stored as a sub module of SDK module and may comprise one or more data files including HTML Javascript code as well as optionally one or more of cascading style sheet CSS files icon files multimedia image audio video files or other data files comprising part of the HTML Javascript source application. In such a manner the HTML Javascript source application may comprise a software application intended for use on multiple mobile device platforms and expressed as an HTML Javascript web application. In an embodiment of the invention the SDK module includes instructions to transmit an exemplary configuration data file from the user computer over computer network to be received by the build server in conjunction with an HTML Javascript source application . The configuration file may be stored as a sub module of SDK module and may preferably reference the one or more data files comprising the HTML Javascript source application such as an HTML and or Javascript file and optionally also one or more of CSS icon multimedia or other related files comprising part of application . In another embodiment configuration file may further include specification of one or more options for compiling of the HTML Javascript source application such as which mobile device platforms for which application is to be compiled or additional program features to be added during compilation of application for example. In a particular embodiment the configuration file may comprise a Javascript Object Notation JSON file including references to one or more files comprising the HTML Javascript source application and or one or more options for compiling the HTML Javascript source application by a compile server for example. In another embodiment configuration file may also comprise one or more developer verification certificates such as to verify the identity and or authority of a developer of an HTML Javascript source application during or following the compilation process to produce an executable native mobile device application for example or alternately may comprise references to one or more developer verification certificates.

In one embodiment the SDK module may be downloaded by the user computer from the build server and may include instructions executable by the user computer to communicate with the build server such as to transmit a source application and or configuration file to the build server or to receive a compiled executable native mobile device application from the build server for example. In a simplistic embodiment the SDK module may comprise a relatively simple script or similar code including instructions executable by the user computer to communicate with build server such as to transmit source application and or configuration file to build server and optionally also to receive one or more compiled executable native mobile device application from build server .

In a particular embodiment SDK module may comprise part of an integrated development environment IDE running on user computer . In such a case SDK module may comprise a plugin for an IDE and may include instructions for communicating with build server over computer network such as to transmit an HTML Javascript source application and configuration file written using the IDE on the user computer over computer network to be received by the build server for example. In such an embodiment the IDE running on user computer and used to write the HTML Javascript source application may be any suitable known IDE tool available for developing HTML Javascript based applications such as Eclipse Visual Studio Dreamweaver Textmate and Xcode IDEs for example. In such an embodiment the SDK module may comprise a plugin for an IDE and may be downloaded to the user computer from the build server . In such case SDK module may comprise instructions executable by the user computer within the IDE to communicate with the build server such as to transmit a source application and or configuration file to the build server or to receive a compiled executable native mobile device application from the build server for example.

In a further embodiment SDK module may comprise part of a custom program for developing HTML Javascript source applications on a user computer such as a mobile device emulator program for example. In such an embodiment the mobile device emulator program or other custom program may be used to write and or test debug an HTML Javascript source application as well as to transmit the source application and configuration file to be received by the build server . In such an embodiment the SDK module may comprise a mobile device emulator and may be downloaded to the user computer from the build server . In such case SDK module may comprise instructions executable by the user computer to provide emulation of one or more mobile device platforms and also to communicate with the build server such as to transmit a source application and or configuration file to the build server or to receive a compiled executable native mobile device application from the build server for example.

In an optional embodiment of the present invention the SDK module may additionally comprise an optional status sub module not shown comprising instructions to communicate with a build server over network to receive status information regarding the status of a compiling process for an HTML Javascript source application transmitted to the build server from the user computer . More particularly such status sub module of SDK module may comprise instructions to communicate with an optional status module on build server and may receive either static and or dynamically updating status information from build server indicating the status of the compilation of an HTML Javascript source application transmitted from the user computer until the compilation of multiple platform specific executable mobile device applications is completed for example. Such status sub module of SDK module may also optionally comprise instructions to request status information from the build computer and such instructions may be executed on the user computer from a control line interface or from within an IDE or custom program such as a mobile device emulator program running on user computer for example such as are described above. Accordingly a status sub module of SDK module may further comprise instructions to display status information received from build server on user computer such as at a command line interface or within an IDE or custom program such as a mobile device emulator for example.

The above described program modules incorporate instructions to implement processing operations associated with aspects of the invention. Various embodiments of the processing operations of the above described program modules are described below with reference to . The modules stored in memory are exemplary and additional modules can be included. It should be appreciated that the functions of the presented modules may be combined. In addition a function of a module need not be performed on a single machine instead the function may be distributed across a network to one or more other computers if desired for example. It is the functions of the invention that are significant not where they are performed or the specific manner in which they are performed.

In an embodiment of the invention one or more of the following program modules and data files may be stored in the memory of the build server computer an operating system module a build server module an executable application server module and an optional status module

Similar to operating system module described above in reference to the operating system module may comprise instructions for handling various system services for build server computer such as file services or for performing hardware dependant tasks. Operating system module may also comprise instructions for standard computer operation including receiving input from input devices such as a keyboard or mouse and for displaying output in a graphical format on a monitor for example. In one embodiment operating system module may comprise a particular operating system platform such as any suitable known operating system such as Microsoft Windows MacOS UNIX and Linux for example. In a particular embodiment operating system module may comprise a Linux operating system and more particularly a Linux web server operating system such as an Apache server operating system for example.

The build server module comprises instructions for receiving data from a user computer including receiving an HTML Javascript source application for compiling to form multiple mobile device specific executable native mobile device applications and or to receive a configuration data file associated with the HTML Javascript source application to be compiled . The build server module also comprises instructions to transmit and receive data to and from one or more compile servers such as compile servers A B and C. In a particular embodiment build server module comprises instructions to transmit an HTML Javascript source application and configuration file received from a user computer to one or more compile servers to be compiled into multiple platform specific executable native mobile device applications. In one embodiment build server module may optionally store a copy of an HTML Javascript source application and configuration file received from a user computer in build server application storage repository prior to or in conjunction with transmitting the HTML Javascript source application and configuration file to one or more compile servers . In a further embodiment build server module may additionally comprise instructions to receive multiple platform specific executable native mobile device applications from one or more compile servers following compilation.

Build server module may also comprise an executable application server sub module which comprises instructions to provide multiple platform specific executable native mobile device applications received from one or more compile servers to a user computer . In one embodiment following receipt of multiple platform specific executable mobile device applications from one or more compile servers the executable application server module may comprise instructions to transmit the multiple platform specific executable mobile device applications directly to a user computer such as over network or alternatively may transmit the executable applications to one or more provisioning servers for distribution to mobile device users. In a further embodiment executable application server module may comprise instructions to provide the multiple platform specific executable mobile device applications to either a user computer or to one or more provisioning servers by means of providing a static uniform resource locator URL referencing each mobile device application such that the multiple mobile device applications may be accessed from the build server such as over network . Such static URL links provided by build server may preferably also be predictable such as by use of a common URL structure associated with each user computer for providing the multiple mobile device applications for example.

Build server module may optionally also comprise an optional status sub module which comprises instructions to provide status information to a user computer regarding the status of compilation for an HTML Javascript source application received from the user computer . In one embodiment optional status module may comprise instructions to provide static and or dynamically updated status indicator information to a user computer indicating the status of the compilation of an HTML Javascript source application received from the user computer until the compilation of multiple platform specific executable mobile device applications is completed for example. In an alternative optional embodiment status module may comprise instructions to send one or more status messages to a user computer providing status information for the compilation of an HTML Javascript source application received from the user computer .

In an embodiment of the invention one or more of the following program modules and data files may be stored in the memory of the exemplary compile server an operating system module a compile server module a framework source code sub module and platform compile sub module .

Similar to module described above in reference to the operating system module may comprise instructions for handling various system services for compile server such as file services or for performing hardware dependant tasks. Operating system module may also comprise instructions for standard computer operation including receiving input from input devices such as a keyboard or mouse and for displaying output in a graphical format on a monitor for example.

Compile server module comprises instructions for receiving an HTML Javascript source application and or an associated configuration file from build server and combining the HTML Javascript source application with one or more mobile device platform specific framework source code files in preparation for compiling a corresponding mobile device platform specific executable native application. Compile server module also comprises instructions for passing the combined HTML Javascript source application and platform specific source code to the platform compile sub module for mobile device platform specific compilation. Compile server module further comprises instructions to transmit the compiled platform specific executable native mobile device application output by platform compile sub module to be received by build server .

In an optional embodiment of the invention compile server module may additionally comprise instructions to combine the HTML Javascript source application received from build server with one or more optional source code files as may be specified in the configuration file received from build server such as to add optional features to the HTML Javascript source application prior to compiling. In such an optional embodiment optional source code files may be combined with the HTML Javascript source application either before or after the mobile device platform specific framework source code is combined with the source application . As described above optional source code may comprise source code instructions to include one or more of advertising features such as ad ware for displaying advertising in a mobile device application analytical features such as tracking and reporting user patterns and statistics validation features such as validating the HTML Javascript source application prior to or during compiling optimization features such as optimizing HTML Javascript source application to optimize compilation and or execution of a mobile device application obfuscation features such as obfuscating and or minifying HTML Javascript source application to reduce likelihood of reverse compilation and further optimize execution of a mobile device application for example.

Framework source code sub module comprises framework source code instructions to enable an HTML Javascript application programming interface API to expose native functions and or features for a mobile device platform. Such native functions and or features for a mobile device platform may comprise one or more of geolocation such as GPS accelerometer sound camera vibration contacts and local or offline storage for example which may be available only to native mobile device applications running on a particular mobile device platform. The framework source code instructions may be combined with an HTML Javascript source application may also be referred to as a code wrapper for an HTML Javascript source application such that when the resulting combined source application and framework source code are compiled an executable native mobile device application is produced. Framework source code sub module comprises framework source code instructions for at least one specific mobile device platform such as for one or more of iPhone Android Nokia Symbian Windows Mobile Palm Pre and Blackberry mobile device platforms for example.

Platform compile module comprises instructions to compile the combined HTML Javascript source application and framework source code as required for at least one specific mobile device platform to produce an executable native mobile device application for a particular mobile device platform. Accordingly platform compile module comprises instructions and installed software components required for compiling applications for at least one specific mobile device platform. In one exemplary embodiment where compile server is an exemplary Apple xServe compile server operable to compile iPhone mobile device applications platform compile module comprises all required instructions to compile an executable native iPhone application including the Apple xCodebuild tool and the Apple iPhone SDK instructions for example. In a further exemplary embodiment where compile server is an exemplary Linux compile server operable to compile Android mobile device applications platform compile module comprises all required instructions to compile an executable native Android application including Java 1.5 Android Ant tool and Android SDK instructions for example.

In a particular embodiment platform compile module additionally comprises instructions to authenticate a compiled executable native mobile device application for a specific mobile device platform. For example in an exemplary Apple xServe compile server for compiling iPhone applications according to such particular embodiment the platform compile module additionally comprises instructions to authenticate the compiled executable native iPhone application using a developer certificate received from user computer and transmitted to compile server by build server .

In the second processing operation of an HTML Javascript source application and configuration file are received on build server . Processing operation may be implemented using build server module on build server to receive HTML Javascript source application and an associated configuration file from user computer such as over computer network according to known methods. As described above SDK module on user computer may be used to transmit the HTML Javascript source application and configuration file to build server . HTML Javascript source application may comprise any suitable software application intended to be run on multiple mobile device platforms and expressed as a web application using HTML Javascript. In one embodiment the HTML Javascript source application may comprise one or more data files including HTML Javascript code as well as optionally one or more of cascading style sheet CSS files icon files multimedia image audio video files or other data files comprising part of the HTML Javascript source application. Further as described above configuration file may comprise one or more references to one or more data files comprising the HTML Javascript source application such as an HTML and or Javascript code file and optionally also one or more of CSS icon multimedia or other related files comprising part of source application . In another embodiment configuration file may further include specification of one or more options for compiling of the HTML Javascript source application such as which mobile device platforms for which application is to be compiled or additional program features to be added during compilation of application for example. In a particular embodiment the configuration file may comprise a Javascript Object Notation JSON file including references to one or more files comprising the HTML Javascript source application and or one or more options for compiling the HTML Javascript source application by a compile server for example. In another embodiment configuration file may also comprise one or more developer verification certificates such as to verify the identity and or authority of a developer of an HTML Javascript source application during or following the compilation process to produce an executable native mobile device application for example or alternately may comprise references to one or more developer verification certificates. In a particular embodiment the HTML Javascript source application and configuration file may optionally be received in a compressed format such as in a .zip compressed package wherein the source application and configuration file may then be decompressed prior to later compiling steps conducted on compile servers for example.

In the next processing operation of the HTML Javascript source application and configuration file are transmitted to multiple compile servers corresponding to multiple mobile device platforms. Processing operation may be implemented using user build server module on build server which transmits the HTML Javascript source application and configuration file to multiple compile servers by means of data connections to compile servers such as direct data connections or alternatively by connection over a computer network such as network according to known methods. In one embodiment exemplary compile server A may comprise an Apple xServe compile server for compiling the HTML Javascript source application for native execution on the iPhone mobile device platform in which case compile server A may run Apple xCode development tools and the Apple iPhone SDK as required for compilation of iPhone native applications for example.

In another embodiment exemplary compile server B may comprise a Linux compile server for compiling the HTML Javascript source application for native execution on one or more of the Android Nokia Symbian Palm Pre and W3C Widget mobile device platforms. In such an embodiment Linux compile server may run Java 1.5 and the ANT and Android SDK for the Android platform the S60 SDK for the Nokia and Symbian platforms the palm package tool for the Palm Pre platform and a .zip compression tool for the W3C Widget platform for example.

In yet a further embodiment exemplary compile server C may comprise a Windows compile server for compiling the HTML Javascript source application for native execution on one or more of the Windows Mobile and Blackberry mobile device platforms. In such an embodiment Windows compile server may run Visual Studio 2008 Pro Microsoft ActiveSync .NET compact framework 2.0 and 3.5 and Windows Mobile 6.x SDK development tools for the Windows Mobile platform and may run Java 1.6 JDK the Blackberry JDK and the Blackberry Signing Authority Tool for the Blackberry mobile device platform for example.

In another embodiment build server may store a copy of the HTML Javascript source application and or the associated configuration file either prior to or following their transmission to the multiple compile servers in processing operation . In such an embodiment the HTML Javascript source application and or the configuration file may be stored using the build server application storage repository connected to build server .

In the next processing operation of the HTML Javascript source application is combined with framework source code for each mobile device platform. Processing operation may be implemented using compile server module running on each of compile servers for each of the multiple mobile device platforms to which the HTML Javascript source application is to be compiled to result in a combined HTML Javascript application including the framework source code . As described above a framework source code file is defined for each of the mobile device platforms desired for compilation to enable an HTML Javascript application programming interface API to expose native functions and or features for each of the corresponding mobile device platforms. Framework source code files for each mobile device platform supported by a particular compile server may be stored on compile server storage repository for example. Such native functions and or features exposed and enabled for each mobile device platform by the corresponding framework source code may comprise one or more of geolocation such as GPS accelerometer sound camera vibration contacts and local or offline storage function for example which may be available only to native mobile device applications running on a particular mobile device platform. The framework source code may also be referred to as a code wrapper for an HTML Javascript source application for a particular mobile device platform may be combined with the HTML Javascript source application by the compile server module of the particular compile server corresponding to the particular mobile device platform such that when the resulting combined source application and framework source code are compiled an executable native mobile device application is produced. For example in an embodiment where compile server A is an exemplary Apple xServe server corresponding to the iPhone mobile device platform the compile server module may combine the HTML Javascript source application with an iPhone framework source code retrieved from compile server storage repository prior to compiling by the Apple xServe compile server . In another example where compile server B is a Linux server for compiling applications for the Android Nokia Symbian Palm Pre and W3C Widgets mobile device platforms the compile server module may combine the HTML Javascript source application with each of an Android framework source code a Nokia framework source code a Symbian framework source code a Palm Pre framework source code and a W3C Widgets framework source code all of which may be stored in the storage repository connected to Linux compile server prior to compiling by the Linux compile server .

In an optional embodiment processing operation may additionally comprise combining the HTML Javascript source application with one or more optional source code files in addition to the framework source code which may be implemented by compile server module . Such optional source code files may be specified in the configuration file associated with the HTML Javascript source application . Optional source code files may comprise source code to add one or more of the following exemplary optional features to the HTML Javascript source application advertising features such as ad ware for displaying advertising and or links to advertising in a mobile device application analytical features such as tracking and reporting user patterns and statistics for a mobile device application validation features such as validating the HTML Javascript source application prior to or during compiling optimization features such as optimizing the HTML Javascript source application to optimize compilation and or execution of a mobile device application and obfuscation features such as obfuscating and or minifying HTML Javascript source application to reduce likelihood of reverse compilation and further optimize execution of a mobile device application for example. In such optional embodiment the combination of such optional source code files with the HTML Javascript source application may be performed either before or after the mobile device specific framework source code is combined with the HTML Javascript source application according to processing operation .

In the next processing operation of the combined HTML Javascript source application and framework source code are compiled to output executable native applications for each mobile device platform. Processing operation may be implemented using the platform compile module on each of compile servers which may compile the combined HTML Javascript source application and framework source code specific to each desired mobile device platform according to a particular compilation process suited to or required for each desired mobile device platform. In an embodiment where compile server A is an Apple xServe compile server for compiling applications for the iPhone mobile device platform the platform compile module on compile server may compile the combined HTML Javascript source application and iPhone framework source code by executing an xcodebuild command such as through a usr bin xcodebuild command line interface on compile server to output at least one object file comprising an executable native iPhone mobile device application suitable for native execution on an iPhone mobile device.

In an embodiment where compile server B is a Linux compile server for compiling applications for the Android mobile device platform the platform compile module on compile server may compile the combined HTML Javascript source application and Android framework source code by executing the ANT command such as by executing the ANT command from a command line within the file directory containing the combined source application and Android framework source code on compile server to output at least one binary .apk file comprising an executable native Android mobile device application suitable for native execution on an Android mobile device.

In an embodiment where compile server B is a Linux compile server for compiling applications for the Nokia and Symbian mobile device platforms the platform compile module on compile server may compile the combined HTML Javascript source application and Nokia and or Symbian framework source code by generating a p list information file and executing a .zip compression packaging process such as through a command line interface on compile server to output at least one compressed .wgz file comprising an executable native Symbian mobile device application suitable for native execution on a Nokia and or other Symbian mobile device.

In an embodiment where compile server B is a Linux compile server for compiling applications for the Palm Pre mobile device platform the platform compile module on compile server may compile the combined HTML Javascript source application and Palm Pre framework source code by executing the palm package command such as by using a command line interface on compile server to output at least one .ipk file comprising an executable native Palm Pre mobile device application suitable for native execution on a Palm Pre mobile device.

In an embodiment where compile server B is a Linux compile server for compiling applications for the W3C Widgets mobile device platform the platform compile module on compile server may compile the combined HTML Javascript source application and W3C Widgets framework source code by generating a p list information file and executing a .zip compression packaging process such as through a command line interface on compile server to output at least one compressed .wgt file comprising an executable native W3C Widgets mobile device application suitable for native execution on a W3C Widgets compliant mobile device.

In an embodiment where compile server C is a Windows compile server for compiling applications for the Windows Mobile mobile device platform the platform compile module on compile server may compile the combined HTML Javascript source application and Windows Mobile framework source code by executing the devenv.exe command such as through a command line interface on compile server to output at least one binary .exe and or .cab file comprising an executable native Windows Mobile mobile device application suitable for native execution on a Windows Mobile mobile device.

In an embodiment where compile server C is a Windows compile server for compiling applications for the Blackberry mobile device platform the platform compile module on compile server may compile the combined HTML Javascript source application and Blackberry framework source code by executing the rapc.exe command such as through a command line interface from within the Blackberry SDK on compile server to output at least one binary .cod file comprising an executable native Blackberry mobile device application suitable for native execution on a Blackberry mobile device.

In the last processing operation of the executable native applications are transmitted to user computer . Processing operation may be implemented using compile server module on compile servers and typically also executable application server module on build server . Following the completion of compile operation the compile server module on compile servers may transmit the output executable native applications for each mobile device platform to be received by the build server such as over a data connection between compile servers and build server according to known methods. Accordingly following receipt of the executable native applications by build server executable application server module on build server may transmit the executable native mobile device applications to user computer such as over computer network for example according to known methods. Following receipt of the executable native applications for each particular mobile device platform by the user computer each native application may be distributed or otherwise loaded on a mobile device corresponding to each of the mobile device platform specific executable applications for native execution on the mobile device by a mobile device user for example.

In an alternative embodiment executable application server module on build server may transmit the executable native mobile device applications to one or more provisioning servers for distribution to mobile device users. In a particular examplary such embodiment executable application server module may transmit each mobile device platform specific executable native application to a provisioning server corresponding to that mobile device platform e.g. an iPhone native application may be transmitted to an Apple iTunes App Store provisioning server whereas an Android native application may be transmitted to an Android Marketplace provisioning server for example. In a further embodiment executable application server module may transmit the multiple platform specific executable mobile device applications to either a user computer or to one or more provisioning servers by means of providing a static uniform resource locator URL referencing each mobile device application such that the multiple mobile device applications may be retrieved from the build server such as over network according to known methods. Such static URL links provided by build server may preferably also be predictable such as by use of a common URL structure associated with each user computer for providing the multiple mobile device applications for example.

In an embodiment where the multiple executable mobile device applications are transmitted from the build server to the user computer the applications may be received by the user computer using SDK module such that the executable mobile device applications are accessible from within the SDK tool running on the user computer. For example where the user computer is running an SDK comprising a plugin for an IDE the executable mobile device applications may be received within the IDE on the user computer and where the user computer SDK comprises a mobile device emulator program for example the executable mobile device applications may be received within the emulator program.

In an optional embodiment of the invention the processing operations of may additionally comprise the monitoring of the status of the compiling of multiple mobile device platform specific applications. Such monitoring operation may be implemented using optional status module on build server for example. In such optional embodiment upon receiving the HTML Javascript source application and configuration file in operation the build server may transmit a status message to the user computer providing the status of the compiling process comprised in operations and . As operations and are completed by build server and compile servers the optional status module on build server may continue to send updated status messages to the user computer regarding the status of the compiling process until the completion of compiling resulting in the output of multiple executable native mobile device applications has been completed in operation . In such an embodiment status module may also further transmit a completion status message to the user computer following the completion of operation to provide one or more URLs whereby the executable native mobile device applications may be accessed by the user computer for transmission of the executable native mobile device applications from the build server to the user computer as part of operation .

In the second processing operation of the HTML Javascript source application and configuration file are transmitted to multiple compile servers corresponding to multiple mobile device platforms substantially similar to as described above with respect to processing operation of . Similarly processing operation may be implemented using user build server module on build server which transmits the HTML Javascript source application and configuration file to multiple compile servers by means of data connections to compile servers such as direct data connections or alternatively by connection over a computer network such as network according to known methods. In such embodiment configuration file comprises at least one developer authentication certificate suitable for use to authenticate and verify the identity of the developer of the HTML Javascript source application in the process of compiling the source application as may be required by many mobile device platforms in order to facilitate installation of native mobile device applications on particular mobile devices or to allow distribution of native mobile device applications through device platform specific provisioning services such as the Apple iTunes App Store and Blackberry AppWorld for example.

In the next processing operation of the HTML Javascript source application is combined with framework source code for each mobile device platform substantially similar to as described above in reference to processing operation of . Similarly processing operation may be implemented using compile server module running on each of compile servers for each of the multiple mobile device platforms to which the HTML Javascript source application is to be compiled to result in a combined HTML Javascript application including the framework source code . As described above in reference to a framework source code file is defined for each of the mobile device platforms desired for compilation to enable an HTML Javascript application programming interface API to expose native functions and or features for each of the corresponding mobile device platforms.

In the next processing operation of the combined HTML Javascript source application and framework source code are compiled to output executable native applications for each mobile device platform substantially similar to as described above with reference to operation of . Similarly processing operation may be implemented using the platform compile module on each of compile servers which may compile the combined HTML Javascript source application and framework source code specific to each desired mobile device platform according to a particular compilation process suited to or required for each desired mobile device platform as described above with specific examples of compile process steps for particular mobile device platforms.

In the next processing operation of each native application is signed using a developer certificate for each mobile device platform. Processing operation may be implemented using platform compile module on each of compile servers for each mobile device platform which requires signing of the compiled executable native mobile device application and for which a developer authentication certificate is included and or referenced in the configuration file received from the user computer . For example where compile server is an Apple xServe compile server for compiling iPhone applications the platform compile module on compile server may be used to digitally sign the iPhone executable native application compiled in operation using the developer iPhone certificate referenced in configuration file to verify the identity of the developer of the application such as is required for submission of an executable native iPhone application to the Apple iTunes App Store for installation on iPhone mobile devices for example.

In the last processing operation of the signed executable native applications are transmitted to user computer substantially similar to as described above in reference to operation in . Similarly processing operation may be implemented using compile server module on compile servers and typically also executable application server module on build server . Following the completion of signing operation the compile server module on compile servers may transmit the output executable native applications for each mobile device platform to be received by the build server such as over a data connection between compile servers and build server according to known methods. Accordingly following receipt of the executable native applications by build server executable application server module on build server may transmit the executable native mobile device applications to user computer such as over computer network for example according to known methods. Following receipt of the executable native applications for each particular mobile device platform by the user computer each native application may be distributed or otherwise loaded on a mobile device corresponding to each of the mobile device platform specific executable applications for native execution on the mobile device by a mobile device user for example.

An embodiment of the present invention relates to a computer storage product with a computer readable medium having computer code thereon for performing various computer implemented operations. The computer readable media and computer code may be those specially designed and constructed for the purposes of the present invention or they may be of the kind well known and available to those having skill in the computer software arts. Examples of computer readable media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROMs and holographic devices magneto optical media such as floptical disks and hardware devices that are specially configured to store and execute program code such as application specific integrated circuits ASICs programmable logic devices PLDs and ROM and RAM devices including Flash RAM memory storage cards sticks and chips for example. Examples of computer code include machine code such as produced by a compiler and files containing higher level code that are executed by a computer using an interpreter. For example an embodiment of the invention may be implemented using HTML XML JavaScript Java C C Objective C or other scripting markup and or programming languages and development tools. Another embodiment of the invention may be implemented in hardwired circuitry in place of or in combination with machine executable software instructions.

The exemplary embodiments herein described are not intended to be exhaustive or to limit the scope of the invention to the precise forms disclosed. They are chosen and described to explain the principles of the invention and its application and practical use to allow others skilled in the art to comprehend its teachings.

As will be apparent to those skilled in the art in light of the foregoing disclosure many alterations and modifications are possible in the practice of this invention without departing from the spirit or scope thereof. Accordingly the scope of the invention is to be construed in accordance with the substance defined by the following claims.

