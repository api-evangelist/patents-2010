---

title: Method and apparatus for dynamic network device start up
abstract: Techniques for dynamic device start up include causing the following steps in response to powering a device. A server is determined, which provides at least a portion of a user interface to operate the device. If a communications network is available, a request message is sent to the server. The request message indicates at least a request for at least first data describing at least the portion of the user interface. The user interface is rendered based at least in part on the first data. In some embodiments, a server determines first data that describes at least a portion of a user interface for a remote device. The user interface is an interface for receiving input at the remote device to operate the remote device. In response to receiving a start-up message indicating start up of the remote device, at least the first data is sent to the remote device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09529603&OS=09529603&RS=09529603
owner: Nokia Technologies Oy
number: 09529603
owner_city: Espoo
owner_country: FI
publication_date: 20100702
---
Network service providers and device manufacturers e.g. wireless cellular etc. are continually challenged to deliver value and convenience to consumers by for example providing compelling network services. As a consequence many network device manufacturers are installing software controlled tools applications and other features that can be upgraded over time adding more functionality or efficiency. However when a consumer obtains such a device the installed software may be out of date. Typically a user starts up the device and is presented with a static top level user interface. The user must then request or be prompted to connect to a communications network to determine if an upgrade is available for one or more software items. If such an upgrade is available the user is further prompted to approve installation. User credentials such as a user name or password might be required for some software upgrades. Thus delays in delivery of the software upgrades are experienced by the user s device and the device s functionality or performance or both are inhibited until the user is both prompted and responds affirmatively to the prompt.

Some network devices such as cellular telephones routinely have broadband network access. It has been determined that such routine broadband access offers an opportunity to provide dynamic top level user interfaces automatically upon starting up the device. This enables all users of a manufacturer s product to be presented with the latest user interface to operate and otherwise interact with the device whether the device was just obtained or has been already in the user s possession for several months or years. Therefore there is a need for an approach for automatic dynamic network device start up.

According to one embodiment a method comprises several steps performed in response to powering on a network device. The network device includes or is connected to a display for presenting a user interface. The method comprises determining a first server. The first server provides at least a portion of a user interface for the device. The user interface is an interface for receiving input to operate the device. The method also comprises determining whether a communications network is available. The method further comprises if the communications network is available determining to send a request message to the first server. The request message comprises at least a request for at least first data describing at least the portion of the user interface.

According to another embodiment a method comprises determining first data that describes at least a portion of a user interface for a remote device. The user interface is an interface for receiving input at the remote device to operate the remote device. The method also comprises receiving a start up message that indicates at least that the remote device is being powered up. The method further comprises in response to receiving the start up message determining to send at least the first data to the remote device.

According to another embodiment an apparatus comprises at least one processor and at least one memory including computer program code the at least one memory and the computer program code configured to cause the apparatus to perform at least one or more steps of one of the above methods.

According to another embodiment a computer readable storage medium carries one or more sequences of one or more instructions which when executed by one or more processors cause at least in part an apparatus to perform one or more steps of one of the above methods.

According to another embodiment an apparatus comprises means for performing one or more steps of one or the above methods.

According to another embodiment a computer program product includes one or more sequences of one or more instructions which when executed by one or more processors cause an apparatus to at least perform one or more steps of one of the above methods.

Still other aspects features and advantages of the invention are readily apparent from the following detailed description simply by illustrating a number of particular embodiments and implementations including the best mode contemplated for carrying out the invention. The invention is also capable of other and different embodiments and its several details can be modified in various obvious respects all without departing from the spirit and scope of the invention. Accordingly the drawings and description are to be regarded as illustrative in nature and not as restrictive.

Examples of a method apparatus and computer program are disclosed for automatic dynamic network device start up. In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the embodiments of the invention. It is apparent however to one skilled in the art that the embodiments of the invention may be practiced without these specific details or with an equivalent arrangement. In other instances well known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the embodiments of the invention.

As used herein the term user interface refers to any software controlled mechanism to exchange data between a device and a user of that device and includes not just graphical user interfaces that involve a video screen and pointing device to control a cursor or a video touch screen but also audio interfaces that involve speakers and microphones among other interfaces that may be developed such as interfaces involving tactile chemical and electromagnetic transducers. As used herein the term display represents any means for presenting data to a user including video output and audio output alone or in some combination. The term rendering in the context of rendering data is used synonymously with presenting such data. As used herein a network device is any device that communicates with other devices over a communications network. The term top level user interface refers to a user interface for receiving input from a user of the device to operate the device. Thus the top level user interface is used in various to perform one or more of the following turn the device off select one or more operations to perform with the device like make a call record audio or video set a clock determine geographic position etc. switch between one operation and another change settings for default behavior download and render content and download or install or delete or execute one or more software applications on the device. When a device is started up e.g. by pressing the power button the device automatically runs some software to check the device hardware and start processes essential for the user to operate the device. This is akin to the old adage of lifting oneself up by one s own bootstraps and the process is called bootstrapping or booting up. As used herein boot means a process that is executed upon starting a network device. An application is a process that is implemented in software for execution on a network device. The application may operate alone on the device or may communicate over a network with a service on a separate network device.

Although various embodiments are described with respect to starting up a cellular telephone with a video screen and one or more keys whose functions are determined by labels displayed on the screen it is contemplated that the approach described herein may be used with other network devices including personal computers with wireless cards devices with touch screens or devices with no video screens among many other network devices well known in the art.

To address this problem a system of introduces the capability for automatic dynamic network device start up by automatically running a boot client process that connects to a boot server process on another network device to download data used to provide a top level user interface. The network device start up is dynamic because it can change based on the data sent from the boot server process . The dynamic network device start up is automatic because it is done without intervention by the user once the device is started e.g. by the user pressing a power button .

As shown in the system comprises a user equipment UE having connectivity to network services such as subscription service and service collectively called network services hereinafter and to boot server via a communication network . By way of example the communication network of system includes one or more networks such as a data network not shown a wireless network not shown a telephony network not shown or any combination thereof. It is contemplated that the data network may be any local area network LAN metropolitan area network MAN wide area network WAN a public data network e.g. the Internet short range wireless network or any other suitable packet switched network such as a commercially owned proprietary packet switched network e.g. a proprietary cable or fiber optic network and the like or any combination thereof. In addition the wireless network may be for example a cellular network and may employ various technologies including enhanced data rates for global evolution EDGE general packet radio service GPRS global system for mobile communications GSM Internet protocol multimedia subsystem IMS universal mobile telecommunications system UMTS etc. as well as any other suitable wireless medium e.g. worldwide interoperability for microwave access WiMAX Long Term Evolution LTE networks code division multiple access CDMA wideband code division multiple access WCDMA wireless fidelity WiFi wireless LAN WLAN Bluetooth Internet Protocol IP data casting satellite mobile ad hoc network MANET and the like or any combination thereof.

The UE is any type of mobile terminal fixed terminal or portable terminal including a mobile handset station unit device multimedia computer multimedia tablet Internet node communicator desktop computer laptop computer notebook computer netbook computer tablet computer Personal Digital Assistants PDAs audio video player digital camera camcorder positioning device television receiver radio broadcast receiver electronic book device game device or any combination thereof including the accessories and peripherals of these devices or any combination thereof. It is also contemplated that the UE can support any type of interface to the user such as wearable circuitry etc. .

In the illustrated embodiment the system also includes an operator gateway process for an operator that provides access to the network for the UE . In the illustrated embodiment the system also includes point of sale service for a store e.g. a retail store where the UE was purchased.

By way of example the UE boot server network services operator gateway and point of sale service communicate with each other and other components of the communication network using well known new or still developing protocols. In this context a protocol includes a set of rules defining how the network nodes within the communication network interact with each other based on information sent over the communication links. The protocols are effective at different layers of operation within each node from generating and receiving physical signals of various types to selecting a link for transferring those signals to the format of information indicated by those signals to identifying which software application executing on a computer system sends or receives the information. The conceptually different layers of protocols for exchanging information over a network are described in the Open Systems Interconnection OSI Reference Model.

Communications between the network nodes are typically effected by exchanging discrete packets of data. Each packet typically comprises 1 header information associated with a particular protocol and 2 payload information that follows the header information and contains information that may be processed independently of that particular protocol. In some protocols the packet includes 3 trailer information following the payload and indicating the end of the payload information. The header includes information such as the source of the packet its destination the length of the payload and other properties used by the protocol. Often the data in the payload for the particular protocol includes a header and payload for a different protocol associated with a different higher layer of the OSI Reference Model. The header for a particular protocol typically indicates a type for the next protocol contained in its payload. The higher layer protocol is said to be encapsulated in the lower layer protocol. The headers included in a packet traversing multiple heterogeneous networks such as the Internet typically include a physical layer 1 header a data link layer 2 header an internetwork layer 3 header and a transport layer 4 header and various application headers layer 5 layer 6 and layer 7 as defined by the OSI Reference Model.

Processes executing on various devices often communicate using the client server model of network communications widely known and used. According to the client server model a client process sends a message including a request to a server process and the server process responds by providing a service. The server process may also return a message with a response to the client process. Often the client process and server process execute on different computer devices called hosts and communicate via a network using one or more protocols for network communications. The term server is conventionally used to refer to the process that provides the service or the host on which the process operates. Similarly the term client is conventionally used to refer to the process that makes the request or the host on which the process operates. As used herein the terms client and server refer to the processes rather than the hosts unless otherwise clear from the context. In addition the process performed by a server can be broken up to run as multiple processes on multiple hosts sometimes called tiers for reasons that include reliability scalability and redundancy among others. A well known client process available on most nodes connected to a communications network is a World Wide Web client called a web browser or simply browser that interacts through messages formatted according to the hypertext transfer protocol HTTP with any of a large number of servers called World Wide Web WWW servers that provide web pages.

In the illustrated embodiment the UE includes a browser a user interface UI engine and boot client . The UE also includes a data structure that stores data that indicates UE identifier ID . In some embodiments one or more of services interact with a user of UE though the browser . In some embodiments one or more of services interact with a user of UE though a corresponding special software application that functions as a separate client not shown . Many user interface engines are known in the art and any may be used as the UI engine in various embodiments. In an example embodiment the UI engine is a declarative UI engine as is well known in the art. A declarative UI engine is capable of producing a powerful and complex user interface based on a few instructions called declarative statements which indicate what UI elements are to be employed for corresponding input and output data or variables and how those UI elements are arranged. An example declarative UI engine is available as QML Qt Declarative Markup Language developed by Qt organization formerly a separate company called Trolltech currently available from Nokia Corporation of Espoo Finland and described in the World Wide Web at domain doc.qt.nokia.com in directory 4.7 snapshot in file declarativeui.html.

Upon start up boot client process connects to the boot server process on another network device to download data used to provide a top level user interface. More specifically in response to powering on a network device e.g. UE that includes a display for presenting a user interface to a user of the device the boot client causes the device to perform automatically at least determining a first server e.g. a network address for boot server . The boot server provides at least a portion of a top level user interface for the device e.g. UE . The boot client determines whether a communications network is available and if the communications network is available then determines to send a request message to the boot server. The request message indicates a request for first data that describes at least the portion of the top level user interface. In response to receiving the first data from the boot server the boot client renders the top level user interface based at least in part on the first data.

The subscription services such as subscription service include corresponding subscriber profiles data structures such as data structure . Each subscriber profiles data structure holds data that indicates information about consumers who have subscribed to the service. While the subscription services interact with the UE through HTTP messages with the browser or messages of the same or different protocols with an application client other services connected to communication network can access the functionality of the subscriptions services through corresponding application programming interfaces API through API respectively. These API define parameters acceptable ranges for values for the parameters functions performed for certain values of parameters and a protocol for exchanging the parameter values across network .

The operator provides the UE with access to the communications network often in collaboration with one or more other operators. Such access is set up through one or more operator gateway services either directly in some embodiments or indirectly through a point of sale service provided by a retailer in other embodiments. The consumer information for a user of UE such as name social security number telephone number and billing address or bank account or credit card information is stored in customer accounts data structure . The customer accounts also associates the consumer with the particular UE . The UE is identified with a user equipment identifier UE ID such as an International Mobile Equipment Identity IMEI that is a number usually unique to identify GSM WCDMA iDEN and some satellite mobile phones. The operator gateway often provides billing services for one or more subscription services . In the illustrated embodiment the operator gateway is connected to an operator billing service either directly as depicted or indirectly via network to initiate payment from a consumer for use of network and for use of any subscription services . Billing and other functions of operator gateway are accessed through the operator gateway API .

The boot server communicates with the boot client upon start up of the UE to pass the latest version of the top level user interface for operating the UE . In various embodiments the boot server either passes the entire dynamic portion of the top level user interface or just the sub portion that has changed since the last boot up of the UE . The dynamic portion of the top level interface provided by the boot server includes user interactive elements specific to the device e.g. latest software upgrades for device or the user e.g. one or more of the user s subscription services user selected applications or the user context such as geographic location time of day or some combination. To determine the proper dynamic response by the boot server the boot server includes a boot profiles data structure . In the illustrated embodiment the boot profiles data structure includes a user profile data structure and a device profile data structure . In some embodiments one or more functions of the boot server can be accessed through a boot server API . For example subscription service can notify the boot server of a change in the contact list for the user through the boot server API .

Although components and data structures are shown in and as integral blocks in a particular arrangement on particular network devices for purposes of illustration in other embodiments components and data structures or portions thereof are arranged differently on one or more network devices or databases or are omitted or other components or data structures are included or the system is changed in some combination of ways. In all embodiments the boot client resides entirely on each user network device e.g. entirely on UE .

The local device controller interacts with the local operating system on UE to ascertain or change the status of various hardware components such as the displays the keys the clock the memory and one or more electromagnetic transceivers. The local device controller also determines the local context of the device such as the current geographic location the local time and the wireless communications links that are detected. The local device controller also issues messages or commands to the other components of the boot client such as the top level UI manager and the download manager as described in more detail below with reference to and .

The top level UI manager assembles the components of the top level UI and issues commands to the UI engine to display the top level UI. The top level UI manager also receives user responses to the top level UI and acts based on those user responses. The actions often involve issuing messages or commands to the other components of the boot client such as the local device controller and the download manager as described in more detail below with reference to and . In the illustrated embodiment the top level UI manager caches information in one or more data structures including a user interface UI information data structure a login user interface data structure a user credentials data structure and a data cache data structure .

The UI information data structure holds data that indicates the instructions for the UI engine such as received in whole or in part from the boot server . When first installed on the UE the UI information data structure is empty or holds a minimal amount of information such as a default top level UI. For example the default UI includes interactive options for a user to select turning the device off or changing a volume level for sounds emitted from the device or non interactive presentations showing current battery life or received signal strength or some combination. After at least one connection to the boot server the UI information data structure holds data that indicates the positions and rendering styles for all interactive options and non interactive presentations that were supported at the time of the last connection to the boot server. If one or more options positions or rendering style has changed at the boot server since that last connection the data in the UI information data structure will not reflect those changes.

The login UI data structure holds data that indicates the instructions for the UI engine to prompt the user for and receive the user credentials used to authenticate the user such as a user name and password. The credentials may be defined in any manner known in the art such as the username and password or telephone number and personal identification number PIN established by the network operator for the UE or the retail merchant from which the UE was obtained or the username and password for one of the subscription services such as subscription service When first installed on the UE the login UI data structure holds a default login UI. For example the default UI includes interactive options for a user to enter a telephone number and PIN. The credentials data structure holds data that indicates the user response to the login UI. When first installed on the UE the credentials data structure is empty. After at least one response by the user the credentials data structure holds data that indicates the user s response e.g. values for the telephone number and PIN or username and password. After at least one connection to the boot server the login UI data structure holds data that indicates the positions and rendering styles for all interactive options for entering user credentials.

The cache data structure holds data that indicates the network address of the boot server . In some embodiments the network addresses of the boot server is fixed by the software and not changed. In some embodiments the network addresses of the boot server may be updated by the boot server to take effect at some future time and the cache holds data that indicates the start date for an associated boot server network address.

Other information obtained from the boot server is also stored in the cache data structure . For example in some embodiments the cache data structure holds data that indicates an advertisement to display on the UE while the top level UI is being assembled.

The download manager downloads software and data for the top level user interface from one or more different network devices either directly such as with the boot server or indirectly through the browser such as with one or more network services . In the illustrated embodiment the download manager caches information in one or more data structures including a core application universal resource locator URL data structure a data cache data structure a user state data structure and an application states data structure .

The core application app URLs data structure holds data indicating the network addresses such as URLs for zero or more core applications. Core applications are applications available from a network service and considered important for the basic operation of the device such as a telephone dialer contact list manager and a ring tone manager on a cellular telephone. In some embodiments the network addresses of the core applications are fixed by the software and not changed. In some embodiments the network addresses of the core applications may be updated by the boot server .

The cache data structure holds other information related to downloading software and data from the network. For example in some embodiments the cache data structure holds data indicating whether to render one or more applications such as one or more core applications in the browser or through the UI engine with instructions stored in the cache data structure .

The user state data structure holds data that indicates the user state such as applications installed by the user on a user device either UE or some other device owned by the same user . For example user selected applications may include a sports team score update application or stock market price application or both. In some embodiments the user state data structure also holds data that indicates the context of the user such as the user s current geographic location the user s home geographic location the user s age the user s social network service and social network contacts the user s history or statistics for running one or more applications. In some embodiments the user state data structure holds data that indicates any applications either core applications or user selected applications or some combination that were executing when or just before the user selected a top level user interface option to turn off the user device either UE or some other device owned by the same user.

When first installed on the UE the user state data structure is empty. After at least one connection to the boot server the user state data structure holds data that indicates the user state information when a user device either UE or some other device owned by the same user last connected to the boot server if ever. In some embodiments the contents of the user state data structure are updated by the local device controller on the UE . In some embodiments some or all of the data in the user state data structure is reported to the boot server in one or more messages either periodically or upon the user selection of the top level user interface option to turn off the device.

The application states data structure holds data that indicates the state of any executing application indicated in the user state data structure . For example if the user state data structure holds data that indicates sports Team A score update application was executing then the particular view of the application when or just before the device was shut down along with the contents in the particular view at that time are indicated by data in the application states data structure . In some embodiments the application states are recorded by a corresponding network service e.g. applications store their state to a server using HTML5 mechanisms and application states data structure is omitted.

It is assumed for purposes of illustration that the user network device e.g. UE includes a separate physical key not shown for turning the device on or off. After turning on the device presents on the display data indicating that the device is starting up. If any data is in the cache data structure for initial display such as an advertisement that data is also displayed.

In the illustrated embodiment the top level user interface is incrementally displayed. When completed the top level user interface includes one or more active areas that can be selected by a user to cause the device to perform some function and one or more graphic areas to display status information such as signal strength and battery life. An active area is selected by a user e.g. by touching a touch screen inside the area or using a pointing device to position a cursor over the area as are well known in the art. In some embodiments the top level user interface includes an active area for shutting down the network device. Thus the top level user interface includes one or more elements configured to detect user input and in response perform a corresponding function. In various embodiments the function is selected from a group comprising powering off determining optional settings accessing one or more tools that each represent a built in application listing installed applications display currently executing applications expanding a current rendering contracting a current rendering among others alone or in any combination including all functions in the group.

For example at some early time after start up a GUI is displayed with a portion of the top level user interface. is a diagram of graphical user interface that includes an early portion of a graphical top level user interface. While portion in and increasingly greater portions and depicted in respectively show example portions of the top level graphical user interface the various portions including the full top level graphical user interface are collectively referenced hereinafter as the top level graphical user interface .

For purposes of illustration the portion of top level graphical user interface includes an applications active area a date time active area a tools active area and a stored contents active area. In other embodiments more fewer or different active areas are included in an early portion of the top level user interface . The applications active area is selected to list the applications that can be executed on the device e.g. on UE . The date time active area is selected to show or change the current date and time for the device e.g. UE . The tools active area is selected to show a list of tools that can be executed to control the device such as a tool to change device settings such as picture brightness text size speaker volume a tool to provide an alarm clock a tool to provide a camera etc. The stored contents active area is selected to list the contents stored on the device such as music files picture files and video files and application specific files such as game files.

In some embodiments any of the active areas displayed may be selected by the user. So in such embodiments the user can select the tools active area to set a current time or alarm clock. Thus the illustrated embodiment includes rendering a portion of the top level user interface incrementally as information for the top level user interface becomes available and responding to user input detected for the rendered portion of the top level interface. An advantage of displaying the top level user interface incrementally is to make as much capability available as soon as possible thus reducing wasted computational time on the user network device until the proper function is available for executing. Allowing a user to select an active area on an incrementally presented top level user interface is an example means to achieve this advantage.

The GUI includes a login user interface UI to prompt a user of the device for credentials. In the illustrated embodiment the login UI includes a user name active area and a password active area . The username active area is where the user is prompted to enter text indicating the user s name for tailored configuration of the device. The password active area is where the user is prompted to enter text indicating the user s password so the user can be authenticated as is well known in the art. In other embodiments other user credentials are prompted for and determined in login UI such as telephone number and PIN. In some embodiments the user credentials are cached after being entered into login UI so a subsequent start up of the device does not involve presenting the login UI . Thus such embodiments include determining whether user credentials are cached on the device and if user credentials are not cached on the device then rendering a login user interface e.g. login UI to enter user credentials. An advantage of presenting the login UI before completing the top level user interface is to make good use of the user s availability while the top level user interface is being dynamically generated and presented. This also reduces wasted computational time on the user network device waiting for the user to enter credentials after all the capability of the top level user interface including launching user selected applications is already available for executing. Presenting the login UI before completing the presentation of the top level UI is an example means to achieve this advantage.

The GUI includes a browser window to present applications for executing on the user network device e.g. UE . In the illustrated embodiment the browser window automatically presents active areas representing applications that have been launched automatically such as one or more core applications or one or more user selected applications that were executing on this user network device or another user network device owned by the same user or some combination. For example it is assumed for purposes of illustration that active areas and collectively referenced hereinafter as executing applications areas are presented representing two core applications and one user selected application respectively. To further illustrate the GUI it is assumed that active area shows an image indicating a contacts list and responds to user activation by opening a contacts list manager window controlled by such an application in that application s last state on any device owned by the user. Similarly it is assumed that active area shows an image indicating ring tones and responds to user activation by opening a ring tones manager window controlled by such an application in that application s last state. Similarly it is assumed that active area shows an image indicating sports Team A and responds to user activation by opening a sports Team A score update window controlled by such an application in that application s last state. Thus the illustrated embodiment includes causing a particular executing application to be launched in the last state of the particular application.

An advantage of using a browser window to display the active areas is that the window contents are easily generated with HTML commands that associate links to other network resources with graphical elements such as as is well known in the art. Browser window is an example means of achieving this advantage. In some embodiments the listing and launch of applications in a browser is implemented in HTML with JavaScript and Cascading Style Sheets HTML JS CSS . Thus in some embodiments the device e.g. UE includes a World Wide Web browser e.g. browser and the top level user interface includes a window e.g. window for the browser. In GUI the window for the browser includes an area that indicates a particular application wherein the particular application is currently executing. In other embodiments other windows or user interfaces are opened to present applications for executing on the device including currently executing applications.

An advantage of automatically launching an application in its last state on any device owned by the user is to allow the user to go seamlessly from one device such as a laptop computer to another such as a cellular telephone. The saves computational resources and time on the second user network device e.g. UE launching and inputting data to return to a previous state of an executing application. Executing applications areas are an example means of achieving this advantage.

In some embodiments the browser window includes other user state information not shown such as the current geographic location position municipality or country or some combination of UE or the user s contacts who are currently connected to the communications network or other devices owned by the same user or some combination. An advantage of presenting other user state information is to allow the user to identify when user state information should be changed or augmented. This provides the advantage of causing the active areas to be more likely used thus avoiding wasting user network device resources and network bandwidth receiving decoding and rendering application areas for applications that are not relevant to the user s actual context or state. Presenting other user state information is an example means of achieving this advantage.

The GUI includes a browser window to present applications for executing on the user network device e.g. UE . In the illustrated embodiment it is assumed for purposes of illustration that the user has selected the active area to list the available applications including both core applications and any user selected applications . For example it is assumed for purposes of illustration that active areas through collectively referenced hereinafter as available applications areas are presented representing all available applications. When a user selects an available application area the link is followed to a page that automatically launches the application. Thus the window for the browser includes a link for launching an application from the browser .

An advantage of using a browser window to display the active areas is that the window contents are easily generated with HTML commands that associate links e.g. URLs to other network resources with graphical elements such as as described above. Browser window is an example means of achieving this advantage. In other embodiments other windows or user interfaces are opened to present applications available for executing on the device.

In some embodiments active areas include only active areas for applications suitable to the user s context. For example applications not licensed in the current geographic area of the UE as determined by the global position of UE or for the current date are not included among the applications represented by active areas . An advantage of omitting one or more active areas for applications that are not suitable for the user s context is to save computational resources on the user network device e.g. UE receiving and rendering active areas that cannot be successfully executed. Presenting only suitable active areas is an example means to achieve this advantage.

In step upon start up an initial presentation is displayed on the UE . For example the local device controller of boot client presents a default screen indicating the device e.g. UE is starting up. Any method may be used to determine the initial presentation to be displayed. In various embodiments the initial presentation is included as default values within computer instructions that implement at least a part of the boot client or from a local data structure such as a database or is received in one or more messages through a communications network such as network from another network device either in response to a query message or unsolicited or the data is determined in some combination of ways. In some embodiments step includes determining whether the cache includes data indicating an initial presentation previously downloaded from the boot server such as an advertisement screen or video or audio clip. If so then step includes displaying the initial presentation retrieved from cache .

In step the network address such as a URL of the boot server is determined. In some embodiments a network address such as a URL for one or more core applications is also determined during step . For example the local device controller of boot client determines the network addresses for the boot server and one or more core applications. Any method may be used to determine these addresses as described above for the initial presentation. In some embodiments during step the local device controller of boot client determines whether the cache includes data indicating the network addresses of the boot server previously downloaded from the boot server . If so then step includes retrieving the network address of the boot server from cache . In some embodiments during step the local device controller of boot client determines whether the core applications data structure includes data indicating the network addresses of one or more core applications previously downloaded from the boot server . If so then step includes retrieving the network address of the one or more core applications from core applications data structure .

In step it is determined whether user credentials are stored in cache e.g. in credentials data structure . For example the local device controller of boot client determines whether the credentials data structure is not empty. If so then control passes to step described below. If not then in step the user is prompted for credentials and the user responses are determined. For example during step the credentials UI is presented as described above with reference to . In some embodiments the user responses are stored in credentials data structure during step . Control then passes to step .

In step it is determined whether the network is ready to carry messages back and forth to the user network device e.g. UE . For example the local device controller of boot client determines whether the acknowledgement messages are received from one or more network devices of the operator such as operator gateway . If so then control passes to step and following described below. If not then the top level user interface is based on data already cached on the user network device as shown in steps through .

In step it is determined if a top level user interface is cached at least in part on the user network device. For example the local device controller of boot client determines whether there are user interface declarative statements in the UI information data structure . If not then in step a default top level user interface is rendered at the user network device. A default top level user interface is included in computer instructions for the boot client such as a set of default UI engine declarations. For example the local device controller sends the default instructions to the UI engine. A default top level user interface includes a small or minimal set of active areas such as an active area to shut down the user network device e.g. UE and an element like graphical element to indicate battery life remaining.

If it is determined in step that the top level user interface is cached at least in part e.g. by virtue of a prior network communication with the boot server then in step the cached user interface is rendered on the user network device e.g. on a display unit of UE . For example the local device controller sends instructions based on the contents of data structure to the UI engine such as sending declarative statements retrieved from data structure to a declarative UI engine. The cached UI information produces the last top level UI provided by the boot server to the user network device e.g. UE and does not reflect any subsequent changes in the top level user interface determined at boot server . Thus if the communications network is not available some embodiments include determining whether second data that describes at least a portion of the top level interface is cached on the device. If the second data is cached on the device then step or includes rendering the top level user interface based on the second data.

In step core applications are rendered. For example the download manager generates a web page with links to the core applications and the web page is associated with an active area in the top level user interface e.g. with active area . For example a web page is generated with an active area associated with URLs for each core application. The URLs for the core application are found in the computer code for the boot client e.g. in the computer code for the download manager or in core applications URLS data structure . The core applications URLS data structure is capable of being updated in one or more prior connections to the boot server . Thus some embodiments include determining one or more core applications and rendering in the top level interface a user interface component for launching the one or more core application.

In step it is determined whether user state information is cached. For example the download manager of boot client determines whether there is data in the user state data structure . If not then no user state information is available and control passes to step . If so then in step the user selected applications are added to the applications web page e.g. shown in window . If the data in the user state data structure indicates that any core applications or user selected application was executing then the browser is launched in browser window and the indicated applications are launched from there in active areas which are sized and positioned as when the user network device e.g. UE last started shutting down or the boot server last communicated the user state to the user network equipment even from a different network device owned by the same user . The applications represented in active areas are advanced to their last state as recorded by the corresponding network servers e.g. using HTML5 mechanisms well known in the art. In some embodiments the applications represented in active areas are advanced to their last state as recorded in the applications sates data structure by the download manager of the boot client . Thus some embodiments include determining whether user state is cached on the device. If user state is cached on the device then data that represents the user state is rendered in the top level user interface.

In step the boot client responds to user input to the top level user interface and browser windows or until the network becomes ready. For example in response to the user selecting active area in GUI depicted in the browser window is linked to the web page generated of available core applications and user applications based on data cached in data structures and and displayed as browser window .

When the network is available control passes to step . In step the latest version of the top level user interface is downloaded from the boot server and cached. For example the local device controller sends a message to the download manager to request the top level user interface and in some embodiments a new address for the boot server or one or more core applications or some combination . The download manager communicates with the boot server in one or more messages and receives the top level user interface or updates to a previously downloaded top level user interface . The received instructions for the top level user interface are sent to the top level user interface manager which caches them in the UI information data structure . The top level user interface manager also sends the instructions for the updated top level user interface to the UI engine . In some embodiments these are declarative statements sent to a declarative UI engine. Thus the device includes a declarative user interface engine and the first data from the boot server for at least a portion of the top level user interface comprises statements for a declarative user interface engine. An advantage of the declarative UI engine is that the declarative statements to generate a user interface are short and simple and save bandwidth on the communications network and processing time on both the boot server and boot client in sending and receiving the statements respectively.

In some embodiments an updated network address of the boot server for subsequent communications is also received passed to the top level user interface manager and stored e.g. in UI information data structure . In some embodiments an updated list of network addresses of one or more core applications are also received from the boot server and stored by the download manager in the core applications URLs data structure .

Thus during step in response to receiving the first data for at least a portion of the top level user interface from the boot server the first data is cached on the device e.g. UE . In some embodiments the first data includes an updated network address for the boot server. In some embodiments the first data includes an updated list of network addresses for one or more core applications.

In step the boot client responds to user input. For example the local device controller performs the functions indicated by user responses to the top level user interface such as to set an alarm clock. In some embodiments step is performed overlapping in time with step so that the local device controller responds to user selections of displayed active areas even before the top level user interface is completely presented.

In step the latest version of the core applications are downloaded from the corresponding servers and cached and rendered in the top level user interface. For example the download manager instructs the browser to download the scripts for the client side of the core applications and installs as links in web page as depicted in browser window . The page is linked to an active area in the top level user interface e.g. to active area . The core applications are thus rendered on a display of the user network device e.g. UE by the browser in a browser window opened in the top level user interface by the UI engine e.g. according to instructions received from the top level UI manager . Thus first data indicating at least a portion of the top level user interface from the first server further comprises core data that indicates one or more core applications. The method further comprises rendering in the top level interface a user interface component for launching the one or more core applications

In step the boot client responds to user input. For example the browser presents the page in window in response to user selection of the active area in the top level user interface portion In some embodiments step is performed overlapping in time with step so that the boot client responds to user selections of displayed active areas even before the top level user interface is completely presented.

In step the latest version of the user state available at the core server is downloaded from the boot server and cached. User credentials newly entered in step or previously cached are sent to the boot server to authorize the user state to be downloaded to the network device. For example the download manager downloads the user state from the boot server and caches the user state in user state data structure . In various embodiments the user state includes the user context the URLs of user selected applications and the URLs of applications that were running when a device owned by the same user last reported those executing applications to the boot server . In some embodiments step includes rendering data that represents user context in or near the top level user interface. For example the user s geographic location and social network friends online or nearby are indicated in the top level user interface or on the web page rendered as browser window . Thus the first data indicating at least a portion of the top level user interface from the first server further comprises user state data that indicates user state when the device was last used. The method further comprises rendering data that represents the user state.

In step the latest version of the user selected applications are downloaded from the corresponding servers and cached and rendered in the top level user interface. For example the download manager instructs the browser to download the scripts for the client side of the user selected applications and installs as links in a web page as depicted in browser window . Often the links are to the location of the executable code for the application on the local user device e.g. UE . The page is linked to an active area in the top level user interface e.g. to active area . The core applications are thus rendered on a display of the user network device e.g. UE by the browser in a browser window opened in the top level user interface by the UI engine e.g. according to instructions received from the top level UI manager . Thus the user state indicates a user selected application. The method further comprises rendering in the top level interface a user interface component for launching the user selected applications.

In step the boot client responds to user input. For example the browser presents the page in window in response to user selection of the active area in the top level user interface portion In some embodiments step is performed overlapping in time with step so that the boot client responds to user selections of displayed active areas even before the top level user interface and all installed and executed applications are completely presented.

In step applications that were running in progress when a device owned by the same user last reported those executing applications to the boot server are launched and advanced to their latest states. For example the in progress applications are determined from the user state and are launched from the browser. The latest states are downloaded from the corresponding servers when that capability is available. The applications are then rendered in their latest states e.g. as active areas in browser window . In some embodiments the application states are cached in the application states data structure . Thus the user state indicates a particular application that had been executing for the user. The method thus further comprises determining the last state of the particular application from a corresponding server for the particular application. The method thus also comprises causing the particular application to be launched in the last state of the particular application.

In step it is determined whether end conditions are satisfied e.g. whether the user has selected the shut down option of the top level user interface. If not then in step the network device e.g. UE continues to respond to user selections in the top level user interface . For example data returned from the top level user interface is received at the top level UI manager and data is passed to the local device controller which causes the selected actions to be performed. In another example a user select an application in the browser window and the application is launched which controls further interfaces in the browser window. In some embodiments the user installs additional applications through one or more of the browser windows and . When conditions are satisfied to end the process the current state of the user is cached in the user state data structure and sent to the boot server to use when any network device owned by the same user starts up.

In step user interface information for network devices are determined and stored. For example the latest versions of top level user interface instructions that indicate for a UI engine the location size presentation style and valid ranges of input and output values are determined for each device and stored in device profile data structure . As models of network devices are added new entries are determined and stored in the data structure . As the style graphical elements and inputs evolve for existing models those revisions are stored in the device profile data structure . Thus step includes determining first data that describes at least a portion of a top level user interface for a remote device wherein the top level user interface is an interface for receiving input from a user of the remote device to operate the remote device.

In step user information for users of network devices are determined and stored. For example in some embodiments the phone numbers user names and actual names and addresses of one or more customers in the customer accounts data structure of the operator gateway are determined through API and stored in the user profile data structure . In some embodiments the username email address actual names and addresses and contacts e.g. social network friends of one or more subscribers in the subscriber profiles data structure are determined through API and stored in the user profile data structure . In some embodiments at least some such user information is obtained by a clerk at the point of sale and entered into the user profile data structure by the point of sale service through the boot server API . As users of network devices are added new entries are determined and stored in the data structure .

In step one or more messages are received from a boot client on a network device e.g. UE . In the illustrated embodiment the messages include user credentials to identify and authenticate a particular user. Thus step includes receiving a start up message that indicates the remote device is being powered up.

In step it is determined whether first data indicating UI engine instructions for the top level user interface have already been sent to this network device. Any method may be used to determine this. In some embodiments the messages from the network device include the UE ID and the user profile in data structure includes a list of UE IDs associated with the user. If the UE ID is not in the user profile data structure then it is determined that the top level user interface has not been previously sent to the network device. In some embodiments the messages from the network device include the UE ID and the device profile in data structure includes a list of UE IDs associated with each device model. If the UE ID is not in the device profile data structure then it is determined that the top level user interface has not been previously sent to the network device. In some embodiments the message received indicates a latest version of the top level user interface cached on the device and an update rather than a full download is explicitly requested.

If it is determined in step that the top level user interface instructions have not previously been sent then in step it is determined to send all the instructions for the portion of the top level user interface provided by the boot server. If it is determined in step that the top level user interface instructions has previously been sent then in step it is determined to send only the instructions for the modified sub portions of the portion of the top level user interface provided by the boot server. An advantage of sending only modified sub portions is that bandwidth is saved on the communications network between the boot client and boot server . Steps and are an example means to achieve this advantage. Thus step or includes determining to send the first data to the remote device in response to receiving the start up message. In step the first data describes only the portion of the top level user interface that has changed since a last message received from the remote device.

In step it is determined whether the user credentials are acceptable OK . In some embodiments the user credentials are included in the message received in step . In some embodiments the user credentials are received in a separate message. Any method may be used to authenticate the user. In some embodiments the credentials are sent to the network service from which the user identifier was obtained e.g. to operator gateway or subscription service through API or API respectively. The corresponding network service returns an authentication result message that indicates the credentials are accepted or rejected. In some embodiments a separate authentication service not shown is used for that purposes. In some embodiments the boot server issues and maintains the credentials e.g. username and password and performs the authentication itself.

If the authentication fails during step then control passes to step . In step it is determined whether end conditions are satisfied. For example it is determined whether the boot server is to be changed to a different network device. If so the process ends. If not control passes back to step and following steps to update the device and user profiles and process additional boot requests.

If authentication succeeds then in step it is determined whether the message includes a request for user state. In some embodiments any request that includes user credentials is considered a request also for user state. If so then in step it is determined to send user state based on the user profile data structure . Thus step includes determining to send the locally stored user state data to the remote device in response to receiving the start up message.

If not then in step it is determined whether the message indicates user state e.g. in one or more messages sent by the boot client during step described above. If the user state is received then in step the user state is stored in the user profile data structure . Thus step includes receiving from the remote device user state data and determining to store locally the user state data wherein the user state data indicates one or more of a user selected application on the remote device or a particular application that was executing on the remote device when the remote device was shutting down. Control then passes to step to determine whether end conditions are satisfied as described above.

In some embodiments user state is not sent by the boot server and credentials are not included in the messages received in step and steps through are omitted.

Message represents the user pressing the power switch on the user s network device to start the device. In response the local device controller begins operating. During step described above the controller sends to the display unit an initial presentation that indicates the device is starting up. As described above the initial presentation is a presentation fixed in the computer instructions or a dynamic presentation retrieved from the cache such as an advertisement.

Because the network is available in this example the controller determines that the network is available and sends a network ready message to the download manager . In some embodiments the network ready message also indicates the network address of the boot server and the URLs of the core applications fixed in the software instructions of the local device controller. In some embodiments the URL of the boot server is retrieved from the UI information data structure and sent to the download manager in message . In some embodiments the URL of the core applications are retrieved from the core applications URLs data structure and sent to the download manager in message . In some embodiments the download manager retrieves the URL of the boot server or the URLS of the core applications or both and that information is not in the network ready message .

In response the download manager sends a request message to the boot server for the top level user interface instructions that will be passed to the UI engine on the user s network device e.g. UE . In response the boot server sends a response message with UI engine instructions. Because diagram applies to the first boot up by the device there were no previous messages and updates are not sent. Instead UI engine instructions are sent for the entire portion of the top level user interface provided by the server over multiple messages starting from message and ending with message The download manager directs the response messages through to the TL UI manager . In response the TL UI manager during process sends the instructions to the UI engine thus incrementally presenting elements of the TL UI on the display as represented by messages through The device services associated with the TL UI are gradually started by the controller during process .

Meanwhile the controller determines that user credentials are not cached in credentials data structure . Therefore the controller sends message to the top level UI manager . The message indicates the login UI e.g. login UI should be generated and presented to the user. In response the top level UI manager retrieves the instructions for the login UI from the data structure and sends those instructions to the UI engine thus causing the login UI to be presented to the user in one or more messages . Messages are depicted as occurring in time after the first elements of the TL UI in message but before the completion of the TL UI with message In some embodiments the presented elements of the TL UI are deactivated and grayed out on a display screen when the login UI is presented. The user enters the user s credentials in the login messages that are passed to the TL UI manager . The TL UI manager caches those credentials in the credentials data structure and closes the login UI .

Overlapping in time with one or more of the above processes the download manager starts the browser to open one or more core applications in one or more messages that indicate the core applications URLs. In response the browser sends one or more messages to the services at the corresponding URLs to download the latest versions of the requested core applications. In message through the corresponding network services download the latest versions of the client side of the core applications into the browser . Active areas representing the core applications are rendered in the browser e.g. using graphical thumbnail or full sized icons downloaded from the services and presented on the display in one or more messages . In some embodiments the active areas representing the core applications are entered into a web page such as in window but not presented on the display unless and until the user selects a TL UI element associated with that page such as active area . Such user input is indicated by dotted arrows from the interval of user input. Thus when the user selects active area on the TL UI the browser window is depicted rendering active areas for each core application.

Meanwhile in messages the user credentials are passed from the TL UI manager to the download manager . In messages the user credentials are passed from the download manager to the boot server as a request to fetch the user state. In some embodiments the credentials are included in the request messages . In response the boot server returns to the download manager messages with data indicating the user state including the user context user contacts URLs for user selected applications and any applications in progress on any user device that last reported to the boot server including a different device owned by the same user.

In one or more messages the download manager commands the browser to open the user selected applications as indicated by user selected applications URLs. In response the browser sends one or more messages to the services at the corresponding URLs to download the latest versions of the requested user selected applications. In message through the corresponding network services download the latest versions of the client side of the user selected applications into the browser . Active areas representing the user selected applications are rendered in the browser e.g. using graphical thumbnail or full sized icons downloaded from the services and presented on the display in one or more messages through In some embodiments the active areas representing the user selected applications are entered into a web page such as in window but not presented on the display unless and until the user selects a TL UI element associated with that page such as active area . Such user input is indicated by dotted arrows from the interval of user input. Thus when the user selects active area on the TL UI the browser window is depicted rendering active areas for each core application. The user selects the application and opens the application within browser .

After all the user selected applications are included in the web page depicted in window the display depicts the full user interface for operating the device.

After the start up represented by message the local device controller retrieves cached information such as user credentials boot server URL core application URLs and user selected URLs and applications in progress when shut down was initiated on the local device. The controller also determines that the network is available and sends the network ready message to the download manager . The download manager sends one or more messages to request updates of the TL UI from the boot server and in responses through gets the updates.

Meanwhile the local device controller commands the TL UI manager to start presenting the TL UI based on the data cached in the UI information data structure . The TL UI manager sends UI engine instructions based on the cached data to the UI engine for presentation on the display in one or more messages Based on the updates the finished TL UI is presented in one or more messages User input is received throughout interval .

The download manager launches the browser to open the core applications. The browser requests update core applications in one or more messages to the corresponding network services . Updated core applications if any are downloaded in messages through and rendered on the display unit in one or more messages e.g. in response to the user selecting active area .

The user credentials from cache are sent in one or more messages from the controller or TL UI manager as shown to the download manager which requests the boot server to fetch updated user state e.g. from a different network device of the same user in one or more messages . An updated user state if any is returned in one or more messages . For example the updated state shows different in progress applications from a different device by the same user.

Based on the returned user state the download manager commands the browser to open the user selected applications in one or more messages . In response the browser requests updated user selected applications if any from the corresponding network services . The updated user selected applications if any are returned in one or more messages through and rendered on the display unit e.g. in window using one or more messages through The display unit presents the full user interface during process .

After the start up represented by message the local device controller retrieves cached information such as user credentials boot server URL core application URLs and user selected URLs and applications in progress when shut down was initiated on the local device. The controller also determines that the network is not available and does not send a network ready message to the download manager . Instead the local device controller sends to the download manager one or more messages to get cached applications. Meanwhile the local device controller commands the TL UI manager to start presenting the TL UI based on the data cached in the UI information data structure . The TL UI manager sends UI engine instructions based on the cached data to the UI engine for presentation on the display in one or more messages Based on the updates the finished TL UI is presented in one or more messages . User input is received throughout interval .

The download manager launches the browser to open the core applications. The browser opens the core applications as currently installed on the device and renders them e.g. in window which is presented on the display unit via one or more messages .

Based on the cached user credentials received in one or more messages and the cached user state retrieved in process the download manager commands the browser to open the user selected applications in one or more messages . The browser opens the user selected applications as currently installed on the device and renders them e.g. in window which is presented on the display unit via one or more messages through The display unit presents the full user interface during process .

The processes described herein for providing automatic dynamic network device start up may be advantageously implemented via software hardware firmware or a combination of software and or firmware and or hardware. For example the processes described herein may be advantageously implemented via processor s Digital Signal Processing DSP chip an Application Specific Integrated Circuit ASIC Field Programmable Gate Arrays FPGAs etc. Such exemplary hardware for performing the described functions is detailed below.

A bus includes one or more parallel conductors of information so that information is transferred quickly among devices coupled to the bus . One or more processors for processing information are coupled with the bus .

A processor or multiple processors performs a set of operations on information as specified by computer program code related to automatic dynamic network device start up. The computer program code is a set of instructions or statements providing instructions for the operation of the processor and or the computer system to perform specified functions. The code for example may be written in a computer programming language that is compiled into a native instruction set of the processor. The code may also be written directly using the native instruction set e.g. machine language . The set of operations include bringing information in from the bus and placing information on the bus . The set of operations also typically include comparing two or more units of information shifting positions of units of information and combining two or more units of information such as by addition or multiplication or logical operations like OR exclusive OR XOR and AND. Each operation of the set of operations that can be performed by the processor is represented to the processor by information called instructions such as an operation code of one or more digits. A sequence of operations to be executed by the processor such as a sequence of operation codes constitute processor instructions also called computer system instructions or simply computer instructions. Processors may be implemented as mechanical electrical magnetic optical chemical or quantum components among others alone or in combination.

Computer system also includes a memory coupled to bus . The memory such as a random access memory RAM or other dynamic storage device stores information including processor instructions for automatic dynamic network device start up. Dynamic memory allows information stored therein to be changed by the computer system . RAM allows a unit of information stored at a location called a memory address to be stored and retrieved independently of information at neighboring addresses. The memory is also used by the processor to store temporary values during execution of processor instructions. The computer system also includes a read only memory ROM or other static storage device coupled to the bus for storing static information including instructions that is not changed by the computer system . Some memory is composed of volatile storage that loses the information stored thereon when power is lost. Also coupled to bus is a non volatile persistent storage device such as a magnetic disk optical disk or flash card for storing information including instructions that persists even when the computer system is turned off or otherwise loses power.

Information including instructions for automatic dynamic network device start up is provided to the bus for use by the processor from an external input device such as a keyboard containing alphanumeric keys operated by a human user or a sensor. A sensor detects conditions in its vicinity and transforms those detections into physical expression compatible with the measurable phenomenon used to represent information in computer system . Other external devices coupled to bus used primarily for interacting with humans include a display device such as a cathode ray tube CRT or a liquid crystal display LCD or plasma screen or printer for presenting text or images and a pointing device such as a mouse or a trackball or cursor direction keys or motion sensor for controlling a position of a small cursor image presented on the display and issuing commands associated with graphical elements presented on the display . In some embodiments for example in embodiments in which the computer system performs all functions automatically without human input one or more of external input device display device and pointing device is omitted.

In the illustrated embodiment special purpose hardware such as an application specific integrated circuit ASIC is coupled to bus . The special purpose hardware is configured to perform operations not performed by processor quickly enough for special purposes. Examples of application specific ICs include graphics accelerator cards for generating images for display device cryptographic boards for encrypting and decrypting messages sent over a network speech recognition and interfaces to special external devices such as robotic arms and medical scanning equipment that repeatedly perform some complex sequence of operations that are more efficiently implemented in hardware.

Computer system also includes one or more instances of a communications interface coupled to bus . Communication interface provides a one way or two way communication coupling to a variety of external devices that operate with their own processors such as printers scanners and external disks. In general the coupling is with a network link that is connected to a local network to which a variety of external devices with their own processors are connected. For example communication interface may be a parallel port or a serial port or a universal serial bus USB port on a personal computer. In some embodiments communications interface is an integrated services digital network ISDN card or a digital subscriber line DSL card or a telephone modem that provides an information communication connection to a corresponding type of telephone line. In some embodiments a communication interface is a cable modem that converts signals on bus into signals for a communication connection over a coaxial cable or into optical signals for a communication connection over a fiber optic cable. As another example communications interface may be a local area network LAN card to provide a data communication connection to a compatible LAN such as Ethernet. Wireless links may also be implemented. For wireless links the communications interface sends or receives or both sends and receives electrical acoustic or electromagnetic signals including infrared and optical signals that carry information streams such as digital data. For example in wireless handheld devices such as mobile telephones like cell phones the communications interface includes a radio band electromagnetic transmitter and receiver called a radio transceiver. In certain embodiments the communications interface enables connection to the communication network for automatic dynamic network device start up of the UE .

The term computer readable medium as used herein refers to any medium that participates in providing information to processor including instructions for execution. Such a medium may take many forms including but not limited to computer readable storage medium e.g. non volatile media volatile media and transmission media. Non transitory media such as non volatile media include for example optical or magnetic disks such as storage device . Volatile media include for example dynamic memory . Transmission media include for example coaxial cables copper wire fiber optic cables and carrier waves that travel through space without wires or cables such as acoustic waves and electromagnetic waves including radio optical and infrared waves. Signals include man made transient variations in amplitude frequency phase polarization or other physical properties transmitted through the transmission media. Common forms of computer readable media include for example a floppy disk a flexible disk hard disk magnetic tape any other magnetic medium a CD ROM CDRW DVD any other optical medium punch cards paper tape optical mark sheets any other physical medium with patterns of holes or other optically recognizable indicia a RAM a PROM an EPROM a FLASH EPROM any other memory chip or cartridge a carrier wave or any other medium from which a computer can read. The term computer readable storage medium is used herein to refer to any computer readable medium except transmission media.

Logic encoded in one or more tangible media includes one or both of processor instructions on a computer readable storage media and special purpose hardware such as ASIC .

Network link typically provides information communication using transmission media through one or more networks to other devices that use or process the information. For example network link may provide a connection through local network to a host computer or to equipment operated by an Internet Service Provider ISP . ISP equipment in turn provides data communication services through the public world wide packet switching communication network of networks now commonly referred to as the Internet .

A computer called a server host connected to the Internet hosts a process that provides a service in response to information received over the Internet. For example server host hosts a process that provides information representing video data for presentation at display screen as display device . It is contemplated that the components of system can be deployed in various configurations within other computer systems e.g. host and server .

At least some embodiments of the invention are related to the use of computer system for implementing some or all of the techniques described herein. According to one embodiment of the invention those techniques are performed by computer system in response to processor executing one or more sequences of one or more processor instructions contained in memory . Such instructions also called computer instructions software and program code may be read into memory from another computer readable medium such as storage device or network link . Execution of the sequences of instructions contained in memory causes processor to perform one or more of the method steps described herein. In alternative embodiments hardware such as ASIC may be used in place of or in combination with software to implement the invention. Thus embodiments of the invention are not limited to any specific combination of hardware and software unless otherwise explicitly stated herein.

The signals transmitted over network link and other networks through communications interface carry information to and from computer system . Computer system can send and receive information including program code through the networks among others through network link and communications interface . In an example using the Internet a server host transmits program code for a particular application requested by a message sent from computer through Internet ISP equipment local network and communications interface . The received code may be executed by processor as it is received or may be stored in memory or in storage device or other non volatile storage for later execution or both. In this manner computer system may obtain application program code in the form of signals on a carrier wave.

Various forms of computer readable media may be involved in carrying one or more sequence of instructions or data or both to processor for execution. For example instructions and data may initially be carried on a magnetic disk of a remote computer such as host . The remote computer loads the instructions and data into its dynamic memory and sends the instructions and data over a telephone line using a modem. A modem local to the computer system receives the instructions and data on a telephone line and uses an infra red transmitter to convert the instructions and data to a signal on an infra red carrier wave serving as the network link . An infrared detector serving as communications interface receives the instructions and data carried in the infrared signal and places information representing the instructions and data onto bus . Bus carries the information to memory from which processor retrieves and executes the instructions using some of the data sent with the instructions. The instructions and data received in memory may optionally be stored on storage device either before or after execution by the processor .

In one embodiment the chip set or chip includes a communication mechanism such as a bus for passing information among the components of the chip set . A processor has connectivity to the bus to execute instructions and process information stored in for example a memory . The processor may include one or more processing cores with each core configured to perform independently. A multi core processor enables multiprocessing within a single physical package. Examples of a multi core processor include two four eight or greater numbers of processing cores. Alternatively or in addition the processor may include one or more microprocessors configured in tandem via the bus to enable independent execution of instructions pipelining and multithreading. The processor may also be accompanied with one or more specialized components to perform certain processing functions and tasks such as one or more digital signal processors DSP or one or more application specific integrated circuits ASIC . A DSP typically is configured to process real world signals e.g. sound in real time independently of the processor . Similarly an ASIC can be configured to performed specialized functions not easily performed by a more general purpose processor. Other specialized components to aid in performing the inventive functions described herein may include one or more field programmable gate arrays FPGA not shown one or more controllers not shown or one or more other special purpose computer chips.

In one embodiment the chip set or chip includes merely one or more processors and some software and or firmware supporting and or relating to and or for the one or more processors.

The processor and accompanying components have connectivity to the memory via the bus . The memory includes both dynamic memory e.g. RAM magnetic disk writable optical disk etc. and static memory e.g. ROM CD ROM etc. for storing executable instructions that when executed perform the inventive steps described herein for automatic dynamic network device start up. The memory also stores the data associated with or generated by the execution of the inventive steps.

Pertinent internal components of the telephone include a Main Control Unit MCU a Digital Signal Processor DSP and a receiver transmitter unit including a microphone gain control unit and a speaker gain control unit. A main display unit provides a display device such as a screen to the user in support of various applications and mobile terminal functions that perform or support the steps of automatic dynamic network device start up. The display unit includes display circuitry configured to display at least a portion of a user interface of the mobile terminal e.g. mobile telephone . Additionally the display unit and display circuitry are configured to facilitate user control of at least some functions of the mobile terminal. An audio function circuitry includes a microphone and microphone amplifier that amplifies the speech signal output from the microphone . The amplified speech signal output from the microphone is fed to a coder decoder CODEC .

A radio section amplifies power and converts frequency in order to communicate with a base station which is included in a mobile communication system via antenna . The power amplifier PA and the transmitter modulation circuitry are operationally responsive to the MCU with an output from the PA coupled to the duplexer or circulator or antenna switch as known in the art. The PA also couples to a battery interface and power control unit .

In use a user of mobile terminal speaks into the microphone and his or her voice along with any detected background noise is converted into an analog voltage. The analog voltage is then converted into a digital signal through the Analog to Digital Converter ADC . The control unit routes the digital signal into the DSP for processing therein such as speech encoding channel encoding encrypting and interleaving. In one embodiment the processed voice signals are encoded by units not separately shown using a cellular transmission protocol such as global evolution EDGE general packet radio service GPRS global system for mobile communications GSM Internet protocol multimedia subsystem IMS universal mobile telecommunications system UMTS etc. as well as any other suitable wireless medium e.g. microwave access WiMAX Long Term Evolution LTE networks code division multiple access CDMA wideband code division multiple access WCDMA wireless fidelity WiFi satellite and the like.

The encoded signals are then routed to an equalizer for compensation of any frequency dependent impairments that occur during transmission though the air such as phase and amplitude distortion. After equalizing the bit stream the modulator combines the signal with a RF signal generated in the RF interface . The modulator generates a sine wave by way of frequency or phase modulation. In order to prepare the signal for transmission an up converter combines the sine wave output from the modulator with another sine wave generated by a synthesizer to achieve the desired frequency of transmission. The signal is then sent through a PA to increase the signal to an appropriate power level. In practical systems the PA acts as a variable gain amplifier whose gain is controlled by the DSP from information received from a network base station. The signal is then filtered within the duplexer and optionally sent to an antenna coupler to match impedances to provide maximum power transfer. Finally the signal is transmitted via antenna to a local base station. An automatic gain control AGC can be supplied to control the gain of the final stages of the receiver. The signals may be forwarded from there to a remote telephone which may be another cellular telephone other mobile phone or a land line connected to a Public Switched Telephone Network PSTN or other telephony networks.

Voice signals transmitted to the mobile terminal are received via antenna and immediately amplified by a low noise amplifier LNA . A down converter lowers the carrier frequency while the demodulator strips away the RF leaving only a digital bit stream. The signal then goes through the equalizer and is processed by the DSP . A Digital to Analog Converter DAC converts the signal and the resulting output is transmitted to the user through the speaker all under control of a Main Control Unit MCU which can be implemented as a Central Processing Unit CPU not shown .

The MCU receives various signals including input signals from the keyboard . The keyboard and or the MCU in combination with other user input components e.g. the microphone comprise a user interface circuitry for managing user input. The MCU runs a user interface software to facilitate user control of at least some functions of the mobile terminal for automatic dynamic network device start up. The MCU also delivers a display command and a switch command to the display and to the speech output switching controller respectively. Further the MCU exchanges information with the DSP and can access an optionally incorporated SIM card and a memory . In addition the MCU executes various control functions required of the terminal. The DSP may depending upon the implementation perform any of a variety of conventional digital processing functions on the voice signals. Additionally DSP determines the background noise level of the local environment from the signals detected by microphone and sets the gain of microphone to a level selected to compensate for the natural tendency of the user of the mobile terminal .

The CODEC includes the ADC and DAC . The memory stores various data including call incoming tone data and is capable of storing other data including music data received via e.g. the global Internet. The software module could reside in RAM memory flash memory registers or any other form of writable storage medium known in the art. The memory device may be but not limited to a single memory CD DVD ROM RAM EEPROM optical storage or any other non volatile storage medium capable of storing digital data.

An optionally incorporated SIM card carries for instance important information such as the cellular phone number the carrier supplying service subscription details and security information. The SIM card serves primarily to identify the mobile terminal on a radio network. The card also contains a memory for storing a personal telephone number registry text messages and user specific mobile terminal settings.

While the invention has been described in connection with a number of embodiments and implementations the invention is not so limited but covers various obvious modifications and equivalent arrangements which fall within the purview of the appended claims. Although features of the invention are expressed in certain combinations among the claims it is contemplated that these features can be arranged in any combination and order.

