---

title: Methods and apparatus to display process control information
abstract: Example methods and apparatus to display process control information are disclosed. A disclosed example method includes receiving a request to view process control information associated with a field device, accessing, via a database, a device description file associated with the field device, wherein the device description file is formatted to conform to an Electronic Device Description Language (EDDL), and generating a display for the process control information using the device description file, wherein the device description file includes a script extension that conditionally displays a graphic if a portion of the process control information matches a condition within the script extension.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08717374&OS=08717374&RS=08717374
owner: Fisher-Rosemount Systems, Inc.
number: 08717374
owner_city: Round Rock
owner_country: US
publication_date: 20100913
---
The present disclosure relates generally to process control systems and more particularly to methods and apparatus to display process control information.

Process control systems like those used in chemical petroleum or other processes typically include one or more process controllers and input output I O devices communicatively coupled to at least one host or operator workstation and to one or more field devices via analog digital or combined analog digital buses. The field devices which may be for example valves valve positioners switches and transmitters e.g. temperature pressure and flow rate sensors perform process control functions within the process such as opening or closing valves and measuring process control parameters. The controllers receive signals indicative of process measurements made by the field devices process this information to implement a control routine and generate control signals that are sent over the buses or other communication lines to the field devices to control the operation of the process. In this manner the controllers may execute and coordinate control strategies or routines using the field devices via the buses and or other communication links communicatively coupling the field devices.

Information from the field devices and the controllers may be made available to one or more applications i.e. routines programs etc. executed by the operator workstation e.g. a processor based system to enable an operator to perform desired functions with respect to the process such as viewing the current state of the process e.g. via a graphical user interface evaluating the process modifying an operation of the process e.g. via a visual object diagram etc. Many process control systems also include one or more application stations. Typically these application stations are implemented using a personal computer workstation or the like that is communicatively coupled to the controllers operator workstations and other systems within the process control system via a local area network LAN . Each application station may execute one or more strategies routines or applications that perform campaign management functions maintenance management functions virtual control functions diagnostic functions real time monitoring functions safety related functions configuration functions etc. within the process control system.

Electronic device description language EDDL files are commonly used within process control systems to provide a structured and or standardized format to describe and specify functions of field devices. Process controllers and or workstations may use EDDL files to facilitate interpretation control and or management of field devices. Additionally process controllers and or workstations may utilize EDDL files to generate graphical representations of process control information output from the field devices. In this manner EDDL files specify a visualization of process control information based on parameters associated with field devices.

Example methods and apparatus to display process control information are described. In one example a method includes receiving a request to view process control information associated with a field device. The example method also includes accessing via a database a device description file associated with the field device wherein the device description file is formatted to conform to an Electronic Device Description Language EDDL . The example method further includes generating a display for the process control information using the device description file wherein the device description file includes a script extension that conditionally displays a graphic if a portion of the process control information matches a condition within the script extension.

In another example a method includes receiving information associated with a field device and determining a condition within the information that identifies when process control information from the field device is to be displayed as a graphic. Additionally the example includes creating a script extension based on the condition to display the graphic when the process control information from the field device matches the condition. Further the example method includes storing the script extension to a device description file associated with the field device.

An example apparatus includes an electronic device description processor to access via a database a device description file associated with a field device wherein the device description file is associated with an Electronic Device Description Language EDDL . The example apparatus also includes a graphics processor to generate a display for the process control information using the device description file and process control information received from the field device wherein the device description file includes a script extension that instructs the graphics processor to display a graphic if a portion of the process control information matches a condition within the script extension.

Although the following describes example methods and apparatus including among other components software and or firmware executed on hardware it should be noted that these examples are merely illustrative and should not be considered as limiting. For example it is contemplated that any or all of the hardware software and firmware components could be embodied exclusively in hardware exclusively in software or in any combination of hardware and software. Accordingly while the following describes example methods and apparatus persons of ordinary skill in the art will readily appreciate that the examples provided are not the only way to implement such methods and apparatus. For example while the example methods and apparatus are described in connection with displaying process control information the example method and apparatus are more generally applicable and may be implemented to display information associated with any automation system batch processing system manufacturing system industrial control system safety instrumented system etc.

Process control systems generally include controllers to perform routines control strategies and or algorithms that manage field devices located in the control system. The field devices may be for example valves valve positioners switches and transmitters and may perform process control functions such as opening or closing valves and measuring process control parameters. In addition to managing field devices controllers may generate process control information based on data received from the field devices. The process control information may include process statistics alarms monitoring information process trend information diagnostic information field device status information and or messages from the field devices.

Controllers transmit process control information to applications operating on workstations so that operators may manage the process control system. Typically applications display process control information as at least one graphical data representation in a user interface. Data representations are helpful to operators as these data representations typically display process control information graphically in the form of charts graphs data tables list boxes graphical symbols text etc. The data representations and corresponding text within the user interface are generally displayed in a format and or language associated with a locale of an operator viewing the information.

In many known systems workstations display process control information from field devices via corresponding electronic device description EDD files. In many instances the EDD files are transported to a process control environment along with a corresponding field device. In some examples the EDD files may be included within a field device and uploaded to a process control system upon installing the field device into the process control system. In these instances a controller may store the EDD files. Alternatively each workstation coupled to the process control system may store a local copy of the EDD files. In other examples process control personnel may store EDD files to a central database and access the EDD files to display process control information from a corresponding field device.

Currently many widely used process control communication protocols support the use of EDD files conforming to an Electronic Device Description Language EDDL standard. These process control protocols include for example Foundation Fieldbus Hart Communication Foundation and Profibus. Further the Field Device Integration FDI standard may support the use of the EDDL to create a common toolset used by process control personnel to manage field devices communicatively coupled together within control systems.

The EDDL provides a universal method of creating EDD files to access diagnostic information status information asset management information and or any other process control information associated with a field device. In this manner EDDL may be used by process control personnel to integrate field devices with process control systems thereby creating an interoperable environment where process control information from field devices may be accessed by workstations e.g. processors servers computers etc. and or handheld devices e.g. field communicators cell phones smartphones laptops netpads etc. . The workstations and or the handheld devices may use the process control information in combination with EDDL formatted EDD files to configure field devices calibrate field devices diagnose issues associated with the field devices and or provide data status information and or alarms for user interface displays. In this manner the EDD files enable applications operating on workstations and or handheld devices to display graphical representations of process control information generated by corresponding field devices.

The EDDL is a text based language that may be used to describe characteristics parameters and or functions of field devices. This functionality may include for example menu system descriptions general device information diagnostics performance analysis information operational statistics parameterization information range setup information simulation parameters override information calibration trim information monitoring information device security protocols and or reset information. Manufacturers of field devices use the EDDL to create EDD files that provide a standardized form and or structure for host workstations and or handheld devices to access and display process control information independent of a communication protocol and or a device operating system e.g. Windows Android Blackberry OS iOS etc. . Through the relatively wide use of the EDDL with field devices process control personnel may select best in class field devices for use in a process control system regardless of a protocol and or type of the process control system.

Field device designers may use an EDD file to define where parameters associated with a field device are to be displayed within an application displayed via a user interface. The display information may include a type of graphical representation based on a type of parameterized process control information. EDD files may also include EDDL Methods which is a scripting language based on a subset of American National Standards Institute ANSI C programming language that is used to support step by step field device setup interactive field device setup and or calibration procedures. Using EDD files field device manufacturers can enable process control personnel to access field devices within the full scope of the field device functionality where all menus and parameters appear as intended by the manufacturer.

To define an EDD file field device manufacturers may specify specific locations within an application where graphical representations of process control information from a field device are to be displayed. Further process control personnel may edit an EDD file to reflect their preferences and or to reflect conditions within a process control system. However many known EDD files are static in regards to the definition and display of graphics e.g. graphic representations of process control information . In other words the graphics are displayed within an application regardless of the process control information because EDD files may not support conditionally displaying graphics based on the process control information.

Further many graphics are relatively static by not enabling a user to change graphic properties e.g. size text color transparency placement within a user interface etc. and or features associated with graphics while viewing process control information. For example an EDD file may specify that a bar chart showing a pump speed is to be displayed in a center of a user interface and the bar chart is to have a height of 3 inches. Currently a user viewing this bar chart may be restricted by EDD files from moving the bar chart to another location within the user interface changing the height of the bar chart changing a color within the bar chart etc.

The example methods and apparatus described herein implement script extensions that may be implemented within EDD files to conditionally display graphics based on process control information generated by field devices. The example script extensions may also be embedded or implanted within EDD files to enable users to modify displayed graphics by defining graphical properties and or parameters that may be changed based on information e.g. mouse clicks on a graphic provided by a user.

Script extensions are instructions within an EDD file that generate a graphic to display in a user interface based on process control information from a field device matching and or satisfying one or more conditions. For example the example methods and apparatus described herein may utilize expressions on attributes and or properties associated with one or more field devices as a script extension to display a graphic. The methods and apparatus described herein may also utilize event handlers as script extensions to display a graphic when a predefined event occurs within a field device. Further the example methods and apparatus described herein may be implemented within an EDD file as a method and or function script extension to display a value update parameter reference s and or store calculated values information based on portions of process control information from a field device matching a predefined condition.

Additionally the example methods and apparatus described herein may utilize one or more converter script extensions to convert process control information into a graphic if a portion of the process control information generated by a field device matches a predefined condition. A script extension may also include a trigger script extension that displays a graphic when periodically changing process control information matches a condition e.g. a threshold . In some examples the script extensions may be defined within a composite structure of an EDD file and interact with other instructions and or functions to display process control information.

To create the example script extensions the example methods and apparatus described herein determine conditions within process control information that identify when graphics are to be displayed. In some examples process control designers may define conditions based on preferences for displaying graphics. Conditions may include for example thresholds for displaying an indicator graphic to warn a user that some process control information from or parameter values associated with a field device is approaching and or has exceeded a limit. Conditions may also include for example events specified within process control information that indicate a graphic is to be displayed to represent the event. In another example conditions may include lists of conversions to change a portion of process control information into a corresponding graphic. Additionally conditions may specify when certain parameters may be modified by a user.

The example methods and apparatus described herein may use conditions to generate script extensions within EDD files. For example some conditions may be implemented by trigger script extensions while other conditions may be implanted by converter and or event handler script extensions. In other examples conditions may be implemented by function and or expression script extensions. In yet other examples conditions may be implemented within script extensions using a combination of the different types of script extensions and or other types of script extensions. Upon generating script extensions the example methods and apparatus described herein imbed and or include the script extension within the EDD file and store the EDD file to a database accessible by workstations and or handheld devices.

By utilizing the example script extensions within EDD files the example methods and apparatus described herein enable process control personnel and or field device manufacturers to design applications that display process control information in a more comprehensive and or complete manner. In other words the example script extensions enable device manufacturers to provide calculations and or functions to be executed on a workstation rather than attempting to include the calculations and or functions within the field devices. Because workstations and or handheld devices typically have more processing power than field devices device manufacturers may implement via the script extensions within EDD files relatively more complex graphics and or functions. Further the example script extensions enable field device manufacturers to provide differentiation in their devices in regards to the graphical representations of the process control information utilized as tools to support and maintain the field devices.

The illustrated example also includes a server hosting a script generator . The script generator creates script extensions within EDD files based on conditions associated with the process control system . While the script generator is shown within the server in other examples the script generator may be included within the workstation and operate in parallel with the display interface .

The example workstation and or the example server of may include any computing device such as a personal computer a laptop a server a controller a personal digital assistant PDA a micro computer etc. The example workstation may also include any mobile computing device such as for example a cell phone a smartphone a PDA a netpad a field communication etc. The workstation and or the server may be implemented using any suitable computer system or processing system e.g. the processor system P of . For example the workstation could be implemented using a single processor personal computer single or multi processor workstations etc.

The example process control system may include any type of manufacturing facility process facility automation facility safety instrumented facility and or any other type of process control structure or system. In some examples the process control system may include multiple facilities located at different locations. Additionally the example process control environment may include other process control systems not shown that may be included within the same facility and or located at a different facility.

The example process control system includes a controller that may be communicatively coupled to the workstation and or the server via a local area network LAN . The LAN may be implemented using any communication medium and or protocol. For example the LAN may be based on a hardwired or wireless Ethernet communication scheme. However any other suitable communication medium and protocol could be used. Furthermore although the LAN is shown more than one LAN and or wireless network and appropriate communication hardware may be used to provide redundant communication paths.

The process control environment may include a firewall not shown to provide remote workstations e.g. workstations outside of the process control environment access to EDD files and or process control information within the process control environment . The process control environment may also include one or more routers not shown to communicatively couple workstations not shown to the LAN . The routers may also communicatively couple multiple process control systems.

The process control system also includes field devices e.g. input and or output devices . The field devices may include any type s of process control component s capable of receiving inputs generating outputs and or controlling a process. The field devices may include control devices such as for example valves pumps fans heaters coolers and or mixers to control a process. Additionally the field devices may include measurement or monitoring devices such as for example temperature sensors pressure gauges concentration gauges fluid level meters flow meters and or vapor sensors to measure portions of a process. The field devices receive instructions from the controller via inputs to execute a specified command and cause a change to the process implemented and or controlled by the field devices . Furthermore the field devices measure process data environmental data and or input device data and transmit the measured data via outputs to the controller as process control information. This process control information may include the values of variables corresponding to measured outputs from the field devices .

The field devices may also include EDD files that are accessible by the controller the server and or the workstation . The EDD files describe characteristics functions parameters and or features of the field devices . The EDD files are stored to an EDD library . The EDD library may be implemented by Electronically Erasable Programmable Read Only Memory EEPROM Random Access Memory RAM Read Only Memory ROM and or any other type of memory. The EDD files may be stored to the EDD library via the controller and or by process control personnel via the server . The workstation can access the EDD library for EDD files to determine how to display process control information associated with the field devices . Process control designers and or engineers may use the workstation and or the script generator to modify the EDD files based on display preferences and or setup configurations of the process control system and or the field devices .

While the EDD library is shown as being separate from the controller in some process control environments the library may be included within the controller the workstation and or the server . In these examples the controller may locally access EDD files to operate a control routine and or algorithm. Alternatively the workstation and or the server may locally access EDD files to display corresponding process control information.

The process control system also includes an I O device e.g. one or more I O cards to receive data from the field devices and convert the data into communications capable of being processed by the example controller . Likewise the I O device may convert data or communications from the controller into a data format capable of being processed by the corresponding field devices .

The example controller of operates one or more control routines e.g. process control algorithms functions and or instructions to manage the field devices within the process control system . The control routines may include process monitoring applications alarm management applications process trending and or history applications diagnostic applications batch processing and or campaign management applications statistical applications streaming video applications advanced control applications safety instrumented applications etc. The example controller transmits process control information e.g. resources to the workstation . The process control information transmitted by the controller may include for example process control values data values alarm information text status information diagnostic information error messages parameters events and or device identifiers.

In some examples the controller may also transmit process control information from the field devices to a database . The database may be implemented by Electronically Erasable Programmable Read Only Memory EEPROM Random Access Memory RAM Read Only Memory ROM and or any other type of memory. The process control information may be stored and or organized based on an associated field device. For example output values e.g. process control information associated with a PS pump speed parameter of a pump with a PUMP identifier may be stored within the database indexed by the PUMP identifier and the PS parameters. A EDD file that references the PS parameter may access the database to search for process control information stored in association with the PS parameter.

The example workstation may access the example database to display stored process control information. Other workstations and or handheld devices not shown may also access the database for process control information. In this manner any computing device with access to the process control environment may access the database to graphically display process control information.

The example workstation and or other workstations with access to the process control system may be configured to view modify and or correct one or more processes within the process control system via one or more applications. In the illustrated example an application is displayed via a user interface . Applications may include an enterprise view application a graphics studio application an explorer application and or any other type of process control based application. These applications display information within the workstation via the user interface . The user interface may include a graphical window e.g. an application programming interface API that may be displayed within the workstation to show process control information displayed as graphical representation s e.g. functional block diagrams and or schematics . The workstation may be capable of displaying more than one user interface that may be communicatively coupled to the display interface .

In the example of the script generator identifies conditions within process control information from the field devices and or identifies conditions within EDD files associated with the field devices . The script generator accesses the EDD files from the EDD library . The example script generator creates a script extension based on the conditions and inserts and or includes the script extension within the appropriate EDD file. The script generator may then store the modified EDD file to the EDD library . The script generator is described in further detail in conjunction with .

The example display interface of generates graphical representations of process control information from the field devices based on EDD files stored within the EDD library . The display interface transmits the graphical representations to the application for display via the user interface . In this manner a user of the workstation may view process control information associated with the field devices . To display process control information the example display interface may receive a request from a user of the workstation to view information associated with the field devices and or a specific field device within the process control system . In other examples the display interface may receive process control information from the controller and identify which of the field devices correspond to the information.

The example display interface then accesses the EDD library for EDD files associated with the requested field devices . The display interface reads the EDD files for instructions regarding how process control information is to be displayed. In some instances the EDD files may include instructions for displaying menu s as part of the application . The EDD files may provide descriptions of functionality for each item within the menu s . The EDD files may also include instructions defining how graphic s are to be displayed within the application . For example an EDD file may include instructions defining dimensions layout formatting data fields and or placement of a table. In another example an EDD file may include instructions defining dimensions layout formatting placement data fields and or placement of a graph and or chart. In yet other example an EDD file may link and or reference a graphic to be displayed within the application .

To display a graphic within the application and or any other application the example display interface of uses instructions within the EDD file to construct format and or position the graphic. In some examples the EDD file may include an instruction that specifies a certain graphic is to be displayed. The EDD file may include a reference and or a link to a database of graphics that the display interface accesses to locate the referenced graphic. In this manner the display interface may display pre made graphics e.g. clip art pictures animations etc. that are referenced within the EDD file. Thus a graphic in a database may be concurrently displayed by workstations within the process control environment . The example display interface may also render the referenced graphic with corresponding process control information for display within the application .

The example display interface of combines graphics with process control information by using references and or links within the EDD files to process control information stored within the database and or the controller . For example an EDD file describing a table graphic may include references for each of the table cells to a parameter e.g. process control information . The reference may include a directory location within a memory a location within a hierarchical data scheme an Internet address of a server hosting process control information e.g. a server associated with the OPC and or a location within the controller specified by parameters that correspond to the process control information. The display interface uses the links and or references to insert and or combine the process control information with graphics. The display interface may then render the graphics with the process control information using instructions within EDD files to display the process control information graphically within the application via the user interface .

In addition to implementing statically defined graphics the example display interface may read and or execute instructions within the EDD files that include script extensions. By executing the script extensions the display interface executes conditional instructions for displaying process control information. In many instances the workstation and or any other processor that may include the display interface typically has more computing power for executing relatively complex instructions. Thus an expression event handler function method converter and or trigger that may consume a relatively large amount of processing bandwidth may be expressed within EDD files executed by for example the workstation thereby reducing processing requirements of the field devices . For example the display interface may execute relatively complex computations expressions functions and or methods in script extensions e.g. triple integral functions a Bayesian statistical analysis Analysis of Variance statistical models etc. . By offloading processing to the workstation device manufacturers can focus the processing power of the field devices for measuring environmental and or process control conditions within the process control system and reporting the measured values.

By including script extensions within EDD files the example display interface enables field device designers to specify relatively complex graphics to display within the application that would otherwise be impossible and or difficult to define within instructions stored within the field devices . For example the display interface may execute event handlers and or converters that specify displaying one or more graphics only if process control information from the field devices matches one or more specified conditions. In other examples the display interface uses event handler script extensions to enable users of the workstation to specify and or modify how certain graphics are displayed. In yet other examples the display interface may use method script extensions to write process control information to database s and or memory s within the process control environment if a portion of the process control information matches one or more conditions. In further examples the display interface may use trigger script extensions to execute a set of instructions if a portion of the process control information changes incrementally e.g. a timer to match one or more conditions.

The example script generator creates EDD files including script extensions. The example script generator may generate multiple EDD files concurrently or alternatively process EDD files in series. To create modify view and or edit EDD files stored within the EDD library the example script generator includes an editor . The example editor may function as an interface to enable a field device developer and or process control personnel to check for syntax and or logical errors within the EDD files. In examples where the EDD files are in an Extensible Stylesheet Language Transformation XSLT format and or an Extensible Markup Language XML format the editor may be implemented using XMLSpy from Altova . In these other examples the editor may convert the EDD files from an XML and or XSLT format into a HyperText Markup Language HTML file. The display interface may then access HTML formatted EDD files in examples where the workstation is communicatively coupled to the EDD library via the Internet.

To create EDD files the example editor may access the EDD library and or the database for information describing functionality of the field devices . In other examples a user may utilize the editor to create an EDD file based on specifications associated with the field devices . For example the editor may invoke a text editing application that a device designer may use to create an EDD file. In other examples the editor may be a routine and or algorithm that generates EDD files based on the inputs the outputs process control information stored within the database and or any additional information associated with the field devices . For example the editor may identify types of outputs from a field device and create an EDD file to display outputted process control information based on the output type. In some examples the editor may be used to create an EDD file that describes features and or functionality of one of the field devices . In other examples the editor may create an EDD file that describes features and or functionality of the field devices collectively and or the process control system .

The example editor of the illustrated example creates script extensions within EDD files. A script extension database stores a library of predefined script extensions. The script extension database may be implemented by Electronically Erasable Programmable Read Only Memory EEPROM Random Access Memory RAM Read Only Memory ROM and or any other type of memory. In some examples the script extension database may store script extensions within a script architecture e.g. the script extension architecture shown and or a composite structure e.g. the composite structure shown in that specify how script extensions are utilized based on global sets of information associated with the field devices . In other examples the script extensions may be stored as a list that the editor uses to select a script extension that matches one or more conditions within process control information. In the illustrated example the script extension database includes examples of script extensions including for example expressions event handlers functions methods converters and or triggers.

To create script extensions within an EDD file the example editor identifies conditions within process control information stored within the database and or features and or functions associated with the field devices . The example editor identifies a condition based on instances that indicate a graphic is to be displayed and or a set of instructions is to be executed in response to some portion of process control information matching a threshold and or a predefined event. The editor may also examine syntax of the EDD files to identify conditions. For example the editor may identify conditions based on lexemes that indicate for example strings of letters strings of numbers punctuation marks mathematical operators etc.

Upon determining a condition the example editor of accesses the script extension database to match the condition to a script extension. The editor may match a condition to a script extension by determining a script extension architecture and or structure that resembles and or includes the condition. In other examples a user of the editor may select a script extension based on an understanding of the condition. The example editor then copies the selected script extension and inserts and or includes the script extension within the EDD file s . In this manner the editor links a portion of an EDD file to an inserted script extension. For example the editor may use names of parameters properties and or attributes of process control information within a mathematical expression script extension of an EDD file to calculate a value to be displayed as a graphic.

Upon creating script extension s within EDD file s the example editor transmits the EDD file s to a compiler . The example compiler of processes compiles checks and or translates the EDD file s with the script extension s for storage within the EDD library and or for use by the example display interface . The example compiler includes a scanner that uses any number and or type s of algorithm s logic and or methods to scan and or parse EDD files to identify syntax errors protocol errors and or lexemes. The scanner provides the lexemes to a tokenizer to convert EDD file s to a compressed binary format. Any errors detected by the scanner may be communicated to a field device designer via the editor . Based on a type of error detected by the scanner the example editor provides tools for a field device designer to test and or debug the detected errors. The editor enables the field device designer and or other process control personnel to edit EDD file s to correct any detected errors. In this manner the example scanner enables a field device designer to test and or simulate a user interaction with EDD file s which may result in improved quality of the EDD file s .

Using any number and or type s of algorithm s logic and or method s the example tokenizer of processes the lexemes identified by the scanner to identify particular tokens e.g. classifiable strings of input characters . For example the scanner may identify a string of letters lexeme representing for example a sentence which the example tokenizer demarcates and or separates into one or more compressed binary words. Each token identified by the tokenizer has both a value e.g. the actual name of a variable and a type e.g. a variable an operator a number etc. thereby enabling the tokenizer to compress EDD file s into a binary format. The compressed format may prevent tampering and or subsequent processing issues by process control personnel. Because the tokenized EDD files are relatively small tokenized files for many field devices can be stored in a limited flash memory of a handheld device and or the workstation .

The example script generator of also includes an interpreter to translate EDD file s into a vendor and or system specific form. While many EDD files that support the EDDL standard are utilized by process control systems the interpreter may be used to translate some EDD files to a proprietary process control standard and or any other standard requested by a process control manager. The script generator may utilize the interpreter to convert an EDD file to a format compatible with the process control system and or applications within the workstation . For example the interpreter may convert some EDD files to an HTML format that may be accessed by a web browser. In some examples the interpreter may translate an EDD file prior to the tokenizer compressing the EDD file. In other examples the interpreter may translate compressed binary EDD files. The example interpreter may use any number and or type s of algorithm s logic and or method s to translate EDD files into a corresponding specified format.

Upon scanning tokenizing and or translating EDD files the example compiler of the illustrated example stores the EDD file s to the EDD library . In some examples the compiler may store multiple translated versions of the same EDD file thereby enabling different applications associated with different formats and or operating systems to access a compatible EDD file to display process control information. In other examples the compiler may store a compressed binary version and an uncompressed version of an EDD file thereby enabling a user to select an EDD file based on memory constraints of a device.

The example of also shows the example display interface which accesses the EDD library for EDD files to display process control information. In some examples the display interface may periodically access the EDD library to store EDD files locally to a handheld device and or the workstation . In this manner a user may view graphics of process control information without having a device communicatively coupled to the LAN . In other examples the display interface accesses the EDD library for EDD files any time a request to view process control information is received.

The example display interface may concurrently process multiple requests to view process control information from workstations e.g. the workstation . Alternatively the example display interface may process a single request to view process control information. In these alternative examples multiple display interfaces may be accessed to process multiple requests. While the example display interface is described in connection with the workstation the display interface may operate with other workstations and or devices that are associated with the process control environment of .

To receive a request to view process control information graphically the example display interface includes a receiver . The example receiver is communicatively coupled to the user interface within the workstation . The receiver receives requests from a user to view process control information via the workstation and or the user interface . A user selects to view process control information by entering an identifier associated with the desired information into a request and or search field. For example a user may enter an identifier of a field device. In another example a user may enter an area and or a collection of field devices within the process control system . In yet another example a user may specify an identifier e.g. a variable name of a parameter to view process control information associated with the parameter.

A user may also specify process control information by browsing to a desired object e.g. a listing of a field device component area etc. within a data directory. For example a user may utilize an open function and navigate a directory to a desired field device. In yet other examples a user may view process control information by selecting a graphical representation and or an identifier associated with the information via the user interface . Alternatively a user may enter a website address that includes and or lists process control information. A user may then select a desired process control object listed within the displayed webpage. In some examples a user may select multiple process control objects. In these examples the process control objects may be included within a single request or alternatively multiple requests.

Upon receiving a request to view process control information the example receiver transmits the request to an EDD processor . The example EDD processor parses the request into information to identify EDD files. The EDD processor uses the information to access the EDD library to search for EDD files that match the requested process control information. For example a request for process control information may include a Rosemount field device pressure sensor type and a PRS02 identifier of the pressure sensor. The EDD processor searches for EDD files that define functionality for a Rosemount field device pressure sensor. The EDD processor also searches EDD files that include definitions specifically for the PRS02 device. In some instances a title and or a file name of the EDD file may include the type and or the identifier. In other instances metadata associated with the EDD file may include the type and or the identifier. In yet other instances the EDD processor may have to search text within the EDD files for a matching type and or identifier.

After locating EDD file s that match requested process control information the EDD processor forwards the EDD file s to a graphics processor . The example graphics processor generates a display for the requested process control information using the EDD file s . The example graphics processor also accesses the database for the requested process control information. In some examples the graphics processor may use links and or references within the EDD file s to locate corresponding process control information within the database . Additionally or alternatively the graphics processor may use identifiers and or other information included within a request from a user to locate corresponding process control information within the database . In these other examples the graphics processor matches the located process control information to portions of the EDD file s that utilize the process control information.

The example graphics processor generates graphics to display via the user interface by executing instructions within the EDD file s . The graphics processor may execute instructions to determine any menu display and or format information. The information may be used by the graphics processor to create a display file and or to format a template to display process control information. The menu information may also include menu functions and or options that are available to be displayed with the user interface . The menu functions may include for example options for configuring a field device viewing process control information generated by a field device and or any other information associated with the a field device.

The example graphics processor also reads EDD file s for references to process control information processed by the controller of . In some examples portions of an EDD file may include a link a file directory and or an identifier that corresponds to process control information. For example the EDD file may include a pump speed data field. The EDD file may also include a link to a pump speed parameter and or variable calculated by the controller . The example graphics processor uses the link to request the pump speed value from the database or alternatively the controller . The graphics processor may then insert the pump speed value into a corresponding EDD file to generate a graphical representation of the pump speed value e.g. process control information . The graphical representation may include for example a gauge displaying the pump speed. In other examples the graphics processor may use links references data locations and or identifiers within an EDD file to access corresponding process control information from the database .

The example graphics processor uses EDD file s to generate a display file. The display file specifies for example locations of process control information graphical representations of requested process information and or data fields. To display the process control information as one or more graphics the graphics processor uses formatting and or graphic instructions within EDD file s to generate a display file. Some EDD file s may define attributes of for example a chart graph and or a table that the graphic processor reads to generate the described graphic. The graphics processor then inserts embeds and or otherwise includes corresponding process control information into properties and or attributes of the graphic as a display file. A renderer executes the display file to generate the described graphic with the corresponding process control information.

In some examples EDD file s may reference a predefined graphic that is stored in a graphics database . In these examples the graphics processor uses a link reference and or identifier to locate a corresponding graphic within the graphics database . The graphics processor then makes a copy of the graphic and includes the graphic within the display file to be rendered by the render . In other examples the graphics processor may link the graphic to the display file and insert and or embed process control information into attributes and or properties associated with the graphic so that the renderer may display the graphic with the process control information via the user interface .

The example graphics processor also executes script extensions within the EDD file s . The script extensions instruct the graphics processor to display a graphic if a portion of the process control information matches a condition within the script extension. If the condition matches the process control information the graphics processor may access the graphics database for a corresponding graphic. For example an EDD file may include a function script extension that specifies that an alert graphic is to be displayed if an output indicates a pump speed exceeds 90 of the maximum pump speed. If a user requests to view process control information associated with the pump the graphics processor executes an EDD file associated with the pump to determine which process control information to access from the database . The graphics processor then uses the pump speed process control information to execute a function script extension e.g. compare the pump speed to the maximum value of 90 . If the graphics processor determines the pump speed matches the condition by exceeding 90 the graphics processor uses a reference within the function script extension to a graphic within the graphic database that is to be displayed. The graphics processor accesses the graphic from the database to include the graphic within a display file.

The example graphics processor of may execute an event handler within a script extension to display a graphic when a process control event specified within process control information matches a condition. Additionally the graphics processor may execute a function within a script extension to write a value to a data source when the process control information matches a condition. The graphics processor may also display the written value within a graphic. In this example the graphics processor may write a value calculated via the EDD file to the database . In other examples the graphics processor may write the value to a memory within the workstation . Further the graphics processor may execute a converter within a script extension to display a graphic by changing a portion of process control information into a graphic if the portion of the process control information matches a condition. Also the graphics processor may execute a trigger within a script extension to display a graphic when a portion of process control information incrementally changes to reach a condition.

After the graphics processor has created a display file by executing EDD file s including script extensions the graphics processor transmits the display file to the renderer . While the example renderer is shown within the display interface of in other examples where the display interface may be separate from a device to display process control information the renderer may be located within the device. In these examples the graphics processor transmits the display file e.g. via the Internet and or the LAN to the renderer .

The example renderer processes e.g. renders the display file into a format that is viewable by a user via for example the user interface . The example renderer may generate a display based on a display size of a device e.g. the workstation that will display graphic s of the process control information. After rendering the display file the example renderer transmits the rendered display to the application within the workstation to display graphically the requested process control information.

While the example display interface and the script generator have been illustrated in one or more of the servers platforms interfaces data structures elements processes and or devices illustrated in may be combined divided re arranged omitted eliminated and or implemented in any way. Further the example editor the example script extension database the example compiler the example scanner the example tokenizer the example interpreter the example receiver the example EDD processor the example graphics processor the example graphics database the example renderer and or more generally the example display interface and or the script generator may be implemented by hardware software firmware and or any combination of hardware software and or firmware. Thus for example any of the example editor the example script extension database the example compiler the example scanner the example tokenizer the example interpreter the example receiver the example EDD processor the example graphics processor the example graphics database the example renderer and or more generally the example display interface and or the script generator could be implemented by one or more circuit s programmable processor s application specific integrated circuit s ASIC s programmable logic device s PLD s and or field programmable logic device s FPLD s etc.

When any apparatus claim of this patent is read to cover a purely software and or firmware implementation at least one of the example editor the example script extension database the example compiler the example scanner the example tokenizer the example interpreter the example receiver the example EDD processor the example graphics processor the example graphics database and or the example renderer are hereby expressly defined to include a computer readable medium such as a memory DVD CD etc. storing the software and or firmware. Further still the example display interface and or the script generator may include one or more elements processes and or devices in addition to or instead of those illustrated in and or may include more than one of any or all of the illustrated elements processes and devices.

The example script extension architecture includes a script body . The script body includes instructions that link script extensions variables parameters and or attributes. In this example the script body is linked to a timer which includes a set of instructions that cause a processor to periodically increment a value of a variable. The example script body of the illustrated example uses the timer in conjunction with a trigger script extension . The example trigger script extension uses a value from the timer to determine when to display a graphic. The timer and the trigger script extension are coupled to a global sets library that defines features characteristics and or functionality of a field device associated with the script extension architecture . In this example the timer and or the trigger script extension may be linked to parameters associated with inputs outputs and or other variables reported by the field device and specified within the global sets library . For example a script to generate a graphic based on the trigger script extension may reference a definition of a graphic specified within the global sets library .

The example script extension architecture includes a converter script extension that converts a parameter into a graphical representation that is specified within the global sets library . The example parameter is calculated within the script extension architecture by a method script extension which is referenced by a method reference linked to the script body . The method reference may be a pointer to the method script extension that enables multiple instances within the script body to execute the method script extension .

In a similar manner multiple instances within the script body may point to a table reference to access a table that lists values of variables and or attributes specified within the global sets library . Additionally multiple instances of the script body may point to a property reference to access a property definition that references one or more variables and or attributes specified within the global sets library .

Similar to the script extension architecture of the composite structure includes a script body and a global sets library for implementing an EDD file for a field device. The composite structure also includes a shape tree block that defines and or specifies graphics. In contrast the script extension architecture may define and or specify graphics within the script body . A shape usage block defines which graphics within the shape tree block are to be displayed based on conditions e.g. Event Usage and Property Usage within script extensions. Additionally a composite shape block may define how graphics within the shape tree block are to be displayed. In other examples the composite structure may reference graphics stored within for example the graphics database .

The example composite structure of the illustrated example includes a first method script extension a second method script extension and a converter script extension . The first method script extension displays a graphic based on a value of a first parameter . A method reference block enables multiple instances within the script body to point to the first method script extension . Likewise a method reference block enables multiple instances within the script body to point to the second method script extension which may access information associated with the field device from the global sets library . The example converter script extension determines when a graphic is to be displayed based on an argument block and a converter usage instance e.g. a condition matching a portion of process control information represented by a parameter .

In this example a user selects a Manual Setup option within the menu panel . In response to the Manual Setup option being selected the display interface determines from the EDD file that a parameter panel and a graphic panel are to be displayed. The Manual Setup option enables a user to specify how process control information from the Tank field device is to be graphically displayed. The parameter panel includes a Level parameter that enables a user to select a unit type within a data field for displaying a level of the Tank field device. The parameter panel also includes a Temperature parameter e.g. Temp that enables a user to select a unit type for displaying a temperature of a fluid within the Tank field device. Further the parameter panel includes a Tag parameter that enables a user to enter an identification value for the Tank field device. Further the parameter panel includes a Lower Range and an Upper Range parameter that enable a user to specify when an alert is to be displayed based on a fluid level within the Tank field device.

The graphic panel includes a preview of a tank graphic based on the parameters within the parameter panel . For example the tank graphic includes the Upper Range parameter of 90 and the Lower Range Parameter of 10 . The graphic panel also includes a height adjuster and a width adjuster that are associated with an event handler script extension. For example the event handler script extension may include the instructions 

The instructions indicate that if the left button e.g. Button.Left of the width adjuster is selected the display interface is to decrease the width of the graphic by 10 units e.g. this.Width 10 . Similarly the display interface can increase the width of the graphic by 10 units each time the right button of the width adjuster is selected. In this manner the event handler script extension enables the example display interface to adjust e.g. modify the graphic based on information from a user without changing the EDD file. In other words the event handler script extension within the EDD file changes a display of the graphic based on a user selecting a width and or a height that match conditions for changing the display of the graphic .

The example user interface also includes a conversion panel that includes a calculation of a percentage of the level of the Tank field device e.g. level 100 level 56.3 gal. . In some examples the calculation may be entered by a user. In other examples the EDD file associated with the Tank field device may include the calculation. The conversion panel shows an example of an expression script extension via the calculation. For example the calculation includes a level parameter divided by a number e.g. level 56.3 . The resulting value is then multiplied by 100. In this manner the expression script extension calculates a percentage of a level of the Tank field device instead of the Tank field device transmitting a percentage value thereby reducing the amount of data processing within the Tank field device. While the calculation shown within the conversion panel is relatively simple other EDD files may include expressions that are relatively complex e.g. recursive algebraic feedback functions that require the process power associated with the display interface .

The user interface also includes the graphic panel of showing the graphic . The example display interface may use the level of the Tank field device e.g. 23 as process control information to match to conditions within a function script extension and a converter script extension. A function script extension may include for example the instructions 

These instructions of the function script extension cause the display processor to show the graphic as having a level of 0 if the reported level is less than 0 and show the graphic as having a level of 99.9 if the reported level from the Tank field device is greater than 99.9. In this manner the level process control information reported by the Tank field device is compared to conditions e.g. less than 0 and greater than 99.9 to determine which level to show within the graphic . In other examples the function may include an action of displaying a different graphic if the level is less than 0 or if the level is greater than 99.9. Additionally the function script extension includes an instruction e.g. DVRt float TNK101 LEVEL.CV level that causes the display interface to write the level of the Tank field device to a parameter at a directory and or memory location. The EDD file may also include an instruction not shown within the function script extension that causes the display interface to show the level of the Tank field device within the graphic e.g. the 23 line .

The example graphic may also be associated with a converter script extension within the EDD file associated with the Tank field device. For example the converter script extension may include the instructions 

These instructions cause the display interface to compare the level process control information generated by the Tank field device to conditions e.g. less than 10.0 or greater than 90.0 . In this example the conditions may have been specified by a user entering a value within the Lower Range parameter and the Upper Range Parameter of the parameter panel of . Based on the converter script extension if the reported level of the Tank field device is below 10 or greater than 90 the display interface shows a bar in a red color depicting the level of the Tank field device. Otherwise the display interface is to show the bar in a green color. In this manner the display interface converts the level process control information into a color of the bar . In other relatively more complex examples a converter script extension may instruct the display interface to display a type of alarm graphic adjacent to the graphic within the graphic panel to indicate the level of the Tank field device matches a condition e.g. equal to or greater than 90 or equal to or less than 10 . In these examples the instructions may include a link to a graphic within the graphics database of .

The example trigger parameter table includes a Property parameter that describes a purpose of the trigger script extension. The trigger script extension described by the parameters within the trigger parameter table extends the Timeline of the microchart every 1000 milliseconds ms . A Trigger parameter indicates if the trigger script extension is enabled when a user views the microchart graphic . A Period parameter specifies a time when an event occurs that is defined within an Action Script parameter. A name parameter enables a user to provide an identification value of the trigger script extension.

Further An Auto Reset parameter enables a user to select if the trigger script extension resets upon a value specified within the Period parameter reaching a threshold. The Action Script parameter specifies how the microchart graphic is changed upon the expiration of a value specified within the Period parameter. In this example the Timeline of the microchart graphic is increased by 10 units. In this manner the microchart graphic is changed by the display interface upon the incremental increase of a timer reaching e.g. matching 1000 ms. The Timeline may be extended by the display interface executing the EDD file to show additional status information periodically reported by the Tank field device.

Flowcharts representative of example processes and for implementing the display interface and or the script generator of are shown in B A and B. In this example the processes and may be implemented using machine readable instructions in the form of a program for execution by a processor such as the processor P shown in the example processor system P discussed below in connection with . The program may be embodied in software stored on a computer readable medium such as a CD ROM a floppy disk a hard drive a digital versatile disk DVD or a memory associated with the processor P but the entire program and or parts thereof could alternatively be executed by a device other than the processor P and or embodied in firmware or dedicated hardware. Further although the example program is described with reference to the flowcharts illustrated in B A and B many other methods of implementing the example display interface and or the script generator may alternatively be used. For example the order of execution of the blocks may be changed and or some of the blocks described may be changed eliminated or combined.

As mentioned above the example processes of B A and B may be implemented using coded instructions e.g. computer readable instructions stored on a tangible computer readable medium such as a hard disk drive a flash memory a read only memory ROM a compact disk CD a digital versatile disk DVD a cache a random access memory RAM and or any other storage media in which information is stored for any duration e.g. for extended time periods permanently brief instances for temporarily buffering and or for caching of the information . As used herein the term tangible computer readable medium is expressly defined to include any type of computer readable storage and to exclude propagating signals. Additionally or alternatively the example processes of B A and B may be implemented using coded instructions e.g. computer readable instructions stored on a non transitory computer readable medium such as a hard disk drive a flash memory a read only memory a compact disk a digital versatile disk a cache a random access memory and or any other storage media in which information is stored for any duration e.g. for extended time periods permanently brief instances for temporary buffering and or for caching of the information . As used herein the term non transitory computer readable medium is expressly defined to include any type of computer readable medium and to exclude propagating signals.

The example process of displays graphics based on process control information requested by a user. The example process of begins by receiving a request to view process control information e.g. via the receiver of block . The request may include an identifier of field devices components areas within a process control environment and or any other identification of process control information. The example process then determines at least one identifier of for example a field device included and or associated with the request e.g. via the EDD processor block . The example process uses the identifier s to locate at least one EDD file stored within for example the EDD library e.g. via the EDD processor block .

The example process then executes instructions within the selected EDD file s to create a display file e.g. via the graphics processor block . Executing the instructions may include determining menu functionality information for displaying menus and or other graphics and or any other display and or processing information associated with the field devices. The example process also uses the instructions to access process control information stored for example within the database e.g. via the graphics processor . For example some instructions within an EDD file may reference and or link to process control information generated by the field device.

The example process also executes script extensions within the EDD file s e.g. via the graphics processor block . The example process may execute expression script extensions which perform calculations and or comparisons of values attributes and or properties within the process control information. The example process may also execute event handler script extensions that instruct the process to display a graphic if a process control event is detected. Additionally the example process may execute function and or method script extensions converter script extensions trigger script extensions and or any other type of script extensions. While executing the script extensions the example process determines if a condition specified by a script extension matches a portion of process control information referenced within the condition e.g. via the graphics processor block . In other words the example process determines if a portion of the process control information specified by a variable a parameter an attribute and or a reference within a script extension matches and or exceeds a threshold and or a specified event e.g. a condition .

If the example process determines that a condition matches a portion of the process control information the example process locates at least one graphic referenced by and or included within the condition e.g. via the graphics processor block . The example process may for example access the graphic database to search for the referenced graphic s . The example process then adds the graphic to the display file with the corresponding process control information e.g. via the graphics processor block . Adding the graphic may include providing a reference to a location of a graphic within the graphic database in the display file and or copying information describing the graphic and inserting the copied information into the display file. The example process then determines if there are additional conditions to process within other script extensions e.g. via the graphics processor block . If there are additional conditions to process the example process returns to block and determines if one of the remaining conditions matches a portion of referenced process control information.

However if there are no additional conditions to process the example process of continues by rendering the display file to generate a display of the requested process control information e.g. via the renderer block . Also if none of the conditions match a portion of process control information block the example process executes block . The example process may render the display file by creating and or generating displayable graphics using characteristics defined within the EDD file s and or the graphics database and inserting process control information into corresponding parameters variables and or attribute specified by the graphics.

The example process then transmits the rendered display file to a user interface e.g. the user interface of to display the process control information graphically within an application e.g. the application e.g. via the renderer block . The example process may then determine if another request to view additional process control information has been received e.g. via the receiver block . If another request has been received the example process returns to block of and determines at least one identifier included within the request. The example process may continue checking for requests until a user ceases use of the display interface . Alternatively the example process may terminate if no additional requests are detected.

The example process of generates EDD files based on information associated with at least one field device. The example process of begins by receiving information associated with a field device e.g. via the editor of block . The information may include process control information generated by the field device and stored for example within the database . The information may also include specifications from a manufacturer of the field device and or any information stored within the field device. The example process then determines if an EDD file exists for the field device by accessing for example the EDD library and searching for the EDD file e.g. via the editor block . The example process may determine an EDD file exists by checking the EDD library for any EDD files that match the field device. In some examples the EDD file may be stored within the field device and be received by the example process .

If an EDD file exists for the field device the example process retrieves the EDD file from the EDD library e.g. via the editor block . However if an EDD file does not exist the example process creates an EDD file based on the received information e.g. via the editor block . In some examples a process control designer and or a field device designer may create the EDD file based on a specification associated with the field device. In other examples the process may generate the EDD file using the information as a guide as to how process control information and or menu items are to be graphically displayed.

After creating or retrieving the EDD file block or the example process continues by determining condition s based on the information that identify when process control information associated with the field device is to be displayed as a graphic e.g. via the editor block . The example process then accesses a database e.g. the script extension database for script extension s that match the determined conditions e.g. via the editor block . The script extension database may include any number and or types of script extensions that the example process may search including for example expressions functions methods triggers converts and or event handlers. The example process may match a condition to a script extension by comparing the types and or relationships between variables attributes and or parameters of the condition to types and or relationships between variables attributes and or parameters within the script extensions.

If none of the script extensions within the script extension database match any of the condition s block the example process creates script extension s for each of the unmatched conditions e.g. via the editor block . The example process may create a script extension by transforming a condition into one or more executable instructions that include a comparison to one or more variables attributes and or parameters identifying some process control information. The example process may also create a script extension by determining a graphic that is to be displayed if process control information matches a condition. Alternatively a script extension may be specified and or created by a user. The example process then includes the script extension s within the EDD file. Further for any script extensions that match the conditions block the example process includes the matching script extensions from the script extension database within the EDD file.

The example process of continues by compiling the EDD file with the script extensions by scanning the EDD file for errors e.g. via the scanner block . If at least one error is detected block the example process transmits an error message reporting the error to a user e.g. via the editor block . The example process then receives instructions to correct the error s e.g. via the editor block . The example process corrects the errors and translates the EDD file into a format and or standard specified by process control personnel to be in compliance with a process control system e.g. via the interpreter block . In some examples the EDD file may not be translated. In these examples block may be skipped by the example process .

The example process may next tokenize the EDD file into a compressed binary format e.g. via the tokenizer block . The example process may then store the EDD file and or the tokenized EDD file to for example the EDD library e.g. via the compiler block . In other examples the process may transmit the EDD file to a device such as for example the workstation of . The example process also determines if script extensions are to be added to additional EDD files e.g. via the editor block . If there are additional EDD files the example process of returns to block and receives information associated with a field device to retrieve and or create the EDD files. If there are no additional EDD files to process the example process terminates.

As shown in the processor system P includes a processor P that is coupled to an interconnection bus P. The processor P includes a register set or register space P which is depicted in as being entirely on chip but which could alternatively be located entirely or partially off chip and directly coupled to the processor P via dedicated electrical connections and or via the interconnection bus P. The processor P may be any suitable processor processing unit or microprocessor. Although not shown in the system P may be a multi processor system and thus may include one or more additional processors that are identical or similar to the processor P and that are communicatively coupled to the interconnection bus P.

The processor P of is coupled to a chipset P which includes a memory controller P and a peripheral input output I O controller P. As is well known a chipset typically provides I O and memory management functions as well as a plurality of general purpose and or special purpose registers timers etc. that are accessible or used by one or more processors coupled to the chipset P. The memory controller P performs functions that enable the processor P or processors if there are multiple processors to access a system memory P and a mass storage memory P.

The system memory P may include any desired type of volatile and or non volatile memory such as for example static random access memory SRAM dynamic random access memory DRAM flash memory read only memory ROM etc. The mass storage memory P may include any desired type of mass storage device. For example if the example processor system P is used to implement the example script extension database and or the example graphics database the mass storage memory P may include a hard disk drive an optical drive a tape storage device etc. Alternatively if the example processor system P is used to implement the script extension database and or the graphics database the mass storage memory P may include a solid state memory e.g. a flash memory a RAM memory etc. a magnetic memory e.g. a hard drive or any other memory suitable for mass storage in the script extension database and or the graphics database .

The peripheral I O controller P performs functions that enable the processor P to communicate with peripheral input output I O devices P and P and a network interface P via a peripheral I O bus P. The I O devices P and P may be any desired type of I O device such as for example a keyboard a display e.g. a liquid crystal display LCD a cathode ray tube CRT display etc. a navigation device e.g. a mouse a trackball a capacitive touch pad a joystick etc. etc. The network interface P may be for example an Ethernet device an asynchronous transfer mode ATM device an 802.11 device a DSL modem a cable modem a cellular modem etc. that enables the processor system P to communicate with another processor system.

While the memory controller P and the I O controller P are depicted in as separate functional blocks within the chipset P the functions performed by these blocks may be integrated within a single semiconductor circuit or may be implemented using two or more separate integrated circuits.

At least some of the above described example methods and or apparatus are implemented by one or more software and or firmware programs running on a computer processor. However dedicated hardware implementations including but not limited to application specific integrated circuits programmable logic arrays and other hardware devices can likewise be constructed to implement some or all of the example methods and or apparatus described herein either in whole or in part. Furthermore alternative software implementations including but not limited to distributed processing or component object distributed processing parallel processing or virtual machine processing can also be constructed to implement the example methods and or systems described herein.

It should also be noted that the example software and or firmware implementations described herein are stored on a tangible storage medium such as a magnetic medium e.g. a magnetic disk or tape a magneto optical or optical medium such as an optical disk or a solid state medium such as a memory card or other package that houses one or more read only non volatile memories random access memories or other re writable volatile memories. Accordingly the example software and or firmware described herein can be stored on a tangible storage medium such as those described above or successor storage media. To the extent the above specification describes example components and functions with reference to particular standards and protocols it is understood that the scope of this patent is not limited to such standards and protocols.

Additionally although this patent discloses example methods and apparatus including software or firmware executed on hardware it should be noted that such systems are merely illustrative and should not be considered as limiting. For example it is contemplated that any or all of these hardware and software components could be embodied exclusively in hardware exclusively in software exclusively in firmware or in some combination of hardware firmware and or software. Accordingly while the above specification described example methods systems and machine accessible medium the examples are not the only way to implement such systems methods and machine accessible medium. Therefore although certain example methods systems and machine accessible medium have been described herein the scope of coverage of this patent is not limited thereto. On the contrary this patent covers all methods systems and machine accessible medium fairly falling within the scope of the appended claims either literally or under the doctrine of equivalents.

