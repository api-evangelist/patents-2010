---

title: Method and apparatus for real time text analysis and text navigation
abstract: An end user, by way of a submission interface, instructs an engine to select particular collections of documents to process. The engine processes all the text from within all the documents from within the selected collections. The result of the processing of such text is a distilled data set. Such distillate data set is accessed through APIs by a browser. Different views of the accessed distillate data set may be presented to the end user via the browser allowing them to more effectively assess the utility of the presented data and thereby responsively tune the presented data set with regard to their particular research task. One or more of such views may be used to create a new document from sentences, paragraphs, chapters or documents from the distillate data set that correspond to the one or more views for presentation to the end user.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08280878&OS=08280878&RS=08280878
owner: Ebrary, Inc.
number: 08280878
owner_city: Palo Alto
owner_country: US
publication_date: 20100317
---
This application is a continuation of the International Application No. PCT US10 26853 filed in the U.S. receiving office on Mar. 10 2010 which claims priority of U.S. Provisional Application Ser. No. 61 158 960 filed Mar. 10 2009 and claims priority of U.S. Provisional Application Ser. No. 61 183 690 filed Jun. 3 2009 each application incorporated in its entirety by this reference thereto.

The invention relates to real time text analysis and access thereto. More particularly the invention relates to a method and apparatus for real time extraction of text from a collection of sources and performing analysis on the extracted text for a more intuitive access by an end user.

For ages people have been interested in learning about and discovering information. In the 1950 s a popular trend was for parents of young children to buy a set of encyclopedias for their children to have at hand to research topics such as history and science for school projects and the like. In the digital age the quest for information has only become more relevant. Larger and larger quantities of digital content have become more available to an ever increasing global audience as the economics of the supportive technology drives down the cost. Using search engines to retrieve and discover digital content information on the Internet or within enterprises is well known. For example suppose a researcher needs information about President Theodore Roosevelt. Typically the researcher enters a query for a search engine from the researcher s browser. The query is typically one or more keywords such as president theodore roosevelt . The search engine processes the query or list of keywords in accordance with its particular algorithm and presents to the researcher a list of web pages that contain one or more of the researcher s keywords. Depending on the particular search engine other related data or metadata such as the title of a pdf file that is available for download as indicated by the title being a hyperlink as well as some sample text from the pdf file is presented on the researcher s browser. Should the researcher desire to learn more from this particular pdf file the researcher clicks on the link which causes the pdf file to be downloaded onto the researcher s computer. From that point on the researcher is left with an entire pdf document in which to search retrieve and discover pertinent information. If the pdf document is particularly large perusing through the document to identify desired information or even just to discover what information therein may be relevant can be a laborious time consuming and daunting task.

An end user by way of a submission interface instructs an engine to select particular collections of documents to process. The engine processes all the text from within all the documents from within the selected collections. The result of the processing of such text is a distilled data set. Such distillate data set is accessed through APIs by a browser. Different views of the accessed distillate data set may be presented to the end user via the browser. One or more of such views may be used to create a new document from sentences paragraphs chapters or documents from the distillate data set that correspond to the one or more views for presentation to the end user.

Techniques for submitting distilling analyzing and viewing the distilled and analyzed text are discussed herein. It should be appreciated that various details and examples are set forth herein only for the purpose of providing a thorough understanding of the claimed subject matter.

An end user by way of a submission interface instructs an engine to select particular collections of documents to process. The engine processes all the text from within all the documents from within the selected collections. The result of the processing of such text is a distilled data set. Such distillate data set is accessed through APIs by a browser. Different views of the accessed distillate data set may be presented to the end user via the browser. One or more of such views may be used to create a new document from sentences paragraphs chapters or documents from the distillate data set that correspond to the one or more views for presentation to the end user.

In an embodiment a system for extracting the textual information contained within structured and unstructured electronic source documents creates a normalized text representation of the extracted text. The system then performs a series of successive analysis against the normalized text representation including punctuation analysis font analysis word frequency analysis statistical analysis and phrase detection. The system then creates a machine readable index of the locations of all of the words phrases sentences paragraphs and page information from the analyzed normalized text that is correlated to the unanalyzed normalized text. If metadata is present for the document then that information is also stored. It should be appreciated that metadata need not be present.

In an embodiment information such as the analyzed normalized text described above within the database is accessed through application programming interfaces APIs . Information is requested from the database and is presented to the user in an interactive matrix of the words phrases and statistical information of the words and phrases. Such presentation enables the user to examine the words and phrases and their relationships with each other within a single document or across multiple source documents. The user is presented with an interface that is interactive and includes the ability for the user to control the presentation of the word and phrase order according to frequency of occurrence order of occurrence or through alphabetical listing.

In an embodiment the user may also enter queries into a text entry box that will query the database for occurrences of the exact string or the string and the other words that in conjunction with the query constitute a phrase. Through the selection of a word or phrase or a selection of multiple words or phrases which are selected by clicking on the desired word or phrase the user is then presented with the requested words or phrases and the words that may precede the selected word or phrase or be antecedent to the selected word or phrase. With the information presented in this manner the user may navigate across collections subjects documents chapters articles pages and sentences finding the information that they require without ever opening a document.

In an embodiment the context of the word or phrase is displayed as sentences that contain the word or phrase pages containing the word or phrase. Such word or phrases may be displayed or presented to the user in a variety of modes. Such modes may include normalized text or text from the original document in its original context through a text to speech engine that reads the text across computer networks through a display of the occurrence by density within a chapter and density of occurrence within a document subject or collection. In this way the system allows the user to navigate with equal facility up or down through hierarchies of large information sets of ever greater or smaller granularity.

An example system according to an embodiment can be described with reference to . depicts the main components of a text analysis and text navigation system according to an embodiment each of which is described in further detail hereinbelow in sections by the same name as the component.

A user can enter one or more documents into the system via a submission interface . Submission interface is in communication with one or more document repositories . Submission interface may be hosted on at a user s server or a customer s server or hosted by a content information provider server and the like. Examples of repositories are collections of documents one or more databases in which documents are stored and so forth. Such repositories may be hosted on the user s client machine on a customer s server hosted by a content information provider and so forth. A repository may be a particular web site s on the Internet . For example particular web site s may be Google Mountain View 2010. It should be appreciated that the term collections may be used interchangeably with repositories herein. Repositories and particular web site s can be viewed as collections of text documents.

In an embodiment submission interface takes text documents or portions thereof as input from any of repositories and particular web site s . Put another way submission interface takes text documents or portions thereof as input from any collection s and submits such collections to a distillate engine for further processing. It is contemplated that submission interface may operate on the text of the collection to render the text in a format that is compatible with distillate engine . For example submission interface may receive a pdf document and convert the pdf document into another format that is compatible with distillate engine .

In an embodiment distillate engine extracts text from the documents and performs various operations on the extracted text to create a normalized text representation of the extracted text. Distillate engine then performs a series of successive analysis against the normalized text representation including but not limited to any of punctuation analysis font analysis word frequency analysis statistical analysis and phrase extraction. After performing such analysis on the normalized text distillate engine creates a machine readable index of the locations of all of the words phrases sentences paragraphs and page information from the analyzed normalized text that is correlated to the unanalyzed normalized text. An index may be a file or a table or any other schema that contains the information described hereinabove. Such schema and normalized data are stored in a distillate data set for future access by a future process. As well if metadata is present for any of the documents then that information is also stored within the index or schema with distillate data set . It should be appreciated that metadata need not be present.

A distillate browser allows a user various views on text data from documents from collections according to an embodiment. Using browser a user can search text e.g. words or phrases among selected documents. Further a user can browse text in selected documents can annotate copy or print text from selected documents and can store such actions on such text from such selected documents in a tool that may be referred to as a Bookshelf. The data corresponding to the Bookshelf may be stored locally at the user s server or remotely. The user can send the Bookshelf related data to another user s whereby the other user s has access to the particular selection of documents by the user as well as any annotations made on any of the documents by the user. In this way researchers can share their research at any stage of their particular research without having to physically copy their own physical copies of notes and highlighted documents.

In an embodiment submission interface feeds documents or parts thereof into distillate engine . In addition to the discussion hereinabove some of the responsibilities of submission interface may include keeping track of which documents have already been submitted to distillate engine . As well submission interface may look for new documents that aren t already submitted to distillate engine . In an embodiment submission interface may automatically start looking new documents in any repositories and stop after a specified number of times e.g. 500 or stop after a default number of times.

In another embodiment distillate engine normalizes text. Any text file or any file that s capable of providing text is normalized. An interim result of normalizing text is a subset of text that is used for normalized data representation. Such subset of normalized text is processed. Separate streams of data are created. For example a list of the beginnings of all the sentences is created and stored in distillate data set . As well a list of all the beginnings of all the paragraphs may be created and stored in distillate data set . As well a list of all the beginnings of all the chapters is stored in distillate data set . A list of all the text that was identified by distillate engine to be found in parentheses is created and stored in distillate data set . A list text that was included in parentheses can be used at least for two things determining the meanings of acronyms and because acronyms are capitalized letters existing before or after corresponding text. As well particular data structures can be determined from text that is found in parentheses. For example life expectancy date of birth date of death and so forth can be determined from the fact that the corresponding text thereof is found in parentheses.

Thus by going through and parsing normalized text determining everything that s parentheses may lead to identifying significant data structures.

It should be appreciated that in an embodiment normalized text can be viewed as a data representation whereby all the data is at the same level with respect to attributes. Then particular processes are applied to the set of normalized data. From the processed normalized data and distillate engine builds and stores e.g. in distillate data set or in virtual memory of distillate engine an index for the document s . It should be appreciated that using such index allows distillate browser to completely recreate the normalized text to represent the original text. Thus distillate engine identifies the words and phrases that are unique and identifies the corresponding sentences. Then when distillate browser needs to build the sentences e.g. to present the sentence in a view distillate browser via an API simply sends a message to distillate data set asking for a particular word or phrase. Such word or phrase contains information indicating the location of the stored sentence in distillate data set . That is every word in the sentence is given a page identity and a word number

In another embodiment punctuation analysis is performed by distillate engine . Punctuation analysis may include identifying words in parentheses words in quotes and words that are capitalized. Words that are capitalized after a period are common. After identifying such words rules are applied to normalize the words.

In another embodiment distillate engine performs word stemming. Word stemming is a process by which instances of words variations are identified as being the same word with respect to searching for such word. For example the words issue and issues are both identified as issue or issues . Thus if both words appear once in a document and a user searches for the word issue then the resultant set is two counts of the word issue.

Another embodiment of text processing by distillate engine is discussed herein below. Distillate engine takes all the words keeps all the positions of all the words within the document performs a phrase analysis to determine statistically significant phrases. One way by which distillate engine does this is by taking the most used word in a document going through every sentence that contains that word truncating the sentence before the word and then analyzing the words after the word to build a word data tree for example. For example each word may be a node whose children are other words that followed the word in the truncated sentence. Distillate engine processes the entire document by performing the process above iteratively by going through every word within the document. It should be appreciated that operating on a document in this fashion to identify significant words and phrases is by way of example only and is not limiting. One skilled in the art can apply a variety of analytical algorithms to determine and identify significant word s and phrases within a given document.

An example of a way to store sentence information can be found in . is a table showing a column of sentences a column of word position s within the sentence and a column of the page id s on which the particular sentence is found . Thus for example the first row shows that the word Buddha which was searched is found at page id p1312.771 and is the 7word in the sentence and shows a portion of the sentence. The fourth row shows that Buddha is found at page id p1317.293 and is the 44and 59word of the sentence and shows the sentence.

In an embodiment phrases are computed or identified out to a specified numbers of words. Conceptually phrases can be computed to an infinite number of words. In an embodiment sub phrases within a larger phrase may be identified through essentially orphans in the data tree even when there s only an occurrence of such sub phrase once as being significant. That is a phrase having count one may be useful.

In an embodiment a user can stack search terms which is defined to mean that a user can indicate one or more search terms in a single search request. For example a user can enter the search term European War and the search term end of the war . The result set shows where such stacked search terms appear together according to a particular resolution. For example the result set may show one or more paragraphs in which these stacked search terms appear together. In another example the result set may show one or more pages in which these stacked search terms appear together and so forth.

A process flow for processing extracted text from a document according to an embodiment is described hereinbelow. It should be appreciated that such process is by way of example only and one skilled in the art can contemplate variations and still remain within the spirit and scope of the process flow.

In an embodiment distillate engine takes an accounting of words from a document. There is a list of stop words. Stop words contain words such as if and but which are very common. Stop words have been found to make up about eighty percent of the given number of words in a given document. Thus in an embodiment stop words are discarded from the set of words from a particular document.

In an embodiment after discarding the stop words distillate engine makes an accounting of the occurrence of every remaining word and its location by saving the information as a page word number pair. Thus a list of the discrete words within the document is created.

In an embodiment after creating the list of discrete words the words within the list are alphabetized. After the words are alphabetized a sorting algorithm is applied to the words. Such sorting algorithm performs stemming which is a process used to identify words that have the same stem or root or unit. Any stemming algorithm may be applied. In an example a particular stemming algorithm may look for particular endings of words such as ly or ing and so forth. Such particular endings may be provided in a table for example.

In an embodiment a word subordination algorithm is applied to the set of words. Word subordination is a process to identify words that may be consumed by other words which may be referred to as parent words. After identifying which words are subordinate to other words such subordinate words are discarded from the set of words to be further processed by distillate engine and the occurrences of each subordinate word is added to the occurrences of the parent word. A record reflecting the removal of the subordinate word is added to a different table. An example of such table is found in herein and is labeled movedwords. 

For example consider the word cat which has 100 occurrences and cats which has three occurrences. Then cats will be subsumed into the parent cat . Specifically the occurrence of cat is now equal 103. As well cats is removed from the current set of words and is added to movedwords table.

In an embodiment an algorithm is applied which determines whether a discrepancy between the number of occurrences of a pair of words is large enough or greater than a threshold value to consider a word of the pair as subordinate to the other word. For example consider the word American and suppose American occurs 100 times. Also consider the word America and suppose America occurs 80 times. According to an embodiment the discrepancy algorithm may determine that America is not subordinate to American because America occurred within a particular percentage of the occurrence of American . An implication is that both words may have meaning and importance to an end user.

Thus after normalizing all words and computing all occurrences of words distillate engine instructs distillate data set to save such information such as in tables or other data structures.

In an embodiment distillate engine identifies a sentence within a document by identifying a capital letter as a start position and continue including words as part of the sentence until the algorithm reaches a period a question mark an exclamation point etc. It should be evident to one skilled in the art that many algorithms may be used for identifying sentences within a document and still be within scope of the claimed subject matter.

In an embodiment distillate engine creates an index that is a mapping of a word id to a sentence id. Thus when the word id is invoked from the index e.g. an end user having selected the word in distillate browser the sentence id is identified and the sentence associated with the sentence is can be presented to the user in distillate browser . In an embodiment an index contains a list of every occurrence of a word normalized within a document and can be used to identify the sentence id from which the sentence can be generated.

For an example refer to . The first row shows a sentence id p1312.771. Then a word id can be generated by adding the location of the word 7 to the sentence id to result in p1312.778 . One skilled in the art would recognize that such level of detail is by way of example only to convey a thorough understanding and is not meant to be limiting. Any algorithm for mapping word ids to sentence ids may be used.

In an embodiment statistical analysis is performed on aspects of a word. For example statistical analysis may applied to the number of occurrences of a word to determine its statistical occurrence and relative ranking.

Thus such statistical analysis may be used in designing a particular interface. For example a particular interface can present words based on the statistical analysis of the words and their relative ranking.

It should be appreciated that discussions about words herein may be applied to phrases. For example it is contemplated that an index can comprise a mapping of phrases to sentences. Detailed discussions herein about words are meant in the spirit of conveying a thorough understanding and not to obfuscate the discussion.

In an embodiment a phrase extraction algorithm is used by distillate engine to extract significant phrases from a document. An example algorithm is as follows. Distillate engine by way of an API requests a list of words by frequency from distillate data set or from any available list of words having the number of occurrences in the document. Thus the most popular word is at the top of the list the next popular word is next on the list and so on. In another embodiment the request for words may be by an alphabetical sort by density as described herein or by any other criteria that indicates relevancy of the document.

For every word distillate engine through an API requests from distillate data set a list of every sentence in which the word occurs.

An algorithm is applied by which a particular sentence is cut at the occurrence of the word. It should be appreciated that the sentence may have more than one occurrence of the word. Then from these chopped portions of the sentence for a particular portion a data tree is created. Each node in the tree is the particular word. Each child node is every word that follows the particular word in the portion of the sentence. Each child node has children nodes that follow it in the portion of the sentence and so on.

Thus traversing down any path in the tree is a viable sentence stem that occurs in the particular document for a particular word.

After the tree is built the tree can be traversed to identify the thickest branches which represent sentence stems or phrases that occur more often than once.

It should be appreciated that certain statistical analysis may be applied such as discarding paths that are determined to be too long etc.

In an embodiment a list is thus created which contains all of the phrases in a particular document which start with a particular word. This is then repeated for each word in the original list resulting in a meta list of all potentially interesting phrases in the document. It should be appreciated that then redundancy algorithms and such can be applied to modify the list to represent more meaningful phrases. For example subordinate phrases may be removed from the list because they already appear in the parent phrase.

Then in an embodiment after such tree is built then a second tree is built for the next popular word in the document and so on.

In an embodiment the API is document agnostic meaning it is not confined to working on one type of document. For example the API can request the word cat from one document from a portion of a document from many documents etc. An example of APIs can be found in . Here the APIs are used by distillate browser to request data from distillate data set . The APIs are accessed via Ajax. These particular APIs requested words from the book History of the United States by frequency rank. The word time is shown to have 327 occurrences. As another example the API can request phrases by density from a set of online Scientific American journals from 2006 2009.

In an embodiment distillate data set contains a table of all the words in a particular document. As well a list of sentences that occur within a particular document is saved in distillate data set .

As mentioned above depicts a table showing a column of sentences a column of word position s within the sentence and a column of the page id s on which the particular sentence is found . In an embodiment such table of sentences is stored in distillate data set and is used by API calls from distillate browser .

In an embodiment a user is presented with one list of words sorted in descending order by frequency and a text entry window the entry of which is called the primary entry primary . It should be appreciated that the list of words can be sorted according to other criteria including but not limited to word density e.g the occurrence of a word within the following 5 paragraphs following the first instance of the word. It should be appreciated that the embodiment encompasses the user and the system working with phrases as well as with words. Clicking on the frequency list moves the selected word to the primary position. Upon entering the primary word the user is shown preceding and anteceding words and lists of sentences containing the entered word. A single click on any word adds such word to primary. Thus the user is shown new preceding and anteceding words and a new list of sentences containing the words or phrase. Double click of word in any other column moves selected word to replace primary. Upon entering primary word user is shown preceding and anteceding words and lists of sentences containing the word or phrase.

An example of a screen shot illustrating words listed based on frequency of occurrence according to an embodiment is depicted in .

In an embodiment the user has the option of the view showing the stop words or not showing the stop words. Stop words are defined as common words used that have no substantial impact on meaning. Examples of stop words are it the an and so etc. Thus suppose for example a user is interesting in the phrase President Wilson with show stop words feature on. The resulting view contains all the words before and around President Wilson up to a predetermined number of words. Thus when the user selects President Wilson the view shows a significant portion of what is discussed before and after President Wilson within the document or within a set of documents. When a user is not interested in the view containing the stop words and indicates as such then the view shows the other phrases that occur around President Wilson. Thus a user gains more insight into the context surrounding President Wilson. Such insight may significantly enhance the user s pedagogical experience by highlighting significant phrases that correlate in some way with the phrase President Wilson.

In an embodiment distillate browser is written in HTML and JavaScript and uses Ajax which is a protocol which allows the updating of Internet pages dynamically. Ajax is used to access the API and request data.

In an embodiment once a phrase or word is selected sentences are included in the data returned to distillate browser . A data tree is generated by distillate browser . Thus if a user selects the word cat sentences in which cat occurred are returned to and displayed in distillate browser . As well the words preceding and anteceding cat are also presented. Such words are obtained from the generated data tree. For example the anteceding words are presented in a column to the right of cat and the preceding words are presented in a column to the left of cat . See for example 

In an embodiment when a user selects a word in the preceding or anteceding list then all the words preceding and anteceding the selected word are presented for example in columnar fashion as before. In addition the sentences which contain that selected word are also obtained and presented on the display.

In an embodiment the generated data tree is dynamically updated based on user selections and deselections etc. within distillate browser accessing distillate data set through the API via Ajax and updating its internal dynamic data structures to represent the data which is being viewed at distillate browser .

In an embodiment processes work in an asynchronous fashion. For example after a user selects a particular phrase or a particular set of documents no query has been requested yet distillate browser displays the return data as it comes in. That is if the order of phrases is by frequency then the most frequently occurring phrase is listed at the top. If while still obtaining the phrases a more frequent phrase is found then distillate browser is dynamically updated and shows the more frequent phrase at the top of the list. The distillate browser is dynamically updated continuously until the process is done. This allows the user to get instant feedback while the process allows the data to mature. As well a user can decide based on the dynamic results the user is currently viewing to stop the particular search and start a new one.

In an embodiment a user can explore words and phrases from multiple documents that may be from one or more collections of documents from a same or remote server s .

A collection and a set according to an embodiment are described hereinbelow and by reference to and . In an embodiment a collection may be transitory or temporary or saved for example by association with an end user s login. Users can save sets to their collection. In an embodiment a user is presented at the interface e.g. browser with two folders e.g. at the top of the left column called saved sets and shared sets and their latest query with the titles listed below . Saved sets include the sets that that user has purposefully saved. When saved the user may save that set into an existing saved set or the user may create a new set with a name of their choosing. Users may perform a similar function by searching with the same query. When they save a set e.g. by the user action of clicking a button they may choose to share that set e.g. make set public in which that information becomes publicly accessible to all users of the text analysis and text navigation system or this set of information may be added to an existing set within the shared sets if the user created the shared set. This is done by saving the set with the same name as a shared or saved set. Below the saved sets and shared sets folder the user s query is displayed followed by the lists of titles submitted by that query. This means that the user is presented with a view that displays the query they performed and the titles for that query e.g. beneath the saved sets and shared sets folder. When the user selects a word or phrase the document titles e.g. on the left hand side of browser indicate the hits within the documents. There is an indicator e.g. a button at the top of the title list which allows the user to select the set of documents that contain the selected word or phrase herein called select set. Selecting the set un checks all of the other documents from the active set so that only the documents containing that word or phrase remain selected. A user may delete titles from the set e.g. by clicking on the red x and saving the set . A user may delete a set e.g. by clicking the delete set button . This action deletes any current sets of information. For example a set is current if the twiddle is open and the titles are exposed. If multiple twiddles are open for example then the user is combining sets of information to a single set.

In an embodiment collections of documents that are selected are stored in a cache. Thus for example when a user deselects a document from the collection the remaining set is established within the cache. Such cache may exist for an indefinite amount of time or for during a user session for example.

An embodiment of a text analysis and text navigation usage flow using multiple documents from one or more collections can be described below with reference to . . shows a list of user accounts. shows an opened account Warnock and a set Warnock Data Analytics is selected. The right hand side shows a list of phrases and their number of occurrences found in the documents contained in the selected set. The list is ordered according to a predetermined criterion such as the greatest number of occurrences. shows that user has selected the phrase data analytics which is shown as highlighted. As well shows that upon selection of the phrase data analytics the sentences which contain such phrase are retrieved from distilled data set and displayed. As well each instance of the phrase data analytics is highlighted in the displayed sentence. shows that the user has opened the set Warnock Data Analytics which then shows the list of titles contained in the set. It should be appreciated that each title is shown as marked x is checked to indicate that such title was includes in the search. As well shows that in this example only the last document Risk Assessment Data Analytics contained the phrase data analytics. shows the result of the user selecting a particular sentence within the list of sentences. The page containing the first instance of the phrase of the document which contained the sentence Risk Assessment Data Analytics is presented in a new window. The phrase is shown highlighted in the displayed page of the document. shows the second page Page 2 2 of 2 containing the phrase. The phrase is highlighted in the second page as well. shows some text was highlighted and an editing tool Highlight is used on the document. shows that the color pink for the highlight is selected. shows the selected text is highlighted in pink and an text box linked to the highlighted text is presented to the user to write a note. also shows a list of notes containing previously saved notes by the user.

Following is an example use case for multiple documents according to an embodiment. Such example is for illustrative purposes only and is not meant to be limiting.

In an embodiment a set can represent two or more documents from different collections. Referring to documents a b c are selected from collection C documents e d f are selected from collection C and documents x y z are selected from collection Cn . The result of such selection or view is a new document a b c d e f x y z. It should be appreciated that such new document may be saved and stored in persistent memory on a server or temporarily stored in virtual memory etc. As well information about the new document can be sent to another user e.g. in the user s Bookshelf application and can be recreated for another user.

In an embodiment the collection management system and process or text analysis and text navigation system described above can be viewed as building elasticity or memory. The system and process builds a memory of documents. Information that may be relevant to a user can be recalled in real time.

In an embodiment particular elements of each of submission interface distillate engine distillate data set distillate browser and one or more collections are modular. That is each element within any of such components mentioned above is self contained and can be replaced by other implementations without destroying the functionality of the system as a whole. That is such particular elements have a plug in and play characteristic.

The computer system includes a processor a main memory and a static memory which communicate with each other via a bus . The computer system may further include a display unit for example a liquid crystal display LCD or a cathode ray tube CRT . The computer system also includes an alphanumeric input device for example a keyboard a cursor control device for example a mouse a disk drive unit a signal generation device for example a speaker and a network interface device .

The disk drive unit includes a machine readable medium on which is stored a set of executable instructions i.e. software embodying any one or all of the methodologies described herein below. The software is also shown to reside completely or at least partially within the main memory and or within the processor . The software may further be transmitted or received over a network by means of a network interface device .

In contrast to the system discussed above a different embodiment uses logic circuitry instead of computer executed instructions to implement processing entities. Depending upon the particular requirements of the application in the areas of speed expense tooling costs and the like this logic may be implemented by constructing an application specific integrated circuit ASIC having thousands of tiny integrated transistors. Such an ASIC may be implemented with CMOS complimentary metal oxide semiconductor TTL transistor transistor logic VLSI very large systems integration or another suitable construction. Other alternatives include a digital signal processing chip DSP discrete circuitry such as resistors capacitors diodes inductors and transistors field programmable gate array FPGA programmable logic array PLA programmable logic device PLD and the like.

It is to be understood that embodiments may be used as or to support software programs or software modules executed upon some form of processing core such as the CPU of a computer or otherwise implemented or realized upon or within a machine or computer readable medium. A machine readable medium includes any mechanism for storing or transmitting information in a form readable by a machine e.g. a computer. For example a machine readable medium includes read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices electrical optical acoustical or other form of propagated signals for example carrier waves infrared signals digital signals etc. or any other type of media suitable for storing or transmitting information.

Although the invention is described herein with reference to the preferred embodiment one skilled in the art will readily appreciate that other applications may be substituted for those set forth herein without departing from the spirit and scope of the present invention. Accordingly the invention should only be limited by the Claims included below.

