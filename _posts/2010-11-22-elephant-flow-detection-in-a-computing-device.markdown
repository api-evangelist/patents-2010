---

title: Elephant flow detection in a computing device
abstract: Example embodiments relate to elephant flow detection in a computing device. In example embodiments, a computing device may monitor a socket for a given flow. The computing device may then determine whether the flow is an elephant flow based on the monitoring of the socket. If so, the computing device may signal the network that transmits the flow that the flow is an elephant flow.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09124515&OS=09124515&RS=09124515
owner: Hewlett-Packard Development Company, L.P.
number: 09124515
owner_city: Houston
owner_country: US
publication_date: 20101122
---
Modern communication networks are capable of transferring a massive amount of data in a small period of time. For example a typical datacenter may include hundreds or even thousands of servers each capable of transmitting numerous gigabits of data per second. Although the capabilities of networks are ever increasing so too is the amount of data transferred by applications that utilize these networks. Traffic management is therefore important in ensuring efficient utilization of the available network bandwidth.

As detailed above traffic management is important in ensuring that a network operates in an efficient manner by optimizing performance and minimizing congestion. For example when a network includes multiple available paths for a given flow of data an effective traffic management strategy ensures that the flow uses the most efficient path. In a typical network a small percentage of flows consumes the large majority of bandwidth and therefore has the greatest impact on performance of the network. It is therefore a central problem of any traffic management strategy to identify and manage the flows that consume a large amount of bandwidth sometimes known as elephant flows. In particular because elephant flows typically account for the majority of the data proper management of these flows will have the greatest effect on the performance of the network.

Existing solutions for identifying elephant flows are deficient in a number of ways. For example in some solutions each application is responsible for marking flows that consume a significant amount of bandwidth. Although efficient this approach can be problematic as every application must be modified to support this behavior. Furthermore this solution may be subject to abuse as the application may be modified to mark flows in a manner inconsistent with the purpose of the traffic management strategy.

In other solutions a switch in the network monitors each flow that passes through to gather statistics. The switch may then transfer these statistics to a central controller on a periodic basis to enable the controller to classify flows. This approach is not scalable to large networks for several reasons. First the process of monitoring each flow at a given switch consumes a significant amount of resources as it generally requires a Ternary Content Addressable. Memory TCAM entry for each flow. In addition transfers of statistics may consume a significant amount of bandwidth between each switch and the central controller such that the transfer of statistics becomes the bottleneck in the network.

In yet another solution a central controller samples a small percentage of packet headers from all ports of the switches in a network e.g. 1 out of every 1 000 packets . In this approach the central controller analyzes the sampled packet headers to classify flows. While this approach uses little bandwidth it is also slow to detect elephant flows sometimes requiring a flow to transfer upwards of 15 megabytes before it is detected as an elephant flow. Furthermore this approach imposes a significant amount of overhead on the central controller since the controller must process each sampled packet.

Thus in summary current solutions require modification of each application require a large amount of bandwidth or switch processing or are too slow to be effective. To address the problems with current solutions example embodiments disclosed herein implement elephant flow detection by monitoring outgoing data provided to a socket in the computing device by an application in which the flow originates. For example the computing device may monitor outgoing data provided to a socket by a User Datagram Protocol UDP flow or monitor outgoing data provided to a socket buffer used to queue packets belonging to a Transmission Control Protocol TCP flow. If the computing device determines that the flow is an elephant flow based on the monitoring the computing device may then signal the network that transmits the flow that the flow is an elephant flow.

By identifying elephant flows based on examination of the data provided to a socket in the source computing device example embodiments minimize or eliminate the need for modification of applications in the computing device. Furthermore because the elephant flow determination may be performed at the source of the flow rather than in the network example embodiments minimize the overhead required for transmission of statistics and or sampled packets. In this manner example embodiments allow for faster identification of elephant flows with low overhead and minimal or no modification of applications. Additional embodiments and applications of such embodiments will be apparent to those of skill in the art upon reading and understanding the following description.

Referring now to the drawings is a block diagram of an example computing device for detection of elephant flows. Computing device may be for example a notebook computer a desktop computer a slate computing device a wireless email device a mobile phone a server in a data center or other network or any other computing device. In the embodiment of computing device includes processor and machine readable storage medium .

Processor may be one or more central processing units CPUs semiconductor based microprocessors and or other hardware devices suitable for retrieval and execution of instructions stored in machine readable storage medium . Processor may fetch decode and execute instructions to implement the elephant flow detection procedure described in detail below. As an alternative or in addition to retrieving and executing instructions processor may include one or more integrated circuits ICs or other electronic circuits that include a number of electronic components for performing the functionality of one or more of instructions .

Machine readable storage medium may be any electronic magnetic optical or other physical storage device that contains or stores executable instructions. Thus machine readable storage medium may be for example Random Access Memory RAM an Electrically Erasable Programmable Read Only Memory EEPROM a storage drive a Compact Disc Read Only Memory CD ROM and the like. As described in detail below machine readable storage medium may be encoded with a series of executable instructions for detecting elephant flows based on sockets corresponding to flows that originate in computing device . In some embodiments instructions may be implemented in the operating system of computing device thus minimizing the need to modify the applications of computing device .

Machine readable storage medium may include socket monitoring instructions which may monitor data provided to a socket in computing device by an application in which a particular data flow originates e.g. the source endpoint of a flow . The socket may be a mechanism provided by the operating system for use by the application when transmitting outgoing data packets or other protocol data units. For example the operating system may create a socket upon receipt of a request from an application or thread via an Application Programming Interface API . The application may be any application that exchanges data with a remote device e.g. a web server or browser a Peer to Peer application a File Transfer Protocol FTP server a storage server etc. . When the application has a data packet ready for transmission to the destination the source application may provide the data packet to the socket and the operating system may then manage transmission of the data packet toward the destination.

Because the operating system manages the socket buffer monitoring instructions may be implemented as a shim layer in the operating system of computing device . The shim layer may be logic configured to examine data transmitted between two layers of the network protocol stack e.g. between the transport and network layers thereby leaving the structure of the existing network protocol stack intact. Thus monitoring instructions may have visibility of all data provided to each socket by each application. Monitoring instructions may therefore observe the amount of data provided to a socket and as detailed below determining instructions may analyze this data to identify elephant flows.

The mechanism used to monitor the socket may vary according to the protocol to be used for transmission of the data. For example the operating system may provide a socket buffer for some protocols such as the Transmission Control Protocol TCP . The socket buffer may be a portion of memory in storage medium or another storage medium accessible to computing device that temporarily queues data belonging to a particular flow prior to transmission. Thus the socket buffer may be for example a Transmission Control Protocol TCP buffer to temporarily store packets to be transmitted over a TCP connection from a source application in computing device to a destination application in another computing device. In implementations in which the protocol uses a socket buffer monitoring instructions may monitor a fill level of the buffer a total amount of data added to the buffer or a rate at which data is added to the buffer.

On the other hand the operating system of computing device may not provide a buffer for some protocols. For example the User Data Protocol UDP typically does not utilize a buffer in the operating system. In such implementations monitoring instructions may directly monitor the data provided to the socket via the API or other interface from the application to the operating system. For example monitoring instructions may monitor a total amount of data provided to the socket or a rate at which data is provided to the socket. It should be noted that in some implementations monitoring instructions may directly monitor the data provided to the socket rather than the buffer even if the operating system provides a buffer for a particular protocol. Several example approaches for monitoring data provided to a socket are described below in connection with .

Machine readable storage medium may further include elephant flow determining instructions which may determine based on the amount of data provided to a particular socket by a particular application whether the corresponding flow is an elephant flow. The determination of whether a given flow is an elephant flow may depend on the particular network. For example in a high bandwidth network such as a data center the size of a typical elephant flow is greater than in a lower bandwidth network such as a cellular network. The sizes of typical elephant flows will be apparent to those of skill in the art based on the particular network utilized by computing device .

As one example implementation of determining instructions when monitoring instructions provide information regarding the total amount of data or the rate at which data belonging to the flow is provided to the socket instructions may compare this amount or rate to a predetermined threshold. When the total amount of data or rate at which the source application is providing data to the socket exceeds the threshold determining instructions may determine that the corresponding flow is an elephant flow.

As another example when monitoring instructions provide information regarding the current fill level of a socket buffer corresponding to the socket determining instructions may compare the fill level to a predetermined threshold e.g. 50 full 75 full completely full . When the current fill level reaches the predetermined threshold fill level determining instructions may determine that the corresponding flow is an elephant flow.

Finally machine readable storage medium may include elephant flow signaling instructions which may signal a network used for transmission of the particular flow when it is determined that the particular flow is in fact an elephant flow. For example signaling instructions may utilize an in band signaling mechanism to notify one or more switches routers controllers or other network nodes that the flow is an elephant flow.

The particular signaling mechanism utilized for notifying the network of an elephant flow may vary by embodiment. In some embodiments signaling instructions may utilize a portion of the header of a packet belonging to the flow. For example signaling instructions may add a predetermined pattern of bits to the Differentiated Services Code Point DSCP field a Virtual Local Area Network VLAN Priority Code Point PCP or another field of the Internet Protocol IP header of a packet belonging to the flow. As a specific example signaling instructions may set the DSCP field to 000011 as the code point space corresponding to xxxx11 is generally reserved for experimental or local usage. In other embodiments signaling instructions may utilize one or more packets to transmit a separate elephant flow notification message into the network provided that these packets include information sufficient to uniquely identify the flow.

In response to receipt of a notification of an elephant flow the network may utilize the signal to for example assign the flow to the best available path in the network. Additional details regarding the use of the elephant flow signal to reconfigure the network are provided below in connection with network nodes of .

As with computing device of computing device may be a notebook computer a desktop computer a slate computing device a wireless email device a mobile phone a server or any other computing device. Computing device may include a processor not shown such as a processor described above in connection with . Computing device may also include a machine readable storage medium encoded with executable instructions. For example operating system and instructions included in shim layer may be encoded on the machine readable storage medium and executed by the processor.

Operating system may include a series of executable instructions for managing the hardware of computing device . Furthermore operating system may provide an interface to applications executing on computing device e.g. an API such that the applications may access the hardware. For example operating system may provide one or more sockets to each application for transmission of data packets from computing device to a destination device . After an application provides data packets to the sockets the operating system may then manage transmission of the data using a corresponding hardware interface such as a network interface card. In some embodiments operating system may provide a socket buffer for each flow to temporarily queue data packets prior to transmission via the appropriate interface.

Because operating system has a view of the data packets transmitted by each application via the sockets a shim layer may be included in operating system to inspect the data provided to the sockets or corresponding socket buffers . For example shim layer may include logic for examining data transmitted between two layers of the network stack to identify elephant flows. Thus shim layer may include monitoring instructions determining instructions and signaling instructions each described in turn below.

Monitoring instructions may monitor outgoing data provided from an application to a socket provided by operating system . This outgoing data may be associated with a particular flow originating in the application. For example the flow may include data transmitted by a server e.g. a web server or storage server a peer to peer file sharing program a web browser or any other application that transmits data belonging to a flow to a destination device .

In operation monitoring instructions may monitor the data provided to a socket and in some cases to a socket buffer corresponding to a flow. For example monitoring instructions may monitor an amount of data provided by an application to the socket or socket buffer over a predetermined period of time. Alternatively monitoring instructions may track a total amount of data provided to the socket or socket buffer since the socket was opened by the application for the particular flow. As another alternative monitoring instructions may monitor the fill level of a socket buffer with respect to the total capacity of the buffer .

Determining instructions may determine based on the monitoring performed by instructions whether the particular flow is an elephant flow. For example determining instructions may determine that a flow is an elephant flow when the total amount of data provided to the socket during a predetermined period of time exceeds a given threshold value. The threshold may be for example a total number of bytes or a rate at which the data was transmitted during the period in for example bytes per second. Similarly determining instructions may determine that a flow is an elephant flow when the total amount of data transmitted since the socket was opened exceeds a given threshold value. As another example determining instructions may determine that the flow is an elephant flow when the fill level of the socket buffer corresponding to the particular flow meets or exceeds a given level e.g. 75 or more full .

It should be noted that the thresholds used by determining instructions may vary depending on the application the network used for transmission of the flow and other factors. For example when the network is a high bandwidth network such as those used in a data center the threshold for the amount of data or the transfer rate may be higher than when the network is a cellular or wireless network. Suitable data amounts and transfer rates will be apparent to those of skill in the art.

Based on the determination made by instructions signaling instructions may generate and transmit a signal into the network used for transmission of the particular flow. This signal may notify the network that the flow is an elephant such that the network may properly route the flow. As with signaling instructions of signaling instructions may utilize a portion of the header of a packet belonging to the flow or may instead use a dedicated signaling packet.

The type of signaling packet and the corresponding response in the network may vary based on the type of network. For example in networks operating according to the OpenFlow specification a central controller is responsible for managing the routing tables stored on each OpenFlow node . In particular upon receipt of a packet if an OpenFlow node does not have an entry in the routing table matching the packet the node forwards the packet to the central controller which responds with a routing table entry. OpenFlow nodes may also contain table entries specifying particular packets to be forwarded to the central controller such as packets with a particular pattern in the header.

Signaling instructions may utilize the OpenFlow architecture to ensure that elephant flows are properly routed. When the network is initialized central controller may instruct all nodes to forward all packets containing a particular pattern in the header e.g. a DSCP value of 000011 to central controller . Subsequently when computing device detects an elephant flow signaling instructions may set the header of a packet to the pattern and transmit the signaling packet to an appropriate OpenFlow node .

Upon receipt of the signaling packet identifying an elephant flow the OpenFlow node may forward the packet to central controller which will respond to one or more nodes with table entries specifying how the elephant flow is to be routed through network . For example controller may compute the best available path through network and the table entries may define this path. Each node may then install these table entries into its routing table. As a result upon receipt of subsequent packets in the flow the OpenFlow node may forward the packet to destination device via the next node in the path computed by the central controller e.g. Path A A or A .

In some embodiments central controller may implement a mechanism to control the number of packets forwarded by the nodes based on its processing load. For example setting the elephant flow threshold in computing device to a value that is too low may result in controller being inundated with signaling packets . Accordingly when controller is receiving too many signaling packets controller may transmit a signal to each computing device instructing the computing device to raise its threshold. As an alternative multiple packet header values may correspond to different levels of thresholds. For example when using DSCP values a value of xxxx11 may denote a flow that has more than 100 kilobytes KB of data a value of xxx111 may denote more than 1 megabyte MB of data a value of xx1111 may denote more than 10 MBs of data etc. In such embodiments central controller may dynamically regulate the number of signaling packets it receives based on its load by modifying the table entries in each node to correspond to a particular threshold value.

In other networks a network node may select a path for a flow based on a priority or bandwidth requirements of the flow. For example network node may associate a predetermined Quality of Service QoS with each of a number of paths B B B in network and may utilize these paths according to the requirements of each flow. Accordingly in some implementations signaling instructions may generate and transmit a signaling packet indicating that the flow is an elephant and in response network node may select the best available path for transmission of the elephant flow. Upon receipt of subsequent packets belonging to the elephant flow network node may then transmit the packets to destination device via the identified path.

Method may start in block and proceed to block where computing device may monitor data provided to a socket by an application in which a particular flow originates. For example a shim layer included in the operating system of computing device may monitor an amount of data provided from the application to the socket. The amount of data may be for example a total amount of data provided since the application opened the socket an amount or rate of data provided to the socket during a predetermined period of time or a fill level of a socket buffer corresponding to the socket. Additional details regarding two example methods for monitoring a socket are provided below in connection with .

In block computing device may determine whether the flow is an elephant flow based on the amount of data provided to the operating system. For example computing device may determine that the flow is an elephant flow when the amount of data provided to the socket exceeds a predetermined threshold.

When computing device determines in block that the flow is an elephant flow method may proceed to block where computing device may transmit a signal indicating that the particular flow is an elephant flow. For example computing device may set one or more fields in the header of a packet belonging to the flow to a predetermined pattern. Alternatively computing device may generate and transmit a dedicated signaling packet into the network. After appropriately notifying the network of the presence of an elephant flow method may proceed to block where method may stop. It should be noted that method may be repeated multiple times for a given flow while the socket remains open since a flow may switch between being an elephant and a non elephant flow while the flow is transmitting data.

Upon detection of the provision of data to the socket method may then proceed to block where computing device may determine the amount of data provided to the socket as for example a number of bytes. Computing device may then add the determined number of bytes to a running total which may track a total amount of data provided to the socket since it was opened. Alternatively the total may track a total amount of data provided to the socket in a given period of time. In such implementations computing device may determine a rate at which data is provided to the socket by dividing the total amount of data for the time period by the duration of the time period.

After computing device determines the total amount of data or a corresponding rate method may proceed to block where computing device may determine whether the amount of data or the determined rate is greater than or equal to a threshold level. The threshold level may vary based for example on the characteristics of the network used for transmission of the flow such that the threshold is higher in networks with a greater amount of bandwidth.

When computing device determines that the amount of data or the rate is greater than or equal to the threshold method may proceed to block . In block computing device may determine whether a minimal amount of time has elapsed since the elephant flow was last tagged. In other words to ensure that a central controller or other node is not overly burdened with elephant flow signals computing device may only send out a signal once every t seconds where t may vary by implementation.

When computing device determines that the tagging period has elapsed method may continue to block where computing device may generate the signaling packet. For example computing device may either set the header of the next packet to a predetermined pattern or generate a dedicated signaling packet. In block computing device may transmit the signaling packet to the next hop in the network which may be for example an OpenFlow node or another network node .

Method may then proceed to block . Alternatively if computing device determines in block that the amount or rate is less than the threshold or determines in block that the tagging period has not elapsed method may skip directly to block . In block computing device may determine whether the socket corresponding to the particular flow has been closed. If not method may return to block where computing device may continue monitoring the socket for provision of data. Otherwise method may proceed to block where method may stop.

Method may then proceed to block where computing device may detect insertion of data into the socket buffer corresponding to a flow. For example a shim layer in the operating system of computing device may detect insertion of data into the socket buffer by the application in which the flow originates.

After detection of the insertion of data into the socket buffer method may proceed to block where computing device may determine the current fill level of the buffer. For example computing device may determine the total number of bytes of data queued in the buffer or alternatively may determine the percentage of the buffer that is occupied.

In block computing device may determine whether the fill level of the socket buffer has reached a threshold level. The threshold may be for example a percentage e.g. 75 full or an amount of data e.g. 64 kilobytes 1 megabyte etc. . If the socket buffer has reached the fill level method may continue to block where as with block of computing device may determine whether a tagging period has elapsed. If so method may proceed to blocks and where computing device may generate and transmit a signaling packet as described above in connection with blocks and of .

Method may then proceed to block . Alternatively if computing device determines in block that the fill level is lower than the threshold or determines in block that the tagging period has not elapsed method may skip directly to block . In block computing device may determine whether the socket corresponding to the particular flow has been closed. If not method may return to block where computing device may continue monitoring the socket buffer for insertion of data. Otherwise method may proceed to block where method may stop.

It should be noted that although operation flow is described below with reference to a shim layer that monitors the fill level of a socket buffer operation flow is equally applicable to implementations in which a buffer is not utilized e.g. when device transmits a UDP flow . Furthermore although described in connection with a network that complies with the OpenFlow specification operation flow is applicable to any network.

Referring now to block A of operation flow application initially generates a first data packet P and provides the packet to socket buffer using for example an API provided by the operating system of computing device . As shown by block B packet P is inserted into the socket buffer. Shim layer detects this insertion but takes no action as the fill level of socket buffer has not reached the predetermined threshold illustrated by the dotted line . In block A application generates a second data packet P and inserts the packet into buffer as shown by block B. Again shim layer detects this insertion but takes no action.

Next in block A application generates a third data packet P and inserts P into buffer . As illustrated by block B the fill level of buffer has now exceeded the threshold. Accordingly shim layer detects this condition and in block C generates a header for P that includes a marking indicating that the flow is an elephant flow.

In block computing device begins emptying socket buffer and in the process transmits packets P P and P to the next hop OpenFlow node . Upon receipt of the unmarked packets P and P node forwards the packets along path as illustrated by block .

Upon receipt of P however node detects the modified header with the elephant flow marking and therefore forwards P to central controller as shown by block A. In response central controller determines the most efficient path for the flow here Path and as shown by block B transmits a forwarding table entry to node . In response node updates its forwarding table and as shown by block begins transmitting packets belonging to the elephant flow over Path starting with packet P.

According to the foregoing example embodiments disclosed herein allow for fast detection of elephant flows in a manner that minimizes bandwidth usage in the network. Furthermore because the flow detection process may be implemented in the operating system of the source of a flow example embodiments minimize or eliminate the need to modify individual applications. Additional advantages of embodiments disclosed herein will be apparent based on the foregoing description.

