---

title: System and method for an order handling data model with item-level granularity
abstract: Various embodiments of a system and method for an order handling data model with item-level granularity are described. Embodiments may include an order handling system configured to, for a given purchase order received from an ordering entity, generate within a data store a purchase order data object, item data objects for items of the purchase order, and message data objects for messages associated with item data objects. In various embodiments, the order handling system may also generate in the data store mapping information for mapping each of the different data objects for a given purchase order together. The order handling system may also provide to the ordering entity a notification for a particular item. The notification may be based on information accessed from the item data object corresponding to the particular item or information accessed from other data objects associated with that item data object according to the mapping information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08489436&OS=08489436&RS=08489436
owner: Amazon Technologies, Inc.
number: 08489436
owner_city: Reno
owner_country: US
publication_date: 20100604
---
Drop shipping may include supply chain management techniques that enable one entity e.g. a retailer to sell inventory items of another entity e.g. a distributor or wholesaler without physically taking delivery of the inventory items. In one example of a drop shipping process a retailer receives an order for an item from a customer. The retailer may then place a drop shipment order request for that item with a wholesaler. The drop shipment order request may specify the item purchased by the customer as well as a shipment destination such as the customer s residential address. The wholesaler may ship the item directly to the customer. Typically the retailer s profit on such a transaction is the difference between the purchase price paid by the customer when purchasing the item from the retailer and the purchase price paid by the retailer when placing the drop shipment order request with the wholesaler. Drop shipping arrangements may be desirable to retailers because costs associated with acquiring and storing inventory can be mitigated.

Other entities may utilize drop shipping arrangements to meet various business requirements. In one example a rewards program provider e.g. a credit card issuer may utilize drop shipping arrangements to provide rewards to customers participating in the program. For instance a member of the rewards program may accrue points by participating in various activities e.g. using a particular credit card to make purchases . These points may be redeemed for reward items e.g. televisions cameras digital music players and other consumer products . When a customer redeems points for a particular reward item the rewards program provider may provide a corresponding drop shipment order request to a distributor that stocks that item in inventory. Similar to the wholesaler example described above the distributor may ship the reward item directly to the rewards program member such that the rewards program provider does not have to take possession of the item.

In the example drop shipping arrangements described above the entity that submits the drop ship order e.g. the retailer or rewards program provider may utilize various standards to communicate with the drop shipper e.g. the wholesaler or distributor . One example of such a standard includes a particular implementation of eXtensible Markup Language XML known as commerce XML cXML . The cXML standard may be utilized to submit order requests to a drop shipper according to a process known as PunchOut. The drop shipping entity may operate one or more systems supporting cXML and PunchOut.

While the system and method for order processing state management is described herein by way of example for several embodiments and illustrative drawings those skilled in the art will recognize that the system and method for order processing state management is not limited to the embodiments or drawings described. It should be understood that the drawings and detailed description thereto are not intended to limit the system and method for order processing state management to the particular form disclosed but on the contrary the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the system and method for order processing state management as defined by the appended claims. The headings used herein are for organizational purposes only and are not meant to be used to limit the scope of the description or the claims. As used throughout this application the word may is used in a permissive sense i.e. meaning having the potential to rather than the mandatory sense i.e. meaning must . Similarly the words include including and includes mean including but not limited to.

Various embodiments of a system and method for order processing state management are described. Embodiments may include various components examples of which are illustrated in . In the illustrated embodiment customer may submit a customer order for one or more items to vendor . For example vendor may provide customer with a catalog of items that may be offered to the customer. For instance such items may be offered for sale or offered as part of a rewards program. Customer order may specify one or more of the items requested by customer . The vendor may generate a corresponding purchase order based on customer order . For instance purchase order may specify the items requested by customer in customer order . The purchase order may also include other order related information such as a shipping address to which the requested items should be shipped. In the illustrated embodiment vendor may serve as an intermediary between customer and distributor . For example vendor may provide purchase order to distributor which may be the entity that is actually responsible for preparing and shipping a shipment of the requested items to customer . In one non limiting example distributor may fulfill purchase orders in accordance with a drop shipping agreement with vendor .

Distributor may prepare one or more shipments that collectively include the items of purchase order and ship shipment s to customer . In various embodiments distributor may utilize a shipment carrier to handle the shipment of such shipments from one or more of the distributor s facilities to a location designated by the customer e.g. as specified by the purchase order . In some cases the shipment carrier may be an entity distinct from distributor . In other cases the shipment carrier may be an entity that is wholly or partially owned and or controlled by distributor .

The distributor may also be responsible for notifying the vendor of any information relevant to the processing of purchase order . For instance distributor may notify the vendor when any and or all of the items specified by purchase order have been confirmed as being ordered successfully. In another example distributor may notify the vendor when any and or all of the items specified by purchase order have been successfully shipped from one of the distributor s facilities. In yet another example one or more items may not be available for immediate shipment for any of a variety of reasons e.g. the item is not in stock there is a processing delay at one of the distributor s facilities etc. . In these cases distributor may notify vendor of the delay. In other cases items may be out of stock with no prospect of being restocked e.g. discontinued items limited edition items that have sold out etc. . In these cases distributor may provide vendor with a corresponding notification indicating that the portion of the purchase order corresponding to such item s will not be able to be fulfilled. Distributor may provide any of these notifications as well as other information as described in more detail below to vendor as order information .

Order information may be utilized by vendor for a variety of purposes. In one example order information may be utilized for bookkeeping accounting and or auditing purposes. In another example order information may be utilized to keep customer apprised of the status of any items ordered by the customer. For instance vendor may provide a customer accessible website that enables customers to check the status of orders placed with the vendor. Such web based status information may be based on order information that the vendor receives from the distributor. In another example order information may be utilized for transaction related purposes. For instance in some cases vendor may not debit customer s account e.g. a financial account or a rewards points account until receiving notice from the distributor that customer s requested items have shipped.

As described in more detail below order handling system may be configured to provide effective failover resiliency through component or module based state persistence item level visibility into any order processed and message type flexibility when communicating with vendor .

In various embodiments distributor may operate a fulfillment network including multiple materials handling facilities each of which may be configured in a manner similar to that of materials handling facility . While only one materials handling facility is presented in the illustrated embodiment it should be understood that a network of multiple materials handling facilities may be utilized to fulfill orders in various embodiments.

In various embodiments a materials handling facility may include one or more facilities that process store and or distribute units of items including but not limited to warehouses distribution centers hubs fulfillment centers nodes in a supply chain network retail establishments shipping facilities stock storage facilities or any other facility configured to process units of items. For example this Figure may illustrate an order fulfillment center of a distributor according to some embodiments. Multiple internal orders may specify one or more items from inventory to be shipped to the respective customer. To fulfill internal orders the one or more items specified in each order may be retrieved or picked from inventory which may also be referred to as stock storage in the materials handling facility as indicated at . Picked items may be delivered or conveyed if necessary to one or more stations in the materials handling facility for sorting into their respective orders packing and finally shipping to the customers . In various embodiments picked items may be delivered to a station where individual units of items are associated with and placed into particular conveyance receptacles which are then inducted into a conveyance mechanism. The conveyance receptacles may then be routed to particular destinations for the items contained within the receptacles in accordance with the requests orders currently being processed e.g. to sorting stations under direction of a control system e.g. control system . A picked packed and shipped order does not necessarily include all of the items ordered by the customer an outgoing shipment to a customer may include only a subset of the ordered items available to ship at one time from an inventory storage location.

A materials handling facility may also include a receiving operation for receiving shipments of stock e.g. units of inventory items from one or more sources and for moving or stowing the received stock into stock storage e.g. inventory . The receiving operation may also receive and process returned purchased or rented items or orders from customers. At least some of these items are typically returned to inventory . The various operations of a materials handling facility may be located in one building or facility or alternatively may be spread or subdivided across two or more buildings or facilities. In various instances it should be understood that references to elements units items processes or anything else as being located within materials handling facility may easily be extended to encompass elements units items processes or anything else proximate to but not physically located within materials handling facility . For example various elements units items or processes or anything else may be implemented outside of the materials handling facility according to some embodiments.

In various embodiments outgoing shipments including one or more items may be processed at shipping and transferred to one or more shipment carrier network s . Each shipment carrier s network may include one or more distribution facilities e.g. hubs for storing items as well as vehicles for conveying shipments from such distribution facilities and or materials handling facilities such as materials handling facility to various destinations e.g. customer specified destinations .

While order handling system is illustrated as operating in conjunction with a materials handling facility of distributor the order handling system may in some embodiments also be configured to handle orders that are fulfilled in facilities of other entities such as a third party order fulfillment entity.

In various embodiments while order handling system is described as managing orders for physical inventory such orders need not be limited to physical inventory. For instance in some embodiments inventory may be digital or electronic inventory such as electronic books or media e.g. music video etc. . In the case of digital or electronic items these items may be delivered to customer s over a data network such as the Internet.

In the illustrated embodiment order creation component may receive a purchase order from a computer system of vendor . Purchase order may be one example of purchase order described above. Gateway component may serve as the interface between order creation component and other systems that submit purchase orders such as purchase order . Gateway component may validate purchase order to determine whether it includes the requisite information that should be included within a valid purchase order e.g. list of requested items destination shipping address etc. . If the purchase order is invalid the order response sent by gateway component may indicate that the purchase order was invalid. Gateway component may also authenticate the provider of the purchase order. For instance to authenticate vendor gateway component may ensure that authentication information for vendor within the purchase order matches authentication information on record with distributor . If the gateway component determines that the vendor is not authenticated the order response sent by gateway component may indicate that the vendor is unauthorized to submit purchase orders for order fulfillment. Communications between the gateway component and the computer system of vendor may adhere to any of a variety protocols such as Hypertext Transfer Protocol HTTP or some other application layer protocol.

A valid purchase order received from an authenticated source may be parsed and relevant information may be stored in a new format independent from the format of the received purchase order. For instance gateway component may receive a purchase order that adheres to the cXML format. In this example gateway component may parse relevant purchase order information from the cXML purchase order and store the purchase order in a different format utilized by order handling system . As described in more detail below outgoing messages may be formatted according to any format specified by vendor . In this way order handling system may be configured to utilize the same internal logic to process purchase orders irrespective of the inbound format of purchase orders or the outbound format of messages sent back to the vendor.

The new purchase order adhering to the internal format of the order handling system may be persisted e.g. stored by gateway component in order information data store illustrated in as a message data object as illustrated at . This message data object may include a message identifier as well as the relevant contents of the received purchase order such as a shipping address vendor identifier and list of requested items. Note that in various cases this message data object may not include some format specific information. For instance if purchase order adhered to the cXML format the gateway component may create the message data object such that it does not include cXML specific information.

Referring collectively to and examples of message data objects are illustrated as message data objects and . In the illustrated embodiments purchase order message may be parsed by the gateway component and stored within order information data store as message data object . Message data objects such as message data object may include a variety of information.

One example of a message data object is illustrated as message data object of . Message data object may include a message identifier which may be an identifier utilized by order handling system to differentiate different messages. Purchase order identifier may specify a purchase order with which the message is associated. For instance in the illustrated embodiment of message data object may include a purchase order identifier that identifies purchase order data object described in more detail below . If a purchase order data object has not yet been created by the order handling system this field of the message data object may remain empty or null. External message identifier may include an identifier specified by the sender of the message e.g. vendor . Message data object may also include a message type which may include but is not limited to a purchase order message type confirmation message type or shipping notice message type. Message type may also specify the format of the message e.g. email or cXML . Message date may specify a date and or time at which the message was received or sent by the order handling system. Message text may include the contents of the message. Profile identifier may be an identifier of a stored profile associated with the entity that submitted the message. In one example profiles may specify different preferences for different vendors. For instance a profile may specify which message format s should be utilized when communicating with the respective vendor. Status may specify the processing status of the message. For instance a message received by order handling system may be in a received state. A message created by the order handling system may be in a generated or sent state. Response information may include different information dependent upon whether the message data object represents an inbound or outbound message. For inbound messages response information may include the response information sent to the entity that provided the inbound message e.g. vendor . For outbound messages response information may include the response received from the recipient of the outbound message. In an example where messages are sent over HTTP response information may specify an HTTP status code e.g. HTTP status codes etc. and an associated response e.g. OK SERVICE UNAVAILABLE etc. . As described in more detail below some message data objects may be linked with other message data objects within order information data store . For instance an outbound message e.g. response message may be linked with a corresponding inbound message e.g. purchase order . Reference identifier may be the identifier of another message data object to which the message data object is linked.

At of gateway component may also generate within order information data store a purchase order data object associated with the received purchase order. An example purchase order data object is illustrated as purchase order data object of . Additionally an example format for such a purchase order data object is illustrated by purchase order data object of . As illustrated purchase order identifier may be an identifier utilized by order handling system to differentiate among different purchase order received by the system. Profile identifier may be an identifier of a stored profile associated with the entity that submitted the message as described above with respect to . External purchase order identifier may be an identifier utilized by an external entity to identify the purchase order. For instance external identifier may be an identifier utilized by vendor . Order processing purchase identifier may be a purchase identifier utilized by order processing system . Shipping address information may specify an address to which the items of the purchase order are to be shipped. In some cases shipping address information may be an identifier or reference for determining a shipping address. Payment instrument may specify the instrument to be used to pay for the items of the purchase order e.g. an account identifier or other payment related information . Purchase status may be an aggregate of the statuses of the individual items that make up the purchase order.

Returning to at gateway component may also generate within order information data store an item data object for each item of the purchase order. Examples of such item data objects are illustrated as item data object s of . An example format for an item data object is illustrated by item data object of . As illustrated such item data object may include a purchase order item identifier which may be an internal item identifier utilized by order handling system . Purchase order identifier may be an identifier of the purchase order to which the item belongs. External line identifier may be an identifier that associates the item with a particular line item position in the original purchase order that is submitted e.g. purchase order . Internal order item identifier may specify an item identifier utilized by order processing system . Latest message identifier may specify an identifier of the most recent message sent with respect to this item e.g. a confirmation message described in more detail below . Status may specify the ordering status for this item e.g. ordered shipped or failed . Status text may include any information pertaining to the status. For instance if ordering of the item failed status text may specify a failure reason or error message. Internal order identifier may be an identifier utilized by order processing system to identify the internal order to which the item belongs. Shipment identifier may identify a shipment in which the item is located. This field may be empty prior to shipment of the item. Supply code may specify the current inventory status of the item which may be utilized to determine whether or not the processing of an item will be delayed. Supply code date may specify a date and or time at which the supply code changed e.g. the most recent date and or time at which the supply code changed .

As described above in response to receiving purchase order gateway component may generate within order information data store one or more or more message data objects a purchase order data object and one or more item data objects. Order handling system may generate data that associates or maps these items together within the data store. For instance in the illustrated embodiment of each item data object may be associated with purchase order data object . In one example the order handling system may set the purchase order identifier field of each item data object to be the purchase order identifier of purchase order data object . In other embodiments such item to purchase order relationships may be specified in a separate mapping information data object .

In various embodiments one or more purchase order level messages may be associated with the purchase order data object. For instance purchase order may be stored as message data object and associated with purchase order data object . In various embodiments message data objects may be linked together such as according to a parent child relationship. For instance message data object of may be the data object corresponding to a received purchase order message e.g. purchase order while message data object may be the data object corresponding to the message sent in response to the purchase order message e.g. response . In one example to indicate the relationship between such messages order handling system may set the reference identifier field of message data object to be the message identifier of message data object . In other embodiments message to message relationships may be specified elsewhere such as in mapping information data object .

As gateway component receives generates and sends various messages e.g. messages and the gateway component may update the state of such messages within order information data store . In an example where message data object represents purchase order message gateway component may set the status field of such data object to a received state. In an example where message data object represents response the gateway component may set the status field of such object to a generated state once the message has been generated and to a sent state once the message has been sent to the vendor and or once the vendor confirms receipt of the message .

Returning to gateway component may store the identifier of the purchase order on purchase order queue as illustrated at . In general purchase order queue as well as any other queue described herein may adhere to any queue format e.g. first in first out or similar format . In one example purchase order queue as well as any other queue described herein may be implemented as a network accessible queuing service. In various embodiments by storing the purchase order identifier in purchase order queue gateway component may indicate to purchase order processor that the purchase order is ready to be processed.

Purchase order processor may pull purchase order identifiers from purchase order queue and process such purchase orders. In the illustrated embodiment purchase order processor may remove the identifier of the purchase order identifier that corresponds to purchase order from the queue as illustrated at . In this example purchase order processor may access the corresponding purchase order data object from order information data store as illustrated at . For instance purchase order processor may identify the purchase order data object e.g. purchase order data object that includes the purchase order identifier e.g. purchase order identifier that matches the purchase order identifier pulled from the queue. Purchase order processor may also determine the items that are to be ordered by identifying the purchase order items data objects e.g. purchase order item data objects that are mapped or associated with the identified purchase order data object. Based on this information the purchase order processor may generate an order request for those items and submit a corresponding order request to the common order processing component . Common order processing component may serve as a wrapper around order processing system interface . This interface may be an interface to order processing system described above. In various embodiments the wrapper functionality provided by common order processing component may ensure that order requests submitted by purchase order processor are handled in a transactional manner. In one non limiting example this may include ensuring that each purchase order is handled as a set of atomic operations. The order request may be submitted by purchase order processor to a programmatic interface which may be an application programming interface API for example. Interface may be configured to queue the order request in queue to await processing by order processing system. Common order processing component may be responsible for submitting the order to the order processing system through interface . As is the case with other components of the order creation component common order processing component may in some embodiments be configured to create maintain and or update data objects within order information data store that represent the state of the order submitted through interface . In this way should the submission of an order through interface fail the order creation component may be configured to resume processing of the order from the aforesaid state stored in order information data store . In other embodiments this process may be handled by purchase order processor on behalf of common order processing component . As is the case with any of the state information in order information data store this order state information may in various embodiments be utilized to notify vendor as to the state of an order submitted by the vendor.

Order processing component may store results returned by the order processing system in queue . The results may indicate for each item of the processed purchase order whether that item was successfully purchased e.g. a successful item or not successfully purchased e.g. a failed item . For each successful item queue may include an order identifier returned by the order processing system. In various embodiments queue may also include an error or failure notification for any item that could not be successfully ordered e.g. out of stock items .

Purchase order processor may access the information of queue as illustrated at . For each order identifier of a successfully ordered item purchase order processor may generate a corresponding internal purchase order data object as illustrated in . Note that multiple internal orders may be utilized to complete a single purchase order. Accordingly there may be multiple internal purchase order data objects that map to a single purchase order data object . In various embodiments this mapping may be indicated by data within each internal purchase order data object . For instance each internal purchase order data object created by purchase order processor may include the order identifier provided by the order processing system and the identifier of the purchase order to which the purchase order data object corresponds. In other cases purchase order data object may include the internal order identifier of one or more or more internal purchase order data objects . In other cases these associations may be specified by mapping information data object .

Purchase order processor may also create an association between each item data object and its parent internal purchase order data object . For instance each item data object may include an internal order identifier corresponding to one of the internal purchase order data objects . In other cases this relationship may be specified by mapping information data object .

In various embodiments purchase order processor may also create an internal item data object for each item data object . Each internal item data object may include the supply code and supply code date described above for the respective item.

In some embodiments internal purchase order data objects and internal item data objects may not be utilized. Instead the data of these objects may be incorporated into each item data object . For instance as illustrated in item data objects may include an internal identifier line identifier supply code and supply code date . In any of the scenarios presented above all of the above described objects that are generated by purchase order processor may be stored in order information data store as illustrated at .

Also note that in the event that the processing of a purchase order by the purchase order processor fails the purchase order identifier of that purchase order may be returned to the queue to be retried at a later time as illustrated at .

As described above each purchase order may result in one or more internal orders e.g. internal orders . The purchase order processor may pass the identifiers of these orders to order confirmation queue as illustrated at . Order confirmation processor may generate one or more confirmation messages for each successful internal order. A given confirmation message may indicate that an order for a respective item has been placed. In various embodiments order confirmation processor may generate such messages in accordance with vendor specified preferences such as preferences stored in a vendor profile. In one non limiting example confirmation messages may be generated in an email format or a cXML format. The order confirmation processor may also store these messages within order information data store as illustrated at . In one non limiting example message data object s of may be order confirmation messages. In the event that the message creation process fails for one or more orders the order identifiers of these messages may be returned to queue as illustrated at . Additionally as each confirmation message is generated the status or state of such messages may be updated in the corresponding data object of the order information data store. For instance as described above each message data object may include a status to indicate whether the message has been generated and or sent.

As illustrated at order confirmation processor may provide identifiers of the generated messages to the outbound message queue which is illustrated as outbound message queue of . illustrates an outbound messaging component which may be responsible for sending order information e.g. order information to one or more computer systems of vendor . Outbound messaging component may include a message router component configured to pull message identifiers from outbound message queue as illustrated at . For a given identifier removed from the queue message router component may evaluate the message data object corresponding to that identifier within order information data store to determine where a message should be routed. In the illustrated embodiment different outbound queues may be associated with different message types. For instance queue may be associated with electronic mail email messages and queue may be associated with cXML messages or some other message format . Accordingly in some embodiments to determine to which location the message should be routed message router component may be configured to evaluate the respective message data object in order information data store to determine the message type e.g. message type . In one non limiting example message handler component is configured to send email messages and message handier component is configured to send cXML messages. Accordingly if the message router component determines that the message format is email the message router component may store the identifier of that message on outbound message queue as illustrated at . If the message router component determines that the message format is cXML the message router component may store the message identifier of that message on outbound message queue as illustrated at .

In various embodiments message handler component may be configured to pull a message identifier from outbound message queue as illustrated at . The message handler component may also be configured to retrieve the message corresponding to that identifier from order information data store as illustrated at . Once the message is retrieved from the data store message handler component may send the message to a computer system of vendor as illustrated by message . In one non limiting example message is an email message.

In various embodiments message handler component may be configured to pull a message identifier from outbound message queue as illustrated at . The message handler component may also be configured to retrieve the message corresponding to that identifier from order information data store as illustrated at . Once the message is retrieved from the data store message handler component may send the message to a computer system of vendor as illustrated by message . In one non limiting example message is a cXML message sent over HTTP. Message handler component may also be configured to receive a response from a computer system of vendor as illustrated by response e.g. an HTTP response . In cases where responses e.g. response are received message handler component may generate a message data object for the response message and store that data object within order information data store . In various embodiments the message data object for the response message may be associated with the corresponding message sent by the message handler component. In one example message data object may represent message and message data object may represent response . These two messages may be associated through data of the objects e.g. reference identifier or through mapping information such as mapping information data object . In the event that the sending of a given message fails at the message handler component the message may be returned to the respective queue for further processing as illustrated at and .

As illustrated at outbound message component may also receive process and send messages from order event handler of post order processing component which is described in more detail below with respect to . While messages from order creation component may generally be order confirmation messages messages provided by order event handler may generally include ship notifications and delay notices for one or more items or any other type of notification message related to an order .

As described above a stored profile may be associated with different vendors in various embodiments. These profiles may be stored within data store or another data store not illustrated. In various embodiments vendor profiles may store preferences pertaining to the message formats for notification messages that are sent to vendors. For instance a vendor may specify that their notification messages should be sent according to cXML email or some other format. In various embodiments a vendor s profile may also specify the structure of such notification messages. For instance notification messages may be sent for entire orders or instead for individual items. Vendor profiles may also specify contact information e.g. an email address that should be used to contact the vendor in the event that the vendor s system fails to respond to the order handling system. In one example after the order handling system completes a certain number of failed attempts of sending a notification message to the vendor the order handling system may send a message to the vendor according to the aforesaid contact information.

In various embodiments the order handling system may be configured to store messages e.g. message data object of data store in a format that is independent of the format in which the vendor sends messages e.g. purchase orders to the order handling system and or independent of the message format of the messages provided to the vendor e.g. order or item notifications . Additionally for messages provided to the vendor the format of theses messages may be specified by that vendor s corresponding profile. In one non limiting example a vendor may submit a purchase order in cXML format. The order handling system may store relevant information from the purchase order as an XML data object. Additionally any messages sent to the vendor for that purchase order may be sent according to a format specified by that vendor s profile e.g. email cXML or some other format this format may or may not be the same as the format in which the purchase order was received.

Post order processing component of may include a notification component that is configured to generate notifications e.g. push based notifications of the orders processed by order processing system . For instance for each order processed by order processing system notification component may generate messages for delay notifications when an item is delayed e.g. temporarily out of stock and or ship notifications when an item is eventually shipped. In some cases the orders for which notification component provides notification messages may include orders other than those submitted by order handling system . For instance in addition to orders from order handling system order processing system may also handle orders from an e commerce marketplace distinct from order handling system . To isolate notification messages relevant to order processing system post order processing component may include an order filter component . For instance order filter component may receive multiple notification messages as illustrated at . Order filter component may also be configured to receive an indication of which orders pertain to a purchase order submitted by the order handling system. In one example each time purchase order processor receives an order identifier from common order processor order processor may provide an indication of such order e.g. an order identifier to filter component as illustrated at . When order filter component determines that a notification received from notification component pertains to one of the orders identified at order filter component may provide such notification to order event handler component as illustrated at . In various embodiments notifications that do not pertain to orders identified at may be dropped by the order filter component . In various embodiments for each notification received at order event handler component may be configured to generate a corresponding message e.g. a shipment confirmation message or an order delay notification . As illustrated at each generated message may be stored by order event handler component within order information data store as a message data object. Additionally each of such message data objects may be associated with the item data objects to which they pertain in order information data store . Order handler component may also send the identifiers of such messages to outbound message queue as illustrated at . Outbound message component may process such messages and send them to one or more computer systems of vendor according to the techniques described above with respect to .

As described above the various components of order handling system may track and update the state of a purchase order and the various messages that are associated with that purchase order at an order level and or an item level . illustrates a state graph that represents the processing of a purchase order for multiple items. At state a purchase order message has not been received. At state a purchase order message denoted as M O has been received by the system. An example of a purchase order message is described above with respect to purchase order message . Order processing system may record the state of the message by setting the status field e.g. status of a corresponding message data object to a received state. At state the purchase order specified by the message denoted as P in the Figure initially resides in an unprocessed state. Order handling system may record the state of the purchase order by setting the status field of a corresponding purchase order data object e.g. purchase status to an unprocessed state. Likewise one or more items of that purchase order denoted as I in the Figure may also reside in an unprocessed state. Order handling system may record the state of each item by setting the status field e.g. status field of a corresponding item data object to an unprocessed state.

As illustrated by state order handling system may process the purchase order denoted as P in the Figure specified by the purchase order message. Prior to this state the purchase order may reside in an unprocessed state as illustrated at . As illustrated by state the order handling system may designate the state of the purchase order as completed or rejected. In various embodiments this evaluation may be performed at the order level. For instance an invalid address or a rejected payment may result in an order level failure e.g. all items of the order are failed . In cases where the purchase order is accepted at the order level state may indicate that the purchase order was completed. In these cases for each item of the purchase order denoted as I in the Figure the state may specify whether item has been ordered e.g. ordered whether the item has not been ordered due to an item level failure e.g. out of stock etc. or whether the item has not been processed by the order processing system unprocessed . In various embodiments the order handling system may designate the item s state in order information store by setting the status field e.g. status of the corresponding item data object in the order information data store.

As illustrated by states the order information store may also include state information for each of the messages generated by the order handling system. In state an order confirmation message denoted as M C and a corresponding electronic mail message denoted as M E are generated. Examples of such messages include the messages generated by order confirmation processor described above. In state each of such messages is transitioned to a sending state which indicates the messages are currently being sent. At the sending of such messages is complete and the state of each message is transitioned to a sent state. As described above the order handling system may also generate one or more shipment notifications when one or more items are shipped by the distributor. As illustrated at a shipment notification denoted as M S is transitioned to a generated state.

When such shipment notification is sent by the order handling system to the vendor the order handling system may transition the ship notification to a sent state. In various embodiments the order handling system may designate the message s state in order information store by setting the status field e.g. status of the corresponding message data object in the order information data store.

In various embodiments the state information described herein e.g. the state information of may be utilized to provide vendors with insight into the state of their submitted order at an order level and or item level. As described above this information may be provided through notification messages provided to vendor such as messages and . In some cases the order handling system may generate a visual representation of order state information e.g. a graphical representation on an electronic display . Such visualization may be provided to vendors and or utilized by distributor to track the status of orders.

In some embodiments the order handling system may also be configured to generate alert or alarm messages based on one or more conditions. For instance agents or managers of distributor may provide order handling system with conditions that specify an alarm or alert is to be generated if an order or item remains in a particular state beyond a threshold quantity of time. In response to the condition being met order handling system may generate an alarm or alert message indicating that the condition has been met e.g. a message indicating an order or item has remained in an unprocessed state for too long . These alerts or alarms may be generated on computer systems or other electronic devices accessible to agents or management entities of distributor .

Embodiments of the system and method for order processing state management may include various methods such as those of described below. In various embodiments these methods may be implemented on a computer system such as that of described below. In various embodiments the methods described herein may be performed by one or more components of order handling system described above each of which may also be implement on a computer system such as that of described below.

As illustrated by block the method may also include providing multiple components of an order handling system for performing respective tasks of an order fulfillment process. An example order handling system is order handling system described above. Likewise examples of components of such an order handling system include order creation component outbound messaging component post order processing component and the various subcomponents described above with respect to each of those components. In various embodiments an order fulfillment process may include any set of tasks for completing an order from receiving an order to shipping items of that order to a recipient. Examples of such tasks may include any action performed by order handling system described above e.g. receiving a purchase order submitting a corresponding order to an order processing system confirming an order routing one or more messages associated with the order sending one or more messages associated with the order processing order events etc. .

As illustrated by block the method may include for a given purchase order utilizing each component to perform a respective task of the order fulfillment process. The respective task may include any of the tasks described herein including but not limited to receiving a purchase order submitting a corresponding order to an order processing system confirming an order routing one or more messages associated with the order sending one or more messages associated with the order processing order events or any other action associated with fulfilling a particular purchase order.

As illustrated by block the method may also include based on each task performed utilizing each respective component to update state information corresponding to the given purchase order in the data store. For instance if a gateway component is utilized to receive a purchase order message the method may include updating the state of that message to a received state within the data store e.g. setting status to a received state . In another example if a purchase order component submits an order to an order processing system and receives indication that an item has been successfully order the method may include updating a corresponding item data object in the data store to indicate that the item has been ordered e.g. setting status to an ordered state . In another example if an order confirmation component generates a confirmation message the method may include updating the state of a corresponding confirmation message data object within the data store e.g. setting status to a generated state . In yet another example if a message handler component sends a message to a computer system of a vendor the method may include updating the status of the corresponding message data object within the data store e.g. setting status to a sent state . One example of how state information may evolve over time is illustrated by the state information of . In various embodiments the method described herein may include modifying state information in such a manner as various tasks are performed. In some embodiments the method may include enforcing a requirement that state information be updated in a transactional manner.

As illustrated by block the method may include subsequent to an interruption of the order fulfillment process for the given purchase order resuming the processing of the given purchase order based on the updated state information. In various embodiments an interruption in the order fulfillment process may occur for a variety of reasons. In some cases such an interruption may be planned such as for system maintenance or upgrades. In other cases such an interruption may be caused by a system failure. Examples of system failure include any failure that adversely affects one or more components of order handling system . In one example one of the queues described above could experience a failure resulting in loss of data on the queue. In this example the method may include resuming the processing of the given purchase order by reloading the queue with the identifiers of data objects corresponding to that purchase order. For instance in the event that a message queue fails the actual messages on the queue may be safe from data loss because the messages may be stored as message data objects within an order information data store. In this non limiting example only identifiers of the messages are stored on the queue not entire messages. This process may be similar to that described above with respect order confirmation processor order event handler and outbound message queue . Accordingly in this non limiting example the method may include determining the state of the purchase order and reloading the failed queue with identifiers of messages that have been generated but not yet sent e.g. as indicated by the status field of the respective message data object . In other cases a non queue system component may fail e.g. a gateway component purchase order processor order confirmation processor message router message handling component order event handler etc. . In these cases the processing of any given purchase order may be resumed either from the state of processing indicated by various queues or by the state of processing indicated by the order information data store.

As illustrated at block the method may also include for each of one or more items specified by the purchase order generating a respective item data object comprising one or more attributes and store that item data object within the data store. One example of such an item data object is described above with respect to item data object . The elements of that item data object e.g. items are examples of attributes of an item data object. As illustrated by block the method may include for each of multiple notification messages associated with the purchase order generating a corresponding message data object comprising one or more attributes and store that message data object within the data store. One example of a message data object is described above with respect to message data object . Likewise items are examples of such a message data object.

As illustrated by block the method may also include generating within the data store mapping information that specifies each message data object is associated with one or more of the multiple item data objects. Such mapping information may also specify that each of the multiple item data objects is associated with the respective purchase order. In this way the method may maintain relationships between various data objects on an item and or message level. One example of this mapping information is described above with respect to mapping information data object . In other cases different portions of mapping information may be stored in different data objects. For instance each item data object that maps to a particular purchase order data object by storing the purchase order identifier of the purchase order to which that purchase order data object corresponds. By utilizing this mapping information each message may be tied to individual items which may be associated by a common purchase order.

As illustrated by block the method may in various embodiments include receiving a request from the ordering entity for information pertaining to a particular item. For instance the ordering entity may seek state information e.g. ordered failed unprocessed or one or more messages pertaining to a particular item. As illustrated by block the method may include providing a response to the ordering entity where such response is based on information access from the item data object corresponding to the particular item or information accessed from other data objects associated with that item data object according to the mapping information. Examples of this process are described below.

In one example the method may include receiving a status request for a particular item such as a status request received from an ordering entity e.g. vendor . In response to the status request the method may include determining a state of the particular item from an attribute of the corresponding item data object within said data store. Such state may indicate whether an order for that item has been successfully placed within an order processing system. For instance as described above item data objects may include a status attribute e.g. status that indicates whether an order for the item has been successfully placed with order processing system . Once the state of the item has been determined e.g. ordered failed or unprocessed the method may include providing the ordering entity with a message or other information that specifies the state of the item. In one example responses to status requests may be provided to a vendor as order information e.g. order information . Note that status requests may be processed at an item for specific items or for specific groups of items which may or may not be items of the same order .

In another example the method may include receiving from an ordering entity e.g. vendor a request for one or more notification messages associated with a particular item of the purchase order. For instance a vendor system may have malfunctioned and the vendor may want check the messages that pertain to one or more items of one or more orders. Examples of these messages include order confirmation messages ship notifications and delay notices. In various embodiments the method may include based on the mapping information generated at identifying one or more message data objects that are associated with the identified item data object. For example mapping information data object may specify which of message data objects are associated with a particular item data object . The method may include evaluating such a mapping information data object to determine such relationships. The method may also include providing the ordering entity with a message specified by the identified message data object. For instance providing a message specified by the respective message data object may include providing any of the attributes of that message data object e.g. message text . In one example the method may include selecting the most recent message generated for the item and providing that message to the ordering entity. In other cases all relevant messages associated with the item may be provided to the ordering entity. By utilizing the techniques described herein embodiments may provide item level granularity into state information as well as system messages.

Various embodiments of the system and method for order processing state management as described herein may be executed on one or more computer systems which may interact with various other devices. Note that any component action or functionality described above with respect to may be implemented via one or more computer systems configured as computer system of according to various embodiments. In the illustrated embodiment computer system includes one or more processors coupled to a system memory via an input output I O interface . Computer system further includes a network interface coupled to I O interface and one or more input output devices such as cursor control device keyboard and display s . In some cases it is contemplated that embodiments may be implemented using a single instance of computer system while in other embodiments multiple such systems or multiple nodes making up computer system may be configured to host different portions or instances of embodiments. For example in one embodiment some elements may be implemented via one or more nodes of computer system that are distinct from those nodes implementing other elements. For instance one or more nodes might implement order creation component and one or more other nodes might implement outbound messaging component .

In various embodiments computer system may be a uniprocessor system including one processor or a multiprocessor system including several processors e.g. two four eight or another suitable number . Processors may be any suitable processor capable of executing instructions. For example in various embodiments processors may be general purpose or embedded processors implementing any of a variety of instruction set architectures ISAs such as the x86 PowerPC SPARC or MIPS ISAs or any other suitable ISA. In multiprocessor systems each of processors may commonly but not necessarily implement the same ISA.

System memory may be configured to store program instructions and or data accessible by processor . In various embodiments system memory may be implemented using any suitable memory technology such as static random access memory SRAM synchronous dynamic RAM SDRAM nonvolatile Flash type memory or any other type of memory. In the illustrated embodiment program instructions implementing any of the elements of order handling system are shown stored within system memory . Additionally data of memory may store any of the information or data structures described above in some embodiments. In some embodiments program instructions and or data may be received sent or stored upon different types of computer accessible media or on similar media separate from system memory or computer system . While computer system is described as implementing the functionality of order handling system any of the components or systems illustrated above may be implemented via such a computer system e.g. order processing system .

In one embodiment I O interface may be configured to coordinate I O traffic between processor system memory and any peripheral devices in the device including network interface or other peripheral interfaces such as input output devices . In some embodiments I O interface may perform any necessary protocol timing or other data transformations to convert data signals from one component e.g. system memory into a format suitable for use by another component e.g. processor . In some embodiments I O interface may include support for devices attached through various types of peripheral buses such as a variant of the Peripheral Component Interconnect PCI bus standard or the Universal Serial Bus USB standard for example. In some embodiments the function of I O interface may be split into two or more separate components such as a north bridge and a south bridge for example. Also in some embodiments some or all of the functionality of I O interface such as an interface to system memory may be incorporated directly into processor .

Network interface may be configured to allow data to be exchanged between computer system and other devices e.g. any other component of the Figures described above attached to a network or between nodes of computer system . Network may in various embodiments include one or more networks including but not limited to Local Area Networks LANs e.g. an Ethernet or corporate network Wide Area Networks WANs e.g. the Internet wireless data networks some other electronic data network or some combination thereof. In various embodiments network interface may support communication via wired or wireless general data networks such as any suitable type of Ethernet network for example via telecommunications telephony networks such as analog voice networks or digital fiber communications networks via storage area networks such as Fibre Channel SANs or via any other suitable type of network and or protocol.

Input output devices may in some embodiments include one or more display terminals keyboards keypads touchpads scanning devices voice or optical recognition devices or any other devices suitable for entering or accessing data by one or more computer systems . Multiple input output devices may be present in computer system or may be distributed on various nodes of computer system . In some embodiments similar input output devices may be separate from computer system and may interact with one or more nodes of computer system through a wired or wireless connection such as over network interface .

As shown in memory may include program instructions configured to implement any element or action described above. In one embodiment the program instructions may implement the methods described above such as the method illustrated by . In other embodiments different elements and data may be included. Note that data may include any data described above such as the data of order information data store .

Those skilled in the art will appreciate that computer system is merely illustrative and is not intended to limit the scope of embodiments. In particular the computer system and devices may include any combination of hardware or software that can perform the indicated functions including computers network devices Internet appliances PDAs wireless phones pagers etc. Computer system may also be connected to other devices that are not illustrated or instead may operate as a stand alone system. In addition the functionality provided by the illustrated components may in some embodiments be combined in fewer components or distributed in additional components. Similarly in some embodiments the functionality of some of the illustrated components may not be provided and or other additional functionality may be available.

Those skilled in the art will also appreciate that while various items are illustrated as being stored in memory or on storage while being used these items or portions of them may be transferred between memory and other storage devices for purposes of memory management and data integrity. Alternatively in other embodiments some or all of the software components may execute in memory on another device and communicate with the illustrated computer system via inter computer communication. Some or all of the system components or data structures may also be stored e.g. as instructions or structured data on a computer accessible medium or a portable article to be read by an appropriate drive various examples of which are described above. In some embodiments instructions stored on a computer accessible medium separate from computer system may be transmitted to computer system via transmission media or signals such as electrical electromagnetic or digital signals conveyed via a communication medium such as a network and or a wireless link. Various embodiments may further include receiving sending or storing instructions and or data implemented in accordance with the foregoing description upon a computer accessible medium. Generally speaking a computer accessible medium may include a storage medium or memory medium such as magnetic or optical media e.g. disk or DVD CD ROM volatile or non volatile media such as RAM e.g. SDRAM DDR RDRAM SRAM etc. ROM etc. In some embodiments a computer accessible medium may include transmission media or signals such as electrical electromagnetic or digital signals conveyed via a communication medium such as network and or a wireless link.

The methods described herein may be implemented in software hardware or a combination thereof in different embodiments. In addition the order of the blocks of the methods may be changed and various elements may be added reordered combined omitted modified etc. Various modifications and changes may be made as would be obvious to a person skilled in the art having the benefit of this disclosure. The various embodiments described herein are meant to be illustrative and not limiting. Many variations modifications additions and improvements are possible. Accordingly plural instances may be provided for components described herein as a single instance. Boundaries between various components operations and data stores are somewhat arbitrary and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of claims that follow. Finally structures and functionality presented as discrete components in the exemplary configurations may be implemented as a combined structure or component. These and other variations modifications additions and improvements may fall within the scope of embodiments as defined in the claims that follow.

