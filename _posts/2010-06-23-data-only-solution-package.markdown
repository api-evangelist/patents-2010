---

title: Data only solution package
abstract: Technologies are described herein for deploying a data only solution package separate from custom code. In this way, lifecycles of the data only solution package and the custom code can be separately controlled. In an illustrative implementation, the data only solution package is received at a computer. A data specification is installed at the computer through the data only solution package. The data specification may specify a location of an external system storing external data. A data subscription may also be installed at the computer through the data only solution package. The data subscription may include queries for retrieving the external data from the external system and frequency information specifying a frequency at which to retrieve the external data. The external data is retrieved from the external system utilizing the location information, the queries, and the frequency information. A data cache at the computer is populated with the external data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08370830&OS=08370830&RS=08370830
owner: Microsoft Corporation
number: 08370830
owner_city: Redmond
owner_country: US
publication_date: 20100623
---
End users may desire the ability to extend the user interface UI and or the user experience UX of current applications in order to view and interact with external data from other sources. For example an external line of business LOB system may contain a list of sales orders from various customers. A business user may desire to surface the customer data in a contact list of a personal information management application operating on a client machine. In this way the user can view and interact with the customer data offline utilizing the interface of the personal information application.

One way to extend the UI and or UX of applications is through a developer created add in. Add ins may be provided via a links within a user application or from a remote file share. In addition add ins may also be pushed to the client machine via a software distribution service without user action. When the add ins are installed on the client machine the business user may expand the UI and or UX of the personal management application by enabling the add ins. Each add in may specialize on a particular business domain e.g. employee rewards sales metrics customer management etc. . As a result each add in may depend on one or more data sets in order to function correctly.

The add ins may operate based on data stored in a data cache on the client machine. However existing solutions may not provide a programmatic way to populate the data cache with external data from other sources such as external LOB systems. As a result the end user may be given the responsibility to populate the data cache with the external data. The process of populating the data cache can be burdensome and technically difficult. This can be particularly troublesome for business users who may lack technical expertise. Further if the data cache is not properly populated the add in may operate upon and display incorrect information. In some cases the add in may completely fail and no information is displayed.

Technologies are described herein for deploying a data only solution package. In particular a custom code package and a data only solution package may be separately created and separately deployed. The custom code package such as an application add in may include functionality for expanding the UI and or UX of an application to display and interact with external data stored in a data cache on a client computer. The data only solution package may include functionality for retrieving populating and or updating the data cache with the external data from external data sources. The custom code package may operate in conjunction with the data only solution package to enable the application to present the external data in context with other data natively provided by the application. By separately creating and separately deploying the custom code package and the data only solution package the lifecycles of the custom code package and the data only solution package can be individually controlled.

In an illustrative implementation of the technologies the data only solution package is received at a client computer. A data specification is installed at the client computer through the data only solution package. The data specification may include location information specifying a location of an external system storing external data. A data subscription may also be installed at the client computer through the data only solution package. The data subscription may include queries for retrieving the external data from the external system and frequency information specifying a frequency at which to retrieve the external data. The external data is retrieved from the external system utilizing the location information the queries and the frequency information. A data cache at the client computer is populated with the external data.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended that this Summary be used to limit the scope of the claimed subject matter. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.

The following detailed description is directed to technologies for deploying a data only solution package. While the subject matter described herein is presented in the general context of program modules that execute in conjunction with the execution of an operating system and application programs on a computer system those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the subject matter described herein may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like.

In the following detailed description references are made to the accompanying drawings that form a part hereof and which are shown by way of illustration specific embodiments or examples. Referring now to the drawings in which like numerals represent like elements through the several figures a computing system and methodology for deploying a data only solution package to a client computer will be described. shows an illustrative network architecture including a server computer a client computer and an external system communicatively coupled via a network . The server computer may be configured to include a package store a web server and a deployment module . The package store may be configured to store a custom code package and a data only solution package . The web server may be configured to provide a package listing website . Some other embodiments may not implement the deployment module . In such cases the web server may provide access to a file or a collection of files exposed by the web server .

The client computer may be configured to include a web browser an application a runtime module a data cache a solution deployment application programming interface API and an installation module . The application may be configured to execute custom code such as an add in for the application . The runtime module may be configured to execute a data specification and a data subscription . The data cache is configured to store external data . The external system may be configured to include an interface and a storage device . The storage device may be configured to store the external data as well.

In some embodiments the server computer is a package library configured to store multiple developer created packages. For example a developer may separately create the custom code package and the data only solution package and publish the custom code package and the data only solution package to the server computer . The custom code package may be configured to cause the installation module to install the custom code on the client computer . When the custom code is installed the custom code may be configured to customize the UI and or UX of the application as well as present the external data according to applicable business logic. The developer may create the custom code package using an integrated development environment IDE such as VISUAL STUDIO from MICROSOFT CORPORATION.

The data only solution package may be configured to cause the installation module to install the data specification and the data subscription utilized by the runtime module . The data specification may contain location information specifying the location of the external system and data structure information specifying the data structures of the external data . For example the data structure information may describe the type of data included in the external data as well as techniques for displaying reading creating updating and or deleting the external data . The data subscription may contain queries for retrieving the external data from the external system and frequency information indicating a frequency at which the external data is retrieved. In some cases the full external data is retrieved. In some other cases only a portion e.g. the delta since the last retrieval of the external data is retrieved.

The package listing website may provide links to the developer created packages such as the custom code package and the data only solution package . Each link provided by the package listing website may correspond to one or more developer created packages. In particular each of the custom code packages and the data only solution packages may correspond to a different link. In this way the lifecycles of the custom code packages and the data only solution packages can be separately controlled. Further the data only solution packages can be shared between multiple custom code packages. For example if a data only solution package is updated then the updated data only solution package can be deployed alone irrespective of the custom code packages.

A user operating the web browser may access the package listing website via a corresponding uniform resource locator URL . When the user selects one of the links the deployment module may deploy the developer created package corresponding to the selected link. The deployment module may implement any suitable deployment mechanism for deploying the developer created packages to the client computer . In one example the deployment module may implement CLICKONCE technology from MICROSOFT CORPORATION. In another example the deployment module may leverage the Application Cache capabilities of HTML .

The application may be any suitable computer application capable of being adapted to implement the custom code in order to expand the UI and or UX of the application . In some embodiments the application is an office productivity application such as a word processing application a spreadsheet application a personal information management application and the like. The external system may be any suitable external content source such as a LOB system and an enterprise resource planning ERP system.

In an illustrative example the user selects the link corresponding to the custom code package . When the user selects the link corresponding to the custom code package the deployment module may deploy the custom code package to the client computer . For example the deployment module may deploy the custom code package to the installation module . When the deployment module deploys the custom code package to the client computer the custom code package may cause the installation module to install the custom code on the client computer .

In some embodiments the custom code may contain a dependency to the data only solution package . For example the application may be a spreadsheet application and the custom code may be configured to create graphs based on sales history data stored in the data cache . In this case the custom code may contain a dependency to a data only solution package that is configured to retrieve the sales history data from the appropriate external source and to populate the data cache with the sales history data.

Continuing the illustrative example the user opens the application and enables the custom code . When the user enables the custom code the custom code may transmit an instruction the deployment module to deploy the data only solution package according to the dependency. Upon receiving the instruction the deployment module may deploy the data only solution package to the client computer . For example the deployment module may deploy the data only solution package to the installation module . When the deployment module deploys the data only solution package to the client computer the data only solution package may cause the installation module to install the data specification and the data subscription on the client computer .

The runtime module may utilize the data specification and the data subscriptions to retrieve the external data from the external system and to populate the data cache with the external data retrieved from the external system . In particular as previously described the data specification may include location information specifying the location of the external system and the data subscriptions may include queries for retrieving the external data . Thus for example the runtime module may transmit the queries to the interface in order to retrieve the external data from the external system .

The solution deployment API may be configured to determine the state of the external data retrieved from the external system . In particular a significant amount of time may lapse before the runtime module completely retrieves the external data . The custom code may utilize the solution deployment API to determine the amount of the external data that has been retrieved at a given instance. In some cases the custom code may be able to utilize a portion of the external data even if the external data has not been completely retrieved. However in other cases the custom code may display incorrect information if the external data is not completely available. In such other cases the custom code may only execute when the solution deployment API indicates that the external data has been completely retrieved.

Although some embodiments described herein utilize APIs for deploying a data solution package other embodiments include deploying the data solution package declaratively by having a mechanism to configure or decorate the custom code with metadata or a set of attributes that specify that a specific data package is required. The client run time may understand this attribute and then automatically trigger the deployment of the data solution package in order to enable the code to function properly. The client run time may not allow the code to run until specified data packages have been deployed.

Referring now to additional details will be provided regarding the data only solution package . shows an illustrative implementation of the data only solution package . The data only solution package includes a data only solution package flag a business data connectivity model a data subscription configuration and a solution manifest . In some embodiments the data only solution package flag is set to a first value e.g. true or a second value e.g. false . The first value may indicate that a given package is a data only solution package and the second value may indicate that the given package is not a data only solution package. A package structure may include any number of different flags for identifying the package as a custom code package a data only solution package or the like. In this way the package structure can be shared among multiple kinds of packages. Other techniques for identifying a given package as a data only solution package and distinguishing a data only solution package from other types of packages may be similarly implemented.

The business data connectivity model may be configured to cause the installation module to install the data specification on the client computer . The business data connectivity model may contain metadata describing the location of the external system and the way in which the runtime module can connect to the external system . The data subscription configuration may be configured to cause the installation module to install the data subscription on the client computer . The data subscription configuration may specify the queries for retrieving the external data from the external system and the frequency at which the external data is retrieved. The business data connectivity model and the data subscription configuration may be implemented as extensible markup language XML files or any other suitable encoding scheme. The solution manifest may be an inventory list identifying the files such as the business data connectivity model and the data subscription configuration contained in the data only solution package .

Referring now to additional details will be provided regarding the operation of the installation module the application and the runtime module . In particular is a flow diagram illustrating a method provided herein for deploying a data only solution package such as the data only solution package . It should be appreciated that the logical operations described herein are implemented 1 as a sequence of computer implemented acts or program modules running on a computing system and or 2 as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance and other requirements of the computing system. Accordingly the logical operations described herein are referred to variously as states operations structural devices acts or modules. These operations structural devices acts and modules may be implemented in software in firmware in special purpose digital logic and any combination thereof. It should be appreciated that more or fewer operations may be performed than shown in the figures and described herein. These operations may also be performed in a different order than those described herein.

In a routine begins at operation where the installation module receives the custom code package from the deployment module . The custom code package may cause the installation module to install the custom code on the client computer . In some embodiments the custom code may expand a UI and or UX of the application such that the application can read the external data from the data cache and present the external data through the expanded interface. When the installation module receives the custom code package from the deployment module the routine proceeds to operation .

At operation the installation module installs the custom code through the custom code package . The routine then proceeds to operation where the application receives an instruction to enable the custom code . When a user executes the application the user may expand the UI and or UX of the application by enabling the custom code . For example the application may provide an option for enabling the custom code . In this case the application may receive the instruction to enable the custom code when the user selects the option. When the application receives the instruction to enable the custom code the routine proceeds to operation .

At operation the custom code identifies a dependency to the data only solution package . In particular the custom code may specify that its operation is dependent on the data only solution package . For example the custom code may read the external data from the data cache . As a result the custom code may be dependent on the data only solution package which retrieves the external data from the external system and populates the data cache with the external data . When the custom code identifies the dependency to the data only solution package within the custom code the routine proceeds to operation .

At operation the custom code sends a request for the data only solution package to the deployment module . The routine then proceeds to operation where the installation module receives the data only solution package from the deployment module . For example the deployment module may send the data only solution package to the installation module upon receiving the request for the data only solution package from the custom code . The data only solution package may cause the installation module to install the data specification and the data subscription . When the installation module receives the data only solution package the routine proceeds to operation .

At operation the installation module installs the data specification through the data only solution package . The data specification may include location information specifying the location of the external system storing the external data . The data specification may further include data structure information specifying the data structures of the external data . The data structure information may describe a type of data included in the external data and techniques for displaying reading creating updating and or deleting the external data . When the installation module installs the data specification the routine proceeds to operation .

At operation the installation module installs the data subscription through the data only solution package . The data subscription may include queries for retrieving the external data from the external system and frequency information specifying a frequency at which to retrieve the external data . When the installation module installs the data subscription the routine proceeds to operation .

At operation the runtime module retrieves the external data from the external system based on the location information the queries and the frequency information. In particular the runtime module may access the external system at the location identified by the location information. The runtime module may then retrieve the external data utilizing the queries. For example the runtime module may send the queries to the interface and receive the external data in response to the queries. The runtime module may transmit these queries at a frequency specified by the frequency information. When the runtime module retrieves the external data the routine proceeds to operation .

At operation the runtime module populates the data cache with the external data retrieved from the external system . The custom code may read the external data from the data cache and present the external data utilizing the expanded UI and or UX of the application . In particular the application may present the external data in context with other information natively presented by the application . In some embodiments the custom code may utilize the solution deployment API to determine the amount of the external data retrieved by the runtime module at any given instance. In this way the custom code can proceed with execution or in the alternative delay execution until a sufficient amount of the external data has been retrieved by the runtime module .

Turning now to an example computer architecture diagram showing a computer is illustrated. Examples of the computer may include the server computer the client computer and the external system . The computer may include a processing unit CPU a system memory and a system bus that couples the memory to the CPU . The computer may further include a mass storage device for storing one or more program modules and a database . Examples of the program modules may include the application the runtime module and the installation module . The mass storage device may be connected to the CPU through a mass storage controller not shown connected to the bus . The mass storage device and its associated computer storage media may provide non volatile storage for the computer . Although the description of computer storage media contained herein refers to a mass storage device such as a hard disk or CD ROM drive it should be appreciated by those skilled in the art that computer storage media can be any available computer storage media that can be accessed by the computer .

By way of example and not limitation computer storage media may include volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer storage instructions data structures program modules or other data. For example computer storage media includes but is not limited to RAM ROM EPROM EEPROM flash memory or other solid state memory technology CD ROM digital versatile disks DVD HD DVD BLU RAY or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer .

According to various embodiments the computer may operate in a networked environment using logical connections to remote computers through a network such as the network . The computer may connect to the network through a network interface unit connected to the bus . It should be appreciated that the network interface unit may also be utilized to connect to other types of networks and remote computer systems. The computer may also include an input output controller for receiving and processing input from a number of input devices not shown including a keyboard a mouse a microphone and a game controller. Similarly the input output controller may provide output to a display or other type of output device not shown .

The bus may enable the processing unit to read code and or data to from the mass storage device or other computer storage media. The computer storage media may represent apparatus in the form of storage elements that are implemented using any suitable technology including but not limited to semiconductors magnetic materials optics or the like. The computer storage media may represent memory components whether characterized as RAM ROM flash or other types of technology. The computer storage media may also represent secondary storage whether implemented as hard drives or otherwise. Hard drive implementations may be characterized as solid state or may include rotating media storing magnetically encoded information.

The program modules may include software instructions that when loaded into the processing unit and executed cause the computer to deploy a data only solution package. The program modules may also provide various tools or techniques by which the computer may participate within the overall systems or operating environments using the components flows and data structures discussed throughout this description. For example the program modules may implement interfaces for deploying a data only solution package.

In general the program modules may when loaded into the processing unit and executed transform the processing unit and the overall computer from a general purpose computing system into a special purpose computing system customized to deploy a data only solution package. The processing unit may be constructed from any number of transistors or other discrete circuit elements which may individually or collectively assume any number of states. More specifically the processing unit may operate as a finite state machine in response to executable instructions contained within the program modules . These computer executable instructions may transform the processing unit by specifying how the processing unit transitions between states thereby transforming the transistors or other discrete hardware elements constituting the processing unit .

Encoding the program modules may also transform the physical structure of the computer storage media. The specific transformation of physical structure may depend on various factors in different implementations of this description. Examples of such factors may include but are not limited to the technology used to implement the computer storage media whether the computer storage media are characterized as primary or secondary storage and the like. For example if the computer storage media are implemented as semiconductor based memory the program modules may transform the physical state of the semiconductor memory when the software is encoded therein. For example the program modules may transform the state of transistors capacitors or other discrete circuit elements constituting the semiconductor memory.

As another example the computer storage media may be implemented using magnetic or optical technology. In such implementations the program modules may transform the physical state of magnetic or optical media when the software is encoded therein. These transformations may include altering the magnetic characteristics of particular locations within given magnetic media. These transformations may also include altering the physical features or characteristics of particular locations within given optical media to change the optical characteristics of those locations. Other transformations of physical media are possible without departing from the scope of the present description with the foregoing examples provided only to facilitate this discussion.

Based on the foregoing it should be appreciated that technologies for deploying a data only solution package are presented herein. Although the subject matter presented herein has been described in language specific to computer structural features methodological acts and computer readable media it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features acts or media described herein. Rather the specific features acts and mediums are disclosed as example forms of implementing the claims.

The subject matter described above is provided by way of illustration only and should not be construed as limiting. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described and without departing from the true spirit and scope of the present invention which is set forth in the following claims.

