---

title: Selectively combining commands for a system having non-volatile memory
abstract: Systems and methods are disclosed for selectively combining commands for a system having non-volatile memory (“NVM”). In some embodiments, a command dispatcher of a system can receive multiple commands to access a NVM for a period of time. After receiving the multiple commands, the command dispatcher can determine a set of commands that are naturally combinable. In some embodiments, the command dispatcher can select commands that are fairly distributed across different chip enables (“CEs”) and/or buses. After selecting the set of commands, the command dispatcher can combine the set of commands into a multi-access command. Finally, the command dispatcher can dispatch the multi-access command to the NVM.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08595414&OS=08595414&RS=08595414
owner: Apple Inc.
number: 08595414
owner_city: Cupertino
owner_country: US
publication_date: 20100930
---
This invention can relate to systems and methods for selectively combining commands for a system having a non volatile memory.

NAND flash memory as well as other types of non volatile memories NVMs are commonly used for mass storage. For example consumer electronics such as portable media players often include flash memory to store music videos and other media.

A system may often dispatch multiple small commands e.g. program erase and or read commands to access the NVM. Each command dispatch can be associated with various communication latencies. Moreover each command dispatch can also block other commands for being acted upon. Thus the total amount of time for dispatching commands can become significant which can consequently increase the total power consumption of the system and decrease input output I O performance.

Systems and methods are disclosed for selectively combining commands for a system having non volatile memory NVM . In particular a system can combine a set of naturally combinable commands into a multi access command where the set of commands can be selected based on knowledge of the mapping between the commands to various portions of the NVM e.g. chip enables CEs and or buses . The multi access command can then be dispatched to a NVM. Because only a single command is dispatched instead of a series of commands this approach can reduce both input output I O overhead and power consumption of the system and improve overall system performance.

Systems and methods for selectively combining commands for a system having non volatile memory NVM are provided. In particular a system can combine a set of small sequential commands into a multi access command which can then be dispatched to a NVM. In some embodiments the system can select the set of commands based on knowledge of the mapping between the commands and various portions of the NVM e.g. chip enables CEs and or buses .

For example a command dispatcher of a system can receive commands to access a NVM for a period of time. After receiving the commands the command dispatcher can select a set of commands that are naturally combinable e.g. the set of commands may share one or more common characteristics . The set of command may otherwise be logically unrelated to each other.

For example the command dispatcher can select commands that are both small and sequential. As another example the command dispatcher can select commands that are the same type of command e.g. read program or erase commands . As yet another example the command dispatcher can select commands based on an input output I O priority associated with each command.

In some embodiments the command dispatcher may select or adjust the set of commands based on one or more expected performance characteristics associated with each command e.g. based on a mapping between each command and at least one portion of the NVM . For example the command dispatcher can select commands that are fairly distributed across different portions of the NVM e.g. different chip enables CEs and or buses . That is the command dispatcher may select only a single command from a CE and or a bus such that no CE or bus is double stacked. As used herein double stacked may refer to a scenario where two or more commands are selected for a single portion of the NVM. In such a scenario the command dispatcher may select to defer one or more commands that collide with commands already selected for the set of commands e.g. commands corresponding to the same CEs and or buses . In addition the command dispatcher may also select to leave some CEs and or buses idle.

In other embodiments in order to promptly service paging requests and file system metadata updates the command dispatcher can determine a size of each command of the set of commands and adjust the size of the set of commands based on the determined size.

After selecting and or adjusting the set of commands the command dispatcher can combine the set of commands into a multi access command and subsequently dispatch the multi access command to the NVM. In some embodiments the command dispatcher can dispatch the multi access command to one or more NVM dies of the NVM. In other embodiments the command dispatcher can dispatch the multi access command to a NVM controller of the NVM. The NVM controller can then separate the multi access command into individual commands and perform associated access functions.

Electronic device can include system on a chip SoC and non volatile memory NVM . Non volatile memory can include a NAND flash memory based on floating gate or charge trapping technology NOR flash memory erasable programmable read only memory EPROM electrically erasable programmable read only memory EEPROM Ferroelectric RAM FRAM magnetoresistive RAM MRAM or any combination thereof.

NVM can be organized into blocks which is the smallest erasable unit and further organized into pages which can be the smallest unit that can be programmed or read. In some embodiments NVM can include multiple integrated circuits e.g. one or more dies where each integrated circuit may have multiple blocks. The blocks from corresponding integrated circuits e.g. blocks having the same position or block number may form super blocks . Each memory location e.g. page or block of NVM can be referenced using a physical address e.g. a physical page address or physical block address .

System on a chip can include SoC control circuitry memory NVM interface and command dispatcher . SoC control circuitry can control the general operations and functions of SoC and the other components of SoC or device . For example responsive to user inputs and or the instructions of an application or operating system SoC control circuitry can issue read or write commands to NVM interface to obtain data from or store data in NVM . For clarity data that SoC control circuitry may request for storage or retrieval may be referred to as user data even though the data may not be directly associated with a user or user application. Rather the user data can be any suitable sequence of digital information generated or obtained by SoC control circuitry e.g. via an application or operating system .

SoC control circuitry can include any combination of hardware software and firmware and any components circuitry or logic operative to drive the functionality of electronic device . For example SoC control circuitry can include one or more processors that operate under the control of software firmware stored in NVM or memory .

Memory can include any suitable type of volatile or non volatile memory such as random access memory e.g. static RAM sRAM dynamic random access memory DRAM synchronous dynamic random access memory SDRAM double data rate DDR RAM cache memory read only memory ROM or any combination thereof. Memory can include a data source that can temporarily store user data for programming into or reading from non volatile memory . In some embodiments memory may act as the main memory for any processors implemented as part of SoC control circuitry .

NVM interface may include any suitable combination of hardware software and or firmware configured to act as an interface or driver between SoC control circuitry and NVM . For any software modules included in NVM interface corresponding program code may be stored in NVM or memory .

NVM interface can perform a variety of functions that allow SoC control circuitry to access NVM and to manage the memory locations e.g. pages blocks super blocks integrated circuits of NVM and the data stored therein e.g. user data . For example NVM interface can interpret the read or write commands from SoC control circuitry perform wear leveling and generate read and program instructions compatible with the bus protocol of NVM .

Command dispatcher can be configured to dispatch one or more commands to NVM . In some embodiments command dispatcher can include a block device driver or wrapper that can be configured to dispatch application programming interface API operations to NVM or a NVM controller of NVM discussed below . In some embodiments command dispatcher can modify one or more parameters of the block device driver or wrapper in order to transfer information to NVM or the NVM controller. For example by modifying the one or more parameters command dispatcher can transfer information associated with commands used to access NVM e.g. read program erase and or multi access commands . Multi access commands will be discussed in more detail in connection with .

Command dispatcher is shown with a dashed line box in to indicate that its function can be implemented in different locations. In some embodiments command dispatcher can be implemented as a software component executed by SoC control circuitry and or NVM interface . In other embodiments command dispatcher can be a stand alone module in SoC .

While SoC control circuitry NVM interface and command dispatcher are shown as separate modules this is intended only to simplify the description of the embodiments of the invention. It should be understood that these modules may share hardware components software components or both. For example SoC control circuitry may execute a software based memory driver for NVM interface .

In some embodiments electronic device can include a target device such as a flash memory drive or Secure Digital SD card that includes NVM and some or all portions of NVM interface e.g. a translation layer discussed below . In these embodiments SoC or SoC control circuitry may act as the host controller for the target device. For example as the host controller SoC can issue read and write requests to the target device.

Electronic device can include file system NVM driver NVM bus controller and NVM . In some embodiments file system and NVM driver may be software or firmware modules and NVM bus controller and NVM may be hardware modules. Accordingly in these embodiments NVM driver may represent the software or firmware aspect of NVM interface and NVM bus controller may represent the hardware aspect of NVM interface .

File system can include any suitable type of file system such as a File Allocation Table FAT file system or a Hierarchical File System Plus HFS and may be part of the operating system of electronic device e.g. part of SoC control circuitry of . In some embodiments file system may include a flash file system which provides a logical to physical mapping of pages. In these embodiments file system may perform some or all of the functionalities of NVM driver discussed below and therefore file system and NVM driver may or may not be separate modules.

File system may manage file and folder structures for the application and operating system. File system may operate under the control of an application or operating system running on electronic device and may provide write and read commands to NVM driver when the application or operating system requests that information be read from or stored in NVM . Along with each read or write command file system can provide a logical address to indicate where the user data should be read from or written to such as a logical page address or a logical block address with a page offset.

File system may provide read and write requests to NVM driver that are not directly compatible with NVM . For example the logical addresses may use conventions or protocols typical of hard drive based systems. A hard drive based system unlike flash memory can overwrite a memory location without first performing a block erase. Moreover hard drives may not need wear leveling to increase the lifespan of the device. Therefore NVM interface can perform any functions that are memory specific vendor specific or both to handle file system requests and perform other management functions in a manner suitable for NVM .

NVM driver can include translation layer . In some embodiments translation layer may be or include a flash translation layer FTL . On a write command translation layer can map the provided logical address to a free erased physical location on NVM . On a read command translation layer can use the provided logical address to determine the physical address at which the requested data is stored. Because each NVM may have a different layout depending on the size or vendor of the NVM this mapping operation may be memory and or vendor specific. Translation layer can perform any other suitable functions in addition to logical to physical address mapping. For example translation layer can perform any of the other functions that may be typical of flash translation layers such as garbage collection and wear leveling.

NVM driver may interface with NVM bus controller to complete NVM access commands e.g. program read and erase commands . Bus controller may act as the hardware interface to NVM and can communicate with NVM using the bus protocol data rate and other specifications of NVM .

NVM driver can include command dispatcher which can be the same as or similar to command dispatcher . Upon receiving an access request from file system command dispatcher can direct NVM bus controller to dispatch a command e.g. an API operation to NVM . In some embodiments command dispatcher may use translation layer to obtain the physical addresses of one or more memory locations of NVM . Persons skilled in the art will appreciate that although command dispatcher is shown as being included in NVM driver command dispatcher can be implemented in any suitable location of electronic device . For example command dispatcher can be a stand alone module in NVM interface .

NVM interface may manage NVM based on memory management data sometimes referred to herein as metadata . The metadata may be generated by NVM driver or may be generated by a module operating under the control of NVM driver . For example metadata can include any information used for managing the mapping between logical and physical addresses bad block management wear leveling ECC data used for detecting or correcting data errors or any combination thereof. The metadata may include data provided by file system along with the user data such as a logical address. Thus in general metadata may refer to any information about or relating to user data or used generally to manage the operation and memory locations of a non volatile memory.

NVM interface may be configured to store metadata in NVM . In some embodiments NVM interface may store metadata associated with user data at the same memory location e.g. page in which the user data is stored. For example NVM interface may store user data the associated logical address and ECC data for the user data at one or more memory locations of NVM . NVM interface may also store other types of metadata about the user data in the same memory location.

NVM interface may store the logical address so that on power up of NVM or during operation of NVM electronic device can determine what data resides at that location. In particular because file system may reference the user data according to its logical address and not its physical address NVM interface may store the user data and logical address together to maintain their association. This way even if a separate table maintaining the physical to logical mapping in NVM becomes outdated NVM interface may still determine the proper mapping at power up or reboot of electronic device for example.

SoC can include or operate in conjunction with any other components or circuitry capable of controlling various operations of system e.g. application specific integrated circuits ASICs . In a processor based implementation SoC can execute firmware and software programs loaded into a memory implemented on the host e.g. memory of .

SoC can perform any of the functions of SoC of . For example SoC can execute NVM driver which may provide vendor specific and or technology specific instructions that enable SoC to perform various memory management and access functions for non volatile memory package .

In order to provide access to memory locations of non volatile memory package SoC can execute command dispatcher which may be configured to dispatch any suitable command to NVM controller . Command dispatcher may be the same as or similar to command dispatcher or command dispatcher . Accordingly command dispatcher is shown with a dashed line box in to indicate that its function can be implemented in different locations. For example command dispatcher can be implemented as a software component executed by SoC and or a NVM interface e.g. NVM interface of or NVM interface of . In some embodiments command dispatcher can be a module that is included in NVM driver e.g. as shown in . In other embodiments command dispatcher can be a stand alone module in SoC . The various commands that may be dispatched by command dispatcher are discussed in more detail below.

NVM package may be a managed NVM package. As used herein a managed NVM may refer to a memory device or package that includes a controller e.g. NVM controller configured to perform at least one memory management function for a non volatile memory. For example as shown in NVM controller can perform memory management functions for any suitable number of NVM dies .

NVM controller may include any suitable combination of processors microprocessors or hardware based components e.g. ASICs and may include the same components as or different components from SoC . NVM controller may share the responsibility of managing and or accessing the physical memory locations of NVM dies with NVM driver . Alternatively NVM controller may perform substantially all of the management and access functions for NVM dies .

Memory management and access functions that may be performed by NVM controller and or SoC for NVM dies can include issuing read write or erase instructions and performing wear leveling bad block management garbage collection logical to physical address mapping SLC or MLC programming decisions applying error correction or detection and data queuing to set up program operations.

In some embodiments NVM controller can execute command dispatcher which can be configured to dispatch any suitable data to SoC . Command dispatcher can also be configured to reorder commands that have been dispatched by SoC or command dispatcher . Thus in some implementations command dispatcher can work in conjunction with command dispatcher in order to transmit commands between SoC and NVM controller . Although command dispatcher and NVM controller are shown as separate modules persons skilled in the art will appreciate that the functionalities of command dispatcher can instead be implemented directly in NVM controller .

NVM dies may be used to store information that needs to be retained when system is powered down. As used herein and depending on context a NVM can refer to one or more of NVM dies in which data can be stored a NVM controller or a NVM package that includes the NVM controller and the NVM dies.

Referring now to a graphical view of illustrative command dispatcher is shown. Command dispatcher can be configured in accordance with a conventional system.

Command dispatcher of a host may receive commands from a file system e.g. file system of to access one or more memory locations in a NVM e.g. NVM of NVM of or NVM of . For example after receiving command e.g. a read program or erase command to access one or more of NVM dies command dispatcher may dispatch command to the NVM as dispatched command . For instance command dispatcher or a NVM driver e.g. NVM driver of may direct a bus controller e.g. NVM bus controller of to dispatch command to the NVM. In some cases dispatched command can be in the form of an application programming interface API operation. An API can be any suitable interface that can allow a software program or module to interact with other software.

For example if command is a read command command dispatcher can dispatch an API operation with the following format READ LBA COUNT BUFFER 1 where LBA can correspond to a logical block address associated with the API operation COUNT can correspond to a counter associated with the API operation and BUFFER can correspond to a data structure used to temporarily store data obtained from one or more memory locations of the NVM. In some embodiments after the API operation has been dispatched to the NVM a NVM controller e.g. NVM controller of can use the LBA to determine the physical address at which the requested data is stored.

Referring now to illustrative timing diagram is shown for dispatching three commands and to a NVM in a conventional system. As discussed previously each dispatched command can be in the format of an API operation and can be associated with a LBA a COUNT and a BUFFER. For example each dispatched command can have a format that is the same as or similar to the format of dispatched command .

Each dispatched command may be associated with various communication latencies or input output I O overhead. For example each dispatched command can be associated with an execution latency not shown in while the command is being sent to an I O processor and transfer latency while the command is being transferred to the NVM over a bus. In addition once the dispatched command reaches the NVM setup latencies may be introduced as a NVM controller e.g. NVM controller of performs physical NAND setup. While the NVM controller is performing the NAND setup the NVM may remain busy such that a command dispatcher of a host is unable to send any additional commands. In the example shown in for instance each dispatched command can have a setup latency that corresponds to a time period equal to the difference between tand t tand t and tand t respectively.

After the physical NAND setup has completed and the command has been executed by the NVM controller the NVM controller may transfer data or any other suitable information back to the command dispatcher over a bus. The latencies associated with this bus transfer may be represented by transfer latency .

Consequently after dispatching a command to the NVM the command dispatcher of a host generally needs to wait for a period of time before dispatching another command. For example after dispatching command the command dispatcher needs to wait for a time period equal to the difference between tand tbefore the dispatcher is able to dispatch command . Similarly after dispatching command the command dispatcher needs to wait for a time period equal to the difference between tand tbefore the dispatcher is able to dispatch command .

Over time these communication latencies can accumulate to a point where the total amount of time for the transmission of commands becomes significant. In the example shown in for instance the dispatch of commands can be associated with overall latency e.g. corresponding to a time period equal to the difference between tand t . The significant amount of time required for dispatching commands can consequently increase the total power consumption of the system and reduce I O performance. This may in turn reduce system interactivity and other productivity measurements.

Accordingly a command dispatcher of a system or a host can be configured to combine a set of commands into a single multi access command. In some embodiments the command dispatcher can select the set of commands based on knowledge of the mapping between the sequential commands and various portions of the NVM e.g. CEs and or buses . Moreover the command dispatcher can further be configured to dispatch the multi access command to the NVM. Because only a single command is dispatched instead of a series of commands this approach can reduce both I O overhead and power consumption of the system. Additionally this approach may take advantage of parallelism in the NVM that would be left unused for a single small command dispatch.

Referring now to a graphical view of an illustrative command dispatcher is shown. Command dispatcher can be the same as or substantially similar to command dispatcher of command dispatcher of or command dispatcher of .

Command dispatcher may receive multiple commands to access one or more memory locations of a NVM for a period of time. In some cases command dispatcher can save the multiple commands in a command queue.

After receiving the multiple commands command dispatcher can select a set of commands that are naturally combinable but are otherwise logically unrelated to each other. In some embodiments command dispatcher can select set of commands based at least in part on a common characteristic of commands . For example command dispatcher can select commands that are both small and sequential.

As another example command dispatcher can select commands that are the same type of command e.g. read program or erase commands . As a result set of commands may include only read program or erase commands. Thus if during a particular period of time command dispatcher receives five read commands followed by two program commands and five more read commands command dispatcher can determine that the ten read commands are the same type of command and therefore are naturally combinable.

In some embodiments command dispatcher can select set of commands based on an I O priority associated with each command. For example command dispatcher can first rank the multiple commands based on associated I O priorities. Then command dispatcher can select set of commands based at least in part on a rank associated with each command of set of commands . For example set of commands can include those commands that have the highest or lowest I O priorities. Persons skilled in the art will appreciate that this is merely an illustrative example and command dispatcher can use any suitable criteria to rank and select set of commands .

After determining set of commands command dispatcher can combine commands into multi access command . In some embodiments command dispatcher can form multi access command by combining a set of logical addresses a set of counters and a set of buffers associated with set of commands into an array of logical addresses an array of counters and an array of buffers respectively. For instance each of array of buffers may be used to cache data associated with a particular command of set of commands .

In some embodiments in addition to forming multi access command command dispatcher can remove each individual command included in set of commands from the command queue. Command dispatcher can then save multi access command in the command queue in order to dispatch the command. In some embodiments command dispatcher can save multi access command at the end of the command queue. As a result multi access command can be dispatched only after commands that are already in the command queue have been dispatched. In other embodiments command dispatcher can save multi access command at the beginning of the command queue. As a result multi access command can be dispatched prior to dispatching any other command in the command queue.

At an appropriate time command dispatcher can dispatch multi access command to the NVM. For instance command dispatcher or a NVM driver e.g. NVM driver of may direct a bus controller e.g. NVM bus controller of to dispatch multi access command to the NVM.

In some embodiments command dispatcher can dispatch multi access command to the NVM in the form of an API operation. For example if multi access command has been combined from a set of read commands command dispatcher can dispatch multi access command in the form of an API operation with the following format MULTI READ LBA COUNT BUFFER 2 where LBA can correspond to an array of logical addresses associated with the API operation COUNT can correspond to an array of counters associated with the API operation and BUFFER can correspond to an array of buffers used to store data obtained from one or more memory locations of the NVM. In some embodiments command dispatcher can dispatch multi access command to one or more NVM dies e.g. NVM dies of .

In other embodiments command dispatcher can dispatch multi access command to a NVM controller e.g. NVM controller of . Upon receiving multi access command the NVM controller can separate multi access command into its component set of commands. In some embodiments a command dispatcher of a NVM e.g. command dispatcher of can reorder the set of commands such that the NVM controller can process the commands efficiently. In addition the NVM controller can translate the array of logical addresses associated with the set of commands e.g. LBA into respective physical addresses.

Based on the set of commands the NVM controller can perform access functions on memory locations corresponding to the respective physical addresses. For instance if the set of commands includes read commands the NVM controller can read data stored at memory locations corresponding to the physical addresses. Similarly if the set of commands includes writes commands the NVM controller can program data to memory locations corresponding to the physical addresses. Persons skilled in the art will appreciate that any other types of commands or any combination of commands can be executed by the NVM controller.

In some embodiments after the set of commands have been executed a command dispatcher of the NVM e.g. command dispatcher of can combine information obtained from multiple memory locations into a single piece of data for dispatch to the host. Similar to command dispatcher the command dispatcher of the NVM can use any suitable approach to form the single piece of data.

Referring now to illustrative timing diagram is shown for multi access command . Multi access command can be associated with array of LBAs array of counters and array of buffers . Thus multi access command can have a format that is the same as or similar to the format of multi access command .

By combining multiple small commands into a single multi access command a command dispatcher of a host e.g. command dispatcher of command dispatcher of command dispatcher of can reduce both the overall amount of time required for transmitting commands and the overall power consumption of the system. Moreover as mentioned previously a command dispatcher of a NVM e.g. command dispatcher of can also reduce the overall amount of time by forming a single piece of data for transmission back to the host.

Thus although multi access command may take longer for a NVM controller to process the overall latency associated with the dispatch of multi access command e.g. overall latency corresponding to a time period equal to the difference between tand t can still be shorter than overall latency associated with separately dispatching each of commands . That is although setup latency associated with physical NAND setup e.g. corresponding to a time period equal to the difference between tand t may be longer than each of setup latencies overall latency can still be shorter because command is associated with only one set of transfer latencies and while commands are associated with three sets of transfer latencies and .

In some embodiments in addition to or instead of selecting commands that are naturally combinable a command dispatcher of a host can improve system performance by selecting commands based on expected performance characteristics associated with each command e.g. based on a mapping between each command with at least one portion of the NVM . As mentioned above a non volatile memory e.g. NVM of NVM of or NVM of can be organized into dies blocks pages super blocks and the like.

For example shows a schematic layout of NVM . is merely meant to illustrate the organizational layout of NVM and does not indicate an actual physical layout of the non volatile memory. For example although die is illustrated as being next to die in this is merely for illustrating the functional relationship of these dies and in the actual physical layout of NVM these dies may or may not be located near one another. Moreover although a certain number of dies blocks and pages are shown in this is merely for the purpose of illustration and one skilled in the art could appreciate that NVM could include any suitable number of dies blocks and pages. As one illustration each die of NVM can include 4096 blocks each block may include 64 128 or 192 pages based on whether the block is an SLC block 2 bit MLC block or 3 bit MLC block and each page can include 512 bytes.

As illustrated by NVM can include one or more dies i.e. integrated circuits such as die die die and die . Each die may be associated with different chip enables CEs . In the example shown in for instance CE can be used to access die CE can be used to access die CE can be used to access die and so forth. A command that is received to access NVM may thus map to one or more CEs. Persons skilled in the art will appreciate that this is merely an illustrative example and that the actual configuration for a particular NVM is vendor specific. In particular in some NVMs two dies may be associated with a single CE.

Each logical CE generally corresponds to one bus and can therefore form a portion of a bus. Correspondingly each access command that is received to access NVM may also map to one or more buses.

Each die of NVM may be organized into one or more blocks . For example dies is illustrated as each being organized into blocks .

Each block of the dies may be organized into one or more pages. For example block of each of dies is illustrated as being organized into pages .

Each page of NVM can include any suitable information. For example the pages can include user data metadata or both. In some embodiments metadata such as ECC data can be included in the pages to provide for error detection and or correction of the information stored in NVM .

NVM can also include one or more super blocks that include one block from each die that has the same position or block number in the die. For example super block of NVM can include block of each of dies . Similarly super block of NVM can include block of each of dies super block of NVM can include block of each of dies and so forth.

Super blocks can be formed by virtually linking or striping together one or more blocks. Blocks need not be in the same row of each die to be virtually linked as a super block. In fact blocks may be chosen randomly from two or more dies to form a super block. In some embodiments a super block can include only one block. Super blocks provide operational parallelism thereby enabling programming reading and erase operations to be performed on blocks located in different dies in parallel.

In addition pages from two or more dies may be virtually linked together to form super pages or stripes . For instance stripe can include page from block of each of dies . Similarly stripe can include page from block of each of dies . A translation layer e.g. translation layer of being implemented in an NVM interface may keep track of super blocks or stripes.

A command dispatcher of a host e.g. command dispatcher of command dispatcher of or command dispatcher of can improve system performance by adjusting the commands used to form a multi access command. In some embodiments based on a mapping between commands and various portions of the NVM the command dispatcher can combine a set of commands such that the set of commands can be fairly distributed across different portions of the NVM e.g. different CEs and or buses . As a result the command dispatcher can avoid idling certain CEs and or buses and overloading other CEs and or buses.

In particular the command dispatcher may select only a single command from any CE and or bus such that no CE or bus is double stacked. As used herein double stacked may refer to a scenario where two or more commands are selected for a single portion of the NVM. The command dispatcher may therefore select to defer one or more commands that collide with commands already selected for the set of commands e.g. commands corresponding to the same CEs and or buses . In addition the command dispatcher may select to leave some CEs and or buses idle.

The command dispatcher can use any suitable approach to fairly distribute the set of commands across different CEs and or buses. For example the command dispatcher can first determine the physical addresses associated with multiple commands received from a file system. For example a translation layer e.g. translation layer of of the system can be used to translate a set of logical addresses associated with the multiple commands into a set of physical addresses. Based on the set of physical addresses the command dispatcher can determine the CE and or bus associated with each command.

The command dispatcher can then combine a set of commands into a multi access command where the set of commands can be fairly distributed across different CEs and or buses. In the example shown in for instance the multi access command can include a combination of four read commands where each read command maps to one or more CEs . Thus in one embodiment the multi access command can be associated with stripe . Because of the fairly even distribution of the set of commands the command dispatcher can dispatch at least a portion of the multi access command to different dies of the NVM e.g. dies of NVM .

Persons skilled in the art will appreciate that this is merely an illustrative example. Thus the command dispatcher can use any suitable combination of commands where the commands can be generally distributed across different CEs and or buses e.g. one or more commands for each CE and or bus . The multi access command can therefore be associated with any suitable number of stripes e.g. stripes and .

In other embodiments to promptly service paging requests and file system metadata updates the command dispatcher can determine a size of each command of the set of commands and adjust the size of the set of commands based on the determined size. For example if one or more commands include a large amount of data the command dispatcher can select to decrease the number of commands used to form the multi access command. Similarly if the set of commands include mostly small commands the command dispatcher can select to increase the number of commands used to form the multi access command. This can allow the command dispatcher to optimize the transmission of the multi access command which can provide for further reductions in communication latencies.

For example in one embodiment the command dispatcher can calculate an average command size of the set of commands. The command dispatcher can then determine if the calculated average is above a pre determined threshold. In response to determining that the calculated average is above the pre determined threshold the command dispatcher can exclude at least one command from the set of commands. Alternatively in response to determining that the calculated average is below the pre determined threshold the command dispatcher can add at least one command to the set of commands. The commands that are excluded or added can be selected based on any suitable criteria such as for example the type of commands I O priorities a fairly even distribution across different CEs and or buses and or any combination thereof. In some embodiments the command dispatcher can exclude or add commands in order to avoid I O starvation.

Persons skilled in the art will appreciate that this is merely an illustrative example and that the command dispatcher can use any suitable approach to adjust the size of the set of commands. Persons skilled in the art will further appreciate that any suitable combination of criteria can be used to select and or adjust the set of commands used to form the multi access command.

Referring now to a flowchart of illustrative process is shown for selectively combining commands for a non volatile memory. The steps of process may be executed by a command dispatcher for any suitable electronic device or system such as by command dispatcher of electronic device command dispatcher of electronic device or command dispatcher of system .

Process may begin at step and at step the command dispatcher can receive multiple commands to access a NVM e.g. NVM of NVM of NVM of or NVM of for a period of time.

At step the command dispatcher can select a set of commands e.g. set of commands of that are naturally combinable e.g. commands that share one or more common characteristics . For example the command dispatcher may select commands that are the same type of command e.g. read program or erase commands .

As another example the command dispatcher can select the set of commands based on an I O priority associated with each command. For example the command dispatcher can first rank the multiple commands based on associated I O priorities. The set of commands can then be selected based at least in part on a rank associated with each command e.g. the set of commands can include commands that have the highest or lowest priorities .

Continuing to step the command dispatcher can adjust the set of commands based on one or more expected performance characteristics associated with each command of the set of commands. In some embodiments based on a mapping of commands to various portions of the NVM e.g. CEs and or buses the command dispatcher can adjust the set of commands such that the commands can be fairly distributed across the different portions. For example the command dispatcher can determine the physical addresses associated with the multiple commands. For instance a translation layer e.g. translation layer of of the system can be used to translate a set of logical addresses associated with the multiple commands into a set of physical addresses. Based on the set of physical addresses the command dispatcher can determine a portion of the NVM e.g. a CE and or bus that maps to each command. The command dispatcher can then combine or adjust the set of commands by adding and or removing commands until the set of commands is fairly distributed across the different portions.

In other embodiments the command dispatcher can determine a size of each command of the set of commands. Based on the determined size the command dispatcher can adjust the size of the set of commands. For example the command dispatcher can calculate an average command size of the set of commands. The command dispatcher can then determine if the calculated average is above a pre determined threshold. In response to determining that the calculated average is above the pre determined threshold the command dispatcher can exclude at least one command from the set of commands. Alternatively in response to determining that the calculated average is below the pre determined threshold the command dispatcher can add at least one command to the set of commands.

At step the command dispatcher can combine the set of commands into a multi access command e.g. multi access command of . For example the command dispatcher can combine a set of logical addresses a set of counters and a set of buffers associated with the set of commands.

Then at step the command dispatcher can dispatch the multi access command to the NVM. In some embodiments the command dispatcher can dispatch the multi access command to one or more NVM dies e.g. NVM dies of of the NVM. In other embodiments the command dispatcher can dispatch the multi access command to a NVM controller e.g. NVM controller of of the NVM. The NVM controller can then separate the multi access command into individual commands and perform associated access functions. Process may then end at step .

It should be understood that process of is merely illustrative. Any of the steps may be removed modified or combined and any additional steps may be added without departing from the scope of the invention.

The described embodiments of the invention are presented for the purpose of illustration and not of limitation.

