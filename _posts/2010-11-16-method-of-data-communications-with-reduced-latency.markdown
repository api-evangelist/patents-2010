---

title: Method of data communications with reduced latency
abstract: Data communications with reduced latency, including: writing, by a producer, a descriptor and message data into at least two descriptor slots of a descriptor buffer, the descriptor buffer comprising allocated computer memory segmented into descriptor slots, each descriptor slot having a fixed size, the descriptor buffer having a header pointer that identifies a next descriptor slot to be processed by a DMA controller, the descriptor buffer having a tail pointer that identifies a descriptor slot for entry of a next descriptor in the descriptor buffer; recording, by the producer, in the descriptor a value signifying that message data has been written into descriptor slots; and setting, by the producer, in dependence upon the recorded value, a tail pointer to point to a next open descriptor slot.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08578068&OS=08578068&RS=08578068
owner: International Business Machines Corporation
number: 08578068
owner_city: Armonk
owner_country: US
publication_date: 20101116
---
This invention was made with Government support under Contract No. B544331 awarded by the Department of Energy. The Government has certain rights in this invention.

The field of the invention is data processing or more specifically methods apparatus and products for data communications with reduced latency.

The development of the EDVAC computer system of 1948 is often cited as the beginning of the computer era. Since that time computer systems have evolved into extremely complicated devices. Today s computers are much more sophisticated than early systems such as the EDVAC. Computer systems typically include a combination of hardware and software components application programs operating systems processors buses memory input output devices and so on. As advances in semiconductor processing and computer architecture push the performance of the computer higher and higher more sophisticated computer software has evolved to take advantage of the higher performance of the hardware resulting in computer systems today that are much more powerful than just a few years ago.

Modern parallel computers can include a plurality of nodes that communicate with each other via messages. In order to reduce to reduce the latency of such messages different techniques have been used each of which has various drawbacks. For example a temporary buffer may be allocated to pack source buffers into a single contiguous buffer with messages for transmission. This technique however requires non blocking callback in order to deallocate the temporary buffer. Alternatively multiple source buffers may be packed into shadow buffers. This technique however requires separate buffers resulting in poor memory efficiency and excessive memory allocation.

Methods apparatus and products for data communications with reduced latency including writing by a producer a descriptor and message data into at least two descriptor slots of a descriptor buffer the descriptor buffer comprising allocated computer memory segmented into descriptor slots each descriptor slot having a fixed size the descriptor buffer having a header pointer that identifies a next descriptor slot to be processed by a DMA controller the descriptor buffer having a tail pointer that identifies a descriptor slot for entry of a next descriptor in the descriptor buffer recording by the producer in the descriptor a value signifying that message data has been written into descriptor slots and setting by the producer in dependence upon the recorded value a tail pointer to point to a next open descriptor slot.

The foregoing and other objects features and advantages of the invention will be apparent from the following more particular descriptions of example embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of example embodiments of the invention.

Example methods apparatus and products for data communications with reduced latency in accordance with the present invention are described with reference to the accompanying drawings beginning with . sets forth example apparatus for data communications with reduced latency according to embodiments of the present invention. The apparatus of includes a parallel computer non volatile memory for the computer in the form of a data storage device an output device for the computer in the form of a printer and an input output device for the computer in the form of a computer terminal . The parallel computer in the example of includes a plurality of compute nodes . The compute nodes are coupled for data communications by several independent data communications networks including a high speed Ethernet network a Joint Test Action Group JTAG network a global combining network which is optimized for collective operations using a binary tree network topology and a point to point network which is optimized for point to point operations using a torus network topology. The global combining network is a data communications network that includes data communications links connected to the compute nodes so as to organize the compute nodes as a binary tree. Each data communications network is implemented with data communications links among the compute nodes . The data communications links provide data communications for parallel operations among the compute nodes of the parallel computer .

The compute nodes of the parallel computer are organized into at least one operational group of compute nodes for collective parallel operations on the parallel computer . Each operational group of compute nodes is the set of compute nodes upon which a collective parallel operation executes. Each compute node in the operational group is assigned a unique rank that identifies the particular compute node in the operational group . Collective operations are implemented with data communications among the compute nodes of a operational group. Collective operations are those functions that involve all the compute nodes of an operational group . A collective operation is an operation a message passing computer program instruction that is executed simultaneously that is at approximately the same time by all the compute nodes in an operational group of compute nodes. Such an operational group may include all the compute nodes in a parallel computer or a subset all the compute nodes . Collective operations are often built around point to point operations. A collective operation requires that all processes on all compute nodes within an operational group call the same collective operation with matching arguments. A broadcast is an example of a collective operation for moving data among compute nodes of a operational group. A reduce operation is an example of a collective operation that executes arithmetic or logical functions on data distributed among the compute nodes of a operational group . An operational group may be implemented as for example an MPI communicator. 

 MPI refers to Message Passing Interface a prior art parallel communications library a module of computer program instructions for data communications on parallel computers. Examples of prior art parallel communications libraries that may be improved for performing an allreduce operation using shared memory according to embodiments of the present invention include MPI and the Parallel Virtual Machine PVM library. PVM was developed by the University of Tennessee The Oak Ridge National Laboratory and Emory University. MPI is promulgated by the MPI Forum an open group with representatives from many organizations that define and maintain the MPI standard. MPI at the time of this writing is a de facto standard for communication among compute nodes running a parallel program on a distributed memory parallel computer. This specification sometimes uses MPI terminology for ease of explanation although the use of MPI as such is not a requirement or limitation of the present invention.

Some collective operations have a single originating or receiving process running on a particular compute node in an operational group . For example in a broadcast collective operation the process on the compute node that distributes the data to all the other compute nodes is an originating process. In a gather operation for example the process on the compute node that received all the data from the other compute nodes is a receiving process. The compute node on which such an originating or receiving process runs is referred to as a logical root.

Most collective operations are variations or combinations of four basic operations broadcast gather scatter and reduce. The interfaces for these collective operations are defined in the MPI standards promulgated by the MPI Forum. Algorithms for executing collective operations however are not defined in the MPI standards. In a broadcast operation all processes specify the same root process whose buffer contents will be sent. Processes other than the root specify receive buffers. After the operation all buffers contain the message from the root process.

A scatter operation like the broadcast operation is also a one to many collective operation. In a scatter operation the logical root divides data on the root into segments and distributes a different segment to each compute node in the operational group . In scatter operation all processes typically specify the same receive count. The send arguments are only significant to the root process whose buffer actually contains sendcount N elements of a given datatype where N is the number of processes in the given group of compute nodes. The send buffer is divided and dispersed to all processes including the process on the logical root . Each compute node is assigned a sequential identifier termed a rank. After the operation the root has sent sendcount data elements to each process in increasing rank order. Rank receives the first sendcount data elements from the send buffer. Rank receives the second sendcount data elements from the send buffer and so on.

A gather operation is a many to one collective operation that is a complete reverse of the description of the scatter operation. That is a gather is a many to one collective operation in which elements of a datatype are gathered from the ranked compute nodes into a receive buffer in a root node.

A reduction operation is also a many to one collective operation that includes an arithmetic or logical function performed on two data elements. All processes specify the same count and the same arithmetic or logical function. After the reduction all processes have sent count data elements from computer node send buffers to the root process. In a reduction operation data elements from corresponding send buffer locations are combined pair wise by arithmetic or logical operations to yield a single corresponding element in the root process receive buffer. Application specific reduction operations can be defined at runtime. Parallel communications libraries may support predefined operations. MPI for example provides the following pre defined reduction operations 

In addition to compute nodes the parallel computer includes input output I O nodes coupled to compute nodes through the global combining network . The compute nodes in the parallel computer may be partitioned into processing sets such that each compute node in a processing set is connected for data communications to the same I O node. Each processing set therefore is composed of one I O node and a subset of compute nodes . The ratio between the number of compute nodes to the number of I O nodes in the entire system typically depends on the hardware configuration for the parallel computer . For example in some configurations each processing set may be composed of eight compute nodes and one I O node. In some other configurations each processing set may be composed of sixty four compute nodes and one I O node. Such example are for explanation only however and not for limitation. Each I O node provides I O services between compute nodes of its processing set and a set of I O devices. In the example of the I O nodes are connected for data communications I O devices through local area network LAN implemented using high speed Ethernet.

The parallel computer of also includes a service node coupled to the compute nodes through one of the networks . Service node provides services common to pluralities of compute nodes administering the configuration of compute nodes loading programs into the compute nodes starting program execution on the compute nodes retrieving results of program operations on the computer nodes and so on. Service node runs a service application and communicates with users through a service application interface that runs on computer terminal .

The parallel computer of also includes a DMA controller . The DMA controller is a module of automated computing machinery that includes DMA control logic that is implemented as hardware components and logic networks of the DMA controller in firmware as software operating an embedded controller or as various combinations of software firmware or hardware. The DMA controller of operates a descriptor buffer . The descriptor buffer of is embodied as allocated computer memory segmented into descriptor slots having a fixed size. The descriptor buffer of stores descriptors that are consumed by the DMA controller in carrying out data communications operations. In the example of the descriptor is a data structure describing a data transfer operation to be performed. Each descriptor may include for example the identity of the recipient of a message the identity of the sender of the message the location of message data associated with the message the size of such message data and so on.

In the example of a header pointer identifies a next descriptor slot to be processed by the DMA controller . In the example of a tail pointer identifies a descriptor slot for entry of a next descriptor in the descriptor buffer . Because the header pointer identifies a next descriptor slot to be processed by the DMA controller and the tail pointer identifies a descriptor slot for entry of a next descriptor in the descriptor buffer descriptor slots that are between the header pointer and the tail pointer include descriptors or associated message data that has not been processed by the DMA controller but has been inserted into the descriptor buffer by a producer of data communications operations.

The parallel computer of carries out data communications with reduced latency according to embodiments of the present invention by recording in a descriptor a value signifying that message data has been written into descriptor slots. Such a value may be equal to for example the total number of descriptor slots into which a descriptor and message data associated with the descriptor were written into. In the example of message data represents the payload of the message which is the actual data to be transferred by a particular message. In an embodiment in which message data is written into the descriptor buffer the descriptor buffer therefore contains not only descriptors describing a data transfer operation to be performed but the descriptor buffer also includes the actual data to be transferred by the data transfer operation.

The parallel computer of carries out data communications with reduced latency according to embodiments of the present invention by setting in dependence upon the recorded value a tail pointer to point to a next open descriptor slot in the descriptor buffer . In an example in which the recorded value is equal to the total number of descriptor slots into which a descriptor and message data associated with the descriptor were written into the tail pointer will be moved a number of descriptor slots that is equal to the recorded value. By moving the tail pointer a number of descriptor slots that is equal to the recorded value the tail pointer is moved past the descriptor and message data that were inserted into the descriptor buffer thereby pointing to the next open descriptor slot.

The arrangement of nodes networks and I O devices making up the example apparatus illustrated in are for explanation only not for limitation of the present invention. Apparatus capable of data communications with reduced latency according to embodiments of the present invention may include additional nodes networks devices and architectures not shown in as will occur to those of skill in the art. The parallel computer in the example of includes sixteen compute nodes parallel computers capable of data communications with reduced latency according to embodiments of the present invention sometimes include thousands of compute nodes. The example of is illustrated with only one DMA controller and only one descriptor buffer but readers will recognize that in embodiments many or even all of the compute nodes have a DMA controller and one or more descriptor buffers so that a parallel computer as a whole includes many DMA controllers and many descriptor buffers. In addition to Ethernet and JTAG networks in such data processing systems may support many data communications protocols including for example TCP Transmission Control Protocol IP Internet Protocol and others as will occur to those of skill in the art. Various embodiments of the present invention may be implemented on a variety of hardware platforms in addition to those illustrated in .

Data communications with reduced latency according to embodiments of the present invention is generally implemented on a parallel computer that includes a plurality of compute nodes organized for collective operations through at least one data communications network. In fact such computers may include thousands of such compute nodes. Each compute node is in turn itself a kind of computer composed of one or more computer processing cores its own computer memory and its own input output adapters. For further explanation therefore sets forth a block diagram of an example compute node useful in a parallel computer capable of data communications with reduced latency according to embodiments of the present invention. The compute node of includes a plurality of processing cores as well as RAM . The processing cores of may be configured on one or more integrated circuit dies. Processing cores are connected to RAM through a front side bus and through a bus adapter and an extension bus to other components of the compute node. Stored in RAM is an application program a module of computer program instructions that carries out parallel user level data processing using parallel algorithms.

Also stored RAM is a parallel communications library a library of computer program instructions that carry out parallel communications among compute nodes including point to point operations as well as collective operations. Application program executes collective operations by calling software routines in parallel communications library . A library of parallel communications routines may be developed from scratch for use in systems according to embodiments of the present invention using a traditional programming language such as the C programming language and using traditional programming methods to write parallel communications routines that send and receive data among nodes on two independent data communications networks. Alternatively existing prior art libraries may be improved to operate according to embodiments of the present invention. Examples of prior art parallel communications libraries include the Message Passing Interface MPI library and the Parallel Virtual Machine PVM library.

Also stored in RAM is an operating system a module of computer program instructions and routines for an application program s access to other resources of the compute node. It is typical for an application program and parallel communications library in a compute node of a parallel computer to run a single thread of execution with no user login and no security issues because the thread is entitled to complete access to all resources of the node. The quantity and complexity of tasks to be performed by an operating system on a compute node in a parallel computer therefore are smaller and less complex than those of an operating system on a serial computer with many threads running simultaneously. In addition there is no video I O on the compute node of another factor that decreases the demands on the operating system. The operating system may therefore be quite lightweight by comparison with operating systems of general purpose computers a pared down version as it were or an operating system developed specifically for operations on a particular parallel computer. Operating systems that may usefully be improved simplified for use in a compute node include UNIX Linux Microsoft XP AIX IBM s i5 OS and others as will occur to those of skill in the art.

Also stored in RAM is a descriptor buffer . In the example of the descriptor buffer may be embodied as computer memory for receiving a descriptor for a message and message data. The descriptor may include for example the identity of the recipient of a message the identity of the sender of the message the location of message data associated with the message the size of such message data and so on. The message data of represents the payload of the message which is the actual data to be transferred by a particular message. In the example of the descriptor buffer is embodied as allocated computer memory segmented into descriptor slots . Each descriptor slot is a fixed size segment of memory for storing a single descriptor or an amount of message data that is less than or equal to the fixed size of the descriptor slot .

The example compute node of includes several communications adapters for implementing data communications with other nodes of a parallel computer. Such data communications may be carried out serially through RS 232 connections through external buses such as USB through data communications networks such as IP networks and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computer sends data communications to another computer directly or through a network. Examples of communications adapters useful in apparatus for data communications with reduced latency include modems for wired communications Ethernet IEEE 802.3 adapters for wired network communications and 802.11b adapters for wireless network communications.

The data communications adapters in the example of include a Gigabit Ethernet adapter that couples example compute node for data communications to a Gigabit Ethernet . Gigabit Ethernet is a network transmission standard defined in the IEEE 802.3 standard that provides a data rate of 1 billion bits per second one gigabit . Gigabit Ethernet is a variant of Ethernet that operates over multimode fiber optic cable single mode fiber optic cable or unshielded twisted pair.

The data communications adapters in the example of include a JTAG Slave circuit that couples example compute node for data communications to a JTAG Master circuit . JTAG is the usual name used for the IEEE 1149.1 standard entitled Standard Test Access Port and Boundary Scan Architecture for test access ports used for testing printed circuit boards using boundary scan. JTAG is so widely adapted that at this time boundary scan is more or less synonymous with JTAG. JTAG is used not only for printed circuit boards but also for conducting boundary scans of integrated circuits and is also useful as a mechanism for debugging embedded systems providing a convenient back door into the system. The example compute node of may be all three of these It typically includes one or more integrated circuits installed on a printed circuit board and may be implemented as an embedded system having its own processing core its own memory and its own I O capability. JTAG boundary scans through JTAG Slave may efficiently configure processing core registers and memory in compute node for use in dynamically reassigning a connected node to a block of compute nodes for data communications with reduced latency according to embodiments of the present invention.

The data communications adapters in the example of include a Point To Point Network Adapter that couples example compute node for data communications to a network that is optimal for point to point message passing operations such as for example a network configured as a three dimensional torus or mesh. The Point To Point Adapter provides data communications in six directions on three communications axes x y and z through six bidirectional links x x y y z and z .

The data communications adapters in the example of include a Global Combining Network Adapter that couples example compute node for data communications to a global combining network that is optimal for collective message passing operations such as for example a network configured as a binary tree. The Global Combining Network Adapter provides data communications through three bidirectional links for each global combining network that the Global Combining Network Adapter supports. In the example of the Global Combining Network Adapter provides data communications through three bidirectional links for global combining network two to children nodes and one to a parent node .

The example compute node includes multiple arithmetic logic units ALUs . Each processing core includes an ALU and a separate ALU is dedicated to the exclusive use of the Global Combining Network Adapter for use in performing the arithmetic and logical functions of reduction operations including an allreduce operation. Computer program instructions of a reduction routine in a parallel communications library may latch an instruction for an arithmetic or logical function into an instruction register . When the arithmetic or logical function of a reduction operation is a sum or a logical OR for example the collective operations adapter may execute the arithmetic or logical operation by use of the ALU in the processing core or typically much faster by use of the dedicated ALU using data provided by the nodes on the global combining network and data provided by processing cores on the compute node .

Often when performing arithmetic operations in the global combining network adapter however the global combining network adapter only serves to combine data received from the children nodes and pass the result up the network to the parent node . Similarly the global combining network adapter may only serve to transmit data received from the parent node and pass the data down the network to the children nodes . That is none of the processing cores on the compute node contribute data that alters the output of ALU which is then passed up or down the global combining network . Because the ALU typically does not output any data onto the network until the ALU receives input from one of the processing cores a processing core may inject the identity element into the dedicated ALU for the particular arithmetic operation being perform in the ALU in order to prevent alteration of the output of the ALU . Injecting the identity element into the ALU however often consumes numerous processing cycles. To further enhance performance in such cases the example compute node includes dedicated hardware for injecting identity elements into the ALU to reduce the amount of processing core resources required to prevent alteration of the ALU output.

The dedicated hardware injects an identity element that corresponds to the particular arithmetic operation performed by the ALU. For example when the global combining network adapter performs a bitwise OR on the data received from the children nodes dedicated hardware may inject zeros into the ALU to improve performance throughout the global combining network .

The compute node of includes a DMA controller for processing descriptors and message data contained in the descriptor slots of the descriptor buffer . The DMA controller is a module of automated computing machinery that includes DMA control logic that is implemented as hardware components and logic networks of the DMA controller in firmware as software operating an embedded controller or as various combinations of software firmware or hardware.

For further explanation sets forth a block diagram of an example Point To Point Adapter useful in systems for data communications with reduced latency according to embodiments of the present invention. The Point To Point Adapter is designed for use in a data communications network optimized for point to point operations a network that organizes compute nodes in a three dimensional torus or mesh. The Point To Point Adapter in the example of provides data communication along an x axis through four unidirectional data communications links to and from the next node in the x direction and to and from the next node in the x direction . The Point To Point Adapter of also provides data communication along a y axis through four unidirectional data communications links to and from the next node in the y direction and to and from the next node in the y direction . The Point To Point Adapter of also provides data communication along a z axis through four unidirectional data communications links to and from the next node in the z direction and to and from the next node in the z direction .

For further explanation sets forth a block diagram of an example Global Combining Network Adapter useful in systems for data communications with reduced latency according to embodiments of the present invention. The Global Combining Network Adapter is designed for use in a network optimized for collective operations a network that organizes compute nodes of a parallel computer in a binary tree. The Global Combining Network Adapter in the example of provides data communication to and from children nodes of a global combining network through four unidirectional data communications links and also provides data communication to and from a parent node of the global combining network through two unidirectional data communications links .

For further explanation sets forth a line drawing illustrating an example data communications network optimized for point to point operations useful in systems capable of data communications with reduced latency according to embodiments of the present invention. In the example of dots represent compute nodes of a parallel computer and the dotted lines between the dots represent data communications links between compute nodes. The data communications links are implemented with point to point data communications adapters similar to the one illustrated for example in with data communications links on three axis x y and z and to and fro in six directions x x y y z and z . The links and compute nodes are organized by this data communications network optimized for point to point operations into a three dimensional mesh . The mesh has wrap around links on each axis that connect the outermost compute nodes in the mesh on opposite sides of the mesh . These wrap around links form a torus . Each compute node in the torus has a location in the torus that is uniquely specified by a set of x y z coordinates. Readers will note that the wrap around links in the y and z directions have been omitted for clarity but are configured in a similar manner to the wrap around link illustrated in the x direction. For clarity of explanation the data communications network of is illustrated with only 27 compute nodes but readers will recognize that a data communications network optimized for point to point operations for use in data communications with reduced latency in accordance with embodiments of the present invention may contain only a few compute nodes or may contain thousands of compute nodes. For ease of explanation the data communications network of is illustrated with only three dimensions but readers will recognize that a data communications network optimized for point to point operations for use in data communications with reduced latency in accordance with embodiments of the present invention may in facet be implemented in two dimensions four dimensions five dimensions and so on. Several supercomputers now use five dimensional mesh or torus networks including for example IBM s Blue Gene Q .

For further explanation sets forth a line drawing illustrating an example global combining network useful in systems capable of data communications with reduced latency according to embodiments of the present invention. The example data communications network of includes data communications links connected to the compute nodes so as to organize the compute nodes as a tree. In the example of dots represent compute nodes of a parallel computer and the dotted lines between the dots represent data communications links between compute nodes. The data communications links are implemented with global combining network adapters similar to the one illustrated for example in with each node typically providing data communications to and from two children nodes and data communications to and from a parent node with some exceptions. Nodes in the global combining network may be characterized as a physical root node branch nodes and leaf nodes . The physical root has two children but no parent and is so called because the physical root node is the node physically configured at the top of the binary tree. The leaf nodes each has a parent but leaf nodes have no children. The branch nodes each has both a parent and two children. The links and compute nodes are thereby organized by this data communications network optimized for collective operations into a binary tree . For clarity of explanation the data communications network of is illustrated with only 31 compute nodes but readers will recognize that a global combining network optimized for collective operations for use in data communications with reduced latency in accordance with embodiments of the present invention may contain only a few compute nodes or may contain thousands of compute nodes.

In the example of each node in the tree is assigned a unit identifier referred to as a rank . The rank actually identifies a task or process that is executing a parallel operation according to embodiments of the present invention. Using the rank to identify a node assumes that only one such task is executing on each node. To the extent that more than one participating task executes on a single node the rank identifies the task as such rather than the node. A rank uniquely identifies a task s location in the tree network for use in both point to point and collective operations in the tree network. The ranks in this example are assigned as integers beginning with 0 assigned to the root tasks or root node 1 assigned to the first node in the second layer of the tree 2 assigned to the second node in the second layer of the tree 3 assigned to the first node in the third layer of the tree 4 assigned to the second node in the third layer of the tree and so on. For ease of illustration only the ranks of the first three layers of the tree are shown here but all compute nodes in the tree network are assigned a unique rank.

For further explanation sets forth a block diagram illustrating an example communications architecture illustrated as a protocol stack useful in data communications with reduced latency according to embodiments of the present invention. The example communications architecture of sets forth two compute nodes origin compute node and target compute node . Only two compute nodes are illustrated in the example of for ease of explanation and not for limitation. In fact data communications with reduced latency according to embodiments of the present invention may be implemented using many compute nodes in very large scale computer systems such as parallel computers with thousands of nodes.

The example communications architecture of includes an application layer that implements communications between applications running on the compute nodes by invoking functions in an application messaging module installed on each compute node . Communications among the applications in the application layer are effected through messages passed between applications. Applications may communicate messages invoking function of an application programming interface API exposed by the application messaging modules .

The example communications architecture of includes a system messaging layer that implements system specific protocols for communications that support messaging in the application layer and the application messaging layer . Such system specific protocols are typically invoked through a set of APIs that are exposed to the application messaging modules in the application messaging layer . Such system specific protocols used for communications in the system messaging layer are typically isolated from the application layer making the application layer somewhat independent of system specific details.

The example communications architecture of includes a hardware layer that defines the physical implementation and the electrical implementation of aspects of the hardware on the compute nodes such as the bus network cabling connector types physical data rates data transmission encoding and may other factors for communications between the compute nodes on the physical network medium.

The example communications architecture of illustrates a DMA controller for the origin compute node and a DMA controller for a target compute node . The DMA controllers each are configured with DMA control logic in the form of a DMA engine . The DMA engines can be implemented as hardware components and logic networks of a DMA controller in firmware as software operating an embedded controller as various combinations of software firmware or hardware and so on.

The DMA engines in the example of are illustrated in both the system messaging module layer and the hardware layer . The DMA engines are shown in both the system messaging module layer and the hardware layer because DMA engines useful in data communications with reduced latency according to embodiments of the present invention often provide system messaging level interfaces and also implement communications according to some aspects of the hardware layer .

The example DMA engines of each operate a reception fifo buffer that include data descriptors for messages and data received from other DMA engines on other compute nodes through a memory fifo data transfer. The example DMA engines of each also operate an injection fifo buffer that include data descriptors for messages and data to be sent to other DMA engines on other compute nodes through a memory fifo data transfer. In the example of the injection fifo buffer may be embodied as a descriptor buffer of with multiple descriptor slots of as illustrated in .

A memory fifo data transfer operation is a mode of transferring data using a DMA engine on an origin node and a DMA engine on a target node. In a memory fifo data transfer operation data is transferred along with a data descriptor describing the data from an injection fifo for the origin DMA engine to a target DMA engine. The target DMA engine in turn places the descriptor in the reception fifo and caches the data. A core processor then retrieves the data descriptor from the reception fifo and processes the data in cache either by instructing the DMA to store the data directly or carrying out some processing on the data such as even storing the data by the core processor.

For further explanation sets forth a flow chart illustrating an example method for data communications with reduced latency according to embodiments of the present invention. The example of includes writing by a producer a descriptor and message data into at least two descriptor slots of a descriptor buffer . In the example of the producer may be embodied for example as a process attempting to send a message and data associated with such a message to another process. Such a producer can facilitate sending a message and data associated with such a message to another process by causing a descriptor and message data to be inserted into the descriptor buffer where the descriptor includes information identifying the target receipt the sender the location in memory of the message data and so on.

In the example of the descriptor buffer is embodied as allocated computer memory segmented into descriptor slots of a fixed size. In the example of a header pointer identifies a next descriptor slot to be processed by a DMA controller . In the example of a tail pointer identifies a descriptor slot for entry of a next descriptor in the descriptor buffer . Because the header pointer identifies a next descriptor slot to be processed by a DMA controller and the tail pointer identifies a descriptor slot for entry of a next descriptor in the descriptor buffer descriptor slots that are between the header pointer and the tail pointer include descriptors or associated message data that has not been processed by the DMA controller but has been inserted into the descriptor buffer by a producer .

In the example of writing a descriptor and message data into at least two descriptor slots of a descriptor buffer includes recording in the descriptor the memory location and size of the message data . In the example of the descriptor is written into a single descriptor slot . In the example of however the message data may be written into multiple descriptor slots in dependence upon the size of the message data . If the size of the message data is larger than the size of a descriptor slot for example the message data may be split into multiple parts that are stored in a plurality of descriptor slots.

In the example of recording in the descriptor the memory location and size of the message data may be carried out for example by populating a predetermined field in the descriptor with a beginning memory address of the message data and also populating a predetermined field in the descriptor with the size of the message data . The address of the message data may be embodied as for example a virtual address a real address in memory a descriptor slot index in the descriptor buffer and in other ways as will occur to those of skill in the art. The size of the message data may be embodied as for example an amount of memory expressed in kilobytes a number of descriptor slots in the descriptor buffer that contained the message data and so on.

The example of also includes recording by the producer in the descriptor a value signifying that message data has been written into the descriptor slots . The value signifying that message data has been written into the descriptor slots may be embodied as for example an integer value used as a flag such that a value of 0 indicates that message data has not been written into the descriptor slots and a value of 1 indicates that message data has been written into the descriptor slots . Such a value may be recorded in a predefined field of the descriptor that is used for determining whether the descriptor is associated with message data that is also stored in the descriptor buffer .

In the example of recording in the descriptor a value signifying that message data has been written into the descriptor slots can include recording a value specifying the number of descriptor slots into which the descriptor and the message data were written. In such an embodiment the value specifying the number of descriptor slots into which the descriptor and the message data were written will be at least 1 given that the descriptor was written into the descriptor buffer . If message data associated with the descriptor was written into the descriptor buffer the value will be at least 2 as one descriptor slot will include the descriptor and at least one additional descriptor slot will include the message data . Such a value may be recorded in a predefined field of the descriptor that is used for determining whether the descriptor is associated with message data that is also stored in the descriptor buffer and if message data is stored in the descriptor buffer the number of descriptor slots that include such message data .

In the example of recording in the descriptor a value signifying that message data has been written into the descriptor slots can alternatively include recording a value specifying the number of descriptor slots into which the message data was written. In such an embodiment if message data associated with the descriptor was written into the descriptor buffer the value will be at least 1 as at least one descriptor slot will include the message data . Such a value may be recorded in a predefined field of the descriptor that is used for determining whether the descriptor is associated with message data that is also stored in the descriptor buffer and if message data is stored in the descriptor buffer the number of descriptor slots that include such message data .

The example of also includes setting by the producer in dependence upon the recorded value a tail pointer to point to a next open descriptor slot . In the example of a next open descriptor slot is a descriptor slot that does not include a descriptor or message data that has not yet been processed. The next open descriptor slot represents the descriptor slot in the descriptor buffer that should be populated with a descriptor or message data from the producer .

The example of also includes determining by the DMA controller for the next descriptor whether message data was written into descriptor slots in association with the next descriptor . In the example of determining whether message data was written into descriptor slots in association with the next descriptor may be carried out for example by inspecting a predetermined field in next descriptor that is used to specify the number of descriptor slots into which the next descriptor was written the number of descriptor slots into which the message data was written or any combination thereof. In an embodiment in which a predetermined field in the next descriptor is used to specify the number of descriptor slots into which the message data was written a value of 1 or greater would indicate that message data was written into the descriptor buffer . In an embodiment in which a predetermined field in the next descriptor is used to specify the number of descriptor slots into which the next descriptor and the message data was written a value of 2 or greater would indicate that message data was written into the descriptor buffer .

The example of also includes consuming by the DMA controller a next descriptor and message data associated with the next descriptor including transferring the message data from its recorded memory location to target memory of a target process through another DMA controller . In the example of the DMA controller may consumer the next descriptor and message data for example by using the next descriptor to identify the memory location and size of the message data and transferring the message data to memory that serves as a shared memory segment with the other DMA controller . The other DMA controller may thereafter transfer the message data to target memory of a target process that is to receive and process the message data .

The example of also includes setting by the DMA controller the header pointer to the next descriptor slot to be processed in dependence upon the recorded value . In the example of the next descriptor to be processed is in descriptor slot and the message data associated with the next descriptor is in descriptor slot . In an embodiment in which the recorded value represents the number of descriptor slots into which a descriptor and message data were written the recorded value would be 2 and the header pointer would therefore be moved 2 spots such that the header pointer points to descriptor slot . In an embodiment in which the recorded value represents the number of descriptor slots into which only the message data was written the recorded value would be 1 and the header pointer would therefore be moved 1 descriptor slot to account for the descriptor and 1 descriptor slot based on the recorded value such that the header pointer points to descriptor slot .

The example of illustrates an embodiment in which a descriptor is inserted into the descriptor buffer along with message data that is associated with the descriptor . In the example of the message data may be distributed across multiple descriptor slots for example because the total size of data to be sent in a message associated with the descriptor is of a size such that three descriptor slots are required to store all of the message data. In such an example inserting the descriptor and the message data into the descriptor slots causes the tail pointer to be modified such that the modified tail pointer points to descriptor slot thereby indicating that descriptor slot is the next open descriptor slot.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described above with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.

