---

title: Assigning virtual machines to business application service groups based on ranking of the virtual machines
abstract: Virtual machine resources may be monitored for optimal allocation. One example method may include generating a list of virtual machines operating in a network and surveying the virtual machines to determine their current resource usage data. The method may also include ranking the virtual machines based on their current resource usage data to indicate available resources of the virtual machines, and assigning the virtual machines to at least one business application service group (BASG) that requires the available resources of the virtual machines.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09354960&OS=09354960&RS=09354960
owner: Red Hat, Inc.
number: 09354960
owner_city: Raleigh
owner_country: US
publication_date: 20101227
---
This application is related to applications U.S. patent application Ser. No. 11 767 173 filed on 06 22 2007 titled Method and system for cloaked observation and remediation of software attacks now issued U.S. Pat No. 8 191 141 U.S. patent application Ser No. 11 867 456 filed on 10 04 2007 titled Method and system for collaboration involving enterprise nodes now issued U.S. Pat. No. 8 336 108 and U.S. patent application Ser. No. 12 626 872 filed on 11 27 2009 titled Network traffic analysis using a dynamically updating ontological network description now issued U.S. Pat. No. 8 429 748.

U.S. patent application Ser. No. 12 905 565 filed on 10 15 2010 titled Identification of business process application service groups now issued U.S. Pat. No. 8 825 838.

U.S. patent application Ser. No. 12 905 645 filed on 10 15 2010 titled System and method for migration of network entities to a cloud infrastructure. 

U.S. patent application Ser. No. 12 905 688 filed on 10 15 2010 titled Monitoring system performance changes based on configuration modification now issued U.S. Pat. No. 8 938 489.

U.S. patent application Ser. No. 12 905 761 filed on 10 15 2010 titled Indicating an impact to of a change in state of a node now issued U.S. Pat. No. 8 656 009.

U.S. patent application Ser. No. 12 905 850 filed on 10 15 2010 titled System and method for enterprise nodes that are contained within a public cloud to communicate with private enterprise infrastructure dependencies. 

U.S. patent application Ser. No. 12 905 879 filed on 10 15 2010 titled System and method for determination of the root cause of an overall failure of a business application service now issued U.S. Pat. No. 8 156 378.

U.S. patent application Ser. No. 12 979 229 filed on 12 27 2010 titled Automatic Determination of Required Resource Allocation of Virtual Machines. 

U.S. patent application Ser. No. 12 979 245 filed on 12 27 2010 titled Automatic Baselining of Business Application Service Groups Comprised of Virtual Machines. 

U.S. patent application Ser. No. 12 979 222 filed on 12 27 2010 titled Performing Dependency Analysis on Nodes of a Business Application Service Group. 

U.S. patent application Ser. No. 12 979 259 filed on 12 27 2010 titled Automatic Simulation of Virtual Machine Performance. 

U.S. patent application Ser. No. 12 979 255 filed on 12 27 2010 titled Performing Predictive Modeling of Virtual Machine Relationships. 

The entire contents of each of the above mentioned applications are specifically incorporated herein by reference in their entireties.

Embodiments of the invention relate to analyzing network traffic analysis and in particular to performing automatic determining of service groups within a communications network.

Traditionally enterprises are comprised of various nodes that contribute to an overall business process. An enterprise may be thought of as a geographically dispersed network under the jurisdiction of one organization. It often includes several different types of networks and computer systems from different vendors.

These network nodes that are part of the enterprise may be comprised of both physical and virtual machines. Enterprise networks that include a plurality of virtual machines may require a physical host which is required to allocate resources among the virtual machines.

Groups of network nodes included in the enterprise may form business process application service groups BASGs . The components of these groups are comprised of virtual machines hosts storage devices and network devices. Each of these components may be dependent on one another. Generally enterprise environments are not designed to pair virtual machines with hosts storage devices and network BASGs. As a result the virtual machines are not fully optimal and available resources may be underutilized.

Example embodiments of the present invention may include a method of assigning virtual machines operating in a network. The method may include generating a list of the virtual machines currently operating in the network surveying the virtual machines to determine their current resource usage data and ranking the virtual machines based on their current resource usage data to indicate available resources of the virtual machines. The method may also include assigning the virtual machines to at least one business application service group BASG that requires the available resources of the virtual machines.

Another example embodiment of the present invention may include an apparatus configured to assign virtual machines operating in a network. The apparatus may include a memory to store a list of the virtual machines currently operating in the network. The apparatus may also include a processor to generate the list of the virtual machines currently operating in the network store the list in the memory survey the virtual machines to determine their current resource usage data rank the virtual machines based on their current resource usage data to indicate available resources of the virtual machines and assign the virtual machines to at least one business application service group BASG that requires the available resources of the virtual machines.

It will be readily understood that the components of the present invention as generally described and illustrated in the figures herein may be arranged and designed in a wide variety of different configurations. Thus the following detailed description of the embodiments of a method apparatus and system as represented in the attached figures is not intended to limit the scope of the invention as claimed but is merely representative of selected embodiments of the invention.

The features structures or characteristics of the invention described throughout this specification may be combined in any suitable manner in one or more embodiments. For example the usage of the phrases example embodiments some embodiments or other similar language throughout this specification refers to the fact that a particular feature structure or characteristic described in connection with the embodiment may be included in at least one embodiment of the present invention. Thus appearances of the phrases example embodiments in some embodiments in other embodiments or other similar language throughout this specification do not necessarily all refer to the same group of embodiments and the described features structures or characteristics may be combined in any suitable manner in one or more embodiments.

In addition while the term message has been used in the description of embodiments of the present invention the invention may be applied to many types of network data such as packet frame datagram etc. For purposes of this invention the term message also includes packet frame datagram and any equivalents thereof. Furthermore while certain types of messages and signaling are depicted in exemplary embodiments of the invention the invention is not limited to a certain type of message and the invention is not limited to a certain type of signaling.

Specific example embodiments of the present invention will now be described with reference to the accompanying drawings. This invention may however be embodied in many different forms and should not be construed as limited to the embodiments set forth herein. Rather these embodiments are provided so that this disclosure will be thorough and complete and will fully convey the scope of the invention to those skilled in the art.

It will be understood that when an element is referred to as being connected or coupled to another element it can be directly connected or coupled to the other element or intervening elements may be present. Furthermore connected or coupled as used herein may include wirelessly connected or coupled. It will be understood that although the terms first and second are used herein to describe various elements these elements should not be limited by these terms.

According to an example embodiment elements of system may utilize the Java software platform and Enterprise Java Bean EJB architecture to provide certain functionality. These well known terms may be used in the description that follows. Other software platforms and architectures providing similar functionality may be used without departing from the scope of the present invention.

System may consist of an application server which interacts across a network with a number of data collection agents . Application server may be an element of an administrative console AC that also provides a suite of network management tools. A system administrator may perform network traffic analysis and or other network management tasks by accessing application server through a web browser . Application server may include an EJB module an ontological description creation engine and a web application . Web browser may include a rendering engine B and a knowledge browser A.

In operation data collection agent s may be deployed onto network nodes including physical and or virtual machines in an enterprise information technology IT infrastructure environment. After such deployment application server receives messages from data collection agents . These messages may include data representing for example state and relationship information about the network nodes configuration information related to the IT infrastructure performance utilization data and network communication. Thresholds are assigned to a component and or can also be assigned to an entire business application service group BASG . A host may provide CPU usage as a resource allocated to a virtual machine the CPU operational usage performance is an example metric. The virtual machine and host machine are both examples of components.

The received messages may be initially handled by EJB module . For example message driven EJB may initially inspect a received message. A received message relating to network traffic or node status may be forwarded by message driven EJB to the business logic EJB . Business logic EJB may call network traffic analysis engine for messages relating to network traffic. Alternately infrastructure messages i.e. those messages relating to node status may be forwarded directly to the state and profiling engine .

Messages forwarded to the state and profiling engine may undergo sorting and processing. The state and profiling engine for example may identify the entities within the IT infrastructure as well as their dependency on one another based on messages received from the platform. In addition state and profiling engine may perform further processing to determine the state of one or more entities. State may be based on a threshold that has been defined for example by the system administrator. The threshold may be based on a metric that either exceeds or underperforms in a specific area of interest of the system administrator. An example threshold may be set for a server operating in the enterprise network that is exceeding a specified CPU utilization percentage a disk utilization percentage and or a memory utilization percentage.

A data output from state and profiling engine may be sent to ontological description creation engine . Initially the data may be handled by a resource description framework RDF application programming interface API knowledge base where the data is categorized and stored utilizing a predefined entity relationship determined by ontology web language OWL API or ontology model .

Messages handled by the network traffic analysis engine may include source to destination data qualified by a communicating application within the operating system of the originating node as well as frequency of communication information. This received data is analyzed by processing the number and type of connections to determine if an ontological communicates with relationship exists. A determination may be made by tracking the number of connections of a specific application over a period of time. The period of time may be preselected for example by the system administrator.

Data output from network traffic analysis engine may be sent to ontological description creation engine . Initially the data may be handled by the RDF API knowledge base where the data is categorized and stored utilizing a predefined entity relationship determined by OWL API ontology model . For example OWL API ontology model may define what entity classes exist their possible relationship to each other and their possible state.

The model and structure the system uses to create and update the knowledge base is contained within a web ontology language OWL file present on the application server . OWL is a family of knowledge representation languages for authoring ontologies which are a formal representation of the knowledge by a set of concepts within a domain and the relationships between those concepts. Ontologies are used to represent the properties of a domain and may be used to describe the domain. The ontology provides the direct and indirect dependency information that the SPARQL query engine requires in order to infer the impact a change in state will have on the rest of a service group or BASG.

In an enterprise network a business application will typically include a primary application with one or more executables that execute on one or more nodes of the network. These nodes may have direct and indirect dependencies on other nodes of the network. The business application may be described by a network ontology. When an alert state occurs for the business application the components of the business application ontology may be analyzed to determine what adjustments are required to achieve a steady state based on assigned thresholds. The root cause may be a direct or indirect root cause which may then be reported to the system administrator.

According to an example embodiment a visualization of a current network state and or communication activity may be provided to an administrator. The system administrator may be provided with a visual rendering e.g. on a computer monitor of the knowledge base. The visualization may be filtered to any selected entity of interest. For example referring again to the system administrator or other user may use a web browser to request rendering of data via web application from controllers .

Controllers may pass along any filtering information such as a specific Host ID. Next business logic EJB may be called by the controllers. Business logic EJB may query RDF API knowledge base for requested data. The requested data may be returned through controllers to the web browser. The requested data may then be converted into a directed graph chart by a rendering engine.

Example embodiments of the present invention may provide the ability to automatically determine allocation adjustments that may be required for virtual machine performance and monitoring the service tier thresholds assigned to a specified virtual machine. Thresholds are directly related to a node state . The state may be defined as an indicator to the system and the user of a business application service such as whether the business application service meets a specified threshold requirement. The process to determine the state of an individual element may be based on a threshold that has been defined for example by the system administrator. The threshold may include a metric that either exceeds or underperforms in a specific area of interest of the system administrator. An example would be a server in a network that is exceeding a specified CPU utilization percentage.

Example embodiments of the present invention may provide automatically detecting when a virtual machine s baseline of performance requires an allocation change from the virtual machine s host. Determining the percentage of increase or decrease in CPU usage memory usage storage usage and network usage may be required in order to maintain a baseline operating in a normal range.

The system may monitor for a steady state of a virtual machine by tracking service tier thresholds identified as normal. The system will provide the virtual machine s host with the changes in performance allocations needed to operate within a normal range to continue or achieve a normal range. The adjustment is expressed in terms of a percentage increase or decrease from the present allocation of resources assigned to it by its physical host.

The following terminology is used only to distinguish one element from another element. Thus for example a first user terminal could be termed a second user terminal and similarly a second user terminal may be termed a first user terminal without departing from the teachings of the present invention. As used herein the term and or includes any and all combinations of one or more of the associated listed items. The symbol may also be used as a shorthand notation for and or .

Networks including computer entities physical and or virtual machines operating on network nodes etc. may be advantageously described via an ontology that describes the operational usage and current state of the entities rather than being based on a fixed IT infrastructure architecture. The ontological description may be automatically and dynamically updated based on data acquired from data collection agents deployed to the nodes of the network. The data collection agents observe communicative relationships based on connections between nodes in operational use while annotating a class state. Using the ontological description a network analyst or system operator may be provided with an improved ability to analyze network traffic.

Data relating to actual connections may be acquired automatically in near real time. For example an actual connection may be monitored in an interrupt driven way while collecting information regarding an application that made the connection. Moreover a volume for the connections may be derived. A software based data collection agent may be received by a computing device at a node within a communications network. The agent may be distributed to one or more nodes from a central node via the network.

Once the software based data collection agent is received it may be inserted in an operating system of the receiving node. Advantageously the agent may be inserted in the kernel of the operating system or in a user space i.e. an area in virtual memory of a computer that contains user applications that execute at the application layer . The installation may be performed such that it is transparent or undetectable by a user of the node. The installed data collection agent may monitor data packet traffic between an adaptive driver layer and a protocol layer and report results of the monitoring to the central node.

In one example the data collection agent may have an interface to an operating system s network stack and may periodically determine what applications are using the network stack. As a result the data collection agent may track information regarding a network connection the connection duration and any applications and systems involved in the connection. Moreover the data collection agent may normalize the foregoing information and report it to an administration console so that different operating systems may be correlated by the administration console.

As a further example the data collection agent may include a network filter inserted into the network stack to determine exactly when a connection is made between entities. The filter component of the data collection agent may be inserted at one or more layers of the OSI model. For example a data collection agent may have a filter interface at the transport layer and or a filter interface at the network layer. The data collection agent may track information regarding a network connection the connection duration and any applications and systems involved in the connection. Moreover the data collection agent may normalize the foregoing information and report it to the administration console so that different operating systems may be correlated by the administration console.

As yet a further example the data collection agent described in the preceding paragraphs may also include a packet filter inserted into the network stack to track connection data. For example a data collection agent may have a filter interface at the data link layer. Then the data collection agent may correlate and normalize if required data from the network filter and the packet filter to track information regarding the network connection the connection duration any applications and systems involved in the connection connection status and connection resource usage information. Moreover the data collection agent may normalize the foregoing information and report it to the administration console so that different operating systems may be correlated by the administration console.

Referring again to an illustrative system for deploying data collection agents onto network nodes monitoring network connections instantiated at each network node acquiring resulting data automatically creating an ontological description of the network from the acquired data and dynamically updating the ontological description will be described. The system may further be used for monitoring configuration drifts within an enterprise network as will be described in more detail below. In an example embodiment elements of system utilize the Java software platform and Enterprise Java Bean EJB architecture to provide certain functionality and these well known terms may be used in the description that follows.

According to example embodiments of the present invention the process to automatically determine a performance allocation may begin by monitoring those virtual machines that have sustained a service tier threshold in either a critical low and or a critical high level for more than 24 hours. Such an observation may be observed by the virtual machine agent. The SQARQL query engine simultaneously initiates a query for current performance threshold data stored in a database.

The components states may be determined since they have thresholds that include at least one of achieved overachieved and or underachieved. Nodes executables and the business application service groups BASGs may also incorporate status and alerts from infrastructure providers. The executables may have a state that relates to the communicates with relationship. For example if an executable such as sqlservr.exe no longer communicates with node X it may be designated critical high and indicated on a user interface as red or as a warning. This example may be true of a node that represents a communicates with relationship as well as a primary application represented as a node.

The state and profiling engine may set the state of the business application service group BASG using the agent data and system information. When any component of the BASG has achieved a High Warning state the user may view the component as red indicating a high warning as well as the BASG itself being displayed in red on a graphical user interface. Various other visual indicators e.g. shapes sizes shades etc. may be used to illustrate different operating performance levels.

The process to determine the state of an individual element may be based on a threshold that has been defined for example by the system administrator. The threshold may include a metric that either exceeds or underperforms in a specific area of interest to the system administrator. An example would be where a server in a network is exceeding a specified CPU utilization percentage.

Example embodiments of the present invention may automatically determine the optimum pairing of virtual machines in a business process application service group BASG to maximize performance as measured by a service tier threshold system. Examples may include automatically analyzing the baseline of direct and indirect connections based on network interactivity of the applications that are utilized to perform a process.

A BASG is comprised of one or more nodes operating on the enterprise network. The basis for an automatic base lining procedure may be in the ontological structure of the categorized BASG. The resulting data file may contain a structure that includes classes object properties and data values. The system creates a profile type for each selected BASG host storage device and other network dependent components elements. This profile may include specific attributes that are used to pair virtual machines with BASGs providing the virtual machine to execute optimally.

Example operations may provide identifying specific virtual machines to pair with a specific business BASG. One ore more virtual machines may be paired with one or more BASGs. The system may determine which BASGs are best suited for a pairing based on parameters that include high availability high capacity high speed moderate capacity moderate speed moderate availability low capacity low speed and low availability. These are considered by the system to be the BASG types. The virtual machines that require these attributes are then paired to these BASGS.

Initially the system may analyze each of the BASGs performance data to determine if any of the BASGs would benefit from a newly added virtual machine pairing. This analysis may be performed by processing the aggregate service tier thresholds of the host member s of the BASG. For example by processing the state information of both the storage and network BASG dependencies the need for additional virtual machines may be apparent based on the needs and requirements of the BASG. The storage and network state information may be factored with the host performance threshold data and state information to determine a profile of the BASG.

The BASG profile may include categories which may include but are not limited to high availability high capacity high speed moderate capacity moderate speed moderate availability low capacity low speed and low availability. illustrates an example table of a BASG profile and its corresponding threshold data input and service tier threshold metric information required for a virtual machine candidate selection process. Depending on the metrics that are measured a virtual machine that is operating less than or above the specified metric ranges included in may not be considered a candidate for pairing with a particular BASG. The service tier thresholds may be based on the requirements of a particular BASG and its current operating baseline.

The system may analyze the virtual machines to determine the optimal combination of host applications storage required and network performance by analyzing the service tier threshold performance data acquired. Each virtual machine is assigned a profile requirement such as high availability high capacity high speed moderate capacity moderate speed moderate availability low capacity low speed and low availability. The system pairs the virtual machine with at least one host network and storage group that has availability and which may be assigned to a BASG. Or alternatively the BASG can produce availability by migrating one or more less optimally paired virtual machine elsewhere.

The system may also provide a work order that can be processed by an orchestration system or individual who is responsible for executing the changes. The system routinely as defined through the user interface monitors the networking environment to maintain optimum virtual machine pairings with host storage and speed groups that include one or more BASGs.

In a physical capacity summary is also provided for easy summarization of the total CPU capacity memory capacity and disk capacity. This base line summary provides a system administrator with a snapshot of operating conditions of the BASGs virtual machines and overall available resources. This provides the system administrator with the information necessary to determine if the BASGs virtual machines and available resources are being utilized efficiently throughout the network.

The various network resources are illustrated as being assigned to at least one virtual machine. Resource icon represents a logical network in the enterprise for virtual machine . It is associated with a device at the virtual infrastructure management level i.e. ESX Server which is a name for the network as it is known to the enterprise for our purposes.

Resource icon is the physical host hardware for the virtual machine along with other virtual machines and is referred to as the hypervisor. Resource icon is the network for virtual machine . It is the same as a logical network in the Enterprise and is associated with a device at the virtual infrastructure management level i.e. ESX Server which is a name for the network as it is known to the enterprise for our purposes.

Resource icon is a datastore for virtual machine . It represents a physical allocation of disk storage and is associated with a hard disk storage device at the virtual infrastructure management level. Resource icon is the User assigned to both virtual machines and . It has been defined and assigned by this virtualization management software. Resource icon is the host for virtual machine . The host is a physical host hardware that the virtual machine is running on along with other virtual machines and may be referred to as the hypervisor. Resource icon is the primary application that is being executed on the virtual machine . Lastly is the datastore for the virtual machine . These resource icons may be dragged and dropped to reassign resources to the virtual machines and in turn modify the allocations of the BASGS.

According to example embodiments of the present invention the system will automatically determine the optimum pairing of virtual machines with BASGs to maximize performance as measured by a service tier threshold monitoring system. In operation upon initiation by the user through the web browser interface the application server may receive a message to survey the virtual machines for their respective CPU and memory usage over the past 30 days. The survey may be performed by the web application server sending a request to the state and profiling engine to compile the usage data from the database.

The state and profiling engine may transmit a JMS message to the business logic that compiles the database query. The business logic generates an EJB based query that includes a request for CPU and memory usage data for the last 30 days. A ranking may be performed by the SPARQL query engine initiating a query. An Example of the data returned by the database is described with reference to . This data is used to rank the virtual machines. The ranking is averaged over the range of virtual machines returned. The ranked virtual machines are then assigned a profile by the state and profiling engine . The profiles may include high availability high capacity high speed moderate capacity moderate speed moderate availability low capacity low speed and low availability.

The breakpoints for the profiles may match the predefine service tier thresholds assigned by the system. Once all of the virtual machines have been assigned a profile based on their usage the state and profiling engine sends this list via a profile EJB to the RDF API knowledge base . Once completed the system initiates the process to compile a candidate list of BASG dependencies. The virtual machines that reside in the described ontological structures are not considered for the candidate process. The BASG candidate process is initiated by the state and profiling engine .

The state and profiling engine sends a JMS request message to the business logic to compile a list of candidate hosts networks and storage groups that are configured within the BASGs. The request is included within a profile EJB. This results in a database query for usage data for the last 30 days from the database. The business logic sends a request to the RDF API knowledge base for state data for host network and storage roll up data based on 24 hour roll ups for the last 30 days.

The state data may contain warning or errors that resulted in a red state for the given nodes. The usage and state information are sent back to the state and profiling engine where they are used to rank and profile the BASGs. The ranked BASGs are then assigned a profile by the state and profiling engine. The BASG profiles may include high availability high capacity high speed moderate capacity moderate speed moderate availability low capacity low speed and low availability. The breakpoints for the profiles may match the service tier thresholds previously assigned by the system.

The state information for each BASG may be used to assign a profile by automatically assigning a low profile to any BASG that is experiencing a warning or error red indication . The error may be based on a 20 margin of exceeding the predefined resource threshold and may be based on a 24 hour data roll up for a 30 day period. No virtual machines are used to rank a BASG. The virtual machine itself is ranked in the virtual machine profile process mentioned above. Once all BASGs have been profiled the state and profiling engine may use a standard matching algorithm to pair the virtual machines with BASGs. The state and profiling engine generates a report that details the recommended change in virtual machine assignment to BASGs. This list may be formatted in XML to be utilized by an orchestration system to complete the changes or to be read by a user for manual adjustments.

The states of the individual business application service components may be aggregated to calculate an overall state for the BASG. Any support nodes within the BASG ontology that have achieved a high warning may be labeled under the BASG as having a high warning. If any one node with a communicates with relationship achieves a high warning status it may be identified as having a high warning for its associated BASG. High errors may be identified in a similar manner. For example in order for a node to achieve these states the states must have been observed and processed by the state and profiling engine three times within one hour. As a result spurious errors and random faults will not lead to warnings being generated for the overall business application process.

One example method for processing state information of elements of a business process ontology and more specifically for a BASG that is in an error state will now be described with reference to . The method of may be performed by processing logic that may comprise hardware e.g. circuitry dedicated logic programmable logic microcode etc. software such as instructions run on a processing device firmware or a combination thereof. In one embodiment the method is performed by a server e.g. application server of .

At operation a query is sent to the RDF knowledgebase that identifies the BASG that is currently in an error state. The RDF knowledge base returns the list of components of the BASG e.g. hardware nodes virtual nodes executables processes primary applications etc and their state.

It should be noted that the primary application of the BASG is considered by the RDF knowledge base to be a node . Any of these components of the BASG may have independent thresholds assigned by the system administrator. Examples of components may include virtual machines host machines storage devices network devices. Examples of resources that are allocated may include memory CPU storage disk space network adapters. Examples of metrics may include a CPU utilization of 1024 Ghz a memory utilization of 8 gigabytes a network adapter operating at 100 Mbps etc.

At operation a filter is applied to determine those components that may have contributed to the high warning threshold that was exceeded and which triggered an alarm. In one example embodiment the filter omits any individual component that has not exceeded a high warning threshold individually from the process. This may reduce the chances of false alarms occurring due to random instances of a predefined threshold being exceeded.

At operation the process continues by inspecting each of the filtered components to determine a root cause. The inspection process looks up performance data previously reported by the agents deployed to the nodes. The inspection process may yield all of the component s relevant data for determining a root cause. In one example the data used for this determination is service tier data such as CPU memory disk and network operation threshold roll up data last 30 days though other relevant data may also be used.

The root cause process may also use virtualization infrastructure alarms and network status updates. These are available to the system for host virtual machines disks and network devices and may be sent in messages from a proxy agent. The proxy agent may contain an instruction for translating virtual infrastructure messages to a format that the state and profile engine can process. If for example the proxy agent receives a message from the virtual infrastructure stating a disk has achieved full capacity and has an error level of 3 the proxy agent will modify the received message with a translation on the level of 3 to High Error. This is then sent to the message driven bean factory where an EJB is created with the contents received from the proxy agent. The business logic then routes the new state EJB to the state and profiling engine . This data is provided to the user as support evidence for the root cause conclusion.

The SPARQL query engine determines the state of the primary applications and the contributing executables that make up the primary application by requesting the ontology for the business application service. The ontology is analyzed for breaks in communication with nodes as described in the Applicant s co pending applications referenced above.

The SPARQL query engine will send a request to the agent to send back the performance statistics of the executables that make up the primary application of the business application service. This will provide the user with the real time performance statistics of the executables to provide support for a conclusion that a root cause of failure is due to the failure of the primary application support nodes at operation . The result of the conclusion may automatically trigger a recommendation to perform an increase and or decrease in the present resource allocation of resources provided by a virtual machine s at operation . For example CPU resources and disk space may be reallocated from among the network resources by the system administrator as a result or receiving the recommendation. Or alternatively certain reallocation measures may be performed automatically.

System may comprise an application server which interacts across a network with a number of data collection agents deployed in various nodes of the network. Advantageously application server may be an element of an administrative console AC that also provides a suite of network management tools. A system administrator may perform network traffic analysis and or other network management tasks by accessing application server by way of web browser . Application server may comprise an EJB module an ontological description creation engine and a web application .

Data collection agents as described hereinabove may be deployed onto network nodes including physical and or virtual machines in an enterprise IT infrastructure environment. After such deployment application server receives messages from data collection agents . These messages may include data representing for example state and relationship information about the network nodes configuration information related to the IT infrastructure performance utilization data and network communication.

The received messages may be initially handled by EJB module . For example message driven EJB module may initially inspect a received message. A received message relating to network traffic or node status may be forwarded by message driven EJB to the business logic EJB . Business logic EJB may call network traffic analysis engine for messages relating to network traffic. Alternatively infrastructure messages i.e. those relating to node status may be forwarded directly to the state and profiling engine .

Messages forwarded to the state and profiling engine may then undergo sorting and processing. The state and profiling engine for example may identify the entities within the IT infrastructure as well as their dependency on one another based on messages received from the platform. In addition state and profiling engine may perform further processing to determine the state of one or more entities. The states may be based on a threshold that has been defined for example by the system administrator. The threshold may be based on a metric that either exceeds or underperforms in a specific area of interest to the system administrator. An example would be a server operating in a network that is exceeding a specified CPU utilization percentage. The threshold may be set to 80 CPU utilization and if the server is operating at 81 the threshold is being exceeded.

Example embodiments for determining a required resource allocation of a virtual machine based on thresholds are discussed below. The web application server business logic creates a message request to provide the necessary changes in virtual machine performance allocation variables to create a condition of no critical low and or no critical high conditions for the next 24 hours. If the recommended change is not successful the cycle repeats by incrementing the 24 hour period with no critical low and or no critical high warning by the service tier threshold system. Another 24 hour monitoring period may then begin.

A recommendation of a change in a variable by a factor of 10 increase or reduction may be a general modification used to satisfy a threshold condition that has been exceeded underperformed. The 10 factor modification may be used until the virtual machine exceeds a performance request which results in the web browser initiating a message to the web application and controllers of the virtual machine. This modification in turn creates a message driven entity bean that contains the request which is transferred to a rules engine. The rules engine sends a request to gather a historical period of information to the web browser . Such historical information may be for a period of 1 to 90 days. The rules engine not shown may be part of creation engine and or EJBs .

The rules engine message is sent to a database not shown to gather the data tables requested. The database sends the data back to the rules engine. The rules engine factors the data resulting in a recommendation to increase or decrease the allocation for each of the performance threshold criteria which may include for example CPU utilization memory utilization data storage utilization and network resource utilization.

The resource modification recommendation is created by the creation engine which may also be referred to as a rules engine . The rules engine may perform averaging the actual threshold observed by the service tier threshold integer 0 100 scale . The average is taken from metrics observed while the virtual machine is observed in its normal operating range. If no normal range is observed than the rules engine will increment the recommended change by increasing or decreasing the allocated resource s by 20 until a normal range is observed over a period of 24 hours. According to one example the recommended increase or decrease is only 10 for a period following 24 hours if the data gathered does contain normal range input data.

A proxy agent not shown may be part of the local agent that is used to collect data. In operation the proxy agent collects data from the virtual infrastructure management provider. The user will utilize the default thresholds or adjust them as deemed necessary. Thresholds are used by the state and profiling engine for tracking the state of the nodes that make up the components for a business application process. The inventory in the database may be updated by the proxy agent with a list of virtual machines storage hosts and network devices.

The agent may be deployed via the physical hosts connected directly to the virtual machine s O S. The state and profiling engine assigns the state of the various network components and receives additional input from the proxy agent to factor into the state e.g. alarms network and communicates with relationship status etc. and updates the RDF API knowledge base ontologies to reflect the assignments. The agent tracks executable applications to see what other nodes are communicating with the virtual machines VMs in the enterprise.

The network traffic analysis engine determines which executable applications and services are communicating with other nodes that constitute a communicates with relationship. A determination may be made as to whether any pairs of nodes have a communicates with relationship. Upon the assignment of a communicates with relationship to the ontology of a node and its direct and indirect relationships the state and profiling engine assigns the group of nodes as a service group. 

The RDF API knowledge base stores an ontology for each individual node. The model and structure the system uses to create and update the knowledge base is contained within the ontology web language OWL file present on the application server . The state and profiling engine tracks the state continually of the components and receives additional input from the proxy agent to factor into the state e.g. alarms network and Communication with relationship status .

The user may identify a service group of network nodes as a business application service group BASG by selecting a name for the group of nodes and the executables that are the basis for the communicates with relationship. The user may also add nodes that the system did not auto detect as a component of the service group. Those added nodes will be recorded and stored in the ontology model .

A determination may then be made as to whether the user has assigned additional nodes and or names to the service group. The ontology itself provides the direct and indirect dependency information of the nodes that the SPARQL query engine requires to infer the impact a change in state will have on the rest of the service group. For instance if a storage device s component state is changed to RED because it is almost full e.g. only two gigabytes left of a 1500 gigabyte memory then this may cause the physical host to start the paging memory which will effect the performance of any and all virtual machines running on that physical host.

The SPARQL query engine parses the service group ontology for the components that have a communicates with relationship which forms the basis for a primary application. The state and profiling engine tracks the state of the BASG by requesting the current state from the RDF knowledge base and updating the ontology when any new messages are received from the business logic EJB factory . The ontology itself provides the direct and indirect dependency information that the SPARQL query engine requires to infer the impact a change in state will have on the rest of the BASG. SPARQL query engine parses the BASG ontology for the components that have a communicates with relationship which forms the basis for a primary application.

For example SPARQL query engine provides a list of candidate BASG members for base lining and adjusting what may be needed to achieve normal acceptable performance levels. By parsing the BASG ontology for primary applications that have communicates with relationships with virtual machines that have operated in a normal level of threshold for 3 consecutive business cycles a list of qualifying components may be produced. SPARQL query engine may parse the BASG ontology to determine the components that have a communicates with relationship. Such components may be used to form the basis for a primary application. SPARQL query engine may generate a list of virtual machine and BASG member pairing recommendations.

Web application server may receive the message to survey the virtual machines for their CPU and or memory usage over the past 30 days. Web application server may send a request to the state and profiling engine to compile the usage data from the database. The state and profiling engine sends a message to the business logic that compiles the database query. The business logic generates an entity Java Bean EJB based query that includes a request for CPU and memory usage data for the last 30 days.

A ranking may be performed by the SPARQL query engine . The ranking may be performed by sorting a list of the observed performance metrics averaged over time. The best candidate may be generated as being available on top of the generated list. The user may drag and drop the best candidate virtual machine to create a pair with the BASG. As a result of the pairing operation the next available candidate becomes the top candidate.

The performance data is averaged over the total number of virtual machines VMs returned to create the ranking list. The ranked virtual machines are then assigned a profile by the state and profiling engine . The profiles may include high availability high capacity high speed moderate capacity moderate speed moderate availability low capacity low speed and low availability. The VMs that are operating closest to within the thresholds are ranked in order with the closest matched VM placed on top or in first position in the table of . The breakpoints may be established as the points that the threshold metrics dictate the profile characteristics.

Once all of the virtual machines have been assigned a profile based on their usage the state and profiling engine sends this list via a profile EJB to the RDF API knowledge base . Once completed the system initiates the process to compile a candidate list of BASG dependencies such as CPU usage uptime memory usage and network device usage. The virtual machines that reside in the described ontological structures are then processed for the BASG candidate process which may be initiated by the state and profiling engine .

The state and profiling engine sends a JMS message to the business logic to compile a list of candidate hosts networks and storage groups that are configured within the presently operating BASGs. The request is contained within a profile EJB. This results in a database query being generated for usage data for the last 30 days from the database. The business logic sends a request to the RDF API knowledge base for state data for hosts network and storage roll up data for 24 hour roll ups for the last 30 days. The state data may contain warnings and or errors that resulted in a red state for certain network nodes. The usage and state information are sent back to the state and profiling engine where they are used to rank and profile the BASGs. The ranking is based on the service tier threshold performance results see .

The ranked BASGs are then assigned a profile by the state and profiling engine . The profiles are high availability high capacity high speed moderate capacity moderate speed moderate availability low capacity low speed and low availability. The breakpoints for the profiles match the service tier thresholds previously assigned by the system . The state information for each BASG is considered when assigning a profile. For example automatically assigning a low profile to any BASG that has been observed to have a warning and or error red indication for exceeding a service tier threshold by more than 20 based on a 24 hour data roll up for a the time period of 30 days.

Each of the virtual machines VMs may be ranked in the virtual machine profile process. Once all BASGs have been profiled the state and profiling engine may use a standard matching algorithm to pair VMs with BASGs. The ranked VMs are ranked and then sorted to be paired with the hosts that contain the matching BASG types see .

The state and profiling engine generates a report that details the recommended change in virtual machine assignments to BASGs. This list is formatted in XML to be utilized by an orchestration system and or to be completed manually by a user. A determination may be made as to whether the change in allocation was successful. Regardless the cycle of reassigning the VMs may be repeated every 30 days by default.

One example method of operation may include a method of assigning virtual machines operating in a network as illustrated in . The method of may be performed by processing logic that may comprise hardware e.g. circuitry dedicated logic programmable logic microcode etc. software such as instructions run on a processing device firmware or a combination thereof. In one embodiment the method is performed by a server e.g. application server of .

The method may include generating a list of the virtual machines currently operating in the network at operation . The method may also include surveying the virtual machines to determine their current resource usage data at operation and ranking the virtual machines based on their current resource usage data to indicate available resources of the virtual machines at operation . The method may further include assigning the virtual machines to at least one business application service group BASG that requires the available resources of the virtual machines at operation .

The exemplary computer system includes a processing device a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or Rambus DRAM RDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a secondary memory e.g. a data storage device which communicate with each other via a bus .

Processing device represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processing device may be a complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor processor implementing other instruction sets or processors implementing a combination of instruction sets. Processing device may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. Processing device is configured to execute instructions for performing the operations and steps discussed herein.

The computer system may further include a network interface device . The computer system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The secondary memory may include a machine readable storage medium or more specifically a computer readable storage medium on which is stored one or more sets of instructions embodying any one or more of the methodologies or functions described herein. The instructions may also reside completely or at least partially within the main memory and or within the processing device during execution thereof by the computer system the main memory and the processing device also constituting machine readable storage media.

The machine readable storage medium may also be used to store software performing the operations discussed herein and or a software library containing methods that call this software. While the machine readable storage medium is shown in an exemplary embodiment to be a single medium the term machine readable storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine readable storage medium shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term machine readable storage medium shall accordingly be taken to include but not be limited to solid state memories and optical and magnetic media.

Some portions of the detailed description above are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as receiving determining encrypting decrypting sending or the like refer to the actions and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical e.g. electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage devices.

Embodiments of the invention also relate to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct a more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.

The operations of a method or algorithm described in connection with the embodiments disclosed herein may be embodied directly in hardware in a computer program executed by a processor or in a combination of the two. A computer program may be embodied on a computer readable medium such as a storage medium. For example a computer program may reside in random access memory RAM flash memory read only memory ROM erasable programmable read only memory EPROM electrically erasable programmable read only memory EEPROM registers hard disk a removable disk a compact disk read only memory CD ROM or any other form of storage medium known in the art.

An exemplary storage medium may be coupled to the processor such that the processor may read information from and write information to the storage medium. In the alternative the storage medium may be integral to the processor. The processor and the storage medium may reside in an application specific integrated circuit ASIC . In the alternative the processor and the storage medium may reside as discrete components.

It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. Although the present invention has been described with reference to specific exemplary embodiments it will be recognized that the invention is not limited to the embodiments described but can be practiced with modification and alteration within the spirit and scope of the appended claims. Accordingly the specification and drawings are to be regarded in an illustrative sense rather than a restrictive sense. The scope of the invention should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

While preferred embodiments of the present invention have been described it is to be understood that the embodiments described are illustrative only and the scope of the invention is to be defined solely by the appended claims when considered with a full range of equivalents and modifications e.g. protocols hardware devices software platforms etc. thereto.

