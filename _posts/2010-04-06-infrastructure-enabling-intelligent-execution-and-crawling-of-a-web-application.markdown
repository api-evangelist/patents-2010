---

title: Infrastructure enabling intelligent execution and crawling of a web application
abstract: In one embodiment, a method includes accessing a structured document of a network application, processing the structured document to generate a model representation of the structured document, tracking one or more interactions occurring during the processing of the structured document, the one or more interactions including one or more outgoing requests transmitted by the one or more computing systems or incoming responses received by the one or more computing systems, and generating a behavior model of the web application based on one or more of the interactions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09436763&OS=09436763&RS=09436763
owner: Facebook, Inc.
number: 09436763
owner_city: Menlo Park
owner_country: US
publication_date: 20100406
---
The present disclosure relates generally to Web applications and more particularly to generating behavior models of Web applications.

Conventionally when a request for a web page or other structured document transmitted by a client device is received by a server or computing system hosting the web page the hosting system typically generates a base web page in the form of a Hyper Text Markup Language HTML Extensible Markup Language XML or other web browser supported structured document. The generated structured document is then transmitted in a response to the requesting client via a Hypertext Transfer Protocol HTTP or other suitable connection for rendering at the client device. The structured document may include one or more executable scripts resources e.g. a JavaScript script or resource a Cascading Style Sheet CSS resource an image a video etc. or references to such resources embedded within the transmitted document. By way of example a resource embedded in an HTML document may generally be included or specified within a script element image element or object element among others depending on the type of resource. The element referencing or specifying the resource may include a source attribute e.g. src identifying a location of the resource to the client requesting the web page. Typically upon receipt of the response the web browser or other client application running at the client device executes various scripts constructs a document object model DOM representation of the received structured document and requests the resource s which may be at one or more other external locations embedded in the document.

Particular embodiments relate to an infrastructure or platform hereinafter infrastructure and platform may be used interchangeably that enables intelligent execution and crawling of a dynamic network or web application hereinafter network application and web application may be used interchangeably . Various portions of such a platform may be implemented via a hardware architecture or software framework that enables various software components or processes to implement particular embodiments. The platform may include one or more hardware or software components one or more of which may be located or embodied in one or more consolidated or distributed computing systems. In particular embodiments portions of the platform may embody a headless browser application capable of crawling and actually executing JavaScript or other executable code segments used to serve implement or render a dynamic web application. In particular embodiments outgoing requests incoming responses or other events occurring as a result of executing a dynamic web application are tracked and logged. In particular embodiments uniform resource locators URLs associated with outgoing requests or incoming responses including but not limited to requests transmitted to an advertisement ad network or ad server or ads received from an ad network or ad server may be logged in a database. In some implementations the platform after a web page has finished loading a structured document can execute rule based scripts that scan attributes of the loaded document and enumerate various attributes of the page that match the rule set and store them for further analysis. In some implementations the platform allows for the configuration of scripts that cause the platform to navigate and take actions with respect to a series of pages such as logging in to a site with a set of credentials and then navigating to a particular web page. Particular embodiments further relate to a headless browser capable of generating a model representation of a web application scripting or querying against the model representation and generating a behavioral model of the web application.

In various example embodiments one or more described web pages or web applications may be associated with a social networking system or social networking service. However alternate embodiments may have application to the retrieval and rendering of structured documents or web applications hosted by any type of network addressable resource or web site. As used herein a user may be an individual a group or an entity such as a business or third party application . Additionally as used herein or may imply and as well as or that is or does not necessarily preclude and unless explicitly stated or implicitly implied.

Particular embodiments may operate in or in conjunction with a wide area network environment such as the Internet including multiple network addressable systems. illustrates an example network environment in which various example embodiments may operate. Network cloud generally represents one or more interconnected networks over which various systems and hosts described herein may communicate. Network cloud may include packet based wide area networks such as the Internet private networks wireless networks satellite networks cellular networks paging networks and the like. As illustrates particular embodiments may operate in conjunction with a network environment comprising social networking system one or more third party web application servers one or more ad network servers or one or more client devices . Client devices web application servers and ad network servers may be operably connected to the network environment and network cloud via a network service provider a wireless carrier a set of routers or networking switches or any other suitable means.

Each client device may generally be a computer or computing device including functionality for communicating e.g. remotely over a computer network. Client device may be a desktop computer laptop computer personal digital assistant PDA in or out of car navigation system smart phone or other cellular or mobile phone or mobile gaming device among other suitable computing devices. Client device may execute one or more client applications such as a web browser e.g. MICROSOFT WINDOWS INTERNET EXPLORER MOZILLA FIREFOX APPLE SAFARI GOOGLE CHROME AND OPERA etc. to access and view content over a computer network. In particular implementations the client applications allow a user of client device to enter addresses of specific network resources to be retrieved such as resources hosted by social networking system . These addresses can be Uniform Resource Locators URLs . In addition once a page or other resource has been retrieved the client applications may provide access to other pages or records when the user clicks on hyperlinks to other resources. By way of example such hyperlinks may be located within the web pages and provide an automated way for the user to enter the URL of another page and to retrieve that page.

In one example embodiment social networking system comprises computing systems that allow users at client devices to communicate or otherwise interact with each other and access content such as user profiles as described herein. Social networking system is a network addressable system that in various example embodiments comprises one or more physical servers or hereinafter referred to collectively as servers as well as data store as illustrated in . The one or more physical servers are operably connected to computer network via by way of example a set of routers or networking switches . In an example embodiment the functionality hosted by the one or more physical servers may include web or HTTP servers FTP servers as well as without limitation web pages and applications implemented using Common Gateway Interface CGI script PHP Hyper text Preprocessor PHP Active Server Pages ASP Hyper Text Markup Language HTML Extensible Markup Language XML Java JavaScript Asynchronous JavaScript and XML AJAX and the like.

Physical servers may host functionality directed to the operations of social networking system . By way of example social networking system may host a website that allows one or more users at one or more client devices to view and post information including internal or external hypertext links as well as communicate with one another via the website. Hereinafter servers may be referred to as server although server may include numerous servers hosting for example social networking system as well as other content distribution servers data stores and databases. Data store may store content and data relating to and enabling operation of the social networking system as digital data objects. A data object in particular implementations is an item of digital information typically stored or embodied in a data file database or record. Content objects may take many forms including text e.g. ASCII SGML HTML images e.g. jpeg tif and gif graphics vector based or bitmap audio video e.g. mpeg or other multimedia and combinations thereof. Content object data may also include executable code objects e.g. games executable within a browser window or frame podcasts etc. Logically data store corresponds to one or more of a variety of separate and integrated databases such as relational databases and object oriented databases that maintain information as an integrated collection of logically related records or files stored on one or more physical systems. Structurally data store may generally include one or more of a large class of data storage and management systems. In particular embodiments data store may be implemented by any suitable physical system s including components such as one or more database servers mass storage media media library systems storage area networks data storage clouds and the like. In one example embodiment data store includes one or more servers databases e.g. MySQL and or data warehouses.

Data store may include data associated with different social networking system users or client devices . In particular embodiments the social networking system maintains a user profile for each user of the system . User profiles include data that describe the users of a social network which may include for example proper names first middle and last of a person a trade name and or company name of a business entity etc. biographic demographic and other types of descriptive information such as work experience educational history hobbies or preferences geographic location and additional descriptive data. By way of example user profiles may include a user s birthday relationship status city of residence and the like. The system may further store data describing one or more relationships between different users. The relationship information may indicate users who have similar or common work experience group memberships hobbies or educational history. A user profile may also include privacy settings governing access to the user s information is to other users. In particular embodiments the social networking system maintains in data store a number of objects for the different kinds of items with which a user may interact while accessing social networking system . In one example embodiment these objects include user profiles application objects and message objects such as for wall posts emails and other messages . In one embodiment an object is stored by the system for each instance of its associated item. These objects and the actions discussed herein are provided for illustration purposes only and it can be appreciated that an unlimited number of variations and features can be provided on a social networking system .

When a user at a client device desires to view a particular web page hereinafter also referred to as target structured document hosted by social networking system or a web application hosted by a web application server and made available in conjunction with social networking system the user s web browser or other document rendering engine or suitable client application formulates and transmits a request to social networking system . The request generally includes a URL or other document identifier as well as metadata or other information. By way of example the request may include information identifying the user such as a user ID as well as information identifying or characterizing the web browser or operating system running on the user s client computing device . The request may also include location information identifying a geographic location of the user s client device or a logical network location of the user s client device. The request may also include a timestamp identifying when the request was transmitted.

A web page or resource embedded within a web page which may itself include multiple embedded resources may include data records such as plain textual information or more complex digitally encoded multimedia content such as software programs or other code objects graphics images audio signals videos and so forth. One prevalent markup language for creating web pages is the Hypertext Markup Language HTML . Other common web browser supported languages and technologies include the Extensible Markup Language XML the Extensible Hypertext Markup Language XHTML JavaScript Cascading Style Sheet CSS and frequently Java. By way of example HTML enables a page developer to create a structured document by denoting structural semantics for text and links as well as images web applications and other objects that can be embedded within the page.

By way of background HTML enables developers to embed objects or resources including web applications widgets images or videos within a structured document such as a web page. Generally an HTML structured document is written in the form of HTML elements that consist of tags surrounded by angle brackets within the structured document content which act as indicators to a web browser rendering the structured document as to how the document is to be interpreted by the web browser and ultimately presented on a user s display. By way of example HTML elements may represent headings paragraphs hypertext links embedded media and a variety of other structures. HTML can include or can load scripts in languages such as JavaScript which affect the behavior of HTML processors such as conventional web browsers and Cascading Style Sheets CSS which define the appearance and layout of text and other content.

Generally a web application is an application that may be accessed via a web browser or other client application over a network or a computer software application that is coded in a web browser supported language and sometimes reliant on a web browser to render the application executable. Web applications have gained popularity largely as a result of the ubiquity of web browsers the convenience of using a web browser launched at a remote computing device as a client sometimes referred to as a thin client and the corresponding ability to update and maintain web applications without necessarily distributing and installing software on remote clients. Often to implement a web application the web application requires access to one or more resources provided at a backend server of an associated website. Additionally web applications may often require access to additional resources associated with other applications.

A Web page may be delivered to a client as a static structured document however through the use of Web elements embedded in the page e.g. executable JavaScript code segments an interactive experience may be achieved with the page or a sequence of pages. During a user session at the client device the Web browser interprets and displays the pages and associated resources received or retrieved from the Web application or Website hosting the Web page as well as potentially resources from other Websites. By way of example upon receipt of an HTML structured document by a Web browser the Web browser may execute embedded calls including JavaScript code segments which then call or request resources from third party hosts or Websites. Such embedded and executed JavaScript code may also modify the Document Object Model DOM representation of the page and perform redirects described below . For example a first request for a given web page may actually initiate a process where a browser receives a series of pages each of which redirect the browser to another web page within or outside of the domain of the previous web page before the browser settles on a final landing page. As described below in particular embodiments such modifications e.g. through JavaScript and redirects may be monitored and tracked.

Typically a web browser used to access a webpage or structured document for rendering at a client device obtains the required resources e.g. in response to executing JavaScripts or other calls embedded in a requested and received structured document and which may include HTML or XML code JavaScript scripts or content including text audio and video for rendering the webpage from one or more servers and then constructs a browser representation of the webpage. One prevalent browser representation is the DOM representation of the webpage. The web browser then renders the page in the particular client viewing window of the browser utilizing the DOM or other suitable representation. The DOM may be considered an application programming interface API for by way of example valid HTML and well formed XML documents but the DOM in and of itself is foremost a representational model for structured data. Languages or code segments like JavaScript may be used to access the DOM in the context of a client application such as a browser. A DOM representation of a structured document defines the logical structure of the document as well as the way the document is accessed and manipulated. The structure of a DOM representation is generally based on an object structure that closely resembles the logical structure of the document e.g. webpage it models. The DOM representation is generally hierarchical in nature. More particularly by way of example a DOM representation typically has a logical structure that resembles a tree or group of trees each having branches that link DOM nodes of a plurality of DOM levels. In such a manner a given DOM node at one DOM level of the DOM hierarchy may have hereinafter also include comprise or be associated with one or more child nodes each logically arranged in a lower child DOM level that in turn each have one or more of their own child nodes logically arranged in a still lower grandchild DOM level and so on. As those of skill in the art will appreciate as one proceeds logically through the hierarchy to lower DOM levels the corresponding DOM nodes in those lower levels become more detailed in their representation of ever smaller logical portions of the corresponding structured document. In this way all the text and other content specified in the underlying HTML and or other code is translated by the browser into DOM nodes or elements of finer and finer granularity. By way of example at a first level the entire document page may be represented by a DOM root node. Progressing down the tree the document may include a picture video interactive window block of text and or other content including scripts and various calls to APIs represented in finer and finer detail by subsequent level nodes.

Social networking system may include a multitude of features with which users at remote clients may interact during user sessions. In particular embodiments these features may be implemented as web applications and may utilize JavaScript and CSS resources requested from servers third party web application servers as well as other external servers or data stores including ad network servers . The web applications or resources may be embedded in various underlying or base web pages served to remote clients such as in frames or iFrames sections or divs and the like as described in more detail below. The web applications offered in conjunction with social networking system may include internal web applications hosted by social networking system as well as external third party web applications e.g. games hosted by web application servers through which other ad network servers may be accessed. By way of example the social networking system hosted by Facebook Inc. of Palo Alto Calif. includes or supports such internal web applications as the wall a space on every user s profile page that allows friends to post messages for the user to see pokes which allows users to send a virtual poke to each other a notification that tells a user that they have been poked photos where users can upload albums and photos status which allows users to inform their friends of their whereabouts and actions streams which may appear in multiple locations on the site including on every user s homepage which include information about the activities of the user s connections notes a blogging feature that allows tags and embeddable images as well as blogs imported from other blogging websites and services as well as a large number of third party applications for which the website serves as a platform.

As illustrates social networking system client devices web application servers and ad networks may communicate with one another via computer network . In particular embodiments social networking system provides a platform by which third party application developers can create applications that are hosted on respective web application servers . In particular embodiments web application developers creating web applications for use by users of social networking system may create such applications using the Facebook Markup Language FBML developed by Facebook Inc. of Palo Alto Calif. Third party application developers may construct applications that hook into one or more of several social networking system integration points including user profiles profile actions canvas pages described below News Feeds and Mini Feeds. FBML is an evolved subset of HTML with some elements removed and others which have been added that may be specific to Facebook.

When a third party application developer creates a web application for use by users of social networking system the developers may decide whether to configure the web application using for example IFrames or FBML as the default for the application s canvas base pages. A canvas page is the address where the web application is located or cached within social networking system . When user s access a given web application via social networking system the users are taken to the canvas page which serves as a base page that effectively hosts the web application and in which the web application is rendered and displayed.

By way of example referring to an IFrame canvas page such as that illustrated in when a user loads the application s canvas page social networking system generates a web page in the form of a structured document that contains the social networking system web interface chrome surrounding the web application s IFrame that is the web application content is rendered inside IFrame . Generally the IFrame has a URL to the respective web application s callback URL. Social networking system may also append a number of parameters to the callback URL. These parameters may provide information about which user is logged into the application and verify that the request is indeed coming through social networking system among other information.

As additionally illustrated in the web application rendered in IFrame may also include an embedded call to an ad network server . Generally web application developers monetize their web applications by selling advertising space within their IFrame windows. By way of example Web application IFrame may include an embedded IFrame used to render an ad. To increase the relevancy of such ads or maximize profit the ad rendered in IFrame may be targeted to the specific user the specific web application or targeted based on some other criteria. The ability to target ads to specific users or groups of users or to specific content generally increases the relevancy and effectiveness of the advertising. An advertisement ad as used herein may be considered content e.g. text graphical video etc. that is embedded within or rendered in conjunction with a base page which may include one or more web applications. In the following described embodiments ads may be received from ad networks in response to ad requests embedded within web applications hosted by web application servers and rendered in conjunction with base pages hosted by social networking system and transmitted to a client device as a structured document. An ad network may generally be a vendor or platform that serves ads from an ad inventory in response to ad requests from a content provider such as a web application developer or social networking system . In some embodiments ad requests may include one or more parameters related to social networking system the user of the social networking system e.g. the user s sex age demographic etc. or the web application making the ad request to specify the intended target of the ad so that the ad network server can return a more relevant rich or targeted ad to the user. In alternate embodiments ad requests may not include any information about the user or social networking system that would identify the user to intentionally prevent such identifying information from being transmitted to ad networks .

Referring to an example process for serving an IFrame based web application canvas page will now be described. First an initial request is transmitted from the user s client device or other client application as will be described later particular embodiments relate to a client emulator that emulates a test fake user and headless browser application to social networking system which receives the request at . By way of example the request may generally include the web application s canvas page URL the location of the web application canvas page in social networking system which may resemble something like http apps.facebook.com application name canvas page. Social networking system then transmits a response at to the user s client device that includes a base page in the form of a structured document including social networking system chrome content such as borders and side menus. The structured document also includes an embedded code segment that then makes and transmits a request at for the web application IFrame to the web application s associated web application server . The web application server may then make an API call request that is transmitted at to social networking system . Social networking system then transmits an API response to web application server at . Web application server then transmits the IFrame response that includes the web application to the user s client device at for rendering by a browser or other client application in IFrame in conjunction with the rendering of the remaining portions of web page . As the web application in IFrame is executed and rendered the web application may make a call to one or more ad network servers requesting one or more ads for rendering in ad IFrame .

Referring now to an example process for serving an FBML based application canvas page will now be described. First an initial request is transmitted from the user s client device or other client again as will be described later particular embodiments relate to a client emulator that emulates a test fake user and headless browser application to social networking system which receives the request at . Again the request includes the web application s canvas page URL which may resemble something like http apps.facebook.com application name canvas page. However rather then sending a response immediately social networking system may transmit an HTTP POST at to a callback URL on the web application s respective web application server where the application is hosted e.g. http www.applicationserver.com callbackurl canvaspage . In this manner parameters are sent as part of the POST request rather than as part of the URL. More particularly after the initial request is received by social networking system social networking system then transmits a request for FBML at to web application server . In some cases web application server then transmits an API call at to social networking system which then responds to web application server with an API response at . Web application server then formulates and transmits an FBML response with the web application content and resources to social networking system which receives the FBML response at . Social networking system then translates the FBML into HTML at and subsequently transmits an HTML response at including the base canvas page and web application content and resources to the requesting client for rendering the web application and surrounding canvas. As the web application is executed and rendered the web application may make a call to one or more ad network servers requesting one or more ads for rendering in conjunction with the web application.

As described above particular embodiments relate to an infrastructure or platform that enables intelligent execution and crawling of a dynamic network or web application. Particular embodiments further relate to a headless browser capable of generating a model representation of a web application scripting against the model representation and generating a behavioral model of the web application. In particular embodiments portions of the platform may embody a novel headless browser application capable of crawling and actually executing JavaScript or other executable code segments used to implement and render a web application. In particular embodiments outgoing requests incoming responses or other events occurring as a result of serving and executing a web application are tracked and logged. In particular embodiments uniform resource locators URLs associated with outgoing requests or incoming responses including but not limited to requests transmitted to and from social networking system web application servers or ad network servers may be logged in a database. By way of example given that third party web application developers are using third party ad networks to serve ads in order to monetize the developer s web application it may be desirable to have knowledge of which ad networks are serving which ads and for which web applications.

However browser security mandates that parent documents such as web application canvas page do not have the ability to look inside the underlying code of an IFrame from another domain such as a web application IFrame or ad IFrame . However this does not hold true for a web browser which needs details of such code to render the IFrames or other web page portions. Additionally conventional web crawlers do not have the ability to actually execute JavaScript and other embedded executable code segments. Hence conventional web crawlers cannot reach deep within a web application. Furthermore conventional web crawlers cannot navigate through most redirects. By way of example a conventional web crawler may be able to parse and recognize HTML Meta Refresh redirects but are unable to parse recognize and navigate through JavaScript redirects and Flash redirects. URL redirection also known as URL forwarding and the similar technique of domain redirection also known as domain forwarding are techniques used generally for making a given web page available under many URLs. While there are several legitimate reasons for implementing URL redirection URL redirection is sometimes used as a part of phishing attacks. Phishing is generally considered a criminally fraudulent process of attempting to acquire sensitive or personal information such as usernames passwords or credit card details by masquerading as a trustworthy entity. By way of example JavaScript offers several ways to display a different page in the current browser window. Another example is a frame redirect which can be achieved by creating a single HTML frame that contains the target page. For a frame redirect the browser displays the URL of the frame document and not the URL of the target page in the URL bar. Such a technique may be used with fraudulent intentions to conceal a phishing site as part of website spoofing. Additionally it should be noted that one redirect may then lead to another redirect. As a conventional web crawler does not actual execute embedded executable code segments such as JavaScript convention web crawlers are not able to navigate redirects and discover fraudulent or scrupulous web pages.

Thus in particular embodiments social networking system includes or is coupled to an infrastructure or platform that enables intelligent crawling and actual execution of web pages and web applications and which may log information that may be used to discover web application providers and ad network servers that may not deliver ads according to service agreements in line with social networking system or which otherwise perform scrupulously. In particular embodiments social networking system includes or is coupled to a primary secondary distributed computing system that includes primary computing system primary and one or more secondary computing systems secondary . Each secondary is capable of running one or more crawler processes . In particular embodiments each crawler process may effectively behave as or similar to a headless browser e.g. a browser capable of navigating and rendering web applications and pages without requiring a physical monitor or display in connection with the browser and which uses test user credentials generated or stored in user credential database to crawl web applications scheduled by master .

More particularly web application database stores a list or queue of web applications to be crawled by crawler processes . In particular embodiments primary serves as a scheduler that instructs crawler processes to crawl web applications listed in database . In particular embodiments each crawler process is similar to a headless browser in that a monitor or other display or visual interface is not required. In particular embodiments each crawler process is implemented with the C code language or or as well as some or all of the Cross Platform Component Object Model XPCOM . XPCOM is a cross platform component model from MOZILLA enabling programmers to plug their custom functionality into the framework and connect it with other components. XPCOM is a development environment that provides features such as component management file abstraction object message passing and memory management for cross platform software developers. In particular embodiments each crawler process is further implemented with some or all of the GECKO layout engine the layout engine of the MOZILLA FIREFOX web browser overtop of XPCOM. XPCOM makes the functionality of GECKO available as a series of components or reusable cross platform libraries than can be accessed or scripted from each crawler application . In addition given the browser functionality and libraries available to the crawler application such as a Javascript engine various rule based scripts can be created to scan the DOM and enumerate desired attributes of a web page such as identifying a form and enumerating its fields and buttons identifying a background image and hashing the image file to derive a value that can be compared to other images and the like.

Still further each crawler process effectively emulates a browser client at a client device and as such has browser privileged access to all the content accessible by a browser. Furthermore each crawler process may have access to computer network cloud either directly or through social networking system . Also in this way each crawler process may be completely unplugged from the user side in that in particular embodiments the crawler processes do not interact with real users of social networking system .

Referring now to a method for intelligently crawling and executing a web application and logging requests and responses during such crawling and executing will now be described. In particular embodiments the method begins at with primary querying at a specific crawler process running within a specific secondary . The query identifies a particular web application from web application database that primary instructs the crawler process to crawl using a specific set of test user credentials from user credential database . In particular embodiments each web application listed in web application database may be scheduled for crawling by primary on a periodic e.g. hourly daily weekly monthly etc. or other predetermined basis or on any other suitable basis. In particular embodiments web applications that have been identified to use less scrupulous ad network servers may be crawled more frequently than other web applications. In particular embodiments user credential database stores user credentials that do not refer to real users of social networking system that is these test or fake user credentials may be generated by programs known in the art. In particular embodiments the test user credentials for a given test or fake user allow the scheduled crawler process to login to a social networking system login page and access web pages and resources offered by social networking system . In particular embodiments the test user may even have a user profile hosted by social networking system in order to appear as a real user of social networking system to web application servers or ad network servers . In one implementation the actions of logging in and navigating to various pages can be implemented as Javascript code segments that the crawler process can execute. For example a programmer may write a script that defines an action sequence as to how the crawler process accesses and performs various operations on web pages such as logging into an account accessing various application pages and the like. The script can be written in Javascript which the crawler process can consume and execute to perform the required actions.

In particular embodiments using the test user credentials and web application URL specified in the query received from primary the scheduled crawler process may first login to a login page of social networking system at . In alternate embodiments no login step may be required. By way of example the test user may be preauthorized by social networking system or automatically granted access via crawler process . In particular embodiments the crawler process then attempts to access the specified web application by transmitting at a request for the web application s canvas page as for example described with reference to the flowcharts of . In other implementations the request can identify any arbitrary page the URL of which has been passed to the crawler process . In particular embodiments as the structured document in the form of structural document code and content including embedded scripts resources or identifiers for such resources is received and processed by crawler process crawler process generates at a model representation of the web application s canvas page. That is crawler process may generate the model representation at concurrently with or after various portions of the structured document are received from social networking system web application server or ad network . In particular embodiments the model representation is a DOM representation. Here it should be noted that in some embodiments there is no need to actually display the rendered DOM representation of the web application canvas page. However although the web application canvas page may not be rendered in a visual GUI on an actual physical display in particular implementations the DOM representation of the web application canvas page can be rendered into a framebuffer or other suitable memory location such as by way of example the open source X Virtual Frame Buffer Xvfb coupled with crawler and hence is still effectively rendered into memory. More particularly in certain implementations a framebuffer may be required for the DOM representation to be rendered into. In particular embodiments a framebuffer is advantageous as a framebuffer enables crawler process to take snapshots of the DOM representation that may then be permanently stored and hence available for actual visual viewing at a later time . Additionally in particular embodiments the entire DOM tree not necessarily just the DOM representation held in the framebuffer may be stored temporarily or permanently by crawler .

In some implementations the crawler process may log external interactions such as outgoing requests and responses as a structured document is being loaded and the model representation of the page is being generated . In particular embodiments as the structured document is being processed and the DOM representation is being generated crawler process tracks and logs e.g. in any suitable database at one or more interactions including outgoing requests transmitted as a result of executing embedded calls scripts or code segments as well as in some embodiments incoming responses received from web application server ad network or other locations e.g. in the case of redirects . In particular embodiments to perform the tracking logging crawler process can be constructed to take advantage of certain functions of an underlying browser application such as GECKO that handle network requests. For example the functions that handle network requests may support certain services on which another process or module may install hooks. When an event such as an outgoing request or incoming response occurs a call back function can be called in order for the crawler process to log the event. In particular embodiments the overlying programming layer is configured to track interactions such as by way of example all network requests made and transmitted by crawler process such as in response to crawler process executing calls scripts or other executable code segments embedded within the base page or the web application content itself. In particular embodiments the overlying programming layer may also monitor track or log incoming responses transmitted to or for the crawler process.

The crawler process after a page has been loaded may then initiate application of one or more rule sets that enumerate various features of the structured document as discussed below. For example initially loading in a first page such as an application canvas page or any other page may cause the crawler process to be redirected to one or more additional servers. Such redirections can be done in connection with Javascript or via HTTP redirection messages. In one implementation an page enumeration script can be triggered to execute in response to an onload event indicate that a page has loaded. In one implementation the page enumeration script or other process can check to see if there are any meta refreshes pending which signals a in impending redirection before initiating enumeration of the loaded page. In this manner the crawler process can log all external interactions initiated when the first URL was loaded and wait until a final landing page has been loaded after a series of possible redirections before analyzing the attributes of the page. In some implementations the crawler process further includes an overlying programming layer over the GECKO browsing layer that enables crawler process to inspect and script against the model DOM representation of the web application canvas page. In particular embodiments this overlying programming layer may be written largely in C as part of the crawler process that embeds GECKO using XPCOM. Additionally the overlying programming layer may incorporate a JavaScript layer and associated JavaScript rule set that compute or determine features of interest on the DOM and more generally can inspect everything the web application canvas is doing. In particular embodiments the overlying programming layer and particularly the JavaScript portion is also configured to capture state that is the state of the DOM after it has been rendered or throughout the rendering process. By way of example the overlying programming JavaScript layer of crawler process may be configured to take snapshots e.g. a DOM snapshot that captures all the interactions occurring as a result of loading the web application canvas page. In particular embodiments the interactions of interest may be observed with the C portion of the overlying programming layer while the state is captured using the JavaScript rule set described above. In particular embodiments the overlying JavaScript programming layer includes some or all of the JavaScript programming layer functionality written and provided by MOZILLA under the open source projected called SPIDERMONKEY.

The scripted rule sets that can be applied to enumerate various attributes of the page can vary considerably and can be customized depending on the goals for the analysis. For example some tracking processes can be used to police for so called phishing sites while other tracking processes can be used to track compliance with or otherwise monitor the activities of third party application providers and their respective ad networks. As discussed above one implementation allows for the scripted rules to be written in Javascript to take advantage of a Javascript engine such as SPIDERMONKEY. The rule set for example can be configured for example to scan the DOM for all forms irrespective of whether they are within frames. The rule set can enumerate some key features from within every form format each form as a Python parseable dictionary and return all these individual form enumerations as a python list. The following code segment is Javascript that illustrates a possible scripted rule set for identifying and enumerating the attributes of a form.

 feature.contains password False feature.contains submit False feature.doc password 1 feature.form action file E s ftware office 202003 FILES SPM 2010 search.php do process feature.window location http justa.phishsite.biz phish bonus.html feature.enum submit Go feature.action host feature.action href file E s ftware office 202003 FILES SPM 2010 search.php do process feature.action scheme file feature.contains password False feature.contains submit False feature.doc password 1 feature.form action file E s ftware office 202003 FILES SPM 2010 index.php feature.window location http justa.phishsite.biz phish bonus.html feature.enum submit feature.action host feature.action href file E s ftware office 202003 FILES SPM 2010 index.php feature.action scheme file feature.contains password True feature.contains submit False feature.doc password 1 feature.form action http justa.phishsite.biz logs.php feature.window location http justa.phishsite.biz phish bonus.html feature.enum submit Play Now feature.action host justa.phishsite.biz feature.action href http justa.phishsite.biz logs.php feature.action scheme http feature.contains password False feature.contains submit False feature.doc password 1 feature.form action file E s ftware office 202003 FILES SPM 2010 index.php feature.window location http justa.phishsite.biz chips bonus.html feature.enum submit feature.action host feature.action href file E s ftware office 202003 FILES SPM 2010 index.php feature.action scheme file 

The raw data output can be processed as set forth below to facilitate logging and querying of the data 

feature.form action file E s ftware office 202003 FILES SPM 2010 search.php do process feature.enum submit Go 

Each block under processed output is the enumeration for a specific form embodied in an example page. The enumeration script can also be extended by adding more enumerated features in the dictionary corresponding to each form. And the fact that all this happens in JavaScript in some implementations precludes any necessity to recompile and redeploy the code. In addition other scripts and rules can be implemented to apply certain transformative rules to various elements of the page. For example a rule can be defined to locate the background image of the page and to leverage the functional libraries of the browser to generate a hash signature of the resulting image. This hash signature can be compared to hash signatures of previously crawled pages or pages crawled in the future to identify trends and possible commonalities across pages and starting URLs.

In particular embodiments crawler generates at a behavior model of the web application based on all or a filtered set of the logged interactions and the enumerated features of the page. In particular embodiments the behavior model specifies the URL of the web application the URLs or Domain names of various resources for which requests were sent including requests for ads sent to ad networks the URLs or Domain names associated with various resources received from third party servers including ads from ad networks all or a portion of the HTML for the web application URL all or a portion of the raw text of the web application such as the raw and processed output described above among other desired information. In particular the behavior model provides a map of the outgoing requests including requests made for ads to ad networks by the web application as a result of crawler executing embedded calls within the web application content. In this way all of the domains where requests are sent from the web application for the particular test user over a number of scheduled crawls or even across test users although in particular embodiments the same test user is used in crawling a particular web application every time the web application is crawled in order to take advantage of and preserve previously downloaded cookies may be used to provide insight into what particular ad networks an particular web application is using. In one implementation a separate process such as a process hosted on a primary computing system may itself apply a rule set to the generated behavior model to determine whether the network application meets one or more requirements or is otherwise suitable. In addition various features of the page are also logged for further analysis and tracking

More particularly in some embodiments the logged data for a given web application may be transferred to Hadoop or other distributed computing platform for subsequent processing including filtering the data to ascertain which of the logged requests or associated URLs or Domain names correspond to ad networks and generating a second list or log of the ad networks. In particular embodiments this second log may then be queried against a list of known rogue scrupulous banned or otherwise in violation ad networks. Furthermore in some embodiments crawler may also capture in the behavior model various parameters sent to various domains especially ad network domains to determine if the web application or ad network providing the ad requested by the web application is passing any data received from social networking system about the test user to other parties. Still further the enumerated attributes of a landing page for example can be compared against one or more profiles to possibly identify a phishing site or some other unauthorized or undesirable application.

Still other enabled embodiments may include the ability to record log or index how a web application appears or functions at particular point in time to track changes over a determined window of time. Other embodiments may include automatically mapping out the flow paths of a given web application including recording logging or indexing how an application s canvas page appears and what its functionality is at various points in a possible user flow. Still other embodiments may relate to a socially enabled search index that includes elements of how one or more applications interact with or appear to logged in users. Still other embodiments may include mapping or tracking variations in application functionality that depend on who the logged in user is or various categories of demographics or other characteristics or attributes available from the user profiles. Yet other embodiments may include indexing mapping or tracking how an application s functionality varies over geographic location browser type or type of computing device for example.

As described herein any of the described processes or methods can be implemented as a series of computer readable instructions embodied or encoded on or within a tangible data storage medium that when executed are operable to cause one or more processors to implement the operations described above. For smaller datasets the operations described above can be executed on a single computing platform or node. For larger systems and resulting data sets parallel computing platforms can be used such as for example using Hive to accomplish ad hoc querying summarization and data analysis as well as using as incorporating statistical modules by embedding mapper and reducer scripts such as Python or Perl scripts that implement a statistical algorithm. Other development platforms that can leverage Hadoop or other Map Reduce execution engines can be used as well. The Apache Software Foundation has developed a collection of programs called Hadoop which includes a a distributed file system and b an application programming interface API and corresponding implementation of MapReduce.

Multiple nodes also facilitate the parallel processing of large databases. In some embodiments a master server such as receives a job from a client and then assigns tasks resulting from that job to slave servers or nodes such as servers which do the actual work of executing the assigned tasks upon instruction from the master and which move data between tasks. In some embodiments the client jobs will invoke Hadoop s MapReduce functionality as discussed above.

Likewise in some embodiments a master server such as server governs a distributed file system that supports parallel processing of large databases. In particular the master server manages the file system s namespace and block mapping to nodes as well as client access to files which are actually stored on slave servers or nodes such as servers . In turn in some embodiments the slave servers do the actual work of executing read and write requests from clients and perform block creation deletion and replication upon instruction from the master server.

While the foregoing processes and mechanisms can be implemented by a wide variety of physical systems and in a wide variety of network and computing environments the server or computing systems described below provide example computing system architectures for didactic rather than limiting purposes.

The elements of hardware system are described in greater detail below. In particular network interface provides communication between hardware system and any of a wide range of networks such as an Ethernet e.g. IEEE 802.3 network a backplane etc. Mass storage provides permanent storage for the data and programming instructions to perform the above described functions implemented in the servers whereas system memory e.g. DRAM provides temporary storage for the data and programming instructions when executed by processor . I O ports are one or more serial and or parallel communication ports that provide communication between additional peripheral devices which may be coupled to hardware system .

Hardware system may include a variety of system architectures and various components of hardware system may be rearranged. For example cache may be on chip with processor . Alternatively cache and processor may be packed together as a processor module with processor being referred to as the processor core. Furthermore certain embodiments of the present invention may not require nor include all of the above components. For example the peripheral devices shown coupled to standard I O bus may couple to high performance I O bus . In addition in some embodiments only a single bus may exist with the components of hardware system being coupled to the single bus. Furthermore hardware system may include additional components such as additional processors storage devices or memories.

In one implementation the operations of the embodiments described herein are implemented as a series of executable modules run by hardware system individually or collectively in a distributed computing environment. In a particular embodiment a set of software modules and or drivers implements a network communications protocol stack parallel computing functions browsing and other computing functions optimization processes and the like. The foregoing functional modules may be realized by hardware executable modules stored on a computer readable medium or a combination of both. For example the functional modules may comprise a plurality or series of instructions to be executed by a processor in a hardware system such as processor . Initially the series of instructions may be stored on a storage device such as mass storage . However the series of instructions can be tangibly stored on any suitable storage medium such as a diskette CD ROM ROM EEPROM etc. Furthermore the series of instructions need not be stored locally and could be received from a remote storage device such as a server on a network via network communications interface . The instructions are copied from the storage device such as mass storage into memory and then accessed and executed by processor .

An operating system manages and controls the operation of hardware system including the input and output of data to and from software applications not shown . The operating system provides an interface between the software applications being executed on the system and the hardware components of the system. Any suitable operating system may be used such as the LINUX Operating System the Apple Macintosh Operating System available from Apple Computer Inc. of Cupertino Calif. UNIX operating systems Microsoft Windows operating systems BSD operating systems and the like. Of course other implementations are possible. For example the functions described herein may be implemented in firmware or on an application specific integrated circuit.

Furthermore the above described elements and operations can be comprised of instructions that are stored on storage media. The instructions can be retrieved and executed by a processing system. Some examples of instructions are software program code and firmware. Some examples of storage media are memory devices tape disks integrated circuits and servers. The instructions are operational when executed by the processing system to direct the processing system to operate in accord with the invention. The term processing system refers to a single processing device or a group of inter operational processing devices. Some examples of processing devices are integrated circuits and logic circuitry. Those skilled in the art are familiar with instructions computers and storage media.

The present disclosure encompasses all changes substitutions variations alterations and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend. Similarly where appropriate the appended claims encompass all changes substitutions variations alterations and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend. By way of example while embodiments of the present disclosure have been described as operating in connection with a social networking website various embodiments of the present invention can be used in connection with any communications facility that supports web applications. Furthermore in some embodiments the term web service and web site may be used interchangeably and additionally may refer to a custom or generalized API on a device such as a mobile device e.g. cellular phone smart phone personal GPS personal digital assistance personal gaming device etc. that makes API calls directly to a server.

