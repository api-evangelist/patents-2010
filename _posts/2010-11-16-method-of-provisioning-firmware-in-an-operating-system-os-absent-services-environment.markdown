---

title: Method of provisioning firmware in an operating system (OS) absent services environment
abstract: Methods and apparatuses for re-instantiating a firmware environment that includes one or more firmware functions available at pre-boot time when transitioning the computing device from a first, higher power consumption state to a second, lower power consumption state. The firmware environment determines whether a cryptographic signature on a firmware volume is verified; whether hardware resources of the computing device requested by a manifest of the firmware volume are available; and whether a firmware module of the firmware volume is compatible with installed firmware of the firmware environment. If so, the firmware environment reserves space in a memory to accommodate resources used by the firmware module, and executes the firmware module with the computing device in the second, lower power consumption state.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08607040&OS=08607040&RS=08607040
owner: Intel Corporation
number: 08607040
owner_city: Santa Clara
owner_country: US
publication_date: 20101116
---
This disclosure relates generally to management of computing devices and more specifically to provisioning firmware in a firmware environment of a computing device independent of an operating system of the computing device while the computing device remains in a low power consumption state.

Various mechanisms exist for reducing power consumption of computing devices. Standard technology for power management is specified in Advanced Configuration and Power Interface ACPI version 4.0 which may be found on the public Internet at URL www acpi info note that periods have been replaced with dashes to avoid unintentional hyperlinks in this document . ACPI is a standard that most computer systems currently use for power management and describes how a computing system looks to the operating system OS . Power management capabilities enable a computing device both at component and system level to transition its operating state between a higher power consumption state and a lower power consumption state. These modes of operation are often respectively called wake and sleep states or modes. The ACPI Specification defines seven states which a computing device may typically be in. For example state S3 S3 may be typically referred to as standby sleep also referred to herein as sleep mode or suspend to RAM. State S5 S5 may be referred to as shutdown or off. 

A number of events may cause a computing device to transition between sleep mode and wake mode i.e. wake up or go to sleep. For instance a sleep event which triggers a computing device to transition to sleep might include user inactivity or user selection. When a computing device transitions to sleep many of the computing device components e.g. main processor such as central processing unit CPU volatile memory disk drives for mass storage and so forth may also go to sleep. Once asleep a computing device may wake upon occurrence of a wake event. A wake event may include for example a receiving by the computing device of input from a mouse or keyboard an e mail message or a query from a remote system administrator.

After a wake event is handled and before the OS runs again there is an opportunity for the firmware of the computing device to perform useful work without OS involvement.

Illustrative embodiments of the present invention include but are not limited to methods and apparatuses for provisioning firmware modules in a firmware environment of a computing device independent of the operating system of the computing device when the computing device remains in a low power consumption sleep mode.

Various aspects of the illustrative embodiments will be described using terms commonly employed by those skilled in the art to convey the substance of their work to others skilled in the art. However it will be apparent to those skilled in the art that alternate embodiments may be practiced with only some of the described aspects. For purposes of explanation specific numbers materials and configurations are set forth in order to provide a thorough understanding of the illustrative embodiments. However it will be apparent to one skilled in the art that alternate embodiments may be practiced without the specific details. In other instances well known features are omitted or simplified in order not to obscure the illustrative embodiments.

Further various operations will be described as multiple discrete operations in turn in a manner that is most helpful in understanding the illustrative embodiments however the order of description should not be construed as to imply that these operations are necessarily order dependent. In particular these operations need not be performed in the order of presentation. The phrase in one embodiment is used repeatedly. The phrase generally does not refer to the same embodiment however it may. The terms comprising having and including are synonymous unless the context dictates otherwise.

Referring now to in the embodiments shown a computing device may be initialized during a pre boot time by a firmware environment also referred to as firmware at . In various embodiments and as will be discussed in more detail below during this pre boot time the firmware may reserve a portion of memory or mailbox from which the firmware may later collect data at . Once pre boot initialization is complete control may be transferred to an operating system OS of the computing device to continue the boot process at . After OS or system boot the OS may then run or operate the computing device in a functional or wake mode at which includes a typically higher power consumption state associated with normal operations. The computing device may continue to operate in wake mode until where a sleep event causes the computing device to transition to sleep mode S3 which includes a lower power consumption state. As noted above sleep events may include a variety of events such as for example user selection or user inactivity.

After some time in various embodiments the computing device may receive a wake event. In some embodiments the wake event may include a network event such as an e mail configuration directive or other network transmission. In other embodiments the wake event may be a sensing of an input at an input device touching a keyboard of the computing device receiving a network packet of a certain type etc. Processing of wake events may be initiated by system management interrupts SMIs control line changes register flags or other constructs. In other cases processing of wake events may be initiated by a chipset of the computing device. Furthermore some wake events may trigger a powering up of the computing device for processing by the OS. Other wake events as will be discussed below in relation to embodiments of the present disclosure may be processed by the firmware while the computing device remains in sleep mode.

Accordingly in various embodiments the firmware acting independently of the OS of the computing device may determine whether the wake event can be handled without returning the entire computing device to the first higher power consumption state. If the wake event cannot be handled by the firmware and the OS is to handle the wake event then disks may be spun up the monitor may be turned on and the computing device may be restored to full wake mode at . The process flow may then return to where the OS runs or operates the computing device in wake mode. If however the firmware determines that the wake event can be handled independent of the OS and without returning the entire computing device to the first higher power consumption state the firmware can cause the wake event to be handled. The computing device may thus continue to sleep at . In some embodiments dependent on the wake event and without waking the entire computing device the firmware may wake one or more hardware components or devices to service or complete a task associated with the wake event. Additionally after completion of handling of the event the firmware may return the hardware component to sleep mode which includes the second lower power consumption state.

Note that in the embodiments at a firmware component such as for example a filter driver may begin to monitor and collect data related to a manner in which the OS transitions the one or more hardware components to sleep mode. In various embodiments the filter driver may save the collected data to the mailbox or portion of memory that was reserved by the firmware during a pre boot time at . The firmware may independently later use the collected data to transition the one or more hardware components needed to service the wake event to and or from sleep mode. In an embodiment a wake event may result in executing a firmware module provisioned to the computing device after shipment to the end user.

Next are flow diagrams illustrating an exemplary method for handling wake events independently of the OS according to various embodiments of the disclosure. Blocks shown in in an embodiment may be performed by the firmware. Blocks shown in in an embodiment be performed by the OS. It will be apparent to one of ordinary skill in the art that the term performed by the firmware is shorthand for a more complex computing device interaction. In a single processor system for instance instruction execution may be performed by a main processor or central processing unit CPU . Note that Performed by the firmware may mean that non operating system instructions are fetched from a non volatile memory store firmware coupled to the processor and then executed by the processor. The processor has access to the firmware prior to loading the OS. Thus boot instructions may be typically stored in a firmware boot block. Furthermore in some embodiments the full boot block may reside remotely and the local boot block may contain a pointer to the remote location of the full boot block.

In the embodiments of a computing device or system may be powered on at block . The computing platform may be preliminarily initialized by the boot block firmware in block . Other portions of the firmware residing outside of the boot block may play a role in the preliminary initialization. Note that the boot block is typically responsible for early aspects of initialization such as early memory initialization and central processor initialization. Preliminary initialization may also include identifying and resetting memory identifying devices and components coupled to the computing device etc.

In the embodiments shown as a part of preliminary initialization or soon afterwards the firmware may initiate a number of policy questions to determine a status of the computing device. At block the firmware may determine if sleep enabled activity is enabled. If so processing continues with block . If not processing continues with block . In the embodiments the firmware may ask at block whether the computing device is waking up or transitioning out of sleep mode due to a wake event e.g. a network wake event in at least one embodiment . In various embodiments where the computing device is not waking up due to a network wake event but has simply completed powering up the pre boot process may continue to a block . At block the firmware may proceed to cache images that may be needed at a later time. For example it may cache data needed for a sleep mode e.g. S3 . Next at a block the firmware may reserve during this pre boot time a portion of memory in a tangible computer readable storage medium of the computing device. In an embodiment the portion of memory may serve as a mailbox of the firmware. Note that typically computing device resources are under control of the OS unless the firmware actively reserves such resources for itself. Furthermore in various embodiments to be discussed below input output I O data related to a manner in which the OS may transition one or more hardware components to sleep may be saved e.g. by a monitoring component of the OS into the mailbox to be accessed at a later time by the firmware. In the embodiments enough memory may also be reserved that may allow the firmware to reinitialize previously cached images.

In the embodiments shown at a next block the firmware may continue a normal boot process and the OS may be given control and launched. At block on the OS may install a component such as for example a filter driver. As will be seen below the filter driver may serve as the monitoring component to collect I O data related to transition of the hardware components to sleep mode. Normal OS operations may continue at a block . At a decision block if input has not been received for a certain period of time or other computing device policy dictates the OS may transition the computing device to sleep mode. If for example the policy does not dictate that the computing device transition to sleep mode OS operations may continue at a block . In the alternative returning to decision block if the computing device is to enter sleep mode the OS may continue downward from decision block to block . In the embodiment the OS may then send a message notifying all or substantially all hardware component or hardware device drivers that the hardware components are to transition to sleep mode. The filter driver may receive or detect this notification at block and begin monitoring input output I O data related to a manner in which the one or more hardware devices or components are transitioned to sleep mode e.g. I O signals between a hardware device interface and the hardware device driver. At a block the filter driver then may collect the I O data and save it to the mailbox which was reserved by the firmware environment at a pre boot time described at block . Finally at a block the OS has completed transitioning the computing device to sleep mode.

Note that the I O data saved to the mailbox at block as alluded to earlier may be used at a later time to enable the firmware to use the I O data during and or after the handling of a wake event. Thus for example returning up to decision block if the computing device is waking up due to a wake event e.g. network wake event the YES arrow may be followed. At block the firmware may determine while the OS remains in sleep mode whether the network event can be handled by the firmware independent of the OS and without waking or returning the entire computing device to a higher power consumption state. If the answer is NO the computing device resumes through the normal S3 codepath at block and eventually continues the normal boot process at . If the answer is YES however the firmware may cause the network event to be handled independently of the OS. In some embodiments at a block the firmware may wake or transition only one or more but not all hardware components to a higher consumption state and or launch software for use in handling the network event. At a block the firmware may use cached device I Os to put the computing device back into a D3 state and if necessary write a command to the appropriate port to cause a transition to S3 to occur.

Thus in various embodiments a firmware environment of a computing device is re instantiated once a computing device transitions to sleep mode. In embodiments the firmware environment is enabled to perform power management or other functions normally performed by the OS of the computing device. In some embodiments not only does the computing device have an ability to transition certain hardware components to sleep e.g. those associated with a network transmission received by the computing device during sleep mode the firmware environment is able to initiate a transition to wake mode a plurality of additional hardware or other components of the computing device. In various embodiments the firmware environment is enabled to retrieve I O data related to a manner in which any of a plurality of hardware devices is transitioned to sleep mode. Such I O data may be retrieved from a mailbox that was reserved by the firmware during a pre boot time. In various embodiments the firmware environment is enabled to transition the hardware components to sleep mode a power management function typically only performed by the OS. In various embodiments the firmware environment is enabled to provision new or updated firmware modules.

Referring now to embodiments may conjoin a module S3 resume architecture of for instance the Platform Innovation Framework for the Extensible Firmware Interface EFI Draft for Review Version 0.9 Sep. 16 2003 available at www intel com technology framework note that periods have been replaced with dashes to avoid unintentional hyperlinks . Typically for example according to a UEFI Platform Initialization PI Specification version 2.3 published May 8 2009 a full complement of PI pre EFI PEI modules and PI Driver Execution Environment DXE drivers may be invoked during boot from an S5 mode off . As a result a UEFI environment that may be used by pre OS applications e.g. UEFI shell 3rd party UEFI drivers option ROM s and UEFI OS loaders is created. During S3 however because of S3 resume time constraints the computing device may run a standard PI resume flow that may typically include only a subset of PEI without DXE. As such during an S3 resume mode rich UEFI driver features may not be available. However various embodiments of the disclosure provide that a computing device may implement DXE during S3. Thus as shown in S3 may include DXE to recreate a UEFI environment in some pre OS sequestered or OS driver pinned pages for running UEFI boot service applications while the OS is in sleep mode.

Referring now to shown in the embodiments a block diagram illustrates a boot and wake cycle implemented according to a UEFI architecture. In the embodiment during a normal boot after a power on or reset a pre memory init security SEC phase SEC may begin. SEC may support security checks of an initial operating code to be executed on a computing device. Next in the embodiment SEC may transition to a CPU memory init pre EFI PEI phase PEI . PEI may provide for example a method of loading and invoking specific initial INIT configuration routines for a processor chipset and motherboard. PEI may discover memory and prepare a resource map that may be handed off to a late init driver execution environment DXE phase DXE . DXE may include the invoking of DXE drivers responsible for initializing the processor chipset and platform components as well as providing software abstractions for console and boot devices. As shown at DXE may save I O controller settings as part of a boot script table in a reserved memory such as a non volatile store NVS . A boot script may include a set of actions to be replayed upon an S3 restart to bring the computing device back to a state it was in before transitioning into sleep mode. A typical boot script will restore I O device and CPU state information.

As seen at in an S3 resume boot SEC may be implemented. Next at S3 PEI modules may restore PEI phase configurations from the NVS in e.g. basic restoring of chipset CS hardware HW and video settings. Thus in embodiments updated DXE may be implemented during S3 while the OS is sleeping. DXE may be facilitated by several components or phases including a S3 DXE initial program load IPL S3 DXE core S3 DXE Firmware Volume FV S3 Boot Device Selection BDS S3 Network Proxy Actions and S3 DXE Terminator . As noted above an instantiation of a substantially fully formed UEFI interface may be implemented as a result of including DXE in S3. Typically only a smaller number of UEFI drivers are added during a pre boot phase. In an embodiment however an OS driver may add additional UEFI drivers into the UEFI environment. In various embodiments UEFI drivers may be collected from alternate sources. In some embodiments these additional drivers may be provisioned on a UEFI system partition or via other methods to enhance the number of UEFI drivers available during DXE .

The communications interface may include a networking interface such as a network interface card NIC or the like. The NIC may be communicatively coupled to an Internet Network including a remote server or server s via e.g. a serial over local area network LAN interface. The communication interface may support Transfer Control Protocol Internet Protocol TCP IP hypertext transfer protocol HTTP or Simple Object Access Protocol SOAP or other communication protocol. The NIC may use other means to communicate over a network for instance Integrated Drive Electronics IDE redirection not shown or other means. Note that in embodiments handling a wake event may include but is not limited to responding to particular packet types keeping dynamic host configuration protocol DHCP leases alive low power background activities such as for example scanning memories for viruses and remote file backups restores and the like. In the embodiment shown the chipset may also include a software interface for a basic input output system BIOS .

In an embodiment in a firmware environment EFI BIOS stored in NVS as BIOS in includes at least several components. New Technology File System NTFS driver communicates with hard drive to read and write data. Network interface controller NIC driver communicates with NIC to read and write data over a network coupled to the computing device. WiFi shim provides for the UEFI UNDI interface as defined in Appendix E.2 of the UEFI 2.3 specification Command and Data Blocks CDBs that provide raw data gram reads and writes to the Wireless Nic W NIC in the computing platform this can include a third party W NIC or a management engine ME based W NIC where the UNDI CDBs are proxied through the Host Extended Command Interface HECI of a chipset commercially available from Intel Corporation. Manageability Engine ME may be included to provide an out of band chipset network facing management capability. EFI LPUD agent coordinates the provisioning of new firmware modules and or updating existing firmware modules while the computing device is in a sleep state. Hyper text transport protocol HTTP HTTP secure HTTPS plug in may be included to leverage the LibSocket and Lib C wrapper may be included to abstract POSIX like programming APIs. Firmware module comprises a new or updated firmware module that may be obtained from an ISV and installed into the computing device as disclosed herein. In an embodiment EFI BIOS also includes S3 DXE Enable flag and public verification key called Kpub s3extension verification in one embodiment .

In an embodiment the computing device has the EFI BIOS firmware and at least one S3 DX IPL firmware module installed on the system board during the manufacturing process at the factory. The S3 DXE Enable flag in the EFI BIOS may be set to false at manufacturing time. The computing device may then be shipped to a user. While being operated by the user the computing device may be booted into the OS via the S4 state hibernate or the S5 state full power cycle . The user via the OS and a conventional web browser may visit a selected website to download a S3 DXE firmware volume.

An OS present application program may then prompt the user to inquire whether the user wishes to install the S3 DXE extension firmware module s . If the user does want to install the firmware module in an embodiment the OS present application invokes the UpdateCapsule UEFI runtime service with a pointer to the S3 DXE firmware volume stored in non volatile storage. Upon restart either a warm start or the S3 state depending on how the EFI BIOS firmware implements the UpdateCapsule runtime service which should be opaque to the user the EFI BIOS firmware detects the presence of the S3 DXE firmware volume in non volatile storage.

In an embodiment an alternate way to supply memory for the hardware resources used is for the OS to pin or reserve the OS pages that the S3 DXE firmware module will use and pass the possibly scattered page list into the UpdateCapsule runtime service call. Thus the firmware does not steal memory from the OS memory map but instead will take the scattered page list from the OS and make these pages firmware reserved thereafter and use them for launching the S3 DXE firmware modules.

In an embodiment the OS installer can put the S3 DXE firmware volume in a directory on a UEFI service partition and pass the location of the firmware volume via the UpdateCapsule call. In another embodiment the EFI BIOS may probe the UEFI system partition for the firmware volume. In either case the EFI BIOS cryptographically verifies the contents of the firmware volume prior to copying the content into memory used in successive S3 DXE activations.

In an embodiment upon a successive S3 resume if the S3 DXE Enable flag is true then the EFI BIOS may launch the S3 DXE IPL and the associated firmware modules from the S3 DXE firmware volume prior to going back to sleep and or passing control to the OS resume vector.

Thus a one touch provisioning model where an OS hosted installer can activate a firmware module download capability in a lower power consumption state has been described. This capability may be activated after the computing device has been shipped to a user. This allows an entity to provide S3 DXE IPL code and the verification key infrastructure to third parties as small hooks in the EFI BIOS but post ship a firmware volume can be added to the computing device for purposes of executing in the OS suspended S3 DXE environment.

The techniques described herein are not limited to any particular hardware or software configuration they may find applicability in any computing consumer electronics or processing environment. The techniques may be implemented in hardware software or a combination of the two. The techniques may be implemented in programs executing on programmable machines such as mobile or stationary computers personal digital assistants set top boxes cellular telephones and pagers consumer electronics devices including DVD players personal video recorders personal video players satellite receivers stereo receivers cable TV receivers and other electronic devices that may include a processor a storage medium accessible by the processor including volatile and non volatile memory and or storage elements at least one input device and one or more output devices. One of ordinary skill in the art may appreciate that the disclosure can be practiced with various system configurations including multiprocessor systems minicomputers mainframe computers independent consumer electronics devices and the like. The invention can also be practiced in distributed computing environments where tasks or portions thereof may be performed by remote processing devices that are linked through a communications network.

Program instructions may be used to cause a general purpose or special purpose processing system that is programmed with the instructions to perform some the operations described herein. Alternatively the operations may be performed by specific hardware components that contain hardwired logic for performing the operations or by any combination of programmed computer components and custom hardware components. The methods described herein may be provided as a computer program product that may include a machine accessible medium having stored thereon instructions that may be used to program a processing system or other electronic device to perform the methods. The term computer readable medium used herein shall include any medium that is capable of storing or encoding a sequence of instructions for execution by a computing device and that cause the computing device to perform any one of the methods described herein. The term computer readable medium shall accordingly include but not be limited to solid state memories and optical and magnetic disks. Furthermore it is common in the art to speak of software in one form or another e.g. program procedure process application module logic and so on as taking an action or causing a result. Such expressions are merely a shorthand way of stating the execution of the software by a processing system cause the processor to perform an action or produce a result.

