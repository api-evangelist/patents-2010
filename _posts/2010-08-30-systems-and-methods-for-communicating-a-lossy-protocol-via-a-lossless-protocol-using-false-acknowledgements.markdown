---

title: Systems and methods for communicating a lossy protocol via a lossless protocol using false acknowledgements
abstract: The present invention is generally directed towards a remote access architecture for providing peer-to-peer communications and remote access connectivity. In one embodiment, the remote access architecture of the present provides a method for establishing a direct connection between peer computing devices via a third computing device, such as a gateway. Additionally, the present invention provides the following techniques to optimize peer-to-peer communications: 1) false acknowledgement of receipt of network packets allowing communications via a lossless protocol of packets constructed for transmission via a lossy protocol, 2) payload shifting of network packets allowing communications via a lossless protocol of packets constructed for transmission via a lossy protocol, 3) reduction of packet fragmentation by adjusting the maximum transmission unit (MTU) parameter, accounting for overhead due to encryption, 4) application-aware prioritization of client-side network communications, and 5) network disruption shielding for reliable and persistent network connectivity and access.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08351333&OS=08351333&RS=08351333
owner: Citrix Systems, Inc.
number: 08351333
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20100830
---
This present application claims priority to and the benefit of co pending U.S. Nonprovisional patent application Ser. No. 11 187 562 entitled Systems and Methods for Communicating a Lossy Protocol Via a Lossless Protocol Using False Acknowledgements filed Jul. 22 2005 and U.S. Provisional Patent Application No. 60 590 837 entitled Ad Hoc Distributed Networks And Remote Access Architecture filed Jul. 23 2004 and U.S. Provisional Patent Application No. 60 601 431 entitled System And Method For Assuring Redundancy In Remote Access Solution filed Aug. 13 2004 and U.S. Provisional Patent Application No. 60 607 420 entitled Virtual Network Bridging filed Sep. 3 2004 and U.S. Provisional Patent Application No. 60 608 814 entitled System And Method For Assuring Redundancy In Remote Access Solution filed Sep. 10 2004 all of which are incorporated herein by reference.

The invention generally relates to optimizing peer to peer network communications and in particular to techniques for communicating a lossy protocol via a lossless protocol using false acknowledgements.

Communications over a network between two computers for example a client and a server can be implemented using a variety of known communication protocols. However the protocol used for communications may not be as efficient or secure as desired. As an example the network communications may include real time data communications such as voice over IP VoIP communications. The real time data communications may be communicated via an unreliable protocol such as the user datagram protocol in order to reduce latency in the telephone call. However the VoIP communication may traverse a TCP IP network or secure SSL gateway which provides a reliable protocol to the VoIP communications. This may increase the latency in the telephone call that the unreliable protocol was intended to reduce. Techniques are needed for transmitting data via a lossless protocol that is intended for communication using a lossy protocol.

The present invention is generally directed towards a remote access architecture for providing peer to peer communications and remote access connectivity. In one embodiment the remote access architecture of the present invention provides a method for establishing a direct connection between peer computing devices via a third computing device such as a gateway. Additionally the present invention provides various techniques for optimizing peer to peer communications including real time communications such as voice over internet protocol VoIP signaling and media video and other real time data applications such as web collaboration screen or desktop sharing and instant messaging. The present invention provides the following peer to peer optimization techniques 1 false acknowledgement of receipt of network packets allowing communications via a lossless protocol of packets constructed for transmission via a lossy protocol 2 payload shifting of network packets allowing communications via a lossless protocol of packets constructed for transmission via a lossy protocol 3 reduction of packet fragmentation by adjusting the maximum transmission unit MTU parameter accounting for overhead due to encryption 4 application aware prioritization of client side network communications and 5 network disruption shielding for reliable and persistent network connectivity and access such as for mobile computing.

In one aspect the present invention relates to a method for establishing a peer to peer communication session between a first computing device on a first network and a second computing device on a second network. The first network may be disconnected from and not routable to the second network. The method includes establishing by the first computing device a first tunneling session with a third computing device and establishing by the second computing device a second tunneling session with the third computing device. The third computing device may be a gateway such as an SSL VPN gateway. The first computing device initiates a communication session to the second computing device via the third computing device such as via a signaling protocol. A server receives a signal to establish the initiated communication session and the server communicates to the first computing device a first network address comprising a network address of the second computing device associated with the second tunneling session. The first computing device communicates a request to initiate a connection with the second computing device using the first network address. The method further includes intercepting by the third computing device the request and providing the first computing device a second network address for the second computing device. The second network address identifies a public network address associated with the second computing device. The third computing device communicates a request to the second computing device to allow a connection from the first computing device using the second network address such as via a swimmer session traversing a firewall.

In one embodiment of the present invention the first tunneling session or the second tunneling session is established using a Secure Socket Layer or a virtual private network The third computing device may be a remote access gateway. In another embodiment the second computing device is located behind a firewall associated with the second network address.

In another embodiment the method of the present invention includes providing by the third computing device the second network address to the first computing device by communicating an out of band signal to the first computing device via the first tunneling session. In an additional embodiment the method of includes providing by the second computing device a forward hole in a firewall for the first computing device to communicate to the second computing device using the second network address.

In a further embodiment of the present invention the third computing device communicates a key to the first computing device and the second computing device. The first computing device and the second computing device may exchange keys. Additionally the first and second computing device may check that the key received from the other computing device matches before transmitting data to the other computing device.

In some embodiments of the present invention the method associates a first telecommunication device with the first computing device and associates a second telecommunication device with the second computing device. The first telecommunication device or the second telecommunication device may include a software component or a hardware component such as a hard or soft VoIP telephone. In one embodiment the method of the present invention includes establishing a telecommunication session between the first telecommunication device and the second telecommunication device via the connection between the first and second computing devices. The first telecommunication device and the second telecommunication device may communicate over the telecommunication session without traversing the third computing device.

In another embodiment of the present invention the method communicates a remote display protocol via the connection between the first computing device and the second computing device. The remote desktop protocol may include the Independent Computing Architecture protocol or the Remote Desktop Protocol. In yet a further embodiment the method may include sharing a screen view or screen data of the first computing device with the second computing device via the connection.

In one aspect the present invention relates to a method performed in a gateway for establishing a peer to peer communication session between a first computing device on a first network and a second computing device on a second network. The first network may be disconnected from and not routable to the second network. The method includes establishing a first tunneling session with the first computing device on a first network and establishing a second tunneling session with the second computing device on the second network. The gateway receives a request by the first computing device to initiate a communication session with the second computing device. The first computing device provides a first network address for contacting the second computing device. The first network address identifies a network address of the second computing device associated with the second tunneling session. The gateway receives a request by the first computing device to initiate a connection with the second computing device using the first network address intercepts the request to initiate the connection and provides the first computing device a second network address for the second computing device. The second network address identifies a public network address associated with the second computing device. The gateway communicates to the second computing device a request to allow the connection from the first computing device to the second computing device using the second network address such as via a swimmer session traversing a firewall.

In one embodiment the first tunneling session or the second tunneling session via the gateway includes a Secure Socket Layer or a virtual private network. In another embodiment the second computing device is located behind a firewall associated with the second network address. In a further embodiment the method of the present invention provides the second network address to the first computing device by communicating an out of band signal to the first computing device via the first tunneling session. Additionally the gateway may communicate a key to the first computing device and to the second computing device.

In another aspect the present invention is related to a system for establishing a peer to peer communication session between a first computing device on a first network and a second computing device on a second network via a third computing device. The first network may be disconnected from and not routable to the second network. The system includes a first computing device on the first network and a second computing device on the second network. A third computing device establishes a first tunneling session with the first computing device and a second tunneling session with the second computing device. The system also includes a server accessible via the third computing device. In operation of the system the server communicates via the third computing device to the first computing device a first network address identifying a network address of the second computing device associated with the second tunneling session. The first computing device communicates via the third computing device a first request to initiate a connection with the second computing device using the first network address. The third computing device intercepts the first request and provides the first computing device a second network address for the second computing device. The second network address identifies a public network address associated with the second computing device. The third computing device communicates a second request to the second computing device to allow a connection from the first computing device using the second network address.

In one embodiment of the system the first tunneling session or the second tunneling session includes a Secure Socket Layer or a virtual private network. Furthermore the third computing device may be a remote access gateway such as an SSL VPN gateway. In another embodiment of the system the second computing device is located behind a firewall associated with the second network address.

In an additional embodiment of the present invention the third computing device provides the second network address to the first computing device by communicating an out of band signal via the first tunneling session such as via an out of band TLS session. In one embodiment the second computing device provides a forward hole in a firewall for the first computing device to communicate to the second computing device using the second network address.

In a further embodiment of the system of the present invention the third computing device communicates a key to the first computing device and the second computing device. The first computing device and the second computing device may exchange keys. Additionally the first and second computing device may check that the key received from the other computing device matches before transmitting data.

In some embodiments of the present invention the system includes a first telecommunication device associated with the first computing device and a second telecommunication device associated with the second computing device. The first telecommunication device or the second telecommunication device may include a software component or a hardware component such as a hard or soft VoIP telephone. In one embodiment the system of the present invention includes establishing a telecommunication session between the first telecommunication device and the second telecommunication device via the connection between the first and second computing devices. The first telecommunication device and the second telecommunication device may communicate over the telecommunication session without traversing the third computing device.

In another embodiment of the present invention the first computing device and the second computing device communicate a remote display protocol via the connection. The remote desktop protocol may include the Independent Computing Architecture protocol or the Remote Desktop Protocol. In yet a further embodiment the first computing device may share a screen view or screen data with the second computing device via the connection.

In another aspect the present invention is related to a method for communicating via a lossless protocol a packet constructed to be transmitted via a lossy protocol. The method may be performed in one or more electronic devices such as in a system and by any suitable means and mechanisms. The method includes establishing a connection between a first computing device and a second computing device via a lossless protocol. In some embodiments the second computing device may be a gateway such as an SSL VPN gateway.

The first computing device detects a lossless protocol packet comprising a payload having one or more packets constructed in accordance with a lossy protocol. The first computing device communicates a false acknowledgement of receipt of the lossless protocol packet to the first computing device and or the second computing device. The false acknowledgement of receipt of the lossless protocol packet prevents employing the reliability algorithms and mechanisms of the lossless protocol. The first computing device communicates the lossless protocol packet to the second computing device. In some embodiments the false acknowledgement of receipt of the lossless protocol packet is communicated prior to communicating the lossless protocol packet.

In one embodiment the method of the present invention includes encrypting by the first computing device the one or more packets using a key. In some embodiments the encryption key may be provided to the first computing device via an out of band transport security layer session between the first computing device and the second computing device. In a further embodiment the method encrypts the one or more packets on a packet by packet basis.

In another embodiment of the method of the present invention in response to receiving the false acknowledgement of receipt of the lossless protocol packet by the first computing device and or the second computing the first computing device and or the second computing prevents executing an operation associated with providing a lossless characteristic of the lossless protocol. In one embodiment the lossless protocol is a transport control protocol. In a further embodiment the method of the present invention prevents the network stack of the first computing device and or the second computing device from executing one or more of the following in connection with the lossless protocol 1 a retransmit 2 an ordering 3 a flow control algorithm 4 a naple s algorithm and 5 a sliding window algorithm.

In one embodiment the lossy protocol includes a user datagram protocol. In another embodiment the method includes communicating by the first computing device the lossless protocol packet via a secure socket layer or a transport security layer tunnel to the second computing device.

In another embodiment the one or more packets of the payload comprises a real time protocol. In an additional embodiment the method includes communicating by the first device one of real time voice audio or data to the second computing device via the one or more packets.

In one aspect the present invention relates to a method for transmitting packets from an application using an unreliable transport protocol over a TCP connection. The method includes receiving at a first device a first packet to be transmitted using an unreliable transport protocol and creating a first TCP packet including a first payload of the received first packet and a first TCP header of information associated with a TCP connection established between the first device and a second device. The first device transmits the first TCP packet to the second device. The method further includes receiving at the first device a second packet to be transmitted using an unreliable transport protocol and creating a second TCP packet including a second payload of the received second packet and the first TCP header information. Before receipt of an acknowledgement of the receipt of the first payload from the second device the first device transmits the second TCP packet to the second device.

In one embodiment the method of the present invention establishes the TCP connection with a port number associated with the unreliable transport protocol. In another embodiment the method includes dynamically determining by the first device the first TCP packet and second TCP packet comprise an unreliable transport protocol. In some embodiments the unreliable transport protocol is UDP.

In an additional embodiment the method includes receiving the first TCP packet and second TCP packet on the first device by intercepting the first TCP packet and second TCP packet using a packet capturing mechanism. In some embodiments the method establishes by the first device the TCP connection with a VPN gateway device. In other embodiments the method includes establishing peer to peer communications between the first device and the second device via the TCP connection. In another embodiment of the present invention the method includes encrypting by the first device the first and second TCP packets and decrypting by the second device the encrypted first and second TCP packets.

In another aspect the present invention relates to a method for transmitting packets from an application using an unreliable transport protocol over a TCP connection. The method includes intercepting at a second device a first TCP packet created on a first device and received on the second device. The first TCP packet includes a first payload of a first packet generated by an application using an unreliable protocol and a first TCP header of information associated with a TCP connection established between the first device and the second device. The intercepting of the method occurs before the first TCP packet is provided to a TCP stack on the second device. The method includes identifying responsive to the TCP header of information that the first payload is a packet generated by an application using an unreliable transport protocol stripping the TCP header of information from the first TCP packet and forwarding the first payload to an application using the unreliable data protocol.

In one embodiment the unreliable protocol is UDP. In another embodiment the step of identifying comprises identifying that the TCP header information includes a port number associated with the unreliable transport protocol. In some embodiments the method includes intercepting by the second device the first TCP packet using a packet capture driver.

In some embodiments the first device is a client device and the second device is a VPN gateway. Additionally the method of the present invention includes performing Network Address Translation NAT on the second device prior to forwarding the first payload to the application.

In a further aspect the present invention relates to a system for transmitting packets from an application using an unreliable transport protocol over a TCP connection. The system includes a first device and a second device. The first device has an application that generates a first and second packet. The first and second packet are intended to be transmitted using an unreliable transport protocol. The first device also has a filter process and a tunneling process. The filter process intercepts the first and second packets from the application and forwards the intercepted packets to the tunnel process. The tunnel process requests the opening of a TCP connection between the first device and a second device. The request to open the TCP connection indicates to the first and second device that the TCP connection will transport packets intended to be transmitted with an unreliable transport protocol. The tunnel process forwards the first and second packets as payloads in a first and second TCP packet to the second device. The tunnel process sends the second TCP packet after sending the first TCP packet and prior to receiving an acknowledgement for the first TCP packet.

The second device of the system of the present invention is in communication with the first device. The second device has second filter process and tunneling process. The second tunnel process opens the TCP connection requested by the first device and identifies and forwards the source address of the TCP connection to the second filter process. The second filter process intercepts packets from the application received at the second device with the TCP connection source address in a header. The second filter process strips the TCP header from the received packets and forwards the stripped packets to an intended destination and circumventing the TCP IP stack on the second device.

In one embodiment of the system of the present invention the filter process on the first device and or the second filter process of the second device is a packet capture driver. In some embodiments the first device is a client device and the second device is a VPN gateway device. In one embodiment the unreliable data protocol is UDP.

In another embodiment the system also includes a third device to which the stripped packets are transmitted. Additionally the second device may further include a Network Translation NAT table used to perform network address translation prior to transmitting the stripped packets to the third device.

In a further aspect the present invention is related to a method for adjusting the maximum transmission unit of a secure network communication to reduce network fragmentation. The method may be performed in one or more electronic devices such as in a system and by any suitable means and mechanisms. The method includes establishing a session between a first computing device and a second computing device. The session may established by an agent of the first computing device. The first computing device has a first network stack. The method detects by the first computing device a network packet having an encrypted payload and determines a setting for a maximum transmission unit parameter of the first network stack to reduce the maximum transmission unit size by at least a size associated with the encrypted portion of the payload. The method alters the maximum transmission unit MTU parameter of the first network stack to the determined setting. As such the reported MTU parameter is reduced to account for the encryption.

In one embodiment the method of the present invention includes communicating the network packet via a secure socket layer or a transport layer security tunnel to the second computing device. The second computing device may be a gateway such as an SSL VPN gateway. In another embodiment the payload comprises a real time protocol.

Additionally in one embodiment the method may further comprise altering the maximum transmission unit parameter via a network driver interface specification NDIS level mechanism of the first network stack In another embodiment the method determines the setting of the maximum transmission unit parameter dynamically per session between the first computing device and the second computing device. In one embodiment the agent of the first computing device communicates via an IOCTL application programming interface to the first network stack to alter the maximum transmission unit parameter to the determined setting.

In some embodiments the method of the present invention establishes the session between the first computing device and the second computing device via a gateway. In other embodiments the method communicates by the first computing device real time voice audio or data to the second computing device via the payload of the network packet. In yet another embodiment the method may include communicating a false acknowledgement of receipt of the network packet to the first computing device and or the second computing device before communicating the network packet. In one embodiment the network packet comprises a lossless protocol packet such as a transport control protocol. In another embodiment the payload comprises a lossy protocol packet such as a user datagram protocol.

In an additional aspect the present invention is related to a method for a client to prioritize network communications of the client associated with an application of the client. The method includes intercepting by the client one or more network packets associated with one or more applications of the client and storing the one or more network packets to a queue. The client determines the queued one or more network packets is associated with a first application of the client. The client indicates a priority for the determined one or more network packets to place the determined one or more network packets ahead of at least one network packet in the queue associated with a second application of the client. The client provides the prioritized one or more network packets for communications via a network stack of the client.

In one embodiment the method of the present invention includes determining by the client the queued one or more networks packets of the first application comprises real time data. The real time data may include one of the following 1 a real time protocol 2 a user datagram protocol and 3 a representation of voice or audio.

In another embodiment the method includes preventing by the client at least one network packet of the second application from being communicated via the network stack ahead of the one or more network packets of the first application. In a further embodiment the method includes holding by the client in the queue a network packet associated with the second application and releasing the held network packet upon communication of the one or more network packets associated with the first application prioritized ahead of the held network packet.

In yet another embodiment of the present invention the method includes intercepting by the client the one or more network packets transparently to the one or more applications on the client. In some embodiments the first application is running in the foreground and the second application is running in the background.

In one embodiment of the present invention the method includes associating a priority with the first application higher than a priority associated with the second application. In another embodiment a user may specify the priority of the first application or the second application. In a further embodiment the client receives the one or more network packets from a computing device. Also the one or more applications may provide the one or more network packets for communicating from the client to a computing device.

In another aspect the present invention is related to a client for prioritizing network communications of the client associated with an application of the client. The client includes a mechanism for intercepting one or more network packets of the client associated with one or more applications of the client. The client also includes a network driver for storing the one or more networks packets to a queue and communicating the one or more network packets via a network stack of the client. The client further includes an agent for determining the one or more network packets is associated with a first application of the client and indicating to the network driver a priority of the one or more network packets to place the determined one or more network packets ahead of at least one network packet in the queue associated with a second application of the client.

In one embodiment the agent of the present invention determines the one or more networks packets of the first application comprises real time data. The real time data comprises one of the following 1 a real time protocol 2 a user datagram protocol and a 3 representation of voice or audio.

In a further embodiment the agent or the network driver of the present invention prevents at least one network packet of the second application from being communicated via the network stack ahead of the one or more network packets of the first application. In one embodiment the network driver holds in the queue a network packet associated with the second application and releases the held network packet upon communication of the one or more network packets associated with the first application prioritized ahead of the held network packet.

In another embodiment the present invention via the mechanism intercepts the one or more network packets transparently to the one or more applications on the client. In some embodiments the first application is running in the foreground and the second application is running in the background. Also the first application may have a priority higher than the second application of the client. Furthermore the client may include a configuration mechanism for a user to specify the priority. In some embodiments the client receives the one or more network packets from a computing device. In other embodiments the one or more applications provides the one or more network packets for communicating from the client to a computing device.

In an additional embodiment the network driver includes a Network Driver Interface Specification NDIS driver. Also the network driver may operate in kernel mode of an operating system of the client. In some cases the agent operates in user mode of an operating system of the client. Furthermore the agent or the network driver includes the mechanism for intercepting one or more network packets of the client.

In yet another aspect the present invention is related to a method for shielding from a network disruption a session established via a first protocol. The method includes the steps of establishing via an agent of a client a session via a first protocol over a network connection between the client and a device. The network connection is associated with a network stack. A first portion of the network stack has one or more layers of the network stack below the layer of the first protocol and a second portion of the network stack includes a layer for the first protocol and one or more layers of the network stack above the first protocol. The method includes detecting a disruption in the network connection causing the second portion of the network stack to be disestablished and maintaining by the agent the session and the second portion of the network stack during the disruption. The method further includes re establishing the first portion of the network stack and the network connection while maintaining the session and the second portion of the network stack.

In one embodiment the method includes continuing the session with the maintained second portion of the network stack and the re established first portion of the network stack. In some embodiments the method also includes dropping by the first and or second portion of the network stack any network packets received during the disruption.

In another embodiment the device comprises a remote access gateway or another computing device. In some cases the method includes establishing the session via the first protocol of one of the following 1 secure socket layer SSL protocol 2 a transport layer security TLS protocol and 3 a tunneling protocol. Additionally the method of the present invention may include communicating by the agent real time data via the session between the client and the device. The real time data may include a real time protocol or the real time data may represent voice or audio.

In some embodiments the agent operates in user mode of an operating system of the client. In one embodiment the first portion of the network comprises one of a transport control protocol or an internet protocol. In another embodiment the second portion of the network stack comprises one of 1 an internet protocol 2 a user datagram protocol or 3 a voice over internet protocol. Additionally the client may communicate with the device via a remote display protocol. The remote display protocol may be an Independent Computing Architecture ICA protocol or a Remote Desktop Protocol RDP .

In another embodiment the method of the present invention is performed transparently to an application of the client communicating via the network connection. In one embodiment the method includes intercepting by the agent transparently to an application of the client one or more network packets associated with the application. In one embodiment the method includes intercepting by a network driver associated with the first portion of the stack transparently to the application on the client one or more network packets associated with the application.

In an additional aspect the present invention is related to a system for shielding from a network disruption a session established via a first protocol. The system has an agent of a client establishing a session between the client and a device over a network connection via a first protocol. The system includes a network stack having a first portion and a second portion such as the network stack of the client. The second portion of the network stack comprises a layer for the first protocol and one or more layers of the network stack above the first protocol and a first portion of the network stack comprises one or more layers of the network stack below the layer of the first protocol. The system includes a detector for detecting a disruption in the network connection causing the first portion of the network stack to be disestablished. In operation of the system and upon detection of the disruption by the detector the agent maintains the session and the second portion of the network stack during the disruption. The client re establishes the first portion of the network stack and the network connection while the agent maintains the session and the second portion of the network stack.

In one embodiment of the system of the present invention the agent continues the session with the maintained second portion of the network stack and the re established first portion of the network stack. In some embodiments the first and or second portion of the network stack drops any network packets received during the disruption.

In one embodiment the device of the system is a remote access gateway or another computing device The first protocol used by the system of the present invention may include one of the following 1 secure socket layer SSL protocol 2 a transport layer security TLS protocol and 3 a tunneling protocol. In another embodiment the agent of the present invention communicates real time data via the session between the client and the device. The real time data may include a real time protocol or a representation of voice or audio.

In some embodiments of the system the agent operates in user mode of an operating system of the client. In one system embodiment the first portion of the network comprises a transport control protocol and or or an internet protocol. In another embodiment the second portion of the network stack includes one of 1 an internet protocol 2 a user datagram protocol or 3 a voice over internet protocol. Additionally the client may communicate with the device via a remote display protocol which may be an Independent Computing Architecture ICA protocol or a Remote Desktop Protocol RDP .

In another embodiment the system of the present invention maintains the second portion of the network stack and re establishes the first portion of the network stack transparently to an application of the client communicating via the network connection. In one embodiment the agent intercepts network packets transparently to an application of the client one or more network packets associated with the application. In one embodiment the system also includes intercepting by a network driver associated with the second portion of the stack transparently to the application on the client one or more network packets associated with the application.

The details of various embodiments of the invention are set forth in the accompanying drawings and the description below.

Certain illustrative embodiments of the present invention are described below. It is however expressly noted that the present invention is not limited to these embodiments but rather the intention is that additions and modifications to what is expressly described herein also are included within the scope of the invention. Moreover it is to be understood that the features of the various embodiments described herein are not mutually exclusive and can exist in various combinations and permutations even if such combinations or permutations are not expressly made herein without departing from the spirit and scope of the invention.

The illustrative embodiments of the present invention are generally directed towards a remote access architecture for providing peer to peer communications and remote access connectivity. In one illustrative embodiment the remote access architecture of the present provides a method for establishing a direct connection between peer computing devices via a third computing device such as a gateway. The present invention also provides various techniques for optimizing the peer to peer communications established with or without the gateway. The peer to peer communications may include real time communications such as voice over internet protocol VoIP signaling and media video and other real time data applications such as web collaboration screen or desktop sharing and instant messaging. In addition to establishing a peer to peer connection via gateway the present invention also provides the following techniques to optimize peer to peer communications 1 false acknowledgement of receipt of network packets allowing communications via a lossless protocol packets constructed for transmission via a lossy protocol 2 payload shifting of network packets allowing communications via a lossless protocol of packets constructed for transmission via a lossy protocol 3 reduction of packet fragmentation by adjusting the maximum transmission unit MTU parameter accounting for overhead due to encryption 4 application aware prioritization of client side network communications and 5 network disruption shielding for reliable and persistent network connectivity and access such as for mobile clients. These techniques may be practiced in peer to peer communications between two clients in some embodiments or in other embodiments in communications between a client and a gateway or between one computing device via a gateway to another computing device such as via an SSL VPN gateway of an illustrative embodiment of the present invention.

In the illustrative embodiments of the present invention the peer to peer route optimization technique determines a more optimal route to a resource a client may be trying to access via a gateway. The client and the resource accessed by the client such as a server or a peer computer may have a more direct route than via the gateway. For example the client and the server may be located near each other but distant from the gateway and thus are closer to each other than via the gateway. Furthermore using a gateway causes at least one additional hop in the end to end network communications between the client and the server. Instead of the client and server communicating via the gateway using their virtual private network VPN assigned internet protocol IP network addresses the gateway and remote access architecture of the present invention facilitates the client and server communicating to each other via a direct route in a peer to peer fashion without using the gateway. In some cases however the client and server may not have a direct path between each other as either the client and or server may be behind a firewall such as a Network Address Translation NAT firewall. The peer to peer route optimization techniques and remote access architecture of the present invention also provide techniques for the client and server to communicate directly via traversal of the firewall. As such the peer to peer route optimization techniques of the present invention provides a shorter more optimal route between peer computers than via the gateway.

In the illustrative embodiments of the present invention the false acknowledgement technique of an embodiment of the present invention enables a packet constructed to be transmitted via a lossy protocol to be communicated via lossless protocol. For example a real time protocol RTP may be implemented over a user datagram protocol UDP for voice over IP VoIP communications. A lossy or unreliable protocol such as UDP may be used for voice communications because in some real time voice applications it may be more important to get network packets to a recipient on time rather than getting the network packets in order or guaranteeing the delivery of network packets. However by way of virtual private network and remote access solutions using a secure communication and or tunneling protocol such as Secure Socket Layer SSL or Transport Layer Security TLS a real time application data constructed to be transmitted via a lossy protocol such as UDP may be communicated via a lossless or reliable protocol such as a transport control protocol TCP . The techniques of the present invention allow a lossy protocol such as RTP over UDP to be communicated via a lossless protocol such as TCP while avoiding one or more of the lossless characteristics of the lossless protocol from being applied to the communication.

In the illustrative embodiment of the present invention this technique communicates a false acknowledgement of receipt of the lossless protocol network packet to the corresponding network stacks to prevent the lossless protocol from executing algorithms that provide for reliability of the protocol. Using this technique the lossy protocol can be communicated over a lossless protocol such as via TCP SSL or via a tunneling protocol of a gateway for example to make the communication secure and have the lossy protocol network packets get to the recipient on time rather than getting to the recipient reliably. In one embodiment this technique can be used to securely communicate real time data communications such as VoIP over SSL or TLS between peers or via a gateway.

The illustrative embodiments of the present invention also provide another technique of payload shifting that enables a packet constructed to be transmitted via a lossy protocol to be communicated via lossless protocol. A first computing device receives a first packet to be transmitted using an unreliable transport protocol and creates a first TCP packet including a first payload of the received first packet. The first TCP packet is created with a TCP header having information associated with a TCP connection established between the first and a second computing device. The first TCP packet is transmitted to the second computing device. A second packet to be transmitted using an unreliable transport protocol is received by the first computing which in turn creates a second TCP packet including the payload of the received second packet but with the TCP header information of the first TCP packet. The second TCP packet is transmitted to the second computing device before receiving an acknowledgement of the receipt of the first TCP packet from the second device. As such the payload shifting technique communicates multiple unreliable transport protocol payloads under a TCP header until an acknowledgement of receipt is received.

In the illustrative embodiments of the present invention the maximum transmission unit adjustment technique reduces the reported size of the maximum transmission unit MTU parameter of a network stack of a client to take into consideration the effect of the network packet size due to encryption of a payload. Encryption of the payload of a network packet increases the size of the network packet communicated to or by the client and may cause a network packet to be fragmented. For example a server may communicate to the client a network packet via an SSL gateway to the client. Although the server sends a network packet that should meet the MTU size the network stack of the client can handle the encryption provided by the gateway increases the size of the network packet before it reaches the client. This may cause the network packet communicated from the server to the client via the gateway to be fragmented as the increased packet size from encryption may be too large for the MTU size of the client. The technique of the present invention adjusts the client s reported MTU size to report a smaller size to take in account for the overhead of the encryption. This technique reduces network fragmentation or otherwise prevents non optimal fragmentation.

In the illustrative embodiments of the present invention the prioritization technique provides for client side and application aware prioritization of network communications. That is the remote access client of the present invention manages and controls network communication prioritizations on the client. The prioritizations are based on priorities of the application on the client. The remote access client transparently intercepts network communications associated with applications executing on the client detects the network communication is associated with an application and determines priorities for the network communications based on a priority for the application. For example an application on the client may be communicating real time data communications such as VoIP to a peer client or via a gateway. The remote access client may intercept a network packet and detect for example the network packet contains real time data or is from a VoIP application. The remote access client may indicate a priority for this network packet such that the network packet may be communicated ahead of non real time data communications or ahead of network communications from other applications. As such the prioritization techniques of the present invention may improve or increase the performance operational characteristics and user experience on the client based on the applications running on the client.

In the illustrative embodiments of the present invention the network disruption shielding technique provides a persistent and reliable connection of a client to a network such as a peer to peer communication session or a connection to a gateway. For example a mobile client such as a laptop with a software based IP telephone may connect to a network for VoIP communications. A temporary disruption in a network connection may occur when the mobile client roams between different access points in the same network or when the client switches between networks e.g. from a wired network to a wireless network . This disrupts the network service to the client and may drop the VoIP telephone call. Additionally as the mobile client moves between access points the mobile client may obtain a different IP network address such as from a new Dynamic Host Configuration Protocol DHCP lease. This can also cause network connectivity and VoIP telephone communication disruption. The techniques of the present invention detects a disruption in the network and shields a portion of the network stack from the network disruption. The shielded portion of the network stack is maintained while the other portion of the network stack is reestablished and reconnected to the network. Once the network is available the present invention continues with the client s network communications. In some embodiments the network communications are queued during the network disruption and transmitted once the network is available. In other embodiments such as for real time data communications network packets are dropped during the disruption to prevent the queuing of network packets that may cause latency in the real time communication such as VoIP telephone call.

Although the illustrative embodiments of the present invention may be generally described in connection with an internet protocol IP based protocol such as a transport control protocol TCP or user datagram protocol UDP the techniques of the present invention may be used in any other types of networking environments with other networking protocols such as any Internetwork Packet Exchange IPX protocol based networks using a Sequenced Packet Exchange SPX protocol. Also although a lossy or unreliable protocol such as UDP and a lossless or reliable protocol such as TCP may be used for illustrating an embodiment of the present invention any lossless reliable and lossy unreliable protocol as known to those ordinarily skilled in the art may be used in practicing the operations of the present invention described herein. Furthermore although some of the illustrative embodiments of the present invention may be described below in relation to real time data communications such as VoIP the techniques of the present invention may be applied for non real time data communications as one ordinarily skilled in the art will also recognize and appreciate. Additionally at times the illustrative embodiments of the present invention may be described in regards to peer to peer communications. In one aspect a peer to peer model comprises a type of network in which any computer can act as both a server by providing access to its resources to other computers and can act as a client by accessing shared resources from other computers. Although in another aspect a peer to peer model may not comprise a notion of a client and a server a client and a server may provide peer to peer communications as well as client to client server to server or a client server to a computing device such as a gateway. In an additional aspect peer to peer communications comprises a process whereby computers can exchange information between each other directly without the assistance of a third party network or a device such as a gateway. Although peer to peer communications may be generally described as direct communication between computers there may be other network elements between the computing devices to facilitate the transmission and or communication such as for example a network hub.

Furthermore although the illustrative embodiments of the present invention may be described peer to peer point to point client to server or otherwise one ordinarily skilled in the art will recognize and appreciate that the present invention may be practiced between computing devices in any manner via any network topology and that any reference to peer to peer client server or otherwise is not intended to limit the present invention in any way.

In one aspect the present invention is related to a remote access architecture having a remote access client for communicating to a network via a gateway or peer to peer to another remote access client or another computing device. The remote access architecture of the present invention provides systems and methods for securely communicating network traffic transmitted between a private network behind a gateway to a client on an external network such as public network. The remote access architecture of the present invention enables separation of the client from the private network by providing network address translation NAT functionality on the gateway. A VPN gateway that uses Network Address Translation NAT provides masquerading of IP addresses of a client to shield the private network from direct layer 2 access by the client.

Referring now to the environment depicts a system for deploying the remote access architecture in an illustrative embodiment of the present invention. In brief overview the environment includes multiple computing devices herein also referred to as clients connected to a network via one or more network connections . One or more of the clients may connect to a server a server farm or a peer computing devices via a gateway .

Each client includes a remote access client which will be described in more details in connection with and one or more applications . Each of the clients communicate over the network to the gateway via a tunneling or gateway connections using any type and or form of suitable tunneling or gateway protocols. In some embodiments the gateway connections may be used for communicating securely such as via encapsulating and encryption or otherwise may use any other protocols such as any real time lossless or lossy protocol. In other embodiments the gateway provides a virtual private network connection between one or more of the clients and any of the computing devices 

The client can be any type and or form of computing device that can run one or more applications that access a network such as network . The application can be any type and or form of application such as any type and or form of web browser web based client client server application a thin client computing client an ActiveX control or a Java applet or any other type and or form of executable instructions capable of executing on client or communicating via a network . The application can use any type of protocol and it can be for example an HTTP client an FTP client an Oscar client or a Telnet client. In some embodiments the application uses a remote display or presentation level protocol. In one embodiment the application is an ICA client developed by Citrix Systems Inc. of Fort Lauderdale Fla. In other embodiments the application includes a Remote Desktop RDP client developed by Microsoft Corporation of Redmond Wash. In other embodiments the application comprises any type of software related to VoIP communications such as a soft IP telephone. In further embodiments the application comprises any application related to real time data communications such as applications for streaming video and or audio.

The clients may access any of the resources provided via computing devices which may be on the same network or which may be on a separate network such as a private network. In some embodiments computing devices may be on a network disconnected and not routable from the network of the clients 105. In one embodiment any of the clients may communicate with a peer computing device having a remote access client and application . For example the application may comprise a portion of a client server or distributed application corresponding to any of the applications on clients . In some embodiments any of the remote access clients may communicate with the remote access client via the gateway .

In another embodiment any of the clients may communicate via the gateway to a server running an application which for example may be an application server providing email services such as Microsoft Exchange manufactured by the Microsoft Corporation of Redmond Wash. a web or Internet server or a desktop sharing server or a collaboration server. In some embodiments any of the application may comprise any type of hosted service such as GoToMeeting.com provided by Citrix Systems Inc. of Ft. Lauderdale Fla. WebEx.com provided by WebEx Inc. of Santa Clara Calif. or LiveMeeting.com provided by Microsoft Corporation of Redmond Wash.

In another embodiment any of the clients may communicate via the gateway to a server farm or server network which is a logical group of one or more servers that are administered as a single entity. The server farm may be running one or more applications N such as an application providing a thin client computing or remote display presentation application. In one embodiment the server or server farm executes as an application any portion of the Citrix Access Suite by Citrix Systems Inc. such as the MetaFrame or Citrix Presentation Server and or any of the Microsoft Windows Terminal Services manufactured by the Microsoft Corporation.

Still referring to the gateway may comprise any type and or form of gateway such as a remote access server that may be used to connect one or more computing devices on one network to other networks. In another aspect the gateway may be used to provide a virtual private network connection to give a client access to a private network. In a further aspect the gateway may be a hardware or software set up that translates between two dissimilar protocols or disjoint or disconnected networks or systems. The gateway may comprise a specialized hardware or networking device or may be a computing device configured to act as a gateway. As such the gateway may comprise software hardware or any combination of software and hardware. In one embodiment the client and the gateway communicate via any type and or form of gateway or tunneling protocol such as SSL or TLS or the Citrix Gateway Protocol manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla.

In some embodiments the gateway may decrypt encrypted packets received from a client and may encrypt packets communicated to a client . The gateway may be used to protect a private network such as network . In some embodiments the gateway associates a client with a private IP address or an IP address of the private network. In one of these embodiments when the gateway receives a packet from the client the gateway transforms the IP address of the packet to the IP address associated with the client for the private network. In some embodiments the gateway may apply access control policies to network traffic to and or from a client . For example access controls policies may be applied to a packet received from the client prior to routing the packet to a final destination.

In one embodiment of the gateway once a frame enters the gateway via an SSL tunnel the packet and its payload are dispatched via callbacks into a handlers executing in user mode which provide functionality for SSL decryption. In another embodiment openSSL may be used. In other embodiments a hardware accelerator is used. In a further embodiment the gateway comprises one or more blades for providing remote access. Once the packet is decrypted it is injected into an HTTP network stack where headers are assembled and passed on to the remote access blade. In a remote access blade a packet is classified by the type of data contained within the packet. In one embodiment the packet contains an HTTP header requesting login and registration. In another embodiment the packet seeks TCP UDP RAW OTHER connection establishment. In still another embodiment the packet contains connection specific data. In yet another embodiment the packet contains a special feature request such as collaboration with other users fetching of user directory and presence or requesting telephony functionality such as conferencing and web cast. The remote access module dispatches the packet appropriately to the corresponding sub handler. For example the client may request that a connection be set up to a specific machine on the private network behind the gateway . The remote access module may consult with the access control module and if a positive response is returned the remote access module may grant the request. In some embodiments the remote access module may grant the request by injecting subsequent frames on the private network using a frame forwarding module utilizing NAT PAT to correlate incoming frames to corresponding SSL tunnels to a client 

The network as illustrated in can be any type of network. The network can be a local area network LAN such as a company Intranet a metropolitan area network MAN or a wide area network WAN such as the Internet or the World Wide Web. The topology of the network may be a bus star or ring network topology. The network and network topology may be of any such network or network topology capable of supporting the operations of the present invention described herein. The client and gateway can connect to one or more networks through a variety of connections including standard telephone lines LAN or WAN links e.g. Ti T3 56 kb X.25 SNA DECNET broadband connections ISDN Frame Relay ATM Gigabit Ethernet Ethernet over SONET and wireless connections or any combination thereof. Connections can be established using a variety of communication protocols e.g. TCP IP IPX SPX NetBIOS Ethernet ARCNET Fiber Distributed Data Interface FDDI RS232 IEEE 802.11 IEEE 802.11a IEEE 802.11b IEEE 802.11g and direct asynchronous connections .

In one embodiment of the present invention the gateway illustrated in is used to facilitate a direct peer to peer connection between computing devices . For example client may establish a tunneling session with the gateway to access the peer computing device . The gateway negotiates with the remote access client of client and the remote access client of computing device to enable the client to directly connect to the computing device without traversing the gateway . Once the network connection between the client and computing device is established the client can communicate in a peer to peer manner with computing device . The gateway of the present invention can facilitate a direct peer to peer connection between any of the computing devices illustrated in the environment . In one embodiment the gateway can facilitate a peer to peer connection between any of the clients for example between client and client or between client and client

In another embodiment the gateway facilitates a peer to peer connection between computing devices for example between computing device and server or server farm . In other embodiments the gateway facilitates a peer to peer connection between one of the clients and one of the computing devices . The techniques of facilitating a peer to peer connection via the gateway will be discussed in more detail below in conjunction with .

Referring now to the remote access client of the present invention may be used in an illustrative embodiment of a peer to peer connection without a gateway . For example the gateway may facilitate a peer to peer connection between any of the computing device illustrated in and thereafter the computing devices communicate directly to each other in a peer to peer manner. In other embodiments any computing device may communicate directly to another computing device or via a network without a gateway facilitating the connection.

In brief overview of the remote access client may be deployed on a client running one or more application . The computing device may connect over the network to computing device and or computing device . Computing device may be a peer or client computing device also comprising a remote access client . In some embodiments remote access client and may communicate with each other via network and may work in conjunction with each other for application to communicate to application such as for a web based or client server application. In other embodiments the remote access client may communicate with computing device which may be a server that does not execute a remote access client.

The client may also have a network stack which may comprise one or more network layers such as any networks layers of the Open Systems Interconnection OSI communications model as those skilled in the art will recognize and appreciate. The network stack may comprise one or more protocols such as the TCP IP protocol over Ethernet or a wireless protocol such as IEEE 802.11 as those skilled in the art will recognize and appreciate. Furthermore the network stack may include one or more network drivers supporting the one or more layers such as a TCP driver or a network layer driver. The network drivers may be included as part of the operating system of the computing device or as part of any network interface cards or other network access components of the computing device . Additionally any of the network drivers of the network stack may be customized modified or adapted to provide a custom or modified portion of the network stack in support of any of the techniques of the present invention described herein. Additionally some portions of the network stack may operate in kernel mode while other portions run in user mode such as an application layer of the network stack .

The filter may include a packet capturing mechanism and the filter and or packet capturing mechanism may comprise a network driver such as a network driver operating at any layer or portion thereof of a network stack of the client . The filter and or the packet capture mechanism may comprise a driver complying with the Network Driver Interface Specification NDIS or a NDIS driver. In another embodiment the filter and or the packet capture mechanism may comprise a mini filter or a mini port driver. The packet capture mechanism may also in some embodiments operate in kernel mode . Although the packet capture mechanism is illustrated as part of the filter the packet capture mechanism may be separate from the filter . Additionally the filter and the packet capture mechanism may operate at different layers or portions thereof of a network stack of the client .

The filter may use a filter table for filtering packets. The filtering table is used to determine what action to take against packets such as packets intercepted by the packet capture mechanism . The filter can inspect the contents of the packets such as routing information to determine the action to take based on the filtering table. In some embodiments the filter may drop or accept the network packets depending on their content. In other embodiments the filter may route the network packets to the agent based on the packets content and or the filtering table. The filter table may also be used to ensure that unwanted packets are discarded. The filter may be used to deny access to particular protocols or to prevent unauthorized access from remote computers by discarding packets to specified destination addresses.

In some embodiments the filtering table includes information about a private network. In other embodiments a filter on a client computing device receives the filtering table. In one of these embodiments the filter receives the filtering table from an application or an agent on the computing device . In another of these embodiments the filter receives configuration settings from the agent and stores the configuration settings in a filtering table.

The packet capture mechanism may intercept any of the network traffic of the client such as network packets associated with the application . In some embodiments the packet capture mechanism intercepts network traffic transparently to the application the agent the gateway or to any portion of the network stack of the client such as any other driver or layer operating at a layer above or below the layer the packet capture mechanism operates. In this manner the present invention can be used with and support any of the techniques described herein and for any application and any protocol used by the application. In one embodiment the packet capture mechanism intercepts outbound packet traffic such as any network traffic communicated via network and or gateway . The packet capture mechanism may forward the packets to the agent or a frame monitor mechanism of the agent . In some embodiments the filter communicates with the agent via asynchronous I O control messages. In one of these embodiments the packet capture mechanism may forward packets addressed to a private network behind a gateway via asynchronous I O control messages. In other embodiments the filter communicates with the agent running in the user space via UDP packets. In one embodiment the filter receives configuration settings from the agent driver via asynchronous I O control messages. The configuration settings may include information regarding which networks protocols or types of packets to filter. In one embodiment the filter stores the configuration settings in a filtering table. In another embodiment the filter receives a filtering table including the configuration settings.

In one embodiment the filter intercepts all outbound packets of the client for inspection. For example in some embodiments the filter intercepts a packet generated by an application executing in user mode for transmission by the client . If the packet satisfies a condition listed in the filtering table the filter may transmit the packet to the agent and not to the original destination of the packet. The filter may use an asynchronous I 0 control message to forward the packet to the agent . The filter may transmit the packet to the agent in accordance with or responsive to a routing table.

In some embodiments the agent and the filter communicate via an IOCTL application programming interface API such as any IOCTL libraries and function calls provided by the Microsoft Windows family of operating systems. In other embodiments the IOCTL based interface between the agent and the filter may be provided by any portion of the operating system running on the client . Although discussed in terms of I O control message and the IOCTL interface the agent and the filter may communicate via any suitable mechanism and or means.

The kernel of client may include an NDIS interface. In some embodiments the NDIS interface includes a plurality of intermediate filters. In one embodiment a packet passes through the NDIS interface and may be inspected by the plurality of intermediate filters. Although the filter may be provided as an NDIS driver the filter may also be a process or other set or type of executable instructions executing in the kernel .

The agent of the present invention may execute in the application space or user mode on the client . In other embodiments the agent operates in kernel mode . In some embodiments the agent provides functionality for receiving packets from the filter . In other embodiments the agent provides functionality for applying a policy to a received packet. In still other embodiments the agent provides functionality for managing an SSL tunnel to the gateway . In yet other embodiments the agent provides functionality for encrypting and transmitting a packet to the gateway . The agent may include frame monitor mechanism . The frame monitor may include policies and logic for applying a policy to a received packet. The agent may transmit a packet to a gateway responsive to a policy based determination made by the frame monitor .

In some embodiments the frame monitor may apply a policy to determine a condition of the client or endpoint at the time of transmission of the packet. In other embodiments the frame monitor may identify an application that generated the packet. In some of these embodiments the frame monitor may make a policy based determination to transmit the packet to the gateway responsive to the identified application . In another embodiment the frame monitor may perform a checksum on the packet to verify that the identified application actually generated the packet.

In other embodiments the packet capture mechanism may be included in the agent instead of or in addition to the filter . As such the agent may intercept network traffic. The packet capture mechanism may use any hooking application programming interface API to intercept hook or otherwise obtain inbound and or outbound packets of the client such as the network traffic associated with application .

In one embodiment a TCP connection is initiated by an application executing on the client for transmission of IP packets to a target computing device such as computing device of or the gateway in . The remote access client may intercept or capture the IP packets generated by the application . The remote access client may send a TCP acknowledgement packet to the application and terminate the TCP connection initiated by the application . Then the remote access client creates a second TCP connection to the second computing device or the gateway and transmits the captured IP packets via the second TCP connection. In some embodiments the remote access client may store a captured IP packet in a buffer. In these embodiments the remote access client may transmit the buffered IP packets via the second TCP connection to the second computing device . Storing the captured IP packets in a buffer enables preservation of the packets in the event of a disruption in the network connection.

In one embodiment upon receipt of the captured IP packets the gateway may create a third TCP connection between the gateway and the targeted computing device such as in . The gateway may maintain a port mapped Network Address Translation NAT table enabling the gateway to transmit response packets from the target computing device to the port monitored by the application that originally generated the IP packet on the client . Because the client communicates only with a public network address of the gateway the client is unaware of the network address of the target computing device increasing security to the network on which the target computing device resides. Similarly since the gateway originates the TCP connection to the target computing device the target computing device does not receive the address information of the client protecting the client and the network on which it resides. Additionally since the gateway receives the IP packets the gateway may make a determination responsive to a policy or security check as to whether or not to transmit the IP packets to the target computing device further increasing protection to the network on which the target computing device resides.

In one embodiment the present invention provides a method for securing a packet transmitted from a private secured network behind a gateway to a client on an external network . The invention enables separation of the client from the private network by providing network address translation NAT functionality on the gateway . A VPN gateway that uses NAT provides masquerading of IP addresses of a client to shield the private network from direct layer 2 access by the client . In one aspect any portion of the remote access client such as the agent frame monitor the filter and packet capture mechanism or any portion thereof may comprise software hardware such as an ASIC or an FPGA or any combination of software and or hardware. In some embodiments portions of the remote access client may be provided via one or more blades on the client . Although the remote access client is illustrated with multiple components such as an agent and a filter one ordinarily skilled in the art will recognize and appreciate that the operations and functionality of the remote access client described herein may be practiced in a single mechanism or single component. For example in some embodiments the operations and functionality of the remote access client may be included within an application . In one embodiment for example the functionality and operations of the remote access client may be provided just as an agent and in another embodiment just as a network driver such as the filter .

In some embodiments the remote access client or any portion thereof such as the agent frame monitor the filter and packet capture mechanism may comprise an application module service computer program software component web service web component library function process task thread or any other type and or form of executable instruction which is designed to and capable of executing the functionality of the present invention as described herein and which may operate in any portion or combination of user mode and or kernel mode .

As illustrated in the remote access client of the present invention may be deployed and used in a variety of ways to communicate and provided remote access over a network to other computing devices such as via a gateway or directly between peer computing devices. In these variety of environments the remote access client may be used to practice one or more of the optimization techniques of the present invention as described in more detail below. For example the remote access client may be used for optimizing any real time data communications such as VoIP desktop sharing or web conferencing in any of the illustrative environments of .

In the illustrative embodiments of the computing devices such as for any of the clients server or the gateway may be provided as any type and or form of computing device such as a personal computer or computer server of the sort manufactured by the Hewlett Packard Corporation of Palo Alto Calif. or the Dell Corporation of Round Rock Tex. depict block diagrams of a computing device useful for practicing an embodiment of the present invention. As shown in each computing device includes a central processing unit and a main memory unit . As shown in a typical computing device may include a visual display device a keyboard and or a pointing device such as a mouse.

Each computing device may also include additional optional elements such as one or more input output devices generally referred to using reference numeral and a cache memory in communication with the central processing unit . The central processing unit is any logic circuitry that responds to and processes instructions fetched from the main memory unit . In many embodiments the central processing unit is provided by a microprocessor unit such as the 8088 the 80286 the 80386 the 80486 the Pentium Pentium Pro the Pentium II the Celeron or the Xeon processor all of which are manufactured by Intel Corporation of Mountain View Calif. the 68000 the 68010 the 68020 the 68030 the 68040 the PowerPC 601 the PowerPC604 the PowerPC604e the MPC603e the MPC603ei the MPC603ev the MPC603r the MPC603p the MPC740 the MPC745 the MPC750 the MPC755 the MPC7400 the MPC7410 the MPC7441 the MPC7445 the MPC7447 the MPC7450 the MPC7451 the MPC7455 or the MPC7457 processor all of which are manufactured by Motorola Corporation of Schaumburg Ill. the Crusoe TM5800 the Crusoe TM5600 the Crusoe TM5500 the Crusoe TM5400 the Efficeon TM8600 the Efficeon TM8300 or the Efficeon TM8620 processor manufactured by Transmeta Corporation of Santa Clara Calif. the RS 6000 processor the RS64 the RS 64 II the P2SC the POWER3 the RS64 III the POWER3 II the RS 64 IV the POWER4 the POWER4 the POWERS or the POWER6 processor all of which are manufactured by International Business Machines of White Plains N.Y. or the AMD Opteron the AMD Athlon 64 FX the AMD Athlon or the AMD Duron processor manufactured by Advanced Micro Devices of Sunnyvale Calif. The computing device may be based on any of the above described processors or any other processor capable of operating as described herein.

Main memory unit may be one or more memory chips capable of storing data and allowing any storage location to be directly accessed by the microprocessor such as Static random access memory SRAM Burst SRAM or SynchBurst SRAM BSRAM Dynamic random access memory DRAM Fast Page Mode DRAM FPM DRAM Enhanced DRAM EDRAM Extended Data Output RAM EDO RAM Extended Data Output DRAM EDO DRAM Burst Extended Data Output DRAM BEDO DRAM Enhanced DRAM EDRAM synchronous DRAM SDRAM JEDEC SRAM PC100 SDRAM Double Data Rate SDRAM DDR SDRAM Enhanced SDRAM ESDRAM SyncLink DRAM SLDRAM Direct Rambus DRAM DRDRAM or Ferroelectric RAM FRAM . The main memory may be based on any of the above described memory chips or any other available memory chips capable of operating as described herein. In the embodiment shown in E the processor communicates with main memory via a system bus described in more detail below . E depicts an embodiment of a computing device in which the processor communicates directly with main memory via a memory port . For example in E the main memory may be DRDRAM.

In the embodiment shown in the processor communicates with various I O devices via a local system bus . Various busses may be used to connect the central processing unit to any of the I O devices including a VESA VL bus an ISA bus an EISA bus a MicroChannel Architecture MCA bus a PCI bus a PCI X bus a PCI Express bus or a NuBus. For embodiments in which the I O device is a video display the processor may use an Advanced Graphics Port AGP to communicate with the display . depicts an embodiment of a computer in which the main processor communicates directly with I O device via HyperTransport Rapid I O or InfiniBand. also depicts an embodiment in which local busses and direct communication are mixed the processor communicates with I O device using a local interconnect bus while communicating with I O device directly.

The computing device may support any suitable installation device such as a floppy disk drive for receiving floppy disks such as 3.5 inch 5.25 inch disks or ZIP disks a CD ROM drive a CD R RW drive a DVD ROM drive tape drives of various formats USB device hard drive or any other device suitable for installing software and programs such as the remote access client software related to the present invention.

The computing device may further comprise a storage device such as one or more hard disk drives or redundant arrays of independent disks for storing an operating system and other related software and for storing application software programs such as any program related to the remote access client of the present invention. Optionally any of the installation devices could also be used as the storage device . Additionally the operating system and the proxy software can be run from a bootable medium for example a bootable CD such as KNOPPIX a bootable CD for GNU Linux that is available as a GNU Linux distribution from knoppix.net.

Furthermore the computing device may include a network interface to interface to a Local Area Network LAN Wide Area Network WAN or the Internet through a variety of connections including but not limited to standard telephone lines LAN or WAN links e.g. 802.11 Ti T3 56 kb X.25 broadband connections e.g. ISDN Frame Relay ATM wireless connections or some combination of any or all of the above. The network interface may comprise a built in network adapter network interface card PCMCIA network card card bus network adapter wireless network adapter USB network adapter modem or any other device suitable for interfacing the computing device to any type of network capable of communication and performing the operations described herein. A wide variety of I O devices may be present in the computing device . Input devices include keyboards mice trackpads trackballs microphones and drawing tablets. Output devices include video displays speakers inkjet printers laser printers and dye sublimation printers. The I O devices may be controlled by an I O controller as shown in . The I O controller may control one or more I O devices such as a keyboard and a pointing device e.g. a mouse or optical pen. Furthermore an I O device may also provide storage and or an installation medium for the computing device . In still other embodiments the computing device may provide USB connections to receive handheld USB storage devices such as the USB Flash Drive line of devices manufactured by Twintech Industry Inc. of Los Alamitos Calif. In further embodiments an UO device may be a bridge between the system bus and an external communication bus such as a USB bus an Apple Desktop Bus an RS 232 serial connection a SCSI bus a FireWire bus a FireWire bus an Ethernet bus an AppleTalk bus a Gigabit Ethernet bus an Asynchronous Transfer Mode bus a HIPPI bus a Super HIPPI bus a SerialPlus bus a SCULAMP bus a FibreChannel bus or a Serial Attached small computer system interface bus.

A computing device of the sort depicted in typically operate under the control of operating systems which control scheduling of tasks and access to system resources. The computing device can be running any operating system such as any of the versions of the Microsoft Windows operating systems the different releases of the Unix and Linux operating systems any version of the MacOS for Macintosh computers any embedded operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or any other operating system capable of running on the computing device and performing the operations described herein. Typical operating systems include WINDOWS 3.x WINDOWS 95 WINDOWS 98 WINDOWS 2000 WINDOWS NT 3.51 WINDOWS NT 4.0 WINDOWS CE and WINDOWS XP all of which are manufactured by Microsoft Corporation of Redmond Wash. MacOS manufactured by Apple Computer of Cupertino Calif. OS 2 manufactured by International Business Machines of Armonk N.Y. and Linux a freely available operating system distributed by Caldera Corp. of Salt Lake City Utah Java or Unix among others.

In other embodiments the computing device may have different processors operating systems and input devices consistent with the device. For example in one embodiment the computer is a Zire 71 personal digital assistant manufactured by Palm Inc. In this embodiment the Zire 71 operated under the control of the PalmOS operating system and includes a stylus input device as well as a five way navigator device.

Moreover the computing device can be any workstation desktop computer laptop or notebook computer server handheld computer mobile telephone any other computer or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.

In one aspect the present invention is related to providing various techniques for optimizing communications between computing devices such as depicted in any of the illustrative environments A C. The present invention provides the following techniques which may be practiced stand alone or in any combination 1 peer to peer route optimization 2 communications via a lossless protocol of packets constructed for transmission via a lossy protocol 3 reducing network fragmentation by adjusting maximum transmission unit MTU adjustment to account for encryption 4 client side application aware network communication prioritization and 5 shielding a device from network disruption. The peer to peer route optimization technique will be discussed in conjunction with techniques for communications via a lossless protocol of packets constructed for transmission via a lossy protocol are discussed in conjunction with the MTU adjustment technique in conjunction with the client side application aware prioritization technique in conjunction with and the network disruption shielding in conjunction with .

In one aspect the present invention is related to providing a peer to peer route optimization technique between a first computing device accessing a second computing device via a gateway such as the gateway illustrated in . The peer to peer routing techniques provides a more optimal and direct communication between computing devices establishing or attempting to establish a communication session via a gateway. The illustrative method of an embodiment of the present invention will be discussed in view of the illustrative environment of . In brief overview the environment includes a gateway providing remote access connectivity to a private network such as a network with IP address ranges 10.10.10.XXX. The gateway in association with the private network may have assigned an IP address of 10.10.10.2 for communications on the private network. This private network may include a server . Also the private network comprises a telecommunication device such as any type and or form of VoIP telephone. The telecommunication device is assigned IP address 10.10.10.100 on the private network.

In one embodiment the server comprises a signaling server which may provide 25 any type and or form of signaling services for establishing a communication session between computing devices such as a first computing device and a second computing device . In one embodiment the server supports a Session Initiation Protocol SIP which is an Internet Engineering Task Force IETF standard protocol for initiating an interactive user session that involves multimedia elements such as video voice chat gaming and virtual reality. In one embodiment SIP works in the application layer of the Open Systems Interconnection OSI communications model. In some embodiments the first computing device initiates a session via signaling such as via the SIP protocol to the signaling server via signaling path . In one embodiment the signaling server in conjunction with the gateway is used for establishing a media path between the first computing device and the second computing device such as for a VoIP telecommunication session between telephones and

The first computing device of environment may be part of a network private or public accessing the gateway via network over the connection and traversing the firewall . The firewall provides access to and traversal of a public network and has assigned the IP address of 24.24.24.100. The first computing device may be in communication with or interfaced or coupled to a telecommunication device such as a VoIP communication device or any other real time data communication device. The second computing device may be part of a private network and have assigned the IP address of 192.168.20.20. Additionally the second computing device may include a software based telecommunication device such as software based VoIP telecommunication device or program. The second computing device may access the gateway via network over connection and traversing firewall having a public network IP address of 216.216.10.10. The firewalls and may be any type and or form of firewall as known to those ordinarily skilled in the art such as a NAT firewall.

The first computing device and second computing device of includes and uses the remote access client of the present invention to provide an ad hoc peer to peer virtual network connectivity in the environment . In addition to maintaining a tunnel and virtual private connection such as an SSL VPN connection to the gateway the remote access client of the present invention also has logic functionality and operations to establish a direct ad hoc connection such as an SSL VPN connection to a peer it is trying to reach. In view of the illustrative method of will be used to discuss how a peer to peer secure communication session is established for the media path in one illustrative embodiment of the present invention. The peer to peer routing technique of the present invention as illustrated by method provides better voice quality and reduces latency related to VoIP communications as well as other real time data communications.

In brief overview of illustrative method at step the computing devices and establish tunneling sessions with the gateway . At step the first computing device initiates a session to second computing device via gateway using signaling protocol via the signaling path to signaling server . The session may be initiated by the telecommunication device in communication with the first computing device . At step a signaling server sets up the telecommunication session and at step provides the first computing device with a first network identifier of the second computing device . The first network identifier comprises the network address such as a host name or IP address of the second computing device based on its IP address established via the tunnel with the gateway . At step the first computing device communicates to the second computing device using the first network identifier to establish a connection or communication session.

In further overview at step the gateway intercepts the communications by the first computing device and provides the first computing device a second network identifier for the second computing device . The second network identifier comprises an IP address or host name of the second computing device directly or publicly accessible by the first computing device such as the last known public IP address of the second computing device . At step in one embodiment the gateway communicates to the second computing device to request the second computing device establish a swimmer session for first computing device to connect to the second computing device via firewall . In some embodiments the gateway at step may negotiate or otherwise provide encryptions keys for the first computing device and second computing device . At step the first computing device establishes a direct connection communication session or media path to the second computing device . In other embodiments at step the first computing device and or second computing device match encryption keys received by the other computing device before allowing communications.

In some embodiments of illustrative step the computing device and may establish a connection with the gateway by any suitable means and or mechanisms such as by any type and or form of tunneling or gateway protocol. In some embodiments the connections and to the gateway may form a virtual private network connection and in other embodiments may use SSL or TLS to provide secure communications to the private network such as the private network identified by the IP range 10.10.10.XXX in illustrative . In one embodiment the computing devices and connect to the gateway by traversing a firewall via a public network while in other embodiments the computing devices and may connect to the gateway via a private network and may not traverse a firewall . One ordinarily skilled in the art will recognize and appreciate the variety of ways the computing devices may connect to and communicate with the gateway .

At illustrative step in one embodiment the telecommunication device such as a hard IP phone initiates a telecommunication session such as a telephone call to the telecommunication device such as a soft IP phone. In some embodiments the telecommunication device initiates the telephone call by indicating the extension of the telecommunication device . When the telecommunication device initiates the telecommunication session this initiation indication or request to establish a telecommunication session or media session may be sent to the signaling server via SIP protocol a proprietary signaling protocol or any other type of protocol suitable for signaling. The signals are communicated via signaling path via the tunneling session to the gateway and reach the signaling server via the intranet routes of the private network behind the gateway .

Although the illustrative embodiment of method is discussed in view of VoIP or telecommunication signaling and sessions one ordinarily skilled in the art will recognize and appreciate that the present invention may be used for initiating any type and or form of communication session real time or otherwise such as an interactive user session that involves multimedia elements such as video voice chat gaming and virtual reality. As such the telecommunication devices signaling signal path and signaling server may accordingly and suitably comprise the type and or form of device signaling protocols and communications corresponding to the type and or form of communication session.

In some embodiments of illustrative step the signal server may set up negotiate or establish any type and or form of communication session and in one embodiment the signaling server sets up a telecommunication session such as the VoIP telephone call initiated by the telecommunication device . When setting up the telecommunication or other media session the signaling server at step instructs requests signals or otherwise communicates to the initiating telecommunication device and or first computing device to contact signal connect or otherwise communicate to the peer telecommunication device via a certain network address. In some embodiments the network address provided by the signaling server to the initiating telecommunication device comprises the network address for the computing device on the private network i.e. 10.10.10.XXX behind the gateway . In one embodiment the network address for the peer telecommunication device may comprise an enterprise private network address.

At this point instead of contacting the peer telecommunication device via its VPN private IP address the illustrative method of via the remote access client facilities the telecommunication device and or the first computing device to directly contact the peer or target telecommunication device or the second computing device . The techniques of the present invention are not specific to any VoIP protocol and may be applied to any other protocols such as any peer to peer protocol between computing devices. The techniques of the present invention makes decisions by way of the IP address of the resource a client is trying to connect with.

At step when the telecommunication device initiates a data connection to the telecommunication device with the first network address provided by the signaling server at step such as the VPN private IP address of the soft IP phone the gateway intercepts the communication to provide the telecommunication device and or first computing device with a second network address for contacting the telecommunication device . In one embodiment the gateway intervenes and sends an out of band signal over the same established VPN tunnel to the first computing device that is facilitating traffic for the hard IP phone . One ordinarily skilled in the art will recognize and appreciate that the gateway may communicate to the telecommunication device and or computing device that network address for contacting the computing device and or telecommunication device directly by any suitable means and or mechanisms. For example the gateway may communicate the second network address to the first computing device via a second tunneling session.

In some embodiments the gateway indicates to the first computing device of the last known public IP address that the second computing device which is running the soft IP phone used to contact the gateway . In other embodiments this public IP may not be the actual IP address of the second computing device but may be the IP address of the firewall that the second computing device is behind. If the computing device contacts the public IP address of the firewall directly packets may be rejected by the firewall . In these embodiments the gateway instructs the computing device to establish what is known to those skilled in art as a swimmer session to the first computing device . A forward hole is punched in the firewall via which the first computing device can traverse or get back in. In other embodiments any suitable means and or mechanism may be used to allow the first computing device to traverse the firewall to connect and communicate with the second computing device

Although illustrative method is discussed in conjunction with environment of having the second computing device behind a firewall as one ordinarily skilled in the art will recognize and appreciate the illustrative method can be used in environments where the second computing device is directly accessible without traversing a firewall . As such the illustrative method may not need to at step instruct the second computing device to provide a swimmer session or other mechanism for the first computing device to connect to the second computing device

In some embodiments the gateway at step may negotiate a secret key between the computing devices for secure communications. The remote access client on the computing devices may use this key for secure and encrypted communicates and or to authenticate or authorize the other computing device. In other embodiments to ensure that malicious computing devices do not take advantage of this open hole the gateway at step negotiates a secret key between the two computing devices and and the respective remote access clients ensure that the keys match before allowing data communication. For example in the embodiment of establishing a swimmer session this key ensures that the packets coming in the open hole are from the computing device that the swimmer session was meant for.

In other embodiments the gateway does not perform step to provide a secure mechanism of peer to peer communication sessions between the computing devices . For example the computing devices may be in the same private enterprise network and therefore may be trusted. In further embodiments instead of the gateway negotiating a secret key the computing devices use any suitable means and or mechanism for authenticating and or authorizing the other computing device for peer to peer communications. In some embodiments the computing devices may authenticate and or authorize via the gateway tunneling sessions such as via path or at step via the media path established at step . For example the remote access clients of each computing device may check for matching keys over established media path before allowing any data to be communication over the connection .

At step the direct media path for any type and or form of communications is established between the computing devices without traversing the gateway and in some embodiments not using the respective VPN assigned IP addresses of the computing devices but instead their public IP address or the IP address assigned to them by their resident network. Using the techniques of the present invention the respective remote access client of computing devices act as temporary peer to peer SSL gateways to each other decrypting each other s SSL session directly without communicating via the gateway . The direct peer to peer communication session via path avoids the extra hop via the gateway . This will reduce any latency due to taking a longer route via the gateway and will improve the quality performance and experience of real time data communications such as the VoIP communications illustrated in .

In some embodiments the gateway may be configured to automatically perform the techniques of illustrative method every time a computing device is trying to establish a peer to peer communication session or otherwise access a resource via the gateway . In other embodiments the gateway may be configured to automatically perform the techniques of the illustrative method only for a certain IP address range either for a source IP address a destination IP address or any combinations thereof. In further embodiments the gateway may perform this technique based on the type of application and or resource being accessed via the gateway . For example in one embodiment the gateway may automatically perform this technique for any type of desktop or screen sharing application sharing screen data via the gateway . In other embodiments the gateway may determine to perform this technique based on any type and or form of business rules access control policies or other configuration algorithm and statistics. For example the gateway may perform this technique based on ping based timing statistics between peer computing devices. If the peer computing devices are closer to each other than the gateway the gateway performs the peer to peer routing technique. One ordinarily skilled in the art will recognize and appreciate the various ways the gateway of the present invention may be adapted or otherwise configured to perform the peer to peer routing technique of the present invention.

In one aspect the present invention is related to allowing communications via a lossless protocol packets constructed for transmission via a lossy protocol. In one technique illustrated in the present invention use a false acknowledgement technique when communicating a lossy or unreliable protocol via a lossless or reliable protocol such as for example communicating RTP over UDP via a TCP or SSL TCP connection. In another technique illustrated in the present invention uses payload shifting to communicate via a lossless protocol packets constructed for transmission via a lossy protocol. In some embodiments these techniques of the present invention helps achieve Transport Layer Security TLS at a UDP level as one ordinarily skilled in the art will recognize and appreciate in view of the description below.

The illustrative method of the embodiment of the present invention for practicing the false acknowledgement technique will be discussed in view of the illustrative environment of and additionally in view of . In brief overview the environment comprises a client of computing device in communications with a peer client of computing device or alternatively the gateway via network . In some embodiments the client may traverse IP routers or the network may have IP routers . Although in other embodiments the computing devices and gateway may be on the same network . Additionally a telecommunication device may be associated with client and a second telecommunication device may be associated with the peer client or the gateway .

Client may comprise a first network stack and the client or gateway may comprise a second network stack . The network stacks may comprise one or more network layers such as any networks layers of Open Systems Interconnection OSI communications model. For example as illustrated in the network stacks comprises a TCP IP communication layer communication on top of the frame layer that is suitable as known to those skilled in art for a TCP IP based network . The TCP layer comprises an illustrative embodiments of a reliable or lossless protocol. For example in TCP as known to those ordinarily skilled in the art the network stack or any drivers or mechanisms thereof such as a TCP driver may perform algorithms and operations and comprise logic or functionality to provide one or more of the lossless or reliable characteristics of the protocol. For example to support TCP the network stack may perform packet ordering packet retransmission acknowledgements of receipt of packet a flow control algorithm a sliding window algorithm and or a nagle s algorithm and any other reliability related operations and algorithms as one ordinarily skilled in the art will recognize and appreciate in view of TCP or any other lossless protocol.

Additionally the networks stacks may comprise an SSL layer for supporting SSL or SSL VPN communications. For example the SSL layer may be used for a gateway or tunneling session between remote access clients or between a remote access client and a gateway . As illustrated in the network stacks may also provides a layer for a lossy protocol such as UDP to be communicated over the lossless protocol such as TCP. In some embodiments the lossy or unreliable protocol may comprises Real Time Protocol RTP over UDP and may comprise a payload have any type and or form of real time data such any representation of voice or audio. In other embodiments the lossy protocol may carry the VoIP over communications to and from the client in an established VoIP session such as a session established via illustrative method discussed above in connection with . A lossless protocol such as UDP may be chosen for real time applications like voice because it may be more important to get packets to the recipient such as peer client on time rather than getting the packets in a reliable manner such as via a lossless protocol.

The network stacks also include a shim of the remote access client of the present invention. The shim may comprise any portion of the remote access client and in some embodiments comprises a network driver network driver interface or other network layer related mechanism for providing the false acknowledgement technique of the present invention as described herein. The shim may comprise software hardware or any combination of software and hardware. In one embodiment the shim may operate at the IP layer of the network stack prior to a network packet reaching the TCP layer . In other embodiments the shim may operate at the TCP layer . One ordinarily skilled in the art will recognize and appreciate that the shim may operate in any manner associated with the layer of operations of the lossless protocol in the network stack including in or adjacent to the layer of the lossless protocol. The false acknowledgement technique of the present invention as illustrated by method of allows a lossy protocol such as UDP to be communicated via a lossless protocol such as TCP . By the shim issuing a false acknowledgement of receipt of a TCP packet the technique of the present inventions prevents or avoid the reliability mechanisms operations and algorithms of the lossless protocol such as in the example of TCP any of the packet ordering packet retransmission a flow control algorithm a sliding window algorithm and or a nagle s algorithm. As such the lossy protocol can be communicated over a lossless protocol but maintain its lossy or unreliable characteristics which may be desired such as in real time data communications. This technique also enables the lossy protocol to be communicated securely or traverse a gateway via a tunneling protocol or simply via TCP IP while not applying the lossless characteristics of the lossless protocol to the lossy protocol communications.

In brief overview of illustrative method at step the computing devices and or the gateway establish a lossless protocol based connection such as a TCP connection by which lossless protocol packets are communicated. At step the remote access client of the present invention may detect that the payload of a lossless protocol packet comprises a lossy protocol such as RTP or UDP or otherwise comprises real time data. In one embodiment at step the illustrative method may encrypt the payload with a key such as a key provided via an out of band TLS or SSL session of step . At step a false acknowledgement of receipt of the lossless protocol packet may be communicated or otherwise provided to the network stacks such as by the shim . In response to the receipt of the false acknowledgement of receipt of the lossless protocol packet at step the respective network stacks do not execute one or more or all of the algorithms and operations that provide the reliable or lossless characteristics of the lossless protocol. At step the lossless protocol packet with the lossy protocol payload is communicated between the network stacks 

At step of illustrative method the lossless protocol connection may be established via any suitable means and or mechanisms using an type and or form of lossless protocol. In one embodiment the network stack of a client establishes a lossless protocol connection such as TCP to a peer client having network stack . In another embodiment the network stack of client establishes a lossless protocol connection to a gateway having network stack . Additionally the lossless protocol connection of step may be established in a secured manner such as SSL or as a virtual private connection. Although the network stacks are illustrated as having the same network layers one ordinarily skilled in the art will recognize and appreciate that the network stacks may have corresponding layers which may be of different versions or associated with different operating systems and or drivers and that each network stack may have additional layers less layers or different layers.

At illustrative step in one embodiment the remote access client intercepts a network packet such as via the packet capture mechanism and inspects the network packet by any suitable means and or mechanisms to determine the type of the protocol used in the payload of the network packet or the type of contents in the payload of the network packet. In some embodiments the shim of the remote access client may be used for intercepting and inspecting the network packet. In one embodiment the remote access client may intercept a network packet and determine if the network packet comprises any lossless protocol or a specific lossless protocol such as TCP. If the network packet is a lossless protocol the remote access client checks the payload to determine the type of protocol and or the type of data. In one embodiment the remote access client may determine by any suitable fields of the payload of the network packet such as any portion of header of the lossy protocol representing the payload that the payload has a lossy protocol content. In another embodiment the remote access client may determine by any data of the payload if the payload comprises a lossy protocol or comprises real time data.

In one embodiment the remote access client determines that a TCP packet comprises a payload of RTP or UDP and applies an encryption of the payload. The remote access client may encrypt the payload of the network packet using any type and or form of encryption with a key provided in any suitable manner. In some embodiments the key or cipher is negotiated via an out of band TLS session between the clients or the client and gateway as shown in as opposed to in other embodiments a traditional TLS session where the session is first negotiated and the same socket is used for data communication. In some embodiments the encryption at step is performed on a packet by packet basis. In another embodiment encryption is performed on multiple packets at a time.

At step of illustrative method of the present invention a false acknowledgment of receipt of the network packet e.g. the lossless protocol packet is issued communicated or otherwise provided to the network stacks comprising the respective sending and receiving computing devices or gateway . The shim any portion of the remote access client or any portion of the network stack may issue the false acknowledgment of receipt of the network packet. In one aspect the false acknowledgement of receipt of the network packet is false in the sense that it is communicated not to acknowledge the actual receipt of a network packet but in order to prevent the lossless and reliable mechanisms of the lossless protocol associated with the network stacks . As such the false acknowledgement of receipt of the network packet may comprise the same form and or type as an actual acknowledgement of receipt of the network packet. In some embodiments the false acknowledgement of receipt is issued to the network stacks prior to communicating the network packet or packets. In other embodiments the false acknowledgement of receipt is issued after communicating the network packet s but at a time or in a manner such as to prevent the lossless protocol mechanisms of the receiving network stack from being applied to the transmitted network packet. In one embodiment the false acknowledgment of receipt of the network packet is issued for each network packet and in another embodiment may be issued once per communication session or lossless protocol connection. Furthermore one ordinarily skilled in the art will recognize and appreciate the false acknowledgement of receipt may be performed in different places in the network stack for different operating systems. For example in one embodiment the acknowledgement of receipt may be issued at the Network Driver Interface Specification NDIS driver level in the Microsoft Family of Windows Operating Systems.

At step of illustrative method the network stack receiving the false acknowledgment of receipt of the network packet from step may in response to such receipt may not execute stop executing or prevent from executing any one or more algorithms and operations providing one or more lossless characteristics of the lossless protocol. For example in the embodiment of TCP as the lossless protocol the network stack may not execute any one or more of the following with respect to the network packet or the TCP connection packet ordering packet retransmission a flow control algorithm a sliding window algorithm and or a nagle s algorithm. In some embodiments the false acknowledgment of receipt must be received on a packet by packet basis to prevent the lossless layer of the network stack from employing reliability algorithms. As such the sending network stack can determine on a packet by packet basis which packets to apply the false acknowledgment techniques of the present invention to. There may be some lossless protocol network packets comprising the lossy protocol for which the reliability algorithms of the lossless protocol should be applied. In other embodiments the false acknowledgment of receipt of the network packet may be received once for the lossless protocol connection to prevent employing reliability algorithms for any subsequent packets received during the lossless protocol session or connection. At step the illustrative method communicates the lossless protocol packet having the lossless protocol payload via the network stacks . In one embodiment the lossless protocol packet is communicated after step or in other embodiments before step . So although the lossless protocol packet becomes lost in the network no attempt is made to reclaim the packet as one would expect for a lossy protocol packet.

Although the illustrative embodiment of method is discussed using a false acknowledgment of receipt of the network packet such as in TCP any type and or form of indication request or instruction may be communicated to the network stacks to prevent employing any reliability or lossless algorithms of the lossless protocol. In some embodiments the lossless protocol layer of the network stack may be adapted or configured to have a configuration flag or instruction to not use the reliability algorithms either on a packet by packet basis or a session or connection basis. For example the lossless protocol may have fields such in a header of a lossless protocol packet that indicates whether reliability should be discarded or avoided for the packet. Referring now to another embodiment of steps taken to transmit packets constructed according to a lossy protocol via a lossless protocol is shown by illustrative method which may also be referred to as a payload shifting technique. In brief overview of illustrative method at step a first packet to be transmitted using an unreliable transport protocol is received by a first device such as client . At step the first device creates a first TCP packet including a first payload of the received first packet and a first TCP header of information associated with a TCP connection established between the first device and a second device. The first device transmits the first TCP packet to the second device at step . At step the first device receives a second packet to be transmitted using an unreliable transport protocol and at step creates a second TCP packet including a second payload of the received second packet and the first TCP header information. At step the first device transmits before receipt of an acknowledgement of the receipt of the first payload from the second device the second TCP packet to the second device.

Still referring to and now in more detail at step a first packet to be transmitted using an unreliable transport protocol is received by a first device . In some embodiments the packet is intended to be transmitted using a lossy protocol of UDP. In further embodiments the packet comprises RDP over UDP. In other embodiments the first packet is generated by an application program executing in user mode . In some embodiments the packet is generated by an application executing in kernel mode . In other embodiments the first packet is received by the first device for retransmission. In still other embodiments the first packet is intercepted by a filter process before it reaches the network stack . The filter process may execute in user mode or in kernel mode . In some embodiments the filter is a mini driver. In other embodiments the filter is an NDIS driver. In other embodiments the filter process uses application hooking to intercept the first packet. In further embodiments the application hooking is implemented via an application programming interface API . In one embodiment the hooking of network packets occurs at the network layer of the network stack 

At step the first device creates a first TCP packet including a first payload of the received first packet and a first TCP header of information associated with a TCP connection established between the first device and a second device. For example the TCP connection may be established between the client and a peer computing device in one embodiment and between the client and the gateway in another embodiment. In some embodiments the first device indicates that the TCP packet contains a payload of packets constructed to be transmitted via a lossy protocol by opening a specific TCP port. In other embodiments the first device indicates that the TCP packet contains a payload of packets constructed to be transmitted via a lossy protocol by setting a flag in the TCP header. The TCP header may include information regarding the source node information regarding the destination node or a sequence number particularly identifying the TCP packet.

At step the first device transmits the first TCP packet to the second device. In some embodiments the second device may be a gateway . In other embodiments the second device is a peer computing device . The first TCP packet may be encrypted before transmission to the second device using for example SSL or TLS. At step the first device receives a second packet to be transmitted using an unreliable transport protocol such as UDP. The second packet may be received from the same application that generated the first packet. At step the first device creates a second TCP packet including a second payload of the received second packet and the first TCP header information as described above. At step the first device then transmits before receipt of an acknowledgement of the receipt of the first payload from the second device the second TCP packet to the second device. In some embodiments when an acknowledgment is received from the second device the first device updates the TCP header information before transmitting the packet. In other embodiments the first device creates a third TCP packet with updated TCP header information and having the second payload. The first device then transmits the third TCP packet.

Upon receipt of the TCP packet the second device decrypts it if necessary and determines that the payload is one or more packets constructed to be transmitted using a lossy protocol. The second device may determine this based on the port on which the packet was received or by a flag in the TCP header information. Once determined the second device strips the TCP header from the payload and delivers the payload.

In another aspect the present invention is related to adjusting the reported maximum transmission unit MTU parameter to optimize network communications by reducing packet fragmentation for encrypted network packets. This technique may be applied on one or both network stacks of illustrative environment of . Encrypting a payload of a network packet such as any network packet processed according to the illustrative method described above may increase the size of the payload. That is the size of the network packet may increase to account for the change in size of the unencrypted original payload to the encrypted payload.

Still referring to the network stacks may comprise a maximum transmission unit MTU parameter to indicate the size of the largest unit of data that can be sent over a type of physical medium in a network such as an Ethernet based network. In the embodiment of TCP IP the MTU indicates the largest datagram or packet than can be transmitted by an Internet Protocol IP layer interface without the interface needing to break down or fragment the datagram into smaller units. An MTU parameter may be associated with a communications interface such as a network interface card. The default MTU size for Ethernet is 1 500 bytes and IEEE 802.3 is 1 492 bytes. As one ordinarily skilled in the art will recognize and appreciate the default MTU size will be based on the networking technologies such as Token Ring FDDI X.25 etc.

Referring now to a flow diagram depicts an illustrative embodiment of the MTU adjustment method of the present invention. In brief overview at step a session between computing devices is established such as between a first computing device and a second computing device . At step one of the computing devices such as the first computing device detects a network packet having an encrypted payload. At step the computing device determines a setting for the MTU parameter of the network stack to account for the size of the encrypted portion of the payload. At step the MTU parameter is decreased to account for the encrypted portion. If the MTU is requested or reported the MTU will indicate a size smaller than the MTU size associated with the physical layer such as 1 500 for Ethernet.

Using this technique any device on the network may communicate network packets to the network stack according to the decreased MTU size that can be encrypted along the route to the network stack and not be fragmented. If the network packet is encrypted it should still fit in the actual MTU size of the physical network layer medium such as Ethernet. For example the MTU parameter may be set to the default MTU size of 1 500 for Ethernet and in accordance with the illustrative method decreased by a determined number of bytes for example 100 to account for encryption overhead. A network packet may be transmitted from a server resource to the client comprising a size equal to the reported MTU size of 1 400. The network packet may traverse the gateway and get encrypted via the SSL tunnel which in turns increases the network packet size to 1 475. Since this size fits into the MTU size of the Ethernet physical medium the network packet will not be fragmented.

At step of illustrative method any type and or form of communication session between a first computing device and a second computing device such as client or gateway of may be established. In some embodiments the session is established using the remote access client on a first computing device. In one embodiment the remote access client establishes a session with the gateway such as an SSL VPN session or to another remote access client on a peer computing device . In some embodiments of step the remote access client detects a network packet having an encrypted payload. In one embodiment the packet capture mechanism intercepts network packets and the agent determines if the packet is encrypted. However any other portion of the remote access client such as the filter or frame monitor may determine if the packet is encrypted. In one embodiment the entire payload of the network packet is encrypted while in other embodiments a portion of the payload is encrypted. The present invention may use any type and or form of means or mechanism for determining if a packet has encryption. For example in some cases the remote access client may check for a flag or field of the network packet indicating the payload is encrypted. In other embodiments the remote access client may check whether any portion of the payload is unintelligible because it contains random data or noise from encryption. Additionally the encrypted payload may be encrypted in association with any layer of the network stack such as layer or encryption.

In some embodiments of step the illustrative method of the present invention determines the adjustment to the reported MTU size on a packet by packet basis or in other embodiments on a connection or session basis and at step adjusts the MTU accordingly. In one embodiment the MTU is decreased exactly by the amount of encryption overhead for the network packet. In some cases the illustrative method determines the MTU size adjustment once for the entire session or connection and decreases the size of the MTU to a value to account for encryption overhead for the entire session. For example although network packets may have varying encryption overhead the adjustment accounts for the largest encryption overhead. In further embodiments the MTU may be adjusted to take into consideration encryption that may occur when the network packet leaves the network stack such as encryption by a gateway that may occur in the end to end network traversal of the network packet Additionally the MTU size may be adjusted for other network performance factors in addition to the encryption overhead. In some embodiments although the MTU is decreased due to encryption overhead it may be further decreased to account for other overhead and factors related to network communication as well as increased in other cases. For example the MTU may have been previously adjusted for a factor not related to encryption and after using the techniques of the present invention the MTU is decreased to take into account encryption overhead. One ordinarily skilled in the art will recognize and appreciate that there may be other factors and considerations for adjusting the MTU besides or in addition to adjusting for encryption overhead in accordance with the techniques of the present invention.

Referring now to the present invention in an additional aspect is related to client side application aware network communication prioritization techniques. The remote access client of the present invention provides for the intelligent and client centric prioritization of application network communications on a client based on the type and or priority of an application. As depicted in the system of the remote access client of computing device is connected to network . The client may execute one or more applications which access the network via the agent and filter of the remote access client . In some embodiments the applications provide one or more real time data communications such as VoIP. In other embodiments one or more of the applications may provide email collaboration online meeting and or desktop sharing related services or functionality.

As illustrated in the packet capture mechanism may be included in the filter or the agent of the remote access client for intercepting network traffic of any of the applications of the client . The remote access client may comprise any queues for queuing and prioritizing network communications of the client . In one embodiment the queues may be included in a network driver such as an NDIS driver for the filter and in other embodiments may be included with or accessible by the agent . The queues may comprise any type and or form of suitable means and or mechanisms for storing and or arranging network packets such as network packets intercepted by the packet capture mechanism . In some embodiments the queues may be associated with or assigned to network packets related to applications of the client . In other embodiments the queues may be organized by levels of priority such as high medium low or numerically such as priority 1 . . . 10. One ordinarily skilled in the art will recognize and appreciate that number of queues may be based on any desired granularity of prioritization such as 3 5 or 10 levels of priority. Additionally some of the queues may be used for receiving and or transmitting network packets prior to being placed into and or taken out of a priority based queue 

The remote access client may also have access or use a routing table for determining how to route network packets of the client via the agent such as onto the network via a gateway . In one embodiment the agent establishes and maintains an SSL VPN connection to the gateway such as illustrated in for example. In one embodiment the routing table comprise information about a source computing device and a destination computing device to identify a communication path or connection between a source and destination communication points. The routing table may include a source IP address and source port and an destination IP address and destination port to identify a communication path on the network . For example the source IP address and source port may represent the IP address of the client and the port by which an application on the client communicates on the network . The destination IP address may represent the IP address of a peer computing device to which the application communicates with via the destination port used by the peer device.

Additionally the remote access client may have one or more policies for specifying client side prioritization of network communications related to applications running on application. These policies may be specified by any suitable means and or mechanisms. In some embodiments the policies may be specified by the name of the application and or the type of application . In other embodiments the policies may be specified in accordance to the type of one or more protocols used by the applications and or the size of the payload of the network packet. In another embodiment the policies define prioritization based on whether an application is running in the foreground or the background of the client . In yet another embodiment policies may indicate prioritization based on the destination network address such as host name or IP address and or destination port number. Additionally the policies may be specified hierarchically to account for multiple applications and or multiple protocols that may be executed on the client at any point. Furthermore the policies may be specified conditionally such as if one application is running a second application may have a higher or lower priority. One ordinarily skilled in the art will recognize and appreciate the multitude of ways to define client side application priorities.

The policies may be accessible by the agent configured into the agent or loaded by the agent . For example the policies may be provided by or downloaded via the gateway . The policies may comprise any type and format of syntax and or language for specifying a policy and may be provided via any type and or form of medium such as electronically by one or more network packets or via a file such as an XML file. The policies may be configurable by a user by any suitable means and or mechanism. For example the agent may provide a configuration mechanism such as a user interface graphical or otherwise design and constructed for configuring or specifying the policies .

In view of the system of and the prioritization technique of the present invention illustrated by method in will be described. In brief overview at step of the illustrative method the client intercepts one or more networks packets associated with an application on the client and at step the network packets are stored to a queue . At step a priority for the intercepted and queued network packet is determined based on the type and or priority of the application . At step the determined priority is indicated for the network packets and at step the network packets are communicated according to the determined priority. As such the outbound network packets generated by an application on the client are prioritized by the client prior to transmission based on the type and or priority of the application . For example the application may generate real time data of VoIP communications such as RTP over UDP via a TCP IP session of an SSL connection to the gateway . The client using the techniques of the present invention may prioritize the real time data communications of application ahead of other applications such as non real time data communication applications. This technique may compliment Quality of Service QOS networks where network traffic prioritization occurs in intermediary network devices such as switches and routers.

At step of illustrative method the client may intercept network packets of one or more applications transparently to the application the gateway a peer computing device and any of the network layers of a network stack. In this manner the techniques of the present invention support any type of application on the client . In some embodiments the network packets are intercepted by the packet capture mechanism via agent or filter . Any inbound and or outbound network packets of an application may be intercepted by the remote access client of the present invention.

At step the network packets intercepted at step may be stored in a queue . In one embodiment the network packet is stored to a temporary queue prior to prioritizing the network packet at steps and . In other embodiments the network packet is stored to a determined priority queue or a queue associated with an application after the network packet is prioritized at steps and or step .

At step the remote access client of the present determines the association of network packets with applications in order to determine priorities and apply any priority based policies . The client such as via agent can associate network traffic with applications by any suitable means and or mechanisms. In some embodiments the agent identifies the network packet as generated from an application by any of the content of the network packet such as any headers fields or the type and content of data in the payload of the network packet. In other embodiments a network packet is associated with an application by matching information from the routing table such as source and destination IP addresses and ports numbers with the IP addresses and ports numbers of the network packet. In some embodiments the agent such as via the frame monitor may perform a checksum on the packet to verify that the identified application actually generated the packet. Additionally the remote access client may determine whether the application associated with the network packet is running in the foreground or the background of the client . Furthermore the remote access client may determine any priorities such as process task priority assigned to the application by the operating system of the client . In other embodiments the remote access client may determine any other characteristics or statistics of the application such as size memory usage total execution time and or frequency of use. One ordinarily skilled in the art will recognize and appreciate the various characteristics of an application the present technique may use for providing client side application aware network communication prioritization.

At step the remote access client of the present invention indicates a priority for intercepted and queued network packets based on the application associated with the packet at step . In one embodiment the agent uses the policies to apply a priority to network packets of applications in accordance with the prioritization rules specified or indicated by the policies . In some embodiments the agent may use characteristics of the application such as running in the foreground or background to indicate priority for a network packet of the application . In other embodiments the agent may use any combination of the policies and characteristics of the application to indicate a priority for the network packets of the application 

In some embodiments the agent indicates the priority to the filter for management of network packet queues to apply the indicated priorities. The agent may communicate the priority of network packets to the filter by any suitable means and or mechanism such as via an application programming interface API such an IOCTL interface or any other type and or form of interface known to those ordinarily skilled in the art. In one embodiment the filter is not aware of the application by name but can associate priorities to network packets of applications via the routing table . An application corresponding to a network packet can be identified by any combination of source and destination identifiers such as IP addresses and port numbers. As such in some embodiments the agent indicates priorities to the filter by routing information instead of application name. In other embodiments the agent provides to the filter a mapping between applications such as by application name or process id to the routing information in a routing table .

Based on the indicated priorities for applications in some embodiments the filter may place arrange or coordinate network packets into queues in support of the priorities. In one embodiment the filter may move network packets from temporary queues or from memory or other storage to a queue associated with the application a queue associated with a priority or a queue associated with both an application and a priority. For example in one embodiment all high priority network traffic may be placed in a high priority queue and arranged in order based on an order of priority of the application such as real time data applications prior to other applications . In some embodiments the network packets may be arranged in order in a priority queue based on the time the network packet was intercepted by the packet capture mechanism such as in a FIFO manner. In yet a further embodiment one queue may be used for prioritization by the filter . Each network packet may be placed and arranged in a priority order respective to all other intercepted network packets to provide a packet by packet prioritization across all applications and intercepted network packets. One ordinarily skilled in the art will recognize and appreciate that the network packets may be arranged in various priority queues such as high medium low or by any other granularity and be placed or arranged in the queue in any suitable manner in practicing the operations of the present invention described herein.

In one embodiment all network packets for an application are placed in a queue associated with the application . For example intercepted network packets for an application communicating to a first destination IP address and a first destination port may be placed in a first queue . In another embodiment all networks packets for a type of application such as an email or voice application or all network packets for a type of protocol used by the application such as RTP or UDP may be placed in a queue for prioritizing networks packets for one or more applications. For example online collaboration related applications may be placed and prioritized in a first queue for collaboration related applications. A second queue may be used for email related applications . In another example a queue may be used for applications communicating real time data or communicating using the RTP and or UDP protocol. In a further example a queue may be used for applications communicating using a remote display protocol such as ICA or RDP. Within each application associated queue organized by specific application type or category of application or by protocol the network packets may be further prioritized by the characteristic of the application generating them e.g. a foreground application the size of the network packet or the time the network packet was intercepted. In some embodiments one or more queues may be used for network packets intercepted but not prioritized because a policy does not exist or apply to the network packet or the policies indicate to ignore or not process the network packet for prioritization. One ordinarily skilled in the art will recognize and appreciate the various ways network packets may be placed and arranged in a priority based manner in queues associated with the application the type of application or the protocol used by the application and that the priority may be based on the policies specified for the client .

At step of illustrative method the network packets are communicated from the queues according to the determined priorities for the network packets. In some embodiments the network packets are organized into priority queues so that the network packets of the highest priority queue are communicated first and then the next highest priority queue second and so on. In other embodiments the queues are organized by application and therefore at step the present invention communicates network packets from the queue based on the respective priorities of the applications . Regardless of the queue organization and management one ordinarily skilled in the art will recognize and appreciate that the remote access client of the present invention will communicate the network packets from the queues in a manner according to or consistent with the determined priorities which in turn may be based or derived from the policies of the client.

In some embodiments the remote access client of the present invention considers other network factors in determining what network packets to communicate from what queue. For example the remote access client may receive an indication of network congestion such as receiving a window size of zero for a TCP connection related to an application . In another example the remote access client may recognize a high number of retransmits to a particular destination. As such in some embodiments the remote access client may throttle back or not communicate network packets related to other networks factors such as congestion even though the network packets may have a higher priority than other network packets in a queue . Thus the client controls and manages the prioritization of network communications of the client on an application basis and in accordance with any policies for the client and in further view of any network statistics and other factors occurring on the network.

In yet a further aspect and referring now to the present invention is related to providing a network disruption shielding technique for persistent and reliable connectivity. illustrates environment as discussed above in conjunction with . The environment illustrates network stacks and which may represent network stacks of computing devices or gateway such as any of the computing devices and the gateway illustrated in A or A. Each network stack may comprise one or more networks layers such as a TCP IP network layer on top of the frame network layer as one ordinarily skilled in the art will recognize and appreciate. Although the network stacks are illustrated in environment of with a certain set of network layers one ordinarily skilled in the art will recognize and appreciate that the network stacks may have any type and or form of network layers in any suitable combination and each of the network stacks may have different forms of each layer in relation to the other network stack.

The network stacks may be considered to have a first portion of the network stack and a second portion of the network stack. As illustrated in the example network stacks of the first portion of the network stack comprises the network layers at and below the TCP network layer. The second portion may comprise those network layers above the TCP network layer such as a UDP over SSL protocol layer. Although the first portion and the second portion are shown as portioned segmented or otherwise divided at the TCP layer the first portion and second portion may be formed at a higher or lower dividing layer in practicing the network disruption shielding technique of the present invention as one ordinarily skilled in the art will recognize and appreciate.

The network stacks illustrated in may represent an application on client such as the client depicted in establishing a peer to peer SSL VPN connection to a second computing device or alternatively a gateway . The client may be a mobile client such as a notebook personal digital assistant PDA a smart phone or any type of mobile computing or telecommunication device. The client may communicate real time data such as VoIP communication via the UDP protocol or RTP over UDP via the SSL session established to the peer device or gateway . In one embodiment the agent of the remote access client establishes and maintains the SSL or SSL VPN session to the gateway or to peer computing device . The agent may operate in user mode and may handle any network layer and protocol processing related to the second portion of the network stack along with any application layer protocols. As a TCP IP based network the UDP over SSL session of the second portion of the network stack may be communicated over a TCP IP stack forming the first portion of the network stack . In view of the remote access client of the present invention such as illustrated in or A the filter may be a network driver operating in kernel mode within the first portion of the network stack 

The present invention uses a network disruption shielding technique as depicted by illustrative method in to maintain the second portion of the network stack through a network level connection interruption such as any type and or form of network disruption to the first portion of the network stack . The network disruption shielding technique of the present invention may be performed transparently to an application of the client a user of the client any one or more network layers above the first portion and the gateway or peer computing device and any portion of their respective network stacks . In one embodiment the network disruption is shielded without notification to the user of the client that the network was disrupted or a session was interrupted.

In brief overview of illustrative method at step a client establishes a session via at least a first protocol over a network connection between the client and another device such as a peer computing device or gateway. As such a network stack is established or used on the client . The network stack has a first portion and a second portion . At step a disruption in the network connection is detected causing the first portion of the network stack to be disestablished or otherwise disrupted from being used or continued to be used. At step the present invention maintains the second portion of the network stack during the disruption and maintaining a session or sessions associated with the network layers of the second portion 

During the disruption at step any network packets related to the second portion of the network stack may be queued. At step the first portion of the network stack is reestablished or otherwise received from the network disruption. While the first portion of the network stack is reestablished the present invention maintains the second portion and sessions thereof allowing at step to continue with the session by linking or re associating the second portion with the first portion of the network stack . The network connection and or the session may automatically be re authenticated at step . At step the illustrative method may communicate any queued network packets and continue with the session transparently as if the network disruption did not occur.

In an embodiment of illustrative step a first computing device may establish a network connection with a second device such as a peer computing device or a gateway by any suitable means and or mechanism and using any type and or form of connection based protocol. For example the network connection may be established via a TCP connection on a TCP IP network or by an SPX connection on an IPX SPX network. In some embodiments the network connection may be initiated by any of the applications on the client such as any application illustrated in . For example a remote display client such as an ICA client of Citrix Systems Inc. or a Remote Display Client of Microsoft Corporation may initiate or establish the network connection. In other embodiments the network connection of illustrative step may be initiated and or established via the agent filter or any other portion of the remote access client . In one embodiment the establishing of the network connection forms the first portion of the network stack . In other embodiments the first portion of the network stack or portion thereof is established via connection to a network upon startup of the client .

In some embodiments the second portion of the network stack is formed by establishing one more sessions such as an SSL session via any type and or form of protocol over the network connection such as a remote display protocol of ICA or RDP. The session may be established via any application or the remote access client of the client. In one embodiment the session may correspond to a tunneling or gateway session with a peer computing device or a gateway . In another embodiment the session may be any type of interactive session such as a media session established via a signaling protocol SIP for example. For example the session of the second portion of the network stack may comprise a VoIP communication session such as one established by illustrative method of . Additionally there may be multiple sessions associated with the second portion of the network stack . For example an SSL or SSL VPN session may form one session while a second session such as media session via RTP over UDP may form a second session. Additionally at any application layer of the network stack one or more applications on the client may establish an application level session with a peer computing device . In one embodiment the agent of the remote access client is responsible for establishing and maintaining the second portion of the network stack and one or more of the associated sessions.

At step of the illustrative method of the present invention a disruption is network connection is detected. In one embodiment the network disruption may be caused by a mobile client roaming between networks and networks segments which in some embodiments causes the client to obtain a new network IP address and or host name. In some embodiments the disruption disrupts the first portion of the network stack such as for example causing a TCP or SPX connection to be disconnected. In one aspect the disruption causes the first portion or any portion thereof of the network stack to be disestablished or otherwise needing to be re established reconnected reconfigured or rebuilt. For example in some embodiments the IP layer of the network stack may maintain intact while the TCP layer is reestablished. In one embodiment any TCP related drivers may need to be re started. In other embodiments the TCP IP layer be intact even though the network connection is disrupted and only a new TCP connection needs to be established. In other embodiments the TCP IP layer is intact but needs to reconfigure itself for a new network or network segment such as changing the IP address of the client . One ordinarily skilled in the art will recognize and appreciate the various ways a network connection may be disrupted and impact or affect a first portion of the network stack.

In some embodiments the agent or any other portion of the remote access client may detect the network disruption by any suitable means and or mechanisms. In one embodiment the agent may determine a network disruption by receiving an error message or failure upon calling or executing an API call to the first portion of the network stack . For example the SSL session maintained by the agent for the second portion relies or depends on the TCP connection of the first portion of the network stack . As the agent transacts via the SSL session the agent may receive an error or failure message indicating a problem with the TCP connection. In other embodiments the agent may receive an event or message from any network layer of the first portion of the network stack indicating a network disruption. One ordinarily skilled in the art will recognize and appreciate the various ways the network disruption may be detected.

At illustrative step in some embodiments upon detection of the network disruption the agent or any other portion of the remote access client of the present invention maintains the second portion of the network stack during the disruption. For example although the SSL based session maintained by the agent depends on an underlying TCP connection the agent keeps the SSL session open or active through the disruption to the TCP connection. As there may multiple sessions associated with one or more layers of the second portion of the network stack the agent in some embodiments keeps one or more or all of the multiple sessions open or active although the first portion of the network stack is disrupted.

At step of illustrative method the remote access client of the present invention in some embodiments queues one or more network packets of any of the protocols related to the second portion of the network stack during the network disruption. The remote access client may use any type and or form of queuing mechanisms such as any of the queues illustrated in . In other embodiments the remote access client may discard network packets during the disruption such any packets related to a lossy protocol such as RTP over UDP for voice communications. In some cases it may be desirable to discard packets such as UDP packets to reduce latency and quality issues such as in voice communications. In further embodiments the remote access client may queue some network packets and discard other network packets. In an additional embodiment the remote access client may queue the network packets and discard some or all of the network packets after a predetermined period of time. The remote access client may use the policies to determine which network packets to queue and or discard. For example a network packet of a first application may be queued while a network packet of a second application is discarded. In other embodiments the remote access client may use any network statistics or any network traffic inspection techniques for example stateful inspection as known to those skilled in the art to determine whether to queue and or discard network packets during the disruption.

At step of illustrative method the first portion of the network stack is reestablished while the second portion of the network stack is maintained along with maintaining any desired session or sessions of the second portion of the network stack . The first portion of the network stack may be reestablished by any suitable means and or mechanisms. For example the client may reestablish the TCP IP connection to the network such as by logging into a new network for a roaming mobile client . In other embodiments the remote access client such as via the agent or the filter reestablishes the first portion of the network stack . For example the agent may initiate and establish a new TCP connection. Upon reestablishing the first portion the second portion of the network stack is linked with re associated with or starts to use or continue to use the first portion to reestablish the network stack . In some embodiments the agent may be notified by an event of any network layer that the first portion has been reestablished or in other embodiments may poll by any predetermined frequency to determine the first portion is reestablished. For example the agent may check if the TCP connection is active or can be reconnected.

In some embodiments at step the remote access client such as the agent may automatically re authenticate the client or a user of the client for the network connection such as a TCP connection for the first portion of the network stack . For example the remote access client may automatically re authenticate the client to a network using any network related credentials of a user of the client . Additionally the remote access client may automatically re authenticate the client or a user of the client for any session associated with the second portion of the network stack . For example the SSL session between the agent and the gateway or peer computing device may be re authenticated.

In another example an application may be accessing a host service web server or application server that uses authentication credentials for access. The agent may automatically re authenticate the application to the corresponding service or server using application related authentication credentials. In some embodiments the remote access client may re authenticate the client and or user of the client at multiple levels such as for network access and or TCP connection SSL or SSL VPN session and or any application level sessions such as a media interactive user session for example a VoIP telephone session. Furthermore the remote access client may re authenticate at any time prior to step during step for example after communicating queued network packets but before continuing other communications or after step in response to a request to authenticate from a peer computing device such as a server or the gateway .

At step of illustrative method the remote access client of the present invention continues to use the session or sessions of the second portion of the network stack. If any network packets have been queued or remain queued at step the remote access client communicates the queued network packets and continues communicating any network packets of the client such as network packets generated by or sent to the one more applications of the client . As such the network disruption shielding technique of the present invention provides a seamless and transparent solution to nomadic mobile computing solutions and for generally providing reliable and persistent network connectivity and access.

In the example of a VoIP communications the illustrative method of the present invention will reduce the number of telephone call drops due to network disruptions and improve the usage of and experience with VoIP. A VoIP user will not need to reconnect the telephone call due to temporary network disruptions in network availability as the remote access client of the present invention will automatically maintain the session and reconnect to the network. Additionally the remote access client of the present invention will automatically re authenticate the connection and sessions for providing security after the network disruption. Furthermore the network shielding technique of the present invention is useful for 1 continuing transactions commands or operations automatically through the network disruption 2 maintaining session related context and cache through the network disruption and 3 automatically handling change in network address of the client due to changes in the network.

By providing a reliable and persistent connection the present invention also avoids interruptions to transactions commands or operations as part of the functionality exercised between the a first computing device and a second computing device such as client and in . For example a file copy operation using Windows Explorer has not been designed to continue working after there is a disruption in a network connection. A user on the client may use the file copy feature of Windows Explorer to copy a file from the client to a server . Because of the size of the file or files this operation may take a relatively extended period of time to complete. If during the middle of the operation of the copy of the file to the server there is an interruption in the network connection between the client and the server the file copy will fail. Once the network connection is re established the user will need to start another file copy operation from Windows Explorer to copy the file from the client to the server. Under the present invention the user would not need to start another file copy operation. The network connection would be re established in accordance with the network disruption shielding technique of the present invention as illustrated in . As such the file copy of Windows Explorer would not get notified of the interruption in the network connection and therefore would not fail. The remote access client would re establish any connections and transmits any queued data so that operation can continue without failure. The remote access client would maintain a queue of the data related to the file copy operations that has not been transferred to the server because of the interruption in the network connection. Once the network connection is re established the remote access client can transmit the queued data and then continue on with transferring the data related to the file copy operation in due course.

Although this aspect of the invention is described in terms of a file copy operation example one ordinarily skilled in the art will recognize that any operation transaction command function call etc. transacted between a first computing device and a second computing device can be maintained and continued without failure from the network connection disruption and furthermore without the client or user of the client recognizing there was a disruption or having notice of the disruption. Additionally the transaction or operation can be maintained and continued transparently to the application the gateway second computing device and any part of the second portion of the network stack 

By providing the client with a reliable and persistent connection to a peer computing device or gateway the present invention avoids the process of opening a new user session with an application on the peer such as a host service on server by maintaining the user session through network connection interruptions. For each user session between peer computing device each computing device may maintain session specific context and caches and other application specific mechanisms related to that instance of the user session. For each new user session established these session specific context and caches need to be re populated or re established to reflect the new user session. For example a user on the client may have an http session with a server having a web server or web application. The server may keep context specific to providing this instance of the http session with the client . The context may be stored in the memory of the server in files of the server a database or other component related to providing the functionality of the server . Also the client may have local context specific to the instance of the http session such as a mechanism for keeping track of an outstanding request to the web server. This context may be stored in memory of the client in files on the client or other software component interfaced with the client . If the connection between the client and the server is not persistent then a new user session needs to be established with new session specific context on the server and the client . The present invention maintains the session so that a new session and therefore new specific session context does not need to be re established.

The present invention maintains the user session through network level connection interruptions and without notification to the user of the client that the session was interrupted. In operation of this aspect of the invention the client establishes the connection to the peer computing devices. Via the connection a session between the client and the server is established. The remote access client can store and maintain any session related information such as authentication credentials and client and host server context for the established session. Upon detection of a disruption in network connection the remote access client can re establish the first portion of the network stack while maintaining the second portion of the network stack. The network connection disruption may cause an interruption to the underlying TCP IP connection used by the session between the client and the server

However since the second portion of the network stack is maintained the session can be re established and or continued after the network connection is re established without the user on the client having notification that the session was interrupted. Thus the interruption of the session caused by the network connection disruption is effectively hidden from the user using the network disruption shielding techniques of the present invention.

Furthermore by providing a reliable and persistent connection the present invention also enables a client to traverse through different network topologies without re starting a session or an application on the client . For example the client may be a computer notebook with a wireless network connection. As the client moves from a first wireless network to a second wireless network the client s network connection may be temporarily disrupted from the first wireless network as a network connection is established with the second wireless network. The second wireless network may assign a new network identifier such as a host name or internet protocol address to the client . This new network identifier may be different than the network identifier assigned to the client by the first wireless network. In another example the client may be physically connected through an Ethernet cable to a port on the network. The physical connection may be unplugged and the client moved to another location to plug into a different port on the network. This would cause a disruption into the network connection and possibly a change in the assigned network identifier. Without the present invention any sessions between peer computing devices may need to be restarted due to the change in the network topology the disruption to the network connection and or the change in the assigned network identifier. By the method and systems described herein the remote access client of the present invention maintains the network connection for the client and automatically re established the client s network connection including handling changes in the network topology and network identifier. The client and any applications or sessions on the client can continue to operate as if there was not a network connection disruption or a change in the network identifier. Furthermore the user on the client may not recognize there were any interruptions or changes and the client may not receive any notice of such interruptions.

In an additional aspect any of the techniques of the present invention such as the illustrative methods of B C B and B can be practiced in one or more combinations with each other. In one embodiment the peer to peer routing technique may be practiced with the false acknowledgement and or MTU adjustment techniques. This would provide a client communicating real time data such as VoIP to connect to the peer via a more optimal and direct route and to communicate the real time data via UDP over a secure SSL TCP IP connection while avoiding any latency due to any reliability mechanism of TCP and reduce fragmentation due to the encryption overhead. Additionally this embodiment may be further combined with the client side application aware prioritization technique and or the network disruption shielding technique. As such the secure real time data communications can be communicated from the client at higher priorities than other applications of the client to improve the quality of the real time experience such as VoIP. The network disruption technique would allow a mobile VoIP phone such as a soft phone of a notebook roam between network access points and automatically continue with the session.

The techniques of the present invention are complimentary to each other for network communication optimizations such as for example in VoIP communications over a SSL VPN gateway. As such each of the 1 peer to peer routing technique 2 the false acknowledgement technique 3 payload shifting technique 4 the MTU adjustment technique 5 the client side application aware technique and 5 the network disruption shielding technique of the present invention may be practiced with one or more of the following techniques and optimization of the present invention 1 the peer to peer routing technique 2 the false acknowledgement technique 3 payload shifting technique 4 the MTU adjustment technique 5 the client side application aware technique and or 5 the network disruption shielding technique.

In one further illustrative example of the present invention an online meeting collaboration and or desktop sharing service such as the hosted service of GoToMeeting.com WebEx.com or LiveMeeting.com may use the techniques of the present invention in one or more combinations. The host service may use a gateway and the techniques of illustrative method to facilitate a peer to peer connection between a first computing device of a meeting presenter and a second computing device of a meeting attendee. The computing devices of the meeting presenter and attendees may download via the host service the remote access client or any portions thereof. Once the meeting presenter and the meeting attendee establish a peer to peer connection the peer computing devices may use any of the optimization techniques of the present invention to optimize their communications such as the MTU adjustment technique client side application aware technique or the network disruption shielding technique. Along with the peer to peer routing the optimization techniques of the present invention will improve the performance efficiency and user experience of the online meeting collaboration or desktop sharing.

In yet a further aspect and in view of for example the remote access client of the present invention can distribute Dynamic Host Configuration Protocol DHCP IP addresses of the client or the publicly visible IP addresses to the telecommunication device such as either a hardware or software based VoIP telephone. The gateway of the present invention facilitates the discovery of the public IP addresses of the client such as client illustrated in . As such the techniques of the present invention enables protocols that communicate their IP address over the protocol to continue to function.

Many alterations and modifications may be made by those having ordinary skill in the art without departing from the spirit and scope of the invention. Therefore it must be expressly understood that the illustrated embodiments have been shown only for the purposes of example and should not be taken as limiting the invention which is defined by the following claims. These claims are to be read as including what they set forth literally and also those equivalent elements which are insubstantially different even though not identical in other respects to what is shown and described in the above illustrations.

