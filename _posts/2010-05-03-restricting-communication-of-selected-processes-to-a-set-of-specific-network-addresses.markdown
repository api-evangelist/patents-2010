---

title: Restricting communication of selected processes to a set of specific network addresses
abstract: Selected processes are associated with sets of specific network addresses, and the associations are stored. When a selected process creates a child process, an association between the child process and the set of network addresses with which the parent process is associated is stored. When a selected process is deleted, the association between the selected process and its set of network addresses is deleted. Each selected process is restricted to network address-based communication via its associated set of network addresses. Certain communication protocol subroutines associated with network address-based communication are intercepted by an interception module. The interception module detects attempts by selected processes to communicate via network addresses. If a selected process attempts to communicate via an unassociated network addresses, the attempted communication is prohibited.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08489764&OS=08489764&RS=08489764
owner: Digital Asset Enterprises, L.L.C.
number: 08489764
owner_city: Wilmington
owner_country: US
publication_date: 20100503
---
This application is a continuation application of commonly assigned U.S. patent application Ser. No. 12 025 727 filed on Feb. 4 2008 and entitled RESTRICTING COMMUNICATION OF SELECTED PROCESSES TO A SET OF SPECIFIC NETWORK ADDRESSES now U.S. Pat. No. 7 739 401 issued Jun. 15 2010 which is a divisional application of U.S. patent application Ser. No. 09 503 975 filed on Feb. 14 2000 and entitled RESTRICTING COMMUNICATION OF SELECTED PROCESSES TO A SET OF SPECIFIC NETWORK ADDRESSES now U.S. Pat. No. 7 343 421 issued Mar. 11 2008 both of which are hereby incorporated herein in their entireties by reference.

The present invention relates generally to computer network communication by software processes and specifically to restricting process communication to a set of specific network addresses.

With the popularity and success of the Internet server technologies are of great commercial importance today. Typically a single server program executes on a physical host computer and services client requests made to the host. Most commonly one network address is assigned to a physical host. However using Transmission Control Protocol Internet Protocol TCP IP and other transport protocols more than one network address can be assigned to a single physical host computer. Where a single network address is assigned to a physical host the server program services client requests made to the single network address. Where multiple network addresses are assigned the server program services client requests made to the multiple network addresses.

To service requests made to a host a server program executing on the host typically opens a communication transport channel socket and allows receipt of incoming communications targeted for any of the network addresses assigned to the host. Accepting a communication request by a server executing TCP IP is a three step process that includes waiting for the communication request from a client sending an acknowledgment signal to the client and receiving a return acknowledgment signal from the client. This three step process is called three way handshaking and is a feature of TCP IP communication.

A server program is simply a process. Multitasking operating systems can execute multiple processes simultaneously so it is technically possible for more than one server program to execute on a single physical host computer. The ability to execute multiple server programs on a single physical host is desirable because providing a unique physical host for each server program is expensive and inefficient. Hosting services are often provided commercially by an Internet Service Provider ISP . Absent the execution of multiple server programs on a single physical host an ISP would have to provide a separate physical host computer for every customer that purchases host services. Often a customer purchasing host services from an ISP will neither require nor be amenable to paying for use of an entire host computer. Generally only a fraction of the processing power storage and other resources of a host computer will be required to meet the needs of an individual customer.

Execution of multiple server programs on a single host would allow an ISP to utilize one host computer to provide commercial host services to multiple customers. Each customer would be assigned a single server program and would be provided with resources on the single physical host computer effectively sharing the host with other customers. A client computer would request data from a specific one of the servers by targeting communication requests to one of the network addresses of the host computer. Thus the functionality of numerous hosts would be provided by a single physical host computer servicing requests made to a plurality of server programs by multiple customers.

One problem that renders the execution of multiple servers on a single physical host commercially unviable today is the inability to restrict the communication of individual servers to a set of specific network addresses. There are two options by which a server program can register itself with the operating system to receive incoming communication requests. The first option is for a server to register itself to receive communication requests targeted to any of the network addresses of the physical host computer. A server program registered according to the first option receives communication requests arriving at all of the network addresses allocated to the host. Thus multiple server programs so registered can execute simultaneously and service requests made to the network addresses associated with the physical host but specific ones of the server programs can not be restricted to receiving and servicing requests made to specific ones of the network addresses allocated to the physical host. Thus any request made by any client to any network address allocated to the physical host could be received by any one of the server programs executing on the host.

Commercially desirable server programs must be associated with specific network addresses. Each customer of an ISP wants their server to receive and respond only to requests made thereto. Furthermore each customer wants only their server to receive its targeted requests. Customers could benefit from the lowered expense of executing multiple server programs on a single physical host but of course would insist on privacy between the multiple servers.

Customers would not accept a system in which a request targeted to their server could be received by a server of another customer of the ISP. The other customer could be a competitor and the request could comprise classified data. And of course servers are not generally programmed to process requests intended for other servers and thus requests received by another server could go unprocessed or could be improperly processed. Even in the best case scenario in which a server could process a received request intended for another server the processing server would be allocating resources paid for by one customer of the ISP to service a request made to another customer. Clearly the execution on a single host of multiple server programs which are not associated with specific network addresses is totally unacceptable for commercial purposes.

The second option by which a server program can register itself with the operating system to receive incoming communication requests is for the process to register itself to receive communication requests targeted to an individual network address associated with the physical host. Server programs registered according to the second option receive communication requests arriving only at a specific individual network address of the host. Thus multiple server programs so registered can execute simultaneously. Each server program receives and services requests made to a specific one of the network addresses associated with the physical host. However each server is restricted to receiving and servicing requests made to only one of the network addresses allocated to the physical host. Thus no server program can service requests made to multiple network addresses.

While it is desirable to be able to restrict a server program to communication via a specific set of network addresses it is at the same time desirable to be able to include in the specific set more than one network address. Many existing server programs that execute on dedicated physicals hosts are configured to service communication requests made to multiple network addresses. This functionality is a popular feature with purchasers of commercial host services. Were an ISP to commercially offer multiple server programs executing on a single physical host computer the customers would expect the servers to be able to communicate via multiple network addresses. Thus it is desirable for an ISP to be able to provide on a single physical host computer multiple servers each of which can service requests made to multiple network address.

There is an additional security related problem that results from not being able to restrict server programs to communication via specific network addresses. Without a mechanism to restrict a process to accessing a specific set of network addresses a server program could be written that intentionally receives or monitors communication requests made to another server executing on the same host. If a customer of an ISP or an unauthorized third party learned a network address associated with another customer s server it would be possible for the unauthorized party to create a server program to receive or monitor at a source code level communication via that address. The risk of such activity would obviously be unacceptable to customers of ISP s. Of course ISP s could examine the source code of all server programs to attempt to prevent such activity but such checking would be time consuming and expensive. It would be desirable for a process executing on the host external to every server program to ensure that no server program communicate via any unauthorized network address.

It is also important to understand that many server programs are being provided today by ISP s and other providers of host services. As explained above it would be desirable for existing ISP s to be able to provide multiple server programs on a single physical host. However many such ISP s would not want to replace their existing server programs with ones that could overcome the problems associated with providing multiple servers on a single physical host even if such servers were available. Upgrading server software is a time consuming and complicated process often involving costly down time and high labor expenses. It would be desirable to have a system to allow existing providers of server programs to provide multiple server programs on a single physical host without having to upgrade or replace their existing server software.

In summary what is needed is a method whereby a process can be restricted to communication via a set of specific multiple network addresses. That way ISP s could provide multiple commercially viable server programs on a single physical host computer. Furthermore the method should be external to server programs executing on a host so that unauthorized servers and third parties can be prevented from monitoring communication of other server programs. Finally the method should not require the replacement of existing server programs.

The present invention allows the restriction of process communication to a specific set of network addresses. In order to facilitate such restriction selected processes are associated with specific network addresses. Network address based communication of the selected processes is restricted to the associated network addresses. Certain attempts by selected processes to facilitate or conduct communication via a network address are detected including attempts to designate a network address to be used for subsequent communication. Only in response to a determination that the network address is associated with the process is the designation and hence the subsequent communication allowed to proceed. Also detected are attempts by selected processes to communicate without first designating a specific network address. Before such communication is allowed to proceed an associated network address is designated for the communication.

Selected processes that are to be restricted to communication via a set of specific network address are loaded by a modified loader program. A loader program is an operating system utility that is used to execute computer programs that are stored on static media. Typically a loader program loads an executable image from static media into process address space and then initiates execution of the loaded image by transferring execution to the first instruction thereof.

Like a standard loader program the modified loader of the present invention loads executable images from static media into process address space. Additionally the modified loader associates each loaded processes with a specific set of network addresses. The set can comprise one or more network address. The loader program associates the process with the set of addresses by storing an association between a process identifier of the process and the set of network addresses. In one embodiment the associations are stored in an association table. In other embodiments the associations are stored in other data structures as desired for example a linked list. The association table or other data structure is preferably stored in operating system address space but can also be stored in user space as desired. Each process that is to be restricted to communication via a specific set of network addresses is loaded by the modified loader program in this manner.

The loader program also associates the process with a dedicated local host address. A local host address is an address that is used to conduct intra computer communications between a server program and other processes running on the same physical computer. On a dedicated physical host computer only one local host address is necessary because only a single server program executes on that computer. All intracomputer communication with the server program is conducted via the single local host address. In TCP IP the single local host address is 127.0.0.1. On every physical host running TCP IP this address is reserved for intra computer TCP IP communication. However where multiple server programs processes execute on a single physical computer or in any scenario in which intra computer communication can be targeted to a plurality of processes each such process must have its own local host address via which it can conduct intra computer communication. If each server program utilized the same local host address intra computer communication targeted for any server program could be received by any other server program.

In order to ensure that all infra computer communication is private whenever the modified loader program loads a selected process the modified loader associates the selected process with a dedicated local host address. This association is then stored by the loader program. The dedicated local host address is reserved for the exclusive utilization of the selected process. The process uses its dedicated local host address for the sole purpose of intra computer communication. Once the associations have been stored the loader program proceeds to initiate execution of the loaded process by transferring execution to the first instruction thereof.

The stored associations are used to restrict the communication of processes to associated network addresses. In order to keep the associations complete and current the present invention intercepts system calls that create child processes and system calls that delete processes. System calls that create child processes are intercepted in order to associate a child process with the network addresses of the parent process. System calls that delete processes are intercepted in order to delete an association between a deleted process and a set of network addresses.

When a system call that creates a child process is intercepted an interception module examines the association table or other data structure in which associations are stored to determine if the parent process is associated with a set of network addresses. If so the interception module allows the creation of the child process to proceed and then updates the association table to include an association between the child process and the set of network addresses with which the parent process is associated. Communications of the child process are restricted to this set of network addresses. If the parent process is not associated with a set of network addresses the interception module simply allows the creation of the child process to proceed normally.

When a system call that deletes a process is intercepted the interception module examines the association table to determine if the process to be deleted is associated with a set of network addresses. If so the interception module allows the deletion of the process to proceed and then deletes the association in the table between the deleted process and the set of network addresses. If the process is not associated with a set of network addresses the interception module allows the deletion of the process to proceed normally.

The present invention detects when a selected process is attempting to designate a network address for subsequent communication and when a selected process is attempting to conduct network address based communication that does not require the pre designation of a network address. In order to so detect preferably the Transmission Control Protocol Internet Protocol TCP IP stack of the operating system is modified so as to intercept certain communication protocol subroutines that are associated with network address based communication. Modifying a communication protocol stack to intercept subroutines is similar to intercepting system calls. A communication protocol stack includes pointers to subroutines that perform various communication based tasks. The protocol stack is modified by replacing the pointers to certain subroutines that pertain to network address based communication with pointers to the interception module such that when the subroutines are called the interception module executes instead. Examples of network address based communication tasks performed by communication protocol stack subroutines include creating a communication channel associating a communication channel with a network address receiving data via a communication channel and transmitting data via a communication channel.

When a network address based communication subroutine is intercepted the interception module examines the association table to determine whether the process that called the subroutine is associated with a set of network addresses in other words the interception module determines whether the process is selected . If a selected process is attempting to designate a network address for subsequent communication the interception module ensures that the network address is associated with the process. If the network address is not associated with the process the interception module generates an error condition and does not allow the designation or subsequent communication to proceed. If a selected process is attempting to engage in network address based communication without designating a network address to be utilized for the communication the interception module ensures that the communication is conducted via an associated address.

If a selected process is attempting to conduct network address based communication that does not require the pre designation of a network address the interception module determines if a network address has been pre designated. If not the interception module designates an associated address. If an unassociated address has been designated the interception module does not allow the communication to proceed and instead generates an error condition. Thus processes that are associated with a set of network addresses are restricted to executing network based communication via the associated set of addresses. Where the process that called the subroutine is not associated with a set of network addresses the interception module allows the communication to proceed normally.

In an alternative embodiment of the present invention rather than modifying a communications protocol stack the present invention intercepts system calls that pertain to network address based communication. Interception of these system calls achieves the same result as the modification of the communication protocol stack. A communication protocol stack is at a lower level than a system call. In fact in order to request a communication task a process typically makes a system call. The system call in turn calls the subroutine in the appropriate communication protocol stack. Thus intercepting either the system call higher level or the subroutine lower level will generate the same result.

Because the present invention restricts network based communication of selected processes to a specific set of one or more network addresses the present invention may be readily utilized by ISP s to provide multiple commercially viable server programs executing on a on a single physical host computer.

It is to be understood that one desirable embodiment of the present invention operates externally to all other processes. The present invention detects when a process is attempting to designate a network address for subsequent communication and when a process is attempting to conduct network address based communication that does not require the pre designation of a network address. If the process attempting the communication is associated with a set of network addresses the communication is only allowed to proceed via an associated address. Therefore the present invention can ensure that unauthorized server programs processes and third parties are prevented from monitoring communication of other server programs.

It is also to be understood that the present invention does not require that the source code of the selected processes be rewritten or that the processes themselves be upgraded in any way. The present invention can restrict the communication of any process including all existing processes. Therefore the present invention can be used to restrict the network address based communication of server programs without requiring that the server programs be rewritten or upgraded.

It will be readily apparent to one skilled in the art that the present invention can be utilized to restrict process communication of any type of process to a specific set of network addresses. Thus although restricting network address based communication of server programs is one important function of the present invention the present invention is by no means so limited. For example the present invention can also be utilized to restrict network address based communication of client processes communication daemons device drivers and the like. All such uses are of course within the scope of the present invention.

An operating system kernel executes in operating system address space . Techniques known in the art are utilized to insert an interception module into the operating system . In a preferred embodiment an interception module is dynamically loaded into the operating system kernel while the kernel is active. The interception module is preferably in the form of object code the functional features of which are described in detail below. Preferably a single interception module that includes all of the object code described below is loaded into the operating system kernel . In alternative embodiments multiple interception modules are loaded each module including a subset of the object code.

Also inserted into the operating system is an association table which will be used to store associations between selected processes and sets of network addresses. Preferably the association table is loaded into the operating system kernel while the kernel is active. In alternative embodiments the associations are not loaded into the kernel but are stored in user address space or operating system address space as desired. In alternative embodiments of the present invention the associations are stored in a format other than a table for example a linked list.

Processes that are selected to have their network address based communication restricted to a set of specific network addresses are loaded into process address space by a modified loader program . As explained above a loader program is an operating system utility that is used to execute computer programs that are stored on static media. A loader program typically executes in user address space . When a user attempts to execute a computer program for example by typing the name of an executable file at a command line or by clicking on an icon associated with the program the loader program executes and proceeds to load an executable image from static media into process address space and then to initiate execution of the loaded image by transferring execution to the first instruction thereof.

The present invention utilizes a modified loader program to load selected processes that are to have their network address based communication restricted to a set of specific network addresses. Like a standard loader program the modified loader loads executable images from static media into process address space . The modified loader program proceeds to store in the association table or alternative data structure an association between the process identifier or in alternative embodiments alternative process identifying data such as process name of the loaded process and the set of specific network addresses for the process . Once the association has been stored the loader program initiates execution of the process by transferring execution to the first instruction thereof.

As stated above only selected processes are loaded by the modified loader program . Non selected processes are loaded with the standard default operating system loader program which simply loads and executes the process. Thus non selected processes are not associated with sets of network addresses.

The loading of selected processes and non selected processes with two different loader programs is possible because multitasking operating systems such as UNIX allow the use of multiple loader programs. The decision as to which processes are to be loaded with the modified loader program can be made by a system administrator or by a user. A system administrator can limit access to the modified loader program and thus limit the ability of users to specify which processes will be selected.

In an alternative embodiment of the present invention a single modified loader program is utilized to load both selected processes and non selected processes. In that embodiment a list of selected processes is stored in computer memory . The list is preferably dynamic and can be updated with additions or deletions as desired. The modified loader program utilizes the list to determine if a process to be loaded is a selected process . If so the modified loader program loads the selected process and stores the association as described above. If the process is not selected the modified loader simply loads the process in the manner of a default loader program.

In order to restrict the communication of selected processes to specific sets of network addresses the present invention intercepts certain system calls . Pointers to system calls are located in an operating system interrupt vector table . It is to be understood that the term interrupt vector table as used herein denotes an area in operating system address space in which there are stored the addresses of system calls. In the UNIX operating system this part of the operating system is called the interrupt vector table and that term is used in this specification. Other operating systems employ different terminology to denote the same system component. An interrupt vector table by any other name is still within the scope of the present invention.

A copy is made of a pointer to each system call to be intercepted. These copies of pointers are preferably stored in operating system address space but in an alternative embodiments are stored in user address space . Once the copies have been saved the pointers in the interrupt vector table to the system calls to be intercepted are replaced with pointers to the interception module such that when a system call to be intercepted is made the interception module executes instead. In one embodiment of the present invention this copying storing and replacing of pointers is performed by the interception model . In other embodiments copying storing and replacing of pointers is performed by a pointer management module executing in either operating system address space or user address space as desired. The pointer management module can either be a stand alone program or a component of a larger application program as desired.

Executing alternative code when a system call is made comprises intercepting the system call . The steps of inserting an interception module into the operating system making a copy of an operating system pointer to a system call and replacing the operating system pointer with a pointer to the interception module facilitate interception of a system call . When a call is made to a system call to be intercepted the operating system uses the pointer in the interrupt vector table to the interception module to execute the interception module .

It is to be understood that the term interception module is used herein to denote alternative object code that executes in response to the making of a system call. The alternative object code that executes when a system call is made is sometimes referred to as a system call wrapper as opposed to an interception module. Of course the execution of alternative object code in response to the making of a system call is within the scope of the present invention regardless of what the alternative object code is called.

It is to be understood that in the present invention not all system calls need be intercepted. Only pointers to system calls to be intercepted are replaced with pointers to the interception module . Pointers to system calls which are not to be intercepted are not replaced. Thus when a non intercepted system call is made the system call executes not the interception module .

Additionally in order to restrict the communication of selected processes to specific sets of network addresses a communication protocol stack is modified so as to intercept certain communication subroutines . It is to be understood that the term communication protocol stack is used herein to denote the layers of software e.g. transport layer internetwork layer hardware interface layer that facilitate inter computer and inter process communication according to a specific protocol. The layers of software that make up a communication protocol stack are typically stored in operating system address space . These layers of software are sometimes referred to by other names for example communication protocol suite. Of course the present invention is not limited to any specific name.

A communication protocol stack contains pointers to subroutines that perform various communication tasks. Non exhaustive examples of such subroutines include a subroutine that establishes a communication channel a subroutine that binds a communication channel to a network address and a subroutine that transmits data via a communication channel.

The present invention intercepts certain ones of these subroutines . To prepare to intercept subroutines a copy of a pointer to each subroutine to be intercepted is made. These copies are preferably stored in operating system address space but in an alternative embodiments are stored in user address space . Once the copies have been made and saved the pointers in the communication protocol stack to the subroutines to be intercepted are replaced with pointers to the interception module such that when a subroutine to be intercepted is called the interception module executes instead. In one embodiment of the present invention the modification of the communication protocol stack including the copying storing and replacing of pointers is performed by the interception model . In other embodiments the modification of the communication protocol stack is performed by a communication protocol stack modification module executing in either operating system address space or user address space as desired. The pointer management module can either be a stand alone program or a component of a larger application program as desired. In one embodiment the communication protocol stack modification module is the same software module as the pointer management module.

Executing alternative code when a subroutine is called comprises intercepting the subroutine . The steps of inserting an interception module into the operating system making a copy of a communication protocol stack pointer to a subroutine and replacing the communication protocol stack pointer with a pointer to the interception module facilitate interception of a subroutine . When a call is made to a subroutine to be intercepted the operating system uses the pointer in the communication protocol stack to the interception module to execute the interception module .

It is to be understood that in the present invention not all subroutines need be intercepted. Only pointers to subroutines to be intercepted are replaced with pointers to the interception module . Pointers to subroutines that are not to be intercepted are not replaced. Thus when a non intercepted subroutine is made the subroutine executes not the interception module .

It is also to be understood that a single operating system generally includes multiple communication protocol stacks each protocol stack facilitating communication according to a specific protocol. In one preferred embodiment of the present invention the communication protocol stack that is modified is the Transport Control Protocol TCP IP stack . Other embodiments modify other protocol stacks of other communication protocols as desired for example User Data Protocol UDP or Internet Control Message Protocol ICMP .

Each selected process is loaded into user address space by the modified loader program . For each selected process the modified loader stores in the association table an association between the process and a single specific network address. The selected process will be restricted to the use of this network address for all network address based communication. Additionally the loader program stores an association between the process and a dedicated local host address. The dedicated local host address is associated only with the selected process and only for intra computer communication. Recall that on a dedicated physical host computer only one local host address is necessary because only a single server program executes on that computer. All intra computer communication with the server can be conducted via the single local host address. However where multiple server programs processes execute on a single physical computer or in any application where intracomputer communication can be targeted to a plurality of processes each such process must have its own local host address via which it can conduct intra computer communication. Thus in the embodiment depicted in and each selected process is associated with a single dedicated local host address via which the process can conduct intra computer communication in addition to being associated with a single specific network addresses via which the process can conduct inter computer communication.

In the embodiment depicted in and all system calls that establish a child process are intercepted for example the UNIX spawn function . If a process is restricted to communication via a single network address it is necessary to so restrict all child processes created by the process . Otherwise a process could effectively communicate via a non associated network address by creating a child process and instructing the child process to communicate via the non associated network address. In order to restrict all progeny of selected processes all system calls that establish a child process are intercepted.

When a system call that establishes a child process is made the operating system uses the pointer in the interrupt vector table to execute the interception module . The interception module examines the association table to determine whether the process that is attempting to establish a child process is associated with a network address. If so the interception module first utilizes the saved copy of the pointer to the system call to make the system call . The system call establishes the child process in an alternative embodiment the interception module establishes the child process itself rather than making the system call . When the system call terminates the interception module stores in the association table an association between the child process and the single network address with which the parent process is associated. The child process will then be restricted to network address based communication via this associated network address. The interception module also stores in the association table an association between the child process and the local host address with which the parent process is associated. The child process will then be restricted to intra computer communication via the associated local host address. If the process that is attempting to establish a child process is not associated with a network address the interception module simply makes the system call such that execution control returns to the calling process after the system call executes.

In order to keep the association table current the present invention also intercepts system calls that delete terminate a process for example the UNIX exit function . Whenever a process makes a system call . to delete a process the interception module executes instead. The interception module examines the association table to determine whether the process to be deleted is associated with a network address. If so the interception module utilizes the copy of the pointer to execute the system call . The system call deletes the process in an alternative embodiment the interception module deletes process itself rather than making the system call . When the system call exits the interception module continues to execute and deletes the association in the association table between the deleted process and the network address. The interception module also deletes the association between the deleted process and its dedicated local host address. This is appropriate because the process no longer exists. If the process to be deleted is not associated with a network address the interception module simply makes the system call such that execution control returns to the calling process after the system call executes.

Every selected process is loaded by the modified loader program which stores an association between the process and the single network address via which the process is permitted to communicate. Every system call that establishes a child process is intercepted. If a selected process establishes a child process an association between the child process and the associated network address of the parent process is stored. Additionally every system call that deletes a process is intercepted. If a deleted process is associated with a network address the association is deleted. Thus the association table includes an association between every selected process and the single network address via which the selected process is permitted to communicate. Because the association table includes an association for every selected process the association table can be utilized to determine whether or not a specific process is selected and if so to restrict the communication of that process to the associated network address.

Network address based communication of selected processes is restricted to the associated network addresses. In order to restrict selected processes to communication via associated addresses certain attempts by processes to facilitate network address based communication and certain attempts by processes to communicate via a network address are detected. Specifically detected are attempts by processes to designate a network address for subsequent communication and attempts by processes to communicate without first designating a specific network address. When such attempts are detected the association table is examined to determine whether the process is a selected process . If so it is ensured that all communication is via an associated address.

In order to detect when a process attempts to designate a network address for subsequent communication the present invention intercepts certain communication protocol subroutines that facilitate network address based communication. Specifically the present invention intercepts subroutines that associate a communication channel with a network address for example the TCP IP bind function . Under TCP IP and other communication protocols many communication functions can not be executed until a process has first associated a communication channel with a network address via which the communication is to occur. If a process attempts to utilize such a function to communicate via a network address without first having associated a communication channel with the network address the function will not execute the communication but will instead generate an error. By intercepting subroutines that associate a communication channel with a network address the present invention can ensure that no selected process associates a communication channel with a non associated network address. This further ensures that no selected process communicates via a non associated network address by utilizing a communication function that requires that a communication channel be associated with the network address.

It is to be understood that by the term communication channel it is meant a logical interface via which communication can be conducted. A communication channel is typically although not necessarily associated with both a network address and a port. Typically separate communication channels must be present at each end of a communication session. A communication channel is sometimes denoted by the term communication channel end or the term communication channel end point. Communication channels include but are not limited to TCP IP sockets. In other words all TCP IP sockets are communication channels but not all communication channels are TCP IP sockets.

In order to intercept subroutines that associate a communication channel with a network address a communication protocol stack is modified so as to intercept these subroutines . In one preferred embodiment the TCP IP stack is modified. In other embodiments the protocol stacks of communication protocols are modified as desired. Regardless the communication protocol stack to be modified contains at least one pointer to at least one subroutine that associates a communication channel with a network address. The present invention intercepts such subroutines . When a process calls a subroutine to associate a communication channel with a network address the operating system uses the pointer in the communication protocol stack to execute the interception module . The interception module examines the association table to determine whether the process that is attempting to associate a communication channel with a network address is a selected process in other words a determination is made as to whether the process is associated with a specific address . If the process is not associated with a network address the interception module simply calls the subroutine such that execution control returns to the calling process after the subroutine executes.

If the process is selected the interception module examines the association table to determine whether the network address that the process is attempting to associate a communication channel with is associated with the process . If the address is associated with the process then the process is permitted to communicate via the network address. In this case the interception module calls the subroutine . The subroutine associates the communication channel with the network address to allow future communication via the network address by the process that called the subroutine . Execution control then returns to the calling process after the subroutine executes. In an alternative embodiment rather than calling the subroutine the interception module associates the communication channel with the network address associated with the process and then returns execution control to the calling process .

If the network address that the process is attempting to associate a communication channel with is not associated with the process another possibility is that the process is attempting to associate a communication channel with the local host network address. If the address the process is attempting to associate a communication channel with is the local host address of the physical host computer for example under TCP IP 127.0.0.1 the interception module associates the communication with the dedicated local host address of the process and then returns execution control to the calling process . The process can proceed to conduct intra computer communication via its dedicated local host address. If the address the process is attempting to associate a communication channel with the dedicated local host address of the process the interception module calls the subroutine . The subroutine associates the communication channel with the dedicated local host address to allow future intra computer communication via the dedicated local host address by the process that called the subroutine . Execution control then returns to the calling process after the subroutine executes. In an alternative embodiment rather than calling the subroutine the interception module associates the communication channel with the dedicated local host address of the process and then returns execution control to the calling process .

If the network address that the process is attempting to associate a communication channel with is not associated with the process and is not a local host address yet another possibility is that the process is attempting to associate a communication channel with a wildcard network address. It is possible for a process to call a subroutine that associates a communication channel with a network address and pass the subroutine a wildcard as the parameter that indicates the network address. Under TCP IP a wildcard is indicated by passing the value 0 typically represented by a constant such as INADDR ANY as a parameter. Passing a wildcard constitutes a request that the communication channel be automatically associated with a network address. Typically the communication channel is associated with the target network address of the next incoming communication request. This could be any network address associated with the physical host. Because the selected process is restricted to communication via the associated network address association of the communication channel with any address associated with the physical host is not permitted. Therefore when the interception module detects that a selected process is attempting to associate a communication channel with a wild card network address the interception module associates the communication channel with the network address with which the process is associated. The process is only permitted to conduct inter computer communication via the single associated network address. Thus when the process requests that a communication channel be automatically associated with a network address the interception module associates the communication channel with the network address with which the process is associated. After associating the communication channel with the network address the interception module returns execution control to the calling process .

If the process is attempting to associate a communication channel with any network address other than the network address with which the process is associated a local host address or a wildcard address the interception module generates an error condition. In one embodiment the interception module generates an error condition by throwing an exception. In another embodiment the interception module generates an error condition by returning an error code to the process that called the subroutine . Regardless the process is unable to communicated via the unassociated network address.

In order to detect when a process attempts network address based communication without having first designated a network address the present invention also intercepts subroutines that facilitate network address based communication without requiring that a communication channel first be associated with a network address. Certain subroutines allow network addressed based communication without requiring that the process first associate a communication channel with a network address. Non exhaustive examples of such subroutines include the TCP IP connect function sendto function and sendmessage function. The connect function attempts to establish a connection between a local communication channel and a remote computer. The sendto and sendmessage functions attempt to transmit data send packets to a remote computer. These are only examples of subroutines that facilitate network address based communication without requiring that a communication channel first be associated with a network address. Of course the present invention is not limited in scope to these specific examples.

Generally subroutines that facilitate network address based communication without requiring that the process first associate a communication channel with a network address do require that the calling process specify a communication channel. If the specified communication channel has already been associated with a network address subsequent communication will be conducted via that address. However if the communication channel has not already been associated with a network address the communication channel is automatically associated with a randomly chosen network address that is available for inter computer communication. This could be any network address associated with the physical host. Because the selected process is restricted to communication via a single specific network address association of the communication channel with a randomly selected network address associated with the physical host is not acceptable. To prevent this unacceptable random association the present invention intercepts subroutines that facilitate network address based communication without requiring that a communication channel first be associated with a network address.

The communication protocol stack is modified so as to intercept subroutines that facilitate network address based communication without requiring that a communication channel first be associated with a network address. When a process calls a subroutine that that facilitates network address based communication without requiring that a communication channel first be associated with a network address the operating system uses the pointer in the communication protocol stack to execute the interception module . The interception module examines the association table to determine whether the process that called the subroutine is a selected process. If the process is not associated with a network address the interception module simply calls the subroutine such that execution control returns to the calling process after the subroutine executes.

If the process is selected the interception module first determines whether or not the communication channel that was passed to the subroutine is already associated with a network address. If the communication channel is not already associated with a network address the interception module associates the communication channel with the network address via which the process is permitted to communicate. The interception module calls the subroutine which facilitates the network address based communication by the process alternatively the interception module facilitates the network address based communication by the process itself as opposed to calling the subroutine . The communication channel has now been associated with the network address via which the process is permitted to communicate. Therefore the subsequent network address based communication facilitated by the subroutine or interception module will be via this permitted network address.

If the communication channel is already associated with a network address the interception module determines whether or not that network address is the network address via which the process is permitted to communicate. If the network address with which the communication channel is associated is the network address via which the process is permitted to communicate the interception module calls the subroutine . The subroutine facilitates the network address based communication via the network address alternatively the interception module facilitates the network address based communication itself as opposed to calling the subroutine . Execution control then returns to the calling process .

If the network address with which the communication channel is associated is not the network address via which the process is permitted to communicate the interception module generates an error condition. In one embodiment the interception module generates an error condition by throwing an exception. In another embodiment the interception module generates an error condition by returning an error code to the process that called the subroutine . Regardless the process is unable to communicated via the unassociated network address.

As in the embodiment depicted in and in the embodiment depicted in and all system calls that establish a child process are intercepted. When a system call that establishes a child process is made the operating system uses the pointer in the interrupt vector table to execute the interception module . The interception module examines the association table to determine whether the process that is attempting to establish a child process is associated with a set of network addresses. If so the interception module first utilizes the saved copy of the pointer to the system call to make the system call . The system call executes thereby establishing the child process .

When the system call terminates the interception module continues to execute. The interception module stores in the association table an association between the child process and the set of specific multiple network address with which the parent process is associated. The child process will then be restricted to network address based communication via this set of associated network addresses. The interception module also stores in the association table an association between the child process and the local host address with which the parent process is associated. The child process will then be restricted to intra computer communication via the associated local host address. If the process that is attempting to establish a child process is not associated with a network address the interception module simply makes the system call such that execution control returns to the calling process after the system call executes.

As in the embodiment depicted in and in order to keep the association table current in the embodiment depicted in and system calls that delete a process are also intercepted. Whenever a process makes a system call to delete a process the interception module executes instead. The interception module examines the association table to determine whether the process to be deleted is associated with a network address. If so the interception module utilizes the copy of the pointer to execute the system call . The system call executes and deletes the process . When the system call exits the interception module continues to execute. The interception module deletes the association in the association table between the deleted process and the set of network addresses. The interception module also deletes the association between the deleted process and its dedicated local host address. If the process to be deleted is not associated with a network address the interception module simply makes the system call such that execution control returns to the calling process after the system call executes.

Every selected process is loaded by the modified loader program which stores an association between the process and a set of specific multiple network addresses via which the process is permitted to communicate. Every system call that establishes a child process is intercepted. If a selected process establishes a child process an association between the child process and the associated set of network addresses of the parent process is stored. Additionally every system call that deletes a process is intercepted. If a deleted process is associated with a set of network addresses the association is deleted. Thus the association table includes an association between every selected process and the set of specific multiple network addresses via which the selected process is permitted to communicate. Because the association table includes an association for every selected process the association table can be utilized to determine whether or not a specific process is selected and if so to restrict the communication of that process to the associated set of network addresses.

Network address based communication of the selected processes is restricted to the associated network addresses. In order to restrict selected processes to communication via associated addresses certain attempts by processes to facilitate network address based communication and certain attempts by processes to communicate via a network address are detected. Specifically detected are attempts by processes to designate a network address for subsequent communication and attempts by processes to communicate without first designating a specific network address. When such attempts are detected the association table is examined to determine whether the process is a selected process . If so it is ensured that all communication is via an associated address.

In order to detect when a process attempts to designate a network address for subsequent communication the present invention intercepts certain communication protocol subroutines that facilitate network address based communication. Specifically as in the embodiment depicted in and in the embodiment depicted in and subroutines that associate a communication channel with a network address are intercepted.

When a process calls a subroutine to associate a communication channel with a network address the operating system uses the pointer in the communication protocol stack to execute the interception module . The interception module examines the association table to determine whether the process that is attempting to associate a communication channel with a network address is a selected process. If the process is not associated with a set of network addresses the interception module simply calls the subroutine such that execution control returns to the calling process after the subroutine executes.

If the process is selected the interception module examines the association table to determine whether the network address that the process is attempting to associate a communication channel with is one of the addresses in the set associated with the process . If the address is in the set then the process is permitted to communicate via the network address. In this case the interception module calls the subroutine . The subroutine associates the communication channel with the network address to allow future communication via the network address by the process that called the subroutine . Execution control then returns to the calling process after the subroutine executes.

If the network address that the process is attempting to associate a communication channel with is not in the set associated with the process another possibility is that the process is attempting to associate a communication channel with the local host network address. The embodiment depicted in and processes such an attempt in the manner of the embodiment depicted in and .

If the network address that the process is attempting to associate a communication channel with is not associated with the process and is not a local host address yet another possibility is that the process is attempting to associate a communication channel with a wildcard network address. Recall that passing a wildcard to a subroutine that associates a communication channel with a network address constitutes a request to associate a communication channel with any network address available for network address based communication. Because the process is permitted to conduct network address based communication via a set of multiple network addresses each multiple network address of the set is available for network address based communication. Therefore it is desirable to associate a communication channel with each of the network address of the set. Thus when a process attempts to associate a communication channel with a wild card network address the interception module first associates the communication channel with one of the network addresses in the set. Next the interception module creates a communication channel socket for each remaining network address in the set and proceeds to associate each created communication channel with one of the remaining network addresses. The result is that for each network address in the set there exists a separate associated communication channel. The resulting communication channel network address pairs are then stored preferably in an auxiliary table but alternatively in other data structures as desired. The stored communication channel network address pairs are then available to the process for subsequent network address based communication. Also stored preferably in the auxiliary table is an indicator that the set of communication channel network address pairs associated with the previously existing communication channel that the process attempted to associate with a wild card network address. The purpose of this indicator is explained below.

If the process is attempting to associate a communication channel with any network address other than a network address with which the process is associated a local host address or a wildcard address the interception module generates an error condition. In one embodiment the interception module generates an error condition by throwing an exception. In another embodiment the interception module generates an error condition by returning an error code to the process that called the subroutine . Regardless the process is unable to communicated via the unassociated network address.

As in the embodiment depicted in and in order to detect when a process attempts network address based communication without having designated a network address subroutines that facilitate network address based communication without requiring that a communication channel first be associated with a network address are also intercepted. When a process calls a subroutine that facilitates network address based communication without requiring that a communication channel first be associated with a network address the operating system uses the pointer in the communication protocol stack to execute the interception module . The interception module examines the association table to determine whether the process that called the subroutine is a selected process. If the process is not associated with a set of network addresses the interception module simply calls the subroutine such that execution control returns to the calling process after the subroutine executes.

If the process is selected the interception module first determines whether or not the communication channel that was passed to the subroutine is already associated with a network address. If the communication channel is not already associated with a network address the interception module associates the communication channel with a random one of the network addresses via which the process is permitted to communicate. The interception module calls the subroutine which facilitates the network address based communication by the process . The communication channel has now been associated with one of the network addresses via which the process is permitted to communicate. Therefore the subsequent network address based communication facilitated by the subroutine will be via this permitted network address.

If the communication channel is already associated with a network address the interception module determines whether or not that network address is one of the network addresses via which the process is permitted to communicate. If the network address is one of the network addresses via which the process is permitted to communicate then the interception module calls the subroutine . The subroutine facilitates the network address based communication via the network address. Execution control then returns to the calling process after the subroutine executes.

If the network address with which the communication channel is associated is not one of the network addresses via which the process is permitted to communicate the interception module generates an error condition. In one embodiment the interception module generates an error condition by throwing an exception. In another embodiment the interception module generates an error condition by returning an error code to the process that called the subroutine . Regardless the process is unable to communicated via the unassociated network address.

Recall that a communication channel can be associated with a wildcard network address. An attempt to create such an association is a request by a process that subsequent communication utilizing the communication channel be conducted via any available network address. Such a communication channel can be thought of as a wildcard communication channel. In the embodiment depicted in and when a process attempts to associate a communication channel with a wildcard network address the interception module associates the communication channel with a set of communication channel network address pairs that includes each network address of the permitted set as described above. Subsequent communication utilizing the channel can be via any one of the channel address pairs that is available. Therefore in the embodiment depicted in and certain communication protocol subroutines and certain system calls are intercepted to ensure that communication utilizing a wildcard communication channel listening socket is via any available address in the set but not via an address not in the set.

In the embodiment depicted in and subroutines that receive on an existing communication channel an incoming request to initiate a communication session are intercepted e.g. the TCP IP accept function . Under TCP IP and other communication protocols a process can pass such a subroutine either a communication channel that is associated with a specific network address or a wildcard communication channel. When a process passes a wildcard communication channel the process is requesting that an incoming request be received via whatever network address is available. In the case of the embodiment depicted in and the request can be received via any one of the addresses in the set so it is desirable to determine which address in the set is available first and then to receive the request via that address.

When a process calls a subroutine that receives an incoming request to initiate a communication session the operating system uses the pointer in the communication protocol stack to execute the interception module . The interception module determines whether the communication channel that the process passed to the subroutine is a wildcard communication channel. To so determine the interception module examines the indicator in the auxiliary table to determine whether the communication channel is associated with a set of communication channel network address pairs . If so the channel is a wildcard channel and an incoming communication request can be received via any one of the communication channel network address pairs . Therefore the interception module retrieves the pairs from the auxiliary table and proceeds to identify one of the channel network pairs that is presently ready to receive an incoming communication request. If none of the pairs are ready the interception module waits until a first one is ready. In order to identify one of the communication channel network address pairs as being ready to accept an incoming communication request the interception module preferably calls a communication protocol subroutine that determines which of a specified set of communication channels is ready to receive an incoming communication request e.g. the TCP IP select function . Once a pair is identified as ready the interception module calls the subroutine that receives an incoming request to initiate a communication session and passes it the communication channel that has been identified as being ready to receive the incoming request. Because the communication channel is ready to receive the incoming request when the subroutine executes the channel receives the request immediately and the subroutine proceeds to return control to the calling process .

If the existing communication channel is not a wildcard channel then the interception module simply calls the subroutine for the process passing it the communication channel.

Also intercepted are subroutines that identify an available communication channel e.g. the TCP IP select function . Under TCP IP and other communication protocols a process can pass such a subroutine one or more communication channels and the subroutine will indicate a first one of the channels to become available for communication. Recall that a wildcard communication channel is associated with a set of communication channel network address pairs . If a process passes a wildcard communication channel to a subroutine that identifies an available communication channel it is desirable to pass the subroutine not the wildcard to communication channel but instead all of the communication channels of the set of pairs associated with the wildcard channel.

When a process calls a subroutine that identifies an available communication channel the operating system uses the pointer in the communication protocol stack to execute the interception module . The interception module determines whether the process passed a wildcard communication channel to the subroutine . If so the interception module retrieves the set of communication channel network address pairs associated with the wildcard communication channel. The interception module proceeds to call the subroutine passing it the communication channels of the pairs in place of the wildcard communication channel. In other words the wildcard communication channel is expanded into all of the communication channels associated therewith.

If the subroutine was passed only a wildcard communication channel the interception module passes the subroutine all of the associated channels and the subroutine indicates a first one to be ready for communication. If the subroutine was passed a wildcard communication channel and other non wildcard communication channels the interception module passes the subroutine all of the channels associated with the wildcard channel plus the other non wildcard channels passed to the subroutine . The subroutine then indicates the first one of all of these channels to be ready for communication. If no communication channel passed to the subroutine is a wildcard channel then the interception module simply calls the subroutine for the process .

Also intercepted are system calls that duplicate a communication channel e.g. the UNIX dup and dup2 functions . Whenever such a system call is made the interception module determines whether the channel to be duplicated is a wildcard channel. To so determine the interception module examines the indicators in the auxiliary table to determine whether or not the channel to be duplicated is associated with a set of channel address pairs . If so after allowing the system call to execute and duplicate the channel the interception module stores an indicator in the auxiliary table that the duplicate of the channel is associated with the set of channel address pairs with which the duplicated wildcard channel is associated. Then if a process subsequently uses the duplicate of the channel for communication the interception module will be able to determine that the duplicate is a wild card channel.

If the channel to be duplicated is not a wildcard channel the interception module simply makes the system call for the process .

Also intercepted are system calls that close a communication channel e.g. the UNIX close function . Whenever such a system call is made the interception module determines whether the communication channel to be closed is a wildcard channel. If so the interception module determines if any duplicates of the channel have been made. To so determine the interception module examines the indicators in the auxiliary table to determine if any other channels are associated with the set of channel address pairs with which the wildcard channel to be closed is associated. If at least one duplicate of the channel exists the interception module takes no action concerning the set of pairs . If no duplicates exist the channel to be closed is the only channel associated with the set of pairs so the interception module deletes the set of pairs from the auxiliary table . Regardless the interception module proceeds to make the system call to close the communication channel for the process .

It is to be understood that in one embodiment of the present invention rather than modifying a communications protocol stack the present invention intercepts certain system calls associated with network address based communication. Each communication protocol subroutine is associated with a system call . A communication protocol stack and its subroutines are at a lower than system calls . In order to request a communication task a process can make a system call which in turn calls the subroutine in the appropriate communication protocol stack . Thus interception of the appropriate system calls achieves the same result as the modification of the communication protocol stack . Thus intercepting either the system calls higher level or the communication protocol subroutines lower level will generate the same result.

