---

title: Extracting training scenarios from test cases for user-interface component recognition
abstract: In one embodiment, a method includes accessing a set of use cases of a software application and selecting, from the set of use cases, a subset of use cases that has a goodness-to-cost ratio that satisfies a predetermined requirement. Computing the goodness-to-cost ratio for the subset of use cases includes: for each use case from the subset of use cases, computing a second cost as a sum of the first costs associated with the user actions of the use case; computing a third cost as a sum of the second costs; for each user-interface component that is acted upon by at least one of the user actions of at least one of the use cases from the subset of use cases, computing a first goodness measure that indicates a level of user-action coverage that the subset of use cases provides on the user-interface component; computing a second goodness measure as a sum of the first goodness measures; and computing the goodness-to-cost ratio as a ratio between the second goodness measure and the third cost.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08504998&OS=08504998&RS=08504998
owner: Fujitsu Limited
number: 08504998
owner_city: Kawasaki-shi
owner_country: JP
publication_date: 20100526
---
There are multiple types of software applications one of which is user interactive software applications. A user interactive software application may be either a desktop based application that may be executed on a standalone computing system or a network based application that may be executed on a client or a server within a client server environment. With a user interactive software application typically there are one or more displayable views that may be displayed to a user of the application one view at a time on for example the display screen of the computing system or client device on which the application is executed. These displayable views are the output of the application and together they provide a user interface for the application. In some cases a particular displayable view may include one or more user interface components such as panels frames pull down menus pop up menus buttons check boxes selection lists or text fields that enable a user of the application to provide input to the application. The application may accept various types of input from the user in connection with specific views that are currently displayed to the user through for example a human input device such as a mouse a keyboard or a joystick. The user may provide different types of input through different user interface components contained in different views of the application.

This disclosure is now described in detail with reference to a few embodiments thereof as illustrated in the accompanying drawings. In the following description numerous specific details are set forth in order to provide a thorough understanding of this disclosure. However this disclosure may be practiced without some or all of these specific details. In other instances well known process steps and or structures have not been described in detail in order not to unnecessarily obscure this disclosure. In addition while the disclosure is described in conjunction with the particular embodiments it should be understood that this description is not intended to limit the disclosure to the described embodiments. To the contrary the description is intended to cover alternatives modifications and equivalents as may be included within the spirit and scope of the disclosure as defined by the appended claims.

A user interactive software application may include a user interface through which a user of the application may interact with the application. In particular embodiments the user interface of the application may include any number e.g. one or more displayable views. In particular embodiments a particular view may enable a user of the application to provide input to the application or may be used to display output of the application to the user or both. In particular embodiments a view may include one or more user interface components such as for example and without limitation windows panels frames pull down menus pop up menus clickable links buttons check boxes selection lists or text fields. The user may provide input to the application through specific user interface components contained in specific views. Similarly the application may display its output to the user using specific user interface components contained in specific views. A user interface component may also be referred to as a user interface artifact or a widget. A web application is a common example of a user interactive software application. In general a web application may include one or more web pages and each web page may be considered a displayable view of the web application. Each web page may include any number of user interface components or widgets such as for example and without limitation frames clickable links text fields buttons check boxes or selection lists. A user of the web application may interact with the web application through specific user interface components or widgets contained in specific web pages.

In particular embodiments the user interface components contained in a particular view of the user interface of the software application may be organized into a hierarchy. illustrates an example view of a user interface of a software application. View may include various types of user interface components organized into a hierarchy. For example at the top level of the hierarchy there is a window . Window may contain a panel a frame and two buttons and which may form the second level of the hierarchy. Frame may further contain three text fields and which may form the third level of the hierarchy.

In particular embodiments the programming code implementing the software application may include specific portions that implement the user interface of the application. In particular embodiments each user interface component may have its associated portions of the code that implement the functionalities of the user interface component. In particular embodiments a tool implemented as computer software or hardware or a combination thereof may be trained to automatically map a user interface component to its associated code i.e. the specific code that implements the functionalities of the user interface component . More specifically in particular embodiments given a displayable view of a user interface of a software application which may contain any number of user interface components of various types the component to code mapping tool may analyze the view to identify the individual user interface components contained therein and automatically map specific user interface components to the specific portions of the code of the software application that implement the functionalities of those user interface components.

In particular embodiments a component to code mapping tool may need to be trained before it is able to correctly identify user interface components of software applications and map individual user interface components to their respectively associated code. In particular embodiments the component to code mapping tool may be trained using one or more sets of use cases respectively associated with one or more software applications. Particular embodiments may select from a set of use cases associated with a software application a subset of use cases that has a goodness to cost ratio that satisfies a predetermined threshold requirement and train a component to code mapping tool using the subset of use cases.

In particular embodiments a software application may be associated with a set of test cases. These test cases may be constructed or obtained by any suitable means. For example the test cases may be designed and constructed based on the specification of the software application or as a part of the development and implementation process for the software application since all software applications should be tested and validated before they are ready to be deployed. In particular embodiments each test case may include a use case and a description or definition of the specific test to be performed in connection with the use case. In particular embodiments a use case included in a test case may specify a sequence of actions that may be performed in connection with the software application. For example the sequence of actions may be a sequence of user actions that may be performed by a user of the application in connection with or upon specific user interface components of the software application e.g. clicking a button or a link typing words in a text field checking a box or selecting a menu item and performing the user actions may provide various input to the application. The sequence of actions may reflect how the software application should be used in practice. For example a sequence of actions that may be performed in connection with a web application may include 1 type a username in the username field 2 type a password in the password field 3 click the login button 4 click the add to shopping cart button associated with a MP3 player 5 click the check out button and 6 type a credit number in the credit card number field. In particular embodiments the test description included in a test case may specify any information relating to the test such as for example and without limitation how the sequence of actions included in the use case of the test case are to be applied as test input to the software application the runtime environment in which the test is to be performed on the software application the specific test to be performed using the corresponding use case the coverage of the test the specific types of errors verified the correct output or behavior of the software application i.e. the expected test result and so on.

Particular embodiments may extract a set of use cases from a set of test cases associated with a software application as illustrated in step of . In particular embodiments step may be performed by component of system illustrated in . In particular embodiments component may take as input a user interactive software application and a set of test cases associated with software application . Component may parse each test case to extract the use case included in that text case and construct a set of use cases that contains the use cases extracted from the individual test cases . Component may provide as output use cases extracted from test cases .

In particular embodiments each use case may include a sequence of actions such as actions that may be performed by a user with respect to the software application and there may be any number of actions included in a particular use case. In particular embodiments each action may be represented using a three tuple in the form of or a four tuple in the form of . In particular embodiments action and type may be defined based on the programming language used to implement the software application with which the use case is associated. For example action may be used to specify the specific actions performed in connection with the user interface components of the software application e.g. action click assign mouse over and type may be used to specify the specific user interface components of the software application upon which the actions are performed e.g. type link button input box . In particular embodiments name may be an arbitrary string designated by a user or a developer of the software application. For example name may be used to indicate the names of the user interface components upon which the actions are performed. In particular embodiments value may be the actual values e.g. string value applied by a user in connection with specific actions.

For example an action of clicking a submit button may be represented using a three tuple as . An action of inputting a value 2 in a quantity input field may be represented using a four tuple as . The following illustrates an example use case where each action in the use case is represented using a three tuple or a four tuple 

Given a set of use cases associated with a software application e.g. a set of use cases extracted from a set of test cases associated with the software application particular embodiments may select from the set of use cases a subset of use cases as illustrated in step of . In particular embodiments the subset of use cases thus selected may be an optimal subset of use cases for the purpose of training a component to code mapping tool. In particular embodiments step may be performed by component of system illustrated in . In particular embodiments component may take as input a set of use cases and provide as output a subset and more specifically an optimal subset of use cases select from use case . Particular embodiments may consider an optimal subset of use cases for the purpose of training a component to code mapping tool to have certain desirable characteristics. For example particular embodiments may select a subset of use cases by minimizing the cost and the size of the subset while maximizing the component coverage of the subset.

In particular embodiments a set of use cases associated with a software application may include any number of use cases e.g. one or more use cases and each use case may include a sequence of actions that has any number of actions e.g. one or more actions . Let U u u . . . u denote a set of nuse cases where n 1 and each u U denoting a particular use case from U. In particular embodiments U is the set of use cases from which an optimal subset of use cases may be selected for the purpose of training a component to mapping tool. Let U u u . . . u denote a subset of nuse cases selected from U i.e. UU and 1 n n . In addition in particular embodiments as each use case includes a sequence of actions let u a a . . . a denote a sequence of nactions included in a particular use case u where n 1 and each a u denoting a particular action from u. In particular embodiments a sequence of actions may be performed in the same order as they are specified. For example given a sequence of action a a . . . a ais performed first followed by athat is performed second followed by athat is performed third and so on. Furthermore each action amay be performed in connection with a particular user interface component i.e. a widget of the software application with which the set of use cases e.g. U is associated i.e. each action may acts upon a particular user interface component and within each sequence of actions the individual actions may be performed in connection with the same or different user interface components.

In particular embodiments there may be a cost associated with performing each action included in each use case. In particular embodiments the cost associated with an action may represent the cost for a human user to perform the action in terms of for example and without limitation time computer resources and wages for the human user. Thus the cost associated with an action may be a non negative number. Particular embodiments may determine the cost for each action based on experiments or empirical data or may select a default cost e.g. 1 for each action. In particular embodiments each action included in a use case may be represented using another four tuple that takes into consideration the cost associated with performing the action in the form of a w i d c where 1 w represents a user interface component i.e. a widget such as a login button a clickable link or a text field in connection with which the action is performed 2 i represents the specific user action performed on w such as click mouse over or type text 3 d represents a string denoting the data associated with the action which may be an empty string such as a string representing a username or a password entered in text fields and 4 c represents the cost associated with performing the action which may be greater than or equal to 0 i.e. a non negative number such as 1 .

In particular embodiments there may be a cost associated with performing each use case. In particular embodiments the cost associated with a use case may represent the cost for a human user to perform the entire sequence of actions included in the use case. In particular embodiments the cost associated with a use case may be the sum of the individual costs associated with the individual actions included in that use case. If C a denotes the cost associated with an action a and ais included in a use case u i.e. a u then in particular embodiments the cost associated with u may be defined as

In particular embodiments a user interface component i.e. a widget is considered to be exercised or covered by a use case if the use case includes at least one action that is performed in connection with that user interface component e.g. at least one action that acts upon the user interface component . Given a user interface component covered by a use case the action that acts upon the user interface component may be any action along the sequence of actions included in the use case. When selecting a subset of use cases U for the purpose of training a component to mapping tool particular embodiments may attempt to maximize the number of user interface components covered by the use cases included in the subset i.e. maximizing the user interface component coverage of the subset . In addition particular embodiments may attempt to increase the diversity of the actions that are performed in connection with the user interface components. For example given a user interface component particular embodiments may attempt to select different sequences of actions included in different use cases that lead up to the specific actions being performed in connection with the user interface component so that the user interface component may be exercised within different scenarios. Similarly particular embodiments may attempt to select different use cases that include different types of actions being performed in connection with the user interface component.

In particular embodiments given a pair of use cases uand u and a user interface component w such that w is exercised in both uand u i.e. there is at least one action in uand at least one action in uthat are performed in connection with w umay be defined as u a a . . . a and a a u W a w and umay be defined as u a a . . . a and a a u W a w. In particular embodiments a distance between uand uwith respect to w denoted as D u u may be defined as

In particular embodiments given a set of use cases U or U and a user interface components w the distance for the set of use cases with respect to the user interface component may be the sum of the pair wise distances for all unique pairs of use cases in the set. Thus the distance for U with respect to w may be defined as

When selecting a subset of use cases U from a set of use cases U associated with a software application for the purpose of training a component to mapping tool particular embodiments may determine a goodness measure G U for U which represents the coverage Uprovides on the user interface components of the software application. That is G U may indicate how many user interface components are acted upon by the actions included in the use cases from U as well as the different types of actions that act upon the user interface components and the scenarios within which the user interface components are act upon. Particular embodiments may attempt to maximize the goodness measure of the subset of use case U selected from the set of use cases U. In particular embodiments the goodness measure for the subset of use cases with respect to all the user interface components covered by the subset of use cases may be the sum of the goodness measures with respect to the individual user interface components covered by the subset of use cases. Let G U denote the goodness measure of Uwith respect to a particular user interface component w covered by the use cases from U. In particular embodiments with respect to all the user interface components covered by the use cases from U the goodness measure G U may be defined as

In particular embodiments G U may be defined as G U C C f C D U where 1 frepresents the fraction of actions in connection with w represented in Uversus in U and 2 C C and Care the multiplicative costs to relatively weigh the benefit of covering a user interface component e.g. w covering more actions and covering with diverse scenarios respectively. More specifically given a user interface component w frepresents the ratio between the number of actions included in the use cases from Uperformed in connection with w and the number of actions included in the use cases from U performed in connection with w that is 

Given any set of use cases U one way to find from U the subset of use cases U that has the maximum value of R U among all possible subsets of U may be to compute the value of R U for each and every possible subset of U and then select the subset that has the maximum value of R U . This may be done using a branch and bound algorithm. In this case the subset of use cases thus selected has the highest goodness to cost ratio R U among all possible subsets of U.

However if the number of use cases in U is relatively large then there may be a very large number of possible subsets of U. In this case it may take a great amount of resources e.g. in terms of time and computer resources to verify the value of R U for each and every possible subset of U which may not always be practical in real world applications. In fact given any set of use cases U depending on the size or complexity of U sometimes selecting from U the optimal subset of use cases U i.e. the subset of U that has the highest value of R U among all possible subsets of U may have NP complete computational complexity. In such cases in practice it may not be possible or it may be very difficult to find an exactly optimal subset of use cases from U.

Instead particular embodiments may use a greedy algorithm to approximate an optimal subset of use cases. Given a set of use cases U first particular embodiments may select from U those use cases that each uniquely cover a user interface component or include a component action combination and include these use cases in the subset U. That is each selected use case is the only use case from U that covers a particular user interface component or includes a particular component action combination. Next particular embodiments may examine the remaining use cases from U one use case at a time. Particular embodiments may select the one remaining use case from U that if added to U causes R U to increase the most i.e. maximally increases the value of R U and add this use case to U. Particular embodiments may repeat this step i.e. selecting the one remaining use case from U that if added to U causes R U to increase the most and add this use case to U until no use case remains in U that if added to U causes R U to increase further. At this point particular embodiments may consider Ua sufficient approximation of the optimal subset of use cases that may be selected from U. Consequently particular embodiments may need to compute R U each time another use case is added to Uusing the equations provided above.

Alternatively particular embodiments may approximate an optimal subset of use cases using Simulated Annealing. Briefly with the Simulated Annealing algorithm particular embodiments may begin with a seed subset of use cases selected from U and iteratively attempt to improve the value of R U using heuristics until the subset of use cases has an acceptable R U . At this point particular embodiments may consider Ua sufficient approximation of the optimal subset of use cases that may be selected from U.

When approximating an optimal subset of use cases selected from a set of use cases particular embodiments may compare the value of R U for the subset U to a predetermined threshold or some other type of requirement. If the value of R U for Usatisfies this predetermined requirement then particular embodiments may consider Uto be sufficiently optimal for the purpose of training a component to code mapping tool.

In particular embodiments the subset of use cases U thus selected may be used to train a component to code mapping tool as illustrated in step of . In particular embodiments step may be performed by component of system illustrated in . In particular embodiments component may take as input a subset of use cases and a component to code mapping tool train component to code mapping tool using selected use cases and provide as output component to code mapping tool after it has been trained.

In particular embodiments a trained component to code mapping tool may be used to map user interface components of a web application to their corresponding code. In particular embodiments a web application may include any number of web pages and each web page may include any number of user interface components e.g. panels frames text fields buttons check boxes or menu lists . Each web page may be represented using Document Object Model DOM as a hierarchical DOM structure or DOM tree. In this case each user interface components contained in the web page may be represented as a DOM sub tree that includes a set of one or more DOM elements. In particular embodiments the DOM sub tree may include a root DOM node and one or more child DOM nodes. In some cases the root DOM node or one or more of the child DOM nodes of the sub tree root node may include an event handler for the corresponding user interface component. The component to code mapping tool may analyze the DOM structure the determine the individual DOM sub tress representing the specific user interface components and then map the user interface components to their corresponding code.

A component t code mapping tool thus trained may be used in many practical applications. For example illustrates a test environment in which a software application may be tested and formally validated. In particular embodiments test environment may include a guidance engine a web crawler a requirement generator a form data assistant and a validation toolkit . The components of test environment may each be implemented as hardware software or a combination thereof. In particular embodiments the process illustrated in may a part of form data assistant which automatically generates user input data for a web application .

In particular embodiments with the aid of guidance engine web application crawler may access and crawl web application and output a navigation model for web application . In particular embodiments requirement generator may generate implementation level validation requirements based at least in part on user level validation requirements e.g. use cases . In particular embodiments validation requirements may be applied as input to validation toolkit and validation toolkit may validate web application using navigation model in conjunction with validation requirements and output validation results . In particular embodiments a component to code mapping tool may be a part of requirement generator and may be used to identify the user interface components of a software application being tested e.g. web application and map these user interface components to their associated code that implements the functionalities of the user interface components.

Particular embodiments may be implemented in a network environment. illustrates an example network environment suitable for providing software validation as a service. Network environment includes a network coupling one or more servers and one or more clients to each other. In particular embodiments network is an intranet an extranet a virtual private network VPN a local area network LAN a wireless LAN WLAN a wide area network WAN a metropolitan area network MAN a portion of the Internet or another network or a combination of two or more such networks . This disclosure contemplates any suitable network .

One or more links couple a server or a client to network . In particular embodiments one or more links each includes one or more wireline wireless or optical links . In particular embodiments one or more links each includes an intranet an extranet a VPN a LAN a WLAN a WAN a MAN a portion of the Internet or another link or a combination of two or more such links . This disclosure contemplates any suitable links coupling servers and clients to network .

In particular embodiments each server may be a unitary server or may be a distributed server spanning multiple computers or multiple datacenters. Servers may be of various types such as for example and without limitation web server news server mail server message server advertising server file server application server exchange server database server or proxy server. In particular embodiments each server may include hardware software or embedded logic components or a combination of two or more such components for carrying out the appropriate functionalities implemented or supported by server . For example a web server is generally capable of hosting websites containing web pages or particular elements of web pages. More specifically a web server may host HTML files or other file types or may dynamically create or constitute files upon a request and communicate them to clients in response to HTTP or other requests from clients . A mail server is generally capable of providing electronic mail services to various clients . A database server is generally capable of providing an interface for managing data stored in one or more data stores.

In particular embodiments one or more data storages may be communicatively linked to one or more severs via one or more links . In particular embodiments data storages may be used to store various types of information. In particular embodiments the information stored in data storages may be organized according to specific data structures. In particular embodiments each data storage may be a relational database. Particular embodiments may provide interfaces that enable servers or clients to manage e.g. retrieve modify add or delete the information stored in data storage .

In particular embodiments each client may be an electronic device including hardware software or embedded logic components or a combination of two or more such components and capable of carrying out the appropriate functionalities implemented or supported by client . For example and without limitation a client may be a desktop computer system a notebook computer system a netbook computer system a handheld electronic device or a mobile telephone. This disclosure contemplates any suitable clients . A client may enable a network user at client to access network . A client may enable its user to communicate with other users at other clients .

A client may have a web browser such as MICROSOFT INTERNET EXPLORER GOOGLE CHROME or MOZILLA FIREFOX and may have one or more add ons plug ins or other extensions such as TOOLBAR or YAHOO TOOLBAR. A user at client may enter a Uniform Resource Locator URL or other address directing the web browser to a server and the web browser may generate a Hyper Text Transfer Protocol HTTP request and communicate the HTTP request to server . Server may accept the HTTP request and communicate to client one or more Hyper Text Markup Language HTML files responsive to the HTTP request. Client may render a web page based on the HTML files from server for presentation to the user. This disclosure contemplates any suitable web page files. As an example and not by way of limitation web pages may render from HTML files Extensible Hyper Text Markup Language XHTML files or Extensible Markup Language XML files according to particular needs. Such pages may also execute scripts such as for example and without limitation those written in JAVASCRIPT JAVA MICROSOFT SILVERLIGHT combinations of markup language and scripts such as AJAX Asynchronous JAVASCRIPT and XML and the like. Herein reference to a web page encompasses one or more corresponding web page files which a browser may use to render the web page and vice versa where appropriate.

Particular embodiments may be implemented on one or more computer systems. illustrates an example computer system . In particular embodiments one or more computer systems perform one or more steps of one or more methods described or illustrated herein. In particular embodiments one or more computer systems provide functionality described or illustrated herein. In particular embodiments software running on one or more computer systems performs one or more steps of one or more methods described or illustrated herein or provides functionality described or illustrated herein. Particular embodiments include one or more portions of one or more computer systems .

This disclosure contemplates any suitable number of computer systems . This disclosure contemplates computer system taking any suitable physical form. As example and not by way of limitation computer system may be an embedded computer system a system on chip SOC a single board computer system SBC such as for example a computer on module COM or system on module SOM a desktop computer system a laptop or notebook computer system an interactive kiosk a mainframe a mesh of computer systems a mobile telephone a personal digital assistant PDA a server or a combination of two or more of these. Where appropriate computer system may include one or more computer systems be unitary or distributed span multiple locations span multiple machines or reside in a cloud which may include one or more cloud components in one or more networks. Where appropriate one or more computer systems may perform without substantial spatial or temporal limitation one or more steps of one or more methods described or illustrated herein. As an example and not by way of limitation one or more computer systems may perform in real time or in batch mode one or more steps of one or more methods described or illustrated herein. One or more computer systems may perform at different times or at different locations one or more steps of one or more methods described or illustrated herein where appropriate.

In particular embodiments computer system includes a processor memory storage an input output I O interface a communication interface and a bus . Although this disclosure describes and illustrates a particular computer system having a particular number of particular components in a particular arrangement this disclosure contemplates any suitable computer system having any suitable number of any suitable components in any suitable arrangement.

In particular embodiments processor includes hardware for executing instructions such as those making up a computer program. As an example and not by way of limitation to execute instructions processor may retrieve or fetch the instructions from an internal register an internal cache memory or storage decode and execute them and then write one or more results to an internal register an internal cache memory or storage . In particular embodiments processor may include one or more internal caches for data instructions or addresses. This disclosure contemplates processor including any suitable number of any suitable internal caches where appropriate. As an example and not by way of limitation processor may include one or more instruction caches one or more data caches and one or more translation lookaside buffers TLBs . Instructions in the instruction caches may be copies of instructions in memory or storage and the instruction caches may speed up retrieval of those instructions by processor . Data in the data caches may be copies of data in memory or storage for instructions executing at processor to operate on the results of previous instructions executed at processor for access by subsequent instructions executing at processor or for writing to memory or storage or other suitable data. The data caches may speed up read or write operations by processor . The TLBs may speed up virtual address translation for processor . In particular embodiments processor may include one or more internal registers for data instructions or addresses. This disclosure contemplates processor including any suitable number of any suitable internal registers where appropriate. Where appropriate processor may include one or more arithmetic logic units ALUs be a multi core processor or include one or more processors . Although this disclosure describes and illustrates a particular processor this disclosure contemplates any suitable processor.

In particular embodiments memory includes main memory for storing instructions for processor to execute or data for processor to operate on. As an example and not by way of limitation computer system may load instructions from storage or another source such as for example another computer system to memory . Processor may then load the instructions from memory to an internal register or internal cache. To execute the instructions processor may retrieve the instructions from the internal register or internal cache and decode them. During or after execution of the instructions processor may write one or more results which may be intermediate or final results to the internal register or internal cache. Processor may then write one or more of those results to memory . In particular embodiments processor executes only instructions in one or more internal registers or internal caches or in memory as opposed to storage or elsewhere and operates only on data in one or more internal registers or internal caches or in memory as opposed to storage or elsewhere . One or more memory buses which may each include an address bus and a data bus may couple processor to memory . Bus may include one or more memory buses as described below. In particular embodiments one or more memory management units MMUs reside between processor and memory and facilitate accesses to memory requested by processor . In particular embodiments memory includes random access memory RAM . This RAM may be volatile memory where appropriate. Where appropriate this RAM may be dynamic RAM DRAM or static RAM SRAM . Moreover where appropriate this RAM may be single ported or multi ported RAM. This disclosure contemplates any suitable RAM. Memory may include one or more memories where appropriate. Although this disclosure describes and illustrates particular memory this disclosure contemplates any suitable memory.

In particular embodiments storage includes mass storage for data or instructions. As an example and not by way of limitation storage may include an HDD a floppy disk drive flash memory an optical disc a magneto optical disc magnetic tape or a Universal Serial Bus USB drive or a combination of two or more of these. Storage may include removable or non removable or fixed media where appropriate. Storage may be internal or external to computer system where appropriate. In particular embodiments storage is non volatile solid state memory. In particular embodiments storage includes read only memory ROM . Where appropriate this ROM may be mask programmed ROM programmable ROM PROM erasable PROM EPROM electrically erasable PROM EEPROM electrically alterable ROM EAROM or flash memory or a combination of two or more of these. This disclosure contemplates mass storage taking any suitable physical form. Storage may include one or more storage control units facilitating communication between processor and storage where appropriate. Where appropriate storage may include one or more storages . Although this disclosure describes and illustrates particular storage this disclosure contemplates any suitable storage.

In particular embodiments I O interface includes hardware software or both providing one or more interfaces for communication between computer system and one or more I O devices. Computer system may include one or more of these I O devices where appropriate. One or more of these I O devices may enable communication between a person and computer system . As an example and not by way of limitation an I O device may include a keyboard keypad microphone monitor mouse printer scanner speaker still camera stylus tablet touch screen trackball video camera another suitable I O device or a combination of two or more of these. An I O device may include one or more sensors. This disclosure contemplates any suitable I O devices and any suitable I O interfaces for them. Where appropriate I O interface may include one or more device or software drivers enabling processor to drive one or more of these I O devices. I O interface may include one or more I O interfaces where appropriate. Although this disclosure describes and illustrates a particular I O interface this disclosure contemplates any suitable I O interface.

In particular embodiments communication interface includes hardware software or both providing one or more interfaces for communication such as for example packet based communication between computer system and one or more other computer systems or one or more networks. As an example and not by way of limitation communication interface may include a network interface controller NIC or network adapter for communicating with an Ethernet or other wire based network or a wireless NIC WNIC or wireless adapter for communicating with a wireless network such as a WI FI network. This disclosure contemplates any suitable network and any suitable communication interface for it. As an example and not by way of limitation computer system may communicate with an ad hoc network a personal area network PAN a local area network LAN a wide area network WAN a metropolitan area network MAN or one or more portions of the Internet or a combination of two or more of these. One or more portions of one or more of these networks may be wired or wireless. As an example computer system may communicate with a wireless PAN WPAN such as for example a BLUETOOTH WPAN a WI FI network a WI MAX network a cellular telephone network such as for example a Global System for Mobile Communications GSM network or other suitable wireless network or a combination of two or more of these. Computer system may include any suitable communication interface for any of these networks where appropriate. Communication interface may include one or more communication interfaces where appropriate. Although this disclosure describes and illustrates a particular communication interface this disclosure contemplates any suitable communication interface.

In particular embodiments bus includes hardware software or both coupling components of computer system to each other. As an example and not by way of limitation bus may include an Accelerated Graphics Port AGP or other graphics bus an Enhanced Industry Standard Architecture EISA bus a front side bus FSB a HYPERTRANSPORT HT interconnect an Industry Standard Architecture ISA bus an INFINIBAND interconnect a low pin count LPC bus a memory bus a Micro Channel Architecture MCA bus a Peripheral Component Interconnect PCI bus a PCI Express PCI X bus a serial advanced technology attachment SATA bus a Video Electronics Standards Association local VLB bus or another suitable bus or a combination of two or more of these. Bus may include one or more buses where appropriate. Although this disclosure describes and illustrates a particular bus this disclosure contemplates any suitable bus or interconnect.

Herein reference to a computer readable storage medium encompasses one or more non transitory tangible computer readable storage media possessing structure. As an example and not by way of limitation a computer readable storage medium may include a semiconductor based or other integrated circuit IC such as for example a field programmable gate array FPGA or an application specific IC ASIC a hard disk an HDD a hybrid hard drive HHD an optical disc an optical disc drive ODD a magneto optical disc a magneto optical drive a floppy disk a floppy disk drive FDD magnetic tape a holographic storage medium a solid state drive SSD a RAM drive a SECURE DIGITAL card a SECURE DIGITAL drive or another suitable computer readable storage medium or a combination of two or more of these where appropriate. Herein reference to a computer readable storage medium excludes any medium that is not eligible for patent protection under 35 U.S.C. 101. Herein reference to a computer readable storage medium excludes transitory forms of signal transmission such as a propagating electrical or electromagnetic signal per se to the extent that they are not eligible for patent protection under 35 U.S.C. 101.

This disclosure contemplates one or more computer readable storage media implementing any suitable storage. In particular embodiments a computer readable storage medium implements one or more portions of processor such as for example one or more internal registers or caches one or more portions of memory one or more portions of storage or a combination of these where appropriate. In particular embodiments a computer readable storage medium implements RAM or ROM. In particular embodiments a computer readable storage medium implements volatile or persistent memory. In particular embodiments one or more computer readable storage media embody software. Herein reference to software may encompass one or more applications bytecode one or more computer programs one or more executables one or more instructions logic machine code one or more scripts or source code and vice versa where appropriate. In particular embodiments software includes one or more application programming interfaces APIs . This disclosure contemplates any suitable software written or otherwise expressed in any suitable programming language or combination of programming languages. In particular embodiments software is expressed as source code or object code. In particular embodiments software is expressed in a higher level programming language such as for example C Perl or a suitable extension thereof. In particular embodiments software is expressed in a lower level programming language such as assembly language or machine code . In particular embodiments software is expressed in JAVA. In particular embodiments software is expressed in Hyper Text Markup Language HTML Extensible Markup Language XML or other suitable markup language.

This disclosure encompasses all changes substitutions variations alterations and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend. Similarly where appropriate the appended claims encompass all changes substitutions variations alterations and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend.

