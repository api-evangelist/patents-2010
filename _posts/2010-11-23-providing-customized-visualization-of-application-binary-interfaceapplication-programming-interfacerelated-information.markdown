---

title: Providing customized visualization of application binary interface/application programming interface-related information
abstract: A mechanism for providing customized visualization of Application Binary Interface-related information is described. A method of embodiments of the invention includes querying a database storing interface provisioning details and interface usage details relating to application binary interfaces (ABIs) associated with shared libraries provided by an operating system running on a computer system. The database further stores comparison results obtained from comparing the interface provisioning details with the interface usage details. The method further includes extracting a set of information from the database, and customizing visualization representation of the set of information. The set of information is composed of any part or all of the interface provisioning details, the interface usage details, and the comparison results.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08938706&OS=08938706&RS=08938706
owner: Red Hat, Inc.
number: 08938706
owner_city: Raleigh
owner_country: US
publication_date: 20101123
---
The present application is related to co filed U.S. patent application Ser. No. 12 953 285 entitled Process of Finding Out if Software Will Run on an Operating System Without Installing That Software and U.S. patent application Ser. No. 12 953 286 entitled Find and Track Information of Interface Usage of Software Libraries by Other Software and U.S. patent application Ser. No. 12 953 084 entitled Mechanism for Determining Support Criteria for Shared Libraries Based on Their Priority Levels which are assigned to the assignee of the present application.

The embodiments of the invention relate generally to software compatibility and more specifically relate to providing a mechanism for providing customized visualization of Application Binary Interface Application Programming Interface related information.

Multiple software programs that run on a computing device often share libraries provided by the based operating system employed at the computing device. For example these libraries can be used by the software programs to access various library or operating system functions e.g. reading files writing files file management network communications inter process communications memory management string manipulations user interface manipulations mathematics functions etc. . Typically these libraries change when the operating system changes or is updated for example upgrading to a newer version of an operating system can change the functions presented in one or more shared libraries change versions and arguments used in these functions and or change functionalities of some none or all of the library functions. As a result a software program developed for one operating system may not work on another operating system and similarly upgrading to the new operating system may cause a software program not to work on the new or updated operating system. To determine whether a software program is executable on a new or updated operating system the software program is typically re compiled to run on the new or updated operating system.

The aforementioned re compiling and re running of the software program is further complicated when multiple software programs are involved and further they include customer generated software programs e.g. third party software programs that are created and provided by sources independent of the one providing the operating system and shared libraries . Without having a way to calculate and visually present the importance of shared libraries a user e.g. software developer system administrator etc. remains unaware as to which of the shared libraries are important to the multiple third party software programs running on the operating system consequently by updating a shared library provided by the base operating system the user risks breaking existing software and adding to inefficiency by wasting system resources.

Embodiments of the invention provide a mechanism for providing customized visualization of Application Binary Interface related information. A method of embodiments of the invention includes querying a database storing interface provisioning details and interface usage details relating to application binary interfaces ABIs associated with shared libraries provided by an operating system running on a computer system. The database further stores comparison results obtained from comparing the interface provisioning details with the interface usage details. The method further includes extracting a set of information from the database and customizing visualization representation of the set of information. The set of information is composed of any part or all of the interface provisioning details the interface usage details and the comparison results.

The embodiments of the present invention are provided for determining support criteria for shared libraries based on their priority levels. ABIs application programming interfaces APIs provisioning data including a list of ABIs and APIs associated with shared libraries and their associated metadata relating to software programs running on a computer system is extracted and stored on a database in communication with the computer system. Further ABI API usage detail of various ABIs and APIs being accessed and used by third party software programs is detected and stored in the database. In one embodiment ABI API provisioning and usage details are compared with each other and then analyzed to determine priority levels of various shared libraries. These priority levels allow a user to assess a level of importance associated with each shared library.

In one embodiment any combination or all of the provisioning and usage details comparison results importance levels priority levels and other relevant information such as metadata customer requests or history shared libraries history or future anticipated use predetermined criteria etc. may be selected to be visualized in a customized manner using for example a graphical or chart like display. These visual presentations of data such as priority levels of shared libraries may then be used by the provider to establish support criteria for the shared libraries such as to provide a higher customer support for a library that has a high priority level as opposed to the one that is assigned a lower priority level. The provider uses the support criteria for shared libraries to address its customers requests based on their changing needs and thus to provide better customer services. Further for example the provider may choose to collect fees from its customers based on the support criteria they enjoy for the shared libraries used by their third party software programs.

As will be discussed throughout this document the provider here refers to a company or organization responsible for creating and providing the base operating system the shared libraries and local software programs while a customer or third party refers to a company or organization responsible for generating and providing the third party software programs. Further shared libraries and the related interfaces e.g. ABI API may be accessed and used by one or more third party software programs as well as by one or more local software programs that are part of the operating system and independent of the one or more third party software programs. ABI and or API refer to and may include data identifying ABIs and or APIs such as those providing identifying names locations IDs versions etc. The user refers to a computer programmer or system administrator associated with the provider.

In one embodiment host machine employs ABI API management mechanism ABI API mechanism to manage ABIs and APIs and their associated metadata such as the metadata that describes which shared library provides which ABI and or API and of what version along with identifying those Executable and Linkable Format ELF binary files that consume them. ABI API mechanism detects and extracts the ABI API metadata and stores it in a database . The ABI API metadata in one embodiment includes ABI API provisioning detail and ABI API usage detail as will be described later in this document. The ABI API provisioning detail for example includes the number of ABIs and or APIs associated with each shared library for various local software programs the known use of such ABIs and APIs various library or operating system functions associated with each ABI API and the importance of each of those operating system functions etc. On example of ABI API provisioning detail includes a prominent shared library like glibc libc.so.6 that provides an ABI strcmp which can be found in several applications and thus can be significantly important due to its high use frequency. The ABI API usage detail in one embodiment includes the usage detail of each ABI and or API and its associated shared library as it relates to each of the third party software programs . For example depending on the importance of a library or operating system function e.g. something as simple as printing deleting etc. to a third party software program an ABI and or API associated with that operating function is expected to be frequently accessed and used by that third party software program hence indicating the usage and thus the importance of the ABI and or API and its associated shared library . Further shared libraries and the related interfaces e.g. ABI API may be accessed and used by one or more third party software programs as well as by one or more local software programs e.g. including but not limited to local software programs that are part of and or provided by the same host or provider that provided the operating system and independent of the one or more third party software programs. As aforementioned ABI and or API refer to and may include data identifying ABIs and or APIs such as those providing identifying names locations IDs versions etc.

The database includes a storage device that is either employed on the host machine or remotely located on another machine that is in communication with the host machine . In one embodiment ABI API provisioning and usage details are then compared and analyzed by the ABI API mechanism to determine priority levels of various shared libraries . These priority levels may then be used by the provider e.g. organization or company that creates and or provides the operating system the shared libraries the local software program etc. to establish support criteria for the shared libraries such as to provide better customer support criteria for a shared library that has a high priority level as opposed to the one that is assigned a lower priority level to address and satisfy its customers changing requests and needs. Shared libraries refer to those libraries that are accessed and used by both the local and third party software programs to perform various operating system or library functions e.g. reading files writing files file management network communications inter process communications memory management string manipulations user interface manipulations mathematics functions etc. .

In one embodiment host machine further employs ABI API visualization mechanism to provide visualization of any of the ABI API related data. In one embodiment the ABI API visualization mechanism is versatile in providing visualization e.g. graphical representation of any combination of or all of the information obtained and or processed using the ABI API mechanism . For example the ABI API visualization mechanism may be used to provide a visual representation of one or more of ABI API provisioning details ABI API usage details operating system functions shared library importance levels shared library priority levels shared library support criteria policy recommendations information extracted from ABI API related metadata number of shared libraries per various versions of a software package e.g. Red Hat package manager package manager RPM a recursive acronym per various microprocessors number of ABIs and or APIs per library customer requests or history shared library history or anticipated future use and the like. Further as aforementioned the visual representation may include a graphical or chart like representation such as a column graph a line graph a pie graph a bar graph an area graph a scatter graph a stock graph a doughnut graph a surface graph a radar graph a bubble graph etc.

As is known in the art a library is a collection of classes and subroutines that are used to develop and support software programs such as representing code and data that provide services to both local and other independent software programs . For example an operating system provides shared libraries to implement aforementioned system functions that are used by various local and third party software programs . Other libraries may be provided by and specific to third party software programs created and provided by third party providers e.g. a third party software development company or organization other than the provider responsible for creating and providing the operating system and the shared libraries .

Each library provides a collection or group of ABIs. An ABI represents a compiled binary form of a function serving as a low level interface between software programs and the operating system . When a function is broken such as a print function such as when a print command executes double prints or does not print the entire text e.g. prints hell when asked to print hello etc. the broken function indicates a possible problem with the corresponding ABI and the associated library. In one embodiment an ABI may include details relating to data types sizes alignments calling conventions symbol versions system call numbers binary format of object files etc. An API refers to a library including routines to call data structures to manipulate and or object classes to use etc. Although ABI and API are referenced together as ABI API throughout this document it is contemplated that the ABI API mechanism may be used with ABIs and or APIs as necessitated or desired.

As aforementioned a third party or customer software program represents a software program that is developed by someone other than the provider that produces the operating system and the shared libraries . For example a third party software program may include a special purpose software program that is used for or by an organization e.g. media development software for media companies specialized modeling software etc. and like a local software program accesses and uses any number of shared libraries to utilize system functions.

In one embodiment ABI API extractor finds and extracts ABIs and or APIs associated with various operating system functions associated with and provided by the shared libraries . ABIs and APIs may generally refer to data identifying names locations IDs versions etc. ABI API extractor in one embodiment using for example a library controller or installer scans through the base operating system the local software programs and the shared libraries to find and extract their ABIs and or APIs and any metadata associated with them. Metadata may refer to various versions of any given ABI API and or library and where they come from such as ndx value bind value whether they are internal or not type of ABI API library etc. ABI API extractor in one embodiment using for example a library controller or installer scans through the base operating system the local software programs and the shared libraries to find and extract their ABIs and or APIs and any metadata associated with them. These extracted ABIs and or APIs and the associated metadata are organized as ABI API provisioning detail and stored in the database .

Similarly in one embodiment ABI API usage detector detects the use of various shared libraries by third party software programs . For example ABI API detector checks the various ABIs and or APIs associated with various system functions that are important to the third party software programs or monitors the access and use of relevant ABIs and or API that are accessed and used by the third party software programs to perform the important system functions. The information can then be used to determine which of the shared libraries are important to the third party software programs . Once the ABI API usage detail is detected it is then stored in the database . In one embodiment the importance of a shared library depends on the usage frequency of an ABI API based on its association with a library or operating system function. For example if a third party software program is known for printing documents then that third party software program is expected to use a particular library function that relates to printing e.g. print library function with a greater frequency than many of the other library functions and even more than by some of the other third party software programs . The aforementioned monitoring of the ABIs APIs can tell us the important of a particular ABI API such as in this example an ABI API that is associated with a shared library that relates to the print library function. Similarly the use of other library or operating system functions and consequently the use of their associated ABIs APIs can be monitored and from the monitoring data the importance of such ABIs APIs can be determined for example the higher the usage of an ABI API the higher the importance of a shared library associated with that ABI API and vice versa. In one embodiment the aforementioned monitoring of ABIs and or APIs may be performed by scanning a software code of the local and or third party software programs or in real time while executing the local and or third party software programs . One example of a monitoring technique includes keeping the usage detail of ABIs APIs by a local or third party software and adding a new software into a list to check after regular intervals whether they are still using the same ABI API or not. Further an in between check is performed to determine whether there is any breakage in the ABI API.

In one embodiment a comparison module compares the ABI API provisioning detail with the ABI API usage detail to determine the importance level of each shard library as it relates to one or more system functions that are important to and used by one or more of the third party software programs . For example of the shared libraries those shared libraries that relate to those library functions that more frequently used by various third party software programs are regarded as more important than those shared libraries that are associated with those library functions that are less frequently used or not used at all by the third party software programs . Although it is not necessary that an important threshold be assigned to a shared library in one embodiment a user may set one or more threshold levels to classify importance of shared libraries . For example a first shared library that is used more than 200 times by any of the third party software programs and or by more than 5 third party software programs may be regarded as extremely important while a second shared library that is used 150 199 times and or by 4 third party software programs may be classified as important and similarly a third shared library that is used 100 149 times and or by 3 third party software programs may be regarded as moderately important and so forth. It is contemplated that these classifications or threshold levels as well as other factors e.g. customer history customer needs etc. may be taken into consideration when forming support criteria for shared libraries . In one embodiment the comparison of the ABI API provisioning detail with the ABI API usage detail points out the importance of each shared library based on its access and use by one or more of the third party software programs as represented by an ABI and or API corresponding to a system function . The comparison results are stored in the database . It is contemplated that a particular third party software program may provide various libraries that are exclusive to the execution of that particular third party software program and may be part of a greater set of libraries but remain irrelevant to the shared libraries .

An analysis module in one embodiment analyzes the comparison results obtained from the ABI API provisioning and usage details comparison performed by the comparison module . The analysis of the comparison results includes the analysis module assigning a priority level to each shared library according to its importance level gathered from the comparison results. For example the higher the importance of a shared library according to the comparison results the higher the priority level assigned to it by the analysis module . Further in one embodiment the analysis module includes intelligence and decision making component to recommend support criteria policies for the shared libraries based on their assigned priority levels as well as one or more of user defined predetermined criteria customer requests customer history system bandwidth and or third party software program usage history etc. For example using these recommended support criteria policies the provider may decide to establish an extensive support criteria for those shared libraries that are identified as being frequency used such as used by five or more of the third party software programs while establish a somewhat lesser support criteria for other less popular shared libraries or the like. Further for example certain large and often used libraries e.g. glibc are known to be important but using the ABI API mechanism even a relatively small and rarely used library e.g. lib.b.2 libfreedom etc. may also be determined to be important for example to a particular customer based on its third party software program s use of that small library. Thus having known the importance of this library in one embodiment the provider may choose to establish appropriate support criteria relevant to this library that is customized for the particular customer. For example the provider may establish simpler and less expensive support criteria for less important shared libraries and or customers with lesser needs while put together more elaborate and extensive support criteria for more frequently used shared libraries and or more demanding customers. In one embodiment customizing comprises processing the set of information based on one or more of predetermined criteria provider requests customer requests customer history shared library usage history shared library usage forecast etc.

ABI API visualization mechanism in one embodiment prepares a customized visual presentation of any set of the aforementioned ABI API related data extracted from the database in a graphical or chart like form that is then provided to the provider. A user associated with the provider may use the visual presentation for for example decision making purposes with regard to forming support criteria for shared libraries for its customers generating better future versions of their software packages etc. In one embodiment this ABI API related data visualization or visual presentation is based on one or more of predetermined criteria provider requests customer requests customer history shared library usage history shared library usage forecast or the like. For example a user on behalf of a provider may request a visual representation of certain ABIs within certain versions of a particular software program for a particular customer such as based on the customer s use history as it relates to the customer s use of these versions of the software program and more specifically the use of these certain ABIs as they relate to various library or operating system functions .

In one embodiment a querying module of the visualization mechanism queries the database to extract any part or all of ABI API related data stored there by the ABI API management mechanism . The query may include an active extraction or a passive reception of a part or all of the stored information from the database depending on for example predetermined criteria for such queries as set forth by the provider and or in response to customer requests customer history shared library history etc. The active extraction refers to the querying module making an active extraction of any set of ABI API related information from the database in response to an explicit request such as a user request. The passive reception refers to an automatic reception of information from the database either periodically as set forth by the user or automatically upon occurrence of an event e.g. when a particular shared library is used for a certain number of times and or by a particular third party software program or completion of a preset time period. A processing module then processes the queried data according to the provider query such as the provider may request to visualize the progress of a particular entity over a number of years versions of a software package e.g. a number of ABIs provided by the shared libraries as found in the year 2008 2009 and 2010 versions of the software package . Once the queried data is processed for visualization a presentation module presents the processed data in the requested visualization form to a user via a display device. The data is then displayed by the display device.

Method starts at block with finding and extracting of ABIs and APIs and their associated metadata by an ABI API extractor. This ABI API provisioning detail is then saved in a database at block . At block usage detail of various ABIs and APIs associated with shared libraries as determined from their use by third party software programs is detected. At block this ABI API usage detail is stored at the database. At block in one embodiment the ABI API usage detail is compared with the ABI API provisioning detail to determine the importance level of each shared library based for example on the frequency by with a shared library is accessed and used by any number of third party software programs. At block these comparison results are stored in the database.

At block the comparison results are analyzed. These analyses include assigning a priority level to each shared library based on its determined importance level as set forth in the comparison results. As discussed previously for example a shared library may be assigned high importance if it is accessed and used by a large number of third party software programs or frequently accessed and used by only a small number of third party software programs. Further importance and priority level may be directly proportional to each other for example the higher the importance of a shared library the higher the priority level assigned to it.

At block the stored information e.g. ABI API provisioning details ABI API usage details comparison results other relevant information etc. at the database is queried by the ABI API visualization mechanism. In one embodiment these queries to extract ABI API related data may be made into the database based on active extraction or passive reception as described with reference to . The queried information is processed for visual representation at block . At block the processed information is then provided to a display device for a visual presentation e.g. graphical representation . The visual representation such as a pie graph may be customized for the user such as in response to a user request based on any number of factors such as predefined criteria customer requests and history customer loyalty shared library history and or anticipated future use etc. This visual representation of the data is used by the provider in determining and customizing support criteria for its customers.

RHEL refers to a Linux distribution also referred to as GNU Linux distribution that is a member of Unix like software distributions that are built on top of the Linux kernel. RPM Package Manager is a package management system and refers to software packaged in the .rpm file format and the package manager itself. RPM was intended primarily for GNU Linux distributions and its file format is regarded the baseline package format of the Linux Standard Base. It is contemplated that and their illustrated components and entities e.g. RPM RHEL processors x86 and x8664 etc. are merely used here as examples for brevity and ease of understanding and that the embodiments of the invention are independent of RPM RHEL processors and etc. and that the embodiments of the invention may relate to work with employ and or be employed on any type and number of computer systems servers platforms workstations processors operating systems local software programs third party software programs and the like.

The exemplary computing system includes a processing device a main memory e.g. read only memory ROM flash memory RAM dynamic RAM DRAM such as synchronous DRAM SDRAM DRAM RDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a secondary memory e.g. a data storage device in the form of a drive unit which may include fixed or removable machine accessible or computer readable storage medium which communicate with each other via a bus .

Processing device represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processing device may be complex instruction set computing CISC microprocessor reduced instruction set computer RISC microprocessor very long instruction word VLIW microprocessor or processor implementing other instruction sets or processors implementing a combination of instruction sets. Processing device may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. Processing device is configured to execute the processing logic for performing the operations and methods discussed herein.

The computing system may further include a network interface device . The computing system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT connected to the computing system through a graphics port and graphics chipset an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The data storage device may include a machine accessible storage medium or a computer readable storage medium on which is stored one or more sets of instructions e.g. ABI API management mechanism and ABI API visualization mechanism embodying any one or more of the methodologies or functions described herein. The ABI API management and visualization mechanisms may also reside completely or at least partially within the main memory e.g. ABI API management mechanism and ABI API visualization mechanism instructions and or within the processing device e.g. ABI API management mechanism and ABI API visualization mechanism processing logic during execution thereof by the computing system the main memory and the processing device also constituting machine readable storage media. Further for example ABI API management mechanism and ABI API visualization mechanism instructions may be transmitted or received over a network via the network interface device .

The machine readable storage medium may also be used to store the ABI API management and visualization mechanisms instructions persistently. While the machine accessible storage medium is shown in an exemplary embodiment to be a single medium the term machine accessible storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine accessible storage medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instruction for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term machine accessible storage medium shall accordingly be taken to include but not be limited to solid state memories and optical and magnetic media.

ABI API management mechanism and ABI API visualization mechanism modules components and other features described herein for example in relation to can be implemented as discrete hardware components or integrated in the functionality of hardware components such as ASICS FPGAs DSPs or similar devices. In addition the modules can be implemented as firmware or functional circuitry within hardware devices. Further the modules can be implemented in any combination hardware devices and software components.

In the above description numerous details are set forth. It will be apparent however to one skilled in the art that the present invention may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present invention.

Some portions of the detailed descriptions above are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as selecting extracting detecting comparing analyzing saving storing receiving monitoring communicating accessing providing facilitating visualizing querying displaying processing or the like refer to the action and processes of a computing system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computing system s registers and memories into other data similarly represented as physical quantities within the computing system memories or registers or other such information storage transmission or display devices.

The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a machine readable storage medium such as but not limited to any type of disk including floppy disks optical disks magnetic optical disks ROMs compact disk ROMs CD ROMs RAMs erasable programmable ROMs EPROMs electrically EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions each coupled to a computing system bus.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear as set forth in the description below. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.

The present invention may be provided as a computer program product or software that may include a machine readable medium having stored thereon instructions which may be used to program a computing system or other electronic devices to perform a process according to the present invention. A machine readable medium includes any mechanism for storing or transmitting information in a form readable by a machine e.g. a computer . For example a machine readable e.g. computer readable medium includes a machine e.g. a computer readable storage medium e.g. ROM RAM magnetic disk storage media optical storage media flash memory devices etc. a machine e.g. computer readable transmission medium non propagating electrical optical or acoustical signals etc.

Whereas many alterations and modifications of the present invention will no doubt become apparent to a person of ordinary skill in the art after having read the foregoing description it is to be understood that any particular embodiment shown and described by way of illustration is in no way intended to be considered limiting. Therefore references to details of various embodiments are not intended to limit the scope of the claims which in themselves recite only those features regarded as the invention.

