---

title: Web services access to content items stored by collaboration systems
abstract: A computing system receives a web services request to invoke a method of web Application Programming Interface (API). In response to receiving the web services request, the computing system invokes a method of a language-dependent API of a client component in a collaboration system. The client component communicates with a collaboration server component in the collaboration system using a proprietary communications protocol. The method of the language-dependent API is a method to obtain data from the collaboration server component. After invoking the method, the computing system sends a web services response whose contents depend on the data obtained from the collaboration server component.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08701127&OS=08701127&RS=08701127
owner: Microsoft Corporation
number: 08701127
owner_city: Redmond
owner_country: US
publication_date: 20100115
---
Collaboration systems allow users to collaborate with each other. Such collaboration systems comprise collaboration server components and client components. A collaboration server component of a collaboration system receives and stores content items generated by users. Other users can use the client components of the collaboration system to access content items stored by collaboration server components of the collaboration system. In this way the users can create and access content items.

Various types of content items can be stored and accessed by collaboration systems. Example types of content items include e mail messages calendar appointments contacts task list items instant messenger conversation logs word processor documents spreadsheet documents audio documents video documents and other types of content items.

In some collaboration systems the collaboration server components of the collaboration systems and the client components of the collaboration systems communicate with each other using a proprietary protocol. A proprietary protocol is a communications protocol that is controlled by one or more entities to the exclusion of others. In other words a proprietary protocol is not an open protocol. Because the collaboration server components of such a collaboration system and the client components of the collaboration system communicate with each other using a proprietary protocol other software developers cannot freely develop new client components that communicate with the collaboration server components of the collaboration system. As a result access to content items stored by such collaboration systems is restricted.

This summary is provided to introduce a selection of concepts. These concepts are further described below in the Detailed Description. This summary is not intended to identify key features or essential features of the claimed subject matter nor is this summary intended as an aid in determining the scope of the claimed subject matter.

In one aspect a method comprises receiving by a computing system a web services request to invoke a method of a web Application Programming Interface API . The method also comprises in response to receiving the web services request invoking by the computing system a method of a language dependent API of a client component in a collaboration system. The client component communicates with a collaboration server component in the collaboration system using a proprietary communications protocol. The method of the language dependent API is a method to obtain data from the collaboration server component. In addition the method comprises after invoking the method of the language dependent API sending by the computing system a web services response whose contents depend on the data obtained from the collaboration server component.

In another aspect a method comprises sending by a component provided by a computing device a web services request to invoke a method of a web Application Programming Interface API that uses a collaboration client component of a collaboration system to obtain data from a collaboration server component in the collaboration system. The collaboration server component and the client component exclusively communicate with each other using a proprietary communications protocol. Furthermore the method comprises receiving by the component a web services response from the web API as a response to the web services request. The web services response contains content based on the data obtained from the collaboration server component.

In yet another aspect a computing system comprises a processing system. The computing system also comprises a computer readable data storage system that stores software instructions that when executed by the processing system cause the computing system to send an enumerate servers request to a web API that obtains data from collaboration server components in a collaboration system. The enumerate servers request is a web services request to invoke an enumerate servers method of the web API. The collaboration server component in the collaboration system and client components in the collaboration system exclusively communicate with each other using a proprietary communications protocol. The software instructions also cause the computing system to receive an enumerate servers response from the web API. The enumerate servers response is a web services response that is responsive to the enumerate servers request. The enumerate servers response contains a display URL and a unique identifier for collaboration server components in the collaboration system. For each given collaboration server component having a unique identifier contained in the enumerate servers response the software instructions cause the computing system to 

The system includes a client computing system . As used herein a computing system is a system comprising one or more computing devices. A computing device is a physical device that computes information. In various embodiments the client computing system can comprise various types of computing devices. For example the client computing system can comprise a desktop computer a laptop computer a handheld computer a mobile telephone a television set top box a computing device integrated into a vehicle a game console a standalone server device a server blade device a mainframe computing device or another type of computing device.

Furthermore the system includes a network . The network is a collection of computing devices and links that facilitate communication among the computing devices. The client computing system is able to communicate with at least some of the computing devices in the network . In various embodiments the network includes various types of computing devices. For example the network can include routers switches mobile access points bridges hubs intrusion detection devices storage devices standalone server devices blade server devices sensors desktop computers laptop computers handheld computers mobile telephones and other types of computing devices. In various embodiments the network includes various types of links For example the network can include wired and or wireless links Furthermore in various embodiments the network is implemented at various scales. For example the network can be implemented as one or more local area networks LANs metropolitan area networks subnets wide area networks such as the Internet or can be implemented at another scale.

The network includes computing devices A N collectively computing devices . In various embodiments the computing devices can be one or more types of computing devices. For example one or more of the computing devices can be standalone server devices blade server devices personal computers mainframe computers and or other types of computing devices. In some embodiments the computing devices are operated by a single entity such as a corporation. In other embodiments the computing devices are operated by multiple entities. Furthermore in some embodiments the computing devices are physically co located. For example in some embodiments the computing devices are physically located at a server farm or a data center. In other embodiments at least some of the computing devices are geographically dispersed.

The computing devices operate to provide a set of components. As used herein a component is a functional element of a system. In various embodiments the computing devices operate to provide various components. For example in the embodiment illustrated in the example the set of components includes collaboration server components A N a collaboration client component a web services component an indexer component and a query component . In other embodiments the computing devices operate to provide components other than those illustrated in the example of .

In various embodiments various ones of the components can be provided by various ones of the computing devices . For example in some embodiments each of the computing devices provides one of the components. In other embodiments a single one of the computing devices provides two or more of the components.

Furthermore in various embodiments the computing devices operate in various ways to provide the components. For example in some embodiments the computing devices comprise computer readable data storage media. As used herein a computer readable data storage medium is a device or article of manufacture that stores data. In some instances the computer readable data storage media are parts of a computer program product. The computer readable data storage media store software instructions that when executed by processing systems in the computing devices cause the computing devices to provide the components. In other embodiments one or more of the computing devices comprise application specific integrated circuits ASICs that cause the computing devices to provide the components.

As described herein the components enable the client computing system to search for content items stored in one or more databases. The databases are maintained by and exclusively accessible through one or more collaboration server components in a collaboration system. An indexer component generates an index of content items in the databases. As used herein an index is a set of entries that map terms to content items to which the terms are applicable. To generate the index the indexer component exchanges web services messages with a web services component that provides a web API. In response to the web services messages the web services API invokes one or more methods of a language dependent API of a collaboration client component in the collaboration system. The collaboration client component communicates with the collaboration server components to obtain data from a collaboration server component in the collaboration system. The collaboration client component communicates with the collaboration server components using a proprietary communications protocol.

When the collaboration client component receives the data from the collaboration server component the collaboration client component provides the data to the web services component. The web services component then sends a web services response responsive to the web services request. The contents of the web services response depends on the data obtained from the collaboration server component. In other words the content of the web services response is affected by the data obtained from the collaboration server component. For example the web services response can contain the data obtained from the collaboration server component. In another example the web services response can contain data calculated and or identified based on the data obtained from the collaboration server component.

The system includes collaboration server components A N collectively collaboration server components a collaboration client component a web services component an indexer component and a query component . In various embodiments the collaboration server components the collaboration client component the web services component the indexer component and the query component are provided by various ones of the computing devices illustrated in the example of .

The collaboration server components are collaboration server components of a collaboration system. A collaboration system is a software system that allows users to collaborate with each other. The collaboration server components receive and store content items generated by users. Other users can use client components of the collaboration system to access content items stored by the collaboration server components .

The collaboration server components maintain databases . The databases store content items. The content items belong to one or more types. For example in some embodiments the databases store e mail messages task list items calendar appointments contacts customer relations management data documents and or other types of data. In various embodiments the databases are implemented in various ways. For example in some embodiments one or more of the databases are implemented as general purpose relational databases. In other embodiments one or more of the databases are implemented as Online Analytics Processing OLAP cubes.

Furthermore the collaboration server components provide a set of services that enable storage and retrieval of content items in the databases . In various embodiments the collaboration server components provide various services. For example in some embodiments the collaboration server components provide e mail services. The e mail services listen for incoming e mail messages and store the incoming e mail messages into appropriate ones of the databases . In this example the e mail services also process requests from client applications to retrieve e mail messages stored in the databases . In another example the collaboration server components provide document management services. The document management services store documents in the databases and allow collaboration client components such as collaboration client component to check out and check in the documents.

In some embodiments the collaboration server components are instances of the IBM DOMINO application server. In other embodiments the collaboration server components are instances of other commercially available collaboration system servers.

The collaboration client component is a client component of the collaboration system. The collaboration client component uses services provided by the collaboration server components . In various embodiments the collaboration client component can be various types of applications. For example in some embodiments the collaboration client component is an instance of the IBM LOTUSNOTES e mail client application. In another example the collaboration client component is an instance of the IBM SAMETIME unified communications and collaboration client application. Furthermore in various embodiments the collaboration client component is implemented in various ways. For example in some embodiments the collaboration client component is implemented as a 32 bit application.

The collaboration client component communicates exclusively with the collaboration server components using a proprietary communication protocol. Consequently only client applications manufactured by or licensed by the manufacturer of the collaboration server components are able to communicate with the collaboration server components . A proprietary protocol is a communications protocol that is controlled by one or more entities to the exclusion of others. In some embodiments the proprietary communications protocol comprises remote procedure calls and remote procedure responses.

Before the collaboration client component is able to communicate with the collaboration server components a user logs on to the collaboration client component . An entity that manages the collaboration system authorizes the user to access content items stored in at least some of the collaboration server components . When the user is not authorized to access one of the collaboration server components the collaboration server component does not send information to the client component regarding content items stored in the databases in the collaboration server component. The collaboration server components that the user logged on to the collaboration client component is authorized to access are referred to herein as the available collaboration server components.

The collaboration client component provides a language dependent API. In various embodiments the language dependent API is dependent on various programming languages. A language dependent API is an API designed to be used by client software written in a particular programming language. For example in some embodiments the language dependent API is dependent on the C programming language. In other embodiments the language dependent API is dependent on the Java programming language. The language dependent API includes a plurality of methods. When invoked the methods cause the collaboration client component to communicate with one or more of the collaboration server components .

The web services component provides a web service. A web service is an API i.e. a web API that is accessible over a network and is executed on a computing system that hosts services. The web API includes a set of methods. In various embodiments the set of methods includes various methods. For example in some embodiments the web API includes an enumerate servers method a get server method an enumerate databases method a get database method an enumerate items method a fetch item method and a fetch attachment method. The enumerate servers method returns identifiers of available ones of the collaboration server components . The get server method returns data about an individual one of the collaboration server components . The enumerate databases method returns identifiers of available ones of the databases in a given one of the collaboration server components . The get database method returns data about a given one of the databases . The enumerate items method returns identifiers of available ones of the content items in a given one of the databases . The fetch item method returns a given content item in one of the databases . The fetch attachment method returns a file attached to a given content item in one of the databases . In other embodiments the web API can include more or fewer methods. Furthermore in other embodiments the web API can include methods having the same functionalities as these methods but having different names.

The indexer component generates an index . The index is a set of entries. Each entry maps a term to one or more content items to which the term is applicable. For example an entry in the index can map the term blizzard to content items that contain the term blizzard. In another example an entry in the index can map the term 2009 to content items created in the year 2009. In this other example the content items created in the year 2009 do not necessarily include the term 2009. 

To generate the index the indexer component sends web services requests to the web API provided by the web services component . The web services requests are requests to invoke particular ones of the methods of the web API. In various embodiments the indexer component formats the web services requests in various ways. For example in some embodiments the indexer component formats the web services requests as Hypertext Transfer Protocol HTTP requests containing SOAP messages. In other embodiments the indexer component formats the web services requests as HTTP requests that conform to a Representational State Transfer REST architecture.

As described with regard to the example embodiment illustrated in the indexer component first sends a web services request that invokes the enumerate servers method of the web API. By invoking the enumerate servers method the indexer component obtains identifiers of available ones of the collaboration server components . Using the identifiers of available ones of the collaboration server components the indexer component sends a web services request that invokes the get server method of the web API. By invoking the get server method the indexer component obtains information that identifies a given collaboration server component among the available collaboration server components . Using the information that identifies the given collaboration server component the indexer component sends a web services request that invokes the enumerate databases method of the web API. By invoking the enumerate databases method the indexer component obtains identifiers of databases in the given collaboration server component. Using identifiers of databases in the given collaboration server component the indexer component sends web services requests that invoke the get database method of the web API. By invoking the get database method the indexer component obtains data identifying a given database among the databases in the given collaboration server component.

Next the indexer component sends a web services request that invokes the enumerate items method of the web API. By invoking the enumerate items method the indexer component obtains identifiers of content items in the given database. The indexer component then sends a web services request that invokes the fetch item method of the web API. By invoking the fetch item method the indexer component obtains a copy of a given content item among the content items in the given database. Upon obtaining the given content item the indexer component identifies terms applicable to the given content item. The indexer component then modifies the index such that the index includes entries that map the identified terms to the given content item.

When one or more documents are attached to the given content item the indexer component sends a web services request that invokes the fetch attachment method of the web API. By invoking the fetch attachment method the indexer component obtains a copy of a given document among the documents attached to the given content item. Upon receiving the given document the indexer component identifies terms applicable to the given document. The indexer component then modifies the index such that the index includes entries that map the identified terms to the given content item.

The indexer component repeats the operations described above with regard to the given document for each document attached to the given content item. Furthermore the indexer component repeats the operations described above with regard to the given content item for each content item in the given database. Furthermore the indexer component repeats the operations described above with regard to the given database for each database in the given collaboration server component. Furthermore the indexer component repeats the operations described above with regard to the given collaboration server component for each of the available ones of the collaboration server components . In this way the indexer component generates the index .

In some embodiments the indexer component is implemented as a 64 bit application. Typically 64 bit applications are unable to communicate directly with 32 bit applications. As mentioned above the collaboration client component can be implemented as a 32 bit application. In such embodiments exchanging messages through the web services component enables the indexer component to communicate with the collaboration client component .

The query component sends queries to the indexer component . The queries are requests for content items that conform to particular conditions. For example a query can request all content items that contain the word blizzard. In another example a query can request all content items that were created in the year 2009. 

When the indexer component receives a query from the query component the indexer component uses the index to identify content items that conform to the conditions specified by the query. The indexer component then sends a query result back to the query component . The query result specifies the content items that conform to the conditions specified by the query.

In various embodiments the query component sends a query to the indexer component in response to various events. For example in some embodiments the query component is part of a server system such as MICROSOFT SHAREPOINT . In this example the server system hosts at least one web page that allows users to search for content items. The query component sends a query when a user e.g. a user of the client computing system uses the web page to describe content items for which to search. Furthermore in this example the query component can send corresponding queries to other components when the user uses the web page to describe content items for which to search. Thus the query from the query component to the indexer component can be part of a federated search.

In another example the query component is a desktop search application operating on the client computing system . In this example the query component provides a graphical user interface to a user of the client computing system . The user uses the graphical user interface to provide a description of content items for which to search. In this example the query component sends a query to the indexer component in response to receiving the description of the content items.

As illustrated in the example of the operation begins when the indexer component sends an enumerate servers request to the web API provided by the web services component . The enumerate servers request is a web services request to invoke the enumerate servers method of the web API. In various embodiments the enumerate servers request is formatted in various ways. For example in some embodiments the enumerate servers request is formatted as a SOAP request. The SOAP request comprises an EnumerateServers element. The following is one example enumerate servers request 

Subsequently the indexer component receives an enumerate servers response from the web API . The enumerate servers response is a web services response that is responsive to the enumerate servers request. The enumerate servers response contains identifiers of the available ones of the collaboration server components . In various embodiments the enumerate servers response is formatted in various ways. For example in some embodiments the enumerate servers response is formatted as a SOAP response. The SOAP response comprises an EnumerateServersResponse element. The EnumerateServersResponse element contains a sequence of EnumerateServersResult elements. Each of the EnumerateServersResult elements contains a unique identifier and a display URL for an available one of the collaboration server components . A unique identifier is an identifier that uniquely identifies one of the collaboration server components . A display URL is a URL that is displayed on a search results page and that is associated with one of the collaboration server components . The following is one example enumerate servers response 

After receiving the enumerate servers response the indexer component sends a get server request to the web API . The get server request is a web services request to invoke the get server method of the web API. The get server request specifies a unique identifier of a given collaboration server component. The given collaboration server component is one of the available ones of the collaboration server components . In various embodiments the get server request is formatted in various ways. For example in some embodiments the get server request is formatted as a SOAP request. The SOAP request comprises a GetServer element that contains a ServerName element that specifies the unique identifier of the given collaboration server component.

Subsequently the indexer component receives a get server response from the web API . The get server response is a web services response that is responsive to the get server request. The get server response contains a unique identifier and a display URL for the given collaboration server component. In various embodiments the get server response is formatted in various ways. For example in some embodiments the get server response is formatted as a SOAP response. The SOAP response comprises a GetServerResponse element. The GetServerResponse element contains a GetServerResult element that specifies a unique identifier and a display URL of given collaboration server component.

After receiving the get server response the indexer component sends an enumerate databases request to the web API . The enumerate databases request is a web services request to invoke the enumerate databases method of the web API. The enumerate databases request specifies the unique identifier of the given collaboration server component specified by the get server response. Furthermore in some embodiments the enumerate databases request can specify a unique identifier of a last seen database. In various embodiments the enumerate databases request is formatted in various ways. For example in some embodiments the enumerate databases request is formatted as a SOAP request. The SOAP request comprises an EnumerateDatabases element that contains a ServerName element and a LastSeenDatabase element. The ServerName element specifies a unique identifier of the given collaboration server component. The LastSeenDatabase element specifies the unique identifier of the last seen database in the given collaboration server component. The following is one example enumerate databases request 

Subsequently the indexer component receives an enumerate databases response from the web API . The enumerate databases response is a web services response that is responsive to the enumerate databases request. If the enumerate databases request does not specify a unique identifier of a last seen database the enumerate databases response contains unique identifiers of databases in the given collaboration server component. If the enumerate databases request specifies a unique identifier of a last seen database the enumerate databases response contains a unique identifiers of databases in the given collaboration server component having unique identifiers greater than the unique identifier of the last seen database.

In various embodiments the enumerate databases response is formatted in various ways. For example in some embodiments the enumerate databases response is formatted as a SOAP response. The SOAP response comprises an EnumerateDatabasesResponse element. The EnumerateDatabasesResponse element includes a sequence of DatabaseItemId elements. Each of the DatabaseItemId elements specifies a unique identifier and a last modified time for a database in the given collaboration server component. The following is one example enumerate databases response 

After receiving the enumerate databases response the indexer component sends a get database request . The get database request is a web services request to invoke the get database method of the web API. The get database request specifies a unique identifier of a given database. The given database is one of the databases in the given collaboration server component. In various embodiments the get database request is formatted in various ways. For example in some embodiments the get database request is formatted as a SOAP request. The SOAP request comprises a GetDatabase element that contains a DatabaseName element. The DatabaseName element specifies the unique identifier of the given database. The following is one example get database request 

Subsequently the indexer component receives a get database response from the web API . The get database response is a web services response that is responsive to the get database request. The get database response specifies a unique identifier of the given database a display URL of the given database a last modified time of the given database and a security descriptor of the given database. The security descriptor of the given database is a data structure that contains security information associated with the given database. The security information indicates which users are allowed to access the given database.

In various embodiments the get database response is formatted in various ways. For example in some embodiments the get database response is formatted as a SOAP response. The SOAP response comprises a GetDatabaseResponse element that contains a GetDatabaseResult element. The GetDatabaseResult element includes a DatabaseId element a DisplayURL element a LastModifiedTime element and a SecurityDesc element. The DatabaseId element specifies the unique identifier of the given database. The DisplayURL element specifies a display URL of the given database. The LastModifiedTime element specifies a last time that the given database was modified. The SecurityDesc element specifies a security descriptor for the given database. The security descriptor for the given database indicates which users are authorized to access the given database. The following is one example get database response 

After receiving the get database response the indexer component sends an enumerate items request . The enumerate items request is a web services request to invoke the enumerate items method of the web API. The enumerate items request specifies a unique identifier of the given database. Furthermore in some embodiments the enumerate items request can specify a unique identifier of a last seen content item in the given database. In various embodiments the enumerate items request is formatted in various ways. For example in some embodiments the enumerate items request is formatted as a SOAP request. The SOAP request comprises an EnumerateItems element that can contain a DatabasePath element and a LastSeenItem element. The DatabasePath element specifies the unique identifier of the given database. The LastSeenItem element specifies the unique identifier of the last seen item in the given database. The following is one example enumerate items request 

Subsequently the indexer component receives an enumerate items response from the web API . The enumerate items response is a web services response that is responsive to the enumerate items request. If the enumerate items request does not specify a unique identifier of a last seen content item in the given database the enumerate item response contains unique identifiers of the content items in the given database. If the enumerate items request specifies a unique identifier of a last seen content item in the given database the enumerate item response contains unique identifiers of content items in the given database having unique identifiers greater than the unique identifier of the last seen content item in the given database.

In various embodiments the enumerate items response is formatted in various ways. For example in some embodiments the enumerate items response is formatted as a SOAP response. The SOAP response comprises an EnumerateItemsResponse element that contains a sequence of EnumerateItemsResults elements. Each of the EnumerateItemsResults elements is allowed to specify an AttachmentId element a DisplayURL element an ItemContent element an ItemId element an ItemProps element a LastModifiedTime element and a SecurityDesc element. If present the AttachmentID element specifies an array of unique identifiers of documents attached to a content item. The DisplayURL element specifies a display URL of the content item. The ItemContent element specifies the content of the content item. The ItemId element specifies a unique identifier of the content item. The ItemProps element specifies an array of properties of the content item. The LastModifiedTime element specifies a last time that the content item was modified. The SecurityDesc element specifies a security descriptor for the content item. The security descriptor for the content item indicates which users are allowed to access the content item. When a user that originates a query to the indexer component is not allowed to access the content item the indexer component does not return the content item in response to the query.

In some embodiments the EnumerateItemResults elements only include ItemId elements in responses to enumerate item requests even though the EnumerateItemResults elements is allowed to specify an AttachmentId element a DisplayURL element an ItemContent element an ItemId element an ItemProps element a LastModifiedTime element and a SecurityDesc element. Only including ItemId elements in enumerate items responses can reduce the sizes of the enumerate items responses.

After receiving the enumerate items response the indexer component sends a fetch item request . The fetch item request is a web services request to invoke the fetch item method of the web API. The fetch item request specifies a unique identifier of a given content item in the given database. In various embodiments the fetch item request is formatted in various ways. For example in some embodiments the fetch item request is formatted as a SOAP request. The SOAP request comprises a FetchItem element that contains an ItemId element. The ItemId element specifies the unique identifier of the given content item. The following is one example fetch item request 

Subsequently the indexer component receives a fetch item response from the web API . The fetch item response is a web services response that is responsive to the fetch item request. The fetch item response specifies an array of unique identifiers for documents attached to the given content item a display URL of the given content item the content of the given content item a unique identifier of the given content item an array of properties of the given content item a last modified time of the given content item and a security descriptor of the given content item. In various embodiments the array of properties includes various properties. For example when the given content item is a word processor document the array of properties can include a size property a number of words property a date created property a date edited property and other types of properties associated with word processor documents. In another example when the given content item is an e mail message the array of properties can include a date sent property a subject property a to property a from property and other types of properties associated with e mail messages. The following is one example fetch item response 

After receiving the fetch item response the indexer component modifies the index such that the index contains entries that map terms that are applicable to the given content item to the given content item . In other words the indexer component indexes the given content item. To identify terms applicable to the given content item the indexer component identifies terms in the content of the given content item and values of properties in the array of properties contained in the fetch item response.

Next the indexer component determines whether there are any documents attached to the given content item . In some embodiments the indexer component determines that there are one or more documents attached to the given content item when the fetch item response contains an array of unique identifiers for documents attached to the given content item.

If there are one or more documents attached to the given content item YES of the indexer component sends a fetch attachment request . The fetch attachment request is a web services request to invoke the fetch attachment method of the web API. The fetch attachment request specifies a unique identifier of the given content item. In addition the fetch attachment request specifies an attachment name. The attachment name specifies a unique identifier of a given document attached to the given content item. In various embodiments the fetch attachment request is formatted in various ways. For example in some embodiments the fetch attachment request is formatted as a SOAP request. The SOAP request comprises a FetchAttachment element that contains an ItemId element and an AttachmentName element. The ItemId element specifies the unique identifier of the given content item. The AttachmentName element specifies the unique identifier of the given document attached to the given content item. The following is one example fetch attachment request 

Subsequently the indexer component receives a fetch attachment response . The fetch attachment response is a web services response that is responsive to the fetch attachment request. The fetch item response contains the contents of the given document attached to the given content item. In various embodiments the fetch attachment response is formatted in various ways. For example in some embodiments the fetch attachment response is formatted as a SOAP response. The SOAP response comprises a FetchAttachmentResponse element that contains a FetchAttachmentResult element. The FetchAttachmentResult element contains the given document attached to the given content item. The following is one example fetch attachment response 

After receiving the fetch attachment response the indexer component modifies the index such that the index contains entries that map terms that are applicable to the given document to the given content item . Thus when a term is applicable to the given document the index can contain an entry that maps the term to the given content item. To identify terms applicable to the given document the indexer component identifies terms contained in the given document.

The indexer component then determines whether there are any additional documents attached to the given content item . If there are one or more additional documents attached to the given content item YES of the indexer component repeats steps with regard to one of the additional documents attached to the given content item. In this way the indexer component indexes each of the documents attached to the given content item.

When there are no documents attached to the given content item NO of or when there are no additional documents attached to the given content item NO of the indexer component determines whether there are any additional content items in the given database . If there are one or more additional content items in the given database YES of the indexer component repeats steps with regard to one of the additional content items in the given database. In this way the indexer component indexes each of the content items in the given database.

When there are no additional content items in the given database NO of the indexer component determines whether there any additional databases in the given collaboration server component . If there are one or more additional databases in the given collaboration server component YES of the indexer component repeats steps with regard to one of the additional databases in the given server. In this way the indexer component indexes the content items in each of the databases in the given collaboration server component.

When there are no additional databases in the given server NO of the indexer component determines whether there are any additional available collaboration server components . If there are one or more additional available collaboration server components YES of the indexer component repeats steps with regard to one of the additional available collaboration server components. In this way the indexer component indexes the content items in each of the databases in each of the available collaboration server components.

When there are no additional available collaboration server components NO of the indexer component has finished indexing each content item in each database in each of the available collaboration server components .

In different embodiments computing devices are implemented in different ways. For instance in the example of the computing device comprises a memory a processing system a secondary storage device a network interface card a video interface a display device an external component interface an external storage device an input device a printer and a communication medium . In other embodiments computing devices are implemented using more or fewer hardware components. For instance in another example embodiment a computing device does not include a video interface a display device an external storage device or an input device.

The memory includes one or more computer readable data storage media capable of storing data and or instructions. In different embodiments the memory is implemented in different ways. For instance in various embodiments the memory is implemented using various types of computer readable data storage media. Example types of computer readable data storage media include but are not limited to dynamic random access memory DRAM double data rate synchronous dynamic random access memory DDR SDRAM reduced latency DRAM DDR2 SDRAM DDR3 SDRAM Rambus RAM solid state memory flash memory read only memory ROM electrically erasable programmable ROM and other types of devices and or articles of manufacture that store data.

The processing system includes one or more physical integrated circuits that selectively execute software instructions. In various embodiments the processing system is implemented in various ways. For instance in one example embodiment the processing system is implemented as one or more processing cores. For instance in this example embodiment the processing system may be implemented as one or more Intel Core microprocessors. In another example embodiment the processing system is implemented as one or more separate microprocessors. In yet another example embodiment the processing system is implemented as an ASIC that provides specific functionality. In yet another example embodiment the processing system provides specific functionality by using an ASIC and by executing software instructions.

In different embodiments the processing system executes software instructions in different instruction sets. For instance in various embodiments the processing system executes software instructions in instruction sets such as the x86 instruction set the POWER instruction set a RISC instruction set the SPARC instruction set the IA 64 instruction set the MIPS instruction set and or other instruction sets.

The secondary storage device includes one or more computer readable data storage media. The secondary storage device stores data and software instructions not directly accessible by the processing system . In other words the processing system performs an I O operation to retrieve data and or software instructions from the secondary storage device . In various embodiments the secondary storage device is implemented by various types of computer readable data storage media. For instance the secondary storage device may be implemented by one or more magnetic disks magnetic tape drives CD ROM discs DVD ROM discs Blu Ray discs solid state memory devices Bernoulli cartridges and or other types of computer readable data storage media.

The network interface card enables the computing device to send data to and receive data from a computer communication network. In different embodiments the network interface card is implemented in different ways. For example in various embodiments the network interface card is implemented as an Ethernet interface a token ring network interface a fiber optic network interface a wireless network interface e.g. WiFi WiMax etc. or another type of network interface.

The video interface enables the computing device to output video information to the display device . In different embodiments the video interface is implemented in different ways. For instance in one example embodiment the video interface is integrated into a motherboard of the computing device . In another example embodiment the video interface is a video expansion card. Example types of video expansion cards include Radeon graphics cards manufactured by ATI Technologies Inc. of Markham Ontario Geforce graphics cards manufactured by Nvidia Corporation of Santa Clara Calif. and other types of graphics cards.

In various embodiments the display device is implemented as various types of display devices. Example types of display devices include but are not limited to cathode ray tube displays LCD display panels plasma screen display panels touch sensitive display panels LED screens projectors and other types of display devices. In various embodiments the video interface communicates with the display device in various ways. For instance in various embodiments the video interface communicates with the display device via a Universal Serial Bus USB connector a VGA connector a digital visual interface DVI connector an S Video connector a High Definition Multimedia Interface HDMI interface a DisplayPort connector or other types of connectors.

The external component interface enables the computing device to communicate with external devices. In various embodiments the external component interface is implemented in different ways. For instance in one example embodiment the external component interface is a USB interface. In other example embodiments the computing device is a FireWire interface a serial port interface a parallel port interface a PS 2 interface and or another type of interface that enables the computing device to communicate with external components.

In different embodiments the external component interface enables the computing device to communicate with different external components. For instance in the example of the external component interface enables the computing device to communicate with the external storage device the input device and the printer . In other embodiments the external component interface enables the computing device to communicate with more or fewer external components. Other example types of external components include but are not limited to speakers phone charging jacks modems media player docks other computing devices scanners digital cameras a fingerprint reader and other devices that can be connected to the computing device .

The external storage device is an external component comprising one or more computer readable data storage media. Different implementations of the computing device interface with different types of external storage devices. Example types of external storage devices include but are not limited to magnetic tape drives flash memory modules magnetic disk drives optical disc drives flash memory units zip disk drives optical jukeboxes and other types of devices comprising one or more computer readable data storage media. The input device is an external component that provides user input to the computing device . Different implementations of the computing device interface with different types of input devices. Example types of input devices include but are not limited to keyboards mice trackballs stylus input devices key pads microphones joysticks touch sensitive display screens and other types of devices that provide user input to the computing device . The printer is an external device that prints data to paper. Different implementations of the computing device interface with different types of printers. Example types of printers include but are not limited to laser printers ink jet printers photo printers copy machines fax machines receipt printers dot matrix printers or other types of devices that print data to paper.

The communications medium facilitates communication among the hardware components of the computing device . In different embodiments the communications medium facilitates communication among different components of the computing device . For instance in the example of the communications medium facilitates communication among the memory the processing system the secondary storage device the network interface card the video interface and the external component interface . In different implementations of the computing device the communications medium is implemented in different ways. For instance in different implementations of the computing device the communications medium may be implemented as a PCI bus a PCI Express bus an accelerated graphics port AGP bus an Infiniband interconnect a serial Advanced Technology Attachment ATA interconnect a parallel ATA interconnect a Fiber Channel interconnect a USB bus a Small Computing system Interface SCSI interface or another type of communications medium.

The memory stores various types of data and or software instructions. For instance in the example of the memory stores a Basic Input Output System BIOS an operating system application software and program data . The BIOS includes a set of software instructions that when executed by the processing system cause the computing device to boot up. The operating system includes a set of software instructions that when executed by the processing system cause the computing device to provide an operating system that coordinates the activities and sharing of resources of the computing device . Example types of operating systems include but are not limited to Microsoft Windows Linux Unix Apple OS X Apple OS X iPhone Palm webOS Palm OS Google Chrome OS Google Android OS and so on. The application software includes a set of software instructions that when executed by the processing system cause the computing device to provide applications to a user of the computing device . The program data is data generated and or used by the application software .

The various embodiments described above are provided by way of illustration only and should not be construed as limiting. Those skilled in the art will readily recognize various modifications and changes that may be made without following the example embodiments and applications illustrated and described herein.

