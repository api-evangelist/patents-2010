---

title: Cross-domain communication
abstract: Disclosed are various embodiments for performing cross-domain communication using messenger frames. One or more messenger frames are dynamically generated in response to determining that a message is to be sent from a first frame in one domain to a second frame in another domain in a client. The message is sent from the first frame to the second frame by embedding the message in addresses of the messenger frames. Code executing in the first frame and code executing in the second frame are restricted from direct communication in the client.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08689099&OS=08689099&RS=08689099
owner: Amazon Technologies, Inc.
number: 08689099
owner_city: Reno
owner_country: US
publication_date: 20101223
---
As an increasing amount of information is being provided electronically the number of sources providing such content is increasing as well. In many cases a user browsing a Web page through a browser application for example might simultaneously view content from multiple sources each of which might have a distinct domain host address or other such source identifier from which the content is provided. In many cases the user will be unaware that the content is coming from multiple sources other than variations in aspects such as style or layout.

The present disclosure relates to cross domain communication for network page frames. Most existing browsers and other such applications impose restrictions on cross domain requests and cross site scripting XSS . Thus a frame on a network page corresponding to a first domain cannot send information to a second frame on the network page corresponding to a second domain. Further various frames or elements from a common provider may still correspond to different domains or switch between different domains such as secure and non secure domains. Accordingly even network pages from the same provider might be unable to determine information about a frame object or other element of the page if that element is from another domain. Although it may be desirable to pull in content from third party providers directly into a document object model DOM of a network page and interact with that content via JavaScript or another appropriate language such interaction would generally not comply with the Payment Card Industry Data Security Standard PCI DSS or other such standards.

Various embodiments of the present disclosure employ messenger frames to facilitate cross domain communication between network page frames. Techniques related to using messenger frames for cross domain communication are described in U.S. patent application entitled Cross Domain Communication filed on Jan. 29 2009 and assigned application Ser. No. 12 362 377 which is incorporated herein by reference in its entirety. In various embodiments herein dynamically generated messenger frames are employed to send messages between domains irrespective of message length. Further a uniform resource locator URL encoding may be employed so that arbitrary messages may be sent using the messenger frames. In the following discussion a general description of the system and its components is provided followed by a discussion of the operation of the same.

With reference to shown is a networked environment according to various embodiments. The networked environment includes a plurality of domains . Generally the term domain refers to an organized collection of network devices applications sites and or services which typically are identified using a domain name. Thus a single content provider might utilize multiple domains for different purposes or having different aspects or capabilities. Further different providers typically will utilize different domains. Although a common use of the term domain in such a context often currently refers to Internet based technology it should be understood that domains can be used in any appropriate network setting and that advantages of embodiments discussed and suggested herein can be applied to any of these networks as appropriate.

The networked environment further includes a plurality of computing devices in data communication with one or more clients by way of a network . In the example depicted in two domains and are provided where each is associated with a respective computing device or . Thus each respective computing device or may correspond to servers controlled by different entities. However it is understood that any number of domains with any number of computing devices may be employed in the networked environment . In some examples a single computing device may be associated with multiple domains . The network includes for example the Internet intranets extranets wide area networks WANs local area networks LANs wired networks wireless networks or other suitable networks etc. or any combination of two or more such networks.

Each computing device and may comprise for example a server computer or any other system providing computing capability. Alternatively a plurality of computing devices and may be employed that are arranged for example in one or more server banks or computer banks or other arrangements. For example a plurality of computing devices and together may comprise a cloud computing resource a grid computing resource and or any other distributed computing arrangement. Such computing devices and may be located in a single installation or may be distributed among many different geographical locations. For purposes of convenience the computing device and are each referred to herein in the singular. Even though the computing device and are each referred to in the singular it is understood that a plurality of computing devices and may be employed in the various arrangements as described above.

Various applications and or other functionality may be executed in each computing device according to various embodiments. Also various data is stored in a data store that is accessible to the respective computing device . Each data store may be representative of a plurality of data stores as can be appreciated. The data stored in each data store for example is associated with the operation of the various applications and or functional entities described below.

The components executed on each computing device for example include a respective network page generation application and other applications services processes systems engines or functionality not discussed in detail herein. The network page generation application is executed to generate and serve up network pages such as web pages or other forms of network content. In various embodiments the network page generation application may include a commercially available hypertext transfer protocol HTTP server such as for example Apache HTTP Server Apache Tomcat Microsoft Internet Information Services IIS etc.

Such network pages served up by the network page generation application may correspond to network page frames which may in turn correspond to parent frames frames defined within a frame set inline frames e.g. iframe elements and or other forms of network page frames . The network page frames may include hypertext markup language HTML extensible markup language XML JavaScript asynchronous JavaScript and XML Ajax and or other data. The network page generation application may also include code for updating the network page frame within the network page frame . Such code may be configured to communicate with other network page frames from different domains through the use of messenger frames.

The data stored in each data store includes for example user data network page data and potentially other data. The user data may include various information about users of a network site including state related information used by the network page generation application to serve up dynamic content. The network page data includes various data used in generating the network page frames such as for example code templates text images audio video and or other data.

The client is representative of a plurality of client devices that may be coupled to the network . The client may comprise for example a processor based system such as a computer system. Such a computer system may be embodied in the form of a desktop computer a laptop computer personal digital assistants cellular telephones smartphones set top boxes music players web pads tablet computer systems game consoles electronic book readers or other devices with like capability. The client may include a display . The display may comprise for example one or more devices such as cathode ray tubes CRTs liquid crystal display LCD screens gas plasma based flat panel displays LCD projectors or other types of display devices etc.

The client may be configured to execute various applications such as a browser and or other applications. The browser may be executed in a client for example to access and render network pages such as network page frames and web pages or other network content served up by the computing device the computing device and or other servers thereby generating a rendered network page on the display . The network page frames and may include various client side code to be executed in the browser . For example the browser may execute frame communication code to facilitate cross domain communication between the network page frame and the network page frame . The client may be configured to execute applications beyond the browser such as for example email applications instant message applications and or other applications.

Next a general description of the operation of the various components of the networked environment is provided. To begin a user at the client requests a network page from a network site hosted by the computing device in the domain . In response the network page generation application serves up a network page frame to the client . The network page frame may correspond for example to a parent frame and or a frame defined by a frameset. The network page frame is associated with a DOM that is accessible by other network page frames served up in the same domain

The network page frame includes or is related to by a frameset a network page frame that is served up by the network page generation application in the computing device of the domain . Thus the rendered network page shown on the display of the client includes the network page frame the network page frame and or other network page frames . In some examples the network page frame corresponds to an iframe included in the network page frame . The network page frame is associated with a different DOM. The DOM of the network page frame cannot be accessed by the DOM of the network page frame and vice versa because the network page frame and the network page frame are served up from different domains .

Included in the network page frames and is various code that obtains user input performs computations downloads data and or performs other tasks. Such code may correspond to JavaScript or another suitable language. Such code in the network page frame may be configured to communicate with the network page frame through the use of the frame communication code which is downloaded from the network page generation application and with the network page frames and . Again it is noted that the code in the network page frame is restricted from direct communication with code in the network page frame

To overcome such communication restrictions the frame communication code is configured to generate messenger frames to convey messages between the network page frames and . In one embodiment the messenger frames correspond to iframes in the DOMs of the network page frames . In particular iframes may be used to provide a form of sandboxing in order to separate code obtained from multiple domains for compliance with PCI DSS and or other standards. Thus a messenger frame that is in the domain of the network page frame may be created in the DOM of the network page frame

The network page frame may provide a message to the messenger frame by way of the address field or uniform resource locator URL of the messenger frame. The query string and or the fragment identifier of the URL may be used in conveying the message. In various embodiments the message may be encoded using a URL compliant encoding such as for example Base64 Uuencoding and or other forms of URL compliant encodings. Consequently characters and data that may ordinarily be disallowed in URLs may be used in the messages by employing such an encoding.

The browser may impose a character limit for URLs. As a non limiting example the character limit may be 2083 characters or some other value. The character limit may vary according to which browser is executed in the client . However in various embodiments the frame communication code may allow for messages of arbitrary length to be sent. To accomplish this multiple message frames may be used. After URL encoding the message may be split into multiple message segments with each segment being sent by way of a respective messenger frame. Each message segment may be sent along with a respective sequence number with the last message segment having a flag denoting that segment as the last one of the message.

Using multiple message frames to send multiple messages or a multi segment message can speed up the communication process through parallelization. Subsequent messages or message segments may be sent by the network page frame without having to wait for processing of the message or message segment by the network page frame . In other words the message or segments may be sent in parallel. However in some embodiments a single message frame or fewer message frames than messages or segments may be utilized for sending multiple messages or message segments. In other words the messages or segments may be sent serially. In such embodiments the address field is updated with a subsequent message segment after the message is obtained by the recipient network page frame . In some embodiments a message frame may be selected by the frame communication code from a pool of existing and or dynamically created message frames for reuse.

Although messenger frames may correspond to static iframe elements within a DOM of the network page frame or in various embodiments the message frames may be dynamically generated. Thus any limitations on numbers of concurrent messages would be based on the memory in the client that is available to the browser and not the number of statically defined messenger frames. Further dynamically generated messenger frames may lead to lower overall latency relative to statically defined messenger frames as each message is executed in parallel. In addition a cache used by the browser in some embodiments may allow for high performance dynamic generation of messenger frames as the frame communication code may be static.

The messenger frame which is executed in the domain of the recipient network page frame may be configured to access the DOM of the network page frame and or interact with code executing in the network page frame . Also the messenger frame may be configured to make callbacks to the sending network page frame . Each network page frame and may be configured to create new messenger frames independently for bi directional messaging which avoids waiting associated with the return of a messenger frame. It is understood that the message may be passed according to an application programming interface API agreed upon by the operators of the domains and . To this end the frame communication code included within the network page frames and may be symmetrical with mutually agreed upon types of arguments being sent within the message.

Turning now to shown is a user interface that is rendered by a browser executed in a client in the networked environment according to one non limiting example. Specifically illustrates a rendered network page that includes a network page frame and a network page frame . The network page frame corresponds to a store locator page for a network site of a retail store. The network page frame may be associated with a domain of the retail store e.g. www.discountdepot.site. The network page frame includes a location entry component and a location submission component for a user to enter and submit a zip code from which a store locator map is generated.

The store locator map is rendered in the network page frame which may be an iframe element within the network page frame . Although the network page frame is depicted as having scrollbars and a viewport surrounded by a border it is understood that the network page frame may be visually indistinguishable from the network page frame in other examples. The map in the network page frame is served up by a network page generation application by another domain e.g. maps.ding.site. A store indicator is rendered in the map to indicate a store location on the map .

When a user enters a zip code in the location entry component and selects the location submission component the network page frame sends a message to the network page frame by way of the frame communication code . The message may encode for example the requested zip code and the locations e.g. coordinates in latitude and longitude of nearby stores according to data in the data store of the domain

A messenger frame is generated with message being embedded in the URL of the messenger frame. It is noted that the messenger frame is not shown to be visible in . In the embodiment of the messenger frame corresponds to a hidden iframe with a height and width of zero pixels. However it is understood that the messenger frame may be visible in other embodiments. The frame communication code of the messenger frame may make various API calls manipulate the DOM and or otherwise deliver the message to the domain . Consequently the network page generation application generates and sends an updated map to the client for rendering in the network page frame

Referring next to shown is a flowchart that provides one example of the operation of a portion of the browser according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the browser as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the client according to one or more embodiments.

Beginning with box the browser obtains a parent network page frame from a network page generation application in the first domain . In box the browser determines other network page frames that are referenced in the parent network page frame . As a non limiting example the parent network page frame may include one or more iframe elements corresponding to network page frames . As another non limiting example the parent network page frame may be related to one or more other network page frames by a frameset.

In box the browser obtains the other network page frames that are referenced in or are related to the parent network page frame from network page generation applications executed in other domains . In box the browser renders the parent network page frame and the other network page frames as the rendered network page to be shown on the display . Thereafter the portion of the browser ends.

Moving on to shown is a flowchart that provides one example of the operation of a portion of the frame communication code according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the frame communication code as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the client according to one or more embodiments.

Beginning with box the frame communication code determines that a communication event has occurred for a network page frame . In other words code executed from the network page frame has obtained user input performed a task etc. so that event indicating a request for communication is generated. In box the frame communication code obtains a message associated with the communication event. The message may include multiple arguments according to an API supported by the frame communication code and the network page frames and .

In box the frame communication code determines whether the recipient of the message i.e. a frame is in a different domain compared to the domain associated with the network page frame . If the frame communication code determines that the recipient is not in a different domain in box the frame communication code sends the message to the recipient in the domain by modifying the DOM directly. Thereafter the portion of the frame communication code ends.

Otherwise if the frame communication code determines in box that the recipient is in a different domain the frame communication code proceeds to box . In box the frame communication code encodes the message for sending in one or more messenger frames. To this end the frame communication code may employ an encoding such as Base64 or another URL compliant encoding in order to include the message in a URL for the messenger frame.

In box the frame communication code determines whether the encoded message is too long or exceeds a maximum encoded message length associated with the messenger frame and the browser . If the frame communication code determines that the encoded message is too long the frame communication code splits the message into multiple message segments in box . The frame communication code then proceeds to box . If the frame communication code determines that the encoded message is not too long to be sent in a single messenger frame the frame communication code also proceeds to box .

In box the frame communication code determines whether existing messenger frames are to be used to send the message. For example a pool of messenger frames may be available. If existing messenger frames are not to be used the frame communication code continues to box . In box the frame communication code launches one or more new messenger frames in the recipient domain . Thereafter the frame communication code proceeds to box . Otherwise if the frame communication code determines that existing messenger frames are to be used the frame communication code also continues to box .

In box the frame communication code embeds the encoded message in the address location or URL of the recipient messenger frame s . In box the frame communication code may update the recipient messenger frame s so that they may be processed. Thus code associated with the messenger frames may execute and cause the message to be sent to the recipient network page frame s . In one embodiment the network page frame s may poll the address field of the messenger frame s to obtain the message or message segments. Thereafter the portion of the frame communication code ends.

Turning now to shown is a flowchart that provides one example of the operation of another portion of the frame communication code according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the frame communication code as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the client according to one or more embodiments.

Beginning with box the frame communication code obtains one or more message segments through one or more messenger frames. In box the frame communication code determines whether a message is being obtained through multiple message segments that are being sent serially. If the message is being obtained through multiple message segments that are being sent serially the frame communication code continues to box and determines whether the last message segment has been obtained.

If the last message segment has not yet been obtained the frame communication code moves to box and obtains the next message segment through the messenger frame or frames that are being used for the serial transfer. In some embodiments the frame communication code may acknowledge the receipt of the message segment to the sender. The frame communication code then returns to box . If the frame communication code determines in box that the last message segment has been obtained the frame communication code instead progresses to box . If the frame communication code determines in box that the message is not being sent serially by multiple segments the frame communication code also progresses to box .

In box the frame communication code determines whether the message has been obtained through multiple message segments. If the message has been obtained through multiple message segments the frame communication code continues to box and ensures the proper sequencing of message segments. To this end the frame communication code may reorder the message segments according to a sequence number associated with each message segment. In box the frame communication code reassembles the message segments into a message. The frame communication code then continues to box . If the frame communication code determines in box that the message has not been obtained through multiple message segments the frame communication code also continues to box .

In box the frame communication code decodes the message. In some embodiments the message may have been encoded using a type of uniform resource locator URL compliant encoding such as Base64 Uuencoding etc. In box the frame communication code sends a callback response to the sender of the message if the frame communication code is configured to acknowledge the message. To this end the frame communication code may send another message using the same messenger frame s or different messenger frame s . Thereafter the portion of the frame communication code ends.

With reference to shown is a schematic block diagram of an exemplary computing device according to an embodiment of the present disclosure. The computing device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end the computing device may comprise for example at least one server computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor is a network page generation application and potentially other applications. Also stored in the memory may be a data store and other data. In addition an operating system may be stored in the memory and executable by the processor .

With reference to shown is a schematic block diagram of the client according to an embodiment of the present disclosure. The client includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end the client may comprise for example at least one client computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor is the browser and potentially other applications. Associated with the browser is the frame communication code . In addition an operating system may be stored in the memory and executable by the processor .

Referring now to both it is understood that there may be other applications that are stored in the memory and are executable by the processors as can be appreciated. Where any component discussed herein is implemented in the form of software any one of a number of programming languages may be employed such as for example C C C Objective C Java JavaScript Perl PHP Visual Basic Python Ruby Delphi Flash or other programming languages.

A number of software components are stored in the memory and are executable by the processor . In this respect the term executable means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory and run by the processor source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory and executed by the processor or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory to be executed by the processor etc. An executable program may be stored in any portion or component of the memory including for example random access memory RAM read only memory ROM hard drive solid state drive USB flash drive memory card optical disc such as compact disc CD or digital versatile disc DVD floppy disk magnetic tape or other memory components.

The memory is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memory may comprise for example random access memory RAM read only memory ROM hard disk drives solid state drives USB flash drives memory cards accessed via a memory card reader floppy disks accessed via an associated floppy disk drive optical discs accessed via an optical disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also the processor may represent multiple processors and the memory may represent multiple memories that operate in parallel processing circuits respectively. In such a case the local interface may be an appropriate network that facilitates communication between any two of the multiple processors between any processor and any of the memories or between any two of the memories etc. The local interface may comprise additional systems designed to coordinate this communication including for example performing load balancing. The processor may be of electrical or of some other available construction.

Although the network page generation application the browser the frame communication code and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits having appropriate logic gates or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The flowcharts of A and B show the functionality and operation of an implementation of portions of the browser and the frame communication code . If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the flowcharts of A and B show a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in A and B may be executed concurrently or with partial concurrence. Further in some embodiments one or more of the blocks shown in A and B may be skipped or omitted. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Also any logic or application described herein including the network page generation application the browser and the frame communication code that comprises software or code can be embodied in any non transitory computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present disclosure a computer readable medium can be any medium that can contain store or maintain the logic or application described herein for use by or in connection with the instruction execution system. The computer readable medium can comprise any one of many physical media such as for example magnetic optical or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives memory cards solid state drives USB flash drives or optical discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

