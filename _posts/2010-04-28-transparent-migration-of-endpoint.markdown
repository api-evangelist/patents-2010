---

title: Transparent migration of endpoint
abstract: Architecture that facilitates the capture of connection state of a connection established between a client and an intermediate server and forwards the state to one or more target servers. A software component at the target server (as well as the intermediate server) uses this connection state to reply back to the client directly, thereby bypassing the intermediate server. All packets from the client related to the request are received at the intermediate server and then forwarded to the target server. The migration can be accomplished without any change in the client operating system and client applications, without assistance from a gateway device such as a load balancer or the network, without duplication of all packets between the multiple servers, and without changes to the transport layer stack of the intermediate and target servers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08478813&OS=08478813&RS=08478813
owner: Microsoft Corporation
number: 08478813
owner_city: Redmond
owner_country: US
publication_date: 20100428
---
In a typical advanced request routing service such as a load balancer when a client initiates a connection request it is accepted by the request router. The client then follows up with the request data the request router looks at the data and based on the request data the request router requests the actual content from a different target server. In this case the request router is in the middle of the communications path back to the client. Consequently all of the data that needs to go back to the client is routed from the target server through the request router.

This creates unnecessary network activity in many scenarios. In some cases the request router actually needs to look at the return data to cache the return data or process the data in other ways. However in many cases this traffic is completely unnecessary as this approach consumes more network and network device bandwidth unnecessarily.

The following presents a simplified summary in order to provide a basic understanding of some novel embodiments described herein. This summary is not an extensive overview and it is not intended to identify key critical elements or to delineate the scope thereof. Its sole purpose is to present some concepts in a simplified form as a prelude to the more detailed description that is presented later.

The disclosed architecture facilitates the capture of connection state of a connection established due to a client request between a client and an intermediate network device e.g. a server and forwards migrates the state to one or more target devices servers . All packets from the client related to the request are received at the intermediate device and then forwarded to the target device. A software component at the target device then uses this connection state to reply back to the client directly thereby bypassing the intermediate device.

More specifically the architecture migrates the established connection at the transport layer from one endpoint to another endpoint without needing any change on the client operating system and client applications. Additionally migration of the connection state can occur without assistance from the network. Moreover the connection state can be migrated without duplication of all packets between multiple devices servers .

In the context of servers the migration technique enables direct server response from the target server to the client based on connection state migration. The implementation of connection migration can be done without requiring changes to the transport layer e.g. TCP transport control protocol stack of the intermediate and target servers. However these changes can be made in the transport layer as well if desired.

To the accomplishment of the foregoing and related ends certain illustrative aspects are described herein in connection with the following description and the annexed drawings. These aspects are indicative of the various ways in which the principles disclosed herein can be practiced and all aspects and equivalents thereof are intended to be within the scope of the claimed subject matter. Other advantages and novel features will become apparent from the following detailed description when considered in conjunction with the drawings.

In conventional request response processing systems where an intermediate server handles client requests and forwards the request to a target server to generate a response and then sends that response back to the client this effectively increases the computational resources such as memory and CPU available for request processing at the expense of roughly double the traffic on each node and related network infrastructure. The reason this occurs is that the intermediate server must terminate the connection from the client in order to receive the request and use the request contents to select a target server to process the request. For example a user name carried in an HTTP hypertext transport protocol header can be used to decide which target server should handle the request.

The disclosed architecture captures the connection state of the TCP connection at an intermediate e.g. initial server device or endpoint where intermediate can be any server between the client and the target server that receives a client request e.g. URL uniform resource locator and forwards the connection state to a target server network device that ultimately generates the response to the client. A software component at the target server uses this state to reply back to the client directly thereby bypassing the intermediate server from further involvement in the response back to the client.

The disclosed architecture is applicable to Application Request Routing ARR which is an IIS Internet information services extension that transforms IIS7.x into a layer 7 load balancer. Both ARR and IIS are products developed by Microsoft Corporation. The architecture enables ARR to achieve direct server return while still performing advanced layer 7 as defined of the OSI open systems interconnect model functions in ARR.

Reference is now made to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding thereof. It may be evident however that the novel embodiments can be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to facilitate a description thereof. The intention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the claimed subject matter.

The migration component refers generally herein to the migration component and migration component operates at a transport layer. The migration component of the intermediate endpoint captures the connection state and forwards the connection state to the target endpoint based on a policy applied to the request . For example the policy can be to choose a target server based on load on the target servers.

The migration component includes a migration hand off library that forwards the request to the target endpoint a migration driver that resides at a transport layer and a migration controller that handles control packet traffic. The migration library accesses transport layer statistics of the connection state and collects send receive information and connection parameters of the connection state between the client and the intermediate endpoint . The migration library opens a server connection to the target endpoint based on the collected information and parameters. The migration component of the intermediate endpoint instructs the migration component of the target endpoint to translate outgoing packets from the target endpoint to a port e.g. transport address of the client based on the connection state associated with the active client connection . The migration component of the target endpoint watches for a connection reset of the active client connection and resets the server connection in response to the connection reset.

The following assumptions are considered in this disclosed architecture. A connection of the intermediate endpoint is eligible for hand off if the following conditions are satisfied when the hand off begins at the intermediate endpoint there is no outstanding data from the client that has not been handed to the intermediate endpoint application and there is no unacknowledged outstanding data from the intermediate endpoint to the client all the data has been acknowledged by the client .

The migration algorithm operates as follows. The client makes a client connection to a transport endpoint e.g. an IP port to send the client request . The intermediate endpoint accepts the client connection and receives data from the client acknowledgements are sent normally . Once the intermediate endpoint has determined the target endpoint for the client request the intermediate endpoint calls its associated migration hand off library with the following information socket client connection target port and data.

The intermediate hand off library retrieves TCP transmission control protocol extended statistics TCP ESTATS on the client connection and gathers information about send receive sequence numbers and other connection parameters such as MSS maximum segment size . The intermediate migration hand off library opens the forwarding TCP connection to the target endpoint with the appropriate connection parameters obtained from the TCP extended statistics and sends the data to the target endpoint if there is data loss data is retransmitted from the intermediate endpoint to the target endpoint . This data informs the target endpoint of the client request.

At this point the target endpoint has received all the request related data it needs to respond back to the client . The intermediate migration hand off library retrieves the TCP extended statistics on the forwarding connection and gathers information about send receive sequence numbers.

The intermediate migration hand off library instructs its associated intermediate migration controller to migrate connection to connection . The migration controller instructs migration driver to perform network address translation NAT and transport state translation on the data from the client connection to the forwarding connection by providing the address and sequence number information for both connections and .

The intermediate migration controller informs the target migration controller on the target endpoint to start NAT of outgoing packets from the target endpoint for the forwarding connection using the IP and sequence number information from the client connection . The target migration controller passes the parameters obtained from the intermediate controller down to the target migration driver . When the target endpoint sends any data the target migration driver applies the appropriate translation so that packets flow directly to the client packets on the wire have the same format as if coming back over the client connection .

When the client sends acknowledgments and or data packets back to the IP port the intermediate migration driver on the intermediate endpoint applies the appropriate translation and sends those packets to the target endpoint . The target migration driver watches for connection reset by the intermediate endpoint on the client connection and once the reset has occurred on the client connection the target migration driver forces a reset on the forwarding connection between the intermediate endpoint and the target endpoint . The intermediate migration hand off library closes the client connection whenever the forwarding connection is closed.

In an alternative implementation the intermediate migration hand off library can signal another device in the network such as a router or a load balancer not shown to perform the translation on incoming packets to the intermediate endpoint thereby further reducing the load on the intermediate server.

The intermediate driver translates the packets so that the packets appear to be coming from connection and sends the packets to the target endpoint . The target migration driver allows the request through to a target endpoint application that receives the request and generates a response. The response is passed down to the target migration driver . The driver translates the response packets so the response packets appear to be coming on connection and sends the response packets directly to the client. The target driver does the translation for all packets generated on connection including control packets generated by the protocol stack.

In another scenario the intermediate endpoint does not know the location of the target endpoint and redirects the request to a second intermediate endpoint that may know the location of the target endpoint which after analyzing the request and potentially after generating a partial response forwards the request to the target endpoint for direct response to the client . It can be the case that the response is routed through the second intermediate endpoint and associated second intermediate migration component for direct communication to the client .

In yet another scenario there is a predetermined amount of time e.g. milliseconds that the response is due back to the client . In this case if the request is not expected to generate a response within the allotted time the request will be passed on to another endpoint for response processing and so on until a response is received back at the client .

In yet another scenario the request can be migrated to other endpoints to get results or more results in the allotted time. For example if the allotted time to receive the response at the client is five hundred milliseconds the request can be migrated along the endpoints to accumulate responses within the five hundred millisecond time frame.

Included herein is a set of flow charts representative of exemplary methodologies for performing novel aspects of the disclosed architecture. While for purposes of simplicity of explanation the one or more methodologies shown herein for example in the form of a flow chart or flow diagram are shown and described as a series of acts it is to be understood and appreciated that the methodologies are not limited by the order of acts as some acts may in accordance therewith occur in a different order and or concurrently with other acts from that shown and described herein. For example those skilled in the art will understand and appreciate that a methodology could alternatively be represented as a series of interrelated states or events such as in a state diagram. Moreover not all acts illustrated in a methodology may be required for a novel implementation.

As used in this application the terms component and system are intended to refer to a computer related entity either hardware a combination of software and tangible hardware software or software in execution. For example a component can be but is not limited to tangible components such as a processor chip memory mass storage devices e.g. optical drives solid state drives and or magnetic storage media drives and computers and software components such as a process running on a processor an object an executable module a thread of execution and or a program. By way of illustration both an application running on a server and the server can be a component. One or more components can reside within a process and or thread of execution and a component can be localized on one computer and or distributed between two or more computers. The word exemplary may be used herein to mean serving as an example instance or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as preferred or advantageous over other aspects or designs.

Referring now to there is illustrated a block diagram of a computing system that executes endpoint migration in accordance with the disclosed architecture. In order to provide additional context for various aspects thereof and the following description are intended to provide a brief general description of the suitable computing system in which the various aspects can be implemented. While the description above is in the general context of computer executable instructions that can run on one or more computers those skilled in the art will recognize that a novel embodiment also can be implemented in combination with other program modules and or as a combination of hardware and software.

The computing system for implementing various aspects includes the computer having processing unit s a computer readable storage such as a system memory and a system bus . The processing unit s can be any of various commercially available processors such as single processor multi processor single core units and multi core units. Moreover those skilled in the art will appreciate that the novel methods can be practiced with other computer system configurations including minicomputers mainframe computers as well as personal computers e.g. desktop laptop etc. hand held computing devices microprocessor based or programmable consumer electronics and the like each of which can be operatively coupled to one or more associated devices.

The system memory can include computer readable storage physical storage media such as a volatile VOL memory e.g. random access memory RAM and non volatile memory NON VOL e.g. ROM EPROM EEPROM etc. . A basic input output system BIOS can be stored in the non volatile memory and includes the basic routines that facilitate the communication of data and signals between components within the computer such as during startup. The volatile memory can also include a high speed RAM such as static RAM for caching data.

The system bus provides an interface for system components including but not limited to the system memory to the processing unit s . The system bus can be any of several types of bus structure that can further interconnect to a memory bus with or without a memory controller and a peripheral bus e.g. PCI PCIe AGP LPC etc. using any of a variety of commercially available bus architectures.

The computer further includes machine readable storage subsystem s and storage interface s for interfacing the storage subsystem s to the system bus and other desired computer components. The storage subsystem s physical storage media can include one or more of a hard disk drive HDD a magnetic floppy disk drive FDD and or optical disk storage drive e.g. a CD ROM drive DVD drive for example. The storage interface s can include interface technologies such as EIDE ATA SATA and IEEE 1394 for example.

One or more programs and data can be stored in the memory subsystem a machine readable and removable memory subsystem e.g. flash drive form factor technology and or the storage subsystem s e.g. optical magnetic solid state including an operating system one or more application programs other program modules and program data .

The one or more application programs other program modules and program data can include the entities and components of the system of the entities and components of the system of the flow of the stacks of the entities and components of the system of and the methods represented by the flowcharts of for example.

Generally programs include routines methods data structures other software components etc. that perform particular tasks or implement particular abstract data types. All or portions of the operating system applications modules and or data can also be cached in memory such as the volatile memory for example. It is to be appreciated that the disclosed architecture can be implemented with various commercially available operating systems or combinations of operating systems e.g. as virtual machines .

The storage subsystem s and memory subsystems and serve as computer readable media for volatile and non volatile storage of data data structures computer executable instructions and so forth. Such instructions when executed by a computer or other machine can cause the computer or other machine to perform one or more acts of a method. The instructions to perform the acts can be stored on one medium or could be stored across multiple media so that the instructions appear collectively on the one or more computer readable storage media regardless of whether all of the instructions are on the same media.

Computer readable media can be any available media that can be accessed by the computer and includes volatile and non volatile internal and or external media that is removable or non removable. For the computer the media accommodate the storage of data in any suitable digital format. It should be appreciated by those skilled in the art that other types of computer readable media can be employed such as zip drives magnetic tape flash memory cards flash drives cartridges and the like for storing computer executable instructions for performing the novel methods of the disclosed architecture.

A user can interact with the computer programs and data using external user input devices such as a keyboard and a mouse. Other external user input devices can include a microphone an IR infrared remote control a joystick a game pad camera recognition systems a stylus pen touch screen gesture systems e.g. eye movement head movement etc. and or the like. The user can interact with the computer programs and data using onboard user input devices such a touchpad microphone keyboard etc. where the computer is a portable computer for example. These and other input devices are connected to the processing unit s through input output I O device interface s via the system bus but can be connected by other interfaces such as a parallel port IEEE 1394 serial port a game port a USB port an IR interface etc. The I O device interface s also facilitate the use of output peripherals such as printers audio devices camera devices and so on such as a sound card and or onboard audio processing capability.

One or more graphics interface s also commonly referred to as a graphics processing unit GPU provide graphics and video signals between the computer and external display s e.g. LCD plasma and or onboard displays e.g. for portable computer . The graphics interface s can also be manufactured as part of the computer system board.

The computer can operate in a networked environment e.g. IP based using logical connections via a wired wireless communications subsystem to one or more networks and or other computers. The other computers can include workstations servers routers personal computers microprocessor based entertainment appliances peer devices or other common network nodes and typically include many or all of the elements described relative to the computer . The logical connections can include wired wireless connectivity to a local area network LAN a wide area network WAN hotspot and so on. LAN and WAN networking environments are commonplace in offices and companies and facilitate enterprise wide computer networks such as intranets all of which may connect to a global communications network such as the Internet.

When used in a networking environment the computer connects to the network via a wired wireless communication subsystem e.g. a network interface adapter onboard transceiver subsystem etc. to communicate with wired wireless networks wired wireless printers wired wireless input devices and so on. The computer can include a modem or other means for establishing communications over the network. In a networked environment programs and data relative to the computer can be stored in the remote memory storage device as is associated with a distributed system. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers can be used.

The computer is operable to communicate with wired wireless devices or entities using the radio technologies such as the IEEE 802.xx family of standards such as wireless devices operatively disposed in wireless communication e.g. IEEE 802.11 over the air modulation techniques with for example a printer scanner desktop and or portable computer personal digital assistant PDA communications satellite any piece of equipment or location associated with a wirelessly detectable tag e.g. a kiosk news stand restroom and telephone. This includes at least Wi Fi or Wireless Fidelity for hotspots WiMax and Bluetooth wireless technologies. Thus the communications can be a predefined structure as with a conventional network or simply an ad hoc communication between at least two devices. Wi Fi networks use radio technologies called IEEE 802.11x a b g etc. to provide secure reliable fast wireless connectivity. A Wi Fi network can be used to connect computers to each other to the Internet and to wire networks which use IEEE 802.3 related media and functions .

What has been described above includes examples of the disclosed architecture. It is of course not possible to describe every conceivable combination of components and or methodologies but one of ordinary skill in the art may recognize that many further combinations and permutations are possible. Accordingly the novel architecture is intended to embrace all such alterations modifications and variations that fall within the spirit and scope of the appended claims. Furthermore to the extent that the term includes is used in either the detailed description or the claims such term is intended to be inclusive in a manner similar to the term comprising as comprising is interpreted when employed as a transitional word in a claim.

