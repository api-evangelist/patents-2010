---

title: Monetized online content systems and methods and computer-readable media for processing requests for the same
abstract: One aspect of the invention provides a computer system having processing and memory means operable to provide a monetized online content system. The computer system is coupled to one or more resource modules each having data in the memory means and includes: an interceptor module configured to receive a request from a client for one or more resources available from one or more resource modules, refer the request to one or more of the resource modules configured to fulfill the request, receive one or more responses from one or more of the resource modules, at least one of said one or more responses having one or more events associated therewith, and transform the one or more responses by removing the one or more events associated with the one or more responses prior to presentation of the one or more responses to the client.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09594887&OS=09594887&RS=09594887
owner: Thomson Reuters Global Resources
number: 09594887
owner_city: Baar
owner_country: CH
publication_date: 20101230
---
Online research services such as WESTLAW and WESTLAW NEXT available from Thomson Reuters of Eagan Minn. continue to be ubiquitous to individuals and businesses of all sizes.

As these services continue to expand in popularity the breadth of information and services provided also continues to expand. This increased breadth introduces additional complexity to the systems because newly added content may be provided by additional servers. As the number of servers increases the challenges of enforcing policies e.g. policies governing security billing and the like across each server grow.

Moreover various Internet architectures rely on sequences of HTTP requests and responses HTTP cookies or other client side storage means to maintain the system s current state and track client activity e.g. for billing . Such architectures can be manipulated by a knowledgeable user to obtain free services.

Accordingly there is a need for new systems that allow for centralized enforcement of policies and hide internal processes from customers.

One aspect of the invention provides a computer system having processing and memory means operable to provide a monetized online content system. The computer system is coupled to one or more resource modules each having data in the memory means and includes an interceptor module configured to receive a request from a client for one or more resources available from one or more resource modules refer the request to one or more of the resource modules configured to fulfill the request receive one or more responses from one or more of the resource modules at least one of said one or more responses having one or more events associated therewith and transform the one or more responses by removing the one or more events associated with the one or more responses prior to presentation of the one or more responses to the client.

This aspect of the invention can have a variety of embodiments. At least one of the events can be a billing event. The at least one of the events can be a user experience event. The code executable on the interceptor module can be further configured to cause the processing means to record one or more of the events.

The system can include an authentication module in communication with the interceptor module. The authentication module can include code executable on the processing means configured to authenticate the client. The interceptor module can further include code configured to cause the processing means to identify one or more credentials in the request present the credentials to the authentication module and delay the step of referring the request to the one or more resource modules until the authentication module indicates that the client is authenticated.

The interceptor module can be further configured to maintain a list of recently authenticated clients and a time at which the client was most recently authenticated by the authentication module if the client was most recently authenticated within a defined interval refer the request without presenting the one or more credentials and if the client was most recently authenticated beyond the defined interval present the one or more credentials to the authentication module.

The defined interval can be selected from the group consisting of 1 second 5 seconds 10 seconds 15 seconds 30 seconds 45 seconds 1 minute 5 minutes 10 minutes 15 minutes 20 minutes 30 minutes 45 minutes 1 hour 3 hours 6 hours 12 hours 1 day 2 days 3 days 1 week and 1 month.

The defined interval can be selected from the group consisting of less than about 1 minute between about 1 minute and about 5 minutes between about 5 minutes and about 10 minutes between about 10 minutes and about 15 minutes between about 15 minutes and about 20 minutes between about 20 minutes and about 30 minutes between about 30 minutes and about 45 minutes between about 45 minutes and about 1 hour between about 1 hour and about 3 hours between about 3 hours and about 6 hours between about 6 hours and about 12 hours between about 12 hours and about 1 day between about 1 day and about 2 days between about 2 days and about 3 days between about 3 days and about 1 week and between about 1 week and about 1 month.

The system can include an authorization module in communication with the interceptor module the authorization module having code executable on the processing means configured to cause the authorization module to verify whether the client is authorized to access the one or more resources.

Another aspect of the invention provides a method for processing requests for a monetized online content system. The method includes receiving a request from a client in processing means for one or more resources resident in one or more resource modules coupled to the processing means referring the request to the one or more of the resource modules to fulfill the request receiving one or more responses from one or more of the resource modules having data responsive to the request at least one of said one or more responses having one or more events associated therewith transforming the one or more responses by removing one or more events associated with the one or more responses prior to presentation of the one or more responses to the client.

This aspect of the invention can have variety of embodiments. At least one of the events can be a billing event. At least one of the events can be a user experience event. The method can include recording at least one event associated with the one or more responses.

The method can include identifying one or more credentials in the request presenting the credentials to the authentication module and delaying the step of referring the request to the one or more resource modules until the authentication module indicates that the client is authenticated.

The method can include maintaining a list of recently authenticated clients and a time at which the client was most recently authenticated by the authentication module and if the client was most recently authenticated within a defined interval referring the request without presenting the one or more credentials and if the client was most recently authenticated beyond the defined interval presenting the one or more credentials to the authentication module.

The method can include communicating with an authorization module configured to verify whether the client is authorized to access the one or more resources.

Another aspect of the invention provides a computer program product including computer usable medium having control logic stored therein for causing a computer to process requests for a monetized online content system. The control logic includes first computer readable program code means for causing the computer to receive a request from a client for one or more resources available from one or more resource modules coupled to the computer second computer readable program code means for causing the computer to refer the request to one or more of the resource modules operable to fulfill the request third computer readable program code means for causing the computer to receive one or more responses from one or more of the resource modules at least one of said one or more responses having one or more events associated therewith and fourth computer readable program code means for causing the computer to remove one or more events associated with the one or more responses prior to presentation of the one or more responses to the client presenting the one or more responses.

This aspect of the invention can have a variety of embodiments. The computer readable medium can be non transitory and tangible. The control logic can further include fifth computer readable program code means for causing the computer to recording at least one event associated with the one or more responses.

The present invention is now described more fully with reference to the accompanying drawings in which an illustrated embodiment of the invention is shown. The invention is not limited in any way to the illustrated embodiment as the illustrated embodiment described below is merely exemplary of the invention which is embodied in various forms as appreciated by one of ordinary skill in the art. Therefore it is to be understood that any structural and functional details disclosed herein are not to be interpreted as limiting the invention but rather are provided as a representative embodiment for teaching one of ordinary skill in the art one or more ways to implement the invention. Furthermore the terms and phrases used herein are not intended to be limiting but rather are to provide an understandable description of the invention.

It is to be appreciated that the embodiments of this invention as discussed below may be incorporated as a software algorithm program or code residing in firmware and or on computer useable medium including software modules and browser plug ins having control logic for enabling execution on a computer system having a computer processor. Such a computer system typically includes memory storage configured to provide output from execution of the computer algorithm or program having processing means.

The system includes an interceptor module configured to receive one or more requests from one or more clients . The system optionally includes an authentication module configured to determine whether the user client is permitted to access the system an authorization module configured to determine whether the user client is permitted to access particular resources and or one or more resource modules .

Interceptor module pools resources on behalf of resource modules . For example a plurality of interceptor modules may each maintain connections to a network attached storage NAS device not depicted on behalf of resource modules .

As discussed herein authentication module is configured to determine whether the user client is permitted to access the system and authorization module is configured to determine whether the user client is permitted to access permitted resources. Embodiments of the authentication module and or the authorization module implement conventional or proprietary access control algorithms for example in hardware or software. As further discussed herein the authentication module and or the authorization module are in some embodiments implemented as physically separate entities e.g. separate computers from other system components such as interceptor module . In other embodiments the authentication module and or the authorization module are implemented as separate software processes on the same computer that implements the interceptor module .

Resource modules provide resources desired by clients . Exemplary resources are files databases physical components e.g. processors printers and the like . For example resource modules in a legal monetized online content system provide collections of law focused decisions journals treatises administrative materials dockets court filings and the like. In another example resource modules in a finance focused monetized online content system provide company research historical asset prices and the like. In still another example resource modules provide processing capabilities. For example resource modules perform computationally intensive calculations for customers.

Clients are a laptop computer desktop computer handheld device e.g. a table computer personal digital assistant cellular telephone smart phone and the like now known and later developed. As can be appreciated by one of ordinary skill in the art clients and other elements herein can be singular or plural. Clients have display s appreciated by those of ordinary skill in the pertinent art. The displays are any of a number of devices known to those skilled in the art for displaying images responsive to outputs signals from the clients . Such devices include but are not limited to cathode ray tubes CRTs liquid crystal displays LCDs plasma screens and the like. Although a simplified diagram is illustrated in such illustration shall not be construed as limiting the present invention to the illustrated embodiment. It should be recognized that the signals output from the clients originate from any of a number of devices including PCI or AGP video boards or cards mounted within the housing of the clients that are operably coupled to the microprocessors and the displays thereof.

Clients access system through proprietary or commercially available software. For example clients utilize an Internet browser to access a Hypertext Transfer Protocol HTTP interface provided by system e.g. interceptor module . Suitable Internet browsers include INTERNET EXPLORER available from Microsoft Corporation of Redmond Wash. FIREFOX available from the Mozilla Foundation of Mountain View Calif. OPERA available from Opera Software AS of Oslo Norway or CHROME available from Google Inc. of Menlo Park Calif. Alternatively clients interact with system via specially programmed software such as an application installed on clients .

Although clients may be referred to herein as autonomous objects one of ordinary skill in the art appreciates that such references incorporate one or more users interacting with the clients unless otherwise contradicted. For example a client s authentication and or authorization is a reflection of the authentication and or authorization of a user of the client . In another example the client is an autonomous third party computer e.g. a server configured to access resources within system for use in a service provided by a third party e.g. under a different trademark .

The systems and methods described herein advantageously handle cross cutting concerns in a centralized location. As a result the systems and methods herein promote high coherence within interceptor module and loose coupling between interceptor module and other modules . Thus authentication and authorization testing is focused on interceptor module which together with authentication module and authorization module acts a firewall for system . Moreover resource modules are concerned with creating events and are not concerned with the mechanics of logging events.

Interceptor module authentication module authorization module and resource modules are augmented as necessitated by various workloads and processing demands for various aspects of system . For example if client sends n parallel requests for resources from several resource modules the system executes the authorization logic once and the authentication logic 0 to n times. Thus if the authentication module is utilized more than authorization module system accommodates additional authentication modules to handle the increased load without the need to necessarily increase authentication module or resource module capacity.

Moreover the systems and methods described herein simplify testing of system . Because authentication and authorization concerns are removed from resource modules trusted users e.g. internal software developers easily isolate and test the core functionalities of resource modules thereby promoting efficient development and testing.

System is implemented on a single piece of software or hardware such as general purpose computers including but not limited to computers with higher processing power colloquially known as servers. In such an embodiment each of the one or more modules included in a particular configuration of system are implemented as individual processes threads objects components and the like. Such individual processes threads objects components and the like can be processed by one or more processors.

Alternatively one or more modules are implemented on separate pieces of software or hardware such as general purpose computers including but not limited to computers with higher processing power colloquially known as servers. In such an embodiment each of the one or more modules included in a particular configuration of system can communicate via various protocols known to those of ordinary skill in the art.

Modules can utilize one or more publicly available software components. In one embodiment interceptor module is a specially programmed web server such as the Apache HTTP Server Apache Tomcat and MICROSOFT Internet Information Services. Modules are programmed with a variety of programming languages such as JAVA C C Perl MICROSOFT .NET and the like.

In step S a request for resources available from one or more resource modules is received from a client . The request is received via a network . Network can be the Internet an intranet and the like.

The request is structured in a variety of well known or proprietary formats. For example client and interceptor module communicate via Representational State Transfer REST as described in Roy T. Fielding Richard N. Taylor Principled Design of the Modern Web Architecture 2 2 115 50 2002 and Roy Thomas Fielding 2000 Dissertation University of California Irvine . In such an example the requests are GET and POST requests as defined under the Hypertext Transfer Protocol HTTP . The Hypertext Transfer Protocol is described in publications such as Andrew S. Tanenbaum Maarten van Steen 11.1.2 11.1.3 2002 .

The method includes one or more steps for authenticating the client . For example in step the interceptor module identifies one or more credentials in a request. Interceptor module identifies credentials using tools such as regular expressions as implemented in a variety of programming languages such as Perl Ruby and Tcl and described in publications such as H. M. Deitel et al. 253 83 2001 and Robert W. Sebesta 4.10 2002 .

Credentials are presented in many forms. For example requests from client include a username and password as a credential. Alternatively the credential includes a unique token which may be a hash of a username password and or other information e.g. a timestamp . The token e.g. an authentication token an entitlement token and the like is generated by client interceptor module and or authentication module and is stored locally on the client using a persistent object such as a cookie in conventional Internet architectures and or Local Stored Objects LSOs in FLASH or AIR platforms. Cookies are described in H. M. Deitel et al. 1060 68 2000 . The FLASH or AIR software platforms are available from Adobe Systems Incorporated of San Jose Calif.

The interceptor module maintains a list of recently authenticated clients . Such a list advantageously reduces authentication delays for active clients. The interceptor module determines in step Sif a client was recently authenticated and if the client was recently authenticated proceed to step Sand determine if the client is authorized to access the requested resource. Alternatively if the client was not recently authenticated the interceptor module presents credentials to an authentication module in step S

Whether a client was recently authenticated is determined in a variety of steps. For example the interceptor module and or the client stores a time at which the client was most recently authenticated and the interceptor module determines whether the client was most recently authenticated within a defined time interval. Examples of the defined time interval include 1 second 5 seconds 10 seconds 15 seconds 30 seconds 45 seconds 1 minute 5 minutes 10 minutes 15 minutes 20 minutes 30 minutes 45 minutes 1 hour 3 hours 6 hours 12 hours 1 day 2 days 3 days 1 week and or 1 month. Additional examples of the defined time interval include less than about 1 minute between about 1 minute and about 5 minutes between about 5 minutes and about 10 minutes between about 10 minutes and about 15 minutes between about 15 minutes and about 20 minutes between about 20 minutes and about 30 minutes between about 30 minutes and about 45 minutes between about 45 minutes and about 1 hour between about 1 hour and about 3 hours between about 3 hours and about 6 hours between about 6 hours and about 12 hours between about 12 hours and about 1 day between about 1 day and about 2 days between about 2 days and about 3 days between about 3 days and about 1 week and or between about 1 week and about 1 month.

As discussed above in step S the interceptor module presents the one or more credentials to authentication module .

In step S the authentication module indicates whether the client is authenticated. If the client is authenticated the interceptor module verifies the client s authorization as discussed below in the context of step S. If the client is not authenticated the request is denied in step S

In step S the interceptor module communicates with an authorization module to determine if the client is authorized to the access the requested resource s . Alternatively the interceptor module and or authorization module performs local validation of a recent authentication token a secure and random token generated by the authentication module as discussed herein and or entitlement token a one way hash of a context identifier a resource identifier and a secret key as discussed herein routed from step S. For example if a user closes and then opens a new Internet browser window on a client interceptor module validates the authentication token and or entitlement token held by client if the authentication token and or entitlement token was issued and or validated within a defined time period.

As discussed herein in step S the interceptor module refers the request to one or more resource modules . The request is routed to the one or more resource modules by the interceptor module or by a load balancing device not depicted configured to route requests to resource modules capable of handling the request. A resource module s capability to handle a request is a function of the resource module s workload and or its qualifications. For example a resource module containing U.S. Supreme Court decisions may not be qualified to handle a request for a Massachusetts Supreme Judicial Court decision even if the resource module is not currently being utilized.

In step S the interceptor module receives one or more responses from the resource modules as further discussed herein the context of the working example.

In step S the interceptor module records any events associated with the one or more responses. For example the events include billing events and or user experience events. For example billing events can include information about the resources accessed such as quantity costs royalties and the like. User experience events represent interactions between the client and the system and allow for analysis of aggregate user behavior patterns e.g. what features are used and how users tend to use them . For example user experience events include the name of the resource that was accessed how the user accessed the resource e.g. what other resources were accessed prior to accessing the resource executed search commands and other interactive commands e.g. commands to email print save or folder a resource . In general billing events are a subset of user experience events in that a user experience event may or may not be billed to user.

In step S the events are removed from the response by the interceptor module . Advantageously this hides the internal structure of system . If the response and or the events have a well defined format events are easily identified and removed using regular expressions as discussed herein.

In step S the responses are presented to the client by the interceptor module . Responses are communicated via a variety of means including wired or wireless transmission.

Once received by the client the responses are presented to the user. For example data contained in the response is displays on a display device e.g. a monitor a television a liquid crystal display and the like saves to memory printes and the like.

Method can be repeated a plurality of times. For example method is executed each time a request from a client is received by interceptor module . In embodiments having multiple interceptor modules affinity between a particular client and a particular interceptor module is advantageous e.g. resulting in a higher cache hit ratio when determining whether the client was recently authenticated but is not required.

As discussed herein method can be implemented on general purpose or specially programmed hardware or software. For example method can be implemented by a computer readable medium e.g. software stored on interceptor module . The computer readable medium can be non transitory and or tangible. For example the computer readable medium can be volatile memory e.g. random access memory and the like or non volatile memory e.g. read only memory hard disks floppy discs magnetic tape optical discs paper table punch cards and the like .

Referring now to a working example is depicted by sequence diagram . In this working example the client has established an authentication token by submitting credentials to authentication module .

The sequence begins in step S when the client requests entitlement to access a resource residing on a resource module . The request is presented to the authorization module and includes a capability request object which includes a resource identifier e.g. a document ID that uniquely identifies a resource and the authentication token.

In step S the authorization module validates the previously generated authentication token by passing the authentication token to authentication module .

In step S the authorization module determines whether the client is entitled to access the resource and responds to the client accordingly. This response includes an entitlement token and a context identifier that serves to further limit the context in which the entitlement token is valid. The entitlement token is a one way hash of the context identifier a resource identifier and the secret key.

The embodiment discussed above in which the authorization module communicates directly with authentication module is particularly advantageous because authorization module does not rely on interceptor module . Such an embodiment allows for immediate revocation of the authentication tokens without the delay of waiting for interceptor module cache entries to expire. However other embodiments are within the scope of the invention including embodiments in which interceptor module maintains an authentication cache that are utilized to expedite processing of requests from recently authenticated clients .

In step S the client next submits one or more resource requests to the interceptor module . Each resource request includes a context identifier a resource identifier e.g. a document ID an authentication token a secure and random token generated by the authentication module and an entitlement token. The one or more requests are presented serially or in parallel.

Identity data is removed from the request in step S to prevent malicious clients and or users from submitting false identity data. The removed identity data is replaced in step S with identity data if any about the client that was previously cached by interceptor module . Thus even if a malicious client and or user were to attempt a spoofing attack by altering a request to include another user s identity data e.g. to gain access to another user s litigation documents this attempt would be spoiled because the altered identity data would be discarded and replaced with the identify data cached the interceptor module and pertaining the authenticated client and or user.

If identity data is not found in the cache e.g. because previously cached identity data expired the client s token is sent to the authentication module in step S for revalidation. New identity data is returned to the interceptor module in step S. This new identity data is cached for a time period in step S for example the current time plus n seconds. The identity data includes a user identifier and a secret key that is hidden from the client and unique for each authentication token.

The authentication token is validated by the authentication module using many different schemes. In one approach the authentication token is an encrypted string of the secret key which corresponds to a specific session. Validation then consists of decrypting the token and validating the secret key against the pool of currently active sessions which are accessible only from the authentication module .

If the authentication token is invalid the interceptor module sends an appropriate response to the client in step S.

Once the client is authenticated the interceptor module determines in step S whether the client holds a valid entitlement token. If the entitlement token is invalid the interceptor module sends an appropriate response to the client in step S.

If the entitlement token is valid the interceptor module adds the cached identity data to the resource request in step S and submits the cached identity data and the resource request to the resource module for processing in step S. The resource module returns the requested resource and one or more events to the interceptor module in step S. As discussed herein these events are for example billing events e.g. the amount of time required to process the request the size of the resource and the cost of the resource . Resources and events are presented in various formats including objects or markup language such as HyperText Markup Language HTML Extensible HyperText Markup Language XHTML Extensible Markup Language XML and the like.

The interceptor module logs these events on the interceptor module or on another system in step S and removes the events in step S before returning the resource to the client in step S.

With an illustrated embodiment of the invention being described above it is to be understood that the functions of several elements may in alternative embodiments be carried out by fewer elements or a single element. Similarly in some embodiments any functional element may perform fewer or different operations than those described with respect to the illustrated embodiment. Also functional elements e.g. modules databases computers clients servers and the like depicted as distinct for purposes of illustration may be incorporated within other functional elements separated in different hardware or distributed in a particular implementation.

While certain embodiments according to the invention have been described the invention is not limited to just the described embodiments. Various changes and or modifications can be made to any of the described embodiments without departing from the spirit or scope of the invention. Also various combinations of elements steps features and or aspects of the described embodiments are possible and contemplated even if such combinations are not expressly identified herein.

The entire contents of all patents published patent applications and other references cited herein are hereby expressly incorporated herein in their entireties by reference.

