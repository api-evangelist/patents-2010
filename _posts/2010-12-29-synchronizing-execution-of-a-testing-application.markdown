---

title: Synchronizing execution of a testing application
abstract: A method and apparatus for synchronizing execution of a test application is described. In one embodiment, the method includes receiving two or more commands from a test application. The method may also include distributing a first command from the received two or more commands to a plurality of client computer systems, each client computer system to issue the first command to a server computer system. Furthermore, the method may include distributing a second command from the received two or more commands to the plurality of client computer systems after receipt of a response to the first command from each of the plurality of client computer systems.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09064054&OS=09064054&RS=09064054
owner: Red Hat, Inc.
number: 09064054
owner_city: Raleigh
owner_country: US
publication_date: 20101229
---
Embodiments of the invention relate to the field of application testing and more particularly to synchronizing execution of a graphical user interface test application at a plurality of client computer systems.

Client server applications are distributed software systems that typically include a central server that provides services to a number of clients. The services are provided by sending data between clients and the server. When a client needs a service it sends a request to the server. The server processes the request and sends an answer back to the client.

Automated functional user interface testing is a kind of testing that simulates a user operating on an application s user interface UI and verifies its functionality. The key component of such tests is a program library that is able to simulate a real user input by triggering events associated with actions like clicking mouse buttons or typing text. The test follows a given test case by using the application programming interface API of the library and verifies that the UI responds as expected.

In a client server application framework timing issues arise when testing an application. For example users may be enabled by a client application to import files into a database on a server. The database is shared for the client server application and users may overwrite other users files by using the same file name. If more than one requests to import a file of the same name arrives at the server at the same time only the first import request will succeed. The rest of the import requests cannot be satisfied and their originators will be notified by the server that the operation failed. Thus in order to test such error conditions in a client side application the timing and distribution of client application requests becomes crucial.

A method and apparatus for synchronizing execution of a test application is described. In one embodiment the method includes receiving two or more commands from a test application. The method may also include distributing a first command from the received two or more commands to a plurality of client computer systems each client computer system to issue the first command to a server computer system. Furthermore the method may include distributing a second command from the received two or more commands to the plurality of client computer systems after receipt of a response to the first command from each of the plurality of client computer systems.

In one embodiment client systems execute a client based application for interacting with server system . In one embodiment the client based application is a graphical user interface GUI based application that enables a user of a client system to interact with data at the server system . For example the client based application may provide a GUI that enables a user to access a database manage files or any other web based application in order to access data add data delete data etc. from the server system via standard user interface commands such as mouse clicks typed commands mouse overs etc.

In one embodiment a plurality of client systems execute the same GUI based application or different GUI applications for interacting with the server system . Because two or more client systems may perform the same action on data maintained by the server system an error condition might arise. For example two client systems may display a listing of files stored on server system . When a first client system deletes a file via the client s GUI interface to server system that file is no longer available at server system to any client systems. However a second client system that is displaying files at the server system may not have been refreshed to reflect the first client system s deletion of the file. When the second client system then seeks to perform an action on the file such as access the file transfer the file delete the file etc. the second client will receive an error message for attempting to perform an action on a file that does not exist.

In one embodiment test synchronization system is responsible for synchronizing the execution of testing application commands at a plurality of client computer systems such as client systems . In one embodiment test synchronization system distributes test commands to client systems in order to cause and therefore test error conditions at client systems . In the example discussed above a time dependent error occurred when a client system attempted to access a file after the file had been deleted from the server system .

As discussed in greater detail below test synchronization system manages testing commands so that the client systems will execute commands for a test application in parallel. That is in one embodiment test synchronization system ensures that the same commands actions are performed by each of the plurality of client systems at the same time or within a very small margin of time.

In one embodiment test synchronization system includes a testing proxy that interacts with a test application . In one embodiment test application is software code written to interface with the graphical user interface GUI library of a client computer system. In one embodiment the test application operates on the user interface library to simulate user actions such as mouse clicking on a GUI interface of a client application entering text executing commands accessing files deleting files transferring files etc. In one embodiment the test application is written to interface with a single client computer system.

In one embodiment the test application is written in a computer language corresponding to the UI library . That is the UI library simulates user actions that may be taken on a client application s GUI. For example the test application may be a JAVA based testing application driving a UI library written in JAVA to test a web based GUI run on a client computer system. In one embodiment test application resides on test system and interacts with testing proxy . In another embodiment test application is executed at a remote location and interacts with testing proxy via a network such as network of .

In one embodiment testing proxy receives test commands from test application in order to distribute and synchronize execution of the received testing commands among a plurality of client computer systems such as clients to N. In one embodiment testing proxy includes a user interface UI library interface that receives test commands e.g. simulated mouse clicks keystrokes execution requests etc. from test application . In one embodiment UI library interface simulates a client based user interface UI library such as UI library through N. In one embodiment UI library interface simulates a client UI library so that test application needs only be written as if a test application were to be executed on a single client computing system.

In one embodiment test synchronization proxy ensures the sequential commands of a test program such as test application are each synchronized for execution in parallel. In one embodiment test synchronization proxy synchronizes execution of test application commands at a plurality of client systems a plurality of libraries etc. Although test synchronization proxy is described herein with respect to a test application for a user interface library test synchronization proxy may be utilized to synchronize testing between any test application and a library whose functions commands the test application are to invoke.

In one embodiment testing controller is responsible for distributing and scheduling the synchronous execution of test commands at a plurality of client computer systems. Because test controller distributes and synchronizes test commands the writing of a test application is simplified so that distribution of commands synchronizing distribution of commands scheduling commands etc. need not be coded in the test application.

In one embodiment testing controller synchronizes the distribution and therefore execution of test commands from the test application . In one embodiment for each test command of the test application testing controller distributes the same test command to each of a plurality of clients via a UI library of the clients . For example testing controller may distribute the same mouse click file access request file deletion request file rename request upload download request etc. as specified in test application to each client to simulate an end user of a client computer system entering the command in a graphical user interface GUI . In one embodiment the same command is provided at the same time by testing controller to each client . Each client computer system through N executes the test application command to interact with server system . Because the testing controller distributed the command to each client at the same time each client will in turn execute the command to interact with the server system at the same time.

In one embodiment synchronous distribution and execution of test commands will cause error conditions to be encountered by one or more of client systems through N. In the example discussed above where a file has been deleted on the server system by a first client computer system e.g. client other client computer systems e.g. clients through N that attempt to delete the same file will receive error messages. In one embodiment testing controller reports the error messages displayed by the UI libraries to the test application via the UI library interface . Thus test application which may be written as if to be executed on a single client system may receive error messages from parallel and synchronous execution of test commands at a plurality of clients .

In one embodiment testing controller further waits to receive responses from all clients through N before distributing a next command in the test application . Testing controller waits for responses from each client for each distributed test command before sending out a next test command to each of the client systems to facilitate the parallel execution of all commands from a test application. In one embodiment the parallel distribution of the same commands at the same time enables the testing of time based errors at client GUI based applications for interacting with a server system .

In one embodiment the commands i.e. command A command B command C etc. of test application may be received by UI library interface and provided to testing controller . In one embodiment testing controller distributes a command such as command A to three client computer systems at time to . As is illustrated different client computer systems may take different amounts of time to execute command A.

In one embodiment testing controller waits for each client computer system to finish execution of command A before distributing command B to the three client computer systems at time t . In one embodiment testing controller continues to synchronize the distribution and thus parallel execution of the same command at the same time to each of the client computer systems.

Referring to the process begins by receiving a command from a test application processing block . In one embodiment the test application is a software application that simulates a user s interactions with a graphical user interface. In one embodiment the user interface commands simulate common user interactions with an application such as user mouse clicks text entry etc. In one embodiment the user interface command received from the test application is a single command to be executed by a single client computer system.

Processing logic forwards the command to a testing controller processing block . In one embodiment the command is distributed to two or more client computer systems for execution by application libraries on the client computer systems processing block . In one embodiment the command is replicated for distribution to multiple client computer systems at the same time. In one embodiment because processing logic replicates and distributes the command a the same time the command may be executed in parallel by the client computer systems. In one embodiment the command causes the client computer systems to interact with a server computer system. Exemplary interactions with the server computer systems may include the client computer systems attempting to access files stored on the server computer system delete files from the server computer system rename files move files etc.

Processing logic receives responses to the command from the client computer systems processing block . In one embodiment the responses may be received at different times as different client computer systems as well as a server system may take varying amounts of time to process any given command. Furthermore in one embodiment one or more of the received responses may include error messages.

Processing logic determines if responses have been received from all client computer systems processing block . When not all client computer systems have responded to the command processing logic returns to processing block to await for additional responses. However when all client computer systems have responded to the command the responses to the command are reported to the test application processing block . In one embodiment processing logic may report the responses to the test application as the responses are received.

Processing logic determines if there are additional commands in the test application processing block . When there are additional commands in the test application processing logic returns to processing block and the test command is forwarded to a testing controller for distribution to two or more client computer systems. However when there are no additional test commands the process ends.

The exemplary computer system includes a processing device a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a data storage device which communicate with each other via a bus .

Processing device represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processing device may be a complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor or a processing device implementing other instruction sets or processors implementing a combination of instruction sets. The processing device may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. The processing device is configured to execute the test synchronization system for performing the operations and steps discussed herein.

The computer system may further include a network interface device . The computer system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The data storage device may include a computer readable storage medium on which is stored one or more sets of instructions e.g. the test synchronization system embodying any one or more of the methodologies or functions described herein. The test synchronization system may also reside completely or at least partially within the main memory and or within the processing device during execution thereof by the computer system the main memory and the processing device also constituting computer readable storage media. The test synchronization system may further be transmitted or received over a network via the network interface device .

While the computer readable storage medium is shown in an exemplary embodiment to be a single medium the term computer readable storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term computer readable storage medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term computer readable storage medium shall accordingly be taken to include but not be limited to solid state memories optical media and magnetic media.

In the foregoing description numerous details are set forth. It will be apparent however to one of ordinary skill in the art having the benefit of this disclosure that the present invention may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present invention.

Some portions of the detailed description that follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as receive distribute report or the like refer to the actions and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical e.g. electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct a more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.

It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. The scope of the invention should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

The foregoing description for purpose of explanation has been described with reference to specific embodiments. However the illustrative discussions above are not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations are possible in view of the above teachings. The embodiments were chosen and described in order to best explain the principles of the invention and its practical applications to thereby enable others skilled in the art to best utilize the invention and various embodiments with various modifications as may be suited to the particular use contemplated.

