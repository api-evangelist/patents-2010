---

title: Server independent deployment of plug-ins
abstract: Disclosed are methods and systems for deploying one or more plug-ins. The method and systems involve receiving a request for generating a graphical user interface at a client computing device, the request includes a configuration for flash content of the graphical user interface, identifying a one or more plug-ins associated with the request and at least one extension of the identified one or more plug-ins, the one or more plug-ins having been deployed at a plurality of content servers across plurality of platform types and stored in a plug-in repository, retrieving the identified one or more plug-ins based on the extension of the identified one or more plug-ins and generating the requested graphical user interface based on the retrieved one or more plug-ins.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08613007&OS=08613007&RS=08613007
owner: Business Objects Software Limited
number: 08613007
owner_city: Dublin
owner_country: IE
publication_date: 20100929
---
The field generally relates to deploying plug ins and more specifically to deploying server independent plug ins.

A Flex package is a user interface application component implemented with the Adobe Flex technology. The flex technology used to build user interfaces includes code and metadata about the components and assets. The user interfaces built by the flex technology are different from the general user interfaces since they typically provide a richer user experience. The user interface applications are built as a package and they are shipped to the customer. Once the package is shipped to the customer they have to be regularly updated. To update the existing package a new package along with the latest updates has to be re complied at run time. Further if the packages are developed on multiple server platforms the updates of the package are deployed on the corresponding server platforms.

Currently available systems provide a standard deployment mechanism for Flex components through a folder path accessible from the web root folder or packaged as .WAR files deployed on a server container. This system is not flexible enough to support distributed deployment. The assembly of Flex components from different server platforms and running them in flash player runtime requires the availability of cross domain policy files on the server root which stipulate the access policy for the Flex components deployed in the server. There is a need for deploying the Flex components in a transparent way.

Various embodiments of systems and methods for server independent deployment of plug ins are described herein. The method and systems involve receiving a request for generating a graphical user interface at a client computing device the request includes a configuration for flash content of the graphical user interface identifying a one or more plug ins associated with the request and at least one extension of the identified plug ins. The one or more plug ins are deployed at a plurality of content servers across a plurality of platform types and are stored in a plug in repository. The identified one or more plug ins are retrieved based on the extension of the one or more plug ins and the requested graphical user interface is generated based on the retrieved one or more plug ins. In one embodiment the one or more plug ins are retrieved according to plug in identifiers.

These and other benefits and features of embodiments of the invention will be apparent upon consideration of the following detailed description of preferred embodiments thereof presented in connection with the following drawings.

Embodiments of techniques for server independent deployment of plug ins are described herein. In the following description numerous specific details are set forth to provide a thorough understanding of various embodiments. One skilled in the relevant art will recognize however that the invention can be practiced without one or more of the specific details or with other methods components materials etc. In other instances well known structures materials or operations are not shown or described in detail to avoid obscuring aspects of the invention.

Reference throughout this specification to one embodiment this embodiment and similar phrases means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus the appearances of these phrases in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore the particular features structures or characteristics may be combined in any suitable manner in one or more embodiments.

The Flex Client Platform FCP is a module system for building rich internet applications. The rich internet applications are built on top of Flex or Flash technology. The FCP will be available for one or more server platforms. The FCP client is based on a modular architecture which allows extension of underlying framework and capabilities. The FCP defines extension points. Extension points provide a first application designed to be incorporated into a second application in order to enhance or extend the functionalities of the second application. The architecture also supports flexible deployment of additional components during runtime without the need to recompile the application.

FCP includes two components namely FCP client and FCP server. The FCP client loads the plug ins at runtime starts the plug ins and connects the extension point offered by the first plug ins with the extensions offered by the second plug ins. FCP server includes multiple servers on various platforms. The multiple servers enable incremental deployment of the plug ins. The multiple server platforms may include but are not restricted to Java ABAP .Net C C and so on.

The FCP server includes a plurality of content servers on which the plug ins are deployed. The plug ins may be deployed on different server platforms. The plug ins may be developed by the flex technology. Consider a business scenario of three teams A B and C developing plug ins. The teams develop plug ins independently across plurality of content servers. Team A develops plug in P1 Team B develops P2 and Team C develops P3. Plug in P2 is a reusable plug in. The plug ins are deployed by the plug in manager. The plug ins are registered in the plug in registry. The plug in registry includes the plug in identifiers and the details about the content servers on which the plug ins are deployed. The plug in registry registers the extension points offered by the plug ins.

In one embodiment the FCP server may include just in time configuration creator application resource handler and scope management module. The just in time configuration creator enables the FCP client to start up the application. The application resource handler responds to the client request. The client request may include resource requests such as plug in manifests images and so on.

The FCP client receives a user request for generating the GUI. The request includes configurations required for generating a flash content of the GUI. The configuration of the flash content may include but are not restricted to images animations video and interactive applications. The plug ins associated with the request are identified. The identified plug ins are retrieved from a plug in repository based on the description provided by the plug in in the plug in registry. The identified plug ins are checked for extensions. A suitable extension for the identified plug in is searched. Both the extensions are linked to generate the requested user interface.

On receiving the user request the plug ins required to generate the requested GUI are identified. The plug ins are identified through a plug in manifest. The plug in manifest provides functional description of the deployed plug ins. Based on the description in the plug in manifest the plug ins suitable for generating the GUI are retrieved from the plug in repository. The GUI is generated based on the flash content provided by the retrieved plug ins. For instance the plug in deployed in Java and the plug in deployed in ABAP may be linked together to render a requested user interface.

According to one embodiment the content server is connected to three sub content servers and . When the client computing device makes a request for generating the flash content of the GUI the plug ins required for the generation of the GUI may have been deployed at the sub content servers and . In another embodiment though the plug ins are deployed at one sub content server e.g. the plug ins may be served from the content server as the sub content server is connected to the content server .

In yet another embodiment the plug in manager redirects the http requests to the appropriate content server based on universal resource locator URL formats and special http headers. For instance if the client computing device makes a request for a image located on the content server and if that image is moved to the another content server the request for the image is redirected from content server to content server .

In another embodiment the plug ins are deployed incrementally. Deploying the plug ins incrementally allows the one or more plug ins to come in and go out of the platform independent of other plug ins. In yet another embodiment the plug in registry indicates the link between the plug ins. For instance if application A includes plug ins P and P the plug in registry indicates that P and P are linked. If a user intends to download plug in P the plug in registry indicates he may also want to download P.

Consider an example of a language conversion user interface. The plug ins associated with the language conversion user interface are identified. The functions of the identified plug ins are declared in the plug in manifest. A plug in X with function as understanding a language interface is offering an extension point. In this scenario the extension point is understanding language interface which means that any other plug in Y providing a language tool such as converting English to German may be combined with the plug in X . The first plug in X and the second plug in may be linked to render a language conversion user interface for converting English to German.

Consider another scenario where a language interface is shipped to a customer. For instance the shipped language interface supports three languages English French and German. Now an enhanced version of the language interface is available which supports two other new languages Spanish and Japanese. In this scenario the shipped language interface is a first plug in offering an extension point and the enhanced version of the language interface is a second plug in which may be linked to the extension point provided by the first plug in. Once the first plug in and the second plug in are linked the language interface offers five languages i.e. English French German Spanish and Japanese .

The extension map includes extension point id and bundles . The bundles also include an ID. The extension map enables a user to search for an extension when a extension point ID is entered.

In one embodiment the plug in registry includes an execution scope . The execution scope may categorize the view of an application into a basic view and an advanced view. For instance if there are five plug ins contributing to an application the user may want to display two plug ins in the basic view and five plug ins in the advanced view. This criterion may be defined in the execution scope according to the plug in identifier. The belongs to section associated with the execution scope may include details about the type of view e.g. basic view or advanced view .

The plug ins are deployed at the content server . In one embodiment the server side includes several content servers. Several developers deploy the plug ins at these content servers. The content servers may be of different server platform types. In one embodiment each of the content servers may maintain the plug in registry and plug in manager within its memory whereas the plug in repository may be on another content server.

The plug ins deployed at the content server includes flash content required to generate the user interface . At design time the plug ins are deployed by the plug in manager . The plug ins are registered in the plug in registry according to their plug in identifiers. The plug in registry also provides function associated with the plug in. The plug ins are stored in the plug in repository .

The client computing device receives a request from a user to generate a user interface . The user request includes the configuration required for the flash content generation associated with the user interface . The just in time configuration creator supplies the configurations required by the client computing device to generate the user interface. The just in time configuration creator also helps in incremental and independent deployment of the plug ins.

At runtime the user request is forwarded to the application resource handler . The application resource handler responds to the user request such as plug in requests image request plug in manifest request and so on. On receiving the request for generating the user interface the plug ins are retrieved from the plug in repository according to their plug in identifiers and the user interface is generated by the graphical UI generator . The generated user interface is presented on the user interface .

According to one embodiment the scope management module categorizes the plug ins. According to another embodiment categorizing the plug ins involves arranging the plug ins according to the security rights. The security rights may include but are not restricted to providing access to the plug ins with a user login and restricting access to the plug ins without a user login.

Some embodiments of the invention may include the above described methods being written as one or more software components. These components and the functionality associated with each may be used by client server distributed or peer computer systems. These components may be written in a computer language corresponding to one or more programming languages such as functional declarative procedural object oriented lower level languages and the like. They may be linked to other components via various application programming interfaces and then compiled into one complete application for a server or a client. Alternatively the components may be implemented in server and client applications. Further these components may be linked together via various distributed programming protocols. Some example embodiments of the invention may include remote procedure calls being used to implement one or more of these components across a distributed programming environment. For example a logic level may reside on a first computer system that is remotely located from a second computer system containing an interface level e.g. a graphical user interface . These first and second computer systems can be configured in a server client peer to peer or some other configuration. The clients can vary in complexity from mobile and handheld devices to thin clients and on to thick clients or even other servers.

The above illustrated software components are tangibly stored on a computer readable storage medium as instructions. The term computer readable storage medium should be taken to include a single medium or multiple media that stores one or more sets of instructions. The term computer readable storage medium should be taken to include any physical article that is capable of undergoing a set of physical changes to physically store encode or otherwise carry a set of instructions for execution by a computer system which causes the computer system to perform any of the methods or process steps described represented or illustrated herein. Examples of computer readable media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROMs DVDs and holographic devices magneto optical media and hardware devices that are specially configured to store and execute such as application specific integrated circuits ASICs programmable logic devices PLDs and ROM and RAM devices. Examples of computer readable instructions include machine code such as produced by a compiler and files containing higher level code that are executed by a computer using an interpreter. For example an embodiment of the invention may be implemented using Java C or other object oriented programming language and development tools. Another embodiment of the invention may be implemented in hard wired circuitry in place of or in combination with machine readable software instructions.

A data source is an information resource. Data sources include sources of data that enable data storage and retrieval. Data sources may include databases such as relational transactional hierarchical multi dimensional e.g. OLAP object oriented databases and the like. Further data sources include tabular data e.g. spreadsheets delimited text files data tagged with a markup language e.g. XML data transactional data unstructured data e.g. text files screen scrapings hierarchical data e.g. data in a file system XML data files a plurality of reports and any other data source accessible through an established protocol such as Open DataBase Connectivity ODBC produced by an underlying software system e.g. ERP system and the like. Data sources may also include a data source where the data is not tangibly stored or otherwise ephemeral such as data streams broadcast data and the like. These data sources can include associated data foundations semantic layers management systems security systems and so on.

In the above description numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize however that the invention can be practiced without one or more of the specific details or with other methods components techniques etc. In other instances well known operations or structures are not shown or described in detail to avoid obscuring aspects of the invention.

Although the processes illustrated and described herein include series of steps it will be appreciated that the different embodiments of the present invention are not limited by the illustrated ordering of steps as some steps may occur in different orders some concurrently with other steps apart from that shown and described herein. In addition not all illustrated steps may be required to implement a methodology in accordance with the present invention. Moreover it will be appreciated that the processes may be implemented in association with the apparatus and systems illustrated and described herein as well as in association with other systems not illustrated.

The above descriptions and illustrations of embodiments of the invention including what is described in the Abstract is not intended to be exhaustive or to limit the invention to the precise forms disclosed. While specific embodiments of and examples for the invention are described herein for illustrative purposes various equivalent modifications are possible within the scope of the invention as those skilled in the relevant art will recognize. These modifications can be made to the invention in light of the above detailed description. Rather the scope of the invention is to be determined by the following claims which are to be interpreted in accordance with established doctrines of claim construction.

