---

title: System and method for performing rapid data snapshots
abstract: A storage system is provided that includes storage controller logic that performs rapid data snapshots. The storage controller logic may provide block-level access to a storage volume. The storage controller logic may store all data blocks of the storage volume in a first solid state memory cache. The storage controller logic may form a snapshot of the storage volume in a second solid state memory cache. The first and second solid state memory caches are addressable with a processor. The storage system may complete the snapshot extremely quickly because the processor may copy from one memory location to another between the first and second solid state memory caches.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08307154&OS=08307154&RS=08307154
owner: Kove Corporation
number: 08307154
owner_city: Chicago
owner_country: US
publication_date: 20100225
---
This application claims priority under 35 U.S.C. 119 e to U.S. Provisional Application No. 61 156 964 entitled SYSTEM AND METHOD FOR PERFORMING RAPID DATA SNAPSHOTS filed Mar. 3 2009 the entire contents of which are hereby incorporated herein by reference.

Point in time snapshots of data stored in storage systems may be needed for various reasons such as guaranteeing data integrity and recovering from data loss. The snapshots may be initiated by a human by a software application or both. Traditional approaches for performing snapshots commonly use multiple machines connected through a storage network. A host machine serves host data and a remote machine serves a snapshot of the host data. The snapshot is created by copying the host data over the storage network from the host machine to the remote machine.

In traditional approaches a software application ceases write activity flushes memory contents onto disk and then transfers an image of the host data from the host storage machine to the remote machine. This image of the host data provides a time specific snapshot for archival or disaster recovery purposes.

However traditional approaches may become cumbersome to end users of software applications that use the storage media being duplicated. For example performing a snapshot may slow or halt applications during the snapshot process. Also the performance of the software applications may be slow enough that the software applications fail to meet desired service levels. Moreover traditional approaches may require bringing applications off line for extended periods resulting in service delays for any service hosted on a snapshot source storage medium. Additionally traditional approaches may move data relatively slowly across the storage network from one storage device to another. Creating the snapshot may require a considerable amount of time during which the software applications may not be able to write or read data without significant delay. Even when employing traditional snapshot methods that are considered relatively fast creating the snapshot may still degrade storage performance enough to cause noticeable application delays. The larger the data the more time the transfer of data across the storage network may take. Also the larger the data the longer applications may delay processing when a storage system suspends writes in order to guarantee snapshot data integrity. Therefore there exists a need for snapshots operating at the fastest possible speeds.

A system is provided that includes storage controller logic that performs rapid data snapshots. The storage controller logic provides block level access to at least one storage volume. The storage controller logic may store all data blocks of the at least one storage volume in a first solid state memory cache. The storage controller logic may form at least one snapshot of the at least one storage volume where all data blocks of the at least one snapshot are stored in a second solid state memory cache. The first and second solid state memory caches may be addressable with the processor in a common address space.

A computer readable medium may also be provided that includes instructions executable to provide block level access to a storage volume. The instructions may provide the storage volume in a first memory cache that includes all data stored in the storage volume. The instructions may form a snapshot of the storage volume in a second memory cache. The second memory cache may include all data stored in the snapshot of the storage volume. The snapshot may be formed copying data between the first and second memory caches.

A method may be provided that forms a snapshot volume from a storage volume. The storage volume may be stored in a first memory cache where the first memory cache may include all data blocks of the storage volume. At least a portion of the data blocks of the storage volume may be copied from the first memory cache to a second memory cache with the processor. The second memory cache may include all data blocks of the snapshot volume. The first and second memory caches may be included in a solid state memory that is addressable with the processor.

Further objects and advantages of the present invention will be apparent from the following description reference being made to the accompanying drawings wherein preferred embodiments of the present invention are shown.

By way of example a system for performing rapid snapshots may store all of the data of a storage volume in a first memory cache. The system may rapidly perform a snapshot by copying all or a portion of the data of the storage volume from the first memory cache to a second memory cache where the first and second memory caches share a common address space in solid state memory such as RAM Random Access Memory . All of the data of a snapshot volume is included in the second memory cache. The system may optionally copy the data of the snapshot volume to a backing store such as flash memory or a magnetic disk. The system may also optionally copy the data of the storage volume to the same backing store a different backing store or both. A block device storage controller may perform the snapshots and control access to the storage and snapshot volumes.

One technical advantage of the systems and methods for performing rapid snapshots is that snapshots may be completed extremely quickly. For example a snapshot may be completed in the time it takes the processor to copy the data from the first memory cache to the second memory cache. Because the processor is copying data from one memory location to another the processor may copy the data at an extremely high data transfer rate. For example the data transfer rate may exceed hundreds of gigabytes per second using memory available today. In contrast when a processor copies data from one block storage device to another using a suitable block storage device interface such as SCSI Small Computer System Interface the data transfer rate may be on the order of hundreds of megabytes per second. This is true even if the suitable block storage device is a solid state mass storage device. Another technical advantage of the systems and methods for performing rapid snapshots is that there may be few if any compatibility issues with existing software applications because the block device storage controller may implement the snapshot functionality transparently to the software applications storing data in the storage volume. Thus snapshots of mission critical application data may be made with no or minimal impact on service level.

The memory may be any memory such as a solid state memory a random access memory RAM a dynamic random access memory DRAM a static random access memory SRAM a flash memory a read only memory ROM an electrically erasable programmable read only memory EEPROM any type of memory configured in an address space addressable by the processor or any combination thereof. The memory may be volatile or non volatile or a combination of both.

The memory may include a storage controller logic a first memory cache for storage of a storage volume and a second memory cache for storage of a snapshot volume . In one implementation the portion of the memory that includes the storage controller logic is of a different type than the portion of the memory that includes the first and second memory caches and . For example the memory may include a ROM and a solid state memory where the storage controller logic is stored in ROM and the solid state memory includes the first and second memory caches and . The first memory cache and second memory cache may be two overlapping or non overlapping regions of a single memory cache or a collection of memory caches.

The processor may be in communication with the memory . The processor may also be in communication with additional components such as the backing stores and the storage hardware interface . The processor may be a general processor a central processing unit a server an application specific integrated circuit ASIC a digital signal processor a field programmable gate array FPGA a digital circuit an analog circuit or any combination thereof. The processor may be one or more devices operable to execute computer executable instructions or computer code embodied in the memory or in other memory to perform snapshots. For example the processor may execute computer executable instructions that are included in the storage controller logic .

In one example the storage system may be included as part of a computer. For example the processor may be the central processing unit CPU of the computer the memory may be the computer s memory and the computer includes the storage hardware interface .

In a second example the storage system may be added to a computer or some other type of device that accesses data in the storage system . For example the storage system may be a device installed in a computer where the storage volume consumer and or the snapshot volume consumer is a process executed by a central processing unit CPU of the computer that is in communication with the storage controller logic over the storage hardware interface . The storage hardware interface may be for example a SCSI or SATA serial AT attachment interconnect. The memory in the storage system may be different than the memory accessed by the CPU of the computer and the processor may be different than the CPU of the computer. In a third example the storage volume consumer and or the snapshot volume consumer may communicate with the storage system over a network or switched fabric such as a Storage Area Network SAN an INFINIBAND network which is a registered trademark owned by System I O Inc. of Beaverton Oreg. a Local Area Network LAN a Wireless Local Area Network WLAN a Personal Area Network PAN a Wide Area Network WAN or any other now known or later developed communications network.

In any configuration the first and second memory caches and are included in solid state memory. Solid state memory may be a device or combination of devices that stores data is constructed primarily from electrical conductors semiconductors and insulators and is generally considered not to have any moving mechanical parts. Solid state memory may be byte addressable word addressable or block addressable. For example most dynamic RAM and some flash RAM may be byte addressable or word addressable. Flash RAM and other persistent types of RAM may be block addressable. Solid state memory may be designed to connect to a memory controller via a data bus internal to a computing device. The computing device may be any device that includes a processor such as the processor in the storage system a CPU or a DMA direct memory access controller.

The memory controller is a hardware component that translates memory addresses specified by the processor into the appropriate electrical signaling to access corresponding locations in the solid state memory. The processor such as the processor in the storage system may specify the address on a system bus . The system bus may be a bus that electrically couples the processor to the memory where the processor the system bus and the memory are directly or indirectly coupled to a common circuit board such as a motherboard. In one example the system bus may include an address bus that is used to specify a physical address where the address bus is a series of lines connecting two or more components. The memory controller may include software. The memory controller may for example also perform background processing tasks such as periodically refreshing the contents of the memory. In one example implementation the memory controller may be included in the processor . Thus solid state memory may be random access memory that permits stored data to be read and or written in any order i.e. at random . The term random refers to the fact that any piece of data may be returned and or written within a constant time period regardless of the physical location of the data and regardless of whether the data is related to a previously read or written piece of data. In contrast storage devices such as magnetic or optical discs rely on the physical movement of the recording medium or a read write head so that retrieval time varies based on the physical location of the next item read and write time varies based on the physical location of the next item written. Examples of solid state memory include but are not limited to DRAM SRAM NAND flash RAM NOR flash RAM Phase Change Memory PRAM EEPROM FeRAM MRAM CBRAM PRAM SONOS RRAM Racetrack memory NRAM Millipede T RAM Z Ram and TTRAM.

In contrast to solid state memory solid state storage devices are systems or devices that package solid state memory with a specialized storage controller through which the packaged solid state memory may be accessed using a hardware interconnect that conforms to a standardized storage hardware interface. For example solid state storage devices include but are not limited to flash memory drives that include SATA or SCSI interfaces Flash or DRAM drives that include SCSI over Fibre Channel interfaces DRAM drives that include SATA or SCSI interfaces and USB universal serial bus flash drives with USB interfaces.

The storage controller logic of the storage system provides the storage volume consumer with block level access to the storage volume . Alternatively or in addition the storage controller logic may provide the snapshot volume consumer with block level access to the snapshot volume . The storage controller logic may perform one or more snapshots of the storage volume . Alternatively or in addition the storage controller logic may restore the storage volume from a particular point in time snapshot or from a range of time snapshot.

The storage controller logic may provide the block level access using any storage protocol now known or later discovered. A storage protocol may be any communications protocol used to transfer data between a block storage device or system and a device or system that stores the data in and or retrieves the data from the block storage device or system. A storage protocol may be implemented for example using one or more hardware storage controllers. The storage protocol and electrical characteristics of the hardware storage controller may be part of a common standard. In one example the storage protocol may be the universal serial bus mass storage device class USB MSC or UMS which is a set of computing communications protocols defined by the USB Implementers Forum that runs on a hardware bus conforming to the USB standard. In a second example the storage protocol may be the SCSI command protocol. In a third example the storage protocol may be the SATA protocol. Additional examples of the storage protocol include Serial Attached SCSI SAS and Internet Small Computer System Interface iSCSI . Alternatively or in addition the storage controller logic may provide the block level access using any storage protocol that is transferred using any data transfer protocol such as SCSI over Fibre Channel SCSI RDMA Protocol SRP over Remote Direct Memory Access RDMA iSCSI over TCP IP or any other combination of storage protocol and data transfer protocol known now or discovered in the future.

By providing block level access through the storage controller logic the storage system may be considered in at least one example implementation a block storage device. A block storage device may also be referred to as a block device. A block device stores data in blocks of a predetermined size such as 512 or 1024 bytes. The predetermined size may be configurable. A block device is accessed via a software or hardware storage controller. Examples of other block devices include a disk drive having a spinning disk a tape drive a floppy disk drive and a USB flash pen drive.

The storage controller logic may include computer code. The computer code may include instructions executable with the processor . The computer code may be written in any computer language now known or later discovered such as C C C Java or any combination thereof. In one example the computer code may be firmware. Alternatively or in addition the storage controller logic and the processor may be implemented as a circuit. For example the circuit may include a FPGA configured to perform the functions of the storage controller logic . Alternatively or in addition the circuit may include an ASIC configured to perform the functions of the storage controller logic .

As explained above in at least one example the storage controller logic may provide the block level access over the storage hardware interface . The storage hardware interface may be any physical interconnect used for data transfer. Examples of the storage hardware interface include but are not limited to Fibre Channel INFINIBAND SATA SCSI USB Ethernet or any other physical communications interface.

The storage controller logic may create one or more volumes such as the storage volume and the snapshot volume . A volume is a configured area of storage that is accessible at the block level via any storage protocol now known or later discovered. Storage protocols are described above.

In one example the volume may be a physical volume which maps a sequence of data blocks to corresponding memory locations in the memory . Therefore in addition to the data blocks themselves the volume may include volume information such as a mapping of data blocks to memory locations. The data blocks of the volume which are configured by the storage controller logic are all stored in a memory cache that is included in the memory . For example the data blocks of the storage volume may be stored in the first memory cache and the data blocks of the snapshot volume may be stored in the second memory cache . The volume information may or may not be included in the memory cache. Accordingly when the volume is said to be included in the memory cache at least the data blocks of the volume the data stored in the volume are included in the memory cache.

The one or more backing stores may include any block device. Examples of the backing stores include but are not limited to hard disks CD ROM drives tape drives flash drives or any other mass storage device.

The storage volume consumer may be any process executed by a processor any device any component or any combination thereof that is in communication with the storage controller logic to access or manipulate the storage volume . The snapshot volume consumer may be any process executed by a processor any device or any combination thereof that is in communication with the storage controller logic to access or manipulate the snapshot volume . Examples of the storage volume consumer and the snapshot volume consumer include a file system component of an operating system an application executing in an operating system a service running on a computer a computer a server a laptop or any device configured to communicate with the storage hardware interface .

During operation of the storage system the storage controller logic may initiate a snapshot of the storage volume . The storage controller logic may create the snapshot of the storage volume using any one or more algorithms described below. The algorithms may differ from each other balancing tradeoffs between aggregate performance speed of operations application impact and user impact among others. Alternately or in addition a snapshot algorithm not described below may be used to create the snapshot of the storage volume in the second memory cache .

The storage controller logic may initiate the snapshot in response to a determination that a preconfigured condition is met such as a determination that a configured amount of time has elapsed since the last snapshot of the storage volume was initiated. Alternatively or in addition the snapshot may be initiated in response to a snapshot request received from the storage volume consumer and or the snapshot volume consumer . For example a backup application executing in an operating system may request that the storage controller logic initiate the snapshot. That request may be received by the storage controller logic when the backup application invokes a programmatic function included in an application programming interface API implemented by the storage controller logic . Alternatively or in addition the storage controller logic may initiate the snapshot in response to receiving a request to initiate the snapshot over the storage hardware interface .

In creating the snapshot the processor may directly access the memory in order to copy data blocks from the first memory cache to the second memory cache . The memory is said to be addressable by the processor if the processor is electrically coupled to the memory via at least one memory bus. Alternatively or in addition the memory is said to be addressable by the processor if the memory is assigned a range of memory in a system memory address space and is accessed by the processor via the memory controller that converts addresses specified by the processor into suitable electrical signals communicated between the memory controller and the memory . Alternatively or in addition the memory is said to be addressable by the processor if the memory is electrically coupled to the system bus . Alternatively or in addition the memory is said to be addressable by the processor if the memory is electrically coupled to the memory controller and the memory controller is in turn electrically coupled to the system bus . Alternatively or in addition the memory is said to be addressable by the processor if the processor may access the memory by specifying the address on the system bus for a particular memory location and reading a byte or a word from the particular memory location.

In one implementation the storage system may be implemented using a Non Uniform Memory Architecture NUMA . In NUMA the processor may comprise multiple processor cores connected together via a switched fabric of point to point links. The memory controller may include multiple memory controllers. Each one of the memory controllers may be electrically coupled to a corresponding one of the processor cores. Each one of the multiple memory controllers may service a different portion of the memory .

In a second implementation multiple processors may be electrically coupled to the system bus . Additional components may be electrically coupled to the system bus each respective one of multiple memories that are included in the memory the storage hardware interface one or more of the backing stores and one or more memory controllers such as the memory controller in .

The storage controller logic may subdivide the memory into one or more volumes. The storage controller logic may configure each of the volumes as either a user volume or a snapshot such as the storage volume and the snapshot volume respectively. A user volume may be accessible by an external process or device such as the storage volume consumer . In one example the snapshot volume may be configured to be accessible by an external process or device. In a second example the snapshot volume may not be accessible by an external process or device.

The memory may be considered a large cache that is at least as large as the storage volume to be copied. The memory may be used during operation of the storage system to provide high speed low latency access to data stored in the storage volume . When a snapshot is requested the storage controller logic may use the memory to drastically speed up data duplication.

The storage volume and or the snapshot volume may be copied to one or more of the backing stores . The backing stores may be slower and therefore lower cost storage than the memory . Copying any of the volumes to a slower lower cost medium may include the storage controller logic directly transferring data in the memory to one or more of the backing stores . Alternatively or in addition copying any of the volumes to the backing stores may include the storage volume consumer and or snapshot volume consumer such as a traditional backup process performing the copy. Alternatively or in addition the storage volume consumer and or snapshot volume consumer may include a file system. The file system in response to an action taken by a human user may copy from the storage volume and or the snapshot volume to one or more of the backing stores . In one example the block level access to the snapshot volume may be made available prior to any data being copied to the snapshot volume . Furthermore although the snapshot volume may be a block storage area stored in the second memory cache these techniques still apply if the snapshot volume is simply an allocated set of memory pages with no particular format or in any format not described here. Additionally or alternatively any of the volumes may be accessible from a SAN storage area network and may be copied from the storage area network.

In the full copy example the storage controller logic stops accepting writes to the storage volume while the storage controller logic copies all of the data blocks of the storage volume from the first memory cache to the second memory cache . Prior to forming the snapshot the memory may include at least twice as much memory as is actively used for storage of the storage volume . In other words less than half of the memory is used to hold the storage volume so that enough of the memory will be available to store the snapshot volume . When not forming a snapshot the storage controller logic may handle read and write requests by reading from and writing to the first memory cache allocated to the storage volume .

The operation may begin by the storage controller logic receiving a request to initiate a snapshot . The storage controller logic may temporarily stop accepting writes to the storage volume . In a first example the storage controller logic may reject any request to write one or more blocks to the storage volume . In a second example the storage controller logic may delay servicing any request to write one or more blocks to the storage volume until after the snapshot is complete.

The storage controller logic may copy the contents of the first memory cache to the second memory cache . After the contents of the first memory cache are copied to the second memory cache the snapshot is complete and the storage system may resume accepting writes to the storage volume . The snapshot volume may be copied to one or more of the backing stores . In a different example the snapshot volume is not copied to any backing store .

In the continuous copy example the storage controller logic maintains a full copy of the storage volume in the snapshot volume by storing any blocks written to the storage volume both in the first memory cache and in the second memory cache instead of just in the first memory cache . When a snapshot is subsequently requested the storage controller logic ceases to accept any more writes until any previous writes not yet written to the second memory cache have been written. In the continuous copy example the storage volume occupies no more than half of the memory and an equal amount of the memory is reserved for the snapshot volume .

As write requests are received during normal operation the storage controller logic processes the requests in band. For example the operation may begin by the storage controller logic receiving a request to write one or more blocks to the storage volume . The storage controller logic may write the block to the first memory cache . The storage controller logic may then mark a region of the first memory cache as dirty using a dirty flag . The region is referred to as dirty if a data block within the region has been updated through a write but the updated data block has not yet been written to the second memory cache . The dirty region may identify dirty blocks.

The in band processing of the write request may end for example by the storage controller logic indicating to the storage volume consumer that the write was successful. Subsequent writes may be similarly handled in band. The writes are handled in band so that the storage volume consumer may wait as little as possible to learn that the write was complete. The write may be considered complete because the write was written to the first memory cache .

The background process may check whether any of the regions of the first memory cache are dirty . If not then the background process may keep checking whether any of the regions of the first memory cache are dirty . However if any region of the first memory cache is dirty then the contents of the dirty region of the first memory cache should be copied to a corresponding region of the second memory cache . The corresponding region of the second memory cache holds the corresponding data blocks of the snapshot volume . The storage controller logic may clear the dirty flag to indicate that the corresponding region of the second memory cache is updated. Then the storage controller logic may copy the contents of the dirty region of the first memory cache to a corresponding region of the second memory cache . The operation may continue by the background process checking whether any of the regions of the first memory cache are dirty .

The order in which dirty flags are updated in the in band and background processing contexts may matter to the data integrity of the snapshot volume . In one example when processing write requests in band the storage controller logic may not overwrite data being copied to the snapshot volume by the background process. Alternatively or in addition if data is overwritten in data blocks being copied to the snapshot volume the storage controller logic may mark the region containing the overwritten data as dirty so that the data will eventually be processed by the background process and copied again to the snapshot volume .

One example algorithm to track dirty regions of the storage volume is to use one or more adjustable region descriptors. An adjustable region descriptor identifies one or more ranges of data blocks where the ranges of data blocks may be modified. For example the adjustable region descriptors may include a starting memory address and an ending memory address. Alternatively or in addition the adjustable region descriptors may include a starting address and a length or size of the adjustable region. When a data block is written to a memory location adjacent to an adjustable region descriptor the storage controller logic may adjust the region descriptor to include the block. An adjusted region descriptor is the adjustable region descriptor that has been adjusted. In one example instead of clearing the dirty flag to indicate that the contents of the region have been copied to the second memory cache the storage controller logic disposes of the region descriptors for the copied data.

The operation may proceed by the storage controller logic temporarily stopping the background process from copying dirty regions in the first memory cache to the second memory cache . The reason is that new writes may be accepted if the second memory cache is not updated by the background process. Consequently the storage controller logic may resume accepting write requests for the storage volume after the background process is prevented from propagating the new writes to the second memory cache . The operation may complete by for example by copying the contents of the snapshot volume to one or more backing stores .

When ceasing to accept writes in the in band processing context the storage controller logic may reject write requests with a busy status. Alternatively or in addition when ceasing to accept writes the storage controller logic may delay execution of the writes. The storage controller logic may complete the execution of the delayed writes after all dirty regions in the first memory cache are copied to the second memory cache and the background process is stopped from copying dirty regions to the second memory cache .

The data on the snapshot volume may only be needed for a limited period of time. For example after a determined period of time a new snapshot is to replace the data in the snapshot volume . In another example the data on the snapshot volume may not be needed after being copied to one or more backing stores . Once the data on the snapshot volume is no longer needed the storage system may resume normal operation of the background process.

In the pre copy example the storage system copies the entire storage volume in response to a snapshot request but permits and tracks writes made while entire the storage volume is copied. In the pre copy example the storage volume occupies no more than half of the memory and an equal amount of the memory is reserved for the snapshot volume .

The operation may begin by the storage controller logic initiating a snapshot of the storage volume in response to a request. The storage controller logic may start tracking write requests to the storage volume in order to track what data changes in the storage volume as a result of a write request received by the storage controller logic . For example the storage controller logic may use dirty flags adjustable region descriptors or any other suitable method for tracking changes to the first memory cache .

While tracking any write requests the storage controller logic may copy all of the data blocks in the storage volume to the snapshot volume . For example the storage controller logic may copy the contents of the first memory cache to the second memory cache . At this point the contents of the first memory cache may not match the second memory cache if the storage controller logic updated the first memory cache in response to write request during the copying of all of the data blocks in the first memory cache .

In one example the operation may optionally include after copying all of the data blocks the storage controller logic indicating to the storage volume consumer that a snapshot is prepared. The storage controller logic may then wait for the storage volume consumer to indicate whether to proceed or abort the snapshot. If the storage volume consumer indicates the snapshot is to abort the operation may end for example by ceasing to track write requests to the storage volume . If the storage volume consumer indicates the snapshot is to proceed the operation may continue as described below. Alternatively or in addition the storage controller logic may optionally communicate with the snapshot volume consumer instead of the storage volume consumer in order to determine whether the snapshot is to proceed.

Alternatively or in addition the storage controller logic may optionally communicate to the storage volume consumer or the snapshot volume consumer what portion of the volume has been written to during the pre copy operation. The larger the portion of the volume that has been written to during the pre copy operation the longer the snapshot will take to complete. Accordingly the storage volume consumer or the snapshot volume consumer may determine whether to proceed with the snapshot based on an estimate of how long the snapshot would take to complete. Alternatively or in addition the storage controller logic may make the determination of whether the snapshot is to proceed based on the estimate. The storage controller logic may subsequently notify the storage volume consumer or the snapshot volume consumer of the determination made by the storage controller logic of whether to proceed or abort the snapshot.

After copying all of the data blocks the storage controller logic may temporarily cease accepting new write requests to the storage volume . Then the storage controller logic may determine whether there are any dirty regions of the first memory cache .

If there are any dirty regions the storage controller logic may copy the data in the dirty regions of the first memory cache to the second memory cache until no dirty regions remain to be copied . If there are not any dirty regions or the storage controller logic has finished copying the data in the dirty regions the storage controller logic may resume accepting write requests for the storage volume . At this point the snapshot is complete and the operation may end by for example the storage controller logic providing block level access to the storage volume .

In one example the contents of the snapshot volume may be optionally copied to one or more backing stores . Alternatively the contents of the snapshot volume may not be copied to one or more backing stores

When ceasing to accept writes the storage controller logic may reject write requests with a busy status. Alternatively or in addition when ceasing to accept writes the storage controller logic may delay execution until after all dirty regions in the first memory cache are copied to the second memory cache .

One example algorithm to track dirty regions of the storage volume is to use one or more adjustable region descriptors. An adjustable region descriptor identifies one or more ranges of data blocks where the ranges of data blocks may be modified. For example the adjustable region descriptors may include a starting memory address and an ending address. Alternatively or in addition the adjustable region descriptors may include a starting address and a length or size of the adjustable region. When a data block is written to a memory location adjacent to an adjustable region descriptor the storage controller logic may adjust the region descriptor to include the block. An adjusted region descriptor is the adjustable region descriptor that has been adjusted. In one example instead of clearing a dirty flag to indicate that the contents of the region have been copied to the second memory cache the storage controller logic disposes of the region descriptors for the copied data.

In the copy on write example the storage system uses two mappings corresponding to the storage volume and the snapshot volume respectively. Each of the mappings may map data blocks in the volume to memory locations in the memory . Thus block level access to the volumes is provided through the two mappings. The mappings initially may map to the same memory locations. If a data block is updated as a result of a write request after the snapshot is requested then the data block subject to the write request is copied to a new memory location before being overwritten. The mapping corresponding to the snapshot volume is updated to point to the new memory location so that the snapshot volume will continue to include the original value. Alternatively or in addition if a data block is updated as a result of a write request after the snapshot is requested then the write request may proceed using a new memory location. The mapping corresponding to the storage volume is updated to point to the new memory location so that the snapshot volume will continue to include the original value.

The mappings may be implemented as lookup tables or using a virtual memory system. The mappings provide a translation between a region of the corresponding volume and a memory location in the memory . Accordingly the first memory cache and the second memory cache may initially overlap.

In the copy on write example the memory does not need to be any larger than the sum of the size of the storage volume and the size of scratch space. The scratch space is used to allocate new memory locations as a result of write requests processed while the snapshot is accessible. The amount of scratch space to leave available in the memory may be determined based upon an expected write load experienced by the storage volume or some other metric.

The storage controller logic processes read and write requests for the storage volume by reading from and writing to the first memory cache as determined by a first one of the two mappings referred to hereafter as a storage volume mapping. The storage controller logic may create or maintain the second one of the two mappings for the snapshot volume as an exact copy of the first one of the two mappings referred to hereafter as a snapshot volume mapping. Alternatively or in addition the snapshot volume mapping may comprise a set of differences from the storage volume mapping or the storage volume mapping may comprise a set of differences from the snapshot volume mapping. In one example the snapshot volume mapping may include a pre allocated set of memory locations to be used as a result of write requests processed while the snapshot is accessible and may selectively map each pre allocated memory location as needed. In another example the storage volume mapping may include a pre allocated set of memory locations to be used as a result of write requests processed while the snapshot is accessible and may selectively map each pre allocated memory location as needed.

The operation may begin by the storage controller logic receiving a request for the snapshot . The storage controller logic may temporarily cease to accept new write requests for the storage volume . Alternatively or in addition the storage controller logic may create the snapshot volume mapping from the storage volume mapping.

The storage controller logic may mark the storage volume for copy on write mode . The storage controller logic may then resume accepting write requests for the storage volume . In one example the storage controller logic may provide block level access to the snapshot volume . In a second example the storage controller logic may not provide access to the snapshot volume .

While the storage controller logic provides block level access to the snapshot volume the snapshot may optionally be used for some purpose. For example the contents of the snapshot volume may be copied to one or more backing stores . Alternatively or in addition the storage controller logic may receive an instruction from the storage volume consumer to restore the storage volume from the snapshot volume . In response the storage controller logic may set the storage volume mapping to be equal to the snapshot volume mapping. The regions of the memory that were non overlapping may be deallocated.

If the snapshot volume is no longer needed or desired the storage controller logic may disable access to the snapshot volume if previously made accessible . The storage controller logic may de allocate regions of the memory that are mapped to the snapshot volume . Alternatively or in addition the storage controller logic may set the snapshot volume mapping to be equal to the storage volume mapping. The storage controller logic may mark the storage volume for normal mode instead of the copy on write mode.

When ceasing to accept writes the storage controller logic may reject write requests with a busy status. Alternatively or in addition when ceasing to accept writes the storage controller logic may delay execution until after marking the storage volume for copy on write mode .

While in copy on write mode writes to the storage volume are handled differently depending on whether the volume mappings point to the same memory locations for the particular blocks identified in the write request. For portions of the write request where the storage volume mapping and the snapshot volume mapping point to overlapping regions of the memory the overlapping regions may be separated using copy on write copy before write or other techniques. For portions of the write request where the storage volume mapping and the snapshot volume mapping point to non overlapping regions of the memory the blocks identified in the write request may be written to the regions of the memory referred to in the storage volume mapping.

Alternatively portions of the write request where the storage volume mapping and the snapshot volume mapping point to overlapping regions of the memory the overlapping regions may be separated using copy on write copy before write or other techniques. For portions of the write request where the storage volume mapping and the snapshot volume mapping point to non overlapping regions of the memory the blocks identified in the write request may be written to the regions of the memory referred to in the snapshot volume mapping.

Reads from the storage volume are handled by accessing regions in the memory referred to by the storage volume mapping. Reads from the snapshot volume are handled by accessing regions of the memory referred to by the snapshot volume mapping.

The systems and methods for performing rapid data snapshots may be implemented in a storage strategy that maximizes protection of data in extreme mission critical contexts including data having properties of transactional integrity urgency transience and volatility thereby benefiting from the fastest possible commit and recovery speeds. In one example rapid snapshots may be considered to provide data protection occurring at memory to memory copy speed performance but with natural persistence properties providing for integrity and recoverability of data. In a second example the storage system may be considered a single block device able to make a snapshot of a volume in the block device without copying the volume over a block storage device interface.

The systems and methods for performing rapid data snapshots may provide data integrity and rapid recoverability to multiple storage media concurrently and or in parallel. Thus a scalable systematic strategy for protecting and recovering data at the largest possible scales and at theoretical performance thresholds of the fastest mechanisms available is provided.

Beyond single systems the rapid snapshot techniques described herein apply to any number of related storage media. For example integrating the storage system with a file system or database that is using the storage system may result in a system capable of more flexible and efficient snapshots. For example by monitoring file system level activity the system may identify when coherent updates have been made to files or directories in the file system thereby enabling the system to make more intelligent decisions about when to trigger a snapshot or what data to duplicate. Alternatively or in addition the system may decide to duplicate and or exclude updates to specific files and or directories all new files files owned by a specific set of users or some combination thereof. Similarly by monitoring database activity the system may identify when database transactions are completed thereby enabling the system to make more intelligent decisions about when to trigger a snapshot or what data to duplicate. Alternatively or in addition the system may make a decision to duplicate and or exclude all updates to specific tables records and or attributes to duplicate all transactions performed by a specific set of users or any combination thereof.

In a first example the storage system may make further optimizations by not duplicating some or all of the areas of the storage volume known not to be in use in response to information provided about block usage. Information about block usage may be obtained by for example the ATA Interface TRIM command other cross layer information sharing technique integration of a file system or database with the storage system or any other suitable technique. These optimizations may further reduce the time required to perform a snapshot to a degree proportionate to the percentage of the storage volume that is identified as not in use.

In a second example the storage system may create a snapshot of the storage volume in multiple snapshot volumes providing multiple identical duplicates of the storage volume . For example storage system may perform multiple concurrent snapshot operations each using the same storage volume as the source of data perform multiple snapshot operations in rapid succession where a previously written snapshot volume is used as the source of data for a new snapshot volume or any combination thereof. Alternatively or in addition the storage system may create a snapshot of one storage volume by copying the storage volume into multiple snapshot volumes in rapid succession each of the multiple snapshot volumes providing copies of the storage volume at a different point in time.

When using the copy on write example the storage system does not necessarily need to allocate enough of the memory to hold a full copy of a snapshot volume . Therefore multiple snapshots of the same storage volume representing different points in time may be stored in the memory even when a corresponding number of complete copies would take more memory than is available in the storage system . The increased over subscription may be accommodated by enabling multiple snapshot volumes to share overlapping regions of the memory with each other and or with the storage volume . As changes are made to the storage volume overlapping regions may be separated between the written to storage volume and the corresponding snapshot volume s that share these regions. If through increased cache region separations or other system activity more memory is needed to hold the various volumes than is available the storage system may discard one or more volumes based upon policies configured in the storage system or specified by the storage volume consumer and or the snapshot volume consumer .

In another example the storage system may perform multiple independent snapshot operations concurrently. Available system bandwidth may be split among the snapshot operations but the concurrency gained may be valuable if coordinated or coincident snapshots of multiple volumes are desired.

In yet another example the storage system may comprise a plurality of systems that communicate among each other and or with a central coordinator or client to synchronize backup operations performed in each respective one of the systems. The perceived duration of a backup operation performed on such a cluster may be no longer than the maximum round trip communication delay plus a negligible time spent performing the instant backup. For example the systems may each be treated as a block device but exposed as one logical volume. A snapshot of the logical volume may be created by instructing each of the block devices to make a snapshot of their respective storage volume . When coupled with peer to peer networking or implemented using distributed hash tables this technique could scale to support petabyte 1 024 terabytes backups in a fraction of a second.

In still another example the storage system may be organized to operate as a collection of sub systems where each sub system is responsible for a portion of the snapshot method s being used. For example the storage system may include multiple motherboards within a single system chassis multiple motherboards in multiple chassis or a heterogeneous combination of these. The memory used to hold storage volumes and snapshot volumes may be distributed across multiple subsystems in various ways. For example the first memory cache may be located in one sub system while the corresponding second memory cache may be located in one or more other sub systems. When sub systems are installed in different geographic locations or are associated with different clients the storage system may be used to perform rapid data migration such as a migration of a virtual machine from one compute node to another. Similarly the cache allocated to each volume may be spread and or duplicated across multiple such sub systems to provide increased data protection through redundancy and or dispersion or increased application performance through multiple points of access. Such spreading duplication may be accomplished using error correcting codes such as used in RAID redundant array of inexpensive disks systems.

The storage system may be implemented in many different ways. For example although some features are shown stored in computer readable memories e.g. as logic implemented as computer executable instructions or as data structures in memory all or part of the system and its logic and data structures may be stored on distributed across or read from other machine readable media. The media may include hard disks floppy disks CD ROMs a signal such as a signal received from a network or received over multiple packets communicated across the network.

The processing capability of the storage system may be distributed among multiple entities such as among multiple processors and memories optionally including multiple distributed processing systems. Parameters databases and other data structures may be separately stored and managed may be incorporated into a single memory or database may be logically and physically organized in many different ways and may implemented with different types of data structures such as linked lists hash tables or implicit storage mechanisms. Logic such as programs or circuitry may be combined or split among multiple programs distributed across several memories and processors and may be implemented in a library such as a shared library for example a dynamic link library DLL .

All of the discussion regardless of the particular implementation described is exemplary in nature rather than limiting. For example although selected aspects features or components of the implementations are depicted as being stored in memories all or part of systems and methods consistent with the innovations may be stored on distributed across or read from other computer readable media for example secondary storage devices such as hard disks floppy disks and CD ROMs a signal received from a network or other forms of ROM or RAM either currently known or later developed. Moreover the various modules and screen display functionality is but one example of such functionality and any other configurations encompassing similar functionality are possible.

Furthermore although specific components of innovations were described methods systems and articles of manufacture consistent with the innovation may include additional or different components. For example a processor may be implemented as a microprocessor microcontroller application specific integrated circuit ASIC discrete logic or a combination of other type of circuits or logic. Similarly memories may be DRAM SRAM Flash or any other type of memory. Flags data databases tables entities and other data structures may be separately stored and managed may be incorporated into a single memory or database may be distributed or may be logically and physically organized in many different ways. Programs may be parts of a single program separate programs or distributed across several memories and processors.

The respective logic software or instructions for implementing the processes methods and or techniques discussed above may be provided on computer readable media or memories or other tangible media such as a cache buffer RAM removable media hard drive other computer readable storage media or any other tangible media or any combination thereof. The tangible media include various types of volatile and nonvolatile storage media. The functions acts or tasks illustrated in the figures or described herein may be executed in response to one or more sets of logic or instructions stored in or on computer readable media. The functions acts or tasks are independent of the particular type of instructions set storage media processor or processing strategy and may be performed by software hardware integrated circuits firmware micro code and the like operating alone or in combination. Likewise processing strategies may include multiprocessing multitasking parallel processing and the like. In one embodiment the instructions are stored on a removable media device for reading by local or remote systems. In other embodiments the logic or instructions are stored in a remote location for transfer through a computer network or over telephone lines. In yet other embodiments the logic or instructions are stored within a given computer central processing unit CPU graphics processing unit GPU or system.

While various embodiments of the innovation have been described it will be apparent to those of ordinary skill in the art that many more embodiments and implementations are possible within the scope of the innovation. Accordingly the innovation is not to be restricted except in light of the attached claims and their equivalents.

