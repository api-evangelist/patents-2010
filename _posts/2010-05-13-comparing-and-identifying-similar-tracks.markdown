---

title: Comparing and identifying similar tracks
abstract: The location of a user over time is monitored by a mobile device. The monitored locations are organized into tracks that describe a path or route that the user took over a period of time. Segments that correspond to each of the tracks are determined. The segments may correspond to road on a map, or some other standardization. The segments are associated with their corresponding tracks, and used to identify similar tracks or to generate similarity scores for pairs of tracks.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08412667&OS=08412667&RS=08412667
owner: Microsoft Corporation
number: 08412667
owner_city: Redmond
owner_country: US
publication_date: 20100513
---
Current applications for mobile devices such as cell phones and personal digital assistants make use of a user s current location. These applications may provide targeted advertisements based on a user s location e.g. display a coupon for a coffee shop near the user s current location or may alert the user to friends that may be nearby.

More sophisticated applications may make use of what is known as a track. A track is a set of location identifiers and temporal identifiers associated with a user. For example a track may describe a user s commute or a favorite jogging route of the user.

However while comparing a user s current location with sponsored locations for targeted advertising purposes or comparing a user s current location with current locations of their friends is relatively simple comparing tracks is more difficult. For example because two users may walk on different sides of the street have different speeds or stop at one or more different locations than each other during an otherwise identical trip the tracks describing each of their trips may be different.

The location of a user over time is monitored by a mobile device such as a cellular phone. The monitored locations are organized into tracks that describe a path or route that the user took over a period of time. Segments that correspond to each of the tracks are determined. The segments may correspond to roads on a map or some other canonicalization. The segments are associated with their corresponding tracks and used to identify similar tracks or to generate similarity scores for pairs of tracks.

In an implementation a plurality of tracks is received by a computing device. Each track includes a plurality of location identifiers. A plurality of segments is received by the computing device. For each track one or more segments that correspond to the track are determined by the computing device. An identifier of a track is received by the computing device. One or more segments that correspond to the identified track are determined by the computing device. One or more tracks that are similar to the identified track based on the one or more segments that correspond to the identified track and the one or more segments that correspond to each of the tracks are determined by the computing device.

Implementations may include some or all of the following features. Each segment may correspond to a section of a road on a map. Determining one or more segments that correspond to the identified track may include placing each location identifier of the identified track on the map and determining the sections of road that connect the placed location identifiers on the map. Each track may represent a commute. The identifier of a track may be received from a user and identifiers of the determined track s may be presented to the user. A node corresponding to each segment may be generated. Each node may be associated with the tracks that correspond to the segment of the node. Pairs of nodes that correspond to adjacent segments may be identified. For each identified pair of nodes it may be determined if the pair of nodes are associated with at least one common track and if so a node for the identified pair of nodes may be generated and the generated node may be associated with the tracks associated with the identified pair of nodes. A node that is in more than one identified node pair may be identified. The node pair that includes the identified node that has the greatest number of associated tracks may be determined. At least one node pair from the identified pairs of nodes that includes the identified node that does not have the greatest number of associated tracks may be removed.

In an implementation an identifier of a first track and an identifier of a second track are received by a computing device. The first track and the second track each include location identifiers. A first plurality of segments associated with the first track is determined. A second plurality of segments associated with the second track is determined. A third plurality of segments is determined based on the first segments and the second segments. The third segments include segments that are in both the first plurality of segments and the second plurality of segments. A fourth plurality of segments is determined based on the first plurality of segments and the second plurality of segments. The fourth segments include segments that are in either the first plurality of segments or the second plurality of segments. A similarity score is determined for the first and second tracks based on the third plurality of segments and the fourth plurality of segments.

Implementations may include some or all of the following features. The generated similarity score may be provided to a user. A length of the segments in the third plurality of segments and a length of the segments in the fourth plurality of segments may be determined and determining the similarity score may include determining a ratio between the length of the segments in the third plurality of segments and the length of the segments in the fourth plurality of segments. Each segment may correspond to a section of a road on a map. Determining the first segments associated with the first track may include placing each location identifier of the first track on the map and determining the sections of road that connect the placed location identifiers on the map.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the detailed description. This summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

As described above the environment may include a mobile device . The mobile device may include a variety of mobile computer devices including but not limited to cellular phones personal digital assistants video game devices audio and video players watches dongles laptops or any other type of computer device. The mobile device may be any computer device that can be with the user while the user travels. Thus the mobile device may be a cellular phone that the user carries on their person or a computer installed in a car that the user drives in. An example computer device is described with respect to the computing device illustrated in for example.

As illustrated the mobile device includes a locator . The locator may be a component of the mobile device that determines the location of the mobile device . In some implementations the locator may comprise a GPS device. Other types of devices may also be used. For example the locator may determine the location of the mobile device using cellular phone signal information e.g. distance from cellular towers or Wi Fi signal information e.g. distance from Wi Fi hotspots having a known location . Any system method or technique for determining a location may be used.

In some implementations the locator may periodically determine the location of the mobile device . The rate or frequency with which the locator may determine the location of the mobile device may vary depending on the type of mobile device or the methods through which the locator determines the location of the mobile device .

The locator may store identifiers of location in a local track storage . The locator may store the identifiers of location along with a temporal identifier of a time at which each identifier of a location is determined. In some implementations the identifiers of location and temporal identifiers may be grouped together and stored as tracks. As described above a track may comprise a set of identifiers of locations that represent a path taken by the mobile device . A track may have an identified beginning and ending location. The beginning and ending location of a track may be determined by a user of the mobile device or automatically by the mobile device based on time lapses between detected mobile device movements. For example if the mobile device has not moved from an identified location in an hour or other predetermined amount of time the end of a track may be determined.

The environment may further include a stationary device . The stationary device may be similar to the mobile device but may be lacking or may not have access to a locator . A user may use the stationary device to view and organize tracks associated with the user view tracks associated with other users and perform various track related functions. The stationary device may be implemented using a variety of computing devices including the computing device described with respect to for example.

The mobile device may further include a track client . The track client may control the operation of the locator and the local storage interface with a track application executing on the mobile device and connect to a server device and or the stationary device though a network . The network may be a variety of network types including the public switched telephone network PSTN a cellular telephone network and a packet switched network e.g. the Internet . The stationary device may similarly include a track client . The track client may interface with a track application executing on the stationary device through the network .

The track client may interface with the track application through an application programming interface API . The track application may incorporate tracks and track related features using the API. By using an API with the track client a variety of applications may incorporate track functionality. The track client and track application may perform similar functions on the stationary device .

The track clients and may communicate with a track server executing on the server device . The server device may be implemented on a variety of computing devices such as the computing device illustrated in for example. As will be described further below the track server may perform a variety of services and track related computations for the track clients and . Because the mobile device may have limited storage and processing capabilities it may be desirable to perform such computations on the server device . However there may be implementations where the mobile device may perform some or all of the functions of the server device . Moreover it is contemplated that multiple mobile devices may together perform the functions of the server device in a peer to peer or other type of distributed computing arrangement.

The track server may receive one or more tracks from the track client . The track client may periodically upload tracks determined at the mobile device . In some implementations the tracks may have associated metadata. The metadata may be user generated or may be automatically generated. For example the metadata may include a user generated description of the track such as sightseeing or good shopping . A user may generate the metadata using the track applications or for example.

The track server may store the tracks in a global track storage . In some implementations an entry for a track in the global track storage may include each location and temporal identifier associated with the track. In some implementations users of the track applications and may also associate metadata or tags with their tracks. The metadata may include a variety of data and data types. For example the users may associate comments videos links sounds descriptions notes or any other type of data with a track. In addition the track applications and may associate their own application specific metadata with the tracks. The metadata may be stored along with the tracks in the global track storage .

In some implementations the tracks may be organized by the track server into what are referred to herein as collections. A collection is an abstract grouping of tracks based on one or more criteria. The criteria may include user names user groups metadata time periods and or locations for example. The criteria may be provided by users of the track clients and and or the track applications and or may be provided by the track server .

For example one collection may correspond to some or all tracks of a particular user. Another collection may correspond to tracks of users in a place e.g. Washington D.C. at a certain time e.g. between 7 am and 9 am . Yet another collection may correspond to tracks located within a local mall or other location that are associated with people between the ages of 14 and 18 or other age group or having other common characteristics. Yet another example collection may correspond to tracks in New York that are tagged as Nightlife . Yet another example collection may correspond to tracks that are located in a particular ski resort. There is no limit to the number type or variety of collections that may be supported by the track server .

As described further with respect to the track server may provide various services and operations for the track applications and using tracks and track collections. In some implementations the track server may receive an identifier of a track and identify one or more similar tracks to the identified track in a track collection. In another implementation the track server may identify similar tracks in a track collection and provide identifiers of the similar tracks. In another implementation the track server may receive identifiers of a track pair and provide a similarity score for the track pair based on the similarity of the track pair.

The collection engine may organize the tracks in the global track storage into one or more collections. In some implementations the collections may be generated on behalf of a user request or a request from the track applications or . For example a user may request that the collection engine generate a track collection including tracks associated with some or all of their contacts. In another example a track application directed to car pooling or ride sharing may request that the collection engine generate a collection that includes all of a user s tracks that were generated during a certain time e.g. between 6 am and 9 am on weekdays . The generated collections may be stored by the collection engine in the collection storage .

In some implementations the collection engine may generate one or more collections from the global track storage . For example the collection engine may automatically generate a collection for each user city or user group. Other tags or metadata may also be used to automatically generate a track collection.

The segment engine may identify one or more segments corresponding to tracks in the global track storage . Because different tracks may include more or fewer location identifiers it may difficult to compare tracks to determine similar tracks. For example a track associated with a user who walks a particular route may have more location identifiers than a track associated with a user who drives the same route because of the polling frequencies of the locators and the differences in velocities.

To facilitate track comparison the segment engine may standardize the tracks by identifying one or more segments that correspond to each track. The segments may then be used to compare the tracks or to identify similar tracks. For example in some implementations the segments may correspond to sections of roads or highways on a map. The segment engine may determine the roads sections that correspond to a track and associate the determined segments with the track. Because segments are standardized and not dependent on the number of location identifiers associated with a track two tracks may be more easily compared using segments. Other types of segments may be used. For example the segments may correspond to aisles in a supermarket trails in a ski resort etc.

In some implementations the segment engine may determine the segments that correspond to a track by placing each location identifier of the track on a map or other representation of the segments. The map or representation may be selected by the segment engine based on the location identifiers of the track. For example if the track is located in Washington D.C. the segment engine may place each location identifier on a map of Washington D.C.

The segment engine may determine the segments from the map that connect the placed location identifiers on the map. For example the segment engine may determine a series of roads of the map that may be traveled to connect the placed location identifiers. The segment engine may determine the series of segments in the order of the temporal identifiers associated with each location identifier. The segment engine may further take into account the direction of traffic or other ordering associated with the segments e.g. one way streets river flow direction etc. when determining the segments that correspond to a track. Because the resolution of each locator used to generate the location identifiers may be different the segments identified for a track may only be an approximation of the actual route taken when the track was generated. The identified segments for each track may be stored in the segment storage along with an identifier of the track that each segment is associated with.

For example is an illustration of four tracks i.e. Tracks A D and their associated segments in a track collection. Each of the tracks A D is illustrated using a line having a different line pattern. The segments i.e. segments S S corresponding to each of the tracks A D are also illustrated. The segments S S may each correspond to a section of road on a map.

As shown the track A includes segments S S S S and S. The track B is identical to the track A and also includes segments S S S S and S. The track C includes segments S S S S S and S. The track D includes segments S S S S and S.

The segment engine may store the segments associated with the tracks from a collection of tracks using a segment data structure. The segment data structure may allow similar tracks to be identified efficiently. In some implementations the segment engine may generate the segment data structures for a collection by generating a node for each segment associated with a track in the track collection. Each node may further include an identifier of each track that it is associated with.

The segment engine may further generate new nodes from pairs of the generated nodes that have at least one track in common and are associated with adjacent segments or adjacent sequences of segments by merging the node pairs. The new node generated for each node pair may include identifiers of each track associated with either of the nodes in the node pair. The new node may be added to the generated nodes as a parent of the nodes in the node pair. Similarly the pair of nodes may be considered children of the new node.

In some implementations an indicator of the relative sizes of the segments associated with the child nodes of the new node may be added to the new node. For example if a new node is a parent of a node A corresponding to a segment that is 5 miles long and is a parent of a node B corresponding to a segment that is 10 miles long the parent node may include indicators of 5 miles and 10 miles for each respective child node. The indicators may also be ratios. Continuing the example described above the ratios may be i.e. 5 miles 15 miles and i.e. 10 miles 15 miles respectively.

The segment engine may recursively generate new nodes by merging adjacent node pairs that are associated with a common track and are associated with adjacent segments or sequences of segments until no further new nodes may be merged. Where a node is adjacent to more than one other node the segment engine may select the node pair that appears adjacently in the greatest number of common tracks.

At a first iteration the segment engine may generate a node corresponding to each segment in the track collection. These nodes are illustrated as nodes and and correspond to segments S S respectfully. Each node is associated with the track that includes the segment associated with the node. Thus the node is associated with Tracks A D node is associated with Tracks A D node is associated with Tracks A D node is associated with Tracks A B and C node is associated with Tracks A and B node is associated with Track D node is associated with Track D node is associated with Track C and node is associated with Track D.

In a subsequent iteration the segment engine may generate parent nodes for nodes that are associated with adjacent segments or sequences of segments and have at least one track in common. Thus the segment engine may generate the node as a parent node of nodes and . The node corresponds to the combined segments S and S. S and S are adjacent segments and are each associated with tracks A B C and D. The segment engine may further generate the node corresponding to segments S and S and the node corresponding to segments S and S. Segments S and S are adjacent and are both associated with Track D. Segments S and S are adjacent and are both associated with Track C. The node may be associated with Tracks A D the node may be associated with Track D and the node may be associated with Track C.

In further iterations the node is combined with the node to create the node corresponding to the segments S and S. The node is combined with the node to create the node corresponding to the segments S S and S. The node is combined with the node to create the node corresponding to the segments S S S and S. Each new node may be associated with the tracks associated with its child and descendent nodes as described above.

Because the segment sequence S S is the largest adjacent sequence of segments that appears in at least two tracks of the collection i.e. Tracks A and B the node is the largest node that is created. Similarly because the segments represented by nodes and only appear in Tracks C and D respectively they are not merged with any other nodes.

The similarity engine may determine similar tracks in a collection of tracks. In some implementations the similarity engine may receive an identifier of a track and identify one or more similar tracks in the collection to the identified track. The identified track may be a track in the global track storage or alternatively may be received from a user of a track application or

The similarity engine may determine the segments that correspond to the identified track and the segments that correspond to the tracks in the collection from the segment storage . The similarity engine may determine tracks from the collection that are similar to the identified track using the determined segments that correspond to the identified track and to the tracks in the collection. For example the similarity engine may determine the tracks in the collection that share greater than a threshold number of segments or share greater than a threshold length in segments as the identified track. The threshold number or length may be selected by the user or the track application or

In implementations where the tracks are represented using the node based segment data structure described above the similarity engine may identify child nodes in the collection that are associated with segments of the identified track. The identified nodes may be added to a set of identified nodes. Of the identified nodes in the set of identified nodes the similarity engine may then determine if any of the identified nodes have a common parent node i.e. are associated with adjacent segments or sequences of segments . If they do the parent nodes may replace the child nodes in the set of identified nodes. The similarity engine may iteratively replace node pairs in the set of identified nodes with their parent nodes until no further replacements may be made.

The tracks associated with the nodes in the set of identified nodes may be identified by the similarity engine as the similar tracks. The tracks may be further ranked or scored based on the number of nodes associated with each track the number of descendents each node associated with a track has and or the overall length of each matching segment. As described previously parent nodes are generated from nodes having adjacent segments or adjacent sequences of segments. Thus a node with multiple descendents may be associated with a sequence of segments and may be weighted higher than a node associated with a single segment. However because segments may vary in length the overall length of the matching segments may also be considered when determining the rank or score of a track. In some implementations only tracks with a score that is greater than a threshold score may be identified to the user as similar tracks for example.

The similarity engine may further determine a similarity score of two tracks identified by a user or by a track application or . The similarity of the two tracks may be determined by the similarity engine by determining the length of all of the common segments between the two tracks and the total length of the union of all the segments of either track. In an implementation the ratio of the length of the common segments to the length of the union of segments may be returned as the similarity score for the two tracks.

A plurality of tracks is received at . The plurality of tracks may be received by the segment engine of the track server . The plurality of tracks may be received from the global track storage and the plurality of tracks may represent a collection of tracks. Each track may include a plurality of location and temporal identifiers. The location identifiers may be GPS coordinates for example.

A plurality of segments is received at . The plurality of segments may be received by the segment engine of the track server . The plurality of segments may be part of a map and may correspond to sections of roads or highways on the map for example. Other maps may be used for example the map may be of a shopping mall a hiking trail or sailing channels.

One or more segments from the plurality of segments that correspond to each track are determined at . The one or more segments may be determined by the segment engine of the track server . In some implementations the segments may be determined for a track by placing each location identifier associated with the track on a map and determining the sections of road that connect the placed location identifiers on the map. The determined segments may be associated with their respective tracks and stored in the segment storage . In some implementations the segments may be stored using a node based segment data structure such as that described with respect to for example.

An identifier of a track is received at . The identifier of a track may be received by the similarity engine of the track server . The track may be received from a user or application such as the track application or . The identifier of a track may be received from a user who wishes to determine tracks in the collection that are similar to the identified track. One or more segments that correspond to the identified track are determined at . The one or more segments may be determined by the segment engine .

One or more similar tracks are determined at . The one or more similar tracks may be determined based on the one or more segments that correspond to the identified track and the one or more segments that correspond to each of the plurality of tracks by the similarity engine . In some implementations the one or more similar tracks may be determined by determining tracks from the plurality of tracks that have segments in common with the identified track. The determined one or more tracks may be ranked based on the number of similar segments that they have in common with the identified track or based on the total length of segments that they have in common with the identified track for example. In some implementations the similar tracks may be presented to a user in ranked order.

A node is generated for each segment in a plurality of segments at . The node may be generated by the segment engine of the track server . Each segment may be associated with one or more tracks from a plurality of tracks in a track collection. Each node is associated with tracks that correspond to the segment associated with the node at . Each node may be associated with tracks by the segment engine of the track server .

Pairs of nodes that correspond to adjacent segments and have at least one track in common are identified at . The pairs of nodes may be identified by the segment engine of the track server . In some implementations the pairs of nodes may also include nodes that correspond to adjacent sequences of segments and have at least one track in common. Where a node can be paired into multiple node pairs the track server may prefer the node pair that appears adjacently in the greatest number of tracks. For example the track server may determine a node that is in multiple node pairs determine the node pair that includes the node that appears in the greatest number of tracks and remove the node pairs from the identified node pairs that do not appear in the greatest number of tracks.

The pairs of nodes are merged to generate parent nodes at . Each pair of nodes may be merged by generating a parent node for the pair of nodes by the segment engine of the track server . The pair of nodes comprises child nodes of the generated parent node. The parent nodes are associated with the tracks associated with their child nodes at . The parent nodes may be associated with the tracks by the segment engine of the track server .

A determination is made as to whether any node pairs that correspond to adjacent segments and that have at least one track in common remain at . The determination may be made by the segment engine of the track server . The node pairs may include merged nodes i.e. parent nodes . If node pairs remain then processing may continue at where the node pairs may be merged. Otherwise the method may end at .

Identifiers of a first track and a second track are received at . The identifiers may be received by the similarity engine of the track server . The identifiers of the first and second track may be received from a user or a track application or . For example a user may wish to receive a similarity score for the first and second tracks.

A first plurality of segments associated with the first track and a second plurality of segments associated with the second track are determined at . The first plurality of segments associated with the first track and the second plurality of segments associated with the second track may be determined by the similarity engine of the track server from the segment storage . For example the first and second plurality of segments may have been computed and stored by the segment engine .

A third plurality of segments based on the first plurality of segments and the second plurality of segments is determined at . The third plurality of segments may be determined by the similarity engine of the track server . In some implementations the third plurality of segments may include segments that are in both the first plurality and second plurality of segments i.e. the intersection of the first and second plurality of segments .

A fourth plurality of segments based on the first and second pluralities of segments is determined at . The fourth plurality of segments may be determined by the similarity engine of the track server . In some implementations the fourth plurality of segments may include segments that are in either the first plurality of segments or the second plurality of segments i.e. the union of the first and second plurality of segments .

A similarity score for the first and second tracks is determined based on the third and fourth pluralities of segments at . The similarity score may be determined by the similarity engine of the track server . In some implementations the similarity score may be the ratio of a total length of the segments in the third plurality of segments to a total length of the segments in the fourth plurality of segments.

The determined similarity score is provided at . The similarity score may be provided by the similarity engine of the track server . The similarity score may be presented to the user who provided the indicators of the first and second tracks.

Numerous other general purpose or special purpose computing system environments or configurations may be used. Examples of well known computing systems environments and or configurations that may be suitable for use include but are not limited to personal computers PCs server computers handheld or laptop devices multiprocessor systems microprocessor based systems network personal computers minicomputers mainframe computers embedded systems distributed computing environments that include any of the above systems or devices and the like.

Computer executable instructions such as program modules being executed by a computer may be used. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. Distributed computing environments may be used where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment program modules and other data may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing aspects described herein includes a computing device such as computing device . In its most basic configuration computing device typically includes at least one processing unit and memory . Depending on the exact configuration and type of computing device memory may be volatile such as random access memory RAM non volatile such as read only memory ROM flash memory etc. or some combination of the two. This most basic configuration is illustrated in by dashed line .

Computing device may have additional features functionality. For example computing device may include additional storage removable and or non removable including but not limited to magnetic or optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage .

Computing device typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by device and includes both volatile and non volatile media removable and non removable media.

Computer storage media include volatile and non volatile and removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Memory removable storage and non removable storage are all examples of computer storage media. Computer storage media include but are not limited to RAM ROM electrically erasable program read only memory EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computing device . Any such computer storage media may be part of computing device .

Computing device may contain communications connection s that allow the device to communicate with other devices. Computing device may also have input device s such as a keyboard mouse pen voice input device touch input device etc. Output device s such as a display speakers printer etc. may also be included. All these devices are well known in the art and need not be discussed at length here.

It should be understood that the various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. Thus the methods and apparatus of the presently disclosed subject matter or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium where when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the presently disclosed subject matter.

Although exemplary implementations may refer to utilizing aspects of the presently disclosed subject matter in the context of one or more stand alone computer systems the subject matter is not so limited but rather may be implemented in connection with any computing environment such as a network or distributed computing environment. Still further aspects of the presently disclosed subject matter may be implemented in or across a plurality of processing chips or devices and storage may similarly be effected across a plurality of devices. Such devices might include personal computers network servers and handheld devices for example.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

