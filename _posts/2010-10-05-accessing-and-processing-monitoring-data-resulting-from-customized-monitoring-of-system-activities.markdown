---

title: Accessing and processing monitoring data resulting from customized monitoring of system activities
abstract: A mechanism for accessing and processing monitoring data resulting from customized monitoring of system activities. A method of embodiments of the invention includes invoking, via a Command-Line Interface (CLI) shell console, a performance monitor at a host computer system to perform monitoring of activities of a plurality of system components of one or more computer systems. The CLI shell console provides an abstraction layer for interfaces and further provides host performance information via a common interface independent of operating systems, monitoring use-cases, monitoring tools, or programming languages employed at the host computer system. The method further includes accessing monitoring data generated from monitoring of the activities by the performance monitor.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09363107&OS=09363107&RS=09363107
owner: Red Hat Israel, Ltd.
number: 09363107
owner_city: Raanana
owner_country: IL
publication_date: 20101005
---
The present application is related to the co filed U.S. patent application Ser. No. 12 898 480 entitled Mechanism for Customized Monitoring of System Activities U.S. patent application Ser. No. 12 898 526 entitled Mechanism for Performing Verification of Template Integrity of Monitoring Templates Used for Customized Monitoring of System Activities and U.S. patent application Ser. No. 12 898 582 entitled Mechanism for Installing Monitoring Activities Utilities Using Universal Performance Monitor which are assigned to the assignee of the present application.

The embodiments of the invention relate generally to system monitoring and more specifically relate for providing a mechanism for accessing and processing monitoring data resulting from customized monitoring of system activities.

Monitoring tools are commonly available for monitoring system resources. However a monitoring tool is limited to monitoring a specific resource e.g. memory capacity of a computer system. With each monitoring tool being predetermined and specific to a particular system resource and its activities the process of system monitoring turns to be much more complicated and even unmanageable when activities relating to a great number of system resources require monitoring and to make matters worse activities of certain system components remain unmonitored due to not having a particular monitoring tool that can monitor those system components. For example depending on a system a user e.g. system administrator may have to use three different monitoring tools to monitor three different component related activities e.g. virtual machine speed central processing unit CPU capacity and memory capacity and yet not have a monitoring tool to monitor network speed. Furthermore these monitoring tools are inflexible in their monitoring tasks because their behavior performance assigned system component etc. are rigidly predefined and unchangeable. Additionally the task of manually accessing and processing monitoring data resulting from various monitoring projects is not only cumbersome to complete but carries the potential of severe miscalculations particularly when some of the monitoring projects can run for several days and produce large amounts of monitoring data over those days.

Embodiments of the invention provide a mechanism for accessing and processing monitoring data resulting from customized monitoring of system activities. A method of embodiments of the invention includes invoking via a Command Line Interface CLI shell console a performance monitor at a host computer system to perform monitoring of activities of a plurality of system components of one or more computer systems. The CLI shell console provides an abstraction layer for interfaces and further provides host performance information via a common interface independent of operating systems monitoring use cases monitoring tools or programming languages employed at the host computer system. The method further includes accessing monitoring data generated from monitoring of the activities by the performance monitor.

The embodiments of the present invention are provided for directly accessing and processing monitoring data resulting from customized monitoring of system activities. In one embodiment a shell console e.g. CLI shell console having an access interface is provided to accept command lines and other relevant monitoring information to allow the user to directly invoke e.g. starting or stopping a performance monitor capable of serving as a single universal monitoring tool facilitating the existing monitoring tools to perform monitoring tasks as defined by monitoring templates. Further in one embodiment a data processing entity is provided as an abstraction data access layer linked to the shell console to allow direct processing of monitoring data that is obtained from monitoring of system activities by first providing a direct access to monitoring data logs that hold the monitoring data.

Once the monitoring data is processed the results obtained from the processed monitoring data may be displayed using the access interface of the shell console. These techniques eliminate the need for manually accessing the stored monitoring data logs and then manually processing monitoring data contained in those data logs. These techniques are particularly useful when a user e.g. system administrator software developer etc. has to deal with a monitoring task that can run continuously for several days and produce monitoring data logs that are full of large amount of monitoring data making it nearly impossible for the user to manually and yet accurately process all that monitoring data. In one embodiment the CLI shell console is used to provide an abstraction layer for other shell consoles and interfaces which is eligible to provide host performance information regardless and independent of the operating system monitoring use cases and monitoring tools employed on the host computer system and represented by a common interface. This is so that any script or application written using any programming language for any shell console can use the same paradigms to access or monitor performance information of any host computer system.

Performance monitor is a customizable monitoring tool that a user e.g. system administrator software developer can customize and use to monitor various system activities as desired or necessitated. Performance monitor represents a monitoring tool to provide a unique ability to monitor any type and or number of system entities and their activities e.g. physical machine activities virtual machine activities . Further the results of these system activities are directed to any location as specified in the relevant monitoring template which may be different from a location specified in another monitoring template or a single location may be specified within the configuration of performance monitor as opposed to in each monitoring template .

In one embodiment performance monitor provides monitoring templates that are capable of being customized to enable the performance monitor to perform system monitoring tasks and other relevant functions in the manner as described in each monitoring template. This customization of the performance monitor includes the ability to consolidate any number of monitoring tools so that the performance monitor can serve as a single universal monitor. For example instead of using three monitoring tools to monitor three different entities e.g. virtual machine memory processor etc. a performance monitor template can be created and executed to have the performance monitor act as a universal monitor using the three monitoring tools to monitor all three such entities. Although as in this case the three existing monitoring tools may still be used by the performance monitor to perform their respective monitoring tasks the user has to handle only the universal monitor i.e. the performance monitor . Similarly performance monitor can be customized to be used to monitor multiple activities e.g. speed capacity etc. of a single system entity e.g. processor or a single e.g. speed or multiple activities e.g. speed capacity of multiple system entities e.g. virtual machine processor etc. . Moreover a monitoring template may be customized to create a new monitoring tool as opposed to using an existing monitoring tool that may not even be provided or supported by the operating system to monitor a new system component a new type of activity of an existing component or in a new manner etc. In one embodiment a verification of template integrity of monitoring templates is provided. These monitoring templates are used for facilitating a performance monitor to serve as a universal monitor to perform customized monitoring of system activities of a computer system such as host machine . Terms like machine device and computer system are used interchangeably throughout this document.

Monitoring template component provides the ability to create run use and store monitoring use case through its monitoring templates to include and mix and match any existing or new monitoring activities. Continuing with the Windows and Linux example monitoring template component enables its monitoring templates to be compatible with for example both Linux and Windows operating systems so that their system activities can be seamlessly monitored according to the rules and requirements of each operating system. Further monitoring templates may be used to specify a system location e.g. repository storage device display device where the results of monitoring system activities are forwarded. In one embodiment each monitoring template includes one or more specific locations for monitoring results of one or more specific system activities or in another embodiment a default location is defined within the configuration of performance monitor itself or by a combination thereof.

Configuration template component allows the user to predefine monitoring configuration in each monitoring template for each use case independently so that each use case can be executed according to a custom configuration as defined by the user. For example the user may choose to define a particular configuration that is compatible with the operating system such as Linux Windows in a monitoring template so that the monitoring template can facilitate the performance monitor to perform its monitoring tasks according to the defined configuration as opposed to a default configuration or a configuration that is the same as another configuration.

Runtime installation and configuration component provides the necessary ability to install and configure remotely any monitoring template utility so that the performance monitor is able to perform new monitoring tasks of one or more monitoring tools that may not exist or be supported by the operating system. In other words runtime installation and configuration component helps create and install a new monitoring tool that does not exist on the machine such as it is not provided by the operating system e.g. Linux installed on that machine . Further the tasks of creating and installing a new monitoring tool may be performed remotely between two or more machines.

Templates synchronization component supports updating and synchronization of any changes made to an existing version of a monitoring template provided by the performance monitor . In one embodiment a storage or repository e.g. template version repository and its location e.g. on a host machine are defined within in one embodiment the configuration of the performance monitor or in another embodiment of each template such that each time a monitoring template is updated e.g. another monitoring activity is added to it monitoring time period is reduced etc. the updated monitoring template is saved at the defined repository and at the time of its use is synchronized with other machines across the board e.g. other machines being used by the user . This way each time a user triggers the use of a monitoring template on a machine the same machine where previously used or installing and or using on another machine the defined repository is accessed for template version verification so that the user gets to load and use the most recent version of the monitoring template.

Application components synchronization component provides updating and synchronization of any configuration changes version updates etc. made to the performance monitor itself. A storage or repository e.g. performance monitor version repository and its location e.g. on a host machine are defined within the configuration of the performance monitor . Any updates made to the performance monitor are communicated across the board to each machine that loads or uses the performance monitor . It is to be noted that in this case the update and synchronization refers to the any updates e.g. adding a new component made to the performance monitor itself as opposed to its monitoring templates. In other words machine A and machine B use the same version of performance monitor but each may use an entirely different set of monitoring templates such as according to their separate monitoring needs . In case of an update to the performance monitor that update is communicated to both machines A and B so each machine can have the most recent version of the performance monitor .

Template integrity component relates to integrity and security of monitoring templates. As a monitoring template is created a hash code for that monitoring template is calculated and saved. When the same monitoring template is loaded to be used a hash code of the monitoring template is recalculated and compared to the hash code previously calculated and saved. If the two hash codes match the monitoring template is allowed to be loaded and used. If the two hash codes do not match the monitoring template is considered corrupt and the user is notified of its corruption.

Template runtime hardware discovering and network device counters update component hardware discovery component automatically detects new hardware setting and enables performance monitor to adjust according to the new or available hardware setting. For example a monitoring template has embedded in it hardware information regarding a network interface of a first device but when it is executed on a second device having a different network interface hardware discovery component automatically and in runtime searches and investigates the network interface of the second device and accordingly adjusts the performance monitor making it compatible with the change. For instance in case of a Windows based system at the time of creating a monitoring template the installed hardware devices of a first machine where the monitoring template is created and executed are known and defined in the monitoring template but when this monitoring template is installed on a second machine the new devices of this second machine are not likely to be defined in the monitoring template. In this case performance monitor may use its hardware discovery component to automatically and in runtime discover the devices of the second system and update the information in the monitoring template without any interruption. In case of network related devices hardware discovery component investigates the new devices and updates counter at runtime without interrupting the monitoring use case associated with the monitoring template.

Similarly using virtual machine template A two monitoring tools storage performance tool and input output I O performance tool are combined or consolidated as virtual machine monitoring cases set A to serves as a monitoring set to monitor system activities of virtual machine storage performance and I O performance of virtual machine . Now let us suppose the user wishes to continue to monitor virtual machine storage performance of virtual machine but this time it is to be done while checking the usability of virtual machine . For performing these monitoring tasks the user creates and executes via performance monitor another monitoring template such as virtual machine template B to combine storage performance tool and usability check tool to monitor virtual machine storage performance and the virtual machine s usability check respectively.

Stated differently in one embodiment using e.g. by creating and executing various monitoring templates the monitoring capacities of various monitoring tools are absorbed by consolidating these monitoring tools in various combinations. For example as illustrated a monitoring template is generated to contain the capacity of one or more monitoring tools by consolidating these monitoring tools into a single virtual monitoring tool to perform monitoring tasks e.g. monitoring system activities of these monitoring tools respectively using performance monitor . These monitoring templates are then executed to have performance monitor serve or act as a universal or virtual monitoring tool through consolidated monitoring tools to facilitate the various monitoring tools to perform their corresponding monitoring tasks .

In one embodiment the data access layer includes a direct access module to directly access the monitoring data such as in the form of monitoring data logs that is generated from monitoring cases being performed by the performance monitor . Once the monitoring data is accessed it is then analyzed by the analysis module as requested by a user or based on predetermined criteria disclosed potential uses of the monitoring data etc. The result collection module of the data access layer is then used to collect results of the analyzed monitoring data and provides such results to the user via the access API of the CLI shell console . It is contemplated that the CLI shell console may differ according to the operating system software framework programming language etc. employed at the host machine and or the remote machine . For example the CLI shell console may include a PowerShell console to work with Microsoft Windows while a Python shell console may be used if the operating system is Linux etc. Further each of the two machines may include a server computer system or a client computer system and be in communication with each other over a network such as a Wide Area Network WAN a Local Area Network LAN the Internet or the like.

In one embodiment upon receiving the relevant monitoring information and the invocation command over a network and via the performance monitor interface the performance monitor initiates these monitoring cases at the computer devices . Further a monitoring data log of the monitoring data is prepared and stored at a storage device that may be connected to the computer device employing the performance monitor .

In one embodiment at block relevant monitoring information e.g. a monitoring case a monitoring configuration a monitoring destination etc. is prepared. An access interface of the CLI shell console is accessed to invocate e.g. start the performance monitor at block . At block an invocation command e.g. start command and the relevant monitoring information are provided through the access interface of the CLI shell console to the performance monitor through its performance monitor interface over a network. At block the performance monitor receives the start command and the monitoring information. At block in response to the start command the performance monitor initiates the requested monitoring cases at a number of specified computer systems based on the monitoring information. At block data relating to or obtained during the performance of monitoring cases is stored at a storage device coupled with the host computer system employing the performance monitor.

Although a monitoring data log having the monitoring data relating to the stopped monitoring case may be saved at a storage device in one embodiment using a direct access module of the data access layer the monitoring data log is directly accessed at a direct access storage e.g. temporary computer memory Random Access Memory RAM etc. . Using an analysis module of the data access layer the monitoring data is then analyzed as requested by a user or based on predetermined criteria a future use plan for the monitoring data etc. Then in one embodiment using a result collection module of the data access layer a data collection process is initiated to collect results obtained from monitoring data analysis. The collected results are then provided to the user using the access interface of the CLI shell console .

At block a stop request for stopping an on going monitoring case is placed by a user using an access interface of the CLI shell console. The stop request includes a stop command as well as certain relevant monitoring information such as a monitoring destination e.g. IP address of the computer device where the monitoring case is being performed monitoring case monitoring case e.g. monitoring case name credentials monitoring configuration e.g. monitoring template etc. At block the stop request is communicated to the performance monitor over a network and via a performance monitor interface associated with the performance monitor. At block in response to the stop request the performance monitor stops the particular monitoring case.

Although a monitoring data log having the monitoring data relating to the stopped monitoring case may be saved at a storage device in one embodiment at block using a direct access module of the data access layer the monitoring data log is directly accessed at a direct access storage. At block using an analysis module of the data access layer the monitoring data is analyzed as requested by a user or based on predetermined criteria a future use plan for the monitoring data etc. Then at block in one embodiment using a result collection module of the data access layer a data collection process is initiated to collect results obtained from monitoring data analysis. The collected results are then provided to the user using the access interface of the CLI shell console at block .

The exemplary computer system includes a processing device a main memory e.g. read only memory ROM flash memory RAM dynamic RAM DRAM such as synchronous DRAM SDRAM DRAM RDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a secondary memory e.g. a data storage device in the form of a drive unit which may include fixed or removable machine accessible or computer readable storage medium which communicate with each other via a bus .

Processing device represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processing device may be complex instruction set computing CISC microprocessor reduced instruction set computer RISC microprocessor very long instruction word VLIW microprocessor or processor implementing other instruction sets or processors implementing a combination of instruction sets. Processing device may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. Processing device is configured to execute the processing logic for performing the operations and methods discussed herein.

The computer system may further include a network interface device . The computer system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT connected to the computer system through a graphics port and graphics chipset an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The data storage device may include a machine accessible storage medium or a computer readable storage medium on which is stored one or more sets of instructions e.g. performance monitor API CLI shell console and data access layer component embodying any one or more of the methodologies or functions described herein. The performance monitor API CLI shell console and data access layer component may also reside completely or at least partially within the main memory e.g. performance monitor API CLI shell console and data access layer component instructions and or within the processing device e.g. performance monitor API CLI shell console and data access layer component processing logic during execution thereof by the computer system the main memory and the processing device also constituting machine readable storage media. Further for example the performance monitor API CLI shell console and data access layer component instructions may be transmitted or received over a network via the network interface device .

The machine readable storage medium may also be used to store the performance monitor API CLI shell console and data access layer component instructions persistently. While the machine accessible storage medium is shown in an exemplary embodiment to be a single medium the term machine accessible storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine accessible storage medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instruction for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term machine accessible storage medium shall accordingly be taken to include but not be limited to solid state memories and optical and magnetic media.

Performance monitor API CLI shell console and data access layer component modules components and other features described herein for example in relation to can be implemented as discrete hardware components or integrated in the functionality of hardware components such as ASICS FPGAs DSPs or similar devices. In addition the modules can be implemented as firmware or functional circuitry within hardware devices. Further the modules can be implemented in any combination hardware devices and software components.

In the above description numerous details are set forth. It will be apparent however to one skilled in the art that the present invention may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present invention.

Some portions of the detailed descriptions above are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as preparing accessing invoking starting stopping saving storing receiving initiating monitoring placing communicating accessing analyzing collecting providing facilitating or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a machine readable storage medium such as but not limited to any type of disk including floppy disks optical disks magnetic optical disks ROMs compact disk ROMs CD ROMs RAMs erasable programmable ROMs EPROMs electrically EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions each coupled to a computer system bus.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear as set forth in the description below. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.

The present invention may be provided as a computer program product or software that may include a machine readable medium having stored thereon instructions which may be used to program a computer system or other electronic devices to perform a process according to the present invention. A machine readable medium includes any mechanism for storing or transmitting information in a form readable by a machine e.g. a computer . For example a machine readable e.g. computer readable medium includes a machine e.g. a computer readable storage medium e.g. ROM RAM magnetic disk storage media optical storage media flash memory devices etc. a machine e.g. computer readable transmission medium non propagating electrical optical or acoustical signals etc.

Whereas many alterations and modifications of the present invention will no doubt become apparent to a person of ordinary skill in the art after having read the foregoing description it is to be understood that any particular embodiment shown and described by way of illustration is in no way intended to be considered limiting. Therefore references to details of various embodiments are not intended to limit the scope of the claims which in themselves recite only those features regarded as the invention.

