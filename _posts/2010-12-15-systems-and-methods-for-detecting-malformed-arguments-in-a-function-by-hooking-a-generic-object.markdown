---

title: Systems and methods for detecting malformed arguments in a function by hooking a generic object
abstract: A computer-implemented method to detect malformed arguments in a function by hooking a generic object, is described. A predetermined argument to monitor is identified. An activity associated with a calling of a function to produce a called out function is detected. The called out function is mapped to a class identification of an object. An argument in the called out function is compared with the predetermined argument. When a match exists, a virtual method table identification is recorded for the called out function. The match between the argument in the called out function and the predetermined argument is reported.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08429744&OS=08429744&RS=08429744
owner: Symantec Corporation
number: 08429744
owner_city: Mountain View
owner_country: US
publication_date: 20101215
---
The use of computer systems and computer related technologies continues to increase at a rapid pace. This increased use of computer systems has influenced the advances made to computer related technologies. Indeed computer systems have increasingly become an integral part of the business world and the activities of individual consumers. Computer systems may be used to carry out several business industry and academic endeavors. The wide spread use of computers has been accelerated by the increased use of computer networks including the Internet.

Many businesses use one or more computer networks to communicate and share data between the various computers connected to the networks. The productivity and efficiency of employees often requires human and computer interaction. Users of computer technologies continue to demand that the efficiency of these technologies increase. Improving the efficiency of computer technologies is important to anyone who uses and relies on computers.

Computing systems may be capable of accessing information across a network connection. For example a computing system may access information from the World Wide Web. This information may be accessed by using a web browser to locate a desired website that includes the information. Developers of malware however may engage a script attack that affects the functionality of the web browser or other functions of the computing system. These attacks may be result of a malformed argument being called into a function. As a result benefits may be realized by providing system and methods to detect malformed arguments in a function by hooking a generic object.

According to at least one embodiment a computer implemented method to detect malformed arguments in a function by hooking a generic object is described. A predetermined argument to monitor is identified. An activity associated with a calling of a function to produce a called out function is detected. The called out function is mapped to a class identification of an object. An argument in the called out function is compared with the predetermined argument. When a match exists a virtual method table identification is recorded for the called out function. The match between the argument in the called out function and the predetermined argument is reported.

In one embodiment the predetermined argument includes a no operation performed NOP sled. In one embodiment the predetermined argument includes shellcode. The called out function may be a JavaScript function. In one example the JavaScript function may include at least one of the following functions Unescape Eval CharCodeAt Split or Char. The called out function may be an invoke function.

In one configuration an identity of an object and a function associated with the called out function may be recorded. The called out function may be mapped to a class identification of an object that called the function. In one embodiment the object that called the function may include an IDispatch interface.

A computing device configured to detect malformed arguments in a function by hooking a generic object is also described. The device may include a processor and memory in electronic communication with the processor. The device may further include a protection application configured to identify a predetermined argument to monitor and detect an activity associated with a calling of a function to produce a called out function. The protection application may be configured to map the called out function to a class identification of an object and compare an argument in the called out function with the predetermined argument. When a match exists the protection application may be configured to record a virtual method table identification for the called out function and report the match between the argument in the called out function and the predetermined argument.

A computer program product for detecting malformed arguments in a function by hooking a generic object is also described. The computer program product including a computer readable medium having instructions thereon. The instructions including code programmed to identify a predetermined argument to monitor and code programmed to detect an activity associated with a calling of a function to produce a called out function. The instructions may further include ode programmed to map the called out function to a class identification of an object and code programmed to compare an argument in the called out function with the predetermined argument. When a match exists the instructions may further include code programmed to record a virtual method table identification for the called out function and code programmed to report the match between the argument in the called out function and the predetermined argument.

Features from any of the above mentioned embodiments may be used in combination with one another in accordance with the general principles described herein. These and other embodiments features and advantages will be more fully understood upon reading the following detailed description in conjunction with the accompanying drawings and claims.

While the embodiments described herein are susceptible to various modifications and alternative forms specific embodiments have been shown by way of example in the drawings and will be described in detail herein. However the exemplary embodiments described herein are not intended to be limited to the particular forms disclosed. Rather the instant disclosure covers all modifications equivalents and alternatives falling within the scope of the appended claims.

In computer technology operation code opcode may be the portion of a machine language instruction that specifies the operation to be performed. Opcodes may be found in byte codes and other representations intended for a software interpreter. These software based instruction sets i.e. opcode sets may employ higher level data types and operations than most hardware counterparts. For example an opcode set may be provided in the JavaScript language. JavaScript may be used to write functions that are embedded in or included from hyper text markup language HTML pages that interact with Document Object Model DOM of the page. A web browser is a common host environment for JavaScript. Web browsers may user a public application programming interface API to create host objects responsible for reflecting the DOM into JavaScript.

JavaScript may provide the potential for malicious authors to deliver scripts to run on a client computing device via the web. Many browser exploits include no operation performed NOP sleds in these scripts that are delivered to client computing devices via the web. A NOP may be assembly language instructions sequence of programming language statements or computer protocol commands that effectively do nothing at all. In some instances a NOP opcode may be used to form a NOP sled which may allow code to execute when the exact value of the instruction pointer is indeterminate e.g. when a buffer overflow causes a function s return address on the stack to be overwritten . In other words a NOP sled may be a sequence of NOP instructions meant to slide a central processing unit s CPU s instruction execution flow to its final desired destination. As a result NOP sleds may be used in buffer overflows and similar exploits designed to take over a program s execution path.

Objects in web browsers may be attacked by passing malformed arguments into functions. In one example a malformed argument may include NOP sleds followed by shellcode. Shellcode may be a small piece of code used as the payload in the exploitation of a software vulnerability. In one configuration the NOP sleds the shellcode or both may be detected. Currently detection systems explicitly hook the object function combination that is to be monitored. As a result the current detection systems require a coding effort for each new object function combination to be monitored. In addition the current detection systems also require prior knowledge of the attack in order to know which object function combination to monitor. For example an object function combination may be SuperBuddy LinkSBlcons. In order to detect an attack using the current detection systems the SuperBuddy object s LinkSBlcons function must be hooked and checked for a NOP sled or shellcode. As an example the NOP sled may be 0c0c0c0c.

The present systems and methods may check for a previously determined set of NOP sleds at a key gateway through which object function combinations are called. At this point arguments to the function may be checked. By checking for a set of NOP sleds at the key gateway obfuscated script bode may not evade detection and new attacks on objects may be identified. As stated above current detection systems hook specific object function combinations and attempt to identify a specific subset of arguments in relation to a known attack.

In one configuration the client device may include a protection application that may protect the client device from an attack originating from an attack source A B C. In one example the protection application may include a detection module that may detect an attack on the client device . The client device may communicate information regarding a detected attack to the server . The server may then analyze the information regarding the attack to determine if the attack is malicious or if the attack has been improperly identified by the client device as an attack i.e. a false positive . In addition an attacked may be analyzed to identify an object function combination that has been attacked.

In one embodiment the identification module may identify a previously determined set of NOP sleds. As previously stated the present systems and methods may apply a check of previously determined sets of NOP sleds at a key gateway explained below through which all functions for all objects may be called. In one example an object may be created depending on the JavaScript API that is called. For example ActiveXObjectFncObj may be an interface for an object. When any ActiveXObject is created using new ActiveXObject it may be hooked through an ActiveXObjectFncObj interface in JavaScript. In another example a CoCreateInstance function may be used to create an object. As another example CoGetClassObject may be used to create an object.

In one embodiment the function calling detection module may detect when a particular function has been called. For example when an object is created using any of the above mentioned interfaces the function calling detection module may detect when any invoke functions are called on these interfaces for the objects. Parameters or arguments fed to the invoke function may then be checked in accordance with the present systems and methods. In one example if the ActiveXObjectFncObj is used the present systems and methods may also detect objects that are created through an object tag in HTML.

As an example the previously determined NOP sled may be 0c0c0c0c. The identification module may identify this NOP sled as being in an argument of any function of any object. The function calling detection module may identify when an invoke function is called. In one example IDispatch may be the object that calls the invoke function. From the IDispatch interface the mapping module may map to a class identification ID . The comparison module may compare the class ID to the interface that created the object e.g. ActiveXObjectFncObj CoCreateInstance and CoGetClassObject . If the class ID matches the interface that created the object an attempt is made to match the argument in the invoke function to the previously determined NOP sled in this example 0c0c0c0c . If the comparison module determines that the class ID matches the previously determined NOP sled a virtual method table vtable function ID is recorded. The reporting module may report a match of 0c0c0c0c on the class ID for the vtable function ID. As a result the present systems and methods may monitor for 0c0c0c0c as an example and other patterns passed to any function of any object. When a match occurs the reporting module may report the identity of the object function combination that is attacked.

The present systems and methods may detect additional types of NOP sleds. For example the NOP sleds the detection module may detect may include but are not limited to the following 

In one configuration the first time object function combinations are called on a unique user machine an object.function.arg may calculate metrics for the argument for features such as but not limited to length and content i.e. string or binary . In one example the reporting module may report back this information so that across a large user base anomalies may be identified in arguments submitted in any function of any object.

In one example a predetermined argument to monitor may be identified . The predetermined argument may be a NOP sled. An activity associated with a calling of a function may be detected . In one configuration the called function may be mapped to a class ID of an object. An argument in the called function may be compared with the predetermined argument. In one configuration a determination may be made as to whether a match exists between the argument in the called function and the predetermined argument. If it is determined that a match does not exist the method may return to detect an activity associated with a calling of a function. If however it is determined that a match does exist a vtable ID may be recorded for the function. In addition the match between the argument in the called function and the predetermined argument on the class ID for the vtable ID may be reported .

In one embodiment a NOP sled to monitor may be identified . An activity associated with a calling of an invoke function may be detected . In one configuration the invoke function may be mapped to a class ID of an object. A NOP sled in the invoke function may be compared with the predetermined NOP sled. In one example a determination may be made as to whether a match exists between the NOP sled in the invoke function and the predetermined NOP sled. If it is determined that a match does not exist the method may return to detect an activity associated with a calling of an invoke function. If however it is determined that a match does exist a vtable ID may be recorded for the function. In addition the match between the NOP sled in the called functions and the predetermined NOP sled on the class ID for the vtable ID may be reported .

Bus allows data communication between central processor and system memory which may include read only memory ROM or flash memory neither shown and random access memory RAM not shown as previously noted. The RAM is generally the main memory into which the operating system and application programs are loaded. The ROM or flash memory can contain among other code the Basic Input Output system BIOS which controls basic hardware operation such as the interaction with peripheral components or devices. For example the protection application to implement the present systems and methods may be stored within the system memory . Applications resident with computer system are generally stored on and accessed via a computer readable medium such as a hard disk drive e.g. fixed disk an optical drive e.g. optical drive a floppy disk unit or other storage medium. Additionally applications can be in the form of electronic signals modulated in accordance with the application and data communication technology when accessed via network modem or interface .

Storage interface as with the other storage interfaces of computer system can connect to a standard computer readable medium for storage and or retrieval of information such as a fixed disk drive . Fixed disk drive may be a part of computer system or may be separate and accessed through other interface systems. Modem may provide a direct connection to a remote server via a telephone link or to the Internet via an internet service provider ISP . Network interface may provide a direct connection to a remote server via a direct network link to the Internet via a POP point of presence . Network interface may provide such connection using wireless techniques including digital cellular telephone connection Cellular Digital Packet Data CDPD connection digital satellite data connection or the like.

Many other devices or subsystems not shown may be connected in a similar manner e.g. document scanners digital cameras and so on . Conversely all of the devices shown in need not be present to practice the present systems and methods. The devices and subsystems can be interconnected in different ways from that shown in . The operation of a computer system such as that shown in is readily known in the art and is not discussed in detail in this application. Code to implement the present disclosure can be stored in computer readable medium such as one or more of system memory fixed disk optical disk or floppy disk . The operating system provided on computer system may be MS DOS MS WINDOWS OS 2 UNIX Linux or another known operating system.

Moreover regarding the signals described herein those skilled in the art will recognize that a signal can be directly transmitted from a first block to a second block or a signal can be modified e.g. amplified attenuated delayed latched buffered inverted filtered or otherwise modified between the blocks. Although the signals of the above described embodiment are characterized as transmitted from one block to the next other embodiments of the present systems and methods may include modified signals in place of such directly transmitted signals as long as the informational and or functional aspect of the signal is transmitted between blocks. To some extent a signal input at a second block can be conceptualized as a second signal derived from a first signal output from a first block due to physical limitations of the circuitry involved e.g. there will inevitably be some attenuation and delay . Therefore as used herein a second signal derived from a first signal includes the first signal or any modifications to the first signal whether due to circuit limitations or due to passage through other circuit elements which do not change the informational and or final functional aspect of the first signal.

With reference to computer system modem network interface or some other method can be used to provide connectivity from each of client computer systems and to network . Client systems and are able to access information on storage server A or B using for example a web browser or other client software not shown . Such a client allows client systems and to access data hosted by storage server A or B or one of storage devices A N B N N or intelligent storage array . depicts the use of a network such as the Internet for exchanging data but the present systems and methods are not limited to the Internet or any particular network based environment.

While the foregoing disclosure sets forth various embodiments using specific block diagrams flowcharts and examples each block diagram component flowchart step operation and or component described and or illustrated herein may be implemented individually and or collectively using a wide range of hardware software or firmware or any combination thereof configurations. In addition any disclosure of components contained within other components should be considered exemplary in nature since many other architectures can be implemented to achieve the same functionality.

The process parameters and sequence of steps described and or illustrated herein are given by way of example only and can be varied as desired. For example while the steps illustrated and or described herein may be shown or discussed in a particular order these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.

Furthermore while various embodiments have been described and or illustrated herein in the context of fully functional computing systems one or more of these exemplary embodiments may be distributed as a program product in a variety of forms regardless of the particular type of computer readable media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script batch or other executable files that may be stored on a computer readable storage medium or in a computing system. In some embodiments these software modules may configure a computing system to perform one or more of the exemplary embodiments disclosed herein.

The foregoing description for purpose of explanation has been described with reference to specific embodiments. However the illustrative discussions above are not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations are possible in view of the above teachings. The embodiments were chosen and described in order to best explain the principles of the present systems and methods and their practical applications to thereby enable others skilled in the art to best utilize the present systems and methods and various embodiments with various modifications as may be suited to the particular use contemplated.

Unless otherwise noted the terms a or an as used in the specification and claims are to be construed as meaning at least one of In addition for ease of use the words including and having as used in the specification and claims are interchangeable with and have the same meaning as the word comprising. 

