---

title: System and method for backend advertisement conversion
abstract: A system for backend conversion attribution of an advertisement served to a user device. The advertisement server provides an advertisement to the user device. The advertisement server receives user information from the user device. The advertisement server stores attributable event information and the user information into an attributable event record in a data store. Based on a user event, a conversion server receives conversion information and the user information from the user device. The conversion server stores the conversion information and the user information into a conversion record in the data store. An attribution server matches the attributable event record with the conversion record.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08689136&OS=08689136&RS=08689136
owner: Yahoo! Inc.
number: 08689136
owner_city: Sunnyvale
owner_country: US
publication_date: 20100203
---
Traditionally companies that serve web based advertisements generated revenue based on the number of times an advertisement is shown. Tracking the number of times an advertisement is served is a fairly straight forward process. However this does not necessarily correspond to the value an advertiser receives for the money spent. As such another method was developed that related revenue to the number of times that the advertisement was clicked. This system was more complex. However the action of clicking was recognized at the time the advertisement was shown. Therefore while tracking the click required additional processing the clicking was closely tied to the advertisement and could be easily accommodated due to the sequential and synchronous nature.

More recently it has been recognized that advertisements that do not immediately produce a click still may have additional value as user may still see the advertisement and visit the advertiser s website at a later time. Further advertisements that are clicked on still only loosely correspond to the value received by the advertiser. For example a click on an advertisement does not necessarily mean that the user will purchase anything from the user.

Accordingly it can be seen that there is a need for an improved system and method for attributing conversion events to advertisements.

In satisfying the drawbacks and other limitations of the related art the present application provides a system and method for backend advertisement conversion.

The system may include an advertisement server a conversion server an attribution server and a data store. The advertisement server provides an advertisement to the user device. The advertisement server receives user information from the user device. The advertisement server stores attributable event information and the user information into an attributable event record in a data store. Based on a user event a conversion server receives conversion information and the user information from the user device. The conversion server stores the conversion information and the user information into a conversion record in the data store. An attribution server matches the attributable event record with the conversion record.

Further objects features and advantages of this application will become readily apparent to persons skilled in the art after a review of the following description with reference to the drawings and claims that are appended to and form a part of this specification.

To more closely correlate the cost of an advisement with the value received by the advertiser systems can relate an event attributable event such as the showing of an advertisement an impression with an action later taken by the user a conversion . An attributable event may be for example impression click interaction with ad mouse over a particular part of the ad etc. Each prior event can have an associated value assigned by the system using a mathematical model. The conversion may for example take the form of visiting the advertiser s web page signing up for a promotion or purchasing an item. The conversion event can be matched to single or multiple attributable events e.g. user actions occurring prior to the conversion event . The advertiser may include a pixel a small routine on their page that is run when the conversion event occurs. The pixel may notify the system that the conversion event has occurred. Once the system has received notification of the conversion event the conversion event may be paired with an attributable event such as an impression a particular serving display of an advertisement that may have attributed to the conversion. The matching of the conversion event to the impression is called attribution.

One way of tracking conversions is to store the user and attributable event information in a cookie on the user s system. In this scenario the cookie could be read at the time of conversion by the advertisement server to perform attribution. However storing the attributable event information in a cookie has certain disadvantages. The size of the cookie is one concern. If the attributable event is tracked over a 30 day period or longer the cookie size may become quite substantial. In addition the information in the cookie would need to be accessed and transferred to the advertisement server in real time during the conversion event. This may cause slow response times and affect the user experience. In addition roughly 40 of users clear cookies stored on their system within a month. Further this scenario is limited in architecture such that the advertisement server would need to be involved in both the attributable event and conversion. The advertisement server would write to the cookie when the advertisement is served. Because of domain access restrictions the advertisement server would also need to access the cookie during attribution. The domain that writes the cookie is the only domain that can retrieve the cookie. One way to avoid issues associate with storing the attributable event information in a cookie is to track the attributable event information using a back end system with a data store.

This also facilitates high value attributions. For example it takes much longer for a user to make a decision on a bigger purchase. A user would typically take more time to decide to buy a house or a car than a cup of coffee. Therefore a longer look back period would be required. If this data is stored in a cookie the system would need to transfer a significant amount of data thereby slowing the response time and degrading the user experience.

One example is provided in the system of . The user device is operated by a consumer to access information for example browsing web content over the internet . The web content may be accessed by a web browser for example INTERNET EXPLORER FIREFOX or other similar web browser. Alternatively the web content may be accessed by an application specific software program for example AMERICA ONLINE or other custom applications. Further the user device may be any web enabled device including a computer PDA mobile phone or similar electronic device.

The user device may access the content server over an internet connection . The content server may provide information about a specific subject and include advertisements related to that subject. For example a web page that has information about vehicles may indicate that the user may be a good candidate to see an advertisement about vehicles. As such the content server may include a module in the web page retrieved by the user device that displays an advertisement. The user device downloads content from the content server often in the form of a web page. The web page may be written in HTML. Alternatively the page may be generated based on input from the user device . When the web page is generated by the content server a routine is run on the server that retrieves and formats information based on the user input. This is called server side software because the routine is run by the server. One example is a search engine where the user query is used to identify a list of web pages that match the query. The list may then be formatted in HTML and provided to the browser for display to the user. The web page may also include software that is to be run on the user device . The software that runs on the user device is called client side software for example JAVA or ASP.

The web page displayed on the user device may request an advertisement from an advertisement server over the Internet connection . The advertisement server may provide the advertisement to the user device over the Internet connection . Further the advertisement server may request user information from the user device . The user information may include a user identification user ID . The user information may be stored on the user device as a cookie. The user ID can be the Yahoo user ID a generated ID the user IP address the mac address browser version screen resolution language setting or a combination of some or all of the aforementioned data.

Additionally the user information may be provided to the advertisement server over the Internet connection . As such the advertisement server may store the user information into a data store . The advertisement server may store the user information along with attributable event information corresponding to the advertisement served to the user device . In one example the user information and attributable event information may be stored in an attributable event record. The attributable event information may include the advertiser the product being advertised a particular advertisement identification an advertisement campaign an advertisement campaign identification a discount or special offer information or other similar advertisement information. The user information and or the attributable event information may be indexed in the data store by the user ID. In another implementation the user information and or the attributable event information may be indexed in the data store by a time stamp. The data store may be a database that is stored on one or more storage devices e.g. hard drives optical drives static memory raid arrays etc. . For example the data store may be a relational database a hierarchical database an object oriented database or a flat file format. Further the data store may be a database that is stored in a backend server remote from the user device . The data store may be an indexed file such as Tfile format . The data store is separate and independent from a cookie stored on the user device. Further the data store may be controlled by the entity that owns the advertisement server and stored on hardware of that entity. Accordingly the data store may be located in a hosted environment for example on a server accessed through backend network separate from the internet.

Subsequently the user may take certain actions based on the advertisement that was served by the advertisement server . Such actions may include clicking on an advertisement visiting a web page filing a web form e.g. taking a survey joining an email list etc. or other similar event. In one example the user may utilize the user device to connect to an advertiser web server over the Internet connection . As such the user device may request a web page from the advertiser web server . In a particular implementation the user may purchase an item through a web based store front provided to the user device by the advertisement web server over the Internet connection . The purchase may be performed for example by clicking a button on the web page displayed on the user device . This action may be construed as a conversion event. Accordingly the advertiser web server may download a pixel to the user device that is processed with the web page. A pixel may be a client side routine that is triggered when the conversion event happens. By way of example the conversion may be clicking on an advertisement filling in a form pushing a button visiting a web page or other similar events.

In the scenario discussed the pixel may be triggered when the button is clicked for purchasing the item or alternatively after the page returns a credit card authorization. The client side routine on the user device would contact a conversion server over the Internet connection . As such the user device may provide user information e.g. user ID along with conversion information to the conversion server over the Internet connection . The conversion information may include the advertiser the product being purchased the price of the product any discount or special offer in the case of the purchase conversion event. Alternately the conversion information may include the type of conversion event e.g. visiting a web page purchasing an item filling in a form etc. and related information to the particular conversion type.

The conversion server stores the user information and or the conversion information into the data store . For example the conversion server may store the conversion information together with the user information in a conversion record. The user information for example the user ID may be retrieved from a cookie on the user system. If the user information is not stored in the cookie or the cookie has been deleted the user information may be generated and may be stored in a cookie on the user device . In one implementation the conversion information may be indexed by the user information. Alternatively the user information and conversion information may be stored based on a time stamp.

This architecture allows one data path for attributable event information being provided to the data store through the advertisement server and a second separate data path for the conversion information being provided to the data store through the conversion server . Further in this implementation the content provider server the advertisement server the advertiser s web server and the conversion server may all have different domains and operate independently. As a result the attributable event information and conversion information are both stored in the data store . Accordingly the conversion information still has to be matched with the attributable event information to attribute a particular attributable event to the conversion event. As such a separate attribution server may be provided. The attribution server independently and asynchronously matches the conversion information to the attributable event information. Very large amounts of data need to be analyzed in order to match conversion events to the attributable event provided to the particular user. Accordingly the attribution server may be implemented on a distributed computing platform such as a grid computing system.

For example the conversion attribution may be performed on a grid computing system in a Hadoop environment. In this information age data is essential for understanding customer behaviors and for making business decisions. The amount of data collected may be in the scale of terabytes or peta bytes. As such there is a huge challenge in processing such a large amount of data on a daily basis.

Developers can leverage a parallel computing system for the processing of large data applications. Hadoop is an open source java based high performance parallel computing infrastructure that utilizes thousands of commodity PCs to produce significant amount of computing power. Map reduce is the common program style used for code development in the Hadoop system. However non map reduce programs may also be used. It is also a software framework introduced by GOGGLE Inc. to support parallel computing over large data sets on clusters of computers.

Based on the described architecture using a back end data system different domains may share the same user information advertisement information and or conversion information. The attributable event information is provided to the data store through a separate path than the conversion information. Further at the same time the advertisement server may have a different domain than the conversion server. This allows business logic to be implemented separately on heterogeneous advertisement and conversion systems. While many processes may be implemented for matching the conversion information to the attributable event information particular implementations are discussed in more detail later.

Now referring to a method is provided for serving an advertisement. In block a web page is requested. For example a user device may request a web page from a content provider. In block an advertisement may be requested. For example the web page may include client side code to request an advertisement from an advertisement server. User information may then be provided as denoted by block . For example the user device may then provide user information to the advertisement server. The user information and the attributable event information may be stored in a data store as denoted by block . For example the advertisement server may receive the user information such as a user ID from the user device and match the user ID with attributable event information. Further the advertisement server may store the attributable event information along with the user information in a data store. An advertisement may then be served to the user as denoted by block . In block the advertisement may be displayed to the user. For example the advertisement server may provide the advertisement to the user device and the user device may display the advertisement to the user.

Now referring to a method of converting an advertisement is provided. In block a web page is requested. A conversion event is then identified as denoted by block . The conversion event may be identified by a pixel such as client side code that is downloaded to the user device when the web page was requested. The conversion event may be triggered by visiting the web page filling in a form purchasing an item or other similar event. Conversion information is then sent to the conversion server as denoted by block . For example the client side code when triggered could send information identifying the type of conversion event including information related to the conversion event to a conversion server. For example if the conversion event is a purchase the conversion information may include the item purchased the price any special offer or other similar information.

In another example if the conversion event is filling out a form the form information may be provided within the conversion information. In block user information is also sent to the conversion server. The user information may include a user ID that can later be used to link the conversion event to attributable event information for advertisements that were previously served to the user. The user information and the conversion information may be stored in the data store as denoted by block . For example the conversion server may store the user information and conversion information on the data store into time coded buckets or simply stored by time stamp. Accordingly the conversion information may be matched to attributable event information in an asynchronous method performed by an independent system that has access to the data store.

Now referring to a method of attributing a conversion to an attributable event of an advertisement is provided. In block conversion information is accessed for example by an attribution server. Attributable event information is then accessed as denoted by block . As such the attribution server may match the conversion information to the attributable event information based on the various parameters such as the user information a look back period and a maximum number of conversions per attributable event. In block the look back period is limited. For example the attribution server may access the conversion information and limit its analysis for determining a matching attributable event to a specific time period prior to the time of the conversion event. Within the given look back period it is determined if the conversion matches each record of attributable event information. In block the attribution server may match the conversion information to the attributable event information based on the user information for example based on the user ID. Further the number of conversions attributed to a particular attributable event is limited to a maximum number as denoted by block . Accordingly even if it is determined that a conversion matches the correct criteria for an attributable event only a maximum number of conversions may be attributed to a particular attributable event.

The conversion information may be matched to the attributable event information based on an advertisement identification the user identification the advertiser the product the advertisement campaign or other similar information. Further the conversion information may be matched to the attributable event information based on a combination of the user information the attributable event information and or the conversion information.

The method for serving the advertisement the method for converting an advertisement and the method of attributing the conversion to an advertisement may all happen independently for example by different servers processors or threads. Further these methods may be performed asynchronously and or simultaneously.

One implementation of the attribution server is provided in . The data store includes attributable event records and conversion records that may be accessed by the attribution server . The attribution server may be implemented on a grid computing system for example in a Hadoop environment. As denoted by block the incoming attributable event records from the data store are ordered and bucketed according to timestamp. This may occur independently and asynchronously with both the advertisement serving and the conversion identification. The attributable event records may be retrieved from the data store at predetermined time intervals for example every 5 minutes. Similarly the conversion records may be retrieved by the attribution server from the data store at predetermined time intervals for example every 5 minutes. However the raw conversion information cannot be joined with the attributable event information by timestamp because when the conversion happens the system does not know when in the past any related attributable events could have served. Therefore the conversion events may be matched to the attributable event information by joining the attributable event records to the conversion records based on the user information such as the user ID. Accordingly the records are reorganized according to the user ID into user ID based buckets as denoted by block this is called xbucketing .

Xbucketing is further broken into two steps. First every hour the xbucketing process is performed. The process parses the attributable event records using a custom schema which recognizes the attributable event records format but may for example be specified in XML. Second all the hourly buckets from the past day are combined into a daily file as denoted by block . The daily file does not need parsing because the user ID is already parsed out in the hourly process and recorded in the hourly files. The above hourly xbucketing process is done for both attributable event events as well as conversion events as denoted by block . The join process is then performed according to a predetermined time period. For example every hour the hourly conversion events are joined with the attributable event information in the daily file using a join key. The join process may use the user information as a join key to look into the daily buckets of attributable event information as denoted by reference numeral . In one example the User ID may be used as the join key. The process may look across a predetermined time period called the look back period. For example the process may look for attributable event information with a matching user ID within the past 30 days and or the past hours in the current day. The hit records are fed to a business module in memory which annotates the conversion record as denoted by reference numeral . The annotation indicates attribution of the conversion to a specific attributable event. Further the process may limit the number of conversions attributed to an attributable event. Further the process may limit the number of a particular type of conversion attributed to a particular user ID. For example the system may only track the first time a particular user fills out a particular form. The attribution server may then produce a list of annotated conversion events. The output from join is given to a grid offloading job which updates the data store and generates an attribution report.

Any of the modules servers or engines described may be implemented with one or more computer systems. If implemented in multiple computer systems the code may be distributed and interface via application programming interfaces. Further each method may be implemented on one or more computers. One exemplary computer system is provided in . The computer system includes a processor for executing instructions such as those described in the methods discussed above. The instructions may be stored in a computer readable medium such as memory or a storage device for example a disk drive CD or DVD. The computer may include a display controller responsive to instructions to generate a textual or graphical display on a display device for example a computer monitor. In addition the processor may communicate with a network controller to communicate data or instructions to other systems for example other general computer systems. The network controller may communicate over Ethernet or other known protocols to distribute processing or provide remote access to information over a variety of network topologies including local area networks wide area networks the internet or other commonly used network topologies.

In an alternative embodiment dedicated hardware implementations such as application specific integrated circuits programmable logic arrays and other hardware devices can be constructed to implement one or more of the methods described herein. Applications that may include the apparatus and systems of various embodiments can broadly include a variety of electronic and computer systems. One or more embodiments described herein may implement functions using two or more specific interconnected hardware modules or devices with related control and data signals that can be communicated between and through the modules or as portions of an application specific integrated circuit. Accordingly the present system encompasses software firmware and hardware implementations.

In accordance with various embodiments of the present disclosure the methods described herein may be implemented by software programs executable by a computer system. Further in an exemplary non limited embodiment implementations can include distributed processing component object distributed processing and parallel processing. Alternatively virtual computer system processing can be constructed to implement one or more of the methods or functionality as described herein.

Further the methods described herein may be embodied in a computer readable medium. The term computer readable medium includes a single medium or multiple media such as a centralized or distributed database and or associated caches and servers that store one or more sets of instructions. The term computer readable medium shall also include any medium that is capable of storing encoding or carrying a set of instructions for execution by a processor or that cause a computer system to perform any one or more of the methods or operations disclosed herein.

As a person skilled in the art will readily appreciate the above description is meant as an illustration of the principles of this application. This description is not intended to limit the scope or application of the claim in that the invention is susceptible to modification variation and change without departing from spirit of this application as defined in the following claims.

