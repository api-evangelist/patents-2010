---

title: Allocating resources based on a performance statistic
abstract: A method includes rendering an object of a three dimensional image via a pixel shader based on a render context data structure associated with the object. The method includes measuring a performance statistic associated with rendering the object. The method also includes storing the performance statistic in the render context data structure associated with the object. The performance statistic is accessible to a host interface processor to determine whether to allocate a second pixel shader to render the object in a subsequent three-dimensional image.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08587594&OS=08587594&RS=08587594
owner: International Business Machines Corporation
number: 08587594
owner_city: Armonk
owner_country: US
publication_date: 20100521
---
The present disclosure relates generally to image processing and more specifically to allocating resources based on a performance statistic.

Graphics processing units typically use dedicated hardware elements to perform specific functions such as breaking an object in an image into primitives. However when dedicated hardware elements are used to perform specific functions the hardware elements may not be reassignable to perform different tasks.

In a particular embodiment a method includes rendering an object of a three dimensional image via a pixel shader based on a render context data structure associated with the object. The method includes measuring a performance statistic associated with rendering the object. The method also includes storing the performance statistic in the render context data structure associated with the object. The performance statistic is accessible to a host interface processor to determine whether to allocate a second pixel shader to render the object in a subsequent three dimensional image.

In another particular embodiment a computer program product includes a non transitory computer usable medium having computer usable program code embodied therewith. The computer usable program code is executable by a processor to retrieve at a host interface processor a performance statistic associated with rendering an object in a three dimensional image. The performance statistic is measured by a pixel shader that rendered the object. The computer usable program code is executable by the processor to determine whether the performance statistic satisfies a threshold. The computer usable program code is further executable by the processor to assign a second pixel shader to render the object when the performance statistic satisfies the threshold.

In another particular embodiment a computer graphics system includes a plurality of pixel shader elements. Each pixel shader element of the plurality of pixel shader elements is configured to render an object based on a render context data structure associated with the object. Each pixel shader element of the plurality of pixel shader elements is further configured to measure a performance statistic associated with rendering the object and to store the performance statistic in the render context data structure associated with the object.

Referring to a first block diagram of a system to render a three dimensional image is depicted and generally designated . Rendering is a process of generating an image from a model e.g. a data structure that represents the image using a computer program having processor executable instructions. The system includes a user application that accesses a graphics processing unit using an application programming interface API . The graphics processing unit is communicatively coupled to a memory subsystem . The memory subsystem is coupled to a display device .

The graphics processing unit is operable to render a three dimensional image at the display device based on a request from the user application . The request may be received from the user application via API calls such as the API call . The graphics processing unit includes a driver a host interface processor and a render pipeline . The user application may use the API call to the driver to initiate generation of three dimensional images such as the three dimensional image for display at the display device . In response to the API call the driver may place a request at the queue for the host interface processor .

The memory subsystem includes a queue and a frame buffer . The queue may be used to queue up API calls received from the user application . The frame buffer may be used to buffer frames of three dimensional images generated by the graphics processing unit for display at the display device .

The render pipeline includes multiple programmable processing elements that may be assigned different tasks by the host interface processor . For example in a geometry engine has three elements a rasterizer has three elements and a pixel shader has three pixel shader elements and . Each of the geometry engine elements the rastererizer elements and the pixel shader elements may be hardware processing elements capable of being assigned to perform different functions. The host interface processor may dynamically i.e. in real time change the allocation of the number of processing elements performing a particular function. For example the host interface processor may take one of the geometry engine elements and reassign it as one of the pixel shader elements or as one of the rasterizer elements based on a workload associated with each processing element. For example the host interface processor may change the allocation of the number of processing elements performing a particular function based on performance measurements associated with rendering a particular object.

In a particular embodiment the host interface processor may assign one of the processing elements and a particular function by sending the processing element microcode to execute to perform the particular function. In another particular embodiment the host interface processor may assign one of the processing elements and a particular function by sending a pointer to microcode stored at the memory subsystem . In yet another particular embodiment the host interface processor may assign one of the processing elements and a particular function by selecting a pre programmed function of the processing element. For example each processing element may be pre programmed to perform several functions e.g. geometry engine rasterizer and pixel shader and the host interface processor may select from among the pre programmed functions. In a particular embodiment the processing elements and may be programmable elements of a network on a chip.

The host interface processor may execute instructions e.g. firmware or microcode to perform various functions. The processing elements and may execute instructions to perform various functions. For example the pixel shader element may perform a pixel shader function by executing instructions . The instructions and may be stored at a non transitory computer readable medium such as an on chip memory not shown of the graphics processing unit .

The graphic processing unit may periodically render a frame i.e. the three dimensional image for display at the display device . For example the graphics processing unit may generate thirty or more frames per second. When a particular object of the three dimensional image is complex and requires additional resources to render the particular object e.g. when the object was not completely rendered within one thirtieth of a second in a particular frame the host interface processor may allocate or reassign resources to render the particular object before the next frame is rendered.

In operation the user application may make an API call to the driver to place a request in the queue . The request may be to render a portion of the three dimensional image at the display device . The host interface processor may retrieve the request from the queue and instruct the render pipeline to render a portion of the three dimensional image at the display device . The three dimensional image may include objects and .

The geometry engine elements may break one of the objects of the three dimensional image into primitives and send a primitive to one of the rasterizer elements . The primitive may be a geometric primitive such as a triangle a rectangle a cube or a cylinder used to render the three dimensional image . The rasterizer elements may receive the primitive from the geometry engine elements . The rasterizer elements may scan a two dimensional area i.e. a two dimensional area that is mapped to the display device to determine whether to draw a pixel at a particular location in the two dimensional area based on properties of the primitive . The rasterizer elements may send the primitive to one of the pixel shader elements .

The pixel shader elements may execute instructions to perform various functions. One of the pixel shader elements may receive the primitive and render a portion of one of the objects based on a render context associated with the object. The render context associated with an object includes information on how to convert a geometric primitive into individual pixels for display at a display device. For example the pixel shader element may render the object based on the render context the pixel shader element may render the object based on the render context and the pixel shader element may render the object based on the render context . To illustrate the rendering context may be used by the pixel shader element to convert the primitive into individual pixels for display at the display device .

The pixel shader elements may measure at least one performance statistic associated with rendering the objects and store the performance statistic in the render context associated with the object. For example when the pixel shader element renders the object the pixel shader element may measure a performance statistic associated with rendering the object and store the performance statistic in the render context . The pixel shader element may measure the performance statistic when rendering the object and store the performance statistic in the render context . The pixel shader element may measure the performance statistic associated with rendering the object and store the performance statistic in the render context . The performance statistics may include one or more of a number of elapsed clock cycles to render an object in a previous frame a number of instructions executed to render an object in the previous frame a cache hit rate associated with rendering an object in the previous frame a ratio of floating point instructions executed to integer point instructions executed to render an object in the previous frame another performance statistic related to rendering an object in the previous frame or any combination thereof.

The host interface processor may use the performance statistics that are stored in the render context to determine whether to assign or reassign the processing elements to different functions. For example when one of the performance statistics associated with rendering an object in a previous frame satisfies the threshold the host interface processor may allocate additional resources such as additional processing elements to render the object in a subsequent frame. To illustrate after the host interface processor determines that a number of instructions executed by the pixel shader element to render the object in a first frame satisfies the threshold the host interface processor may reassign one of the rasterizer elements as a pixel shader element before the object is rendered in a subsequent frame. To illustrate when the number of instructions executed by the pixel shader element to render the object in a previous frame are greater than the threshold the host interface processor may assign an additional resource e.g. an additional processing element to render the object in a subsequent frame. For example the host interface processor may delineate two portions e.g. a top half and a bottom half of the object and assign the pixel shader element to render a first portion e.g. the top half of the object and assign one of the reassigned rasterizer elements to render a second portion e.g. the bottom half of the object .

The host interface processor may modify one of the render contexts to identify the allocated additional resources before a subsequent frame is rendered. For example the pixel shader elements may render relatively simple objects such as the objects while the pixel shader element may render a more complex object such as the object . The host interface processor may use the statistics to determine which of the objects are more complex and require more resources. For example the host interface processor may determine that the pixel shader element has a workload that is greater than the workload of the pixel shader elements based on the statistics . In response the host interface processor may allocate an additional processing element such as one of the three geometry engine elements or one of the three rasterizer elements as an additional i.e. a fourth pixel shader element. For example the host interface processor may delineate two portions of the object and assign the top half of the object to the pixel shader element and assign the bottom half of the object to the additional pixel shader element in order to reduce the time to render the object .

While a raster based graphics system is depicted in performance statistics associated with rendering objects may be used by other types of graphics systems such as ray tracing systems to dynamically assign reassign resources such as additional processing elements and to distribute workload to the additional resources.

The pixel shader elements may store the performance statistics associated with rendering the objects in a previous frame in the render contexts . The host interface processor may use the statistics to allocate additional resources e.g. additional processing elements before the objects are rendered in a subsequent frame. The host interface processor may redistribute the rendering of one or more of the objects in the subsequent frame to the additional resources based on the statistics . Thus by measuring performance statistics associated with rendering objects in a first frame objects that are more complex to render may be provided with an appropriate amount of resources such as processing elements to render the complex objects in subsequent frames. For example the host interface processor may reassign the processing elements to enable the workload of the graphics processing unit to be distributed across the processing elements.

Referring to a second block diagram of a system to render a three dimensional image is depicted and generally designated . The system includes a host interface processor a pixel shader element and a display device .

The pixel shader element may be a hardware based processing element that can be assigned to perform more than one function by the host interface processor . The pixel shader element may render a portion of an object in a three dimensional image e.g. a first frame of a video game at the display device . The pixel shader element may render the portion of the object based on a render context . The render context associated with the object may include information associated with converting a geometric primitive into individual pixels for display at the display device .

When a performance statistic indicates that a workload of the pixel shader element satisfies a threshold the host interface processor may assign an additional resource such as an additional processing element to render the object in a subsequent frame. For example the host interface processor may assign a pixel shader element to assist the pixel shader element to render the object in a three dimensional image e.g. a subsequent frame .

The display device may display frames generated by a graphic processing unit that includes the pixel shader element . For example each frame displayed by the display device may be in the form of a three dimensional image such as the three dimensional image . In a particular embodiment the display device may display thirty of more frames every second. To illustrate the display device may display the three dimensional image e.g. a first frame and subsequently display the three dimensional image e.g. a second or subsequent frame after displaying the three dimensional image .

In operation the pixel shader element may render the object in the three dimensional image at the display device . The pixel shader element may measure at least one performance statistic associated with rendering the object in the three dimensional image and store the at least one performance statistic at a render context . For example the pixel shader element may store the performance statistic at the render context after the three dimensional image has been rendered but before the three dimensional image has been rendered.

Before the three dimensional image is rendered the host interface processor may determine that the performance statistic satisfies the threshold . The host interface processor may assign another processing element such as the pixel shader element to render a portion of the object for the second frame. For example the host interface processor may determine that a number of clock cycles used by the pixel shader element satisfies the threshold . In response the host interface processor may assign the pixel shader element to assist the pixel shader element to render the object in a subsequent frame e.g. the three dimensional image . For example the host interface processor may delineate two portions of the object and assign the pixel shader element to render a first portion e.g. a top half of the object and assign the pixel shader element to render a second portion e.g. a bottom half of the object in the three dimensional image and in at least one subsequent frame that includes the object . The host interface processor may indicate that an additional resource i.e. the pixel shader element has been assigned to render a portion of the object by modifying a resources field of the render context .

The host interface processor may create a render context associated with rendering the second portion of the object . The pixel shader element may measure at least one performance statistic associated with rendering the second portion of the object in the three dimensional image and store the performance statistic in the render context . The host interface processor may determine based on the performance statistics whether to allocate an additional resource e.g. a third processing element to assist the pixel shader elements in rendering the object for a subsequent frame not shown .

The host interface processor may determine based on the performance statistics to reallocate the pixel shader element to render a second object not shown . For example in a video game the object may depict a sinking boat. As the boat sinks only the top half of the object may remain visible in a third frame not shown . The host interface processor may determine based on the performance statistics to reallocate the pixel shader element to render a second object before a third frame not shown is rendered.

Thus the host interface processor may use the performance statistic associated with rendering the object in a first frame to determine whether to allocate additional resources to render the object in a subsequent frame or to reassign resources currently allocated to render the object . By doing so the host interface processor can balance workloads for multiple processing elements such as the pixel shader elements . Balancing workloads for multiple processing elements may enable an appropriate amount of resources to be allocated to render each object displayed in a frame.

Referring to a first flow diagram of a particular embodiment of a method to render a graphics image is depicted and generally designated . The method may be performed by a host interface processor such as the host interface processor of .

The method begins at when a host interface processor retrieves a performance statistic associated with rendering an object in a three dimensional image. The performance statistic may be measured by a pixel shader element that rendered the object. For example in the host interface processor may retrieve the performance statistic from the render context after the three dimensional image e.g. a first frame has been rendered.

Moving to the host interface processor may determine whether the performance statistic satisfies a threshold. Proceeding to the host interface processor may assign a second pixel shader element to render a portion of the object when the performance statistic satisfies the threshold. For example the second pixel shader element may be used to speed up rendering of the object in a subsequent frame. Advancing to the host interface processor may logically delineate at least a first portion of the object and a second portion of the object. Continuing to the host interface processor may assign the second pixel shader element to render the first portion of the object. For example in the host interface processor may assign the pixel shader element to render a portion of the object when the performance statistic satisfies the threshold . The host interface processor may delineate a top half and a bottom half of the object . The host interface processor may assign the pixel shader element to render the top half of the object and may assign the pixel shader element to render the bottom half of the object .

Moving to the host interface processor may retrieve a second performance statistic associated with rendering the first portion of the object in a subsequent three dimensional image. The second performance statistic may be measured by the second pixel shader element. Advancing to the host interface processor may determine whether the second performance statistic satisfies the threshold. When the second performance statistic satisfies the threshold the method proceeds to where a third pixel shader element may be assigned to render a third portion of the object. When the second performance statistic does not satisfy the threshold the method proceeds to where the second pixel shader element may be assigned to render a second object. For example in the pixel shader may measure the performance statistic after rendering the bottom half of the object . When the performance statistic satisfies the threshold the host interface processor may allocate another processing element as a third pixel shader not shown . The host interface processor may delineate a third portion of the object and assign the third pixel shader element to render the third portion of the object . When the performance statistic does not satisfy the threshold the host interface processor may assign the second pixel shader element to perform another function such as render a second object.

Thus a host interface processor may use the performance statistic to selectively allocate additional resources such as additional processing elements for rendering a particular object. The host interface processor may dynamically redistribute certain tasks related to rendering the particular object to the additional resources. By doing so workloads for rendering objects may be distributed across multiple processing elements. For example a workload for rendering a complex object may be distributed across two or more processing elements. The host interface processor may continually monitor the performance statistics associated with rendering objects and dynamically assigns processing elements to perform various functions e.g. a geometry engine function a rasterizer function and a pixel shader function based on the performance statistics.

After a particular frame is rendered and before a subsequent frame is rendered the host interface processor may dynamically assign reassign processing elements to perform various functions based on the performance statistics. Thus as the monitored performance statistics change the host interface processor may reassign processing elements to perform different functions. For example the host interface processor may assign two pixel shader elements to render an object. The host interface processor may monitor the performance statistics of the two pixel shader elements after each frame is rendered. When the complexity of the object increases after a frame is rendered e.g. the object is increasing in size and additional details of the surface of the object are displayed the host interface processor may assign a third pixel shader element to assist in rendering the object for a subsequent frame. When the complexity of the object decreases after a frame is rendered e.g. the object is decreasing in size and fewer details are displayed the host interface processor may reassign one of the two pixel shader elements to another object or to another function.

Referring to a second flow diagram for rending a graphics image is depicted and generally designated . The method may be performed by a pixel shader element such as one of the pixel shader elements of .

A graphics object of a three dimensional image is rendered at . The rendering may be based on a render context data structure associated with the object to be rendered. Moving to a performance statistic associated with rendering the object may be measured. Advancing to the performance statistic is stored in the render context data structure associated with the object and the method ends. For example in the pixel shader element may measure the statistic when rendering the object and store the statistic in the render context .

Thus pixel shader elements may store performance statistics associated with rendering objects at render contexts that are associated with the objects. A host interface processor may use the performance statistics to selectively allocate additional resources such as additional elements for rendering a particular object. The host interface processor may redistribute certain tasks related to the rendering of the particular object to the additional resources based on the performance statistics.

In the depicted example the computing system employs a hub architecture including a north bridge and a memory controller hub MCH and a south bridge and input output I O controller hub ICH . A processor a main memory and the graphics processing unit are coupled to the north bridge and memory controller hub . For example the graphics processing unit may be coupled to the MCH through an accelerated graphics port AGP not shown .

In the depicted example a network adapter is coupled to the south bridge and I O controller hub and an audio adapter a keyboard and mouse adapter a modem a read only memory ROM universal serial bus USB ports and other communications ports and Peripheral Component Interconnect PCI and Peripheral Component Interconnect Express PCIe devices are coupled to the south bridge and I O controller hub via bus . A disk drive and a CD ROM drive are coupled to the south bridge and I O controller hub through the bus . The PCI PCIe devices may include for example Ethernet adapters add in cards and PC cards for notebook computers. The ROM may be for example a flash binary input output system BIOS . The disk drive and the CD ROM drive may use for example an integrated drive electronics IDE or serial advanced technology attachment SATA interface. A super I O SIO device may be coupled to the south bridge and I O controller hub .

The main memory includes computer instructions on a computer readable medium. The computer instructions are executable by the processor or the graphic processing unit to perform various functions.

An operating system not shown runs on the processor and coordinates and provides control of various components within the computing system . The operating system may be a commercially available operating system such as Microsoft Windows XP Microsoft and Windows are trademarks of Microsoft Corporation in the United States other countries or both . An object oriented programming system such as the Java programming system may run in conjunction with the operating system and provide calls to the operating system from Java programs or applications executing on the computing system Java and all Java based trademarks are trademarks of Sun Microsystems Inc. in the United States other countries or both .

Instructions for the operating system the object oriented programming system and applications or programs are located on storage devices such as the disk drive and may be loaded into the main memory for execution by the processor . The processes of the disclosed illustrative embodiments may be performed by the processor using computer implemented instructions which may be located in a non transitory memory such as for example the main memory the read only memory or in one or more of the peripheral devices.

The hardware in computing system may vary depending on the implementation. Other internal hardware or peripheral devices such as flash memory equivalent non volatile memory or optical disk drives and the like may be used in addition to or in place of the hardware depicted in . Also the processes of the disclosed illustrative embodiments may be applied to a multiprocessor data processing system.

In some illustrative examples portions of the computing system may be implemented in a personal digital assistant PDA which is generally configured with flash memory to provide non volatile memory for storing operating system files and or user generated data. A bus system may include one or more buses such as a system bus an I O bus and a PCI bus. Of course the bus system may be implemented using any type of communications fabric or architecture that provides for a transfer of data between different components or devices attached to the fabric or architecture. A communications unit may include one or more devices used to transmit and receive data such as a modem or a network adapter. A memory may be for example the main memory or a cache such as found in the north bridge and memory controller hub . A processing unit may include one or more processors or CPUs such as the processor or the graphics processing unit . The depicted examples in and above described examples are not meant to imply architectural limitations. For example portions of the computing system also may be implemented in a personal computer server server cluster tablet computer laptop computer or telephone device in addition to taking the form of a PDA.

Particular embodiments of the computing system can take the form of an entirely hardware embodiment or an embodiment containing both hardware and software elements. In a particular embodiment the disclosed methods are implemented in software that is embedded in processor readable non transitory medium and executed by a processor which includes but is not limited to firmware resident software microcode etc.

Further embodiments of the present disclosure such as the one or more embodiments in can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a non transitory computer usable or computer readable medium can be any non transitory medium that can tangibly embody a computer program and that can contain or store the computer program for use by or in connection with the instruction execution system apparatus or device.

In various embodiments the medium can include an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and digital versatile disk DVD .

A data processing system suitable for storing and or executing program code may include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the data processing system either directly or through intervening I O controllers.

Network adapters may also be coupled to the data processing system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modems and Ethernet cards are just a few of the currently available types of network adapters.

The previous description of the disclosed embodiments is provided to enable any person skilled in the art to make or use the disclosed embodiments. Various modifications to these embodiments will be readily apparent to those skilled in the art and the generic principles defined herein may be applied to other embodiments without departing from the scope of the disclosure. Thus the present disclosure is not intended to be limited to the embodiments shown herein but is to be accorded the widest scope possible consistent with the principles and features as defined by the following claims.

