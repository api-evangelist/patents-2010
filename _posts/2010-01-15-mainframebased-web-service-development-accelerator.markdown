---

title: Mainframe-based web service development accelerator
abstract: An interactive computer architecture is provided that can be employed as a bridge between a mainframe-based computing environment and a distributed server-based computing environment. A request/reply contract can be expressed within the mainframe-based environment and employed as the basis for generating a web service in the distributed computing environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08555239&OS=08555239&RS=08555239
owner: The PNC Financial Services Group, Inc.
number: 08555239
owner_city: Pittsburgh
owner_country: US
publication_date: 20100115
---
The present application is a continuation in part of U.S. patent application Ser. No. 12 248 403 filed on Oct. 9 2008 which claims priority to U.S. Provisional Patent Application Ser. No. 60 979 499 filed on Oct. 12 2007 U.S. patent application Ser. No. 12 248 249 filed on Oct. 9 2008 which claims priority to U.S. Provisional Patent Application Ser. No. 60 979 500 filed on Oct. 12 2007 U.S. patent application Ser. No. 12 248 278 filed on Oct. 9 2008 which claims priority to U.S. Provisional Patent Application Ser. No. 60 979 503 filed on Oct. 12 2007 and U.S. patent application Ser. No. 12 248 177 filed on Oct. 9 2008 which claims priority to U.S. Provisional Patent Application Ser. No. 60 979 508 filed on Oct. 12 2007. The contents of the foregoing applications are hereby incorporated by reference in their entirety into the present application.

The invention generally relates to systems processes tools and strategies for building configuring and processing applications in a computer based environment. In various embodiments the invention more particularly relates to construction and implementation of computer based applications in connection with a mainframe based computing platform or environment.

To keep pace with competitors business entities such as financial institutions often need to convert their business processes or workflows into more efficient and productive information technology solutions. Implementing even a seemingly basic change to information technology infrastructure however may require involvement by multiple functional layers of the business including accounting finance customer service information technology functions or possibly other areas.

For example traditional approaches to building or modifying web based applications that assist with the client interface or client access aspects of business operations usually involve engaging many technicians with a variety of skill sets and backgrounds. Such conventional approaches may employ end user applications web servers ad hoc programming or other components that compound their functions with existing information architecture to make the information technology system of the business even more complex and difficult to maintain.

Even when considering only the information technology function multiple personnel must be identified and made available for a given application development task a skilled HTML programmer may be needed to develop a user interface or browser a graphics designer may be needed to develop screen presentation a Java or .NET programmer may be needed to program application server functions and or an integration specialist who understands HTTP or other like protocols may be needed to facilitate communications among different computer systems. In addition with particular regard to mainframe computing environments mainframe development expertise may be necessary to ensure effective data communications transactions and other functionality associated with accessing the mainframe system. Furthermore the effort involved in functionally testing a proposed modification such as a new web based application is typically significant often consuming substantial time and resources across many different functional areas of the business.

Industry movement away from mainframe focused architecture to distributed application server based architecture has had further significant disadvantages especially in view of the issues described above. For example with respect to data originally stored and communicated from a mainframe system the data must be pushed to and synchronized with the application servers that ultimately present the data to clients or users. In addition modifications to applications or data on the mainframe system must likewise be updated for any distributed systems that depend on such mainframe applications or data. Also copying portions of data or applications from the mainframe to a distributed application server environment can negatively impact security control and processing speed for data transactions.

In view of the issues described above more effective and efficient systems processes tools and strategies are needed to build and configure applications and generally to enhance data communication and processing within computer based environments especially computing environments which are at least partially dependent on a mainframe computer system.

In various embodiments the inventions described herein provide systems processes tools and devices that offer technical and non technical personnel the ability to build and modify screens interfaces or web based applications by using configurable parameters rather than traditional computer programming code. Complex rules and rule extensions can be accessed by users and this reduces reliance on receiving skilled assistance from technical professionals. In addition embodiments of the inventions leverage the computing power control security and other beneficial aspects of including a mainframe based platform in a computing environment. In general embodiments of the invention offer more effective and efficient systems processes tools and strategies to build and configure applications and enhance data communication and data processing within computer based environments which may at least partially depend on the operation of a mainframe computer system.

Various embodiments of the invention offer tools for a service provider operating in a distributed computing environment to leverage the processing power of a mainframe based computing environment. For example use of the invention can allow a web service provider operating a distributed network of web based computer servers to employ and harness the benefits of a mainframe based computer system in constructing and employing web services on the network.

As applied herein the term EAI means enterprise application integration which may include a set of computer system components that allow different system platforms and business areas to communicate effectively with each other. For example in various embodiments of the invention an OS 390 EAI framework may be employed as a gateway for data communicated to or from a mainframe or mainframe based system.

As applied herein the term XSLT means extensible stylesheet language transformation which may be a program and or protocol that facilitates the conversion of one data format to another e.g. such as converting XML to HTML .

As applied herein the term MQ generally refers to a network communication technology allowing independent and potentially non concurrent applications on a distributed system to communicate with each other one example of MQ is Websphere MQ offered by IBM Corporation . MQ may be employed on many different platforms including a z OS mainframe platform for example.

As applied herein the term CICS Customer Information Control System may represent a transaction server that operates primarily on mainframe systems under z OS or z VSE operating systems for example.

The state data developed or used in association with a given session may include one or more of existing data A user entered or manipulated data B or derived data C. For example in the context of the business operations of a financial institution existing data A may be data associated with reviewing the checking account of a customer user entered or manipulated data B may comprise a user entered configuration or adjustment to be made to the displayed account number and derived data C may comprise data generated as a result of processing a combination of existing data A and or user entered data B. Upon receiving additional information or embellishment of the session from the user the mainframe system may use the additional data to develop derived data C for the checking account as a result of the session such as by modifying a variable which represents how the current account balance will be displayed for example.

For purposes of the present account information example processing account data interface configurations or modifications through the mainframe system may include invoking one or more services of an EAI system . Services executed by the EAI system may include calling and executing one or more APIs for example. For example the EAI system may receive account related data from the user and an account inquiry service may be invoked by the EAI system to retrieve and process data within the mainframe system . Subject to the state data associated with the session such as a tag name identified as an account name the EAI system may return data to the user corresponding to specific aspects of the state data. For example a service of the EAI system may be invoked to parse retrieved data to select the user ID or user name data for the user from among other stored data. In addition one or more external data sources may be accessed in addressing user requests. For example an HTTP or MQ request may be formatted and communicated to external data sources such as an Oracle database or a Lotus Notes database to retrieve and return the requested information to the user .

Non limiting examples of transactions or data processing activities which may be performed by the EAI system include CICS based protocol conversions e.g. XML delimited NVP SOAP transport insulation e.g. MQ HTTP load balancing and message routing parallel and serial processing error handling and message logging message simulation data conversions and domain validations custom conversions synchronized and non synchronized processing default settings COBOL formatting e.g. justifications padding binary and packed fields etc. rule based parsing tagging data enrichment data editing and or batch processes including data extraction and aggregation. In certain embodiments the EAI system may represent a dedicated EAI system in that each instance runs in its own address space and is configured for a specific function such as for high volume and or background transactions. Such a dedicated EAI system may be configured for inquiry only processing for example or other less critical functionality such as IVR marketing and dialer functionality to promote reduced CPU consumption and quicker system response times.

With reference to an example of a mainframe based architecture is illustrated in which various users may build or develop configurable applications browse aspects of a mainframe system or perform other tasks or functions through a distributed tier . In the example shown users may use a browser program to type in a URL address for communication to the distributed tier by a protocol such as HTTP for example. The initiating string of data or state data represented by the URL address may provide an indication of changes or modifications to a screen interface or other application as may be desired by the user . In a financial institution for example such applications may include account inquiry applications funds transfer applications new account proposal applications payment applications or many others. The state data represented by the initiating string data may change from session to session for different users . For example the initiating string data may include the name of an application to be invoked a user ID state data which may specify a starting point for the application to be invoked and or other pertinent data.

In the distributed tier the users may access a presentation module A which can be configured to generate interfaces and generally manage interaction with the users . The distributed tier may include a .NET or WAS server for example configured to perform various data processing functions. An interface module B may be configured to route or communicate calls to or from the presentation module A or a business process management BPM system C e.g. such as a Global360 or G360 BPM system . The interface module B may also provide MQ abstraction such as when communicating requests or other data with the mainframe system . The business process management system C may provide workflow management imaging or archiving functions for various aspects of the invention. In operation a user configuring an application may submit a constructed application e.g. built by customizing user interfaces or screens or collecting data for the screens to the business process management system C for approval through another operational area or by management personnel of a financial institution. In various embodiments a constructed application may be saved in XML format for example and then submitted for approval to the business process management system C. The XML formatted application or interface may be derived from state data associated with work performed by the user . It can be appreciated that use of state data permits users to return to an application at a prior stage of completion perhaps to revise or continue work on the application.

Referring again to data requests or calls may be communicated through an MQ interface D of the distributed tier through an MQ hub to the mainframe system . In various embodiments such data requests or calls may be communicated to the mainframe system via a variety of suitable protocols. An MQ interface A of the mainframe system receives communications from the MQ hub and passes them to an EAI framework B. In various embodiments the EAI framework B may be configured to serve as an MQ connector an XML generator or translator and or a field level data validator for data communicated to and from the mainframe system . The EAI framework B may be a distributed computing system that operates various functions of an organization or financial institution such as desktop functions teller transactions online banking activities and many others. In various embodiments the EAI framework B may be configured for communication with one or more external data sources which may include one or more non mainframe based data sources. Non limiting examples of non mainframe based data sources include Oracle databases Lotus Notes databases and the external data sources may include other types of storage devices or applications maintained or executed on an application server or server cluster.

In operation the EAI framework B may receive XML formatted state data and call a service in response to the received data. The XML formatted data may be parsed validated or otherwise processed when the called service is executed. The processed data may be compared against a business rules engine C of the mainframe system . The business rules engine C may contain one or more rules that can be triggered based on data processed by the mainframe system . An application builder D may be operatively associated with the business rules engine C. In various embodiments the application builder D may be configured for creating presentation definitions in XML HTML or for using custom tags for example. The business rules engine C may be configured to support rule definitions and pre processing or post processing of transaction data. Based on the state data contained in the communicated data the mainframe system may select a blank presentation template for communication back to the user or a preconfigured presentation based on existing state data.

Based on the application invoked and the state data the mainframe system evaluates the screen interface or other application and modifications or revisions thereto desired by the user . In performing this evaluation function the mainframe system may access one or more before rules and or one or more after rules stored in the business rules engine C. For example if an account number is in the state data of the data communicated to the mainframe system a before rule may be applied to trigger a number of transactions or data retrieval actions for example prior to returning the screen or application to the user . Likewise an after rule may be configured to determine whether the account number is numeric and then invoke an EAI framework B service that retrieves certain data in accordance with the numeric account data. An another example of an after rule is a rule that navigates from screen to screen based on retrieved data such as once numeric account data is retrieved or once user authorization is confirmed. In still another example a subsequent screen can have an associated before rule that retrieves or authorizes account data or other account information once the screen is activated. In various embodiments the before rules and after rules may be generally considered application logic employed by the mainframe system and may be stored as XML based data.

In various embodiments the business rules engine C may include one or more configurable screen definitions each of which define one or more aspects of a given screen interface or application. For example screen definitions may determine whether labels tables pick lists drop down menus check boxes radio buttons or many other elements are displayed or can be accessed on a screen or interface. In addition the screen definitions may determine whether one or more complex objects are applied to a screen. Such complex objects may employ one or more other individual objects. An example of such a complex object is a pick list including a label for the pick list values for the pick list and actions associated with selecting items in the pick list. Embodiments of the invention may facilitate multiple embellishments such as determining an action when a check box is checked such as opening access to a new portion of the screen for example. It can be appreciated that such screen configuration is facilitated without requiring formal programming or coding of scripts by the user .

In providing return communications of screens interfaces applications or other data to the user an XSLT transformation or translation may be performed in certain embodiments to provide HTML or another suitable protocol which can be viewed on a browser employed by the user . Such transformation or translation may be performed by one or more portions of the distributed tier for example or other components of the system architecture .

At step the mainframe system may retrieve a user configured presentation layer outline to be applied as the next user interface. Based on the current state data the presentation layer outline may be expanded to accommodate the internal structure of the state data at step . The mainframe system may then evaluate the presentation layer outline on a display object basis and create an output XML message at step . At step each display object may be interrogated to determine one or more of the following should it be displayed e.g. based on a business rule what is the object type e.g. static or variable what are the object attributes e.g. static or rule based what are the object properties e.g. static or rule based how is the object populated e.g. static from state data static pick list dynamic pick list invoking EAI services defaulted or other what are the object events e.g. static or rule based and or other considerations. At step the output XML message may be communicated back through the EAI framework B ultimately to be transformed and viewed on a browser of the user .

Referring now to examples of interfaces configured for browsing portions of the mainframe system are shown. In these examples data associated with an application called New Account Proposal i.e. NAP are displayed. With reference to the screen displays a COBOL definition of fields including a layout description wherein the whole layout is 33 886 bytes in length a G360 user required field is 137 bytes in length with an offset or displacement of zero a user key field is 40 bytes in length which is a sub field of the G360 user required field and also starting at zero. In this example the G360 user required field comprises a collection of multiple fields.

With reference to various components of the EAI framework are displayed in a screen including various XML tag names . The screen demonstrates how communicated XML documents can be identified and processed by the mainframe system such as by mapping the XML documents into a layout for execution by a program or application. For example for a submitter login field a value would be provided for a corresponding OperID tag name. show additional aspects of the XML tag names such as default values see screen of and edit table identification see screen of which can be configured for use by the EAI framework B of the mainframe system .

Referring now to a screen display illustrates an example of an edit table for the NAP index described above . The edit table displays screens or interfaces that are registered with the NAP index. Based on the state data of the user communicated to the mainframe system the edit table can be applied to identify a starting point for a given interface or application. In the context of the example of new account proposals the edit table includes various different starting points and different screens that are registered with a particular application. As shown the edit table may include designations for true false rules collections designations for before rule collections and designations for after rule collections . In general the edit table may at least partially direct the activity of the mainframe system in determining where to go to find information and what tasks or transactions to perform for a given application.

With reference to accessing the NAPCIPID key on the edit table of generates screen displays for a NAP customer information page. As shown the screen display may include object types object IDs template table T TBL and rule numbers RUL among other field sets or field values. The objects may elements such as banners or checkboxes for example or may be complex objects which comprise a collection or arrangement of individual objects. For example a template may represent a collection of screen components for display on an interface or application. As shown in the screen display fields such as repeating group RGI attributes tool tips labels classes styles on clicks and map to tags may be included. For example the on clicks may indicate that a task or function is to be performed once a selection is made in a configured screen or interface. The map to tags may be configured to map to a tag name in the state data for example atCIPCustInd may be mapped to a corresponding name in the state data. It can be appreciated that state data obtained from various user sessions can be leveraged in connection with embodiments of the invention to direct transactions call applications or execute data retrieval functions occurring within the EAI framework B or from external data sources by applying definitions naturally embedded within an extensible language such as XML.

With reference to a screen display illustrates an interface that can be used as business rules engine builder to access the business rules engine C of the mainframe system . The interface permits the user to select from among different rules collections such as by accessing a drop down menu as shown. shows that the Global 360 True False Collection has been selected and shows a sampling of the individual rules contained within the Global 360 True False Collection . illustrates that if rule ID A42 710 is selected from the list of individual rules various characteristics of the rule can be displayed or modified such as rule description rule type rule trigger operator e.g. greater than or less than or equal to and or trigger level . For example in the rule shown if an entry is made in a field called BROA which may represent bank regional office account and the authResponse is equal to an A then one point is given. Since one point is greater than the trigger level of zero the rule is activated then the action of Display D2 entry fields is executed. In contrast if the rule has a false condition then this action is not executed. illustrates examples of different rule types and illustrates different examples of rule data types . It can be appreciated that rules in the business rules engine C may perform a variety of tasks or functions when triggered. For instance rules may be configured to send e mails to set the next screen that should be presented in an application to add a field to a screen in the application and or many others. The rule data types may be used to set a field in the state data based on a lookup into the edit table. For example if the field value is PA then another field in the state data can be connected to the lookup value which in this case would be Pennsylvania for the PA field value.

With reference to a screen display illustrating a logging utility that can be used by the EAI framework B to track messages e.g. DSS messages communicated through the mainframe system . Such messages may be communicated in association with the activity of users in modifying screens interfaces or other applications. shows an example of a specific initiation message and generally illustrates the kinds of messages that can be processed by the mainframe system . In various embodiments the systems described herein may perform message authentication including token processing e.g. critical messages can be secured validated through a token or one time use token tokens may expire after a configurable time period stand alone token processing a token routine can be used to authenticate distributed system access between thick and thin client applications message security and alerts e.g. alerts configurable by application ID which can be communicated to a pager consol log or report rule based message publication e.g. messages can be queued or posted based on content and a single message can have multiple publication rules allowing for multiple subscription vehicles or publication clearinghouses rule based store and forward which allows EAI applications to store messages for processing at a later time based on message content e.g. number of attempts and wait interval can be configured .

An example of an output screen generated or configured by a user is shown in . The screen display demonstrates that once Executorships is selected in the Category field then an on click rule is triggered to display only one account type for the Account Type field which is the 1 Executor Administrator Ancillary account type.

Another example of an output screen is shown in . A section of the screen requests that states check all that apply with respect to various status identifiers for an individual client of a financial institution i.e. beneficiary grantor donee sprinkle guardian and settlor . includes a screen display presenting an edit table associated with the output screen of . As shown at line of the edit table there are entries for chkBoxHTML2 as an object type and capacities as its corresponding object ID . As shown in a screen display displays a Radio Control Parm table which controls lists for screens and interfaces. As shown entry of the table points to a domain value table of 29 has a positive or Y required indicator RI and has a direction indicator DI value of 4 which directs the display of 4 boxes across the screen until the next line is reached as shown in the section of the output screen there are 4 boxes displayed on a first line followed by 2 boxes displayed on a second line . The table is also a dynamic table which means that the table is based on one or more dynamic features such as actual values on the output screen may change based on user entered data for example. In general it can be appreciated that many changes in screen configurations can be readily and conveniently converted into what otherwise might be complex source code and implemented in a computer system by employing the enhancements offered by embodiments of the invention.

In various embodiments the business rules engine builder as described above may be used to build its own aspects or features. displays an update rule screen including definitions for Rule AAB in which the rule returns a true value if the schemaName field is greater than GT blank space. That is one point 1 is assigned if schemaName is greater than blank spaces or a blank entry. It can be seen that since one point is greater than zero which is the trigger level then the rule would return a true value in this scenario. As shown in the mainframe based screen of the AAB rule number RUL controls whether a tag help message and fieldset section will appear on the Update Rule screen. If the AAB rule returns a true value then objects with keys and all descendants PCK thereof will display on the screen . As shown in the update rule screen of the trigger level for the AAB rule has been changed to a value of 1 which will effectively prevent the rule from being triggered. That is in this scenario the condition points value will never exceed the trigger level value . illustrates the now modified update rule screen without the tag help message and fieldset section because the AAB rule returns a false value and the screen builder will not display the objects in the section .

In developing the mainframe based EAI architecture and framework embodiments described herein the inventors have discovered the benefits of leveraging existing legacy applications creating a data synchronization vehicle across disparate platforms and databases combining disparate data from multiple platforms into the same user interface facilitating multiple message format brokering allowing multiple transports e.g. MQ and or allowing multiple message protocols e.g. XML . Within an EAI framework legacy integration can be readily accomplished advanced capabilities can be created including a business rules engine publish and subscribe functionality and rules based store and forward processing can be executed various business areas of a financial institution e.g. retail and non retail can be leveraged and distributed components can be introduced including web services integration for messages for example and an XSLT framework for template based development.

Referring now to the EAI framework may be structured with a mainframe based XML rules based engine that assists with data communication and processing with customers or channels through an application server tier . The channels may communicate with the application server tier through one or more types of communication media or protocols as shown. In conventional mainframe environments COBOL or another type of programming architecture is usually employed which can be considered flat or one dimensional in the sense that such programming does not fundamentally possess a descriptive language that describes where elements e.g. objects or complex objects can be accessed. In contrast embodiments of the invention may employ a business rules engine expressed using an extensible language such as XML for example as a basis for the rules triggered and executed by the system.

At step a URL search string may be initiated from a customer or channel through one of the communication media or protocols for routing to an application server in the application server tier . An example of such a URL search string is illustrated in . At step the URL search string may be converted into XML or another suitable language and then communicated to the EAI framework such as via MQ. An example of the URL search string as converted into XML is demonstrated in . A reply XML is created or generated in the EAI framework at step an example of the XML reply is shown in . At step a transformation is selected and executed on the reply XML an example of which is shown in and HTML may be generated an example of which is shown in . At step JavaScript files may be appended as shown in and DHTML may be communicated back to the customer or channel through the communication media or protocol see example screen shown in .

Those skilled in the art will appreciate that the EAI framework of the embodiments of the invention reduce or eliminate the need to rewrite programming or duplicate data into different distributed applications. A core system of financial systems for example such as trust systems CIF systems customer information systems and many others can be maintained and accessed through a mainframe system. The EAI framework provides an enterprise service bus which can translate XML MQ HTTP delimited format and data translations while insulating or securing data from a distributed application server system. Embodiments of the invention therefore leverage the benefits of power control and security which arise from using a mainframe system in contrast to excessive use of distributed application servers while also promoting a significant browser based experience for customers or channels that access the mainframe system.

Various embodiments of the invention may employ various features and functions of the EAI framework previously described herein to facilitate creation of link level instructions in a COM communication area of the mainframe computer system . For example a software programmer might write a link level CSC COBOL program executable by the mainframe system that accepts the request and returns the reply i.e. an example of the request reply contract . From the perspective of the web service provider it can be appreciated that the WSDL file which is ultimately generated from the mainframe based request reply contract is independent of programming languages network protocol transmission protocol or any other computer protocols employed by the recipient of the WSDL file. The WSDL file may be useful to any entity or computer system that is capable of accepting and executing the WSDL file. For example the web service provider may employ XML remquo HTTP or other kinds of protocols or programming languages. However as long as the web service provider can communicate in terms of web services definition language then it can make suitable use of the WSDL file regardless of the fact that the WSDL file has its ultimate origins in the mainframe based computing environment . Embodiments of the invention thus leverage the functions represented by the request reply contract executable in connection with the processing power of the mainframe computer system .

With reference to A and B at step a request reply contract can be encoded into a copybook of a mainframe system. include screen displays that provide a view into an example of a COBOL copybook of a mainframe system. In this example the copybook is named CCTPCSRQ. As shown the copybook is separated into an input area see and an output area see representing the request component and the reply component of a request reply contract. As can be seen the request can be configured to receive input or request parameters such as an operator ID PCSR OPER ID a CIF key PCSR CIF KEY a branch PCSR BRANCH ID an account type PCSR ACCT TYPE and an account number PCSR ACCT NUMBER . Likewise certain output or reply parameters are returned by the mainframe system based on processing the request parameters associated with the request reply contract. As shown in the present example the reply includes returning parameters such as card number PCSR CARD NO an opening date for the card PCSR CARD OPEN DATE and a name on the card PCSR CARD NAME and other output parameters. In the present example the request reply contract can be employed in the context of PCS Plastic Card System transactions such as may be employed in connection with credit cards debit cards or other types of purchase cards employed by financial institutions.

As graphically illustrated in the screen display of at step a job can be submitted e.g. through use of JCL Job Control Language to the mainframe system referencing the copybook i.e. CCTPCSRQ described above at step . After the job is submitted the copybook can be registered with the EAI framework of the mainframe system at step . Once registered with the EAI framework the copybook can be considered to have an EAI representation within the EAI framework. During the registration process the request reply contract may be divided into separate request and reply components while retaining the same copybook for both components.

At step the request reply contract can be defined for the registry of the mainframe system such as by assigning one or more tag names e.g. XML tag names to the fields e.g. COBOL fields of the request and reply components for example. The tag names can be associated with the EAI framework fields for various functional reasons such as to identify a length of the field text justification whether the field should include pre entered data e.g. filled with zeros and many other types of parameters. In this manner the various aspects of the request reply contract can be mapped and identified for processing within the EM framework. The screen displays of illustrate examples of how the request or input portion of the request reply contract can be defined for the registry of the mainframe system. In addition the screen displays of illustrate examples of how the reply or output portion of the request reply contract can be defined.

At step a build object job can be executed in the mainframe system to create multiple output files based on the copybook and the EAI definition registry entries for the request reply contract. The screen display of illustrates an example of executing the build object job at step . As shown in and in the context of the present example the output files of may be generated as Java class files such as proc.java see reply.java see xml.java see body.java see request.java see pcs.java see bean.java see and home Java see . It can be appreciated that the output files can serve as the foundation for constructing the desired web service. As described above various embodiments of the invention can be used to create Java software code through a mainframe based program e.g. COBOL that generates the components needed to build the desired web service.

At step the output files obtained from step can be communicated such as through an appropriate file transfer protocol e.g. FTP to a destination location such as a computer server included within a distributed network computing environment for example. includes a screen display illustrating an example of submitting a file transfer command to the mainframe system to communicate the output files to the distributed computing environment.

At step an application development tool such as IBM Rational Software Development Platform for example can be employed in connection with the output files for compiling the output files and constructing the web service. illustrates an example of creating an Enterprise EJB project within the application development tool. illustrate an example of creating an enterprise bean using the application development tool.

At step the generated output files can be imported into the project work space of the application development tool. Examples of importing files into the project workspace of the application development tool are illustrated in the screen displays of and A B. At step deployment code associated with the web service may be generated. The screen displays of and A B illustrate examples of generating the deployment code for the web service. At step the web service can be generated by using the application development tool. The screen displays of illustrate examples of generating the web service and FIGS. A A and B B illustrate an example of a WSDL file generated during this process.

Subsequently a test client can be created from the WSDL file for testing the web service. The screen display of shows an example of creating a test client. Using the test client the system can execute a message to communicate with the mainframe system in connection with executing the operations of the web service. For example the interaction with the mainframe system may have involved communicating through a JAMS interface using an MQ call as the physical implementation of the JAMS interface. The screen display of shows an example of executing the web service through the test client to obtain output data in response to input data entered in accordance with the request reply contract which ultimately originated from the mainframe system. In various embodiments multiple methods may be included within the same web service. For example multiple inquiry messages communicated to the mainframe system can be embodied in a single web service.

The benefits and advantages of embodiments of the invention are readily apparent. Those skilled in the art will appreciate the advantages of encoding in Java classes for example in connection with pre existing hand shake communication supplied by the mainframe system which is built into the EAI framework. Significant portions of data entry and other error prone activity associated with programming computer instructions can be reduced or eliminated by using various embodiments of the invention. The embodiments described herein account for data fields marshalled out of an XML stream into an object marshalling data from serial data to an object and back and forth between the mainframe based computing environment and the distributed computing environment. This allows for ready translation of data and processing functions in a web service in SOAP simple object access protocol for example or another like protocol.

The examples presented herein are intended to illustrate potential and specific implementations of the present invention. It can be appreciated that the examples are intended primarily for purposes of illustration of the invention for those skilled in the art. No particular aspect or aspects of the examples are necessarily intended to limit the scope of the present invention. For example components of the mainframe based systems described herein may vary based on business requirements EAI parsing algorithms can be called from both batch and on line programs and are configurable EAI tagging algorithms can be called from both batch and on line programs and are configurable routing rules are configurable URLs are configurable both synchronized and non synchronized messages can be supported and SOAP messages can be communicated to allow and facilitate web services communication.

It is to be understood that the figures and descriptions of the present invention have been simplified to illustrate elements that are relevant for a clear understanding of the present invention while eliminating for purposes of clarity other elements. Those of ordinary skill in the art will recognize however that these sorts of focused discussions would not facilitate a better understanding of the present invention and therefore a more detailed description of such elements is not provided herein.

Any element expressed herein as a means for performing a specified function is intended to encompass any way of performing that function including for example a combination of elements that performs that function. Furthermore the invention as may be defined by such means plus function claims resides in the fact that the functionalities provided by the various recited means are combined and brought together in a manner as defined by the appended claims. Therefore any means that can provide such functionalities may be considered equivalents to the means shown herein.

In various embodiments modules or software can be used to practice certain aspects of the invention. For example software as a service SaaS models or application service provider ASP models may be employed as software application delivery models to communicate software applications to clients or other users. Such software applications can be downloaded through an Internet connection for example and operated either independently e.g. downloaded to a laptop or desktop computer system or through a third party service provider e.g. accessed through a third party web site . In addition cloud computing techniques may be employed in connection with various embodiments of the invention.

Moreover the processes associated with the present embodiments may be executed by programmable equipment such as computers. Software or other sets of instructions that may be employed to cause programmable equipment to execute the processes may be stored in any storage device such as for example a computer system non volatile memory an optical disk magnetic tape or magnetic disk. Furthermore some of the processes may be programmed when the computer system is manufactured or via a computer readable memory medium.

It can also be appreciated that certain process aspects described herein may be performed using instructions stored on a computer readable memory medium or media that direct a computer or computer system to perform process steps. A computer readable medium may include for example memory devices such as diskettes compact discs of both read only and read write varieties optical disk drives and hard disk drives. A computer readable medium may also include memory storage that may be physical virtual permanent temporary semi permanent and or semi temporary.

A computer computer system host engine or processor may be for example and without limitation a processor microcomputer minicomputer server mainframe laptop personal data assistant PDA wireless e mail device cellular phone pager processor fax machine scanner or any other programmable device configured to transmit and or receive data over a network. Computer systems and computer based devices disclosed herein may include memory for storing certain software applications used in obtaining processing and communicating information. It can be appreciated that such memory may be internal or external with respect to operation of the disclosed embodiments. The memory may also include any means for storing software including a hard disk an optical disk floppy disk ROM read only memory RAM random access memory PROM programmable ROM EEPROM electrically erasable PROM and or other computer readable memory media.

In various embodiments of the present invention a single component may be replaced by multiple components and multiple components may be replaced by a single component to perform a given function or functions. Except where such substitution would not be operative to practice embodiments of the present invention such substitution is within the scope of the present invention. Any of the servers described herein for example may be replaced by a server farm or other grouping of networked servers e.g. a group of server blades that are located and configured for cooperative functions. It can be appreciated that a server farm may serve to distribute workload between among individual components of the farm and may expedite computing processes by harnessing the collective and cooperative power of multiple servers. Such server farms may employ load balancing software that accomplishes tasks such as for example tracking demand for processing power from different machines prioritizing and scheduling tasks based on network demand and or providing backup contingency in the event of component failure or reduction in operability.

In general it will be apparent to one of ordinary skill in the art that various embodiments described herein or components or parts thereof may be implemented in many different embodiments of software firmware and or hardware or modules thereof. The software code or specialized control hardware used to implement some of the present embodiments is not limiting of the present invention. For example selected embodiments described hereinabove may be implemented in computer software using any suitable computer programming language such as .NET SQL MySQL or HTML using for example conventional or object oriented techniques. Programming languages for computer software and other computer implemented instructions may be translated into machine language by a compiler or an assembler before execution and or may be translated directly at run time by an interpreter. Examples of assembly languages include ARM MIPS and x86 examples of high level languages include Ada BASIC C C C COBOL Fortran Java Lisp Pascal Object Pascal and examples of scripting languages include Bourne script JavaScript Python Ruby PHP and Perl. Such software may be stored on any type of suitable computer readable medium or media such as for example a magnetic or optical storage medium. Thus the operation and behavior of the embodiments at times may be described without specific reference to the actual software code or specialized hardware components. The absence of such specific references is feasible because it is clearly understood that those skilled in the art would be able to design software and control hardware to implement the embodiments of the present invention based on the description herein with only a reasonable effort and without undue experimentation.

Various embodiments of the systems and methods described herein may employ one or more electronic computer networks to promote communication among different components transfer data or to share resources and information. Such computer networks can be classified according to the hardware and software technology that is used to interconnect the devices in the network such as optical fiber Ethernet wireless LAN HomePNA power line communication or G.hn. The computer networks may also be embodied as one or more of the following types of networks local area network LAN metropolitan area network MAN wide area network WAN virtual private network VPN storage area network SAN or global area network GAN among other network varieties.

For example a WAN computer network may cover a broad area by linking communications across metropolitan regional or national boundaries. The network may use routers and or public communication links. One type of data communication network may cover a relatively broad geographic area e.g. city to city or country to country which uses transmission facilities provided by common carriers such as telephone service providers. In another example a GAN computer network may support mobile communications across multiple wireless LANs or satellite networks. In another example a VPN computer network may include links between nodes carried by open connections or virtual circuits in another network e.g. the Internet instead of by physical wires. The link layer protocols of the VPN can be tunneled through the other network. One VPN application can promote secure communications through the Internet. The VPN can also be used to separately and securely conduct the traffic of different user communities over an underlying network. The VPN may provide users with the virtual experience of accessing the network through an IP address location other than the actual IP address which connects the access device to the network.

The computer network may be characterized based on functional relationships among the elements or components of the network such as active networking client server or peer to peer functional architecture. The computer network may be classified according to network topology such as bus network star network ring network mesh network star bus network or hierarchical topology network for example. The computer network may also be classified based on the method employed for data communication such as digital and analog networks.

Embodiments of the methods and systems described herein may employ internetworking for connecting two or more distinct electronic computer networks or network segments through a common routing technology. The type of internetwork employed may depend on administration and or participation in the internetwork. Non limiting examples of internetworks include intranet extranet and Internet. Intranets and extranets may or may not have connections to the Internet. If connected to the Internet the intranet or extranet may be protected with appropriate authentication technology or other security measures. As applied herein an intranet can be a group of networks which employ Internet Protocol web browsers and or file transfer applications under common control by an administrative entity. Such an administrative entity could restrict access to the intranet to only authorized users for example or another internal network of an organization or commercial entity. As applied herein an extranet may include a network or internetwork generally limited to a primary organization or entity but which also has limited connections to the networks of one or more other trusted organizations or entities e.g. customers of an entity may be given access an intranet of the entity thereby creating an extranet .

Computer networks may include hardware elements to interconnect network nodes such as network interface cards NICs or Ethernet cards repeaters bridges hubs switches routers and other like components. Such elements may be physically wired for communication and or data connections may be provided with microwave links e.g. IEEE 802.12 or fiber optics for example. A network card network adapter or NIC can be designed to allow computers to communicate over the computer network by providing physical access to a network and an addressing system through the use of MAC addresses for example. A repeater can be embodied as an electronic device that receives and retransmits a communicated signal at a boosted power level to allow the signal to cover a telecommunication distance with reduced degradation. A network bridge can be configured to connect multiple network segments at the data link layer of a computer network while learning which addresses can be reached through which specific ports of the network. In the network the bridge may associate a port with an address and then send traffic for that address only to that port. In various embodiments local bridges may be employed to directly connect local area networks LANs remote bridges can be used to create a wide area network WAN link between LANs and or wireless bridges can be used to connect LANs and or to connect remote stations to LANs.

In various embodiments a hub may be employed which contains multiple ports. For example when a data packet arrives at one port of a hub the packet can be copied unmodified to all ports of the hub for transmission. A network switch or other devices that forward and filter OSI layer 2 datagrams between ports based on MAC addresses in data packets can also be used. A switch can possess multiple ports such that most of the network is connected directly to the switch or another switch that is in turn connected to a switch. The term switch can also include routers and bridges as well as other devices that distribute data traffic by application content e.g. a Web URL identifier . Switches may operate at one or more OSI model layers including physical data link network or transport i.e. end to end . A device that operates simultaneously at more than one of these layers can be considered a multilayer switch. In certain embodiments routers or other like networking devices may be used to forward data packets between networks using headers and forwarding tables to determine an optimum path through which to transmit the packets.

As employed herein an application server may be a server that hosts an API to expose business logic and business processes for use by other applications. Examples of application servers include J2EE or Java EE 5 application servers including WebSphere Application Server. Other examples include WebSphere Application Server Community Edition IBM Sybase Enterprise Application Server Sybase Inc WebLogic Server BEA JBoss Red Hat JRun Adobe Systems Apache Geronimo Apache Software Foundation Oracle OC4J Oracle Corporation Sun Java System Application Server Sun Microsystems and SAP Netweaver AS ABAP Java . Also application servers may be provided in accordance with the .NET framework including the Windows Communication Foundation .NET Remoting ADO.NET and ASP.NET among several other components. For example a Java Server Page JSP is a servlet that executes in a web container which is functionally equivalent to CGI scripts. JSPs can be used to create HTML pages by embedding references to the server logic within the page. The application servers may mainly serve web based applications while other servers can perform as session initiation protocol servers for instance or work with telephony networks. Specifications for enterprise application integration and service oriented architecture can be designed to connect many different computer network elements. Such specifications include Business Application Programming Interface Web Services Interoperability and Java EE Connector Architecture.

In various embodiments computers and computer systems described herein may have the following main components arithmetic and logic unit ALU control unit memory and input and output devices I O devices . These components can be interconnected by busses often comprising groups of wires or cables. The control unit ALU registers and basic I O and often other hardware closely linked with these sections can be collectively considered a central processing unit CPU for the computer system. The CPU may be constructed on a single integrated circuit or microprocessor.

The control unit control system or central controller directs the various components of a computer system. The control system decodes each instruction in a computer program and turns it into a series of control signals that operate other components of the computer system. To enhance performance or efficiency of operation the control system may alter the order of instructions. One component of the control unit is the program counter a memory register that tracks the location in memory from which the next instruction is to be read.

The ALU is capable of performing arithmetic and logic operations. The set of arithmetic operations that a particular ALU supports may be limited to adding and subtracting or might include multiplying or dividing trigonometry functions sine cosine etc. and square roots. Some may be programmed to operate on whole numbers integers while others use floating point to represent real numbers for example. An ALU may also compare numbers and return Boolean truth values e.g. true or false . Superscalar computers may contain multiple ALUs to facilitate processing multiple instructions at the same time. For example graphics processors and computers with SIMD and MIMD features often possess ALUs that can perform arithmetic operations on vectors and matrices. Certain computer systems may include one or more RAM cache memories configured to move more frequently needed data into the cache automatically.

Examples of peripherals that may be used in connection with certain embodiments of the invention include input output devices such as keyboards mice screen displays monitors printers hard disk drives floppy disk drives joysticks and image scanners.

Embodiments of the methods and systems described herein may divide functions between separate CPUs creating a multiprocessing configuration. For example multiprocessor and multi core multiple CPUs on a single integrated circuit computer systems with co processing capabilities may be employed. Also multitasking may be employed as a computer processing technique to handle simultaneous execution of multiple computer programs.

While various embodiments of the invention have been described herein it should be apparent however that various modifications alterations and adaptations to those embodiments may occur to persons skilled in the art with the attainment of some or all of the advantages of the present invention. The disclosed embodiments are therefore intended to include all such modifications alterations and adaptations without departing from the scope and spirit of the present invention as set forth in the appended claims.

