---

title: Code generator tool for building software applications with reusable components
abstract: A method and computer program product for building a multiple layer object-oriented software application with reusable components. The method includes creating business classes containing a business logic for the software application, wherein the business classes are organized into hierarchies identified as namespaces, and then generating executable programming code for the software application. From there, the method may include placing the executable programming code into an at least one assembly structure for an associated layer, wherein a security token is required to access the business classes, and wherein the business classes are created to validate each security token passed by a user interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09223546&OS=09223546&RS=09223546
owner: Open Invention Network, LLC
number: 09223546
owner_city: Durham
owner_country: US
publication_date: 20100503
---
This application is a continuation of and claims priority from U.S. patent application Ser. No. 11 080 735 filed on Mar. 15 2005 entitled CODE GENERATOR TOOL FOR BUILDING SOFTWARE APPLICATIONS WITH REUSABLE COMPONENTS which is incorporated by reference herein in its entirety.

The present invention relates generally to computer source code generation and more particularly to the generation of business application source code with reuse components integrated.

Software reuse is usually identified with the reuse of source code across software systems. Source code is extremely difficult to reuse on a large scale. It has been estimated that U.S. companies waste as much as 145 billion a year on failed IT projects. Less than 10 of technology investments are completed on time and within budget.

Application architectures have been developed using an N tier approach. N tier applications have become the norm for building enterprise software. The terms tier and layer are used synonymously. The principles of N tier design are concerned with building distinct layers into applications so that maintenance and development becomes a concentrated effort within a particular layer. illustrates an N tier software architecture known in the software development art. The logical layers of presentation business logic data access and data may reside on the same physical machine or on many physical machines. The data tier or layer is basically a database management system. This layer is intended to deal with the storage and retrieval of information. This layer can range from complex high end products such as SQL Server or Oracle to simple plain text files including an XML database. The data access layer is the interface to the data layer . It contains generic and specific methods that handle all data input and output and persist data into the database . The business logic layer contains business objects and rules data manipulation and transformation logic etc. in other words this layer manipulates and transforms data passed to it from the data access layer . The presentation layer user interface layer is the layer that provides an interface for an end user into an application. It handles the transformation of the results output from the business logic layer into something that is usable and readable by the end user.

A single application may have multiple components in a single layer. As examples the presentation layer may have both a web and a Windows based user interface. There may be multiple business logic components involved in a single application including the main application logic as well as other components for example account validation security or personal employee information stored in a different location. Different data access components can be used if there are different types of data stores in use for example Oracle SQL Server DB2 text files etc.

The present invention is a productivity application designed to help developers create N tier C application frameworks for both Windows and Web based applications. It incorporates many reusable components into the generated shell ready for use. In the past applications were built from scratch. This meant the development team spent valuable time and resources on tasks code and configuration that is exactly the same between applications. The code structure and conventions used within applications had little or no consistency or commonality.

In an aspect of the invention a method includes creating business classes containing a business logic for the software application wherein the business classes are organized into hierarchies identified as namespaces and then generating executable programming code for the software application. From there the method may include placing the executable programming code into an at least one assembly structure for an associated layer wherein a security token is required to access the business classes and wherein the business classes are created to validate each security token passed by a user interface.

There is a present need in application development to eliminate the time and resources spent building the common parts of an application. The development team can then concentrate on building the business functionality i.e. business logic of the application. Applications will thereby exhibit greater consistency thus reducing maintenance costs. Developers will be able to move between different applications without having to learn each application s structure utilities and configuration these items will be the same between all generated applications thus ensuring consistency maintainability and reliability across applications.

In an exemplary embodiment the multiple layers include a data layer a data access layer a business logic layer and a user interface layer with executable logic for each layer placed into a corresponding assembly data structure. Security tokens are required to access the classes and methods in either the business logic assembly or data access assembly. A serializable data assembly includes container classes that are used to pass data between the business logic layer and data access layer when a dataset or data table is not appropriate. A code generator user interface enables an application developer to define a namespace a deploy directory name a database type an application type a target source code directory and a plurality of class specifications and search criteria.

In another aspect of the invention a computer program product is provided for building a multiple layer object oriented software application with reusable components. The program product includes a computer readable medium having computer readable code embedded therein including program instructions that enable creating business classes containing a business logic for the software application program instructions that read templates utilizing reusable components from a template solution file and program instructions that generate programming code for the software application based on the created business classes and selected template.

The following description of the invention is provided as an enabling teaching of the invention in its best currently known embodiment. Those skilled in the relevant art will recognize that many changes can be made to the embodiments described while still obtaining the beneficial results of the present invention. It will also be apparent that some of the desired benefits of the present invention can be obtained by selecting some of the features of the present invention without utilizing other features. Accordingly those who work in the art will recognize that many modifications and adaptations to the present invention are possible and may even be desirable in certain circumstances and are a part of the present invention. Thus the following description is provided as illustrative of the principles of the present invention and not in limitation thereof since the scope of the present invention is defined by the claims.

The exemplary embodiment of the invention is described in terms of the .NET Framework ASP.NET and the C high level language. The essentials of .NET ASP.NET and C necessary to understand the exemplary embodiment of the invention are briefly discussed herein.

The .NET Framework has two main elements a virtual machine called the Common Language Runtime CLR and the Base Class Libraries BCL . When a program is developed for .NBT in a high level language such as C or VB.NET the compiler generates Intermediate Language IL which is similar to assembly language code. The CLR then takes the code in IL form and converts it to machine code that it executes. The code that is generated is called managed code. The CLR controls all aspects of allocating memory and lifetime of objects. The BCL is a set of classes and functions that enable the programmer to talk to the operating system and to other technologies such as XML ASP.NET and ADO.NET.BCL eliminates the need to code to the W1N32 application programming interface API directly.

The .NET Framework classes system classes provide core functionality when building ASP.NET applications. The system classes live within assemblies. The .NET assembly represents the executable file that holds the class. There are two types of assemblies in .NET private and shared. Private assemblies can be used in a single application and are typically located in an application s bin folder. Shared assemblies can be used across applications and must be loaded into the global assembly cache by the assembly s creator. The .NET system classes are all shared assemblies. The .NET classes are organized logically into hierarchies called namespaces. A namespace is a language feature that appends a prefix to every class name to make the class name unique. Namespaces can be nested several levels deep within the hierarchy.

The .NET classes contain static and instance members. Static shared members are shared across all instances of a class instance members work on a specific instance of an object which means the object instance has to be created before an instance member can be used. Members are the properties methods fields events and constructors that make up a class. A property is an attribute of a class. A method is an action that the class knows how to perform. A field is similar to a property. An event represents something to which a reaction can be made. A constructor is a special type of method that is called when a new object is created.

C is derived from C but is simpler. C doesn t use pointers has single inheritance does not have macro support and does not have template support. Single inheritance means that a class can only derive from at most one other class. When a class inherits from another class it gains all the properties methods fields events and constructors from the class it inherited from. The class inherited from is the base class. The class that inherits from the base class is referred to as the derived class. Classes are declared by using the keyword class followed by the class name and a set of class members surrounded by curly braces. Every class has a constructor which is called automatically any time an instance of a class is created. The purpose of constructors is to initialize class members when the class is created. Constructors do not have return values and always have the same name as the class.

Most of the BCL classes are written in C . The other principal language for the .NET Framework is Visual Basic.NET VB.NET that has been modified significantly from Visual Basic to account for the object oriented features of the BCL. Both C and VB compile to IL thus their performance is about the same.

In C there is a complete separation between physical packaging of code and logical naming of namespaces. Each source file can be given any name and can contribute to multiple namespaces and can take multiple public classes.

ASP.NET is a programming framework built on Common Language Runtime that can be used on a server to build web applications. ASP.NET is language independent so a language can be chosen that is most suitable for the application. ASP.NET pages can be written in C VB.NET or newer versions of JavaScript. The advantage of ASP.NET is that it can use all the features of C just like a desktop application. ASP.NET defines an application as the collection of files pages handlers modules and code that can be invoked or run in the scope of a virtual directory or on a web application server. Visual Studio.NET provides an integrated environment for developing and debugging ASP.NET applications. To debug an application breakpoints are added to the code and then the application is run. If the debugger encounters a line of code with a breakpoint it pauses the execution of the program and puts it back in the edit window.

It is important for web applications to identify users and control access to resources. Authentication is the act of determining the identity of the requesting user. Typically the user must present credentials such as a name password pair in order to be authenticated. Once the authenticated identity is established the right to access a given resource must be determined. ASP.NET Framework applications can check dynamically that the requesting user can act in a particular role.

The code generator user interface layer of the present invention is very simple. Developers have to know the following before using the code generator tool 

The class models can be saved. The code generator tool automatically saves the class model to a temporary file every 60 seconds. The code generator tool allows developers to save the current model and or reload a saved model.

The code generated by the present invention can be fully compliant with company design naming and coding standards. A Visual Studio.NET VS.NET solution is created with user interface UI business logic BL and data access DA layers. The serializable data SD and remoting RM assemblies are also created. The SD assembly includes container classes that are used to pass data between the business logic and data access layers when a data table or dataset is not appropriate. The generated code makes use of common reuse components and compiles after generation with no changes.

The generated code includes custom exception classes namely a base application exception and a multi exception for validation or other situations where multiple messages are needed. The base classes contain common functionality for UT pages BL layer and DA layer to help streamline the application code. The BL classes contain example methods including a public method a public method where a multi exception is thrown and a private function. The DA classes contain example methods including a public method a public method with database transaction support and a private function.

Depending on the application type a user interface is generated for either ASP.NET or WinForms. The ASP.NET user interface includes the following features 1 integration with Web Authentication 2 Cascading Stylesheets CSS with helpful styles 3 pixel images and some icons 4 pages demo page showing the styles in the CSS custom errors and 5 user controls page header with logout link navigation bar.

Windows Forms is a framework for building Windows client applications that utilize the Common Language Runtime CLR . The Windows Forms WinForms user interface includes the following features 1 integration with Cool Windows for login user authentication and 2 integration with CoolWindows for the About box. CoolWindows is a component that contains forms and controls that can be used in .NET WinForm Applications. The component includes a login dialog about box and auto complete combination box.

The generated code includes extensive TODO comments to help identify to code developers what needs to be done. Starter configuration files are generated. Along with config files for several reuse components client and server side remoting configs are also included. In addition there are starter monitor scripts for the user interface for Web Apps and RM layers. The invention also provides a developer utilities DevUtils application to help generate config files with encrypted settings such as database connection strings and assembly passwords.

The user interface layer solution is built prior to doing any other work with the ASP.NET user interface. The user interface UI assembly must be built before other pages can be viewed. This is because the other pages actually reference the UI assembly and not the BasePage code in the project. When adding new functionality to the BasePage the user interface solution will have to be rebuilt before the pages can use the new members or methods. Classes should inherit from the BasePage instead of the System.Web.UI.Page. The using System.Web.SessionState reference at the top of the code behind for each page should be removed. Code behind files are pre compiled modules written in any .NET runtime complaint language. The UI assembly is set as the startup project and the  Template.aspx is set as the startup page.

For security integration with a single sign on solution can be included. The implementation is in web.config Global.asax and NonSecure Login.aspx. The application should add user roles to the ticket to help streamline security checking in the use interface . Any user information that is needed on multiple pages is added to the UserData member of Cool WebAuthenticator prior to writing the forms authentication ticket. Coolweb Authenticator is a component that assist in integrating Web Authentication into ASP.NET applications. Web Authentication is a series of reusable web pages that provide a single sign on interface to authenticate users of internal and external web applications. CoolMonitor is a component that assists in building web pages that monitor the availability of an application. These monitoring web pages can help detect and troubleshoot many factors that impact an application s availability including network firewall database and software issues. CoolMonitor is used to standardize the output of the monitor script.

In general the user interface solution is built prior to doing any other work. The user interface is set as the startup project. The Help menu includes the About Box. For security integration with CoolWindows is included. The implementation is in CoolWindows.WindowsAuthenticator.config and the Main function of the MainForm in the user interface. The CoolWindows.WindowsAuthenticator.config file is modified to meet the needs of the application.

In general business logic classes should inherit from the BaseBL class. Constructors require a user security token and call the BaseBL constructor. The BaseBL constructor validates the user s token retrieves the BL assembly token and configures remoting. No system generated exceptions should escape the BL layer . Instead either the application exceptions DEPLOYDIRNAMEException or DEPLOYDIRNAMEMultiException should be used to hide the details. The real exception should be logged using CoolTracer. CoolTracer is a diagnostic logging component that is configurable and provides automatic log rotation. DEPLOYDIRNAMEMultiException should be used when the caller should be given multiple warning or error messages at one time. For example when validating user input there may be many reasons that the input is invalid. In this case all the validation messages can be gathered and returned to the caller using the DEPLOYDIRNAMEMultiException. An ID property is provided for each class as well as the corresponding serializable data class.

For security the class constructors will validate the user s security token. If the security token is valid the user s token and the BL assembly token will be put into the Credentials member variable. The Credentials member variable should be passed to all public DA methods. This information cannot be passed to the DA layer using the DA class constructor because only the default constructor with no arguments can be used when calling the DA methods over .NET Remoting. Furthermore each method should validate that the caller has sufficient permissions to perform the requested action. Methods that will be called by the UT monitor script should also allow the UT assembly token to call those methods.

In general data access classes should inherit from the BaseDA class. Each public method should require a Credentials parameter.

For security each DA method should validate the calling assembly s token. This token is passed via a Credentials structure. The BaseDA s ValidateCaller function is called to do this. By default ValidateCaller allows the BL and RM assemblies to make calls. The BL assembly is allowed to call DA methods because the BL assembly has already authorized the user s permissions to perform each action. The RM assembly is allowed to call DA methods because of the monitor script that is required in the remoting host . If the user s information is required for security or auditing reasons the user should use the token on the Credentials parameter. In most cases it is not necessary to revalidate the user s permissions. This should be done in the BL layer . However if the logic is sensitive it would be prudent to recheck the user s access anyway.

Because the DA classes are running in a .NET Remoting site debugging does not behave in the exemplary embodiment as normally might be expected. There are several ways to get around this behavior. A break point could be set in a public method on the DA even if the developer wants to stop four levels deep in private functions . The developer can temporarily disable .NET Remoting by inserting bad information into the web.config file on the RM site i.e. invalid XML .

The client side and server side remoting configuration files are generated. The call for Application Configuration to configure remoting is in the p Initialize method in the BaseBL class. CoolMonitor is used for the output of the monitor script.

There are four tabs in the development utilities UT Settings BL Settings DA Settings and RM Settings. Each tab has a text box that correlates to the default settings included in the settings files in the assembly projects. In the code behind the form there is a constant called ASSEMBLY PATH UT. It is defaulted to DEVELOPMENTPATH ASSEMBLYNAMEUI Bin e.g. C Company Apps PoleDesign ScDistPoleDesignUl . Before using DevUtils the string must reflect which Configuration mode the projects are being built in. If set to debug then Debue should be added to the string. If the mode is Release then Release should be added to the string. DevUtils uses the configuration mode to determine the location of the compiled user interface.

If the application is a Windows application then the UT Settings are handled a little differently. Since the UI is an exe it cannot be referenced by DevUtils. To be able to generate UI Settings there is a UserinterfaceSettings file in the DevUtils project that is used. When settings are added to the UserinterfaceSettings class in the UI they must also be added to the UserinterfaceSettings in DevUtils. Otherwise the settings will not be generated correctly.

An exemplary code generator user interface solution level screen is illustrated in . The normal usage flow uses the following steps 

In order to validate the solution a system name development and deploy directory name are required. At least one class must have been added.

The class model tree view can be displayed by the physical layer of the classes and by the logical class. Displaying them by the physical layer is the default. illustrates a physical layer view of the classes. presents a logical class view. The Show classes by radio buttons shown in are used to change between physical layer and logical class views.

The current implementation of the exemplary embodiment does not provide a way to edit a class once it has been added. A class can be removed using the Remove Class button and then added back with the changes.

When the Add Class button is selected on the Code Generator User Interface screen the developer is presented with the class builder screen. illustrates a class builder screen in an exemplary embodiment of the invention. The normal usage flow uses the following steps 

The code generator tool of the present invention has been described as a computer implemented process. It is important to note however that those skilled in the art will appreciate that the mechanisms of the present invention are capable of being distributed as a program product in a variety of forms and that the present invention applies regardless of the particular type of signal bearing media utilized to carry out the distribution. Examples of signal bearing media include without limitation recordable type media such as diskettes or CD ROMs and transmission type media such as analog or digital communications links.

The corresponding structures materials acts and equivalents of all means plus function elements in any claims below are intended to include any structure material or acts for performing the function in combination with other claim elements as specifically claimed.

Those skilled in the art will appreciate that many modifications to the preferred embodiment of the present invention are possible without departing from the spirit and scope of the present invention. In addition it is possible to use some of the features of the present invention without the corresponding use of other features. Accordingly the foregoing description of the preferred embodiment is provided for the purpose of illustrating the principles of the present invention and not in limitation thereof since the scope of the present invention is defined solely by the appended claims.

