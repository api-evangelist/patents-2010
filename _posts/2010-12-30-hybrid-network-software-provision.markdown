---

title: Hybrid network software provision
abstract: Various example embodiments are methods and devices for providing an application from at least one remote machine to at least one local machine. The local machine may execute a local executable that has access to local resources of the computer device. The local machine may also execute a browser configured to communicate with the at least one remote machine through a firewall. A connection may be generated between the browser and the local executable. The local machine may download code for implementing a portion of the application from the at least one remote machine through the firewall. The code may be executed in the browser. The browser may generate an instruction directing the local executable to act on the local resources of the computer device. The instruction may be communicated to the local executable via the connection. The local executable may act on the local resources of the computer device in response to the instruction and return to the browser results of the action on the local resources.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09106514&OS=09106514&RS=09106514
owner: SPIRENT COMMUNICATIONS, INC.
number: 09106514
owner_city: Sunnyvale
owner_country: US
publication_date: 20101230
---
Computer software applications are provided to users according to various different models. With a packaged application model applications are executed directly by a local machine. Executables and other data or files making up the application are installed to the local machine from a network or from a disk. Once installed the application executes locally and typically has access to the resources of the local machine including local data. Data processed by the application is also stored locally either at the local machine itself or at other machines that are part of a common secured network e.g. a company or organizational network . Packaged applications are local machine specific. Accordingly an organization must purchase a license for each local machine that will execute the application regardless of the number of users or the frequency of use. Also any updates improvements bug fixes or new versions of the packaged applications must be directly installed to each local machine. This limits the degree to which packaged applications can be practically maintained and upgraded.

Cloud computing provides an alternative application hosting paradigm that is often called software as a service SaaS . According to cloud computing or SaaS techniques software applications are executed by remote servers. Local machines access the remote servers and the applications via a network such as the Internet. The local machines execute a client interface e.g. either a standard web browser or a dedicated client program that gives the local machines access to the remotely executed SaaS application . Due to the nature of SaaS changes made to an application at the remote servers are distributed to all local users and machines without the need to specifically load new data files to each local machine. This makes it easier for providers and developers to generate and distribute new features as well as standard bug fixes and other improvements. Because SaaS applications are hosted remotely however it is necessary for data processed by the application to be either transmitted to and or accessible to the remote servers which are located outside of the local machine and usually outside of a secure network. This creates a strong disincentive for using cloud computing and or SaaS for processing that involves sensitive data. Also depending on the implementation SaaS applications require the local execution of dedicated plug ins in order to access local resources such as printers speakers etc. This further complicates the use of SaaS applications in some environments.

Various example embodiments are directed to systems and methods for delivering an application to a local side comprising one or more local machines. High level functionality of the application may be hosted by a remote side or cloud. The remote side may comprise one or more remote machines e.g. a cloud . Lower level functionality of the application may be handled by a local side. The local side may comprise one or more local machines which may be in communication with one another e.g. via a local network. . For example the local side may be or comprise a network implemented by a company enterprise or other organization. The local and remote sides may be in communication with one another e.g. via a wide area network such as the Internet . In various example embodiments the local side may utilize a firewall to block some or all forms of communication with the remote side.

The high level functionality of the application hosted by the remote side may include for example basic functionality defining the general utility of the application. The lower level functionality hosted by the local side may comprise functions for accessing and manipulating local resources including local data. For example in various embodiments the application may be designed to capture and or analyze communications packets e.g. Internet protocol or IP packets . In these example embodiments the high level functionality hosted by the remote side may define for example analyses that may be performed on packet captures searches for identifying packets having certain characteristics operations for generating synthetic network traffic based on packet captures a user interface for presenting the results of other operations etc. The lower level functionality may actually operate on the packets and packet captures e.g. local resources . For example the lower level functionality may define operations used to implement the high level functionality on packets and packet captures present on the local side e.g. local data . The division between high and lower level functionality may be similar for applications directed to other computing tasks. For example when the application is directed to a word processor the high level functionality may involve different fonts macros formatting arrangements spell checkers etc. The lower level functionality may have access to local storage to identify document files to be opened perform actual modifications to stored document files etc. The respective high and low level functionalities may but need not be application specific. For example low level functionality hosted on the local side may be used with more than one application or application type.

Access to the application from the local machine may be facilitated by a local executable and a browser. The local executable may be implemented by the local machine and or another machine on the local network. The local executable may comprise a single executable file or in some example embodiments may comprise additional executable and or non executable files. For example non executable files may include .dll files or other files comprising data supporting one or more executable files. In various example embodiments the local executable may comprise a function set with functions for accessing and or manipulating local resources. The function set may be accessed externally by calling one or more specific functions through an application programming interface API . In addition to the function set and the API the local executable may provide an interface for making the API accessible to outside applications and or other executables. The interface may be secure and in various example embodiments may limit API access to applications and or executables running on the local machine itself and or running on other machines that are part of the local network e.g. machines behind the firewall . In some example embodiments the interface may comprise web server functionality capable of forming a secure connection via hypertext transfer protocol HTTP HTTPS and or any other suitable protocol.

The browser may serve as a link between the remote side and the local executable. For example in various embodiments the browser may allow the remote side to provide instructions to the local executable without providing the remote side with direct control over or access to local resources. The browser itself may be executed locally by the local machine or another machine on the local network. In various example embodiments the browser may be a web browser another type of browser and or a dedicated custom package. In some example embodiments the browser may form a secure connection with the local executable. Instructions from the remote side representing the high level functionality of the application may be received by the browser in the form of generally executable code. In various example embodiments the generally executable code may be executed without regard to hardware operating system or other machine specific parameters. For example the generally executable code may be in the form of a scripting language such as JAVASCRIPT.

In various example embodiments the generally executable code may be executed by the local machine or other local device within the context of the browser. For example the browser may limit the execution of the code to prevent it from accessing local resources including local data except through the browser. When the generally executable code needs to access local resources it may generate instructions to the local executable. The instructions may be passed to the local executable by the browser e.g. via the secure connection between the browser and the local executable . Accordingly the high level functionality of the application may be provided through the cloud while lower level access to and manipulation of local resources may be handled by the local executable. In this manner a provider of the application may be able to update the application to fix bugs and or add new features without the need to modify application executables or other files on every local machine that accesses the application. Also sensitive local data and other local resources may remain inaccessible and or transparent to the cloud.

The browser may be in communication with the remote side through the firewall as indicated by arrows . In some example embodiments the firewall may be configured to allow packet traffic on one or more ports utilized by the browser to access the remote side as indicated by arrows . For example in some configurations the firewall may be configured to allow communications to and from the browser on port . Communication between the local application and the remote side on the other hand may be blocked by the firewall . For example the local application may be prevented from communicating with any ports utilized by the browser . Further any ports that could potentially be used for communication between the local application and the remote side may be blocked as indicated by blocked arrow . In this manner remote machines on the remote side may be prevented from directly contacting the local application and therefore may be prevented from directly accessing the local resources .

Local executable may be in communication with the local resources in a manner similar to the way that of local application . The local executable may also implement an application programming interface API . The API may define a function set of the local executable and enable the function set to be called by external applications such as the browser as described below. In addition to the API the local executable may also implement an interface illustrated as a web server in . The interface may allow access to the API and in various example embodiments may limit access to the API according to predefined parameters. For example in some embodiments the interface may limit access to the API to applications hosted on the local side such as the browser . The interface and the browser may form a connection allowing the browser to provide instructions to the local executable according to the API . In various example embodiments the connection may be secure. For example the connection may be configured according to any secure and or encrypted communication standard including for example Secure Sockets Layer SSL dual key encryption etc.

In the example configuration shown in the browser may access an application hosted on the remote side . When the remotely hosted application needs to access and or manipulate local resources the browser may generate an instruction to the local executable . The form of the instruction may be defined by the API . The instruction may be passed from the browser to the local executable via the connection . A return to the instruction may be provided by the local executable to the browser .

The remote side may receive the request at . Upon receipt of the request the remote side may transmit generally executable code to the browser . The code again may be transmitted across the firewall . In various example embodiments the remote side may ensure that the local side is entitled to run the application prior to sending the generally executable code. For example the remote side may determine whether the local side and or a specific local machine has a license to the application whether certain licenses are or are not in use etc. The generally executable code may be any sort of code that may be executed without regard to hardware operating system or other machine specific parameters. For example the generally executable code may be organized according to a scripting language such as ECMCASCRIPT JAVASCRIPT JSCRIPT ACTIONSCRIPT etc. The code may define the high level functionality of the application.

In some example embodiments the code need not be generally executable and instead may be or may include a hardware specific executable. For example the remote side may store multiple versions of the code with each version corresponding to a hardware configuration of potential local machines . Also although the process flow shows the browser initiating access to the application in some example embodiments the remote side may initiate access to the application. For example the application may be configured to perform certain tasks at prescheduled times. Examples of such application example embodiments may include applications for testing communications traffic applications that scan for viruses or other malware applications for executing packet captures at certain intervals etc. At the browser may receive the generally executable code .

At and the browser and local executable may generate the connection . The connection as described above may be secure. It will be appreciated that the connection may be initiated by either the browser or the local executable . The process flow shows the initiation of the connection after the browser receives the code from the remote side . In various example embodiments however the connection may be formed prior to requesting application access prior to receiving the code or at any other suitable time.

At the browser may execute the generally executable code . In some example embodiments the generally executable code may be executed by the browser within the browser . In this manner the browser may limit the execution of the generally executable code and prevent it from accessing the local resources . During execution the generally executable code may have need to access the local resources . For example in the context of an application for capturing and or analyzing communications packets the generally executable code may define various operations and analyses to be performed on communications packets. The code executed within the browser however may not have direct access to the communications packets which may be a local resource of the local side . Accordingly the code may generate and or cause the browser to generate a resource request to the local executable . The resource request may be of any suitable form. For example in various embodiments the resource request may be transmitted via the interface to the API as a padded JavaScript Object Notation JSONP object.

At the local executable may access and or manipulate a local resource in accordance with the resource request . For example when the application is directed to capturing and or analyzing communications packets the resource request may call a function of the local executable causing the local executable to return an indication of packet captures pcap s present at local storage. Another type of resource request may call a function of the local executable causing the local executable to modify a pcap and or generate a report including details of a pcap at local storage. Results of the action of the local executable may be returned to the browser e.g. executing the code at . At the browser may process the result . For example in some embodiments the code may include functionality for presenting a user interface to a user on the local side utilizing the result .

At the browser may request access to the application. The request may take any suitable form including for example the forms described above with respect to the request . At the remote side may receive the request. Provided that the local side and or the specific local machine is authorized to access the application the remote side may execute the application e.g. the high level functionality of the application at . At the high level functionality executed on the remote side may generate a request to access a local resource . The request may be provided to the browser which may pass the request to the local executable at . In various example embodiments the browser may manipulate the request prior to sending it to the executable . For example the browser may analyze the request and in some example embodiments may screen the request for security violations. At the local executable may access and or manipulate a local resource for example as described above. Also prior to sending the request the connection secure or otherwise may be formed between the browser and the local executable for example as described above and shown at and . At the local executable may return results of the access and or manipulation of local resources at . The browser may process the result at . For example in some example embodiments the high level functionality executed by the remote side may provide the browser with templates and or other information for presenting the result in a user interface at the local machine . In various example embodiments the results of processing local resources may not be sent back to the remote side . In this manner local resources and permutations thereof may not be sent beyond the firewall enhancing security.

As described above various example embodiments of the application described herein may be utilized to capture and or analyze packet traffic on a network. For example the application may be configured to act on local resources e.g. local data to capture communications packets perform different analyses of captured packets perform searches identifying packets having certain characteristics present a user interface showing the results of captures searches analyses etc. In various example embodiments the application may also generate synthetic network traffic e.g. test packets based on captured packets. The synthetic network traffic may be utilized for example to test a network or network application for security load performance operability interoperability etc. Example applications for performing tasks such as these are described for example in commonly assigned U.S. patent application Ser. No. 12 234 450 entitled Test Driven Deployment and Monitoring of Heterogeneous Network Systems filed on Sep. 19 2008 and incorporated herein by reference in its entirety.

Different computer systems such as local machines on the local side and remote machines on the remote side are described herein as communicating with one another. It will be appreciated that this communication may take place in any suitable method. For example in some example embodiments some or all of the computer systems described herein may be in communication with one another via a network or networks. The network or networks may operate according to any suitable wired or wireless communication protocol and may utilize any suitable hardware or software. In some example embodiments the network or networks may include a wide area network WAN such as the Internet a local area network LAN etc.

When communications between the machines take place over the Internet or other public network it will be appreciated that these communications may be encrypted. For example one or more of the systems may utilize an asymmetric or public key infrastructure PKI method. According to a PKI system each system may have a public key that may be used for encrypting messages and a private key that may be used for decryption. The public key may be provided to any systems having need to send data to the first system. The data may be encrypted with the public key such that it may only be decrypted with the private key which may be kept secret by the receiving system. In this manner all communications between the various systems may be decrypted only by their intended recipients.

The examples presented herein are intended to illustrate potential and specific implementations of the present invention. It can be appreciated that the examples are intended primarily for purposes of illustration of the invention for those skilled in the art. No particular aspect or aspects of the examples are necessarily intended to limit the scope of the present invention. For example no particular aspect or aspects of the examples of system architectures methods or processing structures described herein are necessarily intended to limit the scope of the invention. Also while specific testing applications have been described herein it will be appreciated that the applications provided according to the description herein may include other testing applications as well as non testing applications such as word processors virus scanning software etc.

It is to be understood that the figures and descriptions of the present invention have been simplified to illustrate elements that are relevant for a clear understanding of the present invention while eliminating for purposes of clarity other elements. Those of ordinary skill in the art will recognize however that these sorts of focused descriptions would not facilitate a better understanding of the present invention and therefore a more detailed description of such elements is not provided herein.

Moreover the processes associated with the present example embodiments may be executed by programmable equipment such as computers. Software or other sets of instructions that may be employed to cause programmable equipment to execute the processes. The processes may be stored in any storage device such as for example a computer system non volatile memory an optical disk magnetic tape or magnetic disk. Furthermore some of the processes may be programmed when the computer system is manufactured or via a computer readable memory medium.

It can also be appreciated that certain process aspects described herein may be performed using instructions stored on a computer readable memory medium or media that direct a computer or computer system to perform process steps. A computer readable medium may include for example any non transitory media such as for example memory devices such as diskettes compact discs of both read only and read write varieties optical disk drives and hard disk drives. A computer readable medium may also include memory storage that may be physical virtual permanent temporary semi permanent and or semi temporary. It will be appreciated that the term non transitory refers to the medium and not to any data stored thereon. For example a random access memory RAM is non transitory although the data stored thereon may change regularly.

A computer machine computer device host engine or processor may be for example and without limitation a processor microcomputer minicomputer server mainframe laptop personal data assistant PDA wireless e mail device cellular phone pager processor fax machine scanner or any other programmable device configured to transmit and or receive data over a network. Computer systems and computer based devices disclosed herein may include memory for storing certain software applications used in obtaining processing and communicating information. It can be appreciated that such memory may be internal or external with respect to operation of the disclosed example embodiments. The memory may also include any means for storing software including a hard disk an optical disk floppy disk ROM read only memory RAM random access memory PROM programmable ROM EEPROM electrically erasable PROM and or other computer readable memory media.

In various example embodiments of the present invention a single component may be replaced by multiple components and multiple components may be replaced by a single component to perform a given function or functions. Except where such substitution would not be operative to practice embodiments of the present invention such substitution is within the scope of the present invention. Any of the servers or computer systems described herein for example may be replaced by a server farm or other grouping of networked servers e.g. a group of server blades that are located and configured for cooperative functions. It can be appreciated that a server farm may serve to distribute workload between among individual components of the farm and may expedite computing processes by harnessing the collective and cooperative power of multiple servers. Such server farms may employ load balancing software that accomplishes tasks such as for example tracking demand for processing power from different machines prioritizing and scheduling tasks based on network demand and or providing backup contingency in the event of component failure or reduction in operability.

Various example embodiments of the systems and methods described herein may employ one or more electronic computer networks to promote communication among different components transfer data or to share resources and information. Such computer networks can be classified according to the hardware and software technology that is used to interconnect the devices in the network such as optical fiber Ethernet wireless LAN HomePNA power line communication or G.hn. The computer networks may also be embodied as one or more of the following types of networks local area network LAN metropolitan area network MAN wide area network WAN virtual private network VPN storage area network SAN or global area network GAN among other network varieties.

For example a WAN computer network may cover a broad area by linking communications across metropolitan regional or national boundaries. The network may use routers and or public communication links. One type of data communication network may cover a relatively broad geographic area e.g. city to city or country to country which uses transmission facilities provided by common carriers such as telephone service providers. In another example a GAN computer network may support mobile communications across multiple wireless LANs or satellite networks. In another example a VPN computer network may include links between nodes carried by open connections or virtual circuits in another network e.g. the Internet instead of by physical wires. The link layer protocols of the VPN can be tunneled through the other network. One VPN application can promote secure communications through the Internet. The VPN can also be used to separately and securely conduct the traffic of different user communities over an underlying network. The VPN may provide users with the virtual experience of accessing the network through an IP address location other than the actual IP address which connects the access device to the network.

Computer networks may include hardware elements to interconnect network nodes such as network interface cards NICs or Ethernet cards repeaters bridges hubs switches routers and other like components. Such elements may be physically wired for communication and or data connections may be provided with microwave links e.g. IEEE 802.12 or fiber optics for example. A network card network adapter or NIC can be designed to allow computers to communicate over the computer network by providing physical access to a network and an addressing system through the use of MAC addresses for example. A repeater can be embodied as an electronic device that receives and retransmits a communicated signal at a boosted power level to allow the signal to cover a telecommunication distance with reduced degradation. A network bridge can be configured to connect multiple network segments at the data link layer of a computer network while learning which addresses can be reached through which specific ports of the network. In the network the bridge may associate a port with an address and then send traffic for that address only to that port. In various example embodiments local bridges may be employed to directly connect local area networks LANs remote bridges can be used to create a wide area network WAN link between LANs and or wireless bridges can be used to connect LANs and or to connect remote stations to LANs.

In various example embodiments a hub may be employed which contains multiple ports. For example when a data packet arrives at one port of a hub the packet can be copied unmodified to all ports of the hub for transmission. A network switch or other devices that forward and filter OSI layer 2 datagrams between ports based on MAC addresses in data packets can also be used. A switch can possess multiple ports such that most of the network is connected directly to the switch or another switch that is in turn connected to a switch. The term switch can also include routers and bridges as well as other devices that distribute data traffic by application content e.g. a Web URL identifier . Switches may operate at one or more OSI model layers including physical data link network or transport i.e. end to end . A device that operates simultaneously at more than one of these layers can be considered a multilayer switch. In certain example embodiments routers or other like networking devices may be used to forward data packets between networks using headers and forwarding tables to determine an optimum path through which to transmit the packets.

As employed herein an application server may be a server that hosts an API such as the API to expose business logic and business processes for use by other applications. Examples of application servers include J2EE or Java EE 5 application servers including WebSphere Application Server. Other examples include WebSphere Application Server Community Edition IBM Sybase Enterprise Application Server Sybase Inc WebLogic Server BEA JBoss Red Hat JRun Adobe Systems Apache Geronimo Apache Software Foundation Oracle OC4J Oracle Corporation Sun Java System Application Server Sun Microsystems and SAP Netweaver AS ABAP Java . Also application servers may be provided in accordance with the .NET framework including the Windows Communication Foundation .NET Remoting ADO.NET and ASP.NET among several other components. For example a Java Server Page JSP is a servlet that executes in a web container which is functionally equivalent to CGI scripts. JSPs can be used to create HTML pages by embedding references to the server logic within the page. The application servers may mainly serve web based applications while other servers can perform as session initiation protocol servers for instance or work with telephony networks. Specifications for enterprise application integration and service oriented architecture can be designed to connect many different computer network elements. Such specifications include Business Application Programming Interface Web Services Interoperability and Java EE Connector Architecture.

Any patent publication or other disclosure material in whole or in part that is said to be incorporated by reference herein is incorporated herein only to the extent that the incorporated materials does not conflict with existing definitions statements or other disclosure material set forth in this disclosure. As such and to the extent necessary the disclosure as explicitly set forth herein supersedes any conflicting material incorporated herein by reference. Any material or portion thereof that is said to be incorporated by reference herein but which conflicts with existing definitions statements or other disclosure material set forth herein will only be incorporated to the extent that no conflict arises between that incorporated material and the existing disclosure material.

While various example embodiments of the invention have been described herein it should be apparent however that various modifications alterations and adaptations to those embodiments may occur to persons skilled in the art with the attainment of some or all of the advantages of the present invention. The disclosed example embodiments are therefore intended to include all such modifications alterations and adaptations without departing from the scope and spirit of the present invention as set forth in the appended claims.

