---

title: Method and apparatus for associating data loss protection (DLP) policies with endpoints
abstract: A method of policy management in a Data Loss Prevention (DLP) system uses a policy model that associates a user with one or more DLP endpoints. When an endpoint is added to the system, a set of policies for that endpoint are determined using an identity of the user that is associated with the endpoint and a list of roles or groups for that user. At policy distribution time, the method determines a set of endpoints to which the policy is to be distributed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09311495&OS=09311495&RS=09311495
owner: International Business Machines Corporation
number: 09311495
owner_city: Armonk
owner_country: US
publication_date: 20101209
---
This disclosure relates generally to identifying and managing user operations with respect to sensitive information e.g. intellectual property personally identifiable information and the like .

Data Loss Prevention DLP systems are well known in the prior art and operate generally to identify monitor use of and to control user operations on sensitive information within an enterprise computing environment. Typically DLP systems provide a policy based mechanism for managing how data is discovered and classified on a user s workstation or file server also known as an endpoint. Policies must be distributed to and enforced on each endpoint. Existing DLP solutions typically use of a few approaches to how these policies are distributed to endpoints.

In one approach all policies are distributed to all systems. This approach does not scale for enterprise deployments where the DLP system will be used to meet requirements for different types of sensitive content with different types of acceptable use for subsets of the user population. As an example it is perhaps expected to find design documents and source code on an endpoint owned by a software developer but not on an endpoint owned by someone in the Human Resources department.

In another approach policies are selectively distributed based on characteristics of the endpoint system. Those characteristics might include MAC address IP address DNS domain geographic location or the like. This approach is not always suitable with a mobile workforce or when users with the same role in an organization are geographically dispersed. Moreover government and corporate regulations that drive the acquisition of DLP solutions require being able to relate sensitive data access to an individual.

In yet another approach policies are selectively distributed based on the type of policy enforcement point. Policy management systems often provide a way to distribute different policies to different types of policy decision points or policy enforcement points. For example the IBM Tivoli Security Policy Manager provides a mechanism whereby non DLP policies can be distributed to network devices such as IBM WebSphere DataPower appliances as well as content management systems such as Microsoft SharePoint and application servers such as IBM WebSphere Application Server . This model is well suited to server based enforcement systems but is of more limited use in the endpoint case.

While these approaches are valid and useful and can produce workable systems they have limitations that impact on the utility of a DLP solution.

It is desired to provide enhanced techniques for associating data loss protection policies with endpoints that addresses the above described deficiencies.

A policy based mechanism for a Data Loss Prevention DLP system includes an identity centric method for associating data loss protection policies with endpoints on which those policies need to be used. In general a set of policies applicable to an endpoint is determined based on a combination of identity and endpoint characteristics.

In one embodiment a method of policy management in a DLP system begins by defining a policy model that associates a user with one or more endpoints and wherein the user is associated with at least one role or group. According to the method when an endpoint is added to the system a set of policies for that endpoint are determined using an identity of the user that is associated with the endpoint and a list of roles or groups for that user. In particular the set of policies for the endpoint are determined by identifying the user owning or responsible for the endpoint retrieving a list of roles or groups for that user and then defining the set of policies for that endpoint as the policies that reference each role or group to which the user is associated. At policy distribution time the method determines a set of endpoints to which the policy is to be distributed. In particular the set of endpoints to which the policy is to be distributed begins by generates an endpoint set. The endpoint set is then populated as follows. For each role or group that is a target of the policy the method identifies each user associated with the role or group. Then for each user associated with the role or group the method identifies a list of one or more endpoints with which the user is associated. The one or more endpoints from the list are then added into the endpoint set. After the endpoint list for the policy is calculated the policy and its associated endpoint list are added to a policy distribution list which identifies one or more policies that are then distributed to the endpoints using conventional means.

In an alternative embodiment the above described method is performed in a DLP policy management apparatus. The apparatus comprises a processor and computer memory that holds computer program instructions executed by the processor to carry out the method.

In another alternative embodiment the above described method is performed by a computer program product in a computer readable medium for use in a DLP system. The computer program product holds computer program instructions which when executed by the data processing system perform the method.

The foregoing has outlined some of the more pertinent features of the invention. These features should be construed to be merely illustrative. Many other beneficial results can be attained by applying the disclosed invention in a different manner or by modifying the invention as will be described.

With reference now to the drawings and in particular with reference to exemplary diagrams of data processing environments are provided in which illustrative embodiments of the disclosure may be implemented. It should be appreciated that are only exemplary and are not intended to assert or imply any limitation with regard to the environments in which aspects or embodiments of the disclosed subject matter may be implemented. Many modifications to the depicted environments may be made without departing from the spirit and scope of the present invention.

With reference now to the drawings depicts a pictorial representation of an exemplary distributed data processing system in which aspects of the illustrative embodiments may be implemented. Distributed data processing system may include a network of computers in which aspects of the illustrative embodiments may be implemented. The distributed data processing system contains at least one network which is the medium used to provide communication links between various devices and computers connected together within distributed data processing system . The network may include connections such as wire wireless communication links or fiber optic cables.

In the depicted example server and server are connected to network along with storage unit . In addition clients and are also connected to network . These clients and may be for example personal computers network computers or the like. In the depicted example server provides data such as boot files operating system images and applications to the clients and . Clients and are clients to server in the depicted example. Distributed data processing system may include additional servers clients and other devices not shown.

In the depicted example distributed data processing system is the Internet with network representing a worldwide collection of networks and gateways that use the Transmission Control Protocol Internet Protocol TCP IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high speed data communication lines between major nodes or host computers consisting of thousands of commercial governmental educational and other computer systems that route data and messages. Of course the distributed data processing system may also be implemented to include a number of different types of networks such as for example an intranet a local area network LAN a wide area network WAN or the like. As stated above is intended as an example not as an architectural limitation for different embodiments of the disclosed subject matter and therefore the particular elements shown in should not be considered limiting with regard to the environments in which the illustrative embodiments of the present invention may be implemented.

With reference now to a block diagram of a data processing system is shown in which illustrative embodiments may be implemented. Data processing system is an example of a computer such as server or client in in which computer usable program code or instructions implementing the processes may be located for the illustrative embodiments. In this illustrative example data processing system includes communications fabric which provides communications between processor unit memory persistent storage communications unit input output I O unit and display .

Processor unit serves to execute instructions for software that may be loaded into memory . Processor unit may be a set of one or more processors or may be a multi processor core depending on the particular implementation. Further processor unit may be implemented using one or more heterogeneous processor systems in which a main processor is present with secondary processors on a single chip. As another illustrative example processor unit may be a symmetric multi processor system containing multiple processors of the same type.

Memory and persistent storage are examples of storage devices. A storage device is any piece of hardware that is capable of storing information either on a temporary basis and or a permanent basis. Memory in these examples may be for example a random access memory or any other suitable volatile or non volatile storage device. Persistent storage may take various forms depending on the particular implementation. For example persistent storage may contain one or more components or devices. For example persistent storage may be a hard drive a flash memory a rewritable optical disk a rewritable magnetic tape or some combination of the above. The media used by persistent storage also may be removable. For example a removable hard drive may be used for persistent storage .

Communications unit in these examples provides for communications with other data processing systems or devices. In these examples communications unit is a network interface card. Communications unit may provide communications through the use of either or both physical and wireless communications links.

Input output unit allows for input and output of data with other devices that may be connected to data processing system . For example input output unit may provide a connection for user input through a keyboard and mouse. Further input output unit may send output to a printer. Display provides a mechanism to display information to a user.

Instructions for the operating system and applications or programs are located on persistent storage . These instructions may be loaded into memory for execution by processor unit . The processes of the different embodiments may be performed by processor unit using computer implemented instructions which may be located in a memory such as memory . These instructions are referred to as program code computer usable program code or computer readable program code that may be read and executed by a processor in processor unit . The program code in the different embodiments may be embodied on different physical or tangible computer readable media such as memory or persistent storage .

Program code is located in a functional form on computer readable media that is selectively removable and may be loaded onto or transferred to data processing system for execution by processor unit . Program code and computer readable media form computer program product in these examples. In one example computer readable media may be in a tangible form such as for example an optical or magnetic disc that is inserted or placed into a drive or other device that is part of persistent storage for transfer onto a storage device such as a hard drive that is part of persistent storage . In a tangible form computer readable media also may take the form of a persistent storage such as a hard drive a thumb drive or a flash memory that is connected to data processing system . The tangible form of computer readable media is also referred to as computer recordable storage media. In some instances computer recordable media may not be removable.

Alternatively program code may be transferred to data processing system from computer readable media through a communications link to communications unit and or through a connection to input output unit . The communications link and or the connection may be physical or wireless in the illustrative examples. The computer readable media also may take the form of non tangible media such as communications links or wireless transmissions containing the program code. The different components illustrated for data processing system are not meant to provide architectural limitations to the manner in which different embodiments may be implemented. The different illustrative embodiments may be implemented in a data processing system including components in addition to or in place of those illustrated for data processing system . Other components shown in can be varied from the illustrative examples shown. As one example a storage device in data processing system is any hardware apparatus that may store data. Memory persistent storage and computer readable media are examples of storage devices in a tangible form.

In another example a bus system may be used to implement communications fabric and may be comprised of one or more buses such as a system bus or an input output bus. Of course the bus system may be implemented using any suitable type of architecture that provides for a transfer of data between different components or devices attached to the bus system. Additionally a communications unit may include one or more devices used to transmit and receive data such as a modem or a network adapter. Further a memory may be for example memory or a cache such as found in an interface and memory controller hub that may be present in communications fabric .

Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Those of ordinary skill in the art will appreciate that the hardware in may vary depending on the implementation. Other internal hardware or peripheral devices such as flash memory equivalent non volatile memory or optical disk drives and the like may be used in addition to or in place of the hardware depicted in . Also the processes of the illustrative embodiments may be applied to a multiprocessor data processing system other than the SMP system mentioned previously without departing from the spirit and scope of the disclosed subject matter.

As will be seen the techniques described herein may operate in conjunction within the standard client server paradigm such as illustrated in in which client machines communicate with an Internet accessible Web based portal executing on a set of one or more machines. End users operate Internet connectable devices e.g. desktop computers notebook computers Internet enabled mobile devices or the like that are capable of accessing and interacting with the portal. Typically each client or server machine is a data processing system such as illustrated in comprising hardware and software and these entities communicate with one another over a network such as the Internet an intranet an extranet a private network or any other communications medium or link. A data processing system typically includes one or more processors an operating system one or more applications and one or more utilities. The applications on the data processing system provide native support for Web services including without limitation support for HTTP SOAP XML WSDL UDDI and WSFL among others. Information regarding SOAP WSDL UDDI and WSFL is available from the World Wide Web Consortium W3C which is responsible for developing and maintaining these standards further information regarding HTTP and XML is available from Internet Engineering Task Force IETF . Familiarity with these standards is presumed.

Although not meant to be limiting a representative data processing system in which the techniques of this disclosure are implemented is an appliance based data loss prevention DLP solution. DLP systems are well known and work to reduce the risk of sensitive data loss primarily at the network layer. As seen in a representative DLP solution comprises a set of distributed components typically arranged in a tiered architecture. Multiple policy sensors are placed around the network typically as rack based appliances software applications or the like and are designed to detect and or prevent data loss. Generally in an appliance based implementation an appliance may comprise a data processing system such as described in . The appliance includes a policy engine that works generally by capturing packets from the network reassembling the packets into sessions analyzing the information flow extracting content for analysis and performing content analysis to identify sensitive information. The appliance may use system defined or user defined policies where a policy represents a group of one or more rules. A rule typically is a logical combination of one or more triggers that are content based location based and or flow based. Sessions with policy violations are detected by the sensors and forwarded a central management console that distributes policies and collects and organizes alerts. A data store is used to store data and policies typically in a database. The central management console includes a web based graphical user interface GUI for management administration and reporting. As used herein the type of sensitive information protected by such a DLP solution may be quite varied. Typically such information includes without limitation intellectual property e.g. code designs documentation other proprietary information identity information e.g. personally identifiable information PII credit card information such as PCI related data health care information such as HIPAA related data finance information such as GLBA related data and the like. As also seen in the DLP solution is implemented across one or more endpoints .

DLP functionality may also be built into other enterprise systems such as an intrusion detection system IDS an intrusion protection system IPS network firewalls web gateways mail servers or relays enterprise content management systems or the like. Thus for example an IPS can monitor and detect attack traffic and DLP support can be added to perform outbound DLP protection and associated blocking of the transfer of sensitive content.

Thus in general a DLP system in which the subject matter herein is implemented provides a policy based mechanism for managing how data is discovered and classified on an endpoint workstation file server or other device within an enterprise. As used herein in general an endpoint is a data processing system such as described above in and that has an associated file system or equivalent data store . The endpoint may execute DLP software. As noted a representative endpoint is a data processing system that includes a DLP application that executes as software i.e. as a set of program instructions executed from computer memory by a processor. The DLP application is configurable according to a policy where the policy is created and managed in a central management console such as shown in . This is not a limitation however as a particular DLP policy may be implemented locally at the endpoint itself .

According to this disclosure an identity centric method is used to associate a data loss protection policy with an endpoint in a DLP system. The preferred technique implements a policy model that associates a pair of entities namely a user on the one hand and an endpoint on the other hand to enable identity to determine where to apply a DLP policy. By including the user relationship in the policy model the described approach enables the policy set that is distributed to and used on an endpoint to be changed when the responsible user changes or that user s role changes. In addition the explicit linkage of a policy to a user allows for auditing and compliance to be linked to an individual i.e. the actual user that accesses possesses or misuses the sensitive information.

Thus according to the technique which is now described a DLP system implements a policy model that uses an identity endpoint relationship for the purpose of policy distribution.

A policy model that underlies the subject matter herein is illustrated in . Preferably the policy model comprises a set of entities namely a DLP Policy entity a Role Group entity a User entity and an Endpoint entity . As noted above the policy model provides a significant advantage in that is associates a User and an Endpoint. This identity centric approach to associating a data loss protection policy with an endpoint provides significant advantages over the prior art. How an enterprise user of the DLP system in which the described policy model is implemented decides to make this association is discretionary although the following are several typical used cases that might be implemented. In the case of a single user laptop desktop or workstation the user associated with the endpoint may be the user who owns the endpoint or the user whom the organization considers to be responsible for the content on the system. In the case of a shared system such as a network file server the user associated with the endpoint may be the administrator of the IT system. Alternatively the user could be a responsible person in the line of business that uses the system. For example the user associated with a network file server for the Marketing Department might be the Vice President of Marketing. Of course these are just representative examples as a particular enterprise that implements the policy model through the techniques and systems disclosed herein may determine to define the user to endpoint association in its discretion.

According to this disclosure a first algorithm is used to determine a complete set of policies for a single endpoint. This complete set is referred to as a Policy Set. This algorithm takes the user who owns or is responsible for the endpoint and identifies a list of roles groups for that user. The Policy Set then identifies a set of policies that reference that role group. Thus the first algorithm is used to determine all of the policies that are applicable to a given endpoint. This algorithm may be used when an endpoint registers and requests policy.

When a new policy is created or when an existing policy is modified a second algorithm is used to determine which endpoints need to use that policy. Thus the second algorithm is used to determine the set of endpoints to which the policy should be distributed. This algorithm in effect walks the diagram in in the reverse direction. For a particular policy to be distributed this algorithm generates a list of endpoints that should receive the policy. In particular for each role group within a target of the policy the routine identifies each user who is member of the role group obtains the list of endpoints for which that user is responsible and adds those endpoints to the list of endpoints. The policy is then distributed to that set of endpoints using any convenient distribution mechanism. Although not meant to limit this disclosure the algorithms may be implemented in software as a set of computer program instructions executed by a processor within or in association with the central management console of . In the alternative a dedicated machine system program process utility or the like may be used for this purpose. Preferably the identity centric approach is implemented within the central management console e.g. using data stored in the data store and the resulting policy is distributed from the central management console to the endpoints where it is enforced according to known DLP techniques.

The Policy Distribution List thus includes the endpoint set associated with one or more policies to be distributed to the endpoints. Each policy in the Policy Distribution List is then distributed to the endpoints in its associated endpoint set. The mechanism for distributing the policies to the endpoints may comprise known network protocols and delivery techniques. Such techniques may include without limitation WS Notification WS Metadata Exchange protocols a SOAP based web service a RESTful web service and the like. The policy distribution mechanism is not part of this disclosure.

The DLP Policy entity may be a single entity or it may be a combination of other existing entities in a policy management system. The particular composition of a DLP Policy entity is not a limitation and is not an aspect of this disclosure. The Role Group entity is similar to the construct used in security policy management systems wherein the Role or Group construct may have varying definitions. Thus in one known approach the Role entity is abstract while the Group entity is native to the Information Technology IT system such as an LDAP directory. In these systems some mapping from Role to Group or User typically is required. In other known policy management systems terms such as Role and Group are both native in the IT system in yet other systems the terms Role and Group are used interchangeably. More advanced role management systems may also enable hierarchical roles e.g. a surgeon role defined within a clinician role as well as Boolean relationships between or among roles e.g. everyone except software developers or manager with the sales department and so forth . The policy model in this disclosure is applicable to all of these types of systems. In particular the policy model may be implemented using a Role Group entity that applies to any such approaches or conventions. For convenience the different types of role group entity conventions may be referred to herein as a single management entity. Moreover the association from Role Group to User through whatever means is not considered an aspect of this disclosure as any of the above described approaches may be used.

The subject matter described herein has many advantages. The approach reduces network bandwidth requirements for distributing policies to a diverse set of endpoints. It provides improved efficiency of policy use on endpoints because only relevant policies will be present on a given endpoint. Moreover the identity centric nature of the DLP policy facilitates identity centric auditing reporting and compliance which is often an important business driver for deploying a DLP solution.

The functionality described above may be implemented as a standalone approach e.g. a software based function executed by a processor or it may be available as a managed service including as a web service via a SOAP XML interface . The particular hardware and software implementation details described herein are merely for illustrative purposes are not meant to limit the scope of the described subject matter.

More generally computing devices within the context of the disclosed invention are each a data processing system such as shown in comprising hardware and software and these entities communicate with one another over a network such as the Internet an intranet an extranet a private network or any other communications medium or link. The applications on the data processing system provide native support for Web and other known services and protocols including without limitation support for HTTP FTP SMTP SOAP XML WSDL UDDI and WSFL among others. Information regarding SOAP WSDL UDDI and WSFL is available from the World Wide Web Consortium W3C which is responsible for developing and maintaining these standards further information regarding HTTP FTP SMTP and XML is available from Internet Engineering Task Force IETF . Familiarity with these known standards and protocols is presumed.

The scheme described herein may be implemented in or in conjunction with various server side architectures including simple n tier architectures web portals federated systems and the like. The techniques herein may be practiced in a loosely coupled server including a cloud based environment.

Still more generally the subject matter described herein can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the function is implemented in software which includes but is not limited to firmware resident software microcode and the like. Furthermore as noted above the DLP policy association functionality described herein can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any apparatus that can contain or store the program for use by or in connection with the instruction execution system apparatus or device. The medium can be an electronic magnetic optical electromagnetic infrared or a semiconductor system or apparatus or device . Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD. The computer readable medium is a tangible item.

The computer program product may be a product having program instructions or program code to implement one or more of the described functions. Those instructions or code may be stored in a computer readable storage medium in a data processing system after being downloaded over a network from a remote data processing system. Or those instructions or code may be stored in a computer readable storage medium in a server data processing system and adapted to be downloaded over a network to a remote data processing system for use in a computer readable storage medium within the remote system.

In a representative embodiment the algorithms described above are implemented in a special purpose computer preferably in software executed by one or more processors. The software is maintained in one or more data stores or memories associated with the one or more processors and the software may be implemented as one or more computer programs. Collectively this special purpose hardware and software comprises or supplements an existing DLP solution.

The DLP central management console exposes one or more web based interfaces that may be used to create and or modify a policy and or to determine policies applicable to a particular endpoint.

The described functionality may be implemented as an adjunct or extension to an existing DLP solution.

While the above describes a particular order of operations performed by certain embodiments of the invention it should be understood that such order is exemplary as alternative embodiments may perform the operations in a different order combine certain operations overlap certain operations or the like. References in the specification to a given embodiment indicate that the embodiment described may include a particular feature structure or characteristic but every embodiment may not necessarily include the particular feature structure or characteristic.

Finally while given components of the system have been described separately one of ordinary skill will appreciate that some of the functions may be combined or shared in given instructions program sequences code portions and the like.

Any application or functionality described herein may be implemented as native code by providing hooks into another application by facilitating use of the mechanism as a plug in by linking to the mechanism and the like.

The techniques disclosed herein are not limited to a middleware DLP appliance that monitors network traffic such as has been described but this will be a typical implementation. As noted the above described identity centric policy association function may be used in any system device portal site or the like wherein it is desired to analyze data for inclusion of sensitive information.

