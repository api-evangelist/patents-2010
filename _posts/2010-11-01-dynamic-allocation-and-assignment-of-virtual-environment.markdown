---

title: Dynamic allocation and assignment of virtual environment
abstract: A mechanism for enabling enterprise data centers to allocate portions of their infrastructure and assign them to specific line of business unit IT organizations. The mechanism allows the business unit to dynamically and rapidly provision virtual infrastructure as needed to run line of business applications. This can also enable the business unit to focus more on the development and management of the applications rather than invest significant resources in managing the infrastructure layer. In various embodiments, data center administrators may be enabled to allocate and assign a portion of their physical infrastructure (Storage, Network and Compute) and expose them as a virtualized environment to different business unit organizations.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08924964&OS=08924964&RS=08924964
owner: Microsoft Corporation
number: 08924964
owner_city: Redmond
owner_country: US
publication_date: 20101101
---
Information technology IT organizations of many enterprises are continuing to move toward centralization and consolidation of their computing resources within datacenters as bandwidth is becoming more abundant the cost of hardware has declining and the density of computing has increased dramatically at all levels chip rack and datacenter. The number of specialized Line of Business LOB applications and services continue to increase significantly within IT organizations. At the same time people and process related costs continue to spiral upward. Furthermore recent regulatory requirements have mandated much tighter governance over corporate data. As a result of these competing pressures the majority of IT organizations are increasing the capacity of their data centers collapsing branch office servers back into the data centers implementing tighter centralized control over critical data and applications and automating the operations of the data center.

One increasingly popular form of networking used by enterprises may generally be referred to as remote presentation systems which can use protocols such as Remote Desktop Protocol remote presentation to share a desktop and other applications executing on a server with a remote client. Such computing systems typically transmit the keyboard presses and mouse clicks or selections from the client to the server relaying the screen updates back in the other direction over a network connection As such the user has the experience as if his or her machine is operating entirely locally when in reality the client device is only sent screenshots of the desktop or applications as they appear on the server side.

Some enterprises that provide virtual machines to their users are purchasing computing capacity from public cloud providers. The cloud providers may use virtualization hosts to deploy virtual machines and sell virtual machines to the enterprise tenants. The virtualization hosts in the enterprise data center may be joined to the cloud provider s domain whereas the tenant owns the actual virtual machines. Providing remote services through the cloud provider may provide some benefits such as 

Many principles and operations based on the cloud data infrastructure model may be applied to enterprise data centers. Such principles may include image based management rapid and dynamic provisioning of resources service application centric management etc. By application of such principles in their data centers a paradigm shift in how enterprise IT organizations operate may be enabled.

Disclosed herein are methods and systems that enable enterprise data centers to allocate portions of their infrastructure and assign them to specific line of business LOB business unit IT BUIT organizations. This allows the BUIT to dynamically and rapidly provision virtual infrastructure as needed to run LOB applications. This can also enable the BUIT to focus more on the development and management of the LOB applications rather than invest significant resources in managing the infrastructure layer.

In various embodiments methods and systems are disclosed for enabling data center administrators to allocate and assign a portion of their physical infrastructure Storage Network and Compute and expose them as a virtualized environment to different business unit organizations.

In addition to the foregoing other aspects are described in the claims drawings and text forming a part of the present disclosure. It can be appreciated by one of skill in the art that one or more various aspects of the disclosure may include but are not limited to circuitry and or programming for effecting the herein referenced aspects of the present disclosure the circuitry and or programming can be virtually any combination of hardware software and or firmware configured to effect the herein referenced aspects depending upon the design choices of the system designer.

The foregoing is a summary and thus contains by necessity simplifications generalizations and omissions of detail. Those skilled in the art will appreciate that the summary is illustrative only and is not intended to be in any way limiting.

Certain specific details are set forth in the following description and figures to provide a thorough understanding of various embodiments of the disclosure. Certain well known details often associated with computing and software technology are not set forth in the following disclosure to avoid unnecessarily obscuring the various embodiments of the disclosure. Further those of ordinary skill in the relevant art will understand that they can practice other embodiments of the disclosure without one or more of the details described below. Finally while various methods are described with reference to steps and sequences in the following disclosure the description as such is for providing a clear implementation of embodiments of the disclosure and the steps and sequences of steps should not be taken as required to practice this disclosure.

It should be understood that the various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. Thus the methods and apparatus of the disclosure or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the disclosure. In the case of program code execution on programmable computers the computing device generally includes a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs that may implement or utilize the processes described in connection with the disclosure e.g. through the use of an application programming interface API reusable controls or the like. Such programs are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined with hardware implementations.

A remote desktop system is a computer system that maintains applications that can be remotely executed by client computer systems. Input is entered at a client computer system and transferred over a network e.g. using protocols based on the International Telecommunications Union ITU T.120 family of protocols such as Remote Desktop Protocol remote presentation to an application on a terminal server. The application processes the input as if the input were entered at the terminal server. The application generates output in response to the received input and the output is transferred over the network to the client

Embodiments may execute on one or more computers. and the following discussion are intended to provide a brief general description of a suitable computing environment in which the disclosure may be implemented. One skilled in the art can appreciate that computer systems can have some or all of the components described with respect to computer of .

The term circuitry used throughout the disclosure can include hardware components such as hardware interrupt controllers hard drives network adaptors graphics processors hardware based video audio codecs and the firmware software used to operate such hardware. The term circuitry can also include microprocessors configured to perform function s by firmware or by switches set in a certain way or one or more logical processors e.g. one or more cores of a multi core general processing unit. The logical processor s in this example can be configured by software instructions embodying logic operable to perform function s that are loaded from memory e.g. RAM ROM firmware and or virtual memory. In example embodiments where circuitry includes a combination of hardware and software an implementer may write source code embodying logic that is subsequently compiled into machine readable code that can be executed by a logical processor. Since one skilled in the art can appreciate that the state of the art has evolved to a point where there is little difference between hardware software or a combination of hardware software the selection of hardware versus software to effectuate functions is merely a design choice. Thus since one of skill in the art can appreciate that a software process can be transformed into an equivalent hardware structure and a hardware structure can itself be transformed into an equivalent software process the selection of a hardware implementation versus a software implementation is trivial and left to an implementer.

A number of program modules may be stored on the hard disk magnetic disk optical disk ROM or RAM including an operating system one or more application programs other program modules and program data . A user may enter commands and information into the computer through input devices such as a keyboard and pointing device . Other input devices not shown may include a microphone joystick game pad satellite disk scanner or the like. These and other input devices are often connected to the processing unit through a serial port interface that is coupled to the system bus but may be connected by other interfaces such as a parallel port game port or universal serial bus USB . A display or other type of display device can also be connected to the system bus via an interface such as a video adapter . In addition to the display computers typically include other peripheral output devices not shown such as speakers and printers. The system of also includes a host adapter Small Computer System Interface SCSI bus and an external storage device connected to the SCSI bus .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be another computer a server a router a network PC a peer device or other common network node a virtual machine and typically can include many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in can include a local area network LAN and a wide area network WAN . Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer can be connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer can typically include a modem or other means for establishing communications over the wide area network such as the Internet. The modem which may be internal or external can be connected to the system bus via the serial port interface . In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. It will be appreciated that the network connections shown are examples and other means of establishing a communications link between the computers may be used. Moreover while it is envisioned that numerous embodiments of the disclosure are particularly well suited for computer systems nothing in this document is intended to limit the disclosure to such embodiments.

Referring now to another embodiment of an exemplary computing system is depicted. Computer system can include a logical processor e.g. an execution core. While one logical processor is illustrated in other embodiments computer system may have multiple logical processors e.g. multiple execution cores per processor substrate and or multiple processor substrates that could each have multiple execution cores. As shown by the figure various computer readable storage media can be interconnected by one or more system busses which couples various system components to the logical processor . The system buses may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. In example embodiments the computer readable storage media can include for example random access memory RAM storage device e.g. electromechanical hard drive solid state hard drive etc. firmware e.g. FLASH RAM or ROM and removable storage devices such as for example CD ROMs floppy disks DVDs FLASH drives external storage devices etc. It should be appreciated by those skilled in the art that other types of computer readable storage media can be used such as magnetic cassettes flash memory cards digital video disks Bernoulli cartridges.

The computer readable storage media provide non volatile storage of processor executable instructions data structures program modules and other data for the computer . A basic input output system BIOS containing the basic routines that help to transfer information between elements within the computer system such as during start up can be stored in firmware . A number of programs may be stored on firmware storage device RAM and or removable storage devices and executed by logical processor including an operating system and or application programs.

Commands and information may be received by computer through input devices which can include but are not limited to a keyboard and pointing device. Other input devices may include a microphone joystick game pad scanner or the like. These and other input devices are often connected to the logical processor through a serial port interface that is coupled to the system bus but may be connected by other interfaces such as a parallel port game port or universal serial bus USB . A display or other type of display device can also be connected to the system bus via an interface such as a video adapter which can be part of or connected to a graphics processor . In addition to the display computers typically include other peripheral output devices not shown such as speakers and printers. The exemplary system of can also include a host adapter Small Computer System Interface SCSI bus and an external storage device connected to the SCSI bus.

Computer system may operate in a networked environment using logical connections to one or more remote computers such as a remote computer. The remote computer may be another computer a server a router a network PC a peer device or other common network node and typically can include many or all of the elements described above relative to computer system .

When used in a LAN or WAN networking environment computer system can be connected to the LAN or WAN through a network interface card . The NIC which may be internal or external can be connected to the system bus. In a networked environment program modules depicted relative to the computer system or portions thereof may be stored in the remote memory storage device. It will be appreciated that the network connections described here are exemplary and other means of establishing a communications link between the computers may be used. Moreover while it is envisioned that numerous embodiments of the present disclosure are particularly well suited for computerized systems nothing in this document is intended to limit the disclosure to such embodiments.

A remote desktop system is a computer system that maintains applications that can be remotely executed by client computer systems. Input is entered at a client computer system and transferred over a network e.g. using protocols based on the International Telecommunications Union ITU T.120 family of protocols such as Remote Desktop Protocol remote presentation to an application on a terminal server. The application processes the input as if the input were entered at the terminal server. The application generates output in response to the received input and the output is transferred over the network to the client computer system. The client computer system presents the output data. Thus input is received and output presented at the client computer system while processing actually occurs at the terminal server. A session can include a shell and a user interface such as a desktop the subsystems that track mouse movement within the desktop the subsystems that translate a mouse click on an icon into commands that effectuate an instance of a program etc. In another example embodiment the session can include an application. In this example while an application is rendered a desktop environment may still be generated and hidden from the user. It should be understood that the foregoing discussion is exemplary and that the presently disclosed subject matter may be implemented in various client server environments and not limited to a particular terminal services product.

In most if not all remote desktop environments input data entered at a client computer system typically includes mouse and keyboard data representing commands to an application and output data generated by an application at the terminal server typically includes video data for display on a video output device. Many remote desktop environments also include functionality that extend to transfer other types of data.

Communications channels can be used to extend the remote presentation protocol by allowing plug ins to transfer data over an remote presentation connection. Many such extensions exist. Features such as printer redirection clipboard redirection port redirection etc. use communications channel technology. Thus in addition to input and output data there may be many communications channels that need to transfer data. Accordingly there may be occasional requests to transfer output data and one or more channel requests to transfer other data contending for available network bandwidth.

Turning to illustrated is an exemplary virtual machine server that can be used to generate virtual machines. In this embodiment hypervisor microkernel can be configured to control and arbitrate access to the hardware of computer system . Hypervisor microkernel can isolate processes in one partition from accessing another partition s resources. For example hypervisor microkernel can generate execution environments called partitions such as child partition through child partition N where N is an integer greater than 1 . In this embodiment a child partition is the basic unit of isolation supported by hypervisor microkernel . Each child partition can be mapped to a set of hardware resources e.g. memory devices logical processor cycles etc. that is under control of the hypervisor microkernel . In embodiments hypervisor microkernel can be a stand alone software product a part of an operating system embedded within firmware of the motherboard specialized integrated circuits or a combination thereof.

Hypervisor microkernel can enforce partitioning by restricting a guest operating system s view of the memory in a physical computer system. When hypervisor microkernel instantiates a virtual machine it can allocate pages e.g. fixed length blocks of memory with starting and ending addresses of system physical memory SPM to the virtual machine as guest physical memory GPM . In this embodiment the guest s restricted view of system memory is controlled by hypervisor microkernel . The term guest physical memory is a shorthand way of describing a page of memory from the viewpoint of a virtual machine and the term system physical memory is shorthand way of describing a page of memory from the viewpoint of the physical system. Thus a page of memory allocated to a virtual machine will have a guest physical address the address used by the virtual machine and a system physical address the actual address of the page .

A guest operating system may virtualize guest physical memory. Virtual memory is a management technique that allows an operating system to over commit memory and to give an application sole access to a contiguous working memory. In a virtualized environment a guest operating system can use one or more page tables to translate virtual addresses known as virtual guest addresses into guest physical addresses. In this example a memory address may have a guest virtual address a guest physical address and a system physical address.

In the depicted example parent partition component which can also be also thought of as similar to domain 0 of Xen s open source hypervisor can include a host . Host can be an operating system or a set of configuration utilities and host can be configured to provide resources to guest operating systems executing in the child partitions 1 N by using virtualization service providers VSPs . VPSs which are typically referred to as back end drivers in the open source community can be used to multiplex the interfaces to the hardware resources by way of virtualization service clients VSCs typically referred to as front end drivers in the open source community or paravirtualized devices . As shown by the figures virtualization service clients execute within the context of guest operating systems. However these drivers are different than the rest of the drivers in the guest in that they may be supplied with a hypervisor not with a guest. In an exemplary embodiment the path used to by virtualization service providers to communicate with virtualization service clients and can be thought of as the virtualization path.

As shown by the figure emulators e.g. virtualized IDE devices virtualized video adaptors virtualized NICs etc. can be configured to run within host and are attached to resources available to guest operating systems and . For example when a guest OS touches a memory location mapped to where a register of a device would be or memory mapped to a device microkernel hypervisor can intercept the request and pass the values the guest attempted to write to an associated emulator. The resources in this example can be thought of as where a virtual device is located. The use of emulators in this way can be considered the emulation path. The emulation path is inefficient compared to the virtualized path because it requires more CPU resources to emulate device than it does to pass messages between VSPs and VSCs. For example the hundreds of actions on memory mapped to registers required in order to write a value to disk via the emulation path may be reduced to a single message passed from a VSC to a VSP in the virtualization path.

Each child partition can include one or more virtual processors and that guest operating systems and can manage and schedule threads to execute thereon. Generally the virtual processors are executable instructions and associated state information that provide a representation of a physical processor with a specific architecture. For example one virtual machine may have a virtual processor having characteristics of an Intel x86 processor whereas another virtual processor may have the characteristics of a PowerPC processor. The virtual processors in this example can be mapped to logical processors of the computer system such that the instructions that effectuate the virtual processors will be backed by logical processors. Thus in an embodiment including multiple logical processors virtual processors can be simultaneously executed by logical processors while for example other logical processor execute hypervisor instructions. The combination of virtual processors and memory in a partition can be considered a virtual machine.

Guest operating systems and can be any operating system such as for example operating systems from Microsoft Apple the open source community etc. The guest operating systems can include user kernel modes of operation and can have kernels that can include schedulers memory managers etc. Generally speaking kernel mode can include an execution mode in a logical processor that grants access to at least privileged processor instructions. Each guest operating system can have associated file systems that can have applications stored thereon such as terminal servers e commerce servers email servers etc. and the guest operating systems themselves. The guest operating systems can schedule threads to execute on the virtual processors and instances of such applications can be effectuated.

Referring now to illustrated is a virtual machine server based on an alternative architecture. depicts similar components to those of however in this example embodiment hypervisor can include a microkernel component and components similar to those in host of such as the virtualization service providers and device drivers while management operating system may contain for example configuration utilities used to configure hypervisor . In this architecture hypervisor can perform the same or similar functions as hypervisor microkernel of however in this architecture hypervisor can be configured to provide resources to guest operating systems executing in the child partitions. Hypervisor of can be a stand alone software product a part of an operating system embedded within firmware of the motherboard or a portion of hypervisor can be effectuated by specialized integrated circuits.

Turning now to illustrated is a high level block diagram of virtual desktop server . In an embodiment virtual desktop server can be configured to deploy virtual desktop sessions VDS to clients e.g. mobile devices such as smart phones computer systems having components similar to those illustrated in etc. Briefly virtual desktop technology allows a user to remotely interact with a guest operating system running in a virtual machine. Unlike a remote desktop session in a virtual desktop session only one user is logged into a guest operating system and can have total control of it e.g. the user can run as an administrator and can have full rights on the guest. In the illustrated example virtual desktop server can have components similar to computer system or of or . In the illustrated example virtualization platform is a logical abstraction of virtualization infrastructure components described above in and . The functionality described in the following sections as within virtualization platform can be implemented in one or more of the elements depicted in or . For example virtual desktop manager could be implemented in a host of . More specifically virtual desktop manager could be implemented in a host operating system running in the parent partition.

Starting a virtual desktop session requires instantiation of a guest operating system within a virtual machine. In an exemplary embodiment virtual desktop manager e.g. a module of processor executable instructions can start up virtual machine along with guest operating system in response to a request. Virtual desktop manager can execute on a logical processor and instruct virtualization platform e.g. microkernel hypervisor to allocate memory for a partition. Virtualization platform can execute and set virtual devices up within virtual machine and load a boot loader program into virtual machine memory. The boot loader program can execute on a virtual processor and load guest operating system . For example session manager can be loaded which can instantiate environment subsystems such as runtime subsystem that can include a kernel mode part such as operating system core . For example the environment subsystems in an embodiment can be configured to expose a subset of services to application programs and provide an access point to kernel . When guest operating system is loaded the boot loader program can exit and turn control of the virtual machine over to guest operating system . Guest operating system can execute the various modules illustrated in and configure itself to host a virtual desktop session. For example guest operating system can include registry values that cause remote presentation engine and or configuration service to start upon boot.

A virtual desktop session can start when guest operating system receives a connection request over a network from a client. A connection request can first be handled by remote presentation engine . The remote presentation engine can be configured to listen for connection messages and forward them to session manager . As illustrated by when sessions are generated the remote presentation engine can run a protocol stack instances for the session. Generally the protocol stack instance can be configured to route user interface output to an associated client and route user input received from the associated client to operating system core . Briefly operating system core can be configured to manage screen output collect input from keyboards mice and other devices.

A user credential e.g. a username password combination can be received by remote presentation engine and passed to session manager . Session manager can pass the credential to a logon procedure which can route the credential to authentication engine for verification. Authentication engine can generate a system token which can be used whenever a user attempts to execute a process to determine whether the user has the security credentials to run the process or thread. For example when a process or thread attempts to gain access e.g. open close delete and or modify an object e.g. a file setting or an application the thread or process can be authenticated by security subsystem . Security subsystem can check the system token against an access control list associated with the object and determine whether the thread has permission based on a comparison of information in the system token and the access control list. If security subsystem determines that the thread is authorized then the thread can be allowed to access the object.

Continuing with the description of in an embodiment the operating system core can include a graphics display interface GDI and input subsystem . Input subsystem in an example embodiment can be configured to receive user input from a client via the protocol stack instance for the virtual desktop session and send the input to operating system core . The user input can in some embodiments include signals indicative of absolute and or relative mouse movement commands mouse coordinates mouse clicks keyboard signals joystick movement signals etc. User input for example a mouse double click on an icon can be received by the operating system core and the input subsystem can be configured to determine that an icon is located at the coordinates associated with the double click. Input subsystem can then be configured to send a notification to runtime subsystem that can execute a process for the application associated with the icon.

Draw commands can be received from applications and or a desktop and processed by GDI . GDI in general can include a process that can generate graphical object draw commands. GDI in this example embodiment can be configured to pass the commands to remote display subsystem that can instantiate a display driver for the session. In an example embodiment remote display subsystem can be configured to include virtual display driver s that can be configured to receive the draw commands and send them to the client.

Also shown in is a configuration service . In an exemplary embodiment configuration service can be used to setup guest operating system to conduct virtual desktop sessions prior to connection by a client. For example configuration service can run within guest operating system and be executed when guest operating system boots. Since certain configuration settings require administrative privileges configuration service can be configured to run as a process with system wide privileges. Some of the exemplary actions configuration service can take include but are not limited to actions that add an account identifier for the user to a list of administrative users for guest operating system add the account identifier to a list of authorized virtual desktop users set registry values open guest operating system firewalls and open the port that remote presentation engine listens for connections on. Configuration service is described in more detail in the following paragraphs.

In an exemplary embodiment a communication channel can be established between virtualization platform and guest operating system in order to configure and control guest operating system . Since a remote user can have complete control of virtual machine security needs to be in place to ensure that any channel used to configure and control guest operating system can not also be used to attack virtualization platform or other computer systems connected to an internal network. Traditionally a networked communication channel is used to setup and control guest operating system . Network channels however are difficult to deploy when guest operating system is not in the same network domain as virtualization platform and virtualization platform is configured to deny incoming connection requests from outside the domain.

In an exemplary embodiment inter partition communication channel can be used to communicate with configuration server in order to configure and or manage the virtual desktop session. Inter partition communication channel can be configured to be implicitly trusted by virtual machine and not trusted by virtualization platform . In this example information e.g. data and or commands can be easily routed to guest operating system without any need to verify the information. On the other hand data received from virtual machine can be verified and authenticated before virtualization platform takes an action. Moreover because inter partition communication channel does not use networking guest operating system can be kept off the internal network.

Inter partition communication channel can be implicitly trusted by virtual machine i.e. information received via the channel is inherently authenticated validated because only virtualization platform can create inter partition communication channel . For example in an embodiment inter partition communication channel can be implemented at least in part as a region of memory shared between virtual machine and virtualization platform . Virtualization platform can cause a data structure indicative of a ring buffer or the like to be created in region of shared memory that can be used as a full duplex communication channel between virtualization platform and virtual machine . In an exemplary embodiment the inter partition communication channel can include features described in U.S. Pat. No. 7 689 800 entitled Partition bus the contents of which are herein incorporated by reference in its entirety.

Virtualization platform can write information to inter partition communication channel that can be read by virtual machine . In an exemplary embodiment inter partition communication channel can be message based. That is virtualization platform and virtual machine can be configured to write packets of data to inter partition communication channel . In the same or another exemplary embodiment inter partition communication channel can be event driven. In this configuration when information is written to the channel the receiver can be instructed to read the information from inter partition communication channel by for example hypervisor of .

Turning now to illustrated is a high level block diagram of a datacenter including virtual desktop server virtual desktop server licensing server broker server gateway and client . The datacenter can be configured to deploy virtual desktop sessions to clients. In the illustrated example virtualization platform virtual desktop server licensing server broker server and gateway can be part of an intranet and the user credentials used to log into these computers can be members of the same domain i.e. the infrastructure domain . Infrastructure domain is shown in dashed lines cutting virtual desktop server in half to illustrate that in an exemplary embodiment virtual machine can be part of a different domain or part of no domain.

The datacenter can include an internal network coupling a plurality of virtual desktop servers and which can include components similar to those illustrated by or to broker server and licensing server . As one of skill in the art can appreciate while two virtual desktop servers are shown the datacenter can have many more. Also while virtual desktop server is illustrated running one virtual machine each virtual desktop server can simultaneously host many virtual machines. Or put another way the datacenter can have M where M is an integer greater than 1 virtual desktop servers and each of the M virtualization hosts can host N where N is also an integer greater than 1 virtual machines.

Broker server can act as an interface to the intranet for client . Briefly broker server can include components similar to the components described with respect to . Broker server can have a network adapter that interfaces it to a public network such as the Internet and another network adapter that interfaces it to the internal network i.e. the intranet. In this example broker server can act as a gateway for the internal network thereby allowing virtual desktop servers and licensing server to be kept off the public network.

When user of client wants a virtual desktop session he or she can click on an icon and client can send one or more packets of information to broker server . Broker server can include a module of software instructions that upon execution cause a logical processor to select a suitable virtualization host to instantiate a virtual machine to host the virtual desktop session. A user credential e.g. a username and password combination can be collected and broker server can check session database to determine whether the datacenter includes any disconnected virtual desktop sessions associated with the user credential such as a username password combination. If session database includes a disconnected virtual desktop session associated with the user credential broker server can send a signal to the virtualization host that has the disconnected session and instruct it to execute the virtual machine. If session database does not have information indicative of a disconnected session for the user broker server can select a suitable virtual desktop server e.g. one that has the resources available to instantiate a virtual machine to host a virtual desktop session.

Virtualization platform can instantiate virtual machine and execute guest operating system on a virtual processor. Referring back to guest operating system can run remote presentation engine return an internet protocol IP address of virtual NIC to broker server and await a connection from client . Broker server can return the IP address of virtual NIC to client in a packet of information that causes a logical processor of client to redirect client to the IP address virtual machine . Gateway can receive the connection request and forward it to virtual NIC .

In an least one exemplary embodiment session manager can be configured to check to see if the client is associated with a valid license before starting the virtual desktop session. Remote presentation engine can receive a license from client or information associated with a license and send the information to virtualization platform which can send the license or the information associated with the license to licensing server . Licensing server can include license validation engine which can be configured to determine whether a license associated with client is valid. If the license is valid license validation engine can send a signal back virtual desktop server and a virtual desktop session can be started. At this point remote presentation engine can stream one or more packets of information indicative of a graphical user interface for guest operating system to client and receive one or more packets of information indicative of user input from client .

In an exemplary embodiment when virtualization platform receives a request from broker server to instantiate a virtual machine virtual desktop manager can execute and send commands and or information via inter partition communication channel to virtual machine to cause guest operating system to be configured to conduct a virtual desktop session. Configuration service can receive the commands and or information and configure guest operating system accordingly. For example virtual desktop manager can send the identity of the user attempting to connect desired settings for a firewall protecting guest operating system registry values a list of applications the user is allowed to operate commands to enable virtual desktop sessions and to add the identity of the user to a list of authorized virtual desktop users etc. Configuration service can execute on a virtual processor and change appropriate settings.

Once the virtual desktop session is running virtual desktop manager can manage a running virtual desktop session via inter partition communication channel . For example virtual desktop manager can issue commands to virtual machine such as commands that cause the guest operating system to shut down disconnect the user reset the guest operating system etc. In the same or another embodiment virtual desktop manager can manage the virtual desktop session receive state information for virtual machine status information from remote presentation engine and or send commands to control the virtual desktop session to configuration service . For example virtual desktop manager can receive state information for virtual machine that indicates whether virtual machine is running paused ready booting as well as a list of IP addresses that can be sent to the client. In addition virtual desktop manager can receive status information for guest operating system such as the identity of the user that is logged in for the virtual desktop session and communicate some or all of this information to broker server .

The computers depicted in may be similar to the computer depicted in . In a client communicates with a deployment which comprises authentication server connection broker gateway remote application server farm which in turn comprises two homogenously configured servers remote application servers and VM server farm which in turn comprises two homogenously configured VMs VMs .

Client has a workspace that comprises multiple remote resources served by one or more of remote application servers and VMs . Client may log into its workspace through an authentication server . Once authenticated the client s request to connect to its workspace is transmitted from authentication server to connection broker . Connection broker is configured to broker connections between client and the application servers and VMs that will serve remote resources with client and to effectuate this connection broker is configured to communicate with application servers and VMs to determine what resources they are currently serving including disconnected remote resources for a user of client .

Client may have a workspace that comprises multiple remote resources a remote resource comprising a remote application from remote application server and a remote resource that comprises a VM from VM . As depicted client does not have a remote resource with remote application server or VM . These may each serve different applications or desktops versions of an application or other permutations. For instance remote application server may be serving client with a remoted word processor application and VM may be serving client with a remote desktop.

As can be seen through this depiction when a user wishes to reconnect back to his or her workspace he may desire to reconnect to the remote resources of both remote application server and VM through one command rather than through one command performed three times. The user may perform this reconnect operation from client or from another client computer such as where client is the user s computer at work and the user wishes to reconnect from a computer at home during the weekend .

A user of client has previously had a workspace to remote server farm that involved accessing a remote resource from VM and this workspace is now disconnected. Before client even attempts to reconnect to the deployment authentication server publishes a document via communication 1 to client identifying information about the deployment that client may use to access the remote resources of the deployment . Client later reconnects by sending communication 2 to authentication server . Authentication server validates credentials of the user and or client such as a login and password . Where the credentials are validated authentication server communicates with connection broker to determine which remote resources here VM client is to reconnect to when reconnecting its workspace. Authentication server makes this determination by sending communication 3 to connection broker and in response receiving back in communication 4 a list of server farms here VM farm for client to reconnect to. This information indicated in communication 4 is passed by authentication server to client in communication 5 .

When client has the list of servers to reconnect to from authentication server client reestablishes a communication with each of those server farms. As depicted in that server farm is VM farm . Client communicates 6 with gateway to access the remote resources of these server farms. Gateway processes communication 6 and in turn communicates 7 with connection broker to convey similar information. Connection broker takes the identification of the server farm from communication 7 and from it identifies the machine VM within the farm that has that disconnected remote resource. Connection broker sends communication 8 to VM instructing VM to reconnect the remote resource to client . VM reconnects with client by sending a communication 9 indicative of the same to gateway which in turn sends a communication 10 indicative of the same to client .

It may be appreciated that this is a simplified diagram to emphasize the present invention and that more or fewer server farms may be present and or reconnected to and that the communications passed may be more involved for instance it is shown that communications 9 and 10 establish a reconnection between VM and client where this may also involve communications that are send from client through gateway and to VM .

All of these variations for implementing the above mentioned virtual machines are just exemplary implementations and nothing herein should be interpreted as limiting the disclosure to any particular virtualization aspect.

Many principles and operations derived from cloud data centers may be applicable to enterprise data centers. Such principles may include image based management rapid and dynamic provisioning of resources service application centric management etc. By application of such principles in their data centers a paradigm shift in how enterprise IT organizations operate may be enabled.

Disclosed herein are methods and systems that enable enterprise data centers to allocate portions of their infrastructure and assign them to specific line of business LOB business unit IT BUIT organizations. This allows the BUIT to dynamically and rapidly provision virtual infrastructure as needed to run LOB applications. This can also enable the BUIT to focus more on the development and management of the LOB applications rather than invest significant resources in managing the infrastructure layer.

In various embodiments methods and systems are disclosed for enabling data center administrators to allocate and assign a portion of their physical infrastructure Storage Network and Compute and exposed them as a virtualized environment to different business unit organizations.

In one embodiment the following process flow an example implementation for enabling a system for allocating physical infrastructure and exposing a portion of the allocated infrastructure to the BUITs as a service within the enterprise.

A self service portal may be a web component that extends management of virtual machines to end users. The self service portal may be a extensible component built on top of a virtualization system. The system can be used to pool allocate and manage resources to offer infrastructure as a service and to deliver the foundation for a private cloud platform inside the enterprise. The self service portal extends the assignment of virtual machines to end users. The self service portal may include a web based user interface that includes sections for datacenter managers and business unit IT consumers. The self service portal may include a dynamic provisioning engine and may reduce the time needed to provision infrastructures and their components by offering business unit on boarding and infrastructure request and change management. Some embodiments may provide reporting via a dashboard display that allows users to view data such as configuration chargeback and utilization.

In an embodiment an engine may be provided that brokers the execution of actions and tasks to the appropriate infrastructure. The engine may further comprise functions and capabilities as follows.

The engine may provide various interfaces to exposes its services. In one embodiment in the Windows environment the API can be the Windows Communication Foundation WCF which is an API in the .NET Framework for building connected service oriented applications. The WCF services may be provided for interoperability with cross platform systems.

The engine may comprise a throttling and queuing mechanism which may further comprise a job manager component. Referring to a job manager may be configured to determine if a requested job can be processed. In one embodiment the determination may be made as follows.

Once accepted the job manager may queue the requested jobs in a message queue. When a job can be executed the job manager may retrieve the next job from the message queue and create an instance of a workflow template. The workflow template can be scheduled for execution by the workflow runtime.

The job manager may implement queues with different priorities and place actions into the priority queues to throttle the execution of actions. Light virtual machine actions such as starting stopping and storing virtual machines may be stored into a high priority queue while heavy virtual machine actions such as creating a virtual machine may be stored in a normal priority queue.

In an embodiment a task automation framework may be used for system administration. Such a framework may further implement a scripting language such as Windows PowerShell. PowerShell PS is a command line shell and associated scripting language built on top of and integrated with the .NET Framework. Administrative tasks are generally performed by cmdlets that implement a particular operation. Sets of cmdlets may be combined together in scripts.

Referring again to in an embodiment once the job manager creates and executes a workflow instance the job manager may traverse the task in each action XML which may be associated with multiple scripts. The job manager may further dynamically wrap the scripts for each task as a workflow activity add the activity into the workflow sequence activity and schedule the workflow instance for execution.

For execution of each of the workflow activities the job manager may call a script manager . The script manager may be configured to host the PS run space pool and spawn a PS run space from the PS run space pool . The script manager may further be configured to execute the PS script. While this is happening the workflow can be persisted until the calls return.

In the context of the execution of VMM cmdlets the script manager may further be configured to check for available connections established one connection and reuse the connection for all actions. The script manager may further ensure atomic execution of the virtual machine placement to ensure accurate placement.

In one embodiment this can be accomplished by providing the ability to call portions of the script in a lock. The script manager may limit of the number of virtual machines per host to reduce the risk of failure occurrences.

Data can be passed between several components within the engine from job manager to workflow from workflow to workflow activities from a workflow script activity to the script manager and from the output of a script activity to the input of another script activity as a script parameter. Furthermore passing secured credentials may be performed as a secured string.

Each PS script that is associated with a task may require input parameters that can be hardcoded at authoring time. Alternatively the engine s data item can be referenced and can be evaluated at runtime. A data item can be an XML blob that holds the environment data user specified data based on the job requested and other data that is needed by the job to execute but not specified by the user. The data item may serve as the data repository for a workflow and all of its activities. The workflow activities may rely on the data item for any input that the activities may need. The data item may be kept simple and thus not change based on the job being requested. However in other embodiments the data item schema can be expanded to include child data items and to allow a data item per each type of job being requested.

The engine may further be configured to enable persisting and passing of the task script s output parameters to different task scripts. In one embodiment the engine may create a new Output section in the data item containing the task name and a property bag of each of its outputs in a hierarchical structure. The user can use the user interface to bind the output task.param x to the input of other task script activities.

The output parameters can be configured to be either a simple type or a complex type. Simple types may be stored in the data item. Complex types may be stored in a collection in the data service and a placeholder reference to the complex type may be added to the data item so that the activity can actually extract the complex type s value when required.

Referring to in various embodiments a user interface may be provided to allow for on boarding provisioning and extensibility of virtual machine action abstraction. In one embodiment the user interface entities and their relationships may be structured to embody a one to many relationship. For example the end to end system may have a 1 to M relationship with the data center. The data center may in turn have a 1 to M relationship with the infrastructure. The infrastructure may in turn have 1 to M relationship with the infrastructure service. The infrastructure service may have a 1 to M relationship to the service role. Finally the service role may have 1 to M relationship with the virtual machines.

In an embodiment when the administrator is performing configuration actions the administrator may be provided the capability to configure reservation based and allocation based chargebacks. Chargebacks may include the return of funds to business unit or a reversal of a prior outbound transfer of funds based on the requested allocated and used resources. Chargebacks may also include providing a monetary amount value for a quota of reserved and allocated resources based on memory storage and virtual machine templates.

In an embodiment the user interface may provide the following user interface components. A registration user interface may be provided that the BUIT uses to register their organization into the system. An on boarding user interface may be provided to request an initial allocation of their virtual environment or as a set of change requests.

A configuration user interface may be provided that the data center administrator may use to configure the data center allocation for different BUITs configure extensibility configure the self service portal branding logo and perform maintenance related tasks for the system itself. A provisioning user interface may be provided that the data center administrator may use to provision an allocated system for the requesting BUIT.

A role based access control user interface may be provided for the administrator to manage role based access to the system. The self service portal user interface may be provided for the BUIT to access the virtual environment that has been allocated by the data center administrator. Finally an extensibility authoring user interface may be provided for the data center administrator to add remove edit virtual machine actions and tasks associated with each virtual machine action. This user interface may also be used to add remove edit scripts and corresponding parameters associated with each task.

In various embodiments an extensibility model may be provided at a plurality of levels. Users may be enabled to add remove modify virtual machine actions. Each action may correspond to a virtual machine template and associated actions. The configuration may be stored in an XML blob.

Another extensibility level may be expressed as tasks. Virtual machine actions may contain one or more tasks and a user may add remove modify tasks for each virtual machine action. Each task may result in one workflow activity.

Yet another extensibility level may be expressed as scripts. For example each task may be associated with one PS script and one or more of the following properties.

Continue on Error This property can have a value of true or false. If set to true any script errors including timeout errors may be considered non fatal and workflow execution may continue in spite of the error. If set to false any error be it script or timeout may be considered a terminal error and the workflow may be aborted. In one embodiment this value may be assigned a default value of false to terminate workflow on error .

Success Code List This may be a list of known success codes that a script can output. In one embodiment this may be an optional parameter. If not specified the script return code evaluation can be ignored. It may be assumed that the script succeeded unless an exception was raised. Multiple success codes may be separated by a comma separating them. In order to evaluate the output from a script only the first return value from the pipeline may be considered script evaluations may be performed using Power Shell . If a script returns multiple values all except the first return value may be ignored.

Parameter This may be an input parameter to a task. A type need not be specified as part of the parameter because ultimately everything will be passed in as a string unless the input parameter being referred to is an output from a previous task. If the current input parameter is an output from a previous task then whatever its type it may be directly added as a parameter. A parameter may have a name and a value. The value may be the value of the parameter node but not an attribute on the parameter node. A parameter can be defined in one of three ways 

Output from a previous task this may be a placeholder that is replaced with an actual value at runtime.

Script Type The system may support multiple script types and carry out script execution using scripting languages such as Power Shell. Supported script types may include but not limited to Command Script VB Script and Power Shell Script.

IsEnabled This parameter may take a Boolean value true false . During design authoring time the user may determine whether a specific task should be enabled or disabled. This can be done through the configuration user interface if implemented or directly in notepad XML handling .

TimeoutSeconds If this value is not set the task may be treated as an asynchronous task and not terminated at all. However the workflow instance may be terminated after workflow timeout has occurred.

Any of the above mentioned aspects can be implemented in methods systems computer readable media or any type of manufacture. For example a computer readable medium can store thereon computer executable instructions for allocating storage network and computing infrastructure as a virtualized computing environment to a plurality of user groups. Such media can comprise a first subset of instructions for configuring storage network and computing information for use by the plurality of user groups a second subset of instructions for receiving a request for virtualized computing services from one of the plurality of user groups the request including a request for allocation of a virtualized computing environment a third subset of instructions for conditionally approving the requested virtualized computing services based on available resources in the storage network and computing infrastructure and a fourth subset of instructions for allocating and assigning storage network and computing infrastructure resources wherein the allocated resources are sufficient to provide the requested virtualized computing services. It will be appreciated by those skilled in the art that additional sets of instructions can be used to capture the various other aspects disclosed herein and that the two presently disclosed subsets of instructions can vary in detail per the present disclosure.

The foregoing detailed description has set forth various embodiments of the systems and or processes via examples and or operational diagrams. Insofar as such block diagrams and or examples contain one or more functions and or operations it will be understood by those within the art that each function and or operation within such block diagrams or examples can be implemented individually and or collectively by a wide range of hardware software firmware or virtually any combination thereof.

It should be understood that the various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. Thus the methods and apparatus of the disclosure or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the disclosure. In the case of program code execution on programmable computers the computing device generally includes a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs that may implement or utilize the processes described in connection with the disclosure e.g. through the use of an application programming interface API reusable controls or the like. Such programs are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined with hardware implementations.

While the invention has been particularly shown and described with reference to a preferred embodiment thereof it will be understood by those skilled in the art that various changes in form and detail may be made without departing from the scope of the present invention as set forth in the following claims. Furthermore although elements of the invention may be described or claimed in the singular the plural is contemplated unless limitation to the singular is explicitly stated.

