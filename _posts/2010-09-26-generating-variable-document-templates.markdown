---

title: Generating variable document templates
abstract: A graphical user interface  that includes a template design area is displayed. Based on one or more commands received through the graphical user interface , a layout of template elements (-) is arranged with respective relative positions and sizes in the template design area (), where at least one of the template elements (-) is designated for receiving variable document content . Through the graphical user interface , values of parameters characterizing one or more associated adaptive layout variables that constrain adaptability of respective ones of the template elements (-) to different document content  are received. At least one of the parameters characterizes a degree of variability of the associated adaptive layout variable. The relative positions of the template elements (-) are encoded in the template design area in association with the respective parameter values in a variable document template data structure ().
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09330065&OS=09330065&RS=09330065
owner: Hewlett-Packard Development Company, L.P.
number: 09330065
owner_city: Houston
owner_country: US
publication_date: 20100926
---
Electronic documents are created in many different ways. For example desktop application programs such as Microsoft Word Quark Design and Adobe InDesign frequently are used to create electronic documents. These electronic documents contain various types of content arranged with a particular layout and style.

Template based electronic document formats describe a predefined layout arrangement of fields that are capable of accepting variable content. In some approaches the size shape and placement of the template fields are fixed. In another approach an electronic document is represented as an adaptive layout template that contains predefined content areas whose positions and sizes may be varied within specified ranges. In particular the content areas are defined by variables with respective value domains that define the size position and content of the content areas. A user specifies constraints that limit variable ranges and define relationships between variables and values. A constraint solver typically generates a final document that satisfies all of the specified constraints.

In general the templates that are used to describe the look and feel of template based electronic documents are generated manually using a process that is labor intensive and uses significant computer graphics skills.

In the following description like reference numbers are used to identify like elements. Furthermore the drawings are intended to illustrate major features of exemplary embodiments in a diagrammatic manner. The drawings are not intended to depict every feature of actual embodiments nor relative dimensions of the depicted elements and are not drawn to scale.

As used herein a computer is any machine device or apparatus that processes data according to computer readable instructions that are stored on a computer readable medium either temporarily or permanently. A computer operating system is a component of a computer system that manages and coordinates the performance of tasks and the sharing of computing and hardware resources. A software application also referred to as machine readable instructions software an application computer software a computer application a program and a computer program is a set of instructions that a computer can interpret and execute to perform one or more specific tasks. A data file is a block of information that durably stores data for use by a software application.

The term computer readable medium refers to any tangible non transitory medium capable storing information that is readable by a machine e.g. a computer . Storage devices suitable for tangibly embodying these instructions and data include but are not limited to all forms of physical non transitory computer readable memory including for example semiconductor memory devices such as random access memory RAM EPROM EEPROM and Flash memory devices magnetic disks such as internal hard disks and removable hard disks magneto optical disks DVD ROM RAM and CD ROM RAM.

A variable document template is a data struck re that specifies one or more template elements including at least one template element that is designated for receiving variable document content. A template element is any component of a variable document template that imposes a constraint in an optimization process for determining a final document specification for document content to be inserted into the variable document template. Examples of template elements include content blocks e.g. title text text streams figures advertisements and white space between content blocks. The adaptability of a template element to different document content typically is constrained by at least one adaptive layout variable that is characterized by one or more respective parameters whose values typically are set by a document template designer.

As used herein the term page refers to any type of discrete area in which graphic objects may be laid out including a physical page embodied by a discrete physical medium e.g. a piece of paper on which a layout of graphic objects may be printed and a virtual digital or electronic page containing a layout of graphic objects that may be presented to a user by for example an electronic display device.

A window is a visual area of a display that typically includes a user interface. A window typically displays the output of a machine readable instructions process and typically enables a user to input commands or data for the machine readable instructions process. A window that has a parent is called a child window. A window that has no parent or whose parent is the desktop window is called a top level window. A desktop is a system defined window that paints the background of a graphical user interface GUI and serves as the base for all windows displayed by all machine readable instructions processes.

As used herein the term includes means includes but not limited to and the term including means including but not limited to. The term based on means based at least in part on.

The examples that are described herein provide a graphical user interface that enables efficient creation of variable document templates also referred to as variable page templates for generating documents with variable content. The graphical user interface includes intuitive tools and visualizations that allow users to quickly and efficiently design a layout of template elements group template elements and specify parameters characterizing the template elements including parameters that characterize degrees of variability of variables that constrain the adaptability of variable ones of the template elements to different document content.

The document processing system includes a layout engine that processes electronic document content based on one or more variable document templates and one or more style sheets to produce the document . In some examples the layout engine processes the document content on a page by page basis. In other examples the layout engine may process the document content on a multi page basis. The layout engine may be implemented in any computing or processing environment including in digital electronic circuitry or in computer hardware or machine readable instructions including firmware or software . In some examples the layout engine is implemented by one or more respective machine readable instructions modules that are executed on a computer. Computer process instructions for implementing the layout engine and the data it generates are stored in one or more computer readable media.

The document content typically includes a list of document contents e.g. figures and text a description of the logical relationships e.g. linkages between the document contents and annotations that assigning respective types to the contents e.g. title header sidebar pull quote and advertisement in accordance with a content description schema that is parsable by the layout engine . In an example for a typical magazine the document content may include a stream of text blocks a stream of figures a stream of sidebars a stream of pull quotes a stream of advertisements and a description of the logical relationships between these contents. In some examples the document content is contained in an XML eXtensibie Markup Language data file that describes the structure of the document contents and identifies the types of the document content elements with attribute tags in accordance with a markup language schema. This representation decouples the content from the presentation and allows variation in the size number and relationship among content blocks. Adding or deleting content elements is accomplished easily by addition or deletion of sub trees in the XML structure and content modifications simply involve changing the content of an XML leaf node.

Different styles can be applied to the same variable document template via the style sheets . A variable document template typically specifies one or more associated style sheets for formatting respective sections of the template. As explained above the content blocks within the document content typically have attributes that denote their type e.g. text blocks may be tagged as header sub header list item paragraph and caption . The document style sheet associated with the selected variable document template defines the type definitions and the formatting for the types of the content blocks in the document content . For example the style sheet may define a header to use Arial bold font with a specified font size and line spacing. Different style sheets can apply different formatting to the same document content . Also type definitions are scoped within template elements. For example two different types of sidebars may have different text formatting applied to side bar text with a sub header attribute. The style sheet also typically defines overall document characteristics such as margins bleeds page dimensions and spreads. Different sections of the same document may be formatted with different style sheets. Style sheets typically are created by a professional graphic designer.

The document may be any type of electronic document including an editable markup document e.g. an Adobe FrameMaker document a rich text format document or a Microsoft Word document a formatted markup document e.g. an Adobe PDF document or an Adobe PostScript document and a rendered image document e.g. a bit map image document . The document may contain one or more pages of content.

In operation the layout engine processes the document content to determine an appropriate variable document template to select from the template library for each page of the document . The layout engine also selects one or more style sheets for formatting the document content . Based on the document content the selected variable document templates and the selected style sheets determines the values of the variables in the selected variable document templates based on an optimization process. The layout engine generates the document based on the variable document templates the determined variable values and the document content . In this process the layout engine populates the variables in the variable document templates with the determined variable values. At this point the resulting one or more layout templates fully specify the layout of the document . The layout engine generates the document by rendering the document content in accordance with the resulting fully specified layout template. Multiple customized documents may be generated based on the selected variable document templates simply by changing the document content .

Referring back to the document processing system includes template design module that enables a user to create one or more variable document templates and store the templates in the template library . The template design module typically is implemented by a machine readable instructions application that is executed by a computer to provide a user interface that assists the user in the process of creating a variable document template. This process typically includes determining a layout of content blocks specifying optimization paths and path groups that define the logical relationships between the template elements and specifying respective degrees of variability e.g. probability distribution parameters for individual ones of the variables.

The menus provide access to drawing tools commands and settings. The example menus shown in include File Edit View Draw Tools Windows and Help menus as well as a Tag menu that provides access to tools for assigning type tags e.g. title figure and text stream to the template elements in the template design area . These tools may be integral components of the template design module or may be provided as part of a plug in extension to a graphics application such as Visio available from Microsoft Corporation of Redmond Wash. USA SketchUp available from Google Inc. of Mountain View Calif. USA and InDesign available from Adobe Systems Incorporated of San Jose Calif. USA .

The toolbars contain a user definable set of tools and controls. The example set of toolbars shown in corresponds to tools and commands that typically are found in a graphic design tool which may be selected and activated by commands generated by an input device e.g. a computer mouse in connection with a pointer that is displayed on the graphical user interface .

The template design area is where a template designer creates a model of an adaptable layout template. In response to user command to create a new variable document template the template design module creates a blank page template that is presented as a template canvas or page to the user. Using the tools available through the menus and toolbars the designer is able to place on the template canvas rectangles representing template elements that are designated for receiving variable document content. In the example illustrated in there are three types of content blocks a title book a figure block and two text stream blocks . The text stream blocks represent streams of text sub blocks including headings subheadings and list items. Each content template element is created and positioned as a block on the page and overlap of the blocks is handled with a layer attribute. The types and formatting of the sub blocks that can be included in a text stream are defined in the associated document style sheet .

The graphical user interface allows the user to specify attributes for each template including background color background image first page template flag and last page template flag. These attributes allow for common template customizations.

The graphical user interface also allows the user to specify properties of the content template elements. In one example implementation in response to a command to execute a selected content template element e.g. by single clicking or double clicking a pointing device when the associated pointer is positioned over the selected content template element the template design module generates a property editor window that presents the user with a set of editable properties that are appropriate for the selected content template element. Examples of text stream properties include fixed text width which may be set with a MACRO so that it can adapt to page dimensions allowed text stream elements e.g. header sub header paragraph list item in line figure and font properties for the allowed elements. Text stream properties for main body streams are global for the whole document i.e. any edits are applied globally to the collection style sheet . In addition text streams within sidebars may have independent properties. Examples of figure properties include minimum and maximum heights and widths and caption properties which may be set similar to text stream element properties described above.

The graphical user interface allows the user to group template elements. In one example implementation based on one or more commands received through the graphical user interface the template design module groups respective ones of the template elements into a template element group generates a specification of an optimization path encodes the specification of the optimization path into the data structure and displays a graphic representation of the optimization path in the template design area .

Optimization paths may be grouped together to indicate that text will flow from one path to the next. For example shows an example in which the user has designated the two vertical paths as members of an optimization path group by enclosing the paths in a rounded rectangular boundary. In the example shown in there is one vertical path group that includes two paths and one horizontal path group that includes one path . shows another example of a layout of template elements on a canvas in which the user has designated two separate optimization path groups each including a single respective optimization path . Document content is not allowed to flow from one optimization path group to another. In response to the designation of an optimization path group the template design module designates the constituent optimization paths of each optimization path group as a respective group of optimization paths whose associated adaptive layout variables are to be optimized jointly in response to the designation of the optimization path groups .

Content template elements also may be grouped together as a sidebar. For example shows an example of a layout of the template elements on the template canvas in which the user has designated the content template elements within the optimization path group as a sidebar group by enclosing the elements in a rounded rectangular boundary. Document content is not allowed to flow outside the sidebar. In response to the designation of a side bar group the template design module designates the elements in the template element sub group group as a group of template elements whose associated adaptive layout variables are to be optimized jointly with each other in response to the designation of the sidebar group .

Each of the template elements is characterized by a respective set of parameters e.g. height width aspect ratio and positions on the canvas . In some examples the template design module initially sets the parameters to fixed values that are inferred from the sizes and position of the template elements on the canvas. In some examples using graphical user interlace commands e.g. single clicking or double clicking a pointing device when the associated pointer is positioned over the selected content template element the user can designate a selected one of the template elements as a variable element. In response to this designation the template design module highlights the selected template element. shows an example of the canvas that contains indications of configurable template element variables along the optimization paths that are highlighted in response to user designation of these template elements as being variable. In this case the figure block and the white space distances separating the content blocks are highlighted. Each of the variable template elements also is associated with a respective variable identifier i.e. 1 2 . . . 6 . Variables that have the same identifiers are treated by the template design module as having the same parameter values e.g. equal lengths .

The template design module also responds to the designation of a selected template element as a variable element by generating a parameter specification window that allows the user to enter values of one or more parameters that characterize one or more associated adaptive layout variables that constrain adaptability of the selected template element to different document content. In some examples for each variable the user may specify a minimum value a maximum value a mean value and a precision value that characterizes a degree of variability of the variable. In one example the degree of variability parameter is measure of variation of the associated adaptive layout variable about the mean value. Examples of degree of variability parameters include any type of measure of the variation for dispersion in values including but not limited to variance standard deviation range mean deviation semi interquartile range and 10 90 percentile range. In some examples the degree of variability parameter is a standard deviation of a Gaussian distribution that is centered at the mean value and that is truncated at the minimum and maximum values. With respect to figure content template elements the user can specify width and height ranges and a precision value that characterizes a degree of variability of the scale factor for the figure. In some examples the mean value of the scale parameter automatically is determined by the layout engine based on the aspect ratio of an actual image so as to make the figure as large as possible without violating the specified range conditions on width and height. Thus the scale factor of a figure has a truncated Gaussian distribution with truncation at the mean.

In some examples the graphical user interface allows the user to split respective ones of the variables. For example in some implementations the graphical user interface allows the user to split white space variables into two independent variables in order to enforce a synthetic margin or boundary between content template elements. shows an example of the template canvas that includes a layout of template elements over which extends a horizontal optimization path that contains a single white space template element that is divided into two independently configurable whitespace template elements labeled 2 and 3 . In some examples the user may right click on the white space template element to bring up a context menu that includes an option to split the white space template element into two separate and independently configurable template elements. Based on this input the template design module divides a respective one of the template elements into multiple separate template elements each of which is associated with a separate respective set of one or more adaptive layout variables that constrain adaptability of the separate template element to different document content. The user can input values of parameters characterizing the adaptive layout variables respectively associated with the separate template elements through the parameter specification window described above. In the illustrated example the template design module indicates the splitting of the white space template element which a cross icon that is positioned at the location along the white space template element selected by the user.

As explained in detail below in connection with an example implementation of the layout engine the ability to specify values of the parameters characterizing the associated adaptive layout variables allows the user to guide the layout engine in carrying out the user s aesthetic judgments regarding the design of the final document including relative block placement white space distribution and figure scaling. The layout engine is configured to appropriately weight the user s choices as encoded in the variable parameter values.

In some examples the layout engine is implemented by a probabilistic layout engine that produces variable content documents based on a probabilistic model that assigns a probability score to every possible document with higher quality documents receiving higher scores. The model parameters typically are set by a user typically a professional graphic designer using the template design module described above. In these examples the layout engine learns for fits the model and then finds a global optimal document that maximizes a probability score given content e.g. text figures and logical relationships between them by determining a probabilistic inference over a Bayesian network. Examples of the probabilistic layout engine are described in detail below. Additional details regarding the structure and operation of examples of the probabilistic layout engine are described in co pending International Patent Application No. PCT US09 61320 filed Oct. 20 2009 and in co pending International Patent Application No. PCT US09 62288 filed Oct. 28 2009.

The probabilistic layout engine typically includes three components a parser that parses style sheets variable document templates and input document content into internal data structures an inference engine that computes optimal layouts given the document content and a rendering engine that renders the final output document.

In some examples the parser module includes three separate parsers a style sheet parser a content parser and a variable document template parser. The style sheet parser reads the style sheet for each document content stream and creates a style structure that includes document style and font styles. The content parser reads the content stream and creates respective arrays of structures for figures text and sidebars.

The text structure array referred to as the chunk array includes information about each independent chunk of text that will be placed on the page. A single text block in the content stream may be chunked as a whole if it cannot flow across columns or pages e.g. headings text within sidebars etc. . If the text block is allowed to flow e.g. paragraphs lists etc. it is decomposed into smaller chunks that are rendered atomically. Each structure in the chunk array includes its index in the array chunk height whether a column or page break is allowed at the chunk the identifier of the content block to which the chunk belongs the block type and an index into the style array to access the style to render the chunk. The height of a chunk is determined by rendering the text chunk at all possible text widths using the specified style in an off screen rendering process. In some examples the probabilistic layout engine uses the Scribus desktop publishing rendering engine which allows the probabilistic layout engine to query the number of rendered lines via an API Application Programming Interface of the Scribus application. The probabilistic layout engine uses the number of lines and information regarding the font style and line spacing to calculate the rendered height of a chunk.

Each figure structure in the figure structure array encapsulates the figure properties of an actual figure in the content stream such as width height source filename caption and the text block id of a text block which references the figure. Figure captions are handled similar to a single text chunk described above allowing various caption widths based on where the caption will actually occur in a template e.g. full width captions span text columns while column width captions span a single text column .

Each content sidebar structure in the sidebar structure array may appear in any sidebar template slot unless explicitly restricted so the sidebar array has elements which are themselves arrays with individual elements describing allocations to different possible sidebar styles. Each of these structures has a separate figure array and chunk array for figures and text that appear within a particular template sidebar.

Given the document content style sheets and the variable document template structures the inference engine solves for the optimal layout of the given content by simultaneously allocating content to a sequence of templates chosen from the template library and solving for template parameters that allow maximal page fill while incorporating the aesthetic judgements of the graphic designers encoded in the prior parameter distributions. The inference engine is based on a framework referred to herein as the Probabilistic Document Model PDM which models the generation of arbitrary multi page documents.

According to the PDM the ipage of a document is generated by first choosing a template Tfrom a library of templates then setting its parameter vector and then allocating content C e.g. images sidebars and text blocks to that page. Each of these tasks is performed by sampling from a conditional probability distribution. For example P T t is the probability of picking a particular template tfor the ipage from a set of K templates in the template library. If there is no a priori choice for a template this probability is typically simply 1 K. Other values can be set for the template probabilities so that certain templates can be made more of less likely to be used in creating a document. Thus 

Once a template is selected the inference engine samples its parameter vector from the conditional distribution P T . The inference engine models this distribution to be a multivariate normal distribution that describes the prior probabilities of various parameter settings. This distribution can be directly derived from the parameter distributions in the variable document templates that encode the template designer s aesthetic choices about desired parameter values. Sampling from this distribution makes these aesthetic parameter settings more likely. Thus 2 Where and represent the means and precisions of the parameters as entered by a graphic designer. In fact any desired linear relation proportions ratios etc. between parameters can be captured in the above prior probability distribution.

Finally the inference engine samples the allocation for the current page Cfrom a probability distribution P C C . In this example the model assumes that the current allocation is independent of the template and parameter selections for all previous pages given the allocation to the previous page and the parameter settings for the current page. The allocation to the previous page affects the probability of an allocation for the current page via the logical relationship content in the previous page has to content on the current page. First information on content allocated to the previous page is sufficient to conclude that all prior content has already been allocated. Thus previous page allocation allows the inference engine to determine if a figure or sidebar appearing on the current page is referenced in a prior page. This would reduce the probability of the current allocation since the figure sidebar does not appear on the same page as its reference. Furthermore P C C depends on the parameter settings since certain parameter settings fill the page with the existing content better than others and are hence assigned higher probability. This conditional distribution is given by 

In the above equation R C C represents the number of dangling references due to the allocation Cto the ipage and Cto the i 1 page. The constant represents an exponential weighting factor that represents how much to penalize mismatched references in the probability distribution. H C and W C represent the height and width of a Y and X path group respectively after subtracting fixed spaces and reserved regions in the Y and X directions. The variables yand xrepresent content dependent vectors that represent actual figure heights widths and whitespace in each direction for each path group. For good page fill in the Y and X directions H C y 0 and W C x 0. The normal distributions above simply assign high probability to these events and lower probability for deviations from ideal. The constants and are precision variables of the normal distribution that control the degree to which production of full pages is favored.

The probabilistic layout engine generates documents by repeating the sampling process page by page. Thus a document is a sequence of templates template parameters and content allocations that is sampled from an overall probability distribution over P pages given by 

This distribution may be represented as a directed graph as shown . The distribution is generated from the graph by multiplying the conditional probability distributions of each node conditioned only on its parents. Such a model is called a Bayesian network model for the underlying probability distribution. The model is generative in the sense that a sequential process as described above can be used to generate pages and thus documents from the model. The documents generated by this process are samples drawn by the inference engine from the probability distribution described above. Although the sampling procedure generates documents with various probabilities recall that higher probabilities translate to higher quality the inference engine is configured to find the document that has the highest probability. In this process the inference engine computes the optimizing sequence of templates T template parameters and allocations C that maximize document probability.

Although all the variables influence each other in general a variable is only directly influenced by a few neighbors at most. This fact allows the inference engine to use the structure of the graph in performing the desired maximization. The variable appears in only two terms with two other variables Cand T. This allows the inference engine to maximize over without looping over every possible value of every node variable in the network. Thus we have 

This maximization is performed for all possible values of Cand Tbut the inference engine does not need to consider variations in other variables in the network. Even so this is would still be a challenging task in general. The particular distributions that are used for P T and P C C make this task particularly efficient for the inference engine since these are conjugate normal distributions and their product also is normal. The maximizing value is the mean of the distribution which can be computed in closed form using the equation

Not only is this efficient to compute but the effect of incremental allocations is even more efficient to compute. Allocating an additional text chunk would only affect the right hand side of the above equation and only a few multiply accumulates are necessary to update from C T to C T . In some examples additional speedup in computing C T is obtained by configuring the inference engine to screen allocation Cand avoiding computation altogether for invalid allocations e.g. figure or sidebar occurring before its reference widowed or orphaned text chunks etc. screen templates for compatibility e.g. content with two figures cannot be allocated to a template with only one figure and screen for too much and too little content that make it impossible to fill the page even when template parameters are maximum or minimum. These screening approaches significantly reduce the number of cases for which optimization is performed.

Once C T is computed the inference engine maximizes over template choices of the variable T which occurs only in the terms P T and C T to compute 

In general eliminating via maximization variables and Tyields the functions C C . Note that C is simply C . The inference engine proceeds by eliminating variables C C . . . Cas described above.

The process stops when all of the input content has been allocated and Tis chosen as the maximum of all last page possibilities. From the allocation to the final page. C the inference engine computes the optimal allocation to the previous page C that caused T C to be maximized. Then the inference engine determines the value of C that caused T C to be maximum and so on. This allows the inference engine to solve for optimal allocations for all P pages. Once the allocations for each page are determined the inference engine looks up the optimal template for each page by finding the template T that maximizes C T . Once the template and the allocation are known the inference engine determines the template parameters using the dosed form solution for given above. Once the page count allocations to pages template selection and parameter estimation are done the inference task is complete. The solution found by this approach is globally optimal at a significant computational advantage over exhaustive enumeration of all possibilities.

In some examples the probabilistic layout engine uses the Scribus API to create the final document . For each page the rendering engine traverses the Y and X paths of the chosen page template and renders content blocks as they are encountered. Optimal template parameters determined via inference are used directly to determine the positions widths and heights of all blocks. The rendering engine produces a render table structure that keeps track of items that have already been rendered to avoid duplicate rendering. Text blocks are rendered in the Y path and image blocks are rendered after a complete X and Y pass. Separate layers are created to render background and foreground items.

Examples of the document processing system including the template design module may be implemented by one or more discrete modules or data processing components that are not limited to any particular hardware or machine readable instructions e.g. firmware or software configuration. In the illustrated examples these modules may be implemented in any computing or data processing environment including in digital electronic circuitry e.g. an application specific integrated circuit such as a digital signal processor DSP or in computer hardware device driver or machine readable instructions including firmware or software . In some examples the functionalities of the modules are combined into a single data processing component. In some examples the respective functionalities of each of one or more of the modules are performed by a respective set of multiple data processing components.

The modules of the document processing system may be co located on a single apparatus or they may be distributed across multiple apparatus if distributed across multiple apparatus these modules and the display may communicate with each other over local wired or wireless connections or they may communicate over global network connections e.g. communications over the Internet .

In some implementations process instructions e.g. machine readable code such as computer software for implementing the methods that are executed by the examples of the document processing system as well as the data they generate are stored in one or more machine readable media. Storage devices suitable for tangibly embodying these instructions and data include all forms of non volatile computer readable memory including for example semiconductor memory devices such as EPROM EEPROM and flash memory devices magnetic disks such as internal hard disks and removable hard disks magneto optical disks. DVD ROM RAM and CD ROM RAM.

In general examples of the variable document template generation system may be implemented in any one of a wide variety of electronic devices including desktop computers workstation computers and server computers.

A user may interact e.g. enter commands or data with the computer using one or more input devices e.g. a keyboard a computer mouse a microphone joystick and touch pad . Information may be presented through a user interface that is displayed to a user on the display implemented by e.g. a display monitor which is controlled by a display controller implemented by e.g. a video graphics card . The computer system also typically includes peripheral output devices such as speakers and a printer. One or more remote computers may be connected to the computer system through a network interface card NIC .

As shown in the system memory also stores the document processing system a graphics driver and processing information that includes input data processing data and output data. In some examples the document processing system interfaces with the graphics driver to present a user interface on the display for managing and controlling the operation of the document processing system .

