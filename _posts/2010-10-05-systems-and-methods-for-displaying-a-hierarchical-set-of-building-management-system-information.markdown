---

title: Systems and methods for displaying a hierarchical set of building management system information
abstract: A computing system for displaying hierarchical set of building management system information is shown and described. The computing system includes a processing circuit configured to render a shape for each software defined building object and to render the shapes for lower level software defined building objects as nested within the shapes for the higher level software defined building objects.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09475359&OS=09475359&RS=09475359
owner: Johnson Controls Technology Company
number: 09475359
owner_city: Plymouth
owner_country: US
publication_date: 20101005
---
The present application claims the benefit of U.S. Provisional Application No. 61 249 187 filed Oct. 6 2009 the entirety of which is hereby incorporated by reference.

A building management system BMS is in general a system of devices configured to control monitor and manage equipment in or around a building or building area. A BMS can include a heating ventilation and air conditioning HVAC system a security system a lighting system a fire alerting system another system that is capable of managing building functions or devices or any combination thereof. BMS devices may be installed in any environment e.g. an indoor area or an outdoor area and the environment may include any number of buildings spaces zones rooms or areas. A BMS may include METASYS building controllers or other devices sold by Johnson Controls Inc. as well as building devices and components from other sources.

A BMS may include one or more computer systems e.g. servers BMS controllers etc. that serve as enterprise level controllers application or data servers head nodes master controllers or field controllers for the BMS. Such computer systems may communicate with multiple downstream building systems or subsystems e.g. an HVAC system a security system etc. according to like or disparate protocols e.g. LON BACnet etc. . The computer systems may also provide one or more human machine interfaces or client interfaces e.g. graphical user interfaces reporting interfaces text based computer interfaces client facing web services web servers that provide pages to web clients etc. for controlling viewing or otherwise interacting with the BMS its subsystems and devices.

One embodiment of the invention relates to a computerized method for displaying a hierarchical set of building management system BMS information. Each level of the hierarchical set of BMS information may include at least one software defined building object. The method includes rendering a shape for each software defined building object. The method also includes rendering the shapes for lower level software defined building objects as nested within the shapes for the higher level software defined building objects. The method further includes causing the display of the rendered and nested shapes on a graphical user interface shown on an electronic display system. Each shape may be displayed with indicia relating to software defined building object associated with each shape.

Another embodiment of the invention relates to a computer system for displaying a hierarchical set of building management system BMS information. Each level of the hierarchical set of BMS information may include at least one software defined building object. The computer system includes a processing circuit configured to render a shape for each software defined building object and to render the shapes for lower level software defined building objects as nested within the shapes for the higher level software defined building objects. The processing circuit is also configured to cause the display of the rendered and nested shapes on a graphical user interface shown on an electronic display system.

Yet another embodiment of the invention relates to computer readable media with computer executable instructions embodied thereon that when executed by a computing system perform a method for displaying a hierarchical set of building management system BMS information. Each level of the hierarchical set of BMS information may include at least one software defined building object. The media includes instructions for rendering a shape for each software defined building object. The media also includes instructions for rendering the shapes for lower level software defined building objects as nested within the shapes for the higher level software defined building objects. The media further includes instructions for causing the display of the rendered and nested shapes on a graphical user interface shown on an electronic display system. Each shape may be displayed with indicia for the software defined building object associated with each shape.

Alternative exemplary embodiments relate to other features and combinations of features as may be generally recited in the claims.

Before turning to the figures which illustrate the exemplary embodiments in detail it should be understood that the disclosure is not limited to the details or methodology set forth in the description or illustrated in the figures. It should also be understood that the terminology is for the purpose of description only and should not be regarded as limiting.

Embodiments of the present disclosure include a computer system for a BMS e.g. a BMS controller that has been configured to help make differences in building subsystems transparent at the human machine interface application or client interface level. The computer system is configured to provide access to different building devices and building subsystems using common or unified building objects e.g. software objects stored in memory to provide the transparency. In an exemplary embodiment a software defined building object e.g. virtual building object virtual device groups multiple properties from disparate building systems and devices into a single software object that is stored in memory and provided by a computer system for interaction with other systems or applications e.g. front end applications control applications remote applications client applications local processes etc. . Multiple software defined building objects may be described as forming an abstraction layer of a BMS software framework or architecture. Benefits such as allowing developers to write applications that will work regardless of a particular building subsystem makeup e.g. particular naming conventions particular protocols etc. may be provided by such software defined building objects. Such software defined building objects are further described in Ser. No. 12 887 390 filed Sep. 21 2010 to Huneycutt et al. application Ser. No. 12 887 390 is hereby incorporated by reference in its entirety.

Referring now to a perspective view of a building is shown according to an exemplary embodiment. A BMS serves building . The BMS for building may include any number or type of devices that serve the building. For example each floor may include one or more security devices video surveillance cameras fire detectors smoke detectors lighting systems HVAC systems or other building systems or devices. In modern BMSs BMS devices can exist on different networks within the building e.g. one or more wireless networks one or more wired networks etc. and yet serve the same building space or control loop. For example devices may be connected to different communications networks or field controllers even if the devices serve the same area e.g. floor conference room building zone tenant area etc. or equipment.

Referring now to a block diagram of an exemplary BMS for building of is shown according to an exemplary embodiment. BMS is shown to include a plurality of BMS subsystems . Each BMS subsystem is connected to a plurality of BMS devices and makes data points for varying connected devices available to upstream BMS controller . Additionally BMS subsystems may encompass other lower level subsystems. For example an HVAC system may be broken down further as HVAC system A HVAC system B etc. In some buildings multiple HVAC systems or subsystems may exist in parallel and may not be a part of the same HVAC system .

As illustrated in a BMS subsystem includes HVAC system . HVAC system is shown to include a lower level HVAC system named HVAC system A. For example HVAC system may control HVAC operations for a given building e.g. building while HVAC system A controls HVAC operations for a specific floor of that building. HVAC system A is connected to air handling units AHUs named AHU A and AHU B in the BMS respectively. AHU may control variable air volume VAV boxes named VAV 3 and VAV 4 in the BMS. Likewise AHU may control VAV boxes and named VAV 2 and VAV 1. HVAC system may also include chiller named Chiller A in the BMS. Chiller may provide chilled fluid to AHU and or to AHU .

HVAC system may also receive data from AHUs e.g. a temperature setpoint a damper position temperature sensor readings . HVAC system may then provide such BMS inputs up to HVAC system and on to middleware and BMS controller . Similarly other BMS subsystems may receive inputs from other building devices or objects and provide them to middleware and BMS controller e.g. via middleware . For example a window control system may receive shade control information from one or more shade controls may receive ambient light level information from one or more light sensors or may receive other BMS inputs e.g. sensor information setpoint information current state information etc. from downstream devices. Window control system may include window controllers named local window controller A and local window controller B in the BMS respectively. Window controllers control the operation of subsets of the window control system . For example window controller may control window blind or shade operations for a given room floor or building in the BMS. Lighting system may receive lighting related information from a plurality of downstream light controls for example from room lighting . Door access system may receive lock control motion state or other door related information from a plurality of downstream door controls. Door access system is shown to include door access pad named Door Access Pad 3F which may grant or deny access to a building space e.g. floor conference room office etc. based on whether valid user credentials are scanned or entered e.g. via a keypad via a badge scanning pad etc. .

BMS subsystems are shown as connected to BMS controller via middleware and are configured to provide BMS controller with BMS inputs from the various BMS subsystems and their varying downstream devices. BMS controller is configured to make differences in building subsystems transparent at the human machine interface or client interface level e.g. for connected or hosted user interface UI clients remote applications etc. . BMS controller is configured to describe or model different building devices and building subsystems using common or unified building objects e.g. software objects stored in memory to provide the transparency. Benefits such as allowing developers to write applications that will work regardless of the building subsystem makeup may be provided by such software building objects.

In conventional buildings the subsystems are typically managed separately. Even in BMSs where a unified graphical user interface is provided a user must typically click through a hierarchy such as is shown in to view data points for a lower level device or to make changes e.g. setpoint adjustments etc. . Such separate management can be particularly true if the subsystems are from different manufacturers or communicate according to different protocols. Conventional control software in such buildings is sometimes custom written to account for the particular differences in subsystems protocols and the like. Custom conversions and accompanying software is time consuming and expensive for end users or their consultants to develop. A software defined building object of the present disclosure is intended to group otherwise ungrouped or unassociated devices so that the group may be addressed or handled by applications together and in a consistent manner.

In an exemplary BMS controller a conference room building object may be created in memory for each conference room in the building. Further each conference room building object may include the same attribute property and or method names as those shown in . For example each conference room may include a variable air volume box attribute a window attribute a lighting attribute and a door access device attribute. Such an architecture and collection of building objects is intended to allow developers to create common code for use in buildings regardless of the type protocol or configuration of the underlying BMS subsystems. For example a single automated control application may be developed to restrict ventilation to conference rooms when the conference rooms are not in use e.g. when the occupied attribute is equal to true . Assuming proper middleware and communications systems the setup or the installation of a different BMS device or an application for a different BMS may not need to involve a re write of the application code. Instead for example if a new building area is designated as a conference room a new conference room building object can be created and set up e.g. a variable air volume unit mapped to the conference room building object . Once a new conference room building object is created and set up code written for controlling or monitoring conference rooms can interact with the new conference room and its actual BMS devices without modification.

Referring still to the BMS is shown to include a BMS interface in communication with middleware of the BMS. Middleware is generally a set of services that allow interoperable communication to from or between disparate BMS subsystems of the BMS e.g. HVAC systems from different manufacturers HVAC systems that communicate according to different protocols security fire systems IT resources door access systems etc. . Middleware may be for example an EnNet server sold by Johnson Controls Inc. While middleware is shown as separate from BMS controller in various exemplary embodiments middleware and BMS controller are integrated. For example middleware may be a part of BMS controller .

BMS interface e.g. a communications interface can be or include wired or wireless interfaces e.g. jacks antennas transmitters receivers transceivers wire terminals etc. for conducting data communications with another system or network. For example BMS interface can include an Ethernet card and port for sending and receiving data via an Ethernet based communications network. In another example BMS interface includes a WiFi transceiver for communicating via a wireless communications network. BMS interface may be configured to communicate via local area networks or wide area networks e.g. the Internet a building WAN etc. . BMS interface is configured to receive building management inputs from middleware or directly from one or more BMS subsystems . BMS interface can include any number of software buffers queues listeners filters translators or other communications supporting services.

BMS controller is further shown to include a processing circuit including a processor and memory . Processor may be a general purpose or specific purpose processor an application specific integrated circuit ASIC one or more field programmable gate arrays FPGAs a group of processing components or other suitable processing components. Processor is configured to execute computer code or instructions stored in memory or received from other computer readable media e.g. CDROM network storage a remote server etc. . According to an exemplary embodiment memory is communicably connected to processor via electronics circuitry. Memory e.g. memory unit memory device storage device etc. is one or more devices for storing data and or computer code for completing and or facilitating the various processes described in the present disclosure. Memory may be RAM hard drive storage temporary storage non volatile memory flash memory optical memory or any other suitable memory for storing software objects and or computer instructions. Memory may include database components object code components script components or any other type of information structure for supporting the various activities and information structures described in the present disclosure. Memory for example includes computer code for executing e.g. by processor one or more processes described herein. When processor executes instructions stored in memory for completing the various activities described herein processor generally configures BMS controller and more particularly processing circuit to complete such activities.

Memory is shown to include building objects and building object templates which can be used to construct building objects of predefined types. For example building object templates may contain a Conference Room template that can be used to define conference room objects in building objects .

In software defined building object named Conference Room.B1 F3 CR5 is illustrated as existing within memory of BMS controller . To create a particular building object for example a software object of an air handling unit AHU inputs from building management resources may be mapped e.g. linked associated described grouped to attributes of the particular building object. A simplified exemplary result of such mapping might be an object such as 

For example BMS controller may group inputs from the various subsystems to create a building object Conference Room.B1 F3 CR5 including inputs from various systems controlling the environment in the room.

As an example of how a building object may be used by the system all conference room building objects may have the same attributes as Conference Room.B1 F3 CR5 listed above. Once each of the conference rooms in building are mapped to a software defined conference room building object the rooms may be treated the same way in code existing in BMS controller remote applications or UI clients . Accordingly an engineer writing software code for UI clients remote applications or BMS controller can know that each conference room will have attributes listed above e.g. VAV window lighting door access occupied getSheddableWattage . Therefore for example rather than having to know an address for a particular variable air volume controller in a particular HVAC system a given conference room s VAV controller may be available at the conference room s vav attribute.

As an example of the first step a conference room template or class may be created e.g. by a developer by a rapid application development module etc. such as the following 

In some embodiments the building object template or class may be a Groovy Java class configured to inherit a series of benefits such as the ability to extend existing devices.

An instance of the class may be created and named for example B1 F3 CR5 . The names can be descriptive based on an automated routine configured to find building objects manually applied or otherwise.

The mapping or binding process maps disparate BMS devices or inputs to the instance of the building object.

Once the building objects are created and BMS devices or inputs are mapped to the building objects software defined building objects may be used by applications local remote client etc. with any suitable programming language or syntax. As an example of interaction with the software defined building object used in previous examples the following exemplary piece of code is configured to load B1 F3 CR5 as ConfRoom print the result of the method getSheddableWattage for ConfRoom and set the window parameter to 50 which may be sent to WCS or Local Window Controller B via BMS interface or middleware shown in to cause the blinds to be 50 percent open when the ConfRoom object is saved.

In an exemplary embodiment application services of BMS controller shown in may be or include web services configured to allow remote applications or local applications to access building object templates building objects causal relationship models hierarchical projection models query engine and hierarchical rendering module directly or indirectly via a set of internet application programming interfaces. To support such interfaces each software defined building object may include or be exposed to a toXML method configured to describe the software defined building object using XML. In another exemplary embodiment application services allows remote applications on other BMS controllers to communicate with BMS controller over a network.

Conventional building systems do not include organizational models which link and describe building objects by causal relationships e.g. ontological models . A key feature of an ontological model is the ability to define relationships between dissimilar object types. A conventional hierarchical model may have an HVAC server object and a VAV box that is a member of the HVAC server object due to its control connection. Such a hierarchical model allows objects to be handled in a hierarchical manner but lacks the ability to interrelate objects that do not follow the chain of inheritance. Causal relationships or ontological models however allow dissimilar objects to be related thereby adding layers of description flexibility and robustness to the system. For example a ventilates causal relationship may be used to relate a VAV box object to a conference room object even though VAV box objects and conference room objects are dissimilar. Memory is shown to include causal relationship models which store the causal relationships between objects in building objects .

In causal relationship models is shown to include a causal relationship model for conference room and a number of building objects e.g. building objects etc. associated with devices shown in that affect access to conference room or the environment of conference room . The causal relationships from these building objects to conference room are identified and mapped back to conference room . For example VAV box is shown linked to conference room with a directional link described by the name or tag ventilates. This link represent the causal relationship between VAV box and conference room . More particularly the link identifies the causal relationship between VAV box and conference room as one where VAV box provides ventilation to conference room . VAV box is affected by HVAC System and so the corresponding causal relationship is shown as being directional from conference room to VAV box with controls describing the relationship. Similarly room lighting lights conference room window controller dims conference room and access pad controls access to conference room . As described above conference room is not a building device that is associated with any one particular controller or BMS subsystem. As a complement to the software defined building object for the conference room the exemplary causal relationship information structure shown at the bottom of provides a multi level relationship map that more clearly represents the complex control environment of the actual conference room shown at the top of . In addition to coding and software development advantages the causal relationship models can provide new user interface views more robust searching e.g. show me all VAV boxes that ventilate conference rooms new fault detection and diagnostics tools and other advantages.

While causal relationship models of the present disclosure may be rendered or displayed as directed graphs embodiments of the present disclosure may store causal relationship models in memory according to various suitable information structures for representing such a model in computer memory. For example a relational database may be used in some embodiments. In other embodiments a collection of XML files may be maintained to store the causal relationship models. In yet other embodiments a file or files including other information structures may be maintained.

Causal relationship models may be stored in memory in any number of ways. In one embodiment causal relationship models may be stored within one or more tables. For example a table may have columns for a relationship type e.g. a relationship description a first object identifier and a second object identifier. With reference to a row entry in such a table may include has in the relationship column Building 1 in the first object identifier column and Floor 3 in the second object identifier column. In this way the causal relationship models can be easily queried by relationship type first object identifier and or second object identifier. In another embodiment a different table can be established for every type of causal relationship in the system. For example a controls table may be established with a source identifier field and a destination identifier field. Referring to in a row for such a table AHU B would populate the source identifier field and VAV 2 would populate the destination identifier field. In other embodiments each software defined building object may include a number of causal relationship properties or attributes that store the causal relationships. For example a building object for CR 4 shown in might include a ventilated by property that is a delimited string of devices that ventilate CR 4 e.g. ventilated by VAV 3 VAV 4 . Any number of suitable information structures for representing the causal relationship may be stored in memory.

Causal relationship models such as those shown in may be created in different ways according to varying embodiments of the disclosure. In some embodiments for example a user may be prompted to create or an automated system may create a model with immediate references to particular building objects. In other embodiments the system may prompt or otherwise allow a user to define causal relationship classes or templates of causal relationship models that will later be used and reused for particular instances of causal relationship models and objects.

In an exemplary embodiment a specification of a class class relationships and properties can be defined generally as a template. For example a template for an HVAC class may include default causal relations to equipment objects such as VAV boxes and to location objects such as a floor or building. The representation of the class may be in the form of a directed graph regardless of the underlying information structure and not a conventional device tree form. Default properties or attributes may be established for one or more of the nodes. Instantiated objects can then be created or mapped using the relational template. The created causal relationship models may be modified at run time or via a tool that allows modification outside of a run time environment. For example a tool may be provided for adding modifying or removing relationships objects classes properties attributes and the like. When edits are made the computing system or tool may be configured to dynamically adjust the model s structure e.g. as the model is not stored as a static tree hierarchy . For example if access pad is no longer used to control access to conference room the causal relationships pointing to access pad may be deleted as well as its corresponding building object but the rest of the model remains intact and unaffected. While the causal relationship models shown in primary relate to software defined objects for building devices many different building object relationships may be modeled using the systems and methods of the present disclosure. For example other building entities e.g. departments employees etc. may be mapped to the BMS devices or software objects thereof. Therefore using the causal relationship approach building devices and the BMS may be linked with other enterprise systems e.g. an HR management system having employee objects .

Referring again to memory is also shown to include hierarchical projection models . While the models of the present disclosure are not stored or represented as static hierarchical models systems and methods of the present disclosure are configured to allow the creation of multiple hierarchical views of the causal relationship model. Each view may be defined as a hierarchical model e.g. tree model uni directional tree top down tree having a head node etc. in memory to which a causal relationship model can be applied. In other words one or more hierarchical models may be created in memory and one or more causal relationships can be projected onto the one or more hierarchical models.

Memory is also shown to include client services configured to allow interaction between internal or external clients or applications and BMS controller . Client services for example may include web services or application programming interfaces available for communication by UI clients and remote applications e.g. an energy monitoring application an application allowing a user to monitor the performance of the BMS an automated fault detection and diagnostics system etc. .

Memory further includes user interface module . User interface module is configured to generate one or more user interfaces for receiving input from a user. User interface module may be configured to provide for example a graphical user interface a voice driven interface a text based interface or another interface for receiving user input regarding the mapping of BMS inputs to building objects. In an exemplary embodiment user interface module is an HTML based application configured to be served by for example client services or another web server of BMS controller or another device. User interface module may be configured to prompt a user e.g. visually graphically audibly etc. for input regarding building objects building object templates causal relationship models or hierarchical projection models . In an exemplary embodiment user interface module prompts the user to create or otherwise provides a user interface for creating a template building object . User interface module may also prompt the user to map BMS inputs to the template building object. User interface module may receive and handle the user inputs to initiate the storage of received input mappings. In another exemplary embodiment user interface module may prompt the user to identify define store modify or delete a causal relationship in causal relationship models . For example a user may use a GUI to create a causal relationship between defined building objects in building objects e.g. relating a conference room object to a VAV box object. User interface module may further be configured to generate and serve graphical user interfaces having information displays of building objects and or causal relationships. User interface module may also be configured to utilize query engine to query and retrieve information about causal relationships in causal relationship models or via hierarchical projection models .

Referring now to a flow chart of a process for organizing and using information in a building management system BMS is shown according to an exemplary embodiment. Process includes identifying a plurality of building objects e.g. including building devices software defined building objects or other inputs to the BMS that affect the building environment step . Process also includes identifying the causal relationships between the identified building objects step . Steps may include testing building inputs and outputs for the causal relationships using an automated process. The identifying steps may also or alternatively include using an automated process to analyze characteristics of BMS devices and signals to create software defined building objects and their causal relationships to each other. In yet other exemplary embodiments the identifying steps include causing a graphical user interface to be displayed that allows a user to input the building objects and the causal relationships between the objects.

Process is further shown to include relating the identified objects by the causal relationships step . Relating the identified objects by causal relationships may be completed by an automated process e.g. based on testing based on signal or name analysis at a commissioning phase etc. or by user configuration e.g. of tables of graphs via a graphical user interface etc. . In an exemplary embodiment a graphical user interface may be provided for allowing a user to draw directional links between building objects. Once a link is drawn a computerized process may cause a dialog box to be shown on the GUI for allowing a user to describe the created causal relationship.

Process is yet further shown to include describing the causal relationships step . The description may be found and stored using any of the previously mentioned processes e.g. automated via testing manually input via a keyboard or other user input device etc. . In one set of exemplary embodiments the user is able to select e.g. via a drop down box via a toolbox etc. from a predefined list of possible causal relationship descriptions or to insert e.g. type a custom causal relationship description at a graphical user interface.

Process is yet further shown to include storing the causal relationships and descriptions in a memory device of the BMS step . The causal relationships may be stored using any of the above described information structures e.g. stored in tables stored as lists linked to object properties stored as a system of linked lists etc. .

Referring again to while the causal relationship models of the present disclosure may not be stored or represented as static hierarchical models e.g. a tag based hierarchical model description systems and methods of the present disclosure are configured to allow the creation of multiple hierarchical views of the causal relationship models.

Each view may be defined as a hierarchical model e.g. tree model in memory to which one or more causal relationship models can be applied or projected. For example at least two different hierarchical models may be used to describe the models of as shown below 

Each level of the resultant hierarchical trees may be optionally constrained or not constrained to a certain number of entities this may be set via by updating one or more variables stored in memory providing input to a user interface by coding or otherwise . In the first hierarchical result shown above for example only a single primary VAV box may be specified to be shown for each conference room even though there may be more VAV boxes associated with the conference room. In an un constrained hierarchical result the hierarchical list for each conference room would include all related building objects.

As mentioned above the BMS controller may be configured to use causal relationship models that may be updated during run time e.g. by one or more control processes of the system by user manipulation of a graphical user interface etc. . Any modification of the causal relationship structure in such embodiments may be immediately reflected in applications of hierarchical models. In other words as the building changes the BMS controller with or without the aid of a user may be configured to update the causal relationship models which in turn will be reflected in the results of applying a hierarchical models to the causal relationships.

Referring now to a process for using a hierarchical model of building objects is shown according to an exemplary embodiment. Process includes defining a hierarchical model of building objects e.g. such as those shown above or otherwise formatted step . Process also includes traversing the stored causal relationships to generate a hierarchical result according to the defined hierarchical model step . Alternatively the hierarchical result may be generated by querying the stored causal relationship. For example causal relationships stored as a directed graph may be traversed to generate the hierarchical results whereas a table storing causal relationships may be queried.

Step may be conducted by one or more client applications configured to have access to the causal relationships by a process of a server whereby only the hierarchical results are provided to client applications by a process away from the server or by any other process or module. Process is further shown to include step where the hierarchical result is used to create a graphical representation of the result for display e.g. at a client on a report on a local electronic display system etc. . A graphical user interface including a tool for allowing a user to define new hierarchical models or to revise a previously defined hierarchical model may further be provided to a user via a display system or client. In step of process at least a portion of the hierarchical result is traversed to generate a report. In step of process the hierarchical result or a group of results may be processed by one or more processing modules reporting modules or user interface modules for further analysis of the BMS or for any other purpose e.g. to further format or transform the results . In an exemplary embodiment a hierarchical result or projection of a causal relationship model can be used to find and format a rich set of data that is from the causal relationship model. In other words a hierarchical projection of a causal relationship model can be used to query stored causal relationships.

Referring now to a flow diagram of a process to provide a graphical user interface for allowing users to view or interact with a causal relationship model is shown according to an exemplary embodiment. Process includes providing at least one tool e.g. to a graphical user interface as a text based interface etc. for allowing a user to view or to change a directed graph of the causal relationships and building objects displayed on the graphical user interface step . The tool for changing the directed graph may be the same as the tool for identifying the objects and the relationships elsewhere in the system or process or may be a different tool for conducting revisions after an initial modeling. Process also includes displaying a graphical user interface that includes a tool for allowing a user to define a new hierarchical model or to revise the hierarchical model step . Process further includes displaying a graphical user interface that includes a directed graph representing the causal relationships step . Process also includes providing at least one tool for allowing a user to change the directed graph displayed on the graphical user interface step . Finally process includes updating the causal relationships stored in memory based on the changes made by the user to the directed graph step .

Referring now to a query engine is shown according to an exemplary embodiment. Query engine can use the causal relationship and hierarchical projection and methods described above to allow inspection e.g. querying searching etc. within the graph through structured searches. According to an exemplary embodiment query statement may be provided to query engine via user interface module client services or application services . In this way a module of the computer system a client process or a user via a graphical user interface or another tool e.g. text based query engine may submit a structured query statement to query engine . In some embodiments query engine resides remotely from interface module and from services and communicates with them via middleware over a network. Query engine is configured to receive and parse the structured query statement using statement parser . The parsing may seek out key words e.g. causal relationships object types object names class names property names property values etc. in query statement . Key words that are found may be used by projection generator to construct e.g. using a computerized process a hierarchical model for use in conducting a search for relevant objects or for filtering the search via one or more filtering steps. In one exemplary embodiment parsing of the statement results in a an identification or generation of relevant classes via projection generator b an identification of object constraints via object constraints identifier and c an identification of property value constraints via property value constraints identifier . Query engine applies the query aspects identified by projection generator object constraints identifier and property value constraints identifier to causal relationship models in series to arrive at a result object set .

a Identify classes of Conference Room Floor and Building from the statement using projection generator . Using these identified keywords classes projection generator may generate a hierarchical model that would provide a structured hierarchical tree of conference rooms their floors and their buildings. Query engine may apply the generated hierarchical tree to the one or more causal relationship models to return hierarchical projection results of the conference rooms floors and buildings as well as particular properties and values of each object.

b Identify the object constraints using object constraints identifier . Then using the object constrains identified by object constraints identifier for example query engine would use object constraints filter to filter the projection results to only those conference rooms with the set of object constraints requested by query statement in their grouping. For example only those conference rooms on the third floor of Buildings 1 2 or 3 would remain in a hierarchical result set after filtering using the identified object constraints.

c Identify the property and value constraints using property value constraints identifier . Then using the property and value constraints identified by property value constraints identifier query engine would use property value constraints filter to filter the hierarchical result set to only those conference rooms with building objects whose temperature is Greater Than 72 Degrees. After the object selection and the two filtering steps the resultant hierarchical data set will be information and context rich for ease of processing and reporting back to the user or for action by one or more computing processes.

Other systems and methods for filtering searching and querying may be completed given the causal relationship models and or hierarchical models to which the causal relationship models can be applied.

BMS query results may be presented to users in a number of different ways. Conventional graphical user interfaces GUIs for a BMS typically include different spreadsheets lists or floor plan views. However when causal relationships and hierarchical mappings as described above exist new views may be created that leverage the nesting and or the object types in the search results.

Referring now to a system for rendering hierarchical information on an electronic display is shown according to an exemplary embodiment. Result object set generated by query engine is shown as existing in memory of BMS controller . Result object set contains a mapping of causal relationship models and business objects to a hierarchical format. For example causal relationship models shown in may contain relationship information such as Room 1 in Building 001 is conditioned by AHU1 which is chilled by Chiller 1 in Building 001 in Enterprise A. Query engine can use this causal relationship model and hierarchy projection models to generate a hierarchical result object set . Hierarchical rendering module may use result object set to produce one or more views of the result object set and may provide the views to display interface . Display interface is configured to cause a GUI to be displayed on electronic display and to display the views.

The GUI is shown to include a plurality of shapes for a plurality of software defined building objects. The software defined building objects are shown as nested according to the hierarchy of the result object set . The GUI may be user interactive e.g. for viewing and changing BMS settings configurations setpoints etc. or used as a monitoring tool e.g. the GUI may be configured to change states of any of the shapes based on alarms alerts or other BMS events . The GUI may be described as a treemap or displayed via a treemapping process. Aspects of each shape such as size color hue shading etc. may be correlated to changing events values importance or properties associated with the building objects.

In some embodiments a user may provide preferences to the BMS via user interface module UI clients remote applications or local applications that affect how the shapes are presented on the GUI or which objects and types of information are presented on the GUI. In other embodiments these preferences are defaulted in the BMS based on the user type e.g. administrator HVAC manager security personnel etc. . For example the GUI may use different colors to denote faults in the BMS to an HVAC technician and use different colors to denote the life expectancy of building equipment to an asset manager. Similarly the hierarchical rendering module may be configured to show HVAC related objects as preferred e.g. larger located near the top of the screen etc. .

Various shapes corresponding to the building objects in result object set are shown simultaneously on electronic display . The size and position of the shapes corresponds to the nesting of their associated building objects in the hierarchy of result object set . Enterprise A for example encompasses building which has chiller which chills AHU which conditions rooms .

The computer system driving the displayed GUI may update the shapes to provide a dynamic or living scene for viewing BMS data. This approach may allow for efficient use of screen space and for many e.g. all relevant BMS items to be displayed on the same GUI or display screen simultaneously.

Referring now to the top of hierarchical rendering module may be configured to allow the shapes to change scale or position based on received user input or from received data from the BMS e.g. events alarms etc. . For example view includes shape i.e. Building 001 which is shown as being larger than shape i.e. Building 103. This may correspond to a user preference or selection that places a greater emphasis on Building 001 than Building 103 and or a system determination that information about Building 001 may be of greater interest to a user. Additionally the size of the GUI shapes can be determined by their nesting within the hierarchy itself. By varying the size of the shapes the GUI is able to convey information to a user about the building objects such as an order of importance. In some embodiments larger objects may be associated with building objects having higher priority information for a user to view. As shown in text such as a status summary fault summary and other text about Building 001 may be shown in the box for Building 001. Building 001 may be shown as the largest due to the relative importance of such information as compared to other system buildings. For example shapes have the smallest relative sizes and may denote buildings in Company XYZ that are of the lowest priority.

Similar to size characteristics such as shading and color can be used in the GUI to convey information to a user about the building objects. For example shape may be colored red to denote a detected fault within Building 001 shape may be shaded yellow to denote a possible fault within Building 103 and shapes may be colored green to denote that no faults have been detected in their respective buildings. Shading variations within the same color can also be used to further convey information. For example a light red shading may correspond to a minor fault while a bright red shading may correspond to a critical fault. In some embodiments the size color and shading of the shapes are interrelated. For example shape representing Building 001 may have the largest size and be colored red to signify that a fault exists in Building 001. In other embodiments the size color and shading of the shapes are independent and each conveys different information to a user. For example shape representing Building 001 may be of the largest size because it contains the greatest amount of building equipment yet still be colored green to signify that the equipment is operating normally. However shape representing Building 007 may be smaller in size than shape because it has less building equipment than Building 001 but is colored red because faults in its equipment were detected.

Referring now to the middle of the GUI may be configured to receive a user selection of a particular shape. The system may process this selection as a request from the user to zoom in to the selected shape and may follow the relationships of the building object associated with the shape to generate the new view. A user can click on any given shape for more detailed information about the shape or its constituents. For example when a user selects shape corresponding to Building 103 in view the system may animate or otherwise change the graphical user interface to expand on the contents of Building 103 to display view . In the example shown an Organization hierarchical projection model may be used to generate view in which Building 103 is shown as the top level after the change i.e. lower level shapes shown within Building 103 are hierarchically beneath or children of Building 103. The lower level shapes also have attributes such as size color hue shading etc. that can be used to convey information about the building objects to a user. In this way a user can navigate through the collection of building objects to gain information about the BMS by zooming in or out of the hierarchy. One or more of the shapes may include indicia e.g. icons graphics graphs maps text etc. that describes the building object of the shape.

Referring now to the bottom of views illustrate what can occur when a user makes yet another selection in the GUI clicking or otherwise selecting AHU shape in the Building 103 view . Using this process a user or the system can trigger a zoom in activity into a particular building device to show a hierarchical projection model that focuses on Events. As the levels of the hierarchy are traversed object properties values and other indicia such as device faults and descriptions thereof rather than or in addition to more objects may be revealed by the zooming activity e.g. faults and . In yet other embodiments the entirety of the GUI may be configured to represent events alarms or faults with the levels being assigned by severity urgency on a temporal basis or otherwise. It should be noted that different shapes levels or types of objects or properties may be rendered as having different colors or shading.

Although illustrates a hierarchical set in memory e.g. generated based on a causal relationship model as the data used to create the GUIs the rendering module or other processing modules of the computer system may be configured to receive or access other BMS data to create or modify the GUIs. For example metadata describing events or information such as duration cost impact energy impact as well as statistics of the equipment such as total events or alarms may be calculated retrieved and or used to create the rendered shapes or to determine and set the basic hierarchical set shown in memory of .

Referring now to a flow chart of a computerized process for displaying a hierarchical set of building management system BMS information is shown according to an exemplary embodiment. Process is shown to include step where a hierarchical set of BMS information is received from the BMS. The BMS information may be received from local memory remote memory or a plurality of services or locations. Each level of the hierarchical set of BMS information includes at least one software defined building object. Process is also shown to include step where a shape for each software defined building object is rendered. The shapes may be rectangles as shown near rectangles circles ovals three dimensional objects or otherwise. The rendering may occur in main memory a video buffer or otherwise. Process further includes step where the shapes for lower level software defined building objects are rendered as nested within the shapes for the higher level software defined building objects. The nesting may be determined based on a processing of the hierarchical set processing metadata associated with each object or level or otherwise. The processing may include calculating new parameters aggregate values or other values. The processing to determine nesting may also include comparing the metadata level or calculated values to thresholds or making other comparisons to determine the relative nesting of the levels or objects. Process is yet further shown to include step where the rendered and nested shapes are displayed on a graphical user interface shown on an electronic display system. The resultant GUI may be similar to those shown in . Each shape may be displayed with indicia for the software defined building object associated with each shape. In step after the display is initially rendered the hierarchical rendering module or another processing algorithm of the computer system may receive a BMS event relating to a displayed shape or receive a user selection of a displayed shape. Process may further include step where a displayed shape is changed based on the received event or user selection. The change can include reorganizing the graphical user interface so that the selected shape is displayed as at least one of a higher level or a top level in the graphical user interface. The change may also or alternatively include expanding the shape to display increased information regarding the shape. Other changes may be conducted by the system in various alternative embodiments.

Referring now to a detailed view of hierarchical rendering module of is shown according to an exemplary embodiment. Rendering module receives result object set which contains a hierarchical set of building objects. Result object set is provided by query engine user interface module client services application services or local applications . Result object set may also be provided by middleware or another computing device in BMS . Result object set may be provided based on the causal relationship processing discussed with reference to and elsewhere in the present disclosure. Rendering module uses result parser to parse result object set into building objects and their corresponding nestings in the hierarchy.

The building objects in result object set that are identified by result parser are evaluated by object type evaluator . Object type evaluator generates one or more criteria for the appearance of an object when it is displayed. For example an alarm object may have a different size color or shape when it is presented via a display device. Object type evaluator is also able to utilize information from the BMS based on the type of building object. For example object type evaluator may utilize information from user interface module client services application services and or other components of the BMS to generate recommended characteristics for the object s graphical representation. By way of example a user may provide an indication via user interface module that more information about a particular object is desired or that certain types of objects should be given specific characteristics on the display.

Hierarchical rendering module is also shown to include nesting evaluator which receives the nestings in result object set identified by result parser . Similar to object type evaluator nesting evaluator generates one or more characteristics for the building objects such as size color shading text etc. based on their nesting within the hierarchy. For example an AHU nested deeply in the hierarchy may be associated with a smaller shape while a building nested near the top of the hierarchy may be associated with a larger shape.

Hierarchical rendering module may also use additional information e.g. data from user interface module client services and or application services to generate characteristics for the building objects. For example a user preference from user interface module may specify that objects of a certain type are displayed using large shapes with bright colors and shadings. In another embodiment the object types evaluated by object type evaluator and or nestings evaluated by nesting evaluator can drive queries to the BMS for additional information about the objects. This information can then be incorporated into the rendering of the objects as shapes. For example an object representing a physical building may trigger hierarchical rendering module to retrieve information about the building e.g. a status summary a current fault summary or other information about the building . This information may be used to determine the size color shading etc. of the object s shape or may be presented as text within the shape itself.

Characteristics for the building objects generated by object type evaluator nesting evaluator user interface module client services and or application services are collected by shape generator to finalize the appearance of the shapes. Shape generator may also use an order of priority in generating the shapes. For example a user preference from user interface module may specify that VAV box fault alarms are to be given smaller sizes even though object type evaluator determines that faults are to be given larger sizes. In that case the user preference may be given priority and the corresponding shape given a smaller size.

Hierarchical rendering module is further shown to include shape aggregator which aggregates the shapes generated by shape generator into one or more views. Shape aggregator may also be configured to resize the shapes to fit views having specific dimensions e.g. different display sizes while retaining the relative sizes of the shapes to one another. Generated views are then provided by shape aggregator to display interface for presentation on an electronic display.

Referring now to a flow chart of process for rendering a hierarchical set of BMS information is shown according to an exemplary embodiment. Process is shown to include the step of parsing a hierarchical model step . In step the hierarchical model is parsed to determine its constituent objects and their respective nestings. Process is also shown to include the step of evaluating the object types step . The object types in the hierarchy can be used to generate characteristics for their visual representation in a GUI. For example a shape corresponding to an alarm object type may have a red color by default. Process is further shown to include the step of evaluating the nesting of the objects step . Similar to the object types the nesting of the objects within the hierarchy can be used to generate characteristics for their visual representation in a GUI. For example higher level objects in the hierarchy may be given larger shapes than deeper nested objects.

Process is yet further shown to include receiving additional information step . Additional information from a user or from the BMS itself can be used to further define how the building objects are rendered. For example a user preference may specify that objects of a certain type are displayed using large shapes with bright colors and shadings. In another embodiment the object types evaluated in step and or nestings evaluated in step can drive queries to the BMS for additional information about the objects. This information can then be incorporated into the rendering of the objects as shapes. For example an object representing a physical building may trigger the BMS to retrieve information about the building e.g. a status summary a current fault summary or other information about the building . This information may be used to determine the size color shading etc. of the object s shape or may be presented as text within the shape itself.

Process is also shown to include the step of generating shapes step . In step the characteristics of the shapes that were determined in steps and or are used to determine the final appearance of the shapes. An order of preference may also be used to distinguish among conflicting characteristics. For example a user preference to display all HVAC related objects using large shapes may override a determination in step that the nesting of an AHU corresponds to a small shape. Process further includes the step of aggregating the shapes into a view step . In one embodiment the layout of the shapes is determined by the BMS or by a user. For example a user may specify that all alarm shapes should be placed in the top left corner of a view. In another embodiment the sizes of the shapes are adjusted in step to fit a view of a certain size. Process finally includes the step of presenting the view to a display device step .

The construction and arrangement of the systems and methods as shown in the various exemplary embodiments are illustrative only. Although only a few embodiments have been described in detail in this application many modifications are possible. For example the position of elements may be varied and the nature or number of discrete elements or positions may be altered or varied. Accordingly all such modifications are intended to be included within the scope of the present application. The order or sequence of any process or method steps may be varied or re sequenced according to alternative embodiments. Other substitutions modifications changes and omissions may be made in the design operating conditions and arrangement of the exemplary embodiments without departing from the scope of the present application.

The present disclosure contemplates methods systems and program products on any machine readable media for accomplishing various operations. The embodiments of the present disclosure may be implemented using existing computer processors or by a special purpose computer processor for an appropriate system incorporated for this or another purpose or by a hardwired system. Embodiments within the scope of the present application include program products comprising machine readable media for carrying or having machine executable instructions or data structures stored thereon. Such machine readable media can be any available media that can be accessed by a general purpose or special purpose computer or other machine with a processor. By way of example such machine readable media can comprise RAM ROM EPROM EEPROM CD ROM or other optical disk storage magnetic disk storage or other magnetic storage devices or any other medium which can be used to carry or store desired program code in the form of machine executable instructions or data structures and which can be accessed by a general purpose or special purpose computer or other machine with a processor. Combinations of the above are also included within the scope of machine readable media. Machine executable instructions include for example instructions and data which cause a general purpose computer special purpose computer or special purpose processing machines to perform a certain function or group of functions. Software implementations could be accomplished with standard programming techniques with rule based logic and other logic to accomplish the various connection steps processing steps comparison steps and decision steps.

Although the figures may show a specific order of method steps the order of the steps may differ from what is depicted. Also two or more steps may be performed concurrently or with partial concurrence. Such variation will depend on the software and hardware systems chosen and on designer choice. All such variations are within the scope of the disclosure. Likewise software implementations could be accomplished with standard programming techniques with rule based logic and other logic to accomplish the various connection steps processing steps comparison steps and decision steps.

