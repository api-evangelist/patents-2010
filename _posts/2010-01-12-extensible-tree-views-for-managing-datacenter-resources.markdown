---

title: Extensible tree views for managing datacenter resources
abstract: A method for a GUI for client software that is a part of an application program for managing datacenter resources includes receiving as input one or more specifications, where each specification includes a hierarchy of queries. The method also includes determining one or more target data sources for each query in each hierarchy. Additionally, the method includes issuing the query to each target data source determined for the query, after adapting the query to a format that is acceptable to the target data source. The method further includes receiving the results of each query from the target data source, integrates the results into a hierarchy, and submitting the hierarchy to the client software for display in a tree view in the GUI.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08700611&OS=08700611&RS=08700611
owner: VMware, Inc.
number: 08700611
owner_city: Palo Alto
owner_country: US
publication_date: 20100112
---
An application program for managing a datacenter runs on a server and can be accessed through a network by a system administrator with a client device such as a laptop computer running client software with a graphical user interface GUI . Often the GUI for the client software is integrated with web browser functionality.

The application program for managing a datacenter enables the management including load balancing of many host servers running many virtual machines each having many virtual storage devices such as virtual disks or virtual network interface controllers NICs .

Multiple object models in the form of graphs can be used to represent the physical resources e.g. datacenters host servers etc. and virtual resources e.g. virtual machines virtual disks etc. managed by an application program for managing datacenter resources. In these graphs a node might represent a resource e.g. a host server and an edge between nodes might represent a relationship between resources e.g. between a host server and a virtual machine . Of course such graphs tend to be complex both in terms of the number of nodes involved and in terms of the number of edges between those nodes. Consequently the graphs do not lend themselves to extensible display in a GUI.

The first example embodiment provides a method for a GUI for client software that is a part of an application program for managing datacenter resources. The method includes receiving as inputs two object models represented as graphs whose nodes are data elements and whose edges are relationships between data elements. The method filters a tree model from the two graphs using one or more specifications where each specification contains a hierarchy of queries. Then the method displays the tree model in a tree view in the GUI. In this embodiment the method generates a single tree from two or more models where references between the two or more models are merged.

The second example embodiment also provides a method for a GUI for client software that is a part of an application program for managing datacenter resources. The method includes receiving as input one or more specifications where each specification includes a hierarchy of queries. The method determines one or more target data sources for each query in each hierarchy. Then the method issues the query to each target data source determined for the query after adapting the query to a format that is acceptable to the target data source. The method then receives the results of the query from the target data source and submits the results as a hierarchy for display in a tree view in the GUI.

In the third example embodiment a computer readable storage medium with an executable program stored thereon is provided. The program instructs a microprocessor to perform the following operations receiving as inputs two object models represented as graphs whose nodes are data elements and whose edges are relationships between data elements filtering a tree model from the two graphs using one or more specifications where each specification contains a hierarchy of queries displaying the tree model in a tree view in the GUI and generating a single tree from two or more models where references between the two or more models are merged.

In the following description numerous specific details are set forth in order to provide a thorough understanding of the exemplary embodiments. However it will be apparent to one skilled in the art that the example embodiments may be practiced without some of these specific details. In other instances process operations and implementation details have not been described in detail if already well known.

Additionally the virtual machine manager has access through a bus and or network to virtual physical storage . In an example embodiment the network might be a storage area network SAN .

In the example depicted in virtual machine manager is also connected by a network to three host servers and each of which might also include volatile memory persistent storage and an x86 family microprocessor connected by one or more buses as well as an associated operating system such as Windows Linux or MacOS . Additionally each host server might be running virtualization software which enables the creation and execution of a virtual machine running a guest operating system e.g. Windows Linux or MacOS in an example embodiment.

In an example embodiment the specification processor described below might be a part of the client software and the tree view described below might be part of the GUI for the client software . However in another example embodiment the specification processor might be a part of a virtual machine manager with which the client software interfaces through an API. Also in an example embodiment the data sources described below might stored on virtual physical storage .

As depicted in GUI view includes tree view as a child view. A location e.g. LDGANVC45 is the root node of the tree or outline depicted in the tree view . The child node of the root node is a datacenter e.g. New Datacenter . In turn the child node had two children of its own child node and child node . Child node represents a cluster of hosts e.g. a cluster of hypervisor hosts . Child node represents host e.g. a hypervisor . At the leaf level of the tree or outline depicted in tree view are two virtual machines e.g. vm which is a child of node and vm which is a child of node . Child node also has a host as a leaf node. In one embodiment the content of these subnodes that is the children of the subnodes such as cluster come from different vendors entities or authors. These content and their format may not be known at the time of designing of GUI view .

As indicated above tree view might be displayed by a GUI for the client software in an example embodiment. In another example embodiment tree view might be displayed by a GUI for virtual machine manager .

It will be appreciated that the specifications might have different authors in an example embodiment. Thus the author of one of the specifications might be a developer who designs and implements the GUI for the client software or the developer who designs and implements the virtual machine manager . The author of another one of the specifications might be the user. And the author of yet another one of the specifications might be a third party developer who enhances the client software or the virtual machine manager e.g. with a plug in for a web browser. That is to say a specification might be authored by any person with adequate knowledge of the datacenter s object models or associated graphs persistently stored in the data sources e.g. data source or data source .

Moreover in an alternative example embodiment the underlying application program might not be a virtual machine manager but rather an application program that manages virtual resources other than virtual machines e.g. virtual storage. Or the application program might be an application program that manages physical storage.

In operation of the sequence shown in the specification processor might adapt a query from one of the specifications so that it is in a format acceptable to the data source associated with the query. For example a query might be written in XQuery XPath but the data source associated with the query might be a Structured Query Language SQL database instead of an XML database. The specification processor would translate the query from XQuery XPath to a SQL command or more generally an API call before proceeding to operation of the sequence. It will be appreciated that two or more XQuery XPath queries might result in only a single SQL command e.g. through the use of relational algebra. Similarly a single XQuery XPath query might result in two or more SQL commands. That is to say the relationship between queries and API calls can be one to many many to one or many to many.

In operation of the sequence shown in the specification processor issues a call to an API associated with a data source. As depicted in API is associated with data source and API is associated with data source . As suggested earlier data source might include data that is different from the data in data source both in terms of format and in terms of content. For example data source might be a SQL database and data source might be an XML database e.g. XML enabled or native XML. In operation of the sequence the specification processor receives the results e.g. which might be the requested data or a Boolean value indicating absence of the requested data from the API calls made in operation .

In operation of the sequence shown in the specification processor might combine data received from disparate data sources before creating the hierarchy to populate a tree or outline view. Then in operation of the sequence the specification transmits the hierarchy to other modules in the client software for display in a tree view in the client software s GUI.

Here it will be appreciated that there might be other uses for the hierarchy than populating a tree view in a GUI. That is to say the hierarchy might be used as an intermediate representation that is input into another process e.g. a process which performs a search that does not involve the display of a view or even the model view controller MVC design pattern.

In operation the specification processor determines one or more target data sources e.g. XML database or SQL database for each query in each specification. Then in operation the specification processor issues the query to each target data source adapting the format of the query to a format that is acceptable to the target data source. Here it will be appreciated that the query might be unchanged from the query in the specification as described in greater detail below. Alternatively the query might be translated to an API call as discussed earlier. Or the query might be combined with other queries by the specification processor using for example a relational algebra.

In operation the specification processor receives the query results from each target data source. As noted above the results might be data values including character strings as described below or Boolean values that indicate the absence of data values. Then in operation the specification processor integrates and submits the results as a hierarchy for display in tree view in a GUI by for example client software for an application program that manages datacenter resources. Here it will be appreciated that integration might involve inserting data at various locations into a hierarchy that can be used to populate the tree view. In an example embodiment described below this hierarchy might be driven by the initial specification and the subsequent specification that extends the initial specification. Also in an example embodiment other modules e.g. window modules in the client software might be responsible for the actual display of the hierarchy assembled by the specification processor.

Data source also shown in is an XML database whose file is identified as Authors.xml. Each parent node is an Author name identified by a name. Each Author name can have child nodes consisting of each Book that the named author has written.

In the initial specification is identified as bookReferenceSpec . The nodes of the initial specification frame four queries expressed in XQuery XPath arranged in a hierarchy. The first two queries have a target data source of Books.xml.

The third and fourth queries have a target data source of Authors.xml. The third query queries Authors.xml for the author of the parent book 

And the fourth query which is the same as the third query queries Authors.xml for the author of the book returned as a citation .

It will be appreciated that each of these queries identifies the target data source. However in an alternative example embodiment the target data source might be identified in another part of the specification.

It will also be appreciated that the initial specification depicted in has a unique identifier which a subsequent specification might use to create an association between specifications. Further in this example each branch in the tree view corresponds to a node in the initial specification . Thus there are individual nodes in the initial specification for books authors and citations.

Additionally the queries to compute the children of a parent node are described in the specification as child nodes under the corresponding parent node. The data object in the data source corresponding to a given node is referred to as target in the queries in this example. A specification node refers to the attributes of the corresponding data object using tokens of the form foo where foo is Title isbn etc. In this example these tokens will be replaced by actual values once they are retrieved from a data source by the specification processor.

It will be appreciated that the data source and the data source both identify a book by its ISBN and thereby allow the specification processor to join the data associated with an ISBN from both data sources when populating the hierarchy that will eventually be displayed in the tree view. Likewise the data source and the data source both identify books by their title and allow for the joining of the data associated with a title.

Any of the operations described herein that form part of the inventions are useful machine operations. The inventions also relate to a device or an apparatus for performing these operations. The apparatus may be specially constructed for that purpose or it may be a general purpose computer selectively activated or configured by a computer program stored in the computer. In particular various general purpose machines may be used with computer programs written in accordance with the teachings herein or it may be more convenient to construct a more specialized apparatus to perform the operations.

The inventions can also be embodied as computer readable code on a computer readable medium. The computer readable medium is any data storage device that can store data which can thereafter be read by a computer system. Examples of the computer readable medium include hard drives network attached storage NAS read only memory random access memory CD ROMs CD Rs CD RWs magnetic tapes and other optical and non optical data storage devices. The computer readable medium can also be distributed over a network coupled computer system so that the computer readable code is stored and executed in a distributed fashion.

It will be further appreciated that the instructions represented by the operations in the above figures are not required to be performed in the order illustrated and that all of the processing represented by the operations might not be necessary to practice the inventions. Further the processes described in any of the above figures can also be implemented in software stored in any one of or combinations of the RAM the ROM or the hard disk drive.

Although the foregoing inventions have been described in some detail for purposes of clarity of understanding it will be apparent that certain changes and modifications can be practiced within the scope of the appended claims. For example the foregoing inventions might be used in a GUI for displaying complicated object models other than the object models associated with datacenters for example an object model associated with an organizational chart for a large organization. Also it will be appreciated that there are many other possible orderings of the operations in the processes described above and many possible modularizations of those orderings. In addition one skilled in the art will appreciate that there are many other possible displays for tree like data besides the vertical displays with expanding and collapsing nodes illustrated herein all of which can be incorporated with the embodiments described above. Accordingly the present embodiments are to be considered as illustrative and not restrictive and the invention is not to be limited to the details given herein but may be modified within the scope and equivalents of the appended claims. In the appended claims elements and or operations do not imply any particular order of operation unless explicitly stated in the claims or implicitly required by the disclosure.

