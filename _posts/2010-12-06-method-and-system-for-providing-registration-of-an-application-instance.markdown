---

title: Method and system for providing registration of an application instance
abstract: An approach for registration an application instance is provided. A registration request including credential information related to a user, a device and an instance of an application resident on the device is generated. The registration request is transmitted over a network to a registration platform. A unique identifier that is encrypted, in response to registration of the application instance is received from the registration platform. This unique identifier is used to securely authenticate communication with the application instance.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09225532&OS=09225532&RS=09225532
owner: Verizon Patent and Licensing Inc.
number: 09225532
owner_city: Basking Ridge
owner_country: US
publication_date: 20101206
---
This application is related to U.S. patent application entitled Secure Registration and Authentication for Client Application Access to Protected Resources Ser. No. 12 960 956 filed December 2010 which is incorporated herein by reference in its entirety.

An application instance is a copy of a software program for operation on a single device operating system. An application may be stolen misused used to cause harm or used for other non intended purposes. The provider of an application and the system which supports its use must trust that any instance of an application has been authenticated and that the end user can be authorized to use it. If the application is compromised rogue applications could be developed or the application could be pirated. In communications networks particularly mobile networks with usually limited resources this problem is exacerbated as rogue applications could waste network resources without being noticed.

A preferred method and system for providing application registration is described. In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the preferred embodiments of the invention. It is apparent however that the preferred embodiments may be practiced without these specific details or with an equivalent arrangement. In other instances well known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the preferred embodiments of the invention.

User equipment may be any computing device capable of communicating over an access network moreover in certain embodiments user devices may be configured to perform voice communications. Hence such user device may be any suitable computing device such as a Voice over Internet Protocol VoIP phone skinny client control protocol SCCP phone session initiation protocol SIP phone IP phone personal computer softphone workstation terminal server etc. Furthermore these devices may be mobile devices such as a cellular phone radiophone satellite phone smart phone wireless phone personal digital assistant PDA pocket personal computer tablet set top box customized hardware etc.

Under the scenario of the application can include sophisticated applications such as a navigation application that utilizes network resources as well as resources of the user equipment e.g. a global positioning system GPS receiver. Hence if the navigation application is rogue unauthorized used or waste of resources can occur moreover such usage may be undetected. Accordingly system includes an application registration platform that provides registration of an instance of an application. In one embodiment platform can be deployed as one or more servers. Upon registration the application instance will be uniquely identified as well as authenticated thereby ensuring a high level of security. In this manner a network service provider or any other service provider associated with networks and could reduce security risk e.g. by blocking access for a particular application instance prove the validity of transactions for account disputes non repudiation and notify an application provider of possible security risks surrounding a particular application.

According to various embodiments the user equipment is configured to use communications and computer networks to communicate and exchange information and receive services from various entities via several networks and . Thus the user equipment is enabled to exchange information through the public or private data network via an access network .

In certain embodiments access network may include one or more networks such as data network telephony network and or wireless network and can interact with other data networks e.g. a service provider network maintained by a network service provider system and a public data network e.g. Internet . These networks may be any suitable wireline and or wireless network and be managed by one or more service providers. For example telephony network within access network may include a circuit switched network such as the public switched telephone network PSTN an integrated services digital network ISDN a private branch exchange PBX or other like network. The wireless network may employ various technologies including for example code division multiple access CDMA enhanced data rates for global evolution EDGE general packet radio service GPRS mobile ad hoc network MANET global system for mobile communications GSM Internet protocol multimedia subsystem IMS universal mobile telecommunications system UMTS etc. as well as any other suitable wireless medium e.g. microwave access WiMAX wireless fidelity WiFi satellite and the like. Moreover the data network as part of the access network may be any local area network LAN metropolitan area network MAN wide area network WAN the Internet or any other suitable packet switched network such as a commercially owned proprietary packet switched network such as a proprietary cable or fiber optic network.

Although depicted as separate entities networks may be completely or partially contained within one another or may embody one or more of the aforementioned infrastructures.

According to some embodiments application is provided as a software hardware package to a user by an application provider . In various embodiments the seller granter of the application might be different from an entity which provides related services and facilities. For example application might access to application resources maintained by the application provider . Furthermore the application can access resources on the public data network or resources which could be accessed via the access network or possibly through resources the network service provider network . In these cases the resources might be protected for various reasons and the resource providers would require the application to be authenticated to prior to access.

As an example upon purchasing and or downloading a navigation application for user equipment e.g. a mobile phone the application provider might host different facilities such servers databases computational resources etc to facilitate the execution of application . Moreover for example the mobile phone as a GPS enabled phone might be configured to launch a navigation application hosted by an application provider . The application provider servers systems and application not only help the user to navigate roads but also provide the user road and traffic information. Such an application typically accesses the network resources available through public networks e.g. such as resources as well as servers and resources maintained by the application provider or other resources maintained by other parties e.g. resource . As an example of the resource in some embodiments application can be a calendar application which requires access to calendar data from another user. The application should request access to such data and obtain consent by the user or a network access provider or a network service provider might grant the application permission to access this calendar data. However the permission granter or said another user can restrict the access by application i.e. a third party application to their calendar only for a period of time a default may be an hour for example . There are various security oriented and network management administration benefits for network service providers and for application providers and their users to require such third party registration process.

Application resource s which may be deemed protected resources may include one or more devices that store data that are protected from unauthorized access by client applications. Limited access by application may be controlled using authentication techniques e.g. authentication and key agreement AKA techniques described herein. That is by way of example a client identifier and a device identifier previously assigned to the client application and the device on which the client application is installed may be used in an Authentication and Key Agreement AKA process by registration platform . Subsequently the registration platform may supply a valid encrypted application identifier that could be used in another session authentication process to grant the application access to resources.

In some embodiments the application may be executed by any type of smart card usable for inserting into device and for storing data relevant to the operation of device . For example the application may be executed by a Universal Integrated Circuit Card UICC a removable user identity card R UIM a subscriber identity module SIM a universal subscriber identity module USIM or an Internet Protocol IP multimedia services identity module ISIM . Such an application also denoted as a device application also might access any of the protected resources and the registration and authentication methods described herein facilitate secured access by device application to needed protected resources. It is contemplated that the device is capable of storing the information needed in the authentication process and transmitting that information to the various authentication entities.

In some embodiments a license may be supplied by the application provider to use the application and access resources. In such a scenario a license system can be utilized to provide facilities for license verification. According to one embodiment the license system can include an application distribution system maintained by an application distributor entity a license verification library maintained by an application provider or a device provider or any other facility which could verify legality and authenticated access of a user s use of an application. Another example of such a facility includes a controlling entity e.g. a control verification system and database to limit the access.

Alternatively the license system can be an application provider s user account sign on in which the system is accessed to download upon purchasing an application. Such a sign on system could later be queried by the registration platform to verify authorized use of the application by the user. It also contemplated that the registration process may occur as a component of the application provider s transaction with the user to deliver their application e.g. during post an account set up or first runtime.

According to various embodiments at the end of a registration process the application has a unique identifier and a secret used to authenticate this instantiation of the application Registration Key and its subscriber.

A registration and session authentication system could include different components. According to various embodiments a registration platform securely registers the application. In one embodiment the registration platform can be part of the network service provider system or a separate entity. As shown the gatekeeper platform as part of the network service provider system can perform operations associated with granting the application an authenticated session to access the protected resources. By way of example the gatekeeper platform includes an application session authentication module an authentication event monitoring module and an application registration module . The application session authentication module authenticates a registered application and upon authentication grants the application a session to access the resources . The module can set an expiration time on the session after which the application is required to get authenticated again. In some embodiments if application authentication fails then the module calls the authentication event monitoring module to monitor the failed authentication and registration attempts in order to detect possible malicious applications or parties or to block the user or application.

By way of examples various embodiments described herein may enable the secure multifactor registration and authentication of a client application instance prior to permitting the client application access to protected data or resources e.g. resources .

In order to perform authentication and registration operation different authorization entities need to retrieve information about devices users or applications from trusted sources. According to various embodiments such information could be stored one or more several databases collectively shown as databases . Databases can include store some or all trusted credentials used in the registration and authentication processes. Such databases can be maintained by trusted parties. Different registration and authentication entities can also obtain trusted credentials from the databases and compare the obtained credentials with all or some of the credentials provided by the application or user during the secured registration or authentication processes.

In some embodiments the databases might comprise include or be a part of an Authentication Authorization and Accounting AAA system server. An example of such system is when the access network is a CDMA wireless data network further operating according to standards of the Internet Protocol IP . Furthermore in some embodiments the databases might comprise include or be a part of a Home Location Register HLR system in conjunction with a global system for mobile communications GSM access data network. The database might be maintained by a trusted party possibly including the network service provider system or possibly the access network provider.

In other embodiments database may include a device and or memory unit for storing a data structure e.g. a database that further stores client and device credentials used during the authentication techniques described herein. Authorization servers such as registration platform or module or the session authentication module may retrieve client and device credentials from database . Database may include a device and or memory unit that is separate or part of the any of the authorization servers. For example in some embodiments databases might be part of the registration platform or any other entity in environment . Databases may further include distributed devices and or memory units such that database is in the form of a distributed database.

It is contemplated that different entities depicted in could be combined in one or another or could be provided with facilities to communicate and exchange information according to various embodiments. In some embodiments the registration and authentication service e.g. platform and license system and even databases may be provided as a managed service as part of a service provider network and the network service provider might provide secured registration and session authentication services in coordination conjunction with one or more of the application service providers . In certain embodiments many of the services are contemplated to be Web based online services and various entities although physically deployed in different locations could seamlessly communicate and exchange information in order to realize different features disclosed herein. For example it is contemplated that the application provider can seamlessly communicate with the network service provider system or with registration platform or license system .

In certain embodiments a user identifier can be the name or string for an authenticated user such as a Mobile Directory Number MDN International Mobile Subscriber Identity IMSI username email address.

The device identifier may include a unique identifier assigned to the device by for example a network service provider. For example the device identifier may include an International Mobile Subscriber Identity IMSI Integrated Circuit Card ICC ID an International Mobile Equipment Identity IMEI Mobile Identification Number MIN a Mobile Equipment Identifier MEID an Electronic Serial Number ESN a Mobile Station International Subscriber Directory Number MSISDN a Medium Access Control MAC address or an Internet Protocol Multimedia Subsystem Private Identifier IMPI . Also the registration platform can utilize other parameters to increase the security level.

In step the registration platform authenticates the credentials against credentials obtained from trusted entities for example trusted credentials obtained from the databases . Upon verification of the application credentials against trusted credentials the registration platform per step generates an encrypted client identifier e.g. registration key which is then stored and a copy is returned to the application . The encrypted client identifier can be used in the session authentication step by the application session authentication module .

Upon completion of the registration process the application can be instructed by the user to establish an application session or the user might launch an instance of the application . The application then interacts with the application session authentication module to establish an authenticated application session.

As seen in an application session authentication process involves the application session authentication module per step detecting an application instance session request from application . In step the session authentication module obtains registration and other credentials from the application . In one embodiment the registration credentials can include the encrypted client identifier that was generated by the registration platform . The session authentication module as in step authenticates the obtained said registration credentials against trusted ones. In step the application session authentication module creates an authenticated session for the application to access the related protected resources. This may include returning a session token to the application as well informing the application of a session expiration time for increased security.

In an optional step the registration platform by verifying the application identifier with the license system authenticates the user s permission to use this instance of the application. If the application instance is not authorized in step the registration platform transmits a registration failure message to the application. If the application instance is an authorized instance then in step the registration platform retrieves the stored credentials from trusted parties. For example the registration platform retrieves trusted MDN and MEID from the databases . In some embodiments the registration platform transmits the MDN obtained from application to databases and in response the platform receives a matched trusted MDN and MEID pair.

In step the registration platform compares the credentials obtained from the application with those obtained from the trusted parties. If the credentials are not validated then the platform transmits a registration failure message to the user as in step otherwise the registration platform generates an encrypted client identifier according to any known encryption algorithm. In some embodiments the registration platform uses an encryption key shared with the session authentication module for the encryption process. In some embodiments the client identifier generation and registration as in step is performed according the process depicted in .

In step the registration platform stores registration information and parameters including the encrypted client identifier. In step the registration platform returns registration success message together with possibly registration information to the application. In some embodiments such registration information could include the encrypted client identifier and possibly a Uniform Resource Identifier URI of other functions and servers. For example the registration platform can provide an address to locate an application session authentication module . This can be useful in case the application does not have such information. As another example an URI could be a call back URI for providing some other function such as sending error messages when the application fails to authenticate with the application session authentication module .

In some embodiments the encrypted client identifier can be a persistent anonymous identifier but it will have a limited life time for security purposes. The encrypted client identifier expires to prevent use of a rogue application which has been coded not to register. When the encrypted client identifier expires the application must re register.

The encryption algorithm evidently can be any standard or known encryption scheme with various levels of strength and sophistication. The output of the algorithm provides the encrypted client identifier e.g. registration key that the registration platform transmits to the application .

It is contemplated that in some embodiments depending on the strength credentials used in the registration process various level of trustworthiness associated with applications could be established. For example a network service provider or another application provider might assign such levels to third party applications accessing their resources and limit the access according to trustworthiness. For example levels such as unregistered registered and trusted could be assigned to various applications. Any application could then access resources according to its trustworthiness level or users resources could decide based on the application s trustworthiness level to grant what type of access. It is contemplated that such different levels of trustworthiness in the registration process could established based on the number or type or strength of credentials provided by the application or other relevant factors.

In step upon successful registration the application extracts the encrypted client identifier from the registration response from the registration platform . As discussed in the response from the registration platform the application might receive the URI to access the application session authentication module for example. In step the application or the software hardware combination residing in the user equipment signs the encrypted client identifier using a secret and a hashing algorithm to create client application signature. Such a hashing process increases the security level of the subsequent authentications. In some embodiments the client signature is created according to the steps depicted in .

In step the application sends an Application Programming Interface API request to the application session authentication module containing the encrypted client identifier and the client signature and waits for the application session authentication module to grant a session. Upon successful authentication by the application session authentication module in step the application receives session data and session token from the application session module . The session data can include the session expiration time based on which the application might try to request new authenticated session. Prior to session expiration if the user launches a new instance of the application then as depicted in step subsequent session requests or other exchanges with the application session module could contain said session token.

Upon receiving the credentials in step the application session authentication module checks if there is any session token in the credentials received. If there is such a token then in step it is checked whether the token corresponds to an active application session i.e. a session not expired . If the token corresponds to no active session exists then in step a NOT VALID TOKEN or SESSION EXPIRED will be transmitted to the application. If in step the token corresponds to an active session then the session parameters are retrieved in step and in step a message indicating active session together with session parameters are transmitted to the user. One such parameter could be the expiration time for the current active session. This message may contain the result of a request for a resource or relevant response.

If in step there were no token in the request then the actual authentication step proceeds in step . In step the application session authentication module validates the encrypted credentials included in the authentication request. For example the authentication request can contain an encrypted client identifier and a client signature. According to some embodiments the application session authentication module performs a hashing function similar to the one performed by the application as shown e.g. in to recreate a local copy of the client signature. In doing so the application session authentication module uses in one embodiment the secret shared with the application as the key. By way of example the shared secret could be an application password. Upon performing the hashing function the application session authentication module compares the client signature received from the application with the local copy. If the two client signatures match then the application client could be authenticated.

To provide higher levels of security further validation measures can be taken. For example the application session authentication module may decrypt the encrypted client identifier using the secret key shared with the registration platform . Therefore the application session authentication module can obtain several other credentials about the application the user or the device and module can further check those credentials against trusted ones which may be stored on database .

If the application credentials are valid then the process continues as shown in . In step application session module creates an authenticated application session and a token that contains information proving the authentication. The module can create more session parameters such as expiration time. In step such parameters and the token are saved for future validation processes. In step the module encrypts the token and transmits the authenticated session message along with the token and other parameters to the application . The application session authentication module can decrypt the token. In some embodiments the token could be transmitted to the application as an encrypted HTML cookie.

If the validation check per step is not successful the process generates a session failure message for transmission to the application and possibly to the user step . Failure of the session authentication can signal the presence of a rogue application. Therefore in step the application session authentication module starts an authentication event monitoring process which is more fully detained with respect to . This process monitors session or registration authentication attempts by an application in order to detect suspicious or malignant applications.

In step authentication event monitoring module checks whether this is the first attempted session authentication failure for the application. If it is the first failure then in step a counter named REG COUNTER is set to 1 and in step the application is instructed or redirected to re register with the registration platform . If this attempt was not the first attempt by the application instant then in step the value of REG COUNTER is compared with a pre determined first threshold. If REG COUNTER is not larger than the first threshold then in step is REG COUNTER incremented and the application is instructed to register with the registration server again. If REG COUNTER is equal or large than the first threshold then in step REG COUNTER is compared with a second pre defined threshold. If REG COUNTER is not larger than the second threshold then in step a warning message together with some instructions are conveyed to the user and step will be performed next. If REG COUNTER is greater than or equal to the second threshold then in step the user account or access is blocked and the blockage message with further instructions are conveyed to the user.

It is contemplated the functionality of the authentication event monitoring module could be realized in an entity separate from gatekeeper platform or as a part of other authorization entities. In particular in some embodiments the registration platform might encompass this functionality. Moreover in some embodiments the authentication event monitoring module might be called upon any registration or session authentication activity to increase security level and attain an increased monitoring of resources.

According to an exemplary embodiment if the application is attempted to be or is registered more than a predetermined threshold e.g. three times in a defined interval a message is sent to the user s stating there is a registration problem and to contact the application developer or some administrator . If an application is attempted to be or is registered more than a second threshold level e.g. ten times in a defined interval a message SMS email phone call is sent to the user s stating there is a registration problem and to contact the application developer or some administrator and application is blocked from additional registrations.

According to some embodiments the gatekeeper platform can encompass the registration module which can replace a stand alone or spate registration platform . The application registration module as a part of the gatekeeper platform provides application registration facilities as described herein.

If the application was not previously registered as determined in step then the application registration module retrieves as in step from one or more trusted parties some relevant credentials related to the application . For example according to certain embodiments the application registration module can retrieve from the databases a device identifier such as MIN associated with the received MDN. It should be noted that the MIN is typically associated with the MDN in the equipment registration process therefore it can be considered as a trusted credential. In step the application registration module transmits the retrieved credentials or other parameters as nonce to the application and challenges to application to create a registration key. In some HTTP based embodiments the application registration module or the gatekeeper platform can include the MDN or other parameters in the HTTP digest response nonce parameter. Details of the HTTP digest is more fully described with respect to Internet Engineering Task Force IETF Request for Comment RFC 2617 which is incorporated herein in its entirety.

In step the application registration module creates a registration key using a hash algorithm. This registration key generation is also performed at the application side or device as well. In step the application registration module stores an expected response based on the registration e.g. it could simply store the created registration key . In step the registration module waits for a response from the application . Such a response in some embodiments is in the form of a pair MDN RegistrationKey wherein as RegistrationKey is the registration key generated at the application side according to the corresponding same process in the registration module . If the application response is received then in step the received response is compared with the expected response which was stored earlier. If the two expected and received responses match then the Registration State flag is set to true as in step . The process then generates a notification message indicating a successful registration of the application instance as in step .

If the expected and received responses do not match as determined in step then in step the Registration State flag is set to false. Thereafter in step a a notification of failed registration is generated. The notification is then conveyed to the application as in step .

Further a nonce parameter might include a time stamp e.g. date and time of the encryption process . Another parameter specifies a shared secret between the application and the gatekeeper platform . Yet other parameters include signature method used or any relevant URI s. The hash algorithm can be implemented using any standard algorithms such as HMAC SHA 1 according to RFC 2104 or RSA SHAT. Such hashing can be pre determined by both sides i.e. application and the gatekeeper platform . The result of the algorithm is a registration key that can in fact be an encrypted application identifier.

Upon completing the registration process an application instance can request to establish an authenticated Application Programming Interface API session as explained below with respect to . The gatekeeper platform per the application session authentication module can provide the facilities.

If in step the Session State is determined to be set to false then in step an unauthorized session message is transmitted to the application . Further the application is challenged to provide credentials. Such a message might be an HTTP 401 unauthorized message. In step the application session authentication module creates an expected response based on the Registration Key stored by the application registration module . In step the gatekeeper platform or equivalently application session authentication module waits to receive a response to the challenge from application instance. The response can be for example in form of a pair MDN RESPONSE where RESPONSE is the response generated by the application based on the copy of Registration Key on the application side. The response can be as simple as the Registration Key itself or more sophisticated such as the combination of Registration Key and a password.

In step the process compares the two responses i.e. whether RESPONSE RESPONSE . If the received response matches the expected response in step Session State flag is set to true and expiration time is set for the application session. In step the process generates a notification of a successful registration of an application instance session.

Furthermore if the two responses do not match in step then in step a registration counter variable REG COUNT is incremented and the Registration State and Session State flags are set to false and an authentication event monitoring also called remediation process is started. This could happen by calling the authentication event monitoring module . Such a process could be performed as explained by an example in . In step a remediation request notification is also generated and transmitted to the application per step .

Next in step a response is transmitted to gatekeeper platform and the application waits for the response from gatekeeper. In some embodiments the response transmitted to the gatekeeper platform can be of the form MDN Registration Key . Upon receiving the registration success message the user could launch an instant of the application and the application could be granted a session to access protected resources. For example in step an API request could be sent to the gatekeeper platform or the session authentication module and the application waits for a challenge from the gatekeeper platform . Upon receiving the challenge the application creates a response in step . In some embodiments the response might be of the form MDN RegistrationKey or MDN RESPONSE where RESPONSE is a response created based on the RegistrationKey created and stored in application or user device . In step the response is transmitted to the gatekeeper platform and the application waits for the success response. Upon comparing the transmitted response with the expected response the gatekeeper platform validates the request and application session will be granted. Therefore in step the session success message and other session data e.g. expiration time are obtained from the gatekeeper platform . This message may contain the response data to the API request.

The above processes and systems in certain embodiments advantageously prevent rogue applications thereby reducing waste of network resources as well as device resources.

The processes described herein for providing registration of an application instance may be implemented via software hardware e.g. general processor Digital Signal Processing DSP chip an Application Specific Integrated Circuit ASIC Field Programmable Gate Arrays FPGAs etc. firmware or a combination thereof. Such exemplary hardware for performing the described functions is detailed below.

The computer system may be coupled via the bus to a display such as a cathode ray tube CRT liquid crystal display active matrix display or plasma display for displaying information to a computer user. An input device such as a keyboard including alphanumeric and other keys is coupled to the bus for communicating information and command selections to the processor . Another type of user input device is a cursor control such as a mouse a trackball or cursor direction keys for communicating direction information and command selections to the processor and for controlling cursor movement on the display .

According to an exemplary embodiment the processes described herein are performed by the computer system in response to the processor executing an arrangement of instructions contained in main memory . Such instructions can be read into main memory from another computer readable medium such as the storage device . Execution of the arrangement of instructions contained in main memory causes the processor to perform the process steps described herein. One or more processors in a multi processing arrangement may also be employed to execute the instructions contained in main memory . In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions to implement exemplary embodiments. Thus exemplary embodiments are not limited to any specific combination of hardware circuitry and software.

The computer system also includes a communication interface coupled to bus . The communication interface provides a two way data communication coupling to a network link connected to a local network . For example the communication interface may be a digital subscriber line DSL card or modem an integrated services digital network ISDN card a cable modem a telephone modem or any other communication interface to provide a data communication connection to a corresponding type of communication line. As another example communication interface may be a local area network LAN card e.g. for Ethernet or an Asynchronous Transfer Mode ATM network to provide a data communication connection to a compatible LAN. Wireless links can also be implemented. In any such implementation communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information. Further the communication interface can include peripheral interface devices such as a Universal Serial Bus USB interface a PCMCIA Personal Computer Memory Card International Association interface etc. Although a single communication interface is depicted in multiple communication interfaces can also be employed.

The network link typically provides data communication through one or more networks to other data devices. For example the network link may provide a connection through local network to a host computer which has connectivity to a network e.g. a wide area network WAN or the global packet data communication network now commonly referred to as the Internet or to data equipment operated by a service provider. The local network and the network both use electrical electromagnetic or optical signals to convey information and instructions. The signals through the various networks and the signals on the network link and through the communication interface which communicate digital data with the computer system are exemplary forms of carrier waves bearing the information and instructions.

The computer system can send messages and receive data including program code through the network s the network link and the communication interface . In the Internet example a server not shown might transmit requested code belonging to an application program for implementing an exemplary embodiment through the network the local network and the communication interface . The processor may execute the transmitted code while being received and or store the code in the storage device or other non volatile storage for later execution. In this manner the computer system may obtain application code in the form of a carrier wave.

The term computer readable medium as used herein refers to any medium that participates in providing instructions to the processor for execution. Such a medium may take many forms including but not limited to computer readable storage medium or non transitory i.e. non volatile media and volatile media and transmission media. Non volatile media include for example optical or magnetic disks such as the storage device . Volatile media include dynamic memory such as main memory . Transmission media include coaxial cables copper wire and fiber optics including the wires that comprise the bus . Transmission media can also take the form of acoustic optical or electromagnetic waves such as those generated during radio frequency RF and infrared IR data communications. Common forms of computer readable media include for example a floppy disk a flexible disk hard disk magnetic tape any other magnetic medium a CD ROM CDRW DVD any other optical medium punch cards paper tape optical mark sheets any other physical medium with patterns of holes or other optically recognizable indicia a RAM a PROM and EPROM a FLASH EPROM any other memory chip or cartridge a carrier wave or any other medium from which a computer can read.

Various forms of computer readable media may be involved in providing instructions to a processor for execution. For example the instructions for carrying out at least part of the exemplary embodiments may initially be borne on a magnetic disk of a remote computer. In such a scenario the remote computer loads the instructions into main memory and sends the instructions over a telephone line using a modem. A modem of a local computer system receives the data on the telephone line and uses an infrared transmitter to convert the data to an infrared signal and transmit the infrared signal to a portable computing device such as a personal digital assistant PDA or a laptop. An infrared detector on the portable computing device receives the information and instructions borne by the infrared signal and places the data on a bus. The bus conveys the data to main memory from which a processor retrieves and executes the instructions. The instructions received by main memory can optionally be stored on storage device either before or after execution by processor.

In one embodiment the chip set includes a communication mechanism such as a bus for passing information among the components of the chip set . A processor has connectivity to the bus to execute instructions and process information stored in for example a memory . The processor may include one or more processing cores with each core configured to perform independently. A multi core processor enables multiprocessing within a single physical package. Examples of a multi core processor include two four eight or greater numbers of processing cores. Alternatively or in addition the processor may include one or more microprocessors configured in tandem via the bus to enable independent execution of instructions pipelining and multithreading. The processor may also be accompanied with one or more specialized components to perform certain processing functions and tasks such as one or more digital signal processors DSP or one or more application specific integrated circuits ASIC . A DSP typically is configured to process real world signals e.g. sound in real time independently of the processor . Similarly an ASIC can be configured to performed specialized functions not easily performed by a general purposed processor. Other specialized components to aid in performing the inventive functions described herein include one or more field programmable gate arrays FPGA not shown one or more controllers not shown or one or more other special purpose computer chips.

The processor and accompanying components have connectivity to the memory via the bus . The memory includes both dynamic memory e.g. RAM magnetic disk writable optical disk etc. and static memory e.g. ROM CD ROM etc. for storing executable instructions that when executed perform the inventive steps described herein to presenting a slideshow via a set top box. The memory also stores the data associated with or generated by the execution of the inventive steps.

While certain exemplary embodiments and implementations have been described herein other embodiments and modifications will be apparent from this description. Accordingly the invention is not limited to such embodiments but rather to the broader scope of the presented claims and various obvious modifications and equivalent arrangements.

