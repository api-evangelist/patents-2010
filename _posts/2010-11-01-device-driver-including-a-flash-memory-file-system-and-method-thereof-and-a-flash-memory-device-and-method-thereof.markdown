---

title: Device driver including a flash memory file system and method thereof and a flash memory device and method thereof
abstract: A device driver including a flash memory file system and method thereof and a flash memory device and method thereof are provided. The example device driver may include a flash memory file system configured to receive data scheduled to be written into the flash memory device, the flash memory file system selecting one of a first data storage area and a second data storage area within the flash memory device to write the received data to based upon an expected frequency of updating for the received data, the first data storage area configured to store data which is expected to be updated more often than the second data storage area. The example flash memory device may include a first data storage area configured to store first data, the first data having a first expected frequency for updating and a second data storage area configured to store second data, the second data having a second expected frequency of updating, the first expected frequency being higher than the second expected frequency.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08510500&OS=08510500&RS=08510500
owner: Samsung Electronics Co., Ltd.
number: 08510500
owner_city: Gyeonggi-do
owner_country: KR
publication_date: 20101101
---
This application is a continuation of U.S. patent application Ser. No. 11 605 265 filed Nov. 29 2006 now U.S. Pat. No. 7 844 772 which claims priority under 35 USC 119 to Korean Patent Application No. 2006 97023 filed on Oct. 2 2006 in the Korean Intellectual Property Office KIPO the disclosure of each of which is incorporated herein in its entirety by reference.

Example embodiments of the present invention relate generally to a device driver including a flash memory file system and method thereof and a flash memory device and method thereof and more particularly to a device driver including a flash memory file system and a method of managing the flash memory file system and a flash memory device and method of storing information within the flash memory device.

Flash memory devices may be configured to have attributes associated with both a random access memory RAM and a read only memory ROM . For example a conventional flash memory device may be configured to re write over old data as in a RAM and also to maintain stored data without a continuous power supply as in a ROM or solid state memory device.

Conventional flash memory device may be different from other types of storage devices such as hard disk devices and semiconductor memory devices such as RAM and ROM. For example a conventional flash memory device may not perform an in place update on areas in which data may already be written. Accordingly software may be provided so as to instruct conventional flash memory devices to perform in place updates.

Hereinafter operation of a conventional flash memory device driver will be described with reference to .

Referring to the flash memory device driver may perform an erase operation on the data blocks and may perform read and write operations on the pages within respective data blocks . A logical address generated by an application may typically not be directly written to the flash memory device. Rather a virtual or physical address for a particular data block may be obtained based on the logical address through a mapping process.

Referring to assuming that first data A and second data B are written and third data B modifying the second data B and fourth data C are written the first through fourth data A B B and C may be sequentially stored in a data block e.g. within sequential pages of data block . The flash memory device driver may receive a logical address of fifth data B re modifying the third data B. The flash memory device driver may map the virtual address e.g. in which the data block including the third data B may be located based on the received logical address at S .

Referring to the flash memory device controller may detect that there are no empty pages in the data block and may allocate a new data block at S . The flash memory device controller may copy valid data which may refer to data having a valid value e.g. the first data A and the fourth data C into the new allocated data block . The flash memory device driver may write the fifth data B into an empty page of the new allocated data block at S .

Referring to the flash memory device driver may perform an erase operation on the data block including only invalid data at S .

As illustrated in the flash memory device driver may allocate a significant amount of time to page copying if pages in the data block are changed or frequently updated. Accordingly frequently updating pages may degrade a performance of the flash memory device. For example even if the first and fourth data A and C are not modified the first and fourth data A and C may be copied due to their relationship to more frequently modified data such as the second data B.

An example embodiment of the present invention is directed to a device driver managing access to a flash memory device including a flash memory file system configured to receive data scheduled to be written into the flash memory device the flash memory file system selecting one of a first data storage area and a second data storage area within the flash memory device to write the received data to based upon an expected frequency of updating for the received data the first data storage area configured to store data which is expected to be updated more often than the second data storage area.

Another example embodiment of the present invention is directed to a flash memory device including a first data storage area configured to store first data the first data having a first expected frequency for updating and a second data storage area configured to store second data the second data having a second expected frequency of updating the first expected frequency being higher than the second expected frequency.

Another example embodiment of the present invention is directed to a method of managing a flash memory file system including receiving data scheduled to be written into the flash memory device and selecting one of a first data storage area and a second data storage area within the flash memory device to write the received data to based upon an expected frequency of updating for the received data the first data storage area configured to store data which is expected to be updated more often than the second data storage area.

Another example embodiment of the present invention is directed to a method of storing information within a flash memory device including storing first data within a first data storage area of the flash memory device the first data having a first expected frequency for updating and storing second data within a second data storage area of the flash memory device the second data having a second expected frequency of updating the first expected frequency being higher than the second expected frequency.

Another example embodiment of the present invention is directed to a device driver capable of reducing the number of read and write operations on a flash memory device.

Another example embodiment of the present invention is directed to a computing system having the device driver capable of reducing the number of read and write operations on a flash memory device.

Another example embodiment of the present invention is directed to a flash memory device separated between a hot data storage area and a cold data storage area for reducing the number of read and write operations on a flash memory device.

Another example embodiment of the present invention is directed to a method of managing a flash memory file system for reducing the number of read and write operations on a flash memory device.

Detailed illustrative example embodiments of the present invention are disclosed herein. However specific structural and functional details disclosed herein are merely representative for purposes of describing example embodiments of the present invention. Example embodiments of the present invention may however be embodied in many alternate forms and should not be construed as limited to the embodiments set forth herein.

Accordingly while example embodiments of the invention are susceptible to various modifications and alternative forms specific embodiments thereof are shown by way of example in the drawings and will herein be described in detail. It should be understood however that there is no intent to limit example embodiments of the invention to the particular forms disclosed but conversely example embodiments of the invention are to cover all modifications equivalents and alternatives falling within the spirit and scope of the invention. Like numbers may refer to like elements throughout the description of the figures.

It will be understood that although the terms first second etc. may be used herein to describe various elements these elements should not be limited by these terms. These terms are only used to distinguish one element from another. For example a first element could be termed a second element and similarly a second element could be termed a first element without departing from the scope of the present invention. As used herein the term and or includes any and all combinations of one or more of the associated listed items.

It will be understood that when an element is referred to as being connected or coupled to another element it can be directly connected or coupled to the other element or intervening elements may be present. Conversely when an element is referred to as being directly connected or directly coupled to another element there are no intervening elements present. Other words used to describe the relationship between elements should be interpreted in a like fashion e.g. between versus directly between adjacent versus directly adjacent etc. .

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of example embodiments of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises comprising includes and or including when used herein specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

Unless otherwise defined all terms including technical and scientific terms used herein have the same meaning as commonly understood by one of ordinary skill in the art to which this invention belongs. It will be further understood that terms such as those defined in commonly used dictionaries should be interpreted as having a meaning that is consistent with their meaning in the context of the relevant art and will not be interpreted in an idealized or overly formal sense unless expressly so defined herein.

In the example embodiment of the flash memory device driver may include a file system and a flash translation layer FTL . In an example the flash memory device driver may be included within a computing system not shown and may be coupled to the flash memory device . In an example the flash memory device may include a hot data storage area for storing hot data or data for which frequent updates are expected. The flash memory device may further include a cold data storage area for storing cold data or data for which frequent updates are not expected.

In the example embodiment of the flash memory device driver may manage a flash memory file system e.g. file system that writes data into one of the hot data storage area and the cold data storage area based on a data type if the application writes the data into the flash memory device. In an example the application may include an operating system in the computing system and a program executed based on the operating system.

In the example embodiment of the file system may receive a logical address from the application . The logical address may include a filepath of data and a filename of the data. An operation of the file system will be described later with respect to the example embodiments of .

In the example embodiment of the FTL may determine the data type if the application writes the data based on the received logical address. The FTL may then map based on the determined data type the logical address into a virtual address e.g. a physical address of the hot data storage area or the cold data storage area. The FTL may write the data based on the mapped virtual address. For example the virtual address may include a physical address used in the flash memory device .

In the example embodiment of if the data generated by the application is determined to correspond to hot data the FTL may write the data into the hot data storage area of the flash memory device . Alternatively if the data generated by the application is determined to correspond to cold data the FTL may write the data into the cold data storage area of the flash memory device . For example the hot data may include a file allocation table FAT and a directory entry DE and the hot data storage area may include a FAT storage area for storing the FAT and a DE storage area for storing the DE. Additionally the hot data may further include user defined hot data UHD and the hot data storage area may further include a UHD storage area for storing the UHD.

In the example embodiment of the FTL may include a file system interface a data type determiner a data mapper a flash memory life span manager a bad block manager an error handler and a flash interface .

In the example embodiment of the file system interface may provide an interface between the file system and the FTL . The data type determiner may determine the data type e.g. hot or cold if the application writes the data based on the logical address. For example the data type determiner may determine the data type based on the logical address generated by the application .

In the example embodiment of the data mapper may map based on the determined data type the logical address into a virtual address of the hot data storage area or the cold data storage area. In an example the data mapper may map the logical address into an empty page in a data block as the virtual address if the data block into which the data is written includes the empty page. In another example the data mapper may allocate a new data block and may copy a valid page in the data block into the allocated new data block if the data block into which the data is written has no empty pages and has an invalid page. In another example the data mapper may map the logical address into the empty page in the allocated new data block as the virtual address. Additionally the data mapper may perform an erase operation on the data block after copying the valid page.

In the example embodiment of the data mapper may allocate the new data block if the data block into which the data is written has no empty pages and no invalid pages and may map the logical address into the empty page in the allocated new data block as the virtual address. That is the data mapper may provide the empty page as the virtual address such that the application may write the data into the flash memory device .

In the example embodiment of the flash memory life span manager may remap the mapped virtual address into a new virtual address having a reduced number of erase operations or write operations . Therefore data blocks in the flash memory device may each have a similar number of erase operations. Thus a number of erase operations or write operations may be finite because physical defects of the flash memory device may be increased as a number of operations e.g. write or erase operations is increased.

In the example embodiment of the bad block manager may translate the mapped virtual address into a new virtual address if the mapped virtual address e.g. a redundant address corresponds to a bad block address e.g. a block address corresponding to a data block including at least one defective page . The new virtual address may not correspond to a bad block. In other example the bad block manager may be implemented such that normal pages in the bad block may be used while bad pages within the bad block may not be used.

In the example embodiment of the error handler may add an error correction code into the data when the application writes the data. The error handler may verify the data when the application later reads the written data by comparing the written error correction code with the read error correction code. The flash interface may provide an interface between the FTL and the flash memory device .

In the example embodiment of the data type may be determined for example by the data type determiner in if the application transmits data to be written at S . If the data type is determined to correspond to hot data the FTL may map a logical address generated by the application into a virtual address within the hot data storage area of the flash memory device at S . If the hot data storage area includes a FAT storage area a DE storage area and a UHD storage area the FTL may store the data into one of the FAT storage area the DE storage area and the UHD storage area based on the determined data type. The FTL may then write the data into the hot data storage area based on the mapped virtual address at S .

In the example embodiment of alternatively if the data type is determined to correspond to cold data the FTL may map the logical address generated by the application into a virtual address in the cold data storage area at S . The FTL may then write the data into the cold data storage area based on the mapped virtual address at S .

In the example embodiment of although initial data B corresponding to the FAT may be updated twice the FTL may not perform read and write operations and the data blocks and may be generated. Accordingly the FTL may reduce the number of read and write operations by separating the hot data storage area and the cold data storage area.

In the example embodiment of the file system may include an application programming interface API a volume manager a directory and file manager a FAT core a FAT cache a buffer cache a meta cache and a physical device interface .

In the example embodiment of the API may provide an interface between the application and the file system . The volume manager may define a data storage area used by the file system as a plurality of logical units and may perform a format operation on a physical device e.g. the flash memory device .

In the example embodiment of the directory and file manager may perform operations related with file creation file allocation and file deletion to the application . The FAT core may perform search allocation and delete operations on the FAT corresponding to a directory and file if the application performs file creation file allocation and file deletion of the directory and file.

In the example embodiment of the FAT cache may cache the FAT corresponding to the directory and file if the application performs file creation file allocation and file deletion of the directory and file. The buffer cache may cache data in the file and directory entry if the application performs file creation file allocation and file deletion of the directory and file.

In the example embodiment of the meta cache may re cache the FAT outputted from the FAT cache and the DE outputted from the buffer cache such that FATs and DEs may be outputted concurrently and or continuously. The physical device interface may provide an interface between the file system and the FTL .

In the example embodiment of the meta cache may include a FAT meta cache and a DE meta cache . The FAT meta cache may re cache the FAT outputted from the FAT cache such that FATs may be outputted continuously and or concurrently. For example the FAT meta cache may re cache the FAT outputted from the FAT cache to generate continuous FATs so that the FAT meta cache may output the continuous FATs into the flash memory device if a current FAT outputted from the FAT cache and a previous FAT outputted from the FAT cache are continuous. Also the FAT meta cache may output the continuous FATs in the FAT meta cache and may re cache the FAT outputted from the FAT cache if a current FAT outputted from the FAT cache and a previous FAT outputted from the FAT cache are not continuous and or if a number of FATs exceeds a threshold number.

In the example embodiment of the DE meta cache may re cache the DE outputted from the buffer cache such that a number of DEs may be outputted continuously and or concurrently. For example the DE meta cache may re cache the DE outputted from the buffer cache to generate continuous DEs so that the DE meta cache may output the continuous DEs into the flash memory device if a current DE outputted from the DE and a previous DE outputted from the buffer cache are continuous. Also the DE meta cache may output the continuous DEs in the DE meta cache and may re cache the DE outputted from the buffer cache if a current DE outputted from the buffer cache and a previous DE outputted from the buffer cache are not continuous and or if a number of DEs exceeds a threshold number.

In the example embodiment of the FAT cache and or the buffer cache may receive data from the FAT core and may check whether the received data corresponds to hot data at S . In an example data within the FAT cache may correspond to hot data and data related with the DE and UHD in the buffer cache may correspond to hot data.

In the example embodiment of if the received data does not correspond to hot data the buffer cache may check whether the buffer cache includes previous data corresponding to the received data at S . If the buffer cache does not include previous data corresponding to the received data the buffer cache may load from the flash memory device the data corresponding to the received data into the buffer cache at S . The buffer cache may update the previous data with the received data at S . The buffer cache may determine whether the updated data is to be flushed at S and may write the updated data into the flash memory device at S . For example a period of a flush operation may be fixed at a given interval.

In the example embodiment of if the received data corresponds to hot data the FAT cache and or the buffer cache may determine whether the received data corresponds to FAT at S . If the received data corresponds to hot data the FAT cache may determine whether the FAT cache includes the previous data corresponding to the received data at S . If the FAT cache does not include the previous data corresponding to the received data the FAT cache may load from the flash memory device the data corresponding to the received data into the FAT cache at S . The FAT cache may update the previous data with the received data at S . The FAT cache may determine whether an amount of data stored in the FAT cache exceeds a threshold size of the FAT cache and or whether the FAT cache is scheduled to update the flash memory device at S . The FAT cache may write the updated data into the FAT meta cache at S .

In the example embodiment of the FAT meta cache may check whether a current FAT outputted from the FAT cache and a previous FAT outputted from the FAT cache are continuous and or whether a number of FATs exceeds a threshold number e.g. a maximum size of the FAT meta cache and may re cache the FAT e.g. the current FAT outputted from the FAT cache at S . The FAT meta cache may output the continuous FATs in the FAT meta cache Steps S and S and may re cache the FAT e.g. the current FAT outputted from the FAT meta cache at S . If the received data does not correspond to the FAT e.g. the current FAT the buffer cache may determine whether the received data corresponds to the DE at S .

In the example embodiment of if the received data corresponds to the DE the buffer cache may determine whether the buffer cache includes previous data corresponding to the received data at S . If the buffer cache does not include previous data corresponding to the received data the buffer cache may load data corresponding to the received data from the flash memory device at S . The buffer cache may update the previous data with the received data at S . The buffer cache may determine whether an amount of data stored in the buffer cache exceeds a threshold size of the buffer cache and or whether the buffer cache is scheduled to update the flash memory device at S . The buffer cache may write the updated data into the DE meta cache at S . The DE meta cache may check whether a current DE outputted from the DE cache and a previous DE outputted from the buffer cache are continuous and or if a number of the DEs exceeds a threshold number e.g. a maximum size of the DE meta cache and may re cache the DE outputted from the buffer cache at S . The DE meta cache may output the continuous DEs in the DE meta cache at S and S and may re caches the DE e.g. the current DE outputted from the DE meta cache at S .

In the example embodiment of if the received data does not correspond to the DE the buffer cache may determine whether the buffer cache includes previous data corresponding to the received data at S . If the buffer cache does not include previous data corresponding to the received data the buffer cache may load data corresponding to the received data from the flash memory device at S . The buffer cache may update the previous data with the received data at S . The buffer cache may determine whether an amount of data stored in the buffer cache exceeds a threshold size of the buffer cache and or whether the buffer cache is scheduled to update the flash memory device at S . The buffer cache may write the updated data into the flash memory device at S .

In another example embodiment of the present invention a device driver may be configured so as to reduce a number of read and write operations on a flash memory device e.g. flash memory device of by separately managing storing hot data e.g. data which is updated changed at a higher rate and cold data e.g. data which is updated changed at a lower rate . Further the example device driver may improve performance of a flash memory file system by reducing a number of copy operations.

Example embodiments of the present invention being thus described it will be obvious that the same may be varied in many ways. For example while above described example embodiments are directed generally to flash memory devices it will be appreciated that other example embodiments of the present invention may be directed to any well known type of memory device.

Such variations are not to be regarded as a departure from the spirit and scope of example embodiments of the present invention and all such modifications as would be obvious to one skilled in the art are intended to be included within the scope of the following claims.

