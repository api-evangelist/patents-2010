---

title: System and method for OSGi-based service delivery framework
abstract: A system and a method for OBSi-based (open service gateway initiative) service delivery framework are provided. The system is adaptable to a first host executing an OSGi bundle. A mobile service module of the first host is inherited through the OSGi bundle. A second host is assigned when the OSGi bundle calls a mobilize function inherited from the mobile service module. A bytecode and an instance of the OSGi bundle are obtained through a first delivery context processing module of the first host. The bytecode and instance of the OSGi bundle are transmitted from the first host to the second host through the first delivery context processing module and a second delivery context processing module of the second host. The bytecode and instance of the OSGi bundle are installed and the OSGi bundle is executed through the second delivery context processing module.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08504669&OS=08504669&RS=08504669
owner: Institute for Information Industry
number: 08504669
owner_city: Taipei
owner_country: TW
publication_date: 20100526
---
This application claims the priority benefit of Taiwan application serial no. 98143248 filed on Dec. 16 2009. The entirety of the above mentioned patent application is hereby incorporated by reference herein and made a part of specification.

The present invention generally relates to a system and method for service delivery framework and more particularly to a system and method for open service gateway initiative OSGi .

The open service gateway initiative OSGi specification is developed by the OSGi Alliance and which is dedicated to specifying an integrated information service platform. A remote software service provider can provide application programs and add on services to its users through such a service platform wherein these application programs and add on services can be dynamically downloaded through the Internet and automatically installed into end user devices according to user requirements.

In recent years different OSGi based service platforms for automotive telematics have been developed. In particular the OSGi Vehicle Expert Group VEG proposes the support of web services as a major requirement to OSGi based service platforms for automotive telematics. However the support of web services in automotive telematics is confronted with two major issues. The first issue is the optimization for low bandwidth. Because the transmission of web services to telematics devices is usually restricted by wireless communication bandwidths and connection expenses a service provider desires the data transmission quantity to be optimized. The second issue is about unstable links. A web service relies on a constant network connection to transmit service calls call waiting and service data. However because the telematics wireless network environment of the service provider has posed a great challenge to the stable network performance.

Accordingly the present invention is directed to service delivery system and method for an open service gateway initiative OSGi wherein an OSGi bundle is allowed to actively and continuously move on multiple hosts.

The present invention provides a service delivery method of an OSGi framework. The service delivery method is adaptable to a first host executing an OSGi bundle. The service delivery method includes following steps. A mobile service module and a first delivery context processing module are provided in the first host. The mobile service module is inherited through the OSGi bundle so that the self developed OSGi bundle inherits the functions of the mobile service module. The data of a second host is assigned when the OSGi bundle calls a mobilize function inherited from the mobile service module. The bytecode and the instance of the OSGi bundle are obtained through the first delivery context processing module. A second delivery context processing module is provided in the second host. The bytecode and the instance of the OSGi bundle are transmitted from the first host to the second host through the first delivery context processing module and the second delivery context processing module. The bytecode and the instance of the OSGi bundle are installed and the OSGi bundle is executed through the second delivery context processing module.

According to an embodiment of the present invention after the bytecode and the instance of the OSGi bundle are obtained the service delivery method further includes modifying a manifest of the OSGi bundle according to a service of the second host required by the OSGi bundle through the first delivery context processing module.

According to an embodiment of the present invention after the bytecode and the instance of the OSGi bundle are obtained the service delivery method further includes packing or serializing the bytecode and the instance of the OSGi bundle through the first delivery context processing module.

According to an embodiment of the present invention after the bytecode and the instance of the OSGi bundle are transmitted to the second host the service delivery method further includes de serializing the instance of the OSGi bundle and restoring the bytecode of the OSGi bundle through the second delivery context processing module.

According to an embodiment of the present invention after the instance of the OSGi bundle is received the service delivery method further includes de serializing the instance of the OSGi bundle through the second delivery context processing module.

According to an embodiment of the present invention after the bytecode and the instance of the OSGi bundle are de serialized and installed the service delivery method further includes starting the OSGi bundle through an onMobilized function of the OSGi bundle inherited from the mobile service module so as to continue to execute a program or a service.

The present invention provides a service delivery system of an OSGi framework. This system includes a first host and a second host. The first host includes an OSGi bundle a mobile service module and a first delivery context processing module. The OSGi bundle is a user defined program executing a service and inherited functions of the mobile service module. The mobile service module assigns the second host. The first delivery context processing module obtains the bytecode and the instance of the OSGi bundle packs or serializes the bytecode and the instance of the OSGi bundle and transmits the packed or serialized bytecode and instance of the OSGi bundle to the second host. The second host is coupled to the first host and which receives the packed or serialized bytecode and instance of the OSGi bundle.

According to an embodiment of the present invention the first delivery context processing module further serializes the instance of the OSGi bundle.

According to an embodiment of the present invention the first delivery context processing module further modifies a manifest of the OSGi bundle packs the bytecode of the OSGi bundle and serializes the instance of the OSGi bundle according to a service to be provided by the second host.

According to an embodiment of the present invention the second delivery context processing module further de serializes the instance of the OSGi bundle and restores the bytecode of the OSGi bundle.

According to an embodiment of the present invention the second delivery context processing module further uses the functions of the OSGi bundle inherited from the mobile service module.

According to an embodiment of the present invention the service system further includes a server coupled to the first host wherein the first host downloads the OSGi bundle from the server.

As described above in the present invention the bytecode and instance of an OSGi bundle are transmitted from a first host to a second host through a mobile service module and delivery context processing modules. Thereby the instance and bytecode of the OSGi bundle generated during the execution of the OSGi bundle are allowed to move and execute a service on different hosts through network transmission.

Reference will now be made in detail to the present preferred embodiments of the invention examples of which are illustrated in the accompanying drawings. Wherever possible the same reference numbers are used in the drawings and the description to refer to the same or like parts.

The first host includes a mobile service module and a first delivery context processing module . The mobile service module is inherited by the OSGi bundle and which assigns the second host . The first delivery context processing module obtains the bytecode and the instance of the OSGi bundle and transmits the bytecode and the instance of the OSGi bundle to the second host . The second host includes a second delivery context processing module for receiving and installing the bytecode and the instance of the OSGi bundle and executing the OSGi bundle.

Three different classes are provided in the present embodiment. The three classes include a mobile service class referred to thereinafter as an OSGiMobileService class a mobile service sending class referred to thereinafter as a sender class and a mobile service receiving class referred to thereinafter as a receiver class . The sender class and the receiver class belong to the first delivery context processing module the OSGiMobileService class belongs to the mobile service module and the other portion is designed and developed according to the actual requirement of a user.

Namely the mobilize function G assigns a receiver host to which the OSGi bundle is about to move as the second host obtains the bytecode and instance of the OSGi bundle through the send function in the sender class serializes the bytecode and instance and sends the serialized bytecode and instance to the second host through a network so as to mobilize the OSGi bundle.

In addition the onMobilized function G is implemented as a subclass and this function is automatically called after the OSGi bundle moves to the second host . A user can design the function of the subclass according to the services provided by the user and obtain the instance of the OSGi bundle through the receiver class so that the OSGi bundle can have the de serialization behavior of the mobile service module.

Next in step S the first host obtains the bytecode and the instance of the OSGi bundle through the first delivery context processing module . Because the bytecode of the OSGi bundle cannot be directly obtained from the API provided by the OSGi framework in the present embodiment a structure of all directories and files in the OSGi bundle is obtained through a findEntries function in an OSGi service bundle interface. Through this technique data of each directory or file in the OSGi bundle is read as a file class and the data is then written into a JarEntry class. Eventually all JarEntries are packed into a jar file through a putNextEntry function in the JarOutputStream class. Accordingly the bytecode of the OSGi bundle is obtained and the algorithm described above is expressed as a getBundleFile function G as shown in . illustrates the pseudo code of the getBundleFile function.

In step S the second delivery context processing module is provided to the second host . In step S the bytecode and the instance of the OSGi bundle are transmitted from the first host to the second host through the first delivery context processing module and the second delivery context processing module . Herein the mobilize function G calls the send function in the sender class to transmit the bytecode and the instance of the OSGi bundle to the second host . First the send function determines whether a network connection can be established to the second host . The send function starts to transmit data after the network connection to the second host is successfully established. During the data transmission process the send function first obtains and transmits the bytecode of the OSGi bundle and then obtains and transmits the instance of the OSGi bundle. After that the send function terminates the connection between the first host and the second host . Finally the send function stops the execution of the OSGi bundle on the first host .

After the second host receives the bytecode and the instance of the OSGi bundle in step S the second host installs the bytecode and the instance of the OSGi bundle and executes the OSGi bundle through the second delivery context processing module . It should be mentioned that the execution status of the OSGi bundle remains unchanged and uninterrupted when the OSGi bundle moves between the first host and the second host . Besides the OSGi bundle can use services of the second host after it moves to the second host .

Referring to in step S a mobile service module and a first delivery context processing module are provided to the first host . Then in step S the mobile service module is inherited by the first host through the OSGi bundle. Next in step S the second host is assigned through the mobile service module . After that in step S the first host obtains the bytecode and the instance of the OSGi bundle through the first delivery context processing module . Next in step S a manifest M manifest.mf of the OSGi bundle is modified the bytecode of the OSGi bundle is packed and the instance of the OSGi bundle is serialized according to a service required by the second host through the first delivery context processing module . Namely in the present embodiment the first delivery context processing module further packs all the JarEntries into a jar file and records the execution status of the instance on the first host by serializing the instance.

To be specific because the subclass OSGiMobileService still needs to use services provided by the second host after the OSGi bundle moves to the second host the names of service packages to be used have to be imported in the bytecode of the subclass the classpath used at compiling and the manifest M. The validity of the package imported in the bytecode is checked at the compiling time and the validity of the package imported in the manifest M is checked at the execution time. Because the OSGi bundle is to be executed in two different environments it is essential to import the service package in the bytecode and the importion of the service package does not affect the execution of the OSGi bundle. However because some services of the second host are not to be provided on the first host the checking performed by the OSGi platform to the OSGi bundle at the execution time can be avoided by modifying the manifest M. Namely no service package is imported on the first host that does not provide any service while the name of the service package is written into a manifest M on the second host that provides the services. Namely the package required by the second host for providing the services is imported in the manifest M and denoted as Service .

Thereafter in step S a second delivery context processing module is provided to the second host . After that in step S the bytecode and the instance of the OSGi bundle are transmitted from the first host to the second host through the first delivery context processing module and the second delivery context processing module . In the present embodiment the receiver class of the second delivery context processing module is capable of receiving the bytecode and the instance of the OSGi bundle from the sender class . After a receiving function in the receiver class is executed it waits for the sender host to establish the connection. After the connection is established the receive function in the receiver class starts to receive the bytecode and the instance of the OSGi bundle from the first host . After that the receive function in the receiver class terminates the connection.

Thereafter in step S the instance of the OSGi bundle is de serialized and the bytecode of the OSGi bundle is restored through the second delivery context processing module i.e. by calling the onMobilized function G as shown in . Namely the second delivery context processing module receives the instance of the OSGi bundle from the sender class through network transmission and stores it into an object instance so as to de serialize the instance of the OSGi bundle. Besides the bytecode of the OSGi bundle is restored in the second host .

Thereafter the second host installs or updates the bytecode and executes the OSGi bundle through the second delivery context processing module step S . Because the OSGi bundle inherits the mobile service module when it is on the first host the second delivery context processing module can continue to use the functions of the OSGi bundle inherited from the mobile service module after the bytecode of the OSGi bundle is installed in the second host . In other words it is like the mobile service module is transmitted to the second host along with the OSGi bundle and becomes a mobile service module .

As described above in the present invention the bytecode and instance of an OSGi bundle are transmitted from a first host to a second host through a mobile service module and delivery context processing modules. Thus the instance state generated at execution time is allowed to move between different hosts along with the bytecode through network transmission. Accordingly maintaining a good network environment and transmitting data of a large quantity through a stable network connection become not necessary. Instead the request to a specific service is brought to the host providing the service and after receiving the desired service the result is brought back to the original host that issues the request through an OSGi service bundle. Thereby a continuous web service can be provided to different devices in a mobile communication environment.

It will be apparent to those skilled in the art that various modifications and variations can be made to the structure of the present invention without departing from the scope or spirit of the invention. In view of the foregoing it is intended that the present invention cover modifications and variations of this invention provided they fall within the scope of the following claims and their equivalents.

