---

title: Automatic generation of virtual database schemas
abstract: A data consumer is provided with a system that enables automatic generation of a virtual database schema in order to support a customized pattern of data consumption across one or more source databases. In one embodiment, a metadata manager component is configured to facilitate creation of a first data tag and a second data tag. A schema definition manager component is configured to facilitate creation of a data entity that groups the first data tag with the second data tag. A virtual schema generation service component generates the virtual database schema by analyzing the data entity and, based on the grouping of the first data tag with the second data tag, automatically generating and storing a database query statement that, when executed, causes a retrieval of data consistent with data location indicators included in the first and second data tags.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08452808&OS=08452808&RS=08452808
owner: Microsoft Corporation
number: 08452808
owner_city: Redmond
owner_country: US
publication_date: 20100302
---
It is not uncommon for businesses governmental organizations and other enterprises to maintain many different kinds of electronic data from disparate sources. For example health oriented enterprises will often maintain patient information from many sources including scanned documents electrocardiograms X rays MRI scans and other medical imaging procedures lab results dictated reports of surgery as well as patient demographics and contact information. There are challenges associated with providing a computing platform that enables customized retrieval and display of data across so many different kinds of data from so many different sources.

Some of the challenges arise from the fact that at any given point in time traditional databases generally will only exist in a single physical expression e.g. only one table structure implementation . However the pattern of data consumption is ideally malleable by consumer as each consuming client has variant needs. The situation is further complicated by the fact that the number of data consumers is likely to grow over time. Each consumer generally requires a consistent data consumption profile regardless of any change over time to the original data sources. Currently changes to upstream source systems create exponential amounts of derivative work necessary to update and support consuming systems.

The discussion above is merely provided for general background information and is not intended for use as an aid in determining the scope of the claimed subject matter.

In order to address at least some of these concerns a data consumer is provided with a system that enables automatic generation of a virtual database schema in order to support a customized pattern of data consumption across one or more source databases. In one embodiment a metadata manager component is configured to facilitate creation of a first data tag and a second data tag. A schema definition manager component is configured to facilitate creation of a data entity that groups the first data tag with the second data tag. A virtual schema generation service component generates the virtual database schema by analyzing the data entity and based on the grouping of the first data tag with the second data tag automatically generating and storing a database query statement that when executed causes a retrieval of data consistent with data location indicators included in the first and second data tags.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter. The claimed subject matter is not limited to implementations that solve any or all disadvantages noted in the background.

Embodiments disclosed herein pertain to a system provided to a data consumer to enable automatic generation of a virtual database schema. The virtual database schema supports a customized pattern of data consumption across one or more source databases. The system illustratively includes a metadata manager component configured to facilitate creation of a first data tag and a second data tag. The first data tag includes an indication of a first data vector that identifies where in a first of the plurality of source databases a first item of data is stored. The second data tag includes an indication of a second data vector that identifies wherein in a second of the plurality of source databases a second item of data is stored. The system also includes a schema definition manager component configured to facilitate creation of a data entity. The data entity includes a grouping of the first data tag with the second data tag. Finally the system includes a virtual schema generation service component that generates the virtual database schema by analyzing the data entity and based on the grouping of the first data tag with the second data tag automatically generating and storing a database query statement that when executed causes a retrieval of the first and second items of data.

System also includes a consumer e.g. a data consuming application . In actuality system may include a plurality i.e. any number 1 up to N of data consumers e.g. a plurality of data consuming applications . Each consumer benefits from an ability to conveniently access and share the disparate data of databases . However enabling physical access to the data in databases is only part of the challenge. The data in databases is not necessarily consistent from one database to the next at least in terms of how the data is stored. While some consumers may subscribe to a common data storage organization access scheme reflected possibly in some but not all of databases other consumers that desire to access databases may prefer a different data storage organization access scheme.

Accordingly each consumer will benefit from the ability to access the information in databases based on its own retrieval and display preferences. In one embodiment in order to facilitate this ability each consumer is provided with their own version of a virtual database that enables a unique customized perspective into the data of databases . This is accomplished at least in part through implementation of a customizable virtual database schema in accordance with which the information in databases is accessed. Thus each virtual database enables its respective consumer to access the information in databases utilizing the consumer s own data storage organization access scheme. This is done without sacrificing the ability of other consumers to access and attach a different meaning to the same data. Having different virtual databases including different virtual database schemas makes it possible for different consumers to maintain their own preferred interface into the data of databases .

Within a given data domain though two consumers may prefer different data storage organization access schemes there is typically significant overlap in terms of the actual data likely to be frequently of interest from one consumer to the next. Continuing with the example assumption that system is implemented within the health enterprise domain it is common for there to be significant overlap between separate health related applications e.g. separate consumers involved in patient management in terms of a desire to access certain individual data components of databases . For example multiple applications may have an interest in the names of patients. Unfortunately while patient name might be stored in one location in one database it just as easily might be stored in a totally different location in a different database . There also may be discrepancies from one database to the next in terms of the format in which a patient s name is stored. There may even be data location and format inconsistencies within a single database . In order to support generation of a virtual database a determination is illustratively made as to how and where data items such as the patient name are located in the various databases . In one embodiment a process is applied to generate a record of data vectors that point into the databases so as to identify how and where individual items of data are stored. This process is illustratively accomplished through identification e.g. by way of human input or a partially or fully automated process of a data pointer or other mapping mechanism that links each individual item of data to a corresponding storage location in the databases . As will become apparent these data vectors are reflected in the virtual database schema of the virtual database and relied upon to give the data consumer unified access to the underlying data components spread across one or more databases . It is to be understood that in one embodiment the data pointer or other mapping mechanism is configured such that a single patient name data concept is expressed as a single field entry in a database table an expression based upon multiple fields or multiple individual fields with an order of precedence for selection.

In one embodiment a set of potentially unique and disparate items of data existing in one or more of databases is presented through the virtual database to the data consumer as a unified data component. The consumer interacts with the unified data component and by doing so indirectly interacts with the associated set of disparate data items by triggering one or more corresponding database query operations as reflected in virtual database . The unified data component conceals the actual disparity in databases in terms of how and or where the actual data is stored. The consumer is able to consume or otherwise interact with the set of disparate data items without having to understand the inconsistencies in terms of how and or where the individual data components are actually stored in databases . The data consumer is essentially isolated from the inconsistencies in favor of an impression that such inconsistencies do not exist.

Continuing with the example assumption that system is implemented within the health enterprise domain a first host of a database might choose to store a patient name value as two separate fields in a table called Patients. They may have a field called First Name and a field called Last Name. A second host of a different database might choose to list the patient name in a single field within a Patients table. Those skilled in the art will appreciate that this example is a simplification of reality. In actuality it is not uncommon for a complex organization to have dozens or even hundreds or more different pieces of software that all include an indication of patient name in many different tables in many different formats. The inconsistencies in the treatment of patient name are addressed by presenting a unified patient name data component to data consumer through the virtual database . The unified patient name data component conceals the actual disparity in databases in terms of how and or where the actual patient name data is stored. The consumer consumes or otherwise interacts with the unified patient name data component and by doing so indirectly interacts with the actual patient name data in databases by triggering one or more corresponding database query operations as reflected in the consumer s preferences reflected in the virtual database . The consumer is able to consume or otherwise interact with the patient name data in databases without having to understand the inconsistencies in terms of how and or where the individual patient name data components are actually stored. That is not to say that an ontology is defined. For example there could be multiple instances of patient name related data components expressed and each would be enforced to have a unique name description and tag to distinguish it as a unique data entity to the data consumer.

Accordingly virtual database is illustratively configured to provide the database consumer with a virtual database scheme that enables a consistent unified impression of an item of data regardless of how the item of data is represented across the different databases . For a given item of data e.g. patient name a unified entry is included in the schema of virtual database . The unified entry points to and unites e.g. by way of a join and or union and or other SQL operation the various corresponding entries across the databases regardless of how the data item is formatted and regardless of how it is physically stored. For example a unified entry for patient name in the virtual database is illustratively mapped to the corresponding two field entry in the Patient table of the first host and the corresponding single field entry in the Patient table of the second host.

The mapping which can also be conceptualized as a system of data pointers is illustratively established by tagging the various data components of the databases . During the tagging process for example a single patient name data concept may be expressed as a single field entry in the Patient table an expression based upon multiple fields or multiple individual fields with an order of precedence for selection. It is conceived that the tagging may be conducted on an automatic semi automatic or manual basis.

In one embodiment consistent with system includes a metadata manager component . Component is illustratively a tool that enables metadata descriptive of attributes of data contained within databases to be added to a metadata store . While this selection and assignment of the metadata values may be fully or partially automated the metadata manager component illustratively includes a mechanism that enables users to manually input into metadata store a plurality of metadata tags that describe data components of one or more databases . In one embodiment data tags are assigned to certain potentially any characteristics of data components e.g. buy not by limitation properties fields values objects etc reflected in databases . In one embodiment not by limitation the metadata manager component enables a user to freely associate and dissociate data tags with locations within one or more databases . Data tags added to metadata store may include for example but not by limitation any or all of the following properties 

The unique identifier provides a mechanism for identifying and retrieving a tagged data item. The element name and element source components of the tagging scheme provide a way to name the data item and identify an associated source. The schema default name and schema default type enables a setting of how the associated data item will be identified in the context of a generated schema. For example it may be desirable for a patent name data item to be referred to within the schema as P name or Patient Name or PatientName or some other variation or representation. In another example it may be desirable for a data item called Cholesterol Indicator Of Congestive Heart Failure to be referred to within the schema as something much shorter such as CHF. The schema default name property enables a default override to a desired value. The schema default data type similar enables a restriction to a certain data type e.g. string number etc. .

The source data location supports creation for the data item being tagged of a record of a data vector which is essentially a pointer to where the data element is located within the database s . The particular combination of parameters for identifying where the tagged data item is located is flexible and can be adjusted from one implementation to the next depending upon system preferences and requirements. Parameters may include an identification of the server where the data item is located the database on the server in which the item is located the table in that database in which the item is located the column in that table in which the data item is located and the row in that column in which the data item is located. It is to be understood however the source data location need not necessarily be as precise as a directly identified data location. Instead it may be any data query function. For example it may be a database query that includes a where clause or any other function applied to a data retrieval operation. The general function of the source data location portion of the tagging scheme is to provide a vector to point at a specific location in a specific database with a specific set of criteria in accordance with which the tagged data fragment is to be retrieved. It is to be understood that in one embodiment the data pointer or other similar mapping mechanism is configured such that a single data concept is expressed as a single field entry in a database table an expression based upon multiple fields or multiple individual fields with an order of precedence for selection.

The final two noted elements of the data tagging scheme namely the data tag publisher and the data tag version simply provide a mechanism for creating a record of the tagging operation. For example the recorded data may include the name of the person or automated system that applied the tag. It may also include a record of the date and or time upon which the tag was applied.

As has been alluded to different data consumers e.g. different data consuming applications may not share the same perspective in terms of how the data of databases is ideally consumed. It is also possible that a single data consumer may desire multiple perspectives as to how the data is consumed. System includes a schema definition manager component that enables a consumer to dictate on a customized basis how the data of databases will be consumed through the virtual database . The component illustratively includes a mechanism that enables customized creation of data entities as an arbitrary set of the data tag elements created by way of the described functionality provided by the metadata manager. The component illustratively also includes a mechanism that supports on a customized basis the definition of relationships between the data entities. The data entities illustratively can be grouped together as peers with 0 . . . N relationships between the entities. In one embodiment component also supports the application of security to the entities for both edit rights as well as data consumption rights. In one embodiment data provided by way of component is added to the metadata store but this need not necessarily be the case as the data can certainly be stored elsewhere without departing from the scope of the present invention.

In one embodiment schema definition manager component provides a user interface that supports manual automated or semi automatic creation of a set of table and columns using only the elements which exist in the metadata store as a result of the tagging operations carried out in conjunction with the metadata manager component . This does not require any working knowledge of the physical structure of the underlying database s . The schema definition manager component in essence provides a shopping cart type experience wherein a user e.g. an application developer that is a data consumer can pick and choose the data elements they want and group them together into the concepts of tables without having to have any knowledge of the underlying structure of database s .

System also includes a virtual schema generation service component . Service component is illustratively an automated component that coalesces the inputs into the metadata manager component and the schema definition component so as to automatically generate a virtual schema that forms the core of the virtual database . In one embodiment service component functions by generating a database query statement for each entity defined in the schema definition manager component . For each entity the service component selects the components of the database query statement so as to directly reflect the database vectors included within the data tags assigned to the entity as recorded in the metadata store based on inputs to the metadata manager component . In one embodiment the schema generation service component then generates a single map of entities expressed with their newly generated database query. The service component then uses the entity definition map to present data consumer with the virtual schema which supports data navigation through traditional data protocols.

In one embodiment generation service component is further configured to translate requests for data e.g. requests formatted so as to be consistent with a schema established for the virtual database received from the data consumer by identifying the corresponding generated database query statements. The corresponding database query statements are executed so as to retrieve corresponding data from the database s . That retrieved corresponding data is then delivered to the data consumer in response to their request. The data is illustratively delivered through a traditional data protocol such as but not limited to TCP IP HTTP SOAP REST etc. The physical delivery mechanism is client and configuration dependent. Delivery can be in a format that is consumable on all platforms. This enables true interoperability between the data sources and the data consumer i.e. a data consuming application .

In one embodiment the combination of input captured by the metadata manager component e.g. the data tags descriptive of details of database or databases and the input captured by the schema definition manager is collectively referred to as a data consumption profile. The virtual schema generation service enables a given data consumer e.g. a given application to adapt their own data consumption profile and interact accordingly with data across one or more databases . The automatic generation of the virtual database schema merges the inputs received from components and so as to support generation of a virtual database interface having a schema tized format.

Accordingly after a user submits desired schema characteristics i.e. by way of component the tables and elements specified therein which essentially reference the tagging metadata provided by way of component are processed by service . In particular service attaches mappings that indicate how to access the underlying data components of database s . The data vectors indicated in the metadata generated by way of component are processed by an algorithm so as to generate corresponding database queries. In essence service takes the conceptual schema defined by way of component and makes it real by adding in the mappings. The result is the customized virtual database against which the data consumer can program etc.

In one embodiment an application associated with data consumer is configured to interact with the virtual database which matches their expectations as expressed in the input provided by way of component . By way of this interaction the application indirectly interacts as necessary with the data of database s based on queries that reflect the vectors indicated in the input made by way of component .

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data . Components e.g. components etc. of system discussed above in relation to can be stored in other program modules or elsewhere including being stored remotely.

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies.

A user may enter commands and information into the computer through input devices such as a keyboard a microphone and a pointing device such as a mouse trackball or touch pad. Other input devices not shown may include a joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer is operated in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a hand held device a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on remote computer . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

As mentioned above components e.g. components etc. of system discussed above in relation to can be implemented using processing unit and any of a variety of the computer storage components discussed in relation to . In addition the components e.g. components etc. can be implemented by activating processing unit to perform methods such as those described above in relation to .

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

