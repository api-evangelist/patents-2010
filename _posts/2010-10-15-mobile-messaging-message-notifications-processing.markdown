---

title: Mobile messaging message notifications processing
abstract: Described is a pipeline for handling notification messages sent to a mobile messaging message (e.g., SMS or SMTP) recipient, and handling a reply to that notification message, including correlating the notification message with the reply. An engine receives a notification message, and for a notification message to which a reply is possible, maintains state data for use in correlating a received reply with the notification message. The state data includes metadata that indicates that text or code data is expected in any reply. For a reply providing code data, the engine calls a selected URL corresponding to the code. To facilitate message delivery, the engine may format the notification message, including shortening a URL of the message, and/or splitting a longer notification message into shorter notification messages.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08934925&OS=08934925&RS=08934925
owner: Microsoft Corporation
number: 08934925
owner_city: Redmond
owner_country: US
publication_date: 20101015
---
Mobile messaging messages including SMS Short Message Service messages MMS Multimedia Messaging Service messages and mobile email messages are relatively difficult to deliver to users. In general this is because users use a wide variety of mobile carriers. Sending and receiving mobile messaging messages to and from users involves a thorough understanding of the carrier specific details of delivery. Further users in different markets use different technologies to receive mobile messaging messages for example in Japan users receive mobile messaging messages as mobile e mail messages.

In many markets carriers demand the ability to respond to mobile messaging messages. However interaction with users that involves responding to such messages sent from them is often a difficult problem. As a result users cannot perform actions on such messages such as initiating activities or performing actions such as accepting a request or adding a comment in response to a message. In addition to the above described difficulties message delivery also needs to honor privacy and security requirements.

Reaching users via their mobile devices is valuable in many scenarios. Any improvement in mobile messaging technology is thus desirable.

This Summary is provided to introduce a selection of representative concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used in any way that would limit the scope of the claimed subject matter.

Briefly various aspects of the subject matter described herein are directed towards a pipeline for handling notification messages directed toward a mobile message e.g. SMS MMS or SMTP recipient and handling a reply to that notification message including correlating the notification message with the reply. In one aspect an engine receives a notification message directed towards a mobile recipient e.g. via a declarative API. The engine accesses a carrier related data store to determine information corresponding to a mobile address of the mobile recipient. For a notification message to which a reply is possible the engine maintains state data for use in correlating a received reply with the notification message.

In one aspect the state data includes metadata that indicates that text data is expected in any reply to the notification message. When the engine receives a reply including text data the engine accesses the state data to correlate the reply with the notification message and returns text corresponding to the reply to a REST API service which may decide to send the reply to a sender of the notification message.

In one aspect the state data includes metadata that indicates that code data is expected in any reply to the notification message. When the engine receives a reply including such code data the engine accesses the state data to correlate the reply with the notification message and performs an action based upon the code data. For example the code data may correspond to a selected URL of a plurality of URLs and the engine performs the action by calling the selected URL. The code data may include a locale specific code value and or a locale agnostic code value. As will be understood the locale specific code keeps the reply semantics relevant to the market of the SMS participant while the agnostic value keeps the API processing system uncoupled from the details that differ from locale to locale such as the locale code .

To facilitate message delivery the engine may format the notification message for the recipient. Formatting may include shortening at least one URL of the message into data representative of that URL e.g. a short URL and or splitting the notification message into a plurality of shorter notification messages.

Other advantages may become apparent from the following detailed description when taken in conjunction with the drawings.

Various aspects of the technology described herein are generally directed towards processing mobile messaging messages that are related to notifications such as a notification sent via a notifications platform as generally described in U.S. patent application Ser. No. 12 816 402 assigned to the assignee of the present application and hereby incorporated by reference. To this end a mobile messaging message pipeline provides a mechanism to describe a mobile messaging message in terms of an outgoing message being transported along with any possible responses that are permitted from the user. Each response may be associated with a call to a service that acts on the user s behalf to perform an initiated action and return a message the user. Note that as described herein mobile messaging messages need not be simple one way text messages and instead may contain other information including for example the ability to reply to a mobile messaging message or other notification e.g. add a comment to a notification and or the ability to respond in a certain way e.g. to accept or reject an invitation notification . Mobile messaging messages also may contain images and other non textual data.

In one implementation the pipeline provides an API that describes an outbound message that needs to be delivered to a user along with information corresponding to any responses that the outbound message permits. Permitted responses include a text response in free text or a coded response in code. The code may be described with a locale specific code and a locale agnostic code allowing the pipeline to support coded actions with code values specific to a locale thereby making the pipeline more relevant to the receiving user s market. The pipeline maintains corresponding information that may be used to re associate reconcile any response with the outgoing message s data.

It should be understood that any of the examples herein are non limiting. As one example in one implementation the mobile messaging pipeline couples to a notifications platform as generally described in the aforementioned U.S. patent application Ser. No. 12 816 402 however other implementations and uses of the technology described herein are feasible. Moreover while SMS is used as an example of mobile messaging the technology is not limited to SMS further mobile messages need not necessarily be sent from a mobile device. As such the present invention is not limited to any particular embodiments aspects concepts structures functionalities or examples described herein. Rather any of the embodiments aspects concepts structures functionalities or examples described herein are non limiting and the present invention may be used in various ways that provide benefits and advantages in computing and data communication in general.

To provide the message to the engine a REST API may be provided for an SMS message or the like or a mobile carrier email message may be provided e.g. via an HTTP Post method. When processing the message for delivery if a registered user identifier e.g. a Windows Live Passport Unique ID or PUID is provided the mobile messaging message engine of the pipeline resolves the provided user s identifier into the user s preferred mobile address. If only a mobile address is provided the mobile messaging message engine may treat the recipient s mobile address as an email format.

The table below summarizes example fields that may be related to the outbound message e.g. from the caller 

As represented by block accessing a carrier configuration data store e.g. a file the engine is able to retrieve the user s mobile carrier data and deliver the message according to the characteristics of the user s mobile provider block . For example if a PUID is received in a Windows Live environment the mobile messaging message engine retrieves the recipient s mobile address. Note that the configuration data store maintains information on which application has deployed in which carrier along with the connection protocol for the application to that carrier connection information and short code related information. In one implementation this includes support for the Japanese mobile e mail SMTP Simple Mail Transfer Protocol system. In order to determine the correct format of the mobile address the mobile messaging message engine parses the carrier configuration files for non Japan carriers. If the mobile phone is from a Japanese carrier the mobile messaging message engine treats the format of the mobile address as an SMTP address.

Based on the mobile address format the mobile messaging message engine includes various logic e.g. when the mobile address is of phone format SMS the mobile messaging message engine stores via a session tracking and correlation identifier allocation component message data in conjunction with an allocated correlation identifier in a session store . In one implementation the App ID Correlation identifier and mobile address identify one session. The following table exemplifies other message related data that may be maintained in the session store 

The mobile messaging message engine engine also may perform message formatting block e.g. if the notification mobile messaging message is longer than the maximum length per message supported by the carrier. More particularly in one implementation the message may be longer than the character limit of one SMS message and thus the message is split. To this end the mobile messaging message engine gets the maximum length of a message that is supported by the carrier based on the recipient s carrier ID. There are two maximum length of message values configured for each carrier maximum DefaultAlphabet length and maximum Unicode length. The mobile messaging message engine parses any long message to determine whether there is a Unicode character inside the message and if so the mobile messaging message engine splits the long message using the maximum Unicode length as the reference for splitting otherwise using the DefaultAlphabet length as the reference. The number of message splits may be limited e.g. any part of a long message that cannot fit within three messages may be truncated.

Note that there are different aspects of message formatting including message splitting and URL shortening other message formatting may be performed . If the message will be sent through SMTP the mobile messaging message engine only performs URL shortening not message splitting.

With respect to URL shortening the mobile messaging message engine parses the message and locates any URL inside the message. If present and depending on the length of the original URL the mobile messaging message engine decides whether to shorten the URL. There are two different configuration values of URL upper bound length corresponding to mobile carrier email and SMS. If the original URL length is longer than the URL upper bound length the mobile messaging message engine calls a URL shortening service to shorten it and replaces the original URL with a shortened URL in the message. Note that the shortening service basically substitutes an identifier e.g. an alias of the URL which itself is a URL into the message content for the URL which may be converted back to the original URL as needed collisions are not allowed . When the mobile address is of email format mobile carrier email the mobile messaging message engine performs URL shortening block as appropriate.

Once formatted as appropriate the mobile messaging message engine via block passes the message to a message delivery platform service e.g. via a SendMTMessage API or the like where MT refers to mobile terminated which may include the following example fields 

As represented in the message delivery platform service which includes the message API for receiving the message may access the carrier configuration data store and determine which connection to use block based on the application ID and the carrier ID. Note that block also may format the short codes the from address based on the correlation identifier and the application ID. Based on the determination the message is sent to the appropriate gateway or .

The mobile messaging message engine gets back a delivery result from the message delivery platform service e.g. through an API ReceiveMTResult which may be used for any desired purpose. For example the result may be used to determine success rate. The following data may be returned 

As can be seen the pipeline exposes a declarative API to send and receive mobile messaging messages. The API provides a property to set the outgoing message content e.g. in UNICODE and the pipeline ensures that the correct delivery encoding is used to support the characters. Long URLs may be automatically converted to a smaller URL or the like and messages may be split.

The API provides a structure to describe the responses that are supported for the message including text responses and coded responses. Messages that support a response are automatically saved in a state server and associated with an identifier op code . When delivered to the user the op code is the number that the user responds to if electing to respond. The pipeline automatically listens to this op code and converts the user s mobile number to an identifier e.g. PUID and invokes the REST API endpoint registered for the response. The API includes the REST API endpoint and any additional headers required to invoke the endpoint. Note that as this information is part of the API used to call the mobile messaging message delivery pipeline the pipeline has the information it needs to call the incoming REST endpoint without having any preconfigured information.

Turning to inbound aspects of the pipeline as generally represented in in general if a user replies to the message the reply is reconciled combined with the message data and the combined data is delivered to an endpoint e.g. of a set of REST API endpoints for each type of response supported which is invoked when the response is processed. Note that in one implementation only SMS or MMS inbound message processing is supported processing of an inbound message with the email address as the mobile phone format is not supported in which event the inbound message is discarded. Thus the pipeline allows a user to send an SMS message with a command and get a response back e.g. a two way social notification message may be replied to with text or a particular command selection.

When the message delivery platform service receives an inbound SMS message from the carrier SMS gateway the platform service determines the App ID and correlation identifier based on the to address of the SMS. This is represented in by block which may access the carrier configuration data store and block which represents routing the reply message to the mobile messaging message engine .

As represented by blocks when the mobile messaging message engine receives the message the mobile messaging message engine authenticates the user by looking up the identifier e.g. PUID based on the mobile address and retrieves the session information based on the correlation identifier mobile address and App ID from the session store . The mobile messaging message engine reconciles the session information and inbound SMS to call a web service application e.g. the REST API handler to complete the inbound handling.

In one implementation the mobile messaging message engine exposes a web service for receiving the message from the mobile delivery service platform. The following data may be provided retrieved 

To authenticate a registered user a database account that includes the mobile address to registered identifier e.g. PUID mapping is accessed. To retrieve the session information the mobile messaging message engine accesses the session information based on the App ID correlation identifier and mobile address. More particularly from the session info the mobile messaging message engine retrieves the application name associated with the session and reconciles the message body and the metadata based actions in the session. The following information may be retrieved 

In this manner the mobile messaging message engine obtains the actions metadata e.g. defined in an XML schema . In one implementation there are two types of action handling namely text action handling and coded action handling which may be mutually exclusive for each notification message. If neither is included in the actions the mobile messaging message engine treats the incoming message as being unable to be reconciled and performs error handling.

If the text action is used the mobile messaging message engine considers the entire inbound SMS message as the text message.

If there is no text action included in the actions metadata the mobile messaging message engine invokes a coded action parser. More particularly the mobile messaging message engine trims any white space at beginning of the message and checks whether the message body begins with any of localized command action defined in the coded action. If the coded action indicates that the command has no parameter and the inbound message has additional text other than the localized command the mobile messaging message engine treats the command as not matching. If the first localized command code is found the mobile messaging message engine obtains the corresponding command value. If the coded action expects the parameter to be provided from the inbound SMS the mobile messaging message engine treats the rest of the message as the parameter.

If the response is a coded response a unique code identifies the response. The code may be locale sensitive in which event the API call also specifies the locale for which the code is applicable e.g. the market locale associated with the user. Thus when different users in different locales receive the otherwise same mobile messaging message a different code can be used for the same coded response due to the different locales. When the REST API is invoked the REST API handler understands the intent of the response based on the locale specific code. To simplify this a locale agnostic code is also included in the API and stored with the message metadata by the pipeline. The pipeline provides this code along with the user s locale to the REST API. This allows the mobile messaging message pipeline to be adapted to different markets while allowing incoming mobile messaging message processing to remain simple. After completing the action in the REST API the pipeline can either return a standard message or depend on the REST API to return a localized message to the user.

The structure of the REST API follows a simple schema that can be used to support any type of mobile messaging message for any scenario. The message details include the message text coded values if a coded response is received the scenario for which the message was invoked and a blob of data that can be anything submitted in the body of the outgoing API. This allows the REST API to receive contextual information useful in performing the REST API call. For example for a Friend invitation to a user the outgoing API may also include the CID of the inviting person. When a user accepts a friend request with an SMS reply such as with code value a the REST API is provided with the CID along with the specific a value and the locale agnostic accept value .

After parsing the inbound message action the mobile messaging message engine completes processing of the inbound notification by inbound action handling. Note that if no action is identified the mobile messaging message engine performs an inbound notification error handling procedure to complete the inbound message processing.

To handle an inbound action the mobile messaging message engine obtains the ServiceEndpoint associated with the parsed action text action or specific command action from the actions metadata. If there is no ServiceEndpoint element associated with the action the mobile messaging message engine uses the global ServiceEndpoint from the session data.

The mobile messaging message engine obtains a request URI the from the ServiceEndpoint for making the REST API request which is the REST URI of the mobile messaging message engine s REST call from the BaseUrl element. The mobile messaging message engine also may extract request headers from the AppendHeaders element.

The mobile messaging message engine returns the message back to the user after making the REST API request. The mobile messaging message engine sends back the message according to the localized return message extracted from the session data.

Depending on the localized return message associated with the parsed action the mobile messaging message engine may operate differently. If the localized return message element associated with the action is Null the mobile messaging message engine determines that the caller does not expect the mobile messaging message engine to return any messages. If the fromServer parameter of the localized return message is set to false the mobile messaging message engine sends the message with localized return message when the request succeeds. If the fromServer parameter of the localized return message is set to true the mobile messaging message engine uses the localized return message from the response to send out the message. If the request fails the mobile messaging message engine sends a message from the returned localized message from the response.

By way of summary and additional details of the engine shows an example dataflow diagram corresponding to when a user sends a message a mobile device or the like to routing and delivery portion of the platform beginning with step note that the steps correspond to the labeled arrows. As described above the information in the message includes mobile address server address and message body.

As represented by step the MDS platform parses the server address to get the correlation identifier then it calls engine e.g. as a web service with arguments comprising the mobile address message body correlation identifier and receive time. If the correlation identifier does not exist zero is passed in as the correlation identifier.

As represented by step an engine controller a component of the mobile messaging message engine constructs user information from the mobile address and passes the information to a user and carrier information adapter another component of the mobile messaging message engine in one implementation . At this time this user information is incomplete containing the mobile address but lacking a user identifier e.g. PUID carrier information and other e.g. culture information.

The adapter fills in the other information by querying a web service or other data store and returns step the new user information which contains the mobile address user identifier e.g. PUID carrier information and culture information to the controller . If the user information is missing the user identifier e.g. PUID the controller returns an error message to the platform described below with reference to step .

At step the engine controller passes the message body and culture information to a grammar engine another component of the mobile messaging message engine in one implementation . The grammar engine analyzes the message body and returns step an SMS command comprising a command identifier command type command string application name and command message body.

If the command type is unknown and the correlation identifier is not zero at step the engine controller queries the session state data with the mobile address and correlation identifier to get the application name and the state data that belongs to the application. At step the application state and application name are returned from the session state data. If no data is returned the SMS dispatching failed whereby an error message is sent to mobile or other device user step described below .

As represented by step the controller finds the proper application plug in by application name and passes the application state from the session state data and the SMS command from the grammar engine to an application plug in. If there is no application state null is passed in. At this time the controller waits for a response from the application plug in as described below with reference to where the application initiates a message and sends it to a mobile user or replies to the mobile command.

Step represents sending the status any error message to the platform. The arguments passed include the mobile address sender s registered identifier e.g. sender PUID the error message and the correlation id the sender s registered identifier and correlation identifier may be undefined.

Step represents the platform sending the mobile messaging message to the mobile user. Note that messages may be checked with respect to business rules a business engine described below before being sent out except one obtained from the business engine that warns when the mobile user s quota is exceeded . The business engine may determine if the message is allowed to be sent.

The engine controller passes the user information which contains partial information to user and carrier information adapter . As generally described above this user information may be not complete until processed and augmented by data obtained by the user and carrier information adapter . These steps are represented in by the arrows labeled and .

Note that as represented by step the controller alternatively may receive a reply message from an application plug in. This step is followed by step of and illustrates a situation in which the application plug in returns a reply message after receiving a message from the mobile user. In this situation the application name user info and original correlation identifier may already exist in the context. Thus the application plug in returns the message to be replied to the user and provides the SmsMessageType send message flag and the application state the application state is stored in the session state server.

As represented by steps and the controller passes the message carrier information and maximum number of message pieces from either step or step to a message formatting control component . The message formatting control component performs any message formatting including any splitting as described above and returns the messages in a list or the like after any message splitting.

As mentioned above a business engine may be used to check business rules with respect to each message thus at step the controller passes the application name user identifier e.g. PUID mobile address SmsMessageType and number of messages to the business engine. In turn the business engine checks the message and at step returns a status code indicative of the business rule check. In one implementation included status codes may represent 1 Send Allowed 2 Send Allowed Send Quota Exceeded Message 3 Send Quota Exceeded Message 4 Carrier Not Supported Message Quota Exceeded 5 Application Not Supported Carrier Not Supported 6 Application Not Supported 7 Anonymous Message Not Allowed Message Quota Reached or 8 Business Engine Internal Error Send Allowed Send Quota Reached Message. Note that for status codes 2 3 and 8 a quota exceeded message is sent. For a status code of 1 or 2 the message is sent.

As represented by step the controller accesses the session state data to obtain the correlation identifier to send. In one implementation the logic for obtaining the correlation identifier is determined by a SendMessageSetting enumerator which may be Stateless ReuseSession or NewSession. If the SendMessageSetting equals Stateless the correlation identifier is zero. If the SendMessageSetting equals ReuseSession and the current correlation identifier is zero the correlation identifier is zero which means a stateless message otherwise the original correlation identifier of the message is used. If the SendMessageSetting equals NewSession the next correlation identifier just larger than the current is used as the correlation identifier which is then logged as the current correlation identifier. The next correlation identifier restarts at if a larger value is out of the range of correlation ids for the current carrier.

At step the messages are sent to the platform until the application has no more messages listed. In addition to the message body the mobile address user registered identifier e.g. PUID as the sender s registered identifier e.g. sender PUID for example and correlation identifier are also sent.

As represented by step the platform sends back a synchronized acknowledgement to the controller which contains a physical message id status code and status message.

The controller combines the synchronized acknowledgements into one and returns a status error code to the application at step or to the application plug in at step depending on whether the application initiated the message or whether the message is a reply message sent by the application plug in respectively.

At step the platform sends the mobile messaging message to the mobile user. At step the platform calls back to the engine to pass in a physical message id status code and status message asynchronously. The acknowledgements from this step and or step may be logged.

The pipeline tracks any errors via a REST endpoint similar to the other REST endpoints. This endpoint is capable of recording and logging errors such as unexpected SMS responses and providing timely reporting of the pipeline s functionality. The error configuration is also included in the API call keeping the pipeline robust and capable of supporting multiple REST endpoints simultaneously.

The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers server computers hand held or laptop devices tablet devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The invention may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures and so forth which perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in local and or remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing various aspects of the invention may include a general purpose computing device in the form of a computer . Components of the computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

The computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by the computer and includes both volatile and nonvolatile media and removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by the computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of the any of the above may also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media described above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers herein to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a tablet or electronic digitizer a microphone a keyboard and pointing device commonly referred to as mouse trackball or touch pad. Other input devices not shown in may include a joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . The monitor may also be integrated with a touch screen panel or the like. Note that the monitor and or touch screen panel can be physically coupled to a housing in which the computing device is incorporated such as in a tablet type personal computer. In addition computers such as the computing device may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface or the like.

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include one or more local area networks LAN and one or more wide area networks WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. A wireless networking component such as comprising an interface and antenna may be coupled through a suitable device such as an access point or peer computer to a WAN or LAN. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It may be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

An auxiliary subsystem e.g. for auxiliary display of content may be connected via the user interface to allow data such as program content system status and event notifications to be provided to the user even if the main portions of the computer system are in a low power state. The auxiliary subsystem may be connected to the modem and or network interface to allow communication between these systems while the main processing unit is in a low power state.

While the invention is susceptible to various modifications and alternative constructions certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood however that there is no intention to limit the invention to the specific forms disclosed but on the contrary the intention is to cover all modifications alternative constructions and equivalents falling within the spirit and scope of the invention.

