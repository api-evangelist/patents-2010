---

title: Automated callback reminder
abstract: A call reminder functionality is provided by an arrangement that is operable with a network-enabled communication device in which a reminder to return a phone call can be generated in an automated manner upon the occurrence of a call event. When the call event occurs, an option is displayed on a user interface (“UI”) on the device to create a link between the call and the user's schedule application. If the user selects the option, a callback task is added to the user's task list maintained by the schedule application, and a reminder to make the callback is generated and then displayed on the UI at a future time. The reminder includes pertinent call information and also includes a button that enables the user to place the callback through the UI (i.e., a “one-click call back”).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08855289&OS=08855289&RS=08855289
owner: Microsoft Corporation
number: 08855289
owner_city: Redmond
owner_country: US
publication_date: 20100119
---
Modern communication networks have provided users with a vast array of features and functions that make staying connected with friends families colleagues and others easy convenient and inexpensive. A wide variety of devices such as mobile phones smart phones personal computers PCs and other network enabled devices is available which let users surf the Web to access sources of information and entertainment send e mails and instant messages as well as communicate with calls to other users. Moreover as wireless infrastructure has broadened its reach and as devices become feature rich smaller and more portable users can be reached virtually at any time and at any place.

While most users appreciate the benefits of such heightened connectivity and accessibility the phone can ring at inconvenient times. For example the user may be in a meeting attending a show or sporting event driving a car or engaged in some other activity in which the user does not wish to be interrupted. But if the user chooses to not answer a call it can often be difficult to remember to return the call. And when the user does remember to make the callback it is not always convenient to access the relevant phone number to call. For example the user may have to manually browse through an incoming call log to find the caller and phone number to call back.

This Background is provided to introduce a brief context for the Summary and Detailed Description that follow. This Background is not intended to be an aid in determining the scope of the claimed subject matter nor be viewed as limiting the claimed subject matter to implementations that solve any or all of the disadvantages or problems presented above.

A call reminder functionality is provided by an arrangement that is operable with a network enabled communication device such as a mobile phone in which a reminder to return a call can be generated in an automated manner upon the occurrence of a call event such as an incoming call rejected call call waiting missed call a short call i.e. one that does not reach a set minimum duration and the like. When such a call event occurs an option is displayed on a user interface UI on the device to create a link between the call and the user s schedule that may be maintained for example by a schedule application.

If the user selects the option a callback task can be added to the user s task list i.e. to do list supported by the schedule application and a reminder to make the callback is set and displayed on the UI at a future time. For example the reminder can be provided at some predefined time interval such as 30 minutes later the next day etc. or at a free time slot in the user s schedule. The reminder includes pertinent call information for example the name of calling party phone number date time of the last incoming call and includes a button or similar control element that enables the user to place the callback through the UI i.e. a one click callback .

In various illustrative embodiments the call reminder functionality is provided by an application that can run as a thick client on the communication device or alternatively as a thin client that splits storage of the application code and execution between the device and a server that operates remotely from the device for example through implementation as a service on the network cloud. The call reminder application will expose a UI that enables the user to set preferences for example to set which types of call events will trigger the call reminder application set the number of rings before the application is launched specify the predefined time interval and the like and other default application behavior. The UI can also enable the user to work through various call handling options when the application is triggered upon the occurrence of a qualifying call event.

The call reminder application typically operates in the background using a listener that monitors call events. When a qualifying call event occurs the application is triggered and will fetch and store call information such as metadata e.g. phone number of caller date time of call and matching contact information e.g. caller s name nickname phone number association work mobile home etc. . A notification on the UI is displayed to give the user the option to add a callback task for that caller. If the user selects the option the call reminder application will call various functions at an API application programming interface exposed by the schedule application and pass the appropriate parameters to create a callback task and set a reminder.

In some embodiments the call reminder application can query the schedule application to automatically find an open slot in the user s schedule or a slot meeting other user specified criteria in which the callback reminder can be inserted. Alternatively the user can be given an option to manually browse the calendar to find a time slot of the user s choosing. In other embodiments the reminder will be set at some predefined time that can be set by default or through user interaction with the UI at the time of the notification. When the set time for the callback reminder is reached the application will display the reminder through the UI on the device and typically display the fetched call information as well. The call reminder application will also display a button or other control element to implement the one click callback feature when activated.

The call reminder application provides a rich feature set to the user that provides a convenient and helpful alternative to handle incoming rejected and missed calls. The user can stay organized and keep current with voice communications with a few clicks without having to manually look through call records to find needed information. In addition the ability of the call reminder application to automatically interface with others of the user s applications running on the communications device advantageously ensures that the user experience is seamless and the generated tasks and reminders are consistent with the user s schedule.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

In the drawings in which like reference numbers indicate the same element shows an illustrative communications environment in which users and callers may communicate using respective network enabled devices that are each operatively coupled to a communications network . The devices may include any of a variety of devices and platforms which support voice communications such as mobile phones smart phones PCs landline telephones or other mobile or fixed devices that are adapted for voice telephony over a network. In this particular exemplary embodiment the term user refers to a user of the present call reminder application who receives a phone call from a person making the call termed the caller. 

In one embodiment the present call reminder application is arranged to execute on a mobile device such as a mobile phone telephony capable personal digital assistant smartphone or other portable device that is capable of making or receiving calls collectively referred to hereafter as a mobile phone that is configured as a Microsoft Windows CE based device. However the principles of the present arrangement may also be adapted for use with other devices using other operating systems. For example such operating systems may include Symbian iPhone Mac Palm Blackberry Android and other Linux or Unix based operating systems. It is further noted that the term call as used herein is intended to refer to any of a variety of call types including voice calls video calls multimedia calls conference calls i.e. voice video multimedia calls among multiple parties messaging and other forms of communication that are typically conducted in real time or near real time.

The communications network that is used to facilitate communication among the users and callers may include portions of one or more network types as shown in including a mobile phone network mobile data network public switched telephone network and Internet . Therefore for example a given caller may call a given user using a conventional telephone where the call is carried over portions of both the public switched telephone network and mobile phone network . Alternatively another caller may call the user using a PC equipped with VoIP Voice over Internet Protocol capability where the call is carried over the Internet and mobile phone network . Indeed various combinations of network types or single networks can be utilized as may be necessary to transport a given phone call.

A service provider is also supported in the communications environment . The service provider may be utilized in usage scenarios in which portions of the present call reminder application functionality are distributed to one or more external remotely located servers. Such usage scenarios are described in more detail below in the text accompanying .

Supporting the applications and in the architecture are an operating system and a hardware layer . In this exemplary embodiment the operating system is particularly adapted to operate on a resource limited device. The hardware layer provides an abstraction of the hardware implemented on the mobile phone such as computer or machine readable storage media processor etc. to the operating system and applications and above it. A UI is also provided by the architecture to support user interactivity and facilitate an effective user experience and will typically be embodied as a graphical user interface.

Portable platforms such as mobile phones are commonly equipped with synchronization capability in order to provide a process for synchronizing data between for example a Windows based PC and the portable platform which may be Windows CE based as described above . Using timestamps and user preferences the synchronization process tracks the data changes on both devices and then transfers the appropriate data so that each machine has the most recent versions. Outdated or unwanted data is typically discarded. Such synchronization capability is often convenient given that a user will typically use one device at a time but wants to keep both devices up to date with data files contacts tasks reminders schedules and the like. For example a user may keep task lists and contact information e.g. addresses phone numbers and the like of friends colleagues family etc. on both his or her mobile phone and PC and wants to make sure that changes made to a task list using the mobile phone are reflected on the PC.

As shown in the mobile phone is coupled to the user s PC using a cable connection employing a serial or USB Universal Serial Bus protocol. Connectivity may also be implemented using a wireless connection e.g. wireless Ethernet or infrared e.g. IrDA Infrared Data Association . Typically a data synchronization application which has components that run on each device is utilized to synchronize phone data with PC data as shown.

As shown in the functional components in this particular exemplary embodiment are implemented at least in part by computer executable code which is written to one or more storage media that are disposed on the mobile phone and which execute via one or more processors that are included in the phone s hardware. In this regard accordingly the arrangement shown is considered as a thick client as the code implemented by the functional components executes substantially in its entirety on the mobile phone in order to provide the as designed user experience and application behavior. In alternative implementations the functional components are configured in a distributed computing arrangement and the code on the mobile phone will be executed from a thin client. This alternative is shown in and described in the portion of this specification below that accompanies those drawings.

As shown the call reminder application supports a user experience by accommodating user preferences providing call handling options when a call event occurs launching a reminder with the one click callback feature at an appropriate time and providing other user experiences as may be required to meet a given usage scenario . The user preferences and call handling options are described in more detail below in the descriptions of .

The call reminder application may also interact with other applications which execute on the mobile phone . In this particular exemplary embodiment the call reminder application typically interacts with the schedule application in order to create tasks and set reminders. However interactions with other applications may also be utilized in a similar manner as described here. In many usage scenarios the call reminder application will implement queries such as querying a contact list to identify a user s contact that is associated with a call event querying a calendar functionality to find open timeslots in the user schedule creating tasks in the user s task list setting and updating reminders and supporting various other interactions as may be needed to support the features described here.

The call reminder application will generally apply business logic and rules to implement the desired behavior of the application as indicated by reference number . Application of the business logic and rules will typically implement a variety of routines processes and workflows in response to the occurrence of a call event as monitored by the listener to support the user experiences described above.

Various data handling functions are also supported by the call reminder application including receiving call events and associated information such as call metadata . The call reminder application will generally store call data either on a temporary or persistent basis as well as user preferences and usage histories in some cases. Other data handling may also be performed as indicated by reference number to meet the needs of a given usage scenario.

The user can often be expected to set preferences when first setting up the call reminder application in order to establish how the application will behave by default i.e. during subsequent instances of application launch . However the call reminder application is typically configured to enable preferences to be changed at any time. As shown in the user can select the call events that will launch the call reminder application upon their occurrence as indicated by reference number . Call events can include for example an incoming call to the mobile phone an incoming call while the phone is in use i.e. call waiting a call that is rejected by the user a missed call a call in which the user turns the ringer off e.g. by pressing a silent or mute button and the like.

In addition in some implementations a call that is answered by a user but is of short duration where short can be an arbitrary value or be set by the user in some cases may also be considered a call event that will trigger a callback reminder. For example a call lasting seconds or less may presumably be short enough to warrant additional conversation at a later time i.e. the user may answer the call to say I can t talk right now but I ll call you back later . In such implementations the user may optionally be given an option to set the minimum call duration which will trigger the launch of the call reminder application .

The user can select the callback reminder to be set to a predefined time . If this option is chosen then typically the user may be given an ability to set the predefined time by picking from a number of set menu choices or setting a specific value. For example the user may set the callback reminder to be launched at some number of minutes hours days etc. after the occurrence of a call event.

The user may alternatively set the callback reminder to be set to a free slot in the user s schedule . In some instances the default application behavior may be that the callback reminder is inserted into the first available free slot in the user s schedule. In other cases a user may be given options to specify slot selection criteria . For example the callback reminder might be inserted into the first available slot that is after a certain time i.e. the callback reminder will be launched only in the evening after normal work hours or on certain days e.g. on the weekend . In some implementations it may be desirable to enable the user to assign priorities to the generated tasks and or callback reminders and the slot selection can be based on prioritization.

The user may typically be enabled to set the number of rings that occur with an incoming call before the call reminder application is launched . Setting a larger number of rings will mean that the user will have more time to deal with an incoming call in a conventional manner i.e. answer the call reject the call etc. before the application is launched and the user is given the option to generate a task and callback reminder. Other user preferences and default application behavior settings can also be exposed to the user as may be needed to meet the requirements of a given usage scenario.

Accordingly the user can be given options to set the callback reminder to launch at a predefined time interval after the call event as indicated by reference number and specify the time interval i.e. number of minutes hours days etc. . Alternatively the user can specify that the callback reminder be inserted into a free slot in the user s schedule . In this case the user may be enabled with an ability to browse his or her calendar from the schedule application to locate an appropriate slot.

In some implementations it may be desirable to expose options to the user upon the occurrence of a qualifying call event to set a priority to a task or callback reminder or attach some other attribute . For example a callback reminder or task can be prioritized over other reminders and tasks on the user s schedule or be given lower priority so that returning phone calls is the last thing the user needs to deal with at the end of the day.

In a similar manner as with the callback reminder the call reminder application can be configured so that a user may add a callback task in his or her task list as a call handling option that is exposed upon the occurrence of a qualifying call event . In addition the user may be afforded with an opportunity to add other information or notes to a callback task . For example the user may want to annotate a callback task with a note that indicates the topic of the call or with other pertinent information e.g. call Bill to talk about upcoming class reunion . Other call handling options can also be exposed to the user as may be needed to meet the requirements of a given usage scenario.

If a callback task does not already exist then control passes to block or block where as indicated by the dashed lines typically one or the other of the processes will be implemented but not both . At block the call reminder application queries the schedule application to find an available time slot to set the callback reminder. At block the call reminder application will schedule a callback reminder to occur in a predefined time. At block the call reminder application creates a new task and sets a reminder either or both of which can be added to the user s task list and schedule that are maintained by the schedule application . Workflow control is then returned back to block .

The user is provided with the typical call handling options to either answer an incoming call or reject it by interfacing with the respective Answer or Reject buttons and which are displayed on the UI. Depending on the hardware configuration of the mobile phone buttons and can be implemented using touch sensitive graphic icons soft keys on the phone or other various conventional controls.

In accordance with the principles of the present arrangement shows an exemplary screenshot of the UI when a prompt is displayed upon launch of the call reminder application that is triggered by the qualifying call event of the incoming call . The prompt asks the user if a callback task and associated reminder should be generated for this caller. As described above in one embodiment the call reminder application can be launched upon the completion of a set number of rings associated with the incoming call . When the prompt is displayed buttons and are also displayed to enable the user to implement the callback call handling to set a task and reminder or not set the task and reminder as desired.

The callback reminder will include relevant call data that is fetched and displayed on the UI by the call reminder application . In this exemplary embodiment the call data includes the number of the caller the identity of the caller and the date and time of the last call . Also included in the callback reminder is a callback prompt that enables the user to place the callback or not place the callback with the click of the appropriate button or .

It is noted that various implementation details will be evident in the functional components when utilized in a distributed computing environment and as a result may vary to some degree from their counterparts used in the thin client application described above. As shown typically only the user experience layer will be resident and associated code will execute locally on the mobile phone . The business logic layer and data layer will be resident on the service provider servers and the associated code will execute in the cloud.

The service provider will relay the call to the user and then listen for call events . Such monitoring can typically be performed using out of band OOB signaling that is implemented for example through the mobile data network. Upon the occurrence of a qualifying call event the service provider will send a notification to the user including a prompt e.g. prompt or in to generate a callback reminder and task. The user s interactions with the UI provided by the user experience layer are captured as UI events and sent to the service provider again typically using OOB signaling. When appropriate the service provider can establish the requisite link to the schedule application and responsively initiate callback reminders and associated tasks which are then sent to the mobile phone .

The service provider may optionally send call data such as call event history call logs and the like and callback reminders and tasks to the user s PC using an Internet connection for example. Such optional functionality advantageously ensures that reminders and tasks are replicated across a number of platforms that are used by the user without requiring an affirmative act of synchronization as described above in the text accompanying .

It is noted that for the sake of clarity and ease of illustration in the description above data applications and other executable application components such as operating systems are shown as discrete blocks boxes or other elements although it is recognized and emphasized that such applications and components may reside at various times in different storage memory or processing components of any hardware host used and are executed by one or more processors in such host hardware.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

