---

title: Frameworks for providing backup functionalities to different applications
abstract: Example embodiments provide various techniques for providing a backup functionality to a particular application. In one example, a plug-in module is selected for activation from a number of different plug-in modules. This selected plug-in module is adapted to interface with the particular application. It should be noted that each plug-in module is adapted to interface with a different application. The particular application is quiesced using the selected plug-in module. After the application has been quiesced, the backup functionality is initiated.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08635189&OS=08635189&RS=08635189
owner: NetApp, Inc.
number: 08635189
owner_city: Sunnyvale
owner_country: US
publication_date: 20100422
---
The present disclosure relates generally to storage systems. In an embodiment the disclosure relates to frameworks for providing backup functionalities to different applications.

There are many specialized data management systems that provide various data management functionalities such as the automation of data backup and restoration of data. Typically each of these data management systems is closely integrated with a particular application that is supported by the data management system. For example a data management system that is adapted to manage data used by a messaging application can only work with this particular messaging application and not other applications.

However it should be appreciated that the data management systems may not support many applications especially applications that are not in popular use. To provide data management functionalities to such unsupported applications users create customized scripts. Typically there is no uniformity between scripts created by different users for the same functionality and accordingly many of these customized scripts may not be optimized for example to execute quickly or to use fewer resources. Furthermore many of these customized scripts need to be recreated because they are normally not communicated between different users. Therefore the time spent to recreate scripts that may have already been created can result in a waste of resources.

Additionally the customized scripts may be stored in different storage locations. For example a customized script may be located on one user s computer while another customized script may be located on another user s computer. The storage of the scripts in different locations often makes the scripts difficult to access and share between users.

Generally examples of frameworks are provided that can provide backup functionalities to different applications. In particular such frameworks can incorporate various plug in modules that are adapted to interface with different applications. For example a framework can include a plug in module that is adapted to interface with a particular database application. The same framework can also include a different plug in module that is adapted to interface with for example a messaging application.

To provide a backup functionality to a particular application a system with this framework simply selects an appropriate plug in module adapted to interface with this particular application. For example before a backup can be created the application is quiesced to place the application in a state that is ready to accept the backing up of the data. Accordingly as part of the interface the selected plug in module has scripts that may be executed to quiesce the particular application. After the particular application is quiesced using this selected plug in module the backing up of the data or other backup functionalities may then be initiated.

Given that this framework can incorporate different plug in modules that are adapted to interface with different applications a single system with this framework may for example interface a number of different existing applications and also has the flexibility to accommodate new applications if the appropriate plug in modules are provided. As such a single system may provide backup functionalities to different applications. The plug in modules may also for example provide a uniform standard for the scripts because the same plug in module or scripts in included in the module may be used by different users or systems to interface with a particular application.

The description that follows includes illustrative systems methods techniques instruction sequences and computing machine program products that embody the present invention. In the following description for purposes of explanation numerous specific details are set forth in order to provide an understanding of various embodiments of the inventive subject matter. It will be evident however to one skilled in the art that embodiments of the inventive subject matter may be practiced without these specific details. In general well known instruction instances protocols structures and techniques have not been shown in detail.

In one example the application server executes or hosts one or more applications . As used herein an application refers to a program or piece of software designed to perform a specific function. Examples of applications include database management systems message servers collaboration applications process management applications document management applications and other applications. In I O operations applications hosted on the application server transmit read and write requests to for example the storage server . The data communicated in the I O operations is transferred between the storage server and the application server by a computer network communication link which also connects the application server to the clients . It should be appreciated that a variety of computer network protocols are used to transfer data between the servers and and the clients over the communication link . These protocols include for example Fibre Channel Protocol FCP Ethernet and Internet Small Computer System Interface Protocol iSCSI .

The application server may also be configured to execute or host a backup integration engine module . In general the backup integration engine module is included in a framework that provides various backup functionalities to different applications. A backup functionality refers to any suitable functionality that results in or operates on a data backup which refers to a copy of the data. An example of a backup functionality is a backing up of data. Another example of a backup functionality includes the restoration of a data backup. As used herein a backing up of or to backup data generally refers to the process of creating a copy of the data or a data backup . As explained in more detail below the framework is adapted to incorporate or interact with various plug in modules to interface with each of the applications .

The storage server is particularly configured to perform I O operations between the servers and and the data storage devices and to perform various data management functions on the data storage devices among other operations. The mass storage adapter is connected to a data bus and the mass storage adapter receives the I O commands from the storage server . In response the mass storage adapter causes the data storage devices to act and respond accordingly either by executing a read command in which data previously written or stored on the data storage devices by the applications is read and supplied to the storage server or by executing a write command in which data from the applications is written to or stored on the data storage devices .

It should be noted that groups of data storage devices are connected by a separate bus to the mass storage adapter . Each data storage device includes a controller that causes the data storage device to perform in accordance with normal data storage functionalities and to perform I O commands delivered to it by the mass storage adapter . The data storage devices depicted in are embodied in separate devices from the servers and and the clients . However the data storage devices may alternatively be embodied within the storage server application server and or each of the clients .

In the embodiment depicted in the processing system and other processing system execute an operating system and a network storage operating system respectively. The operating system manages various data hardware resources and software processes executed on the processing system . Some processes and data include applications plug in modules a profile a backup integration engine module and a graphic user interface GUI module . Similarly the network storage operating system also manages various data hardware resources and software processes executed on the processing system . However the network storage operating system is specially optimized for storage functions such as performing I O commands and providing backup functionalities. Some of these software processes managed by the network storage operating system include backup applications designed to provide backup functionalities.

The applications access different data which as discussed above may be stored at different locations from the processing system . In particular each application or has or operates on its own set of data. The data may include structured data e.g. data stored in database tables and arrays and unstructured data e.g. an image file a binary file and a natural language text file .

Given that each application or functions differently embodiments of the present invention provide frameworks that can incorporate or interact with various plug in modules . A plug in module such as plug in module or refers to a program that interfaces with a host application e.g. backup integration engine module to extend modify and or enhance the capabilities or functionalities of the host application. The plug in modules effectively depend on the host application and may not function independently without the host application. Each plug in module or is particularly adapted or configured to interface with one or more applications and .

The backup integration engine module is adapted to interface with all plug in modules and further adapted to select or load the appropriate plug in module and or to interface with a particular application or . Additionally the backup integration engine module may also provide backup functionalities. With the plug in modules being able to interface with different applications such interface enables backing up of various data accessed by the different applications . As explained in more detail below the profile includes various settings such as the selection of the appropriate plug in module and or . The GUI module provides an interface to input various parameters and scripts into the profile as also described in more detail below.

Still referring to to provide the backup functionalities the backup integration engine module may select or load one or more backup applications which are managed by the network storage operating system that provide various backup functionalities. Examples of backup applications will be described in more detail below. The backup integration engine module can communicate with each of the backup applications through an application programming interface API . In one example the API may provide for marshalling of API name and input parameters using XML eXtensible markup language with input parameters being typed and the contents of the XML being independent of the programming language and architecture on both client and server sides of a transaction.

It should be appreciated that in other embodiments the system depicted in may include fewer more or different modules applications and processing systems apart from those shown in . For example in an alternative embodiment the backup integration engine module the plug in modules and backup applications may be executed or hosted on a single processing system such as the storage server processing system depicted in . In yet another embodiment the GUI module may be excluded because the various data included in a profile may be inputted using a text editor rather than through a GUI as provided by the GUI module .

After a particular plug in module is selected for activation the application is quiesced using the plug in module at . As used herein quiescing an application is to place the application in a state ready to accept a backup functionality. In particular an application is quiesced when it is placed in a special mode that allows the backup functionality to be implemented. It should be appreciated that the state for one application may be different for another application. As a result quiescing an application may be unique to each application. Accordingly there is a variety of different techniques to quiesce an application. In one example of quiescing a database management system a connection is first made to the database management system. Thereafter the database management system may be instructed to place all its database tables which store the data into read only mode where data can be read but not written to the database tables. This placement of the database tables in read only mode may for example prevent data corruption during a backup process. Other examples of quiescing the application include preventing users from connecting to the application locking all users out of a database table or other structured data disallowing new resources from being made available preventing any modification of data disabling the application itself e.g. shutdown application and place application in sleep mode allowing current active transactions to complete and then flushing modified buffers from cache to another database table reinitiating or restarting an application modifying a file system and other operations.

After the application has been quiesced the backup functionality is initiated at . As discussed above one or more backup applications may be selected to provide this backup functionality. Accordingly in one embodiment the initiation of the backup functionality involves the execution of one or more of these backup applications as explained in more detail below. In an alternate embodiment the backup integration engine module itself or even the plug in modules included in the framework may directly provide this backup functionality.

A profile is also accessed at . This profile may for example be a control file e.g. a text file that can be used to customize the behavior of a backup integration engine module and or the backup process. This profile includes various parameters commands instructions and or other data. Here the profile specifies activation of at least one of the plug in modules to interface with a particular application where a backup functionality is to be provided to this particular application. The application is then quiesced at using the plug in application and thereafter the backup functionality is initiated at after the application has been quiesced.

For example before a backing up of data is initiated one or more applications are quiesced. In this example each plug in module or is adapted to interface with a particular application or . In particular the DBMS plug in module is adapted to interface with the DBMS . The message server plug in module is adapted to interface with the email message server . The document management plug in module is adapted to interface with the document management application .

Each plug in module or includes one or more scripts that quiesce one of the applications or . As used herein a script refers to a program with one or more instructions commands parameters and or other data that control one or more applications . A script may for example refer to a single command a single instruction a set of commands or a set of instructions. To quiesce one application or the backup integration engine module executes a particular script included in the appropriate plug in module or that when executed quiesces an application or . For example before initiating a backing up of data associated with the DBMS the backup integration engine module selects activation of the DBMS plug in module and quiesces the DBMS by executing the script included in the DBMS module . In another example before initiating a backing up of data associated with the email message server the backup integration engine module selects activation of the message server plug in module and quiesces the email message server by executing the script included in the message server plug in module .

In one embodiment the selection of the particular plug in module or is specified in the profile . Here the profile may for example may be automatically read by the backup integration engine module that can be used to customize the behavior of the backup integration engine module and or the backup process. The user may input or specify data in the profile through the use of a GUI generated by the GUI module . An example of this GUI may include checkboxes text boxes buttons or other input mechanisms to accept the input of data included in the profile . In addition to instructions or other data specifying the selection of an appropriate plug in module or to interface with one or more applications the profile may also include other instructions commands parameters and or other data to define other functionalities as explained in more detail below.

After a particular application or is quiesced the backup integration engine module initiates a backing up of the data associated with the particular application or . It should be appreciated that there are a variety of different types of backup such as a snapshot a clone and a mirror and the backup integration engine module can select one or more backup applications to create these different types of backup or provide other backup functionalities.

For example the snapshot backup application can take a snapshot of the data associated with one or more applications . A snapshot is an instant copy within a file system. Such a snapshot can practically for example copy large amounts of data in a few seconds. More particularly a snapshot is a space conservative point in time and read only image of data accessible by name that provides a consistent image of that data such as a storage system at some previous time. A snapshot is a point in time representation of a storage element such as an active file system file or database stored on a persistent storage device and having a name or other identifier that distinguishes it from other snapshots taken at other points in time. In a write anywhere file system a snapshot is an active file system image that contains complete information about the file system including all suitable metadata.

The cloning backup application creates a clone of the data associated with one or more applications . A clone is a modifiable copy created from a snapshot. It should be appreciated that since the modifiable copy is created from a snapshot the modifiable copy may therefore a near instantaneous space efficient and in an example embodiment a writable clone of the snapshot which shares the same physical blocks with the baseline file system. When the snapshot and the modifiable copy diverge e.g. due to continuing updates in the production database or development changes to a modifiable copy of the database the divergent blocks are separately stored. Since the creation of a modifiable copy from a snapshot is near instantaneous such replication technique may result in minimal downtime of the accessibility of the data.

The mirror backup application can create a mirror of the data based on the snapshot. A mirror is an exact copy of a data set. Here the data is mirrored onto the secondary storage system to ensure for example that the primary copy is kept up to date with the data. Mirroring can be synchronous where for example a block of the data written to the primary storage system is also immediately transmitted to the secondary storage system. In asynchronous mirroring the block of data written to the primary storage system is transmitted to the secondary storage system at a later time.

Still referring to it should be appreciated that the backup integration engine module may execute multiple backup applications either simultaneously or one after another. For example as discussed above both the clone and mirror of data are based on a snapshot. Thus to clone the data the backup integration engine module executes the snapshot backup application to take a snapshot of the data. Afterwards the backup integration engine module executes the cloning backup application to create a clone of the data based on the snapshot. In another example after the execution of the snapshot backup application the backup integration engine module may execute the mirroring backup application to create a mirror of the data on a secondary storage system based on the snapshot of the data.

By being able to interface with different plug in modules the framework can provide backup functionalities to different applications . As a result the framework can for example accommodate new or additional applications different from the applications depicted in with the addition of new plug in modules that are adapted to interface with these new or additional applications.

The first script from the selected plug in module is then executed at to quiesce the application and afterwards one or more backup applications may be executed at to backup the data. It should be noted that in one embodiment the profile may define or specify a particular backup application to execute. In an alternate embodiment the selection of the backup application may be predefined by for example the backup integration engine module.

After the backing up is completed the application may be unquiesced using the same plug in module. The application may be unquiesced such that for example it can modify the data or add new data without risking data corruption from a backup operation. To unquiesce this application the second script which unquiesces the application may be executed at after the completion of the backing up of data.

Additionally the portions and define the various parameters for each different plug in module. For example portion defines the various settings for a plug in module that is adapted to interface with an ORACLE database management system. Portion defines the various settings for a plug in module that is adapted to interface with a MYSQL database management system.

The profile may also define additional commands or instructions that may be executed at any suitable stage during the backup process. For example portion of the profile includes a set of commands or pre commands that is executed before initiation of the backup process e.g. before execution of the backup applications . Portion of the profile includes another set of commands or post commands that is executed after a completion of the backup process. The profile may also include additional commands not shown that are executed during the backup process e.g. executed in parallel with the execution of the backup applications . It should be appreciated that these commands pre commands post commands or other commands may for example be independent of the plug in modules and or backup applications. In other words the profile may include commands and instructions that are not included in the plug in modules and or backup applications. In view of the various parameters instructions commands and or other data that may be included in the profile the profile may in one example allow a user to customize and define a unique backup process.

The machine is capable of executing a set of instructions sequential or otherwise that specify actions to be taken by that machine. Further while only a single machine is illustrated the term machine shall also be taken to include any collection of machines that individually or jointly execute a set or multiple sets of instructions to perform any one or more of the methodologies discussed herein.

The example of the processing system includes a processor e.g. a central processing unit CPU a graphics processing unit GPU or both a main memory e.g. random access memory and static memory e.g. static random access memory which communicate with each other via bus . The processing system may further include video display unit e.g. a plasma display a liquid crystal display LCD or a cathode ray tube CRT . The processing system also includes an alphanumeric input device e.g. a keyboard a user interface UI navigation device e.g. a mouse a disk drive unit a signal generation device e.g. a speaker and a network interface device .

The disk drive unit a type of non volatile memory storage includes a machine readable medium on which is stored one or more sets of data structures and instructions e.g. software embodying or utilized by any one or more of the methodologies or functions described herein. The data structures and instructions may also reside completely or at least partially within the main memory and or within the processor during execution thereof by processing system with the main memory and processor also constituting machine readable tangible media.

The data structures and instructions may further be transmitted or received over a computer network via network interface device utilizing any one of a number of well known transfer protocols e.g. HyperText Transfer Protocol HTTP .

Certain embodiments are described herein as including logic or a number of components modules or mechanisms. Modules may constitute either software modules e.g. code embodied on a machine readable medium or in a transmission signal or hardware modules. A hardware module is a tangible unit capable of performing certain operations and may be configured or arranged in a certain manner. In example embodiments one or more computer systems e.g. the processing system or one or more hardware modules of a computer system e.g. a processor or a group of processors may be configured by software e.g. an application or application portion as a hardware module that operates to perform certain operations as described herein.

In various embodiments a hardware module may be implemented mechanically or electronically. For example a hardware module may comprise dedicated circuitry or logic that is permanently configured e.g. as a special purpose processor such as a field programmable gate array FPGA or an application specific integrated circuit ASIC to perform certain operations. A hardware module may also comprise programmable logic or circuitry e.g. as encompassed within a general purpose processor or other programmable processor that is temporarily configured by software to perform certain operations. It will be appreciated that the decision to implement a hardware module mechanically in dedicated and permanently configured circuitry or in temporarily configured circuitry e.g. configured by software may be driven by cost and time considerations.

Accordingly the term hardware module should be understood to encompass a tangible entity be that an entity that is physically constructed permanently configured e.g. hardwired or temporarily configured e.g. programmed to operate in a certain manner and or to perform certain operations described herein. Considering embodiments in which hardware modules are temporarily configured e.g. programmed each of the hardware modules need not be configured or instantiated at any one instance in time. For example where the hardware modules comprise a general purpose processor configured using software the general purpose processor may be configured as respective different hardware modules at different times. Software may accordingly configure a processor for example to constitute a particular hardware module at one instance of time and to constitute a different hardware module at a different instance of time.

Modules can provide information to and receive information from other modules. For example the described modules may be regarded as being communicatively coupled. Where multiples of such hardware modules exist contemporaneously communications may be achieved through signal transmission e.g. over appropriate circuits and buses that connect the modules. In embodiments in which multiple modules are configured or instantiated at different times communications between such modules may be achieved for example through the storage and retrieval of information in memory structures to which the multiple modules have access. For example one module may perform an operation and store the output of that operation in a memory device to which it is communicatively coupled. A further module may then at a later time access the memory device to retrieve and process the stored output. Modules may also initiate communications with input or output devices and can operate on a resource e.g. a collection of information .

The various operations of example methods described herein may be performed at least partially by one or more processors that are temporarily configured e.g. by software or permanently configured to perform the relevant operations. Whether temporarily or permanently configured such processors may constitute processor implemented modules that operate to perform one or more operations or functions. The modules referred to herein may in some example embodiments comprise processor implemented modules.

Similarly the methods described herein may be at least partially processor implemented. For example at least some of the operations of a method may be performed by one or more processors or processor implemented modules. The performance of certain of the operations may be distributed among the one or more processors not only residing within a single machine but deployed across a number of machines. In some example embodiments the processors may be located in a single location e.g. within a home environment an office environment or as a server farm while in other embodiments the processors may be distributed across a number of locations.

While the embodiment s is are described with reference to various implementations and exploitations it will be understood that these embodiments are illustrative and that the scope of the embodiment s is not limited to them. In general techniques for creating backups of data may be implemented with facilities consistent with any hardware system or hardware systems defined herein. Many variations modifications additions and improvements are possible.

Plural instances may be provided for components operations or structures described herein as a single instance. Finally boundaries between various components operations and data stores are somewhat arbitrary and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of the embodiment s . In general structures and functionality presented as separate components in the exemplary configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components. These and other variations modifications additions and improvements fall within the scope of the embodiment s .

