---

title: System and method for seamlessly bringing external services into instant messaging session
abstract: The invention provides a framework that allows a number of software application agents to be stacked on top of an instant messenger application. Each of the software application agents establishes a connection with a third-party Web service on the Internet or a local application in the user's computer. The user can share one or more third-party services or applications with other user(s) in an instant messaging session through the application agents.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08103734&OS=08103734&RS=08103734
owner: AOL Inc.
number: 08103734
owner_city: Dulles
owner_country: US
publication_date: 20101208
---
This application is continuation of U.S. patent application Ser. No. 10 680 032 filed Oct. 6 2003 now U.S. Pat. No. 7 870 199 the entirety of which is incorporated herein by this reference thereto.

This invention generally relates to Internet based messaging system. More particularly the invention relates to a system and method for seamlessly bringing third party Web services or local applications into an instant messaging session between two or more online end users.

This invention aims to extend the existing messaging frameworks by external resources such as a third party Web service or a local application into an instant messaging environment using intermediary applications.

Traditionally a messaging system includes a messaging application programming interface MAPI which refers to a messaging architecture and a client interface component for applications such as e mail scheduling calendaring and document management.

As a messaging architecture MAPI provides a consistent interface for multiple application programs to interact with multiple messaging systems across a variety of hardware platforms.

MAPI supports various client applications that demonstrate different levels of messaging support e.g. formatting text for a single message with a variety of fonts and present to users a customized view of messages that have been filtered sorted or preprocessed.

One example of the messaging systems is NetMeeting developed by Microsoft which enables users to communicate in numerous ways such as chatting telephoning sharing a whiteboard for drawing and sharing an application program. The program sharing feature allows meeting participants to view and work on files simultaneously. For example a user may have a Microsoft Excel document that several people need to work on. The user may open the document on his computer and share it with others participants. Other participants can provide their comments directly in the document. Only the person who has opened the document is required to have the program on his computer. Other participants can work on the document without having the program. Only one person however can be in control of a shared program at a time.

To share a program the user clicks the Share Program button and then in the Sharing dialog box clicks the name of the program that the user wants to share. Finally the user clicks Share . If the users share a Windows Explorer window such as My Computer Control Panel or a folder on his computer he will be sharing all Explorer windows he has opened. Also once he has shared such a window every program he starts while he is still in the meeting session is shared with the other participants automatically.

To allow control of a shared program the user just clicks Allow Control button in the Sharing dialog box then in the main NetMeeting window right clicks the name of a person he wants to work in the program and then clicks Grant Control .

To work in a program shared by someone else the user clicks Request Control on the Control menu of the shared program window. Only participants who have NetMeeting installed can work in a shared program. The person who shared the program must click Allow Control in the Sharing dialog box before he can click Request Control . When the user clicks Request Control the person who shared the program receives a confirmation message and must click Accept before the user can work in the shared program. If a document is created during collaboration only the person who shared the program can distribute the document.

Note that in the framework of NetMeeting a user can neither bring a third party Web service into a session without leaving the session and spending a number of navigating steps nor bring an instant messaging session into a local application which is being used by one or both of the users in the session.

Another example is MSN Messenger which is an instant messenger application similar to NetMeeting. The application provides a GUI from which users can enter and post textual messages. The GUI includes a number of functional links such as invite someone to the conversation send a file or photo send e mail browse the Web together ask for remote assistance start application sharing start whiteboard make a phone call etc. In the framework of MSN Messenger however a user can neither bring a third party Web service into a session without leaving the session and spending a number of navigating steps nor bring an instant messaging session into a local application which is being used by one or both of the users in the instant messaging session.

Another example is Yahoo Messenger which is an instant messenger application associated with Yahoo s Internet Services. Similar to MSN Messenger Yahoo Messenger provides a GUI from which the users can enter and post textual messages. The GUI includes a number of functional links such as send a file invite a friend to see Webcam invite a friend to enable voice invite a friend to a multi user conference and select an IMVironment etc.

Yahoo Messenger s IMVrionment feature brings online photo sharing experience into the instant messaging session by entirely loading a graphic content into the communication window. For example when two users are in an instant messaging session if the first user selects a photo sharing IMVrionment the environment on the second user is also affected and modified based on the first user s action. The major problem in Yahoo Messenger version 5.0 is that it is vulnerable to a denial of service attack caused by a buffer overflow in the IMvironment field of the Yahoo protocol. By sending a message containing an overly large IMvironment field using a malicious Yahoo Messenger client a remote attacker could overflow a buffer and cause the recipient s Messenger client to crash.

Yet another example is AOL s IM and Chat which uses a similar GUI including a message entry box and message display box. The GUI also includes a music share link which takes the user to audio or audio video programs. To share a music program the user clicks on the icon of the music share . The user is then returned a pop up screen with various options. After the user clicks on an icon or title representative of a music program a hyperlink enters the display box automatically. The selected program is then launched in the computer of the user who clicks the link.

Existing instant messaging client applications are primarily used for exchanging textual messages and are monetized by displaying ads that add no real value to users experience. Although some of them allow users to share Web content in a limited sense none of them adopts a framework facilitated with easy to use brokerage to bring external resources such as a third party Web service or a local application into an instant messaging session or even bring the instant session into the local application which is being used.

What is desired is a framework in which a third party service on the Internet can be seamlessly incorporated into an instant messenger environment without necessarily loading the entire application interface of the third party service so that a user can share the chosen resource with another user during an instant messaging session.

What is further desired is that the framework enables the user to seamless bring a local application into the instant messaging session or even bring the instant messaging session into the local application.

The invention provides a rich experience instant messaging IM framework that allows a number of software agents called IMLets to be stacked on top of an instant messenger application. Each of the software agents establishes a connection with a specific third party service on the Internet. The end users of the IM session can share one or more third party services through the agents without need of leaving the session. In other words the users can use the third party services in the IM session and share the results or collaborate with the facilities offered by the services represented by the software agents.

In one preferred embodiment of the invention the rich experience framework includes a graphical user interface which has a window for registration and activation of the software agents. The graphical user interface can be either attached to or detached from the traditional instant messenger interface. Registration of a software agent makes it immediately stacked on the user s instant messenger application environment and thus makes a third party service represented by the agent immediately available for the user. The user chooses one or more software agents for registration from a variety of options. A list of the options is frequently updated by the IM service provider. The user may change his registrations from time to time.

Activation of a software agent makes the third party Web service represented by the agent immediately accessible in an IM session. The graphical user interface provides a list of the user registered software agents. The user can activate any of them by one or more mouse clicks or simply by dragging it to the communication window. When the software agent is activated the users can directly share the agent s usage results. For example the user may activate a software agent associated with a third party instant translation service which enables the users to communicate using different languages without a need to load the third party service application into the users computers. For another example the user may invite another user to watch a movie by inserting a movie element provided by an online movie service. Once the software agent is activated the users can share the selected online service in the session. The data exchange between the users and the selected online service is supported by Web service interfaces such as SOAP XML HTTP and the related protocols.

A software agent can also represent a local application in the user s computer. With assistance of the software agent the users can not only share the application in an IM session but can communicate to each other within the application as well.

In another preferred embodiment the user can easily associate a visual cue such as an icon or its alias of a software agent with the screen name of a certain contact in the user s friend list or buddy list. Whenever the user and the contact meet in an IM session the visual cue enters the IM environment with the contact s screen name. The user may simply for example click on the visual cue associated with the contact s screen name and the service represented by the software agent is instantly brought into the IM session. A software agent s icon and its alias may appear in many different places. For example it appears in the list of registered agents or the list of unregistered agents. It can also be spatially associated with the screen name of a contact in the contact list. When several different agents icons or aliases are associated with one contact the icons or aliases can be arranged in a sequence determined by the user s prior use with the contact or by the user s frequency of use with the contact of the third party service represented by the application agent. When the contact s screen name appears in the instant messenger application s communication window the associated icons or aliases come with the screen name. In this case the user may activate the application agent by clicking the icon or alias. The contact may invite the user to activate the application agent if the contact himself has not registered the software agent.

The invention provides an application program interface API system that allows a number of software agents to be stacked on top of an instant messaging IM application. Each of the software agents can establish a connection between the local resources in the user s computer and a remote distributed third party service on the Internet. The users can share one or more third party services through the software agents in an IM session.

An IMLet can also act as the representation of a local application exposed to the user s IM session. In this case the users can collaborate by exchanging materials and composition resources that are produced in using the local application in the IM session. For example via the IMLet the users can collaborate in creating updating and publishing Web content to any HTML Web site. When the IMLet is activated the represented local application can access the user s IM session to facilitate communication with the both ends. For another example when User A is using a word processor application he might want to communicate with User B via the word processing application such as copying and pasting the paragraph to User B s word processor. In this situation assume that User A is logged on the IM and the IMLet for the word processor is activated User A can gain new menu items on the word processor interface which allows User A to share objects with User B.

In various deployments such as these illustrated hereafter an external application i.e. a third party service on the Internet or a local application in the user s computing device can be represented by more than one IMLets. In that case one IMLet can act as the agent for a specific function of the external application. For example when a multi function IM bot is involved one IMLet can be a representative of the IM bot s auto translation function another IMLet can be a representative of its Web search function yet another can be a representative of its shopping function. Similarly in a multi lingual translation service each language pair e.g. English Portuguese Spanish Russian etc. can be represented by a single IMLet. For another example in an on line music or radio service each specific section or program can be represented by a single IMLet.

To maximize the users IM experience the visual cue such as an icon or its alias of an IMLet and the activation process for the IMLet can be incorporated in the RIM application s user interface in a user friendly manner. For example the user can conveniently associate one or more IMLets with a certain contact in his friend list or buddy list. When the user and the contact meet in an IM session the IMLets associated with the contact are already stacked on the RIM application. When the user clicks on the icon of the IMLet the service represented by the IMLet is instantly brought into the IM session. The IMLet s icon and its alias may appear in many different circumstances. For example it appears in the list of registered IMLets or the list of unregistered IMLets. It can also be spatially associated with the screen name of a contact in the contact list. When two or more IMLets are associated with one contact the icons of these IMLets can be arranged in a sequence determined by the user s prior use with the contact or by the user s frequency of use with the contact of the third party service represented by the IMLet. When the contact s screen name appears in the RIM application s communication window the associated icons or aliases come with the screen name. In this case the user may activate the IMLet by clicking the icon or alias. The contact may ask the user to activate the IMLet if the contact himself has not registered the IMLet.

In order to avoid possibility of security flaws a protocol deployed on top of the IM application is required. The protocol supports the relationships among the users for the IM session the agent i.e. the IMLet representative of the external entity i.e. an application software or service and the agent s action. This protocol adds meta data that is pertinent to the agent for the given user session. Assume a word processor is involved the message between User A and User B would become 

This represents a message that was sent from for example the device User A via IMLet word processor addressing the same agent on the other end the device User B . This type of agent to agent message using IM session works in the communication protocol level without showing as text to the users. Note that the IMLet which operates as agent in the user s IM session also addresses other applications on the other side via using the user s communication channel and a message protocol. Particularly the IMLet sends encoded data via the user s message protocol. For example when application A is addressing Application B on the other end the data transferred can be a sequence of characters that represents binary data.

The RIM application uses connectivity infrastructures such as Web services API as well as other Web based protocols and technologies to integrate third party services into the IM session. In terms of requirements and reusability of components the RIM application creates a placeholder environment wherein the IMLets participate in the IM session accessing the Instant Messenger API the Web services API as well as other Web oriented APIs.

In various implementations such as these described herein the IMLets can be registered either in a separate list as illustrated in or in the user s list of contact as illustrated in . Upon registration by the user an IMLet is immediately stacked in the user s instant messenger application environment and thus makes a third party service represented by the IMLet immediately available for the user. The user chooses one or more IMLets for registration from a list of options which is frequently updated by the RIM service provider. The user may register new IMLets and unregister unsubscribe the registered ones at any time. The registration or unregistration can be done by a number of mouse clicks or by dragging the icon or the title of the IMLet from the list of unregistered services to the registered services or vice versa.

Upon activation by the user the IMLet makes the third party service represented by the IMLet immediately accessible in the IM session. The second graphical user interface as mentioned above provides a list of IMLets registered by the user. The user can activate any of them by giving simple commands such as one or more mouse clicks or by dragging a symbol e.g. an icon or a title representative of the IMLet into the communication window.

Once the IMLet is activated the users can share the selected online service in the IM session. The data exchange between the users and the selected online service is supported by Web service interfaces such as SOAP XML HTTP and the related protocols.

In various deployments such as these illustrated herein an IMLet can be coupled to an IM bot which is an interactive IM user agent represented by a software application. Once the IMLet is activated the user can communicate either in the IM s user interface or in the IM bot s user interface depending on implementations. An example of IM bots is the ZolaonAOL supported by America Online. Using AOL instant messenger application the user can simply add the buddy ZolaonAOL to his Buddy List i.e. the list of contacts. A user can communicate with ZolaonAOL or the screen name zola for example asking for what movies is playing around a specific area.

Now referring to when Susan one of the users decides to share an online movie with the other user she needs first to activate an IMLet representative of Online Movie for example by clicking the IMLet s icon or choosing activation from a pull down menu. Then she needs to choose a movie from a list. In the example illustrated in Susan chooses the movie al Qaida . When she clicks on the movie title a link enters the communication window . When Della the other user clicks on the link the movie starts on a pop up screen .

Note that the IMLet can simply provide a user interface to the user. As the user clicks and chooses something the IMLet itself is addressing the other agent directly via the IM session and the third party application or service starts acting on top of the IM session on the user s behalf.

There are various different implementations of the activation process. In one of the implementations when a user clicks the movie title or an icon the movie starts on a pop up screen which appears in both users computer screens at the same time.

In another implementation when a user clicks the movie title or an icon a system message enters the communication window see . The system message may be akin to You are invited to share . Please click anywhere of this message to start the sharing. When the invitee clicks the message the movie starts on a pop up screen which appears in both users computer screen at the same time.

Yet in another implementation the users may share a movie in a real time but non synchronous manner. For example when a user clicks the movie title or an icon the movie starts on a pop up screen which only appears in the inviting user s computer and at the same time a system message is posted in the communication window . When the invitee clicks the message or a link included in the message the movie starts on a pop up screen which appears in the invitee s computer screen. The users may choose to synchronize their sharing at any time.

In various implementations such as these illustrated herein each IMLet can be represented by a distinct visual cue such as an icon and its alias. To maximize the users IM experience the visual cue and the activation process for the IMLets can be incorporated in the IM application s user interface in a very convenient manner. For example the user can easily associate one or more IMLets with a certain contact in his friend list or buddy list. Whenever the user and a contact meet in an IM session the IMLets associated with the contact come into the session with the contact s screen name. The user may simply for example click on the icon of an IMLet and the service represented by the IMLet will be instantly brought into the IM session. An IMLet s icon and its alias may appear in many different places. For example it appears in the list of registered IMLets or the list of unregistered IMLets. It can also be spatially associated with the name of a contact in the contact list. When several IMLets are associated with one contact the icons can be arranged in a sequence determined by the user s prior use with the contact or by the user s frequency of use with the contact of the third party service represented by the IMLet. illustrates an exemplary List of Contacts or Buddy List wherein the user with a screen name Jose has five human contacts Etza Susan Andre Leo and Peter one IM bot and various IMLets in his list of contacts. Etza Susan or Leo each has one IMLet associated. Andre or Peter each has two IMLets associated. When a contact s screen name appears in the instant messenger application s communication window as illustrated in the associated icon or alias comes with the screen name. In this case the user Jose with whom an English Portuguese Translation IMLet is associated may initiate the application agent by clicking the icon ENPT . Jose s IM partner Etza can also ask Jose to activate the application agent represented by the IMLet ENPT in the event Etza herself has not registered the application agent.

Note that an IMLet can be associated not only to a human contact but also to an agent program such as an IM bot. When User A is talking to an IM bot such as ZolaOnAol User A can choose to use an auto translation service via an IMLet. For example ZolaOnAol cannot understand Chinese but a Chinese user may talk to Zola in Chinese and get Zola s responses via an IMLet which connects to an English Chinese translation service. This scenario can be further extended as below 

In this scheme User A uses Bot X to communicate with User B or more users at the same time. Bot X acts and offers a service like a chat bot. Bot X passes User A s message to User B or vice versa. Here both users receive the benefits of the IMLet serving on Bot X in the IM session. One example is the auto translation service as described hereafter. Another example is the service of automatically recording the communication flow. Note that all the cases are simply based on the same concept that IMLets can be attached to a human IM user or a software agent user which is an IM bot.

Step The user decides to share with other participants in the session a third party online service or content on the Internet or even a local application.

Step The user checks whether a registered IMLet i.e. a software agent representative of the third party service exists.

Step If the check result in Step is NO then register the IMLet and continue on Step . The registration may be accomplished for example by dragging a link or an icon from the unregistered list to the registered list or by a number of mouse clicks. For another example the registration can be done through the user s personal settings or preferences. Yet for another example in situations where the IM application can be exposed to external applications such as a word processor via IMLets the user can simply query the IM application for registration.

Step If the check result in Step is YES then activate the IMLet. The activation may be accomplished for example by a single or double clicks.

Step In case the third party service provider provides more than one service or content the user chooses one service or content from a list of options.

Note that the steps can be optional because the message can simply be addressed between the IMLets in both sides.

In another preferred embodiment the user activates the IMLet by dragging its name or icon to the communication window . When the user releases the mouse a system message for invitation is automatically posted in the communication window which is visible to the session participants. Upon the invitee s acceptance of the invitation by giving an acceptance command such as clicking on the system message or on a link included in the system message the selected service or content becomes immediately accessible to the invitee. For some progressive content such as audio video programs the users can even choose to share the content synchronously or non synchronously.

The IMLets may be representative of many different kinds of remote contents applications and services provided by third parties. The following is a list with some examples other than movie sharing described above 

In a chat session where users do not speak the same language a user may choose to activate an IMLet that leverages a remote Web service to translate strings of text such as the Babelfish Web service so that the users can communicate seamlessly regardless of their native languages. The translation service stays active during the IM session translating content as it is typed. The IMLet in this case is the intermediary application that filters the text that is written and connects with the translation service providing the results and plugging them into the session. The intermediary application is basically an overlay of JavaScript code that can query the translation service. It also provides a setting means from which the user chooses a language pair for translation such as English Portuguese .

There can be many different implementations of the IMLet for instant translation. In one of the implementation the following steps are performed 

In a typical embodiment the translation chat service operates as a two way agent. The IMLet representative of the translation chat service sends commands to the translation chat service such as asking the translation chat service to connect User A with User B. For example an icon of EN PT via Bot can be provided via the IMLet representative of the translation chat service. So when the user clicks the EN PT via Bot icon the IMLet connects the user with the translation chat service and commands the translation chat service to engage with the other user.

Note that Babee can always set Bot X and request Bot X to associate a third party. When Babee says Bot X set translation to English Portuguese the Bot X associates and activates the third party translation software . In a typical implementation when User A and User B are chatting via Bot X User A should be able to see a virtual representation of User B such as the icon and User B should be able to see a virtual representation of User A such as the icon . The IMLet here is actually the helper application that eliminates the need of all the specific commands to the translation bot because the IMLet can do that hidden messages with third party applications e.g. the translation bot herein and thus can simplify the processes required.

The speech synthesis services specifically designed for helping users with disabilities can also be stacked on the instant messenger application using one or more IMLets. This case is similar to the translation scenario described above. Some people need translation service because they might not be able to communicate in a foreign language. Similarly some people need speech synthesis service because they might have visual disabilities. One example of the speech synthesis services is a screen reader which helps the disabled to read Web pages. In the rich experience instant messaging system according to this invention one or more IMLets representative of the speech synthesis services can be registered and activated. The IMLets together with other speech enabled software applications help the visually disabled to communicate in an IM session. illustrates a rich experience instant messaging RIM system which enables a visually disabled user User D to communicate with other regular IM user User R . User D needs an input interface such as a key board or a speech enabled input device to communicate with the computer on which the RIM application runs. There is also an accessibility agent which is an IMLet stacked on the RIM application . The accessibility agent helps the visually disabled user to access the RIM application and communicates to User R via the Internet and User R s computer . The accessibility agent works with the speech synthesis application to provide understandable responses to User D via the speaking system .

Note that this scheme is useful in helping various entities to be in compliance with Federal law relating to accessibility for disabled e.g. Section 508 of the Rehabilitation Act see http www.section508.gov. Section 508 requires that Federal agencies electronic and information technology is accessible to users with disabilities. Using the IMLet extended instant messaging system governmental and private entities can provide on line answers and support to more users than before.

During an instant messaging session a conversation can be published to a Web log service via an IMLet specifically implemented for this purpose.

An IMLet for picture sharing service may be incorporated into the instant messenger system. The IMLet leverages the existing Web services and enable sharing of the pictures in an instant messaging session.

An IMLet for map reference sharing may be incorporated into the instant messenger system. The IMLet leverages the existing Web services and enable users to query and share data driving directions to an event map of a location from Web based map service providers such as mapquest.

The framework according to this invention adds value by giving the user the ability to share and compose data beyond text images or Web links. All the content applications and services that provided via many different IMLets become pieces that can be composed creating rich composition. Users are able to compose content that can be interactive and connect with content providers or online services.

The framework can also be used with other environments than instant messenger environments. For example IMLets can be used as assistant tools during the authoring of information such as Weblogs. During a blog publishing authoring session a user can use an assistant application such as an IMLet to insert a rich content provided by a third party online service. Another example is to insert a content provided by a third party online service during the composition of e mail. A user may be interested in inserting stock quotes. Instead copying and pasting from a Web site the user has to leave the email application to do so the user can simply query the Stock Quote IMLet and insert the result into the composition via a single click.

In view of the many possible embodiments to which the principles of this invention may be applied it should be recognized that the embodiments described herein with respect to the drawings are meant to the illustrative only and should not be taken as limiting the scope of the invention. One skilled in the art will readily appreciate that other applications may be substituted for those set forth herein without departing from the spirit and scope of the present invention.

