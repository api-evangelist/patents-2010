---

title: Managing software package updates using communication pipes
abstract: Embodiments relate to systems and methods for managing software package updates using communication pipes. According to aspects, one or more client machines can initiate package update activity, for instance a software package update using a package manager. In aspects, instead of accessing a package repository directly via the update manager or utility, the package manager can be configured to communicate with a set of communication pipes, such as inter-process communication (IPC) sockets, pipes, or other resources. The user can thereby invoke a pipeable update process, perform enhanced update activity, and share the results with various programs or threads. For example, the user can set the update process to generate a report of prospective or available update activity, without actually implementing the updates. Error codes during these and other types of diagnostic processing can be generated and logged for debugging purposes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09092295&OS=09092295&RS=09092295
owner: Red Hat, Inc.
number: 09092295
owner_city: Raleigh
owner_country: US
publication_date: 20100226
---
The present teachings relate to systems and methods for software package updates using communication pipes and more particularly to platforms and techniques for connecting software package update processes to available update repositories and other resources using programmatic communication pipes including user selectable reporting debugging and other options.

Users of physical or virtual machines commonly install software packages including package updates to physical or virtual machines. The software packages can contain a set of related files chosen to perform a given application or task such as for example a group of software applications drivers and or other resources used to install and use messaging applications. In instances a software package can contain application software operating system software drivers patches and or other software components grouped as a logical set.

Software package update managers exist to help a user initiate and perform software package updates such as for example the yum Yellowdog update manager package update manager available from Red Hat Inc. and others. In general available software package managers are configured to interact with the set of installed packages on a client and with one or more software package repositories to directly connect to those databases and download available package updates. Available package managers do not however permit the interaction of other software applications or processes with package update activity. A user who wishes for instance to view potential package updates by checking the available versions from current package repositories may be forced for instance to invoke a conventional package manager perform a scrape of URLs universal resource locators or other identifiers and invoke another program or tool to go to those locations to see what package files may apply to their machine. Because existing package update managers are not configured to permit inter process communication with other applications threads or processes direct sharing of package update sources and options may not be possible. It may be desirable to provide systems and methods for software package updates using communication pipes to permit a user to invoke additional and more flexible applications tools and logic to manage the package update process including to perform advanced testing and debugging of software packages.

Embodiments of the present teachings relate to systems and methods for software package updates using communication pipes. More particularly embodiments related to platforms and techniques for monitoring and managing the suite of installed packages that may be hosted on a physical or virtual client machine. In aspects a package manager can communicate with one or more software package repositories via a set of communication pipes to identify test and obtain desired software packages. The use of pipeable access to software package resources rather than for instance hard wired access through one application only can permit the user to set and share a variety of package update parameters to permit flexible testing and management of software package delivery. The set of communication pipes can be accessed by a package manager and other applications and tools to configure those parameters and perform diagnostic and other activity on software package updates or potential updates. The set of diagnostics that can be performed via the pipe connected package manager can include various dry run verification reporting error capture and or other package processing parameters and settings. These and other embodiments described herein address the various noted shortcomings in known package update technology and provide a user with enhanced control and debugging capability for managing their software package resources.

Reference will now be made in detail to exemplary embodiments of the present teachings which are illustrated in the accompanying drawings. Where possible the same reference numbers will be used throughout the drawings to refer to the same or like parts.

In aspects set of installed software packages can be or include packages comprising various types of applications such as for example messaging applications spreadsheet or modeling applications social networking applications word processing applications and or other applications or utilities and can in aspects include an operating system drivers and or components thereof. Set of installed packages can have an associated set of package attributes which records file names versions dates software requirements an or other attributes related to the software package updates installed on client and reflected in set of installed software packages .

In aspects package manager can communicate with a network interface via a set of communication pipes . Set of communication pipes can comprise a set of inter process communication IPC resources such as for example pipes sockets channels ports and or other communication resources. In aspects set of communication pipes can be instantiated and or managed by or via operating system of client such as for example to authorize open close provide access to and or otherwise operate set of communication pipes . Network interface can communicate with one or more network such as the public Internet or other public or private networks and connect to one or more package repository hosting software packages software package updates and or other software or resources.

In aspects package manager can interact with set of installed packages and one or more package repository via set of communication pipes to configure test update and or otherwise manage set of installed packages operating on client . Package manager can for example provide a user with a set of package update options displayed via user interface such as a graphical user interface or others to select various test configuration and or other management activities on set of installed packages . Set of package update options can include options such as one or more selections to perform dry run or test only downloads of package updates to generate reports of the update process to select installation options and or to set other configuration options or parameters for the downloading of package updates from one or more package repositories to set of installed packages .

As illustrated for example in package manager can connect to one or more package repository via set of communication pipes to which set of processes is also connected. Set of processes can be or include additional applications logic APIs and or other resources that can operate with or on set of installed packages software updates located in one or more package repositories and or other files or resources. By communicating with set of processes one or more repository set of installed packages and or other processes services and or resources package manager can present and manage set of update options with enhanced flexibility including to initiate the download of one or more package update . Thus for instance set of processes can include an error reporting module and set of update options can comprise an option to capture and report errors detected during the retrieval and or installation of a software package update from one or more repository to set of installed packages . Other applications services and or logic can be implemented or used in set of processes. According to aspects because in regards package manager can initiate software package update activity via a shareable set of communication pipes more flexible and robust package update activities can be carried out. In aspects in addition the set of processes and or other applications services and or resources to which set of installed packages as well as one or more repository is connected via set of communication pipes is configurable and extensible so that different processes can participate or communicate with package manager over time. For instance different debugging routines databases communications ports and or other software processes data or services can be linked to package manager to support its package management operations based on user configuration or other factors.

In package manager can identify a set of installed software packages hosted in client for instance by calling an application programming interface API of operating system of client to enumerate installed packages and related resources. Package manager can in addition or instead identify available package updates via communication with a repository hosting one or more sets of software package updates for application operating system and or other software. In a user can select package update options using package manager and or other resources. In aspects package update or management options can include for instance an option or selection to perform a software package download and update without performing actual or final installation of the package update for instance to generate a report of the files obtained for installation and potential conflict with other software versions. In aspects other options can include performing a dry run package update without any downloading or installation activity simply to identify the files designated for download and or other information. In aspects options can likewise include the generation of error reports for instance using consistent error codes for different package versions or other variables.

In package update activity can be initiated via package manager connecting to set of communication pipes . For instance all user selection options can be used to download a package update to a messaging or spreadsheet application in full run mode with logging of download and installation activity. In aspects the download of a package update and related resources can be made via set of communication pipes and thereby be made available to other applications processes threads and or services configured to connect to those pipes. For example an anti viral application configured to connect to set of communication pipes can monitor or scan the package update before installation. Other content sharing via set of communication pipes can be done.

In any update reports error logs and or other data related to package update activity can be received in update manager as appropriate. In aspects that data can be received according to user settings and or can be automatically captured and stored. In a user can debug and or update the set of update options including to change selected package update files or versions installation libraries directories or other locations to delete one or more selected files or packages designated for updating and or perform other actions. In package manager can perform the selected package update s with all user configuration selections as appropriate. In processing can return to a prior processing point jump to a further processing point or end.

The foregoing description is illustrative and variations in configuration and implementation may occur to persons skilled in the art. For example while embodiments have been described in which a unitary package manager is configured to control package update activity in embodiments multiple applications or software can interact to control the downloading installation testing and other management of software packages. For further example while embodiments have been described in which package update activity is conducted on one client in embodiments multiple local or remote targets clients and or other machines can register to package manager and or other logic or resources to receive or perform package update activity. Other resources described as singular or integrated can in embodiments be plural or distributed and resources described as multiple or distributed can in embodiments be combined. The scope of the present teachings is accordingly intended to be limited only by the following claims.

