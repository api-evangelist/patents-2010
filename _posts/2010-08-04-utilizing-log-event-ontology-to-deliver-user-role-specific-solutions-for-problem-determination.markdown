---

title: Utilizing log event ontology to deliver user role specific solutions for problem determination
abstract: A log event can be received from a log source within an application server environment. The log event can be an error message which is associated with a log level. In one embodiment, the application server environment can be a JAVA 2 ENTERPRISE EDITION runtime environment. The log event can be analyzed to determine the ontology of the log event which can comprise of the log event, the user context, and the relationship of the log event to the user context. The log event can be associated with the user context as determined by the relationship of the log event.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08468391&OS=08468391&RS=08468391
owner: International Business Machines Corporation
number: 08468391
owner_city: Armonk
owner_country: US
publication_date: 20100804
---
The present invention relates to the field of problem determination and more particularly to utilizing log event ontology to deliver user role specific solutions for problem determination.

Many application server environments are typically comprised of a collection of distributed applications which can interact with each other and the environment numerous and complex ways. In these environments when applications fail problem determination data e.g. error events can be generated which can be used to debug the application failure during the problem determination process. One problem with utilizing debug determination data however is that the problem determination data generated by each application cannot be easily correlated. That is each application s problem determination data can only provide a partial view of the overall failure.

In these application server environments problem determination data can be typically recorded to application specific error logs. Frequently these logs can exist in multiple locations and or formats within the environment such as within application specific directories vendor specific implementation formats and specialized logging service locations. Further error logs can comprise of logging information unrelated to error events including system diagnostic information hardware information etc. In many instances system administrators are required to manually disregard irrelevant information during problem determination procedures. Consequently the time cost attached to problem determination can increase considerably.

Additionally many times event logs can be cryptic in that the logs can include little information about the error which occurred. In one instance event logs can present error codes when an error event occurs often times which are application specific. As a result administrators are required to manually debug the error event utilizing a myriad of information sources e.g. application error code manual wikis etc . Further it is not uncommon for error events to generate multiple separate logging events in one or more locations. In this instance a set of seemingly unrelated error messages can be linked to a single error event. In these scenarios system administrators must perform complex auditing techniques to determine the cause of an error event. That is administrators are forced to manually identify and evaluate relevant error information. These auditing techniques frequently lead to delayed problem determination results and administrator frustration.

The disclosure can be performed in accordance with numerous aspects or embodiments. One aspect is for a method system apparatus and computer program product for analyzing log events. In the aspect a log event can be received from a log source within an application server environment. The log event can be an error message which is associated with a log level. The application server environment can be a JAVA 2 ENTERPRISE EDITION runtime environment. The log event can be analyzed to determine the ontology of the log event which can comprise of the log event the user context and the relationship of the log event to the user context. The log event can be associated with the user context as determined by the relationship of the log event. Utilizing ontology information user role specific solutions can be generated during a problem determination process.

Another aspect is for a method system apparatus and computer program products that includes an ontology data model an event analyzer an ontology engine and an inference engine. The ontology data model can include at least one log event one user context and a relationship between the at least one log event and the one user context. The event analyzer can analyze the at least one log event from a log source within an application server environment. In one embodiment the application server environment can be a JAVA 2 ENTERPRISE EDITION runtime environment. The ontology engine can be able to construct and determine the ontology of the at least on log event from the ontology data model. The inference engine can generate inference results based on the ontology of the at least one log event.

One aspect of the invention if for a system method computer program product or apparatus that includes an interface for error provisioning. In the aspect display hardware can exist within which an interface window is displayed. A tangible memory can store at least one computer program product. A processor operable to execute the computer program product can cause the interface window to be displayed by the display hardware. A first portion of the interface window can be for specifying a log source wherein the log source is at least one of a log file and an application component. A second portion of the interface window can be for assigning a user context to at least one of a set of error messages automatically determined based on user specified ontology criteria. The error messages can be selected from the log source.

The present disclosure provides a solution for utilizing semantics to deliver user role specific logging information. In the solution error events from within an application server environment can be semantically analyzed to generate an ontology data model. The ontology data model can express relationships between an error event a user context an application another error event and the like. The data model can permit user role specific error logs to be generated during a problem determination process. That is an error log and the error log content can be customized and delivered to users groups etc.

As will be appreciated by one skilled in the art the present invention may be embodied as a system method or computer program product. Accordingly the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore the present invention may take the form of a computer program product embodied in any tangible medium of expression having computer usable program code embodied in the medium.

Any combination of one or more computer usable or computer readable medium s may be utilized. The computer usable or computer readable medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or propagation medium. More specific examples a non exhaustive list of the computer readable medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CDROM an optical storage device a transmission media such as those supporting the Internet or an intranet or a magnetic storage device. Note that the computer usable or computer readable medium could even be paper or another suitable medium upon which the program is printed as the program can be electronically captured for instance via optical scanning of the paper or other medium then compiled interpreted or otherwise processed in a suitable manner if necessary and then stored in a computer memory. In the context of this document a computer usable or computer readable medium may be any medium that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The computer usable medium may include a propagated data signal with the computer usable program code embodied therewith either in baseband or as part of a carrier wave. The computer usable program code may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc.

Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

The present invention is described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instruction means which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

In scenario an application error can generate a log event which can be recorded within log file . Log file can be automatically conveyed to ontology engine which can process log file to generate an ontology of the log events. For instance metadata obtained from error events e.g. error messages within log file can be utilized to create ontology . The ontology can determine relationships between elements e.g. error and the user context e.g. user role within process flow . For example the ontology can be used to establish the relationship between a user and error . In scenario ontology can be utilized to produce inference result which can be presented to user via interface . Inference result can be a customized solution based on user role e.g. user profile within runtime .

It should be noted that the disclosure is distinctly different from traditional Common Base Event CBE approaches. In traditional CBE solutions applications are required to be modified to support CBE based events. Further CBE base events are not extensible and do not provide a mechanism to deliver log events based on content and or user profiles.

As used herein inference result can be a user context based problem determination artifact comprising of but not limited to error a portion of log file ontology inferred solution to error confidence score and the like. In one scenario historical user feedback can be used to improve inference result . In one embodiment inference result can be associated with a scaled user rating system which permits users to moderate the quality of inference result generated by ontology engine . In another embodiment inference result can be subject to a dualistic rating system e.g. approve disapprove . For instance when a user approves an inference result appropriate relationships within the ontology can be reinforced permitting improved problem determination outcomes.

As used herein runtime environment can be an executable environment can be a hardware software component able to run application . Runtime environment can include but is not limited to software services as subroutines libraries for common operations implementation of programming language commands type checking debugging code generation code optimization and the like. In one instance runtime environment can include a virtual machine sandbox and the like. For example runtime environment can be a JAVA 2 ENTERPRISE EDITION runtime environment.

Application can be a software entity able to generate log file in response to a error event. Application can include but is not limited to desktop software server side software software services middleware enterprise software and the like. For instance application can be an IBM DB2 software application. Application can include one or more applications within a runtime environment virtual machine and the like. For instance application can be one of a set of instances of the same application.

Error can be an application occurrence which results in one or more error messages being generated within log file . Error can include but is not limited to software bug error flaw mistake failure fault and the like. Error generated error messages can be recorded within log file which can include error codes error description error id application id user associated with the error and the like. It should be appreciated that error can be a user presented message which can be documented within log file . In one embodiment error can comprise of an automatically generated error code which can be associated with an unresolved software issue. That is error can lack a problem resolution procedure associated documentation software fixes and the like. For instance error can generate an error code 99999 which can be an unknown problem within application .

Log file can be a operating system entity permitting reading and or writing of arbitrary error information. Log file can include but is not limited to text files markup language files and the like. Log file can be in one or more traditional log formats including Common Log Format CLF Extended Log Format ELF and the like. For example log file can be one or more an extensible markup language XML log file generated by application . Log file can exist within one or more locations within runtime environment . It should be appreciated that log file can include error messages warning messages diagnostic information and the like.

Ontology engine can be a hardware software entity for establishing an ontology for an error event. Engine can process log file to determine relevant error event information and create a mapping for relevant relationships of error . Engine can be configured to automatically process log file in response to error event. Engine can determine user context utilizing log file event information e.g. username log file properties e.g. owner application properties and the like. Engine can create ontology which can be stored within data store . In one instance engine can utilize artificial intelligence AI algorithms to create ontology generate inference results and the like.

Data store can be one or more hardware software components for temporarily and or permanently storing ontology information. Data store can include but is not limited to volatile memory non volatile memory and the like. In one embodiment data store can be a knowledge base repository configured to store ontology information for runtime environment application and the like. Data store can be a network area storage NAS storage area network SAN distributed storage element and the like.

Ontology can be a formal representation of runtime environment knowledge by a set of entities within the runtime environment domain and the relationships between those entities. The entities can include but are not limited to application log file error inference result user and the like. For instance ontology can define a set of error messages and a user context for the messages which can be used to identify an appropriate user for which messages can be conveyed. Ontology can be created from one or more sources including runtime environment databases and the like. Semantics for ontology can be derived from log file content log file properties application settings and the like. In one embodiment ontology can be derived from one or more data models including but not limited to entity relationship diagrams data flow diagrams and the like. Ontology can map relationships between entities within scenarios utilizing one or more description languages including but not limited to Web Ontology Language OWL Resource Description Framework RDF and the like. In one instance ontology can be associated with a symptom database which can be used to track application errors.

Inference result can be a programmatically generated problem determination artifact enabling user to diagnose error based on user context. That is result can be dynamically tailored to user based on user profile . Inference result can be generated based on ontology semantics heuristics and the like. Inference result can be automatically generated and conveyed to client which can be presented via interface to user . Inference result can include but is not limited to error information debugging information problem resolution procedure and the like. That is inference result can be used to diagnose and debug error with minimal user effort. For instance user can receive solution information indicating the cause of the error code 99999 e.g. timeout failure due to a large data set and a solution for repairing the error . In one embodiment inference result can be a knowledge base article dynamically generated based on user role.

Client can be a hardware software entity able to receive inference result from data store . Client can include but is not limited to desktop computer laptop mobile phone portable digital assistant PDA portable multimedia device and the like. In one instance inference result can be automatically conveyed to client in response to error . In another instance inference result can be communicated to client in response to a manual user interaction. Client can be associated with interface which can be utilized by user to interact with inference result . Inference result can be directly utilized by user to diagnose and or evaluate error . For example inference result can present user with an executable artifact e.g. application patch for remedying error .

User can be a human agent associated with runtime environment . User can include system administrators database administrators end users and the like. User can be associated with a user profile e.g. user context which can be defined within runtime directory service and the like. That is user profile can include user role user permissions objects a user can interact with and the like. User profile can be automatically communicated to ontology engine during inference result creation. In one embodiment user profile can be stored within ontology .

Interface can be a user interface able to present one or more log events and or inference results . Interface can include but is not limited to graphical user interface GUI voice user interface VUI mixed mode interface and the like. Interface can include a log viewer problem determination tool and the like. Interface can permit inspection of log file based on one or more arbitrary criteria including but not limited to data time log level user role and the like. In one embodiment user can selectively generate inference result when interaction with a log event occurs. In one instance interface can be an IBM LOG ANALYZER.

Drawings presented herein are for illustrative purposes only and should not be construed to limit the invention in any regard. It should be appreciated scenario illustrate only one contemplated embodiment of the disclosure. In one instance inference result can be an aggregated list of log events and event solutions associated with a user role. For example inference result can indicate problems and solutions which have occurred during a specified period of time.

In step a log source within an application runtime can be identified. The log source can include but is not limited to an application a system process a logging engine a logging server and the like. In step a log event can be received from the identified log source which can be analyzed. In step the semantic of the log event can be determined. This determination can be performed utilizing automated and or manual input parameters. In one embodiment a Unified Modeling Language entity can be used to identify the semantic of a log event. In step the log event can be optionally tagged with a user context. In one instance keyword tags can be associated with each log event permitting relationships to be established readily. In step the log event can be added to the ontology knowledge base. In step an inference result can be generated from the log event and the user context.

In step the log event can be optionally communicated to an appropriate user based on the user context. Communication to the appropriate user can be established within ontology settings knowledge base settings and the like. Communication can include but is not limited to electronic mail e mail telephony Short Message Service SMS Instant Message IM and the like. In step if there are more events to analyze the method can proceed to step else continue to step . In step if there are more log sources available the method can proceed to step else continue to step . In step the method can end.

Drawings presented herein are for illustrative purposes only and should not be construed to limit the invention in any regard. Method can be performed continuously within an runtime environment providing real time problem determination knowledge. It should be appreciated method can vary with implementation as necessitated by logging infrastructures. Further method can be performed within existing logging infrastructures without requiring logging procedures to be modified. It should be noted method is not limited to application logging and can be extended to system level logging events.

It should be appreciated that system is one contemplated configuration for providing user contextual problem determination solutions. In system log can be associated with a logging server which can be part of a distributed logging environment. For instance logging server can be one or more vendor maintained computing resources remotely linked to repository .

Knowledge base repository can be a collection of data representing an event and or one or more inferred user contextual solutions to the event. Repository can include but is not limited to ontology engine knowledge base data store and the like. Repository can include hardware but is not limited to volatile memory non volatile memory a processor a bus and the like. Repository can be communicatively linked to logging server via network . Repository can be a component of a knowledge management system expert system and the like. In one embodiment repository can be an IBM COGNOS software.

Ontology engine can be a component of knowledge base repository a network element a distributed component of a knowledge management system and the like. Ontology engine can include but is not limited to event analyzer inference engine configuration settings and the like. In one embodiment engine components can be configured to execute during periods of inactivity and or low computing resource usage. In another embodiment engine can continually poll log to determine a events which require solutions.

Event analyzer can be a hardware software component for determining user context of an event within log . User context can be obtained by analyzer from one or more sources including but not limited to log content log properties and the like. Analyzer can be configured via configuration settings to process log regardless of format. In one embodiment analyzer can utilize existing ontology information to determine user context for an event. In another embodiment analyzer can employ inference results to establish user context for an event. Once a user context is established analyzer can convey user context information to inference engine . In one instance analyzer can be invoked via a user initiated event correlation analysis functionality.

Inference engine can be a hardware software component for determining user context specific inference results for one or more events occurring within an application runtime. Inference engine functionality can include but is not limited to interpretation consistency enforcement and the like. Engine can utilize one or more traditional and or proprietary algorithms for determining inference results . For example inference engine can utilize a Rete algorithm to establish potential solutions for error . In one embodiment engine can include inductive inference for determining results .

In one instance engine can generate a confidence score which can be associated with an inference result . In the embodiment the confidence score can indicate the likelihood the inference result is an accurate solution for a user role.

Configuration settings can be one or more parameters for determining the behavior of ontology engine . Settings can be used to control event analysis based on the log level of the event. For example in resource intensive environments events which are associated with a critical log level can be processed enabling non critical errors to be handled manually. Utilizing settings application specific settings can be established enabling trivial applications and associated errors to be safely ignored. Settings can enable auditing processes to be enacted including but not limited to rule tracing inference inspection stack tracing and the like.

Rules can be one or more inference rules for generating inference results in response to event occurrence. Rules can be selectively executed based on ontology analysis. Rules can be automatically and or manually established. In one instance rules can conform to a predicate logic format. In one embodiment rules can be heuristically generated from historical data ontology data and the like. In one instance rules can produce one or more conclusions e.g. inference results from ontology utilizing traditional rules and or proprietary rules.

Drawings presented herein are for illustrative purposes only and should not be construed to limit the invention in any regard. In one embodiment ontology engine functionality can be encapsulated within an application programming interface API . For example ontology engine capabilities can be a component of an IBM Integrated Ontology Development Toolkit. In one instance ontology can conform to symptom database formats including Symptom version 2.0 Symptom version 0.1 and the like. It should be appreciated that system is tractable through user feedback mechanisms automated feedback mechanisms and the like.

The definition can define classifications for an ontology knowledge base which can be user manipulated. In one instance definition can specify a formal definition for error events associated with an IBM LOG ANALYZER. In the instance error events can be associated with a component error codes description resolution parent and the like. In one embodiment definition can be utilized as a template during an import and or migration process for a symptom database.

In instance information provided by a vendor can be correlated to the definition . In this manner users can extend an ontology knowledge base utilizing vendor provided information enabling the ontology knowledge base to remain current and flexible. In one embodiment information associated with instance can be user manipulated via an interface e.g. interface . For instance an administrator can customize vendor provided data e.g. resolution information to enable user appropriate resolution information to be disseminated.

Drawings presented herein are for illustrative purposes only and should not be construed to limit the invention in any regard. It should be noted definition and instance is only one contemplated embodiment for organizing error metadata and user context.

In section the log source for error provisioning can be identified. The log source can include one or more system logs application logs application server components and the like. For example JAVA VIRTUAL MACHINE JVM logs can be chosen by an administrator for selective error provisioning. In one embodiment existing logging level supported by various components of an application server can be integrated into interface . For instance a link can be presented at each component to provision the log event to user roles based on the content of error messages and or error codes.

In section user customizable error parameters can be specified which can be assigned to a user context. Section can present one or more portions of metadata corresponding to a definition e.g. definition . For instance section can permit user specification of component component type error code error content error name priority and the like. In one instance metadata associated with component component type and error codes can be automatically populated from an ontology knowledge base. Error events matching metadata defined within section can be assigned to a user context utilizing section .

In section user context can be established utilizing interface elements within section . Section can permit arbitrarily complex user context associations to be applied to error events. In one embodiment an error classifier can be used to create groupings which can be used to easily manage user context. For instance a grouping can be created which assigns administrator user context to an error event without requiring manual user selection of one or more administrators. In another embodiment specific groups and users can be assigned to the user context of an error event utilizing interface elements within section .

In section a resolution action can be specified for the provisioned error within interface . The resolution action can be automatically populated from one or more sources including an ontology knowledge base symptom database and the like. Based on the user context selection within section the appropriate resolution action can be presented. That is multiple resolution actions can be associated with an error event based on selected user context within section . In one embodiment section can present the resolution action within a text field enabling user modification of the resolution action. Changes to the resolution action can be automatically propagated to the appropriate source.

Drawings presented herein are for illustrative purposes only and should not be construed to limit the invention in any regard. Interface can include but is not limited to a graphical user interface GUI voice user interface VUI mixed mode interface text interface and the like. Interface can include interface artifacts including but not limited to drop down boxes radio buttons checkboxes text fields text areas and the like. Functionality associated within interface can be presented within a file menu context menu and the like.

The flowchart and block diagrams in the illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

