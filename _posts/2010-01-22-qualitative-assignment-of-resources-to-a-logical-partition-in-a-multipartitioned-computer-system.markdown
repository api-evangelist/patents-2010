---

title: Qualitative assignment of resources to a logical partition in a multipartitioned computer system
abstract: A qualitative resource assignment wizard receives qualitative information for a logical partition (LPAR) and calculates computer resource assignments for the LPAR based on the qualitative information and a set of conversion functions. For example, the qualitative resource assignment wizard may calculate a processing unit assignment, a memory assignment, and an I/O slot assignment for the LPAR. The qualitative information may be input by a user, for example, utilizing a graphical user interface (GUI). In one embodiment, the conversion functions are calculated during a training phase, in which a user periodically provides qualitative information while resource usage data is gathered. The wizard may reside in a hardware management console (HMC) or other administrative console and/or may be a component of a hypervisor or other partition management code. Software code associated with the wizard may be provided by a network server application to a client system for enabling a user to remotely input the qualitative information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09047135&OS=09047135&RS=09047135
owner: International Business Machines Corporation
number: 09047135
owner_city: Armonk
owner_country: US
publication_date: 20100122
---
The present invention relates in general to the data processing field. More particularly the present invention relates to a method apparatus and computer program product for assigning computer resources to a logical partition in a multipartitioned computer system using qualitative information and conversion functions.

Computer systems typically include a combination of hardware and software. The combination of hardware and software on a particular computer system defines a computing environment. Different hardware platforms and different operating systems thus provide different computing environments. In recent years engineers have recognized that it is possible to provide different computing environments on the same physical computer system by logically partitioning the computer system resources into different computing environments. Such a computer system is often referred to as a multipartitioned computer system. The IBM Power Systems formerly IBM System i computer system developed by International Business Machines Corporation is an example of a computer system that supports logical partitioning. If logical partitioning on an IBM System i computer system is desired partition manager code referred to as a hypervisor in IBM terminology is installed that allows defining different computing environments on the same platform. Once the partition manager is installed logical partitions may be created that define different computing environments. The partition manager manages the logical partitions to assure that they can share needed resources in the computer system while maintaining the separate computing environments defined by the logical partitions.

A computer system that includes multiple logical partitions typically shares resources e.g. processors memory persistent storage and other physical hardware amongst the logical partitions. For example a computer system with a single CPU could have two logical partitions defined with 50 of the CPU assigned to each logical partition with 33 of the memory assigned to the first logical partition and 67 of the memory assigned to the second logical partition and with two different I O slots assigned to the two logical partitions one per partition. Once logical partitions are defined and shared resources are assigned to the logical partitions each logical partition acts as a separate computer system. Thus in the example above that has a single computer system with two logical partitions the two logical partitions will appear for all practical purposes to be two separate and distinct computer systems.

Many modern computer systems e.g. server systems have logical partitioning management approaches that require an extremely high level of technical knowledge to assign computer resources to logical partitions. Such a conventional logical partitioning management approach is exemplified by U.S. Pat. No. 7 565 398 B2 issued Jul. 21 2009 to Shamsundar Ashok et al. and entitled PROCEDURE FOR DYNAMIC RECONFIGURATION OF RESOURCES OF LOGICAL PARTITIONS . Using a graphical user interface GUI a user may indicate a plurality of resources that are to be involved in a partition reconfiguration. Some users however are not familiar with computer science concepts that are commonly used in conventional logical partitioning management approaches such as the number of CPU s to move add remove amount of memory to move add remove adapters used by this partition free system adapters etc.

Moreover when automated partitioning capability is provided in conventional logical partitioning management approaches it is typically reactive rather than proactive. In a typical reactive automated partitioning scheme an agent detects over utilization of a resource in a partition and then assigns more of the resource to the partition. A more proactive automated partitioning scheme is exemplified by U.S. Pat. No. 7 266 823 B2 issued Sep. 4 2007 to Jack A. Alford Jr. and entitled APPARATUS AND METHOD OF DYNAMICALLY REPARTITIONING A COMPUTER SYSTEM IN RESPONSE TO PARTITION WORKLOADS . A workload schedule is used to re deploy resources in advance of peak periods and then re assign the resources back to their original partitions after the peak periods are over. The partitions however are defined in a conventional manner. A system administrator using a GUI or the resource management software language command specifies the number of CPUs the amount of memory and the specific I O slots that will be devoted to each partition. This requires an extremely high level of technical knowledge. While a system administrator will typically have the requisite technical knowledge other users may not be familiar with computer science concepts that are commonly used to assign computer resources to logical partitions.

Therefore a need exists for an enhanced mechanism for assigning computer resources to logical partitions in a multipartitioned computer system especially for users that are not familiar with computer science concepts.

According to the preferred embodiments of the present invention a qualitative resource assignment wizard receives qualitative information for a logical partition LPAR and calculates computer resource assignments for the LPAR based on the qualitative information and a set of conversion functions. For example the qualitative resource assignment wizard may calculate a processing unit assignment a memory assignment and an I O slot assignment for the LPAR. The qualitative information may be input by a user for example utilizing a graphical user interface GUI . In one embodiment the conversion functions are calculated during a training phase in which a user periodically provides qualitative information while resource usage data is gathered. The wizard may reside in a hardware management console HMC or other administrative console and or may be a component of a hypervisor or other partition management code. Software code associated with the wizard may be provided by a network server application to a client system for enabling a user to remotely input the qualitative information.

In accordance with the preferred embodiments of the present invention a qualitative resource assignment wizard receives qualitative information for a logical partition LPAR and calculates computer resource assignments for the LPAR based on the qualitative information and a set of conversion functions. For example the qualitative resource assignment wizard may calculate a processing unit assignment a memory assignment and an I O slot assignment for the LPAR. The qualitative information may be input by a user for example utilizing a graphical user interface GUI . In one embodiment the conversion functions are calculated during a training phase in which a user periodically provides qualitative information while resource usage data is gathered. The wizard may reside in a hardware management console HMC or other administrative console and or may be a component of a hypervisor or other partition management code. Software code associated with the wizard may be provided by a network server application to a client system for enabling a user to remotely input the qualitative information.

In the embodiment shown in described further below the computer system is a logically partitioned platform. For those not familiar with the concepts of logical partitions background information is provided below with reference to that will help to understand the present invention.

As stated in the Background Art section above a computer system may be logically partitioned to create multiple virtual machines on a single computer platform. Referring to a sample computer system is shown to include four processors 16 GB of main memory and six I O slots . Note that there may be many other components inside a prior art computer system that are not shown in for the purpose of simplifying the discussion herein. We now assume that the computer system is configured with three logical partitions as shown in . The first logical partition A is defined to have one processor A 2 GB of memory A and one I O slot A. The second logical partition B is defined to have one processor B 4 GB of memory B and two I O slots B. The third logical partition C is defined to have two processors C 10 GB of memory C and three I O slots C. Note that the total number of processors A B C equals the four processors in the computer system . Likewise for the memory and the I O slots. This is a simplified example. There can be unassigned free resources e.g. not all CPUs need to belong to some partition at some point in time .

Now that hardware resources have been assigned to the logical partitions software may be installed as shown in . First an operating system is typically installed in each partition followed by utilities or applications as the specific performance needs of each partition require. Thus for example in the first logical partition A includes an operating system A a utility A and an application A. The second logical partition B includes an operating system B and two applications B and B. The third logical partition C includes an operating system C a utility C and an application C. Once the software is installed in the logical partitions as shown in the logically partitioned computer system is ready for use.

Conventional logical partitioning management approaches typically require an extremely high level of technical knowledge to assign computer resources to logical partitions. Some users however are not familiar with computer science concepts that are commonly used in conventional logical partitioning management approaches such as the number of CPU s to move add remove amount of memory to move add remove adapters used by this partition free system adapters etc.

In accordance with the preferred embodiments of the present invention as much of the computer science jargon as possible is taken out of the process for partitioning a computer system thereby assisting users that might not be familiar with the computer science concepts that are common in conventional partitioning processes. This is accomplished in the present invention by prompting the user to input qualitative information which is translated into computer resource assignments through a set of conversion functions. For purposes of this patent application the terminology qualitative information as utilized herein including within the claims is defined as constraints variables and other data input by the user in terms familiar to the user e.g. business terms educational terms medical terms governmental terms non profit organization terms in the home terms and the like rather than in terms requiring the user s familiarity with computer science concepts. The qualitative information in business terms may be things like Number of Transactions per Minute Number of Supported Customers and Priority rather things like Amount of Memory and Number of Processors .

Other examples of qualitative information include the Identity Title of User e.g. values for this qualitative information may include titles such as CEO CFO Vice President Manager Employee etc. in business terms and identities such as Dad Mom Junior Sis etc. for in the home terms Identity Type of Application Program s to Run e.g. values for this qualitative information may identities include productivity software such as Word Outlook Power Point etc. in business terms and types such as Productivity Educational Games etc. for in the home terms Identity of Operating System to Install and Grade Point Average GPA of User Attending School .

The use of qualitative information gives a more qualitative feeling to the process for logically partitioning a computer system. Utilization of user familiar terms will have appeal to users and be more valuable to users as they are deciding which factors are important in determining the characteristics of each logical partition in a computer system.

During a first phase which is a training phase a resource assignment mechanism for assigning computer resources to logical partitions in a multipartitioned computer system in accordance with the preferred embodiments of the present invention will collect data points showing how computer resource usage in a logical partition increases decreases as the business demand assuming for example the logical partition is utilized by a business supporting an increasing decreasing number of customers increases decreases. To define the qualitative information that is pertinent to the logical partition the resource assignment mechanism may initially present the user e.g. an employee of the business with a dialog to set up one or more usage constraints he she considers important. Such usage constraints may include for example the number of customers supported by the business and the priority of work . Then the resource assignment mechanism will periodically or non periodically present the user with dialogs to enter the qualitative information and the logical partition s resource usage at that moment will be gathered and recorded along with the qualitative information. For example during the training phase as the number of customers supported by the business increases from 100 to 200 and the priority of work remains critical these values are qualitative information input by the user the average and maximum processor usage in the logical partition utilized by the business may increase from 15 and 25 of a 2.0 processing unit assignment PUA respectively to 50 and 75 of the 2.0 processing unit assignment PUA respectively and the maximum memory usage increases from 25 to 75 of 1 GB these values are computer resource usage data gathered at the direction of the resource assignment mechanism . After enough data points are collected the resource assignment mechanism computes one or more conversion functions that can be used to translate the qualitative information into computer resource assignments. For instance the following conversion functions are illustrative 

These conversion functions will readily capture the trends encountered during the training phase. This training phase need not end before a second phase described further below begins. Continuing the training phase beyond the start of the second phase will allow the resource assignment mechanism to collect additional data points possibly obtain new usage constraints from the user and even fine tune the conversion functions.

During the second phase which is a partition creating changing phase the user is able to create logical partitions or change or tune the computer resources of his her existing partitions merely by inputting the qualitative information. That is during the second phase the resource assignment mechanism will present the user with a dialog to enter the then current qualitative information. The resource assignment mechanism will then calculate the resource assignment based on the then current qualitative information and the conversion functions calculated in the training phase . The resource assignment calculated by the resource assignment mechanism need not be confined to physical resources but can extend to virtual resources e.g. carving a processor into 5 virtual processors for instance . Also at this point in time validation of the executability and or advisability of the calculated resource assignment may occur and or feedback to the user may be provided regarding the calculated resource assignment.

When automated partitioning capability is provided in conventional logical partitioning management approaches this capability is typically reactive rather than proactive. In a typical reactive automated partitioning scheme an agent detects over utilization of a resource in a partition and then assigns more of the resource to the partition. In accordance with the preferred embodiments of the present invention an automated partitioning capability may be made more proactive in that it can base its decisions and resource assignment in qualitative information input by the user from the moment a logical partition is created.

A computer system implementation of the preferred embodiments of the present invention will now be described with reference to in the context of a particular computer system i.e. an IBM System i computer system. However those skilled in the art will appreciate that the method apparatus and computer program product of the present invention apply equally to any computer system regardless of whether the computer system is a complicated multi user computing apparatus e.g. an IBM POWER6 processor based server system or an IBM POWER6 processor based blade system residing in an IBM BladeCenter chassis a single user workstation a PC or an embedded control system. As shown in computer system comprises one or more processors A B C and D a main memory a mass storage interface a display interface a network interface and an I O device interface . These system components are interconnected through the use of a system bus .

Partition management code described further below resides in the main memory and performs a number of multipartitioning functions and services for a plurality of partitions in the computer system .

In accordance with the preferred embodiments of the present invention a qualitative resource assignment wizard described further below resides in the main memory at least in the embodiment shown in and is a component of or operates in conjunction with the partition management code to assign computer resources to one or more of the partitions based on qualitative information and a set of conversion functions. One skilled in the art will appreciate that the qualitative resource assignment wizard need not reside in the main memory of the computer system . For example in the embodiment shown in the qualitative resource wizard resides in the memory of a hardware management console HMC . The qualitative information may be input by a user for example utilizing a graphical user interface GUI during a partition creating changing phase described further below with reference to . For example in the embodiment shown in the user inputs qualitative information in this embodiment the Customers into a Qualitative Resource Assignment QRA Create New Partition GUI. Also in accordance with the preferred embodiments of the present invention the qualitative resource assignment wizard calculates the conversion function during a training phase described further below with reference to in which the user periodically provides qualitative information while computer resource usage data is gathered. For example in the embodiment shown in the user periodically inputs qualitative information in this embodiment the Number of Customers and Priority into a Qualitative Resource Assignment QRA Data Collection GUI.

Also in accordance with the preferred embodiments of the present invention the qualitative resource assignment wizard includes a validation feedback mechanism described further below that validates the executability and or advisability of the assignment of computer resources to the individual partitions and or provides feedback to the user regarding the assignment. For instance the user may be provided with prompts indicating the assignment is above a maximum capacity currently available. In this regard the prompts may also inform the user that more capacity will become available later e.g. during non peak hours and query the user whether he she desires to retry at that time or to change the value he she input for the qualitative information. Also the user may be provided with a prompt suggesting an alternative value for the qualitative information that would generate an assignment below the maximum capacity currently available. In a first example if one of the usage constraints is the Number of Customers a prompt may suggest inputting a particular value for the qualitative information that would generate an assignment safely below the maximum capacity currently available. In a second example if one of the usage constraints is the Identity of Application Program s to Run a prompt may suggest running an alternative application program that would generate an assignment safely below the maximum capacity currently available.

Generally the feedback provided by the validation feedback mechanism may be based on any number and combination of factors e.g. time and priority . For example the user may be provided with a prompt indicating that a system backup which the user indicated has having a low priority takes a long time and suggesting that the backup is best performed during non peak hours such as at night. In another example if one of the usage constraints is the Identity of User certain users e.g. value Junior or Sis may receive a smaller maximum available resource assignment than that available to other users e.g. value Mom or Dad . In still another example if the usage constraints include the Identity of User Grade Point Average GPA of User Attending School and Type of Application Program to Run certain users e.g. value Junior or Sis may receive a smaller than usual maximum available resource assignment if that user has a GPA below a predefined threshold e.g. value

Processors A B C and D also collectively referred to herein as processors process instructions and data from main memory . Processors temporarily hold instructions and data in a cache structure for more rapid access. In the embodiment shown in the cache structure comprises caches A B C and D also collectively referred to herein as caches each associated with a respective one of processors A B C and D. For example each of the caches may include a separate internal level one instruction cache L1 I cache and level one data cache L1 D cache and level two cache L2 cache closely coupled to a respective one of processors . However it should be understood that the cache structure may be different that the number of levels and division of function in the cache may vary and that the system might in fact have no cache at all.

Main memory in accordance with the preferred embodiments contains data an operating system and application software e.g. one or more application programs utilities and other types of software. In addition main memory includes the partition management code and the qualitative resource assignment wizard with the validation feedback mechanism each of which may in various embodiments exist in any number. One skilled in the art will appreciate that the qualitative resource assignment wizard need not reside in the main memory of the computer system . For example in the embodiment shown in the qualitative resource wizard resides in the memory of a hardware management console HMC . Optionally the main memory may also include a web server application . Each of these entities in memory is described further below.

Although the partition management code the qualitative resource assignment wizard and the validation feedback mechanism are illustrated as being contained within the main memory in other embodiments some or all of them may be on different electronic devices and may be accessed remotely e.g. via a network . Thus for example the qualitative resource assignment wizard and or the validation feedback mechanism may be at least partially located or implemented on a networked device e.g. a computer system such as a workstation and or a client system while the partition management program resides on the computer system .

The preferred embodiments expressly extend to the qualitative resource assignment wizard and or the validation feedback mechanism being implemented in a hardware management console e.g. the hardware management console shown in within the scope of the preferred embodiments. As described further below a hardware management console is typically coupled to one or more multipartitioned servers over a service network.

In accordance with the preferred embodiments of the present invention the computer system may be a server system connected to a client system across a network . The client system if present includes one or more processors and a memory . The memory has stored therein a least at various times an internet browser application providing the client system the ability to remotely access data applications and other types of software e.g. the partition management code the qualitative resource assignment wizard and or the validation feedback mechanism located on the server . For example the internet browser application e.g. HTTP based HTTPS based etc. may transfer files and data via the web server application of the server . The user once the partition management code the qualitative resource assignment wizard and or the validation feedback mechanism is are accessed can remotely input the qualitative information. The internet browser application of the client system may then transfer the remotely input qualitative information to the server . One skilled in the art will appreciate however that utilization of an internet browser application is merely exemplary. Suitable alternatives include green screen VNC virtual network computing etc.

The web server application may include any suitable web server programming that enables access and data exchange with the client system . For example the web server application may supply software code associated with the partition management code the qualitative resource assignment wizard and or the validation feedback mechanism to the client system in the form of an applet plug in or the like for viewing and or interaction by the user at the client system . Additionally while the above exemplary embodiment of the present invention describes the client system as including the internet browser application and the server as including the web server application one skilled in the art would recognize that any type of monolithic application could be employed using suitable protocols at both the server and the client system that would enable the user to remotely input qualitative information.

The partition management code represents any code that is responsible for performing multipartitioning functions and services for partitions in the computer system . The partition management code may be for example a hypervisor which is available from International Business Machines Corporation.

While the partition management code is shown in as a separate entity in memory the preferred embodiments expressly extend to the partition management code being implemented within the operating system application software utilities or other types of software within the scope of the preferred embodiments. For example the partition management code may be a layer of the operating system responsible for performing multipartitioning functions.

The partition management code may comprise computer executable instructions maintained for example as a computer program product stored on a hard disk e.g. on a DASD device or system firmware. Firmware is software stored in a memory chip that holds its content without electrical power such as for example read only memory ROM programmable ROM PROM erasable programmable ROM EPROM electrically erasable programmable ROM EEPROM and nonvolatile random access memory nonvolatile RAM .

In another embodiment the partition management code may be implemented in hardware via logic gates and or other appropriate hardware techniques in lieu of or in addition to a processor based system.

In the preferred embodiments of the present invention the qualitative resource assignment wizard as well as the validation feedback mechanism includes instructions capable of executing on the processors or statements capable of being interpreted by instructions executing on the processors to perform the functions as further described below with reference to and . Also in accordance with the preferred embodiments of the present invention the qualitative resource assignment wizard as well as the validation feedback mechanism may be instructions capable of executing on one or more processors of a networked device e.g. the processor s of the client system shown in or the processor s of the hardware management console shown in or statements capable of being interpreted by instructions executing on such processor s of the networked device to perform the functions as further described below with reference to and .

While the qualitative resource assignment wizard is shown in as a separate entity in memory the preferred embodiments expressly extend to the qualitative resource assignment wizard and or the validation feedback mechanism being implemented within the partition management code application software utilities or other types of software within the scope of the preferred embodiments. For example the qualitative resource assignment wizard may be a component of the partition management code .

The qualitative resource assignment wizard may comprise computer executable instructions maintained for example as a computer program product stored on a hard disk e.g. on a DASD device or system firmware. As mentioned above firmware is software stored in a memory chip that holds its content without electrical power such as for example read only memory ROM programmable ROM PROM erasable programmable ROM EPROM electrically erasable programmable ROM EEPROM and nonvolatile random access memory nonvolatile RAM .

In another embodiment the qualitative resource assignment wizard and or the validation feedback mechanism may be implemented in hardware via logic gates and or other appropriate hardware techniques in lieu of or in addition to a processor based system.

Computer system utilizes well known virtual addressing mechanisms that allow the programs of computer system to behave as if they have access to a large single storage entity instead of access to multiple smaller storage entities such as main memory and DASD device . Therefore while data operating system application program s partition management code qualitative resource assignment wizard and validation feedback mechanism are shown to reside in main memory those skilled in the art will recognize that these items are not necessarily all completely contained in main memory at the same time. It should also be noted that the term memory is used herein to generically refer to the entire virtual memory of the computer system .

Operating system is a multitasking operating system known in the industry as IBM i formerly IBM i5 OS however those skilled in the art will appreciate that the spirit and scope of the present invention is not limited to any one operating system. There are many suitable multitasking operating systems such as AIX Linux etc. The operating system which is located in a single partition is preferably designed to interface with open firmware such as partition management firmware e.g. a hypervisor available from International Business Machines Corporation .

Processors may be constructed from one or more microprocessors and or integrated circuits. Processors execute program instructions stored in main memory . Main memory stores programs and data that may be accessed by processors . When computer system starts up processors initially execute the program instructions that make up operating system . Operating system is a sophisticated program that manages the resources of computer system . Some of these resources are processors main memory mass storage interface display interface network interface I O device interface and system bus .

Although computer system is shown to contain four processors and a single system bus those skilled in the art will appreciate that the present invention may be practiced using a computer system that has a different number of processors and or multiple buses. In addition the interfaces that are used in the preferred embodiments each include separate fully programmed microprocessors that are used to off load computing intensive processing from processors . However those skilled in the art will appreciate that the present invention applies equally to computer systems that simply use I O adapters to perform similar functions.

Mass storage interface is used to connect mass storage devices such as a direct access storage device to computer system . One specific type of direct access storage device is a readable and writable CD RW drive which may store data to and read data from a CD RW .

Display interface is used to directly connect one or more displays to computer system . These displays which may be non intelligent i.e. dumb terminals or fully programmable workstations are used to allow system administrators and users also referred to herein as operators and developers to communicate with computer system . Note however that while display interface is provided to support communication with one or more displays computer system does not necessarily require a display because all needed interaction with users and processes may occur via network interface .

Network interface is used to connect other computer systems such as the workstations and or the client systems to computer system across a network . In accordance with the preferred embodiments of the present invention these networked computer systems like the client system may include a computer system on which a web browser program resides by which the qualitative resource assignment wizard and the validation feedback mechanism may be accessed.

Also in accordance with the preferred embodiments of the present invention these networked computer systems may include a computer system on which a hardware management console HMC resides. In such HMC managed systems as shown in the qualitative resource assignment wizard and or the validation feedback mechanism may be integrated into or operate in conjunction with the hardware management console in lieu of residing in the main memory of the computer system as shown in .

The present invention applies equally no matter how computer system may be connected to other computer systems such as the workstations and or the client systems regardless of whether the network connection is made using present day analog and or digital techniques or via some networking mechanism of the future. In addition many different network protocols can be used to implement network . These protocols are specialized computer programs that allow computers to communicate across network . TCP IP Transmission Control Protocol Internet Protocol is an example of a suitable network protocol.

At this point it is important to note that while the description above is in the context of a fully functional computer system those skilled in the art will appreciate that the qualitative resource assignment wizard and the validation feedback mechanism as well as the other software type entities described herein may be distributed as an article of manufacture also referred to herein as a computer program product in a variety of forms and the claims extend to all suitable types of computer readable media used to actually carry out the distribution including recordable type media such as floppy disks and CD RWs e.g. CD RW of .

Embodiments herein may also be delivered as part of a service engagement with a client corporation nonprofit organization government entity internal organizational structure or the like. These embodiments may include configuring a computer system to perform some or all of the methods described herein and deploying software hardware and web services that implement some or all of the methods described herein.

Operations of the different partitions in the computer system may be controlled through a hardware management console HMC such as the hardware management console shown in . Hardware management console is a separate computer system from which a system administrator for example may perform various functions including assignment of hardware resources to each logical partition as well as reassignment of resources to different partitions. IBM POWER6 processor based systems for example can be managed by an HMC. Note that the term hardware management console HMC is used herein in a very broad sense to include any system and logical partition management utility that may be used to manage a logically partitioned computer system. Thus as used herein the term HMC refers to any administrative console that communicates with firmware via APIs application programming interfaces .

As noted above in lieu of the qualitative resource assignment wizard and or the validation feedback mechanism residing in the main memory of the computer system as shown in the qualitative resource assignment wizard and or the validation feedback mechanism may reside in a memory and be executed by one or more processors of the HMC as described further below with reference to .

For example in the HMC managed embodiment shown in the qualitative resource assignment wizard and the validation feedback mechanism reside in a memory and are executed by one or more processors of a computer system that comprises the hardware management console . The HMC is connected to the multipartitioned computer system and to the other multipartitioned computer systems by a service network .

In accordance with the preferred embodiments of the present invention with the qualitative resource assignment wizard residing in memory on the HMC or other administrative console the user at HMC can utilize a graphical user interface GUI provided by the qualitative resource assignment wizard as described further below with reference to and to input qualitative information e.g. Number of Transactions per Minute Number of Customers and Priority . In general the qualitative resource assignment QRA wizard code can be in multiple disparate areas not just the main memory of the HMC . For example the QRA wizard may be integrated with storage management DBMS database management system etc. Also one skilled in the art will appreciate that the mechanism by which the user inputs data need not be graphical. Preferably the user inputs qualitative information both during a training phase and a partition creating changing phase. During the training phase the qualitative resource assignment wizard calculates a set of conversion functions using the qualitative information periodically input by the user and computer resource usage data gathered when the user invokes collection. During the partition creating changing phase the qualitative resource assignment wizard in conjunction with the partition management code uses the qualitative information and the conversion functions to assign computer resources to one or more of the partitions. Also in accordance with the preferred embodiments of the present invention the validation feedback mechanism ensures the executability and or advisability of the assignment of computer resources to the individual partition and or provides feedback to the user regarding the assignment. In the above described HMC managed embodiment both the qualitative resource assignment wizard and the validation feedback mechanism preferably reside in memory on the HMC .

In a modification of the above described HMC managed embodiment the qualitative resource assignment wizard and or the validation feedback mechanism may reside in memory and be executed by processor s of one or more additional computer systems not shown connected indirectly to the multipartitioned computer system and to the other multipartitioned computer systems through the HMC or other administrative console . For example the qualitative resource assignment wizard and or the validation feedback mechanism may run within IBM Systems Director which typically resides on a computer system networked to the HMC . IBM Systems Director is an integrated suite of tools that provides a platform management foundation for managing physical and virtual systems across a multi system environment.

In accordance with the preferred embodiments of the present invention the steps discussed below steps are performed during a training phase i.e. when the qualitative resource assignment wizard is being trained. In accordance with the preferred embodiments of the present invention these steps are preformed before a partition creating changing phase described further below with reference to . However at least some of these steps e.g. step etc. typically occur after a logical partition has been brought into existence. Hence such steps may be performed for example after a conventional logical partition deployment e.g. assignment of hardware resources to each logical partition . One skilled in the art will appreciate however that the QRA wizard may be working and gathering information in a stand alone system wherein the entire system in un partitioned and behaves like a single partition that owns every resource .

Method begins when the qualitative resource assignment wizard displays a graphical user interface GUI querying the user whether qualitative resource assignment is to be enabled for a given logical partition step . For example the Qualitative Resource Assignment QRA Enablement GUI shown in may be displayed. The user may enable qualitative resource assignment by selecting the Yes button or disable qualitative resource assignment by selecting the No button . This graphical Yes No mechanism of QRA Enablement GUI is merely an illustrative example of how a user may enable qualitative resource assignment. Indeed enablement need not be graphical. In accordance with the preferred embodiments of the present invention the Qualitative Resource Assignment QRA Enablement GUI may be provided on the display shown in of the computer system the display of the hardware management console shown in or some other networked device e.g. on a display of the client system shown in or some other networked computer running a web browser application .

Next the qualitative resource assignment wizard determines whether or not the user wishes to enable qualitative resource assignment step . If the user does not wish for qualitative resource assignment to be enabled step No the method returns step . On the other hand if the user wishes for qualitative resource assignment to be enabled step Yes the qualitative resource assignment wizard displays a GUI requesting the user to set up one or more usage constraints for the given logical partition step . The usage constraints define information that is qualitative e.g. Number of Transactions per Minute Number of Customers and Priority rather than computer science concepts that are commonly used in conventional logical partitioning management approaches such as the number of CPU s to move add remove amount of memory to move add remove adapters used by this partition free system adapters etc. In general the QRA wizard will have APIs and documentation that 1 allow users to connect existing monitoring technology CPU I O etc. to the QRA wizard to constantly feed data and 2 allow users to define new usage constraints e.g. Energy Cost .

For example during step the qualitative resource assignment wizard may display the Qualitative Resource Assignment QRA Setup GUI shown in . Through interaction with the QRA Setup GUI the user sets up one or more usage constraints. Although two usage constraints are shown in i.e. Usage Constraint and Usage Constraint one skilled in the art will appreciate that any number of usage constraints may be displayed. In this embodiment each usage constraint is defined by the user through entering information into various fields such as a Label field a Type field and a Values field . For example to set up Usage Constraint the user entered Number of Customers in the Label field and selected Numeric in the Type field . On the other hand to set up Usage Constraint the user entered Priority in the Label field selected Value from Set in the Type field and entered High Low Medium in the Values field . The inverted triangle in the Type field indicates that the user may select from a number of items e.g. Numeric Value from Set etc. in a drop down menu. The user may originate the usage constraints and or may select from a pre populated list. Also the user may add one or more new usage constraints by selecting the Add New . . . button . The user selects the Done button when finished setting up the usage constraints.

Also during step the user may be requested to enter a periodicity value defining how often e.g. once per day once per week once per month once per quarter twice per year once per year etc. the user is to be requested to input qualitative information with respect to the usage constraints. One skilled in the art will appreciate however that the timing of the requests for the user to input this qualitative information may be non periodic. For example during step the user may be requested to schedule the timing of these requests on a calendar. Alternatively the timing between requests for the user to input this qualitative information may be predetermined and or may be event driven. In addition during step the user may be requested to enter a duration value defining the duration of the training phase e.g. one week one month one quarter six months one year two years three years four years five years etc . Alternatively the duration of the training phase may be predetermined and or may be event driven or even non terminating. In general during IPL initial program load new version load fix pack load it is desirable for the user to be able to control whether or not all learned data is to be erased. Typically the training phase should start from scratch again under these circumstances. Also it is desirable for assignment information to be available to other subsystems so the requirements can be driven into a database optimizer for instance.

Next the qualitative resource assignment wizard determines whether or not the user has finished setting up the usage constraints step . If the user has selected the Add New . . . button step No the method returns to step . The qualitative resource assignment wizard may for example update the QRA Setup GUI to include fields for an additional usage constraint. On the other hand if the user had selected the Done button step Yes the qualitative resource assignment wizard displays a GUI requesting the user to input qualitative information for each of the usage constraints step . The input mechanisms of QRA Setup GUI are merely illustrative examples there are other ways to set up the usage constraint s .

For example during step the qualitative resource assignment wizard may display the Qualitative Resource Assignment QRA Data Collection GUI shown in . Through repeated interaction with the QRA Data Collection GUI at different points in time the user periodically or non periodically inputs qualitative information with respect to the usage constraints set up earlier in step . During the interaction with the QRA Data Collection GUI as illustrated in the user inputs 100 in the Number of Customers field and selects the value High in the Priority field . These are the two usage constraints the user set up earlier in step . The inverted triangle in the Priority field indicates that the user may select from a number of values e.g. High Low and Medium in a drop down menu. The user selects the Done button when finished inputting the qualitative information. The input mechanisms of QRA Data Collection GUI are merely illustrative examples there are other ways to collect the qualitative information.

Next the qualitative resource assignment wizard gathers computer resource usage data for the given logical partition step . In general the computer resource usage data may be streamed or input as may be the qualitative information. The computer resource usage data gathered may for example include energy cost processor usage data e.g. the number of processors assigned to the given logical partition the average percentage usage the maximum percentage usage memory usage data e.g. amount of memory assigned to the given logical partition the average percentage usage etc. and I O usage data e.g. specific I O slots assigned to the given logical partition . The computer resource usage data is preferable gathered at a point in time substantially coincident with the user s input of the qualitative information in step . For example the computer resource usage data may be gathered immediately after the user selects the Done button when finished inputting the qualitative information in step . Alternatively as implied by the message Collecting Usage Data . . . near the bottom of the QRA Data Collection GUI the computer resource usage data may be collected while the user inputs the qualitative information in step . This too is merely one way to do it in general there are other ways to assign define collect etc.

Next the qualitative resource assignment wizard computes one or more conversion functions step . The conversion function s is are computed based on the qualitative information input by the user in step and the computer resource usage data gathered in step over multiple points in time. Preferably the computation of the conversion function s in step is deferred until a sufficient number of data points i.e. the qualitative information and the computer resource usage data have been collected to allow application of a data fitting method or other conventional statistical analysis described further below with reference to .

The method continues with the qualitative resource assignment wizard determining whether or not the training phase has been completed step . For example the training phase may be complete when a sufficient number of data points have been collected to allow application of a data fitting method or other conventional statistical analysis. One skilled in the art will appreciate however that the QRA wizard may keep training after the first training only phase in order to refine the conversion function s .

If the training phase is not complete step No the qualitative resource assignment wizard waits for the expiration of a time out value step . For example the time out value may be a user defined e.g. in step periodicity value or a user scheduled non periodic timing predetermined or event driven. After expiration of the time out value the method returns to step . For example the qualitative resource assignment wizard may again display the Qualitative Resource Assignment QRA Data Collection GUI . During the interaction with the QRA Data Collection GUI as illustrated in the user inputs 200 in the Number of Customers field and selects the value Medium in the Priority field .

Preferably a conversion function is computed for each system resource e.g. memory processors etc. . Typically each conversion function is multi dimensional. For example the conversion functions for memory and processors in a multi dimensional example may be expressed as F x x . . . x F x x . . . x where the conversion function F x x . . . x is for processors the conversion function F x x . . . x is for memory and x x . . . xare qualitative information values Number of Customers Priority Number of Transactions per Minute etc. .

In accordance with the preferred embodiments of the present invention the steps discussed below steps are performed during a partition creating changing phase i.e. when the qualitative resource assignment wizard in conjunction with the hypervisor assigns computer resources to a new logical partition or changes the assignment of computer resources in an existing logical partition using qualitative information and at least one conversion function. Alternatively there need not be a partition. In accordance with the preferred embodiments of the present invention these steps are preformed after the training phase described above with reference to . However these steps may be performed without benefit of the training phase utilizing at least one predetermined conversion function.

Method begins when the qualitative resource assignment wizard displays a graphical user interface GUI requesting the user to input qualitative information step . One skilled in the art will appreciate however that the mechanism by which the user inputs the qualitative information need not be graphical. During step the user inputs qualitative information for one or more usage constraints which in accordance to the preferred embodiments of the present invention was were previously set up in the training phase. The qualitative information input by the user during step pertains to a new logical partition that is to be created or an existing logical partition for which the assignment of computer resources may be changed.

For example during step a Qualitative Resource Assignment QRA Create New Partition GUI shown in may be displayed. Through interaction with the QRA Create New Partition GUI the user inputs qualitative information with respect to one or more usage constraints set up in the training phase. During the interaction with the QRA Create New Partition GUI as illustrated in the user inputs 200 in the Customers field . This corresponds to one of the two usage constraints the user set up earlier e.g. at step in the training phase . The user selects the Done button when finished inputting the qualitative information.

Next the qualitative resource assignment wizard calculates the assignment of one or more computer resources in the new logical partition or calculates a change in the assignment of one or more computer resources in an existing logical partition step . Alternatively there need not be a partition. The qualitative assignment wizard calculates the computer resource assignment s based on the qualitative information input by the user in step and at least one conversion function computed earlier e.g. at step in the training phase . In accordance with the preferred embodiments of the present invention a different conversion function is used in the calculation of each computer resource assignment calculated by the qualitative resource assignment wizard.

In an optional step the method continues with the validation feedback mechanism if present validating each calculated computer resource assignment for the logical partition step . The processing unit assignment PUA for the logical partition calculated in step may be for example validated with respect to its executability and or advisability. For example step may implement a validation scheme ensuring that the qualitative information input by the user would yield a logical partition having a processing unit assignment PUA at or below a maximum processing capacity currently available. The validation scheme may include feedback to and or interaction with the user regarding the assignment e.g. prompts via a qualitative resource assignment wizard GUI . For example such prompts may inform the user that the processing unit assignment PUA for the logical partition is above a maximum processing capacity currently available. In this regard the prompts may also inform the user that more processing capacity will become available later e.g. during non peak hours and query the user whether he she desires to retry at that time or to change the value he she input for the qualitative information.

Finally the computer resource assignment calculated by the qualitative resource assignment wizard in step is provided to the hypervisor which then implements the calculated computer resource assignment step .

One skilled in the art will appreciate that many variations are possible within the scope of the present invention. Thus while the present invention has been particularly shown and described with reference to preferred embodiments thereof it will be understood by those skilled in the art that these and other changes in form and details may be made therein without departing from the spirit and scope of the present invention.

