---

title: Token-based payment processing system
abstract: A data-processing system, such as a payment processing system, including a tokenizer, such as a card encryption and storage system (CES) employing a tokenization feature. In one embodiment, the present invention provides a first-computer-implemented method for preventing the transmission of confidential information between a first computer and a second computer in communication with the first computer. The method includes the steps of: (a) the first computer receiving information for performing a transaction, the information including confidential information manually entered by a user; (b) the first computer sending the confidential information to a third computer; (c) the first computer receiving, from the third computer, a token having no algorithmic relationship to the confidential information; and (d) the first computer sending to the second computer (i) the information for performing the transaction, except for the confidential information, and (ii) the token.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08584251&OS=08584251&RS=08584251
owner: Princeton Payment Solutions
number: 08584251
owner_city: Princeton
owner_country: US
publication_date: 20100407
---
This application claims priority to U.S. Provisional Patent Application Ser. No. 61 167 221 filed Apr. 7 2009 the disclosure of which is incorporated herein by reference in its entirety.

The present invention relates to the introduction storage and use of confidential information in corporate enterprise systems and more specifically but not exclusively to the use of tokens as substitutes for confidential information in such systems.

The payment card industry PCI in response to the growing theft of payment card data resulting from inadequate information technology security has had an evolving set of security standards. Initially the payment application best practices PABP guidelines promulgated by the industry required merchants to encrypt card numbers.

Limitations in the PABP guidelines resulted in the September 2006 release of version 1.1 of the PCI Data Security Standard DSS and the related PCI Security Audit Procedures. These programs required more than mere encryption and mandated compliance in order to process payment card transactions. Under these programs merchants are required to document their compliance with the DSS depending on their annual volumes. The largest merchants must undergo an on site audit to verify merchant and processor compliance. Medium sized and smaller merchants are permitted to complete a self assessment attesting that various security features and programs have been implemented.

According to the DSS standards cardholder data is defined as any clear or encrypted primary account number PAN . The DSS standards declare that any system that processes stores or transmits cardholder data as well as any system on the same network segment i.e. one of a plurality of a subnetworks making up a corporate network must comply with the requirements of the DSS standards.

Additionally certain personally identifiable information PII may also give rise to regulatory scrutiny e.g. by federal law or the laws of individual states in the United States. The term PII refers to information that can be used to uniquely identify contact or locate a single person or can be used with other sources to uniquely identify a single individual. For example in a 2007 memorandum from the Executive Office of the President Office of Management and Budget OMB the U.S. Government defined PII information as Information which can be used to distinguish or trace an individual s identity such as their name social security number biometric records etc. alone or when combined with other personal or identifying information which is linked or linkable to a specific individual such as date and place of birth mother s maiden name etc. 

Similarly in the European Union Article 2a of EU directive 95 46 EC defines personal data as meaning any information relating to an identified or identifiable natural person data subject an identifiable person is one who can be identified directly or indirectly in particular by reference to an identification number or to one or more factors specific to his physical physiological mental economic cultural or social identity. 

Likewise personal information is defined in a section of the California data breach notification law SB1386 as meaning an individual s first name or first initial and last name in combination with any one or more of the following data elements when either the name or the data elements are not encrypted 1 social security number 2 driver s license number or California Identification Card number 3 account number credit or debit card number in combination with any required security code access code or password that would permit access to an individual s financial account. 

Compliance with DSS standards and other regulatory requirements of various jurisdictions typically requires that all computer systems involved in the processing of unencrypted sensitive data such as PCI and PII data and possibly including an entire corporate data center be compliant with such standards and requirements. The cost of compliance as well as the cost of verifying compliance can be substantial both operationally and financially.

Problems in the prior art are addressed in accordance with the principles of the present invention by providing a data processing system such as a payment processing system including a tokenizer such as a card encryption and storage system CES employing a tokenization feature. With tokenization rather than entering confidential information such as a payment card account number into an application module such as an enterprise resource planning ERP system e.g. SAP ERP the confidential information is instead captured and stored within the tokenizer prior to being sent to the application module. The tokenizer then returns a random string called a token to the calling application as a pointer to the original payment card number. The token preferably has no algorithmic relationship with the original payment card number so that the payment card number cannot be derived based on the token itself such as by merely applying a decryption algorithm to the token . Accordingly this token is not considered cardholder data because it is a random string from which it is not possible to extrapolate any original cardholder data without the use of the tokenizer which contains a list of payment card numbers and the tokens to which they correspond. As such the token may be used in an application module without the application module having to comply with regulatory standards e.g. the PCI DSS standards.

Under the PCI DSS regulatory scheme if cardholder data including any clear or encrypted payment card account number is present in an application module either alone or together with a cardholder name service code and or expiration date then the application module is within the scope of regulatory scrutiny. Accordingly if cardholder data can be replaced by some other non account number string then a host application no longer employs cardholder data and is out of the scope of PCI DSS regulatory scrutiny.

In one embodiment the present invention provides a first computer implemented method for preventing the transmission of confidential information between a first computer and a second computer in communication with the first computer. The method includes the steps of a the first computer receiving information for performing a transaction the information including confidential information manually entered by a user b the first computer sending the confidential information to a third computer c the first computer receiving from the third computer a token having no algorithmic relationship to the confidential information and d the first computer sending to the second computer i the information for performing the transaction except for the confidential information and ii the token.

In another embodiment the present invention provides an apparatus for preventing the transmission of confidential information to a second computer in communication with the apparatus. The apparatus is adapted to a receive information for performing a transaction the information including confidential information manually entered by a user b send the confidential information to a third computer c receive from the third computer a token having no algorithmic relationship to the confidential information and d send to the second computer i the information for performing the transaction except for the confidential information and ii the token.

In a further embodiment the present invention provides a non transitory machine readable storage medium having encoded thereon program code wherein when the program code is executed by a machine the machine implements a method for preventing the transmission of confidential information from a first computer and a second computer in communication with the first computer. The method includes the steps of a the first computer receiving information for performing a transaction the information including confidential information manually entered by a user b the first computer sending the confidential information to a third computer c the first computer receiving from the third computer a token having no algorithmic relationship to the confidential information and d the first computer sending to the second computer i the information for performing the transaction except for the confidential information and ii the token.

In yet a further embodiment the present invention provides a first computer implemented method for preventing the transmission of confidential information between a first computer and a second computer in communication with the first computer. The method includes the steps of a the first computer inspecting an entry field of a window of a software program to determine whether the entry field includes confidential information b if the entry field includes confidential information then b1 the first computer sending the confidential information to a third computer and b2 the first computer receiving from the third computer a token having no algorithmic relationship to the confidential information and c the first computer replacing the confidential information in the entry field of the window of the software program with the token.

In still a further embodiment the present invention provides a first computer implemented method for preventing the transmission of confidential information between a first computer and a second computer in communication with the first computer. The method includes the steps of a the first computer receiving one or more packets of data from the first computer b the first computer inspecting the one or more packets of data to determine whether the one or more packets of data include confidential information b if the one or more packets of data include confidential information then b1 the first computer sending the confidential information to a third computer and b2 the first computer receiving from the third computer a token having no algorithmic relationship to the confidential information c the first computer modifying the one or more packets of data by replacing the confidential information in the one or more packets of data with the token and d the first computer forwarding the one or more modified packets of data to the second computer.

Whether payment card data is entered through web store or through input module by tokenizing before capture tokenizer protects and isolates cardholder data by providing tokens for downstream processing which prevents application module from being subject to regulatory scrutiny.

Payment processing system is compliant with e.g. the PCI DSS standards which require that in scope systems i.e. systems falling within the scope of regulation of the PCI DSS standards be isolated from the rest of the corporate network e.g. via a firewall. The DSS standards also require that public Internet facing web servers be isolated as well. Payment processing system therefore employs three in scope network segments or zones for PCI purposes i a web server zone including web store ii a customer service zone including input module and iii a PCI server zone including tokenizer and payment card middleware . Achieving and maintaining PCI compliance using these three well defined and limited network segments and their corresponding functionality can be considerably simpler and more manageable to implement than remediating or modifying large sections of a corporate network.

Tokenizer includes one or more computers containing a token database and a token application . Token database may be implemented using e.g. a simple look up table or a more complex database system such as Oracle Database 10g available from Oracle Corporation of Redwood City Calif. Token database contains encrypted payment card numbers along with a corresponding token for each encrypted payment card number in the database.

Token application encrypts payment card numbers as they are received and generates random tokens corresponding to those payment card numbers. In one embodiment a payment card number having a value of 371449635398183 might have a corresponding token with a randomly generated alphanumeric string value of Nc4xWKms. In another embodiment part of the token might contain part of the payment card number e.g. such that the payment card type first two digits of the payment card number where 37 represents American Express 40 represents Visa and 54 represents Mastercard and last four digits of the card are actually part of the token itself to assist customers and customer service representatives in confirming or identifying generally the card corresponding to the token. For example a payment card number having a value of 371449635398183 might have a corresponding token with a value of 37 Nc4xWKms 8183 where i the first two digits 37 identify the card as being of type American Express ii the middle portion of the token is a randomly generated alphanumeric string and iii the last four digits 8183 are usable to confirm the card number with the cardholder if necessary.

Token application is desirably implemented as a Java application so that it can execute on any platform with the Java Runtime Environment from Sun Microsystems Inc. of Santa Clara Calif. installed. For most workloads e.g. under 10 million payment card transactions per year token application preferably executes on a machine such as the SunFire 4100 from Sun Microsystems Inc. System x3650 from IBM Corporation of Armonk N.Y. or Poweredge 2950 from Dell Inc. of Round Rock Tex.

Token application interfaces with token database to write information to token database e.g. to write an encrypted payment card number and corresponding newly generated token as a new entry in token database . In one embodiment a table stored in token database might contain a table with entries such as the following payment card number token pairs 

Token application also interfaces with token database to read information from token database e.g. to retrieve a payment card number based on a given token or to retrieve a token for a payment card number that has already been stored. Token application further interfaces using a secure socket layer SSL protocol with one or both of web store and input module e.g. to respond to a request to generate a new token or retrieve a previously generated token from token database based on a payment card number. Token application further interfaces with payment card middleware e.g. to respond to a request to retrieve a payment card number based on a supplied token.

It is desirable that multiple instances of token application execute in parallel within tokenizer to provide redundancy and stability and it is further desirable that at least two instances of token application be running full time one in a primary location and one in a backup location e.g. on different computers processors . Likewise token database is desirably stored in more than a single location to provide redundancy and tokenizer may therefore include a primary database server in the primary location which is backed up by a recovery database server in the backup location.

For interfacing with source applications such as web sites and related applications e.g. web store tokenizer employs i either a hyper text transport protocol HTTP or secure HTTP HTTPS socket interface in conjunction with ii an SSL socket interface. In this scenario tokenizer uses two different APIs corresponding to these two interfaces respectively i an HTTP API e.g. for communicating name value pairs e.g. MIME Type URL Form Encoded such as action CE data 1234123412341234 and ii a socket API communicating in a fixed format e.g. FF0027CE01bbbbbbb1234123412341234 where the character b represents a blank. In both cases SSL is used to encrypt the transmission. The reason for having two APIs is that the HTTP protocol uses a socket setup teardown procedure for each transaction whereas a socket connection is persistent across many transactions and is therefore more suitable for high volume interactions such as with payment card middleware which needs to detokenize many transactions in short timeframes.

A single request response call from web store sends the payment card number in clear card form to tokenizer and receives a corresponding token from tokenizer before passing the tokenized transaction along to application module .

With reference now to an exemplary algorithm for token application will now be described. The algorithm is instantiated at step . Next at step token application waits to receive an input string from a calling module e.g. one or more of web store input module and payment card middleware . Next at step an input string is received from the calling module. Next at step a determination is made whether the input string is a payment card number or a token. If at step it is determined that the input string is a payment card number then token application proceeds to step . If at step it is determined that the input string is a token then token application proceeds to step .

At step a search of token database is performed to determine whether the payment card number already exists in the database. If at step it is determined that the payment card number does not already exist in the database then token application proceeds to step . If at step it is determined that the payment card number already exists in the database then token application proceeds to step .

At step token application generates a token which is desirably a random alphanumeric string. This alphanumeric string is not generated in any way based on the payment card number and does not have any algorithmic relationship to the payment card number. Accordingly the token cannot be later be used to generate the payment card number without the use of tokenizer .

Next at step token application stores the payment card number in encrypted form together with the token in token database . Next at step token application outputs the token to the calling module and then returns to step .

At step the token corresponding to the payment card number is retrieved from token database and then the algorithm proceeds to step .

At step a search of token database is performed to determine whether the token exists in the database. If at step it is determined that the token does not exist in the database then token application returns to step . If at step it is determined that the token does already exist in the database then token application proceeds to step . At step the payment card number corresponding to the token is retrieved from token database . Next at step token application outputs the payment card number to the calling module and then returns to step .

The PCI DSS provisions require that applications be separated from database functions. Thus compliance with the DSS standards involves a minimum configuration of four computer systems an application system and a database system in the primary location along with another pair of such systems in the backup location. Because tokenizer can be adapted to function properly using only generic user privileges other payment card applications can also be hosted on these four computer systems.

In an alternative embodiment token application is a payment card middleware application e.g. in lieu of payment card middleware and resides on an isolated network segment so as to be compliant with e.g. PCI DSS requirements.

Payment processing system employs two different possibly sources of payment card information i public Internet facing web sites and related applications implementing shopping card one time pay or account maintenance functions and ii customer service call centers or physical points of sale where end customers provide cardholder data to customer service representatives who enter the cardholder data. Accordingly payment processing system includes both a web store and an input module to achieve this functionality. In alternative embodiments only one of web store and input module might be provided.

Web store includes one or more computers containing an application used by an end user e.g. a consumer making a purchase from an online web merchant to purchase one or more goods and or services. During the payment portion of a purchase transaction web store employs an application programming interface API to transmit a payment card number to tokenizer which returns a token for web store to send to application module along with other transaction data.

Input module includes one or more computers containing an order taking application interface e.g. SAP graphical user interface SAP GUI or other software used by a customer service representative to enter customer data. The customer service representative uses input module e.g. to take an order by phone or in person at a physical point of sale. Input module includes a desktop token interface which interfaces with tokenizer . Desktop token interface transmits a payment card number to tokenizer which returns a token for input module to send to application module along with other transaction data.

Input module is desirably implemented in a customer service workstation of a customer service center. Desktop token interface is an application e.g. a Microsoft Windows applet written in the Visual Basic programming language into which a customer service representative manually enters a customer s payment card number e.g. by typing . Desktop token interface uses an application programming interface API to send the payment card number in clear card form to tokenizer which encrypts and stores the payment card number in token database and returns to desktop token interface a token corresponding to the card number. Desktop token interface then saves the token to the Windows clipboard although a buffer other than an operating system clipboard could alternatively be used to achieve similar functionality in other embodiments thus allowing a single key or mouse click paste operation to enter the token into the relevant entry screen field within input module . Accordingly with only about four additional key strokes or mouse clicks i.e. in addition to the customer data entry operations ordinarily being performed a customer service representative can use desktop token interface to tokenize a payment card number.

With reference now to an exemplary algorithm for desktop token interface will now be described. At step the applet is instantiated. Next at step the applet waits in the background for a predefined keystroke e.g. ALT F12 to be pressed. This keystroke will be pressed by a customer service representative using the order taking software running on input module to effect a purchase of goods or services at the moment the customer service representative is ready to enter a customer s payment card number. Instead of entering the payment card number directly into the order taking software such that the order taking software would be subject to regulatory compliance the customer service representative uses the predefined keystroke to activate the applet.

Next at step a relatively small entry window is displayed on the screen of the customer service representative e.g. on top of or adjacent to the order taking software window . It is desirable that the entry window contain only a single input field. The window might also contain a clickable submit button. The customer service representative types a customer s payment card number into the input field of the entry window and presses the Enter key or clicks the submit button if one is provided .

Next at step the customer s payment card number is received in clear card form from the input field of the entry window. Next at step a determination is made whether the payment card number entered is a valid card number using e.g. a Luhn check also called a Mod 10 check . If at step it is determined that the card number is invalid then at step an error message is displayed on the screen of the customer service representative and the applet returns to step . If at step it is determined that the card number is valid then the algorithm proceeds to step .

At step a tokenization request containing the payment card number is sent via an encrypted socket using the HTTPS protocol to tokenizer which returns a token corresponding to the payment card number. Next at step the token is received from tokenizer . Next at step the token is copied to the Windows OS clipboard. The token may also be displayed on the screen to confirm to the customer service representative that the tokenization was successful. Following step the applet returns to step . At this point the token has been stored in the Windows OS clipboard.

Next the customer service representative changes application focus from the applet window to the order taking software window. It is noted that this may not be necessary in certain embodiments in which the applet closes the entry window once a token has been generated because the application focus automatically returns to the order taking software window upon closure of the applet s entry window. The customer service representative then pastes the token from the Windows OS clipboard into the payment card number field of the order taking software. This can be done for example using a sequence of mouse controls e.g. right click then selecting Paste from a drop down menu or keystroke e.g. CTRL V . The customer service representative then submits the order to application module for processing e.g. by pressing a send button on a screen of the order taking software window.

In the foregoing manner at no point does the payment card number in clear card form ever enter application module and application module is therefore not subject to regulatory scrutiny.

Further details are provided in which show exemplary Visual Basic program code for implementing algorithm of .

One exemplary algorithm in one embodiment of desktop token interface has been described above in which a customer service representative manually requests a token from tokenizer and then before initiating a clearing house transaction manually pastes the token into a field within input module that would conventionally be filled with a payment card number in clear card form. In an alternative embodiment that will now be described desktop token interface automatically extracts a payment card number in clear card form that was entered by a customer service representative into a field within input module requests a token from tokenizer and replaces the clear card form payment card number with the token all before initiating a clearing house transaction.

With reference now to an exemplary algorithm for an alternative embodiment of desktop token interface will now be described. Instead of being embodied in a Windows applet as in the case of algorithm algorithm is embodied in a script. For example the SAP ERP software employs a Windows application front end interface called SAP GUI which provides a method for SAP customers to develop their own scripts to extend the functionality of SAP ERP. Accordingly algorithm is desirably implemented as a SAP GUI script within input module .

In this scenario a customer service representative uses the SAP GUI order taking application interface running on input module to effect a purchase of goods or services. The customer service representative takes the customer s order and enters all of the relevant order information including a customer s payment card number into a standard order screen e.g. the VA01 Create Sales Order screen . After entering all of the information the customer service representative presses the Save icon on the standard order screen. Normally pressing Save would cause all of the information on the order screen including any payment card numbers in clear card form to be submitted to an application module for processing which would subject the application module to regulatory scrutiny. However in this embodiment the SAP GUI script is configured so that pressing Save instantiates the script that implements algorithm before any information is sent to application module .

At step the script is instantiated. Next at step the script searches all fields present on the standard order screen form for one or more fields labeled CCNUM or uses other criteria to locate fields that contain payment card numbers in clear card form to determine whether the order screen form contains any fields populated with payment card numbers. If at step it is determined that the order screen form has no fields that contain payment card numbers in clear card form then the script proceeds to step at which an error message is displayed on the screen of the customer service representative and the script subsequently exits with an error condition at step . If at step it is determined that the order screen form has fields that contain payment card numbers in clear card form then the script proceeds to step .

At step the script reads the payment card number in clear card form from the field of the order screen form. Next at step a determination is made whether the payment card number entered is a valid card number using e.g. a Luhn check also called a Mod 10 check . If at step it is determined that the card number is invalid then at step an error message is displayed on the screen of the customer service representative and the script subsequently exits with an error condition at step . If at step it is determined that the card number is valid then the algorithm proceeds to step .

At step a tokenization request containing the payment card number is sent via an encrypted socket using the HTTPS protocol to tokenizer which returns a token corresponding to the payment card number.

Next at step the token is received from tokenizer . Next at step the script removes the payment card number in clear card form from the field of the order screen form and replaces it with the received token.

Next at step a determination is made whether there are additional payment card numbers on the order screen form in which case the script returns to step to process the next payment card number found on the order screen form. Otherwise the script proceeds to step .

At step the script submits all of the information on the order screen form including tokens that replace the payment card numbers in clear card form to application module . Next at step the script exits with a success condition.

If the script exits with an error condition at step then the customer service representative is taken back to the order entry screen to make corrections e.g. supplying a missing payment card number or correcting an invalid payment card number. Once appropriate correction has been made the customer service representative can then press save to retry and algorithm is once again instantiated.

In the foregoing manner it is not necessary for the customer service representative to manually activate an applet or paste a token into any application as in the case of algorithm and the entire tokenization process can occur seamlessly and in the background without any special knowledge or actions on the part of the customer service representative.

Further details are provided in which show exemplary SAP GUI program code for implementing algorithm of .

Application module is a commercial enterprise system including one or more computers containing software adapted to handle sales orders delivery tracking billing account settlement and related functionality e.g. a system including mySAP Business Suite software available from SAP Americas located in Newtown Square Pa. Application module receives from web store tokenized web transactions e.g. by means of an API capable of accessing functionality within application module such as SAP Business Application Programming Interface BAPI . Alternatively or additionally application module receives from input module tokenized customer service transactions and account updates e.g. by means of a universal client interface e.g. SAP GUI within input module which is capable of accessing functionality within application module . Application module sends tokenized requests for authorization and settlement to payment card middleware and receives from application module tokenized responses to those requests e.g. by means of a standard interface for communication with application module such as SAP Remote Function Call RFC .

It should be understood that application module does not process transmit or store any PCI or PII data and is therefore not subject to regulatory scrutiny. The transactions that take place between application module and web store and or input module are all in tokenized form and do not include any PCI or PII data. Similarly authorization and settlement transactions between application module and payment card middleware are also in tokenized form and do not include any PCI or PII data. This scheme may be referred to as a tokenize before capture approach whereby all front end sources of entry for payment card accounts e.g. web store and input module are configured to tokenize the clear card form of the payment card number before passing the transaction along to back end systems e.g. application module for processing.

Payment card middleware includes one or more computers containing software that receives and responds to the tokenized authorization and settlement requests from application module with each request including a supplied token for which the corresponding payment card number is to be retrieved from token database . Payment card middleware interfaces with tokenizer via an SSL interface to send requests for detokenization using the supplied token and to receive responses to those requests in the form of a payment card number in clear card form. Payment card middleware interfaces e.g. via SSL or private lines with a clearing house e.g. the Automated Clearing House ACH payment system to provide a clearing house transaction request that includes the clear card form payment card number for the purpose of effecting the actual payment transaction.

Payment card middleware may include card processing software such as PPS PayWare available from Princeton Payment Solutions of Princeton N.J. Embodiments of payment card middleware may be token aware i.e. may be configured to distinguish automatically between tokens and payment card numbers in clear card form. In this manner if a settlement request contains a payment card number in clear card form then payment card middleware provides the clearing house transaction request to clearing house without using tokenizer . If however a settlement request contains a token instead of a payment card number then payment card middleware first uses tokenizer to obtain the corresponding payment card number prior to providing the clearing house transaction request to clearing house . Accordingly payment card middleware can be used as middleware for processing both tokenized transactions and non tokenized transactions e.g. from applications other than application module .

In addition to having utility for payment card data entry and processing at a point of sale embodiments of payment processing system can also be used to migrate bulk cardholder data stored in commercial enterprise system tables e.g. the SAP BSEGC or FPLTC tables to tokenizer . In this scenario one or more modules of tokenizer e.g. payment card middleware are provided with software to effect such data migration. Migration is desirably performed while no active payment transactions are taking place to avoid locked payment card entries in the source table but this is not a requirement and the migration routine can be performed one or more additional times to ensure the migration of table entries locked during previous runs of the migration routine. If payment card middleware is configured to distinguish automatically between tokens and payment card numbers in clear card form and automatically return one when the other is supplied as described above then a migration to tokens can be performed with minimal commercial enterprise system downtime.

With reference now to a second exemplary payment processing system consistent with one embodiment of the invention will now be described. Payment processing system is similar to payment processing system except as described below.

Packet inspector receives packets containing transactions in non tokenized form from input module inspects each incoming packet for payment card numbers in clear card form and tokenizes those payment card numbers prior to passing the packet along to application module . Packet inspector tokenizes the payment card numbers by sending the payment card numbers in clear card form to tokenizer which encrypts and stores the payment card numbers in token database and returns to packet inspector a token corresponding to the card number. Packet inspector replaces the clear card form payment card numbers found in packets passing through packet inspector with tokens prior to sending those packets to application module so that packets containing transactions that are sent to application module contain only tokenized transactions.

With reference now to an exemplary algorithm for packet inspector will now be described. Algorithm is desirably embodied in a script running on packet inspector e.g. a tool command language TCL script used in conjunction with the BIG IP product series from F5 Networks Inc. TCL scripts have access to all traffic passing through packet inspector and have the ability to inspect and alter any data passing through packet inspector .

At step the script is instantiated. Next at step a packet arriving at packet inspector is received. Next at step the script inspects the packet to determine whether the referring page from which the packet originated is a target web page which is a web page that is known or expected to request a payment card number from a customer service representative. This is done by comparing the Referrer field which indicates the web page from which the packet originated in the HTTP header with a list of known target web pages. If at step it is determined that the packet is not from a target web page then the script returns to step to receive the next packet. If at step it is determined that the packet is from a target web page then the script proceeds to step . At step the script inspects the packet to determine whether a field named CCNUM exists or uses other criteria to locate fields that contain payment card numbers in clear card form the presence of which indicates that the packet contains at least one field populated with a payment card number. If at step it is determined that the packet has no fields that contain payment card numbers in clear card form then the script returns to step to receive the next packet. If at step it is determined that the packet has fields that contain payment card numbers in clear card form then the script proceeds to step .

At step the script reads the payment card number in clear card form from the field of the packet. Next at step a determination is made whether the payment card number is a valid card number using e.g. a Luhn check also called a Mod 10 check . If at step it is determined that the card number is invalid then there is no actual card number that needs to be tokenized and the script returns to step to receive the next packet. If at step it is determined that the card number is valid then at step a tokenization request containing the payment card number is sent via an encrypted socket using the HTTPS protocol to tokenizer which returns a token corresponding to the payment card number.

Next at step the token is received from tokenizer . Next at step the script removes the payment card number in clear card form from the field of the packet and replaces it with the received token.

Next at step a determination is made whether there are additional payment card numbers in the packet in which case the script returns to step to process the next payment card number found in the packet. Otherwise the script proceeds to step .

At step the modified packet including tokens that replace the payment card numbers in clear card form is sent to application module after which the script returns to step .

Further details are provided in which show exemplary TCL program code for implementing algorithm of .

It should be understood that various changes in the details materials and arrangements of the parts which have been described and illustrated in order to explain the nature of this invention may be made by those skilled in the art without departing from the scope of the invention as expressed in the following claims.

For example it should be understood that the inventive concepts of embodiments of the invention may be applied not only in payment processing systems as described above but also in any other systems involving the use of confidential information.

Accordingly although the embodiments described herein are generally in the context of a payment processing system that uses tokens as a substitute for payment card numbers it should be understood that the present invention includes the use of tokens as substitutes for other information desirably kept separate from one or more applications even outside the context of payment processing systems e.g. medical records management systems age verification systems that use driver s licenses etc. Such information can include payment card numbers and other payment related information e.g. bank account numbers credit or debit card numbers security codes access codes and passwords as well as other identifying information e.g. first and or last names social security numbers driver s license numbers government issued or school issued identification numbers biometric records birth dates and places mother s maiden name etc. and it should be understood that the term confidential information as used herein encompasses all of the foregoing as well as other information desirably kept separate from one or more applications computers or computer systems. Likewise the term transaction should be understood as encompassing all transactions that employ confidential information including e.g. medical insurance transactions such as might be used by a medical provider to bill a patient s insurance company age verification transactions such as might be used to verify the age of a patron ordering alcoholic beverages using a driver s license transactions for identifying individuals such as social security number verification systems and the like.

Conventionally when encryption is used to protect data representing confidential information the resulting encrypted string or number is often larger than the data representing the original confidential information. In the case of ERP applications that restrict the size and or type of data such as a social security number to a predetermined format the process of encryption can result in a value larger that the field allotted thereby making it difficult or impossible to re introduce the encrypted value back into the original field. However because a tokenizer consistent with embodiments of the invention uses tokens having a predefined format as a substitution for confidential information tokens can be generated that conform with a predefined field length or type. For example if the confidential information being tokenized is a social security number which is limited to 9 numeric characters then a random token having 9 numeric characters can be generated in place of an actual social security number so that the token can be used in the original social security number field. Thus using tokens in embodiments of the invention permits a predefined and formatted value substitution with conventional software applications while exempting those software applications from regulatory scrutiny.

It should be understood that the term random as used herein should not be construed as being limited to pure random selections or pure random character and or number generations but should be understood to include pseudo randomly generated alphanumeric strings including seed based selections or alphanumeric generations as well as other selection or character number generation methods that might simulate randomness but are not purely random. A hashing function might be used in embodiments of the present invention and such hashing function may be based on random numbers non random numbers or combinations of random and non random numbers provided that the hashing function is not based on confidential information itself. The term random should also be construed as including other non random alphanumeric sequences provided that such sequences have no algorithmic relationship with any confidential information to which such sequences correspond.

The term packet inspector as used herein refers to any combination of hardware and or software used to receive packets of data examine the contents of those packets selectively modify the contents of those packets and forward those packets to other hardware and or software systems for further processing. In certain embodiments a packet inspector is implemented purely in software and may reside on a general purpose computer e.g. the same computer as input module or other computing device and in other embodiments a packet inspector may be a separate dedicated hardware packet inspection appliance. A packet inspector as used in embodiments of the invention may also include other functionality e.g. load balancing or fail over protection.

As used herein the term module refers to any of an application specific integrated circuit ASIC an electronic circuit a processor shared dedicated or group that executes one or more software or firmware programs a combinational logic circuit and or other suitable components that provide the described functionality

The present invention can be embodied in the form of methods and apparatuses for practicing those methods. The present invention can also be embodied in the form of program code embodied in tangible media such as magnetic recording media optical recording media solid state memory floppy diskettes CD ROMs hard drives or any other non transitory machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing embodiments of the invention. The present invention can also be embodied in the form of program code for example stored in a non transitory machine readable storage medium including being loaded into and or executed by a machine wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing embodiments of the invention. When implemented on a general purpose processor the program code segments combine with the processor to provide a unique device that operates analogously to specific logic circuits.

The present invention can also be embodied in the form of a bitstream or other sequence of signal values stored in a non transitory recording medium generated using a method and or an apparatus of the present invention.

It will be appreciated by those skilled in the art that although the functional components of the exemplary embodiments of the system of the present invention described herein may be embodied as one or more distributed computer program processes data structures dictionaries and or other stored data on one or more conventional general purpose computers e.g. IBM compatible Apple Macintosh and or RISC microprocessor based computers mainframes minicomputers conventional telecommunications e.g. modem T1 fiber optic line DSL satellite and or ISDN communications memory storage means e.g. RAM ROM and storage devices e.g. computer readable memory disk array direct access storage networked together by conventional network hardware and software e.g. LAN WAN network backbone systems and or Internet other types of computers and network resources may be used without departing from the present invention. One or more networks discussed herein may be a local area network wide area network internet intranet extranet proprietary network virtual private network a TCP IP based network a wireless network e.g. IEEE 802.11 or Bluetooth an e mail based network of e mail transmitters and receivers a modem based cellular or mobile telephonic network an interactive telephonic network accessible to users by telephone or a combination of one or more of the foregoing.

Embodiments of the invention as described herein may be implemented in one or more computers residing on a network transaction server system and input output access to embodiments of the invention may include appropriate hardware and software e.g. personal and or mainframe computers provisioned with Internet wide area network communications hardware and software e.g. CQI based FTP Netscape Navigator Mozilla Firefox Microsoft Internet Explorer or Apple Safari HTML Internet browser software and or direct real time or near real time TCP IP interfaces accessing real time TCP IP sockets for permitting human users to send and receive data or to allow unattended execution of various operations of embodiments of the invention in real time and or batch type transactions. Likewise the system of the present invention may include one or more remote Internet based servers accessible through conventional communications channels e.g. conventional telecommunications broadband communications wireless communications using conventional browser software e.g. Netscape Navigator Mozilla Firefox Microsoft Internet Explorer or Apple Safari . Thus the present invention may be appropriately adapted to include such communication functionality and Internet browsing ability. Additionally those skilled in the art will recognize that the various components of the server system of the present invention may be remote from one another and may further include appropriate communications hardware software and or LAN WAN hardware and or software to accomplish the functionality herein described.

Each of the functional components of the present invention may be embodied as one or more distributed computer program processes running on one or more conventional general purpose computers networked together by conventional networking hardware and software. Each of these functional components may be embodied by running distributed computer program processes e.g. generated using full scale relational database engines such as IBM DB2 Microsoft SQL Server Sybase SQL Server or Oracle 10g database managers and or a JDBC interface to link to such databases on networked computer systems e.g. including mainframe and or symmetrically or massively parallel computing systems such as the IBM SB2 or HP 9000 computer systems including appropriate mass storage networking and other hardware and software for permitting these functional components to achieve the stated function. These computer systems may be geographically distributed and connected together via appropriate wide and local area network hardware and software. In one embodiment data stored in the token database or other program data may be made accessible to the user via standard SQL queries for analysis and reporting purposes.

Primary elements of embodiments of the invention may be server based and may reside on hardware supporting an operating system such as Microsoft Windows NT 2000 or UNIX.

Components of a system consistent with embodiments of the invention may include mobile and non mobile devices. Mobile devices that may be employed in the present invention include personal digital assistant PDA style computers e.g. as manufactured by Apple Computer Inc. of Cupertino Calif. or Palm Inc. of Santa Clara Calif. and other computers running the Android Symbian RIM Blackberry Palm webOS or iPhone operating systems Windows CE handheld computers or other handheld computers possibly including a wireless modem as well as wireless cellular or mobile telephones including GSM phones J2ME and WAP enabled phones Internet enabled phones and data capable smart phones one and two way paging and messaging devices laptop computers etc. Other telephonic network technologies that may be used as potential service channels in a system consistent with embodiments of the invention include 2.5G cellular network technologies such as GPRS and EDGE as well as 3G technologies such as CDMA1xRTT and WCDMA2000 and 4G technologies. Although mobile devices may be used in embodiments of the invention non mobile communications devices are also contemplated by embodiments of the invention including personal computers Internet appliances set top boxes landline telephones etc. Clients may also include a PC that supports Apple Macintosh Microsoft Windows 95 98 NT ME CE 2000 XP Vista 7 a UNIX Motif workstation platform or other computer capable of TCP IP or other network based interaction. In one embodiment no software other than a web browser may be required on the client platform.

Alternatively the aforesaid functional components may be embodied by a plurality of separate computer processes e.g. generated via dBase Xbase MS Access or other flat file type database management systems or products running on IBM type Intel Pentium or RISC microprocessor based personal computers networked together via conventional networking hardware and software and including such other additional conventional hardware and software as may be necessary to permit these functional components to achieve the stated functionalities. In this alternative configuration since such personal computers typically may be unable to run full scale relational database engines of the types presented above a non relational flat file table not shown may be included in at least one of the networked personal computers to represent at least portions of data stored by a system according to the present invention. These personal computers may run the Unix Microsoft Windows NT 2000 or Windows 95 98 NT ME CE 2000 XP Vista 7 operating systems. The aforesaid functional components of a system according to the present invention may also include a combination of the above two configurations e.g. by computer program processes running on a combination of personal computers RISC systems mainframes symmetric or parallel computer systems and or other appropriate hardware and software networked together via appropriate wide and local area network hardware and software .

A system according to the present invention may also be part of a larger computerized financial transaction system including multi database or multi computer systems or warehouses wherein other data types processing systems e.g. transaction financial administrative statistical data extracting and auditing data transmission reception and or accounting support and service systems and or storage methodologies may be used in conjunction with those of the present invention to achieve an overall information management processing storage search statistical and retrieval solution for a particular lock box service provider e payment warehouser biller organization financial institution payment system commercial bank and or for a cooperative or network of such systems.

In one embodiment source code may be written in an object oriented programming language using relational databases. Such an embodiment may include the use of programming languages such as C and toolsets such as Microsoft s .Net framework. Other programming languages that may be used in constructing a system according to the present invention include Java HTML Perl UNIX shell scripting assembly language Fortran Pascal Visual Basic and QuickBasic. Those skilled in the art will recognize that the present invention may be implemented in hardware software or a combination of hardware and software.

Accordingly the term computer as used herein should be understood to mean a combination of hardware and software components including at least one machine having a processor with appropriate instructions for controlling the processor. The term computer can be used to refer to more than a single computing device e.g. multiple personal computers or one or more personal computers in conjunction with one or more other devices such as a router hub packet inspection appliance firewall etc.

A system consistent with the present invention may interact with established payment networks e.g. the Automated Clearing House ACH to provide payment options such as ACH debits credit or procurement card payments and or paper checks which may be generated internally or by an external software module wherein an output file in a format capable of being read by the external module may be generated. Payment by a payer system user using a credit or procurement card may also be effected to be processed by Internet or other means. In this scenario additional security levels may be included e.g. for initiating credit or debit card payments and approving credit or debit card payments and such appropriate payment card processing functionality as may be appropriate may be included as well.

It should also be appreciated from the outset that one or more of the functional components may alternatively be constructed out of custom dedicated electronic hardware and or software without departing from the present invention. Thus the present invention is intended to cover all such alternatives modifications and equivalents as may be included within the spirit and broad scope of the invention.

Unless explicitly stated otherwise each numerical value and range should be interpreted as being approximate as if the word about or approximately preceded the value of the value or range.

It should be understood that the steps of the exemplary methods set forth herein are not necessarily required to be performed in the order described and the order of the steps of such methods should be understood to be merely exemplary. Likewise additional steps may be included in such methods and certain steps may be omitted or combined in methods consistent with various embodiments of the present invention.

Although the elements in the following method claims if any are recited in a particular sequence with corresponding labeling unless the claim recitations otherwise imply a particular sequence for implementing some or all of those elements those elements are not necessarily intended to be limited to being implemented in that particular sequence.

Reference herein to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment can be included in at least one embodiment of the invention. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment nor are separate or alternative embodiments necessarily mutually exclusive of other embodiments. The same applies to the term implementation. 

The embodiments covered by the claims in this application are limited to embodiments that 1 are enabled by this specification and 2 correspond to statutory subject matter. Non enabled embodiments and embodiments that correspond to non statutory subject matter are explicitly disclaimed even if they fall within the scope of the claims.

