---

title: Systems and methods for managing data in cloud storage using deduplication techniques
abstract: A computer-implemented method for managing data in cloud storage using deduplication techniques is described. At least one unique segment of data is received from at least one backup source. The at least one unique segment of data is written to at least one container file associated with the at least one back up source. An index file is created for the at least one container file. The index file includes information regarding the unique segments of data. A plurality of the unique segments of data is transmitted from the at least one container file as an object to a virtual container on cloud storage. A virtual container is composed of an index file and one or more container files, and the index file and each container file are stored as individual cloud storage objects. Spatial locality of the plurality of unique segments of data is maintained in cloud storage.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08650159&OS=08650159&RS=08650159
owner: Symantec Corporation
number: 08650159
owner_city: Mountain View
owner_country: US
publication_date: 20100826
---
The use of computer systems and computer related technologies continues to increase at a rapid pace. This increased use of computer systems has influenced the advances made to computer related technologies. Indeed computer systems have increasingly become an integral part of the business world and the activities of individual consumers. Computer systems may be used to carry out several business industry and academic endeavors. The wide spread use of computers has been accelerated by the increased use of computer networks including the Internet.

Many businesses use one or more computer networks to communicate and share data between the various computers connected to the networks. The productivity and efficiency of employees often requires human and computer interaction. Users of computer technologies continue to demand that the efficiency of these technologies increase. Improving the efficiency of computer technologies is important to anyone that uses and relies on computers.

Data stored on a computing device may become corrupted and inaccessible. A backup of the data may be performed in order to restore the data in the event the data becomes corrupted and inaccessible. A backup refers to making copies of the data. These copies of data may be used to restore the original data after a data loss event. Backups may be useful for many purposes. For example backups may restore data following a disaster. This may be referred to as disaster recovery. In addition backups may restore a small number of files that have been accidentally deleted or corrupted.

Because a system that backs up data includes at least one copy of all data worth saving the data storage requirements may be considerable. Organizing the data storage space and managing the backup process may be a complicated and time consuming undertaking. As a result benefits may be realized by providing system and methods for managing data in cloud storage using deduplication techniques.

According to at least one embodiment a computer implemented method for managing data in cloud storage using deduplication techniques is described. At least one unique segment of data is received from at least one backup source. The at least one unique segment of data is written to at least one container file associated with the at least one back up source. An index file is created for the at least one container file. The index file includes information regarding the unique segments of data. A plurality of the unique segments of data is transmitted from the at least one container file as an object to a virtual container on cloud storage. Spatial locality of the plurality of unique segments of data is maintained in cloud storage.

In one example the index file is transmitted as an object to the virtual container on cloud storage. The index file object combined with the at least one container file comprises the virtual container. The spatial locality of the at least one segments of data may be maintained in the at least one container file.

In one embodiment a virtual container storing at least one requested segment of data on cloud storage may be identified. A first object may be retrieved from the identified virtual container that includes the at least one requested segment of data. The contents of the first object may be written to local memory. At least one additional object may be retrieved from the identified virtual container on cloud storage wherein the at least one additional object is spatially located near the first object.

In one configuration a first index file associated with the identified virtual container on cloud storage may be retrieved. The first index file may be written to local memory. The first index file in local memory may be modified by marking at least one metadata records in the first index file that is associated with the at least one requested segment of data on cloud storage. A removal command may be transmitted to an object in cloud storage that comprises the at least one requested segment of data once all segments contained in a cloud storage object are marked as deleted. The modified first index file may be uploaded to cloud storage to replace the first index file.

A computing device configured to manage data in cloud storage using deduplication techniques is also described. The computing device may include a processor and memory in electronic communication with the processor. The device may further include a deduplication module configured to receive at least one unique segment of data from at least one backup source and write the at least one unique segment of data to at least one container file associated with the at least one back up source. The deduplication module may be further configured to create an index file for the at least one container file. The index file may include information regarding the unique segments of data. The deduplication module may also be configured to transmit a plurality of the unique segments of data from the at least one container file as an object to a virtual container on cloud storage. Spatial locality of the plurality of unique segments of data may be maintained in cloud storage.

A computer program product for managing data in cloud storage using deduplication techniques is also described. The computer program product may include a computer readable medium having instructions thereon. The instructions may include code programmed to receive at least one unique segment of data from at least one backup source and code programmed to write the at least one unique segment of data to at least one container file associated with the at least one back up source. The instructions may further include code programmed to create an index file for the at least one container file. The index file may include information regarding the unique segments of data. The instructions may also include code programmed to transmit a plurality of the unique segments of data from the at least one container file as an object to a virtual container on cloud storage. Spatial locality of the plurality of unique segments of data may be maintained in cloud storage.

Features from any of the above mentioned embodiments may be used in combination with one another in accordance with the general principles described herein. These and other embodiments features and advantages will be more fully understood upon reading the following detailed description in conjunction with the accompanying drawings and claims.

While the embodiments described herein are susceptible to various modifications and alternative forms specific embodiments have been shown by way of example in the drawings and will be described in detail herein. However the exemplary embodiments described herein are not intended to be limited to the particular forms disclosed. Rather the instant disclosure covers all modifications equivalents and alternatives falling within the scope of the appended claims.

In computing systems data deduplication may refer to a specialized data compression technique for eliminating redundant data. Data deduplication may improve storage utilization of data. In the deduplication process duplicate data are deleted leaving a single copy of the data to be stored along with references to the unique copy of the data. Deduplication may reduce required storage capacity since only the unique data are stored. Typically the unique data are stored in a data storage associated with the computing device that performs the deduplication process. For example a deduplication server i.e. a server that performs data deduplication may store the unique data in a database or other data storage mechanism connected to or associated with the deduplication server.

The present systems and methods may enable a deduplication backup system to store the unique data in cloud storage. Cloud storage may be a model of networked online storage where data are stored on multiple virtual servers generally hosted by third parties rather than being hosted on dedicated servers. Cloud storage services may be accessed through a web service application programming interface API or through a web based user interface.

In one embodiment the present systems and methods may allow a deduplication server which runs outside of cloud storage to efficiently write unique data segments into and read the data segments from cloud storage. The present systems and methods may extend a typical deduplication backup system to use cloud storage as its data storage by leveraging segment caching and cloud storage web service interfaces such as but not limited to GET PUT and DELETE.

Segments of data stored within cloud storage may be grouped into virtual containers. In one embodiment a virtual container is a logic group of unique data segments that originate from the same data backup source and may be ordered in the virtual container by their creation time. A virtual container may be composed of an index file and one or more container files and the index file and each container file may be stored as individual cloud storage objects. Virtual containers may facilitate data locality and prefetching. As a result data transmissions between a deduplication server and cloud storage may be minimized. In addition virtual containers may cause cloud storage to be transparent to a deduplication server running outside of the cloud storage.

Using cloud storage as an offsite disaster recovery storage may attract users seeking for a cost effective data protection solution. Advantages may exist by running a deduplication server at a customer site i.e. outside of cloud storage while using cloud storage as the data storage mechanism. In a traditional backup system a deduplication server may only transfer unique data between the deduplication server and clients i.e. data backup source . Further in a traditional backup system the deduplication server may only store unique data on the data storage mechanism such as a local disk storage mechanism .

Deduplication techniques combined with cloud storage may reduce total costs of ownership since cloud storage providers typically charge users based on the amount of stored data and the amount of data transferred in and out of cloud storage. A traditional deduplication server however may be optimized to interface with files stored on local disk storage through file system interfacing while access to data stored on cloud storage may require web service interfacing such as but not limited to PUT GET and DELETE. This difference in data access and generally very low bandwidth to cloud storage may require a redesign of current deduplication engines in order to use cloud storage efficiently as backend storage. For example during backup many data segments are typically stored into one file to keep the data locality and improve backup and restore performance. This current method however may cause problems when the deduplication server attempts to interact or implement file operations on cloud storage. In other words adding deleting or modifying any data segment in the file that is stored in cloud storage may require the entire file to be transferred from cloud storage and cached to a local disk or memory through the web service interface GET. The cached file may then be modified using file system interface calls. The updated file may then be uploaded back to cloud storage through the web service interface PUT.

The scenario described above is contradictory to the principle of deduplication technology. Untouched or unmodified segments of data in the file are duplicate data and should not be transmitted back and forth between cloud storage and the local disk or memory in accordance with the principle of deduplication technology.

The server may include a deduplication module . The deduplication module may implement the deduplication technique to optimize the storage of data within the various files on the client device . In one embodiment the server may communicate with cloud storage across a second network connection . The second network connection may be a wide area network WAN . The data compressed by the deduplication module may be stored within cloud storage . The server may also retrieve the data stored within cloud storage in order to restore a file in its original form to the client device . The deduplication module may compress the data and serve as a module to backup the data contained in the various files stored on the client device .

In one embodiment the backup module may include a write module . The write module may write unique segments of data received from the client to a local disk or memory of the server . The local disk or memory may be internal or external to the server . The backup module may also include a transmit module . The transmit module may transmit the stored segments of data to cloud storage . The backup module may further include a creation module . The creation module may create an index file that may include information regarding each of the segments of data transmitted to cloud storage . For example the index file may include information regarding the size of each segment of data the location of each segment of data on cloud storage an offset if any for each segment of data and the like. A deletion module may remove or delete the index file from the local disk or memory. The transmit module may transmit the created index file to cloud storage . In another embodiment a copy of the index file may remain on the local disk or memory for future use.

In one embodiment the restore module may retrieve segments of data from cloud storage and provide them to the client device in order to recreate or restore the original data on the client device . In one example the restore module may include the creation module . The creation module may create a central index file that includes identifiers for all of the unique segments of data stored on cloud storage . An identify module may identify the segments of data stored on cloud storage based on the identifiers . The identify module may identify the segments of data requested by the client device . A retrieve module may retrieve the identified segments of data from cloud storage . The write module may write the retrieved segments of data to the local disk or memory of the server . The transmit module may then transmit the retrieved segments of data from the local disk or memory to the client device that requested the segments of data.

The removal module may locate a segment of data or multiple segments of data stored on cloud storage and remove the located segments of data from cloud storage . In one embodiment the removal module may include the identify module . The identify module may identify the one or more segments of data to remove from cloud storage . The retrieve module may retrieve the index file currently stored on cloud storage associated with the one or more segments of data that are to be removed from cloud storage . The write module may write the retrieved index file to the local disk or memory of server if a copy of the index file does not already exist on the local disk or memory. A mark module may modify information in the index file associated with the one or more segments of data that are to be removed from cloud storage . For example the mark module may mark the one or more records of the index file that are associated with the one or more segments of data to be removed. The segments of data may then be removed from cloud storage . In one embodiment a web service interface command DELETE may be transmitted by the transmit module to cloud storage . This command may remove the identified segments of data from cloud storage if each segment is stored as one cloud storage object. If multiple segments are stored as one cloud storage object the object may only be removed if all segments contained in the objects are marked as deleted. The transmit module may also transmit or upload the modified index file to cloud storage following the deletion of the segments of data. In one embodiment a copy of the modified index file may remain on the local disk or memory.

The multiple segments of data from the first client device and the second client device may be transmitted across a first network connection to a server . A deduplication module may analyze the various incoming segments and store the unique segments of data in memory such as a double memory buffer . Through double memory buffer where each buffer may hold more than one segment receiving data from clients over network and writing data from buffer to storage may be overlapped to increase the backup performance. In another embodiment only unique data segments may be sent over to the deduplication module after the clients query the existence of segments. As illustrated the deduplication module only stores a single copy of each unique segment of data in the double memory buffer . As a result the double memory buffer does not store duplicate segments of data. In other words the deduplication module may only store a single copy of segment A segment H and segment J .

As previously described the server may include a deduplication module . The server may also include a local disk cache . The disk cache may be internal or external to the server . The disk cache may be populated with multiple container files . Each container file may store or hold various segments of data. Each segment of data in the same container file may originate from the same backup source. For example the segments of data stored in the first container file and the segments of data stored in the third container file may originate from the same client device.

The disk cache may also include a first index file and a second index file . The index files may include information regarding the various segments of data stored in the container files. In one embodiment each index file is associated with a specific backup source e.g. client device . For example the first index file may include information regarding the segments of data stored within the first container and the third container since the segments of data stored in these two containers originate from the same backup source. Similarly the second index file may include information regarding the segments of data stored in the second container and the fourth container . Each container may be stored as one container file or multiple containers may be combined into one container file on disk.

The various segments of data stored within the container files may be transmitted to cloud storage across the second network . In addition the index files may also be transmitted to cloud storage . In one embodiment a copy of the first index file and a copy of the second index file may remain on the disk cache . In another embodiment the disk cache may not retain a copy of the first index file and the second index file .

As previously explained in a deduplication backup system files from a client device may be broken into segments of data and unique segments of data may be sent over a network connection to the server to be stored on data storage. During restore operations the segments of data may be read in from the data storage and sent to the client over the network connection in order to reconstruct the original files. During backup many clients may concurrently send segments of data to the server . In order to achieve a high speed restore operation segments of data from each individual client may be stored in a separate set of container files in order to keep data backup locality.

In one embodiment to facilitate the server to interface with cloud storage virtual containers may be used to store the various segments of data received from clients. The virtual containers may include an index file together with segments of data stored as objects under a directory identified by the name of the virtual containers . The directory may be a virtual concept and the actual implementation in cloud storage may be provider dependent.

In the virtual containers the index files stored as one object may include metadata records for each segment of data. The metadata records may be ordered based on the creation time of each segment of data. Each data object may include multiple unique data segments coming from the same backup source e.g. the first client computing device and the second client computing device . The purpose of storing multiple segments of data into one object is to reduce the possibility of overloading cloud storage with too many small segments of data and help achieve efficient object management retrievals and network transmission.

In one embodiment during backup unique segments from the same backup client may be written into local storage media e.g. disk cache . A set of container files may be opened to hold the incoming segments of data from each client in order to maintain the locality of the segments of data. While the backup is occurring multiple segments of data stored within a container file may be transmitted as one object to cloud storage through a web service interface such as but not limited to PUT.

A fingerprint e.g. hash value of the binary concatenation of the data segment fingerprint contained by the object may be used as the access key to the data object stored in cloud storage. All segments of data originating from the same local file may be stored within a unique virtual container. The transmission of segments of data may continue until all segments are sent to cloud storage.

As previously explained each container file may be associated with an index file that is created to record the segment information. The segment information may include segment fingerprints e.g. hash value of the data segment data storage object containing the segment offset within the object segment size etc. Once the segment transmission from a container file is completed the container file may be removed from the local storage media and a PUT operation may upload the corresponding index file as one object to the same directory with the unique container name as its key. The local index file may be kept to facilitate future container access. The data transmissions may be completed through a separate process or thread.

In one embodiment a virtual container storing at least one requested segment of data may be identified . The virtual container may be stored on cloud storage. A first object from the identified virtual container may be retrieved that includes the at least one requested segment of data. The contents of the retrieved object may be written to local memory. At least one additional object from the identified virtual container that is spatially located near the first object may also be retrieved . The contents of the at least one additional object may also be written to local memory. In one embodiment the at least one requested segment of data may be transmitted to the original backup source for reconstruction. Fetching objects from cloud storage to local memory and transmitting segments from local memory to the client requesting backup restore may happen concurrently.

During the restore operation with the first given fingerprint in a central index built from all stored segment fingerprints together with index file information the virtual container storing the segment may be identified . The cloud storage object containing the requested segment of data may be retrieved from the virtual container to local memory to serve the segment request. The object may include multiple segments of data with spatial locality. Objects next to each other in the virtual container may also have spatial locality from backup. As a result multiple objects following the requested object in the virtual container may be prefetched and cached to the local memory. The next segment request may be looked up among the previously cached segments of data. For a cache hit the read may be served from the cached segment of data. In one embodiment once the cache with a preset size is full first in first out FIFO replacement policy may be used to remove the very earliest accessed segment of data in the cache. Alternatively segments may be saved to disk in its original container format.

In one embodiment a virtual container storing at least one requested segment of data may be identified . An index file associated with the identified virtual container may be retrieved from the identified virtual container. In one embodiment the index file may be written to local memory. The index file in local memory may be modified by marking at least one metadata record in the index file that is associated with the at least one requested segment of data. Once records in the index file indicate that segments in a cloud storage object are all marked as deleted a delete command may be transmitted to cloud storage to remove the object and the corresponding deleted records in the index files are removed. In one configuration the modified index file may be uploaded from the local memory to cloud storage. The modified index file may replace the index file previously associated with the identified virtual container.

During the data removal process with the first given fingerprint in a central index built from all stored segment fingerprints together with index file information the virtual container containing the segment to be removed may be identified . The container index file may be retrieved from the virtual container in cloud storage to local memory. The metadata record associated with the segment to be deleted may be marked as deleted. If all segments contained by one cloud storage object are marked as deleted a web service interface DELETE may be transmitted to cloud storage in order to remove the corresponding object. The corresponding metadata records are removed from the index file. At the end of the data removal operation the index file involved with data removal may be uploaded back to the virtual container in order to update the virtual container on cloud storage. Since segments contained by the same cloud storage object have spatial locality the segments stored in the same cloud storage object may have a high probability of being removed together from cloud storage or kept together.

As provided above the present systems and methods through the implementation of virtual containers and segment cache data transmission in and out of cloud storage may be minimized. In addition only unique segments may be stored on cloud storage.

Bus allows data communication between central processor and system memory which may include read only memory ROM or flash memory neither shown and random access memory RAM not shown as previously noted. The RAM is generally the main memory into which the operating system and application programs are loaded. The ROM or flash memory can contain among other code the Basic Input Output system BIOS which controls basic hardware operation such as the interaction with peripheral components or devices. For example the deduplication module to implement the present systems and methods may be stored within the system memory . Applications resident with computer system are generally stored on and accessed via a computer readable medium such as a hard disk drive e.g. fixed disk an optical drive e.g. optical drive a floppy disk unit or other storage medium. Additionally applications can be in the form of electronic signals modulated in accordance with the application and data communication technology when accessed via network modem or interface .

Storage interface as with the other storage interfaces of computer system can connect to a standard computer readable medium for storage and or retrieval of information such as a fixed disk drive . Fixed disk drive may be a part of computer system or may be separate and accessed through other interface systems. Modem may provide a direct connection to a remote server via a telephone link or to the Internet via an internet service provider ISP . Network interface may provide a direct connection to a remote server via a direct network link to the Internet via a POP point of presence . Network interface may provide such connection using wireless techniques including digital cellular telephone connection Cellular Digital Packet Data CDPD connection digital satellite data connection or the like.

Many other devices or subsystems not shown may be connected in a similar manner e.g. document scanners digital cameras and so on . Conversely all of the devices shown in need not be present to practice the present systems and methods. The devices and subsystems can be interconnected in different ways from that shown in . The operation of a computer system such as that shown in is readily known in the art and is not discussed in detail in this application. Code to implement the present disclosure can be stored in computer readable medium such as one or more of system memory fixed disk optical disk or floppy disk . The operating system provided on computer system may be MS DOS MS WINDOWS OS 2 UNIX Linux or another known operating system.

Moreover regarding the signals described herein those skilled in the art will recognize that a signal can be directly transmitted from a first block to a second block or a signal can be modified e.g. amplified attenuated delayed latched buffered inverted filtered or otherwise modified between the blocks. Although the signals of the above described embodiment are characterized as transmitted from one block to the next other embodiments of the present systems and methods may include modified signals in place of such directly transmitted signals as long as the informational and or functional aspect of the signal is transmitted between blocks. To some extent a signal input at a second block can be conceptualized as a second signal derived from a first signal output from a first block due to physical limitations of the circuitry involved e.g. there will inevitably be some attenuation and delay . Therefore as used herein a second signal derived from a first signal includes the first signal or any modifications to the first signal whether due to circuit limitations or due to passage through other circuit elements which do not change the informational and or final functional aspect of the first signal.

With reference to computer system modem network interface or some other method can be used to provide connectivity from each of client computer systems and to network . Client systems and are able to access information on storage server A or B using for example a web browser or other client software not shown . Such a client allows client systems and to access data hosted by storage server A or B or one of storage devices A N B N N or intelligent storage array . depicts the use of a network such as the Internet for exchanging data but the present systems and methods are not limited to the Internet or any particular network based environment.

While the foregoing disclosure sets forth various embodiments using specific block diagrams flowcharts and examples each block diagram component flowchart step operation and or component described and or illustrated herein may be implemented individually and or collectively using a wide range of hardware software or firmware or any combination thereof configurations. In addition any disclosure of components contained within other components should be considered exemplary in nature since many other architectures can be implemented to achieve the same functionality.

The process parameters and sequence of steps described and or illustrated herein are given by way of example only and can be varied as desired. For example while the steps illustrated and or described herein may be shown or discussed in a particular order these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.

Furthermore while various embodiments have been described and or illustrated herein in the context of fully functional computing systems one or more of these exemplary embodiments may be distributed as a program product in a variety of forms regardless of the particular type of computer readable media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script batch or other executable files that may be stored on a computer readable storage medium or in a computing system. In some embodiments these software modules may configure a computing system to perform one or more of the exemplary embodiments disclosed herein.

The foregoing description for purpose of explanation has been described with reference to specific embodiments. However the illustrative discussions above are not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations are possible in view of the above teachings. The embodiments were chosen and described in order to best explain the principles of the present systems and methods and their practical applications to thereby enable others skilled in the art to best utilize the present systems and methods and various embodiments with various modifications as may be suited to the particular use contemplated.

Unless otherwise noted the terms a or an as used in the specification and claims are to be construed as meaning at least one of. In addition for ease of use the words including and having as used in the specification and claims are interchangeable with and have the same meaning as the word comprising. 

