---

title: Data sharing for file clones using reverse ditto references
abstract: A method, system, and computer program product for creating and implementing file clones using reverse ditto references. A clone inode is created as a copy of an original inode. The clone inode and the original inode are indistinguishable to an end user. Each additional file clone created spawns a clone inode. An immutable clone-parent inode is created that contains the disk block addresses, while writable clones inode instead contain dittos linking the clone inode to data blocks referenced in the clone-parent inode. Data block address links in the original inode are moved to the new clone-parent inode and dittos replace the original data block address links in the original inode. When a clone file is updated, the new data is written to a new disk location and a corresponding ditto in the clone inode is replaced with a data block link address, keeping the data of the clone-parent inode intact.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08290996&OS=08290996&RS=08290996
owner: International Business Machines Corporation
number: 08290996
owner_city: Armonk
owner_country: US
publication_date: 20100730
---
The present invention relates in general to data processing systems and in particular to data and files in a data processing system. Still more particularly the present invention relates to an improved method for implementing immutable data sharing file clones.

Many files systems including IBM s General Parallel File System GPFS support file system snapshots. File system snapshots are logical point in time copies of a file system. Snapshots can be used for file system backup. Backing up data from a snapshot guarantees that file system content is preserved in a consistent state. Another common use of snapshots is to create regular snapshots and also by keeping some number of recent snapshots on line a user can retrieve a previous copy of a file that was deleted or overwritten accidentally.

Snapshots are typically implemented using a copy on write mechanism. Copy on write defers allocating disk space for a file in the snapshot until the original file is modified or deleted. This has the advantage that snapshot creation is very fast no data is copied at the time the snapshot is created and the disk space occupied by a snapshot is limited to the amount of data that was modified or deleted since the snapshot was created. GPFS implements copy on write using logical references called dittos . Dittos are stored in inodes and indirect blocks of files in a snapshot instead of references to physical disk space to indicate that the corresponding data or metadata in the original file have not yet been modified. When an original file is modified dittos in a snapshot are replaced with references to copies of the original data. GPFS currently allows only for creating a snapshot of a whole file system. However snapshots created in GPFS are read only. Thus while a user can read snapshot files the user cannot modify or delete files in a snapshot.

Additionally a Data Management Application Programming Interface DMAPI may be deployed that enables a third party application to assist in disk space management in a file system. DMAPI applications function by moving infrequently accessed data to off line storage. The infrequently used data may then be restored only when needed. A typical DMAPI application will not recognize snapshots. Thus when snapshots are moved to off line storage of a file system there are substantial difficulties encountered with managing snapshots of that file system as the snapshots may either need to be re created because the snapshots have been moved or disassociated from the original files. Additionally restoring a moved snapshot requires a substantial amount of additional disk space since the snapshot will then be modified to include updated data.

Disclosed are a method system and computer program product for creating and implementing file clones using reverse ditto references. A clone inode is created as a copy of an original inode. The clone inode and the original inode are indistinguishable to an end user. Each additional file clone created spawns a clone inode. An immutable clone parent inode is created that contains the disk block addresses while a writable clone inode instead contains dittos linking the clone inode to data blocks referenced in the clone parent inode. Thus data block address links in the original inode are moved to the new clone parent inode and dittos replace the original data block address links in the original inode. When a clone file is updated the new data is written to a new disk location and a corresponding ditto in the clone inode is replaced with a data block link address keeping the data of the clone parent inode intact.

The above as well as additional objectives features and advantages of the present invention will become apparent in the following detailed written description.

The illustrative embodiments provide a method system and computer program product for implementing data sharing file clones using reverse ditto references in accordance with one embodiment.

In the following detailed description of exemplary embodiments of the invention specific exemplary embodiments in which the invention may be practiced are described in sufficient detail to enable those skilled in the art to practice the invention and it is to be understood that other embodiments may be utilized and that logical architectural programmatic mechanical electrical and other changes may be made without departing from the spirit or scope of the present invention. The following detailed description is therefore not to be taken in a limiting sense and the scope of the present invention is defined only by the appended claims.

It is understood that the use of specific component device and or parameter names are for example only and not meant to imply any limitations on the invention. The invention may thus be implemented with different nomenclature terminology utilized to describe the components devices parameters herein without limitation. Each term utilized herein is to be given its broadest interpretation given the context in which that term is utilized. Also while generally described as being applicable to a file system the functionality associated with the described embodiments applies to any kind of file system or any storage system that stores file like objects such as a data base or an object store. These systems may generally be referred to as a computer implemented file storage and or management facility.

With reference now to there is depicted a block diagram of a Data Processing System DPS in which the present invention may be implemented. DPS includes a processor s that is coupled to a system bus . Processor s may be a single processor multi core processor or a multi processor array. Video Interface coupled to system bus allows for the connection of a Display to DPS enabling the displaying of a user interface including text and graphics by a user of DPS . System bus also enables communication with a hardware based readable storage medium e.g. Compact Disk Read Only Memory CD ROM flash drive memory . Input Output I O Interface also connected to system bus permits user interaction with DPS such as data entry via keyboard or mouse . DPS also comprises system memory which is connected to system bus . Illustrated within system memory are a number of software firmware logic components including operating system OS e.g. Microsoft Windows a trademark of Microsoft Corp or GNU Linux registered trademarks of the Free Software Foundation and The Linux Mark Institute and applications . System memory may also include a Data Management Application Programming Interface DMAPI or DMAPI application which enables another third party application e.g. applications to assist in disk space management in a file system. In one embodiment DMAPI enables the third party application to move infrequently accessed data to off line storage. The infrequently used data may then be restored only when needed. As shown system memory also comprises File Clone Data Sharing FCDS Logic for implementing the processes described in . In one embodiment DPS is able to utilize executable code of FCDS Logic in order to implement immutable file clones using reverse ditto references as described in greater detail below in . In one embodiment FCDS logic may be provided within storage adapter . This embodiment is likely implemented when or if the filesets and their associated inodes are stored on internal storage or external storage file system which are made accessible via code executing within storage adapter .

DPS also comprises system storage coupled via a corresponding storage adapter . System storage stores data instructions code for one or more applications. As illustrated system storage contains file system within which is stored one or more filesets accessible via corresponding inodes inode blocks. In one embodiment file system is formatted in a general parallel file system GPFS . Additionally DPS may also be connected to external storage file system which provides external storage similar to internal system storage but is instead connected to DPS via storage adapter or via network

DPS is also illustrated with a network interface by which DPS may connect to one or more network accessible devices such as external storage or server . Access to these devices is via one or more networks . Network interface may be configured to operate via wired or wireless connection to an access point of the network . Network may be an external network such as the Internet or wide area network WAN or an internal network such as an Ethernet local area network LAN or a Virtual Private Network VPN . When network is an internal network such as a LAN connection to the external network Internet may be established with one or more servers which may also provide data instructions code for use by or execution on DPS in one embodiment.

In one embodiment certain features associated with FCDS Logic may be available via a software deploying server e.g. server and DPS communicates with the software deploying server via network using network interface . Then FCDS Logic may be deployed from on across the network via software deploying server . With this configuration software deploying server may perform all of the functions associated with the execution of FCDS logic . Accordingly DPS is not required to utilize internal computing resources of DPS to execute FCDS Logic . Alternatively software deploying server may enable DPS to download the executable code required to implement the various features of the described embodiments.

As illustrated and described herein DPS may be a computer or computing device having the required hardware components and programmed with FCDS Logic executing on the processor to provide the functionality of the described embodiments. The hardware elements depicted in DPS are not intended to be exhaustive but rather are representative to highlight essential components that may be utilized to implement the present invention. For example different configurations of data processing systems devices may be utilized containing other devices components which may be used in addition to or in place of the hardware depicted. The depicted example is not meant to imply architectural or other limitations with respect to the presently described embodiments and or the general invention. The data processing system depicted in may be for example an IBM eServer pSeries system a product of International Business Machines Corporation in Armonk N.Y. running the Advanced Interactive Executive AIX operating system or LINUX operating system.

With reference now to there is depicted an illustration of an example data file and inode association scheme according to one embodiment of the invention. As shown in original inode i has associated therein data block address links corresponding to a file stored in a memory of DPS . Data block address links link original inode i to data blocks . Data blocks contain the targeted data of original inode i and may be called up by processor s at any time.

With reference now to there is depicted an illustration of a cloning scheme involving the original inode of according to one embodiment of the invention. As shown the cloning scheme provides that clone inode i has been created to be a snapshot clone parent of original inode i . Clone inode i functions as an immutable file snapshot clone parent inode that serves as a basis for subsequent file clones.

To create clone inode i logic of DPS such as FCDS Logic first selects or receives a selection of a selected inode original inode i corresponding to an original file and creates clone inode i . The recorded creation time of clone inode i may be copied from original inode i or may be set based on the current time when clone inode i is created. Upon allocation of clone inode i the status of the clone inode i is set as created. A name for the new clone inode i can then be inserted. The name for clone inode i may be entered by a user of DPS or may be autonomously assigned by logic e.g. as FCDS Logic running on DPS . In an alternate embodiment a name for clone inode i may be provided by a computer connected to DPS via network . A target directory may also be provided by a user of DPS or may be autonomously assigned by logic e.g. as FCDS Logic running on DPS . In response to receiving a name entry and target directory clone inode i is inserted to the selected target directory and assigned the specified name entry.

After clone inode i has been created in the target directory and given a name clone inode i is initialized as a clone parent for original inode i . Once initialized as a clone parent a clone parent inode becomes an immutable copy of an original inode. The initialization process comprises the steps of 1 copying the data block address links and a header of original inode i to clone inode i 2 setting a link count in the clone inode i to 2 3 copying inode time stamps and permission bits of original inode i to clone inode i 4 determining owner credentials of the clone inode i and 5 setting an owner field of clone inode i based on the determined owner credentials. In one embodiment steps 1 5 may also be logged to make each of the steps atomic.

A link count is a count of the number of inodes that depend on that specific inode. For example a cloned child inode with no clones of itself would have a link count of one since it is only self dependent. A parent inode with two child clones would have a link count of three one count for itself and two counts for the two dependent child clones . Since deleting a parent inode may cause substantial problems in a file system deletion requests of inodes may be rejected if a requested deletion operation targets a parent inode. Thus inodes with a link count greater than one may not be deleted as a child inode still depends on an inode with a link count greater than one .

The owner credentials provide identification information for the owner of an inode. In one embodiment the owner credentials for a clone inode i may simply be identified and copied from original inode i . In an alternate embodiment the owner credentials may be created autonomously based on a current user of DPS or based on an executing process of DPS . Additionally when the owner of clone inode i is different from an owner of original inode i a disk block quota of original inode i may be transferred to the owner of clone inode i .

In response to completing the initialization of clone inode i original inode i is updated to reflect the changes. Since clone inode i is the new clone parent for original inode i data block address links which were previously attached to original inode i have instead been moved to clone inode i illustrated as data block address links . The data blocks originally associated with original inode i are instead replaced with dittos . Each ditto corresponds to one of the data block address links . A ditto is a reference stored in an inode or indirect block in a snapshot that allow multiple files to share the same disk space by redirecting read requests to a different file. Dittos indicate that the corresponding data or metadata in the original file has not yet been modified. Since dittos are only references to the original disk space no additional system storage is required until the original inode is modified. In one embodiment the address links of an immutable file the clone parent contain the disk block addresses while the address links in a writable file the clone file contain dittos. The dittos point to the disk block address links stored in the clone parent. When a clone file is updated the new data is written to a new disk location and the ditto in the clone is then replaced with an actual data block link address.

After replacing each of the data block address links with dittos the block count of original inode i is set to zero. Original inode is updated to be a child of clone inode i and an inode map is updated to identify the clone inode i as in use. The block count of an inode identifies the number of data blocks stored in that inode. Since original inode i now contains only dittos the block count is zero. When original inode is modified the affected dittos are replaced with references to copies of the original data and the block count is incremented one for each additional ditto replaced with a data block.

In one embodiment clone inode i is a new inode. However clone inode i may also be an existing inode that has been repurposed to be a clone of original inode i . To repurpose an existing inode a clone attribute must be first stored in the existing inode. The existing inode may then be marked as a clone parent.

In one embodiment DPS may have a Data Management Application Programming Interface DMAPI application e.g. DMAPI embodied therein and utilized for moving infrequently accessed data to off line storage and transparently restoring the data when needed that is not be configured to properly manage cloned files. Since clone parents e.g. clone inode i are immutable the data that is being restored by invisible write to a ditto should be the same as what is still in the parent. This preserves clone files when migrated to from off line storage. In response to the DMAPI application moving one or more cloned files from the storage of the data processing system to offline storage and issuing a read of data in any cloned file logic e.g. as FCDS Logic running on DPS performs an invisible read of data indirectly linked via the dittos of the clone inode. In response to the DMAPI application issuing a write of data in any cloned file the logic silently ignores the write if the write would cause one or more dittos of the clone inode to be overwritten. Additionally in response to the DMAPI application migrating of the one or more cloned files to from offline storage to the storage of the data processing system based on a last access time the logic may autonomously update the last access time of the cloned inode to resolve disk addresses.

With reference now to there is depicted an illustration of original inode i cloned inode i and a new clone of clone inode i new inode i in accordance with one embodiment. Clone inode i is the immutable clone parent of original inode i as presented in . New inode i has also been created to be a new clone of clone inode i .

To create new inode i new inode i must first be allocated as a new clone inode. Name and target directories are also applied as previously detailed above. In response to receiving a new name entry and target directory for new inode i new inode i is inserted by the new name as a new entry in the selected target directory.

After new inode i has been created in the target directory and given a name new inode i is initialized as a clone of clone inode i . The initialization process comprises the steps of 1 copying the header of clone parent i to new inode i 2 setting one or more dittos corresponding to the one or more data block address links stored in clone inode i 3 setting a link count in new inode i to 1 4 setting the block count of new inode i to zero and 5 recording clone inode i as the clone parent of new inode i . In one embodiment steps 1 5 may also be logged to make each of the steps atomic. Once new inode i is initialized the link count of clone inode i is incremented by one and the inode map is updated to identify new inode i as in use. The incrementing of the link count of clone inode i identifies clone inode i as the parent of another inode in this case new inode i .

With reference now to there is depicted an illustration of an example embodiment featuring a clone parent inode clone inode i an original inode functioning now as a clone of the clone parent inode original inode i a clone of the clone parent inode new inode i and two clones of the clone of the clone parent inode first clone inode i and second clone inode i . illustrates how both parent and clone inodes may be individually read or written. New inode i is also the parent inode of two clone child inodes first clone inode i and second clone inode i . Both first clone inode i and second clone inode i having dittos and dittos respectively. Specifically illustrates original inode i having dittos clone inode i which is the new clone parent of original inode having data block address links and new inode i having two dittos corresponding to data block address links and two data block address links . New inode i is a clone of clone inode i .

As illustrated in the above example new inode i has two dittos corresponding to data block address links of clone inode i . Additionally new inode i also comprises data block address links which point to data blocks . This is a result of a target file of new inode i being modified where two dittos were affected. Instead of modifying the clone inode i the child dittos were replaced with data block address links which contain references to the updated data stored at data blocks . Thus the data references of data block address links remain untouched preserving the clone snapshot.

Any modification of files linked by new inode i would affect dittos and dittos of first clone inode i and second clone inode i respectively. The result of such an operation is dittos and dittos still indirectly point to data block address links while dittos and dittos reference data block address links . Dittos of original inode i in contrast still point to since original inode i has not been modified.

With reference now to there is depicted a high level logical flowchart of an exemplary process for creating a clone parent inode of an original inode in accordance with one embodiment of the invention. As depicted the process begins at block and then proceeds to block where an original inode is selected. Once the original inode is selected a clone inode intended to be the new clone parent inode of the original inode is created block . At block a name entry and status for the clone inode are established. The status of the clone inode is set as clone parent. Additionally a desired target directory is established for the clone inode block . The clone inode is then inserted by the chosen name as a directory entry in to selected target directory block . At block the clone inode is initialized as a clone parent. The initialization sub steps performed in block are more completely detailed in .

Once the clone inode has been initialized as a clone parent the original inode is updated block . The updating of the clone inode includes setting each of the one or more data block address links contained within the original inode to one or more dittos. The dittos indirectly address the one or more data block address links now stored in the clone inode the new clone parent inode . Since the original inode now contains no data block address links the block count of the original inode is set to zero. At block the inode map is updated to reflect the clone inode as the new clone parent inode of the original inode. The process then terminates at block .

With reference now to there is depicted a high level logical flowchart of the initialization of the clone inode referenced in block of in accordance with one embodiment of the invention. As depicted the process begins at block and then proceeds to block where the data block address links and header information are copied to the clone inode from the original inode. The clone inode now contains the data previously stored within the original inode and the link count of the clone inode is incremented or set to 2 since both the clone inode and the original inode are now dependent on the new clone parent inode the clone inode block . At block time stamps and permission bits from the original inode are copied to the clone inode making the clone inode identical to the original inode that the clone inode replaces. The owner credentials of the clone inode are determined in block . The owner credentials may be the same as those of the original inode or may be those of a current user or executing process.

At block a determination is made whether the owner of the clone inode is different than the owner of the original inode. When the owner of the clone inode is different from the owner of the original inode the disk block quota of the original inode is wholly transferred to the owner of the clone inode block and the process continues on to block . At block the owner field of the clone inode is updated based on the previously identified owner credentials. The process then terminates at block .

With reference now to there is depicted a high level logical flowchart of an exemplary process for creating a new third clone inode of a clone parent inode in accordance with one embodiment. The process begins at block where a new clone inode is created as a clone of the clone parent inode. A name and target directory entry for the new clone inode is received from a user or executing process at block . At block the name entry for the new clone inode is set and the new clone inode is inserted in the target directory. At block the new clone inode is initialized as a clone of the clone parent inode. The initialization sub steps performed in block are more completely detailed in .

At block the link count of the clone parent inode is incremented since the clone parent inode now has a new dependent inode new clone inode . At block the inode map is updated to reflect the status of the new clone inode as in use. The process then terminates at block .

With reference now to there is depicted a high level logical flowchart of the initialization of the new clone inode performed in block in accordance with one embodiment. As depicted the process begins at block and then proceeds to block where the header from the clone parent inode is copied to the new clone inode. At block dittos are created in the new clone inode and are set to point to the data block address links of the clone parent inode. The link count of the new clone inode is then set to 1 since the new clone inode is only dependent on itself block . At block the block count of the new clone inode is set to 0 since the new clone inode only contains dittos and does not yet store any data block address links. The clone parent inode is then recorded as the clone parent of the new clone inode within the new clone inode and the creation time of the new clone inode is set to the current time block . The process then terminates at block .

With reference now to there is depicted a high level logical flowchart of the process for deleting a selected inode in accordance with one embodiment. The process begins at block and the proceeds to block where a delete instruction is received for a selected inode. In response to receiving the delete instruction a determination is made whether the selected inode is a clone parent block . When the selected inode is not a clone parent the process continues to block .

When a selected inode is a clone parent inode the process continues to block where a determination is made whether the clone parent is still a parent to any child inodes. This determination is performed by reading the link count of selected inode and determining if the link count is equal to one 1 . If the link count is not equal to one 1 the selected inode still has dependent clone children and the process continues to block where the deletion request is rejected. The process then terminates at block . When the link count of the selected inode is equal to one 1 the process continues to block .

At block the parent of the selected inode is determined. In response to determining the parent of the selected inode the link count of the parent of the selected inode is decremented by one block . The link count of the parent of the selected inode is decremented since the selected inode is going to be deleted and is thus no longer dependent on its parent inode. At block the selected inode is deleted. The process then terminates at block .

The flowcharts and block diagrams in the various figures presented and described herein illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowcharts or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

In the flow charts above one or more of the methods are embodied in a computer readable medium containing computer readable code such that a series of steps are performed when the computer readable code is executed by a processing unit on a computing device. In some implementations certain processes of the methods are combined performed simultaneously or in a different order or perhaps omitted without deviating from the spirit and scope of the invention. Thus while the method processes are described and illustrated in a particular sequence use of a specific sequence of processes is not meant to imply any limitations on the invention. Changes may be made with regards to the sequence of processes without departing from the spirit or scope of the present invention. Use of a particular sequence is therefore not to be taken in a limiting sense and the scope of the present invention extends to the appended claims and equivalents thereof.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable R.F etc. or any suitable combination of the foregoing. Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks. The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

As will be further appreciated the processes in embodiments of the present invention may be implemented using any combination of software firmware or hardware. As a preparatory step to practicing the invention in software the programming code whether software or firmware will typically be stored in one or more machine readable storage mediums such as fixed hard drives diskettes optical disks magnetic tape semiconductor memories such as ROMs PROMs etc. thereby making an article of manufacture in accordance with the invention. The article of manufacture containing the programming code is used by either executing the code directly from the storage device by copying the code from the storage device into another storage device such as a hard disk RAM etc. or by transmitting the code for remote execution using transmission type media such as digital and analog communication links. The methods of the invention may be practiced by combining one or more machine readable storage devices containing the code according to the present invention with appropriate processing hardware to execute the code contained therein. An apparatus for practicing the invention could be one or more processing devices and storage systems containing or having network access to program s coded in accordance with the invention.

Thus it is important that while an illustrative embodiment of the present invention is described in the context of a fully functional computer server system with installed or executed software those skilled in the art will appreciate that the software aspects of an illustrative embodiment of the present invention are capable of being distributed as a program product in a variety of forms and that an illustrative embodiment of the present invention applies equally regardless of the particular type of media used to actually carry out the distribution.

While the invention has been described with reference to exemplary embodiments it will be understood by those skilled in the art that various changes may be made and equivalents may be substituted for elements thereof without departing from the scope of the invention. In addition many modifications may be made to adapt a particular system device or component thereof to the teachings of the invention without departing from the essential scope thereof. Therefore it is intended that the invention not be limited to the particular embodiments disclosed for carrying out this invention but that the invention will include all embodiments falling within the scope of the appended claims. Moreover the use of the terms first second etc. do not denote any order or importance but rather the terms first second etc. are used to distinguish one element from another.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

