---

title: Just-in-time wrapper synchronization
abstract: The invention is directed to just-in-time (JIT) retrieval of directory information to reduce network traffic and load on directory servers and/or data sources by requesting only the information that is currently needed from the directory server. In the invention, a wrapper operating with a directory server and an application programming interface (API) provides this capability. The wrapper is configured to receive a request from a client and to determine a location corresponding to a set of current attribute values for responding to the request. The wrapper retrieves the set of current attribute values in a JIT manner from at least one of the following: the directory server and an external source. A set of current attributes is returned to the client from the wrapper. By propagating information in a JIT manner, only the information that will be currently used is propagated across the network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09219706&OS=09219706&RS=09219706
owner: International Business Machines Corporation
number: 09219706
owner_city: Armonk
owner_country: US
publication_date: 20100929
---
This invention was made with U.S. Government support under contract No. USJFCOM CRADA 07 10 awarded by the U.S. Department of Defense DOD . The U.S. Government has certain rights in this invention.

This application is related in some aspects to the commonly owned and co pending application entitled INTEGRATED JUST IN TIME SYNCHRONIZATION filed Sep. 29 2010 and commonly owned and co pending application entitled HYBRID JUST IN TIME INTEGRATION filed Sep. 29 2010 the entire contents of which are herein incorporated by reference.

This invention relates generally to server directory integration and more specifically to just in time JIT directory integration.

Today people and businesses rely on networked computer systems to support distributed applications. As the number of different networks and applications has grown the number of specialized directories of information has also grown resulting in islands of information that are difficult to share and manage. Maintaining and accessing this information in a consistent and controlled manner provides a focal point for integrating a distributed environment into a consistent and seamless system.

The Lightweight Directory Access Protocol LDAP is an open industry standard that has evolved to meet these needs. LDAP is based on the client server model of distributed computing and defines a standard method for accessing and updating information in a directory. In computer terms a directory is a specialized database also called a data repository that stores typed and ordered information about objects. LDAP has gained wide acceptance as the directory access method of the Internet and is therefore also becoming strategic within enterprise intranets. It is being supported by a growing number of software vendors and is being incorporated into a growing number of applications. However current solutions propagate data and information too frequently resulting in unnecessarily large databases and data transfers. Existing directory integration methods fetch data before it is requested. A large batch of data is retrieved from the data sources while the data in the directory is replaced. Any subsequent changes to the sources are also changed in the directory. Because it is not determined which information will be needed in the future by the client all of the data is propagated.

In one embodiment there is a method for just in time JIT retrieval of directory information. In this embodiment the method comprises providing a directory server operating with an application programming interface API and a wrapper sending a request from a client to the wrapper receiving the request from the client at the wrapper determining by the wrapper a location corresponding to a set of current attribute values for responding to the request retrieving the set of current attribute values from at least one of the following the directory server and an external source.

In a second embodiment there is a directory apparatus for just in time JIT retrieval of directory information the directory apparatus comprising a directory server operating with an application programming interface API and a wrapper which is configured to receive a request from a client at the wrapper determine a location corresponding to a set of current attribute values for responding to the request retrieve the set of current attribute values from at least one of the following the directory server and an external source and return a set of current attributes to the client from the wrapper.

In a third embodiment there is a computer readable medium storing computer instructions which when executed enables a computer system operating with a directory server an application programming interface API and a wrapper to provide just in time JIT retrieval of directory information. In this embodiment the computer instructions comprise receiving a request from a client at the wrapper determining by the wrapper a location corresponding to a set of current attribute values for responding to the request retrieving the set of current attribute values in a JIT manner from at least one of the following the directory server and an external source and returning a set of current attributes to the client from the wrapper.

In a fourth embodiment there is a method for deploying a wrapper for use in a computer system to provide just in time JIT retrieval of directory information. In this embodiment a computer infrastructure is provided and is operable to receive a request from a client at the wrapper determine a location corresponding to a set of current attribute values in a JIT manner for responding to the request retrieve the set of current attribute values from at least one of the following the directory server and an external source and return a set of current attributes to the client from the wrapper.

The drawings are not necessarily to scale. The drawings are merely schematic representations not intended to portray specific parameters of the invention. The drawings are intended to depict only typical embodiments of the invention and therefore should not be considered as limiting the scope of the invention. In the drawings like numbering represents like elements.

Exemplary embodiments now will be described more fully herein with reference to the accompanying drawings in which exemplary embodiments are shown. This disclosure may however be embodied in many different forms and should not be construed as limited to the exemplary embodiments set forth herein. Rather these exemplary embodiments are provided so that this disclosure will be thorough and complete and will fully convey the scope of this disclosure to those skilled in the art. For example embodiments of the invention are described in the context of Lightweight Directory Access Protocol LDAP . It will be appreciated however that the invention applies to any directory interface including but not limited to LDAP. In the description details of well known features and techniques may be omitted to avoid unnecessarily obscuring the presented embodiments.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of this disclosure. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. Furthermore the use of the terms a an etc. do not denote a limitation of quantity but rather denote the presence of at least one of the referenced items. It will be further understood that the terms comprises and or comprising or includes and or including when used in this specification specify the presence of stated features regions integers steps operations elements and or components but do not preclude the presence or addition of one or more other features regions integers steps operations elements components and or groups thereof.

Reference throughout this specification to one embodiment an embodiment embodiments or similar language means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus appearances of the phrases in one embodiment in an embodiment in embodiments and similar language throughout this specification may but do not necessarily all refer to the same embodiment.

Embodiments of this invention are directed to JIT retrieval of directory information to reduce network traffic and load on directory servers and or data sources by requesting only the information that is currently needed from the directory server. In these embodiments a wrapper operating with the directory server and an application programming interface API provides this capability. Specifically the wrapper is configured to receive a request from a client and to determine a location corresponding to a set i.e. one or more of current attribute values for responding to the request. The wrapper retrieves the set of current attribute values in a JIT manner from at least one of the following the directory server and an external source. A set of current attributes is returned to the client from the wrapper. The wrapper propagates information in a JIT manner so that only the information that will be currently used is propagated across the network.

Communication network may be described in a simplified manner as a collection of computer systems e.g. clients and servers that are interconnected by transmission lines or wireless transmissions and routers switches to enable the transfer of information among them as illustrated in . These computer systems are often modeled by their functions client server. In the client server model communication generally takes the form of a request from the client to the server asking for an operation to be performed e.g. request for data . The server performs the work and sends a reply. Client may then retrieve and display the requested information. However a computer system may operate as both a server and a client.

Client server systems communicate with each other using a variety of network protocols such as Transmission Control Protocol Internet Protocol TCP IP and Integrated Packet Exchange IPX and a variety of application protocols such as Hypertext Transfer Protocol HTTP and File Transfer Protocol FTP . A user typically views the network as a collection of web pages that are typically located on a server at a network site. Each web page may contain text embedded components such as graphic image files and address links to other pages referred to as a Uniform Resource Locator URL . Web pages are viewed using a program called a web browser that resides on a user s client device. The web browser retrieves information from a requested page on a server interprets the data and formatting commands and displays the text and special accessory files such as images on the user s client device. Web pages may be created using Hypertext Markup Language HTML with hypertext and other information to be displayed in a web browser.

Directory server operates with a repository which may be a directory of data entries containing LDAP information and may be stored in directory server . Upon receiving a request for information from any of the clients A B C the request may be sent to and received directly by directory server . Alternatively web server retrieves data from directory server which in turn retrieves data from its associated repository .

LDAP is a networking protocol for querying and modifying directory services running over TCP IP. Repository may contain a tree of data entries each of which comprises a collection of attributes that contain information about an object. Every attribute has a type and one or more values. The type of the attribute is associated with the syntax which specifies the kind of values the can be stored e.g. cn common name sn surname givenName mail uid and userPassword . Schemas define the type of objects that can be stored in the directory. Schemas also list the attributes of each object type and whether these attributes are required or optional. Repository may be any type of recordable media including but not limited to DASD direct access storage device floppy disk CD ROM DVD semiconductor memory or magnetic tape along with a drive or other apparatus for accessing data in the directory entries. Repository may be either rewritable media or read only. If read only then the directory entries have to be placed on the media by some process other than use of the drive or apparatus used for access.

Attributes within repository will often have different names and syntaxes in source and target systems. Some attribute values for a target system don t have a direct mapping and may have to be computed from values in one or more source systems for example as when first name middle initial and last name in a system are combined to create a cn common name attribute in repository . However attribute mapping rules can be much more complex. For example the users in LDAP repositories can be organized into a hierarchical directory tree with a distinguished name DN that specifies the precise location of their entry in the tree. When groups are synchronized between directories with different tree structures the groups contain the DNs of users in a member attribute. The DNs have to be mapped between the tree structures as the group entries are copied or synchronized between the directories. As discussed in further detail below repository maintains both internal values and attribute values from other sources e.g. external sources as well as information on how to retrieve these external values and how long they can be used.

Referring now to a directory apparatus for JIT retrieval of LDAP information i.e. data that operates in the environment shown in is described in more detail. Directory apparatus comprises directory server and repository operating with an application programming interface API and a wrapper . Repository is accessed using the client server model of communication. In the embodiment shown an application that wants to read or write information in repository does not access it directly. Instead it calls a function or API that causes a message to be sent to another process. This second process accesses the information in repository on behalf of the requesting application via TCP IP.

Directory server is coupled to wrapper which is adapted to interface with a user application on client . Wrapper as used herein is defined as software code a program module s application program s etc. which takes lower level information and makes it usable at a higher level. For example wrapper is capable of changing the structure or format of LDAP information within LDAP repository without modifying user application . Wrapper adheres to the interface of repository and adds integration functionality without changing the repository itself. Furthermore wrapper does nothing until a request is received from client . Instead wrapper integrates only when a request is made so that only the data requested is fetched. Once a request is made user application interfaces with wrapper instead of directly to repository .

During operation as shown in user application sends a query or request from client across a path towards directory server where the request is received at wrapper . Wrapper intercepts the request before it reaches directory server and determines a location corresponding to a set of current attribute values for responding to the request. This location shown here within directory server and an external source C for exemplary purposes only depends on whether the request can be satisfied by data currently within directory server . As used herein a current attribute value is an attribute value that has been updated within a determined period of time to ensure that the information is sufficiently up to date. Once the location is determined wrapper is configured to retrieve set of current attribute values asynchronously or synchronously from at least one of the following directory server and an external source e.g. an LDAP provider . To accomplish this API accepts the request from wrapper and forwards it to repository . If the request can be satisfied by data currently within directory server then the current attribute value s is returned to client from wrapper thus reducing network traffic and load on external sources . However in the case that the request cannot be satisfied by data currently within directory server e.g. an attribute value is stale at least one of set of current attribute values is asynchronously retrieved from external sources A B and or C.

As discussed above when a request is sent from client directory server attempts to first retrieve the attributes internally. Wrapper determines whether the request can be satisfied by data currently within directory server as shown in the process flow of . In a first step an entry in directory server is identified for responding to the request. If the entry is found wrapper determines whether one or more attributes of the entry in directory server have been updated within a predetermined period of time. To accomplish this a refresh date cached value stored in wrapper for the attribute values is checked against a predetermined refresh date to determine if the data is stale and must be refreshed. If the data must be refreshed the request from client is not capable of being satisfied solely by directory server and data needs to come from external source . Wrapper maps i.e. determines the location corresponding to set of current attributes for responding to the request from one or more external sources A B or C .

Next it must be determined whether external sources can satisfy the request in the case that one or more attributes of the entry in directory server have not been updated within a predetermined period of time. If external source is unable to satisfy the request i.e. the location cannot be mapped wrapper determines whether the one or more attributes of the entry in directory server have been updated within a second predetermined period of time in the case that external source is unable to satisfy the request. For example if the identity i.e. distinguished name cannot be mapped then the refresh date cached value stored in wrapper for the attributes is again checked against a second typically less preferable predetermined refresh date to determine if the values in repository may still be used. If the attribute values are acceptable the request for the attributes is passed on to directory server . However if the attribute values are not current within the first or second predetermined periods of time and external sources A C are unavailable then the request cannot be satisfied and an error message is returned to client . In one embodiment wrapper may determine that the attribute values may be returned even if stale beyond the first and second predetermined periods of time. In yet another embodiment repository may be preloaded if the identity cannot be mapped by wrapper .

Once set of current attribute values is located and a set of current attributes i.e. attributes containing current attribute values is subsequently returned from wrapper to client wrapper asynchronously caches the set of current attribute values in repository and updates a refresh value for each of set of current attribute values . The refresh value represents the date and time that the attribute values were cached in repository as well as how long they can be used before becoming stale. The refresh and staleness limits may be specified by an administrator. Caching the attributes in repository reduces network traffic and load on external sources and provides a redundant source in case any of external sources fail.

As discussed above repository maintains both internal attribute values and attribute values from external sources as well as information on how to retrieve these external values and how long they can be used. Referring now to a structure for mapping attribute sources according to an embodiment of the invention will be described in greater detail. Initially wrapper checks to see if there are instance records in the CacheHistory for the requested instance which is queried by DN. If records are found structure finds corresponding AttributeSourceMapping for each CacheHistory. Next structure evaluates whether AttributeSourceMapping.refreshFrequency CacheHistory.dateCached

If some of the data is not current structure checks to see if there are instance records in the CacheHistory for the requested instance queried by DN . If records are found structure finds corresponding AttributeSourceMapping for each CacheHistory and evaluates whether the AttributeSourceMapping.refreshFrequency CacheHistory.dateCached

After the current attribute values are located and subsequently returned from the wrapper to the client structure invokes a AttributeMap.updateRefreshDates method which updates the corresponding CacheHistory with a date determined by wrapper . Wrapper updates the data in repository via directory server .

In still another embodiment the methodologies disclosed herein can be used within a computer system to provide JIT propagation of directory information. In this case one or more systems for performing the processes described in the invention can be obtained and deployed to a computer infrastructure. To this extent the deployment can comprise one or more of 1 installing program code on a computing device such as a computer system from a computer readable medium e.g. a transitory computer readable medium or a non transitory computer readable medium 2 adding one or more computing devices to the infrastructure and 3 incorporating and or modifying one or more existing systems of the infrastructure to enable the infrastructure to perform the process actions of the invention.

Furthermore one or more program modules may carry out the methodologies disclosed herein as shown in . According to one embodiment in step S a directory server operating with a wrapper is provided. In S a request is sent from a client to the server and received at the wrapper in S. In S the location corresponding to a set of current attribute values for responding to the request is determined by the wrapper. In S the set of current attribute values is retrieved from at least one of the following the directory server and an external source. In S a set of current attribute values is returned to the client from the wrapper. In S a set of current attributes is asynchronously cached. In S a refresh value for each of the set of current attribute values is updated. The flowchart of illustrates the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the blocks may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently. It will also be noted that each block of flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

An implementation of a computer for carrying out the invention may be stored on or transmitted across some form of computer readable media. Computer readable media can be any available media that can be accessed by a computer. By way of example and not limitation computer readable media may comprise computer storage media and communications media. 

 Computer storage media include volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by a computer.

 Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as carrier wave or other transport mechanism. Communication media also includes any information delivery media.

The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above are also included within the scope of computer readable media.

It is apparent that there has been provided with this invention an approach for just in time JIT retrieval of directory information. While the invention has been particularly shown and described in conjunction with a preferred embodiment thereof it will be appreciated that variations and modifications will occur to those skilled in the art. Therefore it is to be understood that the appended claims are intended to cover all such modifications and changes as fall within the true spirit of the invention.

