---

title: Validating updates to domain name system records
abstract: Disclosed are various embodiments for validating updates to domain name system (DNS) records. A request is received to modify at least one DNS record associated with a domain owned by a domain owner. The request to modify the at least one DNS record is compared with at least one policy. The at least one policy is configurable by the domain owner. The requested modification to the at least one DNS record is selectively granted based at least upon the comparison.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08719900&OS=08719900&RS=08719900
owner: Amazon Technologies, Inc.
number: 08719900
owner_city: Reno
owner_country: US
publication_date: 20100518
---
A hierarchical naming system known as the Domain Name System DNS allows computers services or any resource connected to the Internet or a private network to be referred to by names such as www.foo.com. DNS servers cooperate to translate domain names that are meaningful to humans into numeric addresses that are used for computer to computer communication.

DNS servers can be targets of domain jacking whereby an attacker hijacks control of a domain name. Conventional security measures for DNS servers do not provide a robust defense against domain jacking. In the simplest form of attack an administrator s account credentials are guessed or gained via a man in the middle attack by way of malware on the administrator s computer. Once these credentials have been compromised attackers can then modify records used by the DNS servers to direct traffic for the domain elsewhere such as a propaganda website or a phishing website.

The present disclosure relates to controlling access to DNS records. In various embodiments the present disclosure improves the security of DNS servers and reduces the threat of domain jacking by preventing updates to DNS records when an update does not conform to a policy. Update policies describe possible changes to a field in a DNS record in terms of either allowable changes or prohibited changes. Policies can describe allowable changes in terms of resources owned by the domain owner. An example of an update policy might be ensure that all mail server records identify a domain owned by the domain owner and ultimately point to infrastructure controlled by the domain owner. 

In various embodiments the present disclosure determines whether the requested change to a field of the DNS record would violate a condition specified in the policy. Based on the results of applying the policy the administrator s request to update the record is either granted or denied. The present disclosure also provides for the configuration of update policies by the administrator on behalf of the domain owner. In some embodiments configuring an update policy requires a second level of authentication which is more inconvenient than the authentication required for purposes of updating a DNS record. In the following discussion a general description of the system and its components is provided followed by a discussion of the operation of the same.

With reference to shown is a networked environment according to various embodiments. The networked environment includes a computing device that is in data communication with one or more administrator clients by way of a network . The computing device may also be in communication with one or more computing devices by way of a network . In various embodiments the network and the network may be the same network or a different network. The networks may include for example the Internet intranets extranets wide area networks WANs local area networks LANs wired networks wireless networks or other suitable networks etc. or any combination of two or more such networks.

The computing device may comprise for example a server computer or any other system providing computing capability. Alternatively a plurality of computing devices may be employed that are arranged for example in one or more server banks or computer banks or other arrangements. To this end a plurality of computing devices together may comprise for example a cloud computing resource a grid computing resource and or any other distributed computing arrangement. Such computing devices may be located in a single installation or may be dispersed among many different geographical locations. In one embodiment the computing device represents a virtualized computer system executing on one or more physical computing systems. For purposes of convenience the computing device is referred to herein in the singular. Even though the computing device is referred to in the singular it is understood that a plurality of computing devices may be employed in the various arrangements as described above.

Various applications and or other functionality may be executed in the computing device according to various embodiments. Various data is also stored in an update policy data store and or a DNS record data store that is accessible to the computing device . The update policy data store may be representative of a plurality of DNS policy data stores as can be appreciated. The DNS record data store may be representative of a plurality of DNS record data stores as can be appreciated. The data stored in the update policy data store and or the DNS record data store for example is associated with the operation of the various applications and or functional entities described below.

The components executed on the computing device for example include a DNS core service a DNS administration application a DNS update validation service and other applications services processes systems engines or functionality not discussed in detail herein. The DNS core service is executed to provide name resolution services to various components such as administrator client by implementing the DNS protocol described in standards such as Request for Comment RFC 1034 RFC 1035 etc. . The DNS core service provides name resolution services by communicating with other components that also implement the DNS protocol such as a DNS service . In particular the DNS core service accesses DNS records in the DNS record data store in order to respond to DNS queries from other DNS components. The DNS core service also sends DNS queries to other DNS components when appropriate. DNS query and response behavior is described in more detail in the various DNS standards.

The DNS administration application is executed to provide an administrator interface to DNS records in the DNS record data store to the administrator client such that an owner of a particular domain or an administrator acting on behalf of the domain owner can update DNS records associated with the domain. In this disclosure the term update as applied to DNS records includes adding and deleting records as well as modifying the contents of existing records. To accomplish this the DNS administration application may generate one or more network pages comprising user interfaces that are sent to the administrator client over the network . In various embodiments the DNS administration application may utilize any type of middleware framework to communicate with a client application executing on the administrator client . Examples of such frameworks include remote procedure calls service oriented architecture SOA representational state transfer REST and other frameworks.

The DNS update validation service is executed to validate requests to add modify or delete DNS records associated with a particular domain. Such requests referred to herein as update requests are made by the owner of the particular domain through administrator client . The DNS update validation service ensures that an update request conforms to the update policies stored in update policy data store . The DNS update validation service is also executed to perform authentication of the domain owner that requests a DNS update before the update is performed.

The administrator client is representative of a plurality of client devices that may be coupled to the network . The administrator client may comprise for example a processor based system such as a computer system. Such a computer system may be embodied in the form of a desktop computer a laptop computer a personal digital assistant a cellular telephone set top box music players web pads tablet computer systems or other devices with like capability.

The administrator client may be configured to execute various applications such as a browser and or other applications. The administrator client may be executed in an administrator client for example to access and render network pages such as web pages or other network content served up by the administrator client and or other servers. The administrator client may be configured to execute applications beyond the browser such as for example email applications instant message applications and or other applications.

The computing device may comprise for example a server computer or any other system providing computing capability. Alternatively a plurality of computing devices may be employed that are arranged for example in one or more server banks or computer banks or other arrangements. To this end a plurality of computing devices together may comprise for example a cloud computing resource a grid computing resource and or any other distributed computing arrangement. Such computing devices may be located in a single installation or may be dispersed among many different geographical locations. In one embodiment the computing device represents a virtualized computer system executing on one or more physical computing systems. For purposes of convenience the computing device is referred to herein in the singular. Even though the computing device is referred to in the singular it is understood that a plurality of computing devices may be employed in the various arrangements as described above.

Various applications and or other functionality may be executed in the computing device according to various embodiments. The components executed on the computing device for example include a DNS service and other applications services processes systems engines or functionality not discussed in detail herein. The DNS service is executed to implement the DNS protocol by communicating with other components that also implement the protocol such as DNS core service .

Next a general description of the operation of the various components of the networked environment is provided. To begin a user at an administrator client may communicate over the network with the DNS administration application to request a user interface that allows updates to DNS records stored in the DNS record data store . To accomplish this the DNS administration application may in one embodiment generate one or more network pages comprising the user interfaces for updating DNS records. The DNS administration application then sends the generated network page over the network to the administrator client which is then rendered by the browser .

Before the user is allowed to update any DNS records the administrator client in cooperation with the DNS administration application authenticates the user in some manner e.g. username and password . The authentication process associates the user with a particular domain name or set of domain names that is owned by a single entity. Updates are limited to records associated with the authenticated domain name s .

The domain owner interacts with the network page to indicate an update to a DNS record or set of records. Such an update may comprise for example creating one or more new records deleting one or more existing records or modifying the contents of one or more existing records. As one non limiting example the domain owner may change the Internet Protocol IP address range associated with a particular domain name. As another non limiting example the domain owner may add a DNS record which associates a new canonical name with a particular domain name. As yet another non limiting example the domain owner may delete an existing DNS record which associates one domain name with another. The administrator client then sends information from the network page describing the update DNS record request over the network to the DNS administration application .

In another embodiment the administrator client may generate the user interface locally rather than receiving an interface from the DNS administration application . In such an embodiment the domain owner interacts with the locally generated user interface to indicate an update to a DNS record or set of records in the manner described above. The administrator client then generates a DNS update request based on this interaction and sends the DNS update request to the DNS administration application for example through a network service such as a web service.

A request to update a DNS record describes the record s being updated and the change to be made to the data field of the record. As one non limiting example a request to update a DNS address record may describe the record as A record having address value 196.44.10.10 and the change to be made as modify value to 196.88.10.10. As another non limiting example a request to update may describe the record as all mail server records and the change to be made as delete . As noted above all update requests pertain to records associated with the authenticated domain owner. Therefore the update request delete all mail server records implicitly applies only to those mail server records associated with the domain owner and not to all mail server records in the DNS record data store .

After obtaining a DNS update request the DNS administration application passes the DNS update request on to the DNS update validation service for validation. DNS update requests pass through the DNS administration application and then DNS administration application has to authenticate the user as the domain owner. Therefore update requests received by the DNS update validation service are limited to records associated with a particular domain name or set of domain names.

The DNS update validation service validates the DNS update request by applying one or more appropriate update policies stored in the update policy data store . To this end the DNS update validation service determines whether the requested change to an identifier field e.g. IP address field domain name field of the DNS record would violate the condition in an update policy . Based on the results of applying the update policies the DNS update validation service grants or denies the update request. An update policy specifies at least one DNS record type and at least one condition to be enforced on the record s data field during the update. Conditions may be negative expressed in terms of a prohibited modification to a DNS record or positive expressed in terms of an allowable modification to a DNS record .

To validate the update request the DNS update validation service finds an update policy that matches the type of DNS record being updated. The DNS update validation service examines the requested change to the DNS record and determines whether the requested change would violate a condition in the update policy . As one non limiting example if the request was to update a particular A record with a new address field 196.88.10.10 and the update policy for A records specified the condition must be in the range 168. . . then the DNS update validation service would deny the update request. The request would be denied because 196.88.10.10 is not in the range 168. . . and therefore the updated DNS record would violate the condition specified by the update policy .

A condition involving an IP address may specify a specific address an address range or multiple address ranges. The address ranges may be discontiguous. A condition may specify a particular domain name or a list of domain names. The list may be a whitelist or a blacklist. When a condition contains a whitelist the update is allowed as long as the new domain name is included in the list. When the condition contains a blacklist the update is prohibited whenever the new domain name is included in the list. Whitelists and blacklists may also be used with IP addresses.

Another example of a condition is the all owner domains condition in which the update is allowed as long as the new address or new domain name is one that is also owned by the authenticated domain owner. For example a domain owner may own abc.com as well as foo.com. In that case the policy including the CNAME record type and the all owner domains condition would allow a new CNAME record that points www.foo.com to bigserver.abc.com because both are owned by the same entity.

Yet another example of a condition is the owner infrastructure condition in which the update is allowed as long as the new identifier field ultimately points to infrastructure controlled by the authenticated domain owner. In some embodiments the identifier field is an address field or a domain name field.

Moving now to shown is a flowchart that provides one example of the operation of a portion of the DNS update validation service according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the DNS update validation service as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing device according to one or more embodiments.

Beginning with box the DNS update validation service obtains a DNS update request from DNS administration application . As noted above the update request originates from an administrator client over a network and the DNS administration application passes the request on to the DNS update validation service . As a non limiting example the update request may be conveyed by way of hypertext transfer protocol HTTP SOAP and or some other protocol.

Next in box the DNS update validation service finds an update policy that matches the type of DNS record being updated. In box the DNS update validation service determines whether any matching update policy was found. If in box the DNS update validation service determines that no matching update policies were found the DNS update validation service moves to box .

In box the DNS update validation service updates the DNS record in accordance with the update request. In some embodiments this involves using the services of the DNS core service . In box the DNS update validation service indicates that the update request was granted. The administrator client is notified of this result. Thereafter the DNS update validation service ends.

If instead in box the DNS update validation service determines that a matching update policy was found the DNS update validation service proceeds to box . In box the DNS update validation service examines the requested update to the DNS record and determines whether the requested update would violate the condition in the update policy . If in box the DNS update validation service determines that the condition would be violated the DNS update validation service moves to box . In box the DNS update validation service indicates that the update request was denied. The administrator client is notified of this result. Thereafter the DNS update validation service ends.

If instead in box the DNS update validation service determines that the condition in the matching update policy would not be violated the DNS update validation service moves to box . In box the DNS update validation service updates the DNS record in accordance with the update request. In box the DNS update validation service indicates that the update request was granted. The administrator client is notified of this result. Thereafter the DNS update validation service ends.

Turning to shown is a flowchart that provides another example of the operation of a portion of the DNS update validation service according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the DNS update validation service as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing device according to one or more embodiments.

Beginning with box the DNS update validation service receives credentials representing the domain owner from the administrator client . These credentials are for purposes of configuring update policies . In other words once authenticated with these credentials the domain owner is permitted to create new update policies delete existing update policies and modify existing update policies . In some embodiments the DNS administration application may serve as an intermediary between the DNS update validation service and the administrator client . In other embodiments the DNS administration application is not involved in obtaining these credentials.

Next in box the DNS update validation service authenticates the received credentials to determine whether the domain owner is authorized to configure update policies . The authentication performed in box is in addition to the authentication which determines whether a user can update DNS records in DNS record data store . In some embodiments the authentication mechanism used for purposes of policy configuration is a different mechanism than the one used for purposes of DNS record updates. In some of these embodiments the authentication mechanism used for purposes of policy configuration imposes a greater degree of inconvenience than does the one used for purposes of DNS record updates such that the configuration of update policies is more difficult to hack than DNS record updates. Examples of authentication mechanisms for policy configuration include requiring the domain owner to provide a hardware based authentication token to be identified through biometrics or to place a voice call and speak to a human representative or to an interactive voice response system.

In box the DNS update validation service determines whether the policy configuration authentication passed or failed. If in box the DNS update validation service determines that the policy configuration authentication failed the DNS update validation service moves to box . In box the DNS update validation service notifies the administrator client that the policy configuration authentication failed. Thereafter the DNS update validation service ends.

If in box the DNS update validation service determines that the policy configuration authentication passed the DNS update validation service moves to box . In box the domain owner is allowed to configure update policies . Various configuration mechanisms may be used. Configuration may be provided for example by a user interface that is generated by the DNS administration application and presented to the domain owner by the browser which executes on the administrator client . Alternatively update policies may take the form of a text file such that a domain owner configures an update policy by editing the text file at the administrator client and uploads the edited text file to the computing device which then executes the DNS update validation service . When the domain owner has finished configuring the update policies the DNS update validation service ends.

Referring next to shown is a schematic block diagram of the computing device according to an embodiment of the present disclosure. The computing device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end the computing device may comprise for example at least one server computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are the DNS core service the DNS administration application the DNS update validation service and potentially other applications. Also stored in the memory may be an update policy data store a DNS record data store and other data. In addition an operating system may be stored in the memory and executable by the processor . While not illustrated the computing device also includes components like those shown in whereby the DNS service is stored in a memory and executable by a processor.

It is understood that there may be other applications that are stored in the memory and are executable by the processor as can be appreciated. Where any component discussed herein is implemented in the form of software any one of a number of programming languages may be employed such as for example C C C Objective C Java Java Script Perl PHP Visual Basic Python Ruby Delphi Flash or other programming languages.

A number of software components are stored in the memory and are executable by the processor . In this respect the term executable means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory and run by the processor source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory and executed by the processor or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory to be executed by the processor etc. An executable program may be stored in any portion or component of the memory including for example random access memory RAM read only memory ROM hard drive solid state drive USB flash drive memory card optical disc such as compact disc CD or digital versatile disc DVD floppy disk magnetic tape or other memory components.

The memory is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memory may comprise for example random access memory RAM read only memory ROM hard disk drives solid state drives USB flash drives memory cards accessed via a memory card reader floppy disks accessed via an associated floppy disk drive optical discs accessed via an optical disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also the processor may represent multiple processors and the memory may represent multiple memories that operate in parallel processing circuits respectively. In such a case the local interface may be an appropriate network that facilitates communication between any two of the multiple processors between any processor and any of the memories or between any two of the memories etc. The local interface may comprise additional systems designed to coordinate this communication including for example performing load balancing. The processor may be of electrical or of some other available construction.

Although the DNS core service the DNS administration application the DNS update validation service and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits having appropriate logic gates or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The flowcharts of show the functionality and operation of an implementation of portions of the DNS update validation service . If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the flowcharts of show a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in may be executed concurrently or with partial concurrence. Further in some embodiments one or more of the blocks shown in may be skipped or omitted. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Also any logic or application described herein including the DNS core service the DNS administration application the DNS update validation service that comprises software or code can be embodied in any non transitory computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present disclosure a computer readable medium can be any medium that can contain store or maintain the logic or application described herein for use by or in connection with the instruction execution system. The computer readable medium can comprise any one of many physical media such as for example electronic magnetic optical electromagnetic infrared or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives memory cards solid state drives USB flash drives or optical discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

