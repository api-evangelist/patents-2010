---

title: Publish-subscribe system
abstract: A publish-subscribe system publishes events associated with one or more objects represented by files within a file system. The files may be accessed using a file system application programming interface by both publishers and subscribers. Each file may contain an identifier and a plurality of attributes and each attribute may have a name and a value. The files and the associated objects may be persisted to compensate for restarts and failures of a computing platform hosting the system for publish-subscribe.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09026567&OS=09026567&RS=09026567
owner: 2236008 Ontario Inc.
number: 09026567
owner_city: Waterloo, Ontario
owner_country: CA
publication_date: 20100514
---
A publish subscribe system may allow publishers to publish events associated with objects that may be distributed to many recipients known as subscribers. Rather than sending publish events to specific receivers each publish event is associated with one of one or more objects. Subscribers interested in one or more objects may elect to receive publish events by subscribing to objects of interest with or without knowledge of the publishers.

There is a proliferation of different publish subscribe systems with little uniformity in the interfaces for publishers and subscribers. Software developers may be reluctant to adapt their publisher and subscriber application implementations to multiple interfaces and as a result the potential for leveraging these application implementations is reduced.

A publish subscribe system publishes events associated with one or more objects represented by files within a file system. The publish subscribe files may be accessed through file system software implemented by applications libraries and or an operating system stored on a non transitory medium. The file system software may comprise a file system application programming interface that provides access to publishers and subscribers. The publish subscribe files may comprise an identifier and one or more attributes. The attributes may be associated with a name and may include one or more values. The publish subscribe files and some or all of the associated objects may persist over restarts and failures of a computing platform hosting the publish subscribe system and may be retained in a persistent file system and or a non volatile medium such as a storage device.

In some publish subscribe systems one or more publishers may be coupled to one or more subscribers through an asynchronous device that publishes events associated with one or more objects that may not be synchronized with other parts of a communication system. A local or remote controller or device in a distributed architecture may publish events using a common file system application programming interface. The subscribers may access the publish events though the same file system application programming interface used by the publishers. The subscribers may receive notifications e.g. such as the creation modification and deletion of publish subscribe files and retrieve details of the events using the same file system application programming interface.

Other systems methods features and advantages of the invention will be or will become apparent to one with skill in the art upon examination of the following figures and detailed description. It is intended that all such additional systems methods features and advantages be included within this description be within the scope of the invention and be protected by the following claims.

A publish subscribe system allows publishers of messages to send messages to subscribers through a publish subscribe file system that may be stored on a non volatile storage medium. By distilling the functionality of one or more publish subscribe architectures into a hierarchical file arrangement the publish subscribe system may hide the details of one or more static or dynamic publish subscribe systems. The system allows for greater scalability device independence and a more dynamic and flexible communication network.

In the file system manager that may be hosted by a server or controller. The file system manager may invoke translations from the original or native commands received from the publisher or subscriber into the corresponding operations supported on the file system content that may be distributed or local to the server or controller hosting the file system manager. Such operation may include for example create modify and delete mount points transactionality e.g. snapshots and copy on write COW and other similar or different functions.

In the file system content includes directories and files that may be arranged in a hierarchical arrangement as shown or in a non hierarchical arrangement not shown . Each file and directory may have a corresponding file name or directory name. The file system content may include at least one publish subscribe mount point e.g. fs ps under which may be contained a plurality of publish subscribe files e.g. publish subscribe files and directories e.g. directories . Some or each publish subscribe file may represent a published object in the publish subscribe system . Some or each file and directory may be uniquely identified e.g. addressed within a pathname space by its pathname. In some systems a pathname for a given file or directory may be comprised of a mount point name followed by the names of each of any intervening directories separated by a separator character e.g. followed by the given file name or directory name. In alternative systems pathnames may have different formats.

Any of the one or more publisher applications may invoke functions in the file system application programming interface to cause creation of one or more objects when the objects did not previously exist and to publish events associated with the objects. A publisher application may prepare to publish to an object by invoking a file open function in the file system application programming interface hereinafter referred to as opening the file in a write only mode. Alternatively the publisher may open the publish subscribe file in a read write mode thereby both preparing to publish to and also subscribing to the object. The opening of the file may comprise a non blocking operation. Opening a publish subscribe file that does not already exist may optionally cause the creation of the publish subscribe file with no attributes . Arguments provided by the publisher application in the file open function invocation may include any of an object name a pathname a file name an access mode and or other access points. The invocation of the file open function may return a file descriptor or a file handle that may be used in subsequent invocations of other functions in the file system application programming interface to refer to the opened publish subscribe file .

After a publisher application has prepared to publish an object by opening the associated publish subscribe file e.g. any of publish subscribe files the publisher application may publish events associated with the object by invoking a file write function in the file system application programming interface . When a new attribute e.g. one that does not already exist in the publish subscribe file is included in a data element to the file write operation the attribute may be added to the publish subscribe file. When an existing attribute is included in a data element to the file write operation the corresponding attribute in the existing publish subscribe file may be modified. A write operation containing in a data element to the file write operation an attribute tag preceded by an attribute deletion flag e.g. may delete the attribute. Opening a publish subscribe file in truncate mode may delete all existing attributes . The arguments in a file write operation may optionally include an object identifier.

Multiple publishers applications may open and publish e.g. write to the same object. The different publishers may for example each update different attributes or alternatively more than one publisher may update the same attribute in a publish subscribe file . When one or more attributes are included in a file write operation by the publisher other existing attributes in the publish subscribe file are not affected e.g. not modified . When writing an object a publisher may associate a quality parameter with each attribute . In some systems the attribute in the publish subscribe file is only modified when the quality associated with the attribute in the write operation is equal to or higher than a quality associated with the attribute already contained in the publish subscribe file . The quality may for example be an integer value between 0 and 9 with larger integers representing higher quality values. When no quality value is explicitly associated with an attribute in a write operation the quality may default to the lowest quality value e.g. 0 .

Any of the one or more subscriber applications through processors controllers etc. may invoke functions in the file system application programming interface to subscribe to one or more objects and to receive publish events associated with the objects. A subscriber application through processors controllers etc. may subscribe to an object by opening the corresponding publish subscribe file e.g. any of publish subscribe files in a read mode e.g. read only . The subscriber application may receive publish events associated with the subscribed object by receiving a notification and responsive to the notification invoking a read function in the file system application programming interface hereinafter referred to as reading the file . Alternatively the subscriber application may receive publish events associated with the subscribed object by reading the file without receiving a notification.

The subscriber application may open a publish subscribe file in either full or delta mode. When the publish subscribe file is opened in a full mode the subscriber may receive a single consistent version of the contents e.g. identifier and attributes of the object whenever the publish subscribe file is read. When a publisher publishes events associated with an object several times before a subscriber reads the publish subscribe file the subscriber may receive the current state of the publish subscribe file content at the time of the file read. In those circumstances where the subscriber has also requested publication event notification for the object the subscribe may receive notifications for each subsequent publish event for the object.

The publish subscribe system may interface or couple many systems including one or more media players not illustrated . A publish subscribe file may represent an object called current play that models a currently playing media content item. A media player user interface may be a publisher application that creates the current play publish subscribe file and initially publishes the contents of author album title duration and time attributes. A media playback manager may also be a publisher application that repeatedly publishes updates to the time attribute as the play time of the media content item changes. The media player user interface may also be a subscriber application that subscribes to the current play publish subscribe file receives the events e.g. updates published by the media playback manager and refreshes a display of the media play time on the user interface.

When the publish subscribe file is opened in a delta mode for example the first time a subscriber reads the publish subscribe file the entire contents e.g. identifier and attributes of the publish subscribe file may be returned. After a successful file read operation a change status for the object may be cleared e.g. is set to unchanged . Subsequent readings of the publish subscribe file opened in delta mode by the subscriber may return the identifier and only attributes that have changed since a preceding successful read of the publish subscribe file .

A non blocking flag may be associated with the open publish subscribe file to allow the subscriber to control e.g. adapt the behavior of the file read operation. When the contents of the publish subscribe file have not changed since a previous file read e.g. the change status is unchanged a file read with the non blocking flag set may return immediately with no data while a file read with the non blocking flag clear e.g. blocking may wait until the object is changed and then returns the contents e.g. attributes that have changed. When not specified by the subscriber in a file open invocation the non blocking flag may be set e.g. behavior is non blocking by default. The default behavior may ensure that standard file utilities do not block when reading a publish subscribe file that does not change. The subscriber application may unsubscribe from the object by invoking a file close function.

Multiple subscribers may subscribe to e.g. open the same publish subscribe file in a delta mode. A separate change status is maintained for each subscriber so that each subscriber may see all of the changes made to the object. A successful file read of the publish subscribe file by one subscriber may not clear the change status for other subscribers of the same publish subscribe file .

The publish subscribe system may provide a notification mechanism. A subscriber may request to receive a notification when a publish event occurs for a specified publish subscribe file e.g. object . The notification request may for example be in the form of an ionotify function call in accordance with a LINUX application programming interface or QNX Neutrino RTOS application programming interface. The notification may take the form of a PULSE a SIGNAL or a SEMAPHORE as described in any of POSIX LINUX and QNX Neutrino RTOS operating system specifications. In other systems other similar notification mechanisms may be used. After receiving the notification the subscriber may invoke a read function on the publish subscribe file to obtain the details of the publish event.

A subscriber may subscribe to multiple objects by opening each of the associated publish subscribe files e.g. any of publish subscribe files . Alternatively the subscriber may subscribe to all objects that are contained in one directory by opening the directory e.g. . Optionally the publish subscribe system may provide a proxy file having a predetermined name e.g. .all in each directory and the subscriber may open the proxy file to subscribe to all objects that are contained in the corresponding directory. A read operation of the directory or of the proxy file in full mode may return the contents of one of the publish subscribe files e.g. or representing an object. Each subsequent read operation may return the contents of another publish subscribe files representing the objects. A read operation in delta mode may return a queue of every attribute change in any of the publish subscribe files. The results of the read operation in delta mode may span multiple publish subscribe files.

Data elements provided to or returned by read and write function invocations may contain options for each line containing an object name or an attribute . The options may be in the form of an open square bracket followed by one or more single letter options and followed terminated by a close square bracket . When a letter option is preceded by a minus sign the option maybe cleared otherwise the option is set. If the letter option is not specified the option is not changed. An n option may be used for non persistence. When the non persistence option is set for an attribute the attribute will not be persisted when the object containing the attribute is persisted. By default the non persistence options may be cleared e.g. persistent for each attribute . The non persistence option may be set on an objectname in which case the entire object will be not be persisted thereby overriding the non persistence option on individual attributes in the object. Some example attributes with options and there effects may include 

A quality option may have values of 0 to 9. This option may set a quality associated with an attribute . When the option is not specified the default quality may be set to 0 e.g. the lowest possible value . In some systems an attribute is only modified when the quality associated with a new attribute value in a write operation is equal or greater than the quality associated with the current attribute value in the object. Use of this option may ensure that the quality of an attribute value will only increase when one or more publishers provide asynchronous publication events containing the same attribute .

When an attribute name is preceded by an attribute deletion flag e.g. in a write function invocation a corresponding attribute maybe deleted from the object. When a publish subscribe file is opened in delta mode receiving an attribute name preceded by the attribute deletion flag e.g. from a file read operation may signify that the corresponding attribute has been deleted from the object.

When a publish subscribe file is created or deleted the publish subscribe system may queue a notification for each application e.g. publishers and subscribers that has either the parent directory of the created or deleted publish subscribe file or the corresponding proxy file opened in either full or delta mode. The notification may include a string such as for example objectname or objectname when the object is created or deleted respectively.

When an application e.g. publishers and subscribers has a publish subscribe file open and the corresponding object is deleted a read function invocation may return a string such as for example objectname . The publish subscribe file maybe closed when the corresponding object is deleted and only those applications that have a file descriptor from a previous open are able to continue to access the publish subscribe file .

File system utilities or commend line utilities may be used to debug file system nodes e.g. publish subscribe files and directories used in the publish subscribe system . For example a command to display all objects in the publish subscribe system may look like 

The minimum unit of persistence may be a publish subscribe directory or sub directory e.g. or . All or some of the objects in the publish subscribe directory may be written to persistent store in a single atomic operation as a single file. Saving the contents e.g. objects of the publish subscribe directory as a single entity e.g. file may ensure that objects in the publish subscribe directory that contain related or linked data are self consistent. Only the current state e.g. contents of each object e.g. publish subscribe file may be saved to persistent memory in some systems. For publish subscribe files that are open in delta mode when they are saved to persistent memory the queue of changes e.g. deltas may be lost and only the current state of the contents of the object may be saved. When the publish subscribe is restored from the saved file e.g. at start up each of the objects contained in the publish subscribe directory may be recreated in a volatile or non volatile store of a storage media. Alternatively the minimum unit of persistence may be all of the directories sub directories and objects under the publish subscribe mount point . In a further alternative the minimum unit of persistence may be individual publish subscribe files e.g. objects that may each be written to persistent store in a separate operation. On start up the file system may restore all publish subscribe nodes from the persistent store to volatile memory immediately or alternatively each object may be restored when it is first accessed a.k.a. deferred loading .

Other alternate systems and methods may include combinations of some or all of the structure and functions described or shown in one or more or each of the figures. These systems or methods are formed from any combination of structure and function described or illustrated within the figures. Some alternative systems or devices are compliant with one or more transceiver protocols. Wireless connectivity between publish subscribe systems and one or more wireless networks provide high speed connections that allow users to initiate or complete a communication at any time while stationary or on the move. The wireless connections may provide access to or transmit static or dynamic content live audio or video streams for example . The content maybe related to entertainment transactions or any area or interests.

Each of the systems and methods may be encoded in a signal bearing medium a computer readable medium such as a memory programmed within a device such as one or more integrated circuits or processed by a controller or a computer. If the methods are encoded in software the software may reside in a memory resident to or interfaced to any other type of non volatile or volatile memory interfaced or resident to a communication device. The memory may include an ordered listing of executable instructions for implementing logical functions. A logical function may be implemented through digital circuitry through source code through analog circuitry or through an analog source such through an analog electrical or optical signal. The software may be embodied in any computer readable or signal bearing medium for use by or in connection with an instruction executable system apparatus or device. Such a system may include a computer based system a processor containing system or another system that may selectively fetch instructions from an instruction executable system a non transitory apparatus or device that may also execute instructions.

A computer readable medium machine readable medium and or signal bearing medium may comprise any apparatus that contains stores communicates or transports data and or software for use by or in connection with an instruction executable system apparatus or device. The machine readable medium may selectively be but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus devices. A non exhaustive list of examples of a machine readable medium would include an electrical connection electronic having one or more tangible connections a portable magnetic or optical disk a volatile memory such as a Random Access Memory RAM electronic a Read Only Memory ROM electronic an Erasable Programmable Read Only Memory EPROM or Flash memory electronic or an optical fiber optical .

While various embodiments of the invention have been described it will be apparent to those of ordinary skill in the art that many more embodiments and implementations are possible within the scope of the invention. Accordingly the invention is not to be restricted except in light of the attached claims and their equivalents.

