---

title: Dialog server
abstract: In one embodiment, a dialog server comprising: a memory comprising instructions executable by one or more processors; and the one or more processors coupled to the memory and operable to execute the instructions, the one or more processors being operable when executing the instructions to: receive, from a client, a request for a dialog and one or more parameters associated with the request; process the request and the one or more parameters to extract information concerning the dialog; generate, based on the information concerning the dialog, code that implements one or more functionalities supported by the dialog, wherein the code can be processed directly by a web browser executing on the client; and transmit, to the client, the code for execution in the web browser.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09652552&OS=09652552&RS=09652552
owner: Facebook, Inc.
number: 09652552
owner_city: Menlo Park
owner_country: US
publication_date: 20101214
---
The present disclosure generally relates to user interfaces of web based software applications and more specifically relates to a dialog server that provides to clients a server side software library that contains code for automatically constructing user facing dialogs at runtime which may be displayed on the clients.

In the context of computer programming a user interface of a software program is where interactions between a human user of the program and the program occur. Typically the user interface of a program may include various components such as windows panels menu bars menus menu items buttons text fields check boxes dialogs etc. and particular user interface components may be arranged according to specific designs suitable to the requirements specification or functionalities of the program. The user interface via individual user interface components enables the human user to provide input to the program e.g. entering text in a text field selecting a menu item or clicking a button and displays the output of the program to the human user e.g. showing a message in a dialog or playing a video clip in a media panel .

Both web based and standalone software applications may and usually do have user interfaces. A web based application is a software application that is executed within a web browser including browsers suitable for computers and mobile devices . Typically a web based application may be associated with a unique Uniform Resource Identifier URI such as in the form of a Uniform Resource Locator URL . To invoke a web based application a user may input the URL of the web based application in a web browser. For example a social networking website such as the one provided by Facebook may provide a web based application that enables its users to stay in touch with their friends and families play Internet games and managing personal schedules. In this case to invoke the web based application a user may input the URL www.facebook.com in a web browser executing on a network device e.g. a computer or a mobile telephone . The user interface of the application includes a set of web pages that may be individually displayed in the user s web browser. For example upon invoking the application initially a login sign up page may be presented to the user so that the user may either log into his existing account or sign up for a new account. Once the user has successfully logged in a welcome page e.g. the home page of the user s account may be presented to the user from where the user may perform other activities and interact with the application e.g. communicating with friends uploading photos playing Internet games or managing the user s profile .

The present disclosure generally relates to user interfaces of web based software applications and more specifically relates to a dialog server that provides to clients a server side software library that contains code for automatically constructing user facing dialogs at runtime which may be displayed on the clients.

Particular embodiments provide a dialog library residing on a dialog server. The dialog library may implement one or more types of dialogs and each type of dialog may be included as a component of a user interface of a web based software application. The dialog library may support any number of web based applications executing within web browsers including mobile browsers running on computing devices.

In particular embodiments when a web based application executing within a web browser needs to display a dialog the web based application causes a request to be sent to the dialog library together with information describing the dialog. The dialog library processes the request generates appropriate code that may be processed and interpreted by the web browser and transmits the generated code to the web browser. The web browser may then process the code to display the dialog.

These and other features aspects and advantages of the disclosure are described in more detail below in the detailed description and in conjunction with the following figures.

The present disclosure is now described in detail with reference to a few embodiments thereof as illustrated in the accompanying drawings. In the following description numerous specific details are set forth in order to provide a thorough understanding of the present disclosure. However the present disclosure may be practiced without some or all of these specific details. In other instances well known process steps and or structures have not been described in detail in order not to unnecessarily obscure the present disclosure. In addition while the disclosure is described in conjunction with the particular embodiments it should be understood that this description is not intended to limit the disclosure to the described embodiments. To the contrary the description is intended to cover alternatives modifications and equivalents as may be included within the spirit and scope of the disclosure as defined by the appended claims.

A user interface of a software application may include various components one of which may be dialogs. A dialog is a very versatile user interface component because it may be used in many situations especially when an application needs to communicate with its user or request a user input and because it may be presented in many ways. For example a dialog may be presented in a window or a web page by itself in a popup window or as a part of a window or a web page e.g. using the tag that also includes other content. A dialog may be displayed on any type of display device such as computer monitors or mobile device screens. A dialog may be used to convey any message or notification to a user or to request any input from a user.

Because dialogs may be used for different purposes and in different ways there are many types of dialogs. In fact in practice a software application may use a large number of different types of dialogs at different times each having its own parameter names output format layout design behavior functionalities and callback functions. Consequently when developing such an application code needs to be written for each and every type of dialog used in the application which may be very time consuming. Furthermore if there are bugs i.e. errors in the dialog code the code for each and every type of dialog including both different types of dialogs as well as the same dialog running in multiple display contexts may need to be debugged separately which again may be very time consuming.

To alleviate such burdens on the software programmers particular embodiments provide a dialog library which may reside on a server and more specifically on a dialog server. In particular embodiments a dialog server may be a unitary server or may be a distributed server spanning multiple computers or multiple datacenters. A dialog server may include hardware software or embedded logic components or a combination of two or more such components for carrying out the appropriate functionalities implemented or supported by the dialog server. In particular embodiments a dialog library may include code that supports different types of dialogs. The code may be written using any suitable computer programming language such as C C Java or PHP. If needed the code may be compiled using a suitable compiler into machine code. In particular embodiments the code may be organized into objects such as functions procedures methods or classes e.g. according to the object oriented programming methodology and these objects may be invoked locally or remotely through appropriate protocols or programming interfaces. The dialog library may be available to any web based applications executing on any computing devices that are communicatively linked to the dialog server via any networks.

Suppose a web based application uses various types of dialogs for different purposes. Instead of writing separate code for each and every type of dialog used in the web based application the programmers of the application may take advantage of the dialog library residing on a dialog server. In particular embodiments when a specific dialog needs to be displayed to a user the corresponding code of the application when executed in a web browser on a computing device may cause a request to be sent to the dialog server together with the necessary information describing the desired dialog. The dialog server upon receiving such a request may invoke the appropriate objects e.g. methods or functions in the dialog library to generate code in a language such as HTML HyperText Markup Language XML Extensible Markup Language or JavaScript that may be interpreted by a web browser and transmit the code to the computing device so that the web browser running on the computing device may interpret the code to display the dialog.

In particular embodiments dialog server may include a dialog library that contains the code implementing the functionalities that support various types of dialogs including the code that when executed causing for example one or more processors of dialog server to process dialog requests received from computing devices A B C generate code that may be interpreted by web browsers for displaying the requested dialogs and transmit the generated code to the requesting computing devices A B C. In particular embodiments dialog library may be implemented as computer software and stored in computer readable non transitory and tangible medium which may be a part of dialog server . When the software is executed it may cause dialog server and more specifically one or more processors of dialog server to perform various functions supported by the software.

In particular embodiments each computing device A B C includes a web browser A B C. In particular embodiments a web based application may be executed within web browsers A B C. The user interface of the web based application including dialogs may be displayed via web browsers A B C.

For example suppose that a web based application is executed in web browser A which is running on computing device A. Further suppose that at some point during the execution of the web based application a specific dialog needs to be displayed. In particular embodiments for displaying the dialog the web based application may include code that when executed in web browser A causes a request to be sent from computing device A to dialog server . Dialog request may be sent through network using a predetermined protocol and may include information describing the requested dialog. In particular embodiments upon receiving dialog request the appropriate code in dialog library may be invoked to process dialog request in order to for example determine the type of dialog being requested and the associated parameters. Based on the information determined from dialog request about the requested dialog code for displaying the dialog in a web browser may be generated. In addition code for supporting the functionalities of the dialog may be generated. In particular embodiments the generated code may be written in a language that may be interpreted by web browser such as HTML XML JavaScript or any suitable client side scripts. The generated dialog code may then be transmitted from dialog server to computing device A. Upon receiving dialog code web browser A may process and interpret dialog code to display the requested dialog.

The code contained in a dialog library may be written in any suitable programming language. Particular embodiments may write the code contained in a dialog library in the PHP programming language and provide an Application Programming Interface API for the dialog library which defines the specific classes and methods available in the dialog library so that they may be used by software programmers when developing web based applications. In particular embodiments the dialog library may include a PHP class named ApiUIBase as a parent class for all types of dialogs. Each different type of dialog may be implemented as a separate PHP class extending class ApiUIBase . Each PHP class that implements a specific type of dialog may include any number of public private and or static methods that support different functionalities of the dialog.

In particular embodiments there are several types of dialogs that are supported by the dialog library. The following is a sample list of the types of dialogs that may be supported by a dialog library and the PHP classes that implement these types of dialogs. These types of dialogs may be suitable for a web based social networking application. For example the login dialog may be used to ask a user for his username and password so that the user may log into his account at a social networking website supported by the web based social networking application. The social networking website may provide additional applications either itself or through third party partners. For example at the website www.facebook.com after a user logs into his account he may play computer games such as FarmVille Mafia Wars or Caf World provided by a third party partner named Zynga . The permission dialog may be used to grant such applications data and other types of permissions and the bookmark dialog may be used to ask a user whether he wishes to bookmark a specific application to appear on the bookmarks list on the Facebook homepage.

In addition to the types of dialogs supported by the dialog library particular embodiments allow software programmers to define and implement any additional types of dialogs. Each additional type of dialog may be implemented as a PHP class extending the parent dialog class ApiUIBase . Once the PHP classes are implemented they may be included in the dialog library or organized into another library residing on other servers and made available to software programmers developing web based applications.

The following SAMPLE CODE 1 illustrates an example of implementing a particular type of dialog using a PHP class named StreamPublishApiUI .

In particular embodiments a dialog may be displayed in different ways and on different devices. For example a dialog may be displayed on computing and mobile devices. A dialog may be displayed in a web page by itself or as a part of a web page within a popup window within another user interface component and so on. In particular embodiments there are several types of display types or display contexts that are supported by the dialog library. Each display type may be defined using for example a unique number of string in the dialog library. The following is a sample list of the dialog display types that may be supported by a dialog library. These display types may be suitable for a web based social networking application.

In addition to the dialog display types supported by the dialog library particular embodiments allow software programmers to define and implement any additional dialog display types or contexts. Each additional display type or context may be similarly defined as a unique string or number and there may be corresponding code supporting the additional display type or context. The code may be included in the dialog library or organized into another library residing on other servers and made available to software programmers developing web based applications.

In particular embodiments in the class implementing a specific type of dialog there may be a method that returns all the display types in which the specific type of dialog may be displayed. For example in the above SAMPLE CODE at lines 2 4 there is a static method named getDisplayContexts that returns all the display types in which the dialog implemented by class StreamPublishApiUI may be displayed. In this case the dialog may be displayed as an inline iframe dialog a popup window or in a full page. If the dialog may be displayed elsewhere e.g. in other display contexts the appropriate display types may be added to the array at line . For example if the dialog may be displayed on mobile devices having mobile browsers wap or touch may be added to the list of supported display types. Once these display types are added to the list of supported display types the dialog server can render this dialog in those contexts with no extra work on the part of the dialog developer.

A dialog may have any number of parameters. For example with the login dialog there may be parameters relating to a username input field a password input filed and a submit button. These parameters may have their own unique names data types data restraints etc. In particular embodiments in the class implementing a specific type of dialog there may be one or more methods relating to the parameters of the dialog. For example in the above SAMPLE CODE at lines 5 11 there is a static method named getParamNames that returns the names and types of all the parameters of the dialog that are accessible to outside developers. And at lines 12 18 there is a static method named getInternalParamNames that returns the names and types of all the parameters of the dialog that are not accessible to outside developers.

In particular embodiments in the class implementing a specific type of dialog there may be a method that invokes the dialog itself. For example in the above SAMPLE CODE at lines 23 48 there is a public method named execute that when invoked performs the specific functionalities of the dialog.

In particular embodiments a dialog library residing on a dialog server e.g. dialog library residing on dialog server may support dialog requests from any number web browsers executing on any number of computing devices e.g. web browsers A B C executing on computing devices A B C respectively . Consequently a web based application does not need to include code that implements each and every type of dialog used in its user interface. Instead the web based application may take advantage of the dialog library and the dialogs supported by the dialog library. For each time a dialog is needed the web based application only needs to include code that requests the dialog from the dialog library.

In particular embodiments a dialog request may be sent to the dialog server through a communication network using any suitable protocol such as HTTP Hypertext Transfer Protocol . The following SAMPLE CODE 3 illustrates an example of the HTTP call to the dialog server for a dialog request 

In this case the code that implements the dialog request makes a HTTP call to invoke a server side script written in PHP which is a general purpose scripting language. The call may be transmitted to the server e.g. the dialog server using the HTTP protocol or any suitable communication protocols and invokes the server side script code named uiserver.php . In particular embodiments the server side script code e.g. uiserver.php may be a part of the dialog library residing on the dialog server. The HTTP call may also include a number of arguments which may be passed to the PHP script as input parameters. Some of these arguments are required and some are optional.

More specifically in SAMPLE CODE 3 app id is the unique identifier of the application making the dialog request and session key is the platform session key. In particular embodiments app id is always required while session key is only required if the dialog is displayed in iframe to combat clickjacking which is a malicious technique of tricking network users into revealing confidential information or taking control of their network devices while clicking on seemingly innocuous web pages. Alternatively in particular embodiments app id and session key may be combined into a single argument named access token .

In particular embodiments method is the name of the method associated with the requested dialog and is always required. Each of the sample dialog type described above has a method name which may be used with this argument.

In particular embodiments display is the display type e.g. page popup or iframe as described above where the dialog is to be displayed. This argument is optional. If no value is provided then by default the dialog is displayed in a web page by itself i.e. display type is page .

In particular embodiments next is the URL that dialog server redirects to after the user has taken an action in connection with the dialog and is required. The UR server delivers data back to the web based application by appending GET parameter of the corresponding HTTP call to this URL.

In particular embodiments channel is a URL used for cross domain communication with available JavaScript SDKs software development kits and sdk is a SDK that is in communication with dialog server such as joey android or iphone and primarily used for logging. Both of these arguments are optional.

In particular embodiments param4 is a parameter for a particular method. Each method may have one or more parameters and they may be listed in sequence here. The actual parameters of each method are specified in the API of the dialog library.

In particular embodiments upon receiving the dialog request e.g. in the format of a HTTP call described above the dialog library residing on the dialog server may process the request to extract all the arguments received with the HTTP call to determine the type of dialog requested e.g. from method the application making the request e.g. from app id or access token the display type for the dialog e.g. from display the URL address for redirecting the user action in connection with the dialog e.g. from next and other optional information as illustrated in step . The appropriate methods of the PHP class that implements the requested dialog may be invoked.

In particular embodiments the dialog library may include a number of utility classes that implement functionalities that support the processing and handling of dialog requests received from clients. For example there may be a PHP class in the dialog library named ApiUIServer which may be a parent class for the utility classes. There may be a PHP class named ApiUIParamProcessor which may include code that processes the parameters sent with a dialog request to extract the individual parameter values e.g. values for app id display and etc. . There may be a PHP class named ApiUIPreparer which may include code that prepares a dialog for display at the client such as instantiating the class that implements the requested dialog and passing the input parameters to the appreciate methods of the class.

Particular embodiments may then generate code corresponding to the functionalities of the requested dialog as illustrated in step and transmit the generated code to the computing device that has sent the dialog request. In particular embodiments the generated code may be written in any suitable language that may be directly processed and interpreted by a web browser such as HTML XML JavaScript or any suitable client side scripting language. The generated code when executed in a web browser may cause the requested dialog to be displayed in the specified display context e.g. iframe popup etc. and support the functionalities of the requested dialog. Upon receiving the generated code from the dialog server the web browser on the computing device may process the code to display the dialog and continue execution of the web based application. An example of the HTML code generated in response to a request for a stream.publish dialog is illustrated in APPENDIX A. In addition an example of the publish dialog implemented by the HTML code illustrated in APPENDIX A is illustrated in .

As illustrated in a dialog often includes various user interface components such as text fields buttons check boxes etc. Thus the code generated by the dialog server for a dialog may include code that implements such user interface components included in the dialog and supports their functionalities. In particular embodiments a dialog may have various associated parameters as described above. In particular embodiments when the generated code of a dialog is delivered to the computing device so that the dialog may be presented to its user all the original parameters associated with the dialog are encoded as hidden form fields in the HTML code. In particular embodiments when the user interacts with specific components included in the dialog such as clicking on a button the HTML form is submitted making another i.e. a second request to the dialog server with the same parameters as the original request for the dialog plus additional values corresponding to the button being clicked since buttons are form fields plus any dialog specific fields such as the text field in a Stream Publish dialog or the email field in a Permissions dialog if the developer asked for the email permission.

In particular embodiments the dialog s execute function handles all the logic and functionalities for all invocations of the dialog server and needs to take into account whether the dialog is being shown for the first time or is being invoked in response to a user action performed in connection with the dialog e.g. a button click . In particular embodiments when a button is clicked by the user the execute function takes action and then closes the dialog passing the result back to the caller in the GET params of the Next URL. If there s an error or if the dialog is multi stage then execute does not call closeDialog and instead ApiUIBase calls the dialog s prepareDialog function which needs to know how to render a dialog with the error or with the next stage of the dialog which may look the same or different as previous stages.

Particular embodiments may be implemented in a network environment. illustrates an example network environment suitable for providing software validation as a service. Network environment includes a network coupling one or more servers and one or more clients to each other. In particular embodiments network is an intranet an extranet a virtual private network VPN a local area network LAN a wireless LAN WLAN a wide area network WAN a metropolitan area network MAN a portion of the Internet or another network or a combination of two or more such networks . The present disclosure contemplates any suitable network .

One or more links couple a server or a client to network . In particular embodiments one or more links each includes one or more wireline wireless or optical links . In particular embodiments one or more links each includes an intranet an extranet a VPN a LAN a WLAN a WAN a MAN a portion of the Internet or another link or a combination of two or more such links . The present disclosure contemplates any suitable links coupling servers and clients to network .

In particular embodiments each server may be a unitary server or may be a distributed server spanning multiple computers or multiple datacenters. Servers may be of various types such as for example and without limitation web server news server mail server message server advertising server file server application server exchange server database server or proxy server. In particular embodiments each server may include hardware software or embedded logic components or a combination of two or more such components for carrying out the appropriate functionalities implemented or supported by server . For example a web server is generally capable of hosting websites containing web pages or particular elements of web pages. More specifically a web server may host HTML files or other file types or may dynamically create or constitute files upon a request and communicate them to clients in response to HTTP or other requests from clients . A mail server is generally capable of providing electronic mail services to various clients . A database server is generally capable of providing an interface for managing data stored in one or more data stores. In particular embodiments a server may host a dialog library and perform the functionalities supported by dialog library .

In particular embodiments one or more data storages may be communicatively linked to one or more severs via one or more links . In particular embodiments data storages may be used to store various types of information. In particular embodiments the information stored in data storages may be organized according to specific data structures. In particular embodiment each data storage may be a relational database. Particular embodiments may provide interfaces that enable servers or clients to manage e.g. retrieve modify add or delete the information stored in data storage .

In particular embodiments each client may be an electronic device including hardware software or embedded logic components or a combination of two or more such components and capable of carrying out the appropriate functionalities implemented or supported by client . For example and without limitation a client may be a desktop computer system a notebook computer system a netbook computer system a handheld electronic device or a mobile telephone. The present disclosure contemplates any suitable clients . A client may enable a network user at client to access network . A client may enable its user to communicate with other users at other clients .

A client may have a web browser such as MICROSOFT INTERNET EXPLORER GOOGLE CHROME or MOZILLA FIREFOX and may have one or more add ons plug ins or other extensions such as TOOLBAR or YAHOO TOOLBAR. A user at client may enter a Uniform Resource Locator URL or other address directing the web browser to a server and the web browser may generate a Hyper Text Transfer Protocol HTTP request and communicate the HTTP request to server . Server may accept the HTTP request and communicate to client one or more Hyper Text Markup Language HTML files responsive to the HTTP request. Client may render a web page based on the HTML files from server for presentation to the user. The present disclosure contemplates any suitable web page files. As an example and not by way of limitation web pages may render from HTML files Extensible Hyper Text Markup Language XHTML files or Extensible Markup Language XML files according to particular needs. Such pages may also execute scripts such as for example and without limitation those written in JAVASCRIPT JAVA MICROSOFT SILVERLIGHT combinations of markup language and scripts such as AJAX Asynchronous JAVASCRIPT and XML and the like. Herein reference to a web page encompasses one or more corresponding web page files which a browser may use to render the web page and vice versa where appropriate.

Particular embodiments may be implemented on one or more computer systems. illustrates an example computer system which may be used to implement a dialog server having a dialog library. In particular embodiments one or more computer systems perform one or more steps of one or more methods described or illustrated herein. In particular embodiments one or more computer systems provide functionality described or illustrated herein. In particular embodiments software running on one or more computer systems performs one or more steps of one or more methods described or illustrated herein or provides functionality described or illustrated herein. Particular embodiments include one or more portions of one or more computer systems .

This disclosure contemplates any suitable number of computer systems . This disclosure contemplates computer system taking any suitable physical form. As example and not by way of limitation computer system may be an embedded computer system a system on chip SOC a single board computer system SBC such as for example a computer on module COM or system on module SOM a desktop computer system a laptop or notebook computer system an interactive kiosk a mainframe a mesh of computer systems a mobile telephone a personal digital assistant PDA a server or a combination of two or more of these. Where appropriate computer system may include one or more computer systems be unitary or distributed span multiple locations span multiple machines or reside in a cloud which may include one or more cloud components in one or more networks. Where appropriate one or more computer systems may perform without substantial spatial or temporal limitation one or more steps of one or more methods described or illustrated herein. As an example and not by way of limitation one or more computer systems may perform in real time or in batch mode one or more steps of one or more methods described or illustrated herein. One or more computer systems may perform at different times or at different locations one or more steps of one or more methods described or illustrated herein where appropriate.

In particular embodiments computer system includes a processor memory storage an input output I O interface a communication interface and a bus . Although this disclosure describes and illustrates a particular computer system having a particular number of particular components in a particular arrangement this disclosure contemplates any suitable computer system having any suitable number of any suitable components in any suitable arrangement.

In particular embodiments processor includes hardware for executing instructions such as those making up a computer program. As an example and not by way of limitation to execute instructions processor may retrieve or fetch the instructions from an internal register an internal cache memory or storage decode and execute them and then write one or more results to an internal register an internal cache memory or storage . In particular embodiments processor may include one or more internal caches for data instructions or addresses. The present disclosure contemplates processor including any suitable number of any suitable internal caches where appropriate. As an example and not by way of limitation processor may include one or more instruction caches one or more data caches and one or more translation lookaside buffers TLBs . Instructions in the instruction caches may be copies of instructions in memory or storage and the instruction caches may speed up retrieval of those instructions by processor . Data in the data caches may be copies of data in memory or storage for instructions executing at processor to operate on the results of previous instructions executed at processor for access by subsequent instructions executing at processor or for writing to memory or storage or other suitable data. The data caches may speed up read or write operations by processor . The TLBs may speed up virtual address translation for processor . In particular embodiments processor may include one or more internal registers for data instructions or addresses. The present disclosure contemplates processor including any suitable number of any suitable internal registers where appropriate. Where appropriate processor may include one or more arithmetic logic units ALUs be a multi core processor or include one or more processors . Although this disclosure describes and illustrates a particular processor this disclosure contemplates any suitable processor.

In particular embodiments memory includes main memory for storing instructions for processor to execute or data for processor to operate on. As an example and not by way of limitation computer system may load instructions from storage or another source such as for example another computer system to memory . Processor may then load the instructions from memory to an internal register or internal cache. To execute the instructions processor may retrieve the instructions from the internal register or internal cache and decode them. During or after execution of the instructions processor may write one or more results which may be intermediate or final results to the internal register or internal cache. Processor may then write one or more of those results to memory . In particular embodiments processor executes only instructions in one or more internal registers or internal caches or in memory as opposed to storage or elsewhere and operates only on data in one or more internal registers or internal caches or in memory as opposed to storage or elsewhere . One or more memory buses which may each include an address bus and a data bus may couple processor to memory . Bus may include one or more memory buses as described below. In particular embodiments one or more memory management units MMUs reside between processor and memory and facilitate accesses to memory requested by processor . In particular embodiments memory includes random access memory RAM . This RAM may be volatile memory where appropriate Where appropriate this RAM may be dynamic RAM DRAM or static RAM SRAM . Moreover where appropriate this RAM may be single ported or multi ported RAM. The present disclosure contemplates any suitable RAM. Memory may include one or more memories where appropriate. Although this disclosure describes and illustrates particular memory this disclosure contemplates any suitable memory.

In particular embodiments storage includes mass storage for data or instructions. As an example and not by way of limitation storage may include an HDD a floppy disk drive flash memory an optical disc a magneto optical disc magnetic tape or a Universal Serial Bus USB drive or a combination of two or more of these. Storage may include removable or non removable or fixed media where appropriate. Storage may be internal or external to computer system where appropriate. In particular embodiments storage is non volatile solid state memory. In particular embodiments storage includes read only memory ROM . Where appropriate this ROM may be mask programmed ROM programmable ROM PROM erasable PROM EPROM electrically erasable PROM EEPROM electrically alterable ROM EAROM or flash memory or a combination of two or more of these. This disclosure contemplates mass storage taking any suitable physical form. Storage may include one or more storage control units facilitating communication between processor and storage where appropriate. Where appropriate storage may include one or more storages . Although this disclosure describes and illustrates particular storage this disclosure contemplates any suitable storage.

In particular embodiments I O interface includes hardware software or both providing one or more interfaces for communication between computer system and one or more I O devices. Computer system may include one or more of these I O devices where appropriate. One or more of these I O devices may enable communication between a person and computer system . As an example and not by way of limitation an I O device may include a keyboard keypad microphone monitor mouse printer scanner speaker still camera stylus tablet touch screen trackball video camera another suitable I O device or a combination of two or more of these. An I O device may include one or more sensors. This disclosure contemplates any suitable I O devices and any suitable I O interfaces for them. Where appropriate I O interface may include one or more device or software drivers enabling processor to drive one or more of these I O devices. I O interface may include one or more I O interfaces where appropriate. Although this disclosure describes and illustrates a particular I O interface this disclosure contemplates any suitable I O interface.

In particular embodiments communication interface includes hardware software or both providing one or more interfaces for communication such as for example packet based communication between computer system and one or more other computer systems or one or more networks. As an example and not by way of limitation communication interface may include a network interface controller NIC or network adapter for communicating with an Ethernet or other wire based network or a wireless NIC WNIC or wireless adapter for communicating with a wireless network such as a WI FI network. This disclosure contemplates any suitable network and any suitable communication interface for it. As an example and not by way of limitation computer system may communicate with an ad hoc network a personal area network PAN a local area network LAN a wide area network WAN a metropolitan area network MAN or one or more portions of the Internet or a combination of two or more of these. One or more portions of one or more of these networks may be wired or wireless. As an example computer system may communicate with a wireless PAN WPAN such as for example a BLUETOOTH WPAN a WI FI network a WI MAX network a cellular telephone network such as for example a Global System for Mobile Communications GSM network or other suitable wireless network or a combination of two or more of these. Computer system may include any suitable communication interface for any of these networks where appropriate. Communication interface may include one or more communication interfaces where appropriate. Although this disclosure describes and illustrates a particular communication interface this disclosure contemplates any suitable communication interface.

In particular embodiments bus includes hardware software or both coupling components of computer system to each other. As an example and not by way of limitation bus may include an Accelerated Graphics Port AGP or other graphics bus an Enhanced Industry Standard Architecture EISA bus a front side bus FSB a HYPERTRANSPORT HT interconnect an Industry Standard Architecture ISA bus an INFINIBAND interconnect a low pin count LPC bus a memory bus a Micro Channel Architecture MCA bus a Peripheral Component Interconnect PCI bus a PCI Express PCI X bus a serial advanced technology attachment SATA bus a Video Electronics Standards Association local VLB bus or another suitable bus or a combination of two or more of these. Bus may include one or more buses where appropriate. Although this disclosure describes and illustrates a particular bus this disclosure contemplates any suitable bus or interconnect.

Herein reference to a computer readable storage medium encompasses one or more non transitory tangible computer readable storage media possessing structure. As an example and not by way of limitation a computer readable storage medium may include a semiconductor based or other integrated circuit IC such as for example a field programmable gate array FPGA or an application specific IC ASIC a hard disk an HDD a hybrid hard drive HHD an optical disc an optical disc drive ODD a magneto optical disc a magneto optical drive a floppy disk a floppy disk drive FDD magnetic tape a holographic storage medium a solid state drive SSD a RAM drive a SECURE DIGITAL card a SECURE DIGITAL drive or another suitable computer readable storage medium or a combination of two or more of these where appropriate. Herein reference to a computer readable storage medium excludes any medium that is not eligible for patent protection under 35 U.S.C. 101. Herein reference to a computer readable storage medium excludes transitory forms of signal transmission such as a propagating electrical or electromagnetic signal per se to the extent that they are not eligible for patent protection under 35 U.S.C. 101. A computer readable non transitory storage medium may be volatile non volatile or a combination of volatile and non volatile where appropriate.

This disclosure contemplates one or more computer readable storage media implementing any suitable storage. In particular embodiments a computer readable storage medium implements one or more portions of processor such as for example one or more internal registers or caches one or more portions of memory one or more portions of storage or a combination of these where appropriate. In particular embodiments a computer readable storage medium implements RAM or ROM. In particular embodiments a computer readable storage medium implements volatile or persistent memory. In particular embodiments one or more computer readable storage media embody software. Herein reference to software may encompass one or more applications bytecode one or more computer programs one or more executables one or more instructions logic machine code one or more scripts or source code and vice versa where appropriate. In particular embodiments software includes one or more application programming interfaces APIs . This disclosure contemplates any suitable software written or otherwise expressed in any suitable programming language or combination of programming languages. In particular embodiments software is expressed as source code or object code. In particular embodiments software is expressed in a higher level programming language such as for example C Perl or a suitable extension thereof. In particular embodiments software is expressed in a lower level programming language such as assembly language or machine code . In particular embodiments software is expressed in PHP. In particular embodiments software is expressed in Hyper Text Markup Language HTML Extensible Markup Language XML or other suitable markup language.

The present disclosure encompasses all changes substitutions variations alterations and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend. Similarly where appropriate the appended claims encompass all changes substitutions variations alterations and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend.

An example of the HTML code generated by a dialog server in response to a request for a stream.publish dialog.

