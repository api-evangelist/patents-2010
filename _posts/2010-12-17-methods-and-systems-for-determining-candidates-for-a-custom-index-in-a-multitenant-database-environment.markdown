---

title: Methods and systems for determining candidates for a custom index in a multi-tenant database environment
abstract: Methods and systems are described for determining candidates for a custom index in a multi-tenant database environment. In one embodiment, a method includes, capturing a query that is directed to a multi-tenant database, determining whether the captured query is a candidate for an additional filter, determining operators used by the captured query if the query is a candidate, determining data types of the database used by the captured query if the query is a candidate, determining whether there is a current filter for the operator and data types used by the captured query if the query is a candidate, selecting the captured query based on the determined operators, data types, and the determined current filters, and generating a custom index for the selected query.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08583653&OS=08583653&RS=08583653
owner: salesforce.com, inc.
number: 08583653
owner_city: San Francisco
owner_country: US
publication_date: 20101217
---
This application claims the benefit of U.S. Provisional Patent Application No. 61 334 421 entitled Methods and Systems for a Custom Index in a Multi Tenant Database Environment by Collins et al. filed May 13 2010 the entire contents of which are incorporated herein by reference.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

The following commonly owned co pending United States patents and patent applications including the present application are related to each other. Each of the other patents applications are incorporated by reference herein in its entirety 

U.S. patent application Ser. No. 12 262 744 entitled PREVENTING MISUSE OF DATABASE SEARCHES by Hofhansl et al. filed Oct. 31 2008 and

U.S. Pat. No. 7 529 728 entitled QUERY OPTIMIZATION IN A MULTI TENANT DATABASE SYSTEM by Weissman et al. issued May 5 2009.

The current invention relates generally to generating custom indexes to support queries from users or developers in a database network system.

The subject matter discussed in the background section should not be assumed to be prior art merely as a result of its mention in the background section. Similarly a problem mentioned in the background section or associated with the subject matter of the background section should not be assumed to have been previously recognized in the prior art. The subject matter in the background section merely represents different approaches which in and of themselves may also be inventions.

In conventional database systems users access their data resources in one logical database. A user of such a conventional system typically retrieves data from and stores data on the system using the user s own systems. A user system might remotely access one of a plurality of server systems that might in turn access the database system. Data retrieval from the system might include the issuance of a query from the user system to the database system. The database system might process the request for information received in the query and send to the user system information relevant to the request. The reliable and efficient operation of queries on the database system to deliver information to a user has been and continues to be a goal of administrators of database systems.

Unfortunately conventional database approaches might process a query relatively slowly if for example the query is inartfully drafted or the data is not well adapted to handling queries of a particular kind. A database system may also process a query relatively slowly if for example a relatively large number of users substantially concurrently access the database system.

In accordance with embodiments there are provided mechanisms and methods for determining query candidates for custom indexes. These mechanisms and methods for determining query candidates can enable embodiments to provide more reliable and faster execution of queries both in development and in production.

While the present invention is described with reference to an embodiment in which techniques for validating queries are implemented in a system having an application server providing a front end for an on demand database service capable of supporting multiple tenants the present invention is not limited to multi tenant databases nor deployment on application servers. Embodiments may be practiced using other database architectures i.e. ORACLE DB2 by IBM and the like without departing from the scope of the embodiments claimed.

Any of the above embodiments may be used alone or together with one another in any combination. Inventions encompassed within this specification may also include embodiments that are only partially mentioned or alluded to or are not mentioned or alluded to at all in this brief summary or in the abstract. Although various embodiments of the invention may have been motivated by various deficiencies with the prior art which may be discussed or alluded to in one or more places in the specification the embodiments of the invention do not necessarily address any of these deficiencies. In other words different embodiments of the invention may address different deficiencies that may be discussed in the specification. Some embodiments may only partially address some deficiencies or just one deficiency that may be discussed in the specification and some embodiments may not address any of these deficiencies.

Systems and methods are provided for determining query candidates for a custom index. These systems and methods are particularly valuable in the context of a multi tenant database.

As used herein the term multi tenant database system refers to those systems in which various elements of hardware and software of the database system may be shared by one or more customers. For example a given application server may simultaneously process requests for a great number of customers and a given database table may store rows for a potentially much greater number of customers. As used herein the term query plan refers to a set of steps used to access information in a database system.

Next mechanisms and methods for determining candidates for a custom index will be described with reference to example embodiments.

Poorly indexed queries can cause severe performance issues in production when they are run frequently and on large data sets. For some queries the delay in performance may significantly affect the user experience. If a database enforces a time limit on queries then there may be queries that are too slow to ever be completed. In a multitenant database system there can be an extremely large variety of different potential queries. Some of the queries may cause negative impacts on the system or provide poor performance for tenant users. A flexible schema and powerful APIs Application Programming Interface can create further uncertainty by allowing different users to generate many new and different queries that have never before run on the database system.

According to some embodiments of the invention a tool can be used to identify slow queries and then improve their performance by creating indexes to support the parameters of the query.

To validate the performance of a query the query is first captured in some way. In the present description the queries are directed to a multi tenant database. However the approaches described herein can also be applied to other types of databases. A query indexing system can be hooked into a complete test and validation system or into a database management system in several different places. Any one or more of these places or other places can be used to identify query run time problems.

In one example queries submitted in production that is queries submitted by users are monitored. If a particular query runs slowly or has slow performance then it is flagged for later analysis. This analysis can include applying the tests and comparisons disclosed herein. Such an analysis after a query has already been applied allows a database system to be improved in a separate process without interfering with the use of the database. The improvements may include analyzing metadata and query formulation. Queries can be identified using a timer using a time out log or using a progress log.

The identified candidates are also subjected to a Filter Analyzer . While the Query Identifier is shown as operating before the Filter Analyzer the order of operations may be reversed. If the query returns a relatively small number of rows then it can be maintained as a candidate. If the query returns a large number of rows as query results then the filter may not be selective and it cannot be identified as a candidate for a custom index. The Filter Analyzer can check to see the query has identified any potentially indexable filters. In one embodiment all of the filters in the query can be inspected to see if they can be optimized. We can also take note of any filters that cannot easily be optimized but that could be custom indexed and that could be modified to work with the custom index.

The Selectivity Tester may be used to compile a table of custom index candidates. This table may include an identifier for each query the filters that the query uses and other information about the query. For example the filter analyzer may determine the operators and data types for the query. These may be included in the table. In addition bibliographic information about each query may be included such as the developer the owner the organization that uses it etc. The table provides a convenient searchable storage mechanism for the other components of the system. The table may also be accessed by the filter analyzer to store results of the analysis. The data in the table is then accessible to a User Interface and a Custom Index Generator .

The Selectivity Tester may be operated as a background process that would run periodically and query the custom index candidate table for a list of new filters to test. For each filter it would run a query against the database to test the selectivity of the filter this test query may be a sampled query rather than a complete query of the entire database. Exact selectivity information may not be required and scanning the full table for a large organization may be quite expensive. The selectivity test then provides a selectivity estimate that may be recorded in the custom index candidate table. Alternatively a sampled query may be used to develop an initial estimate and then certain queries may be selected for a detailed or full query based on the estimate.

A user interface may be provided to allow users to control or review process that are performed by the system. The user interface may allow access to the custom index candidate table and to the selectivity testing process. In one embodiment an XML based report type may be created. This report may be made available to qualified maintenance or query developers. The report type may be used to allow the qualified developers to query the custom index candidate table with all of the filtering grouping etc. functionality available in reports. In one embodiment the user interface may allow the developer to command the generation of a custom index for any of the queries in the report. The command may be received and acted upon by the Custom Index Generator coupled to the User Interface. Links in the output could be used that would allow the developer to create custom indexes easily from the results view. The links may be configured to lead to another user interface that allows the developer to set the parameters and control each specific custom index that is generated for a query. Alternatively the Custom Index Generator of the system may use the data in the table to make autonomous automatic decisions about generating a custom index.

Finally a Cleanup module may be used to clear out old data. In one embodiment the cleanup can be based simply on date information. For example any rows from the custom index candidate table that hadn t been touched in 6 months could be deleted. For another example any query that had not been run for 6 months could be deleted from the Query Table .

At block the recommender system captures one or more of the queries. As mentioned above the queries can be captured before during or after execution. A variety of different criteria can be used to determine which queries to capture or all of the queries can be captured. In an automated test suite application all of the queries can be captured before execution without interfering with use of the underlying database. The queries may be in a variety of different formats depending on the nature of the database and its supporting infrastructure. In the example described above only slow queries or queries that filter poorly are captured.

At block the query is analyzed to determine whether it is a candidate for a custom index. In one example the query is a candidate if it runs slowly or if it times out. Additional criteria may also be used such as whether the query uses a filter or whether the query is used frequently and applies to a large database. In another example the performance of the query can be measured as compared to other queries and queries that are inefficient may be selected.

The measure of performance or execution duration can be compared to the size of the organization that is using the query. If the query is being used by a large organization or an organization that has a large quantity of stored data in the database to which the query may be applied then the query may be allowed more time to run. Alternatively if the query is being applied to a smaller dataset then it should be expected to run more quickly. The duration or performance of the query can be scaled by the size of the dataset. In one example a ratio or scaling factor can be developed based on the size of the dataset or the size of the organization. This can be applied to any performance measure when determining whether the query is a candidate for a custom index.

In the analysis the query may be run against a portion of the database to monitor its performance. Such a run may be done to test the selectivity of the filter of captured query and to develop a selectivity estimate for the captured query. These estimates may be compared to those for other queries to aid in determining which queries to select.

At block the query is analyzed to determine the operators that it uses. Additive and comparative operators can be tabulated or listed. For use in determining whether to generate a custom index operators that benefit from such an index can be tabulated. A query that has a large number of such operators is a better candidate than one does not. For example if the query uses primarily negative operators then it may not benefit from a custom index and it may be discarded as a candidate.

At block the data types affected by the query are analyzed. This may include the columns used by the captured query where the columns indicate the data field or the nature of the data. This may also include the rows used by the captured query where the rows indicate organization profile or user. The data collected at operations and are useful for determining whether the query is a good candidate and are also useful when generating a custom query. All of this data may be stored in a query table or a custom index table or in any other suitable location and format.

At block the filter and indexes used by the query are analyzed. In addition an analysis is performed to determine if filters already exist for the identified operators and data types. At block if a current index already exists and it is suitable for use by the query then the query may be modified at block to use the current index.

At block the candidate query is written to the Query Table . When it is time to write a custom index at block the query is selected and at block a custom index is generated based on determined operators data types and determined current filters.

The accuracy of a custom index can be improved by actually measuring the performance of a query after the custom index is generated and then comparing that to the original performance. The performance of a query can be measured and logged for later reference. The second execution can also be measured and compared to the first run to determine whether the query s performance has been improved and whether additional measures should be taken.

As additional operations to improve the functionality of the query it can also be analyzed and optimized for performance. Any queries with problems can be provided as an output to developers to inspect and correct the problems. The correction may include hint changes database statistic changes and SQL changes to the queries among others.

By way of background is a flowchart illustrating a method for performing a database search according to an embodiment of the present invention. A user may enter a regular expression in order to find particular fields of a database. Additional parameters for the search may request particular data associated e.g. linked with that field. For example when a field is a column and or row the additional parameters may select particular data from that column.

At block the user enters a regular expression. In one embodiment this may be done by entering symbols and characters into a window of an application e.g. application running on the database . In another embodiment characters may be combined with actions e.g. corresponding to particular symbols chosen from lists such as drop down lists .

At block a query is formulated based on the regular expression that was entered. For example an application server of a database system may formulate the query. The query may include other filters e.g. additional parameters entered by the user or imposed by the database system. For example the system may allow access to only data to which the user is authorized.

At block some filters may be imposed in order to limit the number of character strings searched. The application can apply the filters input by the user or imposed by the database system prior to using the regular expression. For example the number of fields to be searched can be decreased by applying the filters.

At block valid fields i.e. fields passing the initial filters are searched for a string matching the regular expression. Various mechanisms may be used to perform the search.

At block the results are returned. In one embodiment the matching strings may be aggregated and then returned all at once. In another embodiment results associated with each matching string may be returned when that matching string is found. Additional filtering or searches may be performed using the matching strings. For example data linked to a particular string may then be searched using filters e.g. parameters input by a user.

As an example of the operation of queries one tenant of a multi tenant database might be a company that employs a sales force where each salesperson uses the database system to manage their sales process. Thus a user might maintain contact data leads data customer follow up data performance data goals and progress data etc. all applicable to that user s personal sales process. While each user s data might be separate from other users data regardless of the employers of each user some data might be organization wide data shared or accessible by a plurality of users or all of the users for a given organization or tenant. Thus there may be some data structures that are allocated at the tenant level while other data structures are managed at the user level.

User systems developer systems and operations and management systems communicate with application servers to request and update system level and tenant level data from the multi tenant database system. Typically this involves sending one or more queries to the database system. An application server or the user system can generate a specified query form such as one or more SQL statements that are designed to access the desired information. The database system then generates query plans to access the requested data from the database.

The query plan as mentioned above indicates how the query will be executed on the database. The query plan may include for example a search for a particular set of characters i.e. a character string in a particular row or column of a database table object . A table generally contains one or more data categories logically arranged as columns or fields in a viewable schema. Each row or record of a table contains an instance of data for each category defined by the fields. For example a CRM Customer Relationship Management database may include a table that describes a customer with fields for basic contact information such as name address phone number fax number etc. Another table might describe a purchase order including fields for information such as customer product sale price date etc.

As examples of different query plans consider a query plan for a boss vs a lower level employee. Differences in access and privilege levels can cause the same query to use a different plan. Consider a query of the form Show me all accounts that I can see in a private account sharing model. An example of a data model for sharing appears in . In a middle table is a sharing table. It allows entity Id data from the first table to be shared through the middle table to particular users. The middle table takes an entity Id and generates a user group Id . A final table is a user group blowout . The final table describes which users are contained in a group or are above a user in the role hierarchy UG User or Group . Accordingly the user group Id is blown out into individual user Ids . According to one aspect for a lower level employee user it is typically most advantageous to join these tables starting from the right filtering on user Ids to form a temporary result of the rows that can be seen. Because the user can not see many rows this will yield a relatively selective path. An example query is shown as Table 1.

Conversely for a boss user who can see most of the entity records in the organization it is typically most advantageous to begin the query from the left and use a nested loop query plan onto the sharing table acc share an example of which is provided in Table 2.

Note that the query of Table 2 in general runs in relatively constant reasonable time for all users in an organization. It may not be particularly fast since it must look at all top level entity records but it is suitable for a boss who can in fact see most records. The first lower level employee query runs much faster for users who in fact can not see many records but it may run much slower for bosses who can see all records. Accordingly the query plan can have a significant impact on the speed of a query and its efficiency.

Environment is an environment in which an on demand database service exists. User system may be any machine or system that is used by a user to access a database user system. For example any of user systems can be a handheld computing device a mobile phone a laptop computer a work station and or a network of computing devices. As illustrated in and in more detail in user systems might interact via a network with an on demand database service which is system .

An on demand database service such as system is a database system that is made available to outside users that do not need to necessarily be concerned with building and or maintaining the database system but instead may be available for their use when the users need the database system e.g. on the demand of the users . Some on demand database services may store information from one or more tenants stored into tables of a common database image to form a multi tenant database system MTS . Accordingly on demand database service and system will be used interchangeably herein. A database image may include one or more database objects. A relational database management system RDMS or the equivalent may execute storage and retrieval of information against the database object s . Application platform may be a framework that allows the applications of system to run such as the hardware and or software e.g. the operating system. In an embodiment on demand database service may include an application platform that enables creation managing and executing one or more applications developed by the provider of the on demand database service users accessing the on demand database service via user systems or third party application developers accessing the on demand database service via user systems .

The users of user systems may differ in their respective capacities and the capacity of a particular user system might be entirely determined by permissions permission levels for the current user. For example where a salesperson is using a particular user system to interact with system that user system has the capacities allotted to that salesperson. However while an administrator is using that user system to interact with system that user system has the capacities allotted to that administrator. In systems with a hierarchical role model users at one permission level may have access to applications data and database information accessible by a lower permission level user but may not have access to certain applications database information and data accessible by a user at a higher permission level. Thus different users will have different capabilities with regard to accessing and modifying application and database information depending on a user s security or permission level.

Network is any network or combination of networks of devices that communicate with one another. For example network can be any one or any combination of a LAN local area network WAN wide area network telephone network wireless network point to point network star network token ring network hub network or other appropriate configuration. As the most common type of computer network in current use is a TCP IP Transfer Control Protocol and Internet Protocol network such as the global internetwork of networks often referred to as the Internet with a capital I that network will be used in many of the examples herein. However it should be understood that the networks that the present invention might use are not so limited although TCP IP is a frequently implemented protocol.

User systems might communicate with system using TCP IP and at a higher network level use other common Internet protocols to communicate such as HTTP FTP AFS WAP etc. In an example where HTTP is used user system might include an HTTP client commonly referred to as a browser for sending and receiving HTTP messages to and from an HTTP server at system . Such an HTTP server might be implemented as the sole network interface between system and network but other techniques might be used as well or instead. In some implementations the interface between system and network includes load sharing functionality such as round robin HTTP request distributors to balance loads and distribute incoming HTTP requests evenly over a plurality of servers. At least as for the users that are accessing that server each of the plurality of servers has access to the MTS data however other alternative configurations may be used instead.

In one embodiment system shown in implements a web based customer relationship management CRM system. For example in one embodiment system includes application servers configured to implement and execute CRM software applications as well as provide related data code forms webpages and other information to and from user systems and to store to and retrieve from a database system related data objects and Webpage content. With a multi tenant system data for multiple tenants may be stored in the same physical database object however tenant data typically is arranged so that data of one tenant is kept logically separate from that of other tenants so that one tenant does not have access to another tenant s data unless such data is expressly shared. In certain embodiments system implements applications other than or in addition to a CRM application. For example system may provide tenant access to multiple hosted standard and custom applications including a CRM application. User or third party developer applications which may or may not include CRM may be supported by the application platform which manages creation storage of the applications into one or more database objects and executing of the applications in a virtual machine in the process space of the system .

One arrangement for elements of system is shown in including a network interface application platform tenant data storage for tenant data system data storage for system data accessible to system and possibly multiple tenants program code for implementing various functions of system and a process space for executing MTS system processes and tenant specific processes such as running applications as part of an application hosting service. Additional processes that may execute on system include database indexing processes.

Several elements in the system shown in include conventional well known elements that are explained only briefly here. For example each user system could include a desktop personal computer workstation laptop PDA cell phone or any wireless access protocol WAP enabled device or any other computing device capable of interfacing directly or indirectly to the Internet or other network connection. User system typically runs an HTTP client e.g. a browsing program such as Microsoft s Internet Explorer browser Netscape s Navigator browser Opera s browser or a WAP enabled browser in the case of a cell phone PDA or other wireless device or the like allowing a user e.g. subscriber of the multi tenant database system of user system to access process and view information pages and applications available to it from system over network . Each user system also typically includes one or more user interface devices such as a keyboard a mouse trackball touch pad touch screen pen or the like for interacting with a graphical user interface GUI provided by the browser on a display e.g. a monitor screen LCD display etc. in conjunction with pages forms applications and other information provided by system or other systems or servers. For example the user interface device can be used to access data and applications hosted by system and to perform searches on stored data and otherwise allow a user to interact with various GUI pages that may be presented to a user. As discussed above embodiments are suitable for use with the Internet which refers to a specific global internetwork of networks. However it should be understood that other networks can be used instead of the Internet such as an intranet an extranet a virtual private network VPN a non TCP IP based network any LAN or WAN or the like.

According to one embodiment each user system and all of its components are operator configurable using applications such as a browser including computer code run using a central processing unit such as an Intel Pentium processor or the like. Similarly system and additional instances of an MTS where more than one is present and all of their components might be operator configurable using application s including computer code to run using a central processing unit such as processor system which may include an Intel Pentium processor or the like and or multiple processor units. A computer program product embodiment includes a machine readable storage medium media having instructions stored thereon in which can be used to program a computer to perform any of the processes of the embodiments described herein. Computer code for operating and configuring system to intercommunicate and to process webpages applications and other data and media content as described herein are preferably downloaded and stored on a hard disk but the entire program code or portions thereof may also be stored in any other volatile or non volatile memory medium or device as is well known such as a ROM or RAM or provided on any media capable of storing program code such as any type of rotating media including floppy disks optical discs digital versatile disk DVD compact disk CD microdrive and magneto optical disks and magnetic or optical cards nanosystems including molecular memory ICs or any type of media or device suitable for storing instructions and or data. Additionally the entire program code or portions thereof may be transmitted and downloaded from a software source over a transmission medium e.g. over the Internet or from another server as is well known or transmitted over any other conventional network connection as is well known e.g. extranet VPN LAN etc. using any communication medium and protocols e.g. TCP IP HTTP HTTPS Ethernet etc. as are well known. It will also be appreciated that computer code for implementing embodiments of the present invention can be implemented in any programming language that can be executed on a client system and or server or server system such as for example C C HTML any other markup language Java JavaScript ActiveX any other scripting language such as VBScript and many other programming languages as are well known may be used. Java is a trademark of Sun Microsystems Inc. .

According to one embodiment each system is configured to provide webpages forms applications data and media content to user client systems to support the access by user systems as tenants of system . As such system provides security mechanisms to keep each tenant s data separate unless the data is shared. If more than one MTS is used they may be located in close proximity to one another e.g. in a server farm located in a single building or campus or they may be distributed at locations remote from one another e.g. one or more servers located in city A and one or more servers located in city B . As used herein each MTS could include one or more logically and or physically connected servers distributed locally or across one or more geographic locations. Additionally the term server is meant to include a computer system including processing hardware and process space s and an associated storage system and database application e.g. OODBMS or RDBMS as is well known in the art. It should also be understood that server system and server are often used interchangeably herein. Similarly the database object described herein can be implemented as single databases a distributed database a collection of distributed databases a database with redundant online or offline backups or other redundancies etc. and might include a distributed database or storage network and associated processing intelligence.

User system network system tenant data storage and system data storage were discussed above in . Regarding user system processor system A may be any combination of one or more processors. Memory system B may be any combination of one or more memory devices short term and or long term memory. Input system C may be any combination of input devices such as one or more keyboards mice trackballs scanners cameras and or interfaces to networks. Output system D may be any combination of output devices such as one or more monitors printers and or interfaces to networks. As shown by system may include a network interface of implemented as a set of HTTP application servers an application platform tenant data storage and system data storage . Also shown is system process space including individual tenant process spaces and a tenant management process space . Each application server may be configured to tenant data storage and the tenant data therein and system data storage and the system data therein to serve requests of user systems . The tenant data might be divided into individual tenant storage areas which can be either a physical arrangement and or a logical arrangement of data. Within each tenant storage area user storage and application metadata might be similarly allocated for each user. For example a copy of a user s most recently used MRU items might be stored to user storage . Similarly a copy of MRU items for an entire organization that is a tenant might be stored to tenant storage area . A UI provides a user interface and an API provides an application programmer interface to system resident processes to users and or developers at user systems . The tenant data and the system data may be stored in various databases such as one or more Oracle databases.

Application platform includes an application setup mechanism that supports application developers creation and management of applications which may be saved as metadata into tenant data storage by save routines for execution by subscribers as one or more tenant process spaces managed by tenant management process for example. Invocations to such applications may be coded using PL SOQL that provides a programming language style interface extension to API . A detailed description of some PL SOQL language embodiments is discussed in commonly owned U.S. Pat. No. 7 730 478 entitled METHOD AND SYSTEM FOR ALLOWING ACCESS TO DEVELOPED APPLICATIONS VIA A MULTI TENANT DATABASE ON DEMAND DATABASE SERVICE issued Jun. 1 2010 to Craig Weissman which is incorporated in its entirety herein for all purposes. Invocations to applications may be detected by one or more system processes which manages retrieving application metadata for the subscriber making the invocation and executing the metadata as an application in a virtual machine.

Each application server may be communicably coupled to database systems e.g. having access to system data and tenant data via a different network connection.

For example one application server might be coupled via the network e.g. the Internet another application server N might be coupled via a direct network link and another application server N might be coupled by yet a different network connection. Transfer Control Protocol and Internet Protocol TCP IP are typical protocols for communicating between application servers and the database system. However it will be apparent to one skilled in the art that other transport protocols may be used to optimize the system depending on the network interconnect used.

In certain embodiments each application server is configured to handle requests for any user associated with any organization that is a tenant. Because it is desirable to be able to add and remove application servers from the server pool at any time for any reason there is preferably no server affinity for a user and or organization to a specific application server . In one embodiment therefore an interface system implementing a load balancing function e.g. an F5 Big IP load balancer is communicably coupled between the application servers and the user systems to distribute requests to the application servers . In one embodiment the load balancer uses a least connections algorithm to route user requests to the application servers . Other examples of load balancing algorithms such as round robin and observed response time also can be used. For example in certain embodiments three consecutive requests from the same user could hit three different application servers and three requests from different users could hit the same application server . In this manner system is multi tenant wherein system handles storage of and access to different objects data and applications across disparate users and organizations.

As an example of storage one tenant might be a company that employs a sales force where each salesperson uses system to manage their sales process. Thus a user might maintain contact data leads data customer follow up data performance data goals and progress data etc. all applicable to that user s personal sales process e.g. in tenant data storage . In an example of a MTS arrangement since all of the data and the applications to access view modify report transmit calculate etc. can be maintained and accessed by a user system having nothing more than network access the user can manage his or her sales efforts and cycles from any of many different user systems. For example if a salesperson is visiting a customer and the customer has Internet access in their lobby the salesperson can obtain critical updates as to that customer while waiting for the customer to arrive in the lobby.

While each user s data might be separate from other users data regardless of the employers of each user some data might be organization wide data shared or accessible by a plurality of users or all of the users for a given organization that is a tenant. Thus there might be some data structures managed by system that are allocated at the tenant level while other data structures might be managed at the user level. Because an MTS might support multiple tenants including possible competitors the MTS should have security protocols that keep data applications and application use separate. Also because many tenants may opt for access to an MTS rather than maintain their own system redundancy up time and backup are additional functions that may be implemented in the MTS. In addition to user specific data and tenant specific data system might also maintain system level data usable by multiple tenants or other data. Such system level data might include industry reports news postings and the like that are sharable among tenants.

In certain embodiments user systems which may be client systems communicate with application servers to request and update system level and tenant level data from system that may require sending one or more queries to tenant data storage and or system data storage . System e.g. an application server in system automatically generates one or more SQL statements e.g. one or more SQL queries that are designed to access the desired information. System data storage may generate query plans to access the requested data from the database.

Each database can generally be viewed as a collection of objects such as a set of logical tables containing data fitted into predefined categories. A table is one representation of a data object and may be used herein to simplify the conceptual description of objects and custom objects according to the present invention. It should be understood that table and object may be used interchangeably herein. Each table generally contains one or more data categories logically arranged as columns or fields in a viewable schema. Each row or record of a table contains an instance of data for each category defined by the fields. For example a CRM database may include a table that describes a customer with fields for basic contact information such as name address phone number fax number etc. Another table might describe a purchase order including fields for information such as customer product sale price date etc. In some multi tenant database systems standard entity tables might be provided for use by all tenants. For CRM database applications such standard entities might include tables for Account Contact Lead and Opportunity data each containing pre defined fields. It should be understood that the word entity may also be used interchangeably herein with object and table .

While the invention has been described by way of example and in terms of the specific embodiments it is to be understood that the invention is not limited to the disclosed embodiments. To the contrary it is intended to cover various modifications and similar arrangements as would be apparent to those skilled in the art. Therefore the scope of the appended claims should be accorded the broadest interpretation so as to encompass all such modifications and similar arrangements.

