---

title: Layered interface in an industrial environment
abstract: System(s) and method(s) are provided for implementing a set of interface components across a set of layers of an industrial environment, and for managing at least one interface component or at least one layer of the industrial environment. To implement an interface component in at least one layer in the set of layers, a specification that defines the interface component is acquired and, based at least on the specification, a service is generated. Execution of the service implements the interface component. The managing includes deploying or discovering the at least one interface component or the at least one layer of the industrial environment. The managing also includes indexing specific functional feature(s) of the at least one interface component and searching across the set of layers for one or more interface components that satisfy specific functional criteria. Moreover, the managing can include supplying metadata related to interface component(s) or layer(s).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08732658&OS=08732658&RS=08732658
owner: Rockwell Automation Technologies, Inc.
number: 08732658
owner_city: Mayfield Heights
owner_country: US
publication_date: 20100929
---
This application is a Continuation in Part of co pending U.S. patent application Ser. No. 11 536 715 entitled MODULE STRUCTURE AND USE FOR INDUSTRIAL CONTROL SYSTEMS filed on Sep. 29 2006 this application is also a Continuation in Part of co pending U.S. patent application Ser. No. 11 536 746 entitled HMI VIEWS OF MODULES FOR INDUSTRIAL CONTROL SYSTEMS filed on Sep. 29 2006 this application is also a Continuation in Part of co pending U.S. patent application Ser. No. 11 536 760 entitled MODULE AND CONTROLLER OPERATION FOR INDUSTRIAL CONTROL SYSTEMS filed on Sep. 29 2006 this application is also a Continuation in Part of co pending U.S. patent application Ser. No. 11 536 791 entitled MODULE CLASSIFICATION AND SEARCHING FOR INDUSTRIAL CONTROL SYSTEMS filed on Sep. 29 2006 this application is also a Continuation in Part of co pending U.S. patent application Ser. No. 12 241 319 entitled MODULE AND HOST MATCHING filed on Sep. 30 2008 this application is also a Continuation in Part of co pending U.S. patent application Ser. No. 12 241 327 entitled MODULE PUBLICATION AND DISCOVERY filed on Sep. 30 2008 this application is also a Continuation in Part of co pending U.S. patent application Ser. No. 12 241 342 entitled MODULE DYNAMIC HOSTING filed on Sep. 30 2008 the entireties of which are incorporated herein by reference.

The subject disclosure relates generally to operation of an industrial environment and more specifically to implementing a set of interface components across a set of layers of the industrial environment and to managing at least one interface component or at least one layer of the industrial environment.

Industrial control systems can employ complex mechanical electronic electro mechanical and or robotic machinery to perform various automated mechanical and or electrical functions. Examples of machinery include industrial motors pumps conveyors escalators drills refrigeration systems and so forth. An industrial control system can utilize one or more control devices to activate or deactivate the machinery and or to determine an appropriate level of activation for the machinery e.g. an amount of current to supply to a variable input motor . Additionally the control devices can be associated with logical program code that determines an appropriate time degree manner and other criteria for operation of the machinery. For example the determination can be based on various circumstances including an output of another device a reading of an optical sensor an electronic measurement a movement a number of rotations of a device and so on.

The machinery can be controlled by at least one industrial controller such as for example programmable logic controllers. The industrial controllers can also communicate with higher level computing systems or servers that aggregate data from the controllers and help to manage day to day activities of an enterprise. As systems have become more complex however communications and functional cooperation between components of the industrial automation system has become a challenge. For instance when users purchase multiple products from one or more vendors there is often limited interoperability and consistency between such products. Software and control engineers must then learn each product and how the components interact with each other. Limited product and component consistency suggest that techniques engineers learn for one product do not necessarily carry over to other implementations.

Often integration of products in the industrial automation system is complex and difficult to manage. Process and control engineers cannot easily code and configure their respective components without concern for other system components which may have different manufacturers and different platforms.

Another problem with integration of products is that process and control engineers focus on underlying technical details including implementation and glue logic rather than the application level concerns for example process information. For instance an engineer may decide to automate a manual section of their plant. The design may start at a high level but soon becomes a series of discussions regarding nonfunctional requirements e.g. distributed component object model DCOM transmission control protocol TCP transaction rates and the like. While these nonfunctional requirements are important the design of functional requirements is where the true value is to the designer or end user. Thus the engineer would prefer to focus on functional requirements equipment control product flow control and so forth providing direct improvements in value rather than dealing with superfluous technology issues.

In another case system design does not sufficiently enable trade offs between overhead burden memory footprint CPU cycles and so forth and application coupling. For instance processing load should be distributed across the system in accordance with system capabilities. Thus if one part of the system is shut down alternative processing capability should be in place to allow production to continue. For example control and process engineers can initially design and install a control system suiting their immediate needs. Current solutions however do not facilitate a smooth and uncomplicated transition for the respective changes. Multiple technologies underneath many vendors products complicate configuration and management of systems. This is also aggravated when third party systems are involved. Such complexity hinders the system s capacity to provide higher level information and can reduce the ability to configure such systems.

The following presents a simplified summary in order to provide a basic understanding of some aspects of the subject disclosure. This summary is not an extensive overview and it is not intended to identify key critical elements of the subject disclosure or to delineate any scope. The sole purpose of this summary is to present some concepts in a simplified form as a prelude to the more detailed description that is presented later.

One or more embodiments in the subject disclosure enable implementing a set of interface components across a set of layers of an industrial environment and managing at least one interface component or at least one layer of the industrial environment. To implement an interface component in at least one layer in the set of layers a specification that defines the interface component is acquired and based at least on the specification a service is generated. Execution of the service implements the interface component. The managing includes deploying or discovering the at least one interface component or the at least one layer of the industrial environment. The managing also includes indexing specific functional feature s of the at least one interface component and searching across the set of layers for one or more interface components that satisfy specific functional criteria. Moreover the managing can include supplying metadata related to the at least one interface component or the at least one layer of the industrial environment.

To the accomplishment of the foregoing and related ends certain illustrative aspects of the disclosed innovation are described herein in connection with the following description and the annexed drawings. These aspects are indicative however of but a few of the various ways in which the principles disclosed herein can be employed and is intended to include all such aspects and their equivalents. Other advantages and novel features will become apparent from the following detailed description when considered in conjunction with the drawings.

The subject disclosure is now described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding thereof. It may be evident however that the subject disclosure can be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to facilitate a description thereof.

As used in this application the terms component system platform layer controller terminal station node interface are intended to refer to a computer related entity or an entity related to or that is part of an operational apparatus with one or more specific functionalities wherein such entities can be either hardware a combination of hardware and software software or software in execution. In the subject disclosure either of the foregoing entities is referred to as a functional element. For example a component can be but is not limited to being a process running on a processor a processor a hard disk drive multiple storage drives of optical and or magnetic storage medium an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a server and the server can be a component. One or more components can reside within a process and or thread of execution and a component can be localized on one computer and or distributed between two or more computers. Also components as described herein can execute from various computer readable storage media having various data structures stored thereon. The components may communicate via local and or remote processes such as in accordance with a signal having one or more data packets e.g. data from one component interacting with another component in a local system distributed system and or across a network such as the Internet with other systems via the signal . As another example a component can be an apparatus with specific functionality provided by mechanical parts operated by electric or electronic circuitry which is operated by a software or a firmware application executed by a processor wherein the processor can be internal or external to the apparatus and executes at least a part of the software or firmware application. As yet another example a component can be an apparatus that provides specific functionality through electronic components without mechanical parts the electronic components can include a processor therein to execute software or firmware that provides at least in part the functionality of the electronic components. As further yet another example interface s can include input output I O components as well as associated processor application or Application Programming Interface API components. While the foregoing examples are directed to aspects of a component the exemplified aspects or features also apply to a system platform interface layer controller terminal station node interface and the like.

In addition the term or is intended to mean an inclusive or rather than an exclusive or. That is unless specified otherwise or clear from the context the phrase X employs A or B is intended to mean any of the natural inclusive permutations. That is the phrase X employs A or B is satisfied by any of the following instances X employs A X employs B or X employs both A and B. In addition the articles a and an as used in this application and the appended claims should generally be construed to mean one or more unless specified otherwise or clear from the context to be directed to a singular form.

Furthermore the term set as employed herein excludes the empty set e.g. the set with no elements therein. Thus a set in the subject disclosure includes one or more elements or entities. As an illustration a set of controllers includes one or more controllers a set of data resources includes one or more data resources etc. Likewise the term group as utilized herein refers to a collection of one or more entities for example a group of nodes refers to one or more nodes.

Various aspects or features will be presented in terms of systems that may include a number of devices components modules and the like. It is to be understood and appreciated that the various systems may include additional devices components modules etc. and or may not include all of the devices components modules etc. discussed in connection with the figures. A combination of these approaches also can be used.

Additionally features or aspects described in the subject disclosure can rely at least in part on delivery or reception of query ies request s indication s or the like and information or payload data associated therewith. Query ies or request s can be embodied in multi bit words e.g. P bit words with P a positive integer and coded to specifically convey a request to a particular functional element a host equipment etc. in order to execute one or more specific actions. Payload data associated with query ies or request s can be embodied for example in one or more reserved bits in a packet header a light payload data packet a field of dedicated bits a lightweight file e.g. a cookie an email communication an instant message or the like. Query ies request s indication s or the like can be delivered in accordance with various communication protocols wireless or otherwise.

Referring initially to illustrated is an example industrial automation system according to an aspect. The industrial automation system is configured to utilize modular automation to construct applications with reusable software that exposes functionality of components of the industrial automation system while providing an abstraction from details of communication and interaction with such components.

The industrial automation system includes a host that is configured to interface with a user and or entities e.g. the Internet another system a computer and so forth hereinafter referred to as user . The interface between host and user can be through various interface mechanisms including a human machine interface HMI or a graphical user interface GUI . Although only a single host is illustrated industrial automation system can include two or more hosts according to an aspect. According to some aspects the host can be one or more industrial controllers e.g. programmable automation controller PAC programmable logic controller PLC and so forth . The one or more industrial controllers can be associated with one or more human machine interfaces HMIs . The term industrial controller as utilized herein can include functionality that can be shared across multiple components or networks.

The host need not be limited to an industrial controller. According to some aspects the host can be or can be associated with one or more computer or network components within the industrial automation system . For example the host can be a computer a server a client an industrial module a human machine interface HMI a graphical user interface GUI and so forth.

The host can be configured to execute at least one service based at least in part on input from the user . The service is illustrated as contained within a platform which can provide an interface between the host and the service . For example the service can be an executable function for the industrial automation system executed on a platform of the host . By providing the interface between host and the service the platform provides a set of abstractions that enable the service to be implemented e.g. compiled and executed in disparate hosts without modification to the service. The platform can be any type of hardware software or combination of hardware and software that allows the service to run and or execute for instance in certain embodiments the platform can be the Java programming language and computing platform. For example the platform can include one or more of a computer s architecture an operating system one or more programming languages or user interfaces.

The service can be employed as one or more executable functions for the industrial automation system . In accordance with some aspects the service is a reusable template that can be utilized in the development of software for the industrial automation system . The software can include for example control programs for physical manufacturing unit operations such as assembly applications. The physical manufacturing unit can include for example conveyors mixers packaging units process skids robotic cells tanks valve matrices and so forth. Additionally or alternatively the software can include higher level programs such as batch processing applications supervisory applications monitoring applications or control programs that control aspects of the industrial automation system .

According to some aspects the service can include one or more module objects encapsulated objects control objects and so on. The service can be configured to facilitate software development by hiding internal interfaces messages programming code and so forth from the user while providing standard and or generic external interface s . In accordance with some aspects the service can simplify programming in the industrial automation system by allowing the user e.g. a process and control engineer to work with published functionality of the service which can be independent of how the functionality was achieved which can mitigate integration and maintenance requirements and reduce costs. This can increase quality consistency and reusability of the software by providing a standardized programming structure between various components or hosts e.g. from different manufacturers within the industrial automation system .

For example utilizing services can benefit both software developers and end users. For example utilization of services can allow a developer of control applications to concentrate on the functionality of an application rather than the mechanics of implementation such as by separating procedural control from equipment control. Services can facilitate continuous software improvements at the same time services can mitigate the risks that changes to the software may present to the industrial automation system . Utilization of services as disclosed herein can simplify testing of software and can provide a reduced chance that new software adversely affects other components or hosts within the industrial automation system . This can also reduce development time accelerate design cycles and reduce cost. Services can also allow end users e.g. manufacturers to separate procedural control from equipment control which can allow end users to adopt existing assets to new product requirements with minimal time and capital investment.

According to various aspects the service can separate procedural control from equipment control by employing a hierarchically structured data model e.g. a hierarchically structured data model according to the International Society for Automation ISA 88 standards . In such a manner procedural control can be logically separated from equipment control. Logical separation can enable the separation of product specific definitions instructions and information from processing equipment entities.

The service can be configured to hide internal aspects from a user . For example the service and or platform can include or can be associated with an interface. In accordance with some aspects the interface can be located within the host . The interface can hide internal functions of the service including the underlying code and complexity. According to an embodiment the interface can define external behaviors supplied to at least one client application engaging the service . Through the interface the service can expose data expose operations that can be performed expose dependencies on other services and so forth. The interface can allow the service to connect to at least one other service to engage with a client application according to an aspect. For example an industrial process can be defined with a plurality of services wherein a first service is a control service that controls a second service e.g. equipment service and a third service e.g. material service wherein the third service is subordinate to the second service. It is to be appreciated that the service can support more than one interface e.g. to engage with more than one client application or to logically partition the functionality of the service. It should be appreciated that in certain scenarios a single interface can support a plurality of clients. Separation of a service into multiple interfaces can allow one interface to be extended and or changed without impacting other interface areas. Such separation can reduce the overall impact to areas of an industrial automation system that utilize the unchanged interface but not the changed interface.

The interface can hide internal functions of the service . These internal functions can include one or more reusable definitions and one or more specifications . At least one reusable definition or at least one specification embodies an implementation of a service and related interface s . In accordance with some aspects the service can be an association of one or more reusable definitions with one or more specifications . The one or more reusable definitions and the one or more specification s can include computer executable programming code that in response to execution thereof can alter the state of one or more resources in an industrial automation system e.g. logic code that can control opening and closing of a valve . The one or more reusable definition s and the one or more specification s can include programming code that is specific to a programming language for example ladder logic function chart scripting language Java C C C and so on. The one or more resources can include one or more of equipment material personnel segments storage and so forth. For example the resource may be a valve that is opened or closed according to logic code where the logic code can be represented by at least one of specification s .

In accordance with some aspects the programming code of the reusable definition can be in a different physical location from the resource of the specification within an enterprise resource control ERC system. It is to be appreciated that the service can support more than one reusable definition . According to some aspects different reusable definitions can be targeted for different hosts such that a service with more than one reusable definition can be deployed to more than one host where each host may have different computing capabilities and methods.

The service can include external references not illustrated that can maintain metadata pertaining to the service according to an aspect. For example the external references can include information that describes dependencies of the service required dependencies to support the reusable definitions e.g. operational requirements . The external references can also include for example specific qualities e.g. performance reliability physical characteristics . . . of the service and or security aspects e.g. security rules and automatic application thereof or authentication procedures of the service . The service may also include other portions not shown such as local data visualization elements etc. Alternatively a service may be more limited in nature e.g. only including a single specification .

The services can grow into different layers of an organizational hierarchy to form a service oriented control system. For example an industrial process can be defined with a plurality of services wherein one service is a control service which controls an equipment service and a material service wherein the material service is subordinate to the equipment service.

Generally the service is an association of one or more reusable definitions with one or more specifications . Reusable definitions and specifications can include computer executable programming code or programming code that in response to execution thereof can alter a state of one or more resources in the industrial control environment. For example the reusable definitions and specifications can be at least one of logic code including ladder logic function chart script Java C code and the like. It is to be appreciated that a service can support multiple reusable definitions e.g. to engage with multiple hosts or multiple specifications . The one or more resources can include one or more of equipment material personnel segments storage and the like. For example the resource may be a valve that is opened or closed according to logic code.

Similar to a plug in approach in software a service can hide internal aspects e.g. reusable definitions and specifications from a user. The service can hide these aspects by providing standard and or generic interfaces to external systems. According to an embodiment the interface can allow the service to expose external reference information about the service . For example the external reference information can include information describing dependencies of the service required connections to support the reusable definition and the like. The service can support multiple interfaces which can allow the service to engage with multiple hosts .

According to an embodiment users and or hosts can access the services across a network not shown . The network may include for example any public or private network. For example services can be created in an offline manner such as in a computer database not shown . When created offline the services can be downloaded for execution on the hosts .

Included in industrial control system is a device that interacts with multiple platform configurations . Each of the different platform configurations can be utilized with different host s within the industrial control system or within a related architecture . In accordance with some aspects a single host is utilized with multiple platform configurations . Although various aspects herein illustrate connections between device platform configurations and host s as wireless links according to some aspects the links can be wireline links or both wireless and wireline links.

The multiple platform configurations can include one or more services associated with one or more reusable definitions and or one or more specifications . In accordance with some aspects different platform configurations can use a common service a common reusable definition a common specification or combinations thereof Each component e.g. service reusable definition specification of the platform can be located anywhere within an industrial control system and does not need to be co located with other components of the platform and or the host s .

Device comprises an interface component that is configured to provide a set of functional connections and controls for various automated host implementations wherein the automated host implementations are configured to interact with a plurality of platform configurations. In accordance with some aspects the automated implementation of the host is execution of a service that comprises a reusable definition and a specification. Interface component can provide a mechanism for interaction between a user and or entity e.g. the Internet another system a computer and so on hereinafter referred to as user the one or more hosts and the multiple platform configurations . For instance the interface component can be but is not limited to being a keyboard a mouse a pressure sensitive screen a graphical user interface a microphone and voice recognition software. In accordance with some aspects the one or more hosts and the device can be in separate locations within the industrial control system or another location e.g. satellite plant vendor location client location and so forth .

In accordance with some aspects device is configured to be utilized for one host wherein the device is independent of the implementation and is transparent to the end user. In such a manner device can be reused on multiple hosts that are functional equivalents but that may have fundamental underlying differences. Thus logic can be implemented in different languages different software bases and so forth.

Also included in device is a deployment component that is configured to support a plurality of platform configurations . Deployment component can be configured to enable a second platform configuration from a set of alternative platform configurations. Further the deployment component can be functionally independent of the platform configurations . For example deployment component can be configured to be reused on multiple platform configurations that are functional equivalents but have underlying differences. For example at least one multiple platform configuration can have a different programming language than at least one other of the multiple platform configurations. However even though the platform configurations have different programming languages the deployment component is configured to support both languages and therefore both platform configurations. In accordance with some aspects deployment component does not support each individual language but instead utilizes a high level programming code that can interface with multiple programming languages without being programming language specific.

Additionally or alternatively deployment component can be configured to support platform configurations having different implementations. For example one implementation can be in an industrial automated controller and a second implementation can be in a software system. The support of different implementations can allow an end application to be indifferent or unbound to a current implementation on another end application.

According to some aspects deployment component can be configured to capture a command or action regardless of how the command or action is used. For example an action might be that if a certain condition occurs an alarm e.g. a specification is activated. A similar specification e.g. alarm can be employed when a different event occurs. Even though a similar specification e.g. alarm is used in both cases the deployment component allows the reusable definition to interact with the specification e.g. alarm even though the specification is being utilized differently by two different automated host implementations.

In accordance with some aspects deployment component can aggregate one or more services one or more reusable definitions and or one or more specifications . The aggregation can include identifying two or more services two or more reusable definitions and or two or more specifications that are similar and determining that the similar services reusable definitions and or specifications can be aggregated or utilized interchangeably. In accordance with some aspects deployment component aggregates based at least in part on a language requirement of an implementation of the at least one service. According to some aspects deployment component aggregates based at least in part on metadata related to an implementation of the at least one service. In some aspects deployment component aggregates based at least in part on an analysis of the at least one of a plurality of capabilities. In additional or alternative aspects deployment component aggregates in response to definition of user specific configuration of industrial control system .

Aggregation of a group of services results in a composite service or composite object. The composite service includes at least one interface from each of the services in the group of services. As indicated supra deployment component can aggregate the group of services. In addition in certain embodiments deployment component can manage the at least one interface of each of the services in the group of services. The management can be effected in accordance with two approaches 1 Compact. The set of interfaces spanned by the at least one interface of each of the services in the group of services can form the composite service with a single compact interface associated with the composite service. In this approach at least a sub set of one or more interface s in the set of interfaces are hidden and not available to users machine or human agent disjointedly from or outside the composite service. 2 Loose. Each interface in the set of interfaces spanned by the at least one interface of each of the services in the group of services is transferred intact into the composite service. Such set of interfaces embody the interface of the composite service the composite service retains the interface s in the set of interfaces as individual entities. Each interface can be exposed as part of formation of the composite service but remains hidden otherwise.

In order to visualize a group of alternative platform configuration possibilities and or aggregation of at least a portion of platform configurations illustrates a schematic representation of an example group of alternative platform configurations according to an aspect. Illustrated in the schematic representation are multiple hosts labeled Host and Host where N is an integer equal to or greater than one. Host can utilize a first service which utilizes a first reusable definition which utilizes a specification e.g. creating a platform configuration that comprises service reusable definition and specification . In a similar manner Host can utilize a second service which utilizes a second reusable definition which utilizes the specification . However in accordance with some aspects another possibility for a platform configuration is that Host can utilize first service as indicated at . In a similar manner Host can alternatively utilize second service . Further second service might alternatively utilize first reusable definition as indicated at . In a similar manner first service might alternatively utilize second reusable definition . In accordance with some aspects a host might utilize more than on service more than one reusable definition one or more specifications or combinations thereof.

In example industrial environment an implementation domain coupled to specification domain via one or more coupling component s can implement the interface component . To at least such end the implementation domain instantiates the interface component . In the illustrated embodiment the implementation domain includes one or more operation layer s also referred to as one or more layer s which can instantiate the interface component . The one or more layer s embody disparate execution environments for an interface component . It should be appreciated that a single structure can be instantiated numerous times according to a plurality of services that enable the various instances of the structure. As an example a programmable automation controller PAC with various control code installed in the PAC and configured to regulate an industrial process represents various instances of a controller interface component. As another example an electronic operator interface EOI that executes a plurality of rendering projects also represents a plurality of instances of an operator interface component. In the subject disclosure instantiation of the interface component includes at least two stages deployment of the structure associated with interface component and generation of a service that enables the functionality conveyed by the specification of the interface component . In an aspect at least one layer of the one or more layer s can enable deployment e.g. provisioning activation testing and acceptance of the structure related to the interface component . In another aspect the at least one layer of the one or more layer s can generate the service. Accordingly a specification associated with the interface component can be implemented across layer s of the one or more layer s into which suitable structure has been deployed.

In addition a component in a local functional element e.g. HMI or terminal can access data available in the local functional element in the same or substantially the same manner as data available in a remote terminal e.g. a remote HMI or terminal . While each layer in example industrial environment operates as a single logical unit for purposes of exchange of data or signaling each layer with N N 1 . . . 1 can include one or more functional elements associated with disparate operational environments e.g. control environments in a control layer and thus disparate portions of a single logical unit can operate under disparate requirement s or specification s .

Access network s can be geographically distributed and can include one or more of wireline network s or wireless network s that can operate in accordance with one or more communication protocols for example packet based protocols such as internet protocol IP transmission control protocol TCP Ethernet Ethernet TCP IP Control and Information Protocol CIP also referred to as Ethernet IP X.25 Asynchronous Transfer Mode ATM protocol frame based protocols such as frame relay and circuit switched protocols. In an aspect access network s can include service network s and control network s . Service network s can comprise at least one network that enables communication of data comprising various data structures related to management data e.g. plant planning data graphic data control data control logic manufacturing data e.g. process recipes or metadata related to one or more variables associated to the various data structures. Control network s primarily administer control data and data transactions related to a control environment. Implementation distinction amongst service network s and control network s in access network s can enable improved integration of various functional elements within example industrial environment For example different parts of the control environment can be linked through custom or legacy control network s while exchange of information amongst the control environment and other network elements such as a server in an enterprise network layer e.g. back end system can be implemented through non proprietary service network s such as an Ethernet network. It should be appreciated that in one or more embodiments the service network s and the control network s are both embodied in the same physical network.

Each layer includes a group of one or more interface component s . The group of one or more interface s can be instantiated within a set of hosts not shown in that are part of layer . Instantiation of the group of one or more interface s can be effected in accordance with various relationships with the set of hosts not shown A one to one relationship where a single interface component is instantiated in a single host a one to many relationship where a single interface component is instantiated in two or more hosts a many to one relationship where two or more interface component s are instantiated in a single host or a many to many relationship where two or more interface components are instantiated in two or more hosts. At least one interface component in a group of one or more interface component s e.g. can be defined within a specification domain e.g. as described supra. In embodiments in which the specification domain overlaps at least in part with the implementation domain e.g. defined by the set of N layers a design layer e.g. layer can embody at least the part of the specification domain that overlaps with such implementation domain.

Decomposition of layer into a set of sub layers can be a logical decomposition based at least on operational feature s of layer and complexity of such operational feature s . In an aspect sub layer s in the set of sub layers can present increasing complexity for example layer can be the least complex relative to layer M . Accordingly the set of one or more interface component s can be the least complex relative to the set of one or more interface component s .

As illustrated in embodiment a layer can include a physical layer and a logical layer . Each of such layers also can be decomposed or arranged in sub layers Physical sub layers and logical sub layers. Both physical sub layers and logical sub layers can be ordered according to complexity as described supra.

In certain embodiments implementation platform can acquire an interface component from a disparate layer not shown or from a centralized network node e.g. a host that is part of an industrial environment that includes layer . In other embodiments implementation platform can acquire an interface component from a specific portion of layer . For instance in a scenario in which layer is a control layer implementation platform can acquire the interface component from a controller installed in a specific part of plant or factory. In an example embodiment e.g. embodiment presented in implementation platform includes an acquisition component that can access retrieve receive etc. a specification that defines an interface component. Acquisition component can retain the specification not shown in repository . Acquisition component also can convey such specification.

In addition in certain embodiments such as example embodiment implementation component can include a code generator component also referred to as code generator that enables implementation platform to compose a service configured to implement the functionality of the interface component. Code generator can access retrieve receive etc. a specification that defines the interface component and based on the specification code generator can compose computer executable programming code e.g. a software application code generator can compose the computer executable code automatically e.g. without human intervention . In addition code generator can compile and link the service. Moreover code generator also can link the service to one or more libraries or re usable definitions . In example embodiment to compose the computer executable programming code code generator can exploit a mapping component that can associate information e.g. data metadata data type s code instructions service profile s service procedure s . . . related to the interface component and disclosed in the specification with a set of computer executable instructions. The mapping component can associate such information with the set of computer executable instructions based at least on mapping s . The mapping s are configurable and extensible and can be defined by an administrator owner or lessee of the industrial environment that contains layer in an aspect the mapping s can be generated at design time and can be utilized at runtime. The set of computer executable instructions are specific to a programming language employed to execute the service generated to implement the interface component and functionality thereof. The programming language can be one of a high level language such as Java Perl Python Delphi Microsoft Visual Basic C C ladder logic function chart or the like device or controller code language e.g. Verilog assembly code or the like. For an interface component in a design environment the programming language can be domain specific simulation languages such as SIMAN.

In response to generating a service for an acquired interface component code generator can signal host s that the service is available for implementing the functionality of the acquired interface component. In addition or in the alternative code generator can store data a logical variable an alphanumeric value within a metadata field etc. in repository wherein the data indicates the service is available. Host s or one or more processors therein can execute the computer executable code associated with the service in order to implement the functionality of the acquired interface component within one or more layers.

Visualization layer includes a set of Q terminals with Q a natural number greater than or equal to unity. The set of Q terminals can embody the physical layer of visualization layer . Terminal with 1 2 . . . Q renders control data terminal can be embodied in a dedicated HMI or electronic operator interface EOI or in a computer such as a desktop computer a mobile computer a smartphone that can render control data. In an aspect visualization layer can be homogeneous and composed of networked workstations. In another aspect visualization layer can be heterogeneous with terminals comprising a group of desktop computers a group of workstations and a group of dedicated HMIs where HMIs in the group can have disparate functionality and can include legacy HMIs. In the embodiment in which the visualization layer is heterogeneous disparate sub layer can be configured in accordance with operational complexity e.g. capabilities of the various terminals that comprise the visualization layer .

Visualization layer and control layer are functionally coupled e.g. communicatively coupled through access network s . One or more terminals in the set of terminals render control data generated in control layer . In the illustrated embodiment control layer includes P controllers with P a natural number greater than or equal to unity 1 . In one or more embodiments controllers can be industrial controllers or industrial automation controllers. A controller in control layer can be embodied in one of a programmable logic controller PLC a PC based controller etc. Each of the controllers includes processor s not shown volatile memory and non volatile memory not shown and other circuitry not shown that enables implementation of control process es e.g. execution of control logic or control code instructions related to a specific control environment not shown in .

Controllers and terminals can be linked through a one one to many relationship or a one to one relationship. Terminals and controllers can be distributed in disparate geographic locations. Accordingly disparate functional elements of access network s enable communication and related exchange of data or signaling amongst two or more terminals located in disparate geographic regions. In addition such functional elements of access network s can enable communication and related exchange of data or signaling amongst two or more controllers that reside in disparate geographical locations.

Control layer and MES layer also are functionally coupled e.g. communicatively coupled through access network s . It should be appreciated that in alternative or additional embodiments of example industrial environment the MES layer can be substituted or supplemented with a generic equipment layer not shown . MES layer includes R controllers with R a natural number greater than or equal to unity 1 . At least one controller in control layer can regulate operation of one or more equipment e.g. equipment and equipment R in MES layer . In MES layer equipment includes associated process es industrial process es manufacturing process es measurement process es in a laboratory infrastructure development process es such as oil and gas prospecting and extraction etc. Equipment in MES layer is specific to a market space e.g. beverages edible goods textile goods oil and gas . . . and can include one or more sets of tools a group of machines numerous systems and related sub systems real estate and associated infrastructure and so forth.

In example industrial environment CAD layer can embody a design environment for visualization layer and control layer . Accordingly CAD layer can embody a specification domain which overlaps with an implementation domain visualization layer and control layer embody at least in part the implementation domain. CAD layer includes a set of T servers with T a natural number greater than or equal to unity 1 . At least one server in the set of T servers enables to compose a specification or contract that defines an interface component not shown for one or more terminals in the set of terminals . In addition or in the alternative a server in the set of T servers enables to compose a specification that defines an interface component not shown for at least one controller in control layer .

In addition in example industrial environment Enterprise Resource Planning ERP layer also is coupled to visualization layer control layer and MES layer via access network s and communication interfaces and . ERP layer includes a set of S servers with S a natural number greater than or equal to unity 1 . At least one server in the set of S servers enables to compose a specification or contract that defines an interface component not shown for one or more terminals in the set of terminals . In addition or in the alternative a server in the set of S servers enables to compose a specification that defines an interface component not shown for at least one controller in control layer .

As described supra for communication purposes and related exchange of data or signaling each layer operates as a single logical unit communication amongst disparate layers e.g. control layer and MES layer is carried out in the same or substantially the same manner irrespective of geographical location of the functional elements e.g. controller P and equipment that exchange data or signaling. In addition a component in a local terminal e.g. terminal P can access data available in the local terminal in the same or substantially the same manner as data available in a remote terminal e.g. terminal . Similarly data available in one or more controllers in control layer appears logically the same to local terminal s and remote terminal s within visualization layer . As described supra each layer in the plurality of layers can include one or more functional elements associated with disparate execution environments e.g. layers or respective portions thereof and thus disparate portions of a single logical unit can operate under disparate requirement s or specification s . The disparate portions can include a sub set of interface components of a set of one or more interface component s that are part of the single logical unit.

In additional or alternative embodiments functionality of administration host can be effected in a server client modality wherein utility component s service one or more related client components or clients distributed across layers .

In certain embodiments as illustrated in example embodiment in utility component s include a plurality of driver components that enable specific functionality. In the subject specification and annexed drawings driver components are also referred to as drivers. In other embodiments functionality of two or more drivers can be consolidated into a single driver. The plurality of driver components includes configuration driver discovery driver classification driver and integrity driver . Configuration driver can provision a layer and functional element s therein such as host s interface component s and the like. Configuration driver also can activate a provisioned layer and functional element s therein. As part of provisioning the layer configuration driver can retain configuration record s in directory ies or other memory element s memory register s a databases table s file s etc. within repository . For a provisioned layer configuration record s can include data indicative of identity ID and provisioning time of the provisioned layer and functional element s therein such as interface component s operational importance of the provisioned layer location of functional element s e.g. host s interface component s that are part of the provisioned layer security profile s of the provisioned layer such as acceptable security protocol s protocol based tunnel e.g. virtual private network VPN connectivity on site credential token validation etc. to access the provisioned layer or one or more functional elements therein and so forth. Physical location of functional element s within a layer can be conveyed by a logical address e.g. an internet protocol IP address or a URL Universal Resource Locator assigned to the functional element s . Configuration driver can communicate e.g. broadcast one or more configuration record s in response to provisioning or activating a layer in the industrial environment.

Discovery driver can identify a layer within the industrial environment that includes or is functionally coupled e.g. communicatively coupled to administration host . Discovery driver also can identify an interface component within one or more layers in the industrial environment. In addition discovery driver can extract data or metadata that characterizes the identified interface. In an aspect of discovery of a layer discovery driver can identify a layer in response to the layer being deployed e.g. provisioned and activated within the industrial environment. In another aspect of discovery of a layer the discovery driver can identify a first layer in response to a discovery request e.g. a query a computer executable code instruction received from a user device or a functional element e.g. a host an interface component or the like within a second layer. For a layer that is discovered discovery driver can extract data or metadata related to the layer. In the subject disclosure to identify a layer discovery driver can scan.

In one or more embodiments e.g. example embodiment discovery driver includes an extraction component that enables discovery driver to identify a layer and at least one interface and acquire retrieve receive etc. data and metadata associated with the layer and the at least one interface therein. Extraction component can exploit one or more discovery criteria which can be retained in discovery criterion storage to determine a condition in an industrial environment or industrial automation system that triggers discovery of a layer or the at least one interface and related data and metadata. The one or more discovery criteria can include deployment of a layer availability e.g. issuance or reception of a discovery request occurrence of specific operation and maintenance O M procedures configuration or activation of a development mode in which design or debugging of the industrial environment the industrial automation system or a portion thereof is carried out etc. Discovery criteria are configurable and extensible an administrator e.g. an owner or operator of an industrial environment an industrial automation system or a part thereof can configure define modify delete etc. at least one discovery criterion. In certain embodiments discovery criteria can be supplied as part of one or more components a host equipment a device etc. 

In an aspect of discovery of an interface component discovery driver can produce a plan or footprint of interface components within the set of layers and sub layers present in one or more layers in such set. In certain embodiments e.g. example embodiment the footprint of interface components can be retained within one or more interface plan s within report storage a report component can retain the one or more interface plan s in memory . The interface plan s can be accessible to other driver s within utility component s or to user device s or host s within one or more layers. In addition in example embodiment report component can aggregate information related to functionality of one or more interface component s and produce intelligence related to functionality of one or more layers that include the one or more interface component s .

In example embodiment processor s can be part of admin host which includes utility component s of which discovery driver can be a part of as described supra. Processor s can be configured to execute or can execute computer executable instructions not shown stored in a memory to implement or provide at least part of the described functionality of discovery driver . In the illustrated example embodiment such memory is memory . In additional or alternative embodiments the memory can be memory not shown in . Such computer executable instructions can include program modules or software or firmware applications that implement specific tasks which can be accomplished for example through one or more of the methods described in the subject specification and that are associated at least in part with functionality or operation of example system . In one or more embodiments discovery driver and components therein can be can be implemented as software or firmware that can be retained in memory as one or more sets of computer executable instructions that when executed by processor s implement such components and their associated functionality as described herein in various aspects. To provide such functionality in one aspect processor s can exploit a bus to functionally couple e.g. communicatively couple to discovery driver and memory and exchange data or any other information amongst discovery driver components therein and memory or memory elements therein. The exchanged information can include at least one of computer executable instruction s computer executable code structure s data structures or the like.

In example embodiment classification driver can search for a specific interface component within in or more layers in the set of layers . Such search can be based on a query related to one or more functional features of an interface component. The query can be acquired received retrieved etc. from a user device or functional element s within a layer. In response to acquiring the query classification driver can scan one or more layers within the set of layers and based on information data metadata etc. collected through the scanning classification driver can identity at least one interface component that can provide at least one functional feature conveyed in the query. In example embodiment illustrated in classification driver includes a search component that scans the set of layers in an industrial environment in response to a query that includes one or more functional features of an interface component.

Additionally or alternatively classification driver can exploit information collected in a search for an interface component to index data or metadata related to at least one layer in the set of layer and sub layers therein. In example embodiment indexing component can index such data or metadata. Indexing component can receive or retrieve the data or metadata from search component via a bus . Bus can be embodied in at least one of a memory bus a system bus an address bus a message bus or any other conduit protocol or mechanism for data or information exchange among components that execute a process or are part of execution of a process. Bus also can include a power bus.

Classification driver can retain data or metadata collected in a search for an interface component within repository . Such data or metadata can be retained within directory ies . In addition or in the alternative the data or metadata can be retained in a disparate memory within repository or a storage layer within one or more layers in the set of layers . As an illustration in example embodiment classification driver includes a report component that stores data and metadata extracted in a search for an interface component within one or more catalog s in report storage that is part of a memory functionally coupled to classification driver . Memory can be part of repository or a storage layer not shown within one or more of layers . In an aspect report component can receive the data or metadata from search component or indexing component via a bus .

In one or more embodiments e.g. example embodiment classification driver includes a metadata mining component that can collect metadata related to at least one interface component at least one functional feature of the interface component or at least one layer in an industrial environment e.g. . Metadata mining component can supply metadata to one or more layers of the industrial environment. In an aspect metadata mining component can collect metadata as part of a response to a query serviced by classification driver . In addition or in the alternative in response to a predetermined event other than a search metadata mining component can scan one or more layers of the industrial environment and extract metadata the predetermined event can include layer deployment interface component instantiation system request scheduled maintenance of one or more layers or the like.

In example embodiments and processor s can be part of admin host which includes utility component s of which classification driver can be a part of as described supra. Processor s can be configured to execute or can execute computer executable instructions not shown stored in a memory to implement or provide at least part of the described functionality of classification driver . In the illustrated example embodiment such memory is memory . In additional or alternative embodiments the memory can be memory not shown in . As described supra such computer executable instructions can include program modules or software or firmware applications that implement specific tasks which can be accomplished for example through one or more of the methods described in the subject specification and that are associated at least in part with functionality or operation of example system . In one or more embodiments classification driver and components therein can be can be implemented as software or firmware that can be retained in memory as one or more sets of computer executable instructions that when executed by processor s implement such components and their associated functionality as described herein in various aspects. It is noted that a memory that is functionally coupled e.g. communicatively coupled to processor s also can retain the one or more sets of computer executable instructions that embody classification driver and components therein. To provide such functionality in one aspect processor s can exploit a bus to functionally couple to classification driver and memory and exchange data or any other information amongst classification driver components therein and memory or memory elements therein. The exchanged information can include at least one of computer executable instruction s computer executable code structure s data structures or the like.

Integrity driver can test and diagnose a layer . Integrity driver also can troubleshoot issue s identified while testing and diagnosing the layer .

In view of the example systems and related embodiments described supra example methods that can be implemented in accordance with the disclosed subject matter can be better appreciated with reference to flowcharts in . For purposes of simplicity of explanation various methods disclosed herein are presented and described as a series of acts however it is to be understood and appreciated that the subject disclosure is not limited by the order of acts as some acts may occur in different order and or concurrently with other acts from that shown and described herein. It is noted that not all illustrated acts may be required to implement a described method in accordance with the subject specification. In addition for example one or more methods disclosed herein could alternatively be represented as a series of interrelated states or events such as in a state diagram. Moreover interaction diagram s or call flow s represent several of the example methods disclosed herein in accordance with the described subject matter particularly in instances when disparate entities or functional elements enact disparate portions of one or more of the several methods. Furthermore two or more of the disclosed example methods can be implemented in combination to accomplish one or more features or advantages described in the subject disclosure.

In an aspect a utility component e.g. discovery driver classification driver . . . or one or more components therein can implement e.g. execute the subject example methods . In another aspect one or more processor s can implement e.g. execute or enable a computing device a host equipment a terminal a controller etc. to implement the subject example methods . In certain embodiments the one or more processors can be configured to provide or provide functionality of the utility component. In alternative or additional embodiments the computing device can be a host e.g. admin host as described herein.

Methods disclosed throughout the subject specification and annexed drawings are capable of being stored on an article of manufacture a removable volatile memory a removable non volatile memory a non removable volatile memory a non removable non volatile memory etc. to enable transporting and transferring such methods to computers for execution and thus implementation by a processor or for storage in a memory. In an aspect one or more processors such as processor s that can enact the one or more methods described herein can be employed to execute computer executable code instructions retained in a memory volatile or non volatile or any computer readable or machine readable storage medium in order to implement one or more of the methods described herein. Such computer executable code instructions provide a computer executable or machine executable framework to enact the various methods described herein. In the subject disclosure computer executable code instructions are also referred to as computer executable instructions.

Referring now to there is illustrated a block diagram of a computer configured to execute the disclosed architecture. In order to provide additional context for various aspects thereof and the following discussion are intended to provide a brief general description of a suitable computing environment in which the various aspects of the innovation can be implemented. While the description above is in the general context of computer executable instructions that may run on one or more computers those skilled in the art will recognize that the innovation also can be implemented in combination with other program modules and or as a combination of hardware and software.

Generally program modules include routines programs components data structures etc. that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the inventive methods can be practiced with other computer system configurations including single processor or multiprocessor computer systems minicomputers mainframe computers as well as personal computers hand held computing devices microprocessor based or programmable consumer electronics and the like each of which can be operatively coupled to one or more associated devices.

The illustrated aspects of the innovation may also be practiced in distributed computing environments where certain tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules can be located in both local and remote memory storage devices.

Computing devices typically include a variety of media which can include computer readable storage media and or communications media which two terms are used herein differently from one another as follows. Computer readable storage media can be any available storage media that can be accessed by the computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable storage media can be implemented in connection with any method or technology for storage of information such as computer readable instructions program modules structured data or unstructured data. Computer readable storage media can include but are not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disk DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or other tangible and or non transitory media which can be used to store desired information. Computer readable storage media can be accessed by one or more local or remote computing devices e.g. via access requests queries or other data retrieval protocols for a variety of operations with respect to the information stored by the medium.

Communications media typically embody computer readable instructions data structures program modules or other structured or unstructured data in a data signal such as a modulated data signal e.g. a carrier wave or other transport mechanism and includes any information delivery or transport media. The term modulated data signal or signals refers to a signal that has one or more of its characteristics set or changed in such a manner as to encode information in one or more signals. By way of example and not limitation communication media include wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media.

With reference again to the example environment for implementing various aspects includes a computer the computer including a processing unit a system memory and a system bus . The system bus couples system components including but not limited to the system memory to the processing unit . The processing unit can be any of various commercially available processors. Dual microprocessors and other multi processor architectures may also be employed as the processing unit .

The system bus can be any of several types of bus structure that may further interconnect to a memory bus with or without a memory controller a peripheral bus and a local bus using any of a variety of commercially available bus architectures. The system memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS is stored in a non volatile memory such as ROM EPROM EEPROM which BIOS contains the basic routines that help to transfer information between elements within the computer such as during start up. The RAM can also include a high speed RAM such as static RAM for caching data.

The computer further includes an internal hard disk drive HDD e.g. EIDE SATA which internal hard disk drive may also be configured for external use in a suitable chassis not shown a magnetic floppy disk drive FDD e.g. to read from or write to a removable diskette and an optical disk drive e.g. reading a CD ROM disk or to read from or write to other high capacity optical media such as the DVD . The hard disk drive magnetic disk drive and optical disk drive can be connected to the system bus by a hard disk drive interface a magnetic disk drive interface and an optical drive interface respectively. The interface for external drive implementations includes at least one or both of Universal Serial Bus USB and IEEE 1394 interface technologies. Other external drive connection technologies are within contemplation of the subject innovation.

The drives and their associated computer readable media provide nonvolatile storage of data data structures computer executable instructions and so forth. For the computer the drives and media accommodate the storage of any data in a suitable digital format. Although the description of computer readable media above refers to a HDD a removable magnetic diskette and a removable optical media such as a CD or DVD it should be appreciated by those skilled in the art that other types of media which are readable by a computer such as zip drives magnetic cassettes flash memory cards cartridges and the like may also be used in the example operating environment and further that any such media may contain computer executable instructions for performing the methods of the disclosed innovation.

A number of program modules can be stored in the drives and RAM including an operating system one or more application programs other program modules and program data . All or portions of the operating system applications modules and or data can also be cached in the RAM . It is to be appreciated that the innovation can be implemented with various commercially available operating systems or combinations of operating systems.

A user can enter commands and information into the computer through one or more wired wireless input devices e.g. a keyboard and a pointing device such as a mouse . Other input devices not shown may include a microphone an IR remote control a joystick a game pad a stylus pen touch screen or the like. These and other input devices are often connected to the processing unit through an input device interface that is coupled to the system bus but can be connected by other interfaces such as a parallel port an IEEE 1394 serial port a game port a USB port an IR interface etc.

A monitor or other type of display device is also connected to the system bus via an interface such as a video adapter . In addition to the monitor a computer typically includes other peripheral output devices not shown such as speakers printers etc.

The computer may operate in a networked environment using logical connections via wired and or wireless communications to one or more remote computers such as a remote computer s . The remote computer s can be a workstation a server computer a router a personal computer portable computer microprocessor based entertainment appliance a peer device or other common network node and typically includes many or all of the elements described relative to the computer although for purposes of brevity only a memory storage device is illustrated. The logical connections depicted include wired wireless connectivity to a local area network LAN and or larger networks e.g. a wide area network WAN . Such LAN and WAN networking environments are commonplace in offices and companies and facilitate enterprise wide computer networks such as intranets all of which may connect to a global communications network e.g. the Internet.

When used in a LAN networking environment the computer is connected to the local network through a wired and or wireless communication network interface or adapter . The adaptor may facilitate wired or wireless communication to the LAN which may also include a wireless access point disposed thereon for communicating with the wireless adaptor .

When used in a WAN networking environment the computer can include a modem or is connected to a communications server on the WAN or has other means for establishing communications over the WAN such as by way of the Internet. The modem which can be internal or external and a wired or wireless device is connected to the system bus via the serial port interface . In a networked environment program modules depicted relative to the computer or portions thereof can be stored in the remote memory storage device . It will be appreciated that the network connections shown are example and other means of establishing a communications link between the computers can be used.

The computer is operable to communicate with any wireless devices or entities operatively disposed in wireless communication e.g. a printer scanner desktop and or portable computer portable data assistant communications satellite any piece of equipment or location associated with a wirelessly detectable tag e.g. a kiosk news stand restroom and telephone. This includes at least Wi Fi and Bluetooth wireless technologies. Thus the communication can be a predefined structure as with a conventional network or simply an ad hoc communication between at least two devices.

Wi Fi or Wireless Fidelity allows connection to the Internet from a couch at home a bed in a hotel room or a conference room at work without wires. Wi Fi is a wireless technology similar to that used in a cell phone that enables such devices e.g. computers to send and receive data indoors and out anywhere within the range of a base station. Wi Fi networks use radio technologies called IEEE 802.11 a b g etc. to provide secure reliable fast wireless connectivity. A Wi Fi network can be used to connect computers to each other to the Internet and to wired networks which use IEEE 802.3 or Ethernet . Wi Fi networks operate in the unlicensed 2.4 and 5 GHz radio bands at an 11 Mbps 802.11a or 54 Mbps 802.11b data rate for example or with products that contain both bands dual band so the networks can provide real world performance similar to the basic 10BaseT wired Ethernet networks used in many offices.

Referring now to there is illustrated a schematic block diagram of an example computing environment in accordance with another aspect. The system includes one or more client s . The client s can be hardware and or software e.g. threads processes computing devices . The client s can house cookie s and or associated contextual information by employing the subject innovation for example.

The system also includes one or more server s . The server s can also be hardware and or software e.g. threads processes computing devices . The servers can house threads to perform transformations by employing the invention for example. One possible communication between a client and a server can be in the form of a data packet adapted to be transmitted between two or more computer processes. The data packet may include a cookie and or associated contextual information for example. The system includes a communication framework e.g. a global communication network such as the Internet that can be employed to facilitate communications between the client s and the server s .

Communications can be facilitated via a wired including optical fiber and or wireless technology. The client s are operatively connected to one or more client data store s that can be employed to store information local to the client s e.g. cookie s and or associated contextual information . Similarly the server s are operatively connected to one or more server data store s that can be employed to store information local to the servers .

In the subject specification and annexed drawings terms such as store data store data storage repository and substantially any term s that convey other information storage component s relevant to operation and functionality of a functional element or component described herein refer to memory components or entities embodied in a memory or components comprising the memory. The memory components described herein can be either volatile memory or nonvolatile memory or can include both volatile and nonvolatile memory.

By way of illustration and not limitation nonvolatile memory can include read only memory ROM programmable ROM PROM electrically programmable ROM EPROM electrically erasable ROM EEPROM or flash memory. Volatile memory can include random access memory RAM which acts as external cache memory. By way of further illustration and not limitation RAM can be available in many forms such as synchronous RAM SRAM dynamic RAM DRAM synchronous DRAM SDRAM double data rate SDRAM DDR SDRAM enhanced SDRAM ESDRAM Synchlink DRAM SLDRAM and direct Rambus RAM DRRAM . Additionally the disclosed memory components of systems or methods herein are intended to comprise without being limited to comprising these and any other suitable types of memory.

The various illustrative logics logical blocks modules and circuits described in connection with the embodiments disclosed herein may be implemented or performed with a general purpose processor a digital signal processor DSP an application specific integrated circuit ASIC a field programmable gate array FPGA or other programmable logic device discrete gate or transistor logic discrete hardware components or any combination thereof designed to perform the functions described herein. A general purpose processor may be a microprocessor but in the alternative the processor may be any conventional processor controller microcontroller or state machine. A processor may also be implemented as a combination of computing devices e.g. a combination of a DSP and a microprocessor a plurality of microprocessors one or more microprocessors in conjunction with a DSP core or any other such configuration. Additionally at least one processor may comprise one or more modules operable to perform one or more of the steps and or actions described above.

Further the steps and or actions of a method or algorithm described in connection with the aspects disclosed herein may be embodied directly in hardware in a software module executed by a processor or in a combination of the two. A software module may reside in RAM memory flash memory ROM memory EPROM memory EEPROM memory registers a hard disk a removable disk a CD ROM or any other form of storage medium known in the art. An example storage medium may be coupled to the processor such that the processor can read information from and write information to the storage medium. In the alternative the storage medium may be integral to the processor. Further in some aspects the processor and the storage medium may reside in an ASIC. Additionally the ASIC may reside in a user terminal. In the alternative the processor and the storage medium may reside as discrete components in a user terminal. Additionally in some aspects the steps and or actions of a method or algorithm may reside as one or any combination or set of codes and or instructions on a machine readable medium and or computer readable medium which may be incorporated into a computer program product.

In one or more aspects the functions described may be implemented in hardware software firmware or any combination thereof. If implemented in software the functions may be stored or transmitted as one or more instructions or code on a computer readable medium. Computer readable media includes both computer storage media and communication media including any medium that facilitates transfer of a computer program from one place to another. A storage medium may be any available media that can be accessed by a computer. By way of example and not limitation such computer readable media can comprise RAM ROM EEPROM CD ROM or other optical disk storage magnetic disk storage or other magnetic storage devices or any other medium that can be used to carry or store desired program code in the form of instructions or data structures and that can be accessed by a computer. Also any connection may be termed a computer readable medium. For example if software is transmitted from a website server or other remote source using a coaxial cable fiber optic cable twisted pair digital subscriber line DSL or wireless technologies such as infrared radio and microwave then the coaxial cable fiber optic cable twisted pair DSL or wireless technologies such as infrared radio and microwave are included in the definition of medium. Disk and disc as used herein includes compact disc CD laser disc optical disc digital versatile disc DVD floppy disk and blu ray disc where disks usually reproduce data magnetically while discs usually reproduce data optically with lasers. Combinations of the above should also be included within the scope of computer readable media.

What has been described above includes examples of the disclosed innovation. It is of course not possible to describe every conceivable combination of components and or methodologies but one of ordinary skill in the art may recognize that many further combinations and permutations are possible. Accordingly the innovation is intended to embrace all such alterations modifications and variations that fall within the spirit and scope of the appended claims. Furthermore to the extent that the term includes is used in either the detailed description or the claims such term is intended to be inclusive in a manner similar to the term comprising as comprising is interpreted when employed as a transitional word in a claim.

