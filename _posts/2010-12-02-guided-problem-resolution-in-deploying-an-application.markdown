---

title: Guided problem resolution in deploying an application
abstract: Techniques are disclosed for deploying an application. In one embodiment, a packaging tool determines that an error exists in a packaged application. The packaging tool may guide a user in fixing the error by updating the packaging tool and repackaging the application using the updated packaging tool. The packaging tool may guide the user via one or more notifications output for display to the user.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08612963&OS=08612963&RS=08612963
owner: International Business Machines Corporation
number: 08612963
owner_city: Armonk
owner_country: US
publication_date: 20101202
---
Independent Software Vendors ISVs often package applications for deployment onto an application server. The ISVs may provide the packaged applications to one or more customers of the ISVs. The customers of the ISVs may then deploy the packaged application onto the application server. At least in some cases as the customers upgrade to newer versions of the application server the customers may deploy the packaged application onto the newer versions of the application server without requiring the ISVs to re package the application for deployment.

Embodiments of the invention provide a computer implemented method computer program product and system for performing an operation that includes packaging an application by a packaging tool for deployment onto an application server to generate a packaged application. The operation also includes determining that an error exists in the packaged application. The operation also includes issuing a user instruction to update the packaging tool. The operation also includes issuing a user instruction to use the updated packaging tool to repackage the application for deployment onto the application server to generate a repackaged application whereby the error does not exist in the repackaged application.

Embodiments of the invention provide techniques for deploying an application. One embodiment of the invention provides a packaging tool configured to package the application for deployment onto an application server. A provider of the packaging tool such as an administrative user or developer may subsequently determine that the packaged application contains an error that prevents the packaged application from deploying correctly to the application server. The tool provider may also determine that in order for the application to deploy correctly onto the application server the application is to be repackaged using an updated version of the packaging tool. The tool provider may provide a problem definition to the packaging tool via an update service for the packaging tool.

In one embodiment upon determining that the problem definition applies to the current version of the packaging tool the packaging tool guides a user such as an independent software vendor in updating the packaging tool and or using the updated packaging tool to repackage the application for deployment onto the application server. To this end the packaging tool may guide the user via one or more notifications as defined by the problem definition provided by the tool provider. The notifications may specify a sequence of actions for fixing the error such as first updating the packaging tool and subsequently repackaging the application using the updated packaging tool. Accordingly the repackaged application may correctly deploy onto the application server. At least in some cases incorporating the notifications into the packaging tool provides a more convenient and or reliable mechanism for fixing the error in the packaged application.

In the following reference is made to embodiments of the invention. However it should be understood that the invention is not limited to specific described embodiments. Instead any combination of the following features and elements whether related to different embodiments or not is contemplated to implement and practice the invention. Furthermore although embodiments of the invention may achieve advantages over other possible solutions and or over the prior art whether or not a particular advantage is achieved by a given embodiment is not limiting of the invention. Thus the following aspects features embodiments and advantages are merely illustrative and are not considered elements or limitations of the appended claims except where explicitly recited in a claim s . Likewise reference to the invention shall not be construed as a generalization of any inventive subject matter disclosed herein and shall not be considered to be an element or limitation of the appended claims except where explicitly recited in a claim s .

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Embodiments of the invention may be provided to end users through a cloud computing infrastructure. Cloud computing generally refers to the provision of scalable computing resources as a service over a network. More formally cloud computing may be defined as a computing capability that provides an abstraction between the computing resource and its underlying technical architecture e.g. servers storage networks enabling convenient on demand network access to a shared pool of configurable computing resources that can be rapidly provisioned and released with minimal management effort or service provider interaction. Thus cloud computing allows a user to access virtual computing resources e.g. storage data applications and even complete virtualized computing systems in the cloud without regard for the underlying physical systems or locations of those systems used to provide the computing resources.

Typically cloud computing resources are provided to a user on a pay per use basis where users are charged only for the computing resources actually used e.g. an amount of storage space consumed by a user or a number of virtualized systems instantiated by the user . A user can access any of the resources that reside in the cloud at any time and from anywhere across the Internet. In context of the present invention a user may access applications e.g. the packaging tool or related data available in the cloud. For example the packaging tool could execute on a computing system in the cloud and guide the user in repackaging an application for deployment. In such a case the packaging tool could generate deployment assets for the application and store the deployment assets at a storage location in the cloud. Doing so allows the deployment assets to be accessed from any computing system attached to a network connected to the cloud e.g. the Internet .

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The computer generally includes a processor connected via a bus to a memory a network interface device a storage an input device and an output device . The computer is generally under the control of an operating system. Examples of operating systems include UNIX versions of the Microsoft Windows operating system and distributions of the Linux operating system. More generally any operating system supporting the functions disclosed herein may be used. The processor is included to be representative of a single CPU multiple CPUs a single CPU having multiple processing cores and the like. Similarly the memory may be a random access memory. While the memory is shown as a single identity it should be understood that the memory may comprise a plurality of modules and that the memory may exist at multiple levels from high speed registers and caches to lower speed but larger DRAM chips. The network interface device may be any type of network communications device allowing the computer to communicate with other computers via the network .

The storage may be a persistent storage device. Although the storage is shown as a single unit the storage may be a combination of fixed and or removable storage devices such as fixed disc drives floppy disc drives tape drives removable memory cards or optical storage. The memory and the storage may be part of one virtual address space spanning multiple primary and secondary storage devices.

The input device may be any device for providing input to the computer . For example a keyboard keypad light pen touch screen track ball or speech recognition unit audio video player and the like may be used. The output device may be any device for providing output to a user of the computer . For example the output device may be any conventional display screen or set of speakers along with their respective interface cards i.e. video cards and sound cards not shown . Although shown separately from the input device the output device and input device may be combined. For example a display screen with an integrated touch screen a display with an integrated keyboard or a speech recognition unit combined with a text speech converter may be used.

As shown the memory of the computer includes an application server an application and a packaging tool which includes one or more problem definitions . The storage of the computer includes deployment assets generated for the application by the packaging tool . In one embodiment the application is configured to execute in an environment provided by the application server . In an alternative embodiment the application executes in an environment provided by an operating system not shown executing on the computer . The application server provides services to the application for security state maintenance data access and persistence via one or more application programming interfaces APIs . The application server may be provided as part of a server system such as the IBM Smart Cube. In one embodiment the application server conforms to the Java Platform Enterprise Edition Java EE . As is known Java EE is a widely used platform for server programming in the Java programming language. The Java EE compliant application server may include one or more containers such as a Servlet container and an Enterprise JavaBeans EJB container and may provide services such as Java Naming and Directory Interface JNDI Java Message Service JMS and connection pooling.

Further although embodiments are described herein with reference to the packaging tool and the application server executing on the computer those skilled in the art will appreciate that in alternative embodiments the packaging tool may execute on a different computer connected to the computer via the network . In such cases the packaged application generated by the packaging tool is transmitted over the network for deployment onto the computer .

As described above in one embodiment the packaging tool is configured to package the application for deployment onto the application server . The packaging tool may package the application based on user input provided to the packaging tool . For example the packaging tool may include a wizard that prompts the user to select which components of the application server are used by the application that is to be deployed. The components used by the application determine what configuration settings are needed to deploy the application onto the application server . Deploying an application onto the application server includes one or more of installing the application configuring the application and or the application server and executing the application . Packaging the application includes generating the deployment assets for the application . Depending on the embodiment packaging the application may also include compressing one or more files of application and or the deployment assets using conventional data compression techniques such as Lempel Ziv LZ compression. As is known Lempel Ziv compression refers to a class of algorithms for lossless data compression. In other embodiments the packaged application includes the deployment assets and uncompressed files of the application .

In one embodiment the deployment assets specify how to deploy the application for execution on the application server and may include configuration settings for the application and or the application server . Further depending on the embodiment the deployment assets may include source code for deploying the application where the source code is generated by the packaging tool and is expressed in a conventional programming language. The source code may retrieve one or more variables from the application and or the application server for use in deploying the application . The source code may install the application onto the computer . Further the source code may configure the application and or the application server using the configuration settings specified in the deployment assets . Once the application server and or the application are configured the source code may also launch the application for execution on the computer .

From time to time a user of the packaging tool may upgrade software the application server or one or more components and or middleware layers thereof to a newer version. Assume that the application server includes an enterprise collaboration component. An example of the enterprise collaboration component is IBM Lotus Domino . Assume also that the user of the packaging tool upgrades the enterprise collaboration component to a newer version e.g. from Domino 8.0 to Domino 8.5 . Suppose that the newer version of the enterprise collaboration component requires additional information to be collected in creating deployment assets for the application where the packaging tool is not configured to collect the additional information. In other words the packaged application may not deploy correctly to the upgraded application server because the information required by the enterprise collaboration component is not found in the deployment assets previously generated for the application . To deploy the application correctly onto the upgraded application server the application is to be repackaged using an updated version of the packaging tool . Accordingly in one embodiment the provider of the packaging tool configures the packaging tool to guide the user of the packaging tool in fixing the errors.

As described above in one embodiment the developer of the packaging tool may subsequently determine that the packaged application contains an error that prevents the packaged application from deploying correctly to the application server . For example the error may be that the upgraded application server or an upgraded component thereof requires information that the packaging tool is not configured to collect when packaging the application for deployment. The information may include any property associated with the application the application server and or the operating system. In one embodiment the developer may also determine that in order for the application to deploy correctly onto the application server the application is to be repackaged using an updated version of the packaging tool . To this end the developer may provide the problem definition to the packaging tool . The problem definition may be provided to the packaging tool over the network via an update service. In this regard the update service may be any application that is configured to provide problem definitions to the packaging tool over the network . In one embodiment the update service pushes the problem definition to the packaging tool via an interrupt mechanism when the problem definition is available. In an alternative embodiment the packaging tool pulls the problem definition from the update service by periodically polling the update service for problem definitions based on a predefined schedule set by the developer of the packaging tool .

In one embodiment upon determining that the problem definition applies to the current version of the packaging tool the packaging tool guides the user in updating the packaging tool and subsequently using the updated packaging tool to repackage the application for deployment onto the application server . The updated packaging tool may then guide the user via one or more notifications that are displayed to the user. In one embodiment each notification is defined in the problem definition and includes i a message to be output to the user and ii a condition under which the message is output to the user.

As described above the packaging tool guides the user in updating the packaging tool prior to using the updated packaging tool to repackage the application for deployment. Updating the packaging tool includes i receiving request from a user via the packaging tool or via a different application to update the packaging tool and ii updating one or more application files of the packaging tool where the version number of the packaging tool is changed to reflect a newer version of the packaging tool. The version number of the packaging tool may include a sequence of integers separated by a delimiter such as a period. The version number may also include an alphanumeric string specifying a release type e.g. alpha beta release candidate etc. The sequence of integers may be in an order representing a decreasing or increasing significance of change between versions. Further the sequence of integers may include a major number a minor number a maintenance number a build number and or a revision number etc. For example a version number of 4.1.3.9b specifies a beta release having a major number of four a minor number of one a maintenance number of 3 and a build number of 9. The version number is considered to be changed when at least one of the integers or alphanumeric string is changed. Furthermore as used herein the packaging tool is not considered to be updated unless changes to one or more application files of the packaging tool are also accompanied with a change to the version number of the packaging tool.

In one embodiment each notification entry includes a message identifier and a message value . In some embodiments each notification entry also includes a condition entry that specifies a condition under which a notification of the respective notification entry is output to a user of the packaging tool . In alternative embodiments the condition is specified by the message identifier as shown. For example the message identifier represents a condition of prior to updating the packaging tool to version 1.2.0 while the message identifier represents a condition of subsequent to updating the packaging tool to version 1.2.0 . By specifying the various entries of the problem definition the developer of the packaging tool may configure the packaging tool with notifications suited for guiding the user of the packaging tool to fix the error in the packaged application.

In one embodiment to guide the user to fix the error in the packaged application the packaging tool outputs a first notification to guide the user to update the packaging tool to a newer version. The first notification is output only when the packaging tool determines that the update to the newer version has not taken place. Put another way a situation may arise where the user updates the packaging tool to the newer version for reasons not relating to fixing the error e.g. prior to the error being identified by the developer of the packaging tool . In this situation the packaging tool identifies that the user has already performed one of the actions for fixing the error and accordingly refrains from notifying the user to perform the action. In other situations when the first notification is displayed the first notification may also indicate to the user that the user is to repackage the application using the packaging tool subsequent to updating the packaging tool .

In one embodiment the packaging tool also outputs a second notification to guide the user to repackage the application using the updated packaging tool . The second notification is output only when the packaging tool determines that the update to the newer version has already taken place. Because the update has already taken place the second notification does not indicate to the user that any update to the packaging tool is needed. Accordingly the packaging tool outputs the first notification and or the second notification in accordance with the problem definition to guide the user to fix the error in the packaged application.

In one embodiment the packaging tool may also disable predefined functionality of the packaging tool until the packaging tool is updated thereby rendering the predefined functionality unavailable to the user until the user updates the packaging tool . For example assume that the packaging tool provides i functionality for packaging the application and ii functionality for deploying the packaged application to the application server . In one embodiment the packaging tool may disable only the functionality for deploying the packaged application to the application server . Accordingly the packaging tool may provide incentives for the user to update the packaging tool sooner in order to re enable the disabled functionality of the packaging tool .

At step the packaging tool instructs the user to update the packaging tool . For example the packaging tool may output the notification of . At step the updated packaging tool instructs the user to repackage the application using the updated packaging tool to regenerate a repackaged application whereby the error does not exist in the repackaged application. For example the packaging tool may output the notification of . The repackaged application may include ii a second generated set of deployment assets for the application of which at least one deployment asset differs from the first generated set of deployment assets and ii the one or more compressed files of the application. After the step the method terminates.

Advantageously embodiments of the invention provide techniques for deploying an application. One embodiment of the invention provides a packaging tool. The packaging tool may determine that an error exists in a packaged application based on a problem definition retrieved from an update service for the packaging tool. The packaging tool may guide a user in fixing the error by updating the packaging tool and repackaging the application using the updated packaging tool. The packaging tool may guide the user via one or more notifications output for display to the user. The notifications may be specified in the problem definition. Advantageously the user is guided in fixing the error without requiring involvement by any administrative user of the packaging tool apart from providing the problem definition via the update service. Incorporating the notifications into the packaging tool using the techniques disclosed herein may provide a more convenient and or reliable mechanism for fixing the error in the packaged application.

While the foregoing is directed to embodiments of the present invention other and further embodiments of the invention may be devised without departing from the basic scope thereof and the scope thereof is determined by the claims that follow.

