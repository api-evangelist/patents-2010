---

title: System and method for evaluating and selecting software components and services
abstract: A system that includes one or more computer processors is configured to receive parameters relating to non-functional attributes of a proposed software component, parameters relating to non-functional attributes of one or more available software components, and a weight for each of the non-functional attributes. The system calculates a quality and a risk for each available software component as a function of the parameters of the proposed software component, the parameters for the one or more available software components, and the weight for each of the non-functional attributes. The system outputs to a display device one or more of the quality and the risk for the one or more available software components.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08752013&OS=08752013&RS=08752013
owner: CA, Inc.
number: 08752013
owner_city: Islandia
owner_country: US
publication_date: 20100317
---
The present disclosure relates to the evaluation and selection of software components and services and in an embodiment but not by way of limitation a system and method for evaluating and selecting software components and services for a particular architecture.

In large research and development R D organizations where products are developed at different sites around the globe architecture and management communications are of the essence. Making a judgment call on architectural changes requires the perspectives of different stakeholders users or user types who often communicate in different languages. This diversity of the architectural languages modeling approaches design methodologies best practices and experiences introduces several challenges. These challenges include creating a common understanding and accurate visibility into a product s current architecture and evaluating and determining where to invest efforts of re engineering existing products as well as generating a new architecture centric evolution plan for the portfolio at large.

The diversity of architectural languages modeling approaches design methodologies best practices and experiences introduces several challenges into maintaining and evolving a software system architecture. Fusing these languages and perspectives into simple evaluation criteria would be helpful for a business unit in order to drive a common agenda because the diversity of architectural documented artifacts new methodologies and suggested standards could generate endless debates. The problem is even more crucial immediately after mergers and acquisitions of different business units or organizations. Weaving new technology and best practices into an existing portfolio while at the same time showing an immediate value in technology replacement or valuable integrations is important to a growing enterprise and its success.

In most instances any particular business unit is eager to embrace an opportunity and adapt and improve its technology. Unfortunately this takes time and usually opposition emerges due to possible delays lack of accurate communication or proper understanding of the architectural documents. The solution should be simple and lean that is any architect should be able to browse another product s components and blueprints as easily as they browse his or her own. However in order to do this a basic lexicon or vocabulary needs to be agreed upon and usage of this lexicon or vocabulary should be governed.

One or more embodiments disclosed herein relate to architecture centric evolution which deals with planning evolutionary changes to ready made components off the shelf COTS as well as a hands on evaluation of the constantly changing information technology IT architecture. Visibility into different components and their quality assessments are crucial vehicles allowing an information technology IT manager to define an architectural change roadmap. In order to define an architectural change the non functional attributes of the system components and overall utilization must fit the users or stakeholders current and future needs.

To fulfill such current and future needs one must among other things search for candidate common components that bring new technological value to a software architecture. One must also reduce development efforts for similar technological gadgets by leveraging existing solutions opportunistic and spontaneous development that were not constructed for the change in the first place. One should also delegate non business related technology to infrastructure and third party projects. One should further search for duplicated services which may cause customer confusion and rid the architecture of such duplication.

The commonality of all these needs is the basic task of inventorying the portfolio that is the bill of material. However it should be accompanied by a quality assessment and derived architectural roadmap. The evaluated quality attributes are derived from the non functional characteristics of these components and comply with the needs of stakeholders users and user types or groups. Based on understanding the existing architecture one can decide on strategic and tactical directions maximizing the existing investments.

Prior methods are based on a process of ascertaining that a certain proposed architectural design contains a solution to an architectural need. Some IT managers may do this analysis at the end of the development by checking if the final result indeed provided a solution to the required needs. Thus these tools are focused on evaluating the probability of success of a design as well as a convergence of the requirements. Other tools evaluate the architecture quality in terms of integration mismatch or technical compatibility. The tools propose to evaluate the mismatch between the components i.e. the composition and dependency of a structure and dealing with interface integration interface attributes . They do not evaluate these architectural dependencies over a full structure composition and for systems of systems including Service Oriented Architecture SOA technology and Software as a Service SaaS .

The disclosed embodiments herein relate to introducing and dealing with a software architectural change within an organization. The proposed ComVal Component E Valuation methodology is comprised of a minimal and lean set of artifacts that can form an understanding of the software architecture utilization and quality. It describes perspectives in conducting an architecture investigation and evaluation while documenting the portfolio architecture. The activity caters to both management and architects while balancing what should be done in theory versus what can be done in practice.

Many reasons for conducting software architectural investigations exist. Classical examples include searching for candidate common components that bring new technological value reducing development efforts for similar technological gadgets by leveraging existing solutions delegating non business related technology to infrastructure and third party projects and searching for duplicated services which may cause customer confusion just to list a few examples. The commonality of all these needs is the basic task of inventorying the portfolio namely the bill of material with quality assessment and a derived software architectural roadmap. The evaluated quality attributes are derived from the non functional characteristics of these components and comply to stakeholders needs. Based on understanding the existing architecture one should decide on strategic and tactical directions maximizing the existing investments.

Architecture centric evolution requires hands on evaluation of a constantly changing architecture. Visibility into different components and their quality assessments are crucial vehicles that allow a manager to define an architectural change roadmap. In order to define an architectural change the non functional attributes of the system components and overall utilization must fit the stakeholders or users current and future needs. An embodiment of this current disclosure which as noted above can be referred to as the ComVal system and methodology targets architecture evaluation which in turn drives management decisions. The ComVal system and methodology provide an aggregated dashboard that presents quality and risk values for each software component. These quality and risk values are weighted by users or stakeholders preferences. The ComVal system and methodology are anchored by a component catalog that provides a state of the art view of the components technical specifications.

More specifically the ComVal system and methodology are targeted for searching within a catalog of off the shelf components and services according to functional and non functional attributes and selecting the feasible candidates that best fit the users or stakeholders requirements. Based on the selection a proposed architecture component can be evaluated for possible integration or architectural change and thus drive management decisions.

In an embodiment the ComVal system and methodology provide a unique aggregated dashboard that presents quality and risk values for each candidate component and service i.e. software . The quality and risk values are weighted by different users stakeholders preferences. The ComVal system and methodology are anchored by a component catalog that provides a state of the art view of the components technical specifications. The tool and methodology cater to both management and architects driving architectural roadmap construction and they provide constant understanding of the enterprise architecture status.

Embodiments of the ComVal system tool and methodology are imbued with one or more of the following features. The system assesses relative risk and quality of software components and services by comparing rating and averaging an overall component and service architecture s existing attributes. In generating this assessment the system considers changing architectural needs. The quality of the architecture is defined by using two main attributes quality and risk calculated for each attribute as disclosed in further detail below. Risk represents the amount of non conformance to different users or stakeholders needs. For example if portability of a proposed software component or service is a user need then an available software component or service that is not easily rendered portable would be labeled with a higher risk. The assessment and evaluation can be done throughout the software life duration. Consequently what was once acceptable may not be in the future and thus a need for architecture evolution is triggered.

In order to evaluate and rate the architectural quality an information system is provided and contains all the technical data along with its numerated values numerated values of the requirements and numerated weights.

Overall presentations of all the software components and services can be used for overall comparison of different software components and services and selection of the best software component and service. Thus an e commerce approach for an on line component and services catalog is enabled. The quality estimation can be for a single service component or even several components and services prior to evaluating their interface based matching . Thus granularity of the evaluation is based on the smallest component inserted and documented in the information system. The overall quality of the different users or stakeholders can be presented in a single view showing the different evaluations in a single view thus enabling design discussions on the areas of disagreement among the software components and services. After filtering feasible components according to quality criteria and functional value the users collect candidate components and services and compare their quality and risk in order to prioritize and select the best feasible candidate for further usage. In an embodiment an automated quality assessment is not coupled with the software life cycle or architecture process.

Referring to an embodiment of a system for evaluating and selecting software components and services includes a catalog sub system . The catalog sub system contains several modules each of which has a different value for the overall solution of selecting the best software component and service. The internal components and the services and cloud modules contain the basic information system and database that maintain all the architectural information about the components or services that an organization is interested in monitoring. The modules and provide an inventory purchased or candidate possible components or services to use. Component and service attributes of an inventory list of entities are defined and configured using an attributes definitions module that selects the values and defines the status of each of the document components. A quality calculator module calculates the quality and risk as outlined below for each of the attributes of the stored components within the internal components module or the services and cloud module . The search and find module enables the retrieval of candidate components stored in the internal components module and the services and cloud module and it filters them according to information provided by the quality calculators . The retrieved list of candidate components may be stored temporarily and organized in different collections within the components and services module .

The second sub system is the evaluation module . The evaluation module includes the requirements control module that provides a configuration mechanism for setting requirements for different stakeholders for a certain component or for a set of components and thus maintains the Required state of each of the maintained inventory items. The requirements control module affects the quality calculators and uses the search and find module . The attributes prioritization module enables stakeholders to configure the different importance level of each of the documented attributes within the component thereby affecting the mathematics of the quality calculators module . The architecture evaluation module aggregates all the quality and risk attributes of all the components and services evaluated within the components and service collector module and it also provides different drill in information and reports. The dashboard module provides different reports examples of which are illustrated in and it serves as an overall enterprise architecture view for all the components within the organization. It can have different filters and definitions of what to observe using the architecture evaluation module .

Referring now specifically to the process of at parameters relating to non functional attributes of a proposed software component or service are received at a computer processor. A proposed software component can be virtually any piece of software or the service related to it. The component can be standalone such as word processing software. It can also be of a support or plug in nature such as add on software that improves a local area network or a more efficient use of a printer or network of printers. Examples of non functional attributes are illustrated in and include high availability scalability portability behavioral configurability installability modifiability maintainability integrity stability usability self adaptability security reliability fault tolerance time to market support cost and performance.

At parameters relating to non functional attributes of one or more available software components or services are received at the computer processor. Available software components and services refer to software that is available for purchase either through retail means for virtually any consumer or through corporate means for complex software develop by software development companies for its business customers. Available software components and services can also be labeled as commercial off the shelf COTS components.

At a weight for each of the non functional attributes is received at the computer processor. Different weights can be assigned to different non functional attributes to indicate the attributes that are either more or less important to a particular stakeholder or group of stakeholders. At a quality and a risk are calculated for each available software component and service as a function of the parameters of the proposed software component or service the parameters for the one or more available software components and services and the weight for each of the non functional attributes. As will be explained in more detail below the calculated quality is a normalized simple sum of the non functional attributes that are being considered for a particular proposed software component or service and the risk is a measure of a software component s non conformance with a stakeholder s or user s needs. At the quality and risk for the one or more available software components and services are output to a display device for consideration and analysis.

At a computer processor is configured to select a particular available software component or service as a function of the calculated quality and risk. This feature can be implemented in several manners. For example the processor could be configured to simply select the software component with the highest quality and lowest risk. As another example the processor could be configured to select two software components or services a first with the highest quality and a second with the lowest risk. As another example the processor could be configured to first select the top three quality components and then out of those top three quality components select the component with the lowest risk even though it may not be the highest quality . Persons of skill in the art will realize that the processor could be configured in other ways also.

At a computer processor is configured to calculate the quality and risk of the available software components and services repeatedly over a period of time. These repetitive calculations can provide an evolutionary analysis for a software system architecture. For example if a particular available component increases in quality and decreases in risk over a time period then a stakeholder may eventually decide to modify his or her system by incorporating this component into the system. At it is noted that the risk comprises a measure of non conformance to stakeholder or user requirements of a particular software component or service as a function of the parameters and weights. That is as an available software component or service adheres to fewer and fewer stakeholder or user requirements the higher the risk that is associated with implementing that particular software component.

At an example embodiment of a system for evaluating and selecting software components and services includes a network connection that is configured to permit access to ecommerce sites that offer the one or more available software components and services. Consequently after reviewing quality and risk scores of the available components and services a stakeholder or user can decide which component should be selected and access one or more ecommerce sites at which the component or service can be purchased. At it is noted that in an embodiment the weights for the non functional attributes of an available software component or service add up to a predetermined value such as 1.0. At the non functional attributes are selected as a function of the requirements or style of a software system architecture such that a current software component or service can be selected so as to match those architectural requirements or style. For example if system availability is of paramount importance then function attributes such as high availability stability reliability and fault tolerance may be selected to match the system architecture that was designed for high system availability.

Process block discloses an example method of the manner in which to calculate the quality of a software component or service. Specifically the quality can be calculated as follows 

Similarly process block discloses an example method of the manner in which to calculate the risk associated with a software component or service. Specifically the risk can be calculated as follows 

At a display device outputs the quality and risk for a plurality of stakeholders or user types of a software system architecture. This is best illustrated in the details of which are explained below. At the display device outputs the quality and risk for a plurality of available software components and services. This is also best illustrated in . At it is noted that the parameters are numeric parameters and the weight is a numeric weight.

A typical usage of the ComVal system involves a research and development architect who populates a system catalog of components and services with architectural parameters as well as inserts needs i.e. the requirements of different stakeholders . The information about the internal components of the company or internet based services such as SaaS or Cloud computing are stored and available for selection. Service architects a chief architect and customers can use the catalog components by searching and finding components according to query filters or by selecting the highest quality components according to reports and graphical aids provided by the reports and dashboard module . The architects and customers can collect a set of components or services and evaluate their overall proposed quality and risk. One of skill in the art will realize other uses as well.

One or more embodiments further provide a new way with tools to perform an information technology IT components and services evaluation either for a single element or for a collection of components and services. Existing methods are focused primarily on a software components and services set evaluation a full architecture and not targeted for composing an IT enterprise feasibly check. Additionally automated quality evaluation is decoupled from a development process unlike sporadic mostly manual existing alternatives . This results in automated views that describe the implemented software quality. Each time something is changed and documented in the architecture the overall evaluation and accordingly the quality and risk assessment is construed. It therefore requires neither specific review sessions nor dedicated debates. As the requirements change and are inserted into the system the overall quality changes automatically and the overall quality changes are reflected via the dashboard module . Each time a new component is added to the portfolio and its current architecture status is documented its quality is evaluated automatically concerning the existing state without human intervention.

In an embodiment an evaluation dashboard is provided for indicating the status of the components and services and based on that defining an architectural roadmap. An example of such a dashboard is illustrated in . The dashboard presents the overall quality assessment of the components and services as well as acts as a facade and entry point to a detailed catalog. The dashboard includes the name of a product e.g. electronic mail a plurality of stakeholders e.g. component stakeholder product stakeholder and a business unit stakeholder and a plurality of components e.g. several different electronic mail software components and services . The dashboard further includes the calculated quality and risk for each component . The dashboard provides total quality and risk assessments of the component or service according to three management stakeholders component owners product marketing and a business unit. Using this dashboard for several products and services immediately displays duplications dependencies and qualities in a single view. Thus it enables visibility for management when discussing the actual architecture priorities.

The total quality in is a simple sum of all the values after being normalized for the three non functional attributes in this example. The risk is calculated by summarizing only the software architecture change requests items i.e. the negative weights only. In an embodiment each user or stakeholder defines different priorities for the different non functional attributes . As shown in the pie chart of these non functional attributes can include high availability scalability portability behavioral configurability installability modifiability maintainability integrity stability usability self adaptability security reliability fault tolerance time to market support cost and performance. displays in the graphic form of pie chart possible weights a certain user or stakeholder may construct for the non functional needs.

The detailed description of each component and service in the catalog contains the functional offering design principles and activation techniques i.e. the application programming interface API . It may also contain a list of the design patterns applicable to a certain attribute. For example in the case of fault tolerance the component owner may define that this attribute is about providing fault confinement isolation a fault detection checkpoint and diagnostics logging support . The architect can indicate the recovery patterns such as retry and rollback or types of restart such as hot warm and cold. The component s interactions can also be captured detailing dependencies within the catalog components and services.

In summary creating a catalog requires management authority and approval since it consumes expensive time of architects and development managers. However there is no need to document everything. Observing the required architectural changes according to the different quality attributes one can detect if a certain component should be examined or not. An ongoing implementation of this approach can be focused on the re factored components and services due to an integration requirement for a software architectural evolution. Several components and services can be removed from the main product and replaced with an external tool using integration techniques.

A method for applying the actual refactoring can generate a detailed software architectural description for both the changed product architecture and the external one. Quality attribute issues can be considered and the need for change can be compared according to the different stakeholders needs. A further embodiment can includes fully evaluating the rest of the components in the entire business unit based on the ComVal methodology. One of skill in the art will realize that overall evaluation of the software architecture is constantly changing since requirements always change. This basic principle coupled with architecture centric evolution that is visible by an embodiment of the disclosed dashboard is a strong vehicle for managing software architectural changes while maintaining a constant hands on view on the component.

Moreover those skilled in the art will appreciate that the invention may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics network PCS minicomputers mainframe computers and the like. The invention may also be practiced in distributed computer environments where tasks are performed by I O remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

In the embodiment shown in a hardware and operating environment is provided that is applicable to any of the servers and or remote clients shown in the other Figures.

As shown in one embodiment of the hardware and operating environment includes a general purpose computing device in the form of a computer e.g. a personal computer workstation or server including one or more processing units a system memory and a system bus that operatively couples various system components including the system memory to the processing unit . There may be only one or there may be more than one processing unit such that the processor of computer comprises a single central processing unit CPU or a plurality of processing units commonly referred to as a multiprocessor or parallel processor environment. In various embodiments computer is a conventional computer a distributed computer or any other type of computer.

The system bus can be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. The system memory can also be referred to as simply the memory and in some embodiments includes read only memory ROM and random access memory RAM . A basic input output system BIOS program containing the basic routines that help to transfer information between elements within the computer such as during start up may be stored in ROM . The computer further includes a hard disk drive for reading from and writing to a hard disk not shown a magnetic disk drive for reading from or writing to a removable magnetic disk and an optical disk drive for reading from or writing to a removable optical disk such as a CD ROM or other optical media.

The hard disk drive magnetic disk drive and optical disk drive couple with a hard disk drive interface a magnetic disk drive interface and an optical disk drive interface respectively. The drives and their associated computer readable media provide non volatile storage of computer readable instructions data structures program modules and other data for the computer . It should be appreciated by those skilled in the art that any type of computer readable media which can store data that is accessible by a computer such as magnetic cassettes flash memory cards digital video disks Bernoulli cartridges random access memories RAMs read only memories ROMs redundant arrays of independent disks e.g. RAID storage devices and the like can be used in the exemplary operating environment.

A plurality of program modules can be stored on the hard disk magnetic disk optical disk ROM or RAM including an operating system one or more application programs other program modules and program data . A plug in containing a security transmission engine for the present invention can be resident on any one or number of these computer readable media.

A user may enter commands and information into computer through input devices such as a keyboard and pointing device . Other input devices not shown can include a microphone joystick game pad satellite dish scanner or the like. These other input devices are often connected to the processing unit through a serial port interface that is coupled to the system bus but can be connected by other interfaces such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device can also be connected to the system bus via an interface such as a video adapter . The monitor can display a graphical user interface for the user. In addition to the monitor computers typically include other peripheral output devices not shown such as speakers and printers.

The computer may operate in a networked environment using logical connections to one or more remote computers or servers such as remote computer . These logical connections are achieved by a communication device coupled to or a part of the computer the invention is not limited to a particular type of communications device. The remote computer can be another computer a server a router a network PC a client a peer device or other common network node and typically includes many or all of the elements described above I O relative to the computer although only a memory storage device has been illustrated. The logical connections depicted in include a local area network LAN and or a wide area network WAN . Such networking environments are commonplace in office networks enterprise wide computer networks intranets and the internet which are all types of networks.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter which is one type of communications device. In some embodiments when used in a WAN networking environment the computer typically includes a modem another type of communications device or any other type of communications device e.g. a wireless transceiver for establishing communications over the wide area network such as the internet. The modem which may be internal or external is connected to the system bus via the serial port interface . In a networked environment program modules depicted relative to the computer can be stored in the remote memory storage device of remote computer or server . It is appreciated that the network connections shown are exemplary and other means of and communications devices for establishing a communications link between the computers may be used including hybrid fiber coax connections T1 T3 lines DSL s OC 3 and or OC 12 TCP IP microwave wireless application protocol and any other electronic media through any suitable switches routers outlets and power lines as the same are known and understood by one of ordinary skill in the art.

Thus an example system method and machine readable medium for evaluating and selecting software components and services have been described. Embodiments of the invention include features methods or processes embodied within machine executable instructions provided by a machine readable medium. In one embodiment the term machine readable medium or computer readable medium shall be taken to include any tangible non transitory medium which is capable of storing or encoding a sequence of instructions for execution by the machine and that causes the machine to perform any one of the methodologies. In a second embodiment separate from the first embodiment the term machine readable medium or computer readable medium shall be taken to include any intangible transitory medium which is capable of storing or encoding a sequence of instructions for execution by the machine and that causes the machine to perform any one of the methodologies. Consequently a machine readable medium can be either transitory non transitory tangible or intangible in nature.

In Example 1 a system includes one or more computer processors that are configured to receive parameters relating to non functional attributes of a proposed software component or service receive parameters relating to non functional attributes of one or more available software components or services receive a weight for each of the non functional attributes calculate a quality and a risk for each available software component or service as a function of the parameters of the proposed software component or service the parameters for the one or more available software components or services and the weight for each of the non functional attributes and output to a display device or another computer processor one or more of the quality and the risk for the one or more available software components or services.

Example 2 includes one or more features of Example 1 and further optionally includes a system wherein the one or more processors are configured to select a particular available software component or service as a function of the calculated quality and risk.

Example 3 includes one or more features of Examples 1 2 and further optionally includes a system wherein the one or more processors are configured to calculate the quality and risk repeatedly over a period of time thereby providing an evolutionary analysis for a software system architecture.

Example 4 includes one or more features of Examples 1 3 and further optionally includes a system wherein the risk comprises a measure of non conformance to user requirements of a particular software component or service as a function of the parameters and weights.

Example 5 includes one or more features of Examples 1 4 and further optionally includes a network connection configured to permit access to one or more ecommerce sites offering the one or more available software components or services.

Example 6 includes one or more features of Examples 1 5 and further optionally includes a system wherein the weights for the non functional attributes of a particular available software component or service add up to a predetermined value.

Example 7 includes one or more features of Examples 1 6 and further optionally includes a system wherein the non functional attributes are selected as a function of the requirements or style of a software system architecture such that a current software component or service can be selected so as to match those architectural requirements or style.

Example 8 includes one or more features of Examples 1 7 and further optionally includes a system wherein the quality of a single component is calculated as follows 

wherein Actual comprises non functional attributes of the available software components or services and

Example 9 includes one or more features of Examples 1 8 and further optionally includes a system wherein the risk is calculated as follows 

wherein Actual comprises non functional attributes of the available software components or services and

Example 10 includes one or more features of Examples 1 9 and further optionally includes a system wherein the display outputs one or more of the quality and the risk for a plurality of user types of a set of components.

Example 11 includes one or more features of Examples 1 10 and further optionally includes a system wherein the display outputs one or more of the quality and the risk for a plurality of software components or services.

Example 12 includes one or more features of Examples 1 11 and further optionally includes a system wherein the parameters comprise numeric parameters and the weight comprises a numeric weight.

The Abstract is provided to comply with 37 C.F.R. 1.72 b and will allow the reader to quickly ascertain the nature and gist of the technical disclosure. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims.

In the foregoing description of the embodiments various features are grouped together in a single embodiment for the purpose of streamlining the disclosure. This method of disclosure is not to be interpreted as reflecting that the claimed embodiments have more features than are expressly recited in each claim. Rather as the following claims reflect inventive subject matter lies in less than all features of a single disclosed embodiment. Thus the following claims are hereby incorporated into the Detailed Description with each claim standing on its own as a separate example embodiment.

