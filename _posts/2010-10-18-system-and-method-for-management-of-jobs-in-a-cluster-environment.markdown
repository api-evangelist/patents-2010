---

title: System and method for management of jobs in a cluster environment
abstract: A system and method for management of jobs in the clustered environment is provided. Each node in the cluster executes a job manager that interfaces with a replicated database to enable cluster wide management of jobs within the cluster. Jobs are queued in the replicated database and retrieved by a job manager for execution. Each job manager ensures that jobs are processed through completion or, failing that, are re-queued on another storage system for execution.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08286179&OS=08286179&RS=08286179
owner: NetApp, Inc.
number: 08286179
owner_city: Sunnyvale
owner_country: US
publication_date: 20101018
---
The present application is a continuation of U.S. patent application Ser. No. 11 414 696 filed on Apr. 28 2006 entitled SYSTEM AND METHOD FOR MANAGEMENT OF JOBS IN A CLUSTER ENVIRONMENT by Michael Corner now issued as U.S. Pat. No. 7 840 969 on Nov. 23 2010 which is incorporated herein by reference.

The present invention relates to clustered computer environments and more particularly to the management of jobs in a clustered computer environment.

A storage system typically comprises one or more storage devices into which information may be entered and from which information may be obtained as desired. The storage system includes a storage operating system that functionally organizes the system by inter alia invoking storage operations in support of a storage service implemented by the system. The storage system may be implemented in accordance with a variety of storage architectures including but not limited to a network attached storage environment a storage area network and a disk assembly directly attached to a client or host computer. The storage devices are typically disk drives organized as a disk array wherein the term disk commonly describes a self contained rotating magnetic media storage device. The term disk in this context is synonymous with hard disk drive HDD or direct access storage device DASD .

The storage operating system of the storage system may implement a high level module such as a file system to logically organize the information stored on volumes as a hierarchical structure of data containers such as files and logical units. For example each on disk file may be implemented as set of data structures i.e. disk blocks configured to store information such as the actual data for the file. These data blocks are organized within a volume block number vbn space that is maintained by the file system. The file system may also assign each data block in the file a corresponding file offset or file block number fbn . The file system typically assigns sequences of fbns on a per file basis whereas vbns are assigned over a larger volume address space. The file system organizes the data blocks within the vbn space as a logical volume each logical volume may be although is not necessarily associated with its own file system.

A known type of file system is a write anywhere file system that does not over write data on disks. If a data block is retrieved read from disk into a memory of the storage system and dirtied i.e. updated or modified with new data the data block is thereafter stored written to a new location on disk to optimize write performance. A write anywhere file system may initially assume an optimal layout such that the data is substantially contiguously arranged on disks. The optimal disk layout results in efficient access operations particularly for sequential read operations directed to the disks. An example of a write anywhere file system that is configured to operate on a storage system is the Write Anywhere File Layout WAFL file system available from Network Appliance Inc. Sunnyvale Calif.

The storage system may be further configured to operate according to a client server model of information delivery to thereby allow many clients to access data containers stored on the system. In this model the client may comprise an application such as a database application executing on a computer that connects to the storage system over a computer network such as a point to point link shared local area network LAN wide area network WAN or virtual private network VPN implemented over a public network such as the Internet. Each client may request the services of the storage system by issuing file based and block based protocol messages in the form of packets to the system over the network.

A plurality of storage systems may be interconnected to provide a storage system cluster configured to service many clients. Each storage system may be configured to service one or more volumes wherein each volume stores one or more data containers. In certain storage system clusters data container content may be striped across a plurality of volumes configured as a striped volume set SVS where each volume is serviced by a different storage system thereby distributing the load for the single data container among a plurality of storage systems. A cluster environment for data container striping is described in U.S. Pat. No. 7 698 289 issued on Apr. 13 2010 entitled STORAGE SYSTEM ARCHITECTURE FOR STRIPING DATA CONTAINER CONTENT ACROSS VOLUMES OF A CLUSTER by Richard Jernigan et al.

Many of the administrative tasks that are performed in order to manage a storage system cluster involve complex and or potentially long running operations. Certain tasks jobs may be required to run on a particular storage system within the cluster while others may run on any storage system within the cluster. A job may comprise of a plurality of processes and or threads operating in an organized fashion to complete the task. A noted disadvantage in conventional clustered storage systems is that an administrative command that initiates a job may need to be executed on the particular storage system on which the job is to be performed. This complicates cluster management by requiring a storage system cluster administrator to log into each of the storage systems to perform certain jobs.

A noted requirement for proper management however is that once a job has begun the job must run to completion even in the event of a storage system failure. Additionally if the job cannot run to completion then the job must make a clean exit by for example deleting any temporary files created. In typical storage system clusters these requirements have necessitated manual intervention on behalf of system administrators thereby reducing system robustness for mission critical clustered environments. For example should a job be initiated on a particular storage system which then suffered a failure prior to the completion of the job an administrator would need to identify that the job did not complete and manually re initialize the job on another storage system.

The present invention overcomes the disadvantages of the prior art by providing a system and method for management of jobs in a storage system cluster environment. According to the invention a job manager JM executes on each storage system within the clustered environment to provide a framework for scheduling and or executing jobs within the cluster. The JM ensures that jobs execute through to completion and in the event of a failure of a storage system re initiates the jobs on either that storage system once it has recovered or another storage system within the storage cluster. To that end the JM interfaces with a replicated data base RDB containing one or more queues for tracking the various jobs and their affinities to particular storage systems i.e. whether they must execute on that storage system.

In response to a user issuing a command to perform an administrative operation a configuration object is created and passed to the JM. The configuration object illustratively contains parameters and or options specified by the user when issuing the command. The JM uses this object to create a job object. The job object illustratively contains data situations and or executable instructions needed to perform a job. The JM then loads the created job object onto a queue of the RDB. Each JM within the storage system cluster monitors the queue for newly loaded jobs. Should a job contain an affinity for a particular storage system the JM of that particular storage system retrieves the job from the queue of the RDB and processes the job. If the job contains no particular storage system affinity than any JM within the cluster that has available processing bandwidth may retrieve and process the job.

To ensure that jobs execute to completion one of the JMs within the cluster is designated a master job manager and monitors the status of the storage systems in the cluster. Upon detecting a failure of a storage system the master job manager waits for a predefined timeout period to elapse. If the timeout period elapses without the failed storage system recovering the master job manager marks the job as unclaimed so that one of the other JMs within the cluster may claim the job in accordance with its normal job acquisition routine and process the job to completion. Only those jobs having a cluster affinity may be recovered by a second JM within the cluster.

The clients may be general purpose computers configured to interact with the node in accordance with a client server model of information delivery. That is each client may request the services of the node and the node may return the results of the services requested by the client by exchanging packets over the network . The client may issue packets including file based access protocols such as the Common Internet File System CIFS protocol or Network File System NFS protocol over the Transmission Control Protocol Internet Protocol TCP IP when accessing information in the form of files and directories. Alternatively the client may issue packets including block based access protocols such as the Small Computer Systems Interface SCSI protocol encapsulated over TCP iSCSI and SCSI encapsulated over Fibre Channel FCP when accessing information in the form of blocks.

Each node is illustratively embodied as a dual processor storage system executing a storage operating system that preferably implements a high level module such as a file system to logically organize the information as a hierarchical structure of named directories files and special types of files called virtual disks hereinafter generally blocks on the disks. However it will be apparent to those of ordinary skill in the art that the node may alternatively comprise a single or more than two processor system. Illustratively one processor executes the functions of the N module on the node while the other processor executes the functions of the D module .

The memory illustratively comprises storage locations that are addressable by the processors and adapters for storing software programs i.e. specified sets of ordered operations and data structures associated with the present invention. The processor and adapters may in turn comprise processing elements and or logic circuitry configured to execute the programs and manipulate the data structures. The storage operating system portions of which is typically resident in memory and executed by the processing elements functionally organizes the node by inter alia invoking storage operations in support of the storage service implemented by the node. It will be apparent to those skilled in the art that other processing and memory means including various computer readable media may be used for storing and executing program instructions pertaining to the invention described herein.

The network adapter comprises a plurality of ports adapted to couple the node to one or more clients over point to point links wide area networks virtual private networks implemented over a public network Internet or a shared local area network. The network adapter thus may comprise the mechanical electrical and signaling circuitry needed to connect the node to the network. Illustratively the computer network may be embodied as an Ethernet network or a Fibre Channel FC network. Each client may communicate with the node over network by exchanging discrete frames or packets of data according to pre defined protocols such as TCP IP.

The storage adapter cooperates with the storage operating system executing on the node to access information requested by the clients. The information may be stored on any type of attached array of writable storage device media such as video tape optical DVD magnetic tape bubble memory electronic random access memory micro electro mechanical and any other similar media adapted to store information including data and parity information. The storage adapter comprises a plurality of ports having input output I O interface circuitry that couples to the disks over an I O interconnect arrangement such as a conventional high performance FC link topology.

Storage of information on each array is preferably implemented as one or is more storage volumes that comprise a collection of physical storage disks cooperating to define an overall logical arrangement of volume block number vbn space on the volume s . Each logical volume is generally although not necessarily associated with its own file system. The disks within a logical volume file system are typically organized as one or more groups wherein each group may be operated as a Redundant Array of Independent or Inexpensive Disks RAID . Most RAID implementations such as a RAID 4 level implementation enhance the reliability integrity of data storage through the redundant writing of data stripes across a given number of physical disks in the RAID group and the appropriate storing of parity information with respect to the striped data. An illustrative example of a RAID implementation is a RAID 4 level implementation although it should be understood that other types and levels of RAID implementations may be used in accordance with the inventive principles described herein.

To facilitate access to the disks the storage operating system implements a write anywhere file system that cooperates with one or more virtualization modules to virtualize the storage space provided by disks . The file system logically organizes the information as a hierarchical structure of named directories and files on the disks. Each on disk file may be implemented as set of disk blocks configured to store information such as data whereas the directory may be implemented as a specially formatted file in which names and links to other files and directories are stored. The virtualization module s allow the file system to further logically organize information as a hierarchical structure of blocks on the disks that are exported as named logical unit numbers luns .

In the illustrative embodiment the storage operating system is preferably the NetApp Data ONTAP operating system available from Network Appliance Inc. Sunnyvale Calif. that implements a Write Anywhere File Layout WAFL file system. However it is expressly contemplated that any appropriate storage operating system may be enhanced for use in accordance with the inventive principles described herein. As such where the term ONTAP is employed it should be taken broadly to refer to any storage operating system that is otherwise adaptable to the teachings of this invention.

In addition the storage operating system includes a series of software layers organized to form a storage server that provides data paths for accessing information stored on the disks of the node . To that end the storage server includes a file system module in cooperating relation with a volume striping module VSM a RAID system module and a disk driver system module . The RAID system manages the storage and retrieval of information to and from the volumes disks in accordance with I O operations while the disk driver system implements a disk access protocol such as e.g. the SCSI protocol. The VSM illustratively implements a striped volume set SVS . In particular the VSM implements a Locate function to compute the location of data container content in the SVS volume to thereby ensure consistency of such content served by the cluster.

The file system implements a virtualization system of the storage operating system through the interaction with one or more virtualization modules illustratively embodied as e.g. a virtual disk vdisk module not shown and a SCSI target module . The vdisk module enables access by administrative interfaces such as a user interface of a management framework see in response to a user system administrator issuing commands to the node . The SCSI target module is generally disposed between the FC and iSCSI drivers and the file system to provide a translation layer of the virtualization system between the block lun space and the file system space where luns are represented as blocks.

The file system is illustratively a message based system that provides logical volume management capabilities for use in access to the information stored on the storage devices such as disks. That is in addition to providing file system semantics the file system provides functions normally associated with a volume manager. These functions include i aggregation of the disks ii aggregation of storage bandwidth of the disks and iii reliability guarantees such as minoring and or parity RAID . The file system illustratively implements the WAFL file system hereinafter generally the write anywhere file system having an on disk format representation that is block based using e.g. 4 kilobyte KB blocks and using index nodes modes to identify files and file attributes such as creation time access permissions size and block location . The file system uses files to store meta data describing the layout of its file system these meta data files include among others an mode file. A file handle i.e. an identifier that includes an mode number is used to retrieve an mode from disk.

Broadly stated all modes of the write anywhere file system are organized into the mode file. A file system fs info block specifies the layout of information in the file system and includes an mode of a file that includes all other modes of the file system. Each logical volume file system has an fsinfo block that is preferably stored at a fixed location within e.g. a RAID group. The mode of the mode file may directly reference point to data blocks of the mode file or may reference indirect blocks of the mode file that in turn reference data blocks of the mode file. Within each data block of the mode file are embedded modes each of which may reference indirect blocks that in turn reference data blocks of a file.

Operationally a request from the client is forwarded as a packet over the computer network and onto the node where it is received at the network adapter . A network driver of layer or layer processes the packet and if appropriate passes it on to a network protocol and file access layer for additional processing prior to forwarding to the write anywhere file system . Here the file system generates operations to load retrieve the requested data from disk if it is not resident in core i.e. in memory . If the information is not in memory the file system indexes into the mode file using the mode number to access an appropriate entry and retrieve a logical vbn. The file system then passes a message structure including the logical vbn to the RAID system the logical vbn is mapped to a disk identifier and disk block number disk dbn and sent to an appropriate driver e.g. SCSI of the disk driver system . The disk driver accesses the dbn from the specified disk and loads the requested data block s in memory for processing by the node. Upon completion of the request the node and operating system returns a reply to the client over the network .

It should be noted that the software path through the storage operating system layers described above needed to perform data storage access for the client request received at the node may alternatively be implemented in hardware. That is in an alternate embodiment of the invention a storage access request data path may be implemented as logic circuitry embodied within a field programmable gate array FPGA or an application specific integrated circuit ASIC . This type of hardware implementation increases the performance of the storage service provided by node in response to a request issued by client . Moreover in another alternate embodiment of the invention the processing elements of adapters may be configured to offload some or all of the packet processing and storage access operations respectively from processor to thereby increase the performance of the storage service provided by the node. It is expressly contemplated that the various processes architectures and procedures described herein can be implemented in hardware firmware or software.

As used herein the term storage operating system generally refers to the computer executable code operable on a computer to perform a storage function that manages data access and may in the case of a node implement data access semantics of a general purpose operating system. The storage operating system can also be implemented as a microkernel an application program operating over a general purpose operating system such as UNIX or Windows XP or as a general purpose operating system with configurable functionality which is configured for storage applications as described herein.

In addition it will be understood to those skilled in the art that the invention described herein may apply to any type of special purpose e.g. file server filer or storage serving appliance or general purpose computer including a standalone computer or portion thereof embodied as or including a storage system. Moreover the teachings of this invention can be adapted to a variety of storage system architectures including but not limited to a network attached storage environment a storage area network and disk assembly directly attached to a client or host computer. The term storage system should therefore be taken broadly to include such arrangements in addition to any subsystems configured to perform a storage function and associated with other equipment or systems. It should be noted that while this description is written in terms of a write any where file system the teachings of the present invention may be utilized with any suitable file system including a write in place file system.

In the illustrative embodiment the storage server is embodied as D module of the storage operating system to service one or more volumes of array . In addition the multi protocol engine is embodied as N module to i perform protocol termination with respect to a client issuing incoming data access request packets over the network as well as ii redirect those data access requests to any storage server of the cluster . Moreover the N module and D module cooperate to provide a highly scalable distributed storage system architecture of the cluster . To that end each module includes a cluster fabric CF interface module adapted to implement intra cluster communication among the modules including D module to D module communication for data container striping operations.

The protocol layers e.g. the NFS CIFS layers and the iSCSI FC layers of the N module function as protocol servers that translate file based and block based data access requests from clients into CF protocol messages used for communication with the D module . That is the N module servers convert the incoming data access requests into file system primitive operations commands that are embedded within CF messages by the CF interface module for transmission to the D modules of the cluster . Notably the CF interface modules cooperate to provide a single file system image across all D modules in the cluster . Thus any network port of an N module that receives a client request can access any data container within the single file system image located on any D module of the cluster.

Illustratively the N module and D module are implemented as separately scheduled processes of storage operating system however in an alternate embodiment the modules may be implemented as pieces of code within a single operating system process. As used herein a process refers to an instance of a program being executed by e.g. processor and a thread is an instance of a sequence of the process s program code. Communication between an N module and D module is thus illustratively effected through the use of message passing between the modules although in the case of remote communication between an N module and D module of different nodes such message passing occurs over the cluster switching fabric . A known message passing mechanism provided by the storage operating system to transfer information between modules processes is the Inter Process Communication IPC mechanism. The protocol used with the IPC mechanism is illustratively a generic file and or block based agnostic CF protocol that comprises a collection of methods functions constituting a CF application programming interface API . Examples of such an agnostic protocol are the SpinFS and SpinNP protocols available from Network Appliance Inc. The SpinFS protocol is described in the above referenced U.S. Pat. No. 6 671 773.

The CF interface module implements the CF protocol for communicating file system commands among the modules of cluster . Communication is illustratively effected by the D module exposing the CF API to which an N module or another D module issues calls. To that end the CF interface module is organized as a CF encoder and CF decoder. The CF encoder of e.g. CF interface on N module encapsulates a CF message as i a local procedure call LPC when communicating a file system command to a D module residing on the same node or ii a remote procedure call RPC when communicating the command to a D module residing on a remote node of the cluster . In either case the CF decoder of CF interface on D module de encapsulates the CF message and processes the file system command.

A data container e.g. a file is accessed in the file system using a data container handle. is a schematic block diagram illustrating the format of a data container handle including a SVS ID field an mode number field a unique ifier field a striped flag field and a striping epoch number field . The SVS ID field contains a global identifier within the cluster of the SVS within which the data container resides. The mode number field contains an mode number of an mode within an mode file pertaining to the data container. The unique ifier field contains a monotonically increasing number that uniquely identifies the data container handle . The unique ifier is particularly useful in the case where an mode number has been deleted reused and reassigned to a new data container. The unique ifier distinguishes that reused mode number in a particular data container from a potentially previous use of those fields. The striped flag field is illustratively a Boolean value that identifies whether the data container is striped or not. The striping epoch number field indicates the appropriate striping technique for use with this data container for embodiments where the SVS utilizes differing striping techniques for different data containers.

In the illustrative embodiment a data container is represented in the write anywhere file system as an mode data structure adapted for storage on the disks . is a schematic block diagram of an mode which preferably includes a meta data section and a data section . The information stored in the meta data section of each mode describes the data container e.g. a file and as such includes the type e.g. regular directory vdisk of file its size time stamps e.g. access and or modification time and ownership i.e. user identifier UID and group ID GID of the file. The meta data section also includes a generation number and a meta data invalidation flag field . As described further herein meta data invalidation flag field is used to indicate whether meta data in the mode is usable or whether it should be re acquired from the MDV. The contents of the data section of each mode may be interpreted differently depending upon the type of file mode defined within the type field . For example the data section of a directory mode contains meta data controlled by the file system whereas the data section of a regular mode contains file system data. In this latter case the data section includes a representation of the data associated with the file.

Specifically the data section of a regular on disk mode may include file system data or pointers the latter referencing 4 KB data blocks on disk used to store the file system data. Each pointer is preferably a logical vbn to facilitate efficiency among the file system and the RAID system when accessing the data on disks. Given the restricted size e.g. 128 bytes of the mode file system data having a size that is less than or equal to 64 bytes is represented in its entirety within the data section of that mode. However if the length of the contents of the data container exceeds 64 bytes but less than or equal to 64 KB then the data section of the mode e.g. a first level mode comprises up to 16 pointers each of which references a 4 KB block of data on the disk.

Moreover if the size of the data is greater than 64 KB but less than or equal to 64 megabytes MB then each pointer in the data section of the mode e.g. a second level mode references an indirect block e.g. a first level L block that contains pointers each of which references a 4 KB data block on disk. For file system data having a size greater than 64 MB each pointer in the data section of the mode e.g. a third level L mode references a double indirect block e.g. a second level L block that contains pointers each referencing an indirect e.g. a first level L block. The indirect block in turn contains pointers each of which references a 4 KB data block on disk. When accessing a file each block of the file may be loaded from disk into the memory .

When an on disk mode or block is loaded from disk into memory its corresponding in core structure embeds the on disk structure. For example the dotted line surrounding the mode indicates the in core representation of the on disk mode structure. The in core structure is a block of memory that stores the on disk structure plus additional information needed to manage data in the memory but not on disk . The additional information may include e.g. a dirty bit . After data in the mode or block is updated modified as instructed by e.g. a write operation the modified data is marked dirty using the dirty bit so that the mode block can be subsequently flushed stored to disk. The in core and on disk format structures of the WAFL file system including the modes and mode file are disclosed and described in the previously incorporated U.S. Pat. No. 5 819 292 titled METHOD FOR MAINTAINING CONSISTENT STATES OF A FILE SYSTEM AND FOR CREATING USER ACCESSIBLE READ ONLY COPIES OF A FILE SYSTEM by David Hitz et al. issued on Oct. 6 1998.

A file system layout is provided that apportions an underlying physical volume into one or more virtual volumes or flexible volume of a storage system such as node . An example of such a file system layout is described in U.S. Pat. No. 7 409 494 titled EXTENSION OF WRITE ANYWHERE FILE SYSTEM LAYOUT by John K. Edwards et al. and assigned to Network Appliance Inc. The underlying physical volume is an aggregate comprising one or more groups of disks such as RAID groups of the node. The aggregate has its own physical volume block number pvbn space and maintains meta data such as block allocation structures within that pvbn space. Each flexible volume has its own virtual volume block number vvbn space and maintains meta data such as block allocation structures within that vvbn space. Each flexible volume is a file system that is associated with a container file the container file is a file in the aggregate that contains all blocks used by the flexible volume. Moreover each flexible volume comprises data blocks and indirect blocks that contain block pointers that point at either other indirect blocks or data blocks.

In one embodiment pvbns are used as block pointers within buffer trees of files such as file stored in a flexible volume. This hybrid flexible volume embodiment involves the insertion of only the pvbn in the parent indirect block e.g. mode or indirect block . On a read path of a logical volume a logical volume vol info block has one or more pointers that reference one or more fsinfo blocks each of which in turn points to an mode file and its corresponding mode buffer tree. The read path on a flexible volume is generally the same following pvbns instead of vvbns to find appropriate locations of blocks in this context the read path and corresponding read performance of a flexible volume is substantially similar to that of a physical volume. Translation from pvbn to disk dbn occurs at the file system RAID system boundary of the storage operating system .

In an illustrative dual vbn hybrid flexible volume embodiment both a pvbn and its corresponding vvbn are inserted in the parent indirect blocks in the buffer tree of a file. That is the pvbn and vvbn are stored as a pair for each block pointer in most buffer tree structures that have pointers to other blocks e.g. level L indirect blocks Mode file level L blocks. is a schematic block diagram of an illustrative embodiment of a buffer tree of a file that may be advantageously used with the present invention. A root top level Mode such as an embedded Mode references indirect e.g. level blocks . Note that there may be additional levels of indirect blocks e.g. level level depending upon the size of the file. The indirect blocks and Mode contain pvbn vvbn pointer pair structures that ultimately reference data blocks used to store the actual data of the file.

The pvbns reference locations on disks of the aggregate whereas the vvbns reference locations within files of the flexible volume. The use of pvbns as block pointers in the indirect blocks provides efficiencies in the read paths while the use of vvbn block pointers provides efficient access to required meta data. That is when freeing a block of a file the parent indirect block in the file contains readily available vvbn block pointers which avoids the latency associated with accessing an owner map to perform pvbn to vvbn translations yet on the read path the pvbn is available.

Whereas the aggregate is analogous to a physical volume of a conventional storage system a flexible volume is analogous to a file within that physical volume. That is the aggregate may include one or more files wherein each file contains a flexible volume and wherein the sum of the storage space consumed by the flexible volumes is physically smaller than or equal to the size of the overall physical volume. The aggregate utilizes a physical pvbn space that defines a storage space of blocks provided by the disks of the physical volume while each embedded flexible volume within a file utilizes a logical vvbn space to organize those blocks e.g. as files. Each vvbn space is an independent set of numbers that corresponds to locations within the file which locations are then translated to dbns on disks. Since the flexible volume is also a logical volume it has its own block allocation structures e.g. active space and summary maps in its vvbn space.

A container file is a file in the aggregate that contains all blocks used by a flexible volume. The container file is an internal to the aggregate feature that supports a flexible volume illustratively there is one container file per flexible volume. Similar to a pure logical volume in a file approach the container file is a hidden file not accessible to a user in the aggregate that holds every block in use by the flexible volume. The aggregate includes an illustrative hidden meta data root directory that contains subdirectories of flexible volumes 

Specifically a physical file system WAFL directory includes a subdirectory for each flexible volume in the aggregate with the name of subdirectory being a file system identifier fsid of the flexible volume. Each fsid subdirectory flexible volume contains at least two files a filesystem file and a storage label file. The storage label file is illustratively a 4 KB file that contains meta data similar to that stored in a conventional raid label. In other words the storage label file is the analog of a raid label and as such contains information about the state of the flexible volume such as e.g. the name of the flexible volume a universal unique identifier uuid and fsid of the flexible volume whether it is online being created or being destroyed etc.

In addition to being embodied as a container file having level blocks organized as a container map the filesystem file includes block pointers that reference various file systems embodied as flexible volumes . The aggregate maintains these flexible volumes at special reserved mode numbers. Each flexible volume also has special reserved mode numbers within its flexible volume space that are used for among other things the block allocation bitmap structures. As noted the block allocation bitmap structures e.g. active map summary map and space map are located in each flexible volume.

Specifically each flexible volume has the same mode file structure content as the aggregate with the exception that there is no owner map and no WAFL fsid filesystem file storage label file directory structure in a hidden meta data root directory . To that end each flexible volume has a volinfo block that points to one or more fsinfo blocks each of which may represent a snapshot along with the active file system of the flexible volume. Each fsinfo block in turn points to an inode file that as noted has the same mode structure content as the aggregate with the exceptions noted above. Each flexible volume has its own mode file and distinct mode space with corresponding mode numbers as well as its own root fsid directory and subdirectories of files that can be exported separately from other flexible volumes.

The storage label file contained within the hidden meta data root directory of the aggregate is a small file that functions as an analog to a conventional raid label. A raid label includes physical information about the storage system such as the volume name that information is loaded into the storage label file . Illustratively the storage label file includes the name of the associated flexible volume the online offline status of the flexible volume and other identity and state information of the associated flexible volume whether it is in the process of being created is or destroyed .

The present invention overcomes the disadvantages of the prior art by providing a system and method for management of jobs in a storage system cluster environment. According to the invention a job manager JM executes on each storage system within the clustered environment to provide a framework for scheduling and or executing jobs within the cluster. The JM ensures that jobs execute through to completion and in the event of a failure of a storage system re initiates the jobs on either that storage system once it has recovered or another storage system within the storage cluster. To that end the JM interfaces with a replicated data base RDB containing one or more queues for tracking the various jobs and their affinities to particular storage systems i.e. whether they must execute on that storage systems.

In response to a user issuing a command to perform an administrative operation a configuration object is created and passed to the JM. The configuration object illustratively contains parameters and or options specified by the user when issuing the command. The JM uses this object to create a job object. The job object illustratively contains data situations and or executable instructions needed to perform a job. The JM then loads the created job object onto a queue of the RDB. Each JM within the storage system cluster monitors the queue for newly loaded jobs. Should a job contain an affinity for a particular storage system i.e. the job must execute on that storage system the JM of that particular storage system retrieves the job from the queue of the RDB and processes the job. If the job contains no particular storage system affinity than any JM within the cluster that has available processing bandwidth may retrieve and process the job.

To ensure that jobs execute to completion one of the JMs within the cluster is designated a master job manager and monitors the status of the storage systems in the cluster. The master job manager may be selected using any arbitrary technique including e.g. using the storage system with the lowest serial number or network address the least utilized storage system round robin etc. Upon detecting a failure of a storage system the master job manager waits for a predefined timeout period to elapse. If the timeout period elapses without the failed storage system recovering the master job manager marks the job as unclaimed so that one of the other JMs within the cluster may claim the job in accordance with its normal job acquisition routine and process the job to completion. Only those jobs having a cluster affinity may be recovered by a second JM within the cluster.

The VLDB is a database process that tracks the locations of various storage components e.g. flexible volumes aggregates etc. within the cluster to thereby facilitate routing of requests throughout the cluster. In the illustrative embodiment the N module of each node accesses a configuration table that maps the SVS ID of a data container handle to a D module that owns services the data container within the cluster. The VLDB includes a plurality of entries which in turn provide the contents of entries in the configuration table among other things these VLDB entries keep track of the locations of the flexible volumes hereinafter generally volumes and aggregates within the cluster.

The management framework includes a job manager JM which is illustratively a multi threaded process that provides an infrastructure and mechanism for scheduling the execution of administrative tasks embodied as jobs. The JM includes a plurality of threads each of which in the illustrative embodiment is associated with a priority level e.g. high medium and or low priority. Illustratively jobs having a particular priority may execute using any thread having that priority or a lower priority. Thus for example a low priority job may only executed on a low priority thread whereas a high priority job may execute on a thread having a low medium and or high priority.

In accordance with the illustrative embodiment a UI process of the administrator computer creates a configuration object in response to an administration operation command executed by a user. The configuration object is utilized to create a job object associated with a particular job. The created job object is then queued in a Job Object J.O. queue that persistently stores the job objects in a cluster wide arrangement on the RDB . Likewise each J.O. queue is configured to store one or more job objects loaded by one or more JMs. By persistently storing job objects and queues each JM within a cluster may identify jobs that are to be executed regardless of which JM initially loaded the job object .

The management processes have interfaces to are closely coupled to RDB . The RDB comprises a library that provides a persistent object store storing of objects for the management data processed by the management processes. Notably the RDB replicates and synchronizes the management data object store access across all nodes of the cluster to thereby ensure that the RDB database image is identical on all of the nodes . When a job object is loaded onto a queue the RDB alerts each JM so that an appropriate JM may take appropriate action.

The Run function provides an initial entry point for the initialization and execution of the job. The JM calls the Run function when first initializing the job associated with the job object . Thus the Run function initiates the processing of the job by examining the information contained within the configuration class to determine the parameters of the job to be performed. Upon completion of the job the Run function returns a value described further below identifying the completion state of the job. The Restart function is invoked by the JM to restart processing of a job after a failure e.g. a JM crash. The Resume function is utilized to continue processing a paused job. The CheckComplete function provides an entry point for the JM to check the completion status of the job. Illustratively the CheckComplete function returns a set of state information which may illustratively be stored within the job record data structure . The OnComplete function is invoked to continue processing after waiting for another job to complete. Similarly the Pause and Quit functions enable the JM to pause and or stop the execution of the job.

The configuration class field stores necessary configuration information for the particular job. Specifically the configuration class is unique for each particular type of job to be executed and enables the JM to create the appropriate job object . As described further below when a command is executed to initialize a job the configuration class is created and queued for the JM to configure an appropriate job object . The job record data structure contains a set of state information relating to the job. The execution class field contains job specific execution data structures for the job.

The name field contains an alphanumeric name of the job associated with a particular job object . The identifier field contains a numeric identifier associated with the particular job. The affinity field identifies whether the job contains an affinity for a particular storage system and or if the job may be executed on any storage system within the cluster i.e. a cluster wide affinity. In the illustrative embodiment a job may contain an affinity for an identified storage system i.e. the job must execute on that storage system because of e.g. specific hardware that is only available on the identified storage system. The priority field identifies the priority level for the job. Illustratively each job may be associated with a high medium and or low priority. The priority level determines which threads of a JM may be utilized in processing the job. In accordance with the illustrative embodiment jobs may only be processed by a thread within a JM having a priority level the same as or lower than the priority level associated with the job. For example a job having a medium priority may be executed by a medium and or low level priority thread but may not be executed by a high priority thread. However it should be noted that in alternate embodiments differing thread prioritization schemes may be utilized without departing from the spirit or scope of the present invention.

The jobs waiting on field identifies any jobs that the current job is waiting on for completion before execution. For example a job may be required to wait for the completion of a previously invoked job before performing some task. In such a case the identifier of those job s that the current job is waiting for is stored within the jobs waiting on field . The JM may examine this field to set appropriate alerts to invoke the OnComplete function once the jobs have completed. The schedule field identifies a date time that execution of the job should begin execution. The queue time field identifies the time at which the job was initially queued into the RDB. The start time field identifies the time at which execution of the job was initiated. The reschedule interval field contains a value identifying the frequency at which the job should be rescheduled. The reschedule interval is utilized when a job desires to be rescheduled outside of the normal schedule . For example if a job is to be run daily but experiences a problem the job s reschedule interval may indicate that the job should be rescheduled in e.g. 5 minutes and not wait until the next day s regularly scheduled time. The drop dead time field identifies a drop dead time for execution of the job. That is the job must be executed by the time identified within the drop dead time field .

The re queued flag field illustratively contains a Boolean value that identifies whether the particular job object has been re queued. Re queuing may occur when for example the job is initiated by a particular JM but is halted for some reason such as the failure of the JM initiating the job. In such a case the master job manager described further below may re queue the job for execution by another storage system. In such cases the new JM invokes the job using the Restart function instead of the Run function . The job type field identifies the type of job associated with the job object .

In response to the execution of the command the UI process creates a configuration object in step . The configuration object illustratively includes parameters and or options specified by the user when issuing the command. The JM receives the queued configuration object and creates a job object utilizing the configuration object in step . Illustratively the JM creates the job object using the configuration object by identifying the appropriate type of job object to be utilized and inserting the configuration object as a configuration class into the job object .

Once a job object has been created the JM then loads the object onto the J.O. queue on the RDB in step . By queuing the job object the JM causes the RDB to alert all JMs within the cluster that a newly queued job object is available i.e. that an update has occurred to the replicated database. In response each JM examines the newly queued job object to determine if it has an affinity for the specific storage system executing the JM or whether the job object has a cluster wide affinity. If the job object has a cluster wide affinity then any JM with available processing bandwidth e.g. available threads of an appropriate priority level may execute the job object . The appropriate JM then retrieves the job object from the Queue of the RDB and processes the job in step . By retrieving the job from the RDB the JM alerts the other JMs within the cluster that it has claimed this job and will process the job to completion. The procedure then completes in step .

When the Run and or Restart function completes a completion value is returned to the JM. Illustratively these values may have values of JOB COMPLETE JOB WAITING or JOB PAUSED. The JM examines the returned completion value and takes appropriate action by transitioning the job to a state determined by the returned completion value. For example if the returned completion value is JOB COMPLETE then the job has run to completion and the JM transitions the job to complete state . A JOB WAITING value denotes that the job wishes to enter into waiting state . Prior to entering the waiting state the job JM registers those jobs that it is interested in waiting for in the jobs waiting on field of state data structure . If the return value is JOB PAUSED signifying that the job responded to an external request to pause then the job transitions to a pausing state before entering the paused state . An external action by the JM to quit the job may cause the job to transition from the paused state to complete state from which the job transitions to cleanup state where the job frees any temporarily created data structures memory and or files. At this point the job has been completed and has appropriately cleaned up any temporary data structures. The JM includes appropriate functionality to implement lock mechanisms to prevent jobs from thrashing between states entering cycles or deadlocks etc.

However if a failure is detected then the master job manager waits for a predefined timeout period to elapse before taking any action. In step if the failed storage system recovers within the timeout period then the procedure loops back to step . Otherwise an error has occurred and the storage system has not recovered within an acceptable period of time. Consequently the master job manager marks the jobs currently associated with the failed storage system has unclaimed in step . Illustratively the master job manager sets the re queued field within the state class of the job object. As a result when the job object is reclaimed the JM will call the Restart function instead of the Run function. In response other storage systems claim the jobs for processing in step . The procedure then completes in step .

To again summarize the present invention enables JMs to utilize a RDB or other distributed data store to enable the management of processes distributed among a plurality of nodes of a cluster and to ensure that jobs execute to completion.

The foregoing description has been directed to particular embodiments of this invention. It will be apparent however that other variations and modifications may be made to the described embodiments with the attainment of some or all of their advantages. Specifically it should be noted that the principles of the present invention may be implemented in non distributed file systems. Furthermore while this description has been written in terms of N and D modules the teachings of the present invention are equally suitable to systems where the functionality of the N and D modules are implemented in a single system. Alternately the functions of the N and D modules may be distributed among any number of separate systems wherein each system performs one or more of the functions. Additionally the procedures processes and or modules described herein may be implemented in hardware software embodied as a computer readable medium having program instructions firmware or a combination thereof. Therefore it is the object of the appended claims to cover all such variations and modifications as come within the true spirit and scope of the invention.

