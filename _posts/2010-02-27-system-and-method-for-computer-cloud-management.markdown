---

title: System and method for computer cloud management
abstract: A method for auto-scaling the infrastructure capacity of an application in response to client demands includes providing an application configured to run on an application infrastructure comprising a plurality of server nodes and to be accessed by clients via a first network. Next, providing traffic management means directing traffic from the clients to the server nodes of the application infrastructure. Providing monitoring means gathering performance metrics of the application and metrics of the application infrastructure. Providing controlling means configured to change the application infrastructure. Next, monitoring the performance metrics of the application and the metrics of the application infrastructure via the monitoring means thereby obtaining metrics information and then changing the application infrastructure based on the metrics information via the controlling means. Finally directing network traffic targeted to access the application to server nodes of the changed application infrastructure via the traffic management means.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08209415&OS=08209415&RS=08209415
owner: Yottaa Inc
number: 08209415
owner_city: Boston
owner_country: US
publication_date: 20100227
---
This application claims the benefit of U.S. provisional application Ser. No. 61 156 069 filed on Feb. 27 2009 and entitled METHOD AND SYSTEM FOR COMPUTER CLOUD MANAGEMENT which is commonly assigned and the contents of which are expressly incorporated herein by reference.

This application claims the benefit of U.S. provisional application Ser. No. 61 165 250 filed on Mar. 31 2009 and entitled CLOUD ROUTING NETWORK FOR BETTER INTERNET PERFORMANCE RELIABILITY AND SECURITY which is commonly assigned and the contents of which are expressly incorporated herein by reference.

The present invention relates to a system and a method for computer cloud management and in particular to utilizing a computer cloud network for accelerating and auto scaling an application in response to load demand changes.

The advancement of computer networking has enabled computer programs to evolve from the early days monolithic form that is used by one user at a time into distributed applications. A distributed application running on two or more networked computers is able to support multiple users at the same time. shows the basic structure of a distributed application in a client server architecture. The clients send requests via the network to the server and the server sends responses back to the clients via the network . The same server is able to serve multiple concurrent clients.

Today most applications are distributed. shows the architecture of a typical web application. The client part of a web application runs inside a web browser that interacts with the user. The server part of a web application runs on one or multiple computers such as Web Server Application Server and Database Server . The server components typically reside in an infrastructure referred to as host infrastructure or application infrastructure .

In order for a web application to be able to serve a large number of clients its host infrastructure must meet performance scalability and availability requirements. Performance refers to the application s responsiveness to user interactions. Scalability refers to an application s capability to perform under increased load demand. Availability refers to an application s capability to deliver continuous uninterrupted service. With the exponential growth of the number of Internet users access demand can easily overwhelm the capacity of a single server computer.

An effective way to address performance scalability and availability concerns is to host a web application on multiple servers server clustering and load balance client requests among these servers or sites . Load balancing spreads the load among multiple servers. If one server failed the load balancing mechanism would direct traffic away from the failed server so that the site is still operational. is an illustration of using multiple web servers multiple application servers and multiple database servers to increase the capacity of the web application. Clustering is frequently used today for improving application scalability.

Another way for addressing performance scalability and availability concerns is to replicate the entire application to two different data centers site mirroring . Site mirroring is a more advanced approach than server clustering because it replicates an entire application including documents code data web server software application server software database server software to another geographic location thereby creating two geographically separated sites mirroring each other. A hardware device called Global Load Balancing Device performs load balancing among the multiple sites.

For both server clustering and site mirroring a variety of load balancing mechanisms have been developed. They all work fine in their specific context.

However both server clustering and site mirroring have significant limitations. Both approaches provision a fixed amount of infrastructure capacity while the load on a web application is not fixed. In reality there is no right amount of infrastructure capacity to provision for a web application because the load on the application can swing from zero to millions of hits within a short period of time when there is a traffic spike. When under provisioned the application may perform poorly or even become unavailable. When over provisioned the over provisioned capacity is wasted. To be conservative a lot of web operators end up purchasing significantly more capacity than needed. It is common to see server utilization below 20 in a lot of data centers today resulting in substantial capacity waste. Yet the application still goes under when traffic spikes happen. This is called as a capacity dilemma that happens every day. Furthermore these traditional techniques are time consuming and expensive to set up and are equally time consuming and expensive to make changes. Events like natural disaster can cause an entire site to fail. Comparing to server clustering site mirroring provides availability even if one site completely failed. However it is more complex to set up and requires data synchronization between the two sites. Lastly the set of global load balancing devices is a single point of failure.

A third approach for improving web performance is to use a Content Delivery Network CDN service. Companies like Akamai and Limelight Networks operate a global content delivery infrastructure comprising of tens of thousands of servers strategically placed across the globe. These servers cache web content static documents produced by their customers content providers . When a user requests such content a routing mechanism typically based on Domain Name Server DNS techniques would find an appropriate caching server to serve the request. By using content delivery service users receive better content performance because content is delivered from an edge server that is closer to the user.

Though content delivery networks can enhance performance and scalability they are limited to static content. Web applications are dynamic. Responses dynamically generated from web applications can not be cached. Web application scalability is still limited by its hosting infrastructure capacity. Further CDN services do not enhance availability for web applications in general. If the hosting infrastructure goes down the application will not be available. So though CDN services help improve performance and scalability in serving static content they do not change the fact that the site s scalability and availability are limited by the site s infrastructure capacity.

Over the recent years cloud computing has emerged as an efficient and more flexible way to do computing shown in . According to Wikipedia cloud computing refers to the use of Internet based i.e. Cloud computer technology for a variety of services. It is a style of computing in which dynamically scalable and often virtualized resources are provided as a service over the Internet. Users need not have knowledge of expertise in or control over the technology infrastructure in the cloud that supports them . The word cloud is a metaphor based on how it is depicted in computer network diagrams and is an abstraction for the complex infrastructure it conceals. In this document we use the term Cloud Computing to refer to the utilization of a network based computing infrastructure that includes many inter connected computing nodes to provide a certain type of service of which each node may employ technologies like virtualization and web services. The internal works of the cloud itself are concealed from the user point of view.

One of the enablers for cloud computing is virtualization. Wikipedia explains that virtualization is a broad term that refers to the abstraction of computer resource . It includes Platform virtualization which separates an operating system from the underlying platform resources Resource virtualization the virtualization of specific system resources such as storage volumes name spaces and network resource and so on. VMWare is a highly successful company that provides virtualization software to virtualize computer operating systems from the underlying hardware resources. Due to virtualization one can use software to start stop and manage virtual machine VM nodes in a computing environment shown in . Each virtual machine behaves just like a regular computer from an external point of view. One can install software onto it delete files from it and run programs on it though the virtual machine itself is just a software program running on a real computer.

Another enabler for cloud computing is the availability of commodity hardware as well as the computing power of commodity hardware. For a few hundred dollars one can acquire a computer that is more powerful than a machine that would have cost ten times more twenty years ago. Though an individual commodity machine itself may not be reliable putting many of them together can produce an extremely reliable and powerful system. Amazon.com s Elastic Computing Cloud EC2 is an example of a cloud computing environment that employs thousands of commodity machines with virtualization software to form an extremely powerful computing infrastructure.

By utilizing commodity hardware and virtualization cloud computing can increase data center efficiency enhance operational flexibility and reduce costs. Running a web application in a cloud environment has the potential to efficiently meet performance scalability and availability objectives. For example when there is a traffic increase that exceeded the current capacity one can launch new server nodes to handle the increased traffic. If the current capacity exceeds the traffic demand by a certain threshold one can shut down some of the server nodes to lower resource consumption. If some existing server nodes failed one can launch new nodes and redirect traffic to the new nodes.

However running web applications in a cloud computing environment like Amazon EC2 creates new requirements for traffic management and load balancing because of the frequent node stopping and starting. In the cases of server clustering and site mirroring stopping a server or server failure are exceptions. The corresponding load balancing mechanisms are also designed to handle such occurrences as exceptions. In a cloud computing environment server reboot and server shutdown are assumed to be common occurrences rather than exceptions. On one side the assumption that individual nodes are not reliable is at the center of design for a cloud system due to its utilization of commodity hardware. On the other side there are business reasons to start or stop nodes in order to increase resource utilization and reduce costs. Naturally the traffic management and load balancing system required for a cloud computing environment must be responsive to node status changes.

Thus it would be advantageous to provide a cloud management system that can automatically scale up and scale down infrastructure capacity in response to an application s load demand intelligently direct traffic to a plurality of server nodes in response to node status changes and load condition changes while enhancing an application s performance scalability and availability.

The invention provides a cloud management system that provides dynamic content acceleration traffic management and auto scaling for applications. The system directs clients to appropriate server nodes among a plurality of geographically distributed nodes so that performance is optimal according to a certain metrics. The system also monitors the load condition and performance of the application and dynamically adjusts the application s infrastructure capacity to match the demand according to a certain policy. For example when it detects a traffic increase that may overwhelm the current capacity the system automatically launches new server instances and spreads load to these new instances. Further the system manages traffic and performs load balancing among a plurality of server nodes that the application is running on.

In general in one aspect the invention features a method for auto scaling the infrastructure capacity of an application in response to client demands. The method includes providing an application configured to run on an application infrastructure comprising a plurality of server nodes and to be accessed by clients via a first network. Next providing traffic management means directing traffic from the clients to the server nodes of the application infrastructure. Providing monitoring means gathering performance metrics of the application and metrics of the application infrastructure. Providing controlling means configured to change the application infrastructure. Next monitoring the performance metrics of the application and the metrics of the application infrastructure via the monitoring means thereby obtaining metrics information and then changing the application infrastructure based on the metrics information via the controlling means. Finally directing network traffic targeted to access the application to server nodes of the changed application infrastructure via the traffic management means.

Implementations of this aspect of the invention may include one or more of the following. The application infrastructure comprises a cloud computing environment. The application infrastructure comprises virtual machines. The application infrastructure comprises virtual machines and physical server machines. The application infrastructure comprises server nodes running in different geographic locations. The controlling means comprise means for starting means for stopping and means for managing virtual machine instances. The metrics information comprises geographic proximity of the clients to the server nodes of the application infrastructure. The metrics information comprises application load demand. The metrics information comprises application performance data. The traffic management means comprises means for resolving a domain name of the application via a Domain Name Server DNS . The traffic management means performs traffic management by providing Internet Protocol IP addresses of the server nodes in the application infrastructure to the clients. The traffic management means performs load balancing among the server nodes in the application infrastructure. The traffic management means selects one or more optimal server nodes among the server nodes in the application infrastructure for serving client requests. The traffic management means selects one or more server nodes among the server nodes in the application infrastructure based on geographic proximity of the server nodes to the clients. The traffic management means selects one or more server nodes among the server nodes in the application infrastructure based on optimized network performance to certain clients. The traffic management means selects a persistent server node among the server nodes in the application infrastructure for serving requests from the same client. The controlling means change the application infrastructure capacity in response to the metrics information. The controlling means change the application infrastructure capacity in response to a certain policy. The controlling means change the application infrastructure capacity in response to instructions received from a third party. The controlling means change the application infrastructure capacity by launching new server nodes in the application infrastructure. The controlling means change the application infrastructure capacity by shutting down sever nodes in the application infrastructure.

In general in another aspect the invention features a system for auto scaling the infrastructure capacity of an application in response to client demands. The system includes an application configured to run on an application infrastructure comprising a plurality of server nodes and to be accessed by clients via a first network. The system also includes traffic management means directing traffic from the clients to the server nodes of the application infrastructure monitoring means gathering performance metrics of the application and metrics of the application infrastructure and controlling means configured to change the application infrastructure. The monitoring means monitor the performance metrics of the application and the metrics of the application infrastructure and thereby obtain metrics information. The controlling means change the application infrastructure based on the metrics information and the traffic management means direct network traffic targeted to access the application to server nodes of the changed application infrastructure.

Among the advantages of the invention may be one or more of the following. The system is horizontally scalable. Its capacity increases linearly by just adding more computing nodes to the system. It is also fault tolerant. Failure of individual components within the system does not cause system failure. In fact the system assumes component failures as common occurrences and is able to run on commodity hardware to deliver high performance and high availability services.

Applications of the present invention include but are not limited to the followings. Accelerating and load balancing requests among node instances running at multiple sites data centers as shown in . Scaling and load balancing a web application in a cloud environment as shown in . Scaling and load balancing an email application in a cloud environment as shown in . The traffic processing units provide performance acceleration load balancing and failover. The management means manage server nodes in response to load demand and performance changes such as starting new nodes shutting down existing nodes and recover from failed nodes among others. The monitoring means monitor server nodes and collect performance metrics data 

The traffic processing unit uses a Domain Name System DNS to provide Internet Protocol IP addresses for the optimal server node in a DNS hostname query. Such a technique can be used in any situation where the client requires access to a replicated network resource. It directs the client request to an appropriate replica so that the route to the replica is good from a performance standpoint. Further the traffic processing unit also takes session stickiness into consideration that requests from the same client session is routed to the same server node persistently when session stickiness is required. Session stickiness also known as IP address persistence or server affinity in the art means that different requests from the same client session will always to be routed to the same server in a multi server environment. Session stickiness is required for a variety of web applications to function correctly.

The details of one or more embodiments of the invention are set forth in the accompanying drawings and description below. Other features objects and advantages of the invention will be apparent from the following description of the preferred embodiments the drawings and from the claims.

Referring to an improved cloud computing environment includes client machines accessing web applications running on virtual machine nodes in the cloud computing environment via the Internet . The improved cloud computing environment also includes a cloud management system that intercepts the network traffic from the clients to the cloud computing environment in order to provide traffic management node management node monitoring and load balancing among others. The cloud management system includes a traffic management module a node management module a node monitoring module and a data repository .

Traffic management module manages and load balances requests from clients to different server nodes that the application is running on. These server nodes are typically virtual machine nodes in a cloud computing environment but they can also be physical servers. Further the traffic management module routes a client request to a server node that is optimal from a performance point of view according to certain metrics. In one example the metrics is the geographic proximity between the client and the server node. For a global user base selecting the closest server node to serve client requests can produce significant application performance acceleration. Unlike content delivery networks that provide acceleration for static content traffic management module delivers acceleration for both static as well as dynamic content.

The traffic management module uses a Domain Name System DNS to provide Internet Protocol IP addresses for the optimal server node in a DNS hostname query. Such a technique can be used in any situation where the client requires access to a replicated network resource. It directs the client request to an appropriate replica so that the route to the replica is good from a performance standpoint. Further the traffic management module also takes session stickiness into consideration so that requests from the same client session are routed to the same server node persistently when session stickiness is required. Session stickiness also known as IP address persistence or server affinity in the art means that different requests from the same client session are always routed to the same server in a multi server environment. Session stickiness is required for a variety of web applications to function correctly.

Node management module provides services for managing the sever nodes such as starting a virtual machine VM instance stopping a VM instance and recovering from a node failure among others. In accordance to the node management policies in the system this service launches new server nodes when the application is over loaded and it shuts down some server nodes when it detects these nodes are not necessary any more.

The node monitoring module monitors the sever nodes over the network collects performance and availability data and provides feedback to the cloud management system . This feedback is then used to make decisions such as when to scale up and when to scale down.

Data repository contains data for the cloud management system such as Virtual Machine Image VMI application artifacts files scripts and configuration data routing policy data and node management policy data among others.

Referring to besides traffic management node management node monitoring and data repository the cloud management system includes a management interface that provides a user interface Mgmt UI and a programmatic interface Mgmt API for external parties to interact with the system. Using the management interface one can configure the system and customize services for individual applications. Cloud management system also includes a traffic redirection module for redirecting internet traffic from the clients to the cloud computing environment to pass through the cloud management system as shown in .

The cloud management system of may be used to manage traffic among servers running in different regions in a cloud computing environment as shown in . The invention may also be used in providing traffic management performance acceleration load balancing and failover services for a variety of applications running in a cloud environment such as web applications shown in and email applications shown in among others.

In another example the present invention is used to provide an on demand service delivered over the Internet to web site operators to help them improve their web application performance scalability and availability as shown in . Service provider H manages and operates a global infrastructure H providing web performance related services including monitoring acceleration load balancing traffic management auto scaling and failover. The global infrastructure also has a management and configuration user interface UI H as shown in for customers to purchase configure and manage services from the service provider. Customers include web operator H who owns and manages web application H. Web application H may be deployed in one data center a few data centers in one location in multiple locations or run on virtual machines in a distributed cloud computing environment. System H provides services including monitoring acceleration traffic management load balancing failover and auto scaling to web application H with the result of better performance better scalability and better availability to web users H. In return for using the service web operator H pays a fee to service provider H.

The entire network is divided into zones i.e. A A. Each zone contains at least one YTM node. Normally there should be more than one YTM nodes in each zone for robustness reasons. When a manager node detects that there are fewer than expected number of YTM instances it launches new YTM instances if configuration policy permits so and certain conditions are met . All these YTM instances together manage the subset of server nodes inside this zone. Besides the zones there are also YTM instances within the network that do not belong to any zone. These instances include top level Yottaa Traffic Management top YTM nodes A.

In this embodiment traffic management is implemented by using a Domain Name Server DNS based approach. Each YTM node contains a DNS module. The top level YTM nodes and lower level YTM nodes together form a hierarchical DNS tree that resolves hostnames to appropriate IP addresses of selected optimal server nodes by taking factors such as node load conditions geographic proximity network performance and session stickiness if required into consideration. As a result client requests are load balanced and accelerated by connecting to optimal server nodes.

As was mentioned above Yottaa divides all these server instances into different zones often according to geographic proximity or network proximity. Each YTM node manages a list of server nodes. For example YTM node A manages servers in Zone A such as Server A. Over the network Yottaa deploys several types of nodes including Yottaa Traffic Management YTM node such as A A and A Yottaa Manager node such as A A and A and Yottaa Monitor node such as A A and A. These three types of logical nodes are not required to be implemented as separate entities in actual implementation. Two of then or all of them can be combined into the same physical entity.

There are two types of YTM nodes top level YTM node such as A and lower level YTM node such as A and A . They are structurally identical but function differently. Whether an YTM node is a top level node or a lower level node is specified by the node s own configuration. Each YTM node contains a DNS module. For example YTM A contains DNS A. Further if a hostname requires sticky session support as specified by web operators a sticky session list such as A and A is created for the hostname of each application. This sticky session list is shared by YTM nodes that manage the same list of server nodes for this application. Top level YTM nodes provide services to lower level YTM nodes by directing DNS requests to them. In a cascading fashion each lower level YTM node may provide similar services to its own set of lower level YTM nodes establishing a DNS tree. Using such a cascading tree structure the system prevents a node from being overwhelmed with too many requests guarantees the performance of each node and is able to scale up to cover the entire Internet by just adding more nodes.

As shown in the invention provides a web based user interface UI for web operators to configure the system. Web operators can also use other means such as making network based Application Programming Interface API calls or modifying configuration files directly by the service provider. In one example using a web based UI a web operator enters the hostname of the target web application for example www.yottaa.com. Next the web operator enters the IP addresses of the static servers that the target web application is running on if there are servers that the web application has already been deployed to directly by the web operator . Next the web operator configures whether the system is allowed to launch new server instances in response to traffic demand spikes and the associated node management policy. Also the web operator configures whether the system is allowed to shut down server nodes if capacity exceeds demand by a certain threshold. Next the web operator adds the supplied top level traffic management node names to the DNS record of the hostname of the target application and then configures other parameters such as whether the hostname requires sticky session support session expiration value and routing policy among others. Once the system receives the above information it performs the necessary actions to set up its service. For example in the Yottaa embodiment upon receiving the hostname and static IP addresses of the target server nodes the system propagates such information to selected lower level YTM nodes using the current routing policy so that at least some lower level YTM nodes can resolve the hostname to IP address s when a DNS lookup request is received.

If sticky session support is required the YTM node first looks for an entry in the sticky session list using the hostname in this case www.example.com and the IP address of the client DNS server as the key. If such an entry is found the expiration time of this entry in the sticky session list is updated to be the current time plus the pre configured session expiration value When a web operator performs initial configuration of Yottaa service he enters a session expiration timeout value into the system such as one hour . On the other side if no entry is found the YTM node picks an optimal server node according to the current routing policy creates an entry with the proper key and expiration information and inserts this entry into the sticky session list. Finally the server node s IP address is returned to the client DNS server. If the same client DNS server queries www.example.com again before the entry expires the same IP address will be returned. If an error is received during the process of querying a lower level YTM node the client DNS server will query the next YTM node in the list. So the failure of an individual lower level YTM node is invisible to the client. Finally the client DNS server returns the received IP address s to the client. The client can now connect to the server node. If there is an error connecting to a returned IP address the client will try to connect to the next IP address in the list until a connection is successfully made.

Top YTM nodes typically set a long time to live TTL value for its returned results. Doing so minimizes the load on top level nodes as well as reduces the number of queries from the client DNS server. On the other side lower YTM nodes typically set a short Time to live value making the system very responsive to node status changes.

The sticky session list is periodically cleaned up by purging the expired entries. An entry expires when there is no client DNS request for the same hostname from the same client DNS server during the entire session expiration duration since the last lookup. Further web operators can configure the system to map multiple or using a wildcard client DNS servers to one entry in the sticky session table. In this case DNS query from any of these client DNS servers receives the same IP address for the same hostname when sticky session support is required.

During a sticky session scenario if the server node of a persistent IP address goes down a Monitor node detects the server failure notifies its associated Manager nodes. The associated Manager nodes notify the corresponding YTM nodes. These YTM nodes then immediately remove the entry from the sticky session list and direct traffic to a different server node. Depending on the returned Time to live value the behavior of client DNS resolvers and client DNS servers and how the application is programmed users who were connected to the failed server node earlier may see errors duration the transition period. However only this portion of users and only during a short period of time is impacted. Upon TTL expiration which is expected to be short given that lower level YTM nodes set short TTL these users will connect to a different server node and resume their operations.

Further for sticky session scenarios the system manages server node shutdown intelligently so as to eliminate service interruption for these users who are connected to this server node. It waits until all user sessions on this server node have expired before finally shutting down the node instance.

Yottaa leverages the inherit scalability designed into the Internet s DNS system. It also provides multiple levels of redundancy in every step except for sticky session scenarios that a DNS lookup requires a persistent IP address . Further the system uses a multi tiered DNS hierarchy so that it naturally spreads loads onto different YTM nodes to efficiently distribute load and be highly scalable while be able to adjust TTL value for different nodes and be responsive to node status changes.

When a top level YTM node receives a startup availability event from a lower level YTM node it performs the following actions. First it adds the lower level YTM node to the routing list so that future DNS requests maybe routed to this lower level YTM node. If the lower level YTM node does not have associated Managers set up already as indicated by the startup availability event message selects a list of Managers according to the top level YTM node s own routing policy and returns this list of Manager nodes to the lower level YTM node.

When a lower level YTM node receives the list of Managers from a top level YTM node it continues its initialization by sending a startup availability event to each Manager in the list. When a Manager node receives a startup availability event from a lower level YTM node it assigns Monitor nodes to monitor the status of the YTM node. Further the Manager returns the list of server nodes that is under management by this Manager to the YTM node. When the lower level YTM node receives a list of server nodes from a Manager node it is added to the managed server node list that this YTM node manages so that future DNS requests maybe routed to servers in the list. After the YTM node completes setting up its managed server node list it enters its main loop for request processing. For example 

Finally if a shutdown request is received the YTM node notifies its associated Manager nodes as well as the top level YTM nodes of its shutdown saves the necessary state into its local storage logs the event and shuts down.

When a Manager receives an event from a monitor node it checks the current node management policy and other statistics to figure out whether it should take node management actions. If the policy permits and if the statistics predict an upcoming traffic spike the Manager starts new server nodes and notifies YTM nodes to spread traffic to the new server nodes. On the other side if the policy permits and the statistics show significantly decreased traffic demand the Manager node notifies YTM nodes stop sending traffic to a certain server nodes and then shuts down these nodes.

In launching new server nodes the system picks the best geographic region to launch the new server node. Globally distributed cloud environments such as Amazon.com s EC2 cover several continents. Launching new nodes at appropriate geographic locations help spread application load globally reduce network traffic and improve application performance. In shutting down server nodes to reduce capacity waste the system checks whether session stickiness is required for the application. If so shutdown is timed until all current sessions on these server nodes have expired.

Several embodiments of the present invention have been described. Nevertheless it will be understood that various modifications may be made without departing from the spirit and scope of the invention. Accordingly other embodiments are within the scope of the following claims.

