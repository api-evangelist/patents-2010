---

title: Selection of one of several available incremental modification detection techniques for use in incremental backups
abstract: Various systems and methods can select an incremental modification detection technique to apply to a data object during generation of an incremental backup. For example, a method can involve accessing information indicating an access characteristic of a data object and then selecting an incremental modification detection technique (from a set of more than one different incremental modification detection techniques), in response to the information. The incremental modification detection technique is selected to be applied to the data object when generating an incremental backup. The set of incremental modification detection techniques can include change tracking and content differencing techniques.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08655841&OS=08655841&RS=08655841
owner: Symantec Corporation
number: 08655841
owner_city: Mountain View
owner_country: US
publication_date: 20101231
---
Organizations and individuals commonly rely on backup technology to generate backups of valuable data. If the valuable data is damaged or destroyed e.g. due to user error malicious interference or hardware failure the lost data can be retrieved from a backup. Unfortunately many backup techniques are inefficient and can have an undesirable effect on the performance of a client s system while backups are being generated. Furthermore many backup techniques may perform poorly when operating on certain types of data. Accordingly improved backup techniques are desirable.

Various systems and methods for selecting an incremental modification detection technique to apply to a data object during generation of an incremental backup are disclosed. For example a method can involve accessing information indicating an access characteristic of a data object and then selecting an incremental modification detection technique from a set of more than one different incremental modification detection techniques in response to the information. The incremental modification detection technique is selected to be applied to the data object when generating an incremental backup. The set of incremental modification detection techniques can include change tracking and content differencing techniques. The method may also involve generating the incremental backup by applying the selected incremental modification detection technique to the data object.

In some embodiments the information indicating the access characteristic identifies a file type or file size of the data object. In other embodiments the information is generating dynamically by monitoring a pattern of accesses to the data object. The information can indicate whether the data object is accessed in a sequential pattern or a random access pattern.

The method can then access second information indicating an access characteristic of a second data object and in response to the second information select a second incremental modification detection technique from the set of different incremental modification detection techniques. Like the incremental modification detection technique selected for the first data object the second incremental modification detection technique is selected to be applied to the second data object when generating the incremental backup. Thus different techniques can be selected for different objects included in the same backup.

An example of a system can include one or more processors and memory coupled to the one or more processors. The memory stores program instructions executable to perform a method like the one described above. Similarly such program instructions can be stored upon a computer readable storage medium.

The foregoing is a summary and thus contains by necessity simplifications generalizations and omissions of detail consequently those skilled in the art will appreciate that the summary is illustrative only and is not intended to be in any way limiting. Other aspects inventive features and advantages of the present invention as defined solely by the claims will become apparent in the non limiting detailed description set forth below.

While the invention is susceptible to various modifications and alternative forms specific embodiments of the invention are provided as examples in the drawings and detailed description. It should be understood that the drawings and detailed description are not intended to limit the invention to the particular form disclosed. Instead the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the invention as defined by the appended claims.

A backup client selects one of several available incremental modification detection techniques to use on a particular data object when performing incremental backups. The incremental modification detection technique can be selected based on static and or dynamic characteristics of the data object. Different techniques can be selected for different data objects included in the same backup job. In many situations such data object level technique selection can increase the efficiency of incremental backup jobs.

Client is a computing device such as a personal computer laptop computer server personal digital assistant cell phone or the like. Storage device can be included within and or coupled to e.g. via a bus network or other appropriate interconnect client .

Backup client implements an application e.g. a word processing program email program graphic editing program database application or the like which accesses e.g. by generating and or consuming application data on storage device . The application data can include one more data objects e.g. files database components and the like . These data objects can be of different types e.g. some files can be present in the same set of data as some database components .

Backup client operates in conjunction with backup server which is another computing device to create one or more backup images also referred to simply as backups of application data and to store the resulting backup image s on a backup storage device . Two types of backup images can be created full backup images and incremental backup images. Full backup images include a point in time copy of all data objects included within the set of data e.g. application data being backed up. In contrast incremental backup images only include point in time copies of the data that has been modified since a prior backup. Preferably the modifications are tracked at a sub data object level in order to reduce the amount of space needed to store the incremental backup. Otherwise if modifications were tracked at the object level a relatively small change to a large data object would require that the entire data object be copied to the incremental backup even though only a small portion of the data object was actually modified.

Storage devices and provide persistent data storage such that data stored on such a storage device will remain stored even after the storage device is powered off. Such a storage device can be for example a hard disk a compact disc CD a digital versatile disc DVD or other mass storage device or a storage system e.g. a redundant array of independent disks RAID system or an optical storage jukebox that includes an array of such storage devices. Such a storage device can also be a virtual or logical storage device that is implemented on such physical storage devices and or storage systems. For example such a storage device can be a logical volume that is implemented on a RAID storage system. Additionally such a storage device can include one or more storage devices. A storage device can also include one or more types of storage media including solid state media e.g. flash drives optical media e.g. CDs and DVDs and magnetic media e.g. hard disks or magnetic tape .

Backup client also implements an incremental modification detection module . Incremental modification detection module is configured to detect one or more characteristics of a data object included in application data and based on the detected characteristic s select an appropriate incremental modification detection technique to apply to that data object when an incremental backup that includes that data object is created. Incremental modification detection module stores information identifying the technique selected for each data object in metadata . When an incremental backup is later being performed the backup system can obtain this metadata from incremental modification detection module and use that metadata to determine what technique to use for each data object covered by the incremental backup.

Incremental modification detection module can be part of a backup client. Alternatively incremental modification detection module can be implemented as part of a volume manager or file system. In one embodiment incremental modification detection module is implemented as a filter driver that provides an interface e.g. an application programming interface to a backup application. The backup application can obtain information identifying the selected incremental modification detection technique to use for each data object included in an incremental backup via this interface. Additionally as is described in more detail below the incremental modification detection module can also provide certain incremental modification detection techniques.

A variety of different techniques can be used to detect incremental modifications to data objects. One example of such a technique is change tracking. Change tracking is performed by detecting each write or other type of access that modifies data to a data object and tracking the portions of the data object modified by each detected write. For example assume a file includes portions A B C and D and that two writes are performed to that file during a particular period of time. The first write modifies portion A and the second write modifies portion B. Change tracking detects these writes and that portions A and B have been modified during that particular period.

Change tracking can be performed at the application level e.g. by monitoring or otherwise interacting with a file system in order to detect changes to portions of data objects as modified directly by applications. In some embodiments incremental modification detection module can perform application level change tracking by monitoring application and or file system access to a set of data objects and recording the results. A backup system can query such a change tracker for a list of the portions of data objects that have been modified during a particular time period e.g. the time period between the creation of a prior backup and the creation of an incremental backup .

Alternatively change tracking can be performed at a device level e.g. at a storage volume level . For example many volume managers provide a bitmap that indicates which blocks within a given volume have been modified during a particular time period. A backup system can access such a data structure to identify which blocks within the data objects have been modified within a given period of time.

Another incremental modification detection technique is content differencing. Content differencing compares two versions each a point in time copy but created at different times of a data object in order to identify the portion s of the data object that have been modified between the times at which the two versions were created. At its most basic content differencing can be performed by directly comparing the data in the two versions. More sophisticated techniques can calculate signatures of each version e.g. by applying one or more hashing algorithms to each version and then comparing those signatures. The outcome of the comparison can identify which portions if any of the two versions differ from each other.

Different incremental modification detection techniques perform better with different types of data objects. For example some data objects have a stream based structure and are typically accessed sequentially. Incremental changes to data objects that tend to be accessed sequentially are more efficiently identified using content differencing than using change tracking. For example word processing applications typically access files in a sequential manner. In other words even if only a small portion of the file is actually being modified a word processing application will typically overwrite a large portion if not all of the file. A change tracking application will thus identify that all of the portions of the file have been modified even though only a small portion of the content may have actually changed. In contrast content differencing will detect which portions have changed and which have not.

As another example some data objects have page based or record based internal structures and tend to be accessed randomly. Incremental changes to data objects that tend to be accessed randomly are more efficiently identified using change tracking. For example an email application will typically store many emails within a single data object e.g. a personal folder PST file . When modifying one email the email application will simply access the portion of the data object that contains the email instead of rewriting the entire data object. Accordingly change tracking can easily identify the modified portions of the data object. In contrast content differencing typically has a fairly high overhead due to the calculations involved and this overhead may increase with the size of the file. Accordingly it would likely be quite inefficient to attempt to detect modification to such a data object using content differencing.

Incremental modification detection module is configured to use a data object s static and or dynamic characteristics to select an incremental modification detection technique to apply to that data object. For example looking at which shows a method that can be performed by an incremental modification detection module if the incremental modification detection module detects that a data object tends to be sequentially accessed the incremental modification detection module can select content differencing for the data object as shown at and . If instead the incremental modification detection module detects that the data object tends to be accessed randomly the incremental modification detection module can select change tracking for the data object as indicated at and .

Operation can be performed in a variety of different ways. In some embodiments an incremental modification detection module detects the file type or type of database component of the data object. For example the module can detect that the data object is a word processing file. Based upon the detected file type the module can infer e.g. using a prespecified table that identifies each file type the type of access that tends to be performed to that data object as well as the type of incremental modification detection that is likely to be appropriate for that data object. The file type can be determined by accessing file system metadata such as a file name file owner or last modifier associated with the file.

In other embodiments an incremental modification detection module can perform operation based upon the size of the data object e.g. alone or in combination with the file type as discussed above . For example if a data object is larger than a prespecified threshold the incremental modification detection module can select change tracking for that data object since the file s extreme size would likely reduce the efficiency of content differencing.

In still other embodiments the incremental modification detection module can perform operation by dynamically monitoring one or more sets of accesses to the data object. For example if the incremental modification detection module also performs change tracking the incremental modification detection module will detect and record each access to the data object. In one embodiment if the incremental modification detection module detects that more than N a prespecified positive integer consecutive portions of the data object have been accessed sequentially and that the data object is not a new data object in the process of being created the incremental modification detection module can determine that the data object is sequentially accessed.

In some embodiments the incremental modification detection module can make the determination for a particular data object in response to detecting that more than a threshold percentage of the data object has been modified. Thus once that threshold has been exceeded the incremental modification detection module can review the access pattern to see if it was more sequential or more random.

In some embodiments the operations of may be performed continually for all data objects such that each data object is evaluated independently of other data objects and repeatedly over time. In other embodiments the operations of are performed at least once for each data object but may not be repeated continually. In still other embodiments the operations of are performed at least once for each type of data object but not necessarily for each individual data object. In these embodiments the results obtained from a sample of a given type of data object are then applied to the other data objects of that same type. As an example two of thirty 30 word processing files could be monitored and the results could then be applied to the other 28 word processing files.

Returning to the selections made by incremental modification detection module can vary among different data objects within the same set of data. Thus one technique may be selected for one data object within the set while a different technique is selected for another data object. Accordingly the creation of a single incremental backup can involve the application of several different incremental modification detection techniques. As an example within a given incremental backup that covers a set of data that includes a word processing file and an email file the word processing file may be processed using content differencing while the email file may be processed using change tracking.

In addition to selecting the technique to use to detect incremental modifications to a data object incremental modification detection module can also determine whether the overhead of certain techniques should be incurred for certain data objects. For example if the incremental modification detection module detects that a file is being sequentially accessed the incremental modification detection module can disable change tracking for that file. This can reduce the amount of storage space required to store the change tracking information as well as the computing overhead required to generate additional change tracking information for the data object. If the incremental modification detection module decides to disable change tracking for a particular data object the incremental modification detection module may also discard any change tracking information already gathered for that data object. Similarly if a data object is detected to be deleted the incremental modification detection module can decide to cease change tracking and or delete already obtained change tracking information for the now deleted data object.

Processor generally represents any type or form of processing unit capable of processing data or interpreting and executing instructions. In certain embodiments processor may receive instructions from a software application or module. These instructions may cause processor to perform the functions of one or more of the embodiments described and or illustrated herein. For example processor may perform and or be a means for performing the operations described herein. Processor may also perform and or be a means for performing any other operations methods or processes described and or illustrated herein.

System memory generally represents any type or form of volatile or non volatile storage device or medium capable of storing data and or other computer readable instructions. Examples of system memory include without limitation random access memory RAM read only memory ROM flash memory or any other suitable memory device. Although not required in certain embodiments computing system may include both a volatile memory unit such as for example system memory and a non volatile storage device such as for example primary storage device as described in detail below . In one example program instructions executable to implement an incremental modification detection module e.g. as shown in may be loaded into system memory .

In certain embodiments computing system may also include one or more components or elements in addition to processor and system memory . For example as illustrated in computing system may include a memory controller an Input Output I O controller and a communication interface each of which may be interconnected via a communication infrastructure . Communication infrastructure generally represents any type or form of infrastructure capable of facilitating communication between one or more components of a computing device. Examples of communication infrastructure include without limitation a communication bus such as an Industry Standard Architecture ISA Peripheral Component Interconnect PCI PCI express PCIe or similar bus and a network.

Memory controller generally represents any type or form of device capable of handling memory or data or controlling communication between one or more components of computing system . For example in certain embodiments memory controller may control communication between processor system memory and I O controller via communication infrastructure . In certain embodiments memory controller may perform and or be a means for performing either alone or in combination with other elements one or more of the operations or features described and or illustrated herein.

I O controller generally represents any type or form of module capable of coordinating and or controlling the input and output functions of a computing device. For example in certain embodiments I O controller may control or facilitate transfer of data between one or more elements of computing system such as processor system memory communication interface display adapter input interface and storage interface .

Communication interface broadly represents any type or form of communication device or adapter capable of facilitating communication between computing system and one or more additional devices. For example in certain embodiments communication interface may facilitate communication between computing system and a private or public network including additional computing systems. Examples of communication interface include without limitation a wired network interface such as a network interface card a wireless network interface such as a wireless network interface card a modem and any other suitable interface. In at least one embodiment communication interface may provide a direct connection to a remote server via a direct link to a network such as the Internet. Communication interface may also indirectly provide such a connection through for example a local area network such as an Ethernet network a personal area network a telephone or cable network a cellular telephone connection a satellite data connection or any other suitable connection.

In certain embodiments communication interface may also represent a host adapter configured to facilitate communication between computing system and one or more additional network or storage devices via an external bus or communications channel. Examples of host adapters include without limitation Small Computer System Interface SCSI host adapters Universal Serial Bus USB host adapters Institute of Electrical and Electronics Engineers IEEE 1394 host adapters Serial Advanced Technology Attachment SATA and external SATA eSATA host adapters Advanced Technology Attachment ATA and Parallel ATA PATA host adapters Fibre Channel interface adapters Ethernet adapters or the like.

Communication interface may also allow computing system to engage in distributed or remote computing. For example communication interface may receive instructions from a remote device or send instructions to a remote device for execution.

As illustrated in computing system may also include at least one display device coupled to communication infrastructure via a display adapter . Display device generally represents any type or form of device capable of visually displaying information forwarded by display adapter . Similarly display adapter generally represents any type or form of device configured to forward graphics text and other data from communication infrastructure or from a frame buffer as known in the art for display on display device .

As illustrated in computing system may also include at least one input device coupled to communication infrastructure via an input interface . Input device generally represents any type or form of input device capable of providing input either computer or human generated to computing system . Examples of input device include without limitation a keyboard a pointing device a speech recognition device or any other input device.

As illustrated in computing system may also include a primary storage device and a backup storage device coupled to communication infrastructure via a storage interface . Storage devices and generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. For example storage devices and may be a magnetic disk drive e.g. a so called hard drive a floppy disk drive a magnetic tape drive an optical disk drive a flash drive or the like. Storage interface generally represents any type or form of interface or device for transferring data between storage devices and and other components of computing system . A storage device like primary storage device can store information such as backup images and or a backup catalog.

In certain embodiments storage devices and may be configured to read from and or write to a removable storage unit configured to store computer software data or other computer readable information. Examples of suitable removable storage units include without limitation a floppy disk a magnetic tape an optical disk a flash memory device or the like. Storage devices and may also include other similar structures or devices for allowing computer software data or other computer readable instructions to be loaded into computing system . For example storage devices and may be configured to read and write software data or other computer readable information. Storage devices and may also be a part of computing system or may be a separate device accessed through other interface systems.

Many other devices or subsystems may be connected to computing system . Conversely all of the components and devices illustrated in need not be present to practice the embodiments described and or illustrated herein. The devices and subsystems referenced above may also be interconnected in different ways from that shown in .

Computing system may also employ any number of software firmware and or hardware configurations. For example one or more of the embodiments disclosed herein may be encoded as a computer program also referred to as computer software software applications computer readable instructions or computer control logic on a computer readable storage medium. Examples of computer readable storage media include magnetic storage media e.g. hard disk drives and floppy disks optical storage media e.g. CD or DVD ROMs electronic storage media e.g. solid state drives and flash media and the like. Such computer programs can also be transferred to computing system for storage in memory via a network such as the Internet or upon a carrier medium.

The computer readable medium containing the computer program may be loaded into computing system . All or a portion of the computer program stored on the computer readable medium may then be stored in system memory and or various portions of storage devices and . When executed by processor a computer program loaded into computing system may cause processor to perform and or be a means for performing the functions of one or more of the embodiments described and or illustrated herein. Additionally or alternatively one or more of the embodiments described and or illustrated herein may be implemented in firmware and or hardware. For example computing system may be configured as an application specific integrated circuit ASIC adapted to implement one or more of the embodiments disclosed herein.

Similarly servers and generally represent computing devices or systems such as application servers or database servers configured to provide various database services and or run certain software applications. Network generally represents any telecommunication or computer network including for example an intranet a wide area network WAN a local area network LAN a personal area network PAN or the Internet. In one example one or more of client systems and or may include an incremental modification detection module as shown in .

As illustrated in one or more storage devices N may be directly attached to server . Similarly one or more storage devices N may be directly attached to server . Storage devices N and storage devices N generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. In certain embodiments storage devices N and storage devices N may represent network attached storage NAS devices configured to communicate with servers and using various protocols such as Network File System NFS Server Message Block SMB or Common Internet File System CIFS . Such storage devices can store backup images and or backup catalogs as described above.

Servers and may also be connected to a storage area network SAN fabric . SAN fabric generally represents any type or form of computer network or architecture capable of facilitating communication between multiple storage devices. SAN fabric may facilitate communication between servers and and a plurality of storage devices N and or an intelligent storage array . SAN fabric may also facilitate via network and servers and communication between client systems and and storage devices N and or intelligent storage array in such a manner that devices N and array appear as locally attached devices to client systems and . As with storage devices N and storage devices N storage devices N and intelligent storage array generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions.

In certain embodiments and with reference to computing system of a communication interface such as communication interface in may be used to provide connectivity between each client system and and network . Client systems and may be able to access information on server or using for example a web browser or other client software. Such software may allow client systems and to access data hosted by server server storage devices N storage devices N storage devices N or intelligent storage array . Although depicts the use of a network such as the Internet for exchanging data the embodiments described and or illustrated herein are not limited to the Internet or any particular network based environment.

In at least one embodiment all or a portion of one or more of the embodiments disclosed herein may be encoded as a computer program and loaded onto and executed by server server storage devices N storage devices N storage devices N intelligent storage array or any combination thereof. All or a portion of one or more of the embodiments disclosed herein may also be encoded as a computer program stored in server run by server and distributed to client systems and over network .

In some examples all or a portion of one of the systems in and may represent portions of a cloud computing or network based environment. Cloud computing environments may provide various services and applications via the Internet. These cloud based services e.g. software as a service platform as a service infrastructure as a service etc. may be accessible through a web browser or other remote interface. Various functions described herein may be provided through a remote desktop environment or any other cloud based computing environment.

In addition one or more of the components described herein may transform data physical devices and or representations of physical devices from one form to another. For example an incremental modification detection module may transform the behavior of a backup system such that the backup system selects to apply different incremental modification detection techniques to different data objects when generating incremental backups.

Although the present invention has been described in connection with several embodiments the invention is not intended to be limited to the specific forms set forth herein. On the contrary it is intended to cover such alternatives modifications and equivalents as can be reasonably included within the scope of the invention as defined by the appended claims.

