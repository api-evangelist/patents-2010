---

title: Method and system for providing XML-based asynchronous and interactive feeds for web applications
abstract: A system for providing XML-based asynchronous and interactive feeds for Web applications that provides a highly efficient and extensible XML Javascript framework allowing easy insertion of a comment/news feed control into any Web page. The framework allows for reading of any XML format and provides a new and easy way for modifying the look-and-feel of the control via HTML templates with familiar XPath bindings. The rendering performed through the system supports both flat and indented (“threaded”) views for a comment thread. The system improves the parsing speed of incoming XML, and supports a flexible event model for others to develop plug-ins and mashups in the spirit of Web 2.0.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08122104&OS=08122104&RS=08122104
owner: International Business Machines Corporation
number: 08122104
owner_city: Armonk
owner_country: US
publication_date: 20101130
---
The present application is a Continuation under 35 U.S.C. 120 of commonly assigned prior U.S. application Ser. No. 11 768 371 filed Jun. 26 2007 in the names of Alexander Kordun and Neil J. Schultz now allowed.

The present invention relates generally to World Wide Web technologies and more specifically to a method and system for providing XML based asynchronous and interactive feeds for Web applications.

As it is generally known many new Web application technologies provided on the Internet today are referred to as Web 2.0 . These technologies include a second generation of Web based communities and hosted services e.g. social networking sites wikis folksonomies etc. and are intended to facilitate collaboration and sharing between users. Applications in this area usually include simple to use user interfaces and typically share some important technical attributes. For example Web 2.0 applications often expose an XML eXtensible Mark up Language based REST Representational State Transfer API Application Programming Interface for invoking Web services over HTTP HyperText Transfer Protocol and have the ability to interact with the server asynchronously via AJAX Asynchronous Javascript and XML .

In addition there are an increasing number of Web sites that expose their data in XML formats such as the traditional RSS Really Simple Syndication format and or the more recent Atom format. These publishing formats let users view headlines of the latest updates from their favorite blogs and Web sites all from within a single newsreader program. Such XML based formats also referred to as feeds news feeds or Web feeds typically include headlines short descriptions and links to articles. Existing systems allow reading of data provided through these publishing formats as well as updating the via the aforementioned REST APIs.

Some of the most sought after features of Web sites today that can leverage such technologies are Comment feed controls Discussion Thread functionality and or news feed aggregations that allow users to read and add data from various datasources or engage in discussions right on the current HTML page. In the past Web site developers had to implement the user interface for these features separately for each Web site and could not rely on a standard protocol to send read information over HTTP. Furthermore existing feed controls are clumsy requiring frequent page refreshes resulting in high amounts of network traffic and are too specific to be reused in multiple Web sites or Web applications exposing different data types.

One existing system provided by JS Kit.com includes a toolkit inserted into the Web page via Javascript include and allows for AJAX style commenting that reduces page refreshes. However this framework lacks configurable XML support does not offer an event model offers no configurability and does not provide an easy way to modify look and feel via I O bindings to an HTML template thus making it useful only for very trivial commenting applications.

Some existing feed readers allow users to read nicely rendered feeds in their Web pages. Some examples include Google Reader Rojo Gritwire News Alloy Pluck Web Edition Bloglines FeedLounge Attensa Online and Newsgator Online. These feed readers present feed data nicely on the page but are all very limited in that the do not support arbitrary feed types only RSS and ATOM and do not offer an easy way to customize the look and feel of the feed thread. Another problem with such existing online feed reader systems is that they are not easily included in Web pages or configurable with a flexible event model for other mashups to integrate with. These systems also do not offer efficient XML parsing.

Some XML Javascript frameworks allow users to build applications e.g. the Spry technology provided by Adobe. An RSS feed reader built with this framework is available online at the Adobe Labs web site. The main disadvantage of this framework is that it does not offer an HTML template binding approach using standard XPath for look and feel customization of the thread. This system also doesn t have effective optimization for fast XML parsing and requires users to learn a separate declarative language in order to use the framework beyond knowledge of HTML and XML.

Conventional gadget frameworks like Google Microsoft and Yahoo Gadgets offer limited support in this area but the tools they offer are severely limited. While such systems may allow for simple downloading of XML content they do not offer convenient customization techniques or performance improvements. These systems also generally require a specific XML gadget format to be included in Web pages. There are also significant limitations in making POST requests to update data using these frameworks. Instead it would be desirable to have a system that is independent of any specific gadget framework and that can be included into any page very easily.

In order to address the above described and other shortcomings of previous approaches a new method and system for providing XML based asynchronous and interactive feeds for Web applications. The disclosed system provides a highly efficient and extensible XML Javascript framework that allows for easy insertion of a XML feed control into any Web page. The disclosed framework allows for reading of feed data in any XML format and provides a new and easy way for modifying the layout of each entry in the feed data via HTML templates with XPath bindings. For example the rendering performed through the disclosed system can support both flat and indented threaded views for a comment thread. The disclosed system further improves the parsing speed of incoming XML and supports a flexible event model for other services to operate with to provide mashups hybrid applications in the spirit of Web 2.0.

The disclosed system includes a Javascript library a set of predefined HTML templates and optionally an XMLHTTP server side proxy servlet to route POST and GET requests to different domains from the Web browser. These components are installed as a Web application on a server system. As a result Web pages on the client system can include and configure the disclosed XML feed control by referencing the Javascript library and CSS Cascading Style Sheets and can configure the control in Javascript against a particular XML data source. When the HTML for the Web page loads the Web browser asynchronously contacts the XML data source downloads the XML feed payload and renders it on the Web page according to an appropriate HTML template bindings and look and feel. Other Web applications can easily insert more features into the resulting feed thread by taking advantage of events provided at multiple points in the processing performed by the control. The user can also interact with the XML feed for example by posting comments back to the server. All server interactions are asynchronous to page loads for faster usability. If requests are going against a server in a different domain a proxy servlet can easily be used to meet Javascript security limitations.

The Client Browser operates to render the Parent HTML Page including the display of the XML feed associated with the Feed Widget to a local user of the Client System as part of a graphical user interface provided by the Client System through a display device such as an LCD Liquid Crystal Display LED Light Emitting Diode CRT Cathode Ray Tube or the like. The Client System may be embodied as any specific type of electronic device operable to provide a graphical user interface to a user including but not limited to a desktop computer system laptop notebook or other type of portable computer system personal digital assistant PDA cell phone or any combination thereof. The Client Browser may be embodied by any specific type of technology operable to process HTML and or other Web page related script and or other content such as a Web Browser or other application program software or firmware executing on the Client System hardware circuitry such as one or more Application Specific Integrated Circuits ASICs Field Programmable Gate Arrays FPGAs discrete logic circuits and or combinations of such software firmware and or hardware components.

A Proxy Server is shown including a Web Application that includes a Javascript Feed Framework and a Proxy Servlet . The Proxy Server further includes Other Web Applications that operate in cooperation with the Other Services that respond to the Events . As further shown in a Data Server includes Data Feeds and a Template Server includes Feed Templates . The server systems and may be embodied as any specific type of electronic device operable to execute the Web Application and provide the Data Feeds and Feed Templates . Such systems include but are not limited to computer server systems and the like. Moreover while the servers and are shown as separate systems in the illustrative embodiment of the disclosed system is not limited to such an embodiment. Accordingly the Web Application Other Web Applications Data Feeds and or Feed Templates may alternatively be provided using a single server system or some other specific number of server systems as appropriate for the embodiment and or configuration.

During operation of the illustrative embodiment of HTTP POST and GET Requests are generated by the Client Browser in response to the Parent HTML Page and the Feed Widget contained within the Parent HTML Page and passed to the Proxy Server . The Javascript Feed Framework is an example of a Javascript library as used in an embodiment of the disclosed system. The Feed Templates are an example of a set of predefined HTML templates as used in an embodiment of the disclosed system. Also the Proxy Servlet is an example of an XMLHTTP server side proxy servlet operable to route the HTTP POST and GET Requests to different domains from the Client Browser . As shown in these components may be installed as part of the Web Application on one or more server systems. As a result different Web pages e.g. Parent HTML Page and others can include and configure the disclosed XML feed control e.g. Feed Widget by simply referencing the appropriate Javascript library from the Javascript Feed Framework as well as CSS Cascading Style Sheets that are either part of the Parent HTML Page or an appropriate one of the Feed Templates . The disclosed XML feed control can accordingly be configured in Javascript against a particular XML data source e.g. from the Data Feeds . When the HTML for the Parent HTML Page loads the Client Browser asynchronously contacts the XML data source e.g. from Data Feeds downloads the XML feed payload and renders it within the displayed Parent HTML Page according to appropriate HTML template bindings formatting and appearance as further described below. Other Web applications can easily insert more data and user interface objects into the resulting feed thread user interface display by taking advantage of the flexible event model also further described below. The local user of Client System can also interact with the feed thread e.g. in the case where the XML feed is a Comments thread by posting data back to the server e.g. Data Server . All server interactions are asynchronous with respect to HTML pages loads for faster usability. Accordingly the Parent HTML Page can stay loaded in the Client Browser while the XML feed is displayed by the Feed Widget without having to perform a new page load.

If as illustrated in HTTP POST and GET Requests are directed to a server in a different domain e.g. Data Server and or Template Server the Proxy Servlet is used to route the requests and associated responses in order to meet Javascript security limitations.

Using the disclosed system a Web page author can quickly and conveniently construct a parent Web page e.g. Parent HTML Page of containing an instance of the disclosed XML feed control e.g. Feed Widget . For example the Feed Widget included by the author of Parent HTML Page within Parent HTML Page in order to read an XML news publication feed e.g. in either RSS or ATOM format and output the contents of the XML feed to the local user of the Client System within the graphical user interface of the Client System . The Web page author constructs the parent Web page such that there s a section where the XML feed will be displayed shown for purposes of illustration by section in the screen shot of . As shown in the example of section contains a button that the local user can click on to trigger loading and display XML feed by the Feed Widget within an initially empty hidden section . The Web page author also includes a Javascript configuration e.g. code segment of of the Feed Widget that is invisible to the local user within the parent Web page. Accordingly when the parent Web page is rendered on the Client System the local user clicks on the button which causes the Feed Widget to become active e.g. a loadThread function is called . The Feed Widget then starts to operate in one of the sequences shown in and further described below. Once the feed HTML template and the XML feed data are downloaded from the server s the Feed Widget applies the template to the data and the data is displayed in section as shown in . The display in section is the result of the Feed Widget having executed and displayed the result. The received HTML template describes the appearance and layout of a single entry in the thread of entries shown in section such as the row . Accordingly when the feed template is applied to the entire set of received XML feed data section includes one row per data item e.g. one row per XML feed entry. In the example of each row is an entry from the corresponding news feed including a link to a complete article e.g. link for row a summary for the article e.g. summary for row and publication date and time information for the article e.g. date and time for row .

Also shown in is a paging control . When the disclosed system displays the received XML feed data the complete set of necessary feed data to create the user interface display is downloaded and cached on the Client Browser so that paging actions do not require a server round trip. The paging control is an optional feature of the disclosed system and may or may not be included in a given embodiment.

Those skilled in the art will recognize that the screen shot of shows only one illustrative embodiment of the disclosed system and that many other alternative embodiments are possible. In particular those skilled in the art will recognize that the Feed Widget can be activated in a variety of specific ways including through a button such as the button of through some other user interface construct in response to loading of the Parent HTML page into the Client Browser or in some other way. The Feed Widget may accordingly be considered a configurable black box to the Web page author that wants to include some kind of XML feed on a Web page. Moreover while the disclosed XML feed control can be embodied as an on line news feed reader as illustrated in it can alternatively be embodied as an interactive visualization of a comment discussion thread as further described below. In such an alternative comment discussion thread embodiment the system is interactive since it further supports posting back user data to the server s again using AJAX asynchronous methods without loading a new Web page into the Client Browser .

Advantageously the disclosed system allows for flexible configuration of the disclosed XML feed control e.g. Feed Widget via HTML templates. This provides the ability to a configure the disclosed framework to any XML feed data source via appropriate bindings and b accomplish any appearance and layout. The disclosed system may further provide for parsing optimizations that save network traffic and is relatively easy to place on a Web page since it does not require sophisticated Javascript or XML knowledge by the Web page author.

At step the local user of the Client System causes a loadThread method from the downloaded Javascript library to execute e.g. as a result of the user clicking on the button of . Next at step the Client Browser issues an HTTP GET request for the feed XML data which is received by the Proxy Server . At step the Proxy Server issues an HTTP GET request to the Data Server to obtain the feed XML data. The Data Server then responds at step by sending the feed XML data to the Proxy Server which returns the feed XML data to the Client Browser at step . At step the Client Browser fires an event indicating that XML feed data has been received to allow other applications registered for that event to access and process the received XML feed data.

The Client Browser operates to determine the appropriate HTML template for formatting the received XML feed data at step and then issues an HTTP GET request for that HTML template to the Proxy Server at step . The Proxy Server in turn forwards the HTTP GET request for the HTML template to the Template Server at step and the Template Server responds to the Proxy Server with the requested HTML template at step which forwards the HTML template to the Client Browser at step . At step the Client Browser fires an event indicating that the HTML template has been received to allow other applications registered for that event to access received HTML template.

At step the Client Browser applies the received template to each entry in the received XML data in order to prepare the complete set of received XML feed data for display based on the HTML template. After each entry or row of the XML feed data is formatted based on the HTML template the Client Browser causes the event to be issued to any other applications that may have registered for that event in order to allow those other applications to access the formatted feed entry prior to it being displayed in order to add any features or display objects to the display of that entry. Next after all the entries have been formatted for display but still before the XML feed data is displayed at step the Client Browser fires another event indicating that all the XML feed data has been formatted based on the HTML template in order to allow other applications registered for that event to add any features or display objects to the display of the complete formatted XML feed data prior to displaying it. Then at step the HTML result of the all the preceding processing of the XML feed data is displayed to the local user of the Client System .

At step the local user of the Client System causes the loadThread method to execute e.g. as a result of the user clicking on the button of and at step the Client Browser issues an HTTP GET request to get the appropriate HTML template. The template request of step is received by the Proxy Server and at step the Proxy Server forwards the template request to the Template Server which responds with the requested HTML template at step . The Proxy Server then forwards the HTML template to the Client Browser at step . An event is then fired allowing other applications that have registered for the event to learn that the HTML template for the XML feed has been loaded and to access the template and do any desired processing based on the contents of the template. The Client Browser analyzes the received template at step including getting the binding fields from the template. If the template includes style attributes then the analysis at step would include unifying styles into a single style sheet to be applied to all entries of the XML feed and potentially other optimization steps. The Client Browser then issues an HTTP GET request at step to obtain the feed XML data and the Proxy Server then in turn requests the feed XML data from the Data Server at step . The Data Server responds with the feed XML data at step and the Proxy Server in turn returns the feed XML data to the Client Browser at step . An event is then fired allowing other applications that have registered for the event to learn that the XML data for the XML feed has been loaded and to access the XML data and do any desired processing based on the contents of the received XML data.

The Client Browser applies the received template to each entry in the feed XML data at step in order to prepare the complete set of entries for display. As each entry is formatted based on the template the event is fired to any other applications that have registered for the event in order to allow such other applications to add any services or display objects to each entry before it is displayed. Furthermore after all the entries of the XML feed are formatted based on the template but prior to displaying the XML feed data another event is fired to any other applications that have registered for the event allowing such other applications to insert any services or display objects to the complete set of entries prior to them being displayed. Finally at step the HTML result of all the preceding steps is displayed to the local user of the Client System .

In an alternative embodiment to that shown in the disclosed system may operate such that the template for displaying the XML feed data is first obtained and then only specific fields are requested in XML feed data. Such an embodiment optimizes parsing and data transmission resource requirements. In this alternative embodiment when the template is analyzed at step the disclosed system may be embodied to offer flexible extensibility in retrieving the bindings from the template and using them to let the server know what XML data is relevant in the following steps. This can be done in either of two ways 

1 The binding attributes which are XPath XML Path Language paths to the data that is needed are serialized into a string and appended to the GET request in step e.g. http ....data.xml params entry link href entry author name fd . The disclosed system does not rely on any specific way of encoding the XPath expressions onto the URL and this can vary between embodiments. However if filtering of feed data is done in this way an agent on the server system e.g. Proxy Servlet in Proxy Server if multiple domains are used intercepts this request reads the parameter and on the response generated at step only returns the data that has the XML elements specified in the GET request generated at step .

2 The binding attributes which are XPath paths to the data are serialized into a string and the disclosed framework e.g. Feed Widget can then make one or more additional requests after step to the server to communicate which elements are needed in the returned XML. This can be done by HTTP POST requests from the Client browser indicating the desired data elements instead of appending them to the URL as in option 1 above which is limiting for long URLs or by using further HTTP GET requests. This second option effectively lets the server know When I perform the GET for data at step make sure to return only what I need. The disclosed system does not depend on or include any specific intermediary steps to selectively obtain a relevant subset of the XML feed data and or a specific technique for the Proxy Server to get data filtering information. In an embodiment of the disclosed system performs filtering in this way there is an agent e.g. Proxy Servlet on the server e.g. Proxy Server that receives such filtering information and that operates responsively to return the feed data to the Client System including only the indicated XML elements.

While the user interface example of and description of the sequence diagrams in are with regard to an application of the disclosed system to on line feed reading other embodiments include use of the disclosed system for online Comments Discussion forums. The following Figures illustrate an example of such an alternative embodiment and also provide advantageous flexibility in both user interface and back end configuration via parameters in the JavaScript and the HTML template as used in the disclosed system.

In addition actions in described as being performed by or within the Client browser may be performed within an XML feed control e.g. Feed Widget and or elsewhere within the Parent HTML page .

If the XML feed control loaded at step is configured for automatic feed type detection e.g. with an associated postTemplateMap parameter shown in then at step the Web browser contacts an XML feed data source in a first asynchronous request to obtain the XML Comments Discussion feed data. Further at step once the feed data is loaded into the Web Browser an event is fired to notify any other applications that the XML is now in the Web browser cache. The feed type is then determined and a second asynchronous request is fired to retrieve the appropriate HTML template. Once the template loads another event is fired to let other application know that the template also exists now in the Web Browser memory.

Alternatively if the XML feed control loaded at step is configured to retrieve one or more specific HTML templates then at step an HTTP request is fired to obtain the specified template s . Further at step once the template loads an event is fired to inform other applications that the template is now loaded into the Web Browser. The XML feed control also reads the loaded template and determines which XML Comments Discussion feeds are necessary for the display by looking at the bindings. In one embodiment the necessary fields for displaying the Comments Discussion feeds are concatenated and encoded at the end of the target URL in order to let the server s know which are the relevant XML feeds for the current display. In an alternative simpler embodiment the XML feed control simply remembers these relevant fields and uses them later to optimize parsing in the following steps. A second asynchronous HTTP request is then fired to retrieve the XML feed data for example via the Proxy Servlet or the like and once the feed data is downloaded into the Web browser an event is fired to inform any interested applications that the feed data is now loaded into the Web Browser and available for them to use.

At step the XML feed control has both the HTML template with bindings and the XML Comments Discussion data and proceeds to iterate through the data applying the HTML template to each entry but keeping the result hidden from user s view with CSS display styling . Another event is fired after each entry is processed so that any applications that have registered for the event can perform operations on each entry to add services and or display objects to the entry before the entries are displayed. Once the complete set of entries in the XML data are rendered into a displayable format and ready to be displayed to the user at step the disclosed system fires another event so that other applications can be informed that the complete set of Comments Discussion data is ready for display so that such other applications can do additional processing to provide services or display objects prior to display of the feed data. At step the resulting Comments Discussion thread is displayed to the user.

Each of the entries further includes a link to popup information about corresponding entry authors such as displayed in the box generated in response to the user clicking on the name Alex Kordun . Such personal information is provided for example by an inline personal information card application. The inline personal information card application is another example of the Other Services shown in that operates in response to one or more events that it registers for indicating specific points of completion by the XML feed control e.g. a Thread Loaded event or the like . In the example of each of the entries is a post in a discussion forum each post for example including a title e.g. title for the post a body e.g. body for the post a posting date and time e.g. date and time for post and a number of actions provided to the user e.g. the reply to post edit and delete actions shown for post .

In the example of each of the entries is a comment in comments feed each comment for example including a body e.g. body for comment action buttons e.g. action buttons for comment creation time and date e.g. creation time and date for comment modification time and date e.g. modification time and date for comment and an identifier and or e mail link to the posting user e.g. e mail link for comment .

Since automatic feed type detection is supported in the example of during operation the XML feed data is downloaded first then the feed type is determined and then the appropriate template is chosen. However the disclosed framework can be optionally configured to first download the chosen HTML template with bindings and then download the XML feed itself. The main reason for this choice is that if the type of data that will be received is known a priori the disclosed system can provide an advantageous parsing approach to the feed XML that obtains only the XML elements needed in specific display layout. This aspect of the disclosed system can dramatically reduce XML parsing time and may also reduce the amount of data to be transferred between the server s and the client.

In an alternative embodiment when the HTTP request is issued to obtain the actual feed data the XPaths of the bindField and bindAttribute elements in can be concatenated into a string and sent to the server s e.g. Proxy Server in . The server then operates such that only the specified elements are part of the feed data returned to the client system thus significantly reducing network traffic by not sending the complete all inclusive feed XML. For example the entry summary element or the like may be part of the general XML feed data but since it is not used in the current HTML template it does not need to be parsed or transferred over the wire.

The disclosed system provides many significant advantages including the flexibility resulting from not being tied to a particular XML format such as ATOM or RSS. Accordingly the template author is free to specify any XPath binding to take advantage of any XML formatted data coming over the wire.

Furthermore those skilled in the art will recognize that the disclosed templates while being regular HTML may have jsp extensions and may accordingly themselves be implemented as JSP servlets on the server taking advantage of powerful server side scripting logic. All the disclosed system requires is that it receives valid HTML to apply to feed data XML. This has the significant advantage of using regular HTML and does not involve a complex syntax for binding and templatability. The disclosed system is also much easier to maintain and modify for different XML types as well as for appearance and format changes.

While the above description regarding illustrative embodiments of the disclosed system includes examples of specific user interface display objects such as graphical buttons menus dialog boxes and the like the present invention is not limited to those specific examples. Accordingly those skilled in the art will recognize that alternative embodiments may use any specific type or kind of user interface display object that may be appropriate.

The disclosed system can take the form of an entirely software embodiment an entirely hardware embodiment or an embodiment containing both software and hardware elements. The figures include block diagram and flowchart illustrations of methods apparatus s and computer program products according to an embodiment of the invention. It will be understood that each block in such figures and combinations of these blocks can be implemented by computer program instructions. These computer program instructions may be loaded onto a computer or other programmable data processing apparatus to produce a machine such that the instructions which execute on the computer or other programmable data processing apparatus create means for implementing the functions specified in the block or blocks. These computer program instructions may also be stored in a computer readable memory that can direct a computer or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable memory produce an article of manufacture including instruction means which implement the function specified in the block or blocks. The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide steps for implementing the functions specified in the block or blocks.

Those skilled in the art should readily appreciate that programs defining the functions of the present invention can be delivered to a computer in many forms including but not limited to a information permanently stored on non writable storage media e.g. read only memory devices within a computer such as ROM or CD ROM disks readable by a computer I O attachment b information alterably stored on writable storage media e.g. floppy disks and hard drives or c information conveyed to a computer through communication media for example using wireless baseband signaling or broadband signaling techniques including carrier wave signaling techniques such as over computer or telephone networks via a modem.

While the invention is described through the above exemplary embodiments it will be understood by those of ordinary skill in the art that modification to and variation of the illustrated embodiments may be made without departing from the inventive concepts herein disclosed.

