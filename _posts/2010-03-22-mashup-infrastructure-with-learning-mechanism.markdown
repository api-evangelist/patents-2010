---

title: Mashup infrastructure with learning mechanism
abstract: The present disclosure involves systems, software, and computer implemented methods for providing a mashup infrastructure with a learning mechanism. One process includes operations for receiving a request for connecting a first port of an application with a different port and identifying tagged parameters associated with the first port. A set of potential ports for connecting with the first port based at least in part on the tagged parameters is dynamically determined. A suggestion of potential ports for connecting with the first port, including at least a subset of potential ports selected from the set of potential ports, is presented.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08751558&OS=08751558&RS=08751558
owner: SAP AG
number: 08751558
owner_city: Walldorf
owner_country: DE
publication_date: 20100322
---
The present disclosure relates to software computer systems and computer implemented methods for an efficient learning mechanism in a mashup infrastructure.

Certain applications can support mashup capabilities permitting users to combine components of different applications onto one page or workspace. For example a user may select a particular component of one application and insert the component into a second application. The combined components can be called mashup components because the components are capable of being mashed up or collected in a customized arrangement on a page or workspace. The page typically has a layout used to define the visual order of mashable applications or components. Further data flows can be defined between mashable applications by connecting the input ports or output ports of these applications. In this way a user of mashup applications can customize a page or workspace with only components that the user needs or desires.

Mashup components are applications that can be combined with other applications or processes to create a new service or to enhance existing applications with additional features. In a typical mashup environment different applicative elements of the mashup components can be linked which requires defining a contextual connection between the elements before data or events can be properly exchanged between the mashup components. The mashup components however can come from different sources or be implemented using different technologies. In some instances mashup components developed from different technologies require different interfaces for input or output of data. Thus defining a connection between elements of mashup components with different interfacing technologies may require development of bridges between the technologies. The different technologies associated with each mashup component may require an interface in a specific domain language creating difficulties in defining contextual connections between mashup components that provide added value to a mashup environment. Further users of mashup components may not have the technical knowledge to define or manage connections between mashup components of different interfaces.

The present disclosure provides techniques for implementing a mashup infrastructure with a learning mechanism. A computer program product is encoded on a tangible storage medium where the product comprises computer readable instructions for causing one or more processors to perform operations. These operations can include receiving a request for connecting a first port of an application with a different port and identifying tagged parameters associated with the first port. A set of potential ports for connecting with the first port based at least in part on the tagged parameters is dynamically determined. A suggestion of potential ports for connecting with the first port including at least a subset of potential ports selected from the set of potential ports is presented. The set of potential ports for connecting with the first port may also be based on a history of connections associated with the first port.

While generally described as computer implemented software embodied on tangible media that processes and transforms the respective data some or all of the aspects may be computer implemented methods or further included in respective systems or other devices for performing this described functionality. The details of these and other aspects and embodiments of the present disclosure are set forth in the accompanying drawings and the description below. Other features objects and advantages of the disclosure will be apparent from the description and drawings and from the claims.

This disclosure generally describes computer systems software and computer implemented methods for providing an automatic learning mechanism for defining connections between mashup components. In general a mashup environment may comprise an environment in which applications modules or functions called mashup components can be used in connection with other applications in a flexible manner based on a user s customization and arrangement of the applications. A mashup component can be a webpage application or part of an application such as a module component service or subroutine that contains data or functionality that can be combined with another application or component such as another mashup component based on a user s preferences. Moreover the term mashup component mashup application mashable application or mashup entity may be used interchangeably as appropriate without departing from the scope of this disclosure. Thus an application designed with mashup functionality can have particular data or functionality within the application combined with other components of the application or with particular components of one or more external applications to create a new service. In some mashup scenarios a page or workspace can have a layout used to define the visual arrangement of mashable applications in the workspace. Further the mashable applications can interact with each other such as by passing content between mashable applications. In particular a mashable application can be combined with other mashable applications through data flows connecting input and output ports of the applications as defined by the user. In a mashup environment mashable applications arranged in a particular format can be rearranged in different combinations resulting in different data flows and connections between elements of the mashup applications. A mashable application can be linked with other applications through ports such as input or output ports which allow data to be shared among various applications. A user can customize the arrangement of mashup components according to the user s preferences.

In some instances mashable applications may have different interfaces for creating and configuring connections between ports associated with the mashable applications. The mashable applications may be associated with different technologies or sources and some interfaces of the mashable applications may be incompatible with each other. While different components of the mashable applications may potentially share a connection mismatching data formats among various components may make it difficult to create data connections. Moreover a user may not know which ports can be connected to form a contextual connection between mashable applications or how to create connections between ports associated with different mashable applications. Accordingly a mashup model and system can be implemented to automatically define connections between mashup application ports or to provide automated suggestions for connecting ports.

Mashup applications can include input and output ports as well as data connections between the ports. The ports of a mashup application are input and output interfaces for linking the mashup application with interfaces of other applications or components and each port may be associated with a type of data. In certain implementations a learning system or model can generate suggestions for connecting particular ports and present the suggestions to a user. In particular certain ports of a mashup application can be defined with parameters and tags and based on the parameters and tags one or more suggestions can be generated or provided that present possible connections between two ports. In addition the learning system can generate suggestions for connecting certain ports based on existing connections between ports or a history of established connections for certain mashable applications. Further a mashup model can be used to define mashup entities and connections to support the design of mashup scenarios. Mashup elements such as ports and connections can be represented as objects to facilitate connections of mashup applications with each other.

Certain ports of the mashup applications may include parameters that define attributes of the ports. In some implementations a user can apply tags to the parameters for a particular port to further define the port and provide additional context for later use. The learning system of the present disclosure can suggest possible connections between a source component or port and a target component or port. The suggestion can be based on matching port parameters tags or existing connections associated with the port. Learning logics and algorithms utilizing port definitions and connections can also be applied to improve the system s suggestion capabilities and to find more effective connections. Further the suggestion capability of the learning system can be constantly improved as tags and parameters for mashup application ports are enhanced will more information over time. For example as a particular port is associated with more connections the port s history of connections expands creating a larger store of data from which suggestions can be based. Various algorithms can be used to enrich the tags of a port or to generate suggestions for connections. For example when a connection is created between two ports the tags of each port s parameters can be copied to the other port s parameters creating derived tags in the parameters of each of the two connected ports. In some implementations the derived tags can be propagated across existing repositories containing port parameters to further expand possible matches. Also for the two connected ports the name of the parameter from one port can be added as a tag to the mapped parameter in the other port creating an internal tag. With the newly added tags based on the connection between the two ports the two ports have a higher chance for inclusion in a suggestion generated by the learning system for additional connections.

One potential benefit of such techniques is that connections between mashup applications can be facilitated in an efficient manner. Mashup applications may have been developed by different entities using different technologies and interfaces preventing many users from being able to create or define connections between mashup applications due to the disparate interfaces associated with different components. The learning mechanism of the present disclosure can automatically create connections between ports of mashup applications or provide suggestions to a user for forming those connections. Further the learning mechanism can use a mashup model that can abstractly define mashup entities and connections and use mashup information from various repositories and other contextual connections. The learning mechanism can also evolve over time as user defined tagging and ranking of port attributes and parameters can be fed back into the learning system for future suggestion of connections between mashup applications. In other words the learning mechanism can adapt to constant updating of port parameters to provide a wider selection of possible connections. Accordingly the suggestions generated by the learning mechanism can be constantly improved.

Turning to the illustrated example illustrates an example environment for a mashup infrastructure with a mashup framework and a learning mechanism . The illustrated environment includes or is communicably coupled with server and one or more clients at least some of which communicate across network . The environment also supports a system capable of automatically connecting ports of different mashup applications or generating suggestions for connecting different ports.

In general server is any server that stores one or more hosted applications where at least a portion of the hosted applications is executed via requests and responses sent to users or clients within and communicably coupled to the illustrated environment of . For example server may be a Java 2 Platform Enterprise Edition J2EE compliant application server that includes Java technologies such as Enterprise JavaBeans EJB J2EE Connector Architecture JCA Java Messaging Service JMS Java Naming and Directory Interface JNDI and Java Database Connectivity JDBC . In some instances the server may store a plurality of various hosted applications while in other instances the server may be a dedicated server meant to store and execute only a single hosted application . In some instances the server may comprise a web server or be communicably coupled with a web server where the hosted applications represent one or more web based applications accessed and executed via network by the clients of the system to perform the programmed tasks or operations of the hosted application .

At a high level the server comprises an electronic computing device operable to receive transmit process store or manage data and information associated with the environment . The server illustrated in can be responsible for receiving application requests from one or more client applications associated with the clients of environment and responding to the received requests by processing said requests in the associated hosted application and sending the appropriate response from the hosted application back to the requesting client application . Alternatively the hosted application at server can be capable of processing and responding to local requests from a user accessing server locally. Accordingly in addition to requests from the external clients illustrated in requests associated with the hosted applications may also be sent from internal users external or third party customers other automated applications as well as any other appropriate entities individuals systems or computers.

As used in the present disclosure the term computer is intended to encompass any suitable processing device. For example although illustrates a single server environment can be implemented using two or more servers as well as computers other than servers including a server pool. Indeed server may be any computer or processing device such as for example a blade server general purpose personal computer PC Macintosh workstation UNIX based workstation or any other suitable device. In other words the present disclosure contemplates computers other than general purpose computers as well as computers without conventional operating systems. Further illustrated server may be adapted to execute any operating system including Linux UNIX Windows Mac OS or any other suitable operating system. According to one embodiment server may also include or be communicably coupled with a mail server.

In the present implementation and as shown in the server includes a processor an interface a memory one or more hosted applications and a mashup framework . The interface is used by the server for communicating with other systems in a client server or other distributed environment including within environment connected to the network e.g. client as well as other systems communicably coupled to the network . Generally the interface comprises logic encoded in software and or hardware in a suitable combination and operable to communicate with the network . More specifically the interface may comprise software supporting one or more communication protocols associated with communications such that the network or interface s hardware is operable to communicate physical signals within and outside of the illustrated environment .

The server may also include a user interface such as a graphical user interface GUI . The GUI comprises a graphical user interface operable to for example allow the user of the server to interface with at least a portion of the platform for any suitable purpose such as creating preparing requesting or analyzing data as well as viewing and accessing source documents associated with business transactions. Generally the GUI provides the particular user with an efficient and user friendly presentation of business data provided by or communicated within the system. The GUI may comprise a plurality of customizable frames or views having interactive fields pull down lists and buttons operated by the user. For example GUI may provide interactive elements that allow a user to tag parameters of components or ports of a mashable application. GUI may also display suggestions of possible connections between ports of a mashable application. More generally GUI may also provide general interactive elements that allow a user to access and utilize various services and functions of application . The GUI is often configurable supports a combination of tables and graphs bar line pie status dials etc. and is able to build real time portals where tabs are delineated by key characteristics e.g. site or micro site . Therefore the GUI contemplates any suitable graphical user interface such as a combination of a generic web browser intelligent engine and command line interface CU that processes information in the platform and efficiently presents the results to the user visually.

Generally example server may be communicably coupled with a network that facilitates wireless or wireline communications between the components of the environment i.e. between the server and the clients as well as with any other local or remote computer such as additional clients servers or other devices communicably coupled to network but not illustrated in . The network is illustrated as a single network in but may be a continuous or discontinuous network without departing from the scope of this disclosure so long as at least a portion of the network may facilitate communications between senders and recipients. The network may be all or a portion of an enterprise or secured network while in another instance at least a portion of the network may represent a connection to the Internet. In some instances a portion of the network may be a virtual private network VPN such as for example the connection between the client and the server . Further all or a portion of the network can comprise either a wireline or wireless link. Example wireless links may include 802.11a b g n 802.20 WiMax and or any other appropriate wireless link. In other words the network encompasses any internal or external network networks sub network or combination thereof operable to facilitate communications between various computing components inside and outside the illustrated environment . The network may communicate for example Internet Protocol IP packets Frame Relay frames Asynchronous Transfer Mode ATM cells voice video data and other suitable information between network addresses. The network may also include one or more local area networks LANs radio access networks RANs metropolitan area networks MANs wide area networks WANs all or a portion of the Internet and or any other communication system or systems at one or more locations. The network however is not a required component of the present disclosure.

As illustrated in server includes a processor . Although illustrated as a single processor in two or more processors may be used according to particular needs desires or particular embodiments of environment . Each processor may be a central processing unit CPU a blade an application specific integrated circuit ASIC a field programmable gate array FPGA or another suitable component. Generally the processor executes instructions and manipulates data to perform the operations of server and specifically the one or more plurality of hosted applications . Specifically the server s processor executes the functionality required to receive and respond to requests from the clients and their respective client applications as well as the functionality required to perform the other operations of the hosted application .

Regardless of the particular implementation software may include computer readable instructions firmware wired or programmed hardware or any combination thereof on a tangible medium operable when executed to perform at least the processes and operations described herein. Indeed each software component may be fully or partially written or described in any appropriate computer language including C C Java Visual Basic assembler Perl any suitable version of 4GL as well as others. It will be understood that while portions of the software illustrated in are shown as individual modules that implement the various features and functionality through various objects methods or other processes the software may instead include a number of sub modules third party services components libraries and such as appropriate. Conversely the features and functionality of various components can be combined into single components as appropriate. In the illustrated environment processor executes one or more hosted applications on the server .

At a high level each of the one or more hosted applications is any application program module process or other software that may execute change delete generate or otherwise manage information according to the present disclosure particularly in response to and in connection with one or more requests received from the illustrated clients and their associated client applications . In certain cases only one hosted application may be located at a particular server . In others a plurality of related and or unrelated hosted applications may be stored at a single server or located across a plurality of other servers as well. In certain cases environment may implement a composite hosted application . For example portions of the composite application may be implemented as Enterprise Java Beans EJBs or design time components may have the ability to generate run time implementations into different platforms such as J2EE Java 2 Platform Enterprise Edition ABAP Advanced Business Application Programming objects or Microsoft s .NET among others. Additionally the hosted applications may represent web based applications accessed and executed by remote clients or client applications via the network e.g. through the Internet . Further while illustrated as internal to server one or more processes associated with a particular hosted application may be stored referenced or executed remotely. For example a portion of a particular hosted application may be a web service associated with the application that is remotely called while another portion of the hosted application may be an interface object or agent bundled for processing at a remote client . Moreover any or all of the hosted applications may be a child or sub module of another software module or enterprise application not illustrated without departing from the scope of this disclosure. Still further portions of the hosted application may be executed by a user working directly at server as well as remotely at client .

As illustrated processor can also execute a mashup framework for managing the configuration of mashup applications. The mashup framework is a set of interfaces modules services and metadata definitions that enable a user to define a mashup scenario that can be executed in a standard portal page. The mashup framework provides the capability to define an application as a mashup entity or an application that can send or receive a mashup event. In particular the mashup applications can be implemented on a mashup page which is a portal page in which the mashup applications are contextually connected to each other. A user can interact with one mashup application which may trigger the propagation of contextual data between all mashup applications fiat are connected on the mashup page. The mashup framework can define within the scope of the mashup page the parameters of the connections between mashup entities. Specifically the mashup framework can define one mashup application as a source application and another mashup application as a target application and define the connection between the source and target mashup applications including the parameters that map the output of the source with the input of the target application. At runtime the mashup framework can be configured to execute connections between source and target mashup applications dispatching mashup events and communications between source and target applications in response to user interactions. In other words mashup framework can provide an environment for creating managing and executing mashup applications and interfaces between the mashup applications. The mashup framework may be separate from hosted application while in other instances the mashup framework may be embedded within or part of a particular one or more hosted applications. In some instances hosted application may be communicably coupled to the mashup framework allowing hosted application to access and take advantage of the functionality provided by the mashup framework . One example of an environment for the mashup framework is described in detail below in connection with .

Processor can also execute mashup interface learning mechanism software provided by or associated with mashup framework . The mashup interface learning mechanism software may generally be any application program function module process runtime engine or other software that may execute change delete generate or otherwise manage information according to the present disclosure particularly in order to implement a learning mechanism for facilitating data connections between ports of mashup applications regardless of the differences in interfaces among the mashup applications. Through analysis of previously created connections between mashup application ports the learning mechanism can identify potential connections that may have a greater chance of successful interfaces between different mashup applications. The functionality provided by the mashup interface learning mechanism can include providing UI support for development of web representations of business applications for example.

In general the server also includes memory for storing data and program instructions. Memory may include any memory or database module and may take the form of volatile or non volatile memory including without limitation magnetic media optical media random access memory RAM read only memory ROM removable media or any other suitable local or remote memory component. Memory may store various objects or data including classes frameworks applications backup data business objects jobs web pages web page templates database tables repositories storing business and or dynamic information and any other appropriate information including any parameters variables algorithms instructions rules constraints or references thereto associated with the purposes of the server and its one or more hosted applications .

Further memory may store data associated with input and output ports of mashup applications in a ports repository . The data associated with the ports can be user defined or automatically generated metadata parameters tags or other data describing the interface of various mashup applications used in the mashup interface of the present disclosure. Memory may also store data associated with various connections either potential connections or previously established connections between mashup application interfaces in a connections repository . The data in the connections repository may include data associated with a history of connections established between mashup application ports a ranking of priority or in some cases popularity of the previously established connections and other relevant data associated with connections between components of mashup applications that may be used by learning mechanism or for identifying potential connections. The data stored in the ports repository and connections repository can be used for automatically creating connections between mashup application components or recommending possible connections to a user. Still further memory may include any other appropriate data such as VPN applications firmware logs and policies HTML files data classes or object interfaces unillustrated software applications or sub systems firewall policies a security or access log print or other reporting files as well as others.

The illustrated environment of also includes one or more clients . Each client may be any computing device operable to connect to or communicate with at least the server and or via the network using a wireline or wireless connection. Further as illustrated by client each client includes a processor an interface a graphical user interface GUI a client application and a memory . In general each client comprises an electronic computer device operable to receive transmit process and store any appropriate data associated with the environment of . It will be understood that there may be any number of clients associated with or external to environment . For example white illustrated environment includes three clients and alternative implementations of environment may include a single client communicably coupled to the server or any other number suitable to the purposes of the environment . Additionally there may also be one or more additional clients external to the illustrated portion of environment that are capable of interacting with the environment via the network . Further the term client and user may be used interchangeably as appropriate without departing from the scope of this disclosure. Moreover while each client is described in terms of being used by a single user this disclosure contemplates that many users may use one computer or that one user may use multiple computers.

As used in this disclosure client is intended to encompass a personal computer touch screen terminal workstation network computer kiosk wireless data port smart phone personal data assistant PDA one or more processors within these or other devices or any other suitable processing device. For example each client may comprise a computer that includes an input device such as a keypad touch screen mouse or other device that can accept user information and an output device that conveys information associated with the operation of the server and hosted application or the client itself including digital data visual information the client application or the GUI . Both the input and output device may include fixed or removable storage media such as a magnetic storage media CD ROM or other suitable media to both receive input from and provide output to users of the clients through the display namely the GUI

While is described as containing or being associated with a plurality of elements not all elements illustrated within environment of may be utilized in each alternative implementation of the present disclosure. For example although depicts a server client environment implementing a hosted application at server that can be accessed by client computer in some implementations server executes a local application that features an application UI accessible to a user directly utilizing GUI to tag parameters of mashup application ports or to view suggestions for possible connections between mashup applications. Additionally one or more of the elements described herein may be located external to environment while in other instances certain elements may be included within or as a portion of one or more of the other described elements as well as other elements not described in the illustrated implementation. Further certain elements illustrated in may be combined with other components as well as used for alternative or additional purposes in addition to those purposes described herein.

The two ports that are to be connected as requested by the user at may be associated with mashup applications that have either similar or disparate interfaces. If the two ports have disparate interfaces and have different structures a user with the appropriate technical capability may nonetheless establish a connection between the two ports at for instance by identifying the differences in format supported by the disparate interfaces and manually programming the logic required for a connection. In some implementations the connection between the ports may be established automatically such as by the mashup framework and its associated mashup interface learning mechanism illustrated in . Metadata associated with the established connection whether created manually or automatically may then be stored in a connections repository at . The metadata can include for example the names of the ports or associated mashup applications linked by the connection an identification number for a particular instance of the connection a description of the types of content that will be transferred across the connection or other data associated with the connection between the ports. The metadata can be stored in the connections repository automatically or in response to input from a user.

The user may also identify additional attributes of one or both of the two ports and input the attributes as tags or parameters in a port parameters data object or repository such as ports repository at . The metadata for each port can include the types of data supported by the port or mashup application the parameters for the particular connection established at the port the structure of the interface of the port or any other suitable data that may be used to identify the functionality of the port. The ports and connections tags provide information describing the connection created by the user and may subsequently be used as additional data at to identify a different potential connection for a particular port based on data in the connections and ports repository. One example of a process for identifying potential connections for a port is described in detail below in connection with . Further process may be repeated for each transaction related to mashup application ports in the system which expands the history of data connections and collection of data associated with the ports. Accordingly the data collected from connections previously established either automatically or manually can be leveraged to generate suggestions for new connections between mashup application ports. In some instances process may end at after data associated with a connection is stored in a ports repository for future access.

If relevant tags associated with the source port are not found process determines whether there are relevant tags associated with potential target ports at . If there are relevant tags associated with the source port a set of possible target ports to be connected with the source port is identified based on the relevant tags associated with the source port at . The possible target ports can be identified based on various criteria. For example target ports that share certain parameters or tags with the source port or that share a history of previous connections can be identified as potential target ports. Relevant tags associated with potential target ports can also be identified at . For example a search may be performed for potential target ports with certain matching tags with the source port. If relevant tags associated with potential target ports are found the set of potential target ports can also be expanded based on tags associated with the potential target ports at . If there are no relevant tags associated with potential target ports process determines whether there are previous connections associated with the source or target ports at . Identified target ports can be prioritized based on factors that may increase the chance of a successful connection between a source and target port. One possible factor for prioritizing potential target ports may be the number of previous connections established between the source and target ports.

Further metadata related to previous connections associated with the source port or potential target ports can be utilized to determine a selection of potential target ports to suggest to a user. First the process determines whether there are previous connections associated with the source or target ports at . If previously established connections exist it is determined whether some of the connections may be more relevant than others to the identification of target ports for the current source port. In other words a previously created connection between a source port and a target port may have more or less relevance to the current determination of potential target ports than previously created connections between the source port and other target port. For example a connection between two ports may have been previously established but the added value of the connection between those ports may have been minimal in a particular mashup environment. Accordingly that particular connection may not be as useful when determining potential connecting ports for either of the two ports from the previous connection. Still further particular connections that are considered useful in one scenario may not provide relevant information for identifying potential target ports in a different scenario depending on the data types and content of the ports under consideration. Various algorithms may be used to determine the utility of particular connections. For example the mashup framework may include a suggestion engine that applies a weighting formula to various factors associated with each connection. Some factors for determining the utility of a potential connection may include the frequency of previous instances of a certain connection whether previous connections of a particular combination occurred relatively recently the need of a user for connections of a certain type in a particular context the applicability of certain data types general preferences of one data format over another or the number of shared or related tags and parameters. These factors may be assigned different weights to reflect the utility of certain attributes of the connections in different scenarios.

Moreover a list of previous connections may be stored in a connections repository e.g. connections repository of that provides a ranking or metadata capable of being used to derive a ranking of the connections in terms of relevance to the source port. Alternatively process may dynamically determine a ranking of the previous connections at based on a set of criteria. In particular the learning mechanism of the present disclosure may identify a set of potential connections for the source port based on various possible criteria. For example previous connections can be ranked based on frequency of use or the number of times a connection was previously made. The ranking may reflect the popularity of a connection between particular ports which may provide an indication of the usefulness or ease of making the particular connection. In certain implementations identifying relevant connections can be a product of ranking parameter tags associated with the ports instead of or in addition to ranking connections. For example a tag that was created automatically may be given a lower ranking than a tag that was created manually. This ranking method may reflect the importance and influence of users who understand the dynamics and or syntax of a particular connection and who manually enter metadata associated with the port or connection. The ranking of connections or tags can also be based on user feedback provided by downstream users such as those who had previously received similar suggestions and their rankings of the relevance or appropriateness of the suggestions in their relative contexts. Still further the ranking of connections or tags for priority may be dynamically updated as more users create connections between mashup application ports. Based on the ranking of connections or tags the priority of previous connections can be identified at .

At a subset of potential target ports or potential connections can be selected from the identified set of potential target ports and connections for presentation to a user. In some implementations the subset of potential target ports or potential connections comprises the matching ports or connections for a particular source port that are most likely to yield a compatible and useful target port for connection. The selection of matching ports and connections can be based on a combination of factors such as the metadata tags associated with potential ports and connections the history of previous connections between potential ports rankings of previous connections or other metrics that define qualities deemed to be beneficial to users of particular mashup applications. The metadata may be constantly updated by learning mechanism as more connections are created over time.

In addition to the tagged parameters described above the metadata associated with a particular port may include other elements. For instance mashup applications that originate from different sources may be comprised of ports that have interface parameters of mismatching formats. If a mashup application outputs data in a format unrecognized by or incompatible with the receiving application a direct connection between the applications cannot be created. In certain implementations a bridge or function can be used to convert data between formats such as from a format associated with an output port to a format associated with an input port in order to create a valid connection between two ports with different formats. The functionality of a bridge for converting data from one format to another can be included in the parameters or definition of a connection between two particular ports. In other words the definition of a connection between ports may include the underlying technology for converting data flowing from the source port to the target port.

In some instances however interface parameters that are mapped to each other such as parameters and may comprise mismatching or noncompatible formats which may complicate the transfer of data from source to target. For example a data report may be transmitted from one mashup application to another through a connection between two ports of the mashup applications. While both the source and target mashup applications may be configured to handle data reports the source mashup application may generate data reports with identification numbers using six digits while the target mashup application may be configured to process data reports with identification numbers using eight digits. The target application may be able to receive the identification numbers with six digits through the interface parameters of the target application but the target application may require an additional two digits in the received identification number to process the number according to the eight digit configuration required by the target application business logic. Accordingly the identification number that is sent from the source application to the target application may need to be converted such that additional digits are added to the number to comply with the requirements of the target application parameters.

As represented in the model in a transformer element can be defined as an intervening component for data flows between the output interface parameter and input interface parameter . The transformer element is a data manipulation entity that can be applied on a port parameter to conform outgoing or incoming data to a particular format as required by a connected port. In the illustrated example data from an output port is received at an input transformer interface parameter and the data is converted to an appropriate format to be received by input port after the data is transmitted from output transformer interface parameter to interface parameter . The transformer element can be added to a connection by a user such as at design time in a mashup model environment using any appropriate method such as via a drag and drop or context menu mechanism. The transformer element can also be automatically included by business logic of a mashup framework. In some implementations a mashup framework may provide suggestions of possible connections to a user and the suggestions may include the logic for the transformer element to properly complete the connection. The transformer element may not be included in some connections that do not require conversion of data formats such as the connection between interface parameters and .

The transformer element can further be defined as a parameter of a mashup application port. From an external perspective as depicted in the inclusion of a transformer element in the parameters of a port may be viewed as a new instance of the port and a user may directly access a mashup component with a port that includes a transformer without the need to program additional logic for converting data into an appropriate format. In the illustrated example a transformation structure may represent a module that includes elements associated with a particular port . Included in the transformation structure are the base parameters of the port and as well as a transformer element . The transformer element can be configured to receive data in a particular format at and convert the data into a format compatible with base parameter . The transformer element can include a transformer out parameter that directs a data flow for the converted data into base parameter . An external port associated with a different application and interface may be connected to the base port through the mapped parameters associated with the ports. In some implementations interface parameter of port can connect directly to the port instance represented in transformation structure because the software logic associated with transformer element is represented as part of the base port and not as a separate component. The port instance is exposed as a conventional or duplicate port and interface parameter may be mapped to transformer in parameter as a connection between ports and .

The mashup framework can provide a design time environment for managing the exposure of mashup application ports to users and presenting an appropriate interface to users for working with mashup applications. The functionality of the mashup framework can be achieved using various implementations and an example of a mashup environment provided by mashup framework is depicted in . In general the mashup framework as illustrated in is a set of extendable services that provide the ability to define and persist connections and ports between components of applications and discover possible matching connections between ports and over existing connections. The mashup framework can also include a runtime processor for processing the defined connections and transferring output mashup events to appropriate mashup input events. Here a runtime processor can be a runtime service that manages the propagation of events sent by sources such as the components of mashup applications. The runtime processor can locate target application components that are to be connected to source application components and build the appropriate target events during execution of the mashup connections.

Turning to the illustrated example illustrates an example environment for mashup framework . The illustrated environment includes or is communicably coupled with one or more clients . The clients may access the components of the mashup framework depicted in remotely through a server as a hosted service or locally at the server. Specifically mashup framework may be represented as particular user interface elements to a client . The design time elements of the user interface presented to the user may include a mashup store that provides a ports store and a connections store . Specifically the mashup store can be an interface that serves as the central access point to expose design time services of the mashup framework . The mashup store ports store and connections store are modules provided to or accessible by a client and can be implemented as application programming interfaces APIs for exposing the logic of the system underlying the mashup framework . In particular the mashup store components provide accessible services to a user via a user interlace so that the user can obtain information concerning available mashup application ports and connections and generally access the logic and functionality provided by mashup framework . For example the mashup store APIs may allow a user to retrieve a list of possible connections for a specific port identify or search for exposed ports modify a port write data to parameters of a port obtain information associated with particular ports or connections or utilize other tools or services provided by mashup framework for managing a mashup environment.

The client may also access or generally use applications such as mashup applications through the mashup framework . The applications may be hosted applications executed on a hack end server or on the same server that stores the mashup framework . The applications may consist of different application types and and client may use the mashup framework to create or modify connections between applications of different types using logic provided by the mashup framework such as via a transformer element as described above in connection with for example.

The mashup framework can also provide a mechanism for presenting the various applications and their components to client as accessible ports for identifying and creating connections between mashup applications. In particular a port provider identifies and exposes components associated with applications to the client or other components of the system. Moreover when new content in a repository such as additional updated parameters or connections associated with certain ports is introduced to mashup framework the port provider can expose the new content as a set of ports available to a client . Similarly a connection provider exposes and makes available any information associated with created connections within the mashup framework . The port provider and connection provider can be implemented as service provider interfaces SPIs that can be implemented by content repositories in mashup framework to expose ports or connections to other elements of mashup framework including client . As the ports and connections of applications are modified through the mashup framework the changes may be saved in ports repository or connections repository which are services configured to expose and maintain the persistency of the ports and connections within mashup framework .

Further the port provider and connection provider modules may be coupled with a port provider manager and a connection provider manager respectively. The port provider manager and connection provider manager may be components of mashup framework that are independent of a particular system or application and manage the port provider and connection provider as ports and connections are exposed to the mashup store for use by client . Still further mashup framework can include an internal implementation of the port provider which may be a readable and writable port provider responsible for managing the local representation of ports. Thus internal port provider may manage additional configuration data associated with a particular port beyond any parameters declared by a mashup component through port provider . For example internal port provider can track additional metadata associated with a port such as new instances of a port transformer elements used in an instance of a port the creation of additional tags in the parameters of a port or other data defined separately from the initial declaration of the port through port provider .

The mashup framework can also provide a discovery or suggestion engine which contains the logic for the learning mechanism described in the present disclosure. In general discovery engine applies various algorithms for determining appropriate ports and connections to suggest to client . The algorithms may be based on a history of connections between certain ports created by users or created automatically through the learning mechanism of mashup framework . The suggested ports and connections may also be determined based on tagged parameters associated with the ports or connections or on other metadata associated with the mashup components. Finally various components such as mashup runtime controller a mashup runtime authoring environment controller or a runtime connection repository may be incorporated into the mashup environment as necessary to execute at runtime the arrangement of mashup applications and connections between ports created using mashup framework . In general the runtime components are application specific and can consist of Java script or client side logic that processes mashup connections trigger the data flows associated with the connections and provide rendering for the runtime user interface.

The preceding figures and accompanying description illustrate example processes and computer implementable techniques. But environment or its software or other components contemplates using implementing or executing any suitable technique for performing these and other tasks. It will be understood that these processes are for illustration purposes only and that the described or similar techniques may be performed at any appropriate time including concurrently individually or in combination. In addition many of the steps in these processes may take place simultaneously and or in different orders than as shown. Moreover environment may use processes with additional steps fewer steps and or different steps so long as the methods remain appropriate.

In other words although this disclosure has been described in terms of certain embodiments and generally associated methods alterations and permutations of these embodiments and methods will be apparent to those skilled in the art. Accordingly the above description of example embodiments does not define or constrain this disclosure. Other changes substitutions and alterations are also possible without departing from the spirit and scope of this disclosure.

