---

title: Active mail thread
abstract: A computer-implemented method includes, on a client system, receiving an email message that is a part of an email thread. The received email message includes gadget instructions and associated gadget data. In response to user selection of the received email message, updated gadget data is obtained and the gadget instructions are executed. Also in response to user selection of the received email message, an instance of a gadget associated with the gadget instructions in the email message is displayed in the client application. The displayed gadget is updated to reflect the obtained updated gadget data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08875029&OS=08875029&RS=08875029
owner: Google Inc.
number: 08875029
owner_city: Mountain View
owner_country: US
publication_date: 20100816
---
The present invention relates generally to providing information to computer users and more specifically to executing gadgets from email threads.

Many applications such as calendar applications voting applications task list applications gaming applications and package tracking applications are available on websites. Typically a user has to login to the website hosting the application to access the application. It is inconvenient and time consuming for a user to visit and login to a website each time the user desires to access a particular application.

It is also difficult and inconvenient for users to collaborate with other users on websites that host standalone applications. The users who wish to collaborate with each other must maintain user accounts at the same website. This may make it difficult for the users to collaborate because some users may not want to go through the trouble of signing up for an account and some users may disagree on which website to use. The users who do not have an account will not be able to participate in the collaboration or even see useful information from the collaboration. For example users without a user account at a website hosting a voting application would not be able to vote see the voting options or see the result of the vote on the website. Users who have an account at a respective website and wish to collaborate with other users must take the time to locate the other users and verify the identities of the other users. For example in a voting application users must have some way of verifying that only authorized users are voting otherwise the voting result may be untrustworthy.

Websites that host applications may not provide a user with a record of a collaboration. Many websites may periodically delete the record to save resources or may only make the record available to a subset of users who were involved in the collaboration. For example only the user who created a vote may have a record of the vote results. The record of the collaboration depending on the website may also be presented in many different ways and with varying degrees of detail. Some websites may not allow the record to be easily exported and thus when the website shuts down the record is lost.

Email is a widely used form of communication and collaboration. Accordingly it would be highly desirable to have a way to have a user s email mailbox be a container for applications.

The above deficiencies and other problems associated with web applications are reduced or eliminated by the disclosed method and devices. In accordance with some embodiments a system and method are provided for an email application that executes gadgets stored in email messages. The email application acts as a container for executing gadget applications contained in email messages. When an email message of an email thread is opened the container application detects and aggregates gadget data from one or more messages in the message thread. The gadget is executed and the executing gadget accesses the aggregated gadget data. The executing gadget displays an output with the aggregated gadget data. The executing gadget may be interactive and accept user input. Updated gadget data is sent in an email message to other users in the message thread. Such methods allow a user to access applications from their email application instead of having to visit and login to websites hosting applications. Such methods also allow users who do not have email applications capable of executing gadgets to receive useful information from the gadgets. Such methods further provide users with a complete record of the collaboration. Such methods also allow users to quickly and easily collaborate with other users.

A computer implemented method is executed on a client system having one or more processors and memory storing programs executed by the one or more processors. The client system is connected to a server system through a network and manages a client application. The method includes receiving an email message that is a part of an email thread. The received email message includes gadget instructions and associated gadget data. The method includes obtaining updated gadget data in response to user selection of the received email message. The method also includes executing gadget instructions in response to user selection of the received email message. The response to user selection also includes displaying in the client application an instance of the gadget associated with the gadget instructions in the email message. The response to user selection furthermore includes updating the displayed gadget to reflect the obtained updated gadget data.

According to some embodiments a computer implemented method for inserting a gadget into an email message is executed on a client system having one or more processors and memory storing programs executed by the one or more processors. The client system is connected to a server system through a network and manages a client application. The method includes displaying a message composition interface for composing a message. The interface includes a gadget insertion option. The method also includes in response to user selection of the gadget insertion option sending a request to a server system for a list of gadgets receiving the list of gadgets and displaying the received list of gadgets. The method further includes in response to user selection of a respective gadget of the list of displayed gadgets inserting instructions corresponding to the selected gadget and corresponding gadget data into the composed message.

Methods and systems for active mail threads are described. Reference will be made to certain embodiments of the invention examples of which are illustrated in the accompanying drawings. While the invention will be described in conjunction with the embodiments it will be understood that it is not intended to limit the invention to these particular embodiments alone. On the contrary the invention is intended to cover alternatives modifications and equivalents that are within the spirit and scope of the invention as defined by the appended claims.

Moreover in the following description numerous specific details are set forth to provide a thorough understanding of the present invention. However it will be apparent to one of ordinary skill in the art that the invention may be practiced without these particular details. In other instances methods procedures components and networks that are well known to those of ordinary skill in the art are not described in detail to avoid obscuring aspects of the present invention.

In some embodiments a gadget is an application or computer program that is executed in an environment that manages multiple gadgets. Stated in another way a gadget is an application that provides services without needing its own independent application to be launched and instead is executed by an application that manages multiple gadgets. In other words a gadget is an application that is executed in a container application such as a mail application that supports the execution of gadgets. A container as discussed in further detail below includes an API application programming interface that allows a gadget to instruct the container to perform various functions. For example a gadget may issue one or more commands to the container to read gadget data from one or more messages in a message thread. In some embodiments a gadget is an application that uses gadget data encoded in portions of one or more email messages as a gadget MIME type. In some embodiments a gadget is a java script application that is executed on a client system. The gadget may be written in JavaScript a trademark of Sun Microsystems Inc. ECMAScript the specification for which is published by the European Computer Manufacturers Association International VBScript a trademark of Microsoft Inc. and or any other client side scripting language. In other words gadgets include programs or procedures containing JavaScript ECMAScript instructions VBScript instructions or instructions in another programming language suitable for rendering by the browser or another client application. In some embodiments the container inserts gadget instructions and gadget data into an email message encoded as a gadget MIME type. In some embodiments a gadget is a shared task list a calendar scheduling application a board game a live meeting agenda an invention application and a shipment tracker.

A MIME or multipurpose internet mail extension is a communication protocol for transmission of data in various forms such as text images sounds video and programs. MIME allows files such as images sounds video and programs to be transported via e mail. Mapping messages into and out of MIME format is typically done automatically by an email client or by mail servers. The MIME protocol defines a collection of e mail headers for specifying the content type and attribute of messages. The MIME protocol allows for the creation of new content types and other MIME attribute values.

As used herein a gadget MIME type is a custom protocol for the transmission of gadgets and gadget data via e mail messages. It is noted that only client applications that are capable of reading gadget MIME types can recognize and execute gadgets from email messages that include gadget code and gadget data encoded as a gadget MIME type.

It should be appreciated that the gadget server and the email server may be implemented as a single server or a distributed system of multiple computers. However for convenience of explanation the gadget server system and email server system are described below as being implemented on separate computers.

The communication network s can be any wired or wireless local area network LAN and or wide area network WAN such as an intranet an extranet or the Internet. It is sufficient that the communication network provides communication capability between the client devices the gadget server system and the email server system . In some embodiments the communication network uses the HyperText Transport Protocol HTTP to transport information using the Transmission Control Protocol Internet Protocol TCP IP . HTTP permits client devices to access various resources available via the communication network . The various embodiments of the invention however are not limited to the use of any particular protocol.

In some embodiments the gadget server system includes a front end a gadget module and a gadget database . In some embodiments the gadget server system sends receives and executes gadgets.

The front end provides an interface between the gadget server system the client devices and the email server system . In some embodiments the front end is configured to receive gadgets . In some embodiments the front end is configured to receive requests for one or more gadgets and to send one or more gadgets or a link to a gadget to the client devices or the email server system .

The gadget database stores gadgets . In some embodiments the gadget database includes multiple gadget databases or the gadget database is partitioned with each partition or database storing gadgets corresponding to categories of gadgets. For example all gadgets relating to games could be stored in a partition or database. In some embodiments the gadget database stores an instance ID and or a gadget ID for each gadget in the gadget database. In some embodiments the gadget database stores links to respective gadgets . The gadget ID identifies the gadget and the instance ID identifies the particular instance of the gadget. In some embodiments the instance ID includes information that identifies when the gadget was first used.

The gadget module maintains at least some of the gadgets in the gadget database . In some embodiments the gadget module assigns instance IDs and gadget IDs to gadgets. In some embodiments the gadget module responds to a request for a gadget by returning a link to the gadget . In some embodiments the gadget module responds to a request for a gadget by returning the instructions corresponding to the gadget .

In some embodiments the email server system includes a front end an email module an email database and a container . In some embodiments the email server system receives requests for email messages or email threads from the client devices or the gadget server system and returns emails or email threads . The email server system also receives and stores emails and email threads in the email database .

The email database stores email threads and email messages . In some embodiments the email database includes multiple email databases or the email database is partitioned with each partition or database storing email messages and email threads . In some embodiments the email messages and the messages belonging to the email threads include a section containing content encoded as a plain text MIME type and section containing content encoded as a gadget MIME type. In some embodiments the section containing content encoded as a gadget MIME type includes instructions corresponding to a gadget application and gadget data. In some embodiments each message in an email thread is given a thread ID that identifies the messages as belonging to a respective thread.

The email module maintains at least some of the email messages and email threads in the email database . In some embodiments the email module assigns a thread ID to an email messages in a thread of messages. In some embodiments the email module sends instructions to a client corresponding to an email application . The email application allows a user to draft send and receive e mails. In some embodiments the email application is a web based application that a user can use a web browser to access. In some embodiments the email application is a mail client application. A mail client application should be distinguished from a web based email application. Although e mail communication can be performed with a web browser the web browser is actually used to access the mail client application and not a web based application. In some embodiments the email module inserts gadget instructions and gadget data into an email message encoded as a gadget MIME type. In some embodiments the email application inserts gadget instructions and gadget data into an email message encoded as a gadget MIME type.

The container is a module or application that provides an environment for gadgets to be executed in and performs various tasks on behalf of a gadget. The container includes a container API application programming interface that defines a library of functions that a gadget can call to instruct the container to perform various tasks. The container API is discussed in greater detail in the discussion of . The container executes gadgets retrieves gadget code from a remotely located server gathers gadget data from remotely located servers gathers gadget data from one or more messages in a message thread constructs new email messages encodes gadget data and gadget code as a gadget MIME type inserts gadget data and gadget code into email messages as a gadget MIME type and sends email messages.

In some embodiments the container retrieves and executes gadgets from the gadget server system . In some embodiments the container retrieves and executes gadgets located in an email message or email thread . In some embodiments the execution of the gadget includes displaying user interface elements. The container accepts function calls and commands from an executing gadget. The function calls and commands are defined by a container API . The container API is discussed in greater detail in the discussion of .

The container is responsible for gathering gadget data. In some embodiments the container gathers gadget data from email messages and email threads contained in the email database . For example the container API could include functions to read message write messages get messages get number of message get thread ids get user gadget preferences get thread preferences to save states to load states and to post updates. As discussed further herein the container extracts gadget data from plain text and or gadget MIME type portions of email messages. Stated in another way the container reads gadgets data from a portion of an email message encoded as gadget MIME type and or from a portion of an email message encoded as a plain text MIME type. In some embodiments the container retrieves gadget data from non email sources that are remotely located from the server system . For example the container could query a server for a stock price for a document for directions or for movie times.

The container encodes and inserts gadget data into email messages. In some embodiments the container creates new email messages and inserts gadget instructions and gadget data into an email message encoded as a gadget MIME type. In some embodiments the container sends a new email message or instructs another application to send the new email message.

In some embodiments the container is an application e.g. javascript embedded within a frame or iframe. In some embodiments the container is sent to the client devices when the client devices request an email message or an email thread . In some embodiments the container is embedded in the email application . In some embodiments the container is sent to a client in response to a client request for the container .

A user interfaces with the gadget server system and the email server system at a client device . The client devices may be any suitable computer devices that are capable of connecting to the communication network such as computers desktop computers laptop computers tablet devices netbooks internet kiosks personal digital assistants mobile phones gaming devices or any other device that is capable of receiving emails from the email server system . The client devices typically include one or more processors non volatile memory such as a hard disk drive and a display. The client devices may also have input devices such as a keyboard and a mouse not shown .

In some embodiments the client device includes an email application email threads email with content encoded as a plain text MIME type email with content encoded as a plain text MIME type and content encoded as a gadget MIME type and a container .

A respective client may contain at least one email application for composing receiving viewing email messages and executing gadgets. The email application is software application that permits a user to interact with the clients and or network resources such as the gadget server system and email server system to perform one or more tasks. In some embodiments the email application is a web application that is accessed by a web browser. The browser application can be any browser e.g. Google Chrome or other type of application that permits a user to search for browse and or use resources e.g. web pages and web services identified by a URL universal resource locator . Similarly the term URL means a network address or location of a document. In this context the term document means any document or content of any format including but not limited to text image audio video etc. that may be used by a web browser or other applications. In some embodiments the email application is a stand alone client application.

In some embodiments the email application inserts gadget instructions and gadget data into an email message encoded as a gadget MIME type.

In some embodiments the email application includes a security module for determining which gadgets can be executed. For example the security module could ensure that only user authorized gadgets gadgets from certain domains or that only gadgets in emails received from users in the recipient s address book can be executed. Further security criteria for gadget execution is discussed in the discussion of .

In some embodiments a client includes threads of emails email messages with content encoded as a plain text MIME type and emails messages containing both content encoded as a plain text MIME type and content encoded as a gadget MIME type. Email messages with content encoded as a gadget MIME type is discussed further herein.

In some embodiments the user client includes a container . The container provides an environment for the applications to be executed in and performs various functions for an executing gadget. The container includes a container API application programming interface that defines a library of functions that a gadget can call to instruct the container to perform various tasks. The container API is discussed in greater detail in the discussion of . The container performs similar functions as those described with respect to container . The container executes gadgets retrieves gadget code from a remotely located server gathers gadget data from remotely located servers gathers gadget data from one or more messages in a message thread constructs new email messages encodes gadget data and gadget code as a gadget MIME type inserts gadget data and gadget code into email messages as a gadget MIME type and sends email messages.

In some embodiments the container is included in the email application . In some embodiments the container is a separate application and the email application invokes the container application . In some embodiments the container is a plug in that is installed on the email application or a web browser. In some embodiments the email application does not include or invoke a container and thus is not able to execute gadgets. In some embodiments the container is executed when a user views an email containing a gadget MIME type.

Executing gadgets from an email container provides many advantages to email users. An email mailbox provides a convenient location for the execution of gadgets. A user can save time by not having to visit multiple websites for applications. In addition a user does not need to sign up for user accounts at websites that host applications.

Executing gadgets from an email container also facilitates collaboration among users. Email is a widely used and trusted form of communication. A user can easily find and communicate with other users. The user can also know based on past email messages the identity of the people they are collaborating with. In addition users who use email clients that are not capable of executing gadgets are capable of viewing useful information generated by gadgets. Thus the information generated from a collaboration that uses gadgets can be easily disbursed to a great number of users.

Many users may want a record of a collaboration for future reference. Storing gadgets and gadget data in email messages ensures that each user of a thread retains a complete record of a collaboration. Storing gadgets and gadget data in email messages also enables a user to easily retrieve gadget information through the use of email search functions.

Email providers also benefit from gadget execution from email messages by providing more features to users at a relatively low cost. Users who perform more functions from within an email application are more likely to use and store information on the email system.

Attention is now directed to which illustrates an example container API according to some embodiments. The container API allows programmers to create gadgets that can be stored in email messages and executed by an email application that includes a container application. The container API Application programming interface defines various functions that allows a gadget to interface with the container application e.g. and . The container application includes the functions defined in the container API. A gadget uses functions defined in the container API to instruct the container to perform various tasks. The container API in defines a read interface and a write interface . Each interface includes and defines one or more function calls. The read interface includes functions to read gadget data from one or more sources. For example the read interface may define a getNumMessages function to have the container return the number of messages in a thread. In another example the reader interface may define a GetMessage function to have the container retrieve a particular message containing gadget data. The read interface also includes functions to save and load gadget execution states. The write interface provides functions to write gadget data to a new email and to send the new email to all of the participants of an email thread. The gadget data is inserted into an email message encoded as a gadget MIME type. It is noted that provides a non limiting example of a container API and that the container API is not limited to the functions described in .

Attention is now directed to which illustrates a block diagram of an email message containing content encoded as a plain text MIME type and content encoded as a gadget MIME type . The email messages can be stored on the client device or the email database of the email server system . The portion of the email message encoded as a plain text MIME type includes a header and plain text . In some embodiments the header includes a message ID a thread ID and a MIME type . In some embodiments the message ID identifies the particular email message. In some embodiments the thread ID identifies the thread that the respective message belongs to. In some embodiments the message ID and the thread ID are assigned to the message by the email module located on the email server system . In some embodiments the MIME type defines the MIME type of the respective portion of the message . For example the portion of the message could be encoded as a plain text MIME type. In some embodiments the header includes additional information such as a timestamp of when the message was sent the sender of the message and a list of recipients of the message. The plain text is text such as hello world. When email message is opened by a client application capable of viewing plain text MIME type messages the plain text message is displayed. In some embodiments the content encoded as a plain text MIME type is generated and inserted into message by an email application or .

The portion of email message that is encoded as a gadget MIME type allows gadgets and gadget data to be transported within email message . In some embodiments the portion of the email message encoded as a gadget MIME type includes a header a link to gadget code or gadget code a gadget ID an initialize section and gadget data . The gadget MIME type portion of message is generated and inserted into message by a container application or or an email application or .

The gadget header includes a MIME type that defines the MIME type of the portion of the email message . In this example MIME type is a gadget MIME type. A gadget MIME type is a custom protocol for the transmission of gadgets and gadget data via e mail.

In some embodiments the link to gadget code is a URI or URL to a gadget located on a remote server e.g. Gadget Server System . In some embodiments the actual gadget code corresponding to a gadget is included in the gadget MIME type portion of the email message . In some embodiments the link to gadget code or gadget code is obtained from the gadget module on the gadget server system .

In some embodiments the gadget ID identifies the instance of the gadget . For example this may be necessary when email message or the thread that email message belongs to includes multiple gadgets. In some embodiments the gadget ID is used to determine the identity of a gadget when there are multiple instances of the same gadget in the thread. For example a thread of messages may include two voting gadgets that cover different topics. In some embodiments the gadget ID is used to identify messages that include gadget data corresponding to a gadget. In some embodiments the instance ID is used to identify a gadget on the gadget server system . In some embodiments the gadget ID is used to identify when the gadget was first executed. In some embodiments the gadget ID is generated when the gadget is inserted into an email or when the gadget is first executed. In some embodiments the gadget ID is obtained from the gadget module .

In some embodiments the initialize section includes initial values that are used by gadget to initialize certain values and render the user interface. For example the initial values could be a message or title of the gadget or the initial values of some count. In some embodiments the initialize section is executed first each time the gadget is executed. In some embodiments the initialize section is present in each email message of a thread of messages. In some embodiments the initialize section is present in a single message of the a thread of messages.

In some embodiments the gadget data includes data used by the gadget . For example the gadget data could include a vote count or a state of a game. For example gadget data for a voting gadget might include instructions for incrementing or decrementing a vote. In another example gadget data for a shipping tracking gadget includes a package tracking number. In yet another example the gadget data for a weather gadget might include zip codes and a link to a weather website that can retrieve weather conditions for the zip codes. In some embodiments the gadget data is written in response to a user interaction with respect to the gadget e.g. a user selecting a voting button or a user entering a chess move .

It is noted that only client applications that are capable of handling gadget MIME types can recognize and execute gadgets that are included in an email messages encoded as a gadget MIME type. When email message is opened by a client application that is capable of executing gadgets the plain text is displayed and the output of the gadget is displayed. It is noted that information such as the header MIME type link to gadget code or gadget code gadget id initialize section and gadget data is preferably not displayed. When email message is opened by a client application that is not capable of executing gadgets only the plain text is displayed. As discussed herein there are many advantages to including gadgets and gadget data in email messages.

Attention is now directed to which illustrates an example of an email message containing a section encoded as a plain text MIME type and a section encoded as a gadget MIME type . The section encoded as a plain text MIME type includes a plain text output Beer at TGIF 1 .

The section of email message encoded as a gadget MIME type includes a gadget instance ID a link to a gadget and gadget data .

As previously discussed the gadget instance ID is used to uniquely identify an instance of a gadget and used to determine when a gadget was first executed. The gadget instance ID can be represented by any combination of letters and numbers.

The link to gadget is a reference to gadget code on the gadget server system . In this example the gadget referenced by the gadget link is a voting gadget. When email message is opened by an email client capable of handling gadget MIME type messages the gadget code referenced by the gadget link is retrieved and executed. In some embodiments the gadget instance ID is used in conjunction with the gadget link to determine which gadget to access or retrieve.

Gadget data includes data used by the gadget referenced by the link . In this example gadget data includes data to increment a vote count for Beer at TGIF The initialize values includes text Beer at TGIF for the output of the gadget.

When email message is opened by a client application that is capable of executing gadgets the plain text the initial values and the output of the gadget are displayed. It is noted that information such as the plain text MIME type gadget MIME type gadget instance id gadget data is normally not displayed depending on the client application settings. It is also noted that not all instructions in the initialize section are displayed only output instructions are displayed. When email message is opened by a client application that is not capable of executing gadgets only the plain text is displayed. As discussed herein there are many advantages to including gadgets and gadget data in email messages.

Attention is now directed to which is a block diagram illustrating the data flow of gadget data between a container and a message thread according to some embodiments. It is noted that in this example the message thread and the container may both be located on the same system or remotely located from each other. The message thread may be on a client device or stored in the email database on the email server system . The container may be on the client device or on the email server system . The container is included in an email application or invoked by the email application.

As shown in message thread includes message and message . Each message includes content encoded as a plain text MIME type Plain Text MIME type and Plain Text MIME type and content encoded as a gadget MIME type gadget MIME type and gadget MIME type . The portion of the messages containing content encoded as a gadget MIME type includes gadget code Gadget Code and Gadget Code gadget data Gadget Data and Gadget Data and a gadget ID . In some embodiments one or more messages of the message thread that include a portion encoded as a gadget MIME type also includes an initialize section within the gadget MIME type portion.

When the container detects that an email message in a thread contains an gadget MIME type and an initialize section the container determines the gadget ID corresponding to the gadget code of the message and aggregates gadget data Gadget Data and Gadget Data from messages in the thread that include gadget data corresponding to gadget ID . Stated in another way the container aggregates gadget data in a message thread corresponding to a respective gadget ID and then executes the gadget code corresponding to the gadget ID . The executing gadget accesses the aggregated data and performs various operations with the aggregated data .

The container stores the gadget data gathered from the messages in the thread as aggregated gadget data . In some embodiments the aggregated gadget is a collection of XML documents e.g. XML and XML with each document containing gadget data from a respective message in the message thread . In some embodiments the aggregated gadget data is stored as a single XML document that contains the gadget data from one or more messages in the thread . It is noted that the gadget data in thread is not necessary in the form of a XML document. In some embodiments the aggregated gadget data is ordered by respective message arrival times. For example the gadget data corresponding to the most recent message in the thread could be first.

In some embodiments the container detects the gadget MIME type and the initialize section in a message in response to user selection of any message of the message that includes the message .

The container includes a write interface and a read interface that allows a gadget to interface with the container . The write interface and the read interface each include functions that the executing gadget code may call to instruct the container to perform various functions. The functions corresponding to the write interface and the read interface are defined in the container API.

The container performs tasks in response to the executing gadget s function calls. For example in response to a read interface command issued by the executing gadget the container may determine the number of message in message thread and return that number to the executing gadget . In another example the container may return apportion or all of the aggregated gadget data to the executing gadget . For example the container may gather votes contained in the gadget data of multiple email messages in the thread save the votes as aggregated gadget data and return the vote count to the executing gadget in response to one or more functions calls by the executing gadget . In some embodiments the container gathers data not located in the thread of email messages and returns the data to the executing gadget . For example the container may obtain weather information from a weather site or package tracking information from a shipping website and return that information to the executing gadget. In some embodiments the container access email messages that are remotely located from the client. For example the email messages may reside on the email server .

In some embodiments executing gadget issues one or more commands to the write interface of the container to generate a new message with content encoded as a plaint text MIME type and content encoded as a gadget MIME type . The container inserts the gadget data into the portion of new message encoded as a gadget MIME type . In some embodiments the content encoded as a plain text MIME type includes a plain text message corresponding to the output of the executing gadget or the new gadget data . The new message is sent to one or more participants in the thread. In some embodiments the container sends the new message to each recipient in the thread or issues commands to an email application to send the new message to each recipient in the thread. The new message provides updated gadget data to the one or more participants in the thread. As discussed herein there are many advantages to executing gadgets from email messages.

As described below the method provides a way to execute gadgets located in email messages. Such method allows a user to access applications from their email application instead of having to visit and login to websites hosting standalone applications. Such methods also allow users who do not have email applications capable of executing gadgets to receive useful information from the gadgets. Such methods further provide users with a complete record of the collaboration. Such methods further facilitate user collaboration. It is noted that the examples given with respect to A A A B and B are nonlimiting.

An email message that is a part of an email thread is received . The received email includes gadget instructions and associated gadget data . In some embodiments the email thread includes a plurality of messages and at least two of the email messages include gadget instructions and associated gadget data. In some embodiments received email includes a first section containing content encoded as a plain text MIME type and a second section containing content encoded as a gadget MIME type . In some embodiments the gadget instructions and the gadget data are contained in the second section . In some embodiments at least one message in the thread of the message includes gadget instructions and gadget data corresponding to two or more gadgets. In some embodiments the instructions corresponding to the gadget includes a gadget instance ID that is obtained from a server system . In some embodiments the gadget instance ID is obtained from the Gadget Server System . In some embodiments the instructions corresponding to the gadget comprises a link to gadget code on a server system. In some embodiments the gadget instructions include gadget code corresponding to the gadget. In some embodiments the gadget instructions correspond to a gadget that is collaborative . In some embodiments the gadget instructions correspond to a gadget that is selected from a group consisting of voting gadgets gaming gadgets calendar gadgets shipment tracking gadgets and todo list gadgets .

In some embodiments in response to user selection of the received message updated gadget is obtained . In some embodiments the updated gadget data is gadget data that is aggregated from one or more messages in the email thread. In some embodiments the container detects that the received message includes a portion containing a gadget MIME type. In some embodiments the container detects that the received message or another message in the corresponding message thread includes both a portion containing a gadget MIME type and an initialize section in the gadget MIME TYPE portion. As discussed above the container may be located on the server or the client system. In some embodiments the updated gadget data is aggregated from one or more messages in the thread of messages . To aggregate as used herein means to collect or gather information from one or more sources into a single collection. In some embodiments the container identifies one or more gadget identifiers corresponding to one or more gadgets in the received message . In some embodiments the container identifies the gadget identifier from a message other than the received message in the email thread. In some embodiments the container aggregates and stores gadget data from one or more messages in the email thread corresponding to the one or more identifiers . In some embodiments the container stores aggregated gadget in one or more XML documents each document containing gadget data from a respective message in the email thread. In some embodiments the container stores aggregated gadget data in a single XML document. In some embodiments the one or more XML documents are stored on the client device or on a server remotely located from the client device. In some embodiments the gadget data is ordered by the corresponding timestamp of the messages in the email thread.

In some embodiments the updated gadget data is aggregated from the gadget MIME type section of one or more messages in the email thread . In some embodiments the updated gadget data is aggregated from plain text contained in one or more messages in the email thread . In some embodiments the updated gadget data is a combination of data aggregated from messages with content encoded as the plain text MIME type and content encoded as the gadget MIME type and messages that only contain content encoded as the plain text MIME type. In some embodiments the updated gadget data is a combination of plain text extracted from one or more messages in the email thread gadget data extracted from one or more messages in the thread of messages and information obtained from one or more servers remotely located from the client device. The plain text is extracted from the portion of the one or more messages encoded as a plain text MIME type. The gadget data is extracted from the portion of the one or more messages encoded as a gadget MIME type. The executing gadget can aggregate information from any combination of sources.

In some embodiments the updated gadget data is obtained from a server remotely located from the client system . For example the gadget may track the shipment of a package and may obtain shipping information from a shipping site. In another example a weather gadget may obtain weather data from a weather tracking site. In this example the gadget data includes the location of the remote server i.e. a URL and information i.e. the zip code to obtain the updated gadget data i.e. the current weather at the zip code . In some embodiments the gadget data includes requests used to obtain data from servers remotely located from the client device. For example the gadget data may include a HTTP request string that the container submits to a server remotely located from the client device. In some embodiments the container aggregates information of email messages in the thread and one or more servers remotely located from the client.

In some embodiments in response to user selection of the received email message the gadget instructions are executed . In some embodiments the gadget is executed automatically when a user selects a message. In other words a user selects a message and without any further user action the message is displayed and the gadget is executed. Each gadget is executed only once even though the gadget code for the respective gadget may be in each message of the message thread. In some embodiments all of the gadgets in the most recently received message are executed. For example the most recently received message may include three different gadgets. In some embodiments only the gadgets from the user selected message are executed.

In some embodiments the gadget is executed by a container application and . The container application includes functions to execute gadgets to read gadget data from one or more email messages gather updated gadget data from servers remotely located from the client gather gadget data from one or more messages in a message thread to create a new email message to encode gadget data as a gadget MIME type to insert gadget data to email messages as a gadget MIME type and to send email messages. In some embodiments the container application is located on the client system. In some embodiments the container is a stand alone application a web browser plug in or is embedded in the client application . In some embodiments the container application is located on a server remotely located from the client system. In some embodiments the container is retrieved and executed in response to user selection of the received email message. In some embodiments the container identifies gadget instructions from the portion of the selected email encoded as a gadget MIME type. In some embodiments the instructions corresponding to the gadget comprise a link to gadget code on a server system and executing the gadget instructions includes retrieving gadget code referenced by the gadget instructions from the server system .

By executing a gadget from within an email application a user does not have to visit other websites to access similar applications. E mail is a widely used form of communication and users often want to collaborate with people they e mail with. By executing gadgets from within an email application a user has access to a large number of users to collaborate with. A user can also based on e mail communications verify who they are collaborating with.

In some embodiments the gadgets are executed based on one or more security policies. The security policies protect a user from the execution of malicious gadgets and ensures a user s privacy. In some embodiments the gadget instructions are executed in accordance with a determination that the gadget is from a trusted domain . For example only links to gadgets located to servers on the Google domain can be executed. In another example when the gadget code is included in the received email only gadget code including some identifying piece of information corresponding to an approved source can be executed. In some embodiments the user can specify the source e.g. domains that gadgets can never be executed from. For example gadgets from a spam domain can never be executed. In some embodiments the gadget instructions are executed in accordance with a determination that the domain of the sender address of the sender of the received email address is trusted. For example only gadgets included in emails from a sender with an address in the Google domain can be executed.

In some embodiments the gadget is executed in accordance with a determination that the gadget is received from a sender in an address book associated with a user of the client system . This security measure helps protect users against spammers. In addition a user may customize who they collaborate with by creating lists of contacts to collaborate with. For example a user may only want to collaborate with co workers and thus only gadgets from senders on a co worker contact list are allowed to execute.

Users who have email applications that do not support widgets can still collaborate with users with email applications that support gadgets by sending and receiving plain text messages that follow a certain convention. The convention will largely depend on the gadget implementation. A gadget developer may define a set of text phrases or a special annotation a user can use and that a gadget will understand. For example for a voting application a user could send a plain text message bubble tea 1 to mean that the user is voting for bubble tea. The container would aggregate count the user s vote for bubble tea and send the use a voting result in the form of plain text.

Storing gadget data in email threads enables users to easily collaborate with other users. A user can simply forward a message thread to another user to include the user in the coloration. Saving gadget data in email messages also provides a convenient place for storage since users can easily organize and search for message threads.

In some embodiments the gadget is executed in accordance with a determination that the gadget has been approved for execution by a user of the client system . For example a user may want to individually approve each gadget instance. In some embodiments the gadget is executed in accordance with a determination that the thread in which the gadget is included has been approved for gadget execution by the user. For example a user may only want gadget execution from certain message threads such as a thread about fantasy football. In some embodiments a user can specify write permissions for each gadget. For example a user may specify that a gadget is not allowed to construct and send new email messages containing gadget data. Such feature gives a user control of the execution of gadgets thereby encouraging users to make use of gadgets.

In some embodiments a combination of one or more security policies is used. In some embodiments a security module e.g. stores the one or more security policies and determines whether the gadget is allowed to execute in view of the security policies. In some embodiments the security module is embedded in the email application or is a stand alone application or is embedded in the container . In some embodiments the container and determines whether the gadget is allowed to execute in view of the one or more security policies. The one or more security policies ensures that annoying or malicious gadgets are not executed on the client device.

In some embodiments the executing gadget executes the initialize section e.g. of the portion of the received email encoded as a gadget MIME type. In some embodiments the initialize section initializes one or more variables used by the gadget. In some embodiments the initialize section instructs the gadget to display one or more messages or graphical user elements. In some embodiments the initialize section instructs the gadget to obtain aggregated gadget data from the container. For example the gadget may retrieve a state of the gadget application from the container. In some embodiments the state of the gadget application could be the state of a game or the current vote count for a vote. In some embodiments the initialize instructions include one or more commands instructing the container to perform various tasks. For example the initialize section includes one or more commands to obtain the aggregated gadget data from the container.

In some embodiments after the gadget executes the initialize section the gadget access the aggregated gadget data from the container and performs one or more operations with the aggregated gadget data. For example the aggregated gadget data may include votes and the executing gadget may count the votes and prepare a display of the updated vote counts. In another example the aggregated gadget data may include weather information and the executing gadget my prepare and format the weather information for display. In another example the aggregated gadget may include information for a game and the executing gadget may prepare to display the game with the information. For example the game may be a chess game and the gadget data may include the position of the pieces on the chess board.

Attention is now direct to an instance of the gadget associated with the gadget instructions in the email message is displayed in the client application according to some embodiments . In some embodiments only one instance of the gadget is displayed . For example a user may concurrently display multiple messages in a thread of messages. Each of the displayed messages may include the gadget however only one instance of the gadget is displayed. In some embodiments the gadget corresponding to the most recent message in the thread is executed and displayed. In some embodiments when there are multiple distinct gadgets in the received message each gadget is displayed resulting in the concurrent display of multiple gadgets.

In some embodiments the displayed gadget is updated to reflect the updated gadget data . In some embodiments the executing gadget uses aggregated gadget data from the container to prepare an updated display that reflects the updated gadget data aggregated data. For example for a shipping gadget the displayed gadget displays the tracking history of a package. In another example for a voting gadget the displayed gadget displays the individual vote count for a vote. In yet another example for a chess gadget the displayed gadget displays the current state of a chess board that reflects moves made by players of the game.

In some embodiments it is determined whether the client system is capable of displaying the gadget MIME type and in accordance with a determination that the client system is not capable of executing gadgets plain text corresponding to the display of the gadget updated with updated gadget data is displayed . Displaying plain text corresponding to the updated gadget provides backwards compatibility for users who do not have email clients that are capable of executing gadgets. Therefore users who have an email client that is not capable of executing gadgets can still view a plain text output corresponding to the gadget output. For example a recipient may receive an email containing a weather gadget and instead of viewing the executing of the gadget the recipient views a plain text output corresponding to the output of the executing gadget e.g. the weather at the sender s location .

In some embodiments the displayed gadget includes one or more interface elements. For example a voting gadget includes one or more voting buttons. In another example in a package tracking gadget the gadget includes a text box to receive a package tracking number. In some embodiments a user action with respect to the gadget is received . For example the user action may include but is not limited to selecting a voting button in a voting gadget entering a task into a task gadget entering a tracking number into a shipment tracking gadget or entering a movement in a game gadget.

A new email message containing the new gadget data is sent to one or more participants in the thread . The new gadget data is in accordance with the received user action . The email includes a first portion including content encoded as a plain text MIME type and a second portion containing content encoded as a gadget MIME type . For example for a voting gadget the updated gadget data includes data to increment a vote for a candidate. For example in a game gadget the updated game data may include a user s move with respect to the game. In some embodiments the updated gadget data is a state of the gadget. For example in a voting application the updated gadget is the current vote count. In some embodiments the updated gadget data includes only data corresponding to the user action e.g. an individual vote .

In some embodiments the executing gadget issues one or more commands to the container to construct a reply email containing a portion encoded as a plain text MIME type and a portion encoded as a gadget MIME TYPE. The executing gadget also issues one or more commands to the container to write new gadget data to the reply email. In some embodiments the executing gadget issues one or more commands to the container to construct a reply email in response to a user action to the displayed gadget. In some embodiments the new email message is created and sent in response to receiving the user action. In other words in response to user selection of a gadget button and without any further user action an email containing updated gadget data corresponding to the user selection is sent to each user of the respective message thread. For example after a user selects a voting button on a voting gadget a new email containing the gadget data corresponding to the user s selection is sent to one or more participants in the thread. In some embodiments the new email is created in response to the user action but it is not sent until the user selects a send option. In some embodiments a user may only desire to send the updated gadget data to a subset of the users of a thread. For example a user may want to remove a user from the collaboration. The new email message provides an update to other users in the thread and ensures that each user of the thread has a complete record of the collaboration.

Attention is now directed towards and B which illustrate a method for inserting a gadget into an email message. Method is executed on a client system having one or more processors and memory storing programs executed by the one or more processors. The client system is connected to a server system through a network and manages a client application.

In some embodiments on a client system a message composition interface for composing a message is displayed . The interface includes a gadget insertion option . In some embodiments in response to user selection of the gadget insertion option a request for a list of gadgets is sent to a server system a list of gadgets is received and the received list of gadgets is displayed . In some embodiments the request is sent by a container module. In some embodiments the gadgets are received only from a user approved source. For example the gadget may only be received from a certain server address or domain.

In some embodiments in response to user selection of a respective gadget from the list of displayed gadgets instructions corresponding to the selected gadget and gadget data are inserted into the composed message . In some embodiments the instructions corresponding to the selected gadget and gadget data are inserted into the composed message by a container module. The composed message contains a first section containing content encoded as a plain text MIME type and a second section containing content encoded as a gadget MIME type . In some embodiments the second section includes a portion initializing values for the gadget . The initial values are used to setup the gadget. For example for a voting gadget the initial values may include a title the candidates for voting and the vote count for each candidate. In some embodiments the values in the initial values are entered by a user when the gadget is first executed. In some embodiments the instructions corresponding to the gadget comprises a link to gadget code on a server system . In some embodiments the instructions corresponding to the selected gadget and gadget data are inserted into the composed message encoded as a gadget MIME type . In some embodiments the instructions corresponding to the selected gadget includes a gadget instance ID that is obtained from the server system . In some embodiments after the selected gadget and gadget data are inserted into the composed message the gadget instructions are executed for the first time and a graphical user interface for the gadget is displayed. In some embodiments the user enters initial values into the gadget using the gadget s graphical user interface. For example a user may enter a short title for a voting application. In some embodiments the user entered initial values are stored in gadget data of the composed message in an initialize section e.g. . In some embodiments the gadget instructions are executed a user action with respect to the gadget is received and a new email containing new gadget data is sent to one or more participants in the thread . In some embodiments the new email message is created and sent in response to receiving the user action. For example a user may make the initial vote in a voting gadget or the initial move in a game gadget. In some embodiments the new email is created in response to the user action but it is not sent until the user selects a send option. For example a user may interact with a gadget and include a plain text message in the new email message. The new message provides the start of a gadget collaboration.

Attention is now directed towards which is a schematic screenshot of a thread of messages and the output of gadget from message displayed on a display e.g. of a client device. In some embodiments only one displayed message displays the gadget . Thus only one instance of the gadget is displayed. For example the output of gadget is displayed in message and not messages and . In some embodiments messages other than the message with the executing gadget display plain text messages. In some embodiments as shown in message the plain text message corresponds to a user s action with respect to a gadget. For example as shown in message the sender of message has voted yes in response to the survey question of Boba at Fantasia. In some embodiments as shown in message the plain text message corresponds to a summary of the aggregated gadget data. For example plain text message shows the current vote count. In some embodiments the gadget includes a summary of the aggregated gadget data and interface elements and . It is noted that different gadgets will have different interface elements. For example a task list may contain a text field for entering a task. As shown in the interface elements and corresponding to a voting gadget. When a user interacts with the interface elements and a reply email containing gadget data corresponding to the user s action is sent to one or more users of the thread . In some embodiments the reply email is sent when the user selects an interface element or interface element . In some embodiments a reply email is not sent until the user selects a send option. It is noted that the thread can include more than one gadget.

The operating system includes procedures for handling various basic system services and for performing hardware dependent tasks.

The network communication module facilitates communication with other devices via the one or more communication network interfaces wired or wireless and one or more communication networks such as the Internet other wide area networks local area networks metropolitan area networks and so on.

The client email application or instructions is used for receiving drafting and sending email messages. The client email application may be a stand alone application or a web browser application that is capable of executing gadgets. In some embodiments the client email application is not capable of executing gadgets. The client email application is discussed in greater detail in the discussion of .

The user interface module tracks user input and selections from a gadget or client email application.

Email threads include one or more email threads . Each thread includes a thread header and a thread ID . The thread ID identifies the thread. The thread header identifies a subject or topic of a thread. The thread also includes email messages .

Email messages include one or more email messages . Email messages are discussed in greater detail in the discussion of Email with plain text MIME type and . Each email message includes a header thread ID and or Email ID and content encoded as a plain text MIME type . In some embodiments email messages include content encoded as a gadget MIME type . The Email ID identifies the message. The thread ID identifies the thread that the message belongs to. The section of the email messages that is encoded as a plain text mime type includes a plain text message . The portion encoded as a gadget MIME type includes a link to a gadget instance ID initialization section gadget data and update data . Emails message and email threads are described in greater detail in the discussion of and .

The security module determines whether a gadget has permission to execute on the client device . The security module includes one or more security policies that determine whether a gadget should be executed. For example the security module could ensure that only user authorized gadgets gadgets from certain domains or that only gadgets in emails received from users in the recipient s address book can be executed. In some embodiments the security module is embedded in the client application or is a stand alone application or is embedded in the container module .

The container module includes a container API . The container API includes a write interface and a read interface . The container module and the container API is described in greater detail in the discussion of and .

Each of the above identified elements may be stored in one or more of the previously mentioned memory devices and each of the modules or programs corresponds to a set of instructions for performing a function described above. The above identified modules or programs i.e. sets of instructions need not be implemented as separate software programs procedures or modules and thus various subsets of these modules may be combined or otherwise re arranged in various embodiments. In some embodiments memory may store a subset of the modules and data structures identified above. Furthermore memory may store additional modules and data structures not described above.

Although shows a client system is intended more as functional description of the various features which may be present in a set of clients than as a structural schematic of the embodiments described herein. In practice and as recognized by those of ordinary skill in the art items shown separately could be combined and some items could be separated. For example some items e.g. user interface module and graphics module shown separately in could be implemented on a single client and single items could be implemented by one or more clients.

The operating system includes procedures for handling various basic system services and for performing hardware dependent tasks.

The network communication module facilitates communication with other devices via the one or more communication network interfaces wired or wireless and one or more communication networks such as the Internet other wide area networks local area networks metropolitan area networks and so on.

The gadget module assigns instances IDs to gadgets and sends gadgets or a link to a gadget to other devices. The gadget module includes an instance ID generator that generates instance IDs. In some embodiments the gadget module includes a ID generator for generating gadget IDs. The gadget module is discussed in further detail in the discussion of .

The gadget database stores gadgets . Each gadget includes a gadget ID and gadget code . In some embodiments each gadget also includes an instance ID and a link to the gadget code . The gadget ID identifies the gadget. The instance ID identifies a particular instance of a gadget. The gadget database is discussed in further detail in the discussion of .

Each of the above identified elements may be stored in one or more of the previously mentioned memory devices and each of the modules or programs corresponds to a set of instructions for performing a function described above. The above identified modules or programs i.e. sets of instructions need not be implemented as separate software programs procedures or modules and thus various subsets of these modules may be combined or otherwise re arranged in various embodiments. In some embodiments memory may store a subset of the modules and data structures identified above. Furthermore memory may store additional modules and data structures not described above.

Although shows a server is intended more as functional description of the various features which may be present in a set of servers than as a structural schematic of the embodiments described herein. In practice and as recognized by those of ordinary skill in the art items shown separately could be combined and some items could be separated. For example some items e.g. gadget module and gadget database shown separately in could be implemented on single servers and single items could be implemented by one or more servers. The actual number of servers used to implement the server system and how features are allocated among them will vary from one implementation to another and may depend in part on the amount of data traffic that the system must handle during peak usage periods as well as during average usage periods.

The operating system includes procedures for handling various basic system services and for performing hardware dependent tasks.

The network communication module facilitates communication with other devices via the one or more communication network interfaces wired or wireless and one or more communication networks such as the Internet other wide area networks local area networks metropolitan area networks and so on.

The email module manages emails in the email database and assigns email IDS . In some embodiments the email module includes an email application . The and the email module email application are discussed in greater detail in the discussion of .

The email database stores email messages and threads of email messages . The email threads include a header a thread ID and one or more messages . The email messages include a header thread ID and or email ID and content encoded as a plain text MIME type . The content encoded as a plain text MIME type includes a plain text message . In some embodiments the email messages includes a portion containing content encoded as a gadget MIME type . The portion containing content encoded as a gadget MIME type includes a link to a gadget an instance ID an initialization section a gadget data and update data . The email database email messages and email threads are discussed in greater detail in the discussion of Message Email Message and Message Thread .

The container module includes a container API . The container API includes a write interface and a read interface . The container module and the container API are described in greater detail in the discussion of and .

Each of the above identified elements may be stored in one or more of the previously mentioned memory devices and each of the modules or programs corresponds to a set of instructions for performing a function described above. The above identified modules or programs i.e. sets of instructions need not be implemented as separate software programs procedures or modules and thus various subsets of these modules may be combined or otherwise re arranged in various embodiments. In some embodiments memory may store a subset of the modules and data structures identified above. Furthermore memory may store additional modules and data structures not described above.

Although shows a server is intended more as functional description of the various features which may be present in a set of servers than as a structural schematic of the embodiments described herein. In practice and as recognized by those of ordinary skill in the art items shown separately could be combined and some items could be separated. For example some items e.g. email module and email database shown separately in could be implemented on single servers and single items could be implemented by one or more servers. The actual number of servers used to implement the server system and how features are allocated among them will vary from one implementation to another and may depend in part on the amount of data traffic that the system must handle during peak usage periods as well as during average usage periods.

Each of the methods described herein may be governed by instructions that are stored in a computer readable storage medium and that are executed by one or more processors of one or more servers. Each of the operations shown in to A and B to B may correspond to instructions stored in a computer memory or computer readable storage medium.

The foregoing description for purpose of explanation has been described with reference to specific embodiments. However the illustrative discussions above are not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations are possible in view of the above teachings. The embodiments were chosen and described in order to best explain the principles of the invention and its practical applications to thereby enable others skilled in the art to best utilize the invention and various embodiments with various modifications as are suited to the particular use contemplated.

