---

title: Malware protection
abstract: According to a first aspect of the present invention there is provided a method of protecting a computer system from malware, which malware attempts to prevent detection or analysis when executed in an emulated computer system. The method comprises determining if an executable file should be identified as being legitimate and, if not, executing the executable file while providing indications to the executable file that it is being executed within an emulated computer system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09501644&OS=09501644&RS=09501644
owner: F-Secure Oyj
number: 09501644
owner_city: Helsinki
owner_country: FI
publication_date: 20100315
---
The present invention relates to a method of protecting a computer system from malicious activity of malware programs.

Malware is short for malicious software and is used as a term to refer to any software designed to infiltrate or damage a computer system without the owner s informed consent. Malware can include computer viruses worms trojan horses rootkits adware spyware and any other malicious and unwanted software.

When a device is infected by a malware program the user will often notice unwanted behaviour and degradation of system performance as the infection can create unwanted processor activity memory usage and network traffic. This can also cause stability issues leading to application or system wide crashes. The user of an infected device may incorrectly assume that poor performance is a result of software flaws or hardware problems taking inappropriate remedial action when the actual cause is a malware infection of which they are unaware. Furthermore even if a malware infection does not cause a perceptible change in the performance of a device it may be performing other malicious functions such as monitoring and stealing potentially valuable commercial personal and or financial information or hijacking a device so that it may be exploited for some illegitimate purpose.

Many end users make use of anti virus software to detect and possibly remove malware. In order to detect a malware file the anti virus software must have some way of identifying it amongst all the other files present on a device. Typically this requires that the anti virus software has a database containing the signatures or fingerprints that are characteristic of individual malware program files. When the supplier of the anti virus software identifies a new malware threat the threat is analysed and its signature is generated. The malware is then known and its signature can be distributed to end users as updates to their local anti virus software databases.

Using approaches that rely on signature scanning to detect malware still leaves computers vulnerable to unknown malware programs that have not yet been analysed for their signature. To address this issue in addition to scanning for malware signatures most anti virus applications additionally employ heuristic analysis. This approach involves the application of general rules intended to distinguish the behaviour of any malware from that of clean legitimate programs. For example the behaviour of all programs on a PC is monitored and if a program attempts to write data to an executable program the anti virus software can flag this as suspicious behaviour. Heuristics can be based on behaviours such as API calls attempts to send data over the Internet etc.

In order to detect and or analyse malware programs it is often useful to run a program in an isolated environment or test system otherwise known as a virtual machine or emulator. A virtual machine or emulator comprises a program that mimics the functionality of various components of a real computer system. For example a computer using a Linux operating system can run a virtual machine that imitates the environment provided by a Windows operating system. This can include emulation of the CPU the memory the communications interfaces and any associated hardware. By running a program in an emulated environment any malicious activity can be confined to the virtual environment without risking the underlying computer system. The behaviour of a program within the emulated environment can then be observed and any malware signatures or malicious behaviour used to identify the program as malware. In addition for a program that has been or is suspected of being malware anti virus engineers usually run the program in an emulated environment in order to analyse or debug its behaviour. This allows anti virus engineers to reverse engineer the malware program and thereby determine ways of detecting and then disinfecting computers infected by the program.

Malware authors therefore try to avoid malware detection and analysis tools that use emulation and or debugging techniques. To do so they design the malware to detect when they are being executed in an emulated environment and or when they area being debugged. If such a malware program determines that it is being executed in an emulated environment and or that it is being debugged it will then either terminate itself as soon as possible or alter its behaviour so as to not perform any malicious activity or otherwise suspicious behaviour.

It is an object of the present invention to provide a method of protecting a computer system from malicious activity of malware programs.

According to a first aspect of the present invention there is provided a method of protecting a computer system from malware which malware attempts to prevent detection or analysis when executed in an emulated computer system. The method comprises determining if an executable file should be identified as being legitimate and if not executing the executable file whilst providing indications to the executable file that it is being executed within an emulated computer system. The file is preferably executed in the non emulated computer system.

The step of determining if an executable file should be identified as being legitimate can be performed at the computer system. Alternatively the computer system sends the executable file or an identifier for the executable file to a server and receives a response from the server indicating whether or not the file should be identified as being legitimate.

The step of determining if an executable file should be identified as being legitimate can comprise any of 

The step of providing indications to the executable file that it is being executed within an emulated computer system can comprise intercepting specified communications between the executable file and the computer system during execution of the executable file and responding to the intercepted communications with data that is indicative of execution in an emulated computer system. The specified communications can include any of function calls messages and events.

According to a second aspect of the present invention there is provided a computer program comprising computer program code means adapted to perform all the steps of the first aspect when said program is run on a computer.

According to a third aspect of the present invention there is provided a computer program according to the second aspect embodied on a computer readable medium.

According to a fourth aspect of the present invention there is provided a computer system. The computer system comprises 

The processor can be further configured to generate a message for sending to a server the message including the executable file or an identifier for the executable file and to process a response received from the server to determine if it indicates that the file should be identified as being legitimate. The computer system can further comprise a transmitter for sending the message to the server and a receiver for receiving the response from the server.

The memory can be further configured to store a database identifying legitimate executable files and the processor can be further configured to determine if an identifier for the executable file is contained in the database identifying legitimate executable files. Alternatively the memory can be further configured to store a database identifying prohibited executable files and the processor can be further configured to determine if an identifier for the executable file is contained in the database identifying prohibited executable files. As a further alternative the memory can be further configured to store a database of information relating to executable files the database including a value indicating the legitimacy of each executable file and the processor can be further configured to determine if an identifier for the executable file is contained in the database of executable files. Preferably the processor can be further configured to if an identifier for the executable file is contained in the database determine if the value associated with the executable file exceeds a threshold at which an executable file is considered to be legitimate.

The processor can be further configured to intercept specified communications between the executable file and the computer system during execution of the executable file and to respond to the intercepted communications with data that is indicative of execution in an emulated computer system.

According to a fifth aspect of the present invention there is provided a method of detecting potential malware. The method comprises executing an executable file whilst providing indications to the executable file that it is being executed within an emulated computer system monitoring the behaviour of the executable file and determining if this behaviour corresponds with that expected of malware executed in an emulated computer system.

The step of executing an executable file whilst providing indications to the executable file that it is being executed within an emulated computer system can comprise executing the executable file in a non emulated computer system intercepting specified communications between the executable file and the computer system during execution of the executable file and responding to intercepted communications with data that is indicative of execution in an emulated computer system. Alternatively the step of executing an executable file whilst providing indications to the executable file that it is being executed within an emulated computer system can comprise executing the executable file in an emulated computer system.

The behaviour that is expected of malware executed in an emulated computer system can comprise any of 

According to a sixth aspect of the present invention there is provided a computer program comprising computer program code means adapted to perform all the steps of the fifth aspect when said program is run on a computer.

According to a seventh aspect of the present invention there is provided a computer program according to the sixth aspect embodied on a computer readable medium.

According to an eighth aspect of the present invention there is provided a computer system. The computer system comprises 

The processor can be further configured to execute the executable file in a non emulated computer system intercept specified communications between the executable file and the computer system during execution of the executable file and to respond to intercepted communications with data that is indicative of execution in an emulated computer system. Alternatively the processor can be further configured to execute the executable file in an emulated computer system.

The processor can be further configured to determine if the behaviour of the executable file comprises any of 

According to a ninth aspect of the present invention there is provided a method of maintaining a database of information relating to executable files the database including values representing the legitimacy of each executable file for the purpose of enabling any of a plurality of computer devices to determine if an executable file should be identified as being legitimate. The method comprises at a network based service receiving data regarding an executable file from a computer device of the plurality of computer devices that has executed the executable file using the data to determine a value representing the legitimacy of the executable file and providing the value to any of the plurality of computer devices.

The step of using the data to determine a value representing the legitimacy of each of the executable files can comprise any of 

According to a tenth aspect of the present invention there is provided a computer program comprising computer program code means adapted to perform all the steps of the ninth aspect when said program is run on a computer.

According to an eleventh aspect of the present invention there is provided a computer program according to the tenth aspect embodied on a computer readable medium.

According to a twelfth aspect of the present invention there is provided a server for use in maintaining database of information relating to executable files the database including values representing the legitimacy of each executable file for the purpose of enabling any of a plurality of computer devices to determine if an executable file should be identified as being legitimate. The server comprises a receiver for receiving data regarding an executable file from one or more of a plurality of computer devices that have executed the executable file a processor for using the information to determine a value representing the legitimacy of the executable file and a transmitter for providing the value to one or more of the plurality of computer devices.

It has been recognised here that the security of a computer system could be improved by making it appear that all programs on the computer are being run in a virtual environment rather than on the actual computer system. In doing so any malware on the computer system that is designed to avoid detection in a virtual environment would be unlikely to perform any of the malicious activity that would give away its presence or allow it to be analysed. The malware program would effectively be neutralised. This could be achieved by faking those characteristics that indicate that a program is being executed in a virtual environment. However many legitimate trustworthy programs have also been designed to prevent themselves from being executed in a virtual environment as a method of copy protection to prevent users from using emulation to circumvent the end of a trial period or otherwise escape paying the software license fee. It is therefore not desirable to fake emulation for all programs run on a computer system as this would be detrimental to the computer systems ability to run such legitimate programs.

In order to at least partially overcome the problems described above it is proposed here to check the reputation of an executable file and if it is determined that the file could possibly be or is likely to be malware e.g. if it is not known to be benign legitimate then the executable file is executed with emulation imitation applied to it. However if an executable file is determined to be legitimate or low risk then the executable file is executed in the computer system without any emulation imitation applied to it. In doing so the present invention provides that the execution of legitimate programs that use emulation detection for legitimate purposes will not be affected whilst also providing that any malware executable files that have emulation detection are unlikely to execute their malicious code in the belief that they need to evade detection disinfection or analysis.

The central anti virus server is typically operated by the provider of the anti virus unit that is run on the computer . Alternatively the central anti virus server may be that of a network administrator or supervisor the computer being part of the network for which the supervisor is responsible. The central anti virus server can be implemented as a combination of computer hardware and software. The central anti virus server comprises a memory a processor a transceiver and a database . The memory stores the various programs executable files that are implemented by the processor . The programs executable files stored in the memory and implemented by the processor include a reputation determination unit an emulation imitation unit and optionally an emulator all of which can be sub units of an anti virus unit . These programs units may be the same as those programs implemented at the computer system or may be different programs that are capable of interfacing and co operating with the programs implemented at the computer system . The transceiver is used to communicate with the computer system over the network . The database stores the latest executable file reputation data malware definition data heuristic analysis rules white lists black lists etc.

In one possible embodiment of the present invention the reputation of an executable file can be checked by comparing an identifier for the file i.e. the filename a hash of the file itself or the files location path in the system against a list of identifiers for executable files that are considered to be legitimate otherwise known as an approved or white list. If the file is identified as being on the white list then the computer system could be configured or instructed to permit execution of the file in the real i.e. as opposed to a virtual environment without any active emulation indicators. If the file is not identified as being on the white list then the computer system could be configured or instructed to execute the file with any emulation indicators active as a precaution against potential malicious behaviour. Of course program executable files include any type of executable file such as binary files script files application files Dynamic Link Libraries macros XML etc

As an alternative or in addition to checking the file against a white list of files an identifier for the file could be compared against a list of identifiers for executable files that are not recognised as legitimate or are otherwise considered to be high risk also known as a block or black list. For those files identified as being on the black list the computer system could be configured or instructed to execute the file in the real computer system environment with any emulation indicators active as a precaution against potential malicious behaviour. In other words the file would be prohibited from executing in the unprotected system. If the file is not identified as being on the black list then the computer system could be configured or instructed to execute the file without any active emulation indicators. Alternatively if a file is not identified as being on either a white list or a black list then the computer system could be configured or instructed to prompt the user to select whether the file should be executed at all or whether it should be executed with or without active emulation indicators.

As an alternative or in addition to checking the file against a white list of files an identifier for the file could be compared against a list of identifiers for executable files that are not recognised as legitimate or are otherwise considered to be high risk also known as a block or black list. For those files identified as being on the black list the computer system could be configured or instructed to execute the file in the real computer system environment with any emulation indicators active as a precaution against potential malicious behaviour. In other words the file would be prohibited from executing in the unprotected system. If the file is not identified as being on the black list then the computer system could be configured or instructed to execute the file without any active emulation indicators. Alternatively if a file is not identified as being on either a white list or a black list then the computer system could be configured or instructed to prompt the user to select whether the file should be executed at all or whether it should be executed with or without active emulation indicators. The way in which the system treats unknown files would be configured depending upon the desired level of security.

By way of example is a flow diagram illustrating the process of performing a reputation check according to an embodiment of the present invention. The steps performed are as follows 

Of course any other variations on these processes are also possible. For example any files identified as being on a black list could be prevented from executing at all or could be executed in a virtual environment whilst unknown files e.g. those not on a white list or a black list are executed in the actual environment with the emulation imitation applied to them. Alternatively any unknown files could initially be executed in a virtual environment and analysed to determine whether or not they can be trusted by checking for malware signatures or suspicious behaviour. If this analysis determines that the unknown file is not suspicious or is at low risk of being malware then this file could be allowed to run in the actual environment with or without emulation imitation. An identifier for the file could then be added to the white list if applicable. Conversely if the analysis of a previously unknown file determines that the files should be considered suspicious then this file could be prevented from executing or could be limited to executing in the actual environment with emulation imitation active. An identifier for the suspicious file could also be added to the black list.

As an alternative to white lists and black lists the reputation check would make use of a list of executable file identifiers wherein each executable file in the list is associated with a reputation score or rating that represents the risk probability that the file is malware. This score or rating could be determined based on the results of some previous analysis of the executable file. For example is a flow diagram illustrating the process of performing a reputation check according to an embodiment of the present invention. When a reputation check for an executable file is required a look up is performed in the database of executable files to determine if the file has an entry in the database step C . If the file is not in the database i.e. the file has not previously been executed by a computer system then the file is executed either within the actual environment provided by the computer system server or within an emulated environment implemented by the computer system server and the behaviour of the program monitored step C . The behaviour is then analysed for suspicious behaviour and given a legitimacy trustworthiness score depending upon the amount type and extent of any suspicious behaviour step C . This score is then be provided to the central server and collated within any other scores calculated received for the same executable file and the collated score distributed to other computer systems in the network step C .

Once an entry for the executable file has been added to the database any subsequent checks of the database will identify that file s entry in the database and the probability value for that executable file can be retrieved step C . This retrieved value can then be compared to a threshold value step C . If the retrieved value exceeds the threshold value then the executable file should be treated as suspected malware step C and only executed with emulation imitation active. If the retrieved value does not exceed the threshold value then the executable file should be considered to be trustworthy step C and can be executed without emulation imitation active.

The reputation score of a particular file could be continually updated by collating the results of behavioural analyses performed by other computer systems and or servers. In addition the threshold score used by an individual computer could depend upon any number of factors e.g. depending upon the security level desired by the user and could vary between individual computers. The reputation score could also be determined and or varied depending upon the reputation of the computer systems that have installed and or run the executable file and that have reported this to the central server. For example if the central server receives a number of reports that a particular executable file has been installed and or run from computer systems that are known to be trustworthy e.g. they belong to a trusted software developer or other trusted entity then the reputation score of that executable file would improve. In particular the reputation score given to such an executable file by the malware protection system would be higher than that of an executable file of which it has only just become aware.

The checking of an executable files reputation may be performed locally by the computer system remotely by the centralized server or by a combination of the two. When the check is performed locally then depending upon how the reputation check is performed the computer system could use reputation information that has been received from the centralized server and stored within its memory. When the check is performed remotely the computer system would send the executable file or information relating to that file to the centralized server in order for it to check the files reputation. For example the computer system could send an identifier for the file to the server which would then check this against a database of legitimate executable files. The server would then respond to the computer system notifying it of the result of the check and or providing an instruction as to how to the file should be executed.

The reputation check can be performed upon receipt of an executable file i.e. when the file is downloaded from the internet or from an email or when the file is transferred from some computer readable medium to the computer system or in response to a request to execute run the file. The check could also be performed as part of a scheduled scan of the computer system or upon a request by the user. However it is preferable that the check is made prior to the first execution of the file.

There are various techniques used by malware authors to enable a malware program to determine that it is running in an emulated environment and that therefore can be used to deceive the malware into determining that it is being executed in an emulated environment. Whilst an emulator should behave essentially identically to the actual computer system it is difficult to implement all of this real functionality in an emulated environment. For example processing limitations can prevent an emulated environment from mimicking all of the functionality provided by an operating system. As such there will almost always be behavioural differences between the response of an emulator and that of an actual computer system and these differences can therefore be used by a program to determine when it is being executed in an emulated environment. As an example a malware program could be designed to call uncommon or infrequently used instructions that as they are almost never used by other programs and or are too difficult to emulate may not be supported by an emulator. Calling such functions is therefore likely to cause an emulator to throw an exception. The malware program can then use this exception as an indication that it is being emulated.

Malware programs can also attempt to detect emulation by attempting to access a webpage and thereby determining whether it has access to the Internet. As most emulators do not allow access to the Internet the malware could use this as an indication that it is being executed in an emulator. In addition many malware programs use calls that return the computer systems IP address to determine whether or not they have access to the Internet. Again as most emulators do not allow access to the Internet an emulator is unlikely to successfully return an IP address. The malware program can therefore use this as an indicator that it is being executed in an emulated environment.

An alternative method of detecting whether an emulator is running is to make more than one call to a function that should return different values in response to each call. For example this could involve making two calls to a function that provides some time dependent response and verifying that there is a difference between two returned values. In Microsoft Windows this could be achieved using the QueryPerformanceCounter API or GetTickCount API or by querying the current number of cycles executed by the processor since the machine started using the RDTSC Read Time Stamp Counter instruction. For example the RDTSC could be called twice and the difference of the two returned values calculated. This difference could then be compared to a threshold and if the difference is greater than the threshold it could then be determined that the file is currently being executed in an emulator.

There are a number of other methods that may be used by an executable file to determine whether or not it is being executed in an emulated environment and these are constantly expanding to include new methods. By way of example some other methods used to detect emulation include 

In order to fake the characteristics that usually indicate emulation the computer system can hook into the APIs Application Programming Interfaces used by a selected executable file i.e. that enable it to check the file system the registry entries mutexes etc and whatever else it may use to detect emulation or other malware analysis tools . The computer system can then provide information to the run time code of the selected executable file that makes it appear as though the file is being executed in an emulated environment. This allows the computer system to fake emulation for selected files whilst not affecting the information provided to those executable files that are not considered a risk.

The term hooking covers a range of techniques used to alter or add to the behaviour of a program e.g. an operating system or an application by intercepting function calls messages or events passed between software components. The hooking mechanism enables a piece of code to be specified to run whenever a particular message or event is received by a program. For example in Microsoft Windows the SetWindowsHookEx Win32 API call causes the target process to load a specified DLL into its memory space and select a specified function as a hook for a particular event. When an appropriate event is received the code will be executed by the target process.

By way of example if a reputation check on a particular executable file determined that this file should be executed with emulation imitation applied to it then the computer system could hook into any calls made by the executable files run time code to retrieve the computer systems IP address e.g. GetIpAddrTable API or GetHostByName API and return an exception. In doing so the computer system could fool the malware program into determining that it is being executed in an emulator. Alternatively some malware programs are designed not to perform any malicious functions in a particular country. This may be because the authorities in a particular country may be more motivated to identify and punish malware authors. As such these malware programs may request the IP address of the computer system in order to determine the country in which the computer system is currently residing. The computer system could therefore respond with an IP address that indicates that the computer system is residing in one such country and therefore prevent the malware from executing any malicious functionality.

As described above conventional methods of protecting a computer from malware rely upon detecting malware using a malware signature or by identifying behaviour that is considered to be indicative of malicious functionality. However malware authors use various techniques to avoid these detection methods. As such these malware detection methods can fail to detect a malware program which can therefore continue to perform its malicious functions. The methods proposed here provide that a computer system can make use of malware anti emulation functions as a means for neutralizing or deactivating the malicious functionality of a malware program even if the malware programs presence has not been detected. Furthermore these methods also provide that legitimate applications that also implement anti emulation functions are not affected.

In addition to using the anti emulation functions of malware as a means of protecting a computer system from malicious behaviour it is also proposed here to use detection of anti emulation behaviour as a means of determining whether or not an executable file should be considered suspicious. Whilst both legitimate executable files and malicious executable files can implement anti emulation functions their behaviour upon detection of emulation can be markedly different. Legitimate programs usually refuse to start and display a notification that the application does not run within an emulated environment. In contrast malware programs will usually either fall silent or significantly alter their behaviour. As such for an executable file executed in an emulated environment or in a real environment with emulation imitation active the presence of such anti emulation behaviour is an indication that the file may be malware.

By way of example is a flow diagram illustrating the process of detecting potential malware according to an embodiment of the present invention. The steps performed are as follows 

If the file is legitimate it would be expected to either generate a notification that it does not run in an emulated environment or to display consistent behaviour irrespective of whether it is provided with indications that it is running in an emulated environment or in a non emulated environment. If the file is malware it would be expected to either fail to run without providing any notification or to display behaviour that differs depending upon whether it is provided with indications that it is running in an emulated environment or in a non emulated environment. Depending upon the outcome of this behavioural analysis an identifier for the file could be added to a white list or black list as appropriate and updated lists distributed from the central server to the individual computer systems. Alternatively and as described above this analysis could determine a reputation score for the executable file and this information could then be provided to the computer systems in the form of a file reputation list or database.

As a further example it is also likely that some malware programs will be designed to gather information about emulated environments used by anti virus software. When such a malware program determines that it is being executed in an emulated environment it will try to collect as much information as possible from this emulated environment and send this information to a location where it can be accessed by the malware author e.g. to the authors home server . The malware protection system can therefore monitor the behaviour of an executable file that is being executed within an emulated environment or within a real environment with emulation imitation applied to it to determine if the executable file performs a significant number of information collecting operations and attempts to connect to a remote location. If so then this executable file can be considered suspicious and at high risk of being malware.

The methods of malware detection proposed here provide that a computer system can make use of malware anti emulation functions as a means for determining whether or not an executable file should be considered suspicious which can therefore be used as feedback to determine how further instances of an executable file should be executed. This method overcomes the limitations of malware detection methods that rely on identifying malware signatures or the malicious aggressive activity of malware and makes use of the malware s own defense mechanisms as a means of detection.

Some malware programs are designed to retaliate if they believe they are being run in an emulated environment by performing actions that are intended to crash the emulator or otherwise prevent it from analysing the malware program. For example upon detecting emulation a retaliatory malware program could react by attempting to delete all the files in the computer system or otherwise try to damage the functionality of the operating system. However such retaliatory malware programs are rare as such behaviour reveals the malware programs presence. In any case if the malware protection system of the present invention were to come across such a retaliatory malware program the system could be configured to make suitable adjustments to its emulation settings in order to end the offensive behaviour and could use this retaliatory behaviour as a means for detecting the malware. For example the malware protection system could respond to retaliatory behaviour using host intrusion prevention mechanisms thereby preventing the malware from continuing with any deletion operations or would simply prevent any further execution of the malware program.

It will be appreciated by the person of skill in the art that various modifications may be made to the above described embodiments without departing from the scope of the present invention. For example whilst the above embodiments specifically describe using the anti emulation functions of malware to prevent malicious behaviour and or to detect the presence of the malware this also includes making use of any malware anti debugging functions. Debugging malware involves analysing the behaviour and functionality of a malware program in order to understand how to detect and or disinfect it and malware authors often design their malware to prevent debugging. The anti debugging functions employed by malware correspond to their anti emulation functions and can include detecting a debugger refusing to execute when being debugged preventing execution of any malicious functionality when being debugged preventing a debugger program from attaching to the malware program impeding the debugging process etc.

