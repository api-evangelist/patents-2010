---

title: Achieving interoperability for web services using a map engine
abstract: Embodiments of the invention address interoperability issues between incompatible applications by use of a map engine. In one embodiment the map engine enables a mapping between the messages exchanged between two incompatible applications thereby enabling the interacting applications understand messages exchanged between them. In other embodiments, the map engine maps a parameter associated with one application to a parameter associated with another application based on a mapping rule, where the applications differ from each other owing to non-conforming standards used for their implementation or to the two applications having different service description formats or different messaging formats, or to different platforms used for their implementation. In another embodiment of the invention, the map engine extracts the mapping rule from a knowledge base to enable the mapping between the two incompatible applications. The knowledge base stores data based on which the parameters associated with the two applications may be mapped.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08667061&OS=08667061&RS=08667061
owner: Oracle International Corporation
number: 08667061
owner_city: Redwood Shores
owner_country: US
publication_date: 20101203
---
The invention is directed generally to a computer system and in particular to a system for providing interoperability for web services.

As the Internet has evolved there has been an increased need for communication between applications over a network. Extensible Markup Language XML was developed as a flexible way to create common information formats and share both the format and the data between applications. As opposed to Hypertext Markup Language HTML which is designed specifically for web browsers XML is designed for much wider use and is extensible to fit each application.

XML has been widely used for representing application specific data structures for example in web services. A web service is for instance a set of related application functions that can be programmatically invoked over the Internet. Businesses can dynamically mix and match web services to perform complex tasks.

The XML format can be used to facilitate the use of the web service by a remote service requester. Web Services Description Language WSDL is an XML based language for describing web services and how to access them. The service requester can interact with the web service in a manner prescribed by the web service s WSDL description using Simple Object Access Protocol SOAP messages typically conveyed using Hypertext Transfer Protocol HTTP .

As illustrated in a service provider machine hosts the web service and makes it accessible using protocols such as SOAP. Web service is described by a WSDL document that may be stored on the provider s server. Web service is published to a service broker such as a Universal Description Discovery and Integration UDDI service broker. Service broker acts like a phone book with a web service name and a pointer back to WSDL .

For service requester to use the remote web service service requester looks up the web service via the phone book i.e. UDDI service broker . More particularly the service requester machine may host the service request . Service requester discovers web service via the UDDI service broker . Service broker which has a pointer to the web service s WSDL passes this pointer on to service requester so that service requester can format its SOAP message correctly. Service requester then sends its request to web service using a SOAP message and receives a SOAP response satisfying the request from web service .

It should be noted that is greatly simplified in that many interoperability assumptions are made between service requester machine and server provider machine . In practice a number of platform providers independent software vendors and utility software developers have implemented web services protocols e.g. SOAP and WSDL in their products. However ambiguities and the large number of choices in implementation specifics have led to differing interpretations thereby resulting in incompatible implementations. As a consequence serious interoperability problems have developed in SOAP based Web services where one web service implementation may be unable to understand a message from another web service implementation. Thus there is a need for a technique that enables these differing web service implementations understand the messages exchanged between each other and thereby enabling communication between them.

One embodiment of the present invention involves retrieving a mapping rule based on a first parameter where the mapping rule enables mapping a first message in a first message format to a second message in a second message format when the first message format and the second message format are different. This embodiment of the present invention involves identifying a first parameter associated with the first message identifying a first variation associated with the identity of the first parameter and identifying a mapping rule for the variation. The mapping rule identified provides a second variation associated with the first variation.

Another embodiment of the present invention comprises an apparatus comprising a database server coupled to a database the database storing information associated with mapping a first parameter of a first set of parameters associated with a first description to a second parameter of a second set of parameters associated with a second description the first description being different from the second description Two or more database tables store the information associated with the mapping. The information associated with the mapping comprising a first set of parameters associated with the first description and the second set of parameters associated with the second description the first set of parameters with a first set of variations and the second set of parameters with a second set of variations and a mapping between a first variation of the first set of variations and a second variation of the second set of variations 

Another embodiment of the present invention comprises a computer implemented method for creating a mapping rule for mapping a first message in a first message format to a second message in a second message format the second message format different from the first message format. The method of the present invention comprising identifying a first element from a first description associated with the first message format identifying a second element from a second description associated with the second message format storing in a first table in a memory the first element with a first identity and the second element with a second identity storing in a second table in the memory the first identity with a first variation and the second identity with a second variation and storing in a third table in the memory the mapping rule associating the first variation with the second variation.

Another embodiment of the present invention involves a computer implemented mapping system for allowing communication between a service requester and a service provider where the service requester has a first message format and the service provider has a second message format different from the first message format. The system comprises a map engine for transforming a message in the first message format to a message in the second message format. The system also comprises a knowledge base stored coupled to the map engine and stored in a computer database where the knowledge base provides mapping rules to the map engine to transform the messages. The knowledge base comprises a domain table for storing a plurality of elements associated with the first message format and with the second message format with a corresponding identity for each element of the plurality of elements a variation table for storing an association between the identity of each element of the plurality of elements of the domain table and a variation of that element and a rule table for storing a mapping between a first variation from the variation table and a second variation from the variation table the variation corresponding to a version platform an application type or any combination thereof.

Another embodiment of the present invention comprises a method for associating a first set of parameters of a first data type with a second set of parameters of a second data type using a third data type wherein the first data type the second data type and the third data type are different. The method comprises storing in a first table in a database the first set of parameters the second set of parameters and a third set of parameters of a third data type with a corresponding first set of identities second set of identities and a third set of identities respectively. The method further comprises storing in a second table in the database the first set of identities the second set of identities and the third set of identities with a corresponding first set of variations a second set of variations and a third set of variations respectively. The method further comprises storing in a third table in the database an association between a first variation of the first set of variations and a third variation of the third set of variations and an association between a second variation of the second set of variations and the third variation 

These and other features of the embodiments of the present invention will be described in more detail below.

Embodiments of the invention address several interoperability scenarios for two incompatible applications. Several embodiments of the invention address interoperability scenarios when the two interacting applications for example are web service applications involving a requester web service and a provider web service. In one such embodiment the interacting applications comprise a requester web service or a service requester initiating a request to invoke the operations of the service provided by the provider web service. In another example the two incompatible applications may be a software application web application mobile application or any application capable of communicating over the Internet or other wired or wireless network. Web service applications may be incompatible when they are implemented on different platforms having different data types or are implemented using different standard specifications different vendor implementations or due to use of different WSDL documents for their service descriptions.

One embodiment of the present invention comprises a map engine for generating and storing a mapping rule that enables mapping of one parameter to another parameter. One parameter may be associated with one application and the another parameter may be associated with another application where the two applications may be different with respect to their service descriptions their messaging format or their implementations arising from implementations based on different specifications or implementation using different platform data types or any combination thereof. Such parameters may correspond to one of an element an attribute a variable or any type of data associated with the applications with respect to the service descriptions the messaging formats specifications for the implementation or the implementation platforms of the two applications. The map engine accesses a description associated with each of the parameters to be mapped where for example the description may correspond to one of the specifications used for implementation of the two applications service descriptions such as a WSDL document of the two applications or a list of platform data types of the two applications. Another embodiment of the present invention comprises a map engine that retrieves a mapping rule in response to a request.

Another embodiment of the present invention comprises a map engine that based on a mapping rule generates mapping information that maps parameters associated with two applications such as a service requester and a service provider when the service requester and the service provider have different messaging formats. The different messaging formats may be due to the applications being incompatible for being implemented using different specifications or having different vendor implementations or having different WSDL documents for their service descriptions. In this context the parameters are associated with the messages exchanged and may correspond to one of an element an attribute a variable or any type of data associated with the applications. The mapping information comprises mapped parameters populated with values extracted from a message that enables interoperability between the two applications. Another embodiment of the present invention comprises a knowledge base that stores parameters and information associated with the parameters and mapping rules to enable mapping between the parameters.

One embodiment of the present invention provides interoperability for the web services when the web service at the service requester and the web service at the service provider are implemented using standards based on different specifications. Examples of interoperability issues due to implementations based on different standards include the use of non conforming standards by the service requester and the service provider such as SOAP 1.1 and SOAP 1.2. SOAP Version 1.2 has a number of changes in the message syntax and provides additional semantics from those described in SOAP 1.1. Accordingly the two versions may not be compatible. It should be noted that embodiments of the invention address other issues as well with respect to non conforming web services standards and is not limited to the example of SOAP 1.1 and SOAP 1.2 version incompatibility.

Another embodiment of the present invention addresses interoperability for outbound web service where a requesting application service requester provides an outbound web service definition using a WSDL and a provider application or a provider web service service provider provides the implementation for that outbound web service. The requesting application may use its outbound web service configurations to invoke the operations implemented by the service provider. However interoperability issues may arise when the service provider implements the outbound web service using a different WSDL than the outbound web service definition or WSDL provided by the requesting application or when the service provider implements the outbound web service using a different SOAP message format than that required by the requesting application or when the service provider implements the outbound web service using a web service stack different from that expected by the requesting application. Such scenarios may arise for example when the requesting application is itself a web service provider and for one or more of its operations supports an outbound web service configuration providing an outbound web service definition for such operations and using this definition the service provider is expected to implement the outbound web service for such operations. However interoperability issues may arise when the service provider implements the outbound web service using a web service stack or SOAP message format or WSDL document that is different from that expected by the requesting application. Such an embodiment of the invention comprises a SOAP engine operating between the requesting application service requester and the service provider where the SOAP engine comprises a map engine to generate a mapping between the formats of the service requester and the service provider. The SOAP engine internally implements a web service using the web service definition or the WSDL provided by the service requester and implements a web service client using the WSDL of the service provider.

According to certain embodiments of the invention the map engine dynamically generates a mapping rule when a service requester initiates a request to access the operations of a service provider. According to such embodiments the map engine intercepts the request and generates the mapping information according to the interoperability scenario discussed above. In order to generate the mapping rule the map engine accesses information associated with the message formats of the service requester and the service provider where such information provides a description associated with message the format. For example when the message formats of the messages generated by the service requester and the service provider is different due to each using a different WSDL document then the information associated with the message format is the WSDL document. When the service requester and the service provider each use different versions of SOAP then information associated with their message formats is the corresponding SOAP specification such as SOAP 1.1 and SOAP 1.2.

One embodiment of the present invention addresses interoperability when the web service applications are implemented on different platforms having different platform data types. In this context the parameters are the data types defined for the different platforms and the mapping rule defines an association between two parameters or one platform data type to another platform data type.

Another embodiment of the present invention where the web service applications may be implemented on different platforms comprises evaluating a web service implementation to determine whether such an implementation may result in interoperability issues for web service. In this embodiment mapping rules that map two parameters or two data types of two different platforms are stored in a knowledge base. The map engine parses the web service implementation to determine whether mapping rules for the data types used in the web service implementation are stored in the knowledge base.

According to certain other embodiments of the invention the map engine has access to a knowledge base that stores the mapping rule that is used for mapping the parameters associated with different web service applications based on each interoperability scenario. Knowledge base includes a plurality of tables to assist in the mapping discussed above. In some embodiments the knowledge base includes at least one application knowledge table domain table variation table and rule table.

An application knowledge table stores the name of all the applications that are using the knowledge base. It also assigns a Knowledge ID that is used as a reference to store application specific domain objects and other details. Application knowledge table has two fields Knowledge ID and AppName. An example of an Application Knowledge table is shown in Table 1.

Knowledge base may also include a domain table that stores all of the elements of a domain. The domain table assigns an element ID to each domain element. It also stores the element name and description. The domain table includes four fields Knowledge ID element ID name and description. The Knowledge ID refers to the Knowledge ID defined in the application Knowledge table discussed above.

A variation table associates an element with a variation such as the version platform and or an application type. The variation table has three fields var ID element ID and variation. The var ID field stores a unique variation ID for each entry in the table. Element ID refers to an ID defined in the domain table and variation defines the version platform or application name depending on the context in which the variation is being defined.

The rule table stores mapping rules based on an interoperability scenario or based on the context in which the mapping rule is being defined. It has three fields rule ID var ID and var IDM. The rule ID stores a unique ID for the rule and the var ID and var IDM fields refer to a var ID defined in the variation table discussed above. In effect a mapping rule represented by a rule ID in the rule table maps one variation to another variation. In one embodiment each variation in the mapping rule may be associated with a different Knowledge ID. In another embodiment each variation in the mapping rule may be associated with the same Knowledge ID.

In addition to the above the knowledge base may also store user defined mapping between the elements. Using such information stored in the Knowledge table the map engine can generate the mapping information to transform the messages or the request response between the two formats of the service requester and the service provider. The tables stored in the knowledge base are described in further detail along with the detailed description of the embodiments of the invention.

The sections below provide a detailed description of the embodiments of the invention with reference to the corresponding Figures.

Apparatus includes a bus or other communications mechanism for communicating information between components of apparatus . Apparatus also includes a processor coupled to bus for processing information and executing instructions or operations. Processor may be any type of general or specific purpose processor. Apparatus further includes a memory for storing information and instructions to be executed by processor . Memory can be comprised of any combination of random access memory RAM read only memory ROM static storage such as a magnetic or optical disk or any other type of machine or computer readable media. Apparatus further includes a communication device such as a network interface card or other communications interface to provide access to a network and to facilitate the transmission and receipt of data. As a result a user may interface with apparatus directly or remotely through a network or any other method.

Computer readable media may be any available media that can be accessed by processor and includes both volatile and nonvolatile media removable and non removable media and communication media. Communication media may include computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media.

Processor is further coupled via bus to a display such as a Liquid Crystal Display LCD for displaying information to a user such as mapping information. A keyboard and a cursor control device such as a computer mouse are further coupled to bus to enable a user to interface with apparatus . Processor and memory may also be coupled via bus to a knowledge base and thus may be able to access and retrieve information stored in knowledge base . In one embodiment memory stores software modules that provide functionality when executed by processor . The modules may include an operating system that provides operating system functionality for apparatus . The memory may also store map engine module which may be used to derive update and or retrieve mapping information from knowledge base . Apparatus may also include one or more other functional modules to provide additional functionality. Examples of other functional modules may include an information rights management module or a universal content management module.

In one embodiment interoperability for two web services each using different standard specifications and interested in communicating with each other is explained with respect to and . illustrates the operation of the map engine to retrieve a mapping rule and generate the mapping information according to various embodiments of the invention. is a functional block diagram comprising a service requester a service provider a SOAP engine that maps the messages exchanged between the service requester and the service provider using mapping information generated from a map engine . The system also comprises a knowledge base . The SOAP engine internally implements a web service using the web service definition or the WSDL 1 provided by the service requester . The SOAP engine also implements a web service client using the WSDL 2 provided by the service provider . The web service as well as the client can be generated using a standard integrated development environment IDE such as Oracle JDeveloper by Oracle International Corporation or any other code generation mechanism. The web service is used to internally invoke the operations of the web service provided by the service provider based on a request 1 received from the service requester where request 1 is a request to access the operations of the web service provided by the service provider . The client is used to interact with the service provider with a mapped request 2 which is generated using the mapping information generated by the map engine .

Each functional module in is capable of communicating with the other module as indicated in the using standard Internet communication protocols. The service requester is a functional representation of a web service or at least a service request hosted on a machine or an apparatus and the service provider is a functional representation of a web service hosted on a machine. The map engine is a functional representation of a module hosted on a machine where such a module comprises a sequence of instructions stored on a memory and executable by a processor. In an example embodiment the functionality of the map engine may itself be exposed as a service for consumption by applications on the Internet. In one embodiment each such machine described above may be a server machine comprising a processor a memory storing instructions and executable by the processor and a communication device capable of communicating with other machines on the Internet using standard communicating protocols. The knowledge base according to one embodiment may include a database server and any type of database such as a relational or flat file database.

At step for one or more parameters identified at steps and the map engine extracts their corresponding values from the request. For example with respect to SOAP 1.1 request 1 the map engine generates a map of values as MapOfValues. At step the map engine retrieves from the knowledge base a mapping rule for each of the parameters identified at steps and . According to one embodiment the map engine generates the mapping rule according to the method illustrated in the flowchart of and stores the mapping rule in the knowledge base . According to another embodiment the mapping rule is user defined and stored in the knowledge base . At step if it is determined that the mapping rule associated with the parameters comprised in the request does not exist in the knowledge base then an error is reported at step . If the mapping rule exists in the knowledge base then at step the map engine generates the mapping information that comprises the mapped parameters according to SOAP 1.2 specification populated with values identified from request 1. For example according to the mapping rules stored in a rule table 4 of the knowledge base faultcode element in SOAP 1.1 maps to env Code element in SOAP 1.2 faultstring in SOAP 1.1 maps to env Reason in SOAP 1.2. Using the MapOfValues and such mapping rules retrieved from the knowledge base the parameters env Code and env Reason of SOAP 1.2 specification are populated with value1 and value2 respectively. Using the mapped parameters with corresponding values env Code value1 and env reason value2 the client generates a mapped request 2 which is according to SOAP 1.2 specification. The mapped request 2 invokes the requested operation of the web service provided by service provider .

The flowchart of begins at step and at step the map engine receives as input for example the standard specifications of SOAP 1.1 and SOAP 1.2 used for implementing the service requester and the service provider . At the elements of SOAP 1.1 and SOAP 1.2 messages are retrieved from the specification and stored in a domain table of the knowledge base . For example from SOAP specifications SOAP 1.1 elements and attributes retrieved are faultcode faultstring actor and the SOAP 1.2 elements and attributes retrieved are role code and reason. At it is determined based on the input if there are any elements to be retrieved if not then the method stops at . If there is an element to be retrieved then at it is determined whether the element is defined in the domain table of the knowledge base . If the element is not defined in the domain table then that element is added to the domain table at . When the element is already defined in the domain table or once it is added to the domain table then at step the variation for the element is defined in the variation table depending on the version of the standard to which the element belongs. Next at the changes in the standards that are defined in the specification are retrieved. At it is determined whether there is a change defined. If there is a change then the element to element mapping is defined as a mapping rule in the rule table at . The mapping rule is defined with respect to the variations of the two elements and maps one variation to another variation. The changes between the SOAP 1.1 and SOAP 1.2 standard specifications may be derived for example from a standard specification that lists the changes between the two specifications. If there is no change then the method returns to to determine if there are more elements to be mapped. The mapping information generated from the flowchart of is stored in the domain table variation table and rule table of the knowledge base as shown below in tables 2 3 and 4 respectively and represents specific changes between SOAP 1.1 and SOAP 1.2 versions. The domain table 2 comprises elements used in SOAP messages in SOAP 1.1 and SOAP 1.2 format. The variation table 3 associates the elements of the SOAP messages as listed in the domain table 2 with their corresponding SOAP version. The rule table 4 stores mapping rules where each mapping rule represents an association between two variations where one variation corresponds to SOAP 1.1 and another variation corresponds to SOAP 1.2. More specifically the mapping rules stored in the rule table 4 defines rules that represent the differences if any between SOAP 1.1 and SOAP 1.2 for each element in the domain table 2. The SOAP versions may differ in their syntax structure of the SOAP messages etc. For example the rule table 4 stores information representing the change of syntax between the two SOAP versions. For example according to the mapping rule K1V21R1 in the rule table as derived from the domain table 2 and variation table 3 variation K10001V2 maps to variation K10002V1. Therefore according to this mapping rule the attribute env role K10001V2 of SOAP 1.2 maps to the attribute env actor K10002V1 of SOAP 1.1. Further according to rule K1V21R2 SOAP 1.2 element env Code K10003V2 maps to attribute faultcode K10005V1 of SOAP 1.1 and according to rule K1V21R3 SOAP 1.2 element env Reason K10004V2 maps to attribute faultstring K10006V1 of SOAP 1.1. Using such mapping rules from the rule table 4 the map engine is capable of transforming the request 1 to mapped request 2 in SOAP 1.2 format.

Based on the mapped request 2 received from the SOAP engine the service provider responds to client with a response 3 which is in the format of SOAP 1.2 as supported by the service provider . The SOAP engine transforms this response 3 to mapped response 4 in SOAP 1.1 format for the service requester . The operation of the SOAP engine for such transformation is similar to the operation of the SOAP engine as described above for transforming request 1 to mapped request 2. The map engine generates a MapOfValues for the parameters in response 3 the map engine retrieves the mapping rule from the knowledge base for each of the parameters in response 3 and generates mapped parameters with their corresponding values as identified in response 3. Further based on such mapped parameters of response 3 the web service generates the mapped response 4 for the service requester where the mapped response 4 is according to SOAP 1.1 format.

According to another embodiment of the invention the system illustrated in is also capable of addressing interoperability issue when the service requester and the service provider have different structure of SOAP messages depending on the schema defined in their corresponding WSDL documents.

In one embodiment interoperability for outbound web services is explained with respect to and examples of . as described above illustrates the operation of a map engine to retrieve a mapping rule and generate mapping information used for mapping the messages exchanged between the service requester and the service provider. is a functional block diagram and is a flowchart illustrating an embodiment of the invention that addresses the interoperability issue for outbound web services. The requesting application or the service requester provides an outbound web service definition using a WSDL and a provider application or the service provider provides the implementation for that outbound web service. Interoperability issues may arise when the service requester and the service provider may support different SOAP messaging formats or may use different stacks for implementation of their web services or when the service provider may implement the outbound web service using a WSDL that is different from the WSDL provided by service requester . The example embodiments illustrated in through address interoperability issues for outbound web services when the service requester provides the outbound web service definition using a WSDL 1 and the service provider implements the outbound web service using a WSDL 2 that is different from WSDL 1. Although to have been described below with reference to interoperability issues for outbound web services specifically for different WSDL scenario it must be appreciated that the teachings of enable one skilled in the relevant art to address other interoperability issues for outbound web services as discussed above.

In one embodiment of the invention when the map engine receives the request at step of the flowchart of the map engine accesses the WSDL documents of the service requester and the service provider and dynamically generates the mapping rule according to the method illustrated in the flowchart of . The map engine may use temporary storage such as memory shown in to temporarily store any intermediate information as required in the process for generating the mapping rule. In another embodiment the map engine generates the mapping rule according to the flowchart of and stores the mapping rule in the knowledge base . When the map engine receives the request 1 the map engine accesses the knowledge base and retrieves the mapping rule.

According to the map engine accesses WSDL 1 and WSDL 2 and or their corresponding schema definitions and respectively. Using this information the map engine generates a list of parameters corresponding to the elements sub elements or attributes in the WSDL documents which are then stored in the domain table of knowledge base as shown in table 5 below. The variation table 6 stores the association between each of the elements of the domain table 5 with their corresponding application where APP 1 corresponds to the service provider and APP2 corresponds to the service requester . The rule table 7 stores mapping rules where each mapping rule represents an association between two variations depicting parent child relationship between the variations. For example one mapping rule represents an association between the variation of a parent and the variation of the child where N A signifies that the element is a root element. The rule table may be derived from the schema itself and . For example based on the domain table 5 variation table 6 and rule table 7 specifically rules K3V1R4 and K3V2R5 the map engine can derive that the element firstName K30004V1 is the child of the element field K30002V1 in APP 1 service provider and child of the element name K30003V2 in APP 2 service requester . Additionally in some embodiments the rule table may store user defined mapping of elements. Using this mapping information stored in the knowledge base the map engine can map the firstName element of service requester to the firstName element of service provider and vice versa. Based on such mapping rules the elements or parameters associated with WSDL 2 of service provider that map to the parameters extracted from request 1 are identified and appropriately populated with values extracted from request 1. Using parameters populated with values as such the client generates a mapped request 2 such as the SOAP message in conforming to the format of service provider is generated. The client invokes the requested service provided by service provider using this mapped request 2. The service provider generates a response 3 which is again transformed to mapped response 4 by the SOAP engine using the mapping rules from the tables in the knowledge base as was used to transform request 1 to mapped request 2. The mapped response 4 is in a format supported and understood by the service requester .

According to another embodiment of the invention the mapping rules stored in the knowledge base are user defined.

According to another embodiment of the present invention a knowledge base such as the knowledge base shown in stores mapping rules derived from data type mapping information provided by various platform vendors. An example embodiment of the present invention as illustrated in the system of comprises a map engine that receives platform data types referred hereafter as parameters associated with different platforms. For example the map engine receives data types of platform 1 parameters data types of platform 2 parameters and data type mapping information available from different platform vendors. also comprises a knowledge base that stores information associated with the parameters and corresponding mapping rules in domain table 8 variation table 9 and rule table 10. In one example the platform 1 is a Microsoft .NET platform and the platform 2 is a Java EE platform. The knowledge base stores mapping rules for associating parameters and of different platform data types such .NET data types and Java EE data types to XML data type as derived from the data type mapping information. Data type mapping information provided by platform vendors provides for example the mapping of one platform data type such as .NET data type to another data type such as XML data type.

As a result of certain embodiments of the invention discussed above the problem of interoperability between incompatible applications due to varying standards heterogeneous platforms and outbound web services can be resolved by the map engine operating either independently or with access to the knowledge base. According to some embodiments the mapping information stored in the knowledge base can be updated transparently with the standards platform data types and user inputs. The updates can be initiated with updates in the WSDL documents standard or platform specifications or as defined by the end user. Embodiments of the invention therefore require little development effort to transform the SOAP messages. It may be appreciated that one or more combinations of interoperability scenarios discussed above may be present between two web service applications and one of ordinary skill in the technical area will be able to address such combinations of interoperability scenarios from one or more embodiments of the invention.

In some embodiments processor along with map engine module comprised in the apparatus of are configured to cause the apparatus to perform mapping between a service requester and a service provider with incompatible implementations or different formats. Map engine module can cause apparatus to receive a request from the service requester to access a service provided by the service provider. The map engine module is capable of deriving the parameters from the request and a map of values for the parameters. Processor with the map engine module is configured to control the apparatus to access respective descriptions of the service requester and the service provider. The description may be for example a WSDL of the service provider or a standard specification. Map engine module generates a mapping between the different formats of the service requester and the service provider based on at least one mapping rule. In one embodiment the mapping rule s is dynamically derived by the map engine module based on the process illustrated in the flowchart of . In another embodiment map engine module accesses knowledge base and retrieves the mapping rule s stored therein.

The at least one mapping rule includes a collection of data representing the mapping between the elements of the messages associated with an implementation of the service provider and an implementation of the service requester. The at least one mapping rule may be automatically or dynamically derived using a WSDL of the service provider and a WSDL of the service requester using a data type mapping information defined by platform vendors or using a standard specification.

Processor with the map engine module is further configured to control the apparatus to populate the mapped parameters with appropriate values extracted from the request. Output from the apparatus comprising the mapped parameters with their corresponding values can be used by a web service client of the service provider to generate a SOAP message in accordance with the format of the service provider. Apparatus also enables mapping a response from the service provider to a format supported by the service requester. Apparatus can then transmit or provide the mapped response to the service requester.

In certain embodiments processor map engine module and other functional modules may be implemented as separate physical and logical units or may be implemented in a single physical and logical unit. Furthermore in some embodiments processor map engine module and other functional modules may be implemented in hardware or as any suitable combination of hardware and software. In one embodiment the functionality of the map engine module as described in the embodiments of the invention may itself be provided as a service over the Internet.

In one embodiment of the invention the knowledge base include a database server and any type of database such as a relational or flat file database where the knowledge base is capable of receiving a query such as a request from map engine or any other application where the request is for identifying an element that maps to the element included in the request. In other words the knowledge base is capable of receiving and responding to a request for a mapping rule. In one embodiment the knowledge base is a specialized database or information storage system for knowledge management. Generically a knowledge base is meant to provide the means for the computerized collection organization and retrieval of knowledge. Machine readable knowledge bases store knowledge in a computer readable form. One purpose for the storage of such knowledge bases is to have automated deductive reasoning applied to them. Knowledge bases may contain a set of data in the form of rules or tables that describe the knowledge in a logically consistent manner. Ontology can define the structure of stored data such as what types of entities are recorded and what their relationships are. Logical operators may be used to build up a knowledge base from simpler pieces of information.

Embodiments of the invention may also include a computer program embodied on a non transitory computer readable storage medium. The computer program may include computer code or instructions that when executed by a processor cause the processor to execute any of the methods described herein such as the methods illustrated in and . In other embodiments the functionality may be performed by hardware e.g. through the use of an application specific integrated circuit ASIC a programmable gate array PGA a field programmable gate array FPGA etc. or any other combination of hardware and software.

It should be noted that many of the functional features described in this specification have been presented as modules in order to more particularly emphasize their implementation independence. For example a module may be implemented as a hardware circuit comprising custom VLSI circuits or gate arrays off the shelf semiconductors such as logic chips transistors or other discrete components. A module may also be implemented in programmable hardware devices such as field programmable gate arrays programmable array logic programmable logic devices or the like.

Modules may also be partially implemented in software for execution by various types of processors. An identified module of executable code may for instance comprise one or more physical or logical blocks of computer instructions which may for instance be organized as an object procedure or function. Nevertheless the executables of an identified module need not be physically located together but may comprise disparate instructions stored in different locations which when joined logically together comprise the module and achieve its stated purpose.

Indeed a module of executable code could be a single instruction or many instructions and may even be distributed over several different code segments among different programs and across several memory devices. Similarly operational data may be identified and illustrated herein within modules and may be embodied in any suitable form and organized within any suitable type of data structure. The operational data may be collected as a single data set or may be distributed over different locations including over different storage devices and may exist at least partially merely as electronic signals on a system or network.

Several embodiments are specifically illustrated and or described herein. However it will be appreciated that modifications and variations of the disclosed embodiments are covered by the above teachings and within the purview of the appended claims without departing from the spirit and intended scope of the invention.

