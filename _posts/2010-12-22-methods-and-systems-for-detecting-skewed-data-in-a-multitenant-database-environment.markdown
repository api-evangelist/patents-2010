---

title: Methods and systems for detecting skewed data in a multitenant database environment
abstract: Detection of skew in an on-demand database services environment is provided. A request is generated to scan a multitenant database for skew indicated by relationship depth exceeding an expected limit. A database crawler calculates skew for tenant identifier for a particular table in the database. Any skew that is detected is identified for later resolution.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08768963&OS=08768963&RS=08768963
owner: salesforce.com, inc.
number: 08768963
owner_city: San Francisco
owner_country: US
publication_date: 20101222
---
This application claims the benefit of priority of U.S. Provisional Patent Application No. 61 350 169 filed Jun. 1 2010.

Embodiments of the invention are related generally to database management and embodiments of the invention are more particularly related to detecting skewed data in a database network system.

Portions of the disclosure of this patent document may contain material that is subject to copyright protection. The copyright owner has no objection to the reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever. The copyright notice applies to all data as described below and in the accompanying drawings hereto as well as to any software described below Copyright 2010 Salesforce.com Inc. All Rights Reserved.

In conventional database systems users access their data resources in one logical database. A user of such a conventional system typically retrieves data from and stores data on the database using the users own systems. The user system may remotely access one of a plurality of server systems that in turn accesses the database system. Data retrieval from the system generally occurs via the user generating a query from the user system to the database system. Traditional database systems process the query for data requests and send information relevant to the request back to the user system. In implementations with one logical database issues related to storage and access of user data as well as allocation of database system resources are handled specific to the user preferences. According to user preferences there may be assumptions about access or resource use related to the user s access to the database system.

If the assumptions do not match the actual implementation of the database system for data access by the user performance degradation can easily occur. It is possible for associations of data in the database to consume more system resources than anticipated for the database which can degrade database access performance.

Descriptions of certain details and implementations follow including a description of the figures which may depict some or all of the embodiments described below as well as discussing other potential embodiments or implementations of the inventive concepts presented herein. An overview of embodiments of the invention is provided below followed by a more detailed description with reference to the drawings.

White the assumptions about access and resource allocation may be controlled for a single logical database system for a user the assumptions about access database setup and resource allocation can easily be different than reality for a user of a multitenant database system MTS . An MTS provides storage for multiple tenants in the same logical database system. If a user assumes all database resources are available to the user the system performance may degrade both for the particular user and for other tenants of the database as MTS resources are strained due to use by a particular tenant.

An MTS may be configured to have certain storage architecture standards in the database to allow it to service multiple tenants from the same database. It is possible for a particular tenant to establish data relationships among its stored data elements that puts a strain on MTS resources. As used herein data skew indicates a relationship depth for data elements of a multitenant database greater than a threshold. In one embodiment data skew is calculated for each tenant and separate database tables. More specifically related lists sharing owner changes and performance in other parts of the multitenant database environment may suffer when the MTS has to deal with skew in data element relationships e.g. dealing with parent child relationship data .

As described herein soft limits may be introduced on data relationships in the MTS. With the establishing of soft limits or thresholds on relationship depth detection of skew in an on demand database services environment is provided. A request is generated to scan a multitenant database for skew indicated by relationship depth exceeding an expected limit. A database crawler calculates skew for a tenant identifier in the database. In one embodiment skew is calculated for a particular tenant identifier for a particular table in the database. Any skew detected is identified for later handling and or resolution.

Identified skew can be handled for example by providing surface warning messages on the user interface to a tenant or by emailing organization administrators to bring the skew to the attention of the administrator at the user end. Additionally other operations on the skewed relationships can be blocked or data access may be otherwise restricted for a particular tenant based on detected data skew for the tenant.

As referred to herein a multitenant database stores data for multiple client organizations which are each identified by a tenant ID. One or more users can be associated with each tenant ID. The one or more users of each client organization access data identified by the tenant ID associated with the respective client organization. The multitenant database is typically a database stored and hosted remote from the client organization. Typically the multitenant database is hosted by an entity e.g. company separate from the client organization.

Each table through N includes any number of data elements. In an implementation where tables correspond to object types elements and of table can be considered object instances of the type of table . Data elements of one table may be related to data elements of other tables. For example element of table could be related to elements and for example element may related to elements and with parent child relationships .

As suggested above system may have standard logic in its system applications that assumes a certain relationship depth maximum. The assumption can exist in the way the logic is implemented within the MTS and a relationship depth above the maximum causes performance degradation because of the design of the logic. Rather than having to redevelop the logic for the entire system soft limits thresholds can be placed on relationship depths that prevent the performance degradation. Each system configuration may be different and thus the thresholds that avoid or reduce performance degradation will be different for each implementation. Those of skill in the art will understand where such limits are for their individual implementations.

MTS logic represents logic in system . While certain logic not shown within MTS logic may suffer performance degradation due to excessive relationship depth or data skew other logic may be provided to detect data skew. MTS logic includes crawler to crawl through multitenant database to detect data skew. In one embodiment each table is inspected to determine whether relationship depth of objects in the table is greater than a threshold value e.g. a configurable value stored for crawler . Determination of depth greater than a threshold is performed for a given tenant ID e.g. the ID associated with each data element of tables through N . In one embodiment skew is defined not only for a given tenant ID but also for a given table. Thus skew may be identified for a particular tenant with respect to a particular table e.g. table identifying skew per tenant ID per table.

In one embodiment MTS logic includes scheduler which provides scheduling for the crawl operations of crawler . Additional details related to embodiments of a crawler and embodiments of a scheduler are provided below with respect to . Generally scheduler may indicate when crawler should execute. The execution may be in response to a request an event or a timer. Scheduler may invoke crawler with limitations on resource usage by crawler thus controlling the loading effect on the MTS. For example scheduler may invoke crawler only on non peak hours or restrict the amount of processing resources or memory that can be used by the crawler.

While specific reference is made above to system in general embodiments of the invention relate to detecting data skew where data skew indicates a relationship depth for data elements of the multitenant database greater than a threshold for a particular client organization. A skew agent may execute to determine skew which may include a crawler to mine the database for skew information. The skew agent receives a request to detect data skew in a multitenant database and initiates a database crawl operation to detect data skew for data stored in the multitenant database.

Detecting data skew involves determining whether a relationship depth of objects within the multitenant database is higher than a threshold. Thus the skew agent calculates the relationship depth of objects within the multitenant database including identifying relationships by tenant ID. The skew agent identifies data skew for any case where relationship depth exceeds the threshold for data associated with a particular tenant ID. In one embodiment data skew is determined based on tenant ID and database table. There may be different thresholds for different tables.

With regard to operations related to determining skew or mining the database for skew information the skew agent determines what relationships to monitor for skew. In one embodiment all data relationships are monitored for skew. In alternative embodiments only certain relationships are monitored for skew or skew may be detected for certain relationships in one crawl and a different relationship in a different craw. The relationships to monitor for data skew prevent may be identifiable at the UDD universal data dictionary level by an attribute on the foreign key fields of an entity. The UDD includes definitions of objects including their fields for the system.

In one embodiment calculating the relationship depth of objects includes identifying a data model associated with the object and calculating relationship depth based on the data model. For example the data model may indicate relationships that are monitored or may define how relationships are stored and thus how the crawler can mine for the skew information. In one embodiment a multitenant database may include standard data models for use by all tenants and custom data models for user defined objects and or tables. Thus the skew agent may need to determine from a user definition how the relationships are to be calculated. Calculating relationship depth on such custom objects may include accessing a metadata table or other information that identifies the custom data model of the object. Then relationship depth can be calculated based on the specific data model defined.

In one embodiment the skew agent can initiate skew detection based on receiving a request from an MTS administrator. In one embodiment the skew agent can initiate skew detection based on receiving a request from a user administrator. For example a setup page can exist for user side administrators to allow them to see skewed relationships and they may be able to request a recalculation e.g. via selecting a button or other GUI element . In one embodiment a runtime page can exist for all organizations or per organization that shows skew data and lets an administrator request a re count per relationship or per organization.

In one embodiment the skew agent can initiate skew detection based on timing such as at a particular time of day e.g. performing a scan task once a day or at the expiration of a timer. In one embodiment the skew agent can initiate skew detection based on a state of the MTS of which the database is a part. For example the state of the MTS could be evaluated for load and crawling could be initiated when load is under a certain level and paused whenever the load is above a level. Thus crawling could be performed as a background process without causing excessive load on the MTS.

In one embodiment the skew agent identifies candidates for skew analysis by logging slow running queries. The identification of candidates may be used to determine what to analyze the next time a crawl is triggered. Additionally identification could trigger an analysis to occur e.g. trigger the initiation of a crawl .

In one embodiment object relationships are registered at startup time of an application server making them available to a scheduled task responsible for data mining to detect skew. The skew agent can be configured to automatically disregard entities that do not have a deleted column or valid indexes containing the deleted column.

With regards to data related to determining skew the crawler can store information in a cache e.g. a memcache and then dump or store relationships identified as skewed in a database table e.g. in system data . Results data and running data during a crawl can be stored for example in memory associated with one or more application servers and refreshed some variable number of minutes e.g. a simple map reloaded every 5 minutes . If such a map becomes too large the tenant ID associated with identified skew can be stored as a key in memory with relationship details in memcache.

For large multitenant databases it is expected that the run time for mining skew information will be relatively slow e.g. 6 8 hours . Thus the skew agent scheduler may attempt to schedule the mining for a particular block of time e.g. at night most likely to allow the operations to be performed without overloading the system. Especially because of the fact that mining is expected to be relatively slow an indication of skew may become outdated for example continuing to display warnings for a relationship even though the organization s administrator has been working all day trying to alleviate the data skew. Thus in one embodiment a validation process can be executed to improve end user experience.

The validation process may be a satellite process that reexamines skewed data data or relationships flagged or marked as skewed . Thus the likelihood of false positives the system flagging data as skewed when the data is now within bounds can be reduced by a process referred to below as an inspector. The inspector can execute more frequently e.g. every 30 minutes and only verify whether previously detected skew has been resolved.

In one embodiment the skew agent maintains a history of warnings at the application level. When warning state changes from skewed to non skewed the skew agent can hide the notice and or give an all clear message. In the event of a warning state changing to skewed the message can be used for rate limiting and or for displaying a notice. In addition to skew notices the skew agent could provide statistics related to any one or more components of the crawl for a tenant.

Regarding enforcement of skew warnings skew can be handled in many ways. In one embodiment the system simply provides default hooks that display warnings on entities with data skew problems. Beyond a certain threshold the skew agent can send an email to the parent object owner and or the administrators and or provide other notification. In one embodiment there are multiple thresholds and beyond a final threshold the system may prevent further operations from being performed on an identified skewed relationship. Thus object merger or change of ownership may be prevented.

In one embodiment there may be tiered thresholds tn which may be specified as Org Values. The defaults might for example be something like t 10 4 where a surface warning is generated on the UI t 10 5 where an email is sent to an administrator of the tenant organization and t 10 6 where the system blocks further inserts certain edits merges e.g. merging two problematic accounts should not be allowed ownership changes or lookups. In one embodiment thresholds could be specific to an entity allowing different thresholds for different entities.

In one embodiment a user side administrator is able to request a recalculation of skew. In such a scenario it may be assumed that the user administrator would like a recount to be known sooner rather than later. In such a case rate limiting may be applied to the tenant to free resource bandwidth to perform a recount e.g. reduce available resources to the tenant by an amount of resources used to perform the recount . Such a case of recount may be more specific than a crawl that looks at all data in the multitenant database rather the recount can be restricted to the tenant ID of the requesting tenant.

In one embodiment table represents a table that includes a standard Objects defined by a standard data model available system wide in a UDD. Table represents a table that includes custom objects defined by metadata associated with the objects e.g. metadata associated with object . The metadata could be stored with the objects in table or could be stored in a separate table not illustrated .

The objects are intended to be represented generically. Objects and are illustrated as having Fields A B and C. Field C is illustrated as the object field that is to be checked for relationship to other objects. Data skew is detected based on the relationships for a particular tenant ID. Thus relationships may also be computed for object but assuming that object has a different tenant than object its relationship depth or count will be counted towards a threshold for the other tenant ID.

Object is illustrated as having Fields A C D and E. Assuming for the sake of example that Field C is the field from which relationship depth is determined relationships can be computed towards a relationship depth threshold for a tenant ID associated with table . Even assuming the tenant ID is the same for Objects and relationships and may count towards different thresholds because in certain implementations relationship depth is counted per tenant ID per table and objects and are in different tables.

Object is illustrated as having Fields A E F and C. The point of illustrating object is to indicate that while objects and have the same fields or are based on the same data model objects and are not necessarily based on the same data model. Rather metadata associated with the object is accessed in determining data skew for the data model associated with the particular object.

Skew agent includes scheduler which manages when skew is determined. Trigger detection represents mechanisms that allow the skew agent to determine when to perform a crawl or when to perform a recalculation or other skew detection process. Trigger detection may include mechanisms to receive a request by a user administrator or to receive a request by an MTS administrator. In one embodiment scheduler includes timer or similar timing control mechanism. Thus trigger detection can be operated based on timer to perform a skew detection process based on timing e.g. a time of day or after a certain amount of time .

In one embodiment scheduler can schedule skew detection for multiple database instances. Thus database db identifier enables scheduler to indicate what database instance to mine for skew information. In one embodiment rather than identifying a particular database database identifier represents a progress indicator or bookmark . When mining for data the mining operations may be interrupted e.g. if they take too long or if system circumstances change causing the function to be paused . Database identifier as a progress indicator logs where data mining was interrupted to enable scheduler to generate tasks to pick back up where it last left off.

Task generators and each represent mechanisms to enable scheduler to generate jobs to perform the data skew detection operations. Detecting skew may be a very substantial process to perform. Rather than sending a massive process to an application server for execution multiple smaller data skew tasks can be created as individual jobs . All jobs can be sent to the same application server or could be sent to multiple different application servers for execution. Jobs represent operations for execution within system . In one embodiment jobs may include any jobs or tasks to perform within system and not just tasks related to detecting skew. Task generators and specifically provide operations related to data skew detection.

Task generator generates tasks that are related to a database crawl. Thus in one embodiment task generator invokes crawler as an application to execute on one or more application servers to crawl the database. The tasks for crawler to execute are part of jobs which are sent to execution resources . A database crawl can be understood as a series of operations that analyze multiple or possibly all elements of the database or a subset of the database.

Crawler includes task execution to perform the tasks related to crawling or mining the database for skew information. Crawl state represents a state of crawl operations of crawler or persisted state information. Thus crawler can be interrupted in performing its crawl operations and then return to where it was interrupted. Thus the crawl does not need to be performed in one continuous operation. Rather the crawl could be performed for example over multiple days in the case of a large database and a crawl that only takes place for a period of time once per day. Skew tagger enables crawler to tag or indicate data where skew is detected.

In one embodiment crawler includes information related to data models and how to count relationship depth for objects in the database. Alternatively crawler may access the information from system data or from the database itself. As illustrated UDD universal data dictionary represents system data available from a system database associated with system . UDD can include information related to the data model of objects to be checked for relationship depth. Metadata may represent metadata information stored in system data that describes the format or data model of an object and allows system to determine relationship depth. Alternatively metadata may represent metadata stored in the database itself. Thus crawler could access metadata to identify how the objects are structured and how to recognize relationship depth of the object and then would determine the relationship depth accordingly by accessing the object from the database.

Task generator generates tasks that are related to verification of relationships marked as skewed by crawler . In one embodiment task generator invokes inspector which could also be referred to as a skew verification agent as an application to execute on one or more application servers to determine whether skew has been resolved on data or relationships marked as skewed. The tasks for inspector to execute are part of jobs which are sent to execution resources . Skew verification enables inspector to check on relationship depth specifically for data previously marked as skewed. It will be understood that skew verification does not need to mine the database for skew information but need only verify the relationship depth for flagged data. Thus the scope of skew verification is smaller than that of crawler . Thus inspector can run more frequently than crawler e.g. hourly or every half hour in contrast to once daily .

Task generator generates tasks that are related to a manually requested recalculation of relationship depth. In one embodiment task generator invokes inspector but could also invoke inspector or another logic program or routine of a program to perform a relationship depth calculation. A recalculation is an operation performed in response to a specific request by a user administrator or a system administrator. The user administrator manages the access to the multitenant database from the user side. A system administrator manages the multitenant database. In one embodiment a recalculation can be requested by a user administrator through an MTS interface for example to allow a user administrator to attempt to clean up a problem relationship depth and verify that it is corrected.

Execution resources include hardware resources and one or more database interfaces . Hardware resources include any processing devices memory devices storage devices and other hardware that may be used to perform jobs . Hardware resources include the hardware that executes the application servers and crawler or inspector . Database interface represents hardware interconnections ports and interface circuits e.g. a network interface circuit NIC as well as the software and network stacks used to interconnect to a multitenant database.

As suggested previously there may be limits placed on resource use for the crawler operations inspector operations and recalculation operations. Execution restrictions represent the limits that may be placed on the use of execution resources by various jobs . Crawler limits indicate restrictions on the operation of crawler and inspector limits indicate restrictions on the operation of inspector . Recalculation limits indicate limits on the operations associated with a recalculation. The restrictions placed on a recalculation may be distinct from the limits placed on a program that will perform the recalculation operations e.g. inspector .

Examples of the types of limits that may exist in execution restrictions may include how many processing resources a program is allowed to have how many threads or how many processes are allowed to be executed at the same time how many or which application servers can process the requests how many database connections can be opened and or what bandwidth is available through the connections how much memory can be consumed or other restrictions.

MTS provides on demand database services for environment . An on demand database service such provided by MTS is a database system that is made available to an outside user as needed by the user e.g. on the demand of the user . Thus a user does not necessarily need to be concerned with building and or maintaining the database system and rather can simply store and access data as needed from a remotely operated database system.

In one embodiment MTS stores information from one or more tenants into tables of a common database image or multitenant database MTDB . Accordingly MTS provides on demand database service. A database image may include one or more database objects. A multitenant database stores data for various different tenants or organizations in a single database instance. Resources such as memory processing space processing hardware and other resources of the database system are shared or allocated among the different tenants.

Multitenant database includes tenant data . . . . The tenant data may be divided into different storage areas which can be a physical and or a logical arrangement of data. In one embodiment multitenant database is accessed via a relational database management system RDBMS or the equivalent which executes storage and retrieval of information against the database object s . In one embodiment multitenant database is accessed via an object oriented database management system OODBMS or the equivalent. In one embodiment multitenant database is accessed via an object relational database management system ORDBMS or the equivalent. It will be understood that an RDEMS manages data stored in the database based on a relational model where data and data relationships are stored in tables. An OODBMS includes at least some integration of a database with an object oriented programming language and data is stored in the database in the same mode of representation as is provided in the programming language. An ORDBMS implements both a relational model and an object oriented model storing data in tables and allowing representation of data consistent with a programming language.

Application platform represents a framework that allows applications of MTS to execute. Thus application platform includes the software components such as an operating system to allow execution of the applications. Hardware platform provides hardware resources to enable the applications to execute on application platform as well as enabling execution of management or control logic for MTS . In one embodiment application platform of MTS enables creation managing and executing one or more applications developed by the provider of the on demand database service users accessing the on demand database service via network or third party application developers accessing the on demand database service via network .

MTS represents any type of system that may provide on demand database service. In addition to application platform and hardware platform which includes processor resources and memory resources MTS may include other components. MTS includes network interface to enable user devices to access MTS over network . In one embodiment MTS includes system data program code and process space . System data represents data specific to the running of MTS rather than being tenant data. It is logically separated from the tenant storage and may be physically separated e.g. by designating storage areas or address ranges for system data . Program code represents code to implement various functions of MTS which enable the system to provide on demand database service. Process space represents a framework for executing MTS processes and tenant specific processes such as running applications as part of an application hosting service. Additional processes that may execute on MTS include database indexing processes. It will be understood that MTS may include more or fewer components than what is illustrated.

As mentioned above environment includes organizations and which represent tenants of MTS . Each organization may include one or more individual and may be an individual or small company up to a large corporation or organization. Thus it will be understood that the number of user devices associated with each organization could potentially be hundreds or even thousands. Each organization is assigned a tenant identifier ID within MTS . Each tenant ID could have certain associated properties for use depending on how the organization is configured. User device is associated with organization and access MTS under the tenant ID of organization . Similarly user devices and are associated with organization and access MTS under the tenants ID assigned to organization .

User devices and may be any machine or system that is used by a user to access a database user system. For example any of the user devices can be a handheld computing device a mobile phone a laptop computer a work station and or a network of computing devices. Each user device can be provided with an on demand database service from MTS via network .

Within an organization users may be further given access privileges and or restrictions as illustrated by data filter . As illustrated user device may access MTS in accordance with whatever access is available to organization while user device has additional restrictions applied by data filter . In one embodiment data filter may additionally or alternatively provide specific user interface features for user in accessing data from MTS .

The users of user devices and may differ in their respective capacities and the capacity of a particular user device might be entirely determined by permissions permission levels for the current user. For example where a salesperson is using a particular user device to interact with MTS that user device has the capacities assigned to that salesperson. However an administrator using the same user device may have different capacities assigned to that administrator. In systems with a hierarchical role model users at one permission level may have access to applications data and database information accessible by a lower permission level user but may not have access to certain applications database information and data accessible by a user at a higher permission level. Thus different users will have different capabilities with regard to accessing and modifying application and database information depending on a user s security or permission level. Such enforcement could occur based on data filter which can filter per device and or could filter for the entire organization e.g. a central filter as opposed to distributed filtering .

Network represents any network or combination of networks. A network is generically an interconnection of devices that communicate with each other. Network can be or include any combination of a LAN local area network WAN wide area network telephone network wireless network point to point network star network token ring network hub network or other appropriate configuration. TCP IP Transfer Control Protocol and Internet Protocol networks are commonly used such as the global internetwork of networks often referred to as the Internet. Reference to specific networks in certain examples herein is meant only to provide examples and is not limiting.

In one embodiment user devices and other user devices not shown communicate with MTS over network using TCP IP and at a higher network level use other common protocols to communicate such as HTTP HyperText Transfer Protocol FTP File Transfer Protocol AFS Andrew File System a distributed network filesystem using trusted servers WAP Wireless Access Protocol . In an example where HTTP is used user device might include an HTTP client commonly referred to as a browser for sending and receiving HTTP messages to and from an HTTP server at MTS not specifically shown but which could be executed on hardware platform . Such an HTTP server might be implemented as the sole network interface between MTS and network but other techniques might be used as well or instead. In one embodiment the interface between MTS and network includes load sharing functionality such as round robin HTTP request distributors to balance loads and distribute incoming HTTP requests evenly over a plurality of servers. At least as for the users that are accessing that server each of the plurality of servers has access to data in MTS however other alternative configurations may be used instead.

In one embodiment MTS implements a web based customer relationship management CRM system. For example in one embodiment MTS includes application servers configured to implement and execute CRM software applications as well as provide related data code forms webpages and other information to and from user devices e.g. and to store to and retrieve from a database system related data objects and webpage content. With a multitenant system data for multiple tenants may be stored in the same physical database object however tenant data is typically arranged so that data of one tenant is kept logically separate from that of other tenants. The logical separation prevents one tenant from having access to another tenant s data. An express sharing of data among tenants is possible which removes the logical separation. In one embodiment MTS implements applications other than or in addition to a CRM application. For example MTS may provide tenant access to multiple hosted standard and custom applications including CRM application. User or third party developer applications which may or may not include CRM may be supported by application platform which manages creation storage of the applications into one or more database objects and executing of the applications in a virtual machine in process space of MTS .

In one embodiment MTS is configured to provide webpages forms applications data and media content to user client device to support the access by user devices as tenants of MTS . In one embodiment MTS provides security mechanisms to keep each tenant s data separate unless the data is shared. More than one MTS may be used. If more than one MTS is used the multiple systems may be located in close proximity to one another e.g. in a server farm located in a single building or campus or they may be distributed at locations remote from one another e.g. one or more servers located in city A and one or more servers located in city B .

As used herein each MTS could include one or more logically and or physically connected servers distributed locally or across one or more geographic locations. Additionally the term server refers to a computer system including processing hardware and process space s and an associated storage system and database application e.g. OODBMS RDBMS ORDBMS as is known in the art. It will be understood that server system and server are often used interchangeably herein. Similarly a database object described herein can be implemented as single databases a distributed database a collection of distributed databases a database with redundant online or offline backups or other redundancies and might include a distributed database or storage network and associated processing intelligence or logic.

Environment may include conventional well known elements that are explained only briefly here. For example user device and any other user devices through which users access MTS could include a desktop personal computer workstation laptop handheld device cell phone or smart phone or any wireless access protocol WAP enabled device or any other computing device capable of interfacing directly or indirectly to the Internet or other network connection.

User device includes processor which represents one or more processor devices and may be any combination of one or more processors. Processor provides hardware means to execute programs and applications on user device . Memory represents a memory system for user device and may be any combination of one or more memory devices short term and or tong term memory. I O input output represents any type of input and output devices such as keyboards pointers and controllers touchscreens buttons microphones or other input mechanisms and monitors screens printers interfaces to networks and or other output devices.

User device includes network interface which represents hardware interconnections and control logic and circuitry to enable user device to connect to network . Network interface also has associated drivers and possibly other software components to allow user programs to interface with the interconnection hardware. User device includes client which represents a program that allows a user of user device to access information from network such as accessing MTS . UI represents a user interface component of client or a user interface in which information from client is presented on user device . Thus UI may be integrated with client or it may be separate from client but display data related to the execution of client . UI is rendered on display or user interface hardware or device which can be understood to be represented by UI .

In one embodiment user device runs an HTTP client as client . An HTTP client may be for example a browsing program or a browser which may include a WAP enabled browser in the case of a cell phone PDA or other wireless device. The HTTP client allows a user e.g. subscriber of MTS of user device to access process and view information pages and applications available from MTS over network based on permissions and privileges. The user interface device of user device can be used to access data and applications hosted by MTS and to perform searches on stored data and otherwise allow a user to interact with various GUI graphical user interface pages that may be presented to a user.

Similar to what is discussed above with reference to network of environment network represents any network or group of networks over which access can be provided to MTS . Network may include switching and or routing elements cables connectors and other components. In one embodiment at least part of network is the Internet referring to a specific global internetwork of networks. However it should be understood that other networks can be used in addition to or instead of the Internet such as an intranet an extranet virtual private network VPN a non TCP IP based network any LAN or WAN or other network.

In one embodiment user devices such as user device which may be client systems communicate with application server to request and update system level and tenant level data from MTS that may require sending one or more queries to tenant data storage in database instance and or system data in system database . In one embodiment MTS e.g. application server automatically generates one or more SQL statements e.g. one or more SQL queries designed to access the desired information. System data storage in system database may generate query plans to access the requested data from database instance .

In one embodiment MTS includes one or more application servers . From one perspective application server can be considered a network interface of MTS to connect to network . Application server exchanges i.e. receives and or transmits data with network such as receiving requests and sending replies or sending data. Application servers may share hardware resources for interfacing with network or they may be assigned separate resources. In one embodiment one or more of application servers can be implemented as an HTTP application server.

In one embodiment each application server is configured to handle requests for any user associated with any organization that is a tenant. Thus a request from user device could be received and processed at any application server . There may be advantages to avoiding affinity for a user and or an organization or tenant to a specific application server such as the ability to add and remove application servers from a server pool at any time for any reason as well as for workload balancing among the servers. In an implementation where user and or tenant affinity is used an application server could not be removed without completing its jobs and or handing off users to another server.

In one embodiment an interface system implementing aloud balancing function e.g. an F5 Big IP load balancer is communicably coupled between application servers and the user devices to distribute requests to the application servers . In one embodiment the load balancer uses a least connections algorithm to route user requests to the application servers . Other examples of load balancing algorithms such as round robin and observed response time also can be used. For example in certain embodiments three consecutive requests from the same user could hit three different application servers and three requests from different users could hit the same application server . In this manner MTS is multitenant wherein MTS handles storage of and access to different objects data and applications across disparate users and organizations. In one embodiment 

Each application server includes elements to provide database access service and request processing. Application server includes API application programming interface and UI . UI represents server side components that provide user interface elements that are provided to user device for display. API provides an interface for users and or developers to access resident processes of MTS .

In one embodiment application server includes application appl platform which provides a sub environment on which applications hosted by application server can be executed. Application platform may include an operating system or other control logic as well as business logic and common routines for use by the applications. As illustrated application platform includes application setup mechanism that supports creation and management of applications including configuration by application developers which may be saved as metadata into tenant data storage of database db instance . Save routines represent the mechanisms used to store data in database instance such as storing the application setup metadata. Such applications can be executed by subscriber users for example in process space .

In one embodiment invocations to or related to such applications may be coded using PL SOQL Procedural Language Salesforce Object Query Language that provides a programming language style interface extension to API . Thus PL SOQL is capable of serving as a procedural extension to an on demand database centric service API that allows flow control and transaction control to execute on a server in conjunction with database APIs e.g. SOQL data manipulation language DML or others . PL SOQL can enable the capability to thread together multiple SOQL DML statements as a single unit of work on the server. PL SOQL need not necessarily be considered a general purpose programming language seeing that it may be implemented as heavily data focused but is not necessarily implemented that way. In one embodiment PL SOQL can be used by developers to interlace with an on demand database system in contrast to traditional application developers conventional tools such as PL SQL Structured Query Language of ORACLE Inc. of Redwood Shores Calif. and others.

in one embodiment PL SOQL includes variable and expression syntax block and conditional syntax loop syntax object and array notation pass by reference and other syntax known to other programming languages. Thus hill control over syntax and the ability to reference dynamic schema elements is provided with anew language and runtime for database services. Where embedded concepts that interface with on demand database applications are provided syntax and semantics that are easy to understand and which encourage efficient use of database APIs may also be employed. In one embodiment PL SOQL is implemented as a strong typed language with direct non quoted references to schema objects such as Object and Field names both standard and custom .

More details about PL SOQL language embodiments is discussed in commonly owned U.S. Provisional Patent Application 60 828 192 entitled PROGRAMMING LANGUAGE METHOD AND SYSTEM FOR EXTENDING APIS TO EXECUTE IN CONJUNCTION WITH DATABASE APIS by Craig Weissman filed Oct. 4 2006 now expired which is incorporated in its entirety.

In one embodiment invocations to applications may be detected by one or more system processes which manage retrieving application metadata for the subscriber making the invocation and executing the metadata as an application in a virtual machine. Metadata provides data related to access and or use of data stored in database instance . In one embodiment metadata is stored in a separate table within database instance and in an alternative embodiment metadata is stored with other data elements of user storage such as with user storage of table .

In one embodiment application server includes process space which may include tenant process spaces through N for some integer number N of process spaces configured in application server tenant management process space and system process space . It will be understood that process space is an abstraction to illustrate the resources allocated for execution of processes e.g. programs or applications within application server . The skilled reader recognizes that memory and processor and other hardware resources may need to be allocated as well as software resources to support the execution of a process. The processes may be executed as separate threads or my share a thread. In one embodiment the number N of tenant processes is equal to a number of subscriber tenants. In another embodiment the number N of tenant processes may be higher than the number of subscriber tenants. Tenant management process provides management of the other processes including determining when certain processes execute. System process executes operations related to functions of MTS .

Each application server may be configured to tenant data storage in database instance and the tenant data stored therein and to system data storage of system database and the system data stored therein to serve requests of user devices. As mentioned above in one embodiment tenant data is separated logically and stored in the same multitenant database. In one embodiment database instance stores data in tables through M where M is some integer number of tables. In one embodiment different tables store data of different types. Application metadata may be implemented as a separate table. Alternatively one of the tables through M could be a table that stores varying types of objects which are defined through metadata stored in the table.

In one embodiment database instance is further implemented with user storage space distinct identifiable from its associated tenant. Thus for example user data may include the tenant ID as well as an identifier specific to a user. Thus storage may represent either or both of tenant storage or user storage. For example a copy of a user s most recently used MRU items might be stored to in user storage within database instance . Similarly a copy of MRU items for an entire organization that is a tenant might be stored to a tenant storage area of database instance . In one embodiment the tenant data and the system data as illustrated by system database are stored in separate databases.

Application servers may be communicably coupled to database systems e.g. having access to system database and tenant database instance via a different network connection. For example one application server may be coupled via a network e.g. the Internet another application server might be coupled via a direct network link and another application server might be coupled by yet a different network connection. The application servers may connect to the database systems via TCP IP or another transport protocol at least partially depending on the network interconnect used.

Regarding storage in database instance one tenant might be a company that employs a sales force where each salesperson uses MTS to manage their sales process. Thus a user might maintain contact data leads data customer follow up data performance data goals and progress data and other data all applicable to that user s personal sales process e.g. storage which may be tenant storage . Thus all of the data and the applications to access view modify report transmit calculate or perform other operations can be maintained and accessed via a user device having nothing more than network access. In an example of an MTS arrangement the user can manage his or her sales efforts and cycles from any of many different user devices. For example if a salesperson is visiting a customer and the customer has a lobby with Internet access the salesperson can obtain critical updates as to that customer while waiting for the customer to arrive in the lobby.

While each user s data might be separate from other users data regardless of the employers of each user some data might be organization wide data shared or accessible by a plurality of users or all of the users for a given organization that is a tenant. Thus there might be some data structures managed by MTS that are allocated at the tenant level while other data structures might be managed at the user level. Because MTS may support multiple tenants including possible competitors MTS should have security protocols that keep data applications and application use separate. Additionally because many tenants may opt for access to an MTS rather than maintain their own system redundancy up time and backup are additional functions that may be implemented in MTS . In addition to user specific data and tenant specific data MTS may also maintain system level data usable by multiple tenants or other data. Such system level data might include industry reports news postings and the like that are sharable among tenants.

In one embodiment each database instance can be viewed as a collection of objects such as a set of logical tables containing data fitted into predefined categories. A table is one representation of a data object and may be used herein to simplify the conceptual description of objects and custom objects according to the present invention. It should be understood that table and object type may be used interchangeably herein. Each table generally contains one or more data categories logically arranged as columns or fields in a viewable schema. Each row or record of a table contains an instance of data for each category defined by the fields.

For example a CRM database may include a table that describes a customer with fields for basic contact information such as name address phone number fax number or other information. Another table might describe a purchase order including fields for information such as customer product sale price date or other fields. In one embodiment a multitenant database has standard entity tables for use by all tenants. For CRM database applications such standard entities might include tables for Account Contact Lead and Opportunity data each containing pre defined fields. Thus tables through M may include standard defined tables.

In one embodiment tenants may be allowed to create and store custom objects or they may be allowed to customize standard entities or objects for example by creating custom fields for standard objects including custom index fields. U.S. patent application Ser. No. 10 817 161 filed Apr. 2 2004 entitled Custom Entities and Fields in a Multi Tenant Database System teaches systems and methods for creating custom objects as well as customizing standard objects in a multitenant database system. In one embodiment for example all custom entity data rows are stored in a single multitenant physical table which may contain multiple logical tables per organization. It is transparent to customers that their multiple tables are in fact stored in one large table or that their data may be stored in the same table as the data of other customers.

A skew agent receives a crawl trigger . The crawl trigger can be initiated by an automated process e.g. a tinier or a calendared event or the trigger can be initiated in response to a human interaction e.g. an administrator requesting a crawl . The skew agent initiates a database crawler to perform the crawl . In one embodiment the skew agent includes a scheduler or scheduling process to generate crawl jobs . The crawl jobs are sent to execution resources such as one or more application servers and associated hardware for execution.

The crawler then continues its operation to perform the crawl jobs. In one embodiment the crawler identifies a data model for a table and or for an object of a multitenant database . For standard objects data model information may be available from system data. For custom objects the crawler may read metadata describing the data model of an object to inspect for skew. The crawler calculates relationship depth based on the information about the data model .

The crawler compares the calculated relationship depth against a threshold value for the tenant ID and possibly for the combination of tenant ID and table . In one embodiment relationship depth is calculated per tenant and table the threshold relationship depth is not exceeded by the calculated relationship depth the crawler continues its scan .

If the threshold relationship depth is exceeded by the calculated relationship depth the crawler identifies the tenant and possibly table and or object associated with the skew . In one embodiment the crawler identifies the tenant and object as being skewed. The skew agent could then specifically identify the skewed data or skewed relationship directly to a user for correction.

The skew agent receives a validation trigger . The validation trigger can be initiated by an automated process e.g. a timer or a calendared event or the trigger can be initiated in response to a human interaction e.g. an administrator requesting a verification of skew . The skew agent initiates a skew inspector to perform the verification . In one embodiment the skew agent includes a scheduler or scheduling process to generate validation jobs . The validation jobs are sent to execution resources such as one or more application servers and associated hardware for execution.

The inspector then continues its operation to perform the jobs related to verification of identified skew. In one embodiment the inspector validates a tenant ID and database and potentially object flagged for skew . Similar to the crawler discussed above the inspector can access data model information to determine how to calculate skew for a particular object or table. The inspector calculates relationship depth based on the information about the data model to determine if the skew has been resolved .

If the skew is resolved the inspector removes a skew flag associated with the data . If the skew is not resolved the inspector maintains the flag for future validation operations . In one embodiment skew that has not been resolved is placed on a schedule for validation. Thus the skew may be checked periodically to determine if skew is resolved. In one embodiment the inspector or the skew agent can apply further restrictions to data for which skew has not been resolved.

Various operations or functions are described herein which may be described or defined as software code instructions configuration and or data. The content may be directly executable object or executable form source code or difference code delta or patch code . The software content of the embodiments described herein may be provided via an article of manufacture with the content stored thereon or via a method of operating a communications interface to send data via the communications interface. A machine readable medium or computer readable medium may cause a machine to perform the functions or operations described and includes any mechanism that provides i.e. stores and or transmits information in a form accessible by a machine e.g. computing device electronic system or other device such as via recordable non recordable storage media e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices or other storage media or via transmission media e.g. optical digital electrical acoustic signals or other propagated signal . A communication interface includes any mechanism that interfaces to any of a hardwired wireless optical or other medium to communicate to another device such as a memory bus interface a processor bus interface an Internet connection a disk controller. The communication interface can be configured by providing configuration parameters and or sending signals to prepare the communication interface to provide a data signal describing the software content.

Various components described herein may be a means for performing the operations or functions described. Each component described herein includes software hardware or a combination of these. The components can be implemented as software modules hardware modules special purpose hardware e.g. application specific hardware application specific integrated circuits ASICs digital signal processors DSPs etc. embedded controllers hardwired circuitry etc.

Besides what is described herein various modifications may be made to the disclosed embodiments and implementations of the invention without departing from their scope. Therefore the illustrations and examples herein should be construed in an illustrative and not a restrictive sense. The scope of the invention should be measured solely by reference to the claims that follow.

