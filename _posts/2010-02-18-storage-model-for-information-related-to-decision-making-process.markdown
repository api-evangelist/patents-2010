---

title: Storage model for information related to decision making process
abstract: In an embodiment, a method is provided for storing information related to a decision making process. In this method, data items that are associated with a choice, a fact, and/or a decision are accessed. These data items are used in an application that provides a functionality associated with the decision making process. A relationship between the data items is then created based on a context in which the data items are used in the application. The data items and the relationship are stored in a common data structure that is accessible by a different application that provides a different functionality associated with the decision making process.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09342800&OS=09342800&RS=09342800
owner: SAP SE
number: 09342800
owner_city: Walldorf
owner_country: DE
publication_date: 20100218
---
The present disclosure relates generally to information storage. In an example embodiment the disclosure relates to a model for storing information related to decision making process.

Currently there are a variety of different applications that provide functionalities to assist with decision making processes. For example an application may be used for cataloging the pros and cons of a scenario. Another application may provide the functionality for conducting analyses of the strengths weaknesses opportunities and threats that may be involved in a particular project.

All these applications use different data and store that data in different ways. These different applications are also typically not designed to share data. For example an application may provide the functionality to build meeting agendas while another application may be used to prioritize the various meeting agendas. Although these two applications relate to the creation or analysis of meeting agendas they cannot share data between each other because they are separate programs. As a result the use of two different applications may for example result in the input and storage of redundant data.

The description that follows includes illustrative systems methods techniques instruction sequences and computing machine program products that embody illustrative embodiments of the present invention. In the following description for purposes of explanation numerous specific details are set forth in order to provide an understanding of various embodiments of the inventive subject matter. It will be evident however to those skilled in the art that embodiments of the inventive subject matter may be practiced without these specific details. In general well known instruction instances protocols structures and techniques have not been shown in detail.

The embodiments described herein provide techniques for storing information generated by different applications that are used in decision making processes. In general data from different applications are formatted and stored according to a general data model. In this model data from the different applications may be parsed into data item units. Additionally relationships between these different data items are created. These data items together with their relationships may then be stored in a common structure that is accessible by the different applications.

The computing device may include various applications e.g. widgets applications programs and applets a decision storage module a database management system DBMS and a database . These applications are computer programs that provide a variety of functionalities related to decision making processes based in part on access of data stored in the database . A decision making process as used herein refers to a process used to determine or settle something in dispute. The applications provide tools that may be used to make the decision and this decision may ultimately be made by users or automatically by one or more applications . For example one or more of such applications may provide cataloging of choices analysis using strengths weaknesses opportunities and threats SWOT methodology resource planning and any other suitable functions related to decision making processes. Such applications may access data stored in for example the database by way of interactions with other elements of the computing device such as the decision storage module and the DBMS .

Generally the database management system may comprise any suitable system for managing database instances. For example the database management system may receive requests for data e.g. Structured Query Language SQL requests from one or more applications retrieve requested data from the database and return the requested data to one or more requestors e.g. client devices . The applications communicate with DBMS over one or more interfaces provided by the DBMS . The applications may in turn support client applications executed by client devices . Such a client application may far example include a Web browser to access and display reports generated by the applications . In this regard the computing device may for example comprise a Web server to manage interactions with the client devices .

In the example embodiment of one or more applications may store different data in the database . Before the data is stored the decision storage module may parse the different data and store them according to a data model as explained in more detail below. As a result many or all the data used by the applications are uniformly formatted and stored in a common data structure which allows the creation of a semantic network that describes for example decisions choices considered in making the decisions and or facts about those choices as will also be explained in more detail below.

It should be appreciated that the computing device may include other elements that are not shown and may be used during operation thereof such as any suitable program code scripts or other functional data that is executable to interface with other elements of the system other applications other data files operating system files and device drivers. Furthermore two or more elements of the system may be located remote from one another and may communicate with one another via a network and or a dedicated connection. Moreover each displayed element of system may comprise any number of hardware and or software elements some of which are located remote from each other element. The elements described herein as communicating with one another are directly or indirectly capable of communicating over any number of different systems for transferring data including but not limited to shared memory communication a local area network LAN a wide area network WAN a telephone network acellular network a fiber optic network a satellite network an infrared network a radio frequency network and any other type of network that may be used to transmit information between devices. Additionally communication between systems may proceed over any one or more transmission protocols that are or become known such as Asynchronous Transfer Mode ATM Internet Protocol IP HyperText Transfer Protocol HTTP and Wireless Application Protocol WAP .

The computing device executes an operating system that manages other software processes and or services executing on the computing device . These software processes and or other services may include applications a decision storage application programming interface API a decision storage module a DBMS and a database . As discussed above the applications are used in the decision making process and the database management system manages database instances. The decision storage module stores data accessed by the applications according to a general data model by way of the database management system . In particular the decision storage module may parse data into data item units or data items that are associated with decisions choices considered in making the decisions and or facts about the choices. A data item as used herein refers to a distinct and indivisible part of a collection of data. Examples of data items include text strings scalar values Boolean values coordinates user identities project names uniform resource identifiers times dates categorical data metadata to data and other data items. A data item is indivisible in that it is not separable into parts. For example the test string shopping is a data item because this word is distinct and is not further separable into parts e.g. sho and pping that constitute a complete word such as sho and pping. In another example the coordinate 53.2342 is also a data item because this coordinate value is distinct and not further separable into parts e.g. 53.23 and 42 that constitute a complete coordinate value. In one embodiment compound structures can be used but such structures may be composed of data items based on relationships rather than being data items themselves as will be explained in more detail below. It should be appreciated that a data item may also be referred to as an atom and accordingly the terms user item and atom may be used interchangeably.

In one example embodiment the applications may interface with the decision storage module by way of the decision storage API . Here the decision storage API is an interface implemented by the decision storage module to enable interaction with other applications that are used in the decision making process by providing for example calling conventions that may be employed to use the functionalities of the decision storage module .

It should be appreciated that in other embodiments the computing device may include fewer more or different modules apart from those shown in . For example in an alternate embodiment the decision storage module may be integrated within the DBMS . In yet another embodiment the applications may directly access the functionalities of the decision storage module without use of the decision storage API .

Relationships between each data item are then created at based on the context in which the data items are used in the application. A relationship is an association or dependence between two or more data items. The context in which the relationship is created refers to the setting in which the data items are used in the application. For example in one embodiment the relationships can be created based on associations between data items as defined in a database table as explained in more detail below. In an alternate embodiment relationships may be created based on the categorization of each data item as a choice a fact or a decision as is also explained in more detail below.

With the relationships created the data items and their relationships are then stored in a common data structure at . A data structure provides context for the organization of data. For example a common data structure may be a database structure of a database table. In another example a common data structure may be an eXtensible markup language XML structure of an XML file. Other examples of data structures include structures associated with database tables arrays linked lists and indexes.

The storage of different data items from different applications based on a general data model may facilitate for example the storage of the data items in a centralized storage location. Different applications that provide different functionalities used in the decision making process can therefore access a common set of data or data items from this centralized storage location. By centralizing the storage of data items duplicate or redundant data items may possibly be minimized or eliminated. Additionally the centralization of all data items from different applications may possibly facilitate identifying gaps in the information. For example if a number of data items are classified as choices but not related to any decision then a user may be prompted to identify or define the relationship between these data items and one or more decisions.

It should be appreciated that the data items and and their relationship illustrated in may be represented and stored using a variety of different data models. For example in one embodiment the data items and and the relationship may be represented using Resource Description Framework RDF . In general RDF is a method for conceptual description or modeling of information that is implemented in for example web resources using a variety of syntax formats. Although RDF is a language designed for representing information about resources in the World Wide Web WWW RDF may also be used in embodiments of the present invention to represent data items and and their relationship .

In this example the data item is identified as a subject the data item is identified as an object and their relationship is identified as a predicate. The subject denotes a resource and the predicate denotes traits or aspects of the resource and expresses a relationship between the subject and the object. For example one way to represent the statement The car has the color red in RDF is as the triple a subject the car a predicate has the color and an object red. The predicate in RDF may be defined using a Uniform Resource Identifier URI which is a string of characters used to identify a name or a resource on the Internet. In addition to identifying a relationship between the subject and object the predicate also defines a type of relationship between them. For example the predicate URI http www.kry.org date includes information e.g. date regarding the type of relationship between the subject data item and the object data item . This relationship type can include for example an is a relationship a pro of relationship a con of relationship an option in relationship or other relationship types that describe the relationship between data items and .

It should be noted that RDF is an abstract data model with several serialization formats. For example RDF may be formatted in XML as explained in more detail below. As a result the particular way in which a triple is encoded in RDF may vary depending on the format used.

As depicted the database table stores information regarding the tally of votes that are either for FOR or against AGAINST various choices e.g. cheap hotels expensive hotels and moderate hotels . Relational databases permit the database table to have an arbitrary number of columns and rows. In one example each choice defined in each row e.g. cheap hotels expensive hotels or moderate hotels is a data item. Each tally or value associated with a choice e.g. 4 2 10 14 15 or 17 also is a data item. Given that the data items are stored in a relational database table the data items are related to each other because information stored in a relational database table is inherently related. In this example the column names e.g. FOR and AGAINST can be identified as the type of relationship between the data items. As such in the creation of a relationship between data items the column names of the database table are identified and these column names are assigned to the relationships.

In an example embodiment where RDF is used the subject of a triple is the name associated with a choice e.g. cheap hotels expensive hotels or moderate hotels the object e.g. 4 2 10 14 15 or 17 corresponds to the values in the cells of the database table and the predicate corresponds to the column names e.g. FOR or AGAINST .

It should be appreciated that there are a variety of different techniques to create the relationship between data items because each application may use the data items in different ways. That is the contexts in which the data items are used in different applications are different. For example a particular application may provide the functionality to allow a set of named data items to be arranged in a two dimensional space where one dimension is named as Relative Market Share and another dimension is named Market Growth Rate. Here the set of named data items is text and two other data items with scalar values can represent the positions of the set of named data items. Each data item with a scalar value can be related with a text data item and the name of the dimension Relative Market Share or Market Growth Rate can be identified as a type of the relationship.

In yet another example relationships may be predefined between the different data items and these predefined relationships can be created based on the categorization of each data item. For example a relationship may be predefined between a decision and a choice. Similarly another relationship may be predefined between a choice and a fact. Each data item is categorized as a choice a fact or a decision. Based on the categorization the predefined relationships may be applied or created between the data items. In an illustrative example two data items are accessed where one data item is categorized as a decision and another data item is categorized as a fact. Given that no relationship is predefined between a decision and a fact no relationship is created between the data items. However if one data item is categorized as a decision and the other data item is otherwise categorized as a choice then a relationship is created between these two data items based on the predefined relationship.

Data items may be categorized based on a variety of different techniques. For example an application can automatically assign a category to a particular data item based on the context in which this data item is used in the application. In another example a decision storage module may include filters that filter out data items that do not meet a certain predefined criteria. The data items that are filtered may be assigned to particular categories.

The semantic network describes the decision all the choices considered in making the decision and all the facts about the choices. Different applications may contribute to different portions of the semantic network . For example a particular application may provide the functionality to generate project names data item . Another application may provide the functionality to only generate a pro con table data item . Given that all the applications create and store data items associated with facts choices and or decisions in a common data structure the semantic network can be constructed to show all the choices and facts in making a particular decision. Otherwise without this common data structure each application has only a portion of the complete data set and can therefore only show a limited view of the choices and facts considered in making a particular decision.

The second database table is configured to store each relationship between two or more data items in the form of foreign keys that reference the first data table . The second database table therefore does not store the data items themselves but rather stores foreign keys or other pointers that reference the data items stored elsewhere. From these foreign keys relationships between data items can be identified. For example each row in the second database table defines an RDF triple set where the first column Data Item Reference A references a subject the second column Data Item Reference B references an object and the third column Relationship includes the types of relationships or predicate between the subject and the object. Similarly any suitable applications that provide functionalities associated with decision making processes can access these database tables and to read modify and or store data items relationships between the data items and relationship types.

The machine is capable of executing a set of instructions sequential or otherwise that specify actions to be taken by that machine. Further while only a single machine is illustrated the term machine shall also be taken to include any collection of machines that individually or jointly execute a set or multiple sets of instructions to perform any one or more of the methodologies discussed herein.

The example of the computing device includes a processor e.g. a central processing unit CPU a microprocessor or a graphics processing unit GPU a main memory e.g. random access memory a type of volatile memory and static memory e.g. static random access memory a type of volatile memory which communicate with each other via bus . The computing device may further include video display unit e.g. a plasma display a liquid crystal display LCD or a cathode ray tube CRT . The computing device also includes an alphanumeric input device e.g. a keyboard a user interface UI navigation device e.g. a mouse a disk drive unit a signal generation device e.g. a speaker and a network interface device .

The disk drive unit a type of non volatile memory storage includes a machine readable medium on which is stored one or more sets of data structures and instructions e.g. software embodying or utilized by any one or more of the methodologies or functions described herein. The data structures and instructions may also reside completely or at least partially within the main memory and or within the processor during execution thereof by computing device with the main memory and processor also constituting machine readable tangible media.

The data structures and instructions may further be transmitted or received over a computer network via network interface device utilizing any one of a number of well known transfer protocols e.g. HyperText Transfer Protocol HTTP .

Certain embodiments are described herein as including logic or a number of components modules or mechanisms. Modules may constitute either software modules e.g. code embodied on a machine readable medium or in a transmission signal or hardware modules. A hardware module is a tangible unit capable of performing certain operations and may be configured or arranged in a certain manner. In example embodiments one or more computer systems e.g. the computing device or one or more hardware modules of a computer system e.g. a processor or a group of processors may be configured by software e.g. an application or application portion as a hardware module that operates to perform certain operations as described herein.

In various embodiments a hardware module may be implemented mechanically or electronically. For example a hardware module may comprise dedicated circuitry or logic that is permanently configured e.g. as a special purpose processor such as a field programmable gate array FPGA or an application specific integrated circuit ASIC to perform certain operations. A hardware module may also comprise programmable logic or circuitry e.g. as encompassed within a processor or other programmable processor that is temporarily configured by software to perform certain operations. It will be appreciated that the decision to implement a hardware module mechanically in dedicated and permanently configured circuitry or in temporarily configured circuitry e.g. configured by software may be driven by cost and time considerations.

Accordingly the term hardware module should be understood to encompass a tangible entity be that an entity that is physically constructed permanently configured e.g. hardwired or temporarily configured e.g. programmed to operate in a certain manner and or to perform certain operations described herein. Considering embodiments in which hardware modules are temporarily configured e.g. programmed each of the hardware modules need not be configured or instantiated at any one instance in time. For example where the hardware modules comprise a processor e.g. a general purpose processor configured using software the processor may be configured as respective different hardware modules at different times. Software may accordingly configure the processor for example to constitute a particular hardware module at one instance of time and to constitute a different hardware module at a different instance of time.

Modules can provide information to and receive information from other hardware modules. For example the described hardware modules may be regarded as being communicatively coupled. Where multiples of such hardware modules exist contemporaneously communications may be achieved through signal transmission e.g. over appropriate circuits and buses that connect the hardware modules. In embodiments in which multiple hardware modules are configured or instantiated at different times communications between such hardware modules may be achieved for example through the storage and retrieval of information in memory structures to which the multiple hardware modules have access. For example one hardware module may perform an operation and store the output of that operation in a memory device to which it is communicatively coupled. A further hardware module may then at a later time access the memory device to retrieve and process the stored output. Hardware modules may also initiate communications with input or output devices and can operate on a resource e.g. a collection of information .

The various operations of example methods described herein may be performed at least partially by one or more processors that are temporarily configured e.g. by software or permanently configured to perform the relevant operations. Whether temporarily or permanently configured such processors may constitute processor implemented modules that operate to perform one or more operations or functions. The modules referred to herein may in some example embodiments comprise processor implemented modules.

Similarly the methods described herein may be at least partially processor implemented. For example at least some of the operations of a method may be performed by one or more processors or processor implemented modules. The performance of certain of the operations may be distributed among the one or more processors not only residing within a single machine but deployed across a number of machines. In some example embodiments the processor or processors may be located in a single location e.g. within a home environment an office environment or as a server farm while in other embodiments the processors may be distributed across a number of locations.

While the embodiments are described with reference to various implementations and exploitations it will be understood that these embodiments are illustrative and that the scope of the embodiment s is not limited to them. In general techniques for storing data items associated with decisions choices and or facts may be implemented with facilities consistent with any hardware system or hardware systems defined herein. Many variations modifications additions and improvements are possible.

Plural instances may be provided for components operations or structures described herein as a single instance. Finally boundaries between various components operations and data stores are somewhat arbitrary and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of the embodiment s . In general structures and functionality presented as separate components in the exemplary configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components. These and other variations modifications additions and improvements fall within the scope of the embodiment s .

