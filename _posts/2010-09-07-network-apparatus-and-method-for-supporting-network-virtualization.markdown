---

title: Network apparatus and method for supporting network virtualization
abstract: A network apparatus and a network virtualization support method. The network apparatus may include a software-based virtualization unit to generate a software-based virtualization slice in association with another network apparatus; a hardware-based virtualization unit to generate a hardware-based virtualization slice in association with another network apparatus; and a virtualization control unit to activate the software-based virtualization unit or the hardware-based virtualization unit based on the user information of the user who requests generation of the virtualization slice.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08468523&OS=08468523&RS=08468523
owner: Electronics and Telecommunications Research Institute
number: 08468523
owner_city: Daejeon
owner_country: KR
publication_date: 20100907
---
This application claims the benefit under 35 U.S.C. 119 a of Korean Patent Application No. 10 2009 0101859 filed on Oct. 26 2009 the entire disclosure of which is incorporated herein by reference for all purposes.

The following description relates to a network technology more particularly to a network virtualization supporting method for implementing a virtual network in a physical network apparatus.

PlanetLab one conventional network virtualization supporting method only supports the generation of software based slices. On the other hand Supercharging PlanetLab as an advanced form of PlanetLab only supports the generation of static hardware based slices.

For example PlanetLab develops a program to be run on a node that is a network apparatus with a traditional C programming application programming interface API such as a socket. The developed program is statically uploaded on the node and then a software based virtualization slice is generated according to Layer 3 L3 tunneling protocols.

Meanwhile Supercharging PlanetLab generates a program at a level of a hardware dependent or hardware specific assembly language or machine language and loads the program to a node thereby running the program to generate a hardware based virtualization slice. That is the hardware based slice generation method can generate the virtualization slice fast using the hardware based fast packet forwarding method. However to generate the virtualization slice necessary codes should be programmed separately for individual pieces of hardware and statically loaded to a node such as a router.

Both of the above two conventional methods separately implement codes and statically upload the codes to a node and thus they have the limitation that the codes cannot be installed in the node dynamically. For example a software based slice and a hardware based slice cannot be selectively generated according to user characteristics for example depending on a business model in a single node.

In one general aspect provided is a network apparatus performing software based virtualization or hardware based virtualization based on user information of a user who requests generation of a virtualization slice. The network apparatus may comprise a software based virtualization unit to generate a software based virtualization slice in association with another network apparatus a hardware based virtualization unit to generate a hardware based virtualization slice in association with another network apparatus and a virtualization control unit to activate the software based virtualization unit or the hardware based virtualization unit based on the user information of the user who requests generation of the virtualization slice.

The network apparatus may further comprise an open application programming interface API for communication with an external network and the open API may provide an API list and the software based virtualization unit and the hardware based virtualization unit may take reference to the provided API list to make a virtualization program.

The network apparatus may further comprise an interface conversion unit to convert a generation code of the software based slice which is input to the open API into an API code supported by hardware when the hardware based virtualization unit generates the hardware based virtualization slice.

In another general aspect provided is a network virtualization support method performing software based virtualization or hardware based virtualization based on user information of a user who requests generation of a virtualization slice. The network virtualization support method may comprise determining whether to generate a software based virtualization slice or a hardware based virtualization slice based on the user information of the user who requests generation of the virtualization slice and generating a software based virtualization slice or a hardware based virtualization slice in association with another network apparatus according to a result of the determination.

The generating of the software based virtualization slice or the hardware based virtualization slice may include when it is determined that the hardware based virtualization slice is to be generated converting a generation code of the software based slice into an application programming interface API code supported by hardware and generating the hardware based virtualization slice based on the converted API code.

Other features and aspects will be apparent from the following detailed description the drawings and the claims.

Throughout the drawings and the detailed description unless otherwise described the same drawing reference numerals will be understood to refer to the same elements features and structures. The relative size and depiction of these elements may be exaggerated for clarity illustration and convenience.

The following description is provided to assist the reader in gaining a comprehensive understanding of the methods apparatuses and or systems described herein. Accordingly various changes modifications and equivalents of the methods apparatuses and or systems described herein will be suggested to those of ordinary skill in the art. Also descriptions of well known functions and constructions may be omitted for increased clarity and conciseness.

In the example illustrated in the open interface is an open application programming interface API and is an interface that is created by a programmer for program development. In one example the open interface is an open API for wired wireless communications allowing wired wireless call connections a short message service location information provision and the like. The open API may be provided for communication with an external network including an open gateway.

The software based virtualization unit and the hardware based virtualization unit create a slice that is a virtual machine to allow users to access the network apparatus.

In detail in one example the software based virtualization unit may be implemented as a virtual machine monitor VMM software solution that is middleware such as a hypervisor. The software based virtualization unit provides a connection between physical server and operating systems OSes to enable two or more OSes and applications to share hardware. The software based virtualization unit enables a hardware interface to use a virtual machine. The software based virtualization unit may generate a software based virtualization slice in association with another network apparatus.

The hardware based virtualization unit runs a hardware dependent assembly language program or a machine language program to create a hardware based virtualization slice. The hardware based virtualization unit may generate a hardware based virtualization slice in association with another network apparatus. The hardware based virtualization unit may support a virtualization program in various ways according to hardware specification of the network apparatus and in the case of a router node the hardware based virtualization unit may support functions of hardware in use differently according to a type of a processor chip of the hardware. For example an Intel processor chip writes a program in a machine language such as an assembly language and installs the program in hardware. An OCTEON based processor chip writes a program using an API such as a C programming language and installs the program in hardware. Once the hardware based virtualization slice is created hardware based forwarding function such as dynamic packet generation may be supported.

The interface conversion unit may be implemented as an API converter. In the example of the interface conversion unit converts a program code in a manner that creates the hardware based slice in accordance with hardware specifications.

The storage unit may be implemented as a memory device. In the example of the storage unit stores user information of a user who uses a network service including the network apparatus.

The virtualization control unit determines whether to create a software based virtualization slice or a hardware based virtualization slice based on various business models. The virtualization control unit may activate the software based virtualization unit or the hardware based virtualization unit based on the user information of the user who requests generation of the virtualization slice. In the example the virtualization control unit may authenticate and authorize a user who requests the creation of a slice based on the user information stored in the storage unit . Additionally the virtualization control unit may determine for example whether the user is a special VIP customer who pays for more services than other users based on the stored user information and if the user is a special VIP customer the virtualization control unit may determine to create the hardware based virtualization slice that is faster than the software based virtualization slice. However the determination of the virtualization control unit is not limited to the above and the virtualization control unit may make decision whether to create the hardware based virtualization slice or the software based virtualization slice according to various standards.

To create a software based virtualization slice the virtualization software generates a new virtual machine using a privileged virtual machine . Then the generated new virtual machine is connected to a virtual machine of another network apparatus through a communication technique such as layer 3 L3 tunneling to generate the software based slice.

To create a hardware based virtualization slice a hardware based forwarding function such as dynamic packet generation is supported. The hardware based forwarding function including the dynamic packet generation may be supported in various ways according to specifications of the hardware and in the case of a router node the hardware based forwarding function may be supported differently according to a type of a processor chip of the hardware . For example an Intel processor chip writes a program in a machine language such as an assembly language and installs the program in hardware. An OCTEON based processor chip writes a program using an API such as a C programming language and installs the program in hardware.

The control unit controls and manages both the software based slice and the hardware based slice. In the example of the control unit provides an end to end virtualization slice to network apparatuses. In addition the control unit authenticates and authorizes a user through the open interface to identify if the user is a certified user a special user or a general user.

The control unit identifies whether a program maker who will upload a program to the network apparatus is a special user or a general user. The identifying of the user may be performed by checking the user authentication and authorization function. For example if the program maker is a special user who pays more for use of the services the control unit may support the generation of the hardware based virtualization slice which is faster than the software based virtualization slice. In this case the API converter converts a program that has been developed by the user through the open API into a code compatible to the hardware based virtualization slice suitable for the hardware in the network apparatus and dynamically loads the code onto the hardware in the network apparatus to run. The standards for the special user may be determined according to internal procedures or policies.

The open API allows the user to load a desired program onto virtual software or virtual hardware in the network apparatus. In the example the open API may be configured to provide an API list that is required for developing a program to be run in the network apparatus and accordingly allow the user to create a program to be run on a software based virtualization slice or a hardware based virtualization slice with the same effort.

The API converter is operable to covert a code of the program such that a hardware based slice can be generated according to hardware specifications when the program is created by the special user who has been authenticated and authorized. The API converter converts the program code to generate the hardware based slice in accordance with the hardware specifications. The program code conversion by the API converter is the conversion into an API program code provided by the processor chip of the network apparatus. For example an OCTEON chip may perform the code conversion using C API as below which supports hardware forwarding.

As shown in the example illustrated in a node is able to support the generation of a software based virtualization slice A with respect to a node M as well as the generation of a hardware based virtualization slice B with respect to a node N. the hardware based virtualization slice B supports a fast process such as hardware forwarding by a router thereby having a faster processing speed than the software based virtualization slice A.

If the programmer is a special user that pays more for the use of services the generation of a hardware based virtualization slice which is faster than a general software based virtualization slice is supported.

To this end the program created by the special user is converted into a code compatible to a hardware based virtualization slice suitable to the network apparatus and is dynamically loaded to the hardware of the network apparatus in which the code is to be run . Then the hardware based virtualization slice is generated .

Meanwhile if the programmer is a general user a software based virtualization slice is generated . Virtualization software may use a privileged virtual machine to create a new virtual machine and connect the generated new virtual machine to a virtual machine of another network apparatus using a communication technique such as L3 tunneling thereby generating the software based virtualization slice.

As described above an open API is designed in a network apparatus such as a router and based on the designed open API a program code to be dynamically uploaded to a node can be developed. Accordingly a hardware based virtualization slice and a software based virtualization slice can be selectively generated.

That is a user who pays more for the use of services may be provided with a faster packet transmission service through the hardware based virtualization slice and a general user may be provided with the software based virtualization slice. Thus a differentiated service can be provided according to the type of a user.

The current embodiments can be implemented as computer readable codes in a computer readable record medium. Codes and code segments constituting the computer program can be easily inferred by a skilled computer programmer in the art. The computer readable record medium includes all types of record media in which computer readable data are stored. Examples of the computer readable record medium include a ROM a RAM a CD ROM a magnetic tape a floppy disk and an optical data storage. Further the record medium may be implemented in the form of a carrier wave such as Internet transmission. In addition the computer readable record medium may be distributed to computer systems over a network in which computer readable codes may be stored and executed in a distributed manner.

A number of examples have been described above. Nevertheless it will be understood that various modifications may be made. For example suitable results may be achieved if the described techniques are performed in a different order and or if components in a described system architecture device or circuit are combined in a different manner and or replaced or supplemented by other components or their equivalents. Accordingly other implementations are within the scope of the following claims.

