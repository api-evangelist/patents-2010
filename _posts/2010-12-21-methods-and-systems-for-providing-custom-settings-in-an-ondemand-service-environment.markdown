---

title: Methods and systems for providing custom settings in an on-demand service environment
abstract: In accordance with embodiments, there are provided mechanisms and methods for providing custom settings in an on-demand service environment. In an embodiment and by way of example, a method providing custom settings in an on-demand service environment is provided. The method embodiment includes naming the custom object, creating fields for the custom object, assigning a behavior for each field, setting the custom object to a specified type, and if the custom object is of a hierarchical type, then assigning permissions to users with regarding the created fields.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08554793&OS=08554793&RS=08554793
owner: salesforce.com, inc.
number: 08554793
owner_city: San Francisco
owner_country: US
publication_date: 20101221
---
This application claims the benefit of U.S. Provisional Patent Application No. 61 325 488 entitled Methods and Systems for Appending Providing Custom Settings In An On Demand Service Environment by Unger et al. filed Apr. 19 2010 the entire contents of which are incorporated herein by reference.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

The present disclosure relates to providing custom settings in an on demand service environment and in particular to creating and editing custom settings for users and organizations.

The subject matter discussed in the background section should not be assumed to be prior art merely as a result of its mention in the background section. Similarly a problem mentioned in the background section or associated with the subject matter of the background section should not be assumed to have been previously recognized in the prior art. The subject matter in the background section merely represents different approaches which in and of themselves may also be inventions.

In conventional database systems users access their data resources in one logical database. A user of such a conventional system typically retrieves data from and stores data on the system using the user s own systems. A user system might remotely access one of a plurality of server systems that might in turn access the database system. Data retrieval from the system might include the issuance of a query from the user system to the database system. The database system might process the request for information received in the query and send to the user system information relevant to the request. The rapid and efficient retrieval of accurate information and subsequent delivery of this information to the user system in a manner that is easy to understand has been and continues to be a goal of administrators of database systems.

Unfortunately conventional database approaches might confuse the user or be difficult to use if the data is not presented in a convenient way and combined with other data from other sources or from additional searches. While such benefits can be provided with powerful and additional searches the database system may process a query relatively slowly if for example a relatively large number of users substantially concurrently demand deeper and wider levels of information presented in an easier to user form.

Accordingly it is desirable to provide techniques enabling applications to call custom objects that can access supplemental data from local cache to combine with the query results from the database system.

In accordance with embodiments there are provided mechanisms and methods for providing custom settings in an on demand service environment. These mechanisms and methods for providing custom settings in an on demand service environment can enable embodiments to provide fast and ready access to custom views and functions using a cache from the application for which the custom setting were created. The ability of embodiments to provide custom setting from a cache can enable more efficient and reduced database querying and use.

In accordance with embodiments there are provided mechanisms and methods for providing custom settings in an on demand service environment. In an embodiment and by way of example a method providing custom settings in an on demand service environment is provided. The method embodiment includes naming the custom object creating fields for the custom object assigning a behavior for each field setting the custom object to a specified type and if the custom object is of a hierarchical type then assigning permissions to users with regarding the created fields.

While one or more implementations and techniques are described with reference to an embodiment in which method and systems for providing custom settings in an on demand service environment is implemented in a system having an application server providing a front end for an on demand database service capable of supporting multiple tenants the one or more implementations and techniques are not limited to multi tenant databases nor deployment on application servers. Embodiments may be practiced using other database architectures i.e. ORACLE DB2 by IBM and the like without departing from the scope of the embodiments claimed.

Any of the above embodiments may be used alone or together with one another in any combination. The one or more implementations encompassed within this specification may also include embodiments that are only partially mentioned or alluded to or are not mentioned or alluded to at all in this brief summary or in the abstract. Although various embodiments may have been motivated by various deficiencies with the prior art which may be discussed or alluded to in one or more places in the specification the embodiments do not necessarily address any of these deficiencies. In other words different embodiments may address different deficiencies that may be discussed in the specification. Some embodiments may only partially address some deficiencies or just one deficiency that may be discussed in the specification and some embodiments may not address any of these deficiencies.

Systems and methods are provided providing custom settings in an on demand service environment. These systems and methods are particularly valuable in the context of a multi tenant database.

As used herein the term multi tenant database system refers to those systems in which various elements of hardware and software of the database system may be shared by one or more customers. For example a given application server may simultaneously process requests for a great number of customers and a given database table may store rows for a potentially much greater number of customers. As used herein the term query plan refers to a set of steps used to access information in a database system.

Database applications are enhanced using metadata for service. Metadata can allow users to add custom fields create custom objects and to control create read update and delete access across the system based on profiles identities and user groups.

With some metadata rich platforms developers package a custom object or set of custom objects that control the behavior of an application for users within their application. A packaged custom object can inhibit a user s access to the custom objects and increase the number of queries performed on the database. In other cases a packaged custom object might not preserve security access rights.

The custom setting structure described below uses two mechanisms. First custom settings lists are created at the application level. These lists can be stored as application caches accessible through an API.

Second the actual settings are created and associated with users at organization profile and user levels. When the application invokes a custom setting it can make a call into the API. The API can then traverse the users profiles and organizations within the cache to determine the values of the custom settings for the current status of the application.

Both mechanisms will expose the data within the application cache to the application and possibly to the user. This enables efficient access to these objects without the cost of a query to the system. Examples of where these objects will be accessible include Apex Code Scontrols Apex Pages Validation Rules and Formula Fields.

The custom settings correspond to objects accessible by particular applications through an API. The API is used to enable the association to applications. In other words the API abstracts the caller which is the application from the settings hierarchy. By storing these settings in an application cache the cache can be traversed before an application accesses the database. This allows any database query to be more carefully focused for the particular user s needs. This reduces the amount of database resources consumed by the application overall.

A further benefit of using custom settings through an API is that the application is separate from the API and from the cache. The application can be changed in some ways without affecting the custom settings and the custom settings can be changed without affecting the application. The cache for the settings can even be restricted for application developers without interfering with the development of the application. Similarly users and developers can modify the custom setting without any knowledge of the underlying application code. The API between the application and the cache allows the application code and the cache to be completely segregated.

Embodiment of the present invention provide an ability for customers to add custom fields create custom objects control create read update and delete access across their system on a profile level etc all with a point and click interface. This can be an enabling technology to simplify management of applications by a wide range of administrators and users.

In the example described herein there are two types of custom settings 1 Application Settings 2 Hierarchy Settings. The Application type may be used to provide the ability to create 1 N Settings at the Organizational level. Alternatively the Application type may be applied to a different level. The Application settings affect the operation of an application. The Hierarchy type may be used to create settings at that differ at different levels within a hierarchy. Hierarchy levels can include the Organization Profile and User level. In the described example the Hierarchy type is a singleton that is for a given profile or user there can only be one instance.

The resource and services are grouped under a heading labeled App Setup . Different labels may be used and more headers may be used to provide more or fewer options. The application setup heading includes sub headings for customizing creating and developing . Under the Develop heading the user is offered an opportunity to view any installed packages . From a list of installed packages the user or developer may then be able to apply other resources to customize the package or create or develop new packages. Each header may have multiple sub headers or specific choices within the hierarchical directory. While a hierarchical directory is shown the directory may take any of a variety of other forms.

On the main part of the display the user interface presents title bar which identifies the displayed view as a main Custom Settings view in the title. The title bar also present a help option. The Custom Setting view includes main window which contains an Action list to display a choice of different actions to take such as configure or delete custom settings. A Custom Setting Name list allows the user to view and select any desired set of custom settings. In the illustrated example there is only one choice labeled AccountMap Preferences. A Setting type list allows the user to see the type for each displayed custom setting. In the described example a Custom Setting can be an application type or an hierarchical type however other types may also be developed to suit particular examples. Last a Description list is shown to provide a short description of each listed custom setting. The description can be provided by the developer to aid in identifying a particular custom setting. In the illustrated example the custom setting AccountMap preferences is described by This setting drives the Account Map Functionality. 

The Custom Setting View also provides a second window to show additional custom settings from other sources. The illustrated example is a window for Custom Settings installed from Appexchange. These custom settings have been installed from an external source in this case an application exchange provided by the database service provider to allow users to enhance the usability of the database system. There may be more windows to show custom settings from more sources or multiple sources may be shown in a single window.

Like the Custom Settings window the additional custom settings window includes a lists for actions to perform on each custom setting the names for each custom setting a type for each custom setting and a description .

From the main Custom Settings window a user or developer has an overview of all of the available custom settings and is able to modify or delete each one. In addition the user or developer can create new custom settings as shown in . In the user has entered a New Custom Settings user interface as indicated in its title bar . Such an interface can be reached in a variety of different ways. In one example the user selects Create in the directory. In another example the user selects the New Custom Setting button from the title bar of the Custom Settings window .

To create a new custom setting the user may be presented with a Custom Settings Definition window . In this window the user can provide a label for the custom setting in a label window . The label may be used when viewing the custom setting in any application to which it relates. The user may also provide a name for the new setting in a custom setting name window . The name may be used when referencing the setting via a formula field an application an API Application Programming Interface or in the main custom settings view of . The user can also set the type for the custom setting as application or list type or hierarchical using a pick list . The hierarchy type may be employed for personalization settings may be overridden at a profile or user level. The list type may be employed for application level lists such as country codes. Finally this window allows the user to provide a description in a text box . The type and description are the same kind of information that is shown for custom settings in .

Referring to the custom setting called AccountMap Preferences of to use the user interface of to create that custom setting the user would enter for example 

Account Map Preferences for a label in the label box . For the name box the user would have entered AccountMap Preferences. For the type the user would have selected hierarchical and for the description box the user would have entered This setting drives the Account Map functionality. 

In the illustrated example of the hierarchical directory can be used to navigate the screens or the user may go directly to the information windows to the right of the directory. As shown if the user has moved into windows creating a new custom setting then the Create directory is expanded to show subtopics within the Create directory for Apps Objects Packages Report Types and Tabs. A subdirectory within the Create directory is shown for Workflow and Approvals.

Within the directory shown for Setup Create Custom Settings administrators with customize application permissions may be allowed to have the ability to create Custom Settings definitions. Creating a Custom Settings definition is similar to creating a custom object definition. Depending on the implementation there can be several differences provided. In one example there is no name field there are no help settings there are no reports on these objects and the standard related objects are not supported. The standard related objects may include activities notes and attachments. In addition custom tabs may be excluded from a Custom Settings definition.

Additional differences between standard custom object definitions and Custom Settings object definitions can be provided depending on the particular implementation. In one example there is no owner field standard objects and standard custom objects cannot be related to Custom Settings objects and custom buttons and links are not supported. In addition search layouts and record types may also be excluded. These simplifications together with a single page layout allow Custom Settings as described herein to be create modified used and supported simply and easily.

The example user interface of shows a wide variety of possible custom fields for the custom settings as a set of selections. More or fewer custom fields may be provided depending upon the particular implementation. The present example shows twelve possible choices.

Currency allows users to enter a dollar or other currency amount and it automatically formats the field as a currency amount. The formatting is useful for exporting data to other programs.

Date Time allows users to enter a date and time or to pick a date from a popup calendar. When users click a date in the popup calendar the date and time are entered into this field.

Email allows user to enter and email address. The entered address is validated to ensure that it is in the proper format. Users can then click on the field to automatically launch their email programs and send an email to that address.

Percent allows user to enter a percentage number for example 10 and the field automatically adds the percent sign to the number.

Phone allows user to enter any telephone number. The number is automatically formatted as a telephone number.

Text Area allows user to enter up to characters on separate lines. The particular size of the text area and the types and number of characters supported can be adapted to suit different applications.

URL allows user to enter any valid website address. When users click on the field the URL will open in a separate or a framed browser window.

After the user or developer makes a selection from the custom settings field window the system moves to establish the features of the new field.

In this example the user is provided with an interface to enter a field label using a text input box . The maximum length of the text field can be specified in another text box . A name can be specified for the field in another text box and a description of the newly created text field can be specified in another text box . A variety of other features can also be presented depending on the particular implementation. In the illustrate example the user may select several features using selection boxes. These may include that a value is required for this field before a record is saved . Duplicate values are prohibited or allowed . Case sensitivity can be turned on or off for duplicate values. An external identifier can be used as the unique record identifier suing a selection box and a default value can be provided by the developer in a specified text box if desired.

The example features shown in the custom setting window of provide an example of the kinds of parameters that may be defined by a developer. Other aspects of the application or database system can be used to provide features that can be defined by the user. In one example custom settings objects leverage a custom object user interface for field creation. These and similar options and features can also be presented to users upon selecting to edit a Custom Settings Object.

In one example users with customize application permissions may be allowed to have the ability to update metadata objects. In addition to the displayed user interface custom settings objects may also be managed through Apex pages and APIs.

A tile bar identifies the level in the process of configuring a new custom setting as Configure Custom Settings. A further detail window is labeled as Organization Custom Settings. This window allows for edit and cancel options. The window provides custom setting information at the top of the window. This may include a geographic location and functions to be performed such as display a map show a legend and show a satellite view. Additional or different information may be provided depending on the particular implementation. This information is useful for the AccountMap Preferences custom setting referred to earlier.

An overrides view can be used to allow the user or developer to control any overrides. In the illustrated example the user has selected to show all overrides. The window then lists all of the overrides in a list by user name. For each named user the override may be edited or deleted using selection boxes and selection icons. The overrides also all feature an override type list for each user. The override type may be based on the particular user identity or a profile. The develop can also select to add an override . This user interface accordingly allows the developer to add remove and edit overrides of different types for each user.

Org level values can also be overridden through the add override action . This action will render the user interface display of titled Profile or User Override .

Rather than the individual settings org level values allows the mass selection of users and profiles. The settings associated to the selected user and profile can then be mass overridden. The user is provided with a first window that allows the user to select users or profiles to override.

A user can begin to add overrides by searching for particular users or groups. In a pick list a user can select a particular group of users to provide an override or to search within. In the illustrated example the user has selected to search within the Public Groups. A text box allows the user to search for a particular name or group within the selected group. In this example the search box is not used and the results are shown in a list of results . The results show available members that match the search in this case all of the users within the public group. Any one or more of these users can be added to a second box that is the selected members. If any members had been selected already then they could be removed from the list of selected members.

A second window Override Org Level Defaults allows the user to pick the features of the class that will be overridden for the selected group. In the example class of the user may override the geographic locale the satellite display the map display or the legend display. These are the primary features of the class. The user interface of also allows the user to save or cancel any selections.

For List Settings unlike Hierarchy settings an override feature may not be desired. As shown in however a user interface may be provided that will support the creation of 1 N of Setting objects at the Organization level. shows a Configure Custom List Settings window . In this window a user can select which custom settings to view from a view pick list . The user may then choose to edit the view or create a new view .

For any particular view the window allows the user to view the selected settings by name in a settings list and see values for the setting . For each setting the user may edit or delete the setting or create new settings.

Access to the customization windows of can be managed using sharing and ownership permissions. Alternatively permissions can be managed at the profiled level. For example in the API values are accessible through an OQL Object Query Language . In Apex values can be accessed from a Setup static type

In a first example a developer may desire that an application allow users the ability to retrieve preferences at both the organization level and the user level. This is then used to provide personalization for features of an organizational map. This date may normally be stored within the organization s hosted infrastructure. However storing the organization map and its features in another location requires the organization to query both its internal setup tables and the database to render the customized Map pages. This is inefficient and presents design concerns if the hosted pages are ported to the database platform. With the custom map setting described above the map preferences can be stored within the database platform as custom settings.

In a second example a developer may provide a scheduling feature providing customers the ability to define the level of scheduling at either an individual day or time of day. By leveraging the custom settings the developer could set these preferences at the organization level and for particular cases override some of those preferences at the profile or user level. In addition the developer may provide a visual map component of the scheduling feature which can be turned on or off within an individual organization. This feature could be managed through a custom preferences table. However the custom settings approach described above allows the developer to set and access the visual map component more efficiently while the end result requires less processing resources. The custom settings approach can also be used to track and store user session attributes. These features may include a view last seen feature which tracks the last view rendered within a user session.

In a third example a developer may maintain a list of country codes in a custom object within the application in which the country codes are used. By using custom settings instead of a data table query for example direct access to these values is provided directly from the cache.

Once the process is initiated the user can name the custom object at block the naming can include defining labels and descriptions and associating the custom object with an application or an API. Typically the application will call the API which will then refer to the custom settings to respond to the call from the application.

At block the user or developer creates or edits fields for the custom object. The user interface as shown in may present a list of all of the current fields for a current package of custom settings and may also present a list of possible additional fields. The user can edit or delete the existing fields and add new ones if desired. The user can also specify the parameters and behaviors of each field. This might include specifying a field as a time field so that user entries are properly received parsed formatted and displayed. provides example of different types of fields.

At block a behavior is assigned for each field. This will typically be in the form of an action however the invention is not so limited. The behaviors may resemble those shown in however the behavior may be an action such as display data call data modify data etc.

At block a user sets the custom object to a specified type. In the provided examples there are two types list or application and hierarchical. Other and additional types may be used depending on the particular implementation. At block if the custom object is of a hierarchical type then the user permissions to users regarding the created fields. On the other hand at block if the custom object is of a list type then the user may configure a list for the object

As to assigning permissions for a hierarchical type of custom setting the permissions may also be hierarchical. In one example permission values are first assigned to a primary level such as an organizational or group level. Then overrides are assigned at a second level such as a group or individual user level.

Environment is an environment in which an on demand database service exists. User system may be any machine or system that is used by a user to access a database user system. For example any of user systems can be a handheld computing device a mobile phone a laptop computer a work station and or a network of computing devices. As illustrated in and in more detail in user systems might interact via a network with an on demand database service which is system .

An on demand database service such as system is a database system that is made available to outside users that do not need to necessarily be concerned with building and or maintaining the database system but instead may be available for their use when the users need the database system e.g. on the demand of the users . Some on demand database services may store information from one or more tenants stored into tables of a common database image to form a multi tenant database system MTS . Accordingly on demand database service and system will be used interchangeably herein. A database image may include one or more database objects. A relational database management system RDMS or the equivalent may execute storage and retrieval of information against the database object s . Application platform may be a framework that allows the applications of system to run such as the hardware and or software e.g. the operating system. In an embodiment on demand database service may include an application platform that enables creation managing and executing one or more applications developed by the provider of the on demand database service users accessing the on demand database service via user systems or third party application developers accessing the on demand database service via user systems .

The users of user systems may differ in their respective capacities and the capacity of a particular user system might be entirely determined by permissions permission levels for the current user. For example where a salesperson is using a particular user system to interact with system that user system has the capacities allotted to that salesperson. However while an administrator is using that user system to interact with system that user system has the capacities allotted to that administrator. In systems with a hierarchical role model users at one permission level may have access to applications data and database information accessible by a lower permission level user but may not have access to certain applications database information and data accessible by a user at a higher permission level. Thus different users will have different capabilities with regard to accessing and modifying application and database information depending on a user s security or permission level.

Network is any network or combination of networks of devices that communicate with one another. For example network can be any one or any combination of a LAN local area network WAN wide area network telephone network wireless network point to point network star network token ring network hub network or other appropriate configuration. As the most common type of computer network in current use is a TCP IP Transfer Control Protocol and Internet Protocol network such as the global internetwork of networks often referred to as the Internet with a capital I that network will be used in many of the examples herein. However it should be understood that the networks that the present invention might use are not so limited although TCP IP is a frequently implemented protocol.

User systems might communicate with system using TCP IP and at a higher network level use other common Internet protocols to communicate such as HTTP FTP AFS WAP etc. In an example where HTTP is used user system might include an HTTP client commonly referred to as a browser for sending and receiving HTTP messages to and from an HTTP server at system . Such an HTTP server might be implemented as the sole network interface between system and network but other techniques might be used as well or instead. In some implementations the interface between system and network includes load sharing functionality such as round robin HTTP request distributors to balance loads and distribute incoming HTTP requests evenly over a plurality of servers. At least as for the users that are accessing that server each of the plurality of servers has access to the MTS data however other alternative configurations may be used instead.

In one embodiment system shown in implements a web based customer relationship management CRM system. For example in one embodiment system includes application servers configured to implement and execute CRM software applications as well as provide related data code forms webpages and other information to and from user systems and to store to and retrieve from a database system related data objects and Webpage content. With a multi tenant system data for multiple tenants may be stored in the same physical database object however tenant data typically is arranged so that data of one tenant is kept logically separate from that of other tenants so that one tenant does not have access to another tenant s data unless such data is expressly shared. In certain embodiments system implements applications other than or in addition to a CRM application. For example system may provide tenant access to multiple hosted standard and custom applications including a CRM application. User or third party developer applications which may or may not include CRM may be supported by the application platform which manages creation storage of the applications into one or more database objects and executing of the applications in a virtual machine in the process space of the system .

One arrangement for elements of system is shown in including a network interface application platform tenant data storage for tenant data system data storage for system data accessible to system and possibly multiple tenants program code for implementing various functions of system and a process space for executing MTS system processes and tenant specific processes such as running applications as part of an application hosting service. Additional processes that may execute on system include database indexing processes.

Several elements in the system shown in include conventional well known elements that are explained only briefly here. For example each user system could include a desktop personal computer workstation laptop PDA cell phone or any wireless access protocol WAP enabled device or any other computing device capable of interfacing directly or indirectly to the Internet or other network connection. User system typically runs an HTTP client e.g. a browsing program such as Microsoft s Internet Explorer browser Netscape s Navigator browser Opera s browser or a WAP enabled browser in the case of a cell phone PDA or other wireless device or the like allowing a user e.g. subscriber of the multi tenant database system of user system to access process and view information pages and applications available to it from system over network . Each user system also typically includes one or more user interface devices such as a keyboard a mouse trackball touch pad touch screen pen or the like for interacting with a graphical user interface GUI provided by the browser on a display e.g. a monitor screen LCD display etc. in conjunction with pages forms applications and other information provided by system or other systems or servers. For example the user interface device can be used to access data and applications hosted by system and to perform searches on stored data and otherwise allow a user to interact with various GUI pages that may be presented to a user. As discussed above embodiments are suitable for use with the Internet which refers to a specific global internetwork of networks. However it should be understood that other networks can be used instead of the Internet such as an intranet an extranet a virtual private network VPN a non TCP IP based network any LAN or WAN or the like.

According to one embodiment each user system and all of its components are operator configurable using applications such as a browser including computer code run using a central processing unit such as an Intel Pentium processor or the like. Similarly system and additional instances of an MTS where more than one is present and all of their components might be operator configurable using application s including computer code to run using a central processing unit such as processor system which may include an Intel Pentium processor or the like and or multiple processor units. A computer program product embodiment includes a machine readable storage medium media having instructions stored thereon in which can be used to program a computer to perform any of the processes of the embodiments described herein. Computer code for operating and configuring system to intercommunicate and to process webpages applications and other data and media content as described herein are preferably downloaded and stored on a hard disk but the entire program code or portions thereof may also be stored in any other volatile or non volatile memory medium or device as is well known such as a ROM or RAM or provided on any media capable of storing program code such as any type of rotating media including floppy disks optical discs digital versatile disk DVD compact disk CD microdrive and magneto optical disks and magnetic or optical cards nanosystems including molecular memory ICs or any type of media or device suitable for storing instructions and or data. Additionally the entire program code or portions thereof may be transmitted and downloaded from a software source over a transmission medium e.g. over the Internet or from another server as is well known or transmitted over any other conventional network connection as is well known e.g. extranet VPN LAN etc. using any communication medium and protocols e.g. TCP IP HTTP HTTPS Ethernet etc. as are well known. It will also be appreciated that computer code for implementing embodiments of the present invention can be implemented in any programming language that can be executed on a client system and or server or server system such as for example C C HTML any other markup language Java JavaScript ActiveX any other scripting language such as VBScript and many other programming languages as are well known may be used. Java is a trademark of Sun Microsystems Inc. .

According to one embodiment each system is configured to provide webpages forms applications data and media content to user client systems to support the access by user systems as tenants of system . As such system provides security mechanisms to keep each tenant s data separate unless the data is shared. If more than one MTS is used they may be located in close proximity to one another e.g. in a server farm located in a single building or campus or they may be distributed at locations remote from one another e.g. one or more servers located in city A and one or more servers located in city B . As used herein each MTS could include one or more logically and or physically connected servers distributed locally or across one or more geographic locations. Additionally the term server is meant to include a computer system including processing hardware and process space s and an associated storage system and database application e.g. OODBMS or RDBMS as is well known in the art. It should also be understood that server system and server are often used interchangeably herein. Similarly the database object described herein can be implemented as single databases a distributed database a collection of distributed databases a database with redundant online or offline backups or other redundancies etc. and might include a distributed database or storage network and associated processing intelligence.

User system network system tenant data storage and system data storage were discussed above in . Regarding user system processor system A may be any combination of one or more processors. Memory system B may be any combination of one or more memory devices short term and or long term memory. Input system C may be any combination of input devices such as one or more keyboards mice trackballs scanners cameras and or interfaces to networks. Output system D may be any combination of output devices such as one or more monitors printers and or interfaces to networks. As shown by system may include a network interface of implemented as a set of HTTP application servers an application platform tenant data storage and system data storage . Also shown is system process space including individual tenant process spaces and a tenant management process space . Each application server may be configured to tenant data storage and the tenant data therein and system data storage and the system data therein to serve requests of user systems . The tenant data might be divided into individual tenant storage areas which can be either a physical arrangement and or a logical arrangement of data. Within each tenant storage area user storage and application metadata might be similarly allocated for each user. For example a copy of a user s most recently used MRU items might be stored to user storage . Similarly a copy of MRU items for an entire organization that is a tenant might be stored to tenant storage area . A UI provides a user interface and an API provides an application programmer interface to system resident processes to users and or developers at user systems . The tenant data and the system data may be stored in various databases such as one or more Oracle databases.

Application platform includes an application setup mechanism that supports application developers creation and management of applications which may be saved as metadata into tenant data storage by save routines for execution by subscribers as one or more tenant process spaces managed by tenant management process for example. Invocations to such applications may be coded using PL SOQL that provides a programming language style interface extension to API . A detailed description of some PL SOQL language embodiments is discussed in commonly owned U.S. Pat. No. 7 730 478 entitled METHOD AND SYSTEM FOR ALLOWING ACCESS TO DEVELOPED APPLICATIONS VIA A MULTI TENANT DATABASE ON DEMAND DATABASE SERVICE issued Jun. 1 2010 to Craig Weissman which is incorporated in its entirety herein for all purposes. Invocations to applications may be detected by one or more system processes which manages retrieving application metadata for the subscriber making the invocation and executing the metadata as an application in a virtual machine.

Each application server may be communicably coupled to database systems e.g. having access to system data and tenant data via a different network connection. For example one application server might be coupled via the network e.g. the Internet another application server N might be coupled via a direct network link and another application server N might be coupled by yet a different network connection. Transfer Control Protocol and Internet Protocol TCP IP are typical protocols for communicating between application servers and the database system. However it will be apparent to one skilled in the art that other transport protocols may be used to optimize the system depending on the network interconnect used.

In certain embodiments each application server is configured to handle requests for any user associated with any organization that is a tenant. Because it is desirable to be able to add and remove application servers from the server pool at any time for any reason there is preferably no server affinity for a user and or organization to a specific application server . In one embodiment therefore an interface system implementing a load balancing function e.g. an F5 Big IP load balancer is communicably coupled between the application servers and the user systems to distribute requests to the application servers . In one embodiment the load balancer uses a least connections algorithm to route user requests to the application servers . Other examples of load balancing algorithms such as round robin and observed response time also can be used. For example in certain embodiments three consecutive requests from the same user could hit three different application servers and three requests from different users could hit the same application server . In this manner system is multi tenant wherein system handles storage of and access to different objects data and applications across disparate users and organizations.

As an example of storage one tenant might be a company that employs a sales force where each salesperson uses system to manage their sales process. Thus a user might maintain contact data leads data customer follow up data performance data goals and progress data etc. all applicable to that user s personal sales process e.g. in tenant data storage . In an example of a MTS arrangement since all of the data and the applications to access view modify report transmit calculate etc. can be maintained and accessed by a user system having nothing more than network access the user can manage his or her sales efforts and cycles from any of many different user systems. For example if a salesperson is visiting a customer and the customer has Internet access in their lobby the salesperson can obtain critical updates as to that customer while waiting for the customer to arrive in the lobby.

While each user s data might be separate from other users data regardless of the employers of each user some data might be organization wide data shared or accessible by a plurality of users or all of the users for a given organization that is a tenant. Thus there might be some data structures managed by system that are allocated at the tenant level while other data structures might be managed at the user level. Because an MTS might support multiple tenants including possible competitors the MTS should have security protocols that keep data applications and application use separate. Also because many tenants may opt for access to an MTS rather than maintain their own system redundancy up time and backup are additional functions that may be implemented in the MTS. In addition to user specific data and tenant specific data system might also maintain system level data usable by multiple tenants or other data. Such system level data might include industry reports news postings and the like that are sharable among tenants.

In certain embodiments user systems which may be client systems communicate with application servers to request and update system level and tenant level data from system that may require sending one or more queries to tenant data storage and or system data storage . System e.g. an application server in system automatically generates one or more SQL statements e.g. one or more SQL queries that are designed to access the desired information. System data storage may generate query plans to access the requested data from the database.

Each database can generally be viewed as a collection of objects such as a set of logical tables containing data fitted into predefined categories. A table is one representation of a data object and may be used herein to simplify the conceptual description of objects and custom objects according to the present invention. It should be understood that table and object may be used interchangeably herein. Each table generally contains one or more data categories logically arranged as columns or fields in a viewable schema. Each row or record of a table contains an instance of data for each category defined by the fields. For example a CRM database may include a table that describes a customer with fields for basic contact information such as name address phone number fax number etc. Another table might describe a purchase order including fields for information such as customer product sale price date etc. In some multi tenant database systems standard entity tables might be provided for use by all tenants. For CRM database applications such standard entities might include tables for Account Contact Lead and Opportunity data each containing pre defined fields. It should be understood that the word entity may also be used interchangeably herein with object and table .

While the invention has been described by way of example and in terms of the specific embodiments it is to be understood that the invention is not limited to the disclosed embodiments. To the contrary it is intended to cover various modifications and similar arrangements as would be apparent to those skilled in the art. Therefore the scope of the appended claims should be accorded the broadest interpretation so as to encompass all such modifications and similar arrangements.

