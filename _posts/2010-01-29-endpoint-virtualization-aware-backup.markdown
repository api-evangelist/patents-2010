---

title: Endpoint virtualization aware backup
abstract: A system and method for efficiently utilizing endpoint virtualization information during backup operations. A computer system includes a backup server that permits the identification, browsing and selecting of files within virtual layers. Examples of virtual layers comprise at least a user data layer, an applications layer, and an operating system layer. Backup messages are sent to a corresponding client computer to backup the selected files or layers. The client computer includes a virtualization agent configured to manage one or more virtual layers in the client. In response to determining the selected data corresponds to a virtual layer of the one or more virtual layers, a backup agent in the client is configured to communicate with the virtualization agent in order to identify one or more files that correspond to the virtual layer, retrieve the one or more files, and send the one or more files to the backup server. The backup server is further able to create a different backup schedule for each virtual layer. Also, during an incremental backup of data in a virtual layer, the client computer is configured to ignore files outside of the virtual layer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08290912&OS=08290912&RS=08290912
owner: Symantec Corporation
number: 08290912
owner_city: Mountain View
owner_country: US
publication_date: 20100129
---
This invention relates to the field of computing system data backup and more particularly to utilizing an endpoint virtualization aware backup system.

As computer memory storage and data bandwidth increase so does the amount and complexity of data that business manages. A large portion of the data may involve content managed for a company by a dedicated server. This dedicated server may include or be coupled to a data storage subsystem comprising hard disks or other storage devices for the storage of a large amount of information. This dedicated server and storage subsystem may provide users the ability to search and access information including electronic documents photographic or other still images video streams audio files volume image backup files etc.

Because the various examples of stored data may frequently contain crucial information the contents of information servers and end user systems may be backed up to a backup storage to prevent loss of data. In such a case the dedicated server and storage subsystem may include a backup system. A backup system attempts to reduce the amount of data and time to backup required data to protect a machine. Some methods use de duplication to reduce the amount of data to backup but such methods may still consume time and network bandwidth to implement. For example performing a scheduled backup even an incremental backup on an end user laptop via a network consumes time to scan files and detect changed files. The scanning and detecting of files consumes a large amount of time prior to using a de duplication or other method.

In addition to consuming a large amount of time in performing backups administering and supporting an information technology IT infrastructure on a large number of end user systems presents a significant challenge. With so many distributed systems it may be slow and or difficult to roll out new applications update existing ones remove obsolete ones and backup data across an entire organization. Also without the ability to tightly control end point environments supporting and troubleshooting end user systems and efficiently protecting crucial data may become extremely burdensome. Administrators may need more flexibility in the methods they use to protect their systems.

In view of the above methods and mechanisms for enabling applications for efficiently backing up data on endpoint user systems within an IT infrastructure are desired.

Systems and methods for efficiently utilizing endpoint virtualization information during backup operations. In one embodiment a computer system is provided including a backup system on a backup server that allows identifying browsing and selecting particular files within particular virtual layers. Examples of virtual layers comprise at least a user data layer an applications layer and an operating system layer. Backup messages or jobs are sent to a corresponding client computer to backup the selected files or layers. The client computer includes a virtualization agent configured to manage one or more virtual layers in the client. In response to a discovery type request from a backup manager a backup agent in the client is configured to communicate with the virtualization agent in order to identify details concerning any virtualization environments on the client. Such details may include what if any virtual layers exist on the client and what data corresponds to each virtual layer. Responsive to receiving the details the backup agent may report the details to the backup manager. Utilizing the received information the backup manager may then initiate commands to the backup agent which direct the agent to perform a backup procedure on only data that corresponds to a specified virtual layer. In response the backup agent may convey corresponding data to the backup manager without needing to communicate with the virtualization agent.

In some embodiments the backup system is able to create a different backup schedule for each virtual layer. In further embodiments in response to receiving an incremental backup message from the backup server the client computer is able to ignore files corresponding to a first virtual layer but scan files to detect changed files corresponding to a second virtual layer.

These and other embodiments are described and contemplated and will be appreciated upon reference to the following description and figures.

While the invention is susceptible to various modifications and alternative forms specific embodiments are shown by way of example in the drawings and are herein described in detail. It should be understood however that drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed but on the contrary the invention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims.

In the following description numerous specific details are set forth to provide a thorough understanding of the present invention. However one having ordinary skill in the art should recognize that the invention may be practiced without these specific details. In some instances well known circuits structures signals computer program instruction and techniques have not been shown in detail to avoid obscuring the present invention.

Referring to a generalized block diagram of one embodiment of a network architecture is shown. As described further below network architecture may include client computer systems and with a backup agent that communicates with a backup manager on a backup server . In addition the backup agent may be configured to interface directly with an endpoint virtualization system. For example in one embodiment within the memory medium of client computer system the backup agent may include software with an application programming interface API that interfaces directly with an API within a virtualization agent . In one embodiment endpoint virtualization involves a process whereby I O requests may be transparently redirected to a given virtual layer without the base operating system being aware that the I O is being redirected. In various embodiments virtual layers may also be isolated from one another and or the base operating system. In such an embodiment applications that would otherwise be incompatible on a given client system may be run concurrently in isolated virtual layers on the same client. In various embodiments virtual layers are only identifiable on the client by the virtualization agent.

IT administrators may use the virtualization agent mentioned above within an endpoint virtualization application. By using an endpoint virtualization system the IT administrators may separate at least the virtual operating system OS applications and user data into different virtual layers. Virtual layers and illustrate these layers within the memory medium of the client computer system . Using the direct interface between the APIs of the backup agent and the virtual layer IT administrators via the backup manager on backup server may protect only predetermined chosen virtual layers. For example backup manager may not backup files within certain virtual layers that use a common image on multiple client computer systems. For example the IT administrators may use virtual layer information available to the backup manager to choose to forego backups of the virtual OS layer . Also during an incremental backup the backup agent may ignore files of a first virtual layer such as the virtual OS layer . However the backup agent may be instructed to scan files to detect changed files within a second virtual layer such as user data layer .

As shown network architecture includes client computer systems and interconnected through a network to one another to a file server and to a backup server . Disk storage is coupled to backup server . Network may include a variety of techniques including wireless connection direct local area network LAN connections wide area network WAN connections such as the Internet a router and others. Network may comprise one or more LANs that may also be wireless. Network may further include remote direct memory access RDMA hardware and or software transmission control protocol internet protocol TCP IP hardware and or software router repeaters switches grids and or others.

In one embodiment of network architecture client computer systems and are representative of any number of stationary or mobile computers such as desktop PCs laptops handheld computers etc. The client computer systems or clients and may include a processor and a memory medium . Clients and may use processor to execute instructions of software applications. The clients and may contain one or more software applications on its memory medium . For example clients and may include a backup agent that may be a relatively small user mode software program. Similarly clients and may include a virtualization agent that may be relatively small kernel mode software program. Both agents and are described further below.

In some embodiments the clients and may include an operating environment e.g. an operating system such as base OS and a virtual OS layer . In some embodiments the clients and have only a virtual OS layer provided by an IT administrator using a common image of the layer. In other embodiments clients and have both a base OS and a virtual OS layer which is further described below. The operating system may interface between the system hardware and the software applications.

As briefly mentioned above clients and may be configured to include non virtualized software components or base components or virtualized software components or both. For example in one embodiment client may have both types of software components. In such an embodiment client has a base operating system such as base OS that is installed on client and executes without any virtualization agent. In various embodiments the base OS provided on client may be any of various operating systems including MS DOS MS WINDOWS OS 2 UNIX Linux Solaris or another known operating system. A further description of the virtual layers such as the virtual OS layer the applications layer and the user data layer are further described shortly.

Continuing with the components of clients and a file system may be included. Similar to a file system on the file server the backup server or any other computer system or server file system may operate as a special purpose database for the storage organization manipulation and retrieval of data. A user may browse the directories stored on a corresponding data storage medium via the file system . The file system may be coupled to one or more filter drivers. Generally speaking a file system filter driver may be configured to intercept requests targeted at file system or another file system filter driver. By intercepting a request before the request reaches its intended target the filter driver may extend or replace the functionality provided by the original target of the request. Examples of file system filter drivers include anti virus filters backup agents and encryption products.

The file server in network architecture may be any kind of server configured to store data. In one embodiment file server may be a Network Attached Storage NAS device. The file server may be a computer specialized for providing file storage services to clients and and other information servers not shown . The operating system and other software on the file server provide the functionality of file systems the access to files and the management of these functionalities. A file server is typically not designed to perform general purpose computing tasks other than file storage. The file server may not have a keyboard or display and is instead controlled and configured over the network sometimes by accessing its network address from a web browser.

Continuing with a description of the file server a general purpose operating system is usually not needed on the file server . Rather a stripped down operating system with minimal functionality may be used instead. The file server may include one or more hard disks often arranged into logical redundant storage containers or RAID arrays redundant arrays of inexpensive independent disks . The data may be stored on one or more of the hard disks of the file server .

The file server may provide data storage at the file system level. The file server may use file based protocols such as Network File System NFS popular on UNIX systems SMB CIFS Server Message Block Common Internet File System used with MS Windows systems or AFP used with Apple Macintosh Computers . In the example of files on the file server may be accessed through a Network File System NFS interface included in network .

Turning now to the backup storage device device may be used to store backup copies of data within the network architecture . Backup data may store copies of data copies of data included in clients and and copies of data included in other information servers not shown . Backup storage device may include or be further coupled to several varieties of storage consisting of one or more hard disks tape drives server blades or specialized devices and may include a variety of memory devices such as RAM Flash RAM MEMS Micro Electro Mechanical Systems storage battery backed RAM and or non volatile RAM NVRAM etc.

In alternative embodiments the number and type of clients servers and storage devices is not limited to those shown in . Almost any number and combination of servers desktops laptops and mobile clients may be interconnected in network architecture via various combinations of modem banks direct LAN connections wireless connections WAN links etc. Also at various times one or more clients may operate offline. In addition during operation individual client connection types may change as mobile users travel from place to place connecting disconnecting and reconnecting to network architecture .

The network architecture may have a large pool of end user computer systems such as clients and file server and other information servers not shown. In such an architecture with a large number of end user systems many IT administration issues may lead to time consuming and expensive practices. These practices may include at least resolving software application conflicts repairing damaged software applications migrating to new versions of software applications and or installing and patching applications. Techniques involving software virtualization have proved to be a powerful technology to mitigate the above issues to simplify software development and testing to enable server consolidation and to enhance datacenter agility. Virtualization broadly describes the separation of a service request from the underlying physical delivery of that service. In one example virtualization may be performed by a file system filter driver configured to intercept system calls from virtualized applications before they reach the file system and redirect those system calls to the corresponding system files of a corresponding virtual software layer.

A virtual software layer or virtual layer may be added between the hardware such as CPU and the base OS . Clients and may include predetermined and obscured locations within their respective file systems for storing the contents of virtual software layers. As described above a file system filter driver may intercept and redirect system calls to a predetermined redirection area corresponding to an associated virtual software layer. Each virtual software layer may contain its own version of various system files and configuration settings which may overlap in name and or purpose with some of those already on the clients and or in other virtual layers. However applications encapsulated in a virtual software layer may be configured to use system files and settings stored in the virtual software layer rather than those stored on the actual physical machine a.k.a. the base environment .

In one embodiment an endpoint software virtualization system may be used for end user clients and . In addition for file server and any other information servers a hypervisor may be used to support higher level virtual machines VMs . A hypervisor is a virtual software layer that runs directly on the hardware without the need of a host OS. A hypervisor may need hardware assistance. Privileged and sensitive calls within a corresponding OS may be set to automatically trap to the hypervisor removing a requirement for binary translation. For the remainder of the description the focus will be on the endpoint software virtualization system for end user clients and .

Using an endpoint virtualization system an IT administrator may configure one or more virtual software layers wherein each contains any number of applications and or data files and deploy those virtual software layers from a server to end user systems such as clients and in an automated fashion. For example an IT administrator may use a client common image for a client OS virtual software layer and for an applications virtual software layer. Multiple virtual software layers may be included in the client common image . Each software application may rely on various different system files e.g. dynamic link libraries or DLLs drivers configuration files .sys files etc. and or other settings such as registry entries. By using virtual software layers various applications can be encapsulated along with their corresponding system files and settings in respective virtual software layers.

The corresponding system files mentioned above that support various applications are kept separate from other system files e.g. those on the base environment or in other virtual layers . Therefore application installations may be less likely to interfere with one another. For example if installing a first application includes installing a new version of a DLL then by deploying the application in a virtual software layer an IT administrator may ensure that the installation does not affect other applications that rely on the older version of the DLL. Although clients and are shown to have a single user data virtual software layer a single applications virtual software layer and a single virtual OS software layer there may be several virtual software layers within each of these categories.

Using a management interface such as a command line interface or a graphical user interface GUI the IT administrator may create layers deploy layers and activate and deactivate layers. As used herein the term layers refers to virtual software layers. When an IT administrator activates a layer again using a management interface the application s captured therein is available to users who access the machine such as client . No setup or installation is required. From the perspective of users and the base OS virtualized applications are indistinguishable from conventionally installed applications. To make applications that reside in active layers available and indistinguishable from conventionally installed applications the virtualization agent redirects system calls for the applications files processes and settings. When layers are not active the virtualization agent uses this same redirection technology to obscure the existence of the layers contents from users and from the base OS .

In one embodiment the virtualization agent resides within the kernel space of memory medium of client . In one embodiment the virtualization agent may include a file system filter driver and a DLL that provides one or more application programming interfaces APIs . For example the DLL may include a C programming language API and a base OS interface which provides an operating system interface through which instrumented components provide information and notification. Such an interface may allow scripting languages to manage the base OS personal computers such as clients and . In this manner management information may be shared between management applications. Alternatively these APIs may be used to access information within the endpoint virtualization system as further described later.

In one embodiment data stored on clients and of may be sent to file server for storage. The data that holds the information used and produced by software applications and stored for later use may be referred to as a computer file or file. Computer files may include photographic or other still images documents spreadsheets video streams audio files plain text files a computer program language object and executable files and libraries or any other kind of data. Users on clients and may perform the data transfer from clients and to the file server . For example when clients and are connected to network the clients are online the users may save computer files to directory locations corresponding to predetermined locations on the file system of file server . These computer files may now be included in data . Alternatively the users may update files already stored on file server by opening the files updating the files and closing the files.

In one embodiment the backup server in network architecture may include a backup application . This backup application or backup manager may comprise program instructions stored on the memory medium and executable by the processor to perform one or more backup operations. Backup operations may include creating partial or full backups e.g. on a computer system or from one computer system to another system performing restore functions e.g. partial or granular restore functions or full restore functions on a computer system or from one computer system to another computer system backup operations may also include other operations.

The backup manager on backup server may be configured to create various types of backups of data . For example image based file based or other types of backups may be created. In some embodiments the backup manager may receive user input directing the backup manager to create a backup of a specific system such as file server . In some embodiments the backup manager may create a backup of a specific system automatically e.g. the backup manager may be scheduled to perform regular backups of a specific system. The backup manager may create and store the backup or the file server image in a commonly known file format such as the Virtual Hard Disk VHD format the V2I format and the Virtual Machine Disk Format VMDK format.

Continuing with a description of a data backup operation in one embodiment the backup manager on backup server may create the backup of data such as file server image and store it on the backup storage device . In another embodiment the backup manager may store the backup on the backup server e.g. on a memory medium of the backup server as shown. In yet other embodiments the backup manager may instead store the backup on another device e.g. on another computer system such as another server connected over the network . In any of the embodiments a backup copy of a backup may be subsequently restored to the file server or to another computer or server system in the event that it becomes necessary to do so. Recovery of a backup copy may have a variety of uses. For example it may be used during system deployment for the setup of many computers. Another use may include data recovery. The backup may allow restoration of a system after data loss caused by an operating system crash a virus attack hardware failure or otherwise.

In one embodiment the backup manager may create a backup of clients and directly without using file server . Such a backup may be performed to protect data on clients and which may not yet be updated on file server . In embodiment the backup manager may perform file by file backups of data stored on clients and . Clients and may have been offline for a period of time while data was updated on the memory medium . Alternatively the users may not yet have manually updated files from memory medium to file server even while online. Again the backup manager may receive user input directing the backup manager to create file by file backups of clients and . In some embodiments the backup manager may automatically create file by file backups of clients and if they are connected to network . In this case a scheduled regular backup may be implemented such as a daily or weekly scheduled backup of clients and .

It is noted during any backup operation of any source such as file server clients and or otherwise that different types of a backup operation may be performed. The backup discussed above may contain the complete contents and structure representing a storage medium such as data on file server or memory medium on client . This backup file may be created by performing a complete sector by sector or alternatively a byte by byte copy of the data on a data storage medium. This copy thereby replicates the structure and contents of this data. A volume image backup file may contain all files and may replicate all data. In another embodiment a file by file backup operation may provide the contents and structure representing particular files stored on clients and . In yet another embodiment a backup system may not backup boot information and files locked by the operating system such as those in use at the time of the backup.

As part of creating a backup such as a file by file backup of clients and the backup manager may also create catalog metadata associated with the corresponding files or data objects. The catalog metadata created by the backup manager during a backup operation such as a backup of data on client may include metadata for the files. Metadata may include at least one or more of the following a data name data size a fingerprint of the data a batch number as well as data type version number ownership permissions modification time error code etc. A batch number may be used to identify the particular backup operation in which an associated backup entry was created. Other forms of metadata and or identifiers will be apparent to those of ordinary skill in the art. The catalog metadata may be usable for restore browsing e.g. at a later time.

Referring again to client in addition to including software applications on memory medium client may also contain backup system agent software . Generally speaking an agent is a software routine that may wait for a detection of a predetermined event and perform one or more actions when such a detection occurs. For example agents may transmit a summary file at a certain hour on a predetermined day or monitor incoming data and alert the user when a certain transaction has arrived. The backup system agent or backup agent may be software configured to assist the backup manager on the backup server to perform one or more backup functions. In some embodiments the backup system agent may also be configured to perform one or more backup functions independently of a backup manager .

In one embodiment the backup agent may be configured to interface directly with the virtualization agent on client . As described earlier the backup agent may include program code that interfaces directly with an API within the virtualization agent . For example the backup agent may interface directly with an API included in a DLL of the virtualization agent in order to access information within the endpoint virtualization system. The identification of a virtual software layer corresponding to a particular file may be accessed to allow for efficient backup of files. In one example the backup manager may query or cause backup agent to query the virtualization agent on a client in order to discover the virtual software layers and corresponding files stored on the client. In one embodiment corresponding information and metadata related to the virtual software layer s on the client may then be reported to the backup manger e.g. directly or via the backup agent by the virtualization agent . The backup manager may then store this information for subsequent access. In one embodiment the backup manager may use this reported information as part of a backup operation. For example the backup manager may wish to backup only those files within a particular virtual software layer identified by the query operation. By using the reported information the backup manager may generate appropriate backup commands that identify only files corresponding to a given virtual layer for backup and cause only those files and related data to be backed up.

For example in one embodiment the backup manager may direct the backup agent to send only files within a user data layer for backup storage. Following the backup request from the backup manager the backup agent may send both the corresponding files and metadata including the virtual software layer information. The backup manager may receive compile and or store the received files and metadata in such a way that it is identified as data corresponding to client user data layers . Following receipt of the data the backup manager may send the corresponding files stored in client user data layers to backup storage device for backup storage. In addition the backup manager may store virtual layer related metadata in catalog metadata . The information stored in catalog metadata may be used for browsing prior to a restore operation.

Turning now to one embodiment of a graphical user interface GUI is shown. The GUI may be presented by a file system or other on backup server of . The GUI may be used for selecting specific files or virtual software layers to be backed up or restored. Interface may include features such as drop down menus a navigation bar an address field and so on. Within interface are shown a Source pane and a Selections pane . The interface may include panes buttons and functionalities described further below.

Within Source pane a hierarchy of sources destinations settings and otherwise may be seen and navigated. In one embodiment the illustrated hierarchy may include source destination and settings with corresponding selections below them. Selections may be selected as indicated by a highlighted background and added to pane . Pane may include pull down menus for a selection name of a predetermined backup operation and a corresponding selection description. A virtual end users folder may include a Center folder corresponding to a group of end user computers. Other such folders as Center folder may be included under Virtual End Users folder although not shown. One such end user computer may correspond to the enduser folder . In one embodiment catalog metadata may be accessed and the stored virtual software layer identification information may allow for browsing of backed up data on backup storage device corresponding to different virtual software layers within this particular end user computer. In another embodiment corresponding stored virtual software layer identification information may allow for browsing of data stored on one or more clients. The data being browsed may correspond to the data on the clients at the time of a most recent query operation. Regardless if the data being browsed corresponds to backup data or client stored data reported by a query the layers may be generally represented in a logical format such as folders OS Layer App Layer and Data Layer . Each of these folders may comprise other folders corresponding to the number of virtual software layers and organization of these layers on the end user computer. It is noted that a virtual software layer may be represented in a GUI as a folder or any other logical object even when the backup data does not actually contain a corresponding physical object. Such a depiction in the GUI may simply be a convenient mechanism for identifying and or manipulating a virtual layer in the backup. A categorization of backup information corresponding to virtual software layers is represented to a user via the GUI as folders and . However folders and are not generally actual folders such as Center folder and enduser folder . Actual folders such as Center folder may include files corresponding to a particular virtual software layer. In addition Center folder may include other files that do not correspond to the particular virtual software layer.

Continuing with the end user computer folder enduser folder the files corresponding to data virtual software layer may be shown for browsing. Again a backup manager of may be able to provide this information for browsing due to the virtual software layer information stored in the catalog metadata in backup server . Pane of GUI may show the files stored on the corresponding end user computer. A user may browse these files and choose one or more files for a subsequent backup operation. This action may be done in pane by selecting files with a mouse button and using a menu button or by using a hot key stroke on the keyboard. Alternatively another pane may be used for selecting files and scheduling a backup operation. Also a user may select a folder representing a virtual software layer such as OS Layer folder to prohibit a backup of the files within this virtual software layer. A common image may be used for folders and other folders that represent virtual software layers. Therefore a backup of the files within these virtual software layers which are represented by folders and may be unnecessary. In one embodiment the files within a data virtual software layer such as a layer represented by Data Layer and any other layers without a predetermined common image may be the only files used after a backup operation.

Prohibiting a backup operation including an incremental backup operation from accessing files within chosen virtual software layers may greatly speed up the backup operation. In addition the amount of data to store may be greatly reduced. It is noted that the naming conventions depicted in e.g. Source Settings etc. are provided for ease of discussion. In a typical embodiment names reflective of those used in ordinary business or other environments e.g. documents spreadsheets as well as user defined categories and or category names etc. may be used as desired.

Referring to one embodiment of a client computer system is shown. The same system components used in network architecture of are numbered identically. It is noted that is provided as an example for purposes of discussion and in other embodiments the client computer system may take on various other forms. Client computer system may be representative of any client computer systems such as clients and described herein. Similarly client computer system may be used to implement any of the below described methods. Client computer system may be any of various types of devices including but not limited to a personal computer system desktop computer laptop or notebook computer handheld computer workstation network computer a consumer device etc or in general any type of computing device.

As described earlier the hardware of client computer system may include a central processing unit CPU or processor for executing instructions of software applications. Although only one processor is shown client computer system may comprise multiple processors. Each processor may include one or more cores any of which may be single or multi threaded. Each processor may utilize conventional processor design techniques such as complex branch prediction schemes out of order execution a superscalar microarchitecture and register renaming techniques. Each processor may include circuitry for executing instructions according to a predefined instruction set. For example the SPARC instruction set architecture ISA may be selected. Alternatively the x86 x86 64 Alpha PowerPC MIPS PA RISC or any other instruction set architecture may be selected. Generally each processor may access a cache memory subsystem for data and instructions. Each processor may contain its own level 1 L1 and level 2 L2 caches in order to reduce memory latency.

Client computer system may also include one or more network interfaces for transmitting and receiving data such as to or from other client computer systems or server computer systems as described herein. Network interface may provide a direct connection to a remote server via a direct network link to the Internet via a POP point of presence . Network interface may provide such connection using wireless techniques including digital cellular telephone connection Cellular Digital Packet Data CDPD connection digital satellite data connection or the like. Client computer system may further include one or more peripheral interfaces for receiving user input or displaying output to users such as a keyboard mouse or other pointing device touch screen and a monitor or other visual display device. Various embodiments may include fewer or additional components not illustrated in e.g. video cards audio cards additional network interfaces peripheral devices an Ethernet interface etc. .

Client computer system may include an interconnect which interconnects major subsystems of client computer system . In one embodiment interconnect is a system bus that may allow data communication between the subsystems. Client computer system may include memory medium which may comprise a system memory and persistent storage devices. System memory may comprise one or more levels of cache SRAM DRAM RDRAM EDO RAM DDR 10 RAM SDRAM Rambus RAM EEPROM etc. Persistent storage devices may comprise optical storage magnetic storage hard drive tape drive solid state memory etc. The persistent storage devices may include various computer files and software applications such as databases email applications office productivity applications the base OS the file system the virtualization agent the backup agent and a variety of others as known in the art.

The system memory within client computer system may contain computer programs comprising program instructions encoded in platform native binary any interpreted language such as Java byte code or in any other language such as C C Java etc or in any combination thereof. The system memory may also contain user data files. As described earlier the virtualization agent may be used to create virtual software layers on client computer system . Examples of these layers include the virtual OS layer the applications layer and the user data layer . Each virtual software layer may comprise layer content such as multiple files with corresponding settings or registry entries . As used herein elements referred to by a reference numeral followed by a letter may be collectively referred to by the numeral alone. For example files may be collectively referred to as files . Files may correspond a particular virtual software layer due to an IT administrator creating such a setting during installation. The associated registry entries or settings may contain layer metadata and a corresponding redirection area.

As shown the backup agent comprises one or more APIs . One of these APIs may transmit messages or jobs from or to a backup manager within the backup server via the network interface . For example the backup agent may listen for or attempt to detect a connection on a predetermined port. Once a connection is made additional connections between the backup agent and the backup manager may be made on ports previously specified in a backup system installation package. For backup operations that correspond to using endpoint virtualization information wherein the information may include an associated virtual software layer the backup agent may communicate with the virtualization agent . For example code within the backup agent may use API for communication with the backup manager via the network interface . Alternatively code within the backup agent may directly communicate with an API within the backup manager via the network interface . Similarly in order to interface with the virtualization agent code within the backup agent may communicate with the API in the DLL of the virtualization agent .

Using the above description of the connections between the APIs and the network interface in one example the backup manager of may send a job corresponding to only backing up data files within the user data layer . The IT administrator who setup the job may not be interested in backing up files within the applications layer and the virtual OS layer since these files may correspond to stored common images of the layers. The backup agent may receive this job through the network interface . The backup agent may interface directly with the virtualization agent via the API in the DLL . In one embodiment the virtualization agent may report to the backup agent the associated virtual software layer information for each file. In another embodiment the virtualization agent may provide a list of files associated with the specified virtual software layer such as the user data layer . The backup agent may subsequently send the identified files to the backup manager via the network interface .

Again using the above description of the connections between the APIs in a second example the backup manager of may send a job corresponding to an incremental backup of files on client computer system . Again the IT administrator who setup the job may not be interested in backing up files within the applications layer and the virtual OS layer since these files may correspond to stored common images of the layers. The backup agent may receive the incremental backup job through the network interface . The backup agent may interface directly with the virtualization agent via the API in the DLL . In one embodiment the virtualization agent may report to the backup agent the associated virtual software layer information for each file. In another embodiment the virtualization agent may provide a list of files associated with the specified virtual software layer such as the user data layer . The backup agent may subsequently scan only the identified files in order to detect changed files. Detected changed files may be sent to the backup manager via the network interface .

Referring to one embodiment of a method for backing up files from a client computer system to a backup storage device is shown. In addition to a backup operation a determination of the virtual software layer information associated with files on a client computer system may be made. The components embodied in the computer system described above may generally operate in accordance with method . For purposes of discussion the steps in this embodiment are shown in sequential order. However some steps may occur in a different order than shown some steps may be performed concurrently some steps may be combined with other steps and some steps may be absent in another embodiment.

In block an IT administrator installs common images for chosen virtual software layers on chosen client computer systems. The chosen layers may be a virtual OS layer a virtual applications layer or both. In block in order to identify virtual layers on particular client computer machines or to determine the files within chosen virtual software layers the IT administrator may cause query messages or jobs to be sent to the particular client computer machines. For example the IT administrator may wish to determine what files are currently stored within a user data layer. A backup manager software application may be used to send the messages. In one embodiment the IT administrator may set up a scheduled back up operation such as a back up of all online client computer systems at a certain hour of a certain day s of the week. The backup operation may send backup messages or jobs rather than simply a query message. These backup messages may request a backup of all files or a backup of files within a particular virtualization layer.

In block a backup agent on each chosen client computer system may receive query messages seeking to discover the data and layers on the corresponding clients. For example a backup manager on a backup server may initiate a discovery type procedure to determine the content and nature of data stored on one or more clients. In one embodiment the backup manager generates queries which are conveyed to the clients. On a given client endpoint which includes components of a virtualization system e.g. a virtualization agent a virtualization component on the client may be configured to respond to the query or otherwise provide information to a backup agent on the client in response to the query. In block the files on the client computer system may be scanned. In response to a discovery type query request the backup agent may respond with data that identifies the content of the data stored on the client. In one embodiment a virtualization component on the client provides information regarding virtual layers on the client data corresponding to each of the virtual layers e.g. which files correspond to which virtual layers and other metadata related to the virtualization system. The virtualization component then provides the information directly to the backup manager provides it to the backup agent for conveyance to the backup manger or otherwise makes the information available to the backup manager. In block in one embodiment this information may be sent to the backup manager via a network from the backup agent. In block for a query operation the backup manager may save the received information. At a later time this saved information may be accessed in order to initiate a backup operation. In block for a backup operation the received files may be saved by the backup manager. In one embodiment the received files may be directly stored on a data storage medium such as backup storage medium of . In another embodiment if the received files correspond to a virtual software layer then the received files may be temporarily stored in location in memory medium . Subsequently the received files may be sent to backup storage medium to complete the backup operation. Corresponding metadata information such as the virtual software layer associated with each file may also be stored.

Turning now to one embodiment of a method for restoring selected files based on a virtual software layer is shown. The components embodied in the computer system described above may generally operate in accordance with method . For purposes of discussion the steps in this embodiment are shown in sequential order. However some steps may occur in a different order than shown some steps may be performed concurrently some steps may be combined with other steps and some steps may be absent in another embodiment.

In block an IT administrator may browse both available virtual software layers and files stored on a backup storage device. This browsing may be in response to a requested restore operation from a client. Corresponding metadata information such as the virtual software layer associated with each file may be stored in a catalog such as the catalog metadata of . A visual display on a workstation or backup server running a backup manager may be used. The IT administrator may select particular files within a layer for restore. Alternatively the IT administrator may select an entire layer which includes all files within the layer. In one embodiment the file associated virtual software layer information may be stored in a catalog such as catalog metadata of . This file associated virtual software layer information may have been previously stored in the catalog during a previous backup operation. One example of a previously performed backup operation is described above by method .

In block particular selected files on a backup storage device may be retrieved. In one embodiment all files within a specified virtual software layer may have copies retrieved to send back to a backup manager. In another embodiment only selected files within one or more virtual software layers may have copies retrieved to send back to a backup manager. Afterward in block the retrieved files may be sent to the backup manager from the backup storage device . In block the received files may be saved by the backup manager. In one embodiment the particular location of the stored files may be communicated to a client or a client computer system or . In another embodiment the retrieved files may be sent from the backup server to the requesting client computer system or .

Turning now to one embodiment of a method for incrementally backing up only files within a selected virtual software layer is shown. The components embodied in the computer system described above may generally operate in accordance with method . For purposes of discussion the steps in this embodiment are shown in sequential order. However some steps may occur in a different order than shown some steps may be performed concurrently some steps may be combined with other steps and some steps may be absent in another embodiment.

In block an IT administrator may browse both available virtual software layers and files on one or more client computer systems for an incremental backup. A visual display on a workstation or backup server running a backup manager may be used. The IT administrator may select an entire layer which includes all files within the layer for an incremental backup operation. For example the IT administrator may choose a user data layer for an incremental backup operation but not choose an applications layer or a virtual OS layer . In one embodiment the file associated virtual software layer information may be stored in a catalog such as catalog metadata of . In one embodiment the IT administrator may setup a scheduled backup operation such as a backup of all online client computer systems at a certain hour of a certain day s of the week.

If the backup manager software application detects the scheduled point in time for an incremental backup conditional block then in block the backup manager may send incremental backup messages to one or more chosen client computer systems.

In block a backup agent on each chosen client computer system may receive the incremental backup messages and interface directly with a virtualization agent within an endpoint virtualization system. The agents may use APIs for the interfacing. In block files within a selected virtual software layer may be scanned in order to detect changed files. Only files within the selected virtual software layer such as a user data layer may be scanned. Files in other virtual software layers such as the applications layer and the virtual OS layer may not be scanned to detect changed files.

In block the detected changed files within the selected layer may be sent to the backup manager from the backup agent via a network. In block may be saved by the backup manager. In one embodiment the received files may be stored on a data storage medium such as backup storage medium of . Corresponding metadata information such as the virtual software layer associated with each file may be stored in a catalog such as the catalog metadata of .

It is further noted that the above described embodiments may comprise software. In such an embodiment the program instructions that implement the methods and or mechanisms may be conveyed or stored on a computer readable medium. Numerous types of media which are configured to store program instructions are available and include hard disks floppy disks CD ROM DVD flash memory Programmable ROMs PROM random access memory RAM and various other forms of volatile or non volatile storage.

In various embodiments one or more portions of the methods and mechanisms described herein may form part of a cloud computing environment. In such embodiments resources may be provided over the Internet as services according to one or more various models. Such models may include Infrastructure as a Service IaaS Platform as a Service PaaS and Software as a Service SaaS . In IaaS computer infrastructure is delivered as a service. In such a case the computing equipment is generally owned and operated by the service provider. In the PaaS model software tools and underlying equipment used by developers to develop software solutions may be provided as a service and hosted by the service provider. SaaS typically includes a service provider licensing software as a service on demand. The service provider may host the software or may deploy the software to a customer for a given period of time. Numerous combinations of the above models are possible and are contemplated.

Although the embodiments above have been described in considerable detail numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications.

