---

title: Managing software packages using a version control system
abstract: A client version control system (VCS) accesses a remote VCS to retrieve the difference between current metadata stored locally representing a first version of the software packages currently installed and newer metadata representing a second version of the software packages available from a server for distribution, without having to download the entire newer metadata. The client VCS generates the newer metadata based on the current metadata and the difference of the current and newer metadata retrieved from the remote VCS. A package manager coupled to the client VCS to download the second version of the software package from the server based on the newer metadata then installs or updates newer releases of software packages as available from the distribution server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08863114&OS=08863114&RS=08863114
owner: Red Hat, Inc.
number: 08863114
owner_city: Raleigh
owner_country: US
publication_date: 20101206
---
Embodiments of the present invention relate generally to software package management. More particularly embodiments of the invention relate to software package management using a version control system.

In a distributed computing environment certain applications such Unix applications have primarily been distributed as source code. To install a new application a user has to download the source code for that application from a distributed server. Typically the source code is provided in some sort of archive such as the Zip archival and compression format often used in the Windows world or the tar archive format typically used in the Unix world that the user must then unpack. After unpacking this source code the user has to configure it to support the options and systems he she wants compiling it to produce an executable program that can run on a particular operating system.

Generally files are packaged into one or more packages for distribution. A package manager running in a computer is designed to download unpack and install the packages. The package manager is also configured to update any software packages installed in the local machine by downloading new versions of the packages. Typically when updating a software package a package manager may download metadata of the package from a distributed server and compare the newly downloaded metadata with the metadata of the software package currently installed. Based on the comparison of the metadata if the package manager determines that a new version of the package is available the package manager then downloads unpacks and installs the new package. The metadata is usually in a script format such as extensible markup language XML data or in sqlite databases . As more new packages are made available in the distribution repository the metadata stored therein keeps growing. Thus downloading such metadata for updating purposes requires longer and longer time and consumes more and more resources.

In the following description numerous details are set forth to provide a more thorough explanation of the embodiments of the present invention. It will be apparent however to one skilled in the art that embodiments of the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring embodiments of the present invention.

Reference in the specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the invention. The appearances of the phrase in one embodiment in various places in the specification do not necessarily all refer to the same embodiment.

According to some embodiments metadata associated with software packages is centrally stored in a server and managed by a software version control system VCS . When there is a need to update a particular software package a package manager PM of a client machine is configured to invoke for example via an application programming interface API a VCS client module to communicate with a VCS server module of the server to identify differences e.g. delta between first metadata of the software package currently installed in the client machine and second metadata of a newer version of the package available for distribution. Based on the identified differences the VCS client module is configured to download the differences between the first and second metadata without having to download all of the newer metadata of the newer versions of all the packages available for install.

Based on the downloaded differences and the first metadata of currently installed software packages the VCS client module can reconstruct the newer metadata locally at the client machine where the second metadata represents the newer version of the software package. Based on the comparison of the first and second metadata if there is a need to download the newer version of the software package or packages the package manager can then access a distribution server to download the newer version of the software package. The distribution server may be the same or different server as the VCS system. As a result the client machine can maintain a relatively small size of metadata and downloading metadata takes less time and requires less network traffic or bandwidth. It also uses fewer resources on the server since they don t have to serve all the metadata just the differences.

In one embodiment server includes VCS also referred to as a revision control system or RCS server module to manage various versions of metadata in a VCS database or repository which may be located locally or remotely with respect to server . VCS server module can be any kind of VCS systems available from a variety of vendors. Revision control also known as version control source control or software configuration management SCM is the management of changes to documents programs and other information stored as computer files. It is most commonly used in software development where a team of developers may change the same files. Changes are usually identified by a number or letter code termed the revision number revision level or simply revision . For example an initial set of files is revision 1 . When the first change is made the resulting set is revision 2 and so on. The popular GIT VCS identifies changes by the SHA 1 checksum of the entire change and the change details. Each revision is associated with a timestamp and the person making the change. Revisions can be compared restored and with some types of files merged.

In one embodiment VCS server module may be part of a GIT VCS system. GIT is a version control system designed to handle large projects with speed and efficiency it is used for many open source projects most notably the Linux kernel. GIT falls in the category of distributed source code management tools. Every GIT working directory is a full fledged repository with full revision tracking capabilities not dependent on network access or a central server.

In addition according to one embodiment server includes package manager module e.g. a server module of a package management system for managing and distributing a variety of software packages . Package manager is responsible for authorizing and or authenticating a client such as client for the purpose of distributing software packages to the client. In one embodiment package manager is implemented as part of Red Hat package management RPM system. In other embodiments package manager is a Windows update component Mac OS component or any other components providing updates for a specific operating system OS .

A software package management system PMS is a collection of software tools to automate the process of installing upgrading configuring and removing software packages for a computer s operating system in a consistent manner. It typically maintains a database of software dependencies and version information to prevent software mismatches and missing prerequisites. Packages are distributions of software applications and data. Packages also contain metadata such as the software s name description of its purpose version number vendor checksum and a list of dependencies necessary for the software to run properly. Upon installation metadata is stored in a local package database. Distributions of Linux and other Unix like systems typically consist of hundreds or even thousands of distinct software packages in the former case a package management system is a convenience in the latter case it is essential.

Package management systems are charged with the task of organizing all of the packages installed on a system. Typical functions of a package management system include verifying file checksums to ensure correct and complete packages verifying digital signatures to authenticate the origin of packages applying file archivers to manage encapsulated files upgrading software with latest versions typically from a software repository grouping of packages by function to help eliminate user confusion and managing dependencies to ensure a package is installed with all packages it requires.

In one embodiment referring back to client includes VCS client module and package manager e.g. a client module of a package management system . VCS client module may be a GIT compatible client module that communicates with corresponding VCS server module of server to store e.g. check in and or retrieve e.g. check out certain versions of metadata . Package manager may be a client module of a RPM compatible system or an update component of other operating systems such as Windows or Mac OS etc. In one embodiment package manager includes a software updater or updating tool such as a Yellowdog Updater Modified YUM module for the purpose of updating local software packages from software packages and or distributed by package manager of server and or package manager of server respectively. YUM is an open source command line package management utility for RPM compatible Linux operating systems.

When a user interacts with the package management software to bring about an upgrade it is customary to present the user with the list of things to be done usually the list of packages to be upgraded and possibly giving the old and new version numbers and allow the user to either accept the upgrade in bulk or select individual packages for upgrades. Each package manager relies on the format and metadata of the packages it can manage. That is package managers need groups of files to be bundled for the specific package manager along with appropriate metadata such as dependencies. Often a core set of utilities manages the basic installation from these packages and multiple package managers use these utilities to provide additional functionality. For example YUM relies on RPM as a backend. YUM extends the functionality of the backend by adding features such as simple configuration for maintaining a network of systems. While an RPM contains a single package and metadata related to that package YUM manages groups of packages and metadata relating to all those packages. For example YUM manages the metadata for all the packages available as part of a distribution e.g. Fedora 14 or Red Hat Enterprise Linux 6.0 . In this case a YUM metadata update reflects the updated package versions for all the packages available in the software repository. The software repository is the collection of packages that collectively is called a Fedora 14 distribution for example.

Referring back to an administrator or user can program package manager to periodically automatically or manually determine whether a new or different version of a particular software package or indeed all the installed software packages in the system is available for distribution. According to one embodiment package manager is capable of automatically synchronizing the remote metadata e.g. metadata to the local client e.g. metadata . In response to a request e.g. automated scheduled event or a manual request from a user for synchronizing metadata package manager is configured to invoke for example via an API or by invoking the tool directly VCS client to communicate with VCS server of server to obtain the differences between the version of local metadata and a newer or latest version of remote metadata . That is instead of downloading entire metadata for the newer or different version of the software packages only the differences between the newer or different version and the local version of metadata are downloaded to client from server . As a result the time to download and or the network traffic can be significantly reduced.

In one embodiment package manager may provide information identifying a current version of metadata currently stored locally where the metadata represents a current version of a software package currently installed. Note that the metadata could be common for all the packages in the repository. It does not matter if only one package details got updated in the distribution repository even for a package that is not installed on the local system the entire metadata file has to be fetched since it s newer. In response VCS client interrogate with VCS server to determine whether there is a newer version of the metadata. If so VCS client may instruct VCS server to download the difference between the local version of metadata and the remote version of the metadata. Alternatively the VCS server will send the difference to the VCS client.

Based on the differences between a local version of metadata and a remote version of metadata VCS client is able to reconstruct the entire remote version of the metadata. Based on the metadata of a remote software package provided by VCS client package manager can decide whether the remote software package should be downloaded for example by comparing the remote metadata against the ones that have previously downloaded and stored locally. If so package manager can communicate with package manager of server to download the remote software package . Alternatively package manager can communicate with package manager of another distribution server or mirror to download remote software package . Note that in some situations package managers and are optional dependent upon the specification configurations. Package managers and merely represent any application or process that is responsible for sending or distributing software packages to clients such as client .

The machine may operate in the capacity of a server or a client machine in client server network environment or as a peer machine in a peer to peer or distributed network environment. The machine may be a personal computer PC a tablet PC a set top box STB a Personal Digital Assistant PDA a cellular telephone a web appliance a server a network router a switch or bridge or any machine capable of executing a set of instructions sequential or otherwise that specify actions to be taken by that machine. Further while only a single machine is illustrated the term machine shall also be taken to include any collection of machines that individually or jointly execute a set or multiple sets of instructions to perform any one or more of the methodologies discussed herein.

The exemplary computer system includes a processor a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a data storage device which communicate with each other via a bus .

Processor represents one or more general purpose processors such as a microprocessor a central processing unit or the like. More particularly the processor may be complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor or processor implementing other instruction sets or processors implementing a combination of instruction sets. Processor may also be one or more special purpose processors such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. The processor is configured to execute the instructions for performing the operations and steps discussed herein.

The computer system may further include a network interface device . The computer system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The data storage device may include a computer accessible storage medium also known as a machine readable storage medium or a computer readable medium on which is stored one or more sets of instructions or software e.g. package manager and or VCS module embodying any one or more of the methodologies or functions described herein. The module may also reside completely or at least partially within the main memory and or within the processor during execution thereof by the computer system the main memory and the processor also constituting machine accessible storage media. The module may further be transmitted or received over a network via the network interface device .

The computer readable storage medium may also be used to store the desktop persistently. While the computer readable storage medium is shown in an exemplary embodiment to be a single medium the term computer readable storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The terms computer readable storage medium shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term computer readable storage medium shall accordingly be taken to include but not be limited to solid state memories and optical and magnetic media.

The modules components and other features described herein can be implemented as discrete hardware components or integrated in the functionality of hardware components such as ASICS FPGAs DSPs or similar devices. In addition the modules can be implemented as firmware or functional circuitry within hardware devices. Further the modules can be implemented in any combination hardware devices and software components.

In the above description numerous details are set forth. It will be apparent however to one skilled in the art that the present invention may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present invention.

Some portions of the preceding detailed descriptions have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the ways used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion it is appreciated that throughout the description discussions utilizing terms such as those set forth in the claims below refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

Embodiments of the invention also relate to an apparatus for performing the operations herein. Such a computer program is stored in a non transitory computer readable medium. A machine readable medium includes any mechanism for storing information in a form readable by a machine e.g. a computer . For example a machine readable e.g. computer readable medium includes a machine e.g. a computer readable storage medium e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices .

The processes or methods depicted in the preceding figures may be performed by processing logic that comprises hardware e.g. circuitry dedicated logic etc. software e.g. embodied on a non transitory computer readable medium or a combination of both. Although the processes or methods are described above in terms of some sequential operations it should be appreciated that some of the operations described may be performed in a different order. Moreover some operations may be performed in parallel rather than sequentially.

Embodiments of the present invention are not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of embodiments of the invention as described herein.

In the foregoing specification embodiments of the invention have been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of the invention as set forth in the following claims. The specification and drawings are accordingly to be regarded in an illustrative sense rather than a restrictive sense.

