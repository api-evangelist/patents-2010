---

title: Policy directed security-centric model driven architecture to secure client and cloud hosted web service enabled processes
abstract: A policy directed, security-centric model driven architecture is described to secure internal web services, such as those implementing service-oriented architecture (SOA), and external web services such as those hosted on a cloud computing platform. A distributed data dictionary hosted across multiple dictionary engines and operating in conjunction with web security services are used to embed security profiles in web services messages and to validate messages that contain such security profiles.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09037711&OS=09037711&RS=09037711
owner: METASECURE CORPORATION
number: 09037711
owner_city: Houston
owner_country: US
publication_date: 20100512
---
This application claims priority to U.S. Provisional Patent Application Ser. Nos. 61 265 821 filed Dec. 2 2009 entitled Secure Cloud Computing and 61 295 517 filed Jan. 15 2010 entitled Pushing Security Profile Into the Clouds each of which is incorporated by reference in its entirety.

There is a trend toward cloud computing in which a client s services are hosted by a third party s network of computers storage devices etc. Cloud computing reduces the capital expenditure requirements by the client to buy computers routers storage devices and the like. Instead the client relies on the third party s hardware and software infrastructure. One of the issues however that should be addressed is security as the client does not own and control the hardware and software on which its services and data are hosted. Aside from cloud computing environments security of even client controlled networks and the data and services hosted thereon is an issue. In both cases security in driven by policy specifically security policy the scope of which is based on two fundamental tenants. The first tenant is that security policy is only relevant to the extent reached by the IT infrastructure that implements the policy security policy cannot be applied beyond the means to control it. The second tenant the degree of implementation fidelity is determined by technology capability and the amount of acceptable risk determined by management. These two basic tenants respectively reflect the constraints that exist in collaboration across the enterprise with vendors and clients and the cost vs. risk balance of security technology deployment and maintenance. Unfortunately the security model that exists today one that industry and the enterprise is familiar with is significantly compromised the changing landscape of information technologies IT infrastructure topologies and business needs have made it so.

Certain terms are used in the following description and claims to refer to particular system components. As one skilled in the art will appreciate computer or software companies may refer to a component by different names. This document does not intend to distinguish between components that differ in name but not function. In the following discussion and in the claims the terms including and comprising are used in an open ended fashion and thus should be interpreted to mean including but not limited to . . . . Also the term couple or couples is intended to mean either an indirect direct optical or wireless electrical connection. Thus if a first device couples to a second device that connection may be through a direct electrical connection through an indirect electrical connection via other devices and connections through an optical electrical connection or through a wireless electrical connection.

The term client refers to the person or organization that owns and uses the web services to run the client s organization. A client may be any form of organization such as company loosely formed organization or an individual.

The following discussion is directed to various embodiments of the disclosure. Although one or more of these embodiments may be preferred the embodiments disclosed should not be interpreted or otherwise used as limiting the scope of the disclosure including the claims. In addition one skilled in the art will understand that the following description has broad application and the discussion of any embodiment is meant only to be exemplary of that embodiment and not intended to intimate that the scope of the disclosure including the claims is limited to that embodiment.

Various embodiments described herein are related to Web Services and security improvements thereof for securing cloud and or service oriented architecture SOA . The following provides an overview of web service concepts.

Web services are typically application programming interfaces API or web APIs that can be accessed over a network such as the Internet and executed on a remote system hosting the requested services. In common usage the term refers to clients and servers that communicate over the Hypertext Transfer Protocol HTTP protocol used on the web. Such services tend to fall into one of two camps SOAP and RESTful Web Services. SOAP based Web Services use Extensible Markup Language XML messages that follow the Simple Object Access Protocol SOAP standard and have been popular with traditional enterprise. In such systems there is often a machine readable description of the operations offered by the service written in the Web Services Description Language WSDL . More recently REpresentational State Transfer REST RESTful web services are those conforming to the REST constraints the REST web services have been regaining popularity particularly with Internet companies. By using the PUT GET and DELETE HTTP methods alongside POST these are often better integrated with HTTP and web browsers than SOAP based services. They do not require XML messages or WSDL service API definitions.

Each web service further implements a public interface described in Web Services Description Language WSDL . The interface is an XML based service description on how to communicate using the given web service.

Web service information is published using a standard protocol referred to as Universal Description Discovery Integration UDDI . The UDDI enables applications to automatically discover and or look up web services information in order to determine whether to access and invoke them analogous to the manner in which a Yellow Pages phone book enables users to discover business services and how to access them. The UDDI registry indicates for each service on the network 1 the identity of the service the Uniform Resource Locator URL of the service and what the service does.

In various alternatives security components are implemented using Secure Sockets Layer SSL Public Key Infrastructure PKI and firewalls for electronic commerce systems operating over Hyper Text Transfer Protocol HTTP . SSL is a technology that allows the systems that host client web services and servicing web services to communicate over a secure connection. SSL addresses authentication in that the serving host system presents the client host system with a set of credentials in the form of a server certificate which is used to verify that the server is what it claims to be. SSL also addresses confidentiality in that the SSL link is encrypted so that third parties cannot decipher the data as it passes between the client and serving services on a network. Finally SSL addresses integrity of data SSL guarantees that the passed data is not modified.

A serving service may be provided indirectly to a client service. In an SSL secured environment a client service accesses a serving service and that serving service now acting as a client service then invokes remote serving services. Many services might be deployed in such fashion. In this environment there are two security contexts between the original client service and the original servicing service and between the original client service and the remote serving service.

The second security context i.e. between the client service and the remote serving service may be referred to as persistent security. The second security context controls the security of the end to end request reply message between the original client service and the remote serving service to ensure security over more than one client to server connection. In other words there is a need for persistent message security for messages for which SSL is inadequate. While SSL encrypts the data stream it doesn t support end to end confidentiality it leaves the data exposed between the client service and the remote serving service.

Furthermore SSL has several limitations when it comes to handling services. SSL provides point to point security between end point hosting systems not the services hosted on them. For securing processes consisting of multiple nested interacting services service to service security at the messaging level is necessary because multiple intermediate hosting systems and services will exist between the two end points services. In a SOAP based web services environment there will be multiple messaging bases business processes operating across multiple hosting systems and their services and using only SSL it is extremely difficult to assess and control security operations in an integrated fashion. Furthermore SSL does not support non repudiation. Using SSL a communicating partner cannot prove that another party has performed a particular transaction. In other words SSL doesn t support an end to end audit trail from service request to service response. Finally SSL does not support element wise signing and encryption. Given a large XML order document it may be desirable to only sign or encrypt part of the information such as for example the credit card info. Encryption of only a portion of a message is difficult in SSL because SSL is a transport level security scheme as opposed to a message level scheme.

The present disclosure enables security to be embedded in every component of the basic web services messaging concept described above. Each web service defined has a security profile to establish how the service is regulated. Each defined user entity has an associated security profile identifying roles responsibilities and privileges. Additionally each datum message payload is assigned a security profile identifying scope ownerships and allowed disallowed actions. By implementing these three variations on the security profile and embedding them in a security profile that conveys what combinations actions services are allowed web service interoperability is achieved that is secure beyond what has been achievable using the alternatives noted above.

The web services security embodiments described herein can be applied in a network in which the client the entity that owns and operates a business process application that owns the underlying web services also owns and operates the hardware and software infrastructure. In other embodiments web services security is extended into the cloud computing environment in which at least some and perhaps all of the client s data and web services are stored on and hosted by a third party. The third party provides the hardware and software infrastructure necessary to host the client s services. Both contexts are described herein. In both cases the client s security policy for the auditing and control of the business process application must be applied to the messaging data services and user entities which make up the business process application which in the case of cloud computing means enforcing policy in a hosting environment in which the client may not control. Standard infrastructure level security mechanisms such as SSL cannot be client security policy directed.

Referring now to a block diagram is shown illustrating a network in which the client controls owns and or operates the hardware and software running thereon. One or more web services are shown coupled together via a network infrastructure such as a service bus . One web service may request access and use of another web service . In accordance with at least some embodiments the web services generate and exchange SOAP web service messages with other web services.

The security described herein may be implemented by the various intermediaries shown in . Each intermediary is associated with one or more web services . In general a web service may exchange messages with another web service . The messages however are intercepted by the corresponding intermediaries . The intermediary queries its attached data dictionary engine instance for a reference model security profile that aligns with the message user entity and destination web service. If found the intermediary embeds the located security profile in the message and sends the message to the destination web service. The intermediary associated with the destination web service intercepts the incoming message and compares the embedded security profile from the reference model to that of the security profile resident in the servicing intermediary s security model located in its attached data dictionary engine instance. If a match is found user data service profiles then the message stripped of its security profile is forwarded to the destination web service.

The intermediaries may be implemented for example as software running on a computer and generally work in a background mode. The web services generally are unaware of the existence of the intermediaries when sending and receiving messages. That is the web services exchange messages without knowledge that the intermediaries are intercepting and processing the messages for security reasons. That the client owns and operates network hardware and enabling software systems makes it possible for the client to install the intermediaries on its own network.

Because the client has some of its services executing on the third party s network the client may be unable to have intermediaries loaded on to the third party network s computers as the client may not be permitted by the third party or may not desire to reconfigure the third party network s computers internal software to enable installation and operation of intermediaries. However if the third party hosting environment provides no application framework and only provides hardware and generalized database managements systems then the client may be capable of hosting an intermediary consistent with the client s environment. Thus In the case where an application framework provided by the third party hosting environment must be used a different paradigm is implemented to provide a similar security benefit to that of the intermediaries noted above. Instead of using intermediaries that intercept messages and process such messages for security profiles the embodiment of uses web security services and . Web security services execute on the client network computers while web security services execute similar to web services on the third party hosting network . While the web services of exchange messages and do not themselves implement security profiles instead the intermediaries implement the security profiles the web services on the third party hosting network of specifically invoke the web security services . One or more of the web services hosted on the client s own network may also invoke corresponding web security services . The web security services and perform much the same functionality as the intermediaries of but are invoked by the web services themselves.

Each of the various web services and intermediaries and web security services and of may be implemented on a server or on any general purpose computer. illustrates a computer system suitable for implementing one or more the web services intermediaries and web security services disclosed herein. The computer system includes one or more processors that are in communication one or more computer readable storage devices . Computer readable storage device may include volatile memory such as random access memory RAM as well as non volatile storage such as read only memory ROM hard disk drive flash storage etc. The computer system may also include an input output I O device e.g. display keyboard mouse etc. and a network interface . The storage contains software which is executed by processor . By executing the software the processor is able to perform some or all of the functionality described herein as attributed to the web services and intermediaries and web security services and . The various web services and intermediaries and web security services and may be implemented in software that runs multiple such computers. Some such computers may comprise servers and may not have a directly connected I O device. In accordance with at least some embodiments the software and processes described herein are executed on a computer network comprising one or more computers. For example the data dictionary engines and metadata repositories described herein execute on such a computer network.

For the embodiment of each intermediary interfaces corresponding web services to the service bus which operates on the client network . Each intermediary may be implemented in software that incorporates a data dictionary engine for the storage and retrieval of security profiles within its visibility as defined by architecture of the encompassing business process and the architecture of modeled security policy. Each intermediary is a touch point into the executing business process orchestration of web services enabling dynamic visibility into data as it moves between web services what the data is who e.g. which user entity is utilizing the data what version of the data is in circulation which web service is permitted to access and use the data and where the data has been and is going. This information is framed within a security centric model driven architecture that is instantiated by object class information stored throughout the distributed data dictionary a piece of which is resident within the data dictionary engine of any particular intermediary .

In various embodiments each intermediary injects a security profile into each SOAP message that travels between web services. As SOAP messages translate the service bus to other web services the intermediary associated with each destination web service examines the message for the security profile to determine whether the message is valid within the context of user entity message and service. Each intermediary is operable to communicate with each other intermediary in a fashion that is transparent to the web services and or users of the web services.

The security of the client s web service enabled process may be managed according to defined states by identifying and tracking through the intermediaries each and every activity executed across the processes service bus . Each activity involving messaging across the service bus is assigned a security profile each security profile is assigned a unique Globally Unique Identifier GUID . The activities add to a security profile and the security profile itself including the creation identification transportation and processing of data are security artifact objects. Each object has a unique tag and the tag is unique based on a multi part structure that provides for a unique identifier administered by a registration process that occurs in the intermediary . In addition because an object belongs to a class and any given class may have many instances in the intermediary the instances are given unique version identifiers used to identify the version. In this fashion the multi part structure also stores the version number that in conjunction with the class identifier provides for a unique global object instance identifier. The multi structure identifier also has a geopolitical identifier that is an additional unique structure for the purpose of identifying an organization that may have political boundaries as defined by the user. The geopolitical identifier thus conveys the concept of ownership. The geopolitical identifier may be used for export control compliance and other political conditions necessitating retention of specific control designation at the identifier level.

The management of these security profiles is accomplished with the use of a data dictionary engine instance associated each intermediary . All metadata maintained by the data dictionary engine as well as instance data identified by Globally Unique Identifier tags are driven by the object oriented architecture and implemented using a data dictionary engine.

The data dictionary engine is a database embedded engine that contains a data dictionary for metadata it has as a set of components and services that are designed to define identify manage expose and archive security objects. Objects in the engine have an intrinsic representation based on entities and relationships between entity types. These entities form a database design containing Object Class Data Class Action Class Behavior Class Relationship Class Object Instance and Data Instance. Each class is supported by a class tree with inheritance refinement and sub classing rules established and refined by an expert user Data Architect . Data Instance and Object Instance are instantiations of classes and represent the embodiment of the real world as framed by the class imposed architecture.

A class tree defined by the database design represents business processes supporting a security profile and business data containing security information. When these business processes and data definitions change the changes are then captured by modifications to the class tree in the intermediary .

The data dictionary engine of the intermediary provides the functionality to establish preserve and evolve the definition of all class trees and instances. It is used to drive and support the functionality of a metadata repository such that one instance of a metadata repository i.e. within a single intermediary is operable to elaborate a security policy and project a security policy of an enterprise onto a security profile embedded in data messages and services. Each instance of a data dictionary engine can communicate with another data dictionary engine i.e. between instances of the intermediaries for the purpose of exchanging information and functionality as defined by the class architecture. The class architecture is thus the method of defining what the data dictionary engine will operate on and with to achieve business security objectives that are orchestrated by an administrative function. Within the enterprise an administrative function performs the task of configuring the class tree and thus the data dictionary engine behavior s. The end behavior is what is sought because the engine will execute whatever object class methods are available and consistent with the objects involved in the service request.

As illustrated in the diagram of the data dictionary engine of each intermediary establishes a platform for the definition and collection of business models and security profiles that in turn establish the domain area of emphasis for class tree elaborations. The security domain is thus established as part of the class tree configurations. The data dictionary engine of the intermediary processes object and class information providing the ability to identify collect and manage specific security information throughout an end to end security model.

Each security profile embedded by the intermediary is a managed object instance belonging to a parent class that is in the business security class tree consistent with enterprise level security profiles.

The security profiles embedded at the data level maintain a security profile with a corresponding security profile designator. The security profile includes at least three types of information assignments the data security profile the user security profile and the service security profile. The security profile comprises a set of encoded permissions privileges and selected quality hierarchy according to the three types of information.

The Data Security Designation may consist of one of the following designations Source of record SOR clone C persistent P and temporal T . The Services Security Designation may consist of one of the following designations generate G destroy D consume C provide P request R own O and archive A . The User Security Designation may consist of one of the following designations own O read R write W delete D proxy for PF proxy to PT execute E keep K subclass S and archive A . Each designation may be selected by the owner of data upon making it available on the network .

Activity associated with each and every profile may be tracked by the intermediaries throughout the life cycle of process and data thereby accomplishing management at the system level. This management of a security profile at the system level is defined by the articulation of a security policy. The articulation of a policy may be accomplished by class tree elaboration bringing the existence of policy profiles into relationship with IT infrastructure artifacts and data resource artifacts.

Each class instance includes details about ownership permissions and authority for interaction with other class instances. At each interaction security profile verification is conducted for compatibility i.e. a comparison is performed between security profiles thus allowing the interaction to complete as defined. If the interaction is not supported because of security profile violations then the interaction is tracked logged and processed according to the violation class.

Each message containing a security profile is composed of at least two artifacts the data artifact containing the XML elements attributes and associated XML articulations constituting a valid XML document and the security profile artifact also articulated as a valid XML document. The security artifact also contains the artifact identifier and other naming and version control components that identify the artifact as it exists at the enterprise level.

To meet the numerous legal statutory and regulatory requirements for data privacy corporate governance reform and like initiatives an understanding of the actual messaging data beyond security policy and requirements may be helpful. This understanding comes in the form of information on the as designed data flows of each process executing in the environment and information derived from the architecture and design of each process. With this information incorporated into the data dictionary engine of the intermediary in the form of process service and message objects and classes and thus incorporated into the security profile objects and classes the security controls can perform messaging protection control and auditing functions within the context of the expected messaging behavior amongst services instead of merely basing actions on the contents of message payload and header blind to the context in which this message is being transacted.

A security policy is represented as a tree hierarchy structure of security model objects each containing security profiles as defined in U.S. Pat. No. 7 647 627. These security model objects are derived from security policy classes and contain security profiles they are designed to represent security policy constructs. They form piece parts of the larger class tree hierarchy. The content of a class tree hierarchy crosses multiple domains as it contains and elaborates upon security policy object classes and enterprise business object classes. An enterprise business object class is defined as an object class that describes the data and interoperations of the automated business process. Business objects captured as part of the business process modeling metaphor is a good example of an enterprise business object class. The aggregation of multiple multi domain classes creates super classes classes that contain security policy classes business classes and security profiles. See . The hierarchy of the total class tree represents a total architecture with a coarseness gradient beginning at the top and traversing towards the bottom security policy fidelity increases as does the aggregated enterprise metadata. Each tree branch manifests an increasing fidelity until one or more terminal nodes are found where the security data is held and in the case of a super class where enterprise data is also held this is the class instance data. Security profile data is held with the business data at the terminal nodes and reflects a security evaluation of the business data based on associated security policy application. This evaluation is given a security structure which is the security profile defined in U.S. Pat. No. 7 647 627 incorporated herein by reference.

 2 the system based security policy level containing system based security policy object classes in addition to enterprise business object classes and

 3 the client based security policy level containing client based security policy object classes security policy object instances terminal nodes enterprise business object classes and enterprise business object instances terminal nodes .

This basic topology is represented in and managed within the data dictionary engine as defined in U.S. Pat. No. 7 647 627.

The system based security policy level and the client based security policy level together represent an enterprise wide security policy topology potentially spanning many web service enabled processes. They may or may not be administered by the same organization. In either case a client based security policy level may itself be sub partitioned each sub partition representing a business unit and division with its own local administration. The case where the system based security policy level and client based security policy level are not administered by the same organization may represent where the system based security policy level is owned and administered by a cloud hosting service provider and the client based security policy level is administered by the cloud client.

Each participating client within the cloud then orchestrates or pushes their respective security policy onto the cloud by submitting their client level security policy sub tree where it is attached to the hosting service provider s system based security policy level tree. Ownership rights constrain what information is pushed to a cloud such that only branches containing terminal nodes of the client level security policy level hierarchy owned by the client performing the push is accepted at the cloud hosting service provider.

In the hashed horizontal line is a representation of a partition between the system based security policy level and client based security policy level. Where this demarcation is placed is dependant on how much hierarchy is provided by the owner of the System Security Policy an increase in fidelity is represented by longer branches on the tree i.e. the demarcation is low in the tree hierarchy . Where there is robust system based security policy level definition more opportunity for integration exists with a Client Security Policy because parent class availability for adoption leads to client based refinement where allowed i.e. there is more Security Policy Tree for the client to connect too and refine from . The concept of adoption is where a parent class or relationship class can be used to gain established definition and methods for security policy at the client based security policy level. The concept of flexibility is manifested when adopting a parent class that allows for sub classing definition by refinement and sub classing rules enforcement both of which are as defined in U.S. Pat. No. 7 647 627. In refinement class inheritance may be deleted or configured so that the attributes can be altered or maybe defined to prohibit any further refinement.

Looking at a typical environment involving a client enterprise site henceforth referenced as client site and the collaboration with a cloud hosting service provider site henceforth referenced as the cloud site certain topological characteristics are found. A client s site Client Security Policy may advance security policy much further than the host site System Security Policy provides given the system security policy hierarchy tree is weak. This is reflected in a tree branch where the partition between the client based security policy level and the system based security policy level is high up in the security policy hierarchy reflecting contributing security fidelity by the client into the cloud hosting service provider site security policy hierarchy. The condition creates delineation between the system security policy hierarchy level and the client security policy hierarchy level that is not horizontal across the width of the security policy hierarchy tree but rather it varies from branch to branch. It is also indicative of a potential condition where the client s adoption of the cloud site s established system security policy hierarchy is not fully integrated and used. This type of condition is transparent when using this methodology and therefore subject to interface agreement elaboration and conformance scrutiny. There are strategies for choosing a high fidelity vs. low fidelity system security policy hierarchy with advantages and disadvantages the key is finding the correct balance. When the system security policy is weak the condition is advantageous for system security policy site hosts because it leaves the responsibility for enterprise security policy and implementation largely to the client using the service the client owns the security policy for the components of their application at that site. The system security policy site simple supports the need for some basic minimal security policy components most likely associated with actual security mechanisms within the host site s infrastructure producing a very shallow system security policy hierarchy. A shallow system security policy hierarchy is also advantageous to the client because exporting the client security policy hierarchy segments to the system security policy site is simplified from a parent to child class relationship the more generic the parent the easier it is interfacing the client side security policy. The client based security policy is then unconstrained to control refinement of the client security policy partition.

The end of any particular system based security policy level tree branch and the top or start of a client based security policy level tree is represented by a node defined as a boundary node. A boundary node is an identity type node with a security profile structure it is both the terminal node of a system based security policy level tree branch and the absolute root node of the attached client based security policy level tree. The importance here is that the client based security policy level tree absolute root node is also the identity node for the client. This identity node contains information used to identify the client and the client s security policy to the cloud hosting service provider or any other external supplier that provides a system security policy hierarchical service via the data dictionary engine as explained here and in U.S. Pat. No. 7 647 627. It is beneficial to all that this identify mechanism an interface be made as flexible as possible by the cloud hosting service provider for all client participants.

The basic system architecture components that must be established such as communications protocols indirectly impact the System Security Policy and the Client Security Policy. When representing any communication protocol such as IPv4 or IPv6 in a class tree hierarchy the components of the protocol are manifested as metadata objects in the distributed data dictionary. The data dictionary containing a metadata model of the protocol notably at the transport layer of the model are represented as a set of tree branches constructed for their respective security object class definitions and are entirely dependent on the fidelity chosen by the data architects. Therefore during security architecture development communications aspect of the IT infrastructure incorporating security components from the protocol may be modeled using a level of abstraction such that they only indirectly impact the system security policy hierarchy. For example rather than have an implementations of WS Security defined in the architecture hierarchy detailing the aspect used during communications a model of the software platforms imposing security at a lower fidelity level of definition is represented assuming that the software platforms use WS Security as the underlying standard for security.

The semantic and syntactic aspect of system architecture is captured and managed in the class tree architecture hierarchy by using a data dictionary engine as exemplified and explained in U.S. Pat. No. 7 647 627.

A System Security Policy Site can be any controlling authority providing a service to client Security Policy Sites such that a system based security policy level tree branch defined by the System Security Policy Site is established from the absolute root node down to the client based security policy level boundary node see A . This tree branch is immediately above the participating client security policy hierarchy which as discussed earlier is topped or started by an identity node also a boundary node . A System Security Policy Site can exchange such system based security policy level tree branches with other System Security Policy Sites providing they are in whole that is intact from the absolute root node to the partition between the client based security policy level and the system based security policy level excluding the client identity node for a specific branch of the donor system security policy hierarchy. In other words a client security policy hierarchy is the subset of super classes within a client based security policy level that when traversed define the client component of the security model for a particular client web services enabled process. Equally a system security policy hierarchy is the subset of super classes within a system based security policy level that when traversed define the system component of the security model for a particular client web services enabled process. B illustrates the donation of a system security policy hierarchy tree branch exported imported from one data dictionary engine instance to another.

The exporting of a system based security policy level tree branch from a donor system security policy hierarchy and subsequent importing to a requesting system security policy hierarchy host can include tree branches that did not belong to the donating host those branches having come from a third party. However migration control of the third party tree branches is maintained by the contributing third party system security policy host requests for export import must be made directly and granted explicitly. The same condition exists when client based security policy levels as defined by client security policy architecture are involved as a third party they levy publishing rights that are maintained by that third party client s system security policy host. In both cases a requesting host may see the third party contribution to the tree branches requested from a host but only the exporting host owned data is exported C . The third party site contributes the actual third party tree branch es hierarchy terminal nodes D . The identity of this third party is known to the cloud site only as the root node of the third party tree branch is a boundary node and an identity type node.

A system security policy hierarchy host may reside in a cloud as a service providing system security policy services exclusively as a security cloud. It may have other enterprise wide business services integrated with the security policy as described earlier in the hierarchical class tree section.

A client site is a client operated owned self sustaining enterprise level entity with self established tree hierarchy instances. Design of the enterprise hierarchy class tree and the definition of security policy classes and security policy objects is an exercise performed by client site architects. The hosted client class tree hierarchy has a designated absolute root node from which all tree branches emanate. The absolute root node has inherent properties identity class that allow for the connection of the node and underlying class tree to an existing system security policy hierarchy branch as mentioned earlier. From this generic class a series of branches are defined that if desired will encompass the client s entire enterprise definition for process and data. This definition can take place in segments and is allowed to mature over time to represent increasing scope of the enterprise as the enterprise expands. Each class definition has built in a set of subclasses for security policy and security profile definition.

An enterprise is at all times represented as a self defined and self reliant security policy architecture hierarchy consisting of 1 an absolute root node also referred to as an identity node 2 a system security policy hierarchy and 3 a set of client security policy hierarchies. When there is no security integration taking place between enterprises sharing of tree branches occurs within the enterprise and tree branch ownership is assigned along organizational boundaries. One form of assignment is to grant ownership based on the source of the data in other words the source of record is the default owner. The source of the method is the owner and so on. Co ownership is represented as an occurrence of adoption and refinement where a branch is adopted and refined. The refinement is then a new instance and belongs to the refiner yet the parent branch is still owned by the original source of record.

When an enterprise shares security policy with other enterprises a system security policy hierarchy is developed by adopting the current system security policy hierarchy from each enterprise. This incorporation forms a new system security policy hierarchy tree instance which allows for the integration of all participating client security policy hierarchies. The new policy hierarchy can be put in a cloud to enable a multi enterprise cloud based security policy hierarchy. When an enterprise pushes some segment of its system and client security policy hierarchy to a cloud then all of the enterprise security policy hierarchy pushed to the cloud is considered client based security policy level material.

System and Client security policy hierarchy is shared in order for data and services to flow between Data dictionary engine nodes. Data dictionary instance to data dictionary instance process flow represents site to site connectivity and provides for a controlled distribution of services and data per the migration control mechanisms described earlier. If an applicable message or transaction does not exist in the security policy hierarchy it cannot be sourced by a provider travel on the bus or be requested and processed by a consumer. The application enabled component of a client s business process no matter where it is hosted in the cloud or outside the cloud is described and orchestrated by the data dictionary model capturing the system and client security policy hierarchy. Security orchestration is defined by business processes models integrated with security it is the first part of the data and process life cycle and fundamental to all subsequent activity for the enterprise. Client security policy hierarchy segment visibility is shared between organizations at every level and across enterprise boundaries facilitated by the system security policy hierarchy site s but process and data distribution is only allowed based on the client security policy hierarchy and associated security profile assigned therein a pre established security profile between requestor and provider.

In the example of one web service sends a SOAP message to another web service . Web service thus is an invoking service which invokes web service the invoked service . A portion of the functions performed by the invoking service is illustrated at while a portion of the functions performed by the invoked service is illustrates at . At the invoking service performs various functions and at generates a SOAP message to be sent to invoked service . At the invoking service specifies a message and a service to be invoked using the specified message. Arrow illustrates that from the point of view of the web services invoking service invokes services and provides the specified SOAP message across the network to the targeted invoked service which then processes the message. At the invoked service retrieves the SOAP message and then processes the message at . At the invoked service sends back a reply message to the invoking service

Referring still the intermediaries intercept the web services SOAP messages and process the messages from a security standpoint. Arrows illustrate the interaction of the intermediaries and intermediary operating as the Enterprise Data Dictionary as discussed herein.

Referring now to a flowchart is shown for a method of securing a web services enabled application in accordance with various embodiments of the present disclosure in which intermediaries are used. The method starts as a message is intercepted between an invoking web service and a invoked web service block . The message may be intercepted by an intermediary as discussed above wherein the intermediary is associated with either the invoking or invoked web service. The intermediary that intercepts the message examines the message block . Examining the message may occur at the XML level which involves examining the message for XML level threats without examining the actual contents of the message or examining the message may occur at the data level delving into the contents of the message.

The intermediary that intercepted the message analyzes the message to determine whether a security profile is embedded in the message block . If a security profile is embedded in the message then the method proceeds to compare the embedded security profile with a security profile associated with the requesting service block . The intermediary analyzes whether the comparison is a match block i.e. whether the data security designation the user security designation and the service security designation from the embedded profile in the message is the same as those designations of the requesting service. If the comparison is not a match then the intermediary denies the requesting service access to the message block .

If the comparison is a match then the intermediary grants access for the requesting service to the message block . The activities including examining the message performing the comparison and granting access are logged and added to the security profile embedded in the message such that an audit may be performed after the fact to determine who has had access to what and when block .

Returning to block if there is not a security profile embedded in the message for example when the message comprises an outbound newly generated message that was generated at the source web service the intermediary compares the message to an enterprise level security to authenticate the user associated with the requesting web service block . If the user associated with the requesting web service cannot be authenticated at the enterprise level in a comparison at block then the intermediary denies access for the requesting web service for the message block . If the user associated with the requesting web service can be authenticated at the enterprise level in a comparison at block i.e. as being an approved user for the network then the intermediary grants access for the requesting web service for the message block . Additionally the intermediary polls the owner of the data in the message to obtain information to generate a security profile including a data security designation a user security designation and a service security designation and generate a security profile for the message which is embedded in the message block . Finally the activities including examining the message performing the comparison to authenticate the user at the enterprise level and granting access are logged and added to the newly generated security profile embedded in the message such that an audit may be performed after the fact to determine who has had access to what and when block .

In the example of one web service sends a SOAP message to another web service . Web service is an invoking service which invokes web service the invoked service . A portion of the functions performed by the invoking service is illustrated at while a portion of the functions performed by the invoked service is illustrates at . At the invoking service generates a SOAP message to be sent to invoked service . At the invoking service invokes the web security service for the message generated at and the target service to be invoked with that message. Whereas the web services of the embodiment of relied on the intermediaries to intercept and process the security surrounding the messages the embodiment of involves the web services themselves to invoke the appropriate security service .

The embodiment of show multiple security services . One security service is invoked to determine whether an outgoing message targeted for a particular service has a security profile sufficient to permit that message to be sent to that service. That security service can be invoked with a pseudo code instruction client.securityservice.profile.set message service . This security service queries its attached data dictionary instance for a reference model security profile that aligns with the message user entity and destination web service. If found the intermediary embeds the located security profile in the message and returns the message to the invoking service . if not found client.securityservice.profile.set throws an exception for processing by the larger client application. The other security service is used to process an incoming message by extracting the security profile from the incoming message. This security service can be invoked with a pseudo code instruction client.securityservice.profile.unset message service .

At the invoking service specifies the message and the web service to be invoked using the specified message which has been validated to be sent to the targeted service . Arrow illustrates that from the point of view of the web services invoking service invokes services and provides the specified SOAP message across the network to the targeted invoked service which then processes the message.

At the invoked service retrieves the SOAP message and at invokes the security service to unset the SOAP message client.securityservice.profile.unset . The unset function involves the security service to extract the security profile from the SOAP message and compares it to the invoked service s profile within the security model resident in its attached data dictionary instance. If a match is found user data service profiles then the message stripped of its security profile is returned to the invoked service . Once the message has been validated the message is consumed and processed at . A reply message is generated and processed by the set security service at client.securityservice.profile.set which verifies that the reply message can in fact be sent to the service specified in the instruction i.e. the invoking service . Finally at the reply message is sent to the invoking service . Arrow signifies the flow of information between the security services and intermediary operating as the Enterprise Data Dictionary as discussed herein.

With a successful test at block flow continues to block where the reference model entities and the security model entities are together assessed to determine if the invoked service is permitted to receive from the invoking service the message s data. This test utilizes object class information within the reference and security models and the relationships between classes to determine if this message transfer abides to security policy. If the testing fails at then control passes to for exception processing. If the testing passes at then at the security profile is removed from the message and the security service returns at .

This section provides a number of use case scenarios where security profiles are implemented per security policy and security requirements in a form that manifest themselves as automated security controls at the messaging level. The messaging level objects are found in the Data dictionary object class tree along with the other object classes imparted to each Data dictionary instance by the data and security architects based on the enterprise security profile. illustrates these use cases utilizing the security mechanisms explained above both for web services hosted on the client s own network as well as web services on a cloud computing environment.

Use case A business partner sends an untrusted message across the corporate firewall to an SSOAProxy implemented within an industry standard XML firewall or proxy appliance. The message is assessed by the native capability of the XML firewall or proxy appliance for XML level threats. SSOAProxy then proceeds to assess message validity by first inquiring with Enterprise Data Dictionary to retrieve the three tuple data service and user security profile for the message destination invoked service and invoking user entity in the role currently in play. The user object instance of the security profile extracted from the Data dictionary object class tree security model provides the role instance for that user entity. The message is denied if the security profile is not consistent i.e. the requested combination of user entity data and service is not recognized or not authorized as defined by security policy. Upon determining that the message is legitimate SSOAProxy creates signs timestamps and injects a SAML token which encapsulates a corresponding reference model security profile into the downstream message. SSOAProxy also performs logging and audit per message approved or denied as configured by policy and or systems management.

Use case An attacker attempts to send an unauthorized or malicious message across the firewall to SSOAProxy. As in scenario the message is assessed by the native capability of the XML firewall or proxy appliance to determine if it contains or invokes an XML level attack. If one is detected this event is logged and the message rejected thwarting the attack. If the message is determined not to be a direct attack SSOAProxy evaluated the message by first inquiring with the Enterprise Data Dictionary to retrieve the corresponding security model security profile. It then denies the request as the profile of the request on part of the attacker is not consistence with the security profile of the message. This event and its attributes are logged.

Use case SSOAProxy routes the trusted message inbound to a Web Service residing on a COTS Commercial Off The Shelf application server located at a 3party site a site where the client web application owner does not own or control the infrastructure including the COTS application server. The Web Service A part of the client s web application receives the message and immediately passes it to the web security service client.securityservice.profile.unset . This service contains only the functionality needed to validate assert that the injected security profile embedded within the SAML token in comparison to its internally stored data dictionary security model instance abides to security policy for the invoked service. Any one data dictionary instance is populated with an object class tree specific to the user message and data profiles within its visibility as determined by the enterprise security profile managed by the Enterprise Data Dictionary. If the assertion is successfully validated the message is striped of its security profile and returned to the invoking service. Otherwise client.securityservice.profile.unset throws an exception for processing by the larger client application. client.securityservice.profile.unset also performs logging and audit per message as configured by policy and or systems management.

Use case Since this is a federated transaction the Web Service A then forwards the message outbound to Web Service B also at the 3party site. It first forwards the message to the web security service client.securityservice.profile.set to package the message with a SAML token containing the reference model security profile for that user message destination service combination extracted from the internally stored Data Dictionary instance. Optionally client.securityservice.profile.set can revalidate the security profile of the invoking user entity for this message against the security profile of the destination service. If this three tuple is not consistent an exception can be thrown. This revalidation is optional as the same checks are made at the receiving end of the message the destination service . client.securityservice.profile.set also performs logging and audit per message as configured by policy and or systems management. With the security profile added to the message the message is returned to the invoking service which then sends the message to the destination service.

Use case continues with the arrival of the trusted message at the destination service Web Service B . Web Service B part of the client s web application receives the message and immediately passes it to the web security service client.securityservice.profile.unset . This service contains only the functionality needed to validate assert that the injected security profile embedded within the SAML token in comparison to its internally stored data dictionary security model instance abides to security policy for the invoked service. If the assertion is successfully validated the message is striped of its security profile and returned to the invoking service. Otherwise client.securityservice.profile.unset throws an exception for processing by the larger client application. client.securityservice.profile.unset also performs logging and audit per message as configured by policy and or systems management.

Use case A rogue Web Service Y attempts to deliver a message to Web Service B . Web Service B receives the message and immediately passes it to the web security service client.securityservice.profile.unset . The attempt to validate assert the injected security profile embedded within the SAML token within the message fails immediately as no security profile is present. client.securityservice.profile.unset throws an exception for processing by the larger client application most likely to drop the message it is noise on the bus. client.securityservice.profile.unset also performs logging and audit per message as configured by policy and or systems management.

Use case A Web Service Z a web service associated with a different security domain for a different web application attempts to deliver a message to Web Service B . As Web Service Z is security services enabled it first forwards the message to the web security service client.securityservice.profile.set to package the message with a SAML token containing the reference model security profile for that user message destination service combination extracted from the internally stored Data dictionary instance configured to its visibility visibility within the different security domain. Web Service Z s client.securityservice.profile.set will fail to embed a security profile for the destination service as Web Service B is not within the visibility of its internal data dictionary it is in the wrong domain. client.securityservice.profile.set throws an exception for processing by the larger client application most likely to drop the message. client.securityservice.profile.set also performs logging and audit per message as configured by policy and or systems management.

To illustrate the robustness of this model driven security architecture let s continue with use case with the security profile added to the Web Service Z s message for reasons unknown. The message is returned to the invoking service Z which then sends the message to the destination service. Web Service B receives the message and immediately passes it to its web security service client.securityservice.profile.unset . The attempt to validate assert the injected security profile embedded within the SAML token within the message fails immediately as the security profile of the message is not with the internally stored data dictionary security model instance within its visibility. The received message is not within this web application s security domain. Visibility into the different security domain was not provided in the security policy configured within the Enterprise Data Dictionary. This message is not authorized. client.securityservice.profile.unset throws an exception for processing by the larger client application most likely to drop the message. client.securityservice.profile.unset also performs logging and audit per message as configured by policy and or systems management.

Note that if visibility into the different security domain had been provided in the security policy configured within the Enterprise Data Dictionary and the security policy authorized Web Service Z to invoke Web Service B then the received message security profile would have been within client.securityservice.profile.unset s visibility. The test to validate assert the message security profile in comparison to B s internally stored data dictionary security model instance would have been successful as the internal data dictionary instance would be populated with an object class tree specific to the user message and data profiles for Web Service Z .

