---

title: Development artifact searching in an integrated development environment
abstract: This disclosure provides various embodiments for searching one or more repositories hosting, storing, or maintaining a plurality of development artifacts. A search query for development artifacts is received through an interface of an integrated development environment, the search query identifying at least one search term. An index is used to identify a set of search results, the index identifying a plurality of development artifacts and including context data identifying, for each development artifact in the plurality of development artifacts, at least one attribute of the respective development artifact. The set of search results identify a subset of the plurality of development artifacts determined to potentially relate to the at least one search term. At least a portion of the set of search results are presented to a user, the listing including at least one development artifact in the subset of the plurality of development artifacts.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08645905&OS=08645905&RS=08645905
owner: SAP AG
number: 08645905
owner_city: Walldorf
owner_country: DE
publication_date: 20101115
---
This present disclosure relates to search engine technology and more particularly searching repositories of development artifacts.

Application developers and programmers use various tools systems and methods to generate applications programs and interfaces. Generally applications are developed in one of a plurality of development technology platforms including Microsoft s .NET Sun System s Java SAP s ABAP Perl or other suitable programming languages and development environments. Some integrated development environments IDEs are associated with a specific programming language so as to provide a feature set which more closely matches the programming requirements syntax and operations of the specific programming language while other IDEs may be used with multiple programming languages. Development artifacts including use cases class diagrams and Unified Modeling Language UML models can be produced as a by product of a software development effort including development using an IDE. Some development artifacts can be used and re used within the context of an IDE.

Search engines exist that assist computer users in finding resources stored on one or more computing systems including a network of computing systems. With the advent of the Internet search engines have grown in speed and functionality to accommodate demand for finding the billions of resources stored in computing systems connected across the Internet. Web search engines for instance are search engines designed to search for information on the Internet. Typically a user submits a search query specifying certain keywords criteria or conditions and the search engine consults an index to determine which resources known to the search engine likely satisfy the search query. Results of the search also known as hits can be returned to the user. In some cases the user can access or request the resources included in a listing of hits directly from the listing.

This disclosure provides various embodiments for searching one or more repositories hosting storing or maintaining a plurality of development artifacts. A search query for development artifacts can be received through an interface of an integrated development environment the search query identifying at least one search term. An index can be used to identify a set of search results the index identifying a plurality of development artifacts and including context data identifying for each development artifact in the plurality of development artifacts at least one attribute of the respective development artifact. The set of search results can identify a subset of the plurality of development artifacts determined to potentially relate to the at least one search term. At least a portion of the set of search results can then be presented to a user the listing including at least one development artifact in the subset of the plurality of development artifacts.

While generally described as computer implemented software that processes and transforms the respective data some or all of the aspects may be computer implemented methods or further included in respective systems or other devices for performing this described functionality. The details of these and other aspects and embodiments of the present disclosure are set forth in the accompanying drawings and the description below. Other features objects and advantages of the disclosure will be apparent from the description and drawings and from the claims

This disclosure generally describes software computer implemented methods and systems relating to providing search functionality within an integrated development environment. More particularly a development artifact search engine can be provided that is adapted to search a plurality of repositories storing or hosting development artifacts within a computing system. Such development artifacts can be used developed analyzed compiled and tested within an integrated development environment. Large software companies and organizations such as open source development networks produce and store terabytes of software development artifacts in connection with the development of software scripts applications and files. Given the size of these organizations it is not uncommon for developers to inadvertently re invent the wheel during their development and coding efforts as it can be nearly impossible to track what parallel development efforts may be taking place such as in other business units or other projects that could be of benefit to a particular developer. Additionally multiple data repositories can be maintained across dozens and even thousands of computing devices making it difficult to pinpoint what development artifacts are available for use and incorporation in a software development project and where these artifacts are stored. Accordingly a search engine tool incorporated in an integrated development environment can be used for example within a large software development network to assist in identifying development artifacts that can be used in connection with an integrated development environment.

A software development artifact can include one of many kinds of deliverable by products produced during the development of software. Development artifacts can include use cases class diagrams models classes interfaces data objects and user interface views web pages templates patterns attributes database tables views domains indexes schemas queries reports function modules services including web and RESTful services and specification and design documents. Some development artifacts can include project plans business cases and risk assessments relating to the development process. In some cases development artifacts can include partial or compilable source code files including executable and non executable files such as files adapted for non execution based testing and verification such as a walkthrough or dry run performable in some instances using the integrated development environment.

Turning to the example implementation of the illustrated software environment includes or is communicably coupled with one or more clients one or more enterprise system servers one or more application servers a search engine server and one or more repositories using one or more networks . Each of the servers comprise electronic computing devices operable to receive transmit process store or manage data and information associated with the software environment . As used in this document the term computer is intended to encompass any suitable processing device. For example the environment may be implemented using computers other than servers including a server pool. Further any all or some of the servers may be adapted to execute any operating system including Linux UNIX Windows Server or any other suitable operating system.

In the illustrated embodiment the enterprise system server is one or more computing devices used to provide enterprise software services to one or more customers such as clients . Among the services provided by the enterprise software system an integrated development environment can be provided that includes a development artifact search tool . A development artifact search tool e.g. can make use of search functionality provided through a search engine hosted by search engine server the search engine adapted to search development artifacts hosted by or stored at a plurality of data repositories e.g. and computing systems e.g. . Clients as well as other users external to environment or enterprise system server can directly or indirectly e.g. via a proxy virtual machine interface etc. access and use enterprise services provided by enterprise system server including use of IDE . Additionally clients can directly or indirectly access and perform development artifact searches through search engine server . For instance clients can conduct searches through a search tool made available through the IDE service served by enterprise software server . In other examples a client running an IDE outside of the IDE provided through enterprise software server can also access the development artifact search functionality provided through search engine for example through a search tool integrated with IDE . In some instance IDE can be run locally on client or through a remote software system not shown . As with IDE IDE can also include a search tool allowing search functionality made available through search engine server to be integrated into the IDE .

The search engine server can include one or more processors executing software comprising the search engine . The processor executes instructions and manipulates data to perform search engine operations and tasks described below as well as serve development artifact search services to a plurality of search service consumers including applications e.g. systems and programs remote from the search engine server . One or more search indexes stored in memory can be generated managed accessed and otherwise used by the search engine to provide development artifact search services. The search engine server can be adapted to serve development artifact searching to consumers in a variety of contexts including local private distributed enterprise and cloud computing software system environments. The search engine server can be implemented using a single processor or multiple processors including multiple processors operating in a network or pool of computing devices including parallel processing and cloud computing environments.

A plurality of repositories storing development artifacts can be searched by search engine . The repositories can in some instances be associated with computing devices and systems such as systems and applications including IDEs responsible for creating modifying and managing the development artifacts . For instance a repository and development artifacts can be associated with a particular application server and in some cases associated computing systems and devices can create and manage at least a portion of the development artifacts maintained by the associated repository. In some instances repositories can be a part of or otherwise associated with an enterprise software system e.g. including users and consumer clients e.g. of the enterprise software system. Repositories can also be searched that are remote from or are not directly associated with the enterprise software system or search engine server including repositories maintaining development artifacts created and managed by third party entities or repositories implemented on computing devices within a cloud computing environment.

In the present example enterprise system servers application servers and search engine servers can each include at least one interface respectively one or more processors respectively and computer readable memory respectively . In some instances some combination of enterprise system servers application servers and search engine servers can be hosted on a common computing system server or server pool and share computing resources including shared memory processors and interfaces. The interfaces can be used for communicating with other systems in a client server or other distributed environment including within environment connected to the network for example the one or more clients repositories or any other computing device adapted to interface with the servers including devices not illustrated in . Generally each interface comprises logic encoded in software and or hardware in a suitable combination and operable to communicate with the network . More specifically the interfaces may comprise software supporting one or more communication protocols associated with communications such that the network or hardware is operable to communicate physical signals within and outside of the illustrated software environment .

Each of the example servers also includes a processor respectively . Each processor executes instructions and manipulates data to perform the operations of the associated server and may comprise for example a central processing unit CPU a blade an application specific integrated circuit ASIC or a field programmable gate array FPGA among other suitable options. Although each processor is illustrated as a single processor multiple processors may be used according to the particular needs of the associated server. References to a single processor are meant to include multiple processors where applicable. The operations that each processor executes are determined by the purpose and operations of its associated server. Generally the processor executes instructions and manipulates data to perform the operations of its respective server and specifically the software systems services and applications hosted by the servers .

At a high level each server e.g. includes one or more electronic computing devices operable to receive transmit process store or manage data and information associated with the environment . Specifically a server is responsible for receiving requests from one or more clients and sending the appropriate response the requesting client. In addition to requests from external clients requests may also be sent from internal users external or third party customers other automated applications as well as any other appropriate entities individuals systems or computers. For example although illustrates a single server for each of enterprise system server application server and search engine server a server can be implemented using two or more servers as well as computers other than servers including a server pool. Indeed a server may be any computer or processing device such as for example a blade server general purpose personal computer PC Macintosh workstation UNIX based workstation or any other suitable device. In other words the present disclosure contemplates computers other than general purpose computers as well as computers without conventional operating systems. Further illustrated server may be adapted to execute any operating system including Linux UNIX Windows Mac OS or any other suitable operating system.

In the case of an application server the processor can execute the functionality required to receive and respond to requests from clients as well as client applications interfacing with the server s hosted application . It will be understood that the term application server e.g. can include any suitable software component or module or computing device s capable of hosting and or serving a software application including distributed enterprise or cloud based software applications. Regardless of the particular implementation software may include computer readable instructions firmware wired or programmed hardware or any combination thereof on a tangible medium operable when executed to perform at least the processes and operations described herein. Indeed each software component may be fully or partially written or described in any appropriate computer language including C C Java Visual Basic assembler Perl any suitable version of 4GL as well as others. Applications can be implemented as individual modules that implement the various features and functionality through various objects functions procedures methods or other processes or may instead include a number of sub modules third party services components libraries and such as appropriate. Conversely the features and functionality of various components can be combined into single components as appropriate.

At a high level each of the one or more hosted applications and services e.g. illustrated in the environment can include any application program module process or other software that may execute create change delete generate or otherwise manage information according to the present disclosure particularly in response to and in connection with one or more requests received from the illustrated clients as well as other applications. In certain cases only one hosted application may be located at a particular server. In others a plurality of related and or unrelated hosted applications may be stored at a single server or located across a plurality of other servers as well. In certain cases environment may implement a composite hosted application. For example portions of the composite application may be implemented as Enterprise Java Beans EJBs or design time components may have the ability to generate run time implementations into different platforms such as J2EE Java 2 Platform Enterprise Edition ABAP Advanced Business Application Programming objects or Microsoft s .NET among others. Additionally applications may represent web based applications accessed and executed via the network e.g. through the Internet or within internal networks such as intranets . Further one or more processes associated with a particular hosted application or service may be stored referenced or executed remotely. For example a portion of a particular hosted application or service may be a web service associated with the application that is remotely called while another portion of the hosted application may be an interface object or agent bundled for processing at a remote client e.g. . Moreover any or all of the hosted applications and software service may be a child or sub module of another software module or enterprise application not illustrated without departing from the scope of this disclosure. Still further portions of a hosted application can be executed by a user working directly at a server e.g. hosting the application as well as remotely at a client e.g. .

Each of the example servers also includes a memory respectively . Further repositories can also each have at least one associated memory device. Each memory may include any memory or database module and may take the form of volatile or non volatile memory including without limitation non transitory memory elements magnetic media optical media random access memory RAM read only memory ROM removable media or any other suitable local or remote memory component. Each memory may store various objects or data including classes frameworks applications backup data business objects jobs web pages web page templates database tables content repositories storing business or other dynamic information or other information including any parameters variables algorithms instructions rules constraints or references thereto relevant to the purposes of the particular server. Each memory may also include any other appropriate data such as firmware logs and policies firewall policies a security or access log print or other reporting files as well as others. Again the particular data and instructions stored in each memory e.g. will be described in detail below in connection with the illustrated implementations of the software environment and components thereof.

Generally the network facilitates wireless or wireline communications between the components of the software environment e.g. between the search engine server development artifact repositories e.g. and one or more consumer clients e.g. the search engine server and the enterprise system server the enterprise system server and clients e.g. as well as between other components as appropriate as well as with any other local or remote computer such as those associated with one or more applications or external data sources. The network can be implemented as one or more distinct networks. In any implementation the network may be a continuous or discontinuous network without departing from the scope of this disclosure so long as at least a portion of the network may facilitate communications between senders and recipients. The network may be all or a portion of an enterprise or secured network. As an example in networks may represent a portion of an enterprise network or a connection to the Internet. In some instances a portion of the network may be a virtual private network VPN . All or a portion of the network can comprise either a wireline or wireless link. Example wireless links may include 802.11a b g n 802.20 WiMax and or any other appropriate wireless link. In other words the network encompasses any internal or external network networks sub network or combination thereof operable to facilitate communications between various computing components inside and outside the illustrated environment . The network may communicate for example Internet Protocol IP packets Frame Relay frames Asynchronous Transfer Mode ATM cells voice video data and other suitable information between network addresses. The network may also include one or more local area networks LANs radio access networks RANs metropolitan area networks MANs wide area networks WANs all or a portion of the Internet and or any other communication system or systems at one or more locations.

The illustrated implementation of includes one or more local and or remote clients . A client can be any computing device operable to connect or communicate at least one server e.g. . and or the network using a wireline or wireless connection. Each client includes a GUI . In general the client comprises an electronic computing device operable to receive transmit process and store any appropriate data associated with the software environment of . It will be understood that there may be any number of clients associated with environment as well as any number of clients external to environment . Further the term client and user may be used interchangeably as appropriate without departing from the scope of this disclosure. Moreover while each client is described in terms of being used by one user this disclosure contemplates that many users may use one computer or that one user may use multiple computers. As used in this disclosure the client is intended to encompass a personal computer touch screen terminal workstation network computer kiosk wireless data port smart phone personal data assistant PDA one or more processors within these or other devices or any other suitable processing device. For example the client may comprise a computer that includes an input device such as a keypad touch screen mouse or other device that can accept information and an output device that conveys information associated with operations of one or more applications stored and or executed on an application server or other servers in environment or on the client itself including digital data visual information or the GUI . Both the input device and the output device may include fixed or removable storage media such as a magnetic computer disk CD ROM or other suitable media to both receive input from and provide output to users of the clients through the display namely the GUI .

The GUI comprises a graphical user interface operable to allow the user to interface with at least a portion of environment for any suitable purpose including allowing a user to interact with one or more software applications including an IDE e.g. or search engine e.g. . Generally the GUI provides users with an efficient and user friendly presentation of data provided by or communicated within the system. The term graphical user interface or GUI may be used in the singular or in the plural to describe one or more graphical user interfaces and each of the displays of a particular graphical user interface. Therefore the GUI can be any graphical user interface such as a native rich client web browser touch screen or command line interface CLI that processes information in the environment and efficiently presents the results to the user. In general the GUI may include a plurality of user interface UI elements such as interactive fields pull down lists media players tables graphics virtual machine interfaces buttons etc. operable by the user at the client . These UI elements may be related to the functions of one or more applications or services e.g. including applications e.g. hosted locally at the client.

While is described as containing or being associated with a plurality of elements not all elements illustrated within environment of may be utilized in each alternative implementation of the present disclosure. Additionally one or more of the elements described herein may be located external to environment while in other instances certain elements may be included within or as a portion of one or more of the other described elements as well as other elements not described in the illustrated implementation. Further certain elements illustrated in may be combined with other components as well as used for alternative or additional purposes in addition to those purposes described herein.

Turning now to the flowchart of an example technique is shown for generating development artifact search results in connection with an integrated development environment. A search query can be received for example through an interface of an integrated development environment. The search query can include one or more search terms and be directed to a search of development artifacts including structured and unstructured data stored in one or more repositories. An index can be used to identify a set of search results the index identifying a plurality of development artifacts and including context data identifying for each development artifact in the plurality of development artifacts at least one attribute of the respective development artifact. Context data can specify key users departments projects repositories descriptors metadata and other information that can be considered when searching the set of development artifacts stored in the one or more repositories. The set of search results can identify that subset of the searched plurality of development artifacts determined to potentially relate to the at least one search term. A listing can then be generated that identifies at least a portion of the set of search results. The listing can be sent and presented to a user or a system or application adapted to use and further process the listing of search results to provide additional services. This presented listing can be adapted to allow a user to select at least one particular development artifact or other content from the listing. In such instances the selection of a particular development artifact from the listing can result in the receipt of a corresponding user request to retrieve at least one particular development artifact from the subset of the plurality of development artifacts stored on the repositories. In response to the request the specified development artifact can be retrieved for use by the user in the integrated development environment.

In some instances an example technique for generating development artifact search results in connection with an integrated development environment such as described in can further include the generation of the index used to identify a set of search results of development artifacts corresponding to a search query. For instance a data crawler can be used to poll mine query and otherwise access repositories of development artifacts to identify development artifacts included in the repositories together with context data for the identified development artifacts. An index can be built and supplemented using the data mined by the crawler so as to build an index of the corpus of development artifacts searchable by a search engine integrated with an integrated development environment. In some instances once a development artifact has been created changed or deleted the IDE or search engine operating in connection with the IDE can interface directly with the search engine s crawler and invoke indexing of the artifact to allow dynamic real time updating of the index corresponding to changes to the artifact.

Context data relating to or describing various attributes and characteristics of a development artifact can include structured and unstructured information including information collected from repositories other than the repository hosting the artifact. Structured context data can include identifiers including artifact ID fieldlength of database fields types class or method names database table names UI controls etc. Unstructured context data can include longtexts for database and UI unstructured documents including javadoc for classes methods and package docu as well as unstructured online help and other repositories. Additionally package version and release information can also be included in context data and relate to a larger project or software product of which the development artifact is a part or with which it is associated. Context data can also identify the author of the artifact as well as users who have previously modified accessed or even searched for the development artifact. Additionally context data for an artifact can include information detailing the dates of the development artifact s creation last change or last access. Other context data can further identify projects business units working groups and development categories with which the development artifact is associated as well as other attributes of the development artifact. Context data for a particular development artifact can be used to identify that the particular development artifact satisfies a given search query. Additionally in some instances a listing of search results can include presentation of some context data associated with the development artifact e.g. associated development categories or projects last changed data author or key user identifier etc. to supplement the information presented in the listing as well as guide a user s selection of the most relevant development artifacts returned for the user s query.

In some instances one or more search indexes can be constructed and used to generate a set of search results based on a search query of a search corpus that includes plurality of development artifacts. illustrates an example system including one or more users utilizing one or more computing devices to use and develop development artifacts that can be included in the search corpus. The search corpus can be indexed in one or more indexes including one or more tables or other data structures adapted to be searched and maintained by a search engine . The search engine can include crawler an index manager a user manager and result generator .

The search engine crawler can access read and otherwise identify development artifacts stored in a set of development artifact repositories . The crawler can periodically or continuously poll the repositories to discover development artifacts not already identified in the search index as well as identify changes to artifacts already included in the search index. The crawler can identify aspects and characteristics of the development artifacts including the content of the development artifact its location e.g. the address directory or particular repository on which it is stored type e.g. language type unstructured structured metadata of the development artifact as well as other data describing the development artifact. The crawler can also identify resources stored on the repositories relating to the development artifacts such as projects associated with the development artifact the creator or administrator of the development artifact user data identifying prior uses of the development artifacts by a user and other data. An index manager can use the data collected by the crawler to build or update one or more search indexes .

The search engine can further include a result generator adapted to generate a set of search results responsive to a given query for development artifacts hosted or stored by a set of repositories. The result generator can utilize the indexes managed by the index manager to identify development artifacts satisfying a received user search query. The result generator can utilize one or more of a variety of search algorithms and techniques including fuzzy searching lexical searching cross language searching Boolean and non Boolean logic filtering natural language searching non text searching such as graphical searching and other techniques.

In some instances the result generator can operate in conjunction with a user manager to tailor search results for a particular user. The user manager can collect and maintain data pertaining to one or more users of the search engine an integrated development environment interfacing with integrated with or otherwise associated with the search engine or development artifacts searched by the search engine . The user manager can identify preferences of a user either based on preexisting user profile data or intelligently based on users habits and uses of any one of the development artifacts integrated development environment or search engine . The user manager can also interact with the crawler index manager and or result generator to develop indexes of user data that can also be considered in generating search results for a given query including user customized search results.

A search index developed maintained and used by a development artifact search engine can include fields and tables identifying the development artifacts descriptions of the development artifacts development artifact metadata and other data describing the characteristics of the development artifacts . Additional fields and indexes can be maintained for the search corpus that describe the use of the development artifacts for example by users . As shown in users can be associated with various projects e.g. development artifacts e.g. documentation e.g. and user profiles e.g. . For instance user can be identified as associated with development artifacts . A user can be associated with a development artifact based on a prior use of the development artifact including creation or modification of the artifact or based on the user s identity roles permission levels or associations. For example a particular development artifact may be adapted for use with a particular work group of which the user is a member. A user e.g. can also be identified with a particular project e.g. . Information regarding the project including a business unit with which it is associated a development category e.g. user interface design application design operating system and kernel design software modeling and others development artifacts associated with the project and other data can be identified for the project as well as the development artifact. Further documentation e.g. pertaining to one or more development artifacts their use functionality and characteristics can be published owned maintained or accessed by a particular user e.g. . Further user profiles e.g. can be maintained for users of the search engine identifying users preferences characteristics and use histories. For instance a user profile can maintain data describing the role of the user within an organization the projects groups organizations and business units with which the user is associated the user s experience level programming languages project types language and other data.

Development artifact use data and user data can be used to enhance filter rank sort and personalize search results generated in a response to a query directed to a search corpus including a set of development artifacts. For instance a set of search results can be created by using heuristics based on index data describing a prior user s access and use of certain development artifacts and related search results. As an example a user can filter or sort a set of search results directed to a particular query based on programming language project type e.g. open source develop artifact type etc. In filtering ranking or sorting a set of search results based on a specified programming language a set of users can be identified that have expertise with the specified programming language. Further data identifying these users preferences for associations and interactions with particular development artifacts can be identified and considered. For instance development artifacts recently accessed by a particular set of users or identified as particularly popular with a particular set of users can be scored or otherwise favored above other development artifacts in the set of search results given their popularity with this set of users.

Additionally indexed user data and development artifact use data can be used to personalize the set of search results for a user. As an illustrative example a particular user may be associated with a particular project that is generally focused on developing a certain type of software. A set of search results generated for a particular search query for the user can include development artifacts relating to types of software other than the those in which the user is primarily interested. The identity of the user can be automatically identified by the search engine for example using the user manager including the user s association with the particular project . From this data it can be determined that the user likely prefers development artifacts identified as having been used in designed for or previously accessed by other users involved in a similar project or developing the types of software with which the user s business unit is typically associated. For example it may identified that a project with which a second user is associated is related to the project associated with the first user . Consequently an index cataloguing the second user s associations with particular development artifacts can be considered when generating a set of search results for the first user to help point the first user toward development artifacts likely considered useful by other users e.g. engaged in similar design work.

The development artifacts identified as likely being of interest to the user based on their association with a particular type of software development can be presented to the user more prominently than those development artifacts in the set of search results not identified as associated with the particular software types. Presenting development artifacts more prominently can include highlighting the respective development artifacts presenting the artifacts near the top of the search result set or automatically sorting or filtering the presentation of search results based on the identified criteria. In other instances user data can be used to restrict access to certain development artifacts based on a user s role or permissions. Indeed search results sets generated for a user can be similarly filtered to limit which development artifacts are returned in the search based on the user s role or permissions. For example certain development artifacts may be designated as proprietary and access to these development artifacts can be restricted to particular users such as users having a certain administrative or ownership role or identified as belonging to a particular company or organization.

In some instances the indexes used by the search engine can be updated dynamically and in real time to reflect the creation and modification of development artifacts in repositories accessed by the search engine. is a flowchart illustrating an example of incorporating development artifact changes in development artifact searches in real time. A first client can send a first development artifact search query e.g. using a search tool such as development artifact search tool of IDE to a development artifact search engine operating in connection with an integrated development environment. In response to the request the search engine can identify development artifact hits matching the query and return the corresponding search results to the querying client e.g. using result generator applying filters ranks user preferences from user manager . Upon receiving the search results a user operating the client can request the retrieval of a particular development artifact included in the search results. The request can be transmitted to a repository identified as storing hosting or maintaining the requested development artifact. Upon receiving the request the repository can send the requested development artifact to the client . The client can receive the development artifact from the repository for instance over a network for use in an integrated development environment operable at least in part through the client .

 Sending and receiving the development artifact from the repository can include granting read and or write access to the development artifact where the development artifact is maintained at accessed and manipulated from the repository . In other instances the client can check out the development artifact checking back in the artifact to the repository when finished with the artifact. In any event a user of the client can modify the retrieved or accessed development artifact or even add new artifacts for instance using the integrated development environment. Modifications made by the user of client can be saved recognized transmitted or otherwise communicated to the repository . Further these changes can be automatically forwarded propagated communicated or otherwise identified by or communicated to the search engine . Indeed these modifications in some instances can be communicated and recognized by the search engine substantially immediately following the modifications by the user at client . For instance immediately upon receiving notification of the modification the search engine can update one or more search indexes used by the search engine to reflect the modifications made by the user. As a result the updated index can be used to field a subsequent query sent by a client and generate a set of search results in response to the request that potentially include the recent updates to Artifact A.

In some instances the modification by client can affect the outcome of subsequent searches. For example a subsequent query sent after the modification can be substantially identical to the query that returned the modified development artifact in the first place. Due to the modification of the artifact and the updating of the search index however the modified aspects of the artifact can result in the modified artifact not meeting the terms of the subsequent search query. Further in instances where the search engine is communicatively coupled to repositories searched by the search engine modifications or deletions of an existing artifact and creations of new artifacts hosted on the repositories can be communicated to the search engine so as to update the corresponding search index substantially immediately or in real time using techniques similar to that shown and described in connection with .

Although this disclosure has been described in terms of certain implementations and generally associated methods alterations and permutations of these implementations and methods will be apparent to those skilled in the art. For example the actions described herein can be performed in a different order than as described and still achieve the desirable results. As one example the processes depicted in the accompanying figures do not necessarily require the particular order shown or sequential order to achieve the desired results. In certain implementations multitasking and parallel processing may be advantageous. Other variations are within the scope of the following claims.

