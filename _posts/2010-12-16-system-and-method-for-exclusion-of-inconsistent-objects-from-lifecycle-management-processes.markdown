---

title: System and method for exclusion of inconsistent objects from lifecycle management processes
abstract: The present disclosure involves systems, products, and methods for excluding inconsistent objects from lifecycle management processing. One method includes operations for identifying a set of objects in a system, at least a subset of the set of objects associated with a lifecycle management process; prior to performing the lifecycle management process, determining a consistency status for each object in the subset of objects associated with the lifecycle management process; and performing the lifecycle management process, wherein performing the lifecycle management process includes executing at least one lifecycle management operation on each object in the set of objects determined to be consistent within the system prior to performing the lifecycle management process. In some instances, performing the lifecycle management process may include skipping the execution of the at least one lifecycle management operation for each inconsistent object during the lifecycle management process.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08762929&OS=08762929&RS=08762929
owner: SAP AG
number: 08762929
owner_city: Walldorf
owner_country: DE
publication_date: 20101216
---
The present disclosure relates to software computer systems and computer implemented methods for managing lifecycle management processes in computing systems.

Lifecycle management process execution is one of the major cost contributors for IT departments running both on premise software and on demand solutions. One of the primary costs associated with lifecycle management is handling incidents that occur during the process s execution. Lifecycle management processes can fail for a variety of reasons including the processing of content in an associated system during execution of a lifecycle management process on that system errors within or during the lifecycle management procedure errors within the shipped content i.e. a software upgrade or errors in the receiving system. Issues in lifecycle management processes are sometimes associated with the specific objects within the system in which the lifecycle management process is executing. Further the number of errors due to those specific objects increases with the total number of objects in the system such as for entities where many objects are associated with the lifecycle management process.

During the execution of lifecycle management processes for a system e.g. moving data for a tenant in an on demand system to another system upgrading a system to newer software or performing a system copy objects within the system are processed. The number of objects processed and how those objects are processed depends on the lifecycle management process and its parameters. During a software upgrade for example generated objects may need to be re generated to adjust to the new software environment. During the processing of objects errors frequently occur generally causing the lifecycle management process to stop when an error is identified. Stopping a lifecycle management process and analyzing the process is costly both in terms of the time to perform the lifecycle management process as a whole and the time it may take for an administrator or other service entity to correct the identified error. In some instances the downtime caused by these errors may violate certain service level agreements for the associated software and or hosting operations such as a requirement as a percentage of uptime or the maximum amount of potential downtime for a system.

The present disclosure involves systems products and methods for excluding inconsistent objects from lifecycle management processing. One method includes operations for identifying a set of objects in a system at least a subset of the set of objects associated with a lifecycle management process prior to performing the lifecycle management process determining a consistency status for each object in the subset of objects associated with the lifecycle management process and performing the lifecycle management process wherein performing the lifecycle management process includes executing at least one lifecycle management operation on each object in the set of objects determined to be consistent within the system prior to performing the lifecycle management process. In some instances performing the lifecycle management process may include skipping the execution of the at least one lifecycle management operation for each inconsistent object during the lifecycle management process.

While generally described as computer implemented software embodied on tangible media that processes and transforms the respective data some or all of the aspects may be computer implemented methods or further included in respective systems or other devices for performing this described functionality. The details of these and other aspects and embodiments of the present disclosure are set forth in the accompanying drawings and the description below. Other features objectives and advantages of the disclosure will be apparent from the description and drawings and from the claims.

This disclosure generally describes software computer implemented methods and systems relating to the exclusion of inconsistent objects from being processed during the execution of lifecycle management processes LMPs . LMPs may include the processes associated with upgrading a software platform deploying a correction to a system performing a software system copy and moving the data of a tenant in an on demand architecture from one location to another among others. The set of objects within a system can include any number of potential components including business objects database tables object oriented constructs such as JavaBeans and other objects as well as other types of items and information used within a software system. Still further the objects may also include other software objects including metadata definitions and structures such as user interface element definitions table structure definitions extensibility definitions associated with objects and components of the system a definition of views defined for a particular business configuration as well as others. In some instances the objects may represent sets of data and metadata that can be instantiated as objects at runtime where those instantiated objects can store data and perform certain operations. Some objects may also be dependent upon or related to one or more other objects creating a dependency between the objects in order for the dependent object to perform correctly and or to be instantiated.

During the execution of LMPs for a system objects within the system are processed as they are updated moved or copied to a new system environment or location. In some instances a particular LMP may address a range or subset or the plurality of objects associated with a particular system. The range of objects processed by a LMP depends on the particular operations to be performed. During an upgrade for example generated objects may need to be re generated in order to adjust to the new software environment. However during the re generation and processing of those objects errors may occur. In previous solutions errors occurring during these LMPs would result in the process being paused or halted while support entities analyze and determine the issues causing the error and in some instances while those support entities then correct the issues before continuing the LMP. In some instances the LMP may need to be restarted from the beginning when an error occurs.

In the present disclosure a system and method for reducing the amount of potential errors returned by a LMP is described. In one instance the objects in a system are analyzed prior to the execution of a LMP to determine which objects are not consistent within the original system or environment and which are thus likely to cause an error to occur during the processing of the LMP. By determining the inconsistent objects prior to executing the LMP the number of incidents occurring during the LMP can be minimized avoiding unnecessary and additional downtime and correction costs and generally reducing the cost of executing the LMP itself. The inconsistent objects can be added to the second updated or different environment without being processed by the LMP. A list of those inconsistent objects can be provided to the appropriate end user customer or other suitable entity associated with the system and responsible for the issue after the LMP is completed allowing the inconsistent objects to be addressed without negatively affecting the performance of the LMP and the system s uptime while also avoiding the delay costs associated with correcting issues during the lifecycle process.

In many instances if an object has been inconsistent in the original system or environment prior to the execution of the LMP that object is likely not required to run the system after the system change or modification. Thus these objects may not need to be processed during the LMP or the error processing and handling could be delayed until after the LMP is complete. In the described system and methods a module or other component can be introduced that identifies inconsistent objects within a system prior to the execution of a LMP e.g. in response to a request to trigger the LMP based on a predetermined interval or schedule or based on a change to one or more objects or other triggering events within the system . During the LMP s execution the set of related objects can be reviewed to determine whether the objects were consistent prior to the execution. If an object was previously consistent the LMP can act upon the consistent object accordingly. If however the object was determined to be inconsistent prior to the LMP s execution the inconsistent object can be ignored or skipped by the LMP with the unprocessed inconsistent object being provided to the new or updated system along with an indication of the issues associated with the inconsistent object. In some instances the inconsistent objects may be processed but where an error arises due to the processing the LMP can add the error information to a log file and continue operations without pause providing the error information to the appropriate individual or entity once the LMP is completed.

Among the other benefits previously identified the proposed module and its related operations can provide a reduction in downtime while allowing the inconsistent objects to be processed asynchronously in uptime after the LMP completes its operations. A process can be triggered to fix the problem with the consistency of the object by the owner or expert associated with the object before the processing can be repeated thus taking the task away from the system administrator running the LMPs thereby easing the processes to manage the objects and reducing the total cost of ownership for the associated systems. Collecting inconsistent objects and presenting them at the end of the upgrade via error and issue updates without stopping the upgrade for each inconsistent object can reduce test duration and increase test cycle speed during the test and production phase of a new product or LMP as the sum of processing all inconsistent objects of all steps in the upgrade is compiled and can be passed to the teams analyzing the problems. This can avoid having each issue or error caused by an inconsistent object starting a analysis thread and delaying the continuation of the overall test until the issue is resolved or ignored.

Turning to the illustrated example illustrates an example environment for excluding inconsistent objects from processing during the execution of LMPs. The illustrated environment includes or is communicably coupled with a first system a second system a client and an administrative client at least some of which communicate across a network . In general environment depicts an example configuration of a system capable of identifying one or more inconsistent objects within a plurality of objects in the first system prior to the execution of a LMP i.e. as executed by a lifecycle management module and skipping or ignoring those identified inconsistent objects when the LMP is executed.

In general the first system can be any server that stores at least one business application where at least a portion of the business application is executed via requests received from and responses sent to users or clients e.g. client within and or communicably coupled to the illustrated environment of . In some instances requests and responses may also be received and or sent between one or more clients users or entities not illustrated in . In general the first system may be a part of a larger development environment and may in fact be represented as more than one server or system with each portion performing a portion of the functionality described herein. In some instances the first server may be a Java 2 Platform Enterprise Edition J2EE compliant application server that includes Java technologies such as Enterprise JavaBeans EJB J2EE Connector Architecture JCA Java Messaging Service JMS Java Naming and Directory Interface JNDI and Java Database Connectivity JDBC . In some instances the first server may store a plurality of business applications while in other instances the first server may be a dedicated server meant to store and execute only a single business application . In some instances the first server may comprise a web server or be communicably coupled with a web server where the business application represents at least in part one or more web based applications accessed and executed via network by the clients of the system to perform the programmed tasks or operations of the business application . Additionally the first server may perform the operations associated with a lifecycle management module used to manage the lifecycle operations and processes associated with at least the first server . The lifecycle operations may include movement of data between tenants and or systems in an on demand software environment the upgrade or modification of software in an on demand or on premise software environment or the copying of software system information and objects from one location to another.

At a high level the first system comprises an electronic computing device operable to receive transmit process store or manage data and information associated with the environment . The first system illustrated in can be responsible for receiving application requests from one or more client applications or business applications associated with the clients of environment responding to the received requests by processing said requests in the associated business application and sending the appropriate response from the business application back to the requesting client application . Alternatively requests from one or more of the clients may initiate a LMP causing the first system to perform the lifecycle management operations dictated by the type of LMP initiated. The business application at the first system can be capable of processing and responding to local requests from users accessing the first system locally such as local system administrators . Accordingly in addition to requests from the clients illustrated in requests associated with the business application may also be sent from internal users external or third party customers and other automated applications as well as any other appropriate entities individuals systems or computers. Further the terms client application and business application may be used interchangeably as appropriate without departing from the scope of this disclosure.

As used in the present disclosure the term computer is intended to encompass any suitable processing device. For example although illustrates the first system as a single server environment can be implemented using two or more servers for the first system as well as computers other than servers including a server pool. Indeed the first system may be any computer or processing device such as for example a blade server general purpose personal computer PC Macintosh workstation UNIX based workstation or any other suitable device. In other words the present disclosure contemplates computers other than general purpose computers as well as computers without conventional operating systems. Further the illustrated first system may be adapted to execute any operating system including Linux UNIX Windows Mac OS or any other suitable operating system. According to one embodiment the first system may also include or be communicably coupled with a mail server. In a multi tenant environment and other suitable implementations the first system and the second system may represent co existing portions of one or more servers computers and or networked systems in an on demand or cloud computing solution.

In the present implementation the first server includes an interface a processor a memory a business application a lifecycle management module an object dependency analyzer an object directory module an object consistency manager OCM an object access application programming interface API and an issue handler module . The interface is used by the first system for communicating with other systems in a client server or other distributed environment including within environment connected to the network e.g. the second system one or more of clients as well as other systems communicably coupled to the network not illustrated herein . Generally the interface comprises logic encoded in software and or hardware in a suitable combination and operable to communicate with the network . More specifically the interface may comprise software supporting one or more communication protocols associated with communications such that the network or interface s hardware is operable to communicate physical signals within and outside the illustrated environment .

Although not illustrated in the first system may also include a local user interface such as a graphical user interface GUI . The local GUI can comprise a graphical user interface operable to for example allow a local user of the first system to interface with at least a portion of the platform for any suitable purpose such as managing the first system and or initiating one or more LMPs associated with the business application or other data associated with the first system . Generally the local GUI provides the particular user with an efficient and user friendly presentation of business data provided by or communicated within the system. The local GUI may comprise a plurality of customizable frames or views having interactive fields pull down lists and buttons operated by the user. For example the local GUI may provide interactive elements that allow a user to enter select create or modify elements of business process instances or business object instances in the local GUI. More generally the local GUI may also provide general interactive elements that allow a user to access and utilize various services and functions of the business application including any modifications that may be made to new or modified implementations of business objects and other information associated with the business application . The local GUI is often configurable supports a combination of tables and graphs bar line pie status dials etc. and is able to build real time portals where tabs are delineated by key characteristics e.g. site or micro site . Therefore the local GUI contemplates any suitable graphical user interface such as a combination of a generic web browser intelligent engine and command line interface CLI that processes information in the platform and efficiently presents the results to the user visually.

The first system is communicably coupled with a network that facilitates wireless or wireline communications between the components of the environment i.e. between the first system and the second system between the clients and the first system etc. as well as with any other local or remote computer such as additional clients servers or other devices communicably coupled to network but not illustrated in . In the illustrated environment the network is depicted as a single network but may be a continuous or discontinuous network without departing from the scope of this disclosure so long as at least a portion of the network may facilitate communications between senders and recipients. The network may be all or a portion of an enterprise or secured network while in another instance at least a portion of the network may represent a connection to the Internet. In some instances a portion of the network may be a virtual private network VPN such as for example the connection between at least one of the clients and the first system . Further all or a portion of the network can comprise either a wireline or wireless link. Example wireless links may include 802.11a b g n 802.20 WiMax and or any other appropriate wireless link. In other words the network encompasses any internal or external network networks sub network or combination thereof operable to facilitate communications between various computing components inside and outside the illustrated environment . The network may communicate for example Internet Protocol IP packets Frame Relay frames Asynchronous Transfer Mode ATM cells voice video data and other suitable information between network addresses. The network may also include one or more local area networks LANs radio access networks RANs metropolitan area networks MANs wide area networks WANs all or a portion of the Internet and or any other communication system or systems at one or more locations. The network however is not a required component of the present disclosure such that some or all of the functionality may be performed locally at the first system .

As illustrated in the first system includes a processor . Although illustrated as a single processor in two or more processors may be used according to particular needs desires or particular embodiments of environment . Each processor may be a central processing unit CPU a blade an application specific integrated circuit ASIC a field programmable gate array FPGA or another suitable component. Generally the processor executes instructions and manipulates data to perform the operations of the first system and specifically the business application included on or within the first system . Specifically the first system s processor executes the functionality required to receive and respond to requests from the clients as well as the functionality required to perform the other operations of the business application and the other modules and components of the first system including the lifecycle management module and OCM among others.

At a high level the business application is any application program module process or other software that may execute change delete generate or otherwise manage information according to the present disclosure particularly in response to and in connection with one or more requests received from the illustrated clients and one or more client applications . In certain cases only one business application may be located at the first system . In others a plurality of related and or unrelated business applications may be stored at the first system or located across a plurality of other systems and or servers comprising the first system as well. In certain cases environment may implement a composite business application. For example portions of the composite application may be implemented as Enterprise Java Beans EJBs or design time components and may have the ability to generate run time implementations into different platforms such as J2EE Java 2 Platform Enterprise Edition ABAP Advanced Business Application Programming objects or Microsoft s .NET among others. Additionally the business application may represent web based applications accessed and executed by remote clients or client applications via the network e.g. through the Internet . Further while illustrated as internal to the first system one or more processes associated with a particular business application may be stored referenced or executed remotely. For example a portion of a particular business application may be a web service associated with the application that is remotely called while another portion of the business application may be an interface object or agent bundled for processing at a remote client such as client application . Moreover any or all of the business applications may be a child sub module or portion of another software module or enterprise application not illustrated without departing from the scope of this disclosure. Still further portions of the business application may be executed by a user or operator working directly or locally at the first system as well as remotely at clients .

As illustrated and described above the processor can also execute a plurality of modules and or components associated with one or more LMPs including the lifecycle management module an object dependency analyzer an object directory module an object consistency manager an object access API module and an issue handler module . In some instances some or all of the these additional modules and components may be combined into a single module operable to perform the operations associated with each of the described components as well as various combinations of modules. In other instances one or more of the modules components may not be included in the system including some or all of the functionality performed by those removed modules components. The set of components illustrated in are meant to represent a single implementation and can be modified for any number of alternative or additional instances. Additionally some or all of the components may be used in associated with embedded in or modules of the business application as well as an enterprise software system not illustrated . In some implementations one or more of the components can be executed by a different processor or system external to the first system such as by a server or other system communicably coupled to the first system through network . For example the lifecycle management module may be provided as an on demand service via a cloud computing network or platform such as a web service accessible via network or as a service provided on a dedicated server or computer other than the first system .

The lifecycle management module can be used to initiate and manage a particular LMP within the first system . The lifecycle management module can receive and respond to requests from one or more users administrators or other entities to start or prepare for a particular LMP. In some instances the lifecycle management module may also be used to manage or initiate some pre LMP activities including initiating an analysis of one or more objects within the first system to determine the consistency of those objects. The lifecycle management module can manage and direct one or more of the other components illustrated in to perform specific lifecycle management tasks. In some implementations the lifecycle management module may be associated with each of the operations of the LMP using the various components to perform the overall process. In other implementations the lifecycle management module may instead initiate the LMP and receive information from the various other components as operations are performed. The lifecycle management module can store or reference specific information on the results of a particular LMP as well as on when the last consistency check was performed.

The OCM is a module that can be used both prior to and during the execution of a LMP. Prior to the LMP the OCM can be called i.e. by the lifecycle management module to determine the consistency state of one or more objects within the first system as well as objects located outside of the first system where appropriate . In some instances where a particular LMP is to be performed the OCM can limit the objects for which the consistency state is determined to the set of objects that are associated with the LMP if the set of associated objects is known or discoverable. Alternatively the OCM can update the consistency information associated with some or all of the objects of the first system periodically e.g. hourly daily or on a defined schedule in response to specific triggering events e.g. modification of an object by a user within the first system and or in response to a request e.g. a request from an administrator . The OCM can perform various operations and methods within the first system including methods both internal to the OCM as well as methods accessed via one or more of the other components illustrated within the first system e.g. as described in . In some instances the consistency check may use the object access API module to perform its operations in some instances using the check module s methods as illustrated. The methods of the check module within the object access API module can analyze one or more of the objects to determine their consistency using a series of tests and checks. In addition the object dependency analyzer can detect whether a particular object is dependent on one or more of the other objects thereby allowing the methods of the check module to access those objects to determine whether they were consistent or not. If a first object is dependent on a second object and the second object is inconsistent the first object would be considered inconsistent. After determining the consistency state of particular objects the OCM can persist the consistency information in one or more potential locations within memory or other suitable locations.

During the execution of a LMP the OCM can be called to determine the consistency status of one or more objects associated with the process. The consistency status here refers to the consistency status of the objects just before the execution of the LMP. The information on the consistency of those objects can be retrieved through various methods and actions including the use of or request through one or more of the other illustrated modules. By determining the prior consistency of the objects to be processed the OCM can alert the lifecycle management module or other components performing the actual execution to skip ignore or otherwise treat inconsistent objects in such a way as to avoid causing the LMP to stop or be delayed e.g. by not processing the inconsistent objects during the LMP by not stopping the execution if an error is generated in response to processing a known inconsistent object etc. . During the execution of the LMP the name ID or other identifying information for each consistent object and in some instances each inconsistent object can be provided to the LM action module within the object access API module where the LM action module performs the associated or defined lifecycle management operations on that identified object.

The object directory module can include one or more methods for accessing information on the set of objects within the first system . The OCM can use the object directory module to access an object persistency directory . The object persistency directory can store a listing or set of listings of the objects included or associated with the first system . In some instances the object persistency directory may include a list of object names unique object identifiers or other information for referencing specific objects within an object persistency . Additionally the object persistency directory may be extended to include consistency information for one or more of the objects included therein illustrated as the object consistency state . The object consistency state may be an additional field or entry within the object persistency directory that allows the object directory module and therefore the OCM accessing the object directory module to determine the consistency of a particular object without requiring additional searching or data access.

The object persistency stores information defining the various objects associated data and metadata. The information in the object persistency may be stored as database tables Extensible Markup Language XML text files business objects or other suitable data structures. Generally objects can be instantiated at runtime from the information included within the object persistency . The information for a particular object within the object persistency can include one or more references or dependencies on other objects within the first system as well as external systems such that additional information may be necessary to fully instantiate the object. As illustrated in some objects within the object persistency can be extended to store internal information defining the consistency of the object within the system. In some instances the consistency state can be stored within the instantiated object itself in local storage allowing for an improvement in performance and removing the need for the object access API s check module to be called instead allowing the state to be read directly from the object prior to or during lifecycle management processing.

In a third alternative consistency information for one or more objects can be stored within a separate and distinct object state persistency a separate set of information defining the current consistency information for one or more objects. In some instances the object state persistency may be used when the objects object persistency and or the object persistency directory cannot be extended or modified to include consistency information on one or more of the objects. The object state persistency may be a database table or file used to store the persistency information for specific objects and may be accessible via appropriate methods and or queries to retrieve information based on an object s name ID or other identifying information.

In some instances a combination of the object consistency state the object state persistency and the consistency state may be used to store object consistency information in the first system . For example some objects may be extendible while others are not thereby allowing only some objects to store their consistency information within the consistency state portion of the object persistency . Additionally the various storage locations may store redundant consistency information to allow for multiple types of access in various situations. Further some implementations may not include all consistency storage locations. For instance some implementations may only include the object consistency state within the object persistency directory and the consistency state within the object persistency while in other implementations the object state persistency and the consistency state may only be included.

As illustrated in the object persistency directory the object state persistency and the object persistency are stored within the memory of the first system . Memory can store data and program instructions including the objects their consistency status and other data and information associated with the first system a specific instance of the business application or the OCM among others. Memory may include any memory or database module and may take the form of volatile or non volatile memory including without limitation magnetic media optical media random access memory RAM read only memory ROM removable media or any other suitable local or remote memory component. Memory may store various computer readable objects or data including classes frameworks applications backup data business objects jobs web pages web page templates database tables repositories storing business and or dynamic information and any other appropriate information including any parameters variables algorithms instructions rules constraints or references thereto associated with the purposes of the first system its business application and the objects and object persistency . While memory is illustrated entirely within the first system in some or all of the components illustrated in memory may be stored external to the first system and or to the illustrated environment in some implementations.

Memory also includes a lifecycle management log . The lifecycle management log can be used to store information regarding the execution of various processes and activities of the LMPs including storing information and details associated with one or more identified inconsistent objects from the set of objects associated with the LMP. The lifecycle management log can be updated during the execution of a LMP as one or more inconsistent objects are identified as well as when the processing of a previously consistent object fails. The log may also store information on the successfully processed consistent objects. Once the LMP is finished with its execution an issue handler module can access the lifecycle management log . The inconsistent objects that were not processed or that caused an error during their processing can be identified by the issue handler module along with the appropriate handling entity for managing the inconsistent object. The issue handler module can then send notification of the issues associated with the inconsistent object to the appropriate entity. In some instances inconsistent objects may be incomplete or not fully developed. In those instances the issue handler module can route the issue to the appropriate user or developer who created the inconsistent object notifying them of the object s inconsistency. Similarly the issue handler module can access the log to determine where previously consistent objects generated errors during the execution of the LMP or where consistent objects were rendered inconsistent during the LMP. The issue handler module can identify the appropriate handling entity for those issues and provide information on the errors and objects to that handling entity. In some instances where previously consistent objects are rendered inconsistent or fail in the LMP the issue may be routed to a support or IT related entity e.g. the software vendor or help desk during a software upgrade when a previously consistent object is not compatible with a new software upgrade .

In the illustrated example of the second system represents a second system to which information from the first system is being copied or moved. As illustrated the second system includes a process interface memory and business application which may be similar or different to those described within the first system . In the illustrated example the memory includes a copy of the object persistency directory and object persistency from the first system that has been copied to the second system after a system copy LMP as well as an object directory module that can provide access to the object persistency directory within the second system . Additionally a lifecycle management log may be included within memory where the lifecycle management log can include information on the execution progress and or issues that arose during the system copy LMP.

While the second system is illustrated to show the system copy implementation LMPs such as tenant moves within an on demand system and software upgrades may not require or need a second system to function. The operations associated with those LMPs may involve re generating or re initiating some or all of the objects within the first system such that the objects are created or run within the updated software and or hardware environment.

The illustrated environment of also includes one or more clients . Each client may be any computing device operable to connect to or communicate with the first system and or the second system either directly or via the network using a wireline or wireless connection. Each client includes an interface a processor a memory a client application and a graphical user interface GUI . In general each client comprises an electronic computer device operable to receive transmit process and store any appropriate data associated with the environment of . It will be understood that there may be any number of clients associated with or external to environment . For example while illustrated environment includes two clients alternative implementations of environment may include a single client or multiple clients communicably coupled to the first system and or the second system or any other number of clients suitable to the purposes of the environment . Additionally there may also be one or more additional clients external to the illustrated portion of environment that are capable of interacting with the environment via the network . Further the term client and user may be used interchangeably as appropriate without departing from the scope of this disclosure. Moreover while each client is described in terms of being used by a single user this disclosure contemplates that many users may use one computer or that one user may use multiple computers. In some instances client may represent a general user of the first system while client may represent an administrator or other support entity associated with performing monitoring and managing a LMP.

The GUI associated with client comprises a graphical user interface operable to for example allow the user of client to interface with at least a portion of the platform for any suitable purpose such as creating preparing requesting modifying or analyzing data as well as viewing and accessing documents and files associated with various business transactions. Generally the GUI provides the particular user with an efficient and user friendly presentation of business data provided by or communicated within the system. The GUI may comprise a plurality of customizable frames or views having interactive fields pull down lists and buttons operated by the user. For example GUI may provide interactive elements that allow a user to enter or select elements of business process instances and business objects associated with the business application in GUI . Portions of the business application associated with the first system may be presented and accessible to the user through GUI such as through a web browser or client application for example. More generally GUI may also provide general interactive elements that allow a user to access and utilize various services and functions of client application . The GUI is often configurable supports a combination of tables and graphs bar line pie status dials etc. and is able to build real time portals where tabs are delineated by key characteristics e.g. site or micro site . Therefore the GUI contemplates any suitable graphical user interface such as a combination of a generic web browser intelligent engine and command line interface CLI that processes information in the platform and efficiently presents the results to the user visually. In some instances the client application may be a remote module agent or portion of the business application allowing users to access and modify data and values within the first system . In some instances the client application may be a web based application or even a web browser that can perform tasks other than those associated with the first system . In some instances the client application may be used by a remote administrator to initialize or manage a LMP as well as to manually initiate an object consistency check.

As used in this disclosure the clients are intended to encompass personal computers touch screen terminals workstations network computers kiosks wireless data ports smart phones personal data assistants PDAs one or more processors within these or other devices or any other suitable processing devices. For example each client may comprise a computer that includes an input device such as a keypad touch screen mouse or other device that can accept user information and an output device that conveys information associated with the operation of the first system the business application the lifecycle management module or the client itself including digital data visual information the client application or the GUI . Both the input and output device may include fixed or removable storage media including a non transitory storage medium such as a magnetic storage media CD ROM or other suitable media to both receive input from and provide output to users of client through the display namely the GUI .

While is described as containing or being associated with a plurality of elements not all elements illustrated within environment of may be utilized in each alternative implementation of the present disclosure. For example although depicts a first system external to network the first system or a portion of the structure systems and functionality associated therewith may be included within network as part of a cloud computing network solution for example. In some additional instances the first system may be a set of servers or other systems that combine to perform the operations associated with the business application the lifecycle management module and the object consistency manager . Additionally the lifecycle management module and any of the other modules within the first system may be offered as a cloud based solution or distributed across one or more systems including clients . Still further one or more of the elements described herein may be located external to environment while in other instances certain elements may be included within or as a portion of one or more of the other described elements as well as other elements not described in the illustrated implementation. Further certain elements illustrated in may be combined with other components as well as used for alternative or additional purposes in addition to those purposes described herein.

Turning to the illustrated system illustrates modules and software executing within the processor and the memory described in . On the portion A of entitled Before LM Process the operations associated with determining the consistency state of one or more objects are illustrated along with an example set of actions performed by various components described above. The actions for determining the current or initial consistency state of one or more objects within a system can be initiated based on a modification to one or more objects by a developer within the system i.e. an automatic consistency determination may be performed when changes to a particular object are made a manual request for determining the consistency state of one or more objects by an administrator or other user or a timing or event based triggering of an update to the consistency status as defined by an administrator or by default within the system e.g. hourly daily weekly etc. .

The OCM gets the object list using a getObjectList method from the object directory module as shown by . The object directory module then reads the information on the set of objects from the object directory persistency within memory as shown by . For each object the OCM uses the object access API module s check module as shown by to determine the consistency status of that particular object by accessing the object s information within the object persistency as shown by . In general the check module s methods can determine the consistency state of the object using one or more checks and other tests. For example the tests performed by the check module may include a determination as to whether all of the mandatory attributes associated with the object are available within the object persistency or alternatively are referenced and available to the object within the first system as necessary . Additionally the object may be tested or checked to ensure that its syntax is correct and allows for functional behavior of the object within the current system. The particular object s dependencies and reference objects may be identified i.e. using the object dependency analyzer and or the information included within the object itself with the objects and data upon which the particular object is dependent or that it references are available and also consistent within the system. Another check or test may include testing whether a runtime artifact of the object can be generated based on the information and metadata within the object persistency according to the operations and requirements of the associated system and or software.

Based on the results of the checks a consistency status for each object can be generated and returned to the OCM . For each object where the consistency status is determined the OCM can persist that determined consistency status into a storage location for potential future use. In the illustrated implementation of the OCM stores the consistency information within the object consistency state a part of the object directory persistency and or within the consistency state portion of the object persistency . Storing the consistency information within the object consistency state may include adding or modifying a field or column to the object directory persistency associated with the particular tested object. Storing the consistency information within the consistency state of the object persistency may include storing the consistency information in local memory or within an already instantiated version of the object as well as or alternatively in metadata associated with or defining a particular object. In some instances the consistency information stored in the consistency state may be updated during the check module s operations described above.

The portion B of the example implementation entitled During LM Process illustrates the operations and interactions that occur once the LMP has been initiated. The lifecycle management module first retrieves a list of consistent objects from the object directory persistency using the object directory module . In the illustrated instance the lifecycle management module can call a getConsistentObjectList method to use the object directory module to identify the objects identified as consistent within the object directory persistency and the object consistency state data as illustrated by just prior to the execution of the LMP. Once the list of consistent objects is retrieved the lifecycle management module can request the object access API s LM action module to perform the appropriate lifecycle management operation s on each of the identified consistent objects. As illustrated in the lifecycle management module can call an actOnConsistentOnly method to perform the lifecycle process on only the consistent objects. In some instances and based on the identification of only the consistent objects from the system the lifecycle management module may be able to use an act method on each of the identified consistent objects without testing or performing additional operations to determine whether the retrieved objects are consistent. Using these methods the illustrated example implementation can perform operations for LMPs on consistent objects only avoiding the potential errors problems and delays that may occur when processing inconsistent objects.

Turning to similar but different operations may can be used in the example implementation where a separate repository the object state persistency is used to store consistency information regarding one or more of the objects within the system. Similar to each of the objects in the object persistency may also include be embedded with or be extended with consistency state information. Similar to the portion A of labeled Before LM Process illustrates the operations of the OCM and its related components prior to the LMP being executed. In the illustrated example the OCM retrieves or requests the list of objects to be checked illustrated in as using the getObjectList method via the object directory module which reads from the object persistency directory as shown by . Once the OCM has retrieved the list of objects to be checked within the system during the current check the OCM uses the check module of the object access API module to analyze and check the objects within the object persistency as illustrated by . Similar methods for checking each object may be used as described in while in some instances different methods checks and tests may be performed. The results for each of the checked objects are returned to the OCM which then stores the results of the check within the object state persistency as illustrated in using the setObjectState method . Similar to the results of the check module s checks and tests may also be stored within the consistency state of the object persistency .

The portion B of entitled During LM Process illustrates the operations occurring during the operation of the LMP in the example implementation . The lifecycle management module retrieves the list of objects associated with the LMP. As illustrated the getObjectList method is used to retrieve the objects via the object directory module which accesses the object directory persistency as shown by . The lifecycle management module can then access the OCM to determine which of the retrieved objects are consistent based on the consistency information stored within the object state persistency . In the illustrated implementation the lifecycle management module can use an isConsistent method to access the OCM where the method causes the OCM to determine which of the retrieved objects are consistent. To determine the consistent objects the OCM can use a getObjectState method that directly accesses the object state persistency in memory for each of the objects requested by the lifecycle management module . The OCM can then return the consistency states for each of the objects identified to the lifecycle management module . For each of the consistent objects the lifecycle management module can then request the LM action module using the act method call to perform the appropriate actions upon the set of identified consistent objects where the appropriate lifecycle management options are performed on the objects within the object persistency by the LM action module as shown by . While not illustrated the inconsistent objects can be added to sent to or copied in the updated or new system along with information identifying the objects as inconsistent and unprocessed by the LMP. In some instances error messages and or notifications can be provided to the appropriate entities e.g. users administrators or support entities once the LMP finishes to allow those inconsistent objects to be modified and updated to make them consistent.

At a LMP in a first system is initiated. The LMP may be any suitable type of LMP and may involve both a first system and a second system or more such as a system copy LMP or may involve a single system such as in a software upgrade situation. Method assumes for purposes of this description that the LMP associated with involves two different systems. Other LMPs involving a single system or more than two systems may also be used with some or all of method . The initiation of the LMP may be based on a request or trigger caused by an administrator of the first system or based on a triggering event associated with the LMP.

At a set of objects within the first system is identified as being associated with the LMP. In some instances all objects within the first system may be associated with the LMP i.e. in a full system copy while in other instances only a portion of the objects within the first system may be associated with the LMP i.e in a partial system copy . Once the associated objects are identified the set of identified objects is analyzed at to determine which of the identified objects are consistent and conversely which of the identified objects are inconsistent. The consistent objects may be placed or associated with an identified set of consistent objects while the inconsistent objects are associated with an identified set of inconsistent objects. In some instances the operations of may include performing one or more checks on each of the objects associated with the LMP including some or all of the example checks and tests described above as performed by the check module . In other instances consistency state information may be available within the first system prior to the initiation of the LMP such that the operations of merely include retrieving pre identified sets of information defining the consistent and inconsistent objects associated with the LMP.

After the operations associated with each of the associated objects differ based on whether the objects are included in the set of consistent objects or in the set of inconsistent objects. The following description addresses the handling of the set of consistent objects first with the handling of the set of inconsistent objects occurring second. It will be understood however that the order of the operations may be reversed from that described herein or performed concurrently.

For each object within the set of consistent objects at the LMP processes the consistent object as required and or appropriate for an object of its specific type. In some instances the processing of the object may include copying the object reinitiating the object regenerating the object and or any other suitable operations. In some instances the LMP may cause multiple operations on a particular object to be performed during the object s processing. At a determination is made as to whether the processing of the consistent object was successful and that no errors or other issues occurred during the LMP operations. Example issues may include the inability to regenerate the consistent object in the new system or after a software upgrade. Where a previously consistent object fails during the LMP operations the issue may be one that cannot or should not be handled by a developer or other user but rather by a support entity such as the software supplier. If an error occurs during the LMP operations method moves to . At a listing of the unsuccessful processing of the consistent object during the LMP is added to a lifecycle management process log file or other location. If no issue during the processing of the consistent object occurs or the information defining the issue is added to the appropriate location method continues at .

At a determination is made as to whether additional unprocessed consistent objects are included in set of consistent objects. If additional consistent objects remain to be processed method returns to where the next consistent object is processed. If no additional consistent objects remain method continues at where the set of unsuccessfully processed objects which are identified in the listing generated by are moved to the second system in a system copy or other two system LMP. In single system processes the unsuccessfully processed objects may remain within the system s object persistency to be processed again or modified corrected later.

At the LMP log or other file location is parsed or otherwise analyzed with a determination made as to which handling entity is to be assigned to the issues and or errors associated with the unsuccessfully processed consistent objects. A rule set may be used to determine the appropriate entity i.e. a support entity to which the issues and or error is associated. For example if the error is associated with an incompatibility of a previously consistent object with a new software upgrade the error may be assigned to the software supplier to fix or correct the software upgrade if necessary. Different issues and errors may be associated with and assigned to different handling entities. At the set of issues and or errors associated with the unsuccessfully processed objects can be presented transmitted or sent to the assigned handling entity e.g. in one or more reports . Once complete method can continue at where the LMP operations and processing are completed.

Returning to the handling of the set of inconsistent objects after the analysis of a listing of the set of inconsistent objects associated with the LMP process can be added to the LMP log or other file location at . Similar to the operations of the set of inconsistent objects can be moved to the second system where appropriate at . In one system LMPs the set of inconsistent objects may be ignored during the processing operations of the LMP or moved to a separate location from the set of consistent objects within the system. In some instances the set of inconsistent objects may be processed by the LMP with any issues or errors generated by that processing ignored and or added to the LMP log. At the handling entity associated with each of the sets of inconsistent objects is determined. In some instances the appropriate handling entity may be the user or developer who created or managed the inconsistent object such as an incomplete UI or other object. At the handling entities for some or all of the set of inconsistent objects are presented sent or transmitted via a notification message or other indicator of the existence and or issues associated with each inconsistent object. The LMP operations and processing are then completed at . Once both the set of consistent objects and the set of inconsistent objects are processed and or handled appropriately by the operations described in method the updated or new system resulting from the LMP may be considered operational.

Method is illustrated as including three different potential triggering events to its analysis operations. At the triggering event may be an identification of a change or modification associated with an existing or new object within the system. For example after an object is modified with new or updated information by a developer and saved to an object persistency the operations of method may be triggered in order to check the consistency associated with that modified object and or objects related to or associated with the modified object. At an interval based trigger may be identified within the system. In some instances the interval based trigger may be associated with a time related interval such as an hourly daily or weekly etc. interval for updating the consistency state information associated with one or more objects within the system. In some instances different objects may be associated with different consistency checking intervals resulting in some objects being checked more or less often than other objects within the system. At the triggering event associated with the consistent check and determination operations of method may be an initiation of a LMP. In some implementations prior to executing the LMP the system may initiate a consistency analysis for the objects associated with the to be initiated LMP to ensure that the consistency information within the system is up to date and accurate. Additional triggering events or actions may cause the operations of method to occur that are not illustrated in including the receipt of a manual request from a user or administrator associated with the system.

Once the operations are triggered by or a suitable alternative method continues at where an object list of objects associated with the system can be retrieved. In some instances the object list can be retrieved from an object persistency directory storing a list of objects included or associated with the system. Further retrieving the object list may comprise retrieving a subset of the total list of objects such as in situations where only a subset of the total set of objects in a system is to be checked for its consistency i.e. where the consistency check was triggered by the modification of a single object or small set of objects or where the LMP is associated with a certain subset of objects .

After the object list is retrieved a consistency check method is performed on a first object from the retrieved object list at . The various checks and tests performed can include a checking the accessibility and consistency of the dependencies of the object including checking the consistency of objects to which the object being checked is dependent. Additionally the object can be checked that all mandatory attributes of the object are available and set as well as whether the object s internal syntax is correct or will not cause an error to occur or issue to arise . Another potential check may be whether a runtime version or instance of the object can be generated. Any other suitable checks may be used at .

Once the object is checked the consistency state of the object can be persisted at . Persisting the consistency state of the object may include storing the information within or embedding the information within the object itself such as by extending the object to include a new field or set of information if the consistency state is not already part of the object storing the information in an object directory persistency as a new or updated field or column or storing the information in a dedicated object state persistency among other locations. The consistency state information can be stored in any suitable location that is accessible to the LMP operations and components when the operations of the LMP are executed.

Once the consistency state information is persisted a determination is made at as to whether additional objects in the retrieved object list remain. If additional objects remain method returns to where the persistency check operations are performed again for the next object in the retrieved object list. If however no additional objects remain method continues at where an optional action of storing information on the performed consistency check can be performed. This information can include a timestamp or other set of information that can be used to determine when the last consistency check was performed both for a particular object or set of objects as well as for the entire system.

The preceding figures and accompanying description illustrate example processes and computer implementable techniques. But environment or its software or other components contemplates using implementing or executing any suitable technique or method for performing these and other tasks. It will be understood that these processes are for illustration purposes only and that the described or similar techniques may be performed at any appropriate time including concurrently individually or in combination. In addition many of the steps in these processes and methods may take place simultaneously concurrently and or in different orders than as shown. Moreover environment may use processes and methods with additional steps fewer steps and or different steps so long as the methods remain appropriate.

In other words although this disclosure has been described in terms of certain embodiments and generally associated methods alterations and permutations of these embodiments and methods will be apparent to those skilled in the art. Accordingly the above description of example embodiments does not define or constrain this disclosure. Other changes substitutions and alterations are also possible without departing from the spirit and scope of this disclosure.

