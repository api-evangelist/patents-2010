---

title: System and method of instrumenting code for in-production monitoring
abstract: A system and method configured to instrument code for in-production monitoring provides a polling thread. A main thread executes the code of an instrumented application program and the polling thread executes in the background. Therefore the polling thread does not reduce the performance of the application program execution while monitoring activities are performed. Additionally, the polling thread is configured to simplify the process of instrumenting code for Java management extensions (JMX) by navigating the application program structure to locate administrative objects to bind to JMX and registering the administrative objects with JMX to enable monitoring of the instrumented code.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08667472&OS=08667472&RS=08667472
owner: Disney Enterprises, Inc.
number: 08667472
owner_city: Burbank
owner_country: US
publication_date: 20100729
---
The present invention relates to the field of instrumenting and monitoring of application programs and in particular to a system and method instrumenting code for in production monitoring.

A conventional technique for instrumenting the code of an application program written in the object oriented language Java requires a developer to construct a JavaBean object and then construct a dynamic management bean MBean that references the JavaBean object using Java management extensions JMX application programming interfaces APIs .

The state of a JavaBean object is stored in variables and the behaviors of the JavaBean object are implemented with methods. Variables are named records in which you can store data for later use. Methods are named pieces of code that implement behaviors the JavaBean object is configured to perform. In object oriented terminology each implementation or manifestation of a JavaBean object is an instance of the generic class of the object. Each instance of the object has specific state associated with that particular instance but every instance has the same methods defining its behavior. When created each JavaBean object has memory allocated to it to hold its instance variables i.e. the state for the object. Once the JavaBean object is created the instance methods of the JavaBean may be called to execute the JavaBean object. The JavaBean object exposes one or more specific properties of the application program.

An MBean represents a resource to be managed such as an application device or service and has a management interface consisting of the named and typed attributes that can be read and written the named and typed operations that can be invoked and the typed notifications that can be emitted by the MBean. A management tool may be configured to monitor the MBean to change settings perform an administrative action or to gather metrics related to the application program. A dynamic MBean is an MBean that defines its management interface at runtime.

An MBean may have an attribute representing a latency property of a calculation performed by the application program. The MBean may be configured to capture timestamps of the property exposed by the JavaBean and a JMX server may be configured to monitor the captured timestamps. In another example an MBean representing an application program s configuration may have attributes representing the different configuration parameters such as a cache size. Reading the Cachesize attribute of the MBean returns the current size of the cache. Writing the Cachesize attribute updates the size of the cache potentially changing the behavior of the running application.

An MBean must be registered in a core managed object server such as a JMX server before the MBean can be used. An MBean server acts as a management agent runs on most devices enabled for the Java programming language and is a repository of MBeans. Each MBean is registered with a unique name within the JMX server. Other objects or application programs do not access an MBean directly but rather access the MBean by name through the JMX server.

As the foregoing illustrates there is a need in the art for an improved technique of instrumenting code for in production monitoring.

Embodiments of the invention include a system and method instrumenting code for in production monitoring. A main thread executes the code of an instrumented application program and a polling thread executes in the background. The polling thread is configured to simplify the process of instrumenting code for a management server by navigating the application program structure to locate application i.e. administrative objects to bind to the management server and then registering the application objects with the management server to enable monitoring of the instrumented code. With such an architecture the developer is not burdened with the tasks of constructing a management object to encapsulate the application object and register the management object with the management server. More particularly in an embodiment of the invention that implements a Java framework the developer is not burdened with the tasks of constructing an MBean to encapsulate the instance object JavaBean and register the MBean with JMX.

One embodiment of the invention provides a computer implemented method for instrumenting an application program. The method includes executing the application program by a main execution thread of a processor and executing a polling thread by the processor. The polling thread is configured to navigate a graph of the application program to locate an instance of an application object construct a management object corresponding to the located application object and register the management object with a management server to produce the instrumented application program.

One advantage of the techniques described herein is that the polling thread executes in the background and therefore does not reduce the performance of the application program execution while monitoring activities are performed.

A polling thread is used to simplify the process of instrumenting code for JMX by navigating the application program structure to locate administrative objects to bind to JMX and registering the administrative objects with JMX to enable monitoring of the instrumented code. The main thread executes the instrumented application program and the polling thread executes in the background so that performance of the main thread is not negatively impacted by the monitoring functions. Therefore the application program may be monitored during the QA process and also during in production. The developer inserts information into the application program that is used by the polling thread to encapsulate the JavaBean into an MBean. The polling thread then registers the MBean with JMX and maintains an inventory of registered MBeans.

In one embodiment a developer provides information to the poller using annotations in the application program. Examples of annotations include JMXEntryPoint BindToMBean and ExposeToJMX. The JMXEntryPoint annotation is primarily a marker that flags the entry point for the polling thread and returns an instance of a profiler object JavaBean . The BindToMBean annotation marks an object instance of interest. As the poller thread traverses the object graph starting with the entry point the poller looks for BindToMBean annotations and registers an MBean passing the object of interest. The annotated method must return the target object. The ExposeToJMX annotation indicates the interesting properties and functions of the bound object. The annotations are generally getter methods that return the target objects. The reset method is an example of an action that can be executed i.e. a function. The reset method provides the ability for an external tool to clear the statistics counters and reset them to some initial state.

The class shown in TABLE 1 is an example of a code functioning as a mediator for handling all profiler statistics gathering and event handling for an application program.

At step the poller registers the constructed MBean with a JMX server. The JMX server may then monitor the instrumented application program. Steps and may be performed in periodically by the poller to maintain an inventory of the registered MBeans. At step the execution of the application program by the main thread continues. The main thread may execute asynchronously with the poller thread. In contrast with conventional methods the JMX server interactions to monitor the instrumented application program are performed on the poller execution thread instead of on the main thread. Consequently the interactions do not result in reduced performance of the main execution thread i.e. the application program. The poller thread allows for instrumenting of the application program for debug or quality assurance QA purposes as well as for in production monitoring.

The poller thread maintains an inventory of the registered MBeans registering new MBeans as they are constructed and removing MBeans that were constructed for JavaBeans that disappear. When multiple objects of the same type are used the poller uses a unique name e.g. a JMX object name for each one of the multiple objects.

At step the poller thread determines if any previously registered MBeans in the inventory maintained by the poller thread correspond to instances of JavaBeans that are missing i.e. no longer exist in the application program. If none of the previously registered MBeans correspond to JavaBeans that are missing then at step the poller thread execution is complete. Otherwise at step the inventory is updated to remove each previously registered MBean that corresponds to a missing JavaBean.

The application program to be monitored and the poller thread for instrumenting the application program each comprise an ordered listing of executable instructions for implementing logical functions. The application program and the poller thread can be embodied in any computer readable medium for use by or in connection with an instruction execution system apparatus or device such as a computer based system processor containing system or other system that can fetch the instructions from the instruction execution system apparatus or device and execute the instructions.

One advantage of the systems and methods described herein is that the polling thread executes in the background and therefore does not reduce the performance of the application program execution while monitoring activities are performed. Additionally the polling thread is configured to simplify the process of instrumenting code for JMX by navigating the application program structure to locate JavaBeans to bind to JMX exposing the JavaBeans using MBeans and registering the MBeans with JMX to enable monitoring of the instrumented code.

Various embodiments of the invention may be implemented as a program product for use with a computer system. The program s of the program product define functions of the embodiments including the methods described herein and can be contained on a variety of computer readable storage media. Illustrative computer readable storage media include but are not limited to i non writable storage media e.g. read only memory devices within a computer such as CD ROM disks readable by a CD ROM drive flash memory ROM chips or any type of solid state non volatile semiconductor memory on which information is permanently stored and ii writable storage media e.g. floppy disks within a diskette drive or hard disk drive or any type of solid state random access semiconductor memory on which alterable information is stored.

The invention has been described above with reference to specific embodiments and numerous specific details are set forth to provide a more thorough understanding of the invention. Persons skilled in the art however will understand that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention. The foregoing description and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense.

