---

title: System and method for managing cloud deployment configuration of an application
abstract: A system is provided to manage cloud deployment configuration of a computing application. The system comprises a request detector, a retrieving module, a manager loader, a configuration change request detector, and a configuration module. The request detector may be configured to detect a request to install a manager agent on an instance of a virtual machine executing a computing application within a virtualization service. The retrieving module may be configured to obtain a manager agent object for loading the manager agent, and install the manager agent on the instance. The manager loader may be configured to invoke the manager agent to collect metrics for the computing application. The configuration change request detector may be configured to receive an instruction to alter cloud deployment configuration of the computing application. The configuration module may be configured to automatically alter the cloud deployment configuration of the computing application in response to the instruction.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08739157&OS=08739157&RS=08739157
owner: Adobe Systems Incorporated
number: 08739157
owner_city: San Jose
owner_country: US
publication_date: 20100826
---
This disclosure relates generally to the technical fields of software and or hardware technology and in one example embodiment to system and method to manage cloud deployment configuration of a computing application.

The approaches described in this section could be pursued but are not necessarily approaches that have been previously conceived or pursued. Therefore unless otherwise indicated herein the approaches described in this section are not prior art to the claims in this application and are not admitted to be prior art by inclusion in this section.

The phrase cloud computing refers to an architectural paradigm in which computation is moved from local servers to a remote service that provides computation as a commodity or utility. A cloud is typically a large collection of shared commodity computation resources that can be interchangeably provisioned in response to clients computation requests. Cloud computing is frequently used in software as a service SaaS application architectures and may be viewed as an implementation choice for application deployment that leverages shared resources and improved cost structure of the cloud. A cloud computing approach may be used to implement a variety of computational paradigms such as virtual machines jobs remote procedure calls traditional servers etc.

In the following detailed description numerous specific details are set forth to provide a thorough understanding of claimed subject matter. However it will be understood by those skilled in the art that claimed subject matter may be practiced without these specific details. In other instances methods apparatuses or systems that would be known by one of ordinary skill have not been described in detail so as not to obscure claimed subject matter.

Some portions of the detailed description which follow are presented in terms of algorithms or symbolic representations of operations on binary digital signals stored within a memory of a specific apparatus or special purpose computing device or platform. In the context of this particular specification the term specific apparatus or the like includes a general purpose computer once it is programmed to perform particular functions pursuant to instructions from program software. Algorithmic descriptions or symbolic representations are examples of techniques used by those of ordinary skill in the signal processing or related arts to convey the substance of their work to others skilled in the art. An algorithm is here and generally considered to be a self consistent sequence of operations or similar signal processing leading to a desired result. In this context operations or processing involve physical manipulation of physical quantities. Typically although not necessarily such quantities may take the form of electrical or magnetic signals capable of being stored transferred combined compared or otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to such signals as bits data values elements symbols characters terms numbers numerals or the like. It should be understood however that all of these or similar terms are to be associated with appropriate physical quantities and are merely convenient labels. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout this specification discussions utilizing terms such as processing computing calculating determining or the like refer to actions or processes of a specific apparatus such as a special purpose computer or a similar special purpose electronic computing device. In the context of this specification therefore a special purpose computer or a similar special purpose electronic computing device is capable of manipulating or transforming signals typically represented as physical electronic or magnetic quantities within memories registers or other information storage devices transmission devices or display devices of the special purpose computer or similar special purpose electronic computing device.

A computing application also referred as merely an application may be made available to users by deploying the application on one or more virtual instances of a machine running on a cloud i.e. within a public or a private virtualization space such as e.g. the virtualization space provided by Amazon Elastic Compute Cloud EC2 service. A virtualization service provider may also be referred to a cloud provider.

A user can access a provider s web site and request to launch a computing application that can be deployed remotely on a plurality of virtual instances of a machine on a cloud such that the user no longer is required to deploy the computing application locally within their own data center on their own hardware. A request may be triggered by a user e.g. by activating a visual control such as a Start button presented on a web page. In response to the request the cloud provider may be instructed to access one or more machine images containing the application description and load the one or more machine images onto the physical machines provided by the cloud provider and make it accessible to the user via a network. A machine image is a read only boot image that is used for launching an instance of a virtual machine running one or more components of the requested computing application. One or more machine images representing a computing application may be provided to a network storage system e.g. AmazonS3 by a control server also referred to as a controller .

A system that provisions and manages a computing application hosted on one or more virtual instances of a machine may be referred to as a hosted service system. A hosted service system may include a cloud manager and may be configured to provide automated administration of a computing application replacing the administration tasks that would otherwise be performed by the customer when running in an on premise production deployment. The technology within an example hosted service system may hide the behavior of the underlying virtualization service and provide instances of a computing application that are substantially indistinguishable e.g. in terms of reliability security and performance from local on premise deployments of the computing application. For example a hosted service system may provision and manage computing applications such as a generic content server Adobe LiveCycle Enterprise Suite ES and Adobe ConnectPro offered by Adobe Systems Incorporated etc.

The manner in which an application can be deployed on a cloud depends on application requirement with respect to resources on one hand and also on the availability of resources that can be provided to the application by the virtualization service provider. Often more than a single cloud deployment configuration for a computing application may satisfy application requirement given a particular resource inventory. For example an application may be deployed on a cloud using varying number of virtual instances of a machine the application may be deployed using different or multiple virtualization service providers the virtual instance of a machine running the application or one or more components of an application may be started and stopped according to the need of the users etc. One of these different cloud deployment configurations may be most cost effective e.g. deploying the application on a fewer number of virtual instances of a machine while another cloud deployment configuration may be characterized by greater performance at a higher cost e.g. deploying the application on a greater number of virtual instances of a machine .

Due to fluctuations of workload associated with the computing application as well as considering possible failure of various components of the computing application a configuration that was determined to be optimal at a certain point in time with respect to a certain optimization goal may no longer be optimal at a different point in time or in view of a different optimization goal. Method and system are provided to continuously adjust cloud deployment configuration of a computing application in view of a highly dynamic environment. In one example embodiment one or more infrastructure level modules configured to address system failure the need for scalability etc. are provided as isolated infrastructure logic that can be added to the computing application via configuration changes. By separating the application modules and infrastructure level modules a computing application can be developed with just application logic the infrastructure logic may be added in by changes to the associated cloud deployment configuration at a later stage.

As will be described further below with reference to . the infrastructure mechanism to provide dynamic scaling and failure recovery for a computing application deployed on a cloud also referred to as updating cloud deployment configuration of a computing application comprises installing a cloud manager agent into every instance of a virtual machine where the computing application or any of its components is executing. The cloud manager agent may be configured to continuously extract system level and application level metrics from the computing application or a computing application component and provided the collected metrics to a cloud manager executing on a control server within a hosted service system e.g. via a monitoring interface.

After obtaining the metrics collected by the cloud manager agent the cloud manager may compute the basic data statistics and feed the computed statistics into a real time rules engine that defines automatic reaction under different environment conditions. In one embodiment the rules defined in the rules engine codify the expertise of the system operation team and provide immediate pre defined action. For example the application development team may be aware that the number of outstanding messages in the application queue will have a significant impact on the user s response time. In order to address this scenario a ManagedObject may be provided as part of the manager agent to extract the queue size as a metric. A rule in the rules engine may be defined instructing the controller to take a certain action e.g. to start more server machines to speed up the message processing in order to reduce the queue size when the queue size is bigger than a certain threshold value. In addition to triggering immediate action the collected metrics can also be used to determine trend information over time regarding the performance of the computing application. The method and system for dynamic resource monitoring of a computing application deployed on a cloud and for managing cloud deployment configuration may thus be used beneficially to store and process metrics collected over an extended time to derive meaningful insight with respect to application performance and usage. The plug in mechanism where a cloud manager agent is installed on an instance of a virtual machine executing a computing application may allow for user defined processing logic that may be made specific to the computing application. An example use case scenario is described below

A computing application that can be deployed on a cloud e.g. web application may include different types of components such as e.g. portal services running inside application servers a cache engine for performance improvement a database and other components. A web application may be configured to process different mixes of user transactions such as e.g. uploading content creating a comment post effectuating a purchase transaction for a user creating a connection relationship between two user profiles in the context of a social network etc. Each transaction may be characterized by workload that may vary according to the time of day as well as according to various other factors. The performance of a web application deployed on a cloud which may be affected by fluctuating workload may be optimized by dynamically adjusting cloud deployment configuration of the web application based on the metrics collected by the cloud manager agent.

When using a cloud manager also referred to as a dynamic monitor specific details regarding various components of a web application may be defined and stored in a cloud deployment configuration object. The cloud deployment configuration may also capture scalability rules. For example scalability and availability rules may be as follows. If the workload for content upload is higher than a certain throughput value additional one or more units of application servers need to be added. If the database component of a web application has failed start the hot standby database. If the no of messages transmitted between two systems is above a predetermined threshold value trigger the action of turning on caching. If the hit rate of cache is too low trigger the action to increase the cache size.

For longer term capacity planning CPU and memory utilization metrics collected by the cloud manager agent may be provided e.g. to a parallel MapReduce job where time series algorithms such as moving average are being executed. The output result can be presented to users using graphs or charts.

A pluggable monitoring mechanism such as a cloud manager provided at a control server operating together with a cloud manager agent executing on a virtual instance of a machine that runs a computing application may be configured to permit an administrator to define arbitrary application level metrics for monitoring as well as a set of fixed system level metrics. As mentioned above a cloud manager provided at a control server may utilize a rules engine. A rules engine may be configured to allow an administrator to define extensible actions to be performed with respect to a computing application e.g. growing and shrinking the number of instances of a virtual machine executing the computing application and its components as well as reconfiguring the application level parameters sending email alerts or activate or deactivate another set of rules to be available to the rules engine . One example of reconfiguring application level parameters is shown in Table 1 below.

The analytics logic provided by a cloud manager may also be made customizable. For example a cloud manager may be configured to provide a view into the performance of a computing application beyond the current data by using mining and forecasting techniques and generating predictions with respect to future workload conditions and preemptively adjusting resource cloud deployment configuration for the computing application deployed on a cloud.

In one embodiment a rules engine that cooperates with a cloud manager may provide a hierarchical management model that that may be utilized beneficially for large scale deployment. For example instead of just monitoring a set of instances of a virtual machine associated with a computing application one instance of a cloud manager may be configured to act as a low level manager and feed its data to other instances of a cloud manager that are configured as upper level cloud managers.

An example architecture within which method and system to manage cloud deployment configuration of a computing application hosted by a plurality of virtual nodes may be implemented is described with reference to an architecture diagram illustrated in . The architecture may include a client computer system and a hosted service system . In one example embodiment the hosted service system comprises a control server a user interface and a networking client and may be configured to provision and manage a computing application e.g. an enterprise SaaS product utilizing a cloud based computing service as a virtualization infrastructure. The hosted service system further includes a secure networking client to provide a bidirectional encrypted compressed connection between a machine in the end user s secure network environment e.g. the client computer system and one or more instances of a virtual machine running within the virtualization infrastructure the computing application . The networking client manages various aspects of transmission control protocol TCP traffic forwarding encryption and network discovery such that the user can access the computing application as if it was running locally on the user s machine. In this mode the user s network security envelope is extended to surround the computing application using comparable levels of encryption and protection against network security threats. The user interface in one embodiment provides both an end user s and a system administrator s view of the instance of a virtual machine and also permits issuing control operations to the instance of a virtual machine and permits viewing the resulting changes in the state of the instance of a virtual machine and the computing application . For example where the computing application is a content server an end user may manipulate various electronic forms. The user interface may also serve as a source of information for the hosted service system including documentation downloads and support. The user interface in one embodiment uses Adobe Flex software offered by Adobe Systems Incorporated as the user interface technology for the implementation of the user interface. The user interface in one embodiment uses an XML Extensible Markup Language based representational state transfer REST style secure communications protocol to synchronize its operations with a control server . A request to access the user interface may be authenticated using one of a variety of authentication techniques. The control server may include a database to store information pertaining to various aspects of system usage. The control server in one embodiment runs within a standard Hypertext Transfer Protocol Secure HTTPS compliant web server and may be deployed as a publically accessible web application that is available outside a firewall. The control server in one embodiment is implemented using Ruby on Rails technology.

Cloud based computing services as shown in are provided by a virtualization service host and a network storage service . In one embodiment a hosted service system utilizes Amazon EC2 as a virtualization service and Amazon Simple Storage Service Amazon S3 as a network storage service. In some embodiments the hosted service system may utilize more than one virtualization service host e.g. one host being Amazon EC2 and another host provided by Adobe Systems Incorporated. The client computer system and the hosted service system may be in communication with each other via a communications network that may be a public network e.g. the Internet . The control server in one example embodiment provides coordination between the components of the architecture and specifically provides administration and monitoring of the virtualization service host and also may be configured to audit system usage and resource allocation with respect to the computing application .

As mentioned above a user in control of the client computer system may send a request to the hosted service system to load a computing application . The request may be initiated via a user interface provided by the hosted service system to the client computer system via the browser application . The request from the client computer system to load the computing application is received at the control server which responds to the request by activating an access interface provided by the virtualization service host . The virtualization service host accesses the storage of the network storage system to obtain one or more machine images in order to load the instance of a virtual machine executing the computing application . The machine images can be uploaded to the network storage system by the control server utilizing the access interface provided with the network storage system .

In one example embodiment as shown in a cloud manager implemented by one or more processors may be executing on the control server . The cloud manager may be configured to obtain and process metrics collected for the instance of a virtual machine and for the computing application e.g. utilizing a rules engine. The cloud manager may comprise a user interface to permit a user to edit add and delete rules provided to the rules engine. The metrics that are obtained and processed by the cloud manager may be collected at the instance of the virtual machine utilizing a cloud manager agent . The cloud manager agent may be installed on the instance of the virtual machine in response to a request from an administrator or automatically after the instance of the virtual machine has been started on a cloud. The metrics collected by the cloud manager agent may be used for determining an optimized cloud deployment configuration for the computing application as well as for determining trend data with respect to resource consumption performance and other aspect of the execution of the computing application . The trend data may be used to automatically determine that another cloud deployment configuration of the computing application may be more advantageous and in response automatically alter cloud deployment configuration of the computing application .

In one embodiment the computing application comprises a plurality of components and the instruction to alter cloud deployment configuration of the computing application may be to alter configuration of the component or to recover from a failure of the component. The instruction may also be to start another instance of a virtual machine executing at least one component of the computing application. Example operations performed by the system are discussed below with reference to .

As shown in the method commences with operation where the request detector of detects a request to install a manager agent on an instance of a virtual machine where the instance is executing a computing application within a virtualization service. At operation the retrieving module of obtains a manager agent object for loading the manager agent and installs the manager agent on the instance of a virtual machine. At operation the manager loader of invokes the manager agent to collect metrics for the computing application. The metrics being collected for the computing application are application level metrics and or system level metrics. At operation the configuration change request detector of receives an instruction to alter cloud deployment configuration of the computing application. Such instruction may be generated based on application of one or more rules to the metrics collected for the computing application. At operation the configuration module of automatically alters the cloud deployment configuration of the computing application in response to the instruction.

The example computer system includes a processor e.g. a central processing unit CPU a graphics processing unit GPU or both a main memory and a static memory which communicate with each other via a bus . The computer system may further include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT . The computer system also includes an alphanumeric input device e.g. a keyboard a user interface UI cursor control device e.g. a mouse a disk drive unit a signal generation device e.g. a speaker and a network interface device .

The disk drive unit includes a computer readable or machine readable medium on which is stored one or more sets of instructions and data structures e.g. software embodying or utilized by any one or more of the methodologies or functions described herein. The software may also reside completely or at least partially within the main memory and or within the processor during execution thereof by the computer system the main memory and the processor also constituting machine readable media.

The software may further be transmitted or received over a network via the network interface device utilizing any one of a number of well known transfer protocols e.g. Hyper Text Transfer Protocol HTTP .

While the machine readable medium is shown in an example embodiment to be a single medium the term machine readable medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine readable medium shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention or that is capable of storing or encoding data structures utilized by or associated with such a set of instructions. The term machine readable medium shall accordingly be taken to include but not be limited to solid state memories optical and magnetic media. Such medium may also include without limitation hard disks floppy disks flash memory cards digital video disks random access memory RAMs read only memory ROMs and the like.

Thus method and system to manage cloud deployment configuration of a computing application have been described. While some example approaches described herein may be used with ADOBE products the techniques described herein may be utilized beneficially with various other products.

The embodiments described herein may be implemented in an operating environment comprising software installed on a computer in hardware or in a combination of software and hardware. Although embodiments have been described with reference to specific example embodiments it will be evident that various modifications and changes may be made to these embodiments without departing from the broader spirit and scope of the invention. Accordingly the specification and drawings are to be regarded in an illustrative rather than a restrictive sense.

