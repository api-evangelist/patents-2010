---

title: Transforming data tables into multi-dimensional projections with aggregations
abstract: A data table transformer includes a data receiving module configured to receive a set of rows, each row with a set of attributes, as input data. The data receiving module is also configured to receive locations for at least some of the attributes as zero-based edges. Layers of the edge are presented from the slowest to the fastest varying layers. The data receiving module is further configured to receive a designation of data values that appear at intersections of edge attributes from the same row. The data table transformer is also configured to walk input data by row and for each edge attribute, to distribute the value of the edge attribute to an edge tree created for each zero-based edge location. The data table transformer is further configured to display the data with a multi-dimensional, crosstabular display.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09146916&OS=09146916&RS=09146916
owner: Oracle International Corporation
number: 09146916
owner_city: Redwood Shores
owner_country: US
publication_date: 20100113
---
This nonprovisional application claims the benefit of U.S. Provisional Application No.61 256 418 filed Oct.30 2009 the disclosure of which is hereby incorporated by reference.

One embodiment is directed generally to computer systems and in particular to data display and aggregation in a computer system.

Relational data may be displayed in tables as a set of rows and columns. For instance the columns Sales and Units may have row values for a series of months. Calculations such as aggregates may be performed by a database application and presented by a software application with a Graphical User Interface GUI .

In some embodiments a data table transformer includes a data receiving module configured to receive a set of rows each row with a set of attributes as input data. The data receiving module is also configured to receive locations for at least some of the attributes as zero based edges. Layers of the edge are presented from the slowest to the fastest varying layers. The data receiving module is further configured to receive a designation of data values that appear at intersections of edge attributes from the same row. The data table transformer is also configured to walk input data by row and for each edge attribute and to distribute the value of the edge attribute to an edge tree created for each zero based edge location. The data table transformer is further configured to display the data with a multi dimensional cross tabular display.

In some embodiments a data table transformer may prepare table data to be presented in a multi dimensional or cross tabular format. Cross tabular means that the joint distribution of two or more attributes is displayed. A data receiving module of the data table transformer receives a set of rows where each row has a set of attributes as input data. The data receiving module is also configured to receive locations for at least some of the attributes as zero based edges where layers of the edges are presented from the slowest to the fastest varying layers. The data receiving module is further configured to receive a designation of data values that appear at intersections of edge attributes from the same row. The data table transformer is also configured to walk input data by row and for each edge attribute and to distribute the value of the edge attribute to an edge tree created for each zero based edge location. The data is then displayed by the data table transformer or a consuming application with a multi dimensional cross tabular display. Rows and columns of data in this format may have layers that can be expanded and collapsed based on the GUI to drill down to view more detailed layers. Such an implementation may allow a user application rather than a server side or database application to choose which data to present and how the data should be presented to the user.

Computer readable media may be any available media that can be accessed by processor and includes both volatile and nonvolatile media removable and non removable media and communication media. Communication media may include computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media.

Processor is further coupled via bus to a display such as a Liquid Crystal Display LCD for displaying information to a user such as status information. A keyboard and a cursor control device such as a computer mouse is further coupled to bus to enable a user to interface with computer .

In one embodiment memory stores software modules that provide functionality when executed by processor . The modules include an operating system that provides operating system functionality for computer . The modules further include a data table transformer that is configured to facilitate debugging. Computer can be part of a larger system such as a cluster computing system a distributed computing system a cloud computing system a server farm or any other system having multiple servers and or computing devices. Computer will typically include one or more additional functional modules to include additional functionality. In some embodiments data table transformer may be part of operating system or part of one or more other functional modules included in other functional modules such as a consuming application that graphically displays table data.

It should be noted that many of the functional features described in this specification have been presented as modules in order to more particularly emphasize their implementation independence. For example a module may be implemented as a hardware circuit comprising custom very large scale integration VLSI circuits or gate arrays off the shelf semiconductors such as logic chips transistors or other discrete components. A module may also be implemented in programmable hardware devices such as field programmable gate arrays programmable array logic programmable logic devices or the like.

Modules may also be at least partially implemented in software for execution by various types of processors. An identified unit of executable code in a software module may for instance comprise one or more physical or logical blocks of computer instructions which may for instance be organized as an object procedure or function. Nevertheless the executables of an identified module need not be physically located together but may comprise disparate instructions stored in different locations that when joined logically together comprise the module and achieve the stated purpose for the module. Modules may be stored on a computer readable medium which may be for instance a hard disk drive a flash device random access memory RAM a tape drive an optical drive a compact disk having read only memory CD ROM or a digital video disk having read only memory DVD ROM or any other such medium used to store data. The medium may be read only or read write.

Indeed a unit of executable code could be a single instruction or many instructions and may even be distributed over several different code segments among different programs and across several memory devices. Similarly operational data may be identified and illustrated herein within modules and may be embodied in any suitable form and organized within any suitable type of data structure. The operational data may be collected as a single data set or may be distributed over different locations including over different storage devices and may exist at least partially merely as electronic signals on a system or network.

The second input may include locations and roles for the relational data set s attributes and may be as follows 

The desired result which may be made available through an Application Programming Interface API may describe the data as well as the format as follows in Table 2 below 

Returning to which is a graphical display of data in accordance with the principles discussed above column edge is the horizontal axis above the pivot table containing one or more layers of information in the pivot table. Row edge is the vertical axis left of the pivot table containing one or more layers of information in the pivot table. Page edge is the optional pivot filter bar containing zero or more layers of information for filtering the display of data in the pivot table. Data body contains one or more measures or data values displayed in the cells of the pivot table. An edge specifies an aggregation of the original data. For example in the original data may be in terms of monthly sales figures but row edge specifies a rollup aggregation into yearly sales figures.

When a pivot table such as the pivot table illustrated in is created a page definition file may be updated with the required bindings. Binding rules specify how to lay out the data during its transformation and whether and how to aggregate sort or drill through the data. A pivot table data map may contain the following elements 

Naturally different element names could be used. An example Extensible Markup Language XML file containing the bindings may be as follows in some embodiments 

Bindings may be created manually or with the aid of a development tool such as JDeveloper from Oracle Corp.

In some embodiments the process of may be performed for example by computer of via data table transformer . While the process flow is shown in a particular order it is understood that other orders of execution could occur such as receiving locations prior to receiving a set of rows. In the process flow begins with data table transformer receiving a set of rows at as input data. Each row has a set of attributes. Data table transformer then receives locations for at least some of the attributes as zero based edges such as the column edge and row edge discussed above with respect to at .

The locations may indicate slowest to fastest varying layers within the edge. For example the slowest varying layer is the highest level in an edge and would constitute the root of an edge tree. Each level of children below the root is a progressively faster varying layer until reaching the leaves of the tree deepest and last values which would be the fastest varying layer. For instance year may be the root at level month may be a child of year at level and day may be a leaf and child of month at level . Zero or more of the remaining attributes may be designated as data values facts and may appear at the intersection of the edge attributes from the same row in the input data.

Zero based edges in one embodiment are the enumeration and order of the data file attributes used by the transformation to organize the multi dimensional results. Layers relate to the tree depth within each edge in that the zeroth or first layer is the slowest varying and the nth or last layer is the fastest varying. For example for the layers in the row edge in the results of Table 2 above 

A designation of zero or more of the remaining attributes as data values i.e. facts is received at . Per the above the data values ultimately appear at the intersection of the edge attributes from the same row in the input data. Data table transformer then receives aggregation instructions including a list of edge attributes and data value aggregation type pairs such as sum average count and the like and optional filters at . The optional filters may indicate which aggregates should display the constituent edge attributes and which should not. Data received by data table transformer may be from a user a file another software application or any other suitable data source and the data may be provided by the same computer or remotely.

Once the above data and specifications have been received data table transformer walks the input data by row at . If aggregates were specified as in special total rows are created and the data values thereof are accumulated according to the aggregation instructions at .

For each edge attribute data table transformer distributes the value to a tree such as an n way tree created for each zero based edge location at . An n way tree is a tree where each node can have up to n children where n is an integer. For each row and for each attribute within that row if the value is new to that attribute s edge and layer as specified at then the new value is added at as a child of the next slower varying edge attribute value within the same edge. However if the value already exists at the value is ignored. If more attribute values or rows remain at the process again proceeds to . The tree building process is effectively two loops one over the original data rows and previously created aggregate rows if any and within each row a loop to handle each attribute for which placement was specified at .

Data values found within each row may be stored using a multiple edge attribute value pair hash table. In one embodiment the hash table consists of entries linking keys representing the intersection of the edges attribute values with the data value to be displayed at that intersection. In the results of Table 2 above for example one of the key value pairs representing the value intersection for the value 8 in the data body would be 

Data table transformer then walks the special total rows at and places the edge attribute values thereof within the edge trees either before or after the constituent edge attributes depending on design choice at . Whether constituent edge values are to be shown or hidden is also noted. Data table transformer may either calculate metrics about the edge trees as the trees are built as shown at or upon request by a consuming software application. The number of children of a particular edge attribute and the total number of data rows or columns represented by a particular edge attribute referred to as total edge extent are some non limiting examples of potential metrics. As an example of total edge extent in the results of Table 2 above the column edge extent is 2 and the row edge extent is 6 as the resulting grid of data is 2 6 . A GUI software application consuming the results generated by data table transformer then uses an API that is highly tuned to the display of multi dimensional cross tabular edges and data to display the results graphically at . Implementing such an API enables a developer to make use of the edge trees and edge attribute value pair hash tables to return values metrics about edges and data cell values to the consuming GUI software application.

In some embodiments a data table transformer may prepare table data to be presented in a multi dimensional or cross tabular format. Trees such as n way trees are generated for each zero based edge to organize the data for multi dimensional display based on a desired visual appearance and functionality. Rows and columns of data have layers that can be expanded and collapsed based on the GUI to drill down to view more detailed layers. Such an implementation may allow a user application rather than a server side or database application to choose which data to present and how the data should be presented to the user.

As disclosed data table transformer combines conversion of standard relational tables into multi dimensional formats that are easy for views to consume and at the same time optionally calculates and places aggregates whose children can be displayed or hidden. This provides a straightforward way of rolling up displaying and analyzing detailed relational data in a compact summarized form. In addition embodiments can do this for any data in a standard row set form consisting of defined attributes as columns and data across those columns as rows. This data can be from a data warehouse a simple comma separated text file or a web service feed for example. This is a powerful capability useful in analyzing sales and financial data among many other applications.

While the term computer has been used in the description of some embodiments of the present invention the invention may be applied to many types of network computing devices. For purposes of this invention the term computer includes rack computing systems cloud computing systems distributed computing systems personal computers laptops cell phones personal digital assistants tablet computing devices mainframes any networked devices that perform computing operations and the like.

One having ordinary skill in the art will readily understand that the invention as discussed above may be practiced in a different order and or with hardware elements in configurations that are different than those that are disclosed. Therefore although the invention has been described based upon these preferred embodiments it would be apparent to and readily appreciated by those of ordinary skill in the art that certain modifications variations and alternative constructions would be apparent while remaining within the spirit and scope of the invention. In order to determine the metes and bounds of the invention therefore reference should be made to the appended claims.

It should be noted that reference throughout this specification to features advantages or similar language does not imply that all of the features and advantages that may be realized with the present invention should be or are in any single embodiment of the invention. Rather language referring to the features and advantages is understood to mean that a specific feature advantage or characteristic described in connection with an embodiment is included in at least one embodiment of the present invention. Thus discussion of the features and advantages and similar language throughout this specification may but do not necessarily refer to the same embodiment.

Furthermore the described features advantages and characteristics of the invention may be combined in any suitable manner in one or more embodiments. One skilled in the relevant art will recognize that the invention may be practiced without one or more of the specific features or advantages of a particular embodiment. In other instances additional features and advantages may be recognized in certain embodiments that may not be present in all embodiments of the invention.

