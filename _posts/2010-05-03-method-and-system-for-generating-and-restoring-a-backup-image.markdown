---

title: Method and system for generating and restoring a backup image
abstract: A method and system for generating and restoring a backup image are disclosed. A server receives a request, which includes a backup path, to generate a backup image. The server generates a backup image offset map that indicates a relative location where a file is stored in the backup image before file data has been written to the backup image. The server stores the backup image offset map in a portion of the backup image on a storage device. The backup image offset map comprises an array having a number of elements equal to a number of inodes on a file system that hosts a backup path, an element of the array representing an inode on the file system, and indicates the relative location where a file that is associated with a number of the inode is stored in the backup image.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08046332&OS=08046332&RS=08046332
owner: Network Appliance, Inc.
number: 08046332
owner_city: Sunnyvale
owner_country: US
publication_date: 20100503
---
This is a continuation of U.S. patent application Ser. No. 11 701 010 filed on Jan. 31 2007 and entitled METHOD AND SYSTEM FOR GENERATING AND RESTORING A BACKUP IMAGE which is incorporated herein by reference which is a divisional of U.S. patent application Ser. No. 10 777 348 now issued as U.S. Pat. No. 7 440 965 filed on Feb. 11 2004 and entitled METHOD AND SYSTEM FOR GENERATING AND RESTORING A BACKUP IMAGE which is incorporated herein by reference.

The present invention relates generally to data backup systems. More particularly the present invention relates to an improved method and system for generating and restoring a backup image.

Both the capacity and reliability of data storage devices e.g. disk drives used in modern day computing systems have been steadily increasing over time. However despite the increased reliability of modern day storage devices large and small enterprises alike still require data backups. Implementing a backup scheme for a standard hard drive on a single personal computer is moderately difficult however implementing and managing an enterprise wide backup scheme can be a serious challenge.

One way large enterprises are meeting this challenge is by implementing backup systems based on the Network Data Management Protocol NDMP . NDMP is an open standard protocol for controlling backup recovery and other transfers of data between primary and secondary storage. The NDMP architecture separates the centralized Data Management Application DMA data servers and tape servers participating in archival or recovery operations.

One feature of an NDMP backup system that is particularly advantageous is a mechanism for recovering files referred to as Direct Access Recovery DAR . Recovering a selected group of files from a backup image using a standard recovery operation requires sequentially reading all of the tapes that make up the backup image until all of the files have been recovered. In some cases this may take hours or even days. However using DAR files can be recovered more quickly by reading only the relevant portions of a backup image during a recovery operation.

During a typical DAR operation an information systems administrator interacts with the graphical user interface of the DMA e.g. a backup application to select one or more files to be restored from a particular backup image. After the user selects the files to restore the DMA communicates a request to a data server to restore the files from a particular backup image. Along with the request the DMA also communicates file history information to the data server. The file history information is received and stored at the DMA after being communicated from a tape server to the DMA at the time the backup image is originally generated. The data server extracts the exact location of each file from the file history information and communicates the information back to the DMA. Next the DMA communicates a request to the tape server to restore the selected files to a particular file system. Because the request includes the exact location in the backup image of each file to be restored the recovery operation occurs relatively quickly.

Despite the superior performance of DAR compared to the standard recovery operation DAR has many limitations. Current implementations of DAR are incapable of restoring directories. For example if the DMA sends a request to restore a directory the data server simply ignores the request and or reports an error. This inability to restore directories is particularly problematic when a file s attributes e.g owner read write modify permission settings etc. are dependent upon the attributes of the directory in which it is stored. Some backup applications simply do not allow the user to select a directory to restore thereby forcing the user to select within a directory each and every individual file that the user would like to backup and or restore. Other backup applications work around this problem by allowing the user to select a directory to restore via the graphical user interface GUI of the backup application and then expanding the directory to populate the list of files to restore using DAR with the contents of the directory. Although this approach lends the advantages of DAR for restoring files within a directory this approach is problematic because the directories themselves are not properly restored. In particular the directory and subdirectory attributes are not restored. Without restoring the directory and its attributes one or more of a file s attributes may not be properly restored. Consequently this expanded list approach only works for users for whom restoring permissions of directories is not an important issue. In addition because current implementations of DAR are incapable of handling directories file systems that support data streams such as Windows NT are not fully supported by DAR.

Furthermore some current implementations of DAR are inefficient when restoring files that are physically contiguous on a backup tape. For example often a user will desire to restore two or more files that are physically contiguous on the backup tape. In many cases the file boundary for the two files occurs in the middle of a tape block. When restoring the first file current implementations of DAR will perform a read operation of the entire block reading to the end of the first file and then some portion of the beginning of the second file. However when a read operation is performed to restore the second file a seek operation must be performed to reposition the tape reading mechanism. The beginning of the second file is then read despite having been previously read during the read operation performed while restoring the first file. Most modern tape drives are optimized in way that the seek operation can be very expensive. For example for some digital linear tape DLT drives a seek operation after a few reads to the previous block can take many seconds to finish. Consequently the restore operation can take a long time.

The present invention includes a method and apparatus for backing up a directory for use with direct access restore DAR . According to the method a server receives a request which includes a backup path to generate a backup image. The server generates a backup image offset map that indicates a relative location where a file is stored in the backup image before file data has been written to the backup image. The server stores the backup image offset map in a portion of the backup image on a storage device. The backup image offset map comprises an array having a number of elements equal to a number of inodes on a file system that hosts a backup path an element of the array representing an inode on the file system and indicates the relative location where a file that is associated with a number of the inode is stored in the backup image.

Other aspects of the present invention will be apparent from the accompanying figures and from the detailed description that follows.

A method and system for generating and restoring a backup image are described. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be evident however to one skilled in the art that the present invention may be practiced without these specific details.

Consistent with one embodiment of the present invention a data service executing on a file server receives a request to generate a backup image from a data management application. The request includes a backup path indicating a file directory or volume to include in the backup image. The data service analyzes the backup path received in the request and generates a list of all files to be included in the backup image. Next the data service analyzes each file in the list of files to be included in the backup image and generates an offset map. The offset map indicates the exact offset in the backup image where each file will be located. The data service writes the list and the offset map near the beginning of the backup image. Finally the data service writes each file in the list to the backup image.

The present invention also includes a method to restore files from a previously written backup image. According to one embodiment of the invention a data service executing on a file server receives a request to restore files and or directories to a file system. The request includes an nlist including a list of inodes associated with files and or directories in a backup image. Based on the inodes in the nlist the data service reads directory structure information from the backup image and determines which files and or directories in the backup image to restore. Next the data service generates the required directory structure on the file system. For each file to be restored the data service reads offset values from an offset map located near the beginning of the backup image. Based on the offset values the data service determines the exact location in the backup image of each file to restore. For each file the file server seeks to the correct location reads the file and writes the file to the file system.

The present invention provides several advantages over previous backup and restore operations. By generating an offset map that indicates the exact location of each file in the backup image and writing the offset map near the beginning of the backup image before the files are written to the backup image the present invention makes it possible to quickly recover files during a restore operation. If the offset map is written at the end of the backup image after each file has been written to the backup image a restore operation would take much longer. Furthermore the present invention makes it possible to quickly restore directories and special files such as files having associated streams. Previous direct access restore operations did not allow for the complete and proper recovery of files within a directory and or stream files associated with a file.

The data service provides an abstracted interface to the file system or primary storage of the NDMP server . The data service is the source of data during backup operations and the destination of data during recovery operations. Examples of data services are file servers and general compute platforms with direct or Storage Area Network SAN attached storage.

The tape service provides an abstracted interface to the tape subsystem or any other type of secondary storage device attached to the NDMP server . A tape subsystem can implement its own NDMP server and associated tape service or it can be connected through an external NDMP server as illustrated in . The tape service is the source of data during recovery operations and the destination of data during backup operations. The tape service also provides a mechanism for tape positioning and input output on behalf of the DMA . Examples of tape services are individual tape drives tape libraries or servers with one or more writeable compact disc drives.

An NDMP session is an instantiation of a pair of NDMP services for example data service and tape service with a data connection between the two services and control connections between the DMA and each service. The DMA creates and controls the NDMP session by establishing a control connection and issuing NDMP control messages. During a backup operation the DMA will receive file history information over the NDMP control connection from the NDMP server and store the file history information in a file history database .

For one embodiment of the present invention the NDMP data service executing on the NDMP server processes a request to generate a backup image in several phases. Accordingly during each phase the NDMP server generates a portion of the backup image . For one embodiment of the invention the data service generates a backup image in five distinct phases as illustrated in .

During phase I the data service generates a list of all the files that are to be included in the backup image . For one embodiment the list is in the form of a bitmap such as bitmap I in . The list is generated based on the backup path received from the DMA . The backup path is the full pathname of a file or directory on a file system or may include the name of a volume. For example if the path name specifies a particular directory on the file system the data service analyzes the corresponding directory and adds any files that are contained within the directory to the list of files to be included in the backup image . Furthermore subdirectories and their contents may also be added to the list of files to be included in the backup image .

In addition for one embodiment of the invention if the backup path received from the DMA specifies a filename the data service analyzes the corresponding file to determine whether the file has any associated streams. If the file has any associated streams the data service adds the associated stream files to the list of files to be included in the backup image . For example some file systems such as Write Anywhere File Layout WAFL used with the Data Ontap operating system from Network Appliances Inc. of Sunnyvale Calif. store all the data streams associated with a particular file in a separate directory. Consequently when the data service encounters an NT file that has associated streams the data service adds the directory containing the streams as well as the files comprising the streams to the list of files to be included in the backup image .

For one embodiment of the invention during Phase II of generating the backup image the data service generates a list of files to be included in an incremental backup image. In bitmap II represents a list of files to be included in an incremental backup image. During an incremental backup only files and directories that have been modified since the time of the previous backup are included in the backup image. If the data service receives a request to perform an incremental backup the data service will analyze all of the files and or directories on the file system that were included in the original backup and determine which of those files and or directories have been modified. If a file or directory has been modified the data service will add the file or directory to the list of files included in the incremental backup image.

During Phase III the data service analyzes the directory structure of the file system and generates directory structure information . The directory structure information includes information related to the relationship or hierarchy of the directories on the file system . In addition directory attributes e.g owner read write modify permission settings etc. are analyzed and included in the directory structure information .

The data service analyzes NT Access Control Lists ACL and generates NT ACL information for the backup image during Phase IIIA. For example for each file in the list of files to be included in the backup image the data service reads NT ACL information for the file and then adds the information to the backup image .

During Phase IIIB of the backup process the data service generates an offset map for the backup image . The offset map indicates the exact location of each file in the backup image . To generate the offset map the data service must calculate the amount of space each file in the list of files included in the backup image will occupy on the tape. For one embodiment of the invention this calculation is performed during Phase I when the list of files to be included in the backup image is generated. In an alternative embodiment the calculation is performed during Phase IIIB prior to writing the offset map to the backup image .

In either case to properly calculate the amount of space each file will occupy in the backup image the data service must compensate for any holes in the file as the file is stored on the file system . For example many file systems allocate disk space for a file when the file is originally created on the file system. However a file may not actually occupy all of the space that the operating system of the file server has allocated for it. Consequently the amount of actual data that makes up a particular file may be less than the size of the file as reported by the operating system of the file server. Generally the allocated but unused bits of data are written to all zeros. This unused portion of a file is referred to as a hole. Copying the hole to the backup image is inefficient and therefore not desirable. Consequently the data service must calculate the amount of actual data that a particular file contains excluding any holes when it is preparing the offset map .

For one embodiment of the invention to properly calculate the amount of space each file will occupy in the backup image in addition to compensating for holes the data service must also compensate for any headers that are to be added for each file as it is stored in the backup image . Most backup applications embed these headers as a part of the backup image for every file. The embedded headers usually describe the data following the header. For example the header may describe if any of the data following the header contains holes. This is important because in case of holes even though no data is written to the backup image it is important to know about the presence and position of holes within a file so that the restore operation can restore a file including the holes exactly as it were prior to the backup. These headers occupy space within the backup image for a file. Thus they need to be taken into account when calculating the amount of space each file will take on tape.

Once the offset map has been generated the data service generates the actual file data for the backup image during Phase IV. When reading files to add to the backup image the data service excludes any holes in the files. For one embodiment of the invention the files are read in ascending order of their associated inode number. This corresponds with the order of the files in the list generated by the data service .

Finally in Phase V the data service generates additional NT ACL information for the backup image . For one embodiment of the present invention NT ACL information is added to the end of the backup image so that the backup image is backwards compatible with previous versions of DAR and or other restore operations.

For one embodiment of the present invention the data service processes the list of file and directory names received from the DMA by analyzing the inodes associated with the file and directory names. For example for one embodiment of the invention the list of files to be included in the backup image generated by the data service is actually a list of inode numbers that correspond with files on the file system . To further limit the amount of space the list occupies in the backup image for one embodiment of the present invention the list is in the form of a bitmap such as bitmap I and II in . The bitmap has a number of bits equal to the number of available inodes on the file system and each bit in the bitmap corresponds with an inode on the file system . The value of each bit in the bitmap indicates whether or not the particular file associated with the inode is included in the backup image . A bit set to one indicates the corresponding file or directory is included in the backup image whereas a bit set to zero indicates that the file or directory is not included in the backup image .

For one embodiment of the present invention the offset map is an array of bytes representing offset addresses for files in the backup image . If the file corresponding with the element number is not included in the backup image the bytes for that particular element are set to all zero. For example as illustrated in element number zero which corresponds with the file or directory having inode number zero is set to all zeros indicating that it is not included in the backup image . This is consistent with bitmap I which has bit zero set to zero. However element number two which corresponds with the file or directory with inode number two is set to the 8 byte address only four bytes are shown presented in hexadecimal as . . . 00 00 08 00. This is also consistent with bitmap which shows bit number two set to one. Similarly element numbers five six nine twelve and fourteen of the offset map contain offset values for the files associated with inode numbers five six nine twelve and fourteen respectively.

For one embodiment of the present invention the data service calculates the offset value for each file by adding a base offset value to an offset value equal to the size of the previous file in the list of files to be included in the backup image. For example given a list of inodes corresponding to files to be included in the backup image the data service begins with the smallest inode number which corresponds with the first file that will be written to the tape.

Referring to the smallest inode number associated with a file to be included in the backup image is inode number . Assuming the data service has already written the NT ACL information and the current tape position or offset is the location where the offset map will be located to calculate the offset value for the file with inode number the data service adds the total size of the offset map to the current offset. As illustrated in the resulting offset value is the location of file with inode number or . . . 00 00 08 00. Next to generate the offset value for the next file with inode number the data service adds the size of file with inode number to the offset value calculated for file to get . . . 00 00 1C 00. The data service repeats this calculation process for all files in the list of files to be included in the backup image .

One advantage of the present invention is the location of the offset map near the beginning of the backup image . Similar to the table of contents in a book the offset map is located near the very beginning of the backup image on the first tape. Just as a reader of a book can turn to the table of contents to find the exact page of a particular chapter the server can direct the reading mechanism of the tape subsystem to the correct tape and the exact location on the tape for a particular file. It will be appreciated that the offset map need not be the very first item in the backup image but should generally be located near the beginning such that the tape subsystem can quickly seek to the location of the offset map.

For one embodiment of the present invention the server verifies that the offset value calculated and written in the offset map for each file is the actual offset location that the file is written to. For example when the tape service writes each file to the tape on the tape subsystem the tape service reports to the data service the actual location to which each files is written. The data service compares the location received from the tape service to the corresponding offset value in the offset map . For one embodiment of the invention if the offset values in the offset map accurately identify the actual offset location for each file the server communicates a verification message to the DMA indicating that the offset map is accurate.

Consequently the DMA can check the verification message received from the server to determine whether a DAR operation to restore a directory from the backup image is possible. For example during a DAR restore operation the DMA will verify that it received a verification message from the server when the backup image was originally generated. If a verification message was received it indicates that the offset map is included in the backup image and accurately reflects the offset or location of each file in the backup image .

During a directory DAR operation a user interacts with the graphical user interface of the DMA to select files and or directories to restore to the file system . After the user has selected the files and or directories to restore the DMA generates a request including a list of files to restore and communicates the request to the server . In response to receiving the request to restore files and or directories the data service of the server reads directory structure information from the backup image . Based on the directory structure information and the files and directories indicated in the request the data service generates a list of files and or directories to restore. For example if the data service determines that a file included in the request to restore has associated stream files stored in a particular directory in the backup image the data service will add the directory containing the streams files as well as the actual stream files to the list of files and directories to be restored. Similarly if the data service determines that a directory restore has been requested the data service will add each file in the particular directory to the list of files to restore.

After the data service has generated the list of files and or directories to restore the data service writes the required directory structure to the file system . Next the data service reads offset values from an offset map for each file included in the list of files to restore. After the data service has read the offset value for each file in the list of files to restore the server seeks to each file and reads each file from the backup image . The tape service communicates each file to the data service over the data connection and the data service writes each file to the file system .

For one embodiment of the present invention when the server is reading files from the tape and restoring them to the file system the tape service reads several files without an intervening seek operation. For example the data service analyzes the offset values for the files to be restored. If the data service determines that two or more files are located physically close together on the tape the DMA will request that the tape service read multiple files without an intervening seek operation. Any file that is read but not being restored is simply discarded from the read buffer and not written to the file system. By reading several files into memory consecutively without an intervening seek operation the server can save valuable time when files are located physically contiguously.

At operation of the server receives the request to generate the backup image from the DMA . Based on the backup path indicated in the request the data service of the NDMP server processes the backup path to generate a list of files and directories to include in the backup image at operation . Because the backup path included in the request received from the DMA may include a directory name or the name of a file that has associated streams it is necessary for the data service to process the backup path to identify all of the files that will be included in the backup image . For example if the backup path indicates a directory the data service will add to the list of files to be included in the backup image all of the files within the selected directory.

Next at operation the data service generates an offset map indicating the exact location in the backup image where each file will be located. At operation the offset map is written to the backup image on the secondary device. The data service then begins to write each file in the list to the backup image on the secondary storage device during operation . For one embodiment of the invention the data service communicates file history information to the DMA while writing each file to the backup image. Alternatively the data service may communicate file history information related to each file in the backup to the DMA just before or after writing each file to the backup image . After writing a file to the backup image at operation the data service verifies that the actual location to which the file was written is the same as the location indicated in the offset map at operation . Next at operation the data service determines whether each file from the list has been written to the backup image . If not the data service writes the next file in the list to the backup image . However when all the files have been written to the backup image the data service communicates to the DMA whether or not the offset map accurately reflects the location of each file in the backup image .

At operation the file server determines whether any of the files should be read in groups without an intervening seek operation. If files are not located close together in the backup image then the files are read individually with a seek operation being performed for each file. For example at operation the file server determines whether the predicted time required to seek to the next file is greater than the predicted time to read and discard one or more intervening files that are not to be included in the restore operation. For one embodiment of the invention the predicted seek time and the predicted time to read and discard are based on attributes or parameters of the tape subsystem or backup device as well as the calculated difference between the location of two files in the backup image .

If the predicted seek time to the next file is less than the predicted time to read and discard any intervening files then at operation the server seeks to the exact location of the next file to be restored. At operation the file is read from the backup image . The file is written to the file system at operation . At operation the file server determines whether there are any more files in the list to be restored.

If however at operation the file server determines that the predicted seek time to the next file is greater than the predicted time to read and discard any intervening files then at operation the file server reads and discards one or more files not in the list of files to be restored. For example the file server compares the predicted time it would take to seek from the end of one file to the beginning of the next file with the predicted time it would take to simply read one or more files before the target file e.g. the next file to be restored without an intervening seek operation. If the comparison of predicted times suggests that the next file can be read more quickly without an intervening seek then the file server reads and discards files not included in the list of files to restore at operation . At operation the target file is read from the backup image. At operation the file is written to the file system . At operation the file server determines whether all the files have been restored and if not the process is repeated.

Thus a method and system for generating and restoring a backup image are provided with reference to specific example embodiments. It will be evident that various modifications and changes may be made to these embodiments without departing from the broader spirit and scope of the invention. Accordingly the specification and drawings are to be regarded in an illustrative rather than a restrictive sense.

