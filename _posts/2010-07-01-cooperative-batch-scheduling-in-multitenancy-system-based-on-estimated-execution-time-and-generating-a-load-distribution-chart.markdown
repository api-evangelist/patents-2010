---

title: Cooperative batch scheduling in multitenancy system based on estimated execution time and generating a load distribution chart
abstract: Systems and methods for cooperative batch scheduling in multitenancy computing systems are described. A number of batch requests are received in the computing system, where each batch request includes a job reference, and a start time when the execution of the referenced job to be launched. Duration of execution is estimated for each job referenced by the requests. The estimation is based on predefined criteria that include a product of median execution times for at least one recurring operation. An anonymous load chart is created based on the start times and the estimated duration of execution of each job referenced by the plurality of batch requests. The anonymous load chart may take into account the available capacity of the computing system. The anonymous load chart is exposed to a number of isolated users of the computing system for cooperative batch scheduling.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09032406&OS=09032406&RS=09032406
owner: SAP SE
number: 09032406
owner_city: Walldorf
owner_country: DE
publication_date: 20100701
---
The field relates generally to data processing and digital processing systems. More specifically the field is related to cooperative batch scheduling within a shared computer systems environment.

The shift from on premise software towards offering and using software as a service SaaS is one of the trends in the current development of the information technology IT industry. According to this model instead of licensing software products that are installed on customer s servers the customers pay for using software services provided over public or private computer networks. This approach has many advantages for example the customers avoid the costs associated with hosting the necessary software applications. The software vendors are also interested in selling software services to ensure regular income without giving up any of the ownership rights of their software. Therefore in recent years there has been a proliferation of software of all kinds and even hardware services provided over a network mainly over the internet.

There are different approaches and solutions for providing software and hardware services over the internet. Typically the customers do not own the hardware infrastructure and the software applications running on it and the vendors employ utility computing models similar to the traditional utility services e.g. electricity water etc. . Other vendors bill on a subscription basis. In either case the customers pay for a service with particular characteristics and quality of service level. For example when a customer buys a storage space part of the agreement may be the size and a minimum response time to read and write requests. Similarly the software services provided by the vendors over networks must comply with a required level of availability. To guarantee the necessary quality of service even at peak moments the vendors have to ensure sufficient computer power in terms of hardware and software resources per customer.

There is a mutual interest between the vendors and the customers for high rates of the shared resources utilization to minimize idle computing power. The more efficient the usage of the available hardware and software resources the lower is the pricing of the services provided. As a result multitenancy architectures are adopted where a single computer system with a single instance of software runs to serve multiple different customer organizations e.g. tenants. This way it is not necessary to setup a separate computer system with a separate instance of the software for each customer. The customers that share the same software and hardware resources are anonymous to each other and have to be completely isolated from one another. The complete isolation between customers is one of the most stringent requirements for providing software or hardware services over the internet. Because of the isolation a customer is able to manage the consumption of shared resources only according to its needs without an overview of the demand generated by other customers for the same resources. Hence the vendors still need to store excessive computing power to handle peak resource consumptions.

Various embodiments of systems and methods for cooperative batch scheduling in multitenancy computing systems are described herein. A number of batch job requests are received in a computing system where each batch job request includes batch job identification ID e.g. a batch job reference and a start time when the execution of the referenced batch job is to be launched. In one aspect duration of execution is estimated for each batch job referenced by the requests. The estimation is based on predefined criteria that includes a product of median execution times for at least one recurring operation and the number of operations to be executed. In another aspect an anonymous load chart is created based on the start times and the estimated duration of the execution of each batch job referenced by the plurality of batch job requests. The anonymous load chart may take into account the available capacity of the computing system. The anonymous load chart is exposed to a number of isolated users of the computing system for further re scheduling of the requested batch jobs or for scheduling of new batch jobs according with the load distribution for a certain period.

These and other benefits and features of embodiments of the invention will be apparent upon consideration of the following detailed description of preferred embodiments thereof presented in connection with the following drawings.

Embodiments of techniques for cooperative batch scheduling in multitenancy systems are described herein. In the following description numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize however that the invention can be practiced without one or more of the specific details or with other methods components materials etc. In other instances well known structures materials or operations are not shown or described in detail to avoid obscuring aspects of the invention.

Reference throughout this specification to one embodiment this embodiment and similar phrases means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus the appearances of these phrases in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore the particular features structures or characteristics may be combined in any suitable manner in one or more embodiments.

According to one embodiment the term multitenancy refers to a computer system architecture where a single instance of software runs on one or more servers to provide services to several isolated customers. The isolated consumers may access the computer system via a private or a public network e.g. via the internet. The title of this document and the description of the embodiments below refer to multitenancy systems. However similar techniques and principles may be embodied within other computing environments not compliant with the definition of multitenancy where shared resources are accessed by a number of users.

Each of the tenants operates with its own set of data logically isolated from data that belongs to the other tenants . Security services control the access to the shared resources provided through the application servers . Security services prevent any of tenants from accidentally or maliciously viewing or changing data belonging to another tenant.

The data pertinent to tenants may be kept in storage together with various system and application data e.g. source code deployment information system logs etc. Depending on the implementation and the configuration of the multitenancy computing environment a separate database may be created for each of the tenants in storage . Alternatively the multiple tenants are hosted in the same database where each of the tenants may operate with its own set of tables grouped in a corresponding database schema. The data for all tenants may also be stored in the same tables of a same database schema.

The multitenancy computer environment must guarantee that tenants are isolated from each other. Respectively none of the tenants can access data pertinent to another tenant. None of the tenants should even be aware that other tenants share the same resources. Despite all the positive aspects of multitenancy when the resources in multitenancy computer environment are depleted e.g. when the system is overloaded tenants may suffer bad performance. Moreover the tenants are not always aware of how to manage the scarce resources more efficiently e.g. collaboratively. Therefore to avoid low performance due to overload during peak resource consumption multitenancy computing environment provides a mechanism for collaborative job scheduling between the tenants . The provided mechanism does not compromise the isolation and anonymity between the tenants .

Today s computer applications have to be a lot more interactive than traditional transaction processing monitors. Users expect sub second response times for almost all requests they submit no matter how complex a request is or how many concurrent users per tenants load the system. Moreover the modern computer applications still have to support long running batch jobs or simple batches for tasks that cannot be done within seconds or even minutes. While there is typically some flexibility in scheduling the start of execution of these batch jobs they need to be scheduled carefully not to slow down the interactive processing that is going on in parallel. Therefore the collaborative scheduling of batch jobs may significantly improve the overall system performance and reduce the risks for the availability of the provided services.

At a number of batch job requests are received in a multitenancy system. Each of the received requests includes a reference to a corresponding batch job and a start time when the execution of the referenced batch job to be triggered. At a duration of execution is estimated for each of the batch jobs referenced in the received requests. The estimated durations are used to generate or create an anonymous load chart for the multitenancy system at . The estimation of the execution durations and the creation of anonymous load chart may be performed by one or more centralized system processes of the multitenancy system with sufficient privileges to access information regarding the different tenants.

At the anonymous load chart is displayed to one or more of the isolated tenants e.g. one or more users of the isolated tenants. In the anonymous load chart no information specific for any of the tenants is provided. According to one embodiment the load chart simply shows the forecasted system load per time slot for a predefined future period of time. The expected load of the multitenancy system may be presented relative to the available capacity of the system. The available capacity of the multitenancy system may vary due to different factors. For example usually there is more capacity available at nights and during weekends when it is less likely for the users to request interactive services related to tasks that are performed during business hours. The capacity may also depend on factors like scheduled downtimes of application servers planned database administration procedures etc.

As shown in at least two items are required to generate the load chart the list of scheduled batch jobs and the runtime per batch job. While the first item is simply the batch work list of the multitenancy system the second item has to be calculated or estimated. Different criteria for estimating the runtime e.g. the execution duration of a batch job may apply to different types of batch jobs. For example the criteria may depend on the kind of operations that are performed. Some of the operations may require intensive processor calculations others may include more read write memory operations database access operations etc.

At a median duration for processing the identified object is assigned. The median duration is an individual factor or coefficient showing an average time for processing an object of a particular type e.g. an object similar to the object identified at . The duration of the execution of the batch job is estimated at by calculating the product of the determined number of objects similar to the identified object and the assigned median duration for processing the identified object.

Once the batch job is completed the actual processed number of objects may be used to update the initial assumption so that the estimation of the execution duration for the same batch job may become more precise over time. Similarly the median duration may be measured in a test system and serve as an initial value that is adjusted over time by comparing the estimated runtime with the actual runtime after each execution of the batch job. In one embodiment the median duration may be updated with an actual duration for processing of an object similar to the identified object as illustrated with .

A batch job may include processing objects of different types. In such a case the actions illustrated with blocks to may repeat for every type of object included in a batch job. The duration for executing the batch job will be estimated as a total sum of each product of the number of objects and the assigned median duration per object type.

Typically the job scheduling in a computer system is a centralized process performed by scheduler tools or directly by system administrators. The execution of jobs within particular time periods as requested by a number of users is scheduled and managed on a central level based on the available capacity of the computer system. The job scheduling may be a very resource consuming task for the administrators of multi user computer environments. Even when specialized tools for job scheduling are utilized peak resource consumptions are possible due to competing job requests. While it is difficult to maintain centralized job scheduling in complex multi user systems it is almost impossible to accomplish in multitenancy systems as the complete isolation between tenants is one of the requirements any multitenancy system must comply with.

An overview of the expected resource consumption of a multi user or multitenancy computer system may help the users of the system to request job executions for more appropriate times in order to avoid system overload. This is especially relevant for batch job requests with long runtimes. Generally every user or tenant of a computer system is interested to behave cooperatively as system overload or peak resource consumption decreases the performance of the system for the user as well as for the rest of the users. The system overload also increases the duration of the batch run and therefore creates a risk that it will not be completed by a given deadline. Additionally the users and the tenants can be stimulated through further incentives to support cooperative behavior. For example additional fees may be charged to a tenant for batch jobs scheduled at peak times. Different fees may be charged depending on the number of the batch jobs scheduled at peak times as well.

In one embodiment a batch job execution request may specify either a start time or an execution period for running the batch job. The users of the system have access to the anonymous load chart showing the expected system load. The user may specify the most appropriate start time or execution period for the batch job based on the expected system load and the estimated duration of the batch job execution. At it is verified whether the new or rescheduled batch job request includes a start time for triggering the execution. If start time is not specified the system may automatically select a start time for the execution of the referenced batch job at based on the expected system load.

When the start time is specified or selected at a check is performed to verify whether the requested batch job execution is scheduled for a busy period according to the anonymous load chart. If the execution of the batch job is not scheduled for a busy period an incentive for the isolated user or the tenant may be assigned at . However if the execution is scheduled for a busy period a penalty may be assigned to the user at . The incentive versus penalty assignments play a role to stimulate the collaboration between isolated users of different tenants of a multitenancy system based on the anonymous load chart according to one embodiment. At the anonymous load chart is updated based on the specified start time and the estimated duration of the requested batch job execution.

The expected load of the multitenancy system is illustrated by load bars to with different colors or with different fill patterns per time slot. The load bars to are spread throughout the time slots for every day of the week as illustrated in . The colors or the fill patterns of the bars to help the users to intuitively follow the load distribution of the scheduled batch jobs in the multitenancy system. In one embodiment the resource overview displayed in GUI accounts for both the expected load from the scheduled batch jobs and the available capacity of the multitenancy system per time slot. The available capacity may depend on the daily activities of the users of the multitenancy system and usually varies over the course of the day.

Area of the GUI provides the users of the multitenancy system with means to schedule new batch jobs according to one embodiment. A user may define batch job identification ID e.g. a reference to a particular batch job. The batch job ID may unambiguously define the requested batch job. A batch job may be also defined by its job type in the batch job scheduler area . In one embodiment a user may enter values for one or more different parameters in when such parameters are required during the batch job execution. Batch job description provides information for the referenced batch job. The scheduled date for executing the referenced batch job is defined in and the start time may be entered in . The multitenancy system may automatically estimate the duration of the execution of the requested batch job based on the information provided in fields to . The job type may define an object type to be counted as well as a median duration for processing an object of this object type. The estimated duration is illustrated by the bar where the length of the bar corresponds to the execution duration.

The GUI may also include a legend area where the meaning of the different colors or the different fill patterns of the bars to is explained. For example sample bars to in different colors or fill patterns may be used to define the corresponding load levels relative to the available system capacity.

Some embodiments of the invention may include the above described methods being written as one or more software components. These components and the functionality associated with each may be used by client server distributed or peer computer systems. These components may be written in a computer language corresponding to one or more programming languages such as functional declarative procedural object oriented lower level languages and the like. They may be linked to other components via various application programming interfaces and then compiled into one complete application for a server or a client. Alternatively the components maybe implemented in server and client applications. Further these components may be linked together via various distributed programming protocols. Some example embodiments of the invention may include remote procedure calls being used to implement one or more of these components across a distributed programming environment. For example a logic level may reside on a first computer system that is remotely located from a second computer system containing an interface level e.g. a graphical user interface . These first and second computer systems can be configured in a server client peer to peer or some other configuration. The clients can vary in complexity from mobile and handheld devices to thin clients and on to thick clients or even other servers.

The above illustrated software components are tangibly stored on a computer readable storage medium as instructions. The term computer readable storage medium should be taken to include a single medium or multiple media that stores one or more sets of instructions. The term computer readable storage medium should be taken to include any physical article that is capable of undergoing a set of physical changes to physically store encode or otherwise carry a set of instructions for execution by a computer system which causes the computer system to perform any of the methods or process steps described represented or illustrated herein. Examples of computer readable storage media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROMs DVDs and holographic devices magneto optical media and hardware devices that are specially configured to store and execute such as application specific integrated circuits ASICs programmable logic devices PLDs and ROM and RAM devices. Examples of computer readable instructions include machine code such as produced by a compiler and files containing higher level code that are executed by a computer using an interpreter. For example an embodiment of the invention may be implemented using Java C or other object oriented programming language and development tools. Another embodiment of the invention may be implemented in hard wired circuitry in place of or in combination with machine readable software instructions.

A data source is an information resource. Data sources include sources of data that enable data storage and retrieval. Data sources may include databases such as relational transactional hierarchical multi dimensional e.g. OLAP object oriented databases and the like. Further data sources include tabular data e.g. spreadsheets delimited text files data tagged with a markup language e.g. XML data transactional data unstructured data e.g. text files screen scrapings hierarchical data e.g. data in a file system XML data files a plurality of reports and any other data source accessible through an established protocol such as Open DataBase Connectivity ODBC produced by an underlying software system e.g. ERP system and the like. Data sources may also include a data source where the data is not tangibly stored or otherwise ephemeral such as data streams broadcast data and the like. These data sources can include associated data foundations semantic layers management systems security systems and so on.

In the above description numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize however that the invention can be practiced without one or more of the specific details or with other methods components techniques etc. In other instances well known operations or structures are not shown or described in details to avoid obscuring aspects of the invention.

Although the processes illustrated and described herein include series of steps it will be appreciated that the different embodiments of the present invention are not limited by the illustrated ordering of steps as some steps may occur in different orders some concurrently with other steps apart from that shown and described herein. In addition not all illustrated steps may be required to implement a methodology in accordance with the present invention. Moreover it will be appreciated that the processes may be implemented in association with the apparatus and systems illustrated and described herein as well as in association with other systems not illustrated.

The above descriptions and illustrations of embodiments of the invention including what is described in the Abstract is not intended to be exhaustive or to limit the invention to the precise forms disclosed. While specific embodiments of and examples for the invention are described herein for illustrative purposes various equivalent modifications are possible within the scope of the invention as those skilled in the relevant art will recognize. These modifications can be made to the invention in light of the above detailed description. Rather the scope of the invention is to be determined by the following claims which are to be interpreted in accordance with established doctrines of claim construction.

