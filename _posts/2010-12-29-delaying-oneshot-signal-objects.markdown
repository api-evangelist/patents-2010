---

title: Delaying one-shot signal objects
abstract: A device may include a processor to execute a thread. The processor may be further configured to execute a set of wrappers that are called from within the thread to invoke a set of one-shot signal objects to generate delayed signals. Each of the set of wrappers may be configured to detect whether different ones of one-shot signal objects that were invoked from within the thread have generated signals at periodic time intervals, determine a delay to be used for invoking one of the set of one-shot signal objects, and invoke the one of the set of one-shot signal object to generate one of the delayed signals based on the delay when the different ones of one-shot signal objects have generated signals at periodic time intervals. The processor may be further configured to receive the delayed signals generated from the set of one-shot signal objects over a time period.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08402301&OS=08402301&RS=08402301
owner: Juniper Networks, Inc.
number: 08402301
owner_city: Sunnyvale
owner_country: US
publication_date: 20101229
---
This application is a continuation of U.S. patent application Ser. No. 12 042 558 filed Mar. 5 2008 which is incorporated herein by reference.

Today s hardware and or software components use timers for different purposes. In some instances the timers are used by one component to cause another component to perform an action at a prescribed time.

According to one aspect a device may include a processor to execute a thread. The processor may be further configured to execute a set of wrappers that are called from within the thread to invoke a set of one shot signal objects to generate delayed signals. Each of the set of wrappers may be configured to detect whether different ones of one shot signal objects that were invoked from within the thread have generated signals at periodic time intervals determine a delay to be used for invoking one of the set of one shot signal objects and invoke the one of the set of one shot signal object to generate one of the delayed signals based on the delay when the different ones of one shot signal objects have generated signals at periodic time intervals. The processor may be further configured to receive the delayed signals generated from the set of one shot signal objects over a time period.

According to another aspect a computer readable memory may include computer executable instructions for invoking a set of one shot signal objects. The instructions for invoking the set of one shot signal objects may include instructions for detecting whether signals are periodically sent from different one shot signal objects instructions for generating a delay when the signals are periodically being sent from the different one shot signal objects instructions for determining a time at which one of the set of one shot signal objects is to generate a signal based on the delay instructions for calling the one of the set of one shot signal objects and conveying the time at which the one of the set of one shot signal objects is to generate the signal and instructions for receiving the signal that is sent from the one of the set of one shot signal objects in response to being called.

According to yet another aspect a device may include means for allocating memory for a signal information object means for recording information related to signals that are generated from one shot signal objects in the signal information object means for deciding whether the signals are periodically overloading the device based on the recorded information means for determining a delay when the device is overloaded by the signals means for providing the determined delay to a one shot signal object means for calling the one shot signal object means for receiving a signal from the one shot signal object in response to the call and means for responding to the signal from the one shot signal object.

The following detailed description refers to the accompanying drawings. The same reference numbers in different drawings may identify the same or similar elements.

In the following a component may delay periodic transmissions of signals from different one shot signal objects by different lengths of time. This may prevent too many signals from arriving at a receiving component at the same time and overwhelming the receiving component. Alternatively the component may prevent the creation of signals.

The term one shot signal object as used herein may refer to a component that sends one signal. The one shot signal object may be destroyed or deallocated after the transmission of a signal. An example of a one shot signal object may include a one shot timer which may send one signal for indicating that a particular length of time has elapsed. Depending on context the term signal as used herein may refer to a software signal e.g. a UNIX signal an event e.g. an occurrence of a change in state as represented by an event object or an occurrence of a callback.

The term callback as used herein may refer to a function a queue or a subroutine whose address location or reference is passed from a caller function to a called function through an argument list of the called function. In addition the term callback may refer to a use or invocation of the callback.

The term function as used herein may refer to a thread or portion of a thread e.g. a subroutine a method etc. which may be invoked via a name. As used herein the term argument list may refer to a list of values that may be passed from a caller function to a called function. The term invocation as used herein may refer to causing e.g. calling a piece of hardware or software to perform one or more actions. In addition depending on context the term may also refer to a function call method call and or subroutine call.

Depending on context as used herein the term thread may be used interchangeably with the term process or program. The terms thread process or program and may refer to a sequence of instructions that may run independently of other threads processes and or programs. In certain contexts the term thread may also be interpreted to refer to an instance of a program or a thread instance.

Depending on context periodic as used herein may refer to repetitive recurring iterative etc. Periodic time interval may be regular or irregular.

In the following a component may detect if signals are periodically sent from one shot signal objects. By identifying the periodic invocations and associated latencies various techniques that are often applied to multi shot signal objects e.g. signal objects that generate signals periodically after an invocation to prevent system overloads may be applied to the signal shot signal objects. For example when one shot signal objects are identified as being periodically invoked the component may cause delays in transmissions of signals from the one shot signal objects by different lengths of time. Alternatively the component may prevent the creation of signals.

In determining whether the one shot signal objects are periodic the component may inspect a signal information object which provides statistics of one shot signal objects. Without the signal information object obtaining the time statistics about the one shot timer object may be difficult because a one shot signal object may be destroyed and become unavailable for inspection after transmitting a signal.

The signal information object may provide a context and parameters for taking corrective measures to prevent alleviate system overloads. For example assuming the periodic invocations of the one shot signal objects are found to be associated with the processing latencies the component may inject different delays in transmissions of signals at different one shot signal objects based on information in the signal information object. This may prevent the signals from arriving at the receiving component at the same time and therefore may stop the one shot signal objects from overburdening the receiving component. Alternatively the component may prevent the transmissions of one shot signals and may send error messages to a thread that invoked the one shot signal objects.

As shown network may include N network devices through N herein collectively referred to as network devices and individually as network device . Each of network devices may include a switch a router a server and or another type of device. While network devices may be implemented as different types of devices in the following paragraphs network devices will be described herein in terms of a router or a switch.

Controller may include one or more devices for managing routes and or performing services relating to centralized processing. Each of line interfaces may include devices for receiving packets from network devices in network and for transmitting the packets to other network devices in network . In addition each of line interfaces may perform packet forwarding packet classification and or internal redirection of packets to other components in network device e.g. other lines interfaces .

Switch fabric may include switches for conveying packets to from line interfaces from to others of line interfaces . Communication path s may provide an interface through which components of network device can communicate with one another.

Processing unit may include one or more processors microprocessors Application Specific Integrated Circuits ASICs and or Field Programmable Gate Arrays FPGAs and or other processing logic. Memory may include static memory such as read only memory ROM and or dynamic memory such as random access memory RAM or onboard cache for storing data and machine readable instructions. Memory may also include storage devices such as a floppy disk CD ROM CD read write R W disc and or flash memory as well as other types of storage devices.

Threads may include instruction object instances e.g. a process stack a thread stack a Java object instance etc. for performing functions that are related to operating system and or applications . Each of threads may or may not include different instructions and or perform different functions e.g. destroy sockets which are connected to client sockets that do not respond to keep alive messages perform a database lookup etc. .

Wrapper may include an instruction object instance for determining if a thread periodically invokes one shot signal objects for determining if there are processing latencies associated with one shot signal objects for passing a reference of callback object to one shot signal object during an invocation of one shot signal object and for injecting a delay into one shot signal object Wrapper may perform these functions based on callback object delay object and or signal information object . In addition wrapper may create update and or remove signal information object . Wrapper may invoke one shot signal object no more than once. In certain situations upon being invoked wrapper may not call one shot signal object. In such situations wrapper may return an error message to its caller.

One shot signal object may include an instruction object instance for sending a signal. One shot signal object may be removed or deleted from memory after one shot signal object sends the signal. An example of shot shot signal object may include a one shot timer object for testing if a particular length of time has elapsed since its invocation and for sending a signal when the particular length of time has elapsed or an event generator.

Callback object may include an instruction object instance for handling a signal that is generated by one shot signal object . Examples of callback object may include a function a signal handler a signal queue an event queue a subroutine etc. In one implementation a reference to callback object may be passed from wrapper to one shot signal object and the reference may be used by operating system or one shot signal object to invoke or use callback object when the signal is generated by one shot signal object 

Delay objects may include instruction object instances of different types of delays. In one implementation delay object may be implemented as a probability distribution function. The probability distribution function may approximate a probability density such as a Gaussian probability density a uniform probability density a Dirac delta probability density etc. For example upon invocation delay object may generate a delay value between 0 and Z e.g. 30 seconds based on a uniform probability density.

Signal information object may include one or more fields records and or tables for maintaining information related to one shot signal objects . The information may be used by wrapper to identify processing issues periodic invocations of one shot signal objects etc.

Thread identifier field may contain information that identifies thread in which wrapper is called. In one implementation thread identifier field may be used by wrapper in locating signal information object that pertains to thread . Signal counter field may indicate the number of times one shot signal objects have been called from within thread . EIP register field may store a value of an EIP register e.g. a register that identifies a next instruction for execution in a called function and may serve a similar role as thread identifier field .

Each of epoch fields may indicate the number of times one shot signal objects have been called within different epochs. In one implementation an epoch field may be initialized to zero when wrapper is invoked from within thread . At each subsequent invocation of wrapper epoch field may be used to count the invocations. The counting may continue until an allotted time span for the epoch field elapses. After that point a next epoch field e.g. epoch field may be used to count invocations for another epoch. In some implementations the start time and the end time may be written into an epoch field at the start and at the end of each epoch.

In another implementation signal information object may dynamically grow in size as additional epoch fields are added to signal information object 

The above paragraphs describe system elements that are related to devices and or components for delaying transmissions of signals from different one shot signal objects . is a flow diagram of an exemplary process that is capable of being performed by one or more of these devices and or components.

Process may begin with the starting of thread block . Depending on circumstances thread may be started by operating system from within applications or another thread e.g. fork exec etc. .

Wrapper may be invoked from within thread block . In some implementations wrapper may be a function a subroutine and or a method of a class object. In another implementation wrapper may be a thread separate from thread . In this case invocation of wrapper may involve placing a message that requests a signal in an input queue for wrapper . In the following discussions for the sake of simplicity it is assumed that wrapper is a method a function or a subroutine rather than a thread separate from thread 

Signal information object may be allocated block . Because signal information object is used to collect statistics of one shot signal objects that are invoked from within wrappers in a single thread signal information object may need to exist after a single call to wrapper . As such signal information object may be allocated in a local heap that is owned by thread on a stack that is local to thread on a stack that is local to a process that owns thread in a global heap or in shared memory e.g. memory that is shared between different processes . In all of the preceding cases signal information object may exist after a single execution of wrapper . If another call is made to wrapper from within the same thread the same signal information object may be accessed. In a different implementation a pre allocated signal information object may be assigned to thread when thread is created begins to execute or when wrapper is invoked for the first time.

Once signal information object is created a memory location that is local to thread or a global memory location may be used to store a reference to signal information object . The memory location may be accessed from within different instances of wrapper 

In a different implementation the memory location which may be denoted by a global variable may hold a value that can be used to obtain various offsets for locating one or more signal information objects . For example a global variable may hold the address of a hash table that contains addresses of signal information objects . In such a case the address of each signal information object may be placed in a specific bucket of the hash table based on thread identifier .

Signal information object may be used to detect a presence of periodic invocations to one shot signal objects and or system overload block . In one implementation if a memory location e.g. a global variable a hash table etc. contains a reference to signal information object the reference may be used to locate signal information object . Subsequently signal information object may be inspected to detect if one shot signal objects are periodically being invoked and or a system overload is present.

In addition to detecting if one shot signal objects are repeatedly invoked the presence of system overload may be detected. Depending on the implementation the system overload may be detected in various ways. For example if a ratio H wexceeds a particular threshold it may be determined that too many signals are being generated per unit time and that the signals may cause a temporary overload of network device 

In another example the system overload may be detected by monitoring average amount of signal delays. To illustrate assume that each of one shot signal objects are set to trigger 30 seconds e.g. delay interval of 30 seconds after its invocation with an additional delay of Z seconds added by wrapper . If the one shot signal objects are triggered late by a particular amount e.g. 6 seconds the system overload may be detected. In such implementations signal information object may be used to store track the average delay or the delay of each one shot signal object.

A delay may be determined based on the periodicity the presence of system overload and delay object block . To determine the delay the presence of system overload and the periodicity may be used in conjunction with delay object . Delay object itself may have been selected or identified based on user input or default system settings.

More specifically if there is a system overload delay object may be used to produce a specific value of delay. As explained above in connection with delay objects the value may depend on a specific probably distribution that delay object implements. For example if wrapper calls delay object that implements a uniform probability distribution over period P delay object may generate a random number that is between 0 and P as the specific value of delay.

If there is no system overload depending on implementation delay object may or may not be used to produce the specific value.

Signal information object may be updated block . In one implementation a network device or an application that receives a signal may update signal information object . In a different implementation signal information object may be updated by wrapper . In such a case to properly modify epoch fields wrapper may examine values that are passed to wrapper 

To illustrate assume wrapper is a function that can be characterized by an application programming interface API . shows an exemplary API for wrapper . As shown API may include a function name e.g. call timer wrapper an argument list e.g. int time to wait object delay object object signal handler and a return value type e.g. int . Function name may include a symbolic name by which a function may be invoked. Argument list may include a list of values that may be passed into wrapper called call timer wrapper . Return value type may indicate the data type that may be returned to a caller function when wrapper terminates.

As further shown in argument list may include an argument type e.g. int an argument name e.g. time to wait an argument type e.g. object an argument name e.g. delay object an argument type e.g. object and an argument name e.g. signal handler . Argument types and may identify the data type of each argument and argument names and may identify the arguments that are passed to wrapper . In a body of wrapper code the argument names may be used to reference each argument. In different implementations argument list may include additional fewer or different argument types e.g. float or argument names than those illustrated in .

Time to wait argument may indicate the amount of time a one shot signal object may wait until one shot signal object generates a signal. Wrapper may adjust time to wait argument by the specific delay value and pass adjusted time to wait argument to one shot signal object . Delay object argument may designate a specific delay object that is to be used for determining a length of delay that one shot signal object may wait before generating a signal. For example delay object argument may designate a uniform probability distribution function. Signal handler argument may designate a function that may be triggered when a signal is produced by one shot signal object 

Returning to to modify an epoch field wrapper may use delay object e.g. invoke to calculate or determine a value of delay. Once the delay is determined wrapper may modify time to wait argument by either subtracting or adding the delay to time to wait argument .

Time to wait plus minus delay may then be used to select the epoch field that may be modified. For example if time to wait delay is 30 seconds an epoch field which represents the time interval that begins after 30 seconds may be selected and incremented.

One shot signal object may be invoked block . In one implementation one shot signal object may be invoked from within wrapper via a call interface that is similar to API for wrapper . Furthermore via the call interface time to wait delay may be passed to the one shot signal object . Once invoked one shot signal object may wait for time to wait delay to elapse before generating a signal. In some implementations where signals cause catch up behavior as in wrapper may withhold invoking one shot signal objects to provide a temporary relief to system overload.

If threads calls many wrappers wrappers may invoke many one shot signal objects each with a different delay. Consequently signals from one shot signal objects may arrive at a receiving component or a device over period P.

Returning to at block process may return to block to continue to invoke one shot signal objects. In some implementation wrapper may not call one shot signal object when wrapper detects the presence of system overload. In such implementations wrapper may generate an error message for the thread that invoked wrapper 

In the above wrapper may detect if signals are periodically sent from one shot signal objects. By identifying the periodic invocations and associated latencies various techniques that are often applied to multi shot signal objects e.g. signal objects that generate signals periodically after an invocation to prevent system overloads may be applied to the one shot signal objects . For example when one shot signal objects are identified as being periodically invoked wrapper may cause delays in transmissions of signals from the one shot signal objects by different lengths of time. Alternatively wrapper may prevent the creation of signals.

In determining whether one shot signal objects are periodically invoked wrapper may inspect a signal information object which provides statistics of one shot signal objects . Without signal information object obtaining the time statistics about one shot timer objects may be difficult because a one shot signal object may be destroyed and become unavailable for inspection after transmitting a signal.

The signal information object may provide a context and parameters for taking corrective measures to prevent alleviate system overloads. For example assuming the periodic invocations of one shot signal objects are found to be associated with the processing latencies the component may inject different delays in transmissions of signals at different one shot signal objects based on information in signal information object . This may prevent the signals from arriving at the receiving component at the same time and therefore may stop one shot signal objects from overburdening components that receive the one shot signals. Alternatively wrapper may prevent the transmissions of one shot signals and may send error messages to a thread that invoked the one shot signal objects.

The following example together with reference to illustrates an exemplary system that delays one shot signals. The example is consistent with exemplary process described above with reference to .

For the example as shown in assume that a system includes a server device and client devices through W herein collectively referred to as client devices and individually as client device . Server device includes thread wrapper signal information object a uniform probability distribution delay object and an event handler an example of callback object . Client devices include one shot timer objects an example of one shot signal objects .

In the example thread manages and recycles server device s system resources e.g. memory that are used for communication between server device and client devices . More specifically thread may identify system resources that are no longer needed for the communication and recycle the system resources when client device fails to respond to keep alive messages that are periodically sent to client device 

When thread sends a keep alive message to client device thread invokes wrapper . In turn wrapper determines the periodicity of calls to one shot timer objects uses uniform probability distribution delay object to compute a delay based on the periodicity and calls one shot timer object based on the delay. In response one shot timer object sleeps for a particular amount of wait time and generates a keep alive response when the wait time expires. The keep alive response is received by event handler which allows thread to retain the system resources that are allocated for communicating with client device 

Each of one shot timer objects is called by thread with a time delay in a manner similar to that described above for one shot timer object . Consequently the keep alive messages are prevented from arriving at server device at the same time and overwhelming server device .

The foregoing description of implementations provides illustration but is not intended to be exhaustive or to limit the implementations to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from practice of the teachings.

For example while a series of blocks has been described with regard to exemplary process illustrated in the order of the blocks may be modified in other implementations. In addition non dependent blocks may represent acts that can be performed in parallel to other blocks.

It will be apparent that aspects described herein may be implemented in many different forms of software firmware and hardware in the implementations illustrated in the figures. The actual software code or specialized control hardware used to implement aspects does not limit the invention. Thus the operation and behavior of the aspects were described without reference to the specific software code it being understood that software and control hardware can be designed to implement the aspects based on the description herein.

Further certain portions of the implementations have been described as logic that performs one or more functions. This logic may include hardware such as a processor an application specific integrated circuit or a field programmable gate array software or a combination of hardware and software.

Even though particular combinations of features are recited in the claims and or disclosed in the specification these combinations are not intended to limit the invention. In fact many of these features may be combined in ways not specifically recited in the claims and or disclosed in the specification.

No element act or instruction used in the present application should be construed as critical or essential to the implementations described herein unless explicitly described as such. Also as used herein the article a is intended to include one or more items. Where one item is intended the term one or similar language is used. Further the phrase based on is intended to mean based at least in part on unless explicitly stated otherwise.

