---

title: Load balancing in broker-based messaging systems and methods
abstract: An exemplary method includes a message broker subsystem receiving a message intended for delivery to a recipient software application instance, determining that the recipient software application instance is included in a plurality of functionally equivalent software application instances that are registered with a global directory service subsystem that is communicatively coupled to the message broker subsystem, automatically selecting a software application instance from the plurality of software application instances for receipt of the message in accordance with a load balancing heuristic, and attempting to deliver the message to the selected software application instance. Corresponding methods and systems are also described.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08880621&OS=08880621&RS=08880621
owner: Verizon Patent and Licensing Inc.
number: 08880621
owner_city: Basking Ridge
owner_country: US
publication_date: 20100629
---
Message oriented middleware is infrastructure that increases the interoperability portability and flexibility of software applications by allowing the software applications to communicate one with another by transmitting messages therebetween. Message oriented middleware reduces the complexity of developing software applications that span multiple operating systems and network protocols by insulating application developers from the details of the various operating system and network interfaces. Accordingly software developers can more easily integrate new software applications with existing software applications.

In typical message oriented middleware configurations messages are transmitted from one software application to another by way of a message broker. However in some instances a particular software application may be overwhelmed by the number of messages that it receives and enter into a fault state in which it may not be able receive messages and or process them in a timely manner. The fault state may be caused by the sheer volume of messages that the software application receives inherent resource limitations of the application platform within which the software application resides and or for any other reason.

A typical message broker that receives a message intended for a software application that is in a fault state will repeatedly attempt to deliver the message to the software application for a predetermined time interval before determining that the message is undeliverable and returning it to an originating software application even if the message broker has already failed to deliver other messages to the software application. Such repeated attempts to deliver each message intended for a software application in a fault state can cause undesirable delays consume valuable network resources and result in frustrating experiences for end users.

Exemplary methods and systems for load balancing in a broker based messaging system are described herein. As described in more detail below a message broker subsystem may receive a message intended for delivery to a recipient software application instance and determine that the recipient software application instance is included in a plurality of functionally equivalent software application instances that are registered with a global directory service subsystem that is communicatively coupled to the message broker subsystem. In response the message broker subsystem may automatically select a software application instance from the plurality of software application instances for receipt of the message in accordance with a load balancing heuristic and attempt to deliver the message to the selected software application instance. The process may be repeated for subsequent messages intended for delivery to the recipient software application instance. In this manner the load associated with receiving and processing a plurality of messages may be distributed by the message broker subsystem among a plurality of functionally equivalent software applications thereby resulting in a more efficient and effective broker based messaging system.

As used herein the term software application may include but is not limited to a software product e.g. a software program a module within a software product and or any other software component e.g. an enterprise java bean a servlet etc. as may serve a particular implementation. As used herein an originating software application is one that generates a message to be sent to another software application referred to herein as a recipient software application .

In some examples a plurality of functionally equivalent instances of a software application may be selectively and communicatively coupled to a message broker subsystem. As will be described in more detail below each software application instance may include a uniquely named stand alone software application that is functionally equivalent to the other software application instances included in the plurality of software application instances. Hence the terms software application and software application instance will be used interchangeably to refer to a software application.

As used herein a message generated by a software application may include any data that may be read or otherwise processed by a message broker subsystem and or a recipient software application. A message may be transmitted in encrypted form or as cleartext i.e. non encrypted form .

A fault state refers to a condition or state wherein a recipient software application is unable to receive a message from a message broker subsystem. A recipient software application may be in a fault state for any of a number of different reasons. For example a recipient software application may be overwhelmed with incoming messages and or include one or more glitches bugs or other problems that cause the recipient software application to be in a fault state. Additionally or alternatively a recipient software application may be in a fault state while stuck in a database lookup or otherwise overloaded. Additionally or alternatively a fault state may be caused by a resource drain on a computing device that is executing the recipient software application and or a disabled delayed or otherwise faulty network connection between the recipient software application and the message broker subsystem. A fault state of a recipient software application may be temporary e.g. only a few seconds or more permanent e.g. until fixed by a software developer .

Software application subsystem message broker subsystem and global directory service subsystem may communicate using any communication platforms and technologies suitable for transporting data including known communication technologies devices media and protocols supportive of remote or local data communications. Examples of such communication technologies devices media and protocols include but are not limited to data transmission media communications devices Transmission Control Protocol TCP Internet Protocol IP File Transfer Protocol FTP Telnet Hypertext Transfer Protocol HTTP Hypertext Transfer Protocol Secure HTTPS Session Initiation Protocol SIP Ethernet and any other suitable communications technologies devices media and protocols.

In some examples software application subsystem message broker subsystem and global directory service subsystem may communicate via one or more networks including but not limited to wireless networks broadband networks closed media networks cable networks satellite networks the Internet intranets local area networks public networks private networks optical fiber networks and or any other networks capable of carrying data and communications signals between software application subsystem message broker subsystem and global directory service subsystem .

Software application subsystem message broker subsystem and global directory service subsystem may each be implemented by one or more computing devices. For example software application subsystem may be implemented by a first computing device configured to execute an originating software application and a second computing device configured to execute a recipient software application. Alternatively software application subsystem may be implemented by a single computing device configured to execute both the originating and recipient software applications.

In some examples software application subsystem message broker subsystem and global directory service subsystem are implemented by distinct computing devices. Alternatively subsystems may be implemented by the same computing device. Any other implementation of subsystems may be realized in accordance with the systems and methods described herein.

Communication facility may be configured to facilitate communication between software application subsystem and message broker subsystem . For example communication facility may be configured to establish and or assist in establishing one or more connections between software application subsystem and message broker subsystem over which one or more messages may be transmitted from software application subsystem to message broker subsystem and or from message broker subsystem to software application subsystem . The one or more connections established between software application subsystem and message broker subsystem may include one or more secure connections and or one or more non secure connection. An exemplary secure connection includes but is not limited to a secure sockets layer SSL connection. An exemplary non secure connection includes but is not limited to a non SSL connection.

Communication facility may additionally or alternatively be configured to facilitate communication between software application subsystem and global directory service subsystem . For example communication facility may be configured to transmit registration data to global directory service subsystem to register one or more software applications with global directory service subsystem .

Messaging facility may be configured to process a message generated by an originating software application and or a message received by a recipient software application. Exemplary but not exclusive processing of a message that may be performed by messaging facility includes encrypting a message decrypting a message preparing a message for transmission to a recipient software application via message broker subsystem processing of a message received from message broker subsystem etc.

Storage facility may be configured to maintain message data and application programming interface API data . It will be recognized that storage facility may maintain additional or alternative data as may serve a particular implementation.

Message data may include data representative of one or more messages generated and or received by a software application. Message data may additionally include delivery instructions corresponding to one or more messages. For example message data may include an identifier e.g. a name or identification number of an intended recipient software application and or computing device that executes the recipient software application.

API data is representative of one or more APIs configured to facilitate integration of one or more software applications executed by software application subsystem with message broker subsystem and or global directory service subsystem . For example one or more APIs may interface with one or more software applications executed by application subsystem to facilitate encryption of messages generated by the one or more software applications communication with message broker subsystem and or global directory service subsystem and or any other feature as may serve a particular implementation.

Communication facility may be configured to facilitate communication between message broker subsystem and software application subsystem . For example communication facility may be configured to establish and or assist in establishing one or more connections between message broker subsystem and software application subsystem over which one or more messages may be transmitted from software application subsystem to message broker subsystem and or from message broker subsystem to software application subsystem . In some examples communication facility may be configured to receive a message intended for delivery to a recipient software application by way of one of the established one or more connections.

Communication facility may additionally or alternatively be configured to facilitate communication between message broker subsystem and global directory service subsystem . For example communication facility may be configured to transmit data representative of a request for load balancing instructions associated with a particular recipient software application and or any other data to global directory service subsystem as may serve a particular implementation.

Delivery facility may be configured to deliver and or attempt to deliver one or more messages received from one or more originating software applications to one or more recipient software applications in accordance with delivery instructions included within the message s . To this end delivery facility may be configured to utilize one or more connections established by communication facility .

Load balancing facility may be configured to balance delivery of a plurality of messages intended for a particular recipient software application across a plurality of instances of the recipient software application. For example communication facility may receive a plurality of messages intended for delivery to a recipient software application instance. Load balancing facility may determine that the recipient software application instance is included in a plurality of functionally equivalent software application instances that are registered with global directory service subsystem . As will be described in more detail below load balancing facility may determine that the recipient software application instance is included in the plurality of functionally equivalent software application instances by querying global directory service subsystem . Alternatively load balancing facility may determine that the recipient software application instance is included in the plurality of functionally equivalent software application instances by accessing load balancing data already cached in storage facility .

In response to the determination load balancing facility may direct delivery facility to selectively distribute the messages among the plurality of software application instances in accordance with a load balancing heuristic. For example with respect to each successive message included in the plurality of messages load balancing facility may automatically select a different software application instance from the plurality of software application instances for receipt of the message and direct delivery facility to attempt to deliver the message to the selected software application instance. The load balancing heuristic may be performed in a round robin manner i.e. by rotating through the available software application instances in a specified order and or in any other manner as may serve a particular implementation. For example some software application instances may be given selection priority over others in accordance with one or more factors as may serve a particular implementation. However for illustrative purposes the load balancing heuristic is performed in a round robin manner in the examples given herein.

Fault surveillance facility may be configured to monitor an availability status of one or more recipient software application instances. For example fault surveillance facility may identify that a particular recipient software application instance is unavailable e.g. in a fault state and prevent the identified recipient software application instance from being selected for receipt of a message in accordance with a load balancing heuristic during a predetermined time period.

Fault surveillance facility may identify software application instances in a fault state in any suitable manner as may serve a particular implementation. For example fault surveillance facility may monitor whether delivery facility is able to successfully deliver a message to a recipient software application instance. If delivery facility fails to deliver the message fault surveillance facility may determine that the recipient software application is in a fault state. Additionally or alternatively fault surveillance facility may determine that a software application instance is in a fault state by receiving a notification from the recipient software application instance indicative of the fault state monitoring a performance of the recipient software application instance and or in any other manner as may serve a particular implementation.

In some examples fault surveillance facility may detect a failure by delivery facility to deliver a message to a software application instance selected in accordance with a load balancing heuristic. In response load balancing facility may automatically select another software application instance functionally equivalent to the originally selected software application instance for receipt of the message in accordance with the load balancing heuristic and direct delivery facility to attempt to deliver the message to the newly selected software application instance. The newly selected software application instance may be selected in accordance with the same load balancing heuristic used to originally select the unavailable software application.

In some examples delivery facility may successfully deliver a message to a selected software application instance. Fault surveillance facility may detect the successful delivery and notify a software application that originated the message of the successful delivery. Alternatively delivery facility may fail to deliver a message to each available instance of a recipient software application. In response fault surveillance facility may notify the software application that originated the message of the failure to deliver the message. For example the message may be returned to the originating software application by delivery facility .

Storage facility may be configured to maintain message data representative of one or more messages to be delivered to a recipient software application load balancing data representative of data utilized by load balancing facility and fault surveillance data representative of data utilized by fault surveillance facility e.g. data identifying one or more software application instances in a fault state . Storage facility may maintain additional or alternative data as may serve a particular implementation.

Communication facility may be configured to facilitate communication between global directory service subsystem and software application subsystem . Communication facility may be further configured to facilitate communication between global directory service subsystem and message broker subsystem .

Storage facility may be configured to maintain broker information data software application information data and or any other data as may serve a particular implementation.

Broker information data may include information descriptive of or otherwise corresponding to message broker subsystem . For example broker information data may include a list of broker names and corresponding IP addresses and location port numbers. Broker information data may be registered dynamically and or statically as may serve a particular implementation.

As shown in broker information table may include a list of broker names location IP addresses and location port numbers associated with each of a plurality of message brokers implementing message broker subsystem . The information included within broker information table may be accessed by one or more message brokers and or software applications to determine appropriate delivery instructions for messages to be transmitted from one software application to another.

Returning to software application information data may include information descriptive of or otherwise corresponding to one or more software applications. For example software application information data may include a list of software application names associated broker names and load balancing data associated with one or more software applications e.g. data identifying one or more functionally equivalent instances of one or more software applications . Software application information data may be registered dynamically and or statically as may serve a particular implementation. For example software application information data may be periodically updated e.g. nightly .

Table may further include load balancing instructions including data identifying functionally equivalent instances of one or more of the software applications listed in table . For example column of table indicates that applications B and C are functionally equivalent instances of application A. In some examples an order in which the functionally equivalent software applications are listed in column may specify an order in which message broker subsystem attempts to deliver messages intended for a particular software application. For example message broker subsystem may rotate through applications A B and C in that order when attempting to deliver messages intended for application A.

In step a message intended for delivery to a recipient software application instance is received by a message broker subsystem e.g. message broker subsystem . The message may be received by the message broker subsystem in any suitable manner as may serve a particular implementation.

In step the message broker subsystem determines that the recipient software application instance is included in a plurality of functionally equivalent software application instances that are registered with a global directory service subsystem that is communicatively coupled to the message broker subsystem. The determination may be made in any of the ways described herein.

In step the message broker subsystem automatically selects a software application instance from the plurality of software application instances for receipt of the message in accordance with a load balancing heuristic. An exemplary load balancing heuristic will be described in more detail below.

In step the message broker subsystem attempts to deliver the message to the selected software application instance. The message broker subsystem may attempt to deliver the message in any of the ways described herein.

Specific implementations and examples of the load balancing systems and methods described herein will now be described in connection with . It will be recognized that the implementations and examples described in connection with are merely illustrative of the many possible implementations and examples of the systems and methods described herein. Each of the message brokers and software applications depicted in correspond to the message brokers and software applications listed in software application information table .

As shown in client may be configured to execute a software application named application in table . Software application may reside within client as depicted in or may be located within any other subsystem or device. Software application may be configured to generate a message that is to be transmitted to another software application named application in table . Software application may be executed by and or reside within client . Hence software application may be referred to as an originating software application and software application may be referred to as a recipient software application.

Configuring both software applications and collectively software applications to interface directly one with another may be costly difficult cumbersome and sometimes impossible. Hence messages may be transmitted between software applications via message broker which is configured to interface with both software applications . To this end client may be configured to selectively establish connection with the message broker . Message broker may in turn selectively establish connection with client . A message generated by originating software application may be transmitted to message broker by way of connection . Message broker may deliver the message to recipient software application by way of connection .

It is often desirable to deliver multiple messages to a recipient software application. For example it may be desirable for message broker to deliver multiple messages to software application . Message broker may therefore determine whether one or more functionally equivalent instances of software application are registered with global directory service server among which the multiple messages may be distributed in accordance with a load balancing heuristic.

To this end message broker may query directory service server which may maintain data representative of software application information table in order to determine whether software application is included in a plurality of functionally equivalent software application instances that are registered with global directory service server . In the example of table indicates that there are no functionally equivalent software application instances of software application . Hence message broker may attempt to deliver each of the plurality of messages to software application and return those messages that are unsuccessfully delivered back to software application .

In some examples message broker may receive a plurality of messages from software application that are intended for software application . Message broker may query global directory service server for load balancing instructions determine that functionally equivalent software application is also registered with global directory service server and distribute the messages among software applications and in accordance with a load balancing heuristic. For example the messages may be delivered in an alternating manner to software applications and i.e. the first message is delivered to software application the second message is delivered to software application the third message is delivered to software application etc. .

In some examples the load balancing instructions obtained by message broker from global directory service server may be locally cached by message broker so that message broker may avoid querying global directory service server each time a message intended for recipient software application is processed by message broker . Message broker may be configured to periodically re query global directory service server for the load balancing instructions in the event that the load balancing instructions change.

If either software application or software application becomes unavailable e.g. enters a fault state message broker may be configured to cease attempting to deliver messages to the unavailable software application and instead attempt to deliver all of the messages to the available software application. Once the unavailable software application becomes available again message broker may resume delivering the messages to software applications and in an alternating manner.

Each message broker may be associated with one or more software applications . For example message broker is associated with a software application named application A in table message broker is associated with a software application named application B in table message broker is associated with a software application named application C in table and message broker is associated with a software application named application D and a software application named application in table . As indicated in table software applications through are functionally equivalent one to another.

Though not illustrated specifically in the software applications shown in may each reside within and or be executed by one or more clients. For example software application may be executed by a first client software application may be executed by a second client etc.

In some examples message broker may receive a message from software application intended for software application . Message broker may first query global directory service server to determine whether software application is registered with global directory service server . In response global directory service server may inform message broker that software application is a registered application and that it is associated with message broker in accordance with software application information table . Global directory service server may also inform message broker that functionally equivalent software application instances of software application e.g. software applications and are also registered with global directory service server .

With this information message broker may deliver the message and any subsequent messages intended for software application to software applications through in accordance with a load balancing heuristic. To illustrate message broker may establish a connection with message broker if it does not already exist and transmit the message to message broker . Message broker may then attempt to deliver the message to software application . Message broker may notify message broker regarding the success or failure of the delivery of the message to software application . If the delivery attempt fails message broker may attempt to deliver the message to software application by way of message broker then to software application by way of message broker and then to software application by way of message broker until the message is successfully delivered. If the message cannot be successfully delivered to any of software applications through message broker may return the message to the originating software application .

In some examples if a second message intended for software application is received by message broker message broker may initially attempt to deliver the second message to software application . If the delivery of the message fails message broker may attempt to deliver the second message to software application then to software application and then to software application until the message is successfully delivered. This round robin pattern may be followed for subsequent messages intended for software application with message broker initially attempting to deliver a third message intended for software application to software application a fourth message intended for software application to software application a fifth message intended for software application to software application itself etc.

In step a plurality of messages intended for delivery to a recipient software application instance is received by a message broker subsystem e.g. message broker subsystem . The message may be received by the message broker subsystem in any suitable manner as may serve a particular implementation.

In step the message broker subsystem determines that the recipient software application instance is included in a plurality of functionally equivalent software application instances that are registered with a global directory service subsystem that is communicatively coupled to the message broker subsystem. The determination may be made in any of the ways described herein.

In step the message broker subsystem selectively distributes the messages among the plurality of software application instances in accordance with a round robin load balancing heuristic. The selective distribution may be performed in any of the ways described herein.

In certain embodiments one or more of the components and or processes described herein may be implemented and or performed by one or more appropriately configured computing devices. To this end one or more of the systems and or components described above may include or be implemented by any computer hardware and or computer implemented instructions e.g. software embodied on a non transitory computer readable medium configured to perform one or more of the processes described herein. In particular system components may be implemented by one physical computing device or may be implemented by more than one physical computing device. Accordingly system components may include any number of computing devices and may employ any of a number of computer operating systems.

In certain embodiments one or more of the processes described herein may be implemented at least in part as instructions executable by one or more computing devices. In general a processor e.g. a microprocessor receives instructions from a tangible computer readable medium e.g. a memory etc. and executes those instructions thereby performing one or more processes including one or more of the processes described herein. Such instructions may be stored and or transmitted using any of a variety of known non transitory computer readable media.

A non transitory computer readable medium also referred to as a processor readable medium includes any non transitory medium that participates in providing data e.g. instructions that may be read by a computer e.g. by a processor of a computer . Such a non transitory medium may take many forms including but not limited to non volatile media and or volatile media. Non volatile media may include for example optical or magnetic disks and other persistent memory. Volatile media may include for example dynamic random access memory DRAM which typically constitutes a main memory. Common forms of non transitory computer readable media include for example a floppy disk flexible disk hard disk magnetic tape any other magnetic medium a CD ROM DVD any other optical medium a RAM a PROM an EPROM a FLASH EEPROM any other memory chip or cartridge or any other non transitory medium from which a computer can read.

Communication interface may be configured to communicate with one or more computing devices. Examples of communication interface include without limitation a wired network interface such as a network interface card a wireless network interface such as a wireless network interface card a modem and any other suitable interface. Communication interface may additionally or alternatively provide such a connection through for example a local area network such as an Ethernet network a personal area network a telephone or cable network a satellite data connection a dedicated URL or any other suitable connection. Communication interface may be configured to interface with any suitable communication media protocols and formats including any of those mentioned above.

Processor generally represents any type or form of processing unit capable of processing data or interpreting executing and or directing execution of one or more of the instructions processes and or operations described herein. Processor may direct execution of operations in accordance with one or more applications or other computer executable instructions such as may be stored in storage device or another non transitory computer readable medium.

Storage device may include one or more data storage media devices or configurations and may employ any type form and combination of data storage media and or device. For example storage device may include but is not limited to a hard drive network drive flash drive magnetic disc optical disc random access memory RAM dynamic RAM DRAM other non volatile and or volatile data storage units or a combination or sub combination thereof. Electronic data including data described herein may be temporarily and or permanently stored in storage device . For example data representative of one or more executable applications which may include but are not limited to one or more of the software applications described herein configured to direct processor to perform any of the operations described herein may be stored within storage device . In some examples data may be arranged in one or more databases residing within storage device .

I O module may be configured to receive user input and provide user output and may include any hardware firmware software or combination thereof supportive of input and output capabilities. For example I O module may include hardware and or software for capturing user input including but not limited to a keyboard or keypad a touch screen component e.g. touch screen display a receiver e.g. an RF or infrared receiver and or one or more input buttons.

I O module may include one or more devices for presenting output to a user including but not limited to a graphics engine a display e.g. a display screen one or more output drivers e.g. display drivers one or more audio speakers and one or more audio drivers. In certain embodiments I O module is configured to provide graphical data to a display for presentation to a user. The graphical data may be representative of one or more graphical user interfaces and or any other graphical content as may serve a particular implementation.

In some examples any of the facilities described herein may be implemented by or within one or more components of computing device . For example one or more applications residing within storage device may be configured to direct processor to perform one or more processes or functions associated with communication facility messaging facility communication facility delivery facility load balancing facility fault surveillance facility and or communication facility . Likewise storage facility storage facility and or storage facility may be implemented by or within storage device .

In the preceding description various exemplary embodiments have been described with reference to the accompanying drawings. It will however be evident that various modifications and changes may be made thereto and additional embodiments may be implemented without departing from the scope of the invention as set forth in the claims that follow. For example certain features of one embodiment described herein may be combined with or substituted for features of another embodiment described herein. The description and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense.

