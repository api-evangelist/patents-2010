---

title: Attention misdirection for streaming video
abstract: Disclosed are various embodiments that implement attention misdirection to conceal errors in streaming video. A video stream quality monitor executed in one or more computing devices determines that an error in a video stream may be user perceivable. The video stream is then configured to include a distraction to mask the error. The distraction is designed to induce a saccade in a user, which interferes with perception of the error by the user.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08565323&OS=08565323&RS=08565323
owner: Amazon Technologies, Inc.
number: 08565323
owner_city: Reno
owner_country: US
publication_date: 20101130
---
Video streams over networks often are susceptible to quality problems. For example the Internet is a best effort network with no quality of service guarantees. One or more packets of the video stream may be randomly lost because of equipment malfunctions bursty network traffic communications signal interference or any number of other reasons. Such lost packets may result in various glitches in the video that is rendered for viewing. Additionally depending on the video encoding technology employed in generating the video stream blurriness fuzziness macroblocking pixelation mosquito noise and or other forms of encoding artifacts may appear in the rendered video.

The present disclosure relates to misdirecting the attention of a user to mask errors in streaming video. In particular the present disclosure relates to presenting a distraction in conjunction with streaming video to induce a saccade in a user. A saccade is a rapid movement of the eyes as they jump from fixation on one point to another. When a person shifts visual focus to something that is moving the person perceives a smooth visual experience. However the actual physiology involved differs from the perception. In reality the eye unfocuses the muscles controlling the eye aim the eye to focus on another object and the eye refocuses on the other object. During this time which may last approximately between 30 and 50 milliseconds the visual field is edited out by the brain and the brain fills in the gap.

If something unusual occurs in the visual field during the saccade the user does not perceive it due to this saccadic masking phenomenon. Various embodiments of the present disclosure employ saccade inducing distractions to mask anomalies in a video stream. Such anomalies or errors may be created for example by encoding artifacts data communications network effects and or other factors. In various embodiments the video stream is encoded from a video signal generated by a game or other application that is executed in a server. It is understood however that the principles of the present disclosure may be applied to any video stream that is susceptible to visual anomalies. In the following discussion a general description of the system and its components is provided followed by a discussion of the operation of the same.

With reference to shown is a networked environment according to various embodiments. The networked environment includes one or more computing devices in data communication with one or more clients by way of a network . The network includes for example the Internet intranets extranets wide area networks WANs local area networks LANs wired networks wireless networks or other suitable networks etc. or any combination of two or more such networks.

The computing device may comprise for example a server computer or any other system providing computing capability. Alternatively a plurality of computing devices may be employed that are arranged for example in one or more server banks or computer banks or other arrangements. For example a plurality of networked computing devices together may comprise a cloud computing resource a grid computing resource and or any other distributed computing arrangement. Such computing devices may be located in a single installation or may be distributed among many different geographical locations. For purposes of convenience the computing device is referred to herein in the singular. Even though the computing device is referred to in the singular it is understood that a plurality of computing devices may be employed in the various arrangements as described above.

Various applications and or other functionality may be executed in the computing device according to various embodiments. Also various data is stored in a data store that is accessible to the computing device . The data store may be representative of a plurality of data stores as can be appreciated. The data stored in the data store for example is associated with the operation of the various applications and or functional entities described below.

The components executed on the computing device for example include a server application a video stream quality monitor a distraction insertion application a plurality of applications . . . N a plurality of video encoders . . . N a plurality of wrappers . . . N and other applications services processes systems engines or functionality not discussed in detail herein. The server application is executed to launch applications which may be executed within wrappers that provide a virtualized environment. Although the principles of the present disclosure are illustrated with reference to applications that are executed in remote servers it is understood that the principles are applicable to any video stream that may have visual anomalies or errors e.g. television streams movie streams and so on.

The server application is executed to obtain input data from the clients and provide the input data to the respective wrapper . The server application is also executed to send video data that is captured from the application to the clients as a video stream. The server application may communicate with the client over various protocols such as for example hypertext transfer protocol HTTP simple object access protocol SOAP real time transport protocol RTP real time streaming protocol RTSP real time messaging protocol RTMP user datagram protocol UDP transmission control protocol TCP and or other protocols for communicating data over the network . The server application is configured to maintain application state information associated with the executing applications .

The application may be a single player game a multiple player game or include both single player and multiple player modes. As non limiting examples the application may correspond to a first person shooter game an action game an adventure game a party game a role playing game a simulation game a strategy game a vehicle simulation game and or other types of games. The application may be a game originally designed for execution in a general purpose computing device or in a specialized video game device such as for example a video game console a handheld game device an arcade game device etc. The application may expect to access one or more resources of the device on which it is executed. Such resources may correspond to display devices input devices or other devices. In some cases the application may request exclusive access to one or more of the resources whereby no other applications may have access to the particular resources. Although the example of a game is used in the following text it is understood that the application may correspond to many different types of applications.

The video encoder is able to encode a video signal generated by the application into a video stream for transmission over the network to clients . The video stream may include an audio signal generated by the application as well. To this end the video encoder may include various types of video and audio encoders such as for example Moving Pictures Experts Group MPEG encoders H.264 encoders Flash video encoders etc. Such encoders may be selected according to factors such as for example data reduction encoding quality latency etc.

The video encoder may introduce various encoding artifacts into the video stream that were not present in the video signal. Such encoding artifacts may comprise macroblocking pixelation mosquito noise and or other forms of encoding artifacts. The presence and severity of the encoding artifacts may depend on various factors such as the content of the video signal the maximum bitrate of the video stream the data reduction approach employed by the particular video encoder etc. In some situations the video signal may already contain preexisting artifacts. As a non limiting example the video signal may have already been encoded and contain encoding artifacts. As another non limiting example the video signal may be obtained from archival footage and may include scratches dust color changes and or other preexisting artifacts.

The video stream quality monitor is executed to monitor the quality of one or more video streams generated by one or more video encoders . To this end the video stream quality monitor may be configured to detect errors or visual anomalies in a video stream that may be user perceivable. Such errors may result from data from the video stream being delayed or lost over the network . Such network effects may be assessed through feedback from the server application or another application that is configured to serve up the video stream to the client over the network . Additionally such network effects may be assessed by processing stream quality metrics that are reported by the client . Errors in the video stream may also result from encoding artifacts introduced by the video encoder or may be preexisting in the source video signal.

In some cases errors in the video stream may be minor transient or of such a nature that they are not readily perceivable by the user. In such cases the errors may not meet a threshold associated with user perception of the error. In other cases such errors may be significant enough to attract the attention of the user and degrade the overall experience of the user. Some of these user perceivable errors may be susceptible to saccadic masking. If so the video stream quality monitor configures the video stream to include a distraction to induce a saccade in the user thereby interfering with the perception of the error by the user. In some embodiments an error in the video stream may be intentionally occluded by a graphical distraction.

The distraction insertion application is executed to insert a saccade inducing distraction into the video stream that is sent to the client in order to mask perception of errors. A distraction may correspond to a flash a sparkle a rapid change in contrast and or any other unexpected change in the visual field. In various embodiments a distraction may include a notification with information of interest to the user. As a non limiting example a distraction may include a notification to the user that another user has joined or departed a game. As another non limiting example a distraction may include a notification to the user of the current connection status of the client to the network . Such notifications may be cached until necessary for use in a distraction.

In one embodiment the distractions are graphically embedded within the video stream. In other embodiments the distractions are configured to be rendered on top of alongside adjacent to or otherwise in association with the rendered video stream. In still other embodiments the distractions may be generated through side channels in the client . As a non limiting example a sound may be played out to distract the user. As another non limiting example a text message may be sent to a telephone of the user. Although the distraction insertion application is depicted as being executed in the computing device it is understood that at least a portion of the distraction insertion application may be executed in the client to render distractions in some embodiments.

The wrapper corresponds to an application that provides a virtualized environment for execution of the application . In particular the wrapper may be configured to virtualize one or more of the resources that the application expects to access. Such resources may include a keyboard a mouse a joystick a video device a sound device etc. In this way the wrapper is able to provide input commands to application as if the wrapper emulates a keyboard a mouse or another type of input device.

Different types of wrappers may be provided for different applications or classes of applications . As non limiting examples different wrappers may be provided for applications using different application programming interfaces APIs such as OpenGL DirectX the Graphics Device Interface GDI and so on. Where the application is configured for execution in a specialized video game device or another type of computing device the wrapper may include an emulation application that emulates the device. The wrapper may be configured to deliver the video signal generated by the application to the video encoder for encoding.

The application state information that is maintained by the server application includes various data relating to application sessions that are currently active. For example the application state information may track the users that are currently participating in the application session scores and status information associated with the users security permissions associated with the game session e.g. who can or cannot join and so on. In some embodiments some or all of the application state information may be discarded when an application session ends.

The data stored in the data store includes for example applications video encoders wrappers saved state data user data quality monitor configuration data distraction configuration data and potentially other data. The applications correspond to a library of video games or other applications that are available to be launched as applications . The applications may correspond to executable code within the computing device . Alternatively the applications may correspond to code that is executable within another type of device but is not executable within the computing device . Such applications may be referred to as binaries read only memory images ROMs and other terms. A particular application may be executed as multiple instances of the applications for multiple application sessions.

The video encoders correspond to the various types of video encoders that may be employed in the computing device . Some video encoders may correspond to specific formats such as for example H.264 MPEG 4 MPEG 2 and or other formats. The wrappers correspond to the executable code that implements the various types of wrappers . The wrappers are executable in the computing device and may be executed as multiple instances of the wrappers for multiple application sessions.

The saved state data corresponds to application states that have been saved by the applications . Because the applications are executed in a virtualized environment the applications may write state information to a virtual location which is then mapped for storage in the data store as the saved state data . The saved state data may correspond to data saved normally by the application or may correspond to a memory image of the application that may be resumed at any time. The user data includes various data related to the users of the applications such as for example security credentials application preferences billing information a listing of other users that are permitted to join application sessions started by the user and so on.

The quality monitor configuration data includes various configuration parameters for the video stream quality monitor . For example such parameters may specify thresholds for the detection of errors that are user perceivable. Such parameters may also specify thresholds for errors that may be masked by saccades. To this end the quality monitor configuration data may for example specify a maximum duration for an error in frame length or time so that the error is predicted to be completely concealed by a saccade. The quality monitor configuration data may specify other actions to be taken e.g. notifying the user terminating the session etc. when an error is not susceptible to saccade masking.

The distraction configuration data includes various configuration parameters for the distraction insertion application . Such parameters may configure for example the location of the distraction the form of the distraction and or other aspects of the distraction. Such parameters may specify a sparkle lightning bolt flash sprite dialog box and or other types of visual distractions. In various embodiments the distraction may be chosen based in part on which application is executed and or the application state information .

The client is representative of a plurality of client devices that may be coupled to the network . The clients may be geographically diverse. The client may comprise for example a processor based system such as a computer system. Such a computer system may be embodied in the form of a desktop computer a laptop computer personal digital assistants cellular telephones smartphones set top boxes music players web pads tablet computer systems game consoles electronic book readers or other devices with like capability.

The client may include a display . The display may comprise for example one or more devices such as cathode ray tubes CRTs liquid crystal display LCD screens gas plasma based flat panel displays LCD projectors or other types of display devices etc. The client may include one or more input devices . The input devices may comprise for example devices such as keyboards mice joysticks accelerometers light guns game controllers touch pads touch sticks push buttons optical sensors microphones haptic devices webcams and or any other devices that can provide user input.

The client may be configured to execute various applications such as a client application and or other applications. The client application is executed to allow a user to launch join play and otherwise interact with an application executed in the computing device . To this end the client application is configured to capture input provided by the user through one or more of the input devices and send this input over the network to the computing device as input data .

The client application is also configured to obtain video data over the network from the computing device and render a screen on the display . To this end the client application may include one or more video and audio players to play out a video stream generated by a video encoder . It is understood that such a video stream is not limited to one encoded from an application . Indeed the principles of the present disclosure may be applicable to television programs movies etc. that is any video stream that may suffer from errors and to which distractions may be effectively applied. For example a televised football game may include video encoding errors immediately after kickoff due to the sudden motion. A distraction may be employed to distract the user and disguise such errors.

In various embodiments the client application may be configured to render a distraction inserted into the video stream by the distraction insertion application in association with the screen on the display . In one embodiment the client application comprises a plug in within a browser application. The client may be configured to execute applications beyond the client application such as for example browser applications email applications instant message applications and or other applications.

Next a general description of the operation of the various components of the networked environment is provided. To begin a user at a client sends a request to launch an application to the server application . The server application obtains the corresponding application and wrapper from the data store . The server application then launches the application in the corresponding wrapper . The server application tracks the status of the game within the application state information .

The wrapper provides a virtualized environment for the application that virtualizes one or more resources of the computing device . Such resources may include exclusive resources i.e. resources for which the application requests exclusive access. For example the application may request full screen access from a video device which is an exclusive resource because normally only one application can have full screen access. Furthermore the wrapper may virtualize input devices such as for example keyboards mice etc. which may not actually be present in the computing device . In various embodiments the wrapper may correspond to a virtual machine and or the wrapper may be executed within a virtual machine.

The user at the client enters input commands for the application by use of the input devices of the client . As a non limiting example the user may depress a left mouse button. Accordingly the client application functions to encode the input command into a format that may be transmitted over the network within the input data . The server application receives the input command and passes it to the wrapper . The wrapper then provides a left mouse button depression to the application by way of a virtualized mouse. In some embodiments different input commands may be presented to the application from those that were generated by a client . As a non limiting example if a user sends a mouse down command and the client application loses focus the wrapper may be configured to send a mouse down command followed by a mouse up command. In various embodiments the input commands may be relayed to the wrapper as soon as possible or the input commands may be queued by the wrapper and relayed to the application sequentially from the queue according to another approach.

Various embodiments enable input generated through one type of input device in a client to be transformed by the wrapper into input commands provided to the application through an entirely different type of virtual input device. As a non limiting example input generated by an accelerometer in the client may be translated by the wrapper into input provided through a virtual mouse. Thus completely different kinds of input devices may be used in interacting with the application that may not have been contemplated when the application was implemented.

Moreover because the client is decoupled from the hardware requirements of the application the application may be used in a diverse variety of clients that are capable of streaming video with acceptable bandwidth and latency over a network . For example the application may be played on a client that is a smartphone. Thus the client need not include expensive graphics hardware to perform the complex three dimensional rendering that may be necessary to execute the application . By contrast the hardware of the computing device may be upgraded as needed to meet the hardware requirements of the latest and most computationally intensive applications . In various embodiments the video stream encoded by the video encoder may be scaled according to the bitrate and or other characteristics of the connection between the computing device and the client over the network .

The graphical output of the application is captured by the wrapper and encoded into a video stream. Additionally the audio output of the application may be captured and multiplexed into the video stream. The video stream is transmitted by the server application to the client over the network as the video data . The client application obtains the video data and plays it out on the display in a screen .

Turning now to and shown are examples of user interfaces rendered by the client application executed in the client in the networked environment . In particular depicts a screen rendered on the display from a video stream. No visible errors are shown on the screen of . In some cases screens may contain errors that are determined by the video stream quality monitor not to be perceivable by users or significant to the users. Unlike the screen of the screen of includes an error that may be perceived by a user and may cause the user to have a degraded playing experience.

By contrast the screen of depicts one non limiting example of a saccade inducing distraction which is represented as a lightning bolt at the upper right corner of the screen . When the user sees the distraction the attention of the user is directed away from a forthcoming error shown in and to the distraction . In the resulting saccade the eyes of the user defocus on a portion of the screen are aimed at the distraction and then refocus on the distraction . During the saccade the user is not likely to perceive the error . Instead the portion of the image of that corresponds to the portion of the screen is likely to persist in the vision of the user. Even if the user were looking at the lower left corner of the screen the user is not likely to see the error during the saccade.

With reference back to the video stream quality monitor may continuously monitor the video stream generated by a video encoder for user perceivable errors. Such errors may be caused for example by encoding artifacts resulting from application caused effects or lost data resulting from network caused effects. To this end the video stream quality monitor may obtain various data from the video encoder the application the server application the client application and or other applications. The video stream quality monitor may compute a connection quality score from the stream quality metrics . If the connection quality score meets a certain threshold for poor quality the video stream quality monitor may configure the video stream to be dropped entirely rather than to include a distraction. In some embodiments portions of the video stream quality monitor may be executed in the client rather than the computing device .

The video stream quality monitor may anticipate the occurrence of a user perceivable error based on the occurrence of an event in the application . For example a user may have fired a rocket in the game at a warehouse and the video stream quality monitor knows that that event is likely to cause a user perceivable error when encoding the resulting explosion and fireball. To this end the video stream quality monitor may interface with the application and or the video encoder to determine whether an event is likely to cause a user perceivable error.

Such functionality may be applied to many different forms of video streams beyond those generated in conjunction with applications . As a non limiting example the encoding of the video signal of a televised football game may result in an error at kickoff. At kickoff the video signal changes dramatically from an essentially stationary image to video that contains a substantial amount of seemingly random motion. Encoding of such video can be difficult and may result in errors. Such errors may be detected by the video encoder and or anticipated by the video stream quality monitor based for example on information that indicates that a kickoff is about to occur. Consequently a saccade inducing distraction may be rendered. Additionally in the example of a televised football game the distraction may include useful information such as a current score.

When the video stream quality monitor determines that a distraction is to be included in a video stream the distraction insertion application performs the insertion. It is noted that portions of the distraction insertion application may be executed in the client rather than the computing device . The distraction insertion application configures the distraction to be presented in synchronization with the frames of the video stream that contain the error. In one embodiment the distraction insertion application embeds the distraction within the video stream to be rendered as an overlay on top of the screen . In another embodiment the distraction insertion application includes an instruction in the video stream to code executed in the client to render the distraction relative to the screen on the display .

The distraction insertion application may insert different types of distractions that are to be rendered at different locations on the display . After repeated similar distractions the user may become accustomed to the distractions. Consequently the distractions may not induce an effective saccade. To overcome this a random selection of distraction forms may be made. Additionally the distractions may be rendered at random locations on the display . In one embodiment the distractions are rendered in locations that are different from the locations of previously rendered distractions.

Referring next to shown is a flowchart that provides one example of the operation of a portion of the video stream quality monitor according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the video stream quality monitor as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing device according to one or more embodiments.

Beginning with box the video stream quality monitor obtains video quality metrics and or other data from the video encoder that is encoding a video signal into a video stream. Such video quality metrics may indicate whether the video stream includes an error or visual anomaly created by the video encoder that may be perceived by a user. Other data may be obtained that indicates that the video signal generated by the application cannot be encoded into the video stream without perceivable encoding artifacts.

In one embodiment the application and or the video encoder may provide an indication of an event reflected in the video signal that may cause artifacting in the encoded video stream. As a non limiting example an event may occur in the application that causes motion in a corner of the screen . It may be the case that this motion cannot be encoded without significant blurring in that corner due to the bitrate resolution frame rate and or other settings of the video encoder . The video encoder may provide data indicating when a frame of the video stream should be dropped.

In box the video stream quality monitor obtains stream quality metrics from the server application that is serving up the video stream and or the client that is playing out the video stream. As a non limiting example the server application may report back to the video stream quality monitor that a data packet of the video stream could not be sent to the client over the network . Such problems may be detected for example by a TCP stack or another communications protocol stack of the computing device . Additionally stream quality metrics obtained from the client may indicate various problems with the video stream such as for example corrupted data lost data client side processing issues and so on.

In box the video stream quality monitor determines whether the video stream includes or will include a visible video error or anomaly. In other words the video stream quality monitor determines whether such an error exists or is predicted to exist and whether such an error would likely result in a degraded user experience. To this end the video stream quality monitor may analyze the data obtained in boxes and with respect to various thresholds and or other parameters of the quality monitor configuration data . If no visible video error is detected the video stream is permitted to be sent to the client for rendering on the display and the portion of the video stream quality monitor ends. Otherwise if a visible video error is detected the video stream quality monitor proceeds to box .

In box the video stream quality monitor determines whether the visible video error is susceptible to masking by a saccade inducing distraction. As a saccade will only interfere with visual perception during an approximately 30 to 50 millisecond time period a saccade may not prevent the user from perceiving errors that persist for a longer duration. In one embodiment the saccade time period may correspond to two to three frames of the video stream. Again the video stream quality monitor may analyze the data obtained in boxes and with respect to various thresholds and or other parameters of the quality monitor configuration data .

When the visible video error cannot be masked by a distraction the video stream quality monitor moves to box and allows the video error to play out in the client without a distraction. In some cases a notification may be provided to the user to explain that a problem is occurring. If the problem is severe enough the application session and transmission of the video stream may for example be suspended or terminated. Thereafter the portion of the video stream quality monitor ends.

When the visible video error can be masked by a distraction the video stream quality monitor proceeds to box and configures the video stream to include at least one distraction to mask the error. To this end the video stream quality monitor may direct the distraction insertion application to insert the distraction. The distraction insertion application then ensures that the distraction is rendered in synchronization with the visible video error to take advantage of saccade masking. Thereafter the portion of the video stream quality monitor ends.

With reference to shown is a schematic block diagram of the computing device according to an embodiment of the present disclosure. The computing device includes at least one processor circuit for example having a processor a memory and one or more graphics devices all of which are coupled to a local interface . To this end the computing device may comprise for example at least one server computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated. The graphics devices may correspond to high performance graphics hardware including one or more graphics processors . Non limiting examples of commercially available graphics processors include the NVIDIA Tesla series. The graphics devices are configured to render graphics corresponding to the applications executed in the computing device .

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are the server application the video stream quality monitor the distraction insertion application the applications the video encoders the wrappers and potentially other applications. Also stored in the memory may be a data store and other data. In addition an operating system may be stored in the memory and executable by the processor .

It is understood that there may be other applications that are stored in the memory and are executable by the processors as can be appreciated. Where any component discussed herein is implemented in the form of software any one of a number of programming languages may be employed such as for example C C C Objective C Java JavaScript Perl PHP Visual Basic Python Ruby Delphi Flash or other programming languages.

A number of software components are stored in the memory and are executable by the processor . In this respect the term executable means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory and run by the processor source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory and executed by the processor or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory to be executed by the processor etc. An executable program may be stored in any portion or component of the memory including for example random access memory RAM read only memory ROM hard drive solid state drive USB flash drive memory card optical disc such as compact disc CD or digital versatile disc DVD floppy disk magnetic tape or other memory components.

The memory is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memory may comprise for example random access memory RAM read only memory ROM hard disk drives solid state drives USB flash drives memory cards accessed via a memory card reader floppy disks accessed via an associated floppy disk drive optical discs accessed via an optical disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also the processor may represent multiple processors and the memory may represent multiple memories that operate in parallel processing circuits respectively. In such a case the local interface may be an appropriate network that facilitates communication between any two of the multiple processors between any processor and any of the memories or between any two of the memories etc. The local interface may comprise additional systems designed to coordinate this communication including for example performing load balancing. The processor may be of electrical or of some other available construction.

Although the server application the video stream quality monitor the distraction insertion application the applications the video encoders the wrappers and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits having appropriate logic gates or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The flowchart of shows the functionality and operation of an implementation of portions of the video stream quality monitor . If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the flowchart of shows a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in may be executed concurrently or with partial concurrence. Further in some embodiments one or more of the blocks shown in may be skipped or omitted. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Also any logic or application described herein including the server application the video stream quality monitor the distraction insertion application the applications the video encoders and the wrappers that comprises software or code can be embodied in any non transitory computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present disclosure a computer readable medium can be any medium that can contain store or maintain the logic or application described herein for use by or in connection with the instruction execution system.

The computer readable medium can comprise any one of many physical media such as for example magnetic optical or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives memory cards solid state drives USB flash drives or optical discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

