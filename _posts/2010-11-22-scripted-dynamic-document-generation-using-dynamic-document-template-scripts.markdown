---

title: Scripted dynamic document generation using dynamic document template scripts
abstract: A dynamic document template having static data, dynamic data, and/or procedural statements may be called by an application on a server. The dynamic document template is separate from the application program and is processed to form an interim script, which is then executed by a host computer system. The script generates document records in HTML or XML format that are output to a document. The data and procedural statements in the dynamic document template may be distinguished through interpreting mark-up language surrounding the data and procedural statements. The dynamic document templates execute in a separate namespace from the application and preserve the state of data in the application. A given application may call more than one dynamic document template to generate different portions of the output document. Additionally, the dynamic document templates may be replaced with new templates without affecting the application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09262185&OS=09262185&RS=09262185
owner: Unisys Corporation
number: 09262185
owner_city: Blue Bell
owner_country: US
publication_date: 20101122
---
The instant disclosure relates to computer programs. More specifically the instant disclosure relates to computer programs for dynamically generating documents.

Conventionally output documents such as those produced by a web server do not include a combination of static and dynamic data. A single script runs on the web server to generate the output document. However there is a need for a script to combine static and dynamic data.

According to one embodiment a method includes executing a dynamic document template. The method also includes generating a script from the dynamic document template. The method further includes creating or appending to an output document based in part on the script.

According to another embodiment a computer program product includes a computer readable medium having code to execute a dynamic document template. The medium also includes code to generate a script from the dynamic document template. The medium further includes code to create an output document based in part on the script.

According to yet another embodiment an apparatus includes a processor and a memory coupled to the processor in which the processor is configured to execute a dynamic document template. The processor is further configured to generate a script from the dynamic document template. The processor is also configured to create an output document based in part on the script.

The foregoing has outlined rather broadly the features and technical advantages of the present invention in order that the detailed description of the invention that follows may be better understood. Additional features and advantages of the invention will be described hereinafter which form the subject of the claims of the invention. It should be appreciated by those skilled in the art that the conception and specific embodiment disclosed may be readily utilized as a basis for modifying or designing other structures for carrying out the same purposes of the present invention. It should also be realized by those skilled in the art that such equivalent constructions do not depart from the spirit and scope of the invention as set forth in the appended claims. The novel features which are believed to be characteristic of the invention both as to its organization and method of operation together with further objects and advantages will be better understood from the following description when considered in connection with the accompanying figures. It is to be expressly understood however that each of the figures is provided for the purpose of illustration and description only and is not intended as a definition of the limits of the present invention.

In one embodiment the user interface device is referred to broadly and is intended to encompass a suitable processor based device such as a desktop computer a laptop computer a personal digital assistant PDA or table computer a smartphone or other a mobile communication device or organizer device having access to the network . In a further embodiment the user interface device may access the Internet or other wide area or local area network to access a web application or web service hosted by the server and provide a user interface for enabling a user to enter or receive information.

The network may facilitate communications of data between the server and the user interface device . The network may include any type of communications network including but not limited to a direct PC to PC connection a local area network LAN a wide area network WAN a modem to modem connection the Internet a combination of the above or any other communications network now known or later developed within the networking arts which permits two or more computers to communicate one with another.

In one embodiment the server is configured to store data or scripts. Additionally spreadsheets for calculating recommendations on the server may access data stored in the data storage device via a Storage Area Network SAN connection a LAN a data bus or the like. The data storage device may include a hard disk including hard disks arranged in an Redundant Array of Independent Disks RAID array a tape storage drive comprising a magnetic tape data storage device an optical storage device or the like. The data may be arranged in a database and accessible through Structured Query Language SQL queries or other data base query languages or operations.

In one embodiment the server may submit a query to selected data from the storage devices . The server may store consolidated data sets in a consolidated data storage device . In such an embodiment the server may refer back to the consolidated data storage device to obtain a set of data elements and or scripts. Alternatively the server may query each of the data storage devices independently or in a distributed query to obtain the set of data elements. In another alternative embodiment multiple databases may be stored on a single consolidated data storage device .

In various embodiments the server may communicate with the data storage devices over the data bus . The data bus may comprise a SAN a LAN or the like. The communication infrastructure may include Ethernet Fibre Chanel Arbitrated Loop FC AL Small Computer System Interface SCSI Serial Advanced Technology Attachment SATA Advanced Technology Attachment ATA and or other similar data communication schemes associated with data storage and communication. For example the server may communicate indirectly with the data storage devices the server first communicating with a storage server or the storage controller .

The server may include modules for interfacing with the data storage devices interfacing a network interfacing with a user through the user interface device and the like. In a further embodiment the server may host an engine application plug in or application programming interface API .

The computer system also may include random access memory RAM which may be SRAM DRAM SDRAM or the like. The computer system may utilize RAM to store the various data structures used by a software application such as data and or scripts. The computer system may also include read only memory ROM which may be PROM EPROM EEPROM optical storage or the like. The ROM may store configuration information for booting the computer system . The RAM and the ROM hold user and system data.

The computer system may also include an input output I O adapter a communications adapter a user interface adapter and a display adapter . The I O adapter and or the user interface adapter may in certain embodiments enable a user to interact with the computer system . In a further embodiment the display adapter may display a graphical user interface associated with a software or web based application. For example the display adapter may display menus allowing an administrator to input dynamic document templates on the server through the user interface adapter .

The I O adapter may connect one or more storage devices such as one or more of a hard drive a compact disk CD drive a floppy disk drive and a tape drive to the computer system . The communications adapter may be adapted to couple the computer system to the network which may be one or more of a LAN WAN and or the Internet. The user interface adapter couples user input devices such as a keyboard and a pointing device to the computer system . The display adapter may be driven by the CPU to control the display on the display device .

The applications of the present disclosure are not limited to the architecture of computer system . Rather the computer system is provided as an example of one type of computing device that may be adapted to perform the functions of a server and or the user interface device . For example any suitable processor based device may be utilized including without limitation including personal data assistants PDAs tablet computers smartphones computer game consoles and multi processor servers. Moreover the systems and methods of the present disclosure may be implemented on application specific integrated circuits ASIC very large scale integrated VLSI circuits or other circuitry. In fact persons of ordinary skill in the art may utilize any number of suitable structures capable of executing logical operations according to the described embodiments.

When calling the dynamic document template the application may pass arguments to the dynamic document template . For example the arguments may be passed in a JavaScript arg Array object. According to one embodiment when the addByTemplate function is executed an arg Array may be passed to the addByTemplate function including information to be passed to the dynamic document template . When passing variables string number and Boolean data types may be passed by value to the dynamic document template . The application may retrieve modified values from the dynamic document template for variables in the passed arg Array. Composite objects such as for example Dataset objects and Array objects may be passed by reference to the dynamic document template .

According to one embodiment the addByTemplate function includes a callback function for the calling Dataset object with supporting logic to convert the document template into an interim template JavaScript validate the caller s arguments load and execute the interim template JavaScript and optional TEMPLATE entry point function and transfer any non by reference return TEMPLATE entry point arguments to the callers arg Array.

The dynamic document template would normally be physically separate from the application such that dynamic document templates may be modified and maintained without impacting the application . Additionally separating the dynamic document template from the application allows debugging action for the addByTemplate function. The dynamic document template may also have access only to variables in its local namespace and variables passed by the application through arguments to the dynamic document template . Thus operations in the dynamic document template have a minimally adverse impact to variables in other portions of the application . Furthermore the separate document template scripts may be called from more than one application program and may be subject to security controls imposed by the application environment.

According to one embodiment a dynamic document template may include lines containing either literal data to generate one output document record that is appended to a target dataset that invoked the addByTemplate function or a procedural statement. Lines of the dynamic document template not placed between procedural delimiters may be interpreted literally. Within literal data assignment delimiters may bracket variables function calls or complex expressions whose evaluation directly inserts data into a generated output dataset record.

The method continues to block with generating a script from the dynamic document template. For example the dynamic document template of may generate a script . The script may be a JavaScript. The dynamic document template may include static data dynamic data and or procedural statements for generating the script . The static data dynamic data and or procedural statements may be distinguished by mark up syntax in the dynamic document template . For example may be used to delimit procedural statements from literal data. Within literal data may be used to delimit dynamic variable data. A TEMPLATE entry point function may be included in the dynamic document template for handling arguments passed from the application . An example of the dynamic document template is presented as Listing in the Computer Program Listing Appendix.

According to one embodiment the script is generated temporarily as an interim script which is executed and the document records generated are appended to an output document . After the interim script is generated a TEMPLATE entry point function of the script may be executed. After the interim script completes execution the interim script may be removed from memory.

According to one embodiment the script is generated from the dynamic document template by interpreting each line in the dynamic document template according to the syntax delimiters to append a new converted line to the interim script .

The method of then continues to block by executing the script to generate document records which may be appended to the output document . The document records may be for example HTML or XML formatted document records. According to one embodiment the document records are appended to a target dataset object as the script executes such that if the script exits after an error the target dataset object contains generated document records up to the time the script encounters the error.

According to one embodiment the script may be executed by a target Dataset object addByTemplate function which calls an entry point function in the script such as TEMPLATE with optional passed arguments.

One example of the method of is illustrated in Listings of the Computer Program Listing. Listing of the Computer Program Listing includes an application with a call to the addByTemplate function that executes a dynamic document template. The called dynamic document template is presented in Listing of the Computer Program Listing. The Listing dynamic document template contains procedural statements e.g. line literal data e.g. line and dynamic data e.g. the second from last line has . Document records created from executing a script generated from the dynamic document template of Listing are shown in Listing assuming the argument passed was a value of 5 for the count entry point function parameter.

Another example of the method of is illustrated in Listings of the Computer Program Listing. Listing of the Computer Program Listing includes an application with a call to the addByTemplate function that executes a dynamic document template. The called dynamic document template is presented in Listing of the Computer Program Listing. Document records generated from the dynamic document template of Listing are shown in Listing .

Yet another example of the method of is illustrated in Listings of the Computer Program Listing. Listing of the Computer Program Listing includes an application with a call to the addByTemplate function that executes a dynamic document template. The called dynamic document template is presented in Listing of the Computer Program Listing. Document records generated from the dynamic document template of Listing are shown in Listing .

A further example of the method of is illustrated in Listings of the Computer Program Listing. Listing of the Computer Program Listing includes an application with a call to the addByTemplate function that executes a dynamic document template. The called dynamic document template is presented in Listing of the Computer Program Listing. Document records generated from the dynamic document template of Listing are shown in Listing .

Separating static data and dynamic data with a dynamic document template as described above improves usability of an application accessing the dynamic document template. The application may call the dynamic document template without having data not passed to the dynamic document template inadvertently altered. Additionally the inclusion of dynamic document templates allows easy modification of an application accessing the dynamic document templates. For example a user or administrator of an application may replace a first set of dynamic document templates with a second set of dynamic document templates without altering code in the application or operation of the application.

Although the present disclosure and its advantages have been described in detail it should be understood that various changes substitutions and alterations can be made herein without departing from the spirit and scope of the disclosure as defined by the appended claims. Moreover the scope of the present application is not intended to be limited to the particular embodiments of the process machine manufacture composition of matter means methods and steps described in the specification. As one of ordinary skill in the art will readily appreciate from the present invention disclosure machines manufacture compositions of matter means methods or steps presently existing or later to be developed that perform substantially the same function or achieve substantially the same result as the corresponding embodiments described herein may be utilized according to the present disclosure. Accordingly the appended claims are intended to include within their scope such processes machines manufacture compositions of matter means methods or steps.

