---

title: Smooth streaming client component
abstract: A streaming abstraction system is described herein that provides application developers a client software development kit (SDK) on top of which to build smooth streaming solutions. The system reduces development time considerably and abstracts platform specific intricacies and protocol handling on the client. In addition, the streaming abstraction system makes it possible to monetize streaming content with advanced features like advertising and analytics and provides advanced capabilities like multiple camera angles, diagnostics, and error handling. In some embodiments, the streaming abstraction system provides an intermediate layer that operates between an application and an underlying client media platform. The intermediate layer manages smooth streaming protocol handling as well as interactions with the platform-specific runtime.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08555163&OS=08555163&RS=08555163
owner: Microsoft Corporation
number: 08555163
owner_city: Redmond
owner_country: US
publication_date: 20100609
---
Streaming media is multimedia that is constantly received by and normally presented to an end user using a client while it is being delivered by a streaming provider using a server . Several protocols exist for streaming media including the MICROSOFT Internet Information Server IIS Smooth Streaming protocol referred to herein as smooth streaming . Prior to smooth streaming most streaming media technologies used tight coupling between server and client with a stateful connection. The stateful connection between client and server created additional server overhead because the server tracked a current state of each client and limited the scalability of the server.

Smooth streaming provides stateless communication between the client and server by breaking media up into chunks that are individually addressable and can be individually requested by clients. For a particular media event or content item the smooth streaming server provides a manifest file that describes each of the chunks that comprise the event. For example a one minute video provided by smooth streaming may include 60 one second audiovisual chunks. Each chunk contains metadata and media content. The metadata may describe useful information about the media content such as the bit rate of the media content where the media content fits into a larger media element a codec used to encode the media content and so forth. The client uses this information to place the chunk into a storyboard of the larger media element and to properly decode and playback the media content. The chunks can be in any format such as Motion Picture Experts Group MPEG 4 boxes or other containers. A smooth streaming client plays a media event to a user by reading the manifest and regularly requesting chunks from the server. The user may also skip around e.g. seek fast forward rewind and the client can provide these behaviors by requesting later or earlier chunks described by the manifest. For live events the server may provide the manifest to the client piecemeal so that the server informs the client of newly available chunks as they become available.

Each chunk may have its own Uniform Resource Locator URL allowing chunks to be cacheable by existing Internet infrastructure. The Internet contains many types of downloadable media content items including audio video documents and so forth. These content items are often very large such as video in the hundreds of megabytes. Users often retrieve documents over the Internet using Hypertext Transfer Protocol HTTP through a web browser. The Internet has built up a large infrastructure of routers and proxies that are effective at caching data for HTTP. Servers can provide cached data to clients with less delay and by using fewer resources than re requesting the content from the original source. For example a user in New York may download a content item served from a host in Japan and receive the content item through a router in California. If a user in New Jersey requests the same file the router in California may be able to provide the content item without again requesting the data from the host in Japan. This reduces the network traffic over possibly strained routes and allows the user in New Jersey to receive the content item with less latency.

While smooth streaming provides a great experience for viewing streaming media over the Internet and other networks its implementation involves a significant amount of client side work. For example the client has to understand manifests be able to dynamically build manifests for live events where portions of the manifest are received over time understand chunk unboxing and assembly for decoding by a codec synchronizing multiple streams such as audio and video data and so forth. In addition using smooth streaming involves tracking heuristics and adaptive responsiveness e.g. to the rate of making chunk requests on the client. The heuristics are complicated and needed for adaptive streaming to work properly and provide a great user experience. Client development is complex and each developer that wants to play smooth streaming content has to deal with intricate platform specific details and then write a smooth streaming client.

A streaming abstraction system is described herein that provides application developers a consistent client software development kit SDK called the IIS Smooth Streaming Client on top of which to build smooth streaming solutions. The system reduces development time considerably and abstracts platform specific intricacies and protocol handling on the client. In addition the streaming abstraction system makes it possible to monetize streaming content with advanced features like advertising and analytics and provides advanced capabilities like multiple camera angles diagnostics and error handling. In some embodiments the streaming abstraction system provides an intermediate layer that operates between an application and an underlying client media platform. The intermediate layer manages smooth streaming protocol handling as well as interactions with the platform specific runtime. The system provides the developer with an interface such as a SmoothStreamingMediaElement SSME class provided by the IIS Smooth Streaming Client through which the application can access all of the power of the intermediate layer. The interface allows developers to present typical operations like play pause skip and so forth in a user interface as well as more complex operations like scheduling an advertisement in between video segments choosing a track for video setting up closed captions and so forth. Thus the streaming abstraction system frees the developer to add features to the application while the system manages common interactions with the smooth streaming server and the client platform runtime component.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

A streaming abstraction system is described herein that provides application developers with a consistent client software development kit SDK on top of which to build smooth streaming solutions. The system reduces development time considerably and abstracts platform specific intricacies and protocol handling on the client. In addition the streaming abstraction system makes it possible to monetize streaming content with advanced features like advertising and analytics and provides advanced capabilities like multiple camera angles diagnostics and error handling. In some embodiments the streaming abstraction system provides an intermediate layer that operates between an application and an underlying client media platform. For example the system can use MICROSOFT SILVERLIGHT as an underlying media platform and provide easy smooth streaming playback to the application. In other embodiments the system may use other media playback runtimes.

An intermediate layer provided by the system manages smooth streaming protocol handling as well as interactions with the platform specific runtime. The system provides the developer with an interface such as a SmoothStreamingMediaElement SSME through which the application can access all of the power of the intermediate layer. The interface allows developers to expose typical operations like play pause skip and so forth as well as more complex operations like scheduling an advertisement in between video segments choosing a track for video setting up closed captions and so forth. Thus the streaming abstraction system frees the developer to add features to the application while the system manages common interactions with the smooth streaming server and the client platform runtime.

In some embodiments the streaming abstraction system is built using a layered architecture. The basic components of this architecture are a smooth streaming core the SSME interface exposed to applications and the smooth streaming client application. The smooth streaming client application includes the final user interface exposed to users end user functionality such as controls for interacting with content or altering playback and so forth. The SSME interface provides a consistent familiar interface for smooth streaming application development. In some embodiments the SSME interface signature closely mirrors that of a MediaElement interface provided by the underlying platform for playing conventional e.g. not smooth streaming multimedia content such as local or downloaded video files although the system can also operate with a different interface and may diverge from the MediaElement interface in the future. The smooth streaming core includes a smooth streaming source component that interacts with the underlying platform runtime for the actual streaming. This and other components may be inaccessible to developers e.g. through private or hidden interfaces but may be part of the same module or software component in which the streaming abstraction system is implemented.

The core may also include a diagnostics component that collects tracing and diagnostics information for the system. For example application developers may want to determine average bitrate and other statistics useful for application tuning or for display to application users. In some embodiments the smooth streaming core includes an extension component that provides an architecture for adding vertical extensions built on top of the SSME interface. An extension layer allows developers platform teams to build extensions that can be then used as needed as a part of applications. The core includes those functions that are broadly used while the extension layer provides functions for more specialized purposes such as playlists rough cut editing and so forth. Extensions add additional functionality using hooks in the SSME.

The application interface component provides an interface to client applications through which the applications can access smooth streaming media. For example the SSME interface described herein provides one application interface through which applications can select tracks play smooth streaming media control playback e.g. pause skip insert advertisements and so forth. The application interface component may provide a variety of functions that can be called by applications using a variety of programming languages and platforms. For example the SSME interface in one embodiment uses MICROSOFT .NET and can interact with .NET languages e.g. C VB.NET and so on .

The manifest management component downloads manifest information from a smooth streaming server that describes smooth streaming media to be played by the system . A manifest may include an extensible markup language XML file or other format that describes one or more available tracks quality levels available e.g. based on video bitrate or audio encoding format and chunks that make up the content. Each chunk may include an HTTP cacheable portion of the media retrievable at a specified URL. The chunk may include a frame MPEG Group of Pictures GOP particular number of seconds or other appropriate subdivision of content for transmission in parts from a server to a client. In some embodiments the manifest management component handles manifest updates for live events during which a smooth streaming server provides updates as the event progresses so that the client can build a manifest and find out about new chunks that are available.

The chunk management component retrieves one or more chunks associated with smooth streaming media and prepares the chunks for playback by an underlying platform. For example the chunk management component may identify chunks in the manifest and periodically issue requests to retrieve new chunks from a server. Upon receipt of each chunk the component places the chunks in a playback queue. The component may also unbox the received chunks to extract metadata and content as well as providing any decoding to place the content in a format that the underlying platform can playback. In some cases the underlying platform may provide one or more codecs associated with the content so that the chunk management component extracts the content from an on the wire format and provides it to the platform layer for decoding and playback.

The heuristics component analyzes the success of receiving packets from the server and adapts the client s requests based on a set of current network and other conditions. For example if the client is routinely receiving media chunks late then the component may determine that the bandwidth between the client and the server is inadequate for the current bit rate and the client may begin requesting media chunks at a lower bit rate. Monitoring may include measurement of other heuristics such as render frame rate window size buffer size frequency of rebuffering and so forth. Media chunks for each bit rate may have a distinguished URL so that chunks for various bit rates are cached by Internet cache infrastructure. Note that the server does not track client state and does not know what bit rate any particular client is currently playing. The server can simply provide the same media element in a variety of bit rates to satisfy potential client requests under a range of conditions. In addition the initial manifest and or metadata that the client receives may include information about the bit rates and other encoding properties available from the server so that the client can choose the encoding that will provide a good client experience.

The timeline management component determines a timeline that represents a duration of the smooth streaming media and allows the client application to make requests that use the timeline as a reference point. For example the client application may display a playback bar to the user that shows a notch that advances as the streaming media is played from beginning to end. To do this the system informs the client application or makes available through the application interface component an expected timeline. For live events where the full duration of the event is not yet known the component may add to the timeline over time or provide an estimated completion for the event. The client application may allow the user to click the playback bar to select a particular location e.g. seeking within the streaming presentation and upon receiving such a selection the application may invoke the application interface component and provide a time for seeking relative to the timeline established by the timeline management component .

The state management component manages state information about ongoing playback and provides client applications with consistent state indications. The component allows state management within the SSME and provides developers an easy way to track the state of the playback without having to understand potentially changing conditions. The state management component may also allow client applications to set and receive notification of markers and other state related points within a presentation.

In some embodiments the manifest management component chunk management component heuristics component timeline management component and state management component comprise a smooth streaming core layer in a layered architecture of the streaming abstraction system . The smooth streaming core may not be directly available to applications but may be exposed through the application interface component so that applications can request information from the core and invoke particular operations using the core.

The extension component provides a uniform interface through which the system can be extended by developers. For example developers may want to provide extensions to perform additional actions not natively provided by the smooth streaming core. For example a developer of an advertisement tracking site that provides analytics or advertising may provide an extension that allows client application developers that use the tracking site to update the tracking site about media playback. For example the developer may have a contract with the tracking site that specifies that a particular advertisement will be shown and upon showing the advertisement the developer may inform the tracking site so that the developer can be paid. Rather than each developer writing code to update the tracking site the tracking site or any of the developers can write an extension for use with the streaming abstraction system . The extension component provides event notifications at relevant times during the operation of the system and receives requests to retrieve information and perform whatever actions are relevant for the particular extension. In general an extension can do anything that an application can do and may even receive an instance of the same SSME interface.

The configuration component provides an interface through which developers can configure the system . For example the component may receive information about developer extensions.

The track selection component allows a client application to select available streaming media tracks for playback. A streaming media presentation may provide tracks having multiple types of content e.g. video audio text and may also provide multiple tracks related to similar content e.g. different camera angles of video of the same event . The track selection component provides a list of tracks to a client application and receives one or more track selections from the application through the application interface component .

The advertising management component allows a client application to insert advertisements into a streaming media presentation. In smooth streaming advertisements may be inserted by the server or the client. Client application developers may have contractual or other obligations to display advertisements at particular locations within a streaming media presentation or after specified intervals. The advertising management component provides through the application interface component functions for uniformly inserting advertisements so that applications do not have to manage the low level aspects of displaying an advertisement and pausing any on going presentation.

The diagnostics analytics component provides a facility for diagnosing errors and receiving reports related to playback of smooth streaming media. The component may provide statistics such as an average bitrate of video playback the amount of time content has been played and so forth as well as diagnostic information such as which servers provided requested media a particular selected media source advertisements displayed and so forth.

The platform interface component provides an interface to an underlying platform for playing media content. The streaming abstraction system operates as an intermediate layer for abstracting common functionality between a client application that uses smooth streaming media and a platform for playing back media. The platform may include an operating system computer hardware a runtime component an application sandbox and other available underlying functionality. The platform interface component accesses available platform functionality to playback media using client hardware store media information log statistics and so forth. In some embodiments the system uses the MICROSOFT SILVERLIGHT platform which can operate within a web browser or as a standalone application to playback media.

The computing device on which the streaming abstraction system is implemented may include a central processing unit memory input devices e.g. keyboard and pointing devices output devices e.g. display devices and storage devices e.g. disk drives or other non volatile storage media . The memory and storage devices are computer readable storage media that may be encoded with computer executable instructions e.g. software that implement or enable the system. In addition the data structures and message structures may be stored or transmitted via a data transmission medium such as a signal on a communication link. Various communication links may be used such as the Internet a local area network a wide area network a point to point dial up connection a cell phone network and so on.

Embodiments of the system may be implemented in various operating environments that include personal computers server computers handheld or laptop devices multiprocessor systems microprocessor based systems programmable consumer electronics digital cameras network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices systems on a chip SOCs set top boxes and so on. The computer systems may be cell phones personal digital assistants smart phones personal computers programmable consumer electronics digital cameras and so on.

The system may be described in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. Generally program modules include routines programs objects components data structures and so on that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments.

Continuing in block the system starts downloading media associated with the media source on behalf of the application. The system performs media setup and retrieval on behalf of the application without the application having to write any specific programming code other than invoking the system with the location of the streaming media. The system may perform other actions on behalf of the application such as selecting an initial bitrate or encoding to download determining a window size for displaying the selected media and informing the application of the size for example. Continuing in block the system starts playing back the downloaded media on behalf of the application. The application does not need any particular codec support or need to have any understanding of smooth streaming protocols. In some embodiments the SSME interface through which the application interacts with the system mirrors and adds more capabilities over the MediaElement interface provided natively by the SILVERLIGHT platform so that the application can interact with smooth streaming media as easily as local media types.

Continuing in block the system receives an indication that a user action related to the media playback has occurred. For example the user may attempt to skip to a new location on a media playback timeline fast forward the media pause the media and so forth. The application displays its own controls and user interface and upon receiving user input passes that input to the abstraction layer for handling. Continuing in block the system modifies the media playback in accordance with the received indication of the user s action. For example if the user requested to display a higher quality version of the media content then the system may switch to a higher bitrate stream download chunks related to the higher bit rate resize the client side display to accommodate a larger media display area and begin playing back the higher bitrate stream for display to the user. After block these steps conclude.

Continuing in block the system provides the buffer to a platform layer that includes audiovisual decoding and playback facilities. For example the MICROSOFT SILVERLIGHT platform and other platforms provide codecs that can decode audiovisual data and has access to hardware such as speakers that can playback audiovisual data. The streaming abstraction system frees the client application from low level management of media data and lets the application developer focus on adding application features such as advanced user controls and branding information. Continuing in block the system receives a media change indication. For example the client may determine that the user has resized a video window or that the connection between the client and the server has bandwidth too low to support a current bitrate. The system may change the bitrate based on the new window size or available bandwidth and begin downloading media chunks related to the new bitrate from one or more servers.

Continuing in block the system flushes the buffer to provide modified media with less delay. The system could wait for the existing buffer to be exhausted but based on an application request or internal determination may instead flush the buffer and start playing the newly received chunks more quickly so that the user sees the change in close proximity to the event that led to the change e.g. the user resizing the window . Continuing in block the system provides modified media chunks to the platform layer for playback. The system interacts with the platform layer on behalf of a client application to respond to these and other types of changes so that the application can focus on application level features. Common low level implementation for getting a smooth streaming client up and running quickly are handled by the streaming abstraction system on behalf of the application. After block these steps conclude.

Although some components are illustrated in those of ordinary skill in the art will recognize that the system may contain other components not shown that make IIS Smooth Streaming work but are abstracted from the developer. In the interest of straightforward presentation of the developer SDK layer these items are not shown in .

The following table illustrates some of the functions provided by the SSME interface to abstract management of smooth streaming content from applications in some embodiments. Methods inherited from parent classes are omitted e.g. UlElement FrameworkElement Control DependencyObject and so forth . Those of ordinary skill in the art will recognize that other interface specifications can be used to provide similar results and may present various positive or negative design trade offs while providing similar functionality and operation.

The following are methods that the application can call to manipulate smooth streaming media presentations.

The following are properties that the application can retrieve and in some cases set to determine information about smooth streaming media presentations and modify behavior of the system.

The following are events that the system fires to notify a client application about changes that are potentially relevant to the application. In many cases the application calls methods of the system in response to the events fired by the system.

An application using the above interface can very easily insert smooth streaming content for display in a web page. The following Extensible Application Markup Language XAML shows a simple tag for including smooth streaming media in a web application in an embodiment that uses SILVERLIGHT as the runtime layer 

This line defines a new SSME interface indicates a smooth streaming source through the SmoothStreamingSource property and specifies that the presentation begin playing as soon as it is available through the AutoPlay property .

In some embodiments the streaming abstraction system provides multiple audio stream selection through the SSME interface. For example in addition to the interface specification described herein the SSME interface may include a SelectStreams API for selecting audio streams from multiple available audio streams. For example a content producer may provide audio in several languages using particular techniques like surround sound and so forth.

In some embodiments the streaming abstraction system provides one or more APIs for requesting optional content such as captions. The system may include events or properties that identify whether optional content is available methods for retrieving the optional content and an auto update property that causes the system to automatically keep getting optional content until the property is unset.

In some embodiments the streaming abstraction system provides one or more APIs for retrieving content for offline display. For example a cache plugin extension may allow a user that is going to be getting on an airplane to instruct the system to download a particular smooth streaming media presentation and cache the manifest and media chunks on a laptop or other computer system.

In some embodiments the streaming abstraction system allows an application to be stateless. The interface described herein allows an application to receive a pool of markers without having to manage multiple sets of markers. The application also can be assured that certain events will happen in a defined order e.g. receiving deselect before select events by definition of the interface contract of the SSME or other interface. These properties allow the application to be stateless and react to events as they are received. If a clip changes the application can react and redraw a playback timeline or other controls. If the screen size changes the application can request a different bitrate and flush existing buffers. After setting up a particular presentation to play the application can rely on the system to provide notifications at appropriate decision points so that the application developer can implement particular behavior without tracking detailed information about the media state.

From the foregoing it will be appreciated that specific embodiments of the streaming abstraction system have been described herein for purposes of illustration but that various modifications may be made without deviating from the spirit and scope of the invention. Accordingly the invention is not limited except as by the appended claims.

