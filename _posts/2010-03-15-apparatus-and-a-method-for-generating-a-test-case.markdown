---

title: Apparatus and a method for generating a test case
abstract: A state-transition system includes a plurality of states and a first transition representing a state-change based on an external event occurred into a system to be checked. A plurality of requirement items includes a precondition and a postcondition in correspondence with the external event. By partially selecting the precondition and the postcondition from the plurality of requirement items, a state map to map a state onto truth values of the precondition and the postcondition is generated. By contracting the state-transition system with the state map, a quotient state-transition system is generated. The quotient state-transition system includes a plurality of second transitions among a plurality of groups each having states. By tracing each second transition in the quotient state-transition system, a representative transition path is generated. The representative transition path is regenerated as a transition path in the state-transition system. The transition path is output as a test case.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08370808&OS=08370808&RS=08370808
owner: Kabushiki Kaisha Toshiba
number: 08370808
owner_city: Tokyo
owner_country: JP
publication_date: 20100315
---
This application is based upon and claims the benefit of priority from Japanese Patent Application No. 2009 063281 filed on Mar. 16 2009 the entire contents of which are incorporated herein by reference.

The present invention relates to an apparatus and a method for generating a test case of a system from a specification of the system.

At a verification stage of a system development such as a software from a formal model of a developed object system a MBT model based testing to automatically generate a test case verification steps to verify the system is used. As one of the MBT from a state transition system covering states and transitions possible for the system a method for generating a test case by generating a path according to algorithm of graph theory is well known. By using the test case generated by this method a test covering state transitions occurred in the system can be performed. Above method is disclosed in following references.

However the state transition system includes many similar state transitions and a test case acquired from the state transition system is often redundant. For example followings are examples of the test case in a task management function of an operating system.

Difference between the cases 1 and 2 is only a task ID. It is sufficient that only one of the cases 1 and 2 is tested according to circumstances. Especially in development of a large scale system it is almost impossible that all cases are verified by covering. While coverage for items to be verified is maintained it is realistic that all cases are suitably sampled and remained cases are tested.

As one solution as disclosed in JP A No. 2009 266092 Kokai following technique to generate a test case is proposed. Briefly in this technique a map for state sets of the state transition system is given and an equivalence relation between states is defined by equality of mapped values of the states by the map. Based on the equivalence relation the state transition system is previously contracted and a test case is generated from the contracted state transition system quotient state transition system .

Concretely in this technique states in the state transition system are identified by an equivalence relation of mapped values by a state map indicated by a user. As to the equivalence relation of mapped values by the state map states having equal output result equal mapped values by a state map are identified and states having different output result different mapped values by the state map are not identified. In this case the state map is a map from a state space.

Then a plurality of states identified is grouped into one abstract state one class and the state transition system can be small contracted. The abstract state is a virtual state which a plurality of states identified by the equivalence relation is recognized as one state. Furthermore a test case can be generated to cover each state of the contracted small state transition system at least one time.

In above mentioned method the state map largely influences a coverage and an efficiency trade off relation of a test case to be output. However as to a state map to generate the test case satisfying the coverage and the efficiency there is not a means for reasonably determining the state map.

The present invention is directed to an apparatus and a method for generating a test case to satisfy a desired coverage and an efficiency by determining a state map.

According to an aspect of the present invention there is provided an apparatus for generating a test case of a system to be checked comprising a first memory configured to store a state transition system including a plurality of states and a first transition between two of the plurality of states in the system each state being represented by a plurality of internal variables the first transition representing a state change based on an external event occurred into the system a second memory configured to store a plurality of requirement items each including a precondition and a postcondition in correspondence with the external event the precondition describing a state of the system before occurrence of the external event the postcondition describing a state of the system after occurrence of the external event a state prediction extraction unit configured to select m m an integral number equal to or larger than one requirement items from the second memory and extract the precondition and the post condition from the m requirement items a state map generation unit configured to generate a state map to map an indicated state onto truth values of the precondition and the postcondition a state equivalence relation definition unit configured to acquire a plurality of mapped values by mapping each of the plurality of states by the state map and generate a plurality of groups each including states having the same mapped value a quotient state transition system generation unit configured to select two groups from the plurality of groups set a second transition from one of the two groups to the other of the two groups when the first transition from one state included in the one to one state included in the other exists in the state transition system and generate a quotient state transition system including a plurality of second transitions among the plurality of groups by repeating selection of the two groups and set of the second transition a representative transition path generation unit configured to generate a representative transition path as a sequence of each second transition by tracing the plurality of second transitions from a predetermined group of the plurality of groups a transition path generation unit configured to select the second transition from the representative transition path in order of the tracing specify the first transition of which an origin state is same as one state of an origin group of the selected second transition and a destination state of a previous first transition specified a destination state is same as one state of a destination group of the selected second transition and generate a test case including a sequence of each first transition specified and an output unit configured to output the test case.

Hereinafter embodiments of the present invention will be explained by referring to the drawings. The present invention is not limited to the following embodiments.

In the test case generation apparatus accepts input of a specification of a system to be checked. The specification includes a requirement item table requirement item data an atomic predicate table and a state transition system . The test case generation apparatus includes a first memory means to store the state transition system input a second memory means to store the requirement item table input and the atomic predicate table input and a read out means to read data from the first and second memory means.

In the system to be checked internal processing is executed with occurrence of an external event and an internal state is changing hourly. The state transition system is composed by states possible for the system to be checked and transitions first transitions representing a state change of the system based on the external event occurred for the system Refer to explained afterwards . A state of the system is represented by a group of a plurality of interval variables.

As to an external event In order to simplify it is often called event a condition related to an internal state to accept occurrence of the event and a condition related to change of the internal state after internal processing are prescribed. The former condition is called precondition and the latter condition is called postcondition . Briefly the precondition is a condition of a state required for the system before occurrence of the event and the postcondition is a condition of a state required for the system after occurrence of the event. The precondition and the postcondition are described as a state predicate. The event the precondition and the post condition are called requirement item . The requirement item is prescribed with each event. A table format listing these items is a requirement item table Refer to explained afterwards . The requirement item is a condition of a behavior that a designer requires the system. In other words the condition of the behavior is an item to be verified after development of the system.

The atomic predicate table is a table of atomic predicates composing state predicates of the precondition and the postcondition in the requirement item table Refer to explained afterwards . The atomic predicate is described as a condition related to a value of one internal variable.

In the test case generation apparatus outputs a test case of the system to be checked. The test case is a list including operation steps event sequence to test the system to be checked and an expected value state transition sequence as a test result of the system to be checked by the operation steps. The test case generation apparatus includes an output means for outputting the test case .

Before detail explanation of the test case generation apparatus in a subject processed in the present embodiment is explained.

In the present embodiment a simplified one of a cruise controller or a cruise control system is the system to be checked. By using the simplified one as the subject the present invention is explained. The cruise control system is one kind of vehicle control system which automatically preserves a constant velocity without stepping an access pedal.

The cruise controller accepts four kinds of external events. The internal processing is executed with occurrence of the external event and values of the internal variables are changing hourly. Accordingly an internal state of the cruise controller also changes.

As to a construction of a state map and a scale reduction of the test case by the state map an example which the cruise controller is further simplified is explained. In this example the requirement item is limited to an item the number of requirement items m 1 in and the state transition system is simplified as shown in .

In the state transition system of states satisfying a precondition of the requirement item are two states and . State transitions as a test of the requirement item are state transitions and as an event cruise switch ON from the states and . Each state transition reaches a state or which satisfies the postcondition of the requirement item . Other state transitions except for the state transitions and are not related with a test of the requirement item .

From this state transition system a test case is generated so that all state transitions are covered at least one time. is the test case 16 transitions generated. This test case includes above mentioned two state transitions and covers all requirement items In this example item only . However this test case includes two state transitions and having the same precondition and the same postcondition and includes fourteen state transitions unrelated with the test of the requirement item. Accordingly this test case is open to discussion for improvement of efficiency.

Accordingly in the present embodiment in order to acquire an effective test case satisfying a coverage criteria a criteria which determines a ratio or the number of requirement items to be covered in all requirement items a function to output a combination of satisfiability truth value of the precondition and the postcondition is composed as a state map. For example a state satisfies the precondition but does not satisfy the postcondition. Accordingly a mapping result mapped value of the state by the state map is OK NG . As to OK NG the left element corresponds to satisfiability truth value of the precondition and the right element corresponds to satisfiability truth value of the postcondition. OK corresponds to truth and NG corresponds to false. On the other hand a state satisfies the postcondition but does not satisfy the precondition. Accordingly a mapping result mapped value of the state by the state map is NG OK .

From this contracted state transition system a test case is generated so that all state transitions are covered at least one time as usual. is a generated test case seven transitions . In state transitions and corresponding to the test are contracted as one transition. As a result an effective test case of which scale is reduced within a range satisfying the coverage criteria can be generated.

The above mentioned is explanation of construction example of the state map to generate an effective test case satisfying the prefixed coverage criteria and effect of size reduction of the test case.

In a previous paragraph a concrete example of construction method of the state map by limiting the requirement item as one is explained. This method can be extended to a general case that a plurality of requirement items is covered. In order to generate an effective test case covering the plurality of requirement items it is sufficient that a state map to output combination of satisfiability truth value of the precondition and the postcondition of all requirement items is constructed. This is called construction method corresponding to a first embodiment explained afterwards .

For example in case of two requirement items a state map is satisfiability of precondition of requirement item satisfiability of postcondition of requirement item satisfiability of precondition of requirement item satisfiability of postcondition of requirement item . A state transition system contracted by the state map includes eight abstract states of which mapped value is OK and also includes eight abstract states of which mapped value is OK . In this case means both OK truth and NG false . The former OK is a state satisfying the precondition of the requirement item and the latter OK is a state satisfying the precondition of the requirement item .

Accordingly a test case generated from this contracted state transition system satisfies the coverage criteria In this case all requirements need be covered related to two requirement items. On the other hand the state transition system is contracted. Accordingly in comparison with the case of non contraction a size of the test case can be reduced.

However the construction method has a possibility of explosion of the size of the test case with increase of the number of requirement items. Because in proportion to increase of the precondition and the postcondition composing the state map the number of states of the contracted state transition system exponentially increases. As explained as the example in the previous paragraph in case of composing the state map from the precondition and the post condition of one requirement item the contracted state transition system includes at most four states. However in case of two requirement items the contracted state transition system includes sixteen states at the maximum.

Accordingly in order to improve efficiency another construction method construction method corresponding to a second embodiment explained afterwards can be considered. In this method first all atomic predicates included in each requirement item is extracted an appearance frequency of each atomic predicate is calculated and a state map is composed by an atomic predicate having the largest appearance frequency. A state transition system is contracted by the state map and a test case is generated and evaluated. If the test case does not satisfy a coverage criteria an atomic predicate having the second largest appearance frequency is added to the state map and generation and evaluation of the test case are executed again. This processing is repeated until the test case satisfies the coverage criteria. This is slightly a heuristic method. However whenever the atomic predicate is added at least the coverage of the test case a ratio or the number of requirement items covered by the test case monotonously increases and the test case finally satisfies the coverage criteria. The reason why the coverage of the test case monotonously increases by adding the atomic predicate to the state map is that the abstract state is detailed by adding the atomic predicate. Briefly by detailing one state transition contracted more detail test case can be acquired. Accordingly at least coverage of the test case monotonously increases.

Furthermore a construction method corresponding to a third embodiment explained afterwards as the reverse idea of the construction method can be considered. First a state map is constructed by all atomic predicates appeared in each requirement item. A state transition system is contracted by the state map and a test case is generated and evaluated. If the test case satisfies the coverage criteria an atomic predicate having the smallest appearance frequency is excluded from the state map and generation and evaluation of a test case are repeated while the test case satisfies the coverage criteria. By this method the test case having high efficiency satisfying the coverage criteria can be generated.

Apparatus component of the first embodiment corresponds to a part surrounded by an inside dotted line in . All apparatus surrounded by an outside dotted line is a component related to the second and third embodiments explained afterwards. Component of a part surrounded by the inside dotted line includes a state predicate extraction unit a state map generation unit a test case generation unit a first memory to store a state transition system a second memory to store a requirement item table and an atomic predicate table and an output unit to output a test vase . Hereinafter the first embodiment is explained in detail.

A state transition system composed by states and state transitions each possible for a system to be checked is previously prepared. Furthermore as a combination of an external event of the system a precondition and postcondition expected for the system a plurality of requirement items formally expressed for the system is prepared. Among the plurality of requirement items a state map is constructed by calculating a direct product of state predicates described in the precondition and the postcondition of a selected requirement item.

Furthermore by using a method of a fourth embodiment test case generation apparatus and method disclosed in JP A No. 2009 266092 Kokai explained afterwards the state transition system is contracted with the state map and the test vase is generated so that all state transitions of the contracted state transition system quotient state transition system are covered.

Input of the apparatus is a specification of the system to be checked. The specification comprises the requirement item table the atomic predicate table and the state transition system . Output of the apparatus is the test case .

Each requirement item of the requirement item table shown in and each atomic predicate of the atomic predicate table shown in are formally described so that the computer can interpret. These are expressed as a function of programming language Scheme Non patent reference 2 . Briefly as to this function a state is input and satisfiability truth value is output. Moreover requirement items in are same as those in and atomic predicates in are same as those in .

The state transition system is expressed as a state table shown in and a state transition table shown in . An initial state is a state . The state table represents an identifier SID State ID of each state and contents state . The state transition table represents an identifier TID Transition ID of each transition an identifier SID of an origin state an identifier SID of a destination state and contents external event of the transition.

For example a state SID of the state table means internal variables such as vel velocity cruise cruise lamp OFF and set set lamp OFF . Furthermore a state transition TID of the state transition table is a transition corresponding to internal processing by an external event CruiseOn and transits from a state to a state .

State predicates described as the precondition and the postcondition in the requirement item table are extracted. If the state predicate is not an atomic predicate a predicate name is acquired by analyzing a character string defined as the state predicate. For example in requirement item table define PnotPnotP s and P s not P s not P s is definition of the state predicate. The state predicate name is PnotPnotP .

From state predicates extracted at the processing a state map is constructed as a function to output satisfiability of each state predicate by a list format. Assume that state predicates F F . . . Fn n units are state predicates extracted at the processing . In this case as to state s a function to output a list F s F s . . . Fn S is defined as the state map. This F s represents a result which the predicate F is applied to the state s i.e. satisfiability truth value of the predicate F. This state map is described as define stateFunc s list F s F s . . . Fn s .

Output State predicates PnotPnotP P P In this case all requirement items m 2 in all requirement item table are object 

Apparatus component of the second embodiment corresponds to a part except for the unit surrounded by an outside broken line in . As to the component of the second embodiment units and are added to the component of the first embodiment. Briefly the component of the second embodiment includes the state predicate extraction unit the state map generation unit the test case generation unit the first memory to store the state transition system the second memory to store the requirement item table and the atomic predicate table the output unit to output the test case an atomic predicate extraction unit an appearance frequency analysis unit a high frequency atomic predicate extraction unit and a coverage evaluation unit .

Based on the first embodiment a method for constructing the state map is extended. As to the method for constructing a state map according to the second embodiment an atomic predicate having the highest appearance frequency is first selected from a set of state predicates extracted from each requirement item. Operation which each atomic predicate is added to the state map a direct product with the state map in higher order of the appearance frequency is repeated until a test case generated by the state map satisfies the coverage criteria.

Flow of processing of the apparatus is explained. is a flow chart of processing of the apparatus. The second embodiment is extended from the first embodiment and parts different from the first embodiment are shown as oblique line blocks in the flow chart. Hereinafter different parts from the first embodiment are mainly explained.

Output The list of appearance frequency order of atomic predicates P P P As to a list of atomic predicates acquired at Step appearance frequency of each atomic predicate in a set of state predicates is calculated and each atomic predicate is sorted in order of appearance frequency. P has the highest appearance frequency. 

Output An atomic predicate P The atomic predicate having the highest appearance frequency is extracted from the list of appearance frequency acquired at Step . At the same time P is deleted from the list of appearance frequency. 

Output The state map P The state map does not exist at the present time. Accordingly an atomic predicate extracted at Step is regarded as the state map 

 The contracted state transition system as intermediate data is shown in the number of states the number of state transitions 

Output An atomic predicate P The atomic predicate having the second highest appearance frequency is extracted from the list of appearance frequency. At the same time P is deleted from the list of appearance frequency. 

Output The state map define stateFunc s list P s P s The state map P already exists. Accordingly P and P are calculated as a direct product. 

 The contracted state transition system as intermediate data is shown in the number of states the number of state transitions 

Output The test case acquired at Step Processing is completed because the coverage criteria is satisfied. 

Apparatus component of the third embodiment corresponds to a part except for the unit surrounded by an outside broken line in . As to the component of the second embodiment the unit is deleted from and the unit is added to the component of the second embodiment. Briefly the component of the third embodiment includes the state predicate extraction unit the state map generation unit the test case generation unit the first memory to store the state transition system the second memory to store the requirement item table and the atomic predicate table the output unit to output the test case the atomic predicate extraction unit an appearance frequency analysis unit a low frequency atomic predicate extraction unit and the coverage evaluation unit . As to each unit having the same name used in the second embodiment its operation is basically same as that of the second embodiment. However processing of the state map generation unit is partially different.

As to the method for constructing a state map according to the third embodiment a state map maximum set is first calculated as a direct product of all atomic predicates in requirement items. While a test case generated by the state map is covering the requirement items operation which an atomic predicate is deleted from the state map in lower order of the appearance frequency is repeated.

Briefly by adaptively selecting all atomic predicates the state map as a direct product of atomic predicates of selected h units h integral number equal to or larger than 1 is generated so that the coverage satisfies the criteria. This operation is same as the second embodiment. However in the second embodiment the atomic predicate is added in higher order of appearance frequency. On the other hand in the third embodiment the atomic predicate is deleted from all atomic predicates in lower order of appearance frequency. This concrete method of the third embodiment is different from the second embodiment.

Flow of processing of the apparatus is explained. is a flow chart of processing of the apparatus. The third embodiment is largely similar to the first embodiment and parts different from the second embodiment are shown as oblique line blocks in the flow chart. Hereinafter different parts from the second embodiment are mainly explained.

Output The list of appearance frequency order of atomic predicates P P P As to a list of atomic predicates acquired at Step appearance frequency of each atomic predicate in a set of state predicates is calculated and each atomic predicate is sorted in order of appearance frequency. 

 The contracted state transition system as intermediate data is shown in the number of states 4 the number of state transitions 10 

Output The list of appearance frequency order of atomic predicate P P P an atomic frequency having the lowest appearance frequency in the list acquired at Step is deleted from the list of appearance frequency. 

 The contracted state transition system as intermediate data is shown in the number of states 3 the number of state transitions 7 

Output The list of appearance frequency order of atomic predicate P P an atomic frequency having the lowest appearance frequency in the list acquired at Step is deleted from the list of appearance frequency. 

 The contracted state transition system as intermediate data is shown in the number of states 2 the number of state transitions 4 

Idea of the second and third embodiments can be applied to the first embodiment. In case of applying the idea of the second embodiment appearance frequency of state predicates precondition or postcondition in each requirement item is calculated and a state map is constructed from a state predicate having the highest appearance frequency. A state transition system is contracted by this state map and a test case is generated from the contracted state transition system and evaluated. If the test case does not satisfy the coverage criteria another state predicate precondition or postcondition having the second highest appearance frequency is added to the state map. A test case is generated from the state transition system contracted by this state map and evaluated. This processing is repeated until the test case satisfies the coverage criteria. In this way by adding the state predicate condition to the state map at least the coverage of the test case monotonously increases and the coverage criteria is last satisfied.

As a reference the reason why the coverage of the test case monotonously increases by adding the condition atomic predicate to the state map is explained. Because when the condition is added the abstract state becomes more detailed. For example if the state map is constructed by the precondition and the postcondition of requirement item only precondition of requirement item OK postcondition of requirement item NG exists as one abstract state. Assume that a precondition of requirement item is added to this state map. In this case the one abstract state is detailed as precondition of requirement item OK postcondition of requirement item NG precondition of requirement item OK and precondition of requirement item OK postcondition of requirement item NG precondition of requirement item NG . Briefly one contracted state transition is divided into two detailed state transitions and a detailed test case is acquired from the two detailed state transitions. Accordingly at least coverage of the test case monotonously increases.

Next in case of applying the idea of the third embodiment a state map is constructed from all state predicates precondition or postcondition appeared in each requirement item. A state transition system is contracted by this state map. A test case is generated from the contracted state transition system and evaluated. If the test case satisfies the coverage criteria a state predicate having the lowest appearance frequency is deleted from the state map and a test case is generated from the state transition system contracted by this state map and evaluated. This processing is repeated until the test case does not satisfy the coverage criteria. In this case the test case having high efficiency satisfying the coverage criteria last can be generated.

In the fourth embodiment the test case generation unit in is explained in detail. is a block diagram of component of the test case generation unit in .

This test case generation unit inputs the state transition system representing a plurality of states possible for a system to be checked and transitions first transitions between states and the state map defining map of the state. Furthermore the test case generation unit generates and outputs a test case transition path of the system.

By using this test case it is verified whether this system satisfies a specification. In detail transitions events of the test case are actually occurred in the system. By confirming occurrence of the same operation as the state transition system the system can be confirmed whether to satisfy the specification.

In an information system having a plurality of tasks a monitor function to control an execution state of task is considered. Each task on the monitor has three states i.e. an execution RUN state an executable RDY state and a sleep WAI state.

The monitor supplies three API Application Programming Interface functions to each task. The three API functions are a voluntary yield operation of CPU a voluntary transition operation to sleep state and a change wakeup operation from a sleep state to an executable READY state of task. These functions are called by a task of an execution RUN state.

In case that the number of tasks is three a state transition system representing states possible for the task control monitor and transitions between states is shown in . The state transition system of is a directed graph described by states of table 1 in and transitions of table 2 in . The initial state is a state s.

In detail the table 1 represents an identifier SID State ID of each state and contents state . The table 2 represents an identifier TID transition ID of each transition an identifier SID of an origin state an identifier SID of a destination state and contents event of the transition. However a mapping result in the table 1 is added by processing of a state equivalence relation definition unit explained afterwards. When the table 1 is input to the present apparatus the mapping object does not exist.

In order to confirm an operation of the task control monitor described as this state transition system tables 1 and 2 by calling API function corresponding to transition of each task in order from initial state of the system it is conformed whether the task is switched in correspondence with a destination state. For example when a task calls sleep from the initial state s a task transits to executing RUN . When the task calls sleep a task begins executing RUN . When the task calls yield the task begins executing RUN . In this way the operation is confirmed. This confirmation steps correspond to a transition path t t t from state s to state s on the state transition system.

In order to perform confirmation of the system operation by the coverage and shortest steps if the state transition system is regarded as a directed graph the shortest transition path to cover transition of the directed graph and the system had better be operated by events corresponding to the shortest transition path sequence .

A problem to generate the shortest transition sequence to cover transition of the directed graph is well known as Chinese Postman Problem CPP and an approximate algorithm to search a transition sequence to guarantee coverage already exists Non patent reference 1 . In this case approximation of the algorithm means generation of a transition sequence similar to the shortest transition sequence.

As to the transition sequence to cover transitions of the state transition system sixteen states forty two transitions searched result by the approximate algorithm is shown in table 3 of . By operating the system along four transition sequences transition paths from the initial state forty two transitions can be covered as continuous transitions of fifty times. Such transition sequence is called a test case of the system. Moreover this transition sequence always starts from the initial state s. The reason why the transition sequence is not one is a state s is a state where the destination state does not exist and when the transition enters into the state s a next transition cannot continue.

As to a test to cover all transitions of the system in general when a scale of the system becomes large a size of test case exponentially increases. Accordingly this test is not realistic. In order to generate an executable test it is necessary to reduce a size of test case by predetermined test criteria. In above mentioned instance the task control monitor includes sixteen states but these states include the same state by changing sort of task IDs. For example states s and s are same by changing order of task IDs but states s and s are not same even if order of task IDs is changed. As an example of the predetermined test criteria same states by changing order of their task IDs are regarded as an equivalent state and an operation of transition between states as non equivalent state is only confirmed is considered. By inputting this predetermined test criteria as a format of the state map an effective test case transition path satisfying this test criteria is automatically generated.

In the first second and third embodiments a state map to map a given state onto a combination of values of satisfiability truth value of each state predicate or each atomic predicate is explained. On the other hand in the fourth embodiment as a material of explanation it should be attentive that a state map to map onto the number of tasks of each state RUN RDY WAI is used as explained afterwards. In this way even if a type of the state map is different processing of the test case generation means is not essentially different. Accordingly it is not a question.

Next a state transition system and a quotient state transition system contracted state transition system are explained.

The state transition system F is defined as combination of a finite set S of state a finite set T S S of transition and the initial state s. The quotient state transition system F is defined by the state transition system F and an equivalence relation related to a state of the state transition system F. The state of the quotient state transition system F is regarded as an equivalent class group in case of classifying states of the state transition system F by equivalence relation . If a transition exists between two states s and s a transition s s also exists between two equivalent classes respectively including one of the two states s and s . Accordingly a transition in the quotient state transition system F is determined as a transition relation between two equivalent classes.

Relation represents above mentioned equivalence relation equiv and the equivalent class s is a set which state s is a representative state and equivalent states are collected by the equivalence relation. Equivalent class equiv true

Moreover as to each transition t s s T in the state transition system a function to refer states before and after the transition t is denoted as src t s and dst t s .

In order to calculate the quotient state transition system from the state transition system equivalence relation between states need be defined. As a definition of the equivalent relation the equivalent relation equiv s s between states need satisfy a reflexive law a symmetric law and a transitive law. Moreover B represents a set of boolean value truth value representing truth or false. In case of s s equiv s s replies truth.

In order to construct the state equivalence relation a state map to abstract the state is prepared and input to the test case generation unit . The state equivalence relation definition unit defines a state equivalence relation table 4 in used for generation of the quotient state transition system from the state map and the state transition system . Moreover a function equal is an equal sign relation on a range V of the map.

As to a plurality of states which is equivalent by changing their task IDs based on test criteria an instance of a state map to identify the plurality of states is represented as follows. This instance is described by a form of known programming language Scheme Non patent reference 2 .

In above instance on the assumption that contents of state in table 1 of is stored into a variable s by a list format of programming language Scheme Non patent reference 2 a function to reply a length of a list of variables RUN RDY WAI to manage the state of each task is used. Moreover a function getval is a function to acquire a corresponding value from a name of the variable. An application result of this function to each state is shown at the right side row mapping result or mapped value of table 1 in . As to a plurality of states having the same mapped value the plurality of states is equivalent and classified into an equivalent class. This classification result is shown in table 4 of . Assume that a state representing the equivalent class has the smallest state ID. In this case a representative state SID of the equivalent class is four kinds i.e. s s s and s.

A state of the quotient state transition system is an equivalent class Hereinafter a state class of the state and a transition in the quotient state transition system is a transition between two state classes. If a transition relation of the state transition system exists between two states respectively included in two state classes the transition relation also exists between the two state classes.

An algorithm to generate the quotient state transition system is represented hereinafter. Furthermore processing flow corresponding to this algorithm is shown in a flow chart of . This algorithm is executed by a quotient state transition system generation unit . The quotient state transition system generation unit inputs a state equivalence relation table 4 in and a state transition system and generates a quotient state transition system according to a following algorithm.

In description of the following algorithm a sign means a null set and a sign means a substitution of the right side to the left side. KEYS means a step to acquire a range of the map and P X means a power set of X as the set of all subsets of X.

 T is determined from a transition classification table TMAP the quotient state transition system F is output and processing is terminated.

In the state equivalence relation definition unit when classification of states into equivalent class is completed a representative state SID of each state SID is determined the left side row in table 4 of . A state class as a state of the quotient state transition system is labeled with an ID of the representative state.

Furthermore as to transition in the quotient state transition system as shown in a transition table 5 of two representative states SID SID of two state classes to which a source state SID and a destination state SID of each transition belong are searched and transitions each having the same pair of two representative states are classified into an equivalent class table 6 in . In this case a transition having the smallest TID is used as a representative transition TID to identify a transition class. In eight transition classes exist i.e. t t t t t t t and t.

At completion timing of step B in SMAP is represented as follows. 0 0 2 4 10 14 15 1 1 3 6 7 9 13 5 5 8 11 12 12

At completion timing of step B in REPL is represented as follows. 0 0 1 1 2 0 . . . omission 14 0 15 0

At completion timing of step B in TMAP is represented as follows. 0 0 13 8 34 39 41 0 1 02 7 33 38 40 . . . omission 5 5 18 28 32

In this way in the quotient state transition system generation unit two groups combination of two representative states are indicated from a plurality of groups in order. Then as to the two groups two representative states two classes if a transition first transition from one state included in one group to one state included in another group exists a transition second transition from the one group to the another group is set. This processing two groups are indicated the second transition is set is repeated. In this way the quotient state transition system representing the second transition between groups between representative states or between classes is generated.

The representative transition path generation unit searches a path representative transition path expressed by representative states or representative transition events covering transitions in the quotient state transition system . In this case for example well known algorithm Non patent reference 1 can be used. The transition path executable as a test is a continuous transition path starting from the initial state s. The continuous transition path means that in transition sequence a destination state of the present transition is same as an origin state of a next transition. If a continuous representative transition path on the quotient state transition system is regarded as a transition path on the state transition system the transition path is not always continuous on the state transition system. Accordingly after the shortest representative transition path covering the quotient state transition system is generated if this representative transition path is not a continuous path on original state transition system it is necessary that the representative transition path is converted to the continuous path. Conversion steps of the path are represented as follows. Furthermore processing flow corresponding to the conversion steps is shown in flow chart of . This processing is executed by a transition path generation unit . Moreover only when the transition path generation unit decides that the representative transition path is not the continuous path on the original state transition system this processing may be executed. Furthermore without decision whether the representative transition path is not the continuous path on the original state transition system this processing may be always executed.

In this case DIJKSTRA is well known steps to calculate the shortest path For example Dijkstra s Algorithm . Furthermore as to state s dsts a path length DIJKSTRA s s is the shortest in state s dsts .

The representative transition path generation unit searches a path covering transitions of the quotient state transition system by using well known algorithm Non patent reference 1 . In this case a transition sequence representative transition path shown in table 7 of is acquired. This transition sequence is a continuous path on the quotient state transition system but it is not the continuous path on original state transition system . In this case the transition sequence cannot be directly used as an executable test case.

For example in the table 7 of a transition sequence along representative transitions of the second path is t t t t t t. However in this case a destination state and an origin state of the transition sequence are not continuously connected. For example state classes of state s and state s are same. Accordingly these states s and s are equivalent on the quotient state transition system but they are different on the original state transition system .

If the representative transition path is not a continuous path on the original state transition system the transition path generation unit acquires the transition path executable by converting the transition path. Concretely the transition path generation unit suitably selects a transition from a transition class of the representative transition path and generates a path of which state transition is continuous on the original state transition system.

If the path of which state transition is continuous is not generated by selecting the transition states of the path is continuously modified by using calculation algorithm of the shortest path step C in . Briefly as to an object transition class from which a continuous path cannot be generated a destination state of a transition selected from a previous transition class is set to an origin state. Then a path from the origin state to any state included in destination states of the object transition class is generated and used.

In this case by inputting a path of the quotient state transition system an operation to calculate a path of which states continuously transits on the original state transition system is called path generation or path regeneration . Algorithm of path generation path regeneration is already explained by referring to .

By inputting the transition path table 7 in and the initial state s application result of the path generation path regeneration algorithm is shown in table 8 of . As to a transition path of the table 8 the initial state is a state s and the transition path is acquired by selecting one transition from transitions included in each transition class table 7 in . As a result this transition path is an executable path of which states continuously transit on the original state transition system. In the table 8 of the transition path becomes the minimum test case satisfying the initial test criteria that all states and transitions between states are covered without distinguishing task IDs .

In this way the transition path generation unit selects each transition first transition of the representative transition path in order of each second transition traced by the representative transition path generation unit . Then as to each first transition selected the transition path generation unit specifies a first transition. The first transition has the same origin state as one of origin states of a selected second transition the same destination state as one of destination states of the selected second transition and the same origin state as a destination state of a previous first transition specified. As mentioned above the first transition is included in the original state transition system. The transition path generation unit generates a test case transition path including a sequence of each first transition specified and an event corresponding to each first transition.

As mentioned above when the first transition is not specified for one second transition of the second transitions selected in order the transition path generation unit selects a first transition. The first transition has the same origin state as a destination state of another first transition specified for a previous second transition selected and has the same destination state as one of destination states of the one second transition. In this way the transition path generation unit generates the transition path so that the states of the first transitions continue on the original state transition system.

In the disclosed embodiments the processing can be performed by a computer program stored in a computer readable medium.

In the embodiments the computer readable medium may be for example a magnetic disk a flexible disk a hard disk an optical disk e.g. CD ROM CD R DVD an optical magnetic disk e.g. MD . However any computer readable medium which is configured to store a computer program for causing a computer to perform the processing described above may be used.

Furthermore based on an indication of the program installed from the memory device to the computer OS operation system operating on the computer or MW middle ware software such as database management software or network may execute one part of each processing to realize the embodiments.

Furthermore the memory device is not limited to a device independent from the computer. By downloading a program transmitted through a LAN or the Internet a memory device in which the program is stored is included. Furthermore the memory device is not limited to one. In the case that the processing of the embodiments is executed by a plurality of memory devices a plurality of memory devices may be included in the memory device.

A computer may execute each processing stage of the embodiments according to the program stored in the memory device. The computer may be one apparatus such as a personal computer or a system in which a plurality of processing apparatuses are connected through a network. Furthermore the computer is not limited to a personal computer. Those skilled in the art will appreciate that a computer includes a processing unit in an information processor a microcomputer and so on. In short the equipment and the apparatus that can execute the functions in embodiments using the program are generally called the computer.

Other embodiments of the invention will be apparent to those skilled in the art from consideration of the specification and embodiments of the invention disclosed herein. It is intended that the specification and embodiments be considered as exemplary only with the scope and spirit of the invention being indicated by the claims.

