---

title: Concurrent handling of exceptions in received aggregate exception structure with supplied exception handlers and marking handled exceptions
abstract: Various technologies and techniques are disclosed for providing concurrent exception handling. When one or more exceptions are received from concurrent workers, one or more exception handler functions are supplied. For each respective exception in the exception results, determine if the respective exception is one of a kind of exceptions handled by the one or more exception handler functions. If the respective exception is one of a kind handled by the exception handler functions, then run a particular handler of the exception handler functions and mark the respective exception as handled. Any unhandled exceptions are then processed appropriately. In one implementation, a collection of input data is processed to produce a collection of output results, with the exceptions being interleaved with other output results. In another implementation, a particular exception is selected that represents the multiple exceptions. The selected one particular exception is then thrown.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08271768&OS=08271768&RS=08271768
owner: Microsoft Corporation
number: 08271768
owner_city: Redmond
owner_country: US
publication_date: 20101117
---
This application is a divisional of allowed U.S. application Ser. No. 11 821 649 filed on Jun. 25 2007 which is incorporated by reference herein in its entirety.

Software programs have been written to run sequentially since the beginning days of software development. In a sequential program tasks execute one after another i.e. one task finishes completely first before the next is begun and if a previous task does not finish subsequent tasks do not execute. Steadily over time computers have become much more powerful with more processing power and memory to handle advanced operations. This trend has recently shifted away from ever increasing single processor clock rates and towards an increase in the number of processors available in a single computer i.e. away from sequential execution and toward parallel execution. Software developers want to take advantage of improvements in computer processing power enabling their software programs to run faster as new hardware is adopted. With parallel hardware however this requires a different approach developers must arrange for one or more tasks of a particular software program to be executed concurrently sometimes called in parallel so that the same logical operation can utilize many processors at one time and deliver better performance as more processors are added to the computers on which such software runs.

Concurrent programs are fundamentally different than sequential ones because many tasks happen at once instead of one after the other. This raises one particularly difficult problem whereas in a sequential program execution of a logical operation stops at the first occurrence of an exception in concurrent programs exceptions may occur in many tasks at once. Current exception handling mechanisms assume linear sequential execution and so communicating such failures to the program presents problems. To make matters worse the software developer is often working with an application programming interface that gives the appearance of a traditional sequential interface even though its implementation runs work concurrently which makes it increasingly difficult to encapsulate the implementation details of an interface when concurrency is used internally.

Various technologies and techniques are disclosed for providing concurrent exception handling. Exceptions that occur in concurrent tasks are caught and forwarded to a coordination task. These exceptions are then aggregated into an aggregation structure such as an aggregate exception object and rethrown by the coordination task. The aggregation structure may then be caught and the individual exceptions inside handled appropriately by the program.

In one implementation the exceptions are handled in the program once all concurrent tasks have completed. In such an implementation a coordination task initializes a shared flag and a shared list of exceptions to be aggregated. Concurrent worker tasks are started and should one throw an exception the shared flag is set and the exception is added to the shared list. All worker tasks poll the flag to determine whether it has been set when they see that it has been set they voluntarily terminate. If any additional exceptions occur on concurrent tasks before they are able to voluntarily terminate those further exceptions are also added to the shared list. Once all of the concurrent worker tasks terminate an aggregate exception object is created by the coordination task containing references to each of the exceptions in the shared list and then the aggregate exception is thrown by the coordination task.

In another implementation when the concurrent work is spawned one or more exception handler descriptors are supplied each such descriptor is comprised of an exception type and a handler function. For each respective exception that occurs on a given concurrent worker task the task determines if the respective exception type is of a kind of handled by the one or more exception handler functions provided. If the respective exception is of such a type then the particular handler function is run and the exception is considered handled. Any exceptions that remain unhandled are then processed in the manner described above.

In one implementation a sequential process is provided that uses concurrent worker tasks with a collection of input data being processed to produce a corresponding collection of output results. The exceptions are interleaved alongside non exceptional output results. The collection of output results is made available to the sequential process. The worker tasks continue to produce the output results completely as exceptions are encountered. This technique defers the evaluation of exceptions permitting them to be handled during the consumption of the results rather than as part of the production of said output results.

In another implementation a single particular exception is selected that represents the multiple exceptions leading to only one exception being thrown out of the coordination task. This is used when many homogeneous exceptions are caught and or when a clear preference can be determined by the system.

This Summary was provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

For the purposes of promoting an understanding of the principles of the invention reference will now be made to the embodiments illustrated in the drawings and specific language will be used to describe the same. It will nevertheless be understood that no limitation of the scope is thereby intended. Any alterations and further modifications in the described embodiments and any further applications of the principles as described herein are contemplated as would normally occur to one skilled in the art.

The system may be described in the general context as an application that provides concurrent exception handling but the system also serves other purposes in addition to these. In one implementation one or more of the techniques described herein can be implemented as features within a framework program such as MICROSOFT .NET Framework or from any other type of program or service that handles concurrent exceptions occurring in programs.

In one implementation a concurrent exception handling system is provided that can manage exceptions that occur concurrently on many worker tasks. The exceptions can be handled in various ways and at various times such as by aggregating exceptions and throwing from a coordination task after all concurrent worker tasks finish such as placing exceptions interleaved among non exceptional data in the output stream for deferred handling and so on. The term task as used herein means a logical unit of work which may or may not result in an independent thread. The term coordination task as used herein means a task that is responsible for coordinating multiple worker tasks. The term worker task as used herein means a task that is responsible for carrying out one or more particular logical units of work associated with a higher level program operation.

As shown in an exemplary computer system to use for implementing one or more parts of the system includes a computing device such as computing device . In its most basic configuration computing device typically includes at least one processing unit and memory . Depending on the exact configuration and type of computing device memory may be volatile such as RAM non volatile such as ROM flash memory etc. or some combination of the two. This most basic configuration is illustrated in by dashed line .

Additionally device may also have additional features functionality. For example device may also include additional storage removable and or non removable including but not limited to magnetic or optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage . Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Memory removable storage and non removable storage are all examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by device . Any such computer storage media may be part of device .

Computing device includes one or more communication connections that allow computing device to communicate with other computers applications . Device may also have input device s such as keyboard mouse pen voice input device touch input device etc. Output device s such as a display speakers printer etc. may also be included. These devices are well known in the art and need not be discussed at length here. In one implementation computing device includes concurrent exception handling application . Concurrent exception handling application will be described in further detail in .

Turning now to with continued reference to a concurrent exception handling application operating on computing device is illustrated. Concurrent exception handling application is one of the application programs that reside on computing device . However it will be understood that concurrent exception handling application can alternatively or additionally be embodied as computer executable instructions on one or more computers and or in different variations than shown on . Alternatively or additionally one or more parts of concurrent exception handling application can be part of system memory on other computers and or applications or other such variations as would occur to one in the computer software art.

Concurrent exception handling application includes program logic which is responsible for carrying out some or all of the techniques described herein. Program logic includes logic for providing a system that performs operations for an application concurrently on multiple concurrent worker tasks logic for catching exceptions that occur in the concurrent tasks logic for forwarding exceptions to the shared exception list and setting the shared flag logic for producing an aggregation of the exceptions from the coordination task logic for optionally collapsing exceptions into fewer exceptions logic for optionally selecting a single exception to raise out of multiple exceptions and other logic for operating application . In one implementation program logic is operable to be called programmatically from another program such as using a single call to a procedure in program logic .

Turning now to with continued reference to the stages for implementing one or more implementations of concurrent exception handling application are described in further detail. is a high level process flow diagram for concurrent exception handling application . In one form the process of is at least partially implemented in the operating logic of computing device . The process begins at start point with providing a system that performs operations for an application concurrently i.e. executing multiple concurrent worker tasks on multiple OS threads stage . The system recognizes exceptions that occur in the concurrent tasks stage forwards them to a coordination task and aggregates them e.g. in an aggregate exception object or other structure stage . The system propagates the aggregate from the coordination task once all concurrent worker tasks have completed enabling the program to handle the concurrent exceptions that happened during the operation at a proper time stage . The logic performed to handle any given exception within the aggregate can be equivalent to the logic it would perform on a sequential program provided it is capable of recognizing the aggregate exception type and retrieving individual exceptions from within. The process ends at end point .

In one implementation as exceptions are interleaved among ordinary output the system provides the option of preserving the original input ordering in the resulting output. Suppose there is an input of a b c x y z and the task is to map elements via some projection function f. The system can provide the capability of ensuring output ordering corresponds to input ordering such that the results will always be f a f b f c f x f y f z . Similarly when exceptions are deferred the system can ensure the resultant exception ends up in the corresponding output element position. If exceptions e and e happened while executing f b and f y but all others succeeded for instance then the results will be f a e f c f x e f z 

The collection of output results is made available to the sequential process and the worker tasks continue to produce the output results completely as exceptions are encountered stage . In one implementation the output results can then be processed as usual which causes any exceptions to be rethrown lazily during processing as exceptional output elements are seen. This allows the exceptions to be handled as part of the consumption rather than the production of output. In another implementation exceptions may be written to the output results first and then if an exception of a certain type occurs the operation stopped. For example if a serious exception occurs that would affect the result of the computation then it could be better to stop the computation than to continue writing exceptions to the output results.

A gather exceptions operation is optionally provided to accumulate all exceptions in the output results into a list which can be further analyzed logged etc. stage . An eliminate exceptions operation is optionally provided to remove exception values in the output results and optionally store them in a list which can be further analyzed stage . The process ends at end point .

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims. All equivalents changes and modifications that come within the spirit of the implementations as described herein and or by the following claims are desired to be protected.

For example a person of ordinary skill in the computer software art will recognize that the client and or server arrangements user interface screen content and or data layouts as described in the examples discussed herein could be organized differently on one or more computers to include fewer or additional options or features than as portrayed in the examples.

In an embodiment a method for selecting an exception to raise out of many exceptions includes the steps of aggregating multiple exceptions that occurred on concurrent worker tasks selecting one particular exception that represents the multiple exceptions and throwing the selected one particular exception.

The one particular exception may be selected out of the multiple exceptions as one exception that represents the multiple exceptions because the multiple exceptions all have a same root cause.

In an embodiment a computer readable medium may have computer executable instructions for causing a computer to perform the steps of the method for selecting an exception to raise out of many exceptions described above.

