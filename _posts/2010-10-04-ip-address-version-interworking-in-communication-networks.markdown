---

title: IP address version interworking in communication networks
abstract: Systems and methods are provided for supporting IPv4-IPv6 interworking of SIP messages in wireless networks and IMS networks. The interworking can be provided to smooth migration to an all-IPv6 IMS network by allowing the use and support of existing legacy IPv4 infrastructure. This functionality may be provided by a call session control function (CSCF) interposed between a user equipment (UE) and an IMS core network with interworking functionality or an interworking module. This device serves as a back-to-back user agent (B2BUA), allocates IP addresses from a pool, performs next-hop route protocol discovery, and maintains and stores information within the gateway as well as interworking and rewriting IP addresses within network messages, while proxying and maintaining sessions between the UE and the IMS core network. This allows for faster call setup, reduced capex/opex, improved debuggability, increased capacity and subscriber density by call processing distribution, and better user experience.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08811393&OS=08811393&RS=08811393
owner: Cisco Technology, Inc.
number: 08811393
owner_city: San Jose
owner_country: US
publication_date: 20101004
---
The present disclosure relates generally to providing support for mixed IP protocol versions in wireless networks by describing systems and methods for network devices that translate between different protocol versions.

Internet protocol IP is a protocol for communicating data across a packet switched network. The network can include wireless and wire line portions between a first and a second node. IP provides a unique global addressing method for representing the location of nodes in the network. This allows a first node to send data to a second node by using the IP address of the second node when sending the data. Internet Protocol version 4 IPv4 uses 32 bit 4 byte addresses which limits the address space to 4 294 967 296 possible unique addresses. The next generation IP is IPv6 which supports a larger address space addresses in IPv6 are 128 bits long versus 32 bits in IPv4. Networking equipment that support IPv4 addresses cannot easily read and route packets based on IPv6 addresses given the differences in length. Thus an IPv6 message cannot generally be sent over a network that only supports IPv4 and IPv4 messages likewise cannot generally be sent over a network that only supports IPv6. This creates a problem for transitioning networks from IPv4 to IPv6 because it can be very expensive to replace existing networking equipment with new compatible equipment.

The present disclosure also relates to wireless telephone systems. The first generation of wireless telephone technology used analog mobile phones in which analog information signals were transmitted. As technology has progressed 2G 2.5G and 3G systems have developed to handle higher speed digital packet data using wireless standards developed by industry consortiums such as the 3rd Generation Partnership Project 3GPP and the 3rd Generation Partnership Project 2 3GPP2 . The next generation of wireless technology is referred to as 4G technology based on a standard known as long term evolution system architecture evolution LTE SAE that uses orthogonal frequency division multiple access OFDMA technology.

Systems and methods are provided for supporting IPv4 IPv6 interworking of messages in wireless networks and IMS networks. In one embodiment a session controller receives a mobility message at from a mobile device for communication on an IP multimedia subsystem IMS network using a first IP protocol version determines whether interworking of the mobility message is needed before forwarding the mobility message interworks the mobility message at the session controller if needed from the first IP protocol version to a second IP protocol version by substituting in the mobility message addresses that conform to the second protocol version stores an inbound call leg identifier and an outbound call leg identifier in the mobility message and forwards the mobility message from the session controller to a destination using the second IP protocol version.

Interworking can be provided to smooth migration to an all IPv6 IMS network by allowing the use and support of existing legacy IPv4 infrastructure. This functionality may be provided by a network device such as a call session control function CSCF interposed between a user equipment UE and an IMS core network with interworking functionality or an interworking module. This device serves as a back to back user agent B2BUA allocates IP addresses from a pool performs next hop route protocol discovery and maintains and stores information within the gateway as well as interworking and rewriting IP addresses within network messages while proxying and maintaining sessions between the UE and the IMS core network. A special parameter is embedded within the standard record route SIP protocol header that enables the gateway to map addresses and sessions of one protocol version to the other for SIP SDP RTP and other types of messages. Various other state information is provided which together allows for faster call setup reduced capex opex improved debuggability increased capacity and subscriber density by call processing distribution and better user experience.

Many modern wireless networks use the IP Multimedia Subsystem IMS which provides facilities for delivering multimedia services such as voice calls over the network. IMS is an architectural framework for delivering internet protocol IP multimedia to mobile nodes and provides facilities for delivering multimedia services such as voice calls over the network. A call session control function CSCF can manage much of the signaling that occurs in an IMS core. The CSCF functionality can be logically divided into three functionalities a Proxy CSCF P CSCF an Interrogating CSCF I CSCF and a Serving CSCF S CSCF . Additionally the CSCF functionality is envisioned by two different groups for inclusion in two different topologies Global System for Mobile Communications GSM and CDMA 2000. The 3rd Generation Partnership Project 3GPP is responsible for IMS which works with GSM systems and the 3rd Generation Partnership Project 2 3GPP2 is responsible for Multimedia Domain MMD which is used with CDMA systems and is based on the 3GPP IMS concept.

The current IMS standards place significant responsibility on application servers to manage the mobile nodes requesting content and services and to communicate within certain parameters. With the fast pace of development there are a number mobile nodes with varying capabilities as well as a number of application servers with varying capabilities and all application servers may not be fully IMS compliant or IPv6 compliant. Thus a gateway providing v4 v6 interworking as described below may provide faster call setup reduced capex opex improved debuggabilty better user experience and increased capacity and subscriber density by call processing distribution.

IP protocol interworking involves translating IPv4 packets into IPv6 packets and vice versa. The IPv4 protocol is described in RFC 791 which is hereby incorporated by reference herein in its entirety. IPv4 allows for 4 294 967 296 possible unique addresses. This is done using a 32 bit address in the packet header expressed in dot decimal notation as the four octets of the address expressed in decimal and separated by periods. IPv6 has a much larger address space of 2addresses designed to enable IP connectivity to a much larger number of devices such as mobile phones and home appliances that is represented using a 128 bit address in the packet header. Consequently IPv4 IPv6 interworking may include a mechanism for translating 32 bit to 128 bit addresses and vice versa.

IP protocol interworking also involves both IPv4 and IPv6 network devices. A network device that supports a particular network protocol may do so using a protocol stack which is software implemented on the device that receives and sends packets on a network interface according to the particular protocol. A network device that supports two protocols may be called a dual stack device as it has one protocol stack for IPv4 and another protocol stack for IPv6.

IMS packet based communications rely on session initiation protocol SIP to initiate and control telephone calls. The SIP protocol is widely used on Voice over IP VoIP networks to control and manage telephony features on a standard IP network and has been adapted for use with IMS. Among the many uses of SIP are creation modification and termination of unicast or multicast sessions involving one or several media streams. SIP is designed to be independent of its underlying transport layer but typically runs on TCP IP networks. Its headers are similar to Hypertext Transport Protocol HTTP headers in that they are embodied in plain text this allows a network operator to examine SIP packets and route them efficiently and simply.

The six types of SIP requests are INVITE ACK BYE CANCEL OPTIONS and REGISTER. The messages are formatted according to RFC 822 containing a header and an optional message body. SIP requests are made in relation to SIP network resources which are identified by uniform resource identifiers URIs in the form sip username password host port according to standard Internet conventions. SIP networks also contain proxy servers or proxies which may interpret rewrite and or forward messages registrars which accept REGISTER requests and store the accompanying information for a specified domain and redirect servers which generate redirect responses directing a client to contact alternate URIs.

A SIP user agent is a logical network endpoint used to create or receive SIP messages which are either requests from a server or client or responses to such requests. A back to back user agent B2BUA is a SIP network element that is interposed between a SIP client such as a phone being used by a user to make a call and a SIP server such as the phone of the call recipient. The B2BUA serves as a SIP server and receives the SIP request from the SIP client and then serves as a SIP client and initiates a new SIP request to the SIP server. This is useful as the B2BUA maintains the complete call state and participates in all call requests and thereby may provide value added services to the call. The two connections are handled as two separate call legs by the B2BUA which maintains references to each of the call legs and may manipulate these to perform administrative and value added functions. This method is similar to network bridging. In some embodiments call legs may be referred to as dialogs. In some embodiments SIP functionality may be implemented in a SIP module. In other embodiments SIP functionality may be distributed throughout various logical modules in a CSCF.

PCEF is located at the gateway which can be a GGSN a packet data gateway PDG a packet data gateway interworking function PDIF a PDSN HA and or an access service network gateway ASN GW . The PCEF provides service data flow detection and counting as well as online and offline charging interactions. The PCEF can also provide policy enforcement toward the internet protocol connectivity access network IP CAN . PCRF combines flow based charging control and a policy decision function. The PCRF can provision policy and charging control PCC rules to the PCEF and inform the application function AF on the network device of traffic plane events. The Proxy CSCF can serve as the first contact point for the user equipment UE and forward SIP messages in the network. P CSCF generates charging call detail records maintains a security association with UE and authorizes bearer resource quality of service QoS through the application function AF toward the PCRF . P CSCF can also provide local service e.g. 411 service and emergency service lawful interception and SIP header compression.

Interrogation CSCF serves as the first contact between different operator s networks in some embodiments. The I CSCF also forwards SIP messages through the network assigns S CSCFs to sessions generates charging call detail records CDRs and provides topology hiding for the network. The Serving CSCF acts as a SIP registrar and provides IMS user authentication. The S CSCF loads IMS user profiles from the home subscriber server HSS provides person to person P2P and person to application P2A session control and SIP application server service control. The S CSCF provides address translation support generation of charging CDRs and lawful interception.

To achieve dual stack behavior P CSCF may be configured to use two access services with a first access service V6 SVC listening on an IPv6 address and a second access service V4 SVC listening on an IPv4 address and port. Requests may be forwarded to and from peer access services. Call legs may also be created at access services. Access services may be implemented as hardware and or software modules or as a combination thereof. When UE sends SIP network messages to P CSCF to make use of IMS core network the messages are transmitted and received at V6 SVC using IPv6. These messages are forwarded to IPv4 IMS core network through V4 SVC . Similarly messages from IPv4 core network are received at V4 SVC and forwarded to IPv6 UE via V6 SVC. Dual stack P CSCF is thus acting as a B2BUA.

Domain name service DNS servers may also be dual stack devices compatible with both IPv4 and IPv6 and may permit DNS queries for both IPv4 and IPv6 addresses. IPv4 DNS addresses are referred to as A records and IPv6 DNS records are referred to as AAAA records. DNS lookups for IP addresses thus may provide information about whether a given host is compatible with IPv4 or IPv6 by the presence or absence of A records and AAAA records. Similarly network routing tables maintain lists of IP addresses which may be IPv4 addresses or IPv6 addresses. The presence of an IPv4 or IPv6 address in determined by analysis of the address itself. Deep packet inspection may also be used to inspect packets packet headers or other envelope information for packets received by the gateway or packets in transit through the gateway.

To identify the need for v4 v6 interworking for a new incoming IPv6 SIP REGISTER request or other SIP request arriving at V6 SVC an IP route lookup may be performed based on the request universal resource identifier URI provided in the SIP request. The DNS route lookup is performed first in the V4 SVC context and if the first lookup does not return any matching route entry then in the V6 SVC context. If a matching IPv4 next hop route entry is found this indicates that interworking needs to be performed. If no route entry is found then a DNS query to dual stack DNS server on the request URI domain is done for both IPv4 A records and IPv6 AAAA records. If this DNS response yields only an IPv4 address then a determination is made to perform v4 v6 interworking in this case as well. The subscriber call leg will be updated by P CSCF with an indication that v4 v6 interworking is required for this subscriber.

On identifying the need for interworking interworking is performed as follows. As P CSCF is acting as a B2BUA SIP headers such as Via Contact Service Route Path etc. are automatically set to the IPv4 address and port of V4 SVC . The Contact header may be replaced with an IPv4 address allocated for a current session manager from an IPv4 address pool configured under V4 SVC . Similarly the port number for the address placed in the Contact header may also be allocated from a pool. Finally the request is forwarded through the outgoing call leg via V4 SVC . UE s IPv6 address may be stored in a database cache or other storage medium for later use. Network address translation NAT may be used in certain embodiments to allocate either IPv4 or IPv6 addresses from a pool of addresses. In addition a pair of custom SIP Record Route headers is added with the top Record Route header containing an identifier for the outbound call leg and the bottom Record Route header containing an identifier for the inbound call leg. A X ST CID custom parameter is used to tag or identify these Record Route headers for later identification by the CSCF this parameter is appended to the route URI e.g. Record Route or equivalent.

In some embodiments full or partial IPv4 IPv6 interworking functionality may be made available for a CSCF acting as a proxy instead of as a B2BUA. In this case interworking is supported only for the Signaling path and not for the Media path.

Interworking in the reverse direction may operate as follows. The destination IPv4 address in the SIP Path header received from S CSCF in the 200 OK response for the REGISTER message may be replaced with V6 SVC s previously stored IPv6 address before forwarding to UE . Some UEs may use the Path header to send further requests to P CSCF . Adding the IPv6 address in the Path header will help IPv6 UE in correctly sending requests to V6 SVC . The Service Route received in the header of the 200 OK message corresponding to the UE s REGISTER message along with the v4 v6 indication stored at P CSCF may be used to route all further requests coming from IPv6 UE towards IPv4 S CSCF via V4 SVC . Any terminating call coming towards IPv6 UE will arrive at V4 SVC and will then be routed to IPv6 UE via V6 SVC . In addition the same pair of custom SIP Record Route headers is added with the top Record Route header containing an identifier for the outbound call leg and the bottom Record Route header containing an identifier for the inbound call leg together with the X ST CID custom parameter.

The CSCF can include a mapping table of inbound and outbound identifiers. The table includes an organization of the identifier information along with information used for interworking such as IP addresses and session information. When an inbound identifier is detected on a message received on the inbound or outbound call leg the appropriate identifier is used to match the packet data unit PDU to the appropriate session. The match also provides the CSCF with information to determine how to handle the PDU in the CSCF. Once a match is made the PDU can be sent to the session for processing or can be sent to an interworking module. In some embodiments this functionality is implemented in the session module. In some embodiments the session performs the interworking and in other embodiments the session provides information for the interworking module to perform the interworking on the PDU. This information can include the interworking to perform and the IP addresses to use.

The mapping table is populated with information as call sessions are created. In the process of setting up a call session the CSCF determines that the call legs include different protocols and interworking is to be performed on received PDUs. The CSCF assigns the inbound and outbound identifiers for the session and the IP addresses involved in the interworking. This information along with the session identification can be included in the mapping table. As a PDU is received on a call leg inspection of the packet such as shallow packet inspection reveals the inbound and outbound identifiers. A lookup is then performed in the mapping table to obtain session information as well as other information regarding the interworking. Once this information is obtained modifications to the PDU can be performed to replace the IP address and other information to prepare the PDU for transmission on a communication network with a different protocol. The mapping table can be implemented in memory and the inspection can be performed using a processor.

This general interworking capability may be referred to as bridging in some embodiments. The service description protocol SDP real time protocol RTP and session initiation protocol SIP routines in the interworking device may be modified so that software services clients agents and modules that utilize IP packets and plaintext protocol headers will produce headers that transparently include either IPv4 or IPv6 addresses as needed. This may be implemented by defining a data type that contains an IP address sn ip addr t and automatically determining the protocol version of the data type so that functions using this data type will generically handle both IPv4 and IPv6 addresses.

If IMS core is identified by procedures like DNS etc. to support IPv6 then V6 SVC may communicate with it directly over IPv6 without requiring any interworking. Similarly when V4 SVC receives requests from IPv4 UEs it may communicate with IPv4 IMS core network over IPv4. Various components of the wireless network have been omitted for clarity. These components may provide IP connectivity to the UE using the same IP protocol version as the UE or may support multiple IP protocol versions including the IP protocol version supported by the UE .

It is also possible for the IMS core network to be implemented where the I CSCF and S CSCF are physically located on devices or networks that are dual stack and or are compatible with IPv6 even if the I CSCF and S CSCF are implemented as functions or modules that are only compatible with IPv4 and not IPv6. In this case it may still be necessary for the P CSCF to perform interworking to and from IPv4 and IPv6.

Message is the same INVITE message with the addition of the address having been interworked from an IPv6 address to an IPv4 address. The IPv4 address in message may be allocated by P CSCF according to an algorithm or by random selection from a pool of potential IP addresses which may be configured by the network operator. There are also various other possible ways for interworking IPv6 addresses to IPv4 addresses. However interworking of IPv6 addresses to IPv4 addresses must take into account the fact that the IPv6 address space is several orders of magnitude larger than the IPv4 address space. As well the mapping of IPv6 to IPv4 addresses and vice versa at P CSCF may be retained and stored in a database or other storage medium in some embodiments.

IPv4 compatible message is passed from P CSCF to IPv4 compatible IMS core which may contain an I CSCF and a S CSCF. IMS core routes the message appropriately to P CSCF . Although P CSCF supports IPv6 as well as IPv4 it is not necessary to interwork the message since IMS core is compatible with both protocols. However once the message reaches P CSCF P CSCF performs a test of UE according to the DNS based procedure described above or according to another procedure. The test indicates that UE does not have the capability to receive messages in IPv4 so P CSCF interworks the message from IPv4 to IPv6. This is reflected in message as the IP address is no longer an IPv4 address but an IPv6 one.

In the reverse direction UE sends out a 200 OK message. The message contains an IPv6 target address which is received and interworked at P CSCF the address is initially obtained from the packet header of the SIP message issued by UE 1 . P CSCF checks the target address against a list of mappings for IPv4 and IPv6 and if the address is found uses the correct IPv4 address to interwork the IPv6 address. If the address is not found the P CSCF has the liberty to assign a new address as it is acting as a B2BUA and need not use the same addresses for each call leg. Note that the IPv4 addresses from the INVITE messages are the same while the IPv6 address in message and that in message are significantly different. This may be due to differing algorithms or random algorithms for interworking at the P CSCFs . The 200 OK message continues across the IMS core in IPv4 as seen in messages and . Once message reaches P CSCF P CSCF makes a determination using a DNS query a database lookup or other means that the UE requires packets to be sent in IPv6 and correspondingly interworks the message from IPv4 to IPv6 .

The heavy arrows at the bottom of illustrate the fact that there is an RTP relay or RTP tunnel between UE and P CSCF using the IPv6 protocol another RTP tunnel between P CSCF and P CSCF via IMS core using the IPv4 protocol and a third RTP tunnel between P CSCF and UE that uses IPv6. RTP tunnel uses IPv4 not for the P CSCFs which are both dual stack implementations but for the benefit of IMS core which has not been upgraded to handle IPv6. Other implementations and embodiments may be envisioned with different network nodes substituted but the principle for SIP and VOIP interworking is the same.

Steps show UE sending a SIP registration request for registration with IMS core network that is rejected as unauthorized. In registration request UE is attempting to register with SIP registrar server starent.com at the URI sip userA fdce 147 47d8 3 5060 where this URI is the URI at which the UE will receive calls. The string fdce 147 47d8 3 is an IPv6 address. In step P CSCF receives request using IPv6 at access service V6 SVC not shown . At this stage P CSCF has not determined whether interworking is needed for target IMS core network . In order to determine this it performs a DNS lookup on the domain name starent.com. The DNS query contains a request for IPv6 addresses AAAA records as well as for IPv4 addresses A records and is sent using either IPv4 or IPv6 to DNS server based on a network routing table at P CSCF . In step DNS server responds to request with an IPv4 address. The absence of an IPv6 address where one was requested is interpreted by dual stack P CSCF as an indication that IMS core network and I S CSCF do not support IPv6. This results in access service V6 SVC not shown at P CSCF then forwarding the request to peer access service V4 SVC not shown also at P CSCF which performs interworking on the outgoing request before it is proxied to I S CSCF .

At access service V4 SVC not shown at P CSCF a new call leg is created and a v4v6 interworking flag on the call leg is set. Two flags may be used in some embodiments the call leg may also be created before forwarding to V4 SVC. In interworking all IPv6 IP addresses and ports have been removed and replaced with IPv4 addresses resulting in interworked request . Various SIP headers that are interworked include VIA CONTACT PATH and SERVICE ROUTE. To facilitate repeated interworking between UE and IMS core network P CSCF may maintain a mapping between the IPv6 addresses requested by the UE and the translated IPv4 addresses contained in proxied request . In addition a custom parameter for interworking not shown is stored at the gateway and also added to the SIP header via a pair of standard RECORD ROUTE headers. The topmost RECORD ROUTE header is made to contain an identifier for the inbound call leg e.g. a callLegID and the bottommost header is made to contain an identifier for the outbound call leg. The custom parameter X ST CID is used in conjunction with the call leg ID in the RECORD ROUTE headers. The outbound call leg ID and custom X ST CID parameter is also added to the SIP Via header.

In step I S CSCF responds to request by rejecting it as unauthorized and P CSCF forwards the response to UE . Request and response are also an example of P CSCF acting as a B2BUA. To serve as a proxy P CSCF receives a request from UE and performs a back to back request to I S CSCF masquerading as a user agent.

Steps show UE successfully registering with IMS core network at a subsequent time. Step shows a registration request identical to that shown in step . Step shows P CSCF interworking the request and proxying it to I S CSCF . Since this registration takes place at a subsequent time no DNS request is necessary so steps and are omitted. P CSCF has also previously determined that requests to I S CSCF must be interworked to IPv4 and this information may be stored in a flag or data structure in the call leg data structure. P CSCF may refer to a previously created mapping between the IPv6 address requested by the UE and the translated IPv4 addresses contained in proxied request to perform IPv6 IPv4 interworking on request . Step is a 200 OK response from I S CSCF permitting UE to register with IMS core network . In step P CSCF performs interworking on the response and forwards the request to UE .

Step shows a SIP 180 Ringing response message as it is received from IPv4 IMS core network passed to P CSCF and received at access service V4 SVC passed to access service V6 SVC and interworked and finally sent from P CSCF to UE using IPv6. Step shows a SIP 200 OK response message as it is received and passed along to UE following the same process as in step . Step shows a SIP ACK response as it is sent from the UE using IPv6 to P CSCF and received at access service V6 SVC passed to access service V4 SVC and interworked and finally sent to IMS core network and towards terminating UE using IPv4.

Once an SIP connection is made as described above step represents various session description protocol SDP and real time protocol RTP transactions and flows that take place to enable a VoIP call over the SIP connection. SDP is used between hosts to advertise streaming media initialization parameters and enables the use of other protocols such as RTP and real time streaming protocol RTSP . These parameters include IP addresses and port numbers and must also be interworked. SDP headers also contain a network type flag which must be changed from IP6 to IP4 or vice versa during interworking P CSCF interworks outgoing SDP message headers from UE from IPv6 to IPv4 and incoming SDP message headers from IMS core network from IPv4 to IPv6. Any IP addresses and ports in the SDP message headers must be replaced with IP addresses from locally configured IP pools of the appropriate IP version and must be consistent with the IP addresses already sent in SIP initialization. P CSCF must also interwork outgoing and incoming message headers for the VoIP call itself which uses RTP.

On implementations of P CSCF that include hardware or software modules such as network processing units NPUs or network processing unit flows NPU flows a special type of NPU flow designated IPV6UDP FLOW may be installed for each media stream or RTP packet stream coming from UE . This NPU flow may have as parameters the IPv6 address received in the SDP headers from UE as the source IP and the IPv6 address corresponding to terminating UE that has been allocated from a pool of IPv6 addresses by access service V6 SVC as the destination IP. A new callback function may be implemented in an application programming interface API or system library such that a flow of this special type may be created for media. When a RTP packet stream is received from UE at the P CSCF this callback function may interwork the RTP packet streams with IPv4 source and destination addresses corresponding to the terminating UE and forward the received RTP over IPv4 to the IPv4 IMS core network . RTP statistics and counters for media loss detection may be handled by such a callback function or using other functions implemented in alternative layers of the protocol stack on P CSCF .

Step shows a SIP BYE response message issued when UE hangs up the phone as it is received by P CSCF interworked and sent along towards terminating UE following the same process as in step . Step shows a 200 OK response message being sent from IMS core network to UE . Since the SIP header for this message does not contain IPv4 or IPv6 addresses no interworking of SIP headers is needed. However the message is still received over IPv4 at V4 SVC at P CSCF and has an IPv4 IP header which requires forwarding to V6 SVC and interworking of the IP header to IPv6 at P CSCF before forwarding to UE . This may be handled automatically by the underlying IP dual stack of P CSCF in some embodiments.

Step shows a SIP 180 RINGING message issued when UE is ringing. It contains the contact information for UE in the Contact field which is interworked by P CSCF from IPv6 to IPv4 in the same manner described above and then forwarded to other UE . Similarly step shows a SIP 200 OK message issued once UE picks up the phone. The message is interworked by P CSCF in the same manner described above and then forwarded to other UE . Step shows a SIP ACK message issued by other UE in response to the SIP 200 OK message of step . The message is sent from other UE across IPv4 compatible IMS core network and thus requires interworking from IPv4 to IPv6 to reach the IPv6 destination address of UE . The interworking takes place at the P CSCF .

Step represents various transactions which take place to initiate the VoIP call and which use SDP and RTP. These transactions also require interworking which in this figure take place at P CSCF . Step shows an SIP BYE message indicating that other UE has hung up the phone. This message requires interworking to reach UE and is interworked at P CSCF . Step shows an SIP 200 OK message in response to the BYE message acknowledging the hangup at UE . This message also requires interworking from IPv6 to IPv4. It is of course possible for UE to hang up the phone first which would cause the initial BYE message to be sent from UE to other UE using interworking and would also cause the OK message to be sent from other UE to UE .

UE initiates the connection to the presence server by sending SIP SUBSCRIBE message to P CSCF . SUBSCRIBE message includes IPv6 addresses in at least the Contact and Via header fields. P CSCF interworks the message by allocating an IPv4 address from a pool or by using a previously allocated IPv4 address mapped to the IPv6 address of UE . Interworked message is then forwarded to IPv4 I S CSCF where it is updated with the address of I S CSCF . Updated message is then forwarded to its destination presence server possibly via other network nodes where the presence server registers the IPv4 address of UE as a subscriber for the desired URI. Step shows a 202 Accepted response from the presence server being forwarded back through the IPv4 core network and IPv4 I S CSCF to dual stack P CSCF which then may interwork the message before forwarding the message over IPv6 to UE . Step occurs when a NOTIFY message from presence server indicating that a change has been published to the URI that UE has subscribed to. The NOTIFY message is sent back through the IPv4 core network as described above interworked by P CSCF and transmitted over IPv6 to UE . Similarly step shows a 200 OK response from UE being interworked from IPv6 to IPv4 at P CSCF and forwarded to presence server over IPv4.

Step shows a SIP PUBLISH message which is used by UE to update information on presence server that other UEs may subscribe to being sent by UE to presence server . In this instance message contains IPv6 addresses that are interworked by P CSCF according to the above procedure and then forwarded using IPv4 to presence server . Presence server may subsequently send out NOTIFY messages indicating that data has changed on the server. Other UEs that are subscribed to UE thus need only connect to presence server which may be done solely over the IPv4 IMS core network or may be done using IPv6 and an interworked connection as well. Step shows the presence server responding to the PUBLISH message by UE . The 200 OK response is interworked at P CSCF before being forwarded to UE .

IPv4 IPv6 interworking at the P CSCF may incorporate other features in certain embodiments. RTP control protocol RTCP packets are typically used in conjunction with RTP sessions. Some embodiments may generate RTCP packets periodically at the P CSCF and transmit them to both the UE and the IMS core network. In doing so RTCP packets for an IPv6 compatible UE may be sent over IPv6 and RTCP packets for an IPv4 compatible UE may be sent out over IPv4. Checkpointing may be incorporated into flows or software modules managing packet streams or sessions for both IPv4 and IPv6 such that appropriate parameters are checkpointed and stored for the flows to be reinstalled upon recovery. The Boolean flag indicating the need for v4 v6 interworking may be checkpointed and recovered as part of the checkpointing of subscriber calling data.

The ability of a dual stack device such as a dual stack P CSCF to maintain transport control protocol TCP connections is not adversely affected because TCP connections are maintained separately on a per service basis. Services not upgraded to interwork across different IP versions or to understand IPv6 will continue to operate normally without conflict on the same server with other services that have been upgraded. Similarly universal datagram protocol UDP fragmentation and reassembly may be permitted for both IPv4 and IPv6. As well P CSCF external interfaces like Rx Rf and DNS are supported on both IPv4 and IPv6. As these servers are configured statically in P CSCF either IPv4 or IPv6 can be used depending on the IP address type supported by peer servers.

A new command line interface CLI and accompanying configuration files and data structures may be added for configuration of the V4 v6 interworking feature. Configuration may be done using syntax and access controls similar to that for existing CLIs. Configuration may be extended for access services such as V4 SVC and V6 SVC as well as for the core service. An example configuration is as follows 

As it may be useful to collect statistics on service availability all statistics and bulk statistics that are collected on a typical IPv4 compatible P CSCF may also be collected for a dual stack device such as a P CSCF capable of interworking. A command line interface CLI may also be used to display these statistics with particular syntax or flags used to indicate whether IPv4 or IPv6 statistics are desired. IMS statistics may also be recorded such as packet traffic on the Gm interface between the UE and the P CSCF and packet traffic on the Mw interface between and among P CSCF I CSCF and S CSCF. The IP address in this CLI may be given as unspecified IPv6 address to indicate Gm interface. The statistics manager may automatically collect relevant statistics from each device. An example is below 

It is preferable to perform v4 v6 interworking at the S CSCF instead of at the P CSCF thereby enabling communication with other IMS network nodes regardless of IP version. P CSCF I CSCF will likely support the same IP version as the S CSCF but an interworking S CSCF would permit interworking towards application servers and peer servers such as media gateway controller functions MGCFs or toward S CSCFs in other domains.

Similar to the implementation of v4 v6 interworking on a P CSCF an interworking S CSCF is a dual stack device supporting IPv4 and IPv6 and may act in B2BUA mode as an SIP proxy. An interworking S CSCF may identify the need for interworking on receiving a new request. If a translation lookup is done on a destination user and the retrieved address is not local a route request may be initiated. If the resulting next hop server supports a different IP version from the incoming request v4 v6 interworking may be done. If route lookup yields a domain name a DNS query may be done to resolve the name to an IP address. This IP address may be for a different IP version from the incoming request in which case interworking may be done. IP address allocation from pools used for modifying SDP headers and packets may be done during the route request itself

Peer server addresses with different IP versions returned by LIR LIA and ENUM lookups may also trigger v4 v6 interworking at the S CSCF. When a previous peer server cannot be reached and S CSCF attempts to connect to a different peer server using a hunting method or another method S CSCF may invoke v4 v6 interworking for peer servers as necessitated by the IP versions of incoming requests the S CSCF or the network.

On determining if v4 v6 interworking is required for a particular request the request is forwarded through a peer S CSCF access service running the same IP version as that of the next hop server. As a B2BUA the egress S CSCF service may receive SIP requests perform interworking by replacing all IP addresses in the outgoing request with the appropriate version for the next hop server and then may subsequently send the outgoing request acting as a client. SDP packets in each direction may also be interworked with IP addresses from pools configured under corresponding S CSCFs for handling media. During interworking a pair of custom SIP Record Route headers is added with the top Record Route header containing an identifier for the outbound call leg and the bottom Record Route header containing an identifier for the inbound call leg. A X ST CID custom parameter is used to tag or identify these Record Route headers.

Interworking takes place in a similar way as the method described above for dual stack interworking P CSCFs. S CSCF first receives the message from P CSCF at access service V6 SVC not shown . V6 SVC checks whether a v4v6 interworking flag has been set on the session and if it has not been set checks whether the next hop destination on the way to the final destination is an IPv4 or IPv6 address. In this case the flag has not been set and both the next hop and final destinations are the same IPv4 peer server . Since IPv4 peer server does not support IPv6 a DNS query for peer server returns an A record and no AAAA record. This causes V6 SVC to set the v4v6 interworking flag and forward the message to V4 SVC not shown on S CSCF . V4 SVC interworks the message headers by allocating a new IPv4 address and port from a pool of addresses for UE and replacing the IPv6 addresses with the new IPv4 address. Since it is not necessary no IPv4 address for P CSCF is generated although one may be generated in some embodiments. The mapping is stored at the S CSCF possibly in a session data structure. V4 SVC then forwards the interworked message in step and it is received by peer server .

Step shows a SIP 180 RINGING message being sent from the IPv4 peer server using IPv4 interworked at the S CSCF to IPv6 and received at the UE . Step shows a SIP 200 OK message similarly sent from peer server interworked at the S CSCF to IPv6 and received at UE . Step shows a SIP ACK message being sent from UE in IPv6 interworked at S CSCF into IPv4 and received at peer server . Step similarly shows a SIP BYE message being sent from UE in IPv6 interworked at S CSCF into IPv4 and received at peer server . Peer server responds with a SIP 200 OK message which may be sent to UE without interworking in some embodiments or with working as required.

S CSCF may also perform v4 v6 interworking for calls between users registered in different S CSCFs with different IP versions. During route request lookup if S CSCF sees the translation as local but the terminating user is found to be registered in peer S CSCF which runs on a different IP version then v4 v6 interworking will be performed by S CSCF . The allocation of IP addresses from pools for modifying SIP SDP or RTP headers is done during route request itself.

If the translation is local and the terminating user is not found in a local cache of the current S CSCF or any peer S CSCF then the request may be forwarded to a software module managing CSCF functions which may be called CSCFMGR in some embodiments. CSCFMGR then may forward the request to a session manager or other hardware and or software module that is aware of where the user is registered. If the session manager finds the terminating user to be registered with a peer S CSCF that uses a different IP version v4 v6 interworking may be invoked. As well some embodiments may employ a centralized or distributed database to determine which S CSCF a given user is registered to.

If the terminating user has multiple Contact addresses registered and the S CSCF is forking then v4 v6 interworking will be performed for those Contacts whose IP version is different from the current S CSCF s IP version. The same pool IP addresses and port may be used in SDP modification for all the Contacts involving v4 v6 interworking because eventually the session will be established with only one Contact address.

In SIP a S CSCF performs registration by maintaining a list of registered request URIs. The URIs may be any valid URI and need not be either IPv4 or IPv6 in both UE and UE have used domain names and not IP addresses to perform registration. These registrations may be commingled in a single list so that S CSCF need not maintain separate lists for IPv4 registrations and IPv6 registrations. When a SIP query for a particular URI is received at S CSCF it may pass the SIP query from the access service that receives it to a core CSCF module not shown which consults the list of all registrations and returns the relevant information. In this way CSCF and S CSCF functions may be implemented in an IP protocol version neutral fashion. Interworking may thus be limited to the replacing of addresses at the access service before a message is sent out.

Steps show a SIP INVITE request a SIP 180 RINGING response a SIP 200 OK response a SIP ACK response a SIP BYE response and a SIP 200 OK response in the call flow order that would occur during a telephone call from IPv6 UE to IPv4 UE . The messages are interworked at dual stack S CSCF from IPv6 to IPv4 and vice versa according to the method disclosed above.

In step UE sends an INVITE message to P CSCF with the SIP URI userB starent.com as its destination. The message contains plaintext SIP headers that include the IPv6 address of the UE such as in the Via and Contact headers. In step P CSCF receives the message and appends its own IPv6 address in the Via header before passing it on to S CSCF . In step dual stack S CSCF interworks the message before sending it out to IPv4 application server .

Step shows a SIP 180 RINGING message being sent from the IPv4 application server using IPv4 interworked at the S CSCF to IPv6 and received at the UE . Step shows a SIP 200 OK message similarly sent from application server interworked at the S CSCF to IPv6 and received at UE . Step shows a SIP ACK message being sent from UE in IPv6 interworked at S CSCF into IPv4 and received at application server . Step similarly shows a SIP BYE message being sent from UE in IPv6 interworked at S CSCF into IPv4 and received at application server . Application server responds with a SIP 200 OK message which may be sent to UE without interworking in some embodiments or with interworking as required.

Step shows a SIP 180 RINGING message being sent from the IPv6 application server using IPv6 interworked at the S CSCF to IPv4 and received at the UE . Step shows a SIP 200 OK message similarly sent from application server interworked at the S CSCF to IPv4 and received at UE . Step shows a SIP ACK message being sent from UE in IPv4 interworked at S CSCF into IPv6 and received at application server . Step similarly shows a SIP BYE message being sent from UE in IPv4 interworked at S CSCF into IPv6 and received at application server . Application server responds with a SIP 200 OK message which may be sent to UE without interworking in some embodiments or with working as required.

Various other features may be enabled via S CSCF interworking such as call forwarding. A S CSCF may change the target of a request based on certain call forwarding features enabled for the user. In this case if the IP version of the new target is different from the source IP address version then v4 v6 interworking may be performed. Another example is the follow me feature. When the follow me feature is enabled for a subscriber then v4 v6 interworking is performed while forwarding to the follow me users with a different IP version. Another example is the command line interface CLI used by the P CSCF implementation to enable v4 v6 interworking. Interworking may also be permitted for S CSCFs configured under the same VPN context. It is also possible to use v4 v6 interworking with any and all packet types and flows that have not heretofore been mentioned. All existing S CSCF statistics and bulk statistics will be supported when v4 v6 interworking is enabled. If a flag is used the flag indicating v4 v6 interworking may be stored in the CSCF session and may be checkpointed and recovered on task failures along with any NPU flow parameters.

Further embodiments of the invention may incorporate support for lawful intercept support for having both IPv4 and IPv6 P CSCFs in the same VPN context and other features wherein each service is enabled to identify the appropriate IP version for each network node and to effectively interwork messages if necessary.

The user equipment described above can communicate with a plurality of radio access networks using a plurality of access technologies and with wired communication networks. The user equipment can be a smartphone offering advanced capabilities such as word processing web browsing gaming e book capabilities an operating system and a full keyboard. The user equipment may run an operating system such as Symbian OS iPhone OS RIM s Blackberry Windows Mobile Linux Palm WebOS and Android. The screen may be a touch screen that can be used to input data to the mobile device and the screen can be used instead of the full keyboard. The user equipment may have the capability to run applications or communicate with applications that are provided by servers in the communication network. The user equipment can receive updates and other information from these applications on the network.

The user equipment also encompasses many other devices such as televisions TVs video projectors set top boxes or set top units digital video recorders DVR computers netbooks laptops and any other audio visual equipment that can communicate with a network. The user equipment can also keep global positioning coordinates profile information or other location information in its stack or memory. The user equipment can have a memory such as a computer readable medium flash memory a magnetic disk drive an optical drive a programmable read only memory PROM and or a read only memory ROM . The user equipment can be configured with one or more processors that process instructions and run software that may be stored in memory. The processor can also communicate with the memory and interfaces to communicate with other devices. The processor can be any applicable processor such as a system on a chip that combines a CPU an application processor and flash memory. The interfaces can be implemented in hardware or software. The interfaces can be used to receive both data and control information from the network as well as local sources such as a remote control to a television. The user equipment can also provide a variety of user interfaces such as a keyboard a touch screen a trackball a touch pad and or a mouse. The user equipment may also include speakers and a display device in some embodiments.

The gateway described above is implemented in a network device in some embodiments. This network device can implement multiple and different integrated functionalities. In some embodiments one or more of the following functionalities can be implemented on the network device including a security gateway SeGW an access gateway a Gateway General packet radio service Serving Node GGSN a serving GPRS support node SGSN a packet data inter working function PDIF an access service network gateway ASNGW a User Plane Entity UPE an IP Gateway a session initiation protocol SIP server a proxy call session control function P CSCF and an interrogating call session control function I CSCF a serving gateway SGW and a packet data network gateway PDN GW a mobility management entity MME a mobility access gateway MAG an HRPD serving gateway HSGW a local mobility anchor LMA a packet data serving node PDSN a foreign agent FA and or home agent HA . In certain embodiments the functionalities are provided by a combination of hardware and software in the network device. General purpose hardware can be configured in the network device to provide one or more of these specialized functionalities.

In some embodiments the network device is implemented using a collection of integrated circuit boards or cards. These cards include input output interfaces for communication amongst each other at least one processor for executing instructions and running modules that are stored in memory and memory for storing data. The features of a network device that implements a gateway in accordance with some embodiments are further described below. illustrates the implementation of a network device in accordance with some embodiments. The network device includes slots for loading application cards and line cards. A midplane can be used in the network device to provide intra network device communications power connections and transport paths between the various installed cards. The midplane can include buses such as a switch fabric a control bus a system management bus a redundancy bus and a time division multiplex TDM bus. The switch fabric is an IP based transport path for user data throughout the network device implemented by establishing inter card communications between application cards and line cards. The control bus interconnects the control and management processors within the network device. The network device management bus provides management of system functions such as supplying power monitoring temperatures board status data path errors card resets and other failover features. The redundancy bus provides transportation of user data and redundancy links in the event of hardware failures. The TDM bus provides support for voice services on the system.

The network device supports at least four types of application cards a switch processor I O card SPIO a system management card SMC a packet service card PSC and a packet accelerator card not shown . Other cards used in the network device include line cards and redundant crossbar cards RCC . The line cards when loaded in the network device provide input output connectivity to the network and other devices as well as redundancy connections. The line cards include interfaces to the network through Ethernet Fiber Optic and the other communication mediums. The redundant crossbar card RCC includes a non blocking crossbar and connections to each of the cards in the network device. This allows a redundant connection to be made through the redundant crossbar card from any one card to any other card in the network device. The SPIO card serves as a controller of the network device and is responsible for such things as initializing the network device and loading software configurations onto other cards in the network device.

The system management card SMC and switch processor card not shown are system control and management cards for managing and controlling other cards in the network device. The packet accelerator card PAC and packet service card PSC provide packet processing context processing capabilities and forwarding capabilities among other things. The PAC and PSC perform packet processing operations through the use of control processors and a network processing unit. The network processing unit determines packet processing requirements receives and transmits user data frames to from various physical interfaces makes IP forwarding decisions implements packet filtering flow insertion deletion and modification performs traffic management and traffic engineering modifies adds strips packet headers and manages line card ports and internal packet transportation. The control processors also located on the packet accelerator card provide packet based user service processing.

The operating system software can be based on a Linux software kernel and run specific applications in the network device such as monitoring tasks and providing protocol stacks. The software allows network device resources to be allocated separately for control and data paths. For example certain packet accelerator cards and packet services cards can be dedicated to performing routing or security control functions while other packet accelerator cards packet services cards are dedicated to processing user session traffic. As network requirements change hardware resources can be dynamically deployed to meet the requirements in some embodiments. The system can be virtualized to support multiple logical instances of services such as technology functions e.g. a SeGW PGW SGW MME HSGW PDSN ASNGW PDIF HA or GGSN .

The network device s software can be divided into a series of tasks that perform specific functions. These tasks communicate with each other as needed to share control and data information throughout the network device. A task is a software process that performs a specific function related to system control or session processing. Three types of tasks operate within the network device in some embodiments critical tasks controller tasks and manager tasks. The critical tasks control functions that relate to the network device s ability to process calls such as network device initialization error detection and recovery tasks. The controller tasks mask the distributed nature of the software from the user and perform tasks such as monitor the state of subordinate manager s provide for intra manager communication within the same subsystem and enable inter subsystem communication by communicating with controller s belonging to other subsystems. The manager tasks can control system resources and maintain logical mappings between system resources.

Individual tasks that run on processors in the application cards can be divided into subsystems. A subsystem is a software element that either performs a specific task or is a culmination of multiple other tasks. A single subsystem can include critical tasks controller tasks and manager tasks. Some of the subsystems that can run on a network device include a system initiation task subsystem a high availability task subsystem a recovery control task subsystem a shared configuration task subsystem a resource management subsystem a virtual private network subsystem a network processing unit subsystem a card slot port subsystem and a session subsystem.

The system initiation task subsystem is responsible for starting a set of initial tasks at system startup and providing individual tasks as needed. The high availability task subsystem works in conjunction with the recovery control task subsystem to maintain the operational state of the network device by monitoring the various software and hardware components of the network device. Recovery control task subsystem is responsible for executing a recovery action for failures that occur in the network device and receives recovery actions from the high availability task subsystem. Processing tasks are distributed into multiple instances running in parallel so if an unrecoverable software fault occurs the entire processing capabilities for that task are not lost. User session processes can be sub grouped into collections of sessions so that if a problem is encountered in one sub group users in another sub group will not be affected by that problem.

The architecture also allows check pointing of processes which is a mechanism to protect the system against any critical software processes that may fail. The self healing attributes of the software architecture protects the system by anticipating failures and instantly spawning mirror processes locally or across card boundaries to continue the operation with little or no disruption of service. This unique architecture allows the system to perform at the highest level of resiliency and protects the user s data sessions while ensuring complete accounting data integrity.

Shared configuration task subsystem provides the network device with an ability to set retrieve and receive notification of network device configuration parameter changes and is responsible for storing configuration data for the applications running within the network device. A resource management subsystem is responsible for assigning resources e.g. processor and memory capabilities to tasks and for monitoring the task s use of the resources.

Virtual private network VPN subsystem manages the administrative and operational aspects of VPN related entities in the network device which include creating separate VPN contexts starting IP services within a VPN context managing IP pools and subscriber IP addresses and distributing the IP flow information within a VPN context. In some embodiments within the network device IP operations are done within specific VPN contexts. The network processing unit subsystem is responsible for many of the functions listed above for the network processing unit. The card slot port subsystem is responsible for coordinating the events that occur relating to card activity such as discovery and configuration of ports on newly inserted cards and determining how line cards map to application cards.

The session subsystem is responsible for processing and monitoring a mobile subscriber s data flows in some embodiments. Session processing tasks for mobile data communications include S1 S5 S8 interface termination for LTE networks A10 A11 interface termination for CDMA networks GSM tunneling protocol GTP termination for GPRS and or UMTS networks asynchronous PPP processing IPsec packet filtering packet scheduling Diffsery codepoint marking statistics gathering IP forwarding and AAA services for example. Responsibility for each of these items can be distributed across subordinate tasks called managers to provide for more efficient processing and greater redundancy. A separate session controller task serves as an integrated control node to regulate and monitor the managers and to communicate with the other active subsystem. The session subsystem also manages specialized user data processing such as payload transformation filtering statistics collection policing and scheduling.

In providing emulation as MIPv4 is received from a mobile node the session subsystem can setup a MIPv4 termination and setup a PMIPv6 session towards the core network. A session manager can track the mapping of the sessions and processing to provide the emulation and inter working between the networks. A database can also be used to map information between the sessions and store for example NAI HoA AE information in some embodiments.

The network device allows system resources to be allocated separately for control and data paths. For example certain PACs PSCs could be dedicated to performing routing or security control functions while other PACs PSCs are dedicated to processing user session traffic. As network requirements grow and call models change hardware resources can be added to accommodate processes such as encryption packet filtering etc. that require more processing power. illustrates a logical view of the software architecture of a network device in accordance with certain embodiments. As shown the software and hardware can be distributed within the network device and across different circuit boards processors and memory. includes a primary switch processor card SPC system management card SMC a secondary SPC SMC PAC PSC a communication path and a synchronization path . The SPC SMC include a memory a processor a boot configuration high availability tasks resource manager switch fabric control and controller tasks .

The SPC SMC manage and control the network device including the other cards in the network device. The SPC SMC can be configured in a primary and secondary arrangement that provides redundancy and failsafe protection. The modules or tasks running on the SPC SMC are related to network device wide control and management. The boot configuration task includes information for starting up and testing the network device. The network device can also be configured to startup in different configurations and providing different implementations. These can include which functionalities and services are capable of running on the SPC SMC . The high availability task maintains the operational state of the network device by monitoring the device and managing recovery efforts to avoid disruption of service. The resource manager tracks and assigns the available resources for sessions and demands on the network device. This can include load balancing among different processors and tasks running on the network device. Processes can be distributed across the system to fit the needs of the network model and specific process requirements. For example most tasks can be configured to execute on SPC SMC or a PAC PSC while some processor intensive tasks can also be performed across multiple PACs PSCs to utilize multiple CPU resources. Distribution of these tasks is invisible to the user. The switch fabric control controls the communication paths in the network device. The controller tasks module can manage the tasks among the resources of the networks to provide for example VPN services assign ports and create delete and modify sessions for user equipment.

The PAC PSC are high speed processing cards that are designed for packet processing and the tasks involved with providing various network functionalities on the network device. The PAC PSC include a memory a network processing unit NPU a processor a hardware engine an encryption component a compression component and a filter component . Hardware engines can be deployed with the card to support parallel distributed processing for compression classification traffic scheduling forwarding packet filtering and statistics compilations. The components can provide specialize processing that can be done more efficiently than using a general processor in some embodiments.

Each PAC PSC is capable of supporting multiple contexts. The PAC PSC are also capable of running a variety of tasks or modules. PAC PSC provides routing managers with each covering routing of a different domain. PAC PSC provides a session manager and an AAA manager . The session manager manages one or more sessions that correspond to one or more user equipment. A session allows a user equipment to communicate with the network for voice calls and data. The AAA manager manages accounting authentication and authorization with an AAA server in the network. PAC PSC provides a deep packet inspection task and a signaling demux . The deep packet inspection task provides inspection of packet information beyond layer for use and analysis by the network device. The signaling demux can provide scalability of services in combination with other modules. PAC PSC provides redundancy through standby tasks . Standby tasks store state information and other task information so that the standby task can immediately replace an active task if a card fails or if there is a scheduled event to remove a card.

In some embodiments the software needed for implementing a process or a database includes a high level procedural or an object orientated language such as C C C Java or Perl. The software may also be implemented in assembly language if desired. Packet processing implemented in a network device can include any processing determined by the context. For example packet processing may involve high level data link control HDLC framing header compression and or encryption. In certain embodiments the software is stored on a storage medium or device such as read only memory ROM programmable read only memory PROM electrically erasable programmable read only memory EEPROM flash memory or a magnetic disk that is readable by a general or special purpose processing unit to perform the processes described in this document. The processors can include any microprocessor single or multiple core system on chip SoC microcontroller digital signal processor DSP graphics processing unit GPU or any other integrated circuit capable of processing instructions such as an x86 microprocessor.

Although the present disclosure has been described and illustrated in the foregoing example embodiments it is understood that the present disclosure has been made only by way of example and that numerous changes in the details of implementation of the disclosure may be made without departing from the spirit and scope of the disclosure which is limited only by the claims which follow.

