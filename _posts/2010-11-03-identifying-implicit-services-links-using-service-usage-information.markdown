---

title: Identifying implicit services links using service usage information
abstract: Embodiments of the invention include a computer-implemented process for identifying implicit services links, using service usage information, in service registries and repositories. Service registry and repository receives service access information for a service to form received information, creates a services access context object in real time from all received information or a selected subset of received information to form a created services access context object, and stores the created services access context object in a data structure to form a stored services access context object. The computer-implemented process further analyzes a set of stored services access context objects in real time to form a set of results, wherein the results are within a predefined certainty and sends the result to a requester. The set of results comprises a set of implicit soft links determined by usage information in the services access context objects, wherein the implicit soft links are implicit services links.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09177073&OS=09177073&RS=09177073
owner: International Business Machines Corporation
number: 09177073
owner_city: Armonk
owner_country: US
publication_date: 20101103
---
This application claims priority under 35 U.S.C. 119 a to Canadian Patent Application Serial Number 2684353 filed Nov. 4 2009 entitled IDENTIFYING IMPLICIT SERVICES LINKS USING SERVICE USAGE INFORMATION the entirety of which is incorporated herein by reference.

This disclosure relates generally to service registries and repositories in a data processing system and more specifically identifying implicit services links using service usage information in service registries and repositories in the data processing system.

Service registries and repositories SRR are considered as one of the corner stones of a typical service oriented architecture implementation. A service registry and repository is typically combined into a single system but may also be implemented as separate components linked together for cooperative processing of requests. A service repository allows users to store manage and query service metadata artifacts containing service descriptions. A registry provides functions for registered service declarations and elements of the derived content models with user defined properties relationships and classifiers.

It is possible to explicitly associate relationships between different services in the repository however it is not sufficient for identifying the soft links based on the services usage. For example a suggestions function available on a typical online book ordering sites provides a capability to propose a list of books bought or considered by other customers who previously purchased the same book being considered by a customer. This is an example of behavioral or usage knowledge. The books are not related to each in any way other than the fact that the books are often bought together by consumers. This information can only be obtained from observing the consumer usage patterns and cannot be predicted before hand.

Behavioral patterns intelligence is typically missing from available services registries and repositories where the intelligence can be applied in more ways than currently done on multiple businesses to consumers sites. Typical services are treated as separate entities or a relationship between services is defined prior to use and much information available from observing services usage patterns is therefore not utilized.

According to one embodiment a computer implemented process for identifying implicit service links is presented. The computer implemented process receives service access information for a service to form received information creates a services access context object in real time from all received information or a selected subset of received information to form a created service access context object and stores the created service access context object in a data structure to form a stored service access context object. The computer implemented process further analyzes a set of stored service access context objects in real time to form a set of results wherein the results are within a predefined certainty and sends the result to a requester.

According to another embodiment a computer program product for identifying implicit services links is presented. The computer program product comprises a computer recordable media containing computer executable program code stored thereon. The computer executable program code comprises computer executable program code for receiving service access information for a service to form received information computer executable program code for creating a service access context object in real time from all received information or a selected subset of received information to form a created service access context object computer executable program code for storing the created service access context object in a data structure to form a stored service access context object computer executable program code for analyzing a set of stored service access context objects in real time to form a set of results wherein the results are within a predefined certainty and computer executable program code for sending the result to a requester.

According to another embodiment an apparatus for identifying implicit services links is presented. The apparatus comprises a communications fabric a memory connected to the communications fabric wherein the memory contains computer executable program code a communications unit connected to the communications fabric an input output unit connected to the communications fabric a display connected to the communications fabric and a processor unit connected to the communications fabric wherein the processor unit executes the computer executable program code to direct the apparatus to receive service access information for a service to form received information create a service access context object in real time from all received information or a selected subset of received information to form a created service access context object store the created service access context object in a data structure to form a stored service access context object analyze a set of stored service access context objects in real time to form a set of results wherein the results are within a predefined certainty and send the result to a requester.

Although an illustrative implementation of one or more embodiments is provided below the disclosed systems and or methods may be implemented using any number of techniques. This disclosure should in no way be limited to the illustrative implementations drawings and techniques illustrated below including the exemplary designs and implementations illustrated and described herein but may be modified within the scope of the appended claims along with their full scope of equivalents.

As will be appreciated by one skilled in the art the present disclosure may be embodied as a system method or computer program product. Accordingly the present disclosure may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore the present invention may take the form of a computer program product tangibly embodied in any medium of expression with computer usable program code embodied in the medium.

Computer program code for carrying out operations of the present disclosure may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. Java and all Java based trademarks and logos are trademarks of Sun Microsystems Inc. in the United States other countries or both. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

The present disclosure is described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions.

These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer program instructions may also be stored in a computer readable medium that can direct a computer or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instruction means which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Turning now to a block diagram of an exemplary data processing system operable for various embodiments of the disclosure is presented. In this illustrative example data processing system includes communications fabric which provides communications between processor unit memory persistent storage communications unit input output I O unit and display .

Processor unit serves to execute instructions for software that may be loaded into memory . Processor unit may be a set of one or more processors or may be a multi processor core depending on the particular implementation. Further processor unit may be implemented using one or more heterogeneous processor systems in which a main processor is present with secondary processors on a single chip. As another illustrative example processor unit may be a symmetric multi processor system containing multiple processors of the same type.

Memory and persistent storage are examples of storage devices . A storage device is any piece of hardware that is capable of storing information such as for example without limitation data program code in functional form and or other suitable information either on a temporary basis and or a permanent basis. Memory in these examples may be for example a random access memory or any other suitable volatile or non volatile storage device. Persistent storage may take various forms depending on the particular implementation. For example persistent storage may contain one or more components or devices. For example persistent storage may be a hard drive a flash memory a rewritable optical disk a rewritable magnetic tape or some combination of the above. The media used by persistent storage also may be removable. For example a removable hard drive may be used for persistent storage .

Communications unit in these examples provides for communications with other data processing systems or devices. In these examples communications unit is a network interface card. Communications unit may provide communications through the use of either or both physical and wireless communications links.

Input output unit allows for input and output of data with other devices that may be connected to data processing system . For example input output unit may provide a connection for user input through a keyboard a mouse and or some other suitable input device. Further input output unit may send output to a printer.

Instructions for the operating system applications and or programs may be located in storage devices which are in communication with processor unit through communications fabric . In these illustrative examples the instructions are in a functional form on persistent storage . These instructions may be loaded into memory for execution by processor unit . The processes of the different embodiments may be performed by processor unit using computer implemented instructions which may be located in a memory such as memory .

These instructions are referred to as program code computer usable program code or computer readable program code that may be read and executed by a processor in processor unit . The program code in the different embodiments may be embodied on different physical or tangible computer readable media such as memory or persistent storage .

Program code is located in a functional form on computer readable media that is selectively removable and may be loaded onto or transferred to data processing system for execution by processor unit . Program code and computer readable media form computer program product in these examples. In one example computer readable media may be in a tangible form such as for example an optical or magnetic disc that is inserted or placed into a drive or other device that is part of persistent storage for transfer onto a storage device such as a hard drive that is part of persistent storage . In a tangible form computer readable media also may take the form of a persistent storage such as a hard drive a thumb drive or a flash memory that is connected to data processing system . The tangible form of computer readable media is also referred to as computer recordable storage media. In some instances computer readable media may not be removable.

Alternatively program code may be transferred to data processing system from computer readable media through a communications link to communications unit and or through a connection to input output unit . The communications link and or the connection may be physical or wireless in the illustrative examples. The computer readable media also may take the form of non tangible media such as communications links or wireless transmissions containing the program code.

In some illustrative embodiments program code may be downloaded over a network to persistent storage from another device or data processing system for use within data processing system . For instance program code stored in a computer readable storage medium in a server data processing system may be downloaded over a network from the server to data processing system . The data processing system providing program code may be a server computer a client computer or some other device capable of storing and transmitting program code .

The different components illustrated for data processing system are not meant to provide architectural limitations to the manner in which different embodiments may be implemented. The different illustrative embodiments may be implemented in a data processing system including components in addition to or in place of those illustrated for data processing system . Other components shown in can be varied from the illustrative examples shown. The different embodiments may be implemented using any hardware device or system capable of executing program code. As one example the data processing system may include organic components integrated with inorganic components and or may be comprised entirely of organic components excluding a human being. For example a storage device may be comprised of an organic semiconductor.

As another example a storage device in data processing system may be any hardware apparatus that may store data. Memory persistent storage and computer readable media are examples of storage devices in a tangible form.

In another example a bus system may be used to implement communications fabric and may be comprised of one or more buses such as a system bus or an input output bus. Of course the bus system may be implemented using any suitable type of architecture that provides for a transfer of data between different components or devices attached to the bus system. Additionally a communications unit may include one or more devices used to transmit and receive data such as a modem or a network adapter. Further a memory may be for example memory or a cache such as found in an interface and memory controller hub that may be present in communications fabric .

According to an illustrative embodiment a computer implemented process for identifying implicit services links using service usage information in service registries and repositories receives service access information for a service to form received information creates a services access context object in real time from the received information to form a created service access context object and stores the created service access context object in a data structure to form a stored service access context object. The computer implemented process further analyzes a set of stored service access context objects in real time to form a set of results and sends the result to a requester. The set of results comprises a set of implicit soft links determined by usage information in the services access context objects wherein the implicit soft links are implicit services links. Implicit soft links are provided along with the probably data for existence of such links.

Using data processing system of as an example an illustrative embodiment provides the computer implemented process stored in memory executed by processor unit for receiving service access information for a service through communications unit or input output unit or storage device to form received information. Processor unit creates a service access context object in real time from the received information to form a created service access context object and stores the created service access context object in a data structure maintained in storage devices to form a stored service access context object. Processor unit further analyzes a set of stored service access context objects in real time to form a set of results and sends the result to a requester typically through communications unit . The set of results comprises a set of implicit soft links determined by usage information in the service access context objects wherein the implicit soft links are implicit services links.

In another example a computer implemented process uses program code stored in memory or as a computer program product .

In an alternative embodiment program code containing the computer implemented process may be stored within computer readable media as computer program product . In another illustrative embodiment the process may be implemented in an apparatus comprising a communications fabric a memory connected to the communications fabric wherein the memory contains computer executable program code a communications unit connected to the communications fabric an input output unit connected to the communications fabric a display connected to the communications fabric and a processor unit connected to the communications fabric. The processor unit of the apparatus executes the computer executable program code to direct the apparatus to perform the process.

Illustrative embodiments provide a capability to enhance the operation of service registries and repositories by utilizing the concepts of services usage intelligence. For example based on intelligence information an implementation according to the illustrative embodiments will be able to respond to scenarios where users use a specific service and determine what other services they are likely to use as well.

Other examples include answering if users are interested in a specific service what other services they are likely to be interested in as well. Interested as opposed to use in this example means that users might search for some services through a service registries and repositories user interface and then receive a proposal for example users that search a payment service have most often used Service A and have also been interested in Service B and Service C. In a related example the query can determine if users use a specific service what other services were used prior to using the given service and if users used the specific service what other services are likely to be used afterwards.

Another example query may determine the best service for specific circumstances from N available similar services where specific circumstances means certain context parameters. For example the query can determine whether or not there some soft relationship between specific service and other services in terms of affected quality of service and other parameters. The query also can determine when a certain version of a specific service is used the versions of other services that are likely to be used. The query yet further can determine the rank of the service among other similar services based on specific parameters including quality of service type of user of the service and user feedback. Even yet further the query can determine similar services available in the repository based on the interface parameters and meta data. Finally the query can determine the quality of service correlations with other services for example when three other seemingly unrelated services are slow whether a service of interest response also is slow.

Service consumers benefit through a set of capabilities including finding new relevant services easily obtaining best services from a pool of similar services and estimating services that suit their needs the most. Service providers benefit through a set of capabilities to determine soft links between different services determine usage patterns of existing services which might lead to optimization of service offerings or a new offering and receiving statistics including statistics for sequencing of services usage.

With reference to a block diagram of a services registry and repository system in accordance with various embodiments of the disclosure is presented. Services registry and repository system is an illustrative embodiment of an example of an enhanced services registry and repository system as may be used on data processing system of .

Services registry and repository system comprises a number of components including services registry and repository services access service access information services access context creator services access context object services access context object repository data analyzer interface and requester . Service registry and repository may be implemented as a set of separate units or a combination of registry and repository units as illustrated.

For each service access of a request for services service access information associated with the request flows into service registry and repository . Service access information typically contains parameters of the service request as well as information about the context in which the service request was made. For example the context information typically includes when available user information for the user who made a request the origin of the request in terms of location or device as in a browser versus a mobile device requested quality of service and other context information. Services access context creator creates service access context object using service access information and environmental variables.

Service access context creator creates an object based on general settings specified by an administrator of the system. For example an administrator might specify that all data in the service access information should be captured. Alternatively the administrator might specify that only a subset of data should be captured for example ignore the geographic context of the request. Services access context creator has capabilities to deduct certain context properties based on specified rules. For example a rule can specify when a certain service is accessed from a mobile device a lower quality image should be sent in response when available. Services access does not necessarily mean actual access to a function provided by a specific service. Services access also includes the concept of accessing any meta data relevant to a service for example when a user of services registry and repository searches for a service using interface to services registry and repository .

Service access context object is an object that contains data about the context in which a specific service was accessed. The information typically contains but is not limited to properties or attributes including time of access origin of access time of completed execution if available information about quality of service when available and information about the service itself. A service access context object is designed to be easily extendable so that any context information specific to certain domains services type repository service provider and other categories of information could be properly captured.

Services access context object repository stores the services access context information about the services access for later analysis. Services access context object repository may be implemented as a set of one or more repositories for example databases logically or physically associated to collectively provide a capability to contain and manage the service access information collected for services access requests.

Data analyzer provides an analysis capability to process data contained in the services access context object repository based on the properties or attributes available in each services access context object . For example data analyzer provides a query capability to provide responses to typical questions including what services are typically invoked together with a specific service what services are usually invoked prior to or after a given service what services affect the response time of a given service what is the rank of the service among other similar services based on a set of specific parameters that may include quality of service or user feedback what similar services are available in the repository typically based on interface parameters or meta data what the quality of service correlations with other services for example if three other seemingly unrelated services are slow will this service response also be slow. In other examples the query can determine what other services are accessed from the same type of device what other services are accessed in a certain time frame from a certain geography. Much more complicated queries can be built as well. Since all the service access context information is captured the complexity of a query depends on the richness of such information. For example when enough data is present a user can construct complicated query as what are the services that are accessed prior to a specific service from a given locale in a specific time slot using a specific hand held device by users with an age under 30 in a personal profile and who also have contact e mail specified in the profile. Typically data analyzer provides a result with a specific certainty. For example a specific service is followed by service A 80 percent of the time.

Interface layer provides an abstraction of data analyzer application programming interfaces to insulate data analyzer implementation from requesters . Since the information contained in services registry and repository might be requested by many different forms of requester an abstracted plug and play interface layer hides native data analyzer application programming interfaces and translates queries from the different forms of requester into data analyzer specific queries. Interface may be provided as a component or removed when such flexibility is not required.

Requester is an information requester interested in the usage of intelligence information. Requester can be a graphical user interface of services registry and repository that allows a search for specific services and provides some suggestions on which other services have been searched for by other users interested in a specific service which is similar to the previously presented book suggestions. Requester can be a notification component that notifies service consumers of a possible outage because some other softly related services went down. Requester can be application programming interface layer of services registry and repository for example that chooses a most suitable service in response to a dynamic mediation call based on a user feedback available for multiple similar services. Requester can be a development environment connected to services registry and repository requesting information on a soft impact when a service is modified as part of a development process. Requester can also be any other part of a services oriented architecture implementation that is interested in services usage intelligence. Services registry and repository system adds capabilities to a services registries and repositories implementation by utilizing services usage data to increase benefits provided by service registries and repositories to both service consumers and service providers. Requestor is able to specify a specific certainty threshold for the expected results. For example a certainty threshold may be specified as 100 percent certainty 70 percent certainty and other selected values.

With reference to a flowchart of a service access context object creation process in accordance with various embodiments of the disclosure is presented. Services access context object creation process is an example of a process used in services registry and repository system of .

Process starts step and receives service access information for a service to form received information step . Service access information is specific to a services access typically the result of a request for a service. Service access information as previously stated typically contains but is not limited to properties or attributes including time of access origin of access time of completed execution if available information about quality of service when available and information about the service itself.

Process performs create services access context object to form a created services access context object in real time step . All received information or a selected subset of the received information is used. The services access context object is created on a basis of per access instance per service. For example when ten service accesses are received for a service each of the ten accesses will result in the creation of a services access context object having appropriate respective property or attribute information collected and processed. Real time in the context of use is not intended to imply instantaneous results rather real time implies within the transaction lifetime. The transaction may be a service access or in another example a request for usage based information.

Store created services access context object in a data structure to form a stored services access context object is performed step . The data structure contains a set of stored services access context objects. Stored services access context objects that may be associated with a specific service may be either logically associated in different physical locations or physically associated to one another in a same location. The data structure may be a memory including a collection of related data base tables arrays vectors or other suitable means of organizing and maintaining collections of information.

A typical entry includes an identifier of the service to which the access information applies and any captured descriptive information of the specific service access. For example a main entry specifies a unique identifier for a service in addition to access information. Subsequent services accesses for the service are physically or logically associated with a main entry by reference to the unique services identifier but carry individual per access instance information.

Analyze the set of stored services access context objects to form a set of results is performed in real time step . The result may be a set of relationships a set of attributes or a combination of both. A set may include one or more instances and is not limited to multiple relationships or attributes. For example an analysis may produce a pair of related services in a single relationship as a result. In another example a result may comprise a series of services in a defined sequence according to an access pattern discovered by data mining of services access context object repository of . The set of results is also typically conditioned to be within a predefined certainty.

The analysis provides results in the form of discovered patterns to identify services relationships directed sequences of accesses and other forms of services access dependent correlations not related to any one user. Static information of the user as well as descriptive information of the service can be obtained and managed by other sources. Each service access per service that was captured is parsed for the required information stored and then analyzed to produce a result. Having analyzed the information to produce a result send the result to a requester is performed in real time step with process terminating thereafter step .

With reference to a flowchart of a data analysis portion of the process of in accordance with various embodiments of the disclosure is presented. Process is an example of a data analysis process as used within data analyzer of service registry and repository of . Process is also an example of a detailed representation of step of .

Process starts step and performs analysis of the content of services access context object repository for example services access context object repository of step . A determination is made as to whether the analysis is inter service for services access context objects being analyzed step . When a determination is made that the analysis contains inter service for services access context objects a yes result is obtained. When a determination is made that the analysis is not inter service for services access context objects a no result is obtained.

When a yes result is obtained in step process determines whether the inter service analysis for stored services access context objects involves pattern discovery step . When a determination is made that the analysis for stored services access context objects involves pattern discovery a yes result is obtained. When a determination is made that the analysis for stored services access context objects does not involve pattern discovery a no result is obtained.

When a yes result is obtained in step process performs a pattern discovery operation step . Pattern discovery operations are performed to identify usage patterns within the set of services accesses for a specific service. For example in a set of ten services access context objects for service A a pattern discovery operation would correlate and identify similarities in properties among the ten instances constrained to service A.

Output of a pattern discovery operation is used to create a result step with process terminating thereafter step . When a no result is obtained in step process determines whether the inter service analysis for stored services access context objects involves a direct query step . When a determination is made that the analysis for stored services access context objects is a directed query a yes result is obtained. When a determination is made that the analysis for stored services access context objects is not a direct query a no result is obtained. When a no result is obtained process indicates an error step and terminates step .

When a yes result is obtained in step a directed query against the content of services access context object repository for example services access context object repository of is performed step . A directed query targets specific values or combination of values of properties or attributes of the set of services access context objects associated with a specific service. For example for service A a directed query may be used to identify an origin of the most frequent access. The directed query is typically more specific to an attribute or property value than a relationship of a pattern discovery operation. Output of a directed query operation is used to create a result step with process terminating thereafter step .

When a no result is obtained in step a determination is made as to whether the analysis is intra service for services access context objects being analyzed step . When a determination is made that the analysis is intra service for services access context objects a yes result is obtained. When a determination is made that the analysis is not inter service for services access context objects a no result is obtained.

When a yes result is obtained in step process determines whether the intra service analysis for services access context objects involves pattern discovery step . When a determination is made that the analysis for stored services access context objects involves pattern discovery a yes result is obtained. When a determination is made that the analysis for stored services access context objects does not involve pattern discovery a no result is obtained.

When a yes result is obtained in step process performs a pattern discovery operation step similar to step . In this case however pattern discovery operations are performed to identify usage patterns within the set of services accesses across a set of services. For example in a set of ten services access context objects for services A B and C a pattern discovery operation would correlate and identify similarities in properties among the ten instances across services A B and C. The result may identify patterns of use relating the services to form soft links or association. For example results may indicate a relation due to timing a specific sequence in either a forward or reverse direction or other functional relationship. Pattern discovery operations tend to provide implicit results whereas directed query is used to identify occurrences of known values or comparison to threshold values. Output of a pattern discovery operation of step is used to create a result step with process terminating thereafter step .

When a no result is obtained in step process determines whether the intra service analysis for services access context objects involves a direct query step . When a determination is made that the analysis for stored services access context objects is a directed query a yes result is obtained. When a determination is made that the analysis for services access context objects is not a direct query a no result is obtained. When a no result is obtained in step process indicates an error step and terminates step .

When a yes result is obtained in step process performs a directed query against the content of services access context object repository for example services access context object repository of step . In this case a directed query targets specific values or combination of values of properties or attributes of a set of services access context objects across a set of services. For example in a set of ten services access context objects for services A B and C a directed query operation would count a frequency of occurrence of properties among the ten instances across services A B and C. The directed query is typically more specific to an attribute or property value than a relationship of a pattern discovery operation. Output of a directed query operation of step is used to create a result step with process terminating thereafter step . As previously presented a result is sent to a requester as in step of process of . An analysis request handled by the data analyzer typically consists of a set of interdependent pattern discovery and or direct query requests where a set comprises one or more requests.

Thus an illustrative embodiment provides a process for identifying implicit services links using service usage information. A computer implemented process for identifying implicit services links receives service access information for a service to form received information creates a services access context object in real time from the all or a subset of received information to form a created services access context object and stores the created services access context object in a data structure to form a stored services access context object. The computer implemented process further analyzes a set of stored services access context objects in real time to form a set of results wherein the results are within a predefined certainty and sends the result to a requester. The set of results comprises a set of implicit soft links determined by usage information in the services access context objects wherein the implicit soft links are implicit services links. The set of results typically includes the specific certainty information.

The flowchart and block diagrams in the figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing a specified logical function. It should also be noted that in some alternative implementations the functions noted in the block might occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

The invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode and other software media that may be recognized by one skilled in the art.

It is important to note that while the present invention has been described in the context of a fully functioning data processing system those of ordinary skill in the art will appreciate that the processes of the present invention are capable of being distributed in the form of a computer readable medium of instructions and a variety of forms and that the present invention applies equally regardless of the particular type of signal bearing media actually used to carry out the distribution. Examples of computer readable media include recordable type media such as a floppy disk a hard disk drive a RAM CD ROMs DVD ROMs and transmission type media such as digital and analog communications links wired or wireless communications links using transmission forms such as for example radio frequency and light wave transmissions. The computer readable media may take the form of coded formats that are decoded for actual use in a particular data processing system.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modems and Ethernet cards are just a few of the currently available types of network adapters.

The description of the present invention has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

