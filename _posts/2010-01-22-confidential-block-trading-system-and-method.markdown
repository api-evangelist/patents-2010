---

title: Confidential block trading system and method
abstract: Methods and systems for facilitating trading of securities, preferred methods comprising receiving a first buy or sell order from a first user; calculating a block price range; determining that said first order is reasonably priced; transmitting to a second user a notification that a reasonably priced order is present, but without notifying said second user of the side; receiving a second order from said second user, wherein said second order is a contra to said first order and nearly matches but does not cross said first order; transmitting a contra order notification to said second user after said second order is received, said contra order notification indicating that a nearly matching contra order is active; receiving a third order from said second user, said third order being a contra to said first order and crossing said first order; and executing a trade comprising said first order and said third order.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08635144&OS=08635144&RS=08635144
owner: ITG Software Solutions, Inc.
number: 08635144
owner_city: Culver City
owner_country: US
publication_date: 20100122
---
This application is a continuation of U.S. patent application Ser. No. 10 603 100 filed Jun. 24 2003 which is a continuation in part of U.S. patent application Ser. No. 09 870 845 filed May 31 2001 which is a continuation in part of U.S. patent application Ser. No. 09 750 768 filed Dec. 29 2000 which is a continuation in part of U.S. patent application Ser. No. 09 585 049 filed Jun. 1 2000. The entire contents of each of the above listed applications are incorporated herein by reference.

The subject invention relates to a method for managing information to focus block trading interests into a confidential crossing book and executing block trades over a computer network such as the Internet.

In public securities markets market mechanics and trading psychology create barriers to efficient information dissemination and price discovery. A market participant s decision to reveal information regarding a large trading interest typically represents a tradeoff between confidentiality and liquidity. As used herein the term market participant refers to any person or firm with the ability to trade securities examples of market participants include broker dealers institutions hedge funds statistical arbitrage and other proprietary trading operations and private investors trading on electronic communication networks ECNs .

By publicly revealing the details of a significant active buying interest for example a market participant assumes the risk of adverse price action other traders may view his buying interest as an indication that the stock is worth more than its current price. Other market participants that had legitimate selling interests and market makers that seek short term trading profits will fade their offers become less aggressive sellers resulting in an increase in the market price. There is also an empirically demonstrable risk of adverse price action due to front running buying activity by other market participants in anticipation of price movement resulting from the large revealed order .

Confidentiality can be maintained to some degree by slicing the large order up into many small pieces to avoid arousing interest but this process either fails to fill the order quickly when the trader is most careful to hide its existence or if when it is worked at a faster rate information about the existence of the order leaks out leading to much the same effect as the above mentioned order display problem.

In either case an economically efficient transaction is missed because the trading costs associated with disseminating information are too high.

Trading large blocks on the New York Stock Exchange floor is also hindered by rules designed to protect the interests of floor brokers representing short term trading interests and the proprietary trading interests of the specialists themselves. Floor brokers can participate with an Institutional order taking an equal portion of the liquidity coming in on the contra side to take a short term speculative position with the safety net provided by the larger Institutional order or penny jump on the Institutional order by intercepting the contra side liquidity with a one cent better price rather than allow it to fill the Institutional order. Specialists utilize various methods including penny jumping to extract profits from information about Institutional activity invariably these activities lead to adverse price movements and lower fill rates for the Institutional orders.

Another known difficulty with trading large blocks is one that is sometimes called the buyer s remorse problem. When a trader places a large block and gets it filled quickly the trader s natural reaction is to believe that the easy fill indicates that it was a poor trading decision either there was a much larger contra whose residue will subsequently drive the price adversely or the block s price was too attractive leading to its quick acceptance. This buyer s remorse effect leaves the client unsatisfied and unlikely to place similar orders through this same channel in the future since the quick fill would be perceived as a failure of this channel to provide protection from a poor trade.

One known approach to matching trading interests and executing block trades while limiting information dissemination is employed by the POSIT matching system. The POSIT system allows trading interests to accumulate and initiates a matching sequence at set intervals. Market participants place confidential orders in the system and are unaware of the amount or aggressiveness of other orders on the same side or on the contra side until the matching is released. This approach does not provide for any mechanism to notify traders that may have nearly matching prices but overlapping order quantities that they could achieve a trade with only a small change in their price. Also by being a black box it fails to provide information that would indicate to traders that there is liquidity in the system in particular securities so that they would know to pull back orders they may have placed elsewhere in order to participate in the POSIT match. This approach further fails to enable the broadcast of information based on the activity in the system that may entice traders to enter orders when the system s participants have a higher than usual interest in a given security this being an indication that the fill rates could then be expected to be higher. It also fails to provide the ability for a participant to initiate transactions at a time of his or her choosing. By pricing all trades at the midpoint it also fails to provide any mechanism wherein a patient trader with a moderately sized block could draw a better price from a much larger or more anxious block order that would tend to drive the price adversely. Finally it does not offer any ability for market participants to negotiate or otherwise actively participate in price formation through a process that could lead to the discovery of a fair price for a block trade.

Another system that attempts to manage information to facilitate large block trades is the LiquidNet Trading System. Users of this system contribute data regarding their trading interests directly from their Order Management Systems. When a user indicates an interest that matches contra interests already expressed within the system all matched users receive an invitation to enter a negotiation session. If this invitation is accepted the trader is expected to be firm and negotiate in good faith towards a trade those that play with the system but fail to negotiate in good faith and close trades are expelled from the system. In the LiquidNet system traders learn the existence of counter interests before anyone has entered negotiations while this leakage is useful to entice traders to enter a negotiation process it also leaks information about orders in the participants Order Management Systems to parties that may or may not have a firm intention to trade. The system therefore relies on fair play by members of the network which limits participation to a country club of like minded Institutions. This fails to provide a system where the side of a trading interest can only be revealed to parties that have a firm electronically executable contra order within the system at a reasonable price and through this rule permits the participation of parties that have different incentives and trading horizons including sell side firms and hedge funds. The LiquidNet information management model by leaking information regarding the side of a participant s order without a firm liability to trade fails to achieve a proper balance between the need for confidentiality and the need to share some information in order to focus block interest in time as can be achieved through means that indicate to traders that there is trading interest within the system without revealing the side of said interest until a trader has been exposed to a firm liability to trade. It also fails to provide the protection from gaming that can be achieved by a block crossing system wherein the only means to discover the side of a second participant s order is to place an aggressively priced large block order which would then have a significant probability of being executed. By allowing orders of all sizes the LiquidNet system also fails to provide a solution to the buyer s remorse problem wherein a buyer that has a large order completely filled with great ease later fears that the contra had a much larger sell order whose residue is likely to drive the price down.

Harborside Plus offers another system to facilitate the crossing of blocks based on the management of trading interest information. In the Harborside system traders are asked to send indications of interest into their database when they have an interest in buying or selling at least 25 000 shares of stock at the current midpoint price. These indications of interest are stored electronically and expire after a certain number of minutes which depends on the client s trading style for example hedge funds or brokers tend to trade quickly so their indications will expire after only a few minutes . When there is an IOI on both sides in the security a sales trader is notified through a popup window and will proceed to call the customers to close a trade. The mediation of a human trader is intended to ensure that the system is not abused by traders that would enter an IOI when in fact they do not have an interest to trade since the damage to the relationship would make it less likely that this trader would get called again in the future. This system does not anticipate a trading system wherein fair play is enforced automatically by requiring traders to enter firm electronically executable orders that could either execute on arrival or be exposed to an execution from another party resident within such a system before the owner of said order receives any information back about other traders interests. It also fails to provide any means for automating the negotiation process that is carried out by the sales trader. Since a sales trader is involved it fails to provide the anonymity that traders expect from a computer system where traders are enabled to negotiate directly with each other without leaking information to a third human being who may or may not be fully trusted. Finally the Harborside system fails to anticipate mechanisms to entice other traders to express their trading interest in a security when there is evidence of trading interest on one side only. Finally it fails to anticipate the possibility of showing information about one sided trading interests without revealing the side for the purpose of focusing interest in the security at this time without leaking price impacting information to parties that have not expressed a firm liability to trade.

A fourth example of a system that attempts to manage information to facilitate block trades is the Liquidity Tracker facility deployed by the Nasdaq Stock Market and subject of co pending U.S. patent application Ser. No. 09 870 845 the entire contents of which are incorporated herein by reference. Liquidity Tracker enables a user to enter a firm order to trade and show information about this order to likely counter parties. In the Liquidity Tracker system the counter parties are identified using real time access to clearing information that Nasdaq participants submit through the Automated Confirmation and Transaction ACT system. By selectively targeting likely contra parties only the intention is to avoid leaking information to other traders that could front run on the Institutional order or otherwise misuse this information for short term trading profit. However since the Liquidity Tracker system only selects contra parties the recipients will know if the first participant was a buyer or seller i.e. the side of the order entry participant is not kept confidential. Some recipients of this information may be induced to stop or even reverse their trading direction instead of accepting the order in the hope of seeing a better price later. While the level of confidentiality provided by the selection of targets is appropriate for somewhat larger orders than those that could be displayed on a public book there are instances where traders with larger institutional blocks will feel uncomfortable with this level of confidentiality.

In this environment there is an acute need for a confidential crossing system that enables users to place an order that will not be shown to anyone but will nevertheless cause an information event that can help bring traders together at the same time in the same security.

In order to be productive rather than destructive information events in a trade negotiation process should avoid two problems 

The systems and methods of the present invention provide novel solutions to the above mentioned problems of institutional block crossing.

A preferred embodiment of the system limits the revelation of trading preferences by not showing the side on which one intends to trade until the final steps of a negotiation. Upon entry of a reasonably priced order the system sets the symbol in an active state. This indicates to other participants that an order has been entered in this security but without revealing whether it was a buy or a sell order.

In the preferred embodiment the system determines prices to be reasonable if they are at least as aggressive as the passive end of a Block Price Range BPR . The BPR is calculated based on the current market prices recent volatility in the symbol and liquidity and shown to the trader on a Graphic User Interface GUI . In the preferred embodiment the BPR is calculated by predicting the price range that one is likely to see in the next 60 seconds and this range is re calculated at 60 second intervals. In an alternate embodiment a reasonable price is deemed to be one that is within a given number of cents or fractions thereof from the National Best Bid or Offer for buy or sell orders respectively on the time of order entry.

A second participant who sees the symbol active flag and has an interest in trading the same security can elect to enter an order. If it is on the contra side and is sufficiently aggressive in price to cross the first participant s order the trade is executed at the first participant s limit.

The buyer s remorse problem is addressed by requiring all traders to enter orders only in multiples of a large block quantity. This quantity is chosen to be somewhat larger than the typical size of orders usually sent to broker dealers. For the most liquid securities for example the system can be configured to use a large block quantity of 100 000 shares. As a result it will be the traders expectation that most orders in the system are for one unit of this large block quantity only. As a result when a trader receives a complete fill on a 100 000 share order this does not indicate in any way that the contra s order in the system should be expected to be larger most likely it is also a 100 000 share order and the complete fill is only a reflection of the system s mandated large block size. In an alternate embodiment orders can only be entered for this large block quantity and there is never a residue after a fill. In yet another alternate embodiment the traders further commit to not trade on the market for 30 minutes after a trade is done and agree to enable random audits to verify that the voluntary restriction is respected or when verification is deemed to be necessary.

Having reduced the likelihood of buyer s remorse it is then possible to allow traders to know by means of a contra present flag when there is a nearly matching contra order within the system. Since the sizes of the two orders are likely the same the information about the presence of matching orders on both sides does not point to any adverse price movement in the near future if both traders canceled out of the match they would each be trading on the regular market and their respective trades would balance each other out with no net price impact. Therefore the information that there are contras present is consistent with an assumption that the current market price is a fair price to close a deal on a large block. To avoid the possibility that some traders may enter an order on an active symbol only to see the contras present flag and then immediately cancel the system described in the preferred embodiment lets resident orders see the contras present flag immediately as soon as a contra order is entered but delays showing the flag to the second participant that entered the contra order and shows this flag only after 30 seconds if the contras present situation persists. This gives the resident order a 30 second time window to either execute the newly entered order by increasing the price aggression or cancel his or her order before its existence is revealed to the second participant. The first mover advantage to the resident order provides an incentive to enter orders that will set the symbol status to active thereby enhancing the liquidity in the system which in turn will draw other traders that have an interest in taking said liquidity.

In a preferred embodiment traders may enter orders at any price but the active symbol and contra present flags are only issued based upon orders that are priced within a system announced Block Price Range. The Block Price Range is determined based upon the National Market Best Bid and Offer and the stock s recent volatility with the intention to provide guidance on a range of prices within which one would be most likely to execute a large block trade. For example the Block Price Range can simply be taken to be the range from the National Best Bid minus 5 cents to the National Best Offer plus 5 cents. If all traders know the current BPR they know that entering an order within this range will cause the active symbol flag to be displayed to participants. A second participant who sees the active symbol flag and would like to buy a large block of stock can then enter a buy order at the Block Offer top of the BPR if the first order that caused the active symbol flag to be posted is still open and was a sell order the second participant would then have the certainty of a fill. Conversely if such an aggressive buy order did not fill the second participant would know that either the first order had been canceled or it was also a buy order. If the second participant instead entered a passive order for example an order to buy at the Block Bid then that order would most likely not get filled on arrival even in the case where the first participant was a seller. Instead the first participant would see a contras present message and may elect to lower his or her price to lock in the trade. If the first participant takes no such action after 30 seconds the second participant would learn that the first participant s order that caused the active symbol flag was in fact a passive seller and may elect to increase his or her price to meet at a reasonable price in between. As long as both participants are seeing the contras present flag they can modify their prices until a trade gets done the more anxious trader will be more likely to raise the price aggression level more quickly leading to a natural price discovery process even in the absence of any displayed prices other than the BPR guideline.

In the preferred embodiment the traders in a contras present situation do not receive information about the price movements of their counterparties they are simply expected to price their orders at what they consider a fair price and hope that the other party will do the same. In an alternate embodiment the traders see that the contra party has increased or reduced their price aggression and may use this information to determine that it is worth similarly raising their own price aggression level. If each trader does this in turn by a minimum 1 cent or other pre set interval the two will meet approximately half way between the original buy and sell prices.

The system preferably comprises a trade facilitation system also referred to herein as Cloud9 . Said trade facilitation system is connected to participants through a communication network such as the Internet and a financial information exchange network such as a FIX Network . System receives market data from a vendor through the vendor s network . Participants access the system through a graphic user interface GUI installed at each participant s workstation. Orders are routed to an Execution Engine . Matching orders are traded automatically when received by said Execution Engine. Cloud9 comprises a Net Server subsystem responsible for connectivity to each client GUI a Financial Information Exchange FIX Server to provide connectivity to back office systems and client order management systems and an Order Manager subsystem responsible for implementing the order handling logic of the system as described herein. Facilitator module creates information events intended to focus interest and steer users toward a trade. The trade facilitation system keeps track of the status of its orders in a transactional database . The price aggression of orders is evaluated with respect to a Block Price Range which is computed by an Analytics Server the price of an order can be a more passive than the BPR or b aggressive meaning that the price is either within the BPR or more aggressive than the BPR. The Execution Engine receives orders through the Communications Network and electronically stores them in a transactional fault tolerant database the Book it reports executions back to the trade facilitation system over this same network. In an alternate embodiment the Execution Engine can be hosted locally as an additional component within the Cloud9 system .

Participants use a graphic user interface to enter orders into the system. When said order is executed the results are reported for processing to their sponsoring broker and to their own firm s Order Management Systems OMS using the FIX protocol.

All orders are preferably required to be Large Block Orders which means their size must be a multiple of a large block quantity. For example if the Large Block Quantity were 100 000 the GUI only allows orders that are a multiple of 100 000 shares. The orders can be Limit or better or pegged to a market indicator such as the midpoint between the best bid and offer on the National Market. All validated block orders are immediately routed to the Execution Engine where they are stored in the Book . In an alternate embodiment orders of any size are accepted.

The GUI enables a trader who has an interest in trading a large block in a given security to click on the security s symbol as displayed in a box on top of the main screen to bring up an order entry dialog and automatically populate the fields of the order entry dialog in accordance with his or her pre configured preferences. The trader will edit these fields as needed and press a button marked Submit to place the order.

If a newly entered order matches a prior book order the new order is in the same security on the opposite side and with a price that equals or betters a standing book order the Execution Engine automatically executes a trade at the price of the standing order and electronically reports the trade to the Automated Confirmation and Transaction ACT service for the consolidated tape and to the sponsoring broker s clearing firm . Notice of the execution is also sent to the graphic user interface to notify the trader of the trade. If on the other hand there is no matching order in the book the new order remains stored in the book as a standing order. In a preferred embodiment clients can elect to have their orders sponsored by a third party broker in which case the trades are also reported to the sponsoring broker s back office systems via FIX.

In order to increase the likelihood of trades the system s Order Manager is connected to a facilitator module which automatically takes action when a newly entered order does not find a match but is stored in the book as a standing order. In a preferred embodiment only orders that are reasonably priced are subject to facilitation a reasonable price range for trading large blocks the Block Price Range is computed by the Analytics Server and posted on the graphic user interfaces of traders with an update every 60 seconds. The purpose of the facilitator is to generate information events that will encourage others to enter orders in the same security without leaking the price or side of the order.

In a preferred embodiment there are two possible action flows when the facilitator is called into action depending on the state of the orders as known within the system s database .

In the first case when a newly entered order does not find a match the state of the system is such that there are no reasonably priced contra orders within the system. A message is delivered to all parties that subscribe to this security indicating that the symbol subject of the newly entered order is now active within the system if it was already active this step is omitted . The graphic user interface will display active symbols in an orange colored box above the order entry dialog as illustrated in . The system preferably enables a second participant who sees an active symbol and has an interest in trading a large block in this security to bring up an order entry dialog by clicking on the symbol. The system preferably populates all the fields of the order entry dialog in accordance with the second participant s pre configured preferences. The second participant is acting with the knowledge that the symbol is active. Therefore he will understand that a first order was previously entered that caused the symbol to become active and this first order was priced within the BPR. Taking advantage of this information the second participant might elect to submit a limit buy sell order at the block offer block bid to essentially guarantee a trade if the first order was on the contra side and is still open. In a preferred embodiment once a symbol has become active it will stay active for at least 60 seconds the symbol activity state is reviewed in conjunction with BPR updates and set to inactive only if it has been active for more than 60 seconds and there are no more reasonably priced orders currently open within the system at the time scheduled for a BPR update. In an alternate embodiment the symbol s activity status is updated in real time to reflect whether or not there is a reasonably priced order within the system at this time. In another alternate embodiment in addition to the color the GUI displays the number of reasonably priced orders that are currently open within the system.

In the second case the state of the system is such that there is already a reasonably priced order on the contra side but it s not quite aggressive enough to meet the limit price offered by the newly entered order. In this case the facilitator module will immediately send a message to all participants with reasonably priced standing contra orders to let them know that there is now a reasonably priced contra order present within the system. The graphic user interface displays the Contras Present message by highlighting the symbol in a yellow colored box above the order entry dialog as shown in . The first participant who caused the symbol to be active will therefore see that there is now a contra present. The system preferably enables said first participant to re price the order at an aggressive price and replace the order so as to execute the second participant s order. In a preferred embodiment the system automatically proposes the aggressive end of the BPR as the default price to encourage a strategy that will result in a trade the trader can then modify the order parameters as desired. In an alternate embodiment the system enables users to configure an aggressive order type to be limited to the better of the BPR or a configurable number of cents or fractions thereof from the current National Market Midpoint price and this aggressive order type is then the one that is proposed as the default in a contras present situation. In a preferred embodiment the user is allowed to enter an order that will cause the system to attempt to execute the contra s order by means of clicking on the yellow box with the symbol and then pressing a single button labeled for this purpose. In an alternate embodiment the user interface lets the trader select a new price and press a button marked Replace. If none of the traders with standing orders raise their price aggression and there are still standing contra orders after 30 seconds the second participant that originated the contra order will preferably also learn that there are standing contra orders within the system. The system preferably displays this information by means of a yellow box as described previously for the first participant and said second participant may elect to increase his or her price aggression to close a trade. The 30 second delay is intended to discourage traders from probing the system to discover whether contras are present and then attempting to cancel immediately thereafter. This safety mechanism is effective to the extent that the BPR is not too far removed from the current market so that during the 30 second interval the newly entered order faces a real chance of being executed by one of the traders with a standing order. In an alternate embodiment there is no 30 second delay and all traders are simultaneously informed of the contras present situation but there is a 5 second minimum time in force during which orders may not be canceled. In another alternate embodiment all users receive the contras present message immediately and there is no minimum time in force condition. In an alternate embodiment traders may configure the GUI to automatically replace their order with an aggressive price when a contras present situation arises. In this last embodiment if there are multiple orders within the system with automatic re pricing instructions and competing to execute the same contra order the system executes orders in price time priority standing orders compete on price first to fill the incoming contra order then if two orders have the same aggressive price limit on time of entry with priority going to the first order entered.

A preferred algorithm to calculate the Block Price Range BPR seeks to determine reasonable prices for trading a large block order within the next 60 seconds depending on the volatility of the stock. In the preferred embodiment this range is based upon the prices at which trades have been reported to the consolidated tape since the last time the BPR was updated taking a symmetric price range up and down from the current midpoint of the National best bid and offer. This range extends up and down from the midpoint by an amount that is directly related to the observed price volatility since the most recent BPR update.

The following is a functional description of preferred and alternate embodiments of the subject invention.

FIX executions to a Buyside Order Management System either directly or through a FIX Service bureau. Supports end of day anonymity for the buy side client with respect to the sponsoring broker.

The invention comprises a preferred architecture for integrating the system with the electronic systems of participants and related firms such as the sponsoring brokers or their clearing firms. An overview of this integration is represented in . These figures illustrate the flow leading to a trade between participants C and E described below. With standing orders already in the system a new participant enters a contra order. The system sends out the contra present flag participant modifies the standing order to a higher price aggression level resulting in an executed trade.

Cloud9 preferably uses the FIX protocol for back office integration with the client Order Management Systems and the sponsoring brokers when needed. shows the life cycle of a trade from the clearing perspective. The clients are preferably able to choose between two models for using the system. The first model uses tickets to facilitate managing liability across multiple market destinations. Tickets are placements from the client s order management system that helps traders keep a tab on how many shares they are doing in each market destination a market destination is a place where one can execute orders such as the present system . The purpose of the ticket is to ensure that the aggregate number of shares placed across all destinations will never exceed the total number of shares of the client s overall order as known to the client s Order Management System . When a trader uses tickets the tickets that have been entered from the OMS appear on the GUI and orders can only be entered against these tickets.

The client that elects to use tickets preferably will only be able to enter an order into the system if said order is in the same security on the same side and of a size not greater than a previously entered ticket. The system preferably updates back office and third party systems by performing the following steps when traders elect to use tickets.

In the preferred embodiment users are enabled to select an alternate configuration that does not require the use of tickets but instead allows traders to start the process at the order entry step . The remaining flow is the same as described above.

In an alternate embodiment the system is hosted by the sponsoring broker for all clients that use the system and comprises after trade processing subsystems as can be easily implemented by those skilled in the art or are commercially available through specialized vendors. In this alternate embodiment there is no need for end of day anonymity and the broker execution reports can be dispatched immediately.

The FIX Server preferably supports a variety of networking solutions to provide connectivity to client Order Management Systems . For example the client s OMS can connect directly to said FIX Server or it can communicate with FIX Server through a FIX Service Bureau that fans out connections between a single FIX Server and a plurality of clients.

The FIX Server will preferably reject tickets when they are invalid or when the client is configured not to use tickets the ticket reject message preferably carries an intelligible reject reason in the text field. If the rejection is sent because the order quantity was less than the Large Block Quantity for this security the correct LBQ is preferably given for information in the message text in the reject message. In the preferred embodiment the FIX Server preferably supports the following incoming messages FIX New Order Cancel Order Cancel Replace and Order Status Requests. Outbound messages preferably include Order Updates relating to child orders of a given ticket a FIX Execution message carrying the Order ID of the underlying ticket if the client uses tickets. Clients that do not use tickets will preferably receive fills only FIX Execution messages . In an alternate embodiment clients that do not utilize tickets receive Order Update messages for each event relevant to an order entered via the GUI including New Order acknowledge messages so that the OMS can keep track event by event of the total size being worked as well as the size that has been filled.

The FIX Server preferably supports a web configuration screen which enables an operator to set up and customize new client connections without requiring a new software release. As mentioned above FIX buy side clients can preferably be configured for either a FIX Executions only or b to support ticketing and execution reporting. FIX Sponsoring Broker clients will preferably be configured to receive executions only. In an alternate embodiment it is possible to configure a sponsoring broker s FIX connection to receive a drop copy of every message sent to the sponsored client s OMS. In addition to the execution message sent on each fill the configuration options preferably include an option to send a final FIX Execution message when an order is complete with Order Status field set to done to indicate that the work on this order is complete.

The Order Manager operates as a message processor. In the following paragraphs the processing of various messages is described.

The system preferably enables users to enter New Ticket messages. A New Ticket message is a FIX New Order message with Order Type Market and no limit price. FIX Orders with a limit price will be rejected. In an alternate embodiment this message may be submitted over an Application Programming Interface API .

The following steps are preferably executed while processing a New Ticket see after the ticket is received at step 

The system preferably enables users to enter Cancel Replace Ticket messages. A Cancel Replace Ticket is preferably submitted as a FIX Cancel Replace Order with the ClientTicketID of a prior open Ticket and the ClientTicketID of the new ticket. In an alternate embodiment this message may be submitted over an API. In the preferred embodiment the system carries out the following steps upon receiving a Cancel Replace Ticket message.

The system preferably enables users to enter Cancel Ticket requests. A Cancel Ticket message is a FIX Cancel Order message with the ClientTicketID of a prior open Ticket. In an alternate embodiment this message may be submitted over an API. The system subject of the present invention processes the Cancel Ticket message as follows see .

The system preferably enables users to enter New Order messages. A New Order message is preferably submitted through the GUI or API and comprises a request to buy or sell a given number of large block lots of a given security at a limit price or better. In the preferred embodiment the user may also select a pegged price limit in which case the order will be limited at the less aggressive price between the absolute limit price and the pegged limit price. New Order messages are preferably handled as follows.

Validation. The system preferably validates that orders are for a multiple of the large block quantity in a supported security. In an alternate embodiment the order can be for any quantity. Another step in the preferred order validation process is to verify that the order contains a price field. In an alternate embodiment this requirement is waived if the user has selected a pegged price in which case a pegged order may float without limit. The Peg types supported in the preferred embodiment are pegging to the NBBO Midpoint or no pegging at all. Alternate embodiments support additional pegging attributes as are known to those skilled in the art. The system preferably also validates that the side of the order is Buy or Sell. An alternate embodiment also supports short sell orders. The parameter PegOffset determines the number of cents or fractions thereof from the pegged value NBBO Midpoint where the order should be priced. The PegOffset attribute is preferably disregarded if the order is not pegged. The system preferably reports rejected orders to the GUI Client with a comprehensible error code. If the client uses ticketing the validation step also preferably checks that the order does not exceed the size of the associated ticket and is on the same side as the ticket. If the client entering the order has a credit limit with a sponsoring broker the system preferably verifies as part of the validation process that the order does not violate said credit limit the credit verification process will be described in greater detail below.

In the preferred embodiment IOC orders are rejected as invalid since they can be used to probe for information about a standing order that has caused the symbol active flag without showing the contra present flag to the owner of said standing order. In an alternate embodiment IOC orders are accepted but the owner of a standing order can see a flashing Contra present flag e.g. the symbol changes from orange to yellow briefly then reverts back to orange . In yet another alternate embodiment the IOC orders are accepted and do not cause any flags to be sent out be it an active symbol flag or a contras present flag.

Order attributes. The system of the preferred embodiment expects to find the required fields in the New Order message as given in the following table.

The system preferably enables users to enter Cancel Order messages. Cancel Order is a GUI API message with an ClientOrderID corresponding to a prior New Replaced Order. In an alternate embodiment cancel order requests may also be received via FIX.

Validation. If the order ID is invalid or points to an order that is not known within Cloud9 as being Open the cancel order request is rejected.

The system also enables the user to enter cancel replace order requests to modify a prior order. In the preferred embodiment the Cancel Replace Order is a GUI API message pointing ClientOrderID to a valid prior New Replaced Order. In an alternate embodiment this message can also be entered via FIX.

Validation. The ClientOrderID must point to a valid order. The system preferably rejects a cancel replace request if it points to an order that is already known within Cloud9 to be canceled expired or filled. In the preferred embodiment the system supports pre trade credit checking. Therefore if the size of the order is to be increased through the cancel replace request the system first verifies that the new size would not exceed the credit limit on the user s account. Replace order requests that fail credit validation are rejected as invalid with a reason code explaining the credit reason.

Cancel Replace Order processing. Cloud9 OM processes cancel replace order messages by passing them through to the execution engine. The execution engine will respond with the order status including filled shares remaining open shares and average price.

Trade Message. The execution engine reports trades to the Order Manager via a Trade Message. Each Trade Message from the Execution Engine reports a locked in trade involving exactly two orders.

The Execution Engine will match individual orders against a book of contra orders one to many match . There can be multiple individual trades following a match check each of which will be processed independently.

Processing a trade message. The system preferably processes Trade Messages from the Execution Engine through the following steps.

The system preferably enables traders to cancel all orders they have previously placed into the system with a single request in the event of an emergency. CancelAllClientOrders is a message from Net Server requesting cancellation of all orders that have been entered by a given GUI. In an alternate embodiment this message can also be delivered via FIX. Since the execution engine does not know the customer ID Cloud9 OM will process the cancel all message by individually canceling every order associated with this client that has an Open Status processing these as individual Cancel Order requests.

In order to keep track of the price aggression of orders that are associated with contras present or active symbol indicators the Order Manager in the preferred embodiment subscribes to BPR Update Messages from the Analytics Server in securities for which it has an open order. Whenever the BPR is refreshed OM reviews the aggressive flag on open orders and updates the flags as follows.

If there is a change in the price aggression flag on an order re evaluate if there is a contras present situation for all orders in this security and update contra present flags to ON state when there are contras present for an order that are priced at least as aggressively as the BPR or OFF if there are no longer eligible contras present. If this results in a change in the Contras Present Status on an order the system preferably sends a Contras Present Message to affected GUI clients.

The system of the preferred embodiment also updates the active status of an order based on BPR update messages. If the symbol is in an active state has been in this state for at least 60 seconds and there are no longer any orders within the BPR the symbol is set to an inactive state and NetServer sends an Active Symbol message with ActiveSymbolStatus Not active.

Unsubscribe to BPR update messages. In an alternate embodiment the active symbol status is updated on any BPR update message and may be set to an inactive state even if the symbol has been active for less than 60 seconds. In yet another alternate embodiment the active symbol is updated on every change to the National Market Best Bid and Offer prices and every order entry or cancellation event to ensure that the active symbol flag always indicates that there is a live executable order in the system at this time priced at least as aggressively as the passive end of the BPR.

The execution engine in the preferred embodiment is a decoupled system that communicates with the Order Manager through a communication network such as the Internet. In an alternate embodiment the Execution engine is hosted in the same facility as the Cloud9 system and the two systems communicate over an intranet. In another alternate embodiment the Execution Engine is a component within the Cloud9 system in all these embodiments the functionality of the Execution Engine is as described below. The Execution Engine receives anonymized orders meaning that the order is stripped of the buy side customer ID and identified instead by an internal Order ID and the sponsoring Broker ID. The Execution Engine processes new incoming orders by checking to see if there are resident orders that match with the incoming order and executing trades with resident orders ranked using price time priority as we describe in more detail below.

The Execution Engine in the preferred embodiment is the book of record for recovering the true status about any Cloud9 trades in the event of a failure.

The preferred embodiment of the Execution Engine supports Limit orders and orders pegged to the NBBO Midpoint. In an alternate embodiment other order types known to those skilled in the art are also supported. For example an alternate execution engine may support price discretion orders that are executable at a limit price against market orders but may automatically increase their price aggression to trigger a match with an incoming limit order up to a predetermined discretion amount. In another example of an alternate embodiment the system enables traders to enter orders that are to be priced at a later time based on a volume weighted average price VWAP for a forward time interval such as the VWAP from the time of the trade until end of day or the VWAP over a specified time interval such as a half hour interval.

The orders in the preferred embodiment can be described as limit orders with an optional Peg. All orders are required to have a limit price if they have a Pegged price as well then the order is considered to be priced at the more passive price between the limit and the pegged value. Pegged orders are priced on the occasion of a match check event and are then treated the same as a limit order at the more passive of the limit or pegged prices. The pegged value is the NBBO Midpoint plus a Peg Offset amount.

Users in the preferred embodiment will use the Peg as a protection on a limit order to ensure that if the market moves swiftly their order does not trade at a price that suddenly stands at a very aggressive level as compared to the NBBO prices. The GUI suggests this way of using a Peg by representing the feature as Price protection and offering the option to not trade more than cents from the NBBO midpoint price. 

Because there are both pegged orders and limit orders in the system a match may also be triggered not on order entry but as a result of a change in the NBBO prices that would cause a pegged order s price to cross a contra order s limit price.

Therefore in the preferred embodiment of the present invention a match can be triggered either on entry of a new order or on a change in the NBBO prices that causes a pegged order to cross with other orders. The system preferably implements the following process to identify such matches.

The Execution Engine preferably comprises a component that receives all quote update messages from the data provider and keeps track of the current best bid and best offer using information caching techniques that are known in the art. It preferably also enables a component of the Execution Engine to subscribe to price updates for a given security whereafter it will receive a message whenever the best bid or the best offer in the given security changes.

The Execution Engine preferably maintains a list of symbols for which it has one or more Limit Orders on one side and one or more Pegged orders on the other side and subscribes to NBBO price changes for all securities in this list. Pegged orders with a limit price count both as pegged orders and as limit orders for the purpose of the present description. For the symbols within this list Execution Engine will process each NBBO price change by pricing all pegged orders in the security and then ranking all orders on the buy side and on the offer side in price time priority.

The system preferably proceeds to identify matches by taking first the top ranked buy order and processing trades between this order and sell orders in price time priority. If there are still unfilled sell orders it proceeds with the second ranked buy order and again processes trades with the yet unfilled sell orders in price time priority.

The Execution Engine will preferably observe trading halts on the primary market as follows. While a security is halted all existing and new orders will be declined. The Execution Engine derives the security trading status from a Data Vendor . If the Data Vendor is unable to provide the service or the corresponding communications network fails the Execution Engine does not process any trades but simply waits for the vital services to be re established.

The market data feed in the preferred embodiment contains the market halt information as well as level 1 and last sale data for purposes of the Analytics Server .

If a New Order triggered the match the Execution Engine preferably reports the execution pending immediately to Cloud9 OM with the expected total match quantity. This report is informational only for use by the Facilitator and does not guarantee that the trade will clear as we will see below.

A trade is preferably processed as a single transaction as is known in the art to avoid the risk of the system reporting one side of the trade and not the other in the event of a failure. The processing involves the following steps.

Cancel Order. Cancel Order is a request from Cloud9 OM to cancel an open order. It is preferably processed as follows.

In the preferred embodiment an order can be modified or canceled at any time. In an alternate embodiment the orders are required to have a minimum time in force of 10 seconds to give other participants a reasonable time to react to events triggered by the Facilitator such as an Active Symbol flag or a Contras present flag.

The system preferably also enables the Order Manager to request cancellation of all orders associated with a given sponsoring broker or all orders altogether. The Execution Engine processes such aggregate cancel order requests by first identifying all affected orders and then processing the cancel order requests by time of entry of the orders.

The Execution Engine preferably validates connectivity with the Order Manager using 30 second heartbeats. On loss of connection the system preferably cancels all orders.

The system preferably comprises an Application Programming Interface that enables a client GUI to connect to the NetServer through a communications network such as the Internet. NetServer allows customer front end applications to access Cloud9 trading services such as the viewing of BPR updates and entry of orders in to the system.

If loss of connectivity to a client is detected Cloud9 preferably attempts to cancel all the client s orders with the Execution Engine . In an alternate embodiment the system allows clients to select a configuration wherein the loss of connectivity does not cause cancellation of open orders clients that elect this alternate configuration then have to call the Help Desk to cancel orders in case of an emergency.

NetServer passes trading activity messages orders cancel replace cancels to the order manager and passes responses and unsolicited messages back to the client. It also stores client GUI configurations such as the location and size of windows on the screen and the list of securities that the trader wishes to watch. These examples do not constitute an exhaustive list but instead are intended for the purpose of illustration only other configuration parameters are stored to support normal GUI display options as can easily be apprehended by those skilled in the art.

In a preferred embodiment the GUI enables traders to view credit alerts generated by the system when the amount of available credit falls below the dollar amount typically required to execute a large block trade. In an alternate embodiment credit alerts are not displayed and the user simply discovers the absence of sufficient credit upon the failure of an order entry request.

In the preferred embodiment of the subject invention the GUI enables traders to access a dialog that facilitates management of a watch list of securities. The purpose of the watch list is to limit the flow of information from the system to the symbols that the trader is interested in. In the preferred embodiment the system also enables a trader to see whether or not there is someone else with an open GUI currently watching a given symbol this being of interest since it would increase the likelihood of a trade . In an alternate embodiment the GUI enables users to see the number of traders watching a security. The GUI will register for BPR update messages and for receipt of the Active Symbol and Contras Present messages only in watched securities. In the preferred embodiment the API allows a GUI to register for BPR Active Contras Present messages in any security and separately register for quote update messages in a separate list of securities. The preferred GUI only displays NBBO prices for one security at a time namely the one for which the order entry dialog is open as depicted in . In an alternate embodiment the GUI subscribes to NBBO updates in all watched securities and these prices are displayed next to the symbol in a drop list.

To manage the watch list users are preferably able to add individual symbols or add all symbols that are classified as being in a known group of securities such as an industry group or a sector. The system preferably also enables users to submit their own groups of securities in the form of an Excel file and load these groups into the system at which point they are simply added to the list of groups of securities that the trader may choose from to populate his or her watch list.

A preferred watch list configuration dialog is depicted in . The user is able to add symbols or groups of symbols. The changes are in a pending status until the user saves the changes. Users can also revert to a prior saved watch list or load a group of securities from an Excel spreadsheet which can be for example derived from their OMS or blotter.

In a preferred embodiment Net Server keeps track of which symbols are being watched by two or more GUIs. If a symbol is added to a trader watch list causing the number of watching clients to reach two NetServer will broadcast a message to all GUIs that subscribe to active symbol messages to indicate that the symbol is watched. If the number of watching GUIs drops to one NetServer will broadcast a message to the GUIs that subscribe to active symbol updates to indicate that this symbol is no longer being watched. In an alternate embodiment the message is sent any time a user adds or removes a watch on the symbol and gives the symbol timestamp and updated number of parties watching the symbol.

The GUI preferably shows all symbols that are both in the trader s watch list and are either active or have contras present by highlighting them on the top of the GUI through color coded rectangles using the color orange for active symbols and yellow for contras present. In an alternate embodiment the messages indicating that a watched symbol has become active or has contras present is displayed by means of a temporary popup screen similar to instant messenger applications. In another alternate embodiment these popup messages stay visible until action is taken either by clicking to generate an order entry dialog and entering an order in response to the message or by clicking on a close or minimize button to either close the popup or reduce it to a bar at the bottom of the screen.

The trader GUI in the preferred embodiment has the option of showing or not showing the symbols on their watch list that are in a watched state i.e. at least one other trader is watching this symbol . If they choose to see these symbols when they are not active or with contras present they will be represented in a third color that is less striking than the other two since the trader s attention is not immediately required in the preferred embodiment the GUI presents watched symbols in a gray rectangle next to the active and contras present rectangles.

The NetServer preferably exposes an API for remote clients to access the system s services. The API preferably enables the user to open a session though basic authenticating username password prior to using any trading services. In an alternate embodiment the client authenticates itself with a certificate. The exchange of user credentials is preferably done via a SSL session which exchanges encryption keys using the Net Server public key. Once the user is authenticated the session maps to the users identity.

The following are API events i.e. messages produced by the system and pushed to the GUI through the API.

The preferred embodiment of the NetServer also provides an interface for subscribing to market data per security. Fields include NBBO bid ask and TapeTimeStamp BPR Low and High Block Tape Last and total volume Active Symbol Contras Present Security State open closed halted etc and timestamp. The functions exposed in the preferred embodiment of this interface are 

The system preferably stores information that allows operators and research staff to evaluate how indicators of trader activity in a symbol correlate to fill rates when users enter orders. This information plays an important role in steering usage of the system toward workflows that lead to greater success through marketing media and visits to the traders stations. For example if the fill rate following entry of an order in a security that is not watched is extremely low or null traders may be advised to focus their trading on the system in securities that are watched by other traders. The system preferably also can be reconfigured to modify the rules of when flags are sent out to improve fill rates in the system. For example if it is determined that fill rates are substantially higher when there are three or more traders watching the security than two then the system can be reconfigured to send out the watched symbol message only when the total number of GUI users is three or more rather than two or more. The above examples are intended for the purpose of illustration and not to provide an exhaustive list other optimizations based on modifications of parameters given above will be apparent to those skilled in the art.

The trader activity measures are available on the help desk and exported to a permanent data repository at the end of each day for offline analysis with the purpose of finding correlations between possible system configuration settings and higher fill rates.

The Analytics Server in the preferred embodiment keeps track of the National Best Bid and Offer prices by listening to a vendor quote feed and updating said NBBO prices when the quote that made the best price is either canceled or improved by a new quote with a better price. The current NBBO prices are preferably stored in a cache using methods well known to those skilled in the art. In addition to the NBBO prices Analytics Server calculates a Block Bid and a Block Offer based upon recent quote and trade data.

The analytics server will store last sale data and all changes in the inside bid or offer prices throughout the day in all supported securities. The data that needs to be stored for analysis is described in the Tables E and F.

The Analytics Server delivers quote update messages to all connected clients whenever there is a change in the inside market best bid price or best offer price. The update message carries the new bid price or new offer price and timestamp associated with the appearance or removal of the quote that changed this bid or offer.

The Analytics Server preferably also updates the BPR every 60 seconds and sends a BPR Update message to the Order Manager for the purpose of determining the price aggression of its orders and to Net Server for broadcasting to GUI Clients .

The preferred embodiment comprises a replaceable module that is responsible for calculating the BPR. The BPR can be calculated using methods known to those skilled in the art such as for example by taking a Block Bid equal to the National Best Bid price minus 5 cents and a Block Offer equal to the National Best Offer plus five cents. In another example the amount of cents to be added subtracted to from the NBBO prices is set in proportion to the historical volatility of the stock so that for very volatile symbols such as technology issues the variation might be greater than 5 cents while it would be less for more steady stocks such as blue chip utilities.

The algorithm used in the preferred embodiment of the present invention considers the highest and lowest prices that have traded in the past 60 seconds H and L respectively as well as the current NBBO Midpoint price M and calculates the Block Bid and Block Offer through the following steps 

The system preferably enables sponsoring brokers to set credit limits on their customers accounts. In the preferred embodiment credit checking is based on a gross dollar limit counting the total value of shares bought plus shares sold. Orders will be validated for credit based upon the greater of the top of the BPR or the order s limit price and credit will be adjusted based upon the actual credit amount consumed when the order is completely filled expired or canceled on partial fills .

The system preferably provides a Help desk interface to be used by personnel that handles calls from customers. This user interface can be a web browser interface with access secured through Public Key Encryption and certificate based authentication as well as a username and password pair. The interface preferably enables the user to view detailed information about the life of an order. The user can pull up the list of orders with a given symbol and client ID to locate the order that the customer is calling about. The help desk interface enables its user to click on an order of interest to view the following messages in chronological fashion.

In addition the help desk operator is able to see the NBBO inside prices timestamp of the most recent quote seen on the bid and offer sides respectively BPR prices and timestamp on each significant event in the life of an order entry cancel execution . This is of use for answering questions such as why the symbol did or did not change to an active state when the order was entered etc.

In an alternate embodiment the help desk operator cannot view symbol or side of any order to reduce the security risk associated with traders being aware of the trading interests of institutional customers. In this embodiment the help desk operator identifies a caller s order by pulling up the list of orders associated with the trader with the time of entry and size of each order as well as the ClientOrderID which is also visible on the trader s GUI . The help desk operator works with the trader to identify which order he or she is inquiring about then proceeds as above by clicking on the order to view the corresponding activity trail.

In the preferred embodiment the Help Desk also enables its operator to select a client firm from a drop list and view their configurations pertinent to trading logic. The list below gives the more important user configurations and usage statistics for the help desk operator the list is not intended to be exhaustive others will be easily apprehended by those skilled in the art.

The preferred embodiment also enables brokers to access a web page using the same authentication and security model as for Help Desk operators. Brokers will use this page for credit management purposes. In order to maintain the client s confidentiality the interface preferably limits the information displayed to the broker in such a way as to not reveal the details of the client s trades. In this embodiment the broker can view the amount of credit consumed by a client only as a percentage of the total credit limit for example this can be binned in four intervals less than 25 25 50 50 75 and greater than 75 . The sponsoring broker additionally is enabled to modify the client s credit through the following functions.

In an alternate embodiment the trades are reported to the sponsoring broker immediately and the sponsoring brokers are able to view executed trades as well as the precise amount of credit consumed. In another alternate embodiment the sponsoring broker can also view pre trade activity.

The system preferably enables an operator to modify the configurations and add remove a client or sponsoring broker during an off hours system maintenance schedule.

The system configurations interface enables the system operator to add a client and set required configurations attributes to enable the user to trade. New client firms must choose a sponsoring broker from a list of available brokers. The sponsoring broker is preferably unique for all traders within the same firm. In an alternate embodiment the same firm can use a plurality of sponsoring brokers and the GUI lets the trader select a sponsoring broker on order entry. The new firm can optionally set up FIX communications directly to FIXServer or through the sponsoring broker . In the latter case the sponsoring broker forwards FIX messages from the client to FIXServer on its behalf. A firm may select two modes of FIX connectivity depending on their workflow requirements FIX channel can be set up to receive Executions only or to receive Executions and Order updates. They can be set up to enter tickets and check GUI entered orders against the size allocated through a ticket or to work without the use of tickets. When a client firm is added to the system the Help Desk personnel will call the broker to set up any credit limits for the customer s account and agree to a client ID to be used for end of day reporting. New users are preferably required to configure GUI API access to be able to trade on the system. In an alternate embodiment order entry is also supported via the FIX interface and the user is not required to use the GUI or API access.

The system configurations interface preferably also enables the system operator to add a sponsoring broker to the list of supported brokers. In an alternate embodiment the system is operated by a single sponsoring broker and cannot be accessed through a third party broker relationship. In configuring a sponsoring broker the operator will create a user account for the sponsoring broker to manage credit for their clients accounts as described above. Broker contact information such as a telephone number FAX and email must be entered and stored in the system database Help Desk personnel will utilize this data to contact the broker for credit issues. To complete the process of setting up a new sponsoring broker the following steps preferably are executed.

The operator is further enabled to add or remove securities from the list of securities supported for trading. The securities are preferably associated with parameter values specific to the present invention such as the Large Block Quantity and parameters utilized by the Analytics Server to calculate the Block Price Range. An example of a set of required fields for a security is given in the table below.

The system in the preferred embodiment preferably comprises an operations console used to provide centralized management of the servers network hardware and trading. Operations software to support required functions is commercially available in versions that minimally provide the following features 

The system additionally enables the operations staff to generate the Daily Usage Reports at the end of day and extract from these the necessary information for billing research clearing and OATS reporting.

The operations staff preferably also uses a system operations tool to create a clearing summary which contains a list of trades with the broker IDs for both sides of the trade. Trading summaries pertinent to a sponsoring broker and its clearing firm contain all trades where at least the given broker sponsored one of the sides.

The system preferably also generates billing reports containing a list of all fills involving a sponsoring broker for sending to the broker. The fills should match intra day execution reports one to one. The end of day report additionally contains the client ID which was masked in the intraday reports. If both legs of a trade were sponsored by the same broker there will be two fill reports in the summary file.

The preferred embodiment saves two copies of the data described below to a removable medium for archiving and analysis. Wherever possible the logging of events includes a date time stamp with millisecond accuracy.

All System Activity Logs and Daily Reports are preferably moved to permanent storage at the end of each trading day. System Activity Logs contain enough information to reconstruct the trading logic and pricing for each order and trade event including time stamps required to resolve pricing disputes.

The system is preferably configured to automatically recover services in the event of an accidental failure using processes based on the considerations below.

The integrity of the system is constantly monitored by a System Management Console which runs continuously on an independent system. If at any time during the trading day the integrity of the system becomes uncertain the system automatically switches to an off line mode. At this point all orders are cancelled. All further orders are declined until the system returns to a fully operational state.

In an alternate embodiment the system automatically sets all watched securities to an active state at announced times and maintains these symbols active for a 15 minute window. For example the system may set all watched symbols to an active state at 11 50 and hold them active until 12 05. This alternate embodiment with an active window helps focus the attention of traders around a given time and allows traders to participate who would not feel comfortable with placing the first order that causes the symbol to become active. It also helps traders manage the space on their workstation screens by limiting the amount of time during which they are expected to dedicate space to the GUI . Finally by utilizing a call window that has already become known to traders as associated with block crosses thanks to the marketing presence of the POSIT matching system this alternate embodiment can leverage the fact that traders are already used to seeking a block crossing opportunity at this time and focus liquidity in Cloud9 for symbols where a plurality of traders are watching the GUI .

Upon termination of the active window a symbol s activity state reverts back to what it would have been based upon the description of the preferred embodiment. Thus if there are open or recently canceled orders in the system in a given symbol upon termination of said active window then said symbol will remain active other symbols that have not seen order activity will revert to a watched status. As long as a symbol remains in an active status traders can continually place new orders without this act causing the symbol to change activity state. For very liquid symbols this can potentially lead to a symbol staying in an active state through the end of the trading day. While in this mode the system will focus traders in price by means of the contras present flags but there is no further need to focus in time.

In an alternate embodiment the system is as in the preferred embodiment but additionally indicates to users when a symbol is being watched by at least two traders. If the symbol is on their own watch list they will see when there is at least one other trader interested in the symbol. For example the watched symbols that are on the trader s watch list appear in a gray colored box on top of the user interface similarly to the orange colored active symbol flags and yellow colored contras present flags as shown in .

The purpose is to provide the trader with conditioning information that increases the likelihood of a fill. The fill rate would be expected to be higher when the symbol is watched since at least one trader will see the symbol become active upon an order entry event.

Of course a trader who has a watched symbol on his or her own watch list can always find out if there are one or two other traders watching in addition to him simply by removing the symbol from his watch list. To make the system more user friendly an alternate embodiment also shows the trader in this case whether there is one other trader watching or two other traders. This can be done by means of an asterisk next to the watched symbol name to indicate when there is only one other trader watching.

In an alternate embodiment the system shows the user the number of traders that have this symbol on their watch at any time.

In counting the number of traders that are watching a security the system preferably looks for traders that are in fact able to see an active symbol flag. In one embodiment this is implemented by counting only GUIs that are not minimized and are not detectably hidden behind another application. In another embodiment the GUI cannot be minimized without leaving a residual alert mechanism. For example the minimized bar in the tray at the bottom of the trader s screen will flash with the orange or yellow color when a new active symbol or contras present message is received and show the symbol associated with the most recent such message.

In yet another alternate embodiment the number of traders that watch this symbol is not displayed but the trader can learn the number of parties watching upon entering an order. In this alternate embodiment where the trader does not know if a symbol is watched until submitting an order the trader can also check an auto cancel box to request that his order is automatically canceled if no other trader is watching the symbol since no one in that case would be able to see the active symbol flag and fill rates would be exceedingly low. In another alternate embodiment the trader is enabled to select the minimum number of traders that should be watching and if the actual number of watching traders is less have the order canceled automatically.

A well known problem with large block crossing systems is the low probability that a large buyer and large seller enter orders at the same time. Much of the present invention is directed to solving this problem after the first trader has entered an order but it does not in itself provide guidance as to when this first participant should be most encouraged to place an order.

In an alternate embodiment the system operates as described above and also generates system generated call events that focus traders interest at times when there is indication of both buy and sell interest in the security. In another alternate embodiment the active flags are not sent and the call is the only time focusing event. The call is preferably scheduled via an algorithm that determines when the likelihood of a fill is highest. It preferably does not utilize unbalanced trade information such as revealing the existence of buy interest in absence of any seller so as to avoid the perception of information leaks whereby traders would feel that the orders they have placed in the system are causing unwanted information events beyond their direct control.

The purpose of the call is to attract order entry from traders when the likelihood of a fill is greatest. For example if the average fill rate for a first trader placing an order in a given security were 5 the fill rate when a call is open in the security might be 10 or 15 in contrast the fill rate when there is no call would be lower than 5 with an overall average of 5 for a trader that places orders at random times independently of any calls.

Minimally the system will generate calls to focus order entry in a security when traders are missing each other on both sides. Other opportunities for generating calls are outlined below. To avoid information leak issues these calls will be reported together with the BPR updates rather than together with an order entry event. In an alternate embodiment they are issued on the half hour to further increase the traders focus.

The following data is preferably available for the purpose of deciding when calls should be generated.

A first alternate embodiment utilizes a rules based approach for deciding when the call should be issued. The Activity Evaluation process is executed together with the BPR Update process for each symbol.

If there isn t already a call the rules given below are preferably applied to decide if a symbol should be called depending on activity in the system orders trades etc. and on the market. If any of the Boolean rules are true the symbol will be called.

If a symbol is already called has been called for at least seconds configurable global parameter and there is no contras present flag in the security the system preferably removes the call.

The above list is intended for illustration and is not intended to be exhaustive. Other rules that could be used to identify when there is a greater likelihood of a trade will easily be apprehended by those skilled in the art.

Another alternate embodiment with calls utilizes a score function to determine when to generate a call as described next.

The Call Evaluation process is executed together with the BPR Update process per symbol. If there is not currently a call in this symbol the system calculates both an activity score and threshold for the symbol as described below. If the score exceeds the threshold the system preferably generates a call for this symbol.

If a symbol is already called has been called for at least seconds configurable global parameter and there is no contras present flag in the security the system preferably removes the call.

Step 1 compute the Buyside Interest and Sellside Interest in the security by adding weights associated with the following conditions.

Step 2 Compute the symbol activity score as the product of the Buyside Interest times the SellSide Interest.

The system preferably calculates the threshold as follows. The threshold is equal to zero if the symbol has never been called. If the symbol has previously been called the threshold for this symbol will be equal to an exponential function of the time since the last call expired in this symbol Threshold MaxThreshold EXP Beta TimeDelay 

In an alternate embodiment the system operates as described above except that the active symbol message is not sent to all traders who have placed the symbol on their watch list instead the flag is only sent to traders that have provided certified trading interest information indicating a likely interest in either buying or selling a large block of this security. For example such certified trading interest information may be a drop copy of execution reports that brokers issue following each trade and the selection criteria may be that the firm has bought net or sold net at least 10 000 shares of stock within the last 30 minutes. Other examples are described extensively in the following co pending U.S. patent application Ser. Nos. 09 585 049 filed Jun. 1 2000 09 750 768 filed Dec. 29 2000 and 09 870 845 filed May 31 2001 the entire contents of each of which are incorporated herein by reference.

In the preferred embodiment described above the traders themselves set price conditions on their order that will determine the execution price with no further intervention on their part.

In their current workflow Institutional traders are accustomed to sending market orders to brokers and accepting or rejecting prices that the broker may propose for executing a large block. In this sense one could say that the Institutional trader is a price taker not a price maker. 

Electronic trading systems suffer from the problem that the first party entering an order is writing the price that others may elect to take or not take thus leading to an adverse selection problem where their prices will tend to get taken when they committed a mistake and offered a too aggressive price. Attempts to reverse price priority by giving the standing order improvement to the second order s limit or having the two meet half way if the prices cross don t work well because such rules only cause the second order to start with a passive order and then progressively increase price aggression until a match occurs at the standing order s limit.

The purpose of the alternate embodiment described below is to solve this problem by having the system generate a proposed match price that is not sensitive to the prices of existing orders in the system.

In this alternate embodiment of the present invention the system performs as described above for limit orders and pegged orders but additionally enables traders to enter a new order type that we will refer to herein as a Market Order . A market order may optionally also have an absolute limit price which in turn may be fixed or pegged to a market indicator such as the midpoint of the National Best Bid of Offer.

Upon receiving a market order if there is no contra order currently residing within the system it simply stores the market order. If there is a resident contra order the system will randomly determine a possible trade price by choosing a price within the BPR with a statistical distribution such as for example a flat distribution the flat distribution being that wherein all price points within the BPR are equally likely to be selected . In another example the proposed trade price is sensitive to orders in the system and the users submit to fair arbitration by allowing the system to use order information to determine a fair price. For example such an embodiment can generate a random price based on a distribution that is not flat but piecewise flat with two flat segments above and below the BPR Midpoint to give greater probabilities to the prices below the BPR midpoint when there are more sell orders than buy orders in the system or vice versa if there are more buyers. For example the probability of prices below the BPR Midpoint can be taken to be equal to P Below Midpoint 1 1 EXP Gamma X where Gamma is a positive number such as 2 and X is the relative difference between buyer shares and seller shares priced within the BPR X BuyQuantity SellQuantity BuyQuantity SellQuantity . Thus X 1 if there is more buy interest than sell interest and X 1 in the opposite case. These examples of methods to generate prices are intended for the purpose of illustration and not as an exhaustive list other mechanisms to generate a price can easily be apprehended by those skilled in the art.

Having determined a possible trade price the system will proceed to determine the feasibility of a trade at this price according to the following logic.

In an alternate embodiment when only one trader s limit overlaps the system generated price this trader has the option of accepting the other s limit or of proposing a counter offer to the less aggressive trader. In this embodiment the less aggressive trader does not see a price until the first trader has taken action or a 30 second time window expires. The more aggressive trader may cancel his order within this 30 second window without having at any point revealed its existence to the other trader. If the first trader takes no action the system automatically shows the second and less aggressive trader the system generated price after 30 seconds. This delay overrides the immediate display of a contras present flag to resident orders of the preferred embodiment.

In an alternate embodiment of the present invention the system performs as in the preferred embodiment but in addition provides a mechanism for traders to know when there is competition to buy sell the security enticing them to increase their price aggression and thereby also facilitating the process of discovering a fair price for a trade.

In a first alternate embodiment with the competition present flag the system simply lets each trader with an order in the system that is already seeing a contra present flag know whether there are other orders on the same side.

In a second alternate embodiment with the competition present flag the system performs as in the first alternate embodiment just described but additionally the trader with the lower matching priority based price and time priority ranking is enabled to see that the other trader has a higher matching priority this trader is then induced to increase the price aggression on his order. If this becomes the new highest matching priority order the other trader will in turn be allowed to see that his price is no longer the best. This process continues as long as there are multiple orders on the same side in a context and one or more contras are present.

In an alternate embodiment the system operates as described above but additionally users are enabled to request that their orders be worked on the market while waiting for a match within Cloud9.

Users that request a working order option are preferably required to enter an order quantity that is greater than the minimum block quantity. The additional size will be dispatched to be worked by an automated process that automatically places small slices on the regular market in the manner known in the art as random refresh orders. Several such automated processes are available on the market today some that are known in the art are random refresh algorithms that place a small quantity of shares at the best price on the market and whenever said small quantity is exhausted generates a new small order to be placed at the new best price. The refreshed quantity is chosen at random between a minimum and maximum size for example between 500 and 900 shares. In another example the order is refreshed after a random delay of a few seconds. Other more sophisticated algorithms are commercially available to automate the execution of an order through its reduction to small pieces that are executed independently such as ITG s Quantex. Other destinations such as NyFIX Millennium enable completely hidden orders to intercept order flow that was on its way to a third market destination.

The alternate embodiment described herein manages the order across one or more working order destinations in addition to Cloud9. In one version of this embodiment the system splits the order into several chunks one for the Large Block Quantity is placed on Cloud9 others for a system configurable quantity for example 5000 shares are routed to external destinations that have the capability of working the order. Whenever a destination has completed its block the system determines if there is residual quantity besides that which is already placed on execution systems and if so sends the lesser of the system configurable quantity or the available residue to the destination that has completed its block. When one external destination has completed a chunk and no residual quantity remains but there are still incomplete blocks on other market destinations the incomplete block that has spent the longest amount of time without receiving a fill is canceled and re routed to the destination that reports having completed its block. When there are no further incomplete blocks anywhere except for the Large Block Quantity order on Cloud9 the system sends a message to the user s GUI to notify that the working order component has been completed. The trader may then place additional shares to resume working the order or convert the Large Block Quantity itself into a working order.

In this alternate embodiment the system preferably removes the order from consideration in assigning flags when the quantity remaining in Cloud9 has dropped below the Large Block Quantity. In another alternate embodiment the remaining size in Cloud9 can fall below the Large Block Quantity and maintain the order s effect to keep the active symbol flag. In this embodiment a second party that has also selected the working order option may receive a partial fill against this Cloud9 order if the prices were to cross for example if one order is pegged to the NBBO Midpoint and the other is a Limit Order . If the Cloud9 Limit prices of two working orders cross the system preferably attempts to pull back all orders routed to third party destinations to maximize the size that can be traded internally. Residues from this match event are subsequently reassigned to external destinations. In yet another alternate embodiment any trader may check a box to specify that they are willing to receive partial fills from the residue on a working order and may optionally specify a minimum quantity that such fills must satisfy.

In another alternate embodiment the orders entered within the system are placed in the execution engine in a suspended status while the liable block order is placed at a destination where a fill might be expected. For example the block can be placed on POSIT for a scheduled cross while it remains in a suspended status on Cloud9. The system preferably maintains the effects of the suspended order on Cloud9 for purposes of the active symbol flags. Upon entry of a contra order the system of this alternate embodiment preferably pulls back the liability by attempting to cancel the externalized order. When this cancel is successful the order has not already been filled the contras present flags are sent as in the preferred embodiment.

While the embodiments shown and described herein are fully capable of achieving the objects of the subject invention it is evident that numerous alternatives modifications and variations will be apparent to those skilled in the art in light of the foregoing description. These alternatives modifications and variations are within the scope of the subject invention and it is to be understood that the embodiments described herein are shown only for the purpose of illustration and not for the purpose of limitation.

