---

title: Storing temporary state data in separate containers
abstract: A temporary state service protocol is utilized by clients to temporarily store and access data within rows of a database between different requests made by end users. Each client creates and manages one or more items for storing data in rows of the database independently from other clients. An Application Programming Interface (API) is used to create and interact with the data that is temporarily stored in items within rows of the database. Different clients may share data within a single item and the data may persist beyond a session ending. Different rows of the database may be related such that a procedure affecting one of the rows affects its related rows.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09015136&OS=09015136&RS=09015136
owner: Microsoft Technology Licensing, LLC
number: 09015136
owner_city: Redmond
owner_country: US
publication_date: 20100423
---
The present application is a continuation in part of U.S. patent application Ser. No. 12 692 210 filed Jan. 22 2010 which is incorporated by reference and claims the benefit of the earlier filing date under 35 U.S.C. 120.

The HyperText Transport Protocol HTTP is a stateless protocol that is used to request and serve web resources such as web pages graphics and the like over the Internet. Each request is serviced as it arrives from a client and after the request is processed the data relating to the request is discarded. As such no state information is maintained across requests even from the same client. It is useful however to maintain information across requests for certain solutions.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

A temporary state service protocol is utilized by clients to temporarily store and access data within rows of a database between different requests made by end users. Each client creates and manages one or more items for storing data in rows of the database independently from other clients. An Application Programming Interface API is used to create and interact with the data that is temporarily stored in items within rows of the database. Different clients may share data within a single item and the data may persist beyond a session ending. Different rows of the database may be related such that a procedure affecting one of the rows affects its related rows.

Referring now to the drawings in which like numerals represent like elements various embodiment will be described. In particular and the corresponding discussion are intended to provide a brief general description of a suitable computing environment in which embodiments may be implemented.

Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Other computer system configurations may also be used including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like. Distributed computing environments may also be used where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

Referring now to an exemplary computer architecture for a computer utilized in various embodiments will be described. The computer architecture shown in may be configured in many different ways. For example the computer may be configured as a web server a personal computer a mobile computer and the like. As shown computer includes a central processing unit CPU a system memory including a random access memory RAM and a read only memory ROM and a system bus that couples the memory to the CPU . A basic input output system containing the basic routines that help to transfer information between elements within the computer such as during startup is stored in the ROM . The computer further includes a mass storage device for storing an operating system application programs and other program modules which will be described in greater detail below.

The mass storage device is connected to the CPU through a mass storage controller not shown connected to the bus . The mass storage device and its associated computer readable media provide non volatile storage for the computer . Although the description of computer readable media contained herein refers to a mass storage device such as a hard disk or CD ROM drive the computer readable media can be any available media that can be accessed by the computer .

By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EPROM EEPROM flash memory or other solid state memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer .

According to various embodiments the computer operates in a networked environment using logical connections to remote computers through a network such as the Internet. The computer may connect to the network through a network interface unit connected to the bus . The network interface unit may also be utilized to connect to other types of networks and remote computer systems.

The computer may also include an input output controller for receiving and processing input from a number of devices such as a keyboard mouse electronic stylus and the like . Similarly the input output controller may provide output to a display screen a printer or some other type of device .

As mentioned briefly above a number of program modules and data files may be stored in the mass storage device and RAM of the computer including an operating system suitable for controlling the operation of a networked computer such as the WINDOWS 7 WINDOWS SERVER WINDOWS SHAREPOINT SERVER operating systems from MICROSOFT CORPORATION UNIX LINUX and the like. The mass storage device and RAM may also store one or more program modules. In particular the mass storage device and the RAM may store a web server application program . According to one embodiment the web server application is a content management application such as MICROSOFT CORPORATION S SHAREPOINT 2010 . The web server application program is operative to provide functionality for receiving requests from clients and processing the requests.

Typically web server application receives a request from a end user s browser application on a client computing device. A WWW browser such as Microsoft s INTERNET EXPLORER is a software browser application program that may be used in requesting the data. Upon receiving the request from the user via the browser on a separate computing device the web server application retrieves the desired data from the appropriate data server. Generally a request occurs over HTTP and includes one or more identifiers ID for one or more clients. HTTP is a higher level protocol than TCP IP and is designed for the requirements of the Web and is used to carry requests from a browser to a Web server and to transport pages from Web servers back to the requesting browser or client. Item manager is used to temporarily store data in a location within a database such as data store between requests such that data needed by a client is not lost between requests. Data store is configured to store data within items for a number of clients. According to one embodiment each item is stored within a separate row of a database. Each client manages its own items within the rows of data store independently from the other clients.

Generally item manager uses a temporary state service protocol that provides an API to clients to create store and interact with data that is temporarily stored within items in data store . Instead of each client that is associated with a web page having to share and store data within a single item for the web page each client that is associated with the web page can store data in one or more different items within the rows of the database in data store that are each maintained separately. For example a first client can store data in a first item within a first row i.e. Row whereas a second client that is associated with the same page can store data in a second item within a second row i.e. Row . Different clients may also interact with data in different rows when they are provided with the unique identifier for the item that is stored in a different row. For example a first client may provide the second client with the identifier of the first row such that the second client can perform actions on the data within the first row that was created by the first client. Each client can create items that are uniquely identified for storing data. When the clients retrieve items from the data store clients can optionally request that a virtual lock be placed on the item to ensure exclusive access for the requesting client. The procedures associated with the protocol are directed at enabling clients to create add modify retrieve and delete items in a data store such as data store . According to one embodiment procedures are directed at enabling clients to access items with virtual locks and to remove virtual locks from instances of the item. Generally when a client intends to modify data in an item the client requests exclusive access to the item by requesting a lock on the item. The client receives an indication such as a lock cookie identifying that a virtual lock is placed on the item. Once a client has completed working with an item of the data the client can store the updated item in the data store and release the virtual lock identified by the lock cookie thereby allowing other clients to access the item. If no changes were made to an item of the data clients can release the virtual lock without making any modifications to the item in the data store. In some instances a virtual lock held on an item will be considered stale after a period of time. In these situations a client can forcibly remove the virtual lock from the item and or the lock can be automatically removed. According to one embodiment items within each row of the database within the data store are set to expire after a predetermined amount of time. For example clients may set the expiration time and or some other authorized user may set the expiration time. Using the API clients can modify the expiration time for an item of the data in the data store without modifying the data itself. Clients can also remove an item of the data or all items of expired data from the data store. Additional details regarding the operation of the item manager and the temporary state service protocol used to interact with the data within the rows of the database will be provided below.

Each item that is stored within a row of the database may be related to another item s row s within the same database and or a different database that is stored on the same computing device or another computing device. For example a parent item i.e. a document may include one or more child items that represents objects embedded within the document. As illustrated within web page Item is related to Item and Item N is related to Item . Generally when an item is related to another item an action to an item also affects the related dependent item s . For example deleting a parent item i.e. Item deletes any children i.e. Item of that item. Different actions may be configured based on the application. For example different actions may be configured based on a level of the relationship i.e. parent to child child to child level to same level level to another level and the like .

Items for storing the temporary data may also be stored on one or more databases across one or more computing devices. Different allocation schemes may also be used. For example each database may store an equal portion of the load a non equal portion of the load i.e. 70 of load to data store 30 to data store each database may be associated with one or more applications and the like. A user may configure the allocation schemes. Databases may also be added or paused on a live server. For instance a database may be added during an existing session and or data within items on one database may be migrated to another database.

Instead of each client receiving data that it is not interested in each client utilizes API to manage its own data that is to be temporarily stored. The procedures for API that are associated with the temporary state service protocol are directed at allowing the clients to add items to the data store modify data within the items retrieve data from the items and delete data from items in the data store. The clients may also use the API to place and remove virtual locks when accessing data within the items as well as modify expiration times of the items.

According to one embodiment the procedures that are supported by API include the following an Add Item procedure Get Item without Lock procedure Get Item with Lock procedure Delete Item procedure Delete Expired Items procedure Refresh Item Expiration procedure Release Item Lock procedure and an Update Item procedure.

The Add Item procedure is used by the clients to create a new item and row in data store and insert data specified by the client calling the add item procedure into the item specified by the client into the data store.

The Get Item without Lock procedure retrieves data from the specified item in the data store without placing a virtual lock on the data. Placing a lock on an item in the data store prevents other clients from changing the data while the client that has placed the item in a lock interacts with the data. The Get Item without Lock procedure allows a client to view the data in the item but not modify the data.

The Get Item with Lock procedure retrieves data from the specified item the data store and attempts to place a virtual lock on the item for exclusive access by the requesting client. When the item is locked only the client that placed the lock can modify the data.

The Delete Item procedure deletes an item of data from the data store. According to one embodiment the Delete Item procedure deletes the item and any related items that are considered children of the item.

The Delete Expired Items procedure deletes the expired items of data from the data store. According to one embodiment an item expires after a predetermined period of time such that storage is not tied up for longer then needed within data store . The timeout can be set to many different values. For example the expiration period may be ten minutes thirty minutes one hour twenty four hours and the like. According to one embodiment each client determines an expiration time for each item that it has created. For instance one client on web page may need data in item for fifteen minutes whereas another client or the same client on the web page may need data in another item for twenty four hours. According to one embodiment calling the delete expired items procedure removes all of the expired items from the data store regardless of the client that created the item. The delete expired items procedure may be called by a client and or automatically called at predetermined times.

The Refresh Item Expiration procedure updates the expiration time of an item of data in the data store. For example a client may need to store the data longer then it first calculated. According to one embodiment the refresh period is the same as a first indicated expiration time. According to another embodiment the refresh period may be set to a different expiration time period.

The Release Item Lock procedure removes a virtual lock from an item of data such that other clients can access the item if needed.

PROCEDURE AddItem id varchar item varbinary max timeout int where id The procedure associates the data in the data store with the supplied identifier. id is not NULL. Data associated with the same id does not already exist in the data store. item The data that is to be stored. The procedure does not place a virtual lock on the stored data. timeout A positive integer value in minutes indicating the time out of the data. Return Values An integer which is 0.

PROCEDURE GetItemWithoutLock id varchar item varbinary max OUTPUT locked bit OUTPUT lockAgeInSeconds int OUTPUT lockCookie int OUTPUT where id The procedure attempts to retrieve data associated with the supplied identifier. item The value passed into the procedure in this parameter is ignored. If no data exists for the identifier supplied in the id variable a NULL value is returned. If the data identified by the id variable does not have a virtual lock on it the procedure returns the data in the item output parameter. Otherwise a NULL value is returned in the item output parameter. locked The value passed into the procedure in this parameter is ignored. If no data exists for the identifier supplied in the id variable a NULL value is returned. If the data identified by the id variable does not have a virtual lock on it a 0 is returned in the locked output parameter. Otherwise a 1 is returned in the locked output parameter. lockAgeInSeconds The value passed into the procedure in this parameter is ignored. If no data exists for the identifier supplied in the id variable a NULL value is returned. If the data identified by the id variable does not have a virtual lock on it the value returned in the lockAgeInSeconds output parameter is 0. Otherwise lockAgeInSeconds is not NULL and the procedure returns the lock age in seconds of the data in the lockAgeInSeconds output parameter. lockCookie The value passed into the procedure in this parameter is ignored. If no data exists for the identifier supplied in the id variable a NULL value is returned. If the data identified by the id variable does not have a virtual lock on it the value returned in the lockCookie output parameter is ignored by the protocol client. Otherwise the procedure returns the lock cookie currently associated with the virtual lock in the lockCookie output parameter which is not NULL. Return Values An integer which is 0.

PROCEDURE GetItemWithLock id varchar item varbinary max OUTPUT locked bit OUTPUT lockAgeInSeconds int OUTPUT lockCookie int OUTPUT where id the procedure attempts to retrieve data associated with the supplied identifier. item the value passed into the procedure in this parameter is ignored. If no data exists for the identifier supplied in the id variable a NULL value is returned. If the data identified by the id variable does not have a virtual lock on it the procedure returns the data in the item output parameter. Otherwise a NULL value is returned in the item output parameter. locked The value passed into the procedure in this parameter is ignored. If no data exists for the identifier supplied in the id variable a NULL value is returned. If the data identified by the id variable does not have a virtual lock on it the value 0 is returned in the locked output parameter and the procedure places a virtual lock on the data. Otherwise the value 1 is returned in the locked output parameter. lockAgeInSeconds The value passed into the procedure in this parameter is ignored. If no data exists for the identifier supplied in the id variable a NULL value is returned. If the data identified by the id variable does not have a virtual lock on it the value returned in the lockAgeInSeconds output parameter is 0. Otherwise the procedure returns the lock age in seconds of the data s virtual lock in the lockAgeInSeconds output parameter which is not NULL. lockCookie The value passed into the procedure in this parameter is ignored. If no data exists for the identifier supplied in the id variable a NULL value is returned. Otherwise the procedure returns the lock cookie associated with the virtual lock in the lockCookie output parameter which is not NULL. Return Values An integer which is 0.

PROCEDURE DeleteExpiredItems attempts to delete all of the expired items in the data store Return Values An integer which is 0.

PROCEDURE DeleteItem id varchar lockCookie int deletes a specified item within the data store where id The identifier of data to remove. lockCookie The lock cookie of the data to remove. Return Values An integer which is 0.

PROCEDURE RefreshItemExpiration id varchar where id The procedure updates the expiration time of the data associated with the supplied identifier. If no data exists for the identifier supplied in the id variable the procedure does not make any changes. Return Values An integer which is 0.

PROCEDURE ReleaseItemLock id varchar lockCookie int where id The procedure removes the virtual lock from the data associated with the supplied identifier. If no data exists for the identifier supplied in the id variable the procedure does not make any changes. lockCookie If the value supplied in this parameter matches the lock cookie currently associated with the instance of data the procedure removes the virtual lock from the data and it updates the expiration time of the data. Otherwise the procedure does not remove the virtual lock and does update the expiration time. Return Values An integer which is 0.

PROCEDURE UpdateItem id varchar item varbinary max timeout int lockCookie int where id The procedure updates the data in the data store associated with the supplied identifier. If no data exists for the identifier supplied in the id variable the procedure does not make any changes. item The new data that is to be stored if the lock cookie supplied in the lockCookie parameter matches the lock cookie currently associated with the instance of data. Additionally the procedure does not remove the virtual lock from the data. timeout A value in minutes indicating the lifetime of the supplied data. If the lock cookie supplied in the lockCookie parameter matches the lock cookie currently associated with the item of data the procedure updates the expiration time associated with the instance of data. lockCookie The procedure updates the data in the data store if the lock cookie supplied in the lockCookie parameter matches the lock cookie currently associated with the instance of data. If this parameter does not match the lock cookie currently associated with the instance of data the procedure does not make any changes. Return Values An integer which is 0.

Referring now to an illustrative process for using the temporary service state protocol to store data within rows of a database will be described. When reading the discussion of the routines presented herein it should be appreciated that the logical operations of various embodiments are implemented 1 as a sequence of computer implemented acts or program modules running on a computing system and or 2 as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance requirements of the computing system implementing the invention. Accordingly the logical operations illustrated and making up the embodiments described herein are referred to variously as operations structural devices acts or modules. These operations structural devices acts and modules may be implemented in software in firmware in special purpose digital logic and any combination thereof.

Referring now to after a start operation the process flows to operation where an identifier for a new item to be created is determined. The identifier may be created by the client or on a different computing device. According to one embodiment the client asks the API to generate the unique identifier for the item and uses the identifier when creating the item. The identifier uniquely identifies the item within one of the rows across different databases. For example each row of one or more databases that stores an item is assigned a unique identifier.

Moving to operation an expiration time for the item is specified. The expiration time specifies a time period that is used to determine how long the item is to be maintained in a row of the data store. According to one embodiment the client creating the item specifies a timeout value from which the expiration time is calculated. Each item may have a different expiration time. For example one item may expire after ten minutes whereas another item expires after two hours. According to one embodiment any related items are set to the same expiration time.

Moving to operation the data to store in the item is specified. The data may be any type of data that is to be temporarily stored.

Transitioning to operation the data specified by the client is stored within a row of a database that is identified by the ID for the item. According to one embodiment the items may be distributed across different databases that use an allocation scheme that specifies how to store the items. For example one database may store 10 of the items whereas another database may store 55 and a third database may store 35 of the item. As discussed above any allocation scheme may be used.

Moving to operation a client requests to access the data based on the unique identifier. A client may read the data and or update the data. According to one embodiment a client may access the data with a lock such that the while the lock is in place the client is the only client that is authorized to update the data within the item. The client may also access the data without a lock in which case the client is authorized to read the data but not make any updates to the data. Different clients may also collaborate on the same data within an item within a row of the database when each of the collaborating clients are provided with the unique identifier of the row of the database. This may allow multiple users to collaborate on the same shared data allow multiple browsers or applications on a user s desktop to collaborate on the same data and the like.

Flowing to operation a client may refresh the expiration time of an item. For example a client may want to store the data in the item for a longer period of time then was initially set. According to one embodiment when a parent item is refreshed any children items of the item are also refreshed. The expiration time may be set to last longer then a web session. For example the temporary state data may be stored longer then a current user s web session. In this way the data that is associated with each of the clients in a previous web session may be used in a new web session as long as the data has not expired.

Moving to operation a client may use the API to delete a single item within the data store and or delete every expired item within the data store. According to one embodiment when a parent item is deleted any children items of the item are also deleted.

The above specification examples and data provide a complete description of the manufacture and use of the composition of the invention. Since many embodiments of the invention can be made without departing from the spirit and scope of the invention the invention resides in the claims hereinafter appended.

