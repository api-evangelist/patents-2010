---

title: Monitoring and tracking application usage
abstract: The present description refers to a computer-implemented method, a computer program product and a computer system for monitoring and tracking application usage, the method comprising: determining, during a first interval, a first indication of whether a first user has provided a first input. The method further comprising obtaining, during the first interval, a first identifier of an active window in a first graphical user interface (GUI), and selectively storing the first identifier and the first indication. For this purpose a specific tracking tool may be implemented on the computer on which the first graphical user interface is executed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09037960&OS=09037960&RS=09037960
owner: Accenture Global Services Limited
number: 09037960
owner_city: Dublin
owner_country: IE
publication_date: 20101214
---
Using software tools currently available it is often very difficult to monitor and track application usage in a standard and automated way. Furthermore computer network and application security requirements may constrain the development of a tool that enables application utilization to be efficiently tracked.

Monitoring and tracking of application usage may be particularly desirable due to globalization. Globalization and the proliferation of information technology enable tasks that were once performed locally within an organization to be performed in other locations and possibly by other organizations. It is often desirable for an organization to have tasks performed in an area where labor is more cost effective and or to take advantage of the expertise and or specialization of another organization. It may also be useful for an organization to focus on its core business and outsource tasks unrelated to its core business to other organizations.

Outsourcing particularly Business Process Outsourcing BPO may be understood to describe a situation where a client organization imposes a specific set of tasks upon a third party or entity. The third party or entity may be a separate or an auxiliary organization. The third party may be located in another country or in a location near the client organization. One example of Business Process Outsourcing is a third party organization providing information technology IT services for an automobile and or a machine tools manufacturer. These IT services might range from supply chain management to the control of manufacturing processes. Some of these IT services might be performed in one country whereas other IT services may be performed in a different country.

An outsourcing environment particularly a BPO environment may be understood to include objects processes and circumstances defining how the third party performs tasks for the client organization. The elaboration of a BPO environment may include information system configuration requirements access control requirements or restrictions imposed for the sake of security. The objects in the BPO environment may include equipment such as computers with a specific software and or hardware configuration. It may be desirable for a client organization to partially define a BPO environment for the third party in order to mitigate risk and maintain accountability within the client organization. Thus the third party may be required to operate under restrictions outside its control.

One or more technical restrictions may be imposed on users user computers and or server computers in an outsourcing environment. It may be desirable to constrain the communications of computers in an outsourcing environment to one Local Area Network LAN or to limit the communications of a computer in an outsourcing environment to an explicitly identified set of computers. Network connectivity in an outsourcing environment may be limited to users and computers directed to perform a specific set of tasks. It may also be desirable to restrict user access to computers and or to restrict the interactions allowed between computers.

Prior art solutions for monitoring and tracking application usage may be tailored to specific applications and processes. In other words each application may require a separate monitoring and tracking solution integrated into the source code of the application. Also prior art solutions may capture transactional data of monitored applications. Accordingly a prior art solution may be a front end for a suite of applications or for each application. The front end may interface with the code of the application in order to determine how the application is being used. Thus prior art solutions may require a separate monitoring and tracking tool to be written for each application may also require access to the source code of the application and may interact with the application programming interface API of each application. In other words prior art solutions may require a dedicated tracking tool for each application. Such solutions may necessitate extensive program development efforts and may violate security standards by requiring access to application source code thus it is often impossible to technically implement the monitoring and tracking solution.

According to an aspect a computer implemented method of monitoring and tracking application usage is provided. The method comprises obtaining during a first interval a first identifier of an active window in a first graphical user interface GUI . In addition the method comprises determining during the first interval a first indication of whether a first user has provided a first input as well as storing the first identifier and the first indication.

According to another aspect a computer implemented method of monitoring and tracking application usage is provided. The method comprises determining during a first interval a first indication of whether a first user has provided a first input. The method further comprises obtaining during the first interval a first identifier of an active window in a first graphical user interface GUI . The method further comprises selectively storing the first identifier and the first indication.

In a first embodiment selectively storing comprises when the first identifier is different from a most recently stored identifier or when the first indication is different from a most recently stored indication or when there is no previously stored identifier and no previously stored indication storing the first identifier and the first indication. The most recently stored identifier may be understood as a previously stored identifier where there is no identifier stored after the most recently stored identifier and before the first identifier. The most recently stored indication may be understood similarly.

In a second embodiment selectively storing comprises when the first identifier is different from a most recently stored identifier or when there is no previously stored identifier storing the first identifier and the first indication.

The method may be implemented to track the usage of a single application or a plurality of applications. An interval may be understood as a specified predetermined or predeterminable period of time. The interval may be about 5 seconds 10 seconds or 15 seconds. In some cases 10 minute or 15 minute intervals may be suitable. Other intervals may also be suitable depending on the applications and or how the applications are being used.

Monitoring and tracking application usage may include determining if a particular application is being used or determining whether an unauthorized application is being used or no application is being used. In addition monitoring and tracking of application usage may involve summarizing application usage so that the summary can be easily read and understood. Monitoring and tracking of application usage may be implemented using a tracking tool.

In some embodiments selectively storing the first identifier and the first indication includes saving the first identifier and the first indication in a first data set such as in a first data sheet. Accordingly the method may further comprise obtaining during a second interval a second identifier of an active window in a second GUI. In particular the second GUI may be different from the first GUI. In addition the method may comprise determining during a second interval a second indication of whether a second user has provided a second input. The method may also comprise saving the second identifier and the second indication in a second data set such as in a second data sheet. Moreover the method may comprise copying data of the first data set particularly first data sheet and data of the second data set particularly second data sheet into a third data set such as into a third data sheet.

In some cases copying data of the first data sheet and data of the second data sheet into the third data sheet includes copying all of the data of the first data sheet and all of the data of the second data sheet into the third data sheet.

A data sheet may also be understood as a worksheet. In other words a data sheet may be an array of cells displayed by a spreadsheet program where each cell can be thought of as a box for holding a data element. Thus a spreadsheet worksheet or data sheet may be understood as an electronic representation of multiple cells or fields that together make up a grid consisting of rows and columns. A spreadsheet may be displayed inside an application program such as Microsoft Excel Excel is a trademark of Microsoft Corporation .

The first GUI may be the GUI of a first computer and the second GUI may be the GUI of a second computer that is different from the first computer.

Furthermore the first data sheet the second data sheet and the third data sheet may be located in a shared folder of a third computer that is different from the first and the second computer. Also the shared folder may be accessible from the first GUI and the second GUI.

In some cases the first data sheet the second data sheet or both data sheets may be transmitted to a central location e.g. via email or some other suitable network protocol. Optionally the transmitted data sheets may be processed using a rule or macro. The rule may consolidate information from the data sheets in order to generate a report e.g. a summary report. This may have the effect of making it easier for a user to process the data sheets.

Accordingly it may be that the first computer and the second computer are user computers. Particularly in the BPO environment it may be that each user computer only accepts network communications received as a response to a request originating from the user computer and the user computer does not accept network communications which originate from another computer. For example this may be understood to mean that the user computer will accept Transmission Control Protocol TCP or User Datagram Protocol UDP packets from another computer only if those packets are determined to be a response to TCP or UDP packets sent by the user computer.

In addition it may be the case that the third computer is a server computer. In this case the shared folder may be stored on the server computer. Moreover the shared folder may contain the first second and or third data sheets and the shared folder may be accessible by the user computer. In the outsourcing environment the server computer may accept communications which originate from other computers.

In some embodiments the first data sheet is located on a first computer the second data sheet is located on a second computer and the third data sheet is located on a third computer. Accordingly copying the data of the first data sheet and the data of the second data sheet into the third data sheet further comprises opening a connection from the first computer to the third computer and copying the first data sheet to the third computer as well as opening another connection from the second computer to the third computer and copying the second data sheet to the third computer.

It may be that the first interval and the second interval overlap. In other words the time period covered by the first interval may coincide to some extent or entirely with the time period covered by the second interval.

Selectively storing the first identifier and the first indication may include saving the first identifier and the first indication in a first data set such as a first data sheet. Accordingly the method may also comprise determining during the second interval a second indication of whether the first user has provided a second input. The method may further comprise obtaining during a second interval a second identifier of an active window in the GUI. The method may also comprise storing the second identifier and the second indication when the second identifier is different from the first identifier or when the second indication is different from the first indication. The combination of an identifier and an indication may be referred to as an input status. Accordingly this embodiment may have the effect of reducing storage requirements since a second input status is only stored when the second input status differs from the most recent input status in this case the first input status.

The method may further comprise transmitting the first data sheet to a second computer processing the first data sheet using a macro and consolidating information from the first data sheet with information from one or more further data sheets in order to generate a report. Processing may also be performed using a rule or similar programming tool.

Furthermore protection may be implemented for the first data sheet and or the second data sheet. This protection may achieve the result that the data of the first data sheet and the data of the second data sheet are protected from access by unauthorized users. Thus the protection may prevent the user of the first computer from accessing the data of the first data sheet.

Determining the first indication may comprise verifying whether the first user has provided the first input using a keyboard and or a navigation device or any input device e.g. a pointing device such as a mouse. Similarly determining the second indication may comprise verifying whether the second user has provided the second input using a keyboard and or a pointing device such as a mouse.

In some embodiments the first identifier and the first indication may not display in the first GUI. Accordingly the tracking tool may run in the background and the execution of the tracking tool may be transparent to the user.

Also it may be that interfaces of the application are not accessed. In other words monitoring and tracking of application usage may be performed without accessing the APIs of any of the applications being monitored and tracked. Thus the tracking tool does not function as a front end of any of the applications. Accordingly monitoring and tracking of application can be performed through a variety of delocalized computers particularly in a situation where technical restrictions are imposed on users user computers and or server computers in an outsourcing environment.

In addition the first identifier of the active window in the first GUI may identify a different application than the second identifier of the active window in the second GUI. Thus different applications may be monitored and tracked using the tracking tool. The tracking tool may be operable to monitor and track new or further applications without any additional development effort. For example the first computer may be running Microsoft Word and the second computer may be running Microsoft Excel. One or more of the used terms might be trademarks of their respective owners.

In some embodiments the method steps may be implemented by means of macros. In other words the method steps may be implemented using units of Visual Basic for Applications code.

According to yet another aspect a computer program product particularly tangibly embodied on a computer readable medium embodied as a signal and or as a data stream is provided. The computer program product comprises computer readable instructions which when loaded and executed on a computer system cause the computer system to perform operations according to the above computer implemented method of monitoring and tracking application usage.

According to a further aspect a computer system for monitoring and tracking application usage is provided. The system may comprise a first computer including a first graphical user interface GUI configured to display a first active window a first timer configured to define a first interval and a first input device. The first computer is operable to determine during the first interval a first indication of whether a first user has provided a first input to the first input device. The first computer is further operable to obtain during the first interval a first identifier of the first active window and selectively store the first identifier and the first indication.

According to yet a further aspect a computer system for monitoring and tracking application usage is provided. The system may comprise a first computer including a first graphical user interface GUI configured to display a first active window. Accordingly the first computer includes a first timer configured to define a first interval and a first input device. The first computer is operable to obtain during the first interval a first identifier of the first active window. The first computer is further operable to determine during the first interval a first indication of whether a first user has provided a first input to the first input device and to store the first identifier and the first indication.

In some embodiments the computer system further comprises a second computer in particular the second computer may be different from the first computer. Accordingly the second computer includes a second graphical user interface GUI configured to display a second active window. The second computer includes a second timer configured to define a second interval and a second input device. The computer system also includes a third computer. Furthermore the second computer is operable to obtain during the second interval a second identifier of the second active window. The second computer is further operable to determine during the second interval a second indication of whether a second user has provided a second input to the second input device and store the second identifier and the second indication. Accordingly the first computer is further operable to store the first identifier and the first indication by saving the first identifier and the first indication in a first data sheet. In addition the second computer is further operable to store the second identifier and the second indication by saving the second identifier and the second indication in a second data sheet. Also the third computer is operable to copy data of the first data sheet and data of the second data sheet into a third data sheet.

Moreover it may be the case that installing and executing computer programs must be performed without administrator access in the BPO environment. This may be understood to mean that installing and executing the tracking tool does not require administrator access to the user computer and or the server computer i.e. the first computer the second computer and or the third computer .

In addition it may be that in the BPO environment a computer program e.g. the tracking tool may only be installed on the user computer if the installation of the computer program works without changes to the registry of the user computer.

These and other aspects may have a number of advantages. One advantage may be that the tracking tool requires minimal installation. Put another way the tracking tool is easy to install. In the context of a Microsoft Windows environment installation of the tracking tool does not require registry changes or administrator access to the user computer Windows is a trademark of Microsoft Corporation . In addition the tracking tool does not require a dedicated server.

A further advantage may be that the tracking tool can operate under technical restrictions and or requirements particularly applying to an outsourcing environment. For example in some embodiments the tracking tool does not require open TCP IP ports on user computers e.g. the first computer or the second computer in order to enable monitoring and tracking of application usage. Opening a TCP IP port on a computer may be understood as allowing an external application i.e. an application on another computer to initiate communication to the computer.

An additional advantage of the tracking tool may be that the tracking tool works without access to the Internet in order to function. Thus the integrity of an organization s network perimeter may be preserved and or a high level of security may be achieved.

Administrator access may be understood as superuser or privileged access to a computer system. In the context of a specific operating system administrator access may be understood as access to the Administrator account in a Microsoft Windows environment as membership of the Administrators group in a Microsoft Windows environment or as access to the root account in a Unix environment. In this document Microsoft Windows is used to refer to a recent version of Microsoft s Windows operating system such as Microsoft Windows XP Microsoft Windows Vista or Microsoft Windows 7.

A registry or a computer s registry may be understood as a central database containing information for booting configuring and or tailoring a computer system. A registry may be associated with recent versions of Microsoft s Windows operating system.

The subject matter described in this specification can be implemented as a method or as a device possibly in the form of one or more computer program products. The subject matter described in the specification can be implemented in a machine readable medium where the medium is embodied in one or more information carriers such as a CD ROM a DVD ROM a data signal a semiconductor memory or a hard disk. Such computer program products may cause a data processing apparatus to perform one or more operations described in the specification.

In addition subject matter described in the specification can also be implemented as a system including a processor and a memory coupled to the processor. The memory may encode one or more programs to cause the processor to perform one or more of the methods described in the specification. Further subject matter described in the specification can be implemented using various machines.

Moreover the subject matter described in this specification may be implemented using a variety of programming languages and tools including Visual Basic for Applications VBA or Visual Basic.

Details of one or more implementations are set forth in the accompanying exemplary description and drawings below. Other features will be apparent from the description and drawings as well as from the claims.

In the following text a detailed description of examples will be given with reference to the drawings. It should be understood that various modifications to the examples may be made. In particular elements of one example may be combined and used in other examples to form new examples.

At step the tracking tool may be an attachment to an email sent to a user or stored in a shared folder. Items or files in the shared folder may be shared using a file sharing protocol supported in a Microsoft Windows environment e.g. Common Internet File System and or Server Message Block . Other file sharing protocols and other operating systems are also possible. At step the tracking tool may be downloaded or provided to a user computer and configured to run or start running when a user logs in. For example on a Microsoft Windows computer a shortcut to the location of the tracking tool on the file system may be added to the Windows Startup folder.

A user may log in to the user computer at step . At step according to the example of monitoring and tracking of application usage begins. When a user logs out at the tracking tool automatically saves tracked data and the tracking tool is closed.

Advantageously the tracking tool may execute in the background and access to tracked data may be limited. Furthermore execution of the tracking tool may be transparent to the user. Alternatively only a plain worksheet of a spreadsheet application may be visible to the user. In one example transparency may be advantageous since the user could become uncomfortable if he is aware that application usage on the user computer is being monitored and tracked. Steps to may be repeated for multiple computers.

After step steps to may be repeated until step is performed. The repetition of steps to may result in storing data that tracks work performed on the user computer. The stored data may also be used to do scientific time and motion studies for any process performed on the user computer. Moreover the stored data may be used to monitor the flow of activity based on the flow of windows used by the user in order to perform statistical analysis and achieve process improvements. Furthermore the stored data may make it possible to monitor the quality of the process by viewing the flow of the process through the windows opened by the user. The stored data may also be used to indirectly track the processer utilization of the user computer s based on the extent of user input.

At step a new interval e.g. a first interval or a second interval may begin. In this context each interval may be understood as a specified predetermined or predeterminable finite period of time e.g. 5 seconds. It may be an advantage that the interval can be varied according to the applications being monitored and or the process being performed. Thus in some cases a 5 second interval may be appropriate whereas in other cases an interval of about 10 minutes may be suitable. Other intervals are also possible.

In some implementations the interval is determined via interaction with a system timer of the user computer. Use of the system timer may have the advantage of increasing the difficulty of creating false input i.e. creating a second program that makes it appear that a particular application is being actively used. This is because the second program might also require repeated access to the system timer. Repeated access to the system timer could be detected and reacted to by the tracking tool.

At step the tracking tool may determine an indication of whether the user has provided input. Step may be implemented by checking whether any input has been provided by the user by means of a keyboard and or navigation device particularly whether a pointing device such as mouse and or keyboard input has been provided since the most recent check for input. In other words one or more functions may be called in order to determine whether a key i.e. a keyboard key and or a mouse button was pressed since the most recent check for input. In a specific example a function may be called for each key e.g. as part of a loop in order to determine whether the key was pressed since the last time the key was queried. Alternatively the function may determine whether the key was pressed during a time period. The one or more functions may include Windows API functions such as GetAsyncKeyState .

Other external devices such as a scanner a network connection a CD ROM drive and or a disk drive may also or alternatively be checked for activity or to determine whether the user has interacted with i.e. provided input to the device. Providing input may be understood as giving information to a computer e.g. by typing on a keyboard or inserting a CD. Thus determining whether the user has provided input may involve determining whether the user has provided the input during a period of time. Consequently an increase in the length of the interval may also increase the period of time checked for input.

Step may be a quick and efficient way to determine an indication of whether the user has provided input.

At step it is determined whether a result of the input check of step is the same as a result of the most recent input check. If the result of the input check of step is the same as the result of the most recent input check step is performed after step . If the result of the input check of step is not the same as the result of the previous input check then step is performed after step . Performance of step may have the effect that the quantity of data stored in the capture worksheet is reduced particularly in comparison to the situation where a result of an input check is stored for each interval.

In the special case of the first interval there is no previous input check so step may be performed after step . Alternatively in the case of the first interval step may be skipped and step may be performed after step .

According to the example depicted in the current date and time are pasted into a capture worksheet at step . The capture worksheet may also be referred to as a worksheet or a data sheet.

In addition a name of an active window may be pasted into the capture worksheet at . The name of the active window may also be referred to as the title or the identifier of the active window. The active window may also be referred to as the foreground window. The active window may be understood as the window with which the user is currently working e.g. by providing an input thereto such as by means of a keyboard and or a pointing device. The name of the active window may be understood as the text of the window s title bar. Alternatively if the active window is a control the name of the active window may be the text of the control. In the context of Microsoft Windows the name of the active window may be obtained by interacting with Windows Application Programming Interface API functions. More specifically the name of the active window may be obtained using the Windows API functions GetForegroundWindow and GetWindowText Alternative mechanisms are also possible.

Step may be a quick and efficient way to obtain the name of the current active window e.g. by copying a name of the active window into the capture worksheet.

Also one or more of steps to may be performed at least partly in parallel which may further increase efficiency. Moreover functionality may be provided so that other system functions can be performed while steps to are being carried out.

The indication may be evaluated at step . If input was provided at step the tracking tool may paste WORKING after the name of the active window in the capture worksheet. Some other suitable text may also be pasted in order to register that work was performed since the most recent check for input. If no input was provided at step the tracking tool may paste IDLE after the name of the active window in the capture worksheet. Some other suitable text may also be pasted in order to register that no work was performed since the most recent check for input.

Data stored i.e. pasted or copied in the capture worksheet may be protected using a worksheet lock. Stored data may include the identifier of the active window and the indication of whether the user provided input. Protecting stored data in the capture worksheet may involve locking cells hiding cells and or locking the capture worksheet. In the specific example of Microsoft Excel protecting stored data may also include designating the capture worksheet as hidden or very hidden .

After step or depending on the circumstances step may be performed again at the beginning of a new interval. The pasting and copying operations described above may be performed automatically by the tracking tool.

At step the user may log out of the user computer. According to the example in step data stored during steps to is automatically saved e.g. to a data sheet and the tracking tool is closed. Thus it is possible that data is stored in RAM in steps to and written to a file in step . Alternatively the data stored in steps to may be written to the file in the corresponding steps and the file may be closed in step .

In some embodiments steps to are performed by multiple user computers e.g. at least a first computer and a second computer. The first computer and the second computer may include at least a first GUI and a second GUI respectively. The files created in step may be stored in a shared folder of a third computer different from the first and second computer. The shared folder accessible via file sharing protocols such as Server Message Block SMB . The third computer may also be referred to as a server computer.

In a first example at step a macro may be executed in order to copy the data of the data sheet created by the first computer and copy the data of the data sheet created by the second computer into one data sheet created by the third computer. In the context of this specification a macro may be understood as a unit of computer code or more specifically a unit of VBA code. The data sheet created by the third computer may be analyzed and data comparisons may be performed.

Compiling the data of the data sheets from multiple user computers into one data sheet on the server computer may have the advantage of being inexpensive and easily implemented. In addition compiling multiple spreadsheets into one spreadsheet may leverage existing user expertise since many users are trained to use spreadsheets whereas fewer users may be trained to use databases.

Alternatively in a second example each file created in step may be stored on the corresponding user computer. Each stored file may be transmitted to a particular user e.g. via email or another application protocol. The transmitted files can then be processed possibly using rules or filters. More specifically each capture worksheet may be received via email and stored in a particular folder using a rule. A macro may open each email in the folder and save the worksheets to the shared folder.

The method described in connection with may also have the advantage that bandwidth will not be wasted since only minimal necessary data is transmitted from the user computer s to the server computer. In other words data traffic over the network can be reduced and or optimized.

Implementing the method of using macros may have the advantage of complying with security policies of some organizations even in case these security policies do not allow the use of Visual Basic or other programming languages.

In addition monitoring and tracking application usage with the tracking tool may be more reliable than manual methods.

According to the example depicted a date column may include the current date and time e.g. as inserted in step . A window name column may include the name of the active window e.g. as inserted in step . Furthermore an input column input column may also be referred to as an input status column may include an indication of whether user input was received since the most recent check for user input. According to the example Working may appear in cells of the input column where user input was received and Idle may appear in cells of the input column where user input was not received. Different indications may be highlighted or marked in different ways such as in different colors.

A time period column may indicate the duration of the interval i.e. the time period between a first execution of steps to and a second execution of steps to .

A window title column refers to an active window name from the window name column . The window title column may also include rows to identify a total amount of time. An input register column may include the text pasted into the capture worksheet in steps and .

A total time column may provide an idle time sum a working time sum and a total time entry . The idle time sum may be a summation of the intervals during which input was not received when the window name listed in the window title column was the active window. The working time sum may be a summation of the intervals during which input was received when the window name listed in the window title column was the active window. The total time entry may be the sum of the idle time sum and the working time sum .

For rows identifying the total amount of time e.g. the row of the total time entry the input register column may be blank.

The summary depicted in may be referred to as a pivot table. Other means of summarizing raw data stored according to the steps of are also possible.

It may be an advantage that the tracking tool can be implemented using software available on many personal computers such as Microsoft Windows and Microsoft Excel. This may result in reduced costs in comparison to other solutions. In addition it may be possible to reduce user training time since reports of the tracking tool can be viewed using existing spreadsheet applications such as Microsoft Excel.

The tracking tool may enable reporting and data gathering to be easily centralized and may also facilitate the use of standardized utilization metrics. Reports from the tracking tool may also be used to reduce operating costs and may lead to increased productivity better forecasting and improved service delivery. Reports may also provide visibility into variations in process execution among different users and facilitate the sharing of best practices. Monitoring and tracking of application usage may also enhance the understanding of non productive activities and provide better control with less ambiguity.

Similar to shows another exemplary data sheet showing raw data output of the tracking tool. The output depicted in is formatted in a different way in comparison to the output depicted in . In particular combines input or input status e.g. working or idle with a window name.

In some cases the tracking tool will receive a signal to close user at the end of a working period e.g. a day. Upon receipt of the signal the tracking tool may use the formulas depicted in to calculate the report of . The raw data and or the report i.e. tracking data may be sent to a user possible by means of email. After the tracking data has been sent the raw data e.g. as depicted in may be deleted.

According to the example there are 50 users using the tracking tool. Each user may close the tracking tool causing an email to be sent to a server. Each email may include tracking data corresponding to one of the 50 users. The emails may be stored in a folder on the server and the tracking data may be saved to a central location possibly the shared folder referred to in connection with .

The personal computer may further include a hard disk drive for reading from and writing to a hard disk not shown and an external disk drive for reading from or writing to a removable disk . The removable disk may be a magnetic disk for a magnetic disk driver or an optical disk such as a CD ROM for an optical disk drive. The hard disk drive and the external disk drive are connected to the system bus by a hard disk drive interface and an external disk drive interface respectively. The drives and their associated computer readable media provide nonvolatile storage of computer readable instructions data structures program modules and other data for the personal computer . The data structures may include relevant data for the implementation of the method of monitoring and tracking application usage as described above. The relevant data may be organized in a database for example a relational or object database.

Although the exemplary environment described herein employs a hard disk not shown and an external disk it should be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer such as magnetic cassettes flash memory cards digital video disks random access memories read only memories and the like may also be used in the exemplary operating environment.

A number of program modules may be stored on the hard disk external disk ROM or RAM including an operating system not shown one or more application programs other program modules not shown and program data . The application programs may include at least a part of the functionality as depicted in .

A user may enter commands and information as discussed below into the personal computer through input devices such as keyboard and mouse . Other input devices not shown may include a microphone or other sensors joystick game pad scanner or the like. These and other input devices may be connected to the processing unit through a serial port interface that is coupled to the system bus or may be collected by other interfaces such as a parallel port interface game port or a universal serial bus USB . Further information may be printed using printer . The printer and other parallel input output devices may be connected to the processing unit through parallel port interface . A monitor or other type of display device is also connected to the system bus via an interface such as a video input output . In addition to the monitor computing environment may include other peripheral output devices not shown such as speakers or other audible output.

The computing environment may communicate with other electronic devices such as a computer telephone wired or wireless personal digital assistant television or the like. To communicate the computer environment may operate in a networked environment using connections to one or more electronic devices. depicts the computer environment networked with remote computer . The remote computer may be another computing environment such as a server computer a router a network PC a peer device or other common network node and may include many or all of the elements described above relative to the computing environment . The logical connections depicted in include a local area network LAN and a wide area network WAN . Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet and may particularly be encrypted.

When used in a LAN networking environment the computing environment may be connected to the LAN through a network I O . When used in a WAN networking environment the computing environment may include a modem or other means for establishing communications over the WAN . The modem which may be internal or external to computing environment is connected to the system bus via the serial port interface . In a networked environment program modules depicted relative to the computing environment or portions thereof may be stored in a remote memory storage device resident on or accessible to remote computer . Furthermore other data relevant to of monitoring and tracking application usage described above may be resident on or accessible via the remote computer . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the electronic devices may be used.

The above described computing system is only one example of the type of computing system that may be used to implement the method of monitoring and tracking application usage.

