---

title: Generating data models
abstract: Aspects of the subject matter described herein relate to data models. In aspects, data representing a source data model is obtained. Settings for use in generating a destination data model are also obtained. Based on the data and the settings, data representing a destination data model is generated by transforming entities of the source data model into entities of the destination data model according to the settings.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08516011&OS=08516011&RS=08516011
owner: Microsoft Corporation
number: 08516011
owner_city: Redmond
owner_country: US
publication_date: 20101028
---
Most large data projects are built incrementally. For example with an enterprise data warehouse project there may be multiple changes to data models over time. Unfortunately the changes may have a ripple effect on code and consumers who already reference a previous version of the data model.

To deal with this developers sometimes use a data model that is more resilient to changes. In such a data model changes may be made to the data model without breaking existing code. Unfortunately such models may be hard to understand difficult to validate and difficult to update for new changes.

The subject matter claimed herein is not limited to embodiments that solve any disadvantages or that operate only in environments such as those described above. Rather this background is only provided to illustrate one exemplary technology area where some embodiments described herein may be practiced.

Briefly aspects of the subject matter described herein relate to generating data models. In aspects data representing a source data model is obtained. Settings for use in generating a destination data model are also obtained. Based on the data and the settings data representing a destination data model is generated by transforming entities of the source data model into entities of the destination data model according to the settings.

This Summary is provided to briefly identify some aspects of the subject matter that is further described below in the Detailed Description. This Summary is not intended to identify key or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

The phrase subject matter described herein refers to subject matter described in the Detailed Description unless the context clearly indicates otherwise. The term aspects is to be read as at least one aspect. Identifying aspects of the subject matter described in the Detailed Description is not intended to identify key or essential features of the claimed subject matter.

The aspects described above and other aspects of the subject matter described herein are illustrated by way of example and not limited in the accompanying figures in which like reference numerals indicate similar elements and in which 

As used herein the term includes and its variants are to be read as open ended terms that mean includes but is not limited to. The term or is to be read as and or unless the context clearly dictates otherwise. The term based on is to be read as based at least in part on. The terms one embodiment and an embodiment are to be read as at least one embodiment. The term another embodiment is to be read as at least one other embodiment. 

As used herein terms such as a an and the are inclusive of one or more of the indicated item or action. In particular in the claims a reference to an item generally means at least one such item is present and a reference to an action means at least one instance of the action is performed.

Headings are for convenience only information on a given topic may be found outside the section whose heading indicates that topic.

Aspects of the subject matter described herein are operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments or configurations that may be suitable for use with aspects of the subject matter described herein comprise personal computers server computers hand held or laptop devices multiprocessor systems microcontroller based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers personal digital assistants PDAs gaming devices printers appliances including set top media center or other appliances automobile embedded or attached computing devices other mobile devices distributed computing environments that include any of the above systems or devices and the like.

Aspects of the subject matter described herein may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures and so forth which perform particular tasks or implement particular abstract data types. Aspects of the subject matter described herein may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing aspects of the subject matter described herein includes a general purpose computing device in the form of a computer . A computer may include any electronic device that is capable of executing an instruction. Components of the computer may include a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus Peripheral Component Interconnect PCI bus also known as Mezzanine bus Peripheral Component Interconnect Extended PCI X bus Advanced Graphics Port AGP and PCI express PCIe .

The computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by the computer and includes both volatile and nonvolatile media and removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media.

Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile discs DVDs or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer .

Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disc drive that reads from or writes to a removable nonvolatile optical disc such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include magnetic tape cassettes flash memory cards digital versatile discs other optical discs digital video tape solid state RAM solid state ROM and the like. The hard disk drive may be connected to the system bus through the interface and magnetic disk drive and optical disc drive may be connected to the system bus by an interface for removable non volatile memory such as the interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers herein to illustrate that at a minimum they are different copies.

A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner a touch sensitive screen a writing tablet or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB .

A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer may include a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

One or more of the components may be implemented using one or more computers e.g. the computer of and storage devices associated therewith. The various components may be reachable via various networks including intra and inter office networks one or more local area networks wide area networks direct connections virtual connections private networks virtual private networks some combination of the above and the like.

As used herein the term component is to be read to include hardware such as all or a portion of a device a collection of one or more software modules or portions thereof some combination of one or more software modules or portions thereof and one or more devices or portions thereof and the like.

Turning to the first data model may represent a physical or logical data model. A data model may describe entities and the relationships between entities independent of any associated process. A data model may include metadata that provides additional information regarding a data model.

An entity may be defined by its attributes. For example a person may be defined by first name last name date of birth and other attributes. One or more attributes may form a key something that can be used to identify a particular entity. For example first name middle name last name and date of birth may be enough information to form a key that can be used to identify a person.

In some database systems a different integer is assigned to each entity. For example a different employee identifier may be assigned to each employee of an organization. As another example a different position identifier may be assigned to each position of an organization. This identifier may be used as a key to identify a particular entity within a table of a database.

When two or more keys may be used to identify a particular entity one of the keys may be assigned as a primary key while the other keys may be assigned as alternate keys.

Attributes about entities are often represented by tables. A table may have fields that represent the different attributes of an entity. Each row of the table may represent attributes about a single entity. A table may also be used to represent a relationship between two or more entities. For example by having a field for a key of each of the entities a table may represent relationships between the entities.

The position entity includes attributes of a position such as a position in an organization. These attributes may include for example an identifier of a supervisor e.g. the ReportsToPositionID attribute a code of the position an effective date of the position and an expiration date of the position.

The mapping entity may include attributes for associating the position entity with the personnel entity . For example the mapping entity may include an attribute for a key of the personnel entity together with an attribute for a key of the position entity . Having the two attributes allows the mapping entity to describe a relationship between the personnel entity and the position entity .

The line illustrates that the personnel entity is related to the mapping entity . This relationship may be captured by the PersonnelSID attribute of the mapping entity . The PersonnelSID attribute is a foreign key that maps to a corresponding PersonnelSID attribute of the personnel entity .

Likewise the line illustrates that the mapping entity is related to the position entity . This relationship may be captured via the PositionSID attribute of the mapping entity . The PositionSID attribute is a foreign key that maps to a corresponding PositionSID attribute of the position entity .

The line indicates a relationship that the position entity has with itself. The position entity may include a relationship attribute that relates positions. This may be used for example to capture relationship data that indicates that a person may report to another person and may have other people that report to him or her.

The entities may be represented as tables that have fields corresponding to the attributes of the entities. Thus the personnel entity may sometimes be referred to as a personnel table while the mapping entity may sometimes be referred to as a mapping table.

When the data model does not specify how to implement a database the data model is said to be a logical data model. For example if a data model indicates entities and relationships between entities without specifying how to implement a database the data model is said to be a logical data model.

As known to those skilled in the art data may be organized according to various normal forms including first normal form second normal form third normal form fourth normal form and fifth normal form. A logical data model will often be organized according to the third normal form or higher.

The data model illustrated in is an example of a logical data model in part because it does not specify how to implement a database. A physical data model may be derived from the data model of . Such a physical data model may then be used to implement the database.

A database may comprise a relational database an object oriented database a hierarchical database a network database another type of database some combination or extension of the above and the like. Data stored in a database may be organized in tables records objects other data structures and the like. The data stored in a database may be stored in dedicated database files dedicated hard drive partitions HTML files XML files spreadsheets flat files document files configuration files other files and the like. A database may reference a set of data that is read only to the database or may have the ability to read and write to the set of data.

Data in a database may be accessed via a database management system DBMS . A DBMS may comprise one or more programs that control organization storage management and retrieval of data of a database. A DBMS may receive requests to access data in a database and may perform the operations needed to provide this access. Access as used herein may include reading data writing data deleting data updating data a combination including two or more of the above and the like.

In describing aspects of the subject matter described herein for simplicity terminology associated with relational databases is sometimes used herein. Although relational database terminology is sometimes used herein the teachings herein may also be applied to other types of databases including those that have been mentioned previously.

Returning to the second data model may represent a physical data model. For example the second data model may represent a Data Vault or other physical data model.

The data model generator is a component that obtains first data that represents the first data model and generates second data representing the second data model based on the first data and the settings .

To do this the data model generator may locate relationships between tables of the first data model and may then create data that represents tables of the second data model. An exemplary process for doing this for two tables is described below with reference to .

Turning to illustrated are two tables . Table includes a primary key A and two attributes ATA and ATA. Table includes a primary key B a foreign key A and an attribute ATB. The tables and and the relationship between the tables may represent a logical data model.

To create a physical data model from the tables the following actions may be performed. As one action a table is created. The primary key A of the table is placed in the table .

In addition additional maintenance attributes not shown may be included in the table . These additional maintenance attributes may include for example a source system identifier e.g. a number that identifies a data source that represents a particular data source of an organization an inserted date e.g. a system generated date time that indicates when a record was inserted a IsDeletedFlag e.g. an indicator used to mark deleted records a IsSuspectFlag e.g. an indicator used to mark a suspect record such as a child record that has no corresponding parent record. This indicator may be used for example by verification reload logic in parallel data loading. a first inserted date e.g. the date at which a relationship was first established a retirement date e.g. a date at which a relationship was terminated and other maintenance attributes. These maintenance attributes may be used to provide the ability to keep historical data e.g. used for point in time queries change data tracking and the like to version a data schema and the like.

The maintenance attributes that are included in a table may be assigned by table type. For example a user interface may show a grid interface that allows a user to specify the maintenance attributes to include for hub satellite link and other tables generated by a data model generator. These settings may be stored in the settings of .

The other attributes of the table are placed in a separate table sometimes called a satellite table . The primary key A of the table is also placed in the table to associate the two tables together. In addition a date attribute InsertDate may be placed in the primary key of the table to indicate a date at which a relationship was created between the table and the table .

Likewise tables are created. The primary key B of the table is placed in the table . The attribute ATB of the table is placed in the table . The primary key B of the table is also placed in the table to associate the two tables together. In addition a date attribute InsertDate is placed in the primary key of the table to indicate a date at which a relationship was created between the table and the table .

In addition a table is created. The table is a link table that associates the table with the table . The table includes as a primary key the attributes A and B.

The tables and are sometimes referred to as hub tables while the tables and are sometimes referred to as satellite table.

Creating a table may include creating data that represents the table e.g. via the data model generator of creating model data that represents the table e.g. by interfacing with a model manager via the modeling interface of creating file data the represents a table creating a table in a database e.g. via one or more SQL instructions or the like.

Returning to the settings may indicate how the data model generator is to generate the second data model . For example the settings may indicate what to use for a primary key in a hub table. For example referring to the settings may indicate that the primary key A of the table is to be used as the primary key A of the table .

The primary key A of the table may not be ideal to be a primary key of the table . For example if A is not a sequential number such as an integer A may not be ideal to use as the primary key of the table . In that case the settings may further indicate whether A is to be used anyways or whether a new primary key is to be generated for the table . In the latter case a new primary key may be generated for the table and the primary key A of the table may be added as an attribute of the table .

The settings may indicate whether alternate keys if any in the original table are to be inserted into a hub table. For example if the table includes one or more alternate keys the settings may indicate which of the alternate keys are to be placed in the table . For example the settings may indicate to place the first alternate key the second alternate key the last alternate key a set of alternate keys all of the alternate keys or the like into the table during generation.

The data model generator may place any attributes that are not included in the hub table into one or more satellite tables. The data model generator may determine to do this based on metadata associated with a table. For example metadata associated with attributes of the table may indicate one or more satellite tables into which the attributes ATA and ATA are to be placed. For example each attribute of the table may be associated with metadata that indicates a satellite table into which the attribute is to be placed.

If the metadata does not indicate a satellite table into which to put an attribute the attribute may be placed in a single satellite table with other attributes for which metadata does not indicate a satellite table. For example if the attributes ATA and ATA do not have metadata that indicates satellite tables both ATA and ATA may be placed in the satellite table .

In addition configuration settings included in metadata may specify a name of a hub and or satellite table. In generating a hub or satellite table the data model generator may obtain one or more names from the metadata and create hub and satellite tables based on the names.

The settings may specify a suffix to append to a name of a hub table. For example if the table is named Employee a setting may allow a user to indicate a suffix to add to Employee when creating the hub table . Similarly the settings may specify a suffix to append to a name of a satellite table.

Generated tables may be grouped by type. For example the generated tables may include hub tables satellite tables link tables and the like. The settings may specify a naming convention associated with a specific type. A naming convention may then be followed when generating a table of a specified type.

In addition the settings may specify a color associated with a specific type. For example the settings may specify that hub tables are to be displayed in red satellite tables are to be displayed in yellow and link tables are to be displayed in green. Based on these settings the data model generator may generate a data model with colors encoded in the data model or metadata thereof so that when the data model is viewed in a modeling tool the tables are displayed in the encoded colors.

Color settings for the settings may also be specified as metadata associated with a table or data model. In this case the data model generator may encode the colors specified by the metadata or replace the colors with other color settings specified in the settings .

The data model generator may be able to generate SQL code in addition to creating the second data model . The SQL code may abstract a physical data model generated by the data model generator and allow a user to reference objects in the generated model as the objects were defined in the initial source data model. Whether the data model generator generates SQL code may be specified in a setting of the settings .

To create a link table such as the table the data model generator may iterate over the attributes of the table and determine that the table is a child of the table . This is indicated by the foreign key A of the table . Using this data the data model generator may find the parent table . The data model generator may then place keys A and B for the tables and into the link table . If a table includes additional foreign keys these foreign keys may also be placed in the link table .

Turning to the data model generator is illustrated together with a modeling environment a model interface a model extractor a model builder a validator a settings repository and an SQL cod generator .

The modeling environment includes a model manager and a model store . The model manager may include a modeling tool that allows a user to design data models using a graphical user interface. Data regarding the data models may be stored in the model store .

The model store may comprise any storage media capable of storing data. For example the model store may comprise volatile memory such as RAM non volatile memory such as a hard disk other storage media described in conjunction with other storage some combination of the above and the like and may be distributed across multiple devices.

The term data may include anything that may be represented by one or more computer storage elements. Logically data may be represented as a series of 1 s and 0 s in volatile or non volatile memory. In computers that have a non binary storage medium data may be represented according to the capabilities of the storage medium. Data may be organized into different types of data structures including simple data types such as numbers letters and the like hierarchical linked or other related data types data structures that include multiple other data structures or simple data types and the like.

The model interface may interface with the model manager and or the model store . The model interface may provide a set of application programming interfaces APIs that allow the model extractor to obtain data models from the model manager and or the model store . Likewise the model interface may provide a set of APIs that allow the model builder to create a data model using the model manager and or to create a file that represents a data model using the model store .

The model extractor may be operable to obtain data that represents a data model using the model interface . As mentioned above this data may come by interfacing with the model manager and or by obtaining data directly from the model store . The model extractor may also obtain metadata regarding a data model. The model extractor may pass this metadata to the data model generator or may update settings in the settings repository to reflect the metadata obtained in the data model.

A data model that has been obtained by the model extractor may be passed through the validator . The validator may determine whether the data conforms e.g. complies with or is formatted according to a database normal form e.g. third normal form . The validator may generate a report that indicates whether the data model conforms and if not what is wrong with the data model.

The data model generator may retrieve settings from the settings repository . If the model extractor also placed settings corresponding to the metadata found in the data model the data model generator may also obtain these settings from the settings repository . Otherwise the data model generator may obtain the metadata from the model extractor .

The data model generator may generate data that represents a second data model by performing actions including 

1. Creating first hub data that includes a first key and maintenance data of the first hub data. For example referring to data representing the table may be created. The table may be created with maintenance attributes.

2. Creating second hub data that includes a second key and maintenance data of the second hub attributes. For example referring to data representing the table may be created. The table may also be created with maintenance attributes.

3. Creating link data that includes the first key and the second key. For example referring to the table may be created that links the table and based on the keys A and B.

In addition other tables including satellite tables may also be created as previously indicated. The actions above may be performed several times for sets of related tables in the source data model.

The model builder may then use the output data from the data model generator to create a second model. For example the model builder may interface with the model manager using the model interface . For example the model builder may interact with an interface that allows the model builder to access objects of the model manager . Using these objects the model builder may create the second model.

As another example the model builder may create a file that encodes the second model in a manner suitable for reading by the model manager . For example if the syntax that the model manager uses for storing models is known the model builder may create a file that encodes the second model using the syntax.

The structured query language SQL generator may create database instructions for viewing data stored according to the second model in terms of the first model. For example when converting from a logical data model to a physical data model more tables may be created. The SQL generator may create a query that allows the data in the physical data model to be viewed in terms of the logical data model.

In generating a data model the data model generator may obtain e.g. retrieve settings from the settings repository . For example a retrieved setting may indicate whether a key for a table from a source data model is to be used as the key in a table for the destination data model. The data model generator may also be operable to determine whether the key of the source table is ideal e.g. a sequential integer for use as the key in the destination table.

Turning to at block the actions begin. At block data representing a first data model is obtained. For example referring to the data model generator may obtain data representing a first data model from the model extractor . The first data model indicates a relationship between a first table and a second table. Indicating a relationship between a first and a second table does not necessarily mean that the first data model only indicates a relationship between the first and second tables. Indeed the first data model may also indicate relationships between other tables.

The first data model may represent a logical data model a physical data model or some combination of a logical and physical data model.

At block configurable settings for creating a second data model are obtained. For example referring to the data model generator may obtain settings from the settings repository . The data model generator may also obtain metadata from the model provided by the model extractor . Configurable as used here indicates that the settings may be modified by a user process or other entity.

At block second data is generated that represents a second data model. The second data is generated based on the first data and the configurable settings. For example referring to the data model generator may generate second data based on the first data obtained from the model extractor and settings of settings repository . The data model generator may pass this second data to the model builder and the SQL code generator . The data model generator may generate the second data by performing actions including 

1. Creating first hub data that includes a first key and maintenance attributes of the first hub data. The first hub data corresponds to the first table. For example referring to data corresponding to the table may be created. Attributes of the table may include maintenance attributes. Attributes of the table may also include an alternate key of the first table.

2. Creating second hub data that includes a second key and maintenance data of the second hub data. The second hub data corresponds to the second table. For example referring to data corresponding to the table may be created. Attributes of the table may include maintenance attributes.

3. Creating link data that includes the first key and the second key. For example referring to data corresponding to the table may be created.

At block other actions if any may be performed. Other actions may include for example naming one or more of the tables based on the configurable settings. For example settings may indicate a suffix or other naming convention with which to name one or more tables.

Another action that may occur is creating satellite data for the first table. The satellite data includes an attribute of the first table and a key that references the first hub data.

Another action that may occur is creating satellite data for the second table. This satellite data includes an attribute of the second table and a key that references the second hub data.

As can be seen from the foregoing detailed description aspects have been described related to generating data models. While aspects of the subject matter described herein are susceptible to various modifications and alternative constructions certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood however that there is no intention to limit aspects of the claimed subject matter to the specific forms disclosed but on the contrary the intention is to cover all modifications alternative constructions and equivalents falling within the spirit and scope of various aspects of the subject matter described herein.

