---

title: Managing requests based on request groups
abstract: A request management component receives requests to perform an operation. Each of the requests is assigned, based on one or more criteria, to one of multiple different request groups. Based at least in part on execution policies associated with the request groups, determinations are made as to when to submit the requests to one or more recipient. Each of the multiple requests is submitted to one of the recipients when it is determined that the request is to be submitted.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08726284&OS=08726284&RS=08726284
owner: Microsoft Corporation
number: 08726284
owner_city: Redmond
owner_country: US
publication_date: 20100610
---
Situations oftentimes arise in which one computing component sends a request to another computing component such as one device sending a request to another device one program sending a request to another program and so forth. The recipient of the request may then send the request to yet another computing component. Some components however can receive a large number of requests. It can be difficult for components that receive large numbers of requests to manage all the requests they receive while at the same time providing the quality of service that they desire to provide and further to manage these requests while not overloading other components to which they may send the requests.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

In accordance with one or more aspects a request management component receives from a producer component a request to perform an operation. The request is assigned based on one or more criteria to one of multiple different request groups. Based at least in part on an execution policy associated with the request group to which the request is assigned a determination is made as to when to invoke a recipient for the request and the recipient is invoked for the request in accordance with that determination.

Managing requests based on request groups is discussed herein. A request management component operates as an interface between two tiers of components effectively operating as a middle tier between two tiers of components. The request management component receives requests from one tier and assigns each request to a particular request group based on one or more criteria. An execution policy is associated with each of the request groups and the execution policy associated with a particular group indicates one or more conditions to be followed in determining when to invoke an appropriate recipient for requests in that particular group. Such a recipient can be a component in the next tier or alternatively another component in the same tier as the request management component. An invocation module of the request management service invokes the appropriate recipients for the multiple request groups in accordance with an execution strategy and the execution policies associated with the request groups.

Generally in system request management component operates as an interface between producer components in one tier and consumer components in a next tier. Request management component can be for example a library that can be included in or otherwise used by a variety of different services devices modules and so forth. Resource management component receives requests from producer components and manages invoking consumer components for those requests. Invoking a consumer component for a request can include submitting or otherwise providing the request or an indication of the request to the consumer component. Request management component can control accepting of requests from producer components and can also store different requests for different amounts of time before invoking consumer components for the requests. Request management component is thus also referred to as throttling the requests received from producer components and also throttling the requests being submitted to consumer components .

Additionally although request management component is illustrated as an interface in one tier between two other tiers alternatively request management component can be included in the first tier or the last tier in the multi tiered system. For example request management component can be included in the first tier throttling the requests being submitted to consumer components . By way of another example request management component can be included in the last tier throttling the requests received from producer components .

Request management component includes a group based request scheduler . Group based request scheduler uses a variety of different criteria to assign the incoming requests from producer components to one of one or more different groups. Examples of different criteria that scheduler can use in assigning an incoming request to a group are discussed in more detail below. The number of different groups to which scheduler can assign incoming requests is configurable and can depend on for example the various criteria discussed in more detail below that a user or administrator of request management component desires to use. The amount of time that a particular request is stored by request management component before being submitted to a consumer component or being rejected varies based at least in part on the group to which the request is assigned as discussed in more detail below.

Producer component can be any of a variety of different types of components that can submit a request to request management component . For example a producer component can be a computer a television or set top box a cellular or other wireless phone a network of computers or other devices a web application a process running on a computer a thread running on a computer a device or service employing another request management component other types of devices and or programs and so forth. Different producer components can be the same or different types of components. It should also be noted that a producer component can operate as a request management component or a consumer component for a previous tier e.g. a tier 0 .

Consumer component can be any of a variety of different types of components that can receive a request from request management component . For example a consumer component can be a computer a television or set top box a cellular or other wireless phone a network of computers or other devices a web application a process running on a computer a thread running on a computer a device or service employing another request management component other types of devices and or programs and so forth. Different consumer components can be the same or different types of components. Additionally consumer components can be the same and or different types of components than producer components . It should also be noted that a consumer component can operate as a request management component or a producer component for a next tier e.g. a tier 4 .

Request management component can communicate with producer components and consumer components in a variety of different manners. The particular manner in which request management component communicates with producer components and consumer components is dependent at least in part on the manner in which components and are implemented. For example if components and are implemented on different devices then request management component can communicate with producer components and consumer components via a variety of different networks or other couplings such as the Internet a local area network LAN a telephone network an intranet other public and or proprietary networks combinations thereof other communication links and so forth. However if components and are implemented as different programs or processes on the same device then request management component can communicate with producer components and consumer components via messages application programming interface API requests or other inter process communication mechanism supported by an operating system running on the device. Thus invoking a recipient of a request or for a request can be a local invocation e.g. within a program or a remote invocation e.g. over a network between processes on the same device .

In one or more embodiments a request can eventually be submitted to a final tier that is typically a service that holds state or other data and is also referred to herein as a backend service. A consumer component can be a backend service or alternatively one or more additional tiers can exist between consumer component and the backend service. A backend service can provide one or more of a variety of different functionality such as one or more of a social networking service an email service a messaging service an image and or video sharing service a gaming or other entertainment service an information or other resource service and so forth. A backend service maintains various data as part of providing the functionality such as account information for users emails sent and or received by users images uploaded by users and so forth. This data can be returned in response to requests received by the backend service.

System can be any multi tiered system. For example producer components and consumer components can each be different devices or groups of devices coupled to a network such as the Internet. In this example request management component can be implemented on another device coupled to the same network. By way of another example producers components and consumer components can each be different programs or processes running on a computer. In this example request management component can be implemented as another program or process running on the same computer.

Request management module includes a request group assignment module . Request management component receives requests from producer components in a previous tier e.g. producer components of and returns responses to the components from which the requests were received. The types of requests that are received by request management module can vary for different implementations such as based on the particular service that uses request management component . For example the requests can include requests for performing operations e.g. create read update and delete operations on data in a backend service.

Requests are received by request management module and request group assignment module assigns each received request to a particular one of one or more request groups based on one or more criteria discussed in more detail below . The received requests are stored in request queues which stores each request with an indication of the particular one of the multiple request groups to which the request is assigned. If when a request is received the request queues are full e.g. the number of requests in the queue to which the request is assigned is greater than a threshold amount a failure indication is returned as response . The received requests can be stored in queues or other data structures with a separate queue or other structure maintained for each of the different request groups. Alternatively the received requests can be stored in other manners that allow the request group to which a particular request is assigned to be identified.

Request group assignment module can use a variety of different criteria to determine the request group to which a particular request is to be assigned. Request group assignment module can be configured with the particular criteria to use to assign requests to request groups can receive the particular criteria to use to assign requests to request groups from another component or module can receive an administrator or other user input of the particular criteria to use to assign requests to request groups or can otherwise obtain or determine the particular criteria to use to assign requests to request groups. These criteria can be based on characteristics of the producer component from which the request is received characteristics of request management component and or characteristics of the consumer component e.g. a consumer component of to be invoked for the request.

Criteria based on characteristics of the producer component from which the request is received include characteristics of the producer component itself and or characteristics of a user of the producer component. Characteristics of the producer component can be for example an identifier of the producer component a network address e.g. Internet Protocol IP address of the producer component one or more programs or applications running on the producer component a type of application programming interface API that the producer component is calling to send request the total number of requests that the producer component is making e.g. over a particular time duration any combination of the above and so forth. Characteristics of the user of the producer component can be for example the domain of the user of the producer component the user name of the user of the producer component some other identifier of the user a class or quality of service that the user has purchased or otherwise signed up for and so forth.

Characteristics of request management component can be for example a particular device implementing component that receives the requests e.g. the IP address to which the request was sent by the customer device a particular process or thread implementing component that receives the requests and so forth. Characteristics of the consumer component to be invoked for the request include a particular consumer component identified by the request particular functionality requested by the request e.g. a particular type of operation being requested and so forth.

Any number of request groups can be included in request management component . In one or more embodiments the number of request groups that are included in request management component is configurable and can be set by for example a user or administrator of component or a device on which component is implemented. For example the number of request groups can range from one request group for all requests to one request group for each of the different criteria used by request group assignment module . The number of request groups that are included in request management component can also change over time.

Request management module can also reject requests in different situations. For example if terms of a service agreement with a particular producer component may not be satisfied if a request is accepted e.g. as determined by adaptive logic module discussed below then request management module can reject the request . By way of another example if greater than a threshold number of requests have been received from a particular producer component e.g. with a particular time duration or the number of requests in the queue to which request is assigned is greater than a threshold amount then request management module can reject a request from that producer component. Thus request management module can throttle incoming requests preventing request management module from becoming overloaded.

Invocation module obtains requests from request queues and invokes an appropriate recipient for processing of those requests. The appropriate recipient for processing a request can be a consumer component in a next tier e.g. a consumer component of . Alternatively the appropriate recipient for processing a request can be another component or module in the same tier as request management component e.g. another component or module in a service that is implementing request management component another stage in a chain of request queues and invocation modules as discussed in more detail below etc. . Although discussions herein refer to a consumer component in a next tier being invoked for processing the request it is to be appreciated that analogously another component or module in the same tier as request management component can be invoked for processing the request.

Invocation module includes multiple execution policies and an execution strategy . Each request group has an associated execution policy . Invocation module can be configured with execution policies and execution strategy can obtain execution policies and execution strategy from another component or module can receive an administrator or other user input of the execution policies and execution strategy or can otherwise obtain or determine execution policies and execution strategy .

The execution policy associated with a particular request group identifies one or more conditions that invocation module is to take into consideration when determining whether to invoke a recipient for a request from the associated request group. Different execution policies are associated with different request groups and thus the conditions to be taken into consideration when determining whether to invoke a recipient for a request from a particular request group can vary based on the particular request group to which the request is assigned. One or more execution policies can be partly or fully independent of the request groups e.g. a global policy as discussed in more detail below . The conditions facilitate throttling the requests assigned to the associated request group and allow the requests assigned to different request groups to be throttled in different manners. The conditions can be based on characteristics of request management component the request group itself the consumer component that will be invoked for the request and so forth. The conditions can be based on physical resources that are shared e.g. memory central processing unit CPU capacity bandwidth etc. other aspects of the operation of request management module e.g. numbers of users numbers of requests per second etc. and so forth.

For example the conditions in a particular execution policy can be an indication of a maximum number of requests assigned to the request group associated with the particular execution policy that can be executing at any particular time also referred to as an in flight limit . A request is considered to be executing or being processed beginning when an appropriate recipient for processing of the request has been invoked and ending when a response to that request is returned to the producer component as a response or when a response to the request is received by request management component . Thus different maximum numbers of requests can be executing at any particular time for different request groups.

By way of another example the conditions in a particular execution policy can be an indication of a maximum amount of a particular resource that requests assigned to the request group associated with the particular execution policy can be consuming at any particular time. Such resources can be for example random access memory of component storage space of component processor or CPU capacity of component or the consumer component invoked for requests network bandwidth e.g. between the producer component from which the request was received and request management component between request management component and the consumer component invoked for requests etc. a maximum number of requests that can be outstanding e.g. requests for which a particular consumer component has been invoked but for which a response has not yet been received from the consumer component for a particular consumer component at any particular time and so forth.

By way of yet another example the conditions in a particular execution policy can be an indication to fast fail requests rejecting the requests without invoking the next tier for the requests. This allows for quick recovery and eliminating or at least reducing lag resulting from a large number of items being queued for the request group.

Execution strategy defines a strategy or technique that is to be used in determining whether an appropriate recipient for requests assigned to particular request groups is to be invoked at any given time. In one or more embodiments execution strategy defines a weighted round robin scheduling technique that favors particular request groups over other request groups. Alternatively other techniques can be used to favor particular request groups such as weighted fair queuing priority dequeuing and so forth. The particular request groups that are favored can be identified in different manners such as based on agreements that an operator of component has with particular customers classes or qualities of service that particular users have purchased or otherwise signed up for and so forth.

For example a particular customer can have an agreement with the operator of component that up to 70 of bandwidth or capacity e.g. of request management component of a backend service or other consumer component etc. is allocated to requests from that particular customer. Requests received from that particular customer are assigned to a particular request group and execution strategy indicates that up to 70 of the requests e.g. seven out of every ten selected from request queues for which a consumer component is to be invoked are selected from that particular request group. By way of another example particular users may pay for a premium class of service. Requests received from those particular users are assigned to a particular request group and execution strategy indicates that 80 of the requests e.g. eight out of every ten selected from request queues for which a consumer component is to be invoked are selected from that particular request group. By way of yet another example requests from a particular one or more producer components may tend to overload or swamp request management component . Requests received from those particular one or more producer components can be assigned to a particular request group and execution strategy can indicate that 5 of the requests e.g. one out of every twenty selected from request queues for which a consumer component is to be invoked are selected from that particular request group. Furthermore if greater than a threshold number of requests are already in the request queues for that particular request group then subsequent requests can be rejected by request management component until the number of requests in the request queues for that particular request group is below the threshold number.

Invocation module selects requests assigned to different request groups and invokes an appropriate recipient for processing of the request. In selecting requests for which a recipient is to be invoked invocation module adheres to the execution policies associated with the request groups as well as execution strategy . Invocation module can also adhere to one or more additional policies that are referred to as global policies and apply for all requests regardless of the request group to which the requests are assigned. Such global policies can include a variety of different conditions analogous to execution policies . For example a global policy can be an indication of a global maximum number of requests also referred to as a global in flight limit that can be executing at any particular time regardless of the request group to which those requests are assigned. By way of another example a global policy can be an indication of a maximum number of requests that can be outstanding for a particular consumer component at any particular time.

Requests for which a consumer component is invoked by invocation module are illustrated as requests . The particular consumer component that is invoked can be identified in different manners such as being inherent in the request received from the producer component e.g. an indication of the consumer component being included in request an API associated with a particular consumer component being invoked to submit request to request management component etc. being identified by request management component e.g. based on the content of the request based on the request group to which the request is assigned etc. and so forth.

The consumer component invoked for the request processes the request and returns data and or information to request management component as a response . The processing of a request can refer to a variety of different actions such as saving or retrieving data invoking a component in a next tier and so forth. Request management component receives this data and or information in response and returns the data and or information as a response to the producer component from which the request was received. After response has been returned to request management component the request is deemed as being completed and no longer executing or processing by request management component . A request can be removed from request queues when it is no longer executing or processing e.g. when a response has been returned for the request or alternatively at other times e.g. when a recipient is invoked for the request .

Thus it can be seen that request management component controls or manages the invoking of different consumer components for received requests. This control or management can also be viewed as throttling of requests on both an incoming and outgoing basis. Incoming requests are throttled by rejecting requests as discussed above or alternatively by a first stage of a chain of request queues and invocation modules as discussed in more detail below . Outgoing requests are throttled e.g. so as not to overload a particular consumer component because invocation module can take into account how many requests have already been submitted to each consumer component in determining whether to invoke a consumer component for another request.

Request management component also optionally includes statistics collection management module . Statistics collection management module collects various statistics regarding the processing of requests by request management component and or the amount of time taken to respond to requests. For example statistics collection management module can determine for each request received by request management component how long completion of the request took e.g. from the time a request was received by component from a particular producer component to the time a response to that request was returned to that particular producer component . These determinations can then be used by statistics collection management module to determine various statistics regarding the completion of requests by request management component such as an average time to complete requests a minimum time to complete a request a maximum time to complete a request a standard deviation on the time it takes to complete a request and so forth. These statistics can be determined for each request group individually and or across multiple request groups .

Statistics collection management module also includes an adaptive logic module . Adaptive logic module uses the statistics determined by module to adapt or change the invoking of recipients for requests by invocation module . This adaptation or changing can be performed for example by adaptive logic module modifying execution strategy and or one or more execution policies . Module can adapt or change the invoking of recipients for requests by module for a variety of different reasons such as to conform to agreements that an operator of component has with particular customers to avoid overloading or overburdening one or more consumer components and so forth.

In one or more embodiments for each agreement that an operator of component has with a particular customer e.g. regarding quality of service to be provided to that particular customer the requests for that particular customer are assigned to a particular group as discussed above. Adaptive logic module monitors the quality of service for that particular group e.g. the average time to complete requests assigned to that particular group to verify that the terms of the agreement are being satisfied. Module is configured with or otherwise has access to a time e.g. average time that is to be taken to complete requests in accordance with the terms of the agreement. If the statistics determined by module indicate that one or more requests that have been received by component but not yet submitted to a recipient will not satisfy the terms of the agreement e.g. will not be completed within the agreed upon time then module indicates to reject the request. This indication can be provided to for example request management module which returns a response to the producer component from which the rejected request was received that the request is being rejected. This allows the producer component to for example retry the request at a later time. Additionally in situations in which requests are routed to e.g. load balanced to different instances of component rejecting the request allows the producer component to resubmit the request and optionally have the request routed to a different instance of component than the instance of component that rejected the request.

Additionally in one or more embodiments for each agreement that an operator of component has with a particular customer the requests for that particular customer are assigned to a particular group as discussed above. Adaptive logic module monitors the quality of service being provided to requests assigned to that particular group to verify that the terms of the agreement are being satisfied module is configured with or otherwise has access to these terms . The quality of service being provided to requests assigned to a particular group can be determined in different manners such as the average time to complete requests assigned to that particular group errors when invoking recipients for requests assigned to that particular group and so forth. If the statistics determined by module indicate that the quality of service does not satisfy the terms of the agreement then module lowers the global in flight limit used by invocation module . Alternatively if the statistics determined by module indicate that resource usage exceeds a threshold e.g. memory usage by component exceeds a threshold amount a number of threads being executed by component exceeds a threshold amount and so forth then module lowers the global in flight limit used by invocation module . Lowering the global in flight limit reduces the number of requests that component can be executing at any given time thereby freeing resources so that the requests that are being executed can be completed more quickly and or reducing the resources used to execute such requests .

Similarly if the statistics determined by module indicate that beginning executing of requests is being delayed due to the global in flight limit but that the terms of the agreements the operator has with particular customers are being satisfied and resource usage does not exceed a threshold then module raises the global in flight limit used by invocation module . Raising the global in flight limit increases the number of requests that component can be executing at any given time thereby allowing the requests to be completed more quickly.

Request management component also optionally includes distributed coordination module . Request management component can be implemented for example using multiple instances of the same software running behind a load balancer that can be implemented in software firmware hardware or combinations thereof. The load balancer can route requests to any of these instances of request management component . Thus subsequent requests from the same producer component can be received and processed by different instances of request management component . In such situations it may be desirable for one or more determinations to be made based on the multiple instances of component as a whole rather than based on individual instances of component . For example each of the multiple instances of component can include a request management module request queues an invocation module a statistics collection management module and a distributed coordination module . Determinations such as whether terms of an agreement with a particular customer are being satisfied can be made across the multiple instances of component as a whole.

To make such determinations across the multiple instances of component as a whole the distributed coordination modules in the various instances of component communicate coordination data with one another. The particular coordination data that is communicated can vary based on the determinations being made. For example the coordination data that is communicated can include various statistics regarding the quality of service being provided by the individual instances of component such as an average time to complete requests a minimum time to complete a request a maximum time to complete a request a standard deviation on the time it takes to complete a request and so forth. By way of another example the coordination data that is communicated can include current global in flight limits being used by the multiple instances of component a number of requests that have been submitted to each of one or more consumer components in a next tier at any given time a number of requests that are in flight for each of request groups at any given time and so forth.

As discussed above different execution policies are associated with different request groups and execution strategy can cause invocation module to treat different request groups differently when selecting requests for which a recipient is to be invoked. Execution policies and execution strategy can also be changed or adapted by adaptive logic module as discussed above. Furthermore as coordination data can be communicated among the multiple instances of component execution policies and execution strategy can be adapted or changed on a per request group basis based on information obtained from the various instances of component . For example if a particular customer agreement indicates that 70 of bandwidth or capacity e.g. of request management component of a backend service or other consumer component etc. is to be allocated to requests from that particular customer and if coordination data indicates that 70 of the bandwidth or capacity is not being allocated to requests from that particular customer then the execution strategies of one or more instances of request management component can be changed to indicate that 80 or 90 of the requests selected from request queues for submission to a consumer component are selected from the request group to which requests received from that particular customer are assigned.

Additionally in the example of one set of request queues and one invocation module are illustrated. Alternatively multiple sets of request queues and invocation modules can be chained together. A chain can include two or more stages and each stage in the chain includes request queues and an invocation module . The first stage in the chain receives requests from producer components and the last stage in the chain selects requests for which the consumer component is to be invoked. One or more intermediary stages between the first and last stages in the chain each select requests from the previous stage in the chain and invoke the next stage in the chain for the requests.

At each stage in the chain requests are assigned to request groups and different assignments can be made at different stages of the chain based on different criteria. From one stage the next stage or to the consumer component in the case of the last stage is invoked based on the invocation module the execution policies and the execution strategy for that stage. For example a chain can have three stages. A first stage of the chain can assign requests to request groups based on APIs invoked by the producer components in sending the requests to component and can invoke a second stage for those requests based on particular execution policies and execution strategy. The second stage of the chain can assign requests to request groups based on a class or quality of service that the users of the producer components have purchased or otherwise signed up for and can invoke a third stage for those requests based on different execution policies and execution strategy. The third and last stage of the chain can assign requests to request groups based on IP addresses of the producer components and can invoke the consumer component for those requests based on further different execution policies and execution strategy.

This chaining can also be used to provide throttling of both incoming requests and outgoing requests. For example a first stage of the chain can assign requests to groups using criteria based on characteristics of the producer component from which the request is received. The request management module can reject a request that would be assigned to a particular group if a threshold number of requests are already in the queue for that group. This first stage provides throttling of incoming requests e.g. the second stage of the chain is invoked for requests based on the execution policies and execution strategy associated with the request groups in the first stage . The second stage of the chain can assign requests to groups using criteria based on characteristics of the consumer component to be invoked for the request. This second stage provides throttling of outgoing requests e.g. the consumer component is invoked for requests based on the execution policies and execution strategy associated with the request groups in the second stage .

In process requests are received from producer components act . Multiple requests can be received from each of one or more producer components as discussed above.

Each of the received requests is assigned to one of one or more request groups based on one or more criteria act . A variety of different criteria can be used to assign a request to a request group as discussed above. The number of different request groups to which received requests can be assigned is configurable as discussed above.

For each request a determination is made as to when to invoke a recipient for the request act . This determination is made based at least in part on an execution policy and an execution strategy as discussed above.

A recipient for a request is invoked when it is determined in act to be time to invoke a recipient for that request act . Invoking the recipient can include submitting the request to or otherwise providing the request or an indication of the request to the recipient. The recipient for the request can be a variety of different recipients such as one of multiple different consumer components a next stage of a chain of request queues and invocation modules another component in a same tier as the request management component carrying out process and so forth.

Statistics regarding the processing and or completion of requests are collected act . A variety of different statistics can be collected as discussed above.

Additionally statistics data is communicated with other request management components act . This communication of statistics data includes sending statistics data collected in act to other request management components as well as receiving from the other request management components statistics data collected by those other request management components as discussed above. This communication of statistics data can be done as for example a background or other lower priority operation. Thus the communication of statistics data has a small if any impact on the performance of the request management components.

The invoking of recipients for subsequent requests is adapted or changed based on the statistics data act . This statistics data includes the collected statistics in act as well as statistics data received from other request management components in act . This adaptation or change in the invoking of recipients for subsequent requests can be performed in a variety of different manners as discussed above. Process then returns to act where additional requests are received from producer components .

In one or more embodiments one or more of the acts in process are not performed. For example acts and may not be performed in one or more embodiments.

Computing device includes one or more processors or processing units one or more computer readable media which can include one or more memory and or storage components one or more input output I O devices and a bus that allows the various components and devices to communicate with one another. Computer readable media and or one or more I O devices can be included as part of or alternatively may be coupled to computing device . Bus represents one or more of several types of bus structures including a memory bus or memory controller a peripheral bus an accelerated graphics port a processor or local bus and so forth using a variety of different bus architectures. Bus can include wired and or wireless buses.

Memory storage component represents one or more computer storage media. Component can include volatile media such as random access memory RAM and or nonvolatile media such as read only memory ROM Flash memory optical disks magnetic disks and so forth . Component can include fixed media e.g. RAM ROM a fixed hard drive etc. as well as removable media e.g. a Flash memory drive a removable hard drive an optical disk and so forth .

The techniques discussed herein can be implemented in software with instructions being executed by one or more processing units . It is to be appreciated that different instructions can be stored in different components of computing device such as in a processing unit in various cache memories of a processing unit in other cache memories of device not shown on other computer readable media and so forth. Additionally it is to be appreciated that the location where instructions are stored in computing device can change over time.

One or more input output devices allow a user to enter commands and information to computing device and also allows information to be presented to the user and or other components or devices. Examples of input devices include a keyboard a cursor control device e.g. a mouse a microphone a scanner and so forth. Examples of output devices include a display device e.g. a monitor or projector speakers a printer a network card and so forth.

Various techniques may be described herein in the general context of software or program modules. Generally software includes routines programs objects components data structures and so forth that perform particular tasks or implement particular abstract data types. An implementation of these modules and techniques may be stored on or transmitted across some form of computer readable media. Computer readable media can be any available medium or media that can be accessed by a computing device. By way of example and not limitation computer readable media may comprise computer storage media and communications media. 

 Computer storage media include volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media include but are not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by a computer.

 Communication media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as carrier wave or other transport mechanism. Communication media also include any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media include wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above are also included within the scope of computer readable media.

Generally any of the functions or techniques described herein can be implemented using software firmware hardware e.g. fixed logic circuitry manual processing or a combination of these implementations. The terms module and component as used herein generally represent software firmware hardware or combinations thereof. In the case of a software implementation the module or component represents program code that performs specified tasks when executed on a processor e.g. CPU or CPUs . The program code can be stored in one or more computer readable memory devices further description of which may be found with reference to . The features of the managing requests based on request groups techniques described herein are platform independent meaning that the techniques can be implemented on a variety of commercial computing platforms having a variety of processors.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

