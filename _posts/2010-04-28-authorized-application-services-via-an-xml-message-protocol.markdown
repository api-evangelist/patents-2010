---

title: Authorized application services via an XML message protocol
abstract: Disclosed are systems and methods to provide a persistent authorized server address space (ASAS). The ASAS can host components from product suites that are not able to execute in an authorized state. To host other product's components, the ASAS receives “messages” from the unauthorized product components in the form of a generic eXtensible Markup Language (XML) protocol. These messages may request product initialization/administration or performance of a function by the ASAS on behalf of the requesting product. Security constraints are also provided to ensure system and data integrity. Further, the ASAS is not tightly coupled to any requesting product so that flexibility of product update or update to the ASAS itself may not be unnecessarily constrained.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08353013&OS=08353013&RS=08353013
owner: BMC Software, Inc.
number: 08353013
owner_city: Houston
owner_country: US
publication_date: 20100428
---
This disclosure relates generally to a method and system for a persistent authorized server address space to host components from product suites that are not able to execute in an authorized state. More particularly but not by way of limitation this disclosure relates to a method and system to dynamically initialize products and to host authorized application services from non authorized requestors e.g. products or product components in a mainframe computer via a generic eXtensible Markup Language XML protocol and a persistent authorized server address space ASAS .

Resource Access Control Facility RACF is a security product for the mainframe computing environment. RACF is a registered trademark of International Business Systems IBM of Armonk N.Y. . RACF provides functions allowing a system administrator to 

Independent Software Vendors ISV s have historically developed persistent service address spaces that may interface with RACF and can host authorized functions for those components within their product suite that are not able to execute in an authorized state. However the coding testing implementation architecture and distribution of hosted functions components has been tightly coupled to the coding testing implementation architecture and distribution of a corresponding release of a persistent service address space function. This has led to the propagation of many service address spaces within a given customer environment thus adding complexity to the customer environment. This complexity may be difficult for a customer to manage in a production environment. Additionally software suppliers must have the ability to provide software updates in a controlled and efficient manner.

To overcome these and other limitations of the prior art it is desirable to improve the implementation of a service address space hosting and authorization function e.g. an ASAS . Further more flexibility in the software development process and installation management of components utilizing the disclosed embodiments may also be achieved.

In one embodiment a method of operating a computer system to provide authorized server address space ASAS functions is disclosed. These functions are at the request of one or more unauthorized requestors executing on a computer system. In this embodiment the method comprises instantiation of an ASAS on one or more processors of a mainframe environment. The ASAS is configured to service requests from unauthorized requestors to load a product. The request comprises a product definition document defining attributes of a computer software product and defining one or more components comprising the computer software product. The ASAS can parse the product definition document to create a unique identifier for an instance of the computer software product. The ASAS can also request creation of an address space for the computer software product.

In another embodiment a method of operating a computer system to provide authorized server address space ASAS functions is disclosed. In this embodiment the unauthorized requestors provide a request definition document to perform a unit of work. The request for a unit of work comprises a request definition document defining attributes of a computer software product and defining one or more authorized function requests. The ASAS can parse the request definition document to determine a unique identifier for an instance of the computer software product and initiate the authorized function on behalf of the unauthorized requestor. Optionally a status may be returned to the requestor to indicate the status of the request or the function defined in the request.

To overcome the limitations and operational issues described above a comprehensive system and method whereby an adaptable service address space can host authorized service functions for multiple product components possibly on different release update schedules is disclosed. Further to overcome code ownership source management conflicts and software maintenance scheduling complexities disclosed embodiments of the adaptable service address space have no knowledge of or dependencies on the application service functions being hosted. In other words the adaptable service address space is not tightly coupled to hosted application service functions.

The following description is presented to enable any person skilled in the art to make and use the invention as claimed and is provided in the context of the particular examples discussed below variations of which will be readily apparent to those skilled in the art. In the interest of clarity not all features of an actual implementation are described in this specification. It will of course be appreciated that in the development of any such actual implementation as in any software development project numerous programming decisions must be made to achieve the developers specific goals e.g. compliance with system and business related constraints and that these goals will vary from one implementation to another. It will be appreciated that such development effort might be complex and time consuming but would nevertheless be a routine undertaking of system level program development for those of ordinary skill having the benefit of this disclosure.

Example embodiments are directed to application initialization and providing authorized application services via an XML message protocol. It will be understood that the disclosed techniques may also be used for other authorized services. For example Event Management and operator command processing services are authorized services that could be useful to an unauthorized caller. By utilizing the disclosed embodiments an unauthorized database utility may be able to determine the status of a Database Management System DBMS or to monitor for changes in the status of a DBMS e.g. started or stopped . These types of services may be requested of an ASAS by an unauthorized caller providing an XML document via an API to the ASAS. Many other authorized services performed by an ASAS may also be made available to unauthorized callers via disclosed embodiments.

Referring to a block diagram shows an overall memory area divided into separate memory areas e.g. address spaces ASs within a mainframe environment and processes associated with those memory areas. In a mainframe environment one or more processes may be associated with a single AS. Also ASs and or processes may be authorized to perform certain functions not available to an unauthorized AS process. Memory area shows a plurality of unauthorized client ASs and associated processes and a single authorized persistent server AS and its associated authorized process . For simplicity only a single authorized AS is shown however a mainframe environment may also have a plurality of independent or inter related authorized ASs and or processes.

Also shown in and explained in more detail below communication paths can exist between processes within a mainframe environment. Those of ordinary skill in the art recognize that pluralities of mechanisms exist for communication between processes and therefore the details of a specific communication mechanism are not discussed here. Note however communication paths may represent either one way or bidirectional communication between processes.

As used herein an initiated process is an address space created by the ASAS as the result of processing a provided product definition. The creation of one address space by another is sometimes referred to as spawning. The ASAS will invoke the z OS ASCRE address space create service to create the address space and the ASAS may also create a message queue for the created address space in order to provide a communication mechanism. Because of operating system security constraints the z OS ASCRE service can only be invoked by an authorized program. The disclosed embodiments of an ASAS provide the ability for an unauthorized program to use this service. Further because of operating system security constraints the ASAS and the functions hosted by the ASAS may be ultimately under the control of RACF.

To deploy a program in an authorized manner an XML language protocol may be used to allow a user to uniquely define a product and request that product s objects be dynamically initialized into an address space by an authorized service address space ASAS . The disclosed implementation may allow for the ASAS to function in an application agnostic manner i.e. the ASAS infrastructure code has no knowledge of or dependencies on specific application service functions that it may host . In other words the ASAS is not tightly coupled to any specific product or product release for which the ASAS hosts functions.

The disclosed ASAS can provide a non authorized Application Programming Interface API enabling communication of XML requests to the ASAS s internal request handler tasks. The non authorized caller can invoke this common API i.e. API is shared between authorized ASs and unauthorized ASs to send to the ASAS a Product Definition XML Document PDXD that contains a definition of all the components e.g. objects which make up a corresponding product. The PDXD can uniquely identify a product through a combination of required and optional XML elements. For example a 3 byte code a 7 byte SMP E FMID value and a 16 byte product instance identifier PIID . Each of these elements is required when a uniqueness identity may not be obtained without their inclusion. For example the PIID is only required to allow multiple instances of the same logical product e.g. different maintenance levels with same 3 byte code and 7 byte SMP E FMID value to be concurrently initialized into the ASAS. Also in this example the 3 byte code reflects a software vendor s identification mechanism to identify products and the 7 byte code represents a composite of information relative to installed products maintained at least in part by components of the IBM operating system. SMP E refers to System Modification Program Extend and is an installation maintenance product and process supplied by IBM. FMID is an acronym for Function Modification Identifier which is a unique name used to identify a function installed using the IBM SMP E program product down to a version release number and a maintenance level.

Referring now to process begins with an unauthorized user communicating with an ASAS using an unauthorized API. The API can retrieve the requesting user s Resource Access Control Facility RACF user id from control blocks within the requesting user s address space. The API can then create a control block containing the retrieved user id as well as the XML document provided by the user and other information. In the case of product initialization the ASAS receives the PDXD at block . A sample PDXD is shown in .

Continuing with and referring also to the ASAS on the same system as the original caller initially receives the XML and can route the request to any remote systems based on the optional target XML element i.e. . Each ASAS receiving an command can parse the PDXD and may perform an external security check based on attributes associated with the request as shown at block . Also the ASAS may parse the incoming XML document to ensure it is well formed XML validate the original caller is authorized by a system administrator to execute the command serialize the section of the command instantiate a new product object and call the initialize method of the product object passing the request. At block the ASAS creates a unique product object. In a preferred embodiment the unique product object is created using a combination of FMID and optional PIID to ensure proper uniqueness and tracking ability. At block ASAS can identify any enclave definitions and call the Workload Manager WLM component of z OS to create as appropriate. Next all product load libraries as identified by the XML element can be dynamically allocated concatenated and opened for shared access by the ASAS as shown at block . Block represents an instantiation of product component objects. The individual product components that comprise a product definition include z OS address space Task Control Block TCB unit of work Service Request Block SRB unit of work and non persistent function call executing under the TCB of a service address space request handler task . At successful completion of block all the programs for each of the product components excluding the component which is started in another address space are loaded and anchored in each of the product component objects. At block upon successful completion of each step of process the product object is put into an enabled state and is available to receive product related requests. A response may be sent back to the original caller to indicate the success failure of the request.

A preferred embodiment of an ASAS should also take into account different scenarios of program management. Task Control Blocks TCBs and Service Request Blocks SRBs are possible units of work in z OS. A z OS address space is composed of a number of TCBs. Each TCB represents a program being executed. One program may invoke another in such a way as to create a new TCB. This process is called attaching a program because it uses the z OS ATTACH service. For the purposes of this example a program may be attached as a job step or more commonly as a non job step. Attaching a program as a job step can only be done by an authorized program and has special considerations and ramifications.

Each job step task has control blocks representing programs invoked using services other than ATTACH. These control blocks can be thought of as representing a module directory. If a main program were to bring into memory another program A a control block representing program A would be created by z OS describing the program s length memory address and other attributes. One of the attributes may be the re entrant attribute which indicates program A can be executed by multiple callers simultaneously and requiring only one copy in the job step.

For one example of program management consider program A has the re entrant attribute and was brought into memory by program MAIN1 using the LOAD service. If MAIN1 was ATTACHed as a job step task the TCB representing program MAIN1 maps program A. Next MAIN1 issues an ATTACH for program SUB1 as a non job step task and SUB1 subsequently issues a LOAD for program A. The LOAD service will determine that the task representing SUB1 is a non job step task and will scan the ancestor tasks until it finds a job step task. The TCB for MAIN1 will be found and the module directory of this TCB will be used to locate program A. Because program A has the re entrant attribute the LOAD service simply returns the current address of that program. A second copy is not required.

However had MAIN1 ATTACHed SUB1 as a job step task the LOAD service would have used SUB1 s TCB and correspondingly SUB1 s module directory to locate program A. Program A would not have been found in SUB1 s module directory and a second copy of program A would have been loaded.

Because of re entrant modules special care must be taken when considering multiple versions of incompatible libraries containing re entrant modules being loaded at the same time in a single mainframe environment. For example if product P1 provides an XML document referencing LOADLIBs at one version product P2 provides an XML document referencing LOADLIBs at a different incompatible version and each set of LOADLIBs contains a non compatible re entrant module A then if the ATTACH is performed as a non job step task only one copy of module A would be loaded and likely cause problems for either P1 or P2. Thus in order to support like named re entrant modules in a single address space at different and incompatible releases all tasks could be ATTACHed as job step TCBs to ensure that each task starts with an empty module directory. In this manner two incompatible versions of a like named re entrant module will not collide between two products referencing the like named re entrant module.

Referring now to shows a flowchart representing an example request by a user process to an ASAS for performance of a hosted function according to one disclosed embodiment. shows an example of a portion of an XML document corresponding to flowchart . Note the portion shown corresponds to the portion of but in this case is a request.

Beginning at block an unauthorized user supplies an XML send request to the ASAS. The XML request contains elements that identify the product itself and the specific product component instance. The ASAS receives the request at block . Next the ASAS parses the XML document to determine the type of received command and may perform an external security check block . After security checking requirements are satisfied the Product Object Instance to receive the SEND command is identified uniquely via product code FMID and optionally a PIID block . Next at block the ASAS puts the message identified in the XML file on the input queue of the product object instance that is the target of the SEND command. Recall the same system as the original caller initially receives the XML and can route the request to any remote systems based on the optional specification. At block the ASAS sends a response to the request indicating that the message was delivered successfully.

After block control flows to both of blocks and . At block the ASAS processes a response from the Product Object performing work based on the SEND request in the XML document . The ASAS puts that response onto the shared message queue at block . Also after block the unauthorized user receives a response from the SEND request as indicated at block . The caller can check the return value from the API SEND request to ensure the message was routed to the target product component successfully. If the request was sent successfully then the caller can use the returned response identification token to issue a non authorized API READ function block in order to receive a response via the shared message queue from the actual work performed by the product component instance i.e. work associated with the actual message that was sent via the XML document .

To summarize elements of both process and process the non authorized user communicates to the ASAS using a non authorized API. This API can retrieve the user s Resource Access Control Facility RACF user id from control blocks within the user s address space. The API can then create a control block containing this user id as well as the XML text provided by the user and other information. The newly created control block can then be passed on to the ASAS as a message for processing. Recall RACF is the z OS Security Server s documented interface for security calls. RACF uses resource rules which are composed of resource names and permissions. When the ASAS receives a message it can determine the function to be performed and calls the z OS Security Server via the RACF interface passing it the non authorized user s RACF user id as well as a resource name derived from the function to be performed. The RACF call can then return a code indicating if the site security administrator has defined a rule for this resource and if so whether or not this specific user is allowed to perform the desired function.

In an example embodiment the site security administrator has the flexibility to not define any resource rules and still allow all users to perform all functions. The administrator may code a parameter in the ASAS s security options file to tell the application to process all RACF calls that indicate the absence of a rule as being successful. Should the administrator wish to restrict execution of certain functions the administrator may code this parameter to treat such RACF calls as failures and then requests which have no defined rules will be denied. Thus the administrator has the flexibility to easily allow all hosted functions or to create RACF definitions to allow specific users or groups of users to perform one or more of the supported functions.

RACF resource names are essentially strings of characters that logically define a resource. Different sites may have different naming standards. In a preferred embodiment a great deal of flexibility in the naming of the pertinent resources may be provided by providing symbolic substitution of various qualifiers.

The advantages of the disclosed embodiments easily recognizable to one of ordinary skill in the art given the benefit of this disclosure include but are not limited to 

Referring to illustrative general purpose computer system programmed to perform methods in accordance with the disclosed embodiments e.g. those illustrated in or includes programmable control device display unit input device and external storage units e.g. tape or direct access storage device DASD . Programmable control device comprises input output I O unit processing unit memory and network interface either included in or communicatively coupled to programmable control device . Display represents both an output display unit and a touch screen input unit with optionally one or more input devices such as a mouse or keyboard. External storage unit further represents any form of non volatile storage including but not limited to all forms of optical and magnetic storage elements including solid state storage. Program control device may be included in a computing device and be programmed to perform methods in accordance with this disclosure e.g. those illustrated in . Processing unit may include any programmable controller device including for example processors of an IBM mainframe such as a quad core z mainframe microprocessor . Alternatively in non mainframe systems examples of processing unit include the Intel Core Pentium and Celeron processor families from Intel and the Cortex and ARM processor families from ARM. INTEL CORE PENTIUM and CELERON are registered trademarks of the Intel Corporation. CORTEX is a registered trademark of the ARM Limited Corporation. ARM is a registered trademark of the ARM Limited Company. Memory may include one or more memory modules and comprise random access memory RAM read only memory ROM programmable read only memory PROM programmable read write memory and solid state memory. One of ordinary skill in the art will also recognize that PU typically includes some internal memory including for example cache memory.

Various changes in the materials components circuit elements as well as in the details of the illustrated operational methods are possible without departing from the scope of the following claims. For instance acts in accordance with or may be performed by a programmable control device executing instructions organized into one or more modules comprised of computer program code or instructions . A programmable control device may be a single computer processor e.g. PU a plurality of computer processors coupled by a communications link or one or more special purpose processors e.g. a digital signal processor DSP . Such a programmable control device may be one element in a larger data processing system such as general purpose computer system . Storage media as embodied in storage devices such as and as well as memory internal to PU suitable for tangibly embodying computer program instructions include but are not limited to magnetic disks fixed floppy and removable and tape optical media such as CD ROMs and digital video disks DVDs and semiconductor memory devices such as Electrically Programmable Read Only Memory EPROM Electrically Erasable Programmable Read Only Memory EEPROM Programmable Gate Arrays and flash devices.

In addition computer system could be one of a multiplicity of computer systems coupled through a computer network. As illustrated in computer network comprises network attached resources coupled to host computer systems e.g. of the type illustrated in . Logical Partitions See and communicate through network which could be one or more intranets one or more extranets e.g. the Internet or a combination of both intra and extranets. In network computer system for example could include memory for retaining program modules for performing any of the methods illustrated in or .

Finally while methods in accordance with have been discussed in the context of embodiments targeted for the z OS operating system the disclosed embodiments are not so limited. It will also be recognized that each implementation of an operating system may apply its own unique terms to the concepts discussed here. Accordingly the preceding descriptions and the following claims are not limited in scope to implementations of the z OS operating system.

