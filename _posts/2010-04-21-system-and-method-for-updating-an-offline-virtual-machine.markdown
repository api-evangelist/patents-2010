---

title: System and method for updating an offline virtual machine
abstract: A system and method for updating an offline virtual machine are disclosed. The method comprises mounting an image of an offline virtual machine on a host operating system. The method further comprises generating drive-mapping information for the mounted virtual machine image and loading registry information of the mounted virtual machine image onto the host operating system using the drive-mapping information. An update to be applied to the offline virtual machine is determined based on the registry information and a patch bundle is retrieved based on the determination, wherein the patch bundle comprises registry update instructions, file system update instructions, and a patch file. The patch bundle is executed on the host operating system to update the offline virtual machine.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08839228&OS=08839228&RS=08839228
owner: CA, Inc.
number: 08839228
owner_city: Islandia
owner_country: US
publication_date: 20100421
---
The present application relates generally to computer systems and more specifically to virtual machines.

The present application relates generally to computer systems and more specifically to virtual machines.

A virtual machine VM is an environment usually a program or operating system which does not physically exist but is present within another environment. In this context the VM is called a guest while the environment it runs within is called a host. One host environment can often run multiple isolated VMs at once. Furthermore the VM is a virtualized representation of physical computer hardware such as a processor memory or an input output device. The VM may map the virtualized component s interface and visible resources onto the interface and resources of the underlying real hardware. Consequently the real hardware may appear as a different virtual system or even as multiple virtual systems. As VMs are isolated from each other they prevent undesirable interactions or outright conflicts between applications. Furthermore VMs are separated from the physical resources they use allowing the host environment to dynamically assign resources among the VMs. Virtual machines allow flexible and efficient use of hardware resources. By increasing hardware utilization and decreasing capital and operational costs virtual machines have become an integral part of computing environments.

The present disclosure is directed to a system and method for updating offline virtual machines. According to particular embodiments a method for updating offline machines comprises mounting an image of an offline virtual machine on a host operating system. The method further comprises generating drive mapping information for the mounted virtual machine image and loading registry information of the mounted virtual machine image onto the host operating system using the drive mapping information. An update to be applied to the offline virtual machine is determined based on the registry information and a patch bundle is retrieved based on the determination wherein the patch bundle comprises registry update instructions file system update instructions and a patch file. The patch bundle is executed on the host operating system to update the offline virtual machine.

Another embodiment of the application describes a system for updating an offline virtual machine. The system comprises a processor controlled server the server comprising a memory and a virtual machine image mount engine. The virtual machine image mount engine in operable to mount an image of an offline virtual machine on a host operating system and generate drive mapping information. The server further comprises a virtual machine image rendering engine that is operable to load registry information of the mounted virtual machine image onto the host operating system using the drive mapping information. The server further comprises a patch manager that is operable to determine an update to be applied to the virtual machine by examining the registry information and retrieve a patch bundle based on the determination. The patch bundle comprises virtual machine update information patch files and registry update instructions and file system update instructions. The server further comprises an offline virtual machine image update engine that is operable to execute the patch bundle and update the offline virtual machine.

Another embodiment of the application describes logic encoded in a tangible computer readable media. The logic is operable when executed by a processor controlled computer to mount an image of an offline virtual machine on a host operating system and generate drive mapping information for the mounted virtual machine image. The logic is further operable to load registry information of the mounted virtual machine image onto the host operating system using the drive mapping information and determine an update to be applied to the offline virtual machine by examining the registry information. The logic is further operable to retrieve a patch bundle based on the determination wherein the patch bundle comprises registry update instructions file system update instructions and a patch file. The logic is further operable to execute the patch bundle on the host operating system to update the offline virtual machine.

Certain embodiments of the disclosure may provide various technical advantages. For example certain embodiments may yield greater savings in hardware resources and improved launch time. Embodiments of the claimed invention provide patching of offline or suspended virtual machines and deliver offline analysis and remediation of vulnerable VM images whose provisioned state has grown stale.

Other technical advantages of the present disclosure will be readily apparent to one skilled in the art from the following figures descriptions and claims. Moreover while specific advantages have been enumerated above various embodiments may include all some or none of the enumerated advantages.

The following detailed description is made with reference to the figures. Exemplary embodiments are described to illustrate the subject matter of the disclosure not to limit its scope which is defined by the appended claims.

VMs are often halted and stored in an inactive offline state as VM images in the system memory from which they can be retrieved and re started as and when required. Oftentimes VMs can remain inactive for weeks or months before they are retrieved and restarted. The inactive state of the VM may raise concerns as most applications or software constructs require regular updates in the form of security or functionality patches or hot fixes. Since halted or stored VMs cannot perform any processing they cannot be updated regularly which may make them outdated or functionally flawed. Furthermore VMs may require operating system updates as well as compliance with current company standards. Non compliance to company standards missing OS updates and outdated anti virus definitions may compromise the VM s security and integrity. When such outdated VMs are re started they may also become a threat to the network or the network could become a threat to the outdated VMs. For example outdated applications or virus profiles may render the VM vulnerable.

Some software update mechanisms attempt to deal with this issue by retrieving and restarting all stored VMs at predetermined times. Upon restart a VM manager checks for updates or patches. If any updates are present the VM is updated and stored again.

Some other software update mechanisms when deploying a patch to an offline VM image copy the desired patches to the VM image file and install a scheduler on the VM image. When the VM image is activated the patches are installed or are installed at a scheduled time if the deployment was scheduled for a later time. The deployment process however does not automatically launch the VM image. The VM image may remain offline for days weeks or months after a deployment is performed. The patches are installed only when that image is eventually launched.

These processes however require resources such as a CPU or memory which increases maintenance cost. Moreover usage of software update mechanisms that wait for the VM to be activated do not alleviate the compliance threats or improve the VM s security.

Embodiments of the claimed invention update a virtual machine VM in its offline state i.e. without activating the VM. A VM is stored as a VM image in the offline state using one or more image file formats. These may include but are not limited to VMware s VMDK Virtual Machine Disk Format Microsoft s VHD Virtual Hard Disk OVF Open Virtualization Format and similar file formats. A virtual machine image mount engine hosts the VM image on a host operating system and generates drive mapping information. For example according to particular embodiments utilities such as VMware mount Microsoft s VHDMount or similar utilities may be employed to mount a virtual machine image on the physical disk X of the host computer and map this disk to drive C of the virtual machine. The virtual machine image rendering engine uses the generated drive mapping information to load registry information of the VM image on to the host operating system. A patch manager examines the registry information to determine the update requirements of the offline virtual machine and retrieves a patch bundle according to the determined requirements. The patch bundle may include VM update information patch files registry update instructions and file system update instructions. An offline virtual machine update engine executes the patch bundle to update the offline virtual machine. In some embodiments a counter check engine confirms the updates of the virtual machine upon activation of the virtual machine.

The following sections describe typical virtualization environments for better understanding the embodiments of the present disclosure. Most computing systems today include a virtualization program that allows a host computing device to emulate the instructions of an unrelated CPU called the guest. The host computer can thus execute an application that causes one or more host instructions to be called in response to a provided guest instruction. In this way the host computer can run both software designed for its own hardware architecture and software written for computers having an unrelated hardware architecture. Furthermore virtualization programs can help execute multiple incompatible operating systems on a single CPU by hosting the operating systems in isolation and thereby allowing the otherwise incompatible operating systems to run concurrently on the same host computing device.

The hardware platform generally refers to any computing system capable of implementing VMs which may include without limitation a mainframe personal computer PC handheld computer mobile computing platform server or any other appropriate computer hardware. The hardware platform may include computing resources such as a central processing unit CPU networking controllers communication controllers a display unit a program and data storage device memory controllers input devices such as a keyboard a mouse etc. and output devices such as printers. The CPU may be any conventional processor such as the AMD Athlon 64 or Intel Core Duo.

The hardware platform may be further connected to the data storage space through serial or parallel connections. The data storage space may be any suitable device capable of storing computer readable data and instructions and it may include logic in the form of software applications random access memory RAM or read only memory ROM . According to the illustrated embodiment the host operating system stands between the hardware platform and the users and is responsible for the management and coordination of activities and the sharing of the computing resources. Besides acting as a host for computing applications that run on the hardware platform the host operating system may operate at the highest priority level executing instructions associated with the hardware platform and it has exclusive privileged access to the hardware platform . The priority and privileged access of hardware resources affords the host operating system exclusive controls over resources and instructions and may preclude interference with the execution of different application programs or the operating system. The host operating system creates an environment for implementing a VM hosting the guest virtual machine. One host operating system is capable of implementing multiple isolated virtual machines simultaneously.

The virtual hypervisor which may also be known as a virtual machine monitor or VMM runs on the host operating system and provides an interface between the VM and the hardware platform through the host operating system . The virtual hypervisor virtualizes the computing system resources and facilitates the operation of the VMs and it may provide the illusion of operating at the highest priority level to the guest operating system . In fact the virtual hypervisor merely maps the guest operating system s priority level to a priority level lower than the top most priority level. As a result the virtual hypervisor can intercept the guest operating system executing instructions that require virtualization assistance. Alternatively the virtual hypervisor may emulate or actually execute the instructions on behalf of the guest operating system . Software steps permitting indirect interaction between the guest operating system and the physical hardware platform are also performed by the virtual hypervisor .

VMs present a virtualized environment to guest operating systems which in turn provide an operating environment for applications and other software constructs. Here VMs that have been inactive or dormant for an extended period may become outdated and or functionally flawed requiring security or functionality updates before reactivation. This updating may be performed in the virtualized computing environment . For example a dormant VM can be scanned offline by an offline scanning engine to provision for malware signatures OS patches application patches and other updates. This operation can also update or install security measures such as anti virus anti spyware and intrusion prevention solutions IPS . This pre provisioning or pre clearing of an inactive VM reduces cost in time and computer resources. Pre provisioning may also be performed periodically in the background to maintain dormant VMs in a ready to activate status. These and other embodiments of the claimed invention will be described in detail in connection with .

VMs are stored in the data storage space as a VM image file which is a virtual disk corresponding to the physical hard disk of the VM . Converting VMs to images allows the operating system to halt and re activate the VM by retrieving and re loading the stored image files from the data storage space . The VM image file may include system files data files and file system information associated with the VM and the guest operating system . A number of image file formats may be utilized to store these VM image files such as VMware s VMDK Virtual Machine Disk Format Microsoft s VHD Virtual Hard Disk OVF Open Virtualization Format or any other suitable image file format. For example the VM image file may be represented as a physical hard disk C on the guest operating system and may include data associated with the application running inside the guest operating system and data indicative of the host operating system . According to particular embodiments the virtual image is stored in OVF image file format and the virtual image may further include the OVF file size and data indicative of the disk geometry and type.

The virtual machine image mount engine mounts the VM image file as a virtual disk on the host operating system and renders the VM image to file system data. Utilities such as VMware s VMware mount Microsoft s VHDMount or any other mount engines known in the art may be used to mount the VM image file . Such utilities may either run by using command line tools or APIs Application Programming Interfaces .

In an alternative embodiment the VM image mount engine may manually locate the VM image before mounting it from either a host computer a network shared memory or a portable external storage device.

The virtual machine image rendering engine may load the file system information of the VM image . Loading of the file system information may include loading user file information and system file information. Furthermore the VM image rendering engine may generate drive mapping information of the mounted VM image . For example according to particular embodiments VMware mount mounts the VM image as virtual disk X on the host operating system and the VM image rendering engine maps the virtual disk X to drive C on guest operating system . Next the VM image rendering engine may locate the registry information and identify the operating systems and system files and data files of the mounted VM image using the drive mapping information. Then the VM image rendering engine loads the registry information. Loading the registry information includes loading user registry information and system registry information onto the host operating system . The VM image rendering engine further maintains the registry and file system mapping information between the host operating system and guest operating system .

The patch manager may determine an update to be applied to the VM by examining the registry information identified by the VM image rendering engine and it may record the registry and file system locations to be modified for updating the VM . Additionally the patch manager may examine the registry keys and values to determine whether these values have to be modified updated created or deleted. Similarly the patch manager examines the file keys and values to check for modifications updates creation and deletion requirements. Upon determining and recording the update requirements the patch manager retrieves the patch bundle .

In particular embodiments the patch bundle generation may be independent of the update requirement determination. The patch bundle may include without limitation virtual machine update information one or more patch files registry update instructions and file system update instructions. The patch bundle may constitute a JavaScript based patch script that records the virtual machine update information and generates registry update instructions and file system update instructions.

The patch bundle retrieval includes recording VM update information and file system modification information writing the registry and file system update instructions and retrieving the patch files and bundling them together.

Typically a patch file is verified in a test environment before deploying it to the VM . Once the patch file is verified and approved for deployment the patch manager determines the update requirements. For example a patch file for updating a VM with a new virus protection program may be verified in a test environment and approved. Then the patch manager can check the registry information of all the inactive VMs to determine which VMs are suitable to receive the patch update.

The virtual machine update information may include virtual machine registry information location virtual machine file system location or system configuration information of the virtual machine image to be updated. The virtual machine update information may further include other configuration information such as file modified created timestamp required for updating the VM image . This information may be utilized to replace files based on certain criteria. For example all files modified after Jan. 1 2010 may be replaced. The other configuration information may include version number of library files.

The registry and file system update instructions may include directions to update virtual machine system files replace virtual machine system files or update virtual machine registry locations. According to particular embodiments the patch manager may detect an old version of a VM image file such as avifile.dll file stored at location C Windows System32 avifile.dll as 4.90.0.3000 and modifies the file with an updated version file 4.95.0.3000. In addition the patch manager may record the registry location HKLM Software Microsoft Windows aviversion 4.90.0 to be modified with version value 4.95.0.

The patch files may include without limitation executable .exe .cab or configuration .dll files. Examples of patch files may include operating system updates updated anti virus or anti spyware definitions and signatures and intrusion prevention solutions. Depending on the registry update instructions and the file system update instructions the patch files are utilized to update the VM .

The Offline Virtual Image update engine may use VM update information registry update instructions file system update instructions and patch files packaged as the patch bundle .

The VM image rendering engine may use the drive mapping information and directs the execution of the virtual machine update information and patch files to an appropriate host operating system location. The registry update instructions from the patch bundle may also be directed to the registry hives loaded from the virtual disk device. For example according to particular embodiments the VM update information may identify the update location as C Windows System32 avifile.dll. Nevertheless as the drive C is mapped to the virtual disk X on the host operating system the VM image rendering engine may redirect the patch bundle to the location X Windows System32 avifile.dll on the host operating system . Moreover the registry update instructions HKLM Software CA may be redirected to a registry hive such as HKLM VirtualHKLM Software CA. 

The scripting engine may interpret the patch script to update the offline VM with patch files . It helps in interfacing with the VM image rendering engine and may be a part of the offline VM image update engine . The scripting engine may direct the VM image rendering engine to add delete modify and update the registry and file locations according to the interpreted patch script instructions. The offline VM image update engine on receiving the patch bundle uses the registry update instructions and the VM update information to execute the patch files . The execution of the patch bundle updates the offline virtual machine .

In alternative embodiments the computing framework for updating an offline virtual machine may also include a counter check engine to confirm the VM updates. To this end the counter check engine may activate the offline VM and check whether the correct updates have been installed on the virtual machine. In alternative embodiments the checking may be carried out offline without activating the VM . If the latest updates are missing or incorrectly installed the update engine may attempt to update the virtual machine again. The counter check engine may further report missing or incorrect updates to the host operating system for auditing or correction purposes.

Those in the art will understand that offline virtual machines may require regular updates such as anti malware signatures anti virus definitions OS patches application patches and similar maintenance. Thus the offline virtual machine update system set out in the discussion above may be performed on a regular basis in the background to place a dormant VM into service at a moment s notice.

Those in the art will understand that a variety of reasons may initiate the need for a virtual machine update. The reasons may include keeping the VM the guest operating system and the application updated. Features such as extra functionality for the VM or greater accountability to security concerns may also benefit from an offline virtual machine update. Moreover the update mechanism for offline VMs described above can be exploited for debugging purposes and can further increase the reliability and robustness of VMs.

At step the virtual machine image of the offline VM is mounted by the virtual machine image mount engine as a virtual disk on host operating system and is rendered to file system data. For example a VM image CAimage.ovf stored in Open Virtualization Format is mounted by VMware mount VM image mounting utility as a virtual disk X on the host operating system. The VM image mount engine may manually locate the VM image either from a host computer a network shared memory or a portable external storage device before mounting the VM image .

Moving to the next step the VM image rendering engine may generate the drive mapping information of the VM image mounted in step between the virtual disk of the host operating system and the physical disk of guest OS . For example the virtual disk X of the host operating system is mapped to drive C on VM guest operating system . The drive mapping information may be used for redirecting the virtual machine update information patch files and registry and file system update instructions to the appropriate host operating system location. The execution of registry update instructions may be directed to the registry hives loaded from the virtual disk device. Before generating the drive mapping information the VM image rendering engine may load the file system information of the VM image . The loading of file system information may include loading user file hives and system file hives.

At step the VM image rendering engine loads the VM image s registry information on the host operating system . The loading of registry information may include loading user registry hives and system registry hives. For loading the registry information the VM image rendering engine may locate the registry information and identify the operating systems and system files and data files of the VM image using the drive mapping information. The VM image rendering engine may further maintain the registry mapping information between the host operating system and guest operating system .

The method continues to step where the patch manager retrieves patch bundle . Patch bundle may include patch files VM update information file system modification information registry update instructions and file system update instructions. The update requirements of the VM are determined by examining the registry information identified in step by patch manager . According to particular embodiments the registry and file system locations to be modified are recorded and registry and file system update instructions are generated by running a JavaScript based patch script. The retrieved patch bundle is provided to the offline VM image update engine .

The patch manager generates executable .exe and configuration .dll patch files after examining the guest operating system and applications . The updates may be retrieved either locally from data storage space or through a remote server. Depending on the registry update instructions the patch files are used to update the VM .

VM registry information location virtual machine file system location and system configuration information of the offline VM image may be included in the VM update information. Other configuration information such as file modified created timestamp may also be included in the VM update information. The other configuration information may be version number of library files.

Moving to the next step the offline VM image update engine executes the patch bundle on the host operating system . The patch bundle execution starts the processing of registry update instructions file system update instructions and the VM update information. The processing of registry update instructions may perform the steps of replacing virtual machine system files updating virtual machine system files updating virtual machine registry locations using the VM update information or any combination thereof.

At step the offline VM image update engine may execute the patch files to update the offline VM . Depending on the registry update instructions the patch file may perform the steps of updating the operating system renewing anti virus or anti spyware definitions and signatures installing intrusion prevention solutions or any combination thereof.

Moving to step the patch manager writes a patch script that may include the registry update instructions and the file system update instructions. This patch script may be written manually after completing reverse engineering for the patch on test systems. In other embodiments the patch manager may automatically write the patch script. Among other instructions the patch script may include a set of instructions to update and replace the files associated with the VM .

At step the patch manager retrieves the patch files for updating the VM . The patch files may be retrieved either locally from data storage space or from a remote server through a network connection. The patch files include executable .exe and configuration .dll files generated after examining the guest operating system applications anti virus anti spyware definitions and signatures and intrusion prevention solutions. The registry update instructions written in step determine the patch files that need to be retrieved.

At step registry and file system update information registry and file system update instructions and patch files may be bundled together to generate the patch bundle . Those in the art will understand that the bundling process may be achieved by conventional processes known in the art

Those in the art will understand that the steps set out in the discussion above may be combined or altered in specific adaptations of the disclosure. The illustrated steps are set out to explain the embodiment shown and it should be anticipated that ongoing technological development may change the manner in which particular functions are performed. These depictions do not limit the scope of the claimed invention which is determined solely by reference to the appended claims. Additionally individual blocks may be deleted from the method without departing from the spirit and scope of the subject matter described herein. Furthermore the method can be implemented in any suitable hardware software firmware or combination thereof.

Systems and methods disclosed herein may be implemented in digital electronic circuitry in computer hardware firmware software or in combinations thereof. Apparatuses of the claimed invention may be implemented in a computer program product tangibly embodied in a machine readable storage device for execution by a programmable processor. Method steps according to the claimed invention can be performed by a programmable processor of the hardware platform executing a program of instructions to perform functions of the claimed invention by operating on offline VM and executing patch bundle to update offline VM . The claimed invention may be implemented in one or several computer programs that are executable in a programmable system which includes at least one programmable processor coupled to receive data from and transmit data to a storage system at least one input device and at least one output device respectively. Computer programs may be implemented in a high level or object oriented programming language and or in assembly or machine code. The language or code can be a compiled or interpreted language or code. The hardware platform may include general and special purpose microprocessors. A processor receives instructions and data from memories such as data storage space . Storage devices suitable for tangibly embodying computer program instructions and data include all forms of non volatile memory including without limitation semiconductor memory devices such as EPROM EEPROM and flash memory devices magnetic disks such as internal hard disks and removable disks magneto optical disks and compact disk. Any of the foregoing can be supplemented by or incorporated in ASICs application specific integrated circuits .

The specification has described a system suitable for secure data transfer applications. The specification has set out a number of specific exemplary embodiments but persons of skill in the art will understand that variations in these embodiments will naturally occur in the course of embodying the subject matter of the disclosure in specific implementations and environments. For example the methods and systems described can be used to update a server from a remote location with the latest software updates or update a server to protect against any virus or malicious software attack. The method and system can also upload the server with any of the latest data or repair server from a remote location. It will further be understood that such variations and others as well fall within the scope of this disclosure. Neither those possible variations nor the specific examples described above are set out to limit the scope of the disclosure. Rather the scope of claimed invention is defined solely by the claims set out below.

