---

title: Dynamic job relocation in a high performance computing system
abstract: A method and apparatus is described for dynamic relocation of a job executing on multiple nodes of a high performance computing (HPC) systems. The job is dynamically relocated when the messaging network is in a quiescent state. The messaging network is quiesced by signaling the job to suspend execution at a global collective operation of the job where the messaging of the job is known to be in a quiescent state. When all the nodes have reached the global collective operation and paused, the job is relocated and execution is resumed at the new location.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08516487&OS=08516487&RS=08516487
owner: International Business Machines Corporation
number: 08516487
owner_city: Armonk
owner_country: US
publication_date: 20100211
---
This disclosure generally relates to high performance computing HPC systems and more specifically relates to dynamic job relocation of a job executing on a plurality of nodes in an HPC system.

High performance computing systems sometimes referred to as supercomputers continue to be developed to tackle sophisticated computing jobs. These computers are particularly useful to scientists for high performance computing HPC applications including life sciences financial modeling hydrodynamics quantum chemistry molecular dynamics astronomy and space research and climate modeling. Supercomputer developers have focused on multi node computers with massively parallel computer structures to solve this need for increasingly complex computing needs. The Blue Gene architecture is a massively parallel multi node computer system architecture developed by International Business Machines Corporation IBM . References herein are directed to the Blue Gene L system which is a scalable system with 65 536 or more compute nodes. Each node consists of a single ASIC application specific integrated circuit and memory. Each node typically has 512 megabytes of local memory. The full computer is housed in 64 racks or cabinets with 32 node boards in each. Each node board has 32 processors and the associated memory for each processor. As used herein a massively parallel computer system is a system with more than about 10 000 processor nodes.

Massively parallel computer systems like Blue Gene are expensive and thus their utilization or throughput needs to be maximized get the greatest possible amount of work through the system each hour. Typically there are jobs of varying size and runtime that need to be scheduled on the system. The job allocation needs to be properly managed to achieve the correct balance of throughput and response time. The response time to execute a particular job may suffer when maximizing the overall throughput such that some users don t get a responsive system. With many prior art methods for job allocation the available system partitions or contiguous node blocks can become sparse and small system partition gaps between jobs can occur such that there is insufficient contiguous space to load a new job.

Techniques have been developed to defragment the blocks of resources so that more contiguous physical resources are available for a new job to begin execution. Jobs can sometimes be relocated to improve job allocation and free up contiguous space. However the majority of applications or jobs that execute on a HPC system involve message passing between nodes thus they cannot simply be suspended and relocated at any time without losing data in transit between the nodes.

This disclosure is directed to dynamically relocating a job executing on an HPC system and in particular where the job includes message passing between nodes. Dynamic relocation can be used to defragment blocks of nodes to achieve better system optimization.

A relocation manager of an HPC system dynamically relocates a job with node messaging executing on multiple nodes of the system to defragment blocks of nodes to increase system utilization. The job is dynamically relocated when the messaging network is in a quiescent state. The messaging network is quiesced by signaling the job to suspend execution at a global collective operation of the job where the messaging of the job is known to be in a quiescent state. When all the nodes have reached the global collective operation and paused the job is relocated and execution is resumed at the new location.

The disclosed embodiments are directed to the Blue Gene architecture but can be implemented on any HPC system having a global collective operation or global barrier operation that can be trapped to pause the job execution. The foregoing and other features and advantages will be apparent from the following more particular description as illustrated in the accompanying drawings.

A relocation manager of an HPC system dynamically relocates a job with node messaging executing on multiple nodes of the system to defragment blocks of nodes to increase system utilization. The job is dynamically relocated when the messaging network is in a quiescent state. The messaging network is quiesced by signaling the job to suspend execution at a global collective operation of the job where the messaging of the job is known to be in a quiescent state. When all the nodes have reached the global collective operation and paused the job is relocated and execution is resumed at the new location.

Many HPC applications or jobs involve messaging between nodes or other significant continuous network traffic. Applications which involve messaging cannot simply be suspended and relocated at any time that the system needs to re allocate the applications for better system utilization. The system must wait until the network quiesces such that there are no messages in route between nodes. Preferably the determination that the application messaging is in a quiescent state and ready for relocation can be done without modifying the application or job code since modification of the code is complex and expensive. As described herein the job is forced into a quiescent state before the relocation using an existing global collective operation such that the application need not be modified to facilitate dynamic relocation. Preferably the job is set up to pause at the next global collective operation by signaling the node to set a trap on a call to a global collective operation by the application software.

As used herein a global collective operation is a messaging operation in which every node involved with the job participates. To complete the operation every node must make a call to the collective function. Communication patterns can be one to many many to one or many to many. Message passing between compute nodes typically use global collective operations. Message Passing Interface MPI is a specification for an application programming interface API that allows many compute nodes to communicate with one another in a cluster or HPC system as described herein. MPI is a de facto standard for communication among processes of a parallel program running with a distributed memory system. Examples of collective operations include global barrier operations broadcast operations and reduce operations. A global barrier operation is a specific type of collective operation in which no single node can leave the barrier operation until the last node enters the barrier. This provides a synchronization point to ensure all nodes in the job are at the same point in the code at the same time. As a benefit for dynamic relocation the synchronization point also insures that the network is in a quiescent state. In Blue Gene L global collective operations can be carried out on the tree network with the collective network adapter described below. Further a global barrier operation can be carried out with the interrupt network and the global interrupt network adapter described below.

The Blue Gene supercomputer s 65 536 computational nodes and 1024 I O processors are arranged into both a logical tree network and a logical 3 dimensional torus network. Blue Gene can be described as a compute node core with an I O node surface. Each I O node handles the input and output function of 64 compute nodes. Communication to 1024 compute nodes is handled by each I O node that has an I O processor connected to the service node . The I O nodes have no local storage. The I O nodes are connected to the compute nodes through the logical tree network. The I O nodes also have functional wide area network capabilities through a gigabit Ethernet Functional network . The Functional network is connected to an I O processor or Blue Gene L link chip in the I O node located on a node board that handles communication from the service node to a number of nodes. The Functional network may also be connected to file servers not shown and other front end nodes not shown . The Blue Gene L system has one or more I O nodes connected to the node board . The I O processors can be configured to communicate with 8 32 or 64 nodes. The service node uses the gigabit network to control connectivity by communicating to link cards on the compute nodes. The connections to the I O nodes are similar to the connections to the compute node except the I O nodes are not connected to the torus network.

Again referring to the computer system includes a service node that handles the loading of the nodes with software and controls the operation of the whole system. The service node is typically a mini computer system such as an IBM pSeries server running Linux with a control console not shown . The service node is connected to the racks of compute nodes with a control system network . The control system network provides control test and bring up infrastructure for the Blue Gene L system. The control system network includes various network interfaces that provide the necessary communication for the massively parallel computer system. The network interfaces are described further below. In the Blue Gene L system there may also be a number of front end nodes that are similar to the service node . As used herein the term service node includes these other front end nodes.

The service node communicates through the control system network dedicated to system management. The control system network includes a private 100 Mb s Ethernet connected to an Ido chip located on a node board that handles communication from the service node to a number of nodes. This network is sometime referred to as the JTAG network since it communicates using the JTAG protocol. All control test and bring up of the compute nodes on the node board is governed through the JTAG port communicating with the service node.

The service node includes a job scheduler that handles job scheduling including the allocation of node resources. The job scheduler includes a relocation manager that handles the dynamic relocation of jobs to free up contiguous blocks of nodes as described herein. The job scheduler and the relocation manager are preferably software entities that have the features described herein. The service node further includes one or more jobs that are ready to be scheduled for execution. The job s include a job record that has information about the job as described further with reference to . The job s may also be stored in the data storage or on a file server not shown .

Stored in RAM is an operating system kernel a trap mechanism message passing interface MPI and an application or job . The trap mechanism is a routine to intercept the signal from the relocation manager in and set up a trap for the global collective operation. The MPI is an API for message passing as described above. The MPI is typically a linked library of the application and may be considered part of the application or it may be a separate software entity. The application is a local copy of the job shown in and is loaded on the node by the control system to perform a user designated task. The application program or job typically runs in parallel with application programs running on adjacent nodes of a block of nodes as described further below. The operating system kernel is a module of computer program instructions and routines for an application program s access to other resources of the compute node. The quantity and complexity of tasks to be performed by an operating system on a compute node in a massively parallel computer are typically smaller and less complex than those of an operating system on a typical stand alone computer. The operating system may therefore be quite lightweight by comparison with operating systems of general purpose computers a pared down version as it were or an operating system developed specifically for operations on a particular massively parallel computer. Operating systems that may usefully be improved simplified for use in a compute node include UNIX Linux Microsoft XP AIX IBM s i5 OS and others as will occur to those of skill in the art.

The compute node of includes several communications adapters for implementing data communications with other nodes of a massively parallel computer. Such data communications may be carried out serially through RS 232 connections through external buses such as USB through data communications networks such as IP networks and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computer sends data communications to another computer directly or through a network.

The data communications adapters in the example of include a Gigabit Ethernet adapter that couples an I O node for data communications to a Gigabit Ethernet or also known as the Functional network described in . In Blue Gene this communication link is only used on I O nodes and is not connected on the compute nodes. Gigabit Ethernet is a network transmission standard defined in the IEEE 802.3 standard that provides a data rate of 1 billion bits per second one gigabit . Gigabit Ethernet is a variant of Ethernet that operates over multimode fiber optic cable single mode fiber optic cable or unshielded twisted pair.

The data communications adapters in the example of include a JTAG Slave circuit that couples the compute node for data communications to a JTAG Master circuit over a JTAG network . JTAG is the usual name used for the IEEE 1149.1 standard entitled Standard Test Access Port and Boundary Scan Architecture for test access ports used for testing printed circuit boards using boundary scan. JTAG boundary scans through JTAG Slave may efficiently configure processor registers and memory in compute node .

The data communications adapters in the example of include a Point To Point Network Adapter that couples the compute node for data communications to a network . In Blue Gene the Point To Point Network is typically configured as a three dimensional torus or mesh. Point To Point Adapter provides data communications in six directions on three communications axes x y and z through six bidirectional links x x y y z and z. The torus network logically connects the compute nodes in a lattice like structure that allows each compute node to communicate with its closest 6 neighbors.

The data communications adapters in the example of include a collective network or tree network adapter that couples the compute node for data communications to a network configured as a binary tree. This network is also sometimes referred to as the collective network. Collective network adapter provides data communications through three bidirectional links two links to children nodes and one link to a parent node not shown . The collective network adapter of each node has additional hardware to support operations on the collective network. The data communications adapters further include a global interrupt network adapter that connects the nodes to a global interrupt bus . The global interrupt bus in the Blue Gene system is a four bit bidirectional bus that connects all the compute node and I O nodes in a branching fan out topology for global interrupts.

Again referring to the collective network extends over the compute nodes of the entire Blue Gene machine allowing data to be sent from any node to all others broadcast or a subset of nodes. Each node typically has three links with one or two links to a child node and a third connected to a parent node. Arithmetic and logical hardware is built into the collective network to support integer reduction operations including min max sum bitwise logical OR bitwise logical AND and bitwise logical XOR. The collective network is also used for global broadcast of data rather than transmitting it around in rings on the torus network. For one to all communications this is a tremendous improvement from a software point of view over the nearest neighbor 3D torus network.

Before dynamically relocating a job to improve system utilization the relocation manager determines whether there is a job that can be relocated and where to relocate the job. The relocation manager may determine whether a job is eligible for relocation by accessing the dynamic relocation control parameter as described below. To determine where to locate the job the relocation manager can consider the size of jobs waiting to execute how much contiguous space could be available if a job is dynamically relocated how long jobs have been running how long jobs will likely to run based on historical execution time see in or user specified parameters job priority etc. Based on these criteria the relocation manager makes a decision to dynamically relocate an executing job.

When the relocation manager determines to dynamically relocate a job preferably the job is allowed to enter a quiesced messaging state before the relocation using a global collective operation. The relocation manager preferably signals the nodes to pause at a global collective operation to ensure a quiesced messaging state. This can be done by sending a control signal to the trap mechanism in associated with the kernel software of the nodes to set up a trap. The trap mechanism sets up a trap to stop all the processors when the application accesses a global collective operation during the normal execution of the application code. The trap mechanism preferably uses software to set a trap to determine when the nodes have accessed a global collective operation and to notify the kernel. For example in response to the signal to pause the processor at the next global collective operation the trap mechanism could be activated in each node to intercept API calls to the MPI. When the application software makes a request to the MPI the trap mechanism recognizes the access to the MPI. The trap mechanism then pauses the job and signals the relocation manager that the application on this node is waiting for a signal from the relocation manager to resume operation. To implement the trap mechanism in this way the MPI library could be modified to signal the kernel each time a global collective operation is called. Alternatively the trap mechanism could be implemented by an interrupt routine in the kernel etc. An example of the relocation manager dynamically relocating a job in this manner is described further with reference to .

The previous paragraph describes a software method of implementing the functions of the trap mechanism. Alternatively portions of the trap mechanism could be implemented with hardware. For example the trap mechanism could incorporate special hardware to determine when the nodes have accessed a global collective operation and to notify the kernel. For example hardware could monitor the collective network adapter and or the global interrupt adapter to determine the job has accessed a global collective operation and then use a hardware interrupt to notify the kernel that the message network is in a quiesced state at the start or end of a global collective operation.

Again referring to the method executes as follows. The relocation manager determines to dynamically relocate a job and starts execution. The relocation manager sends a signal to all the compute nodes executing the job to stop at the next global operation step . The signal is preferably a network signal sent to each node executing the job. The relocation manager then waits step until all the nodes have stopped step . Each of the nodes sends a signal when the node has stopped as described below. If the nodes have not all stopped step no then it continues to wait step . If the nodes have all stopped step yes then the job is moved step to a new block of nodes. The job can then be resumed step by sending a restart signal to all the compute nodes to continue execution of the job from the point it was suspended at the global collective operation. The method is then done.

Again referring to the method executes as follows. The compute node begins execution of an application or job step . During execution of the job the node kernel software receives a signal from the relocation manager to stop the application for dynamic relocation step . The node sets a global collective trap step to pause execution at the next global collective operation. When the job calls a global collective operation set for the trap step the kernel software will pause the job and signal the relocation manager that the job on this compute node is paused step . The job then waits for a resume signal from the relocation manager step . The method is then done.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device. A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device. Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider . Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks. The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

As described above embodiments provide a method and apparatus for dynamic job relocation for a massively parallel computer system. One skilled in the art will appreciate that many variations are possible within the scope of the claims. Thus while the disclosure has been particularly shown and described above it will be understood by those skilled in the art that these and other changes in form and details may be made therein without departing from the spirit and scope of the claims.

