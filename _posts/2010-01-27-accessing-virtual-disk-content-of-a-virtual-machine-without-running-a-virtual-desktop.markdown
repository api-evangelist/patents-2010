---

title: Accessing virtual disk content of a virtual machine without running a virtual desktop
abstract: Methods, systems, and techniques for facilitating access to content stored remotely, for example, as part of a virtual machine infrastructure or elsewhere in a networked environment, using a uniform mechanism are provided. Example embodiments provide an Enhanced Virtual Desktop Management Server/System with a Content Abstraction Layer which enables users to access their data stored as part of a virtual machine environment, or replicated otherwise on a network, using a generic API. The API can be incorporated into a web browser or other third party interface to provide access to the users' data without needing to remote a bitmap representation of a virtual desktop display. Accordingly, users can access their data, applications, and settings regardless of the type of access device and regardless of whether the corresponding virtual desktop is running in the data center, provisioned in the datacenter but running on a client device, or not running at all.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09477531&OS=09477531&RS=09477531
owner: VMware, Inc.
number: 09477531
owner_city: Palo Alto
owner_country: US
publication_date: 20100127
---
This Application is related by subject matter to U.S. patent application Ser. No. 12 694 358 filed Jan. 27 2010 and published as U.S. Patent Publication No. 2011 0184993 on Jul. 28 2011 and to U.S. patent application Ser. No. 12 694 368 also filed on Jan. 27 2010 published as U.S. Patent Publication No. 2011 0185292 on Jul. 28 2011 and issued as U.S. Pat. No. 8 392 838 on Mar. 5 2013 both of which are incorporated herein by reference.

The benefits of computer virtualization have been recognized as greatly increasing the computational efficiency and flexibility of a computing hardware platform. For example computer virtualization allows multiple virtual computing machines VMs or guests to run on a common computing hardware platform referred to as a host even when the software components such as the guest operating systems of each virtual machine differ. Similar to a physical computing hardware platform virtual computing machines include storage media such as virtual hard disks virtual processors guest physical memory virtual devices and other system components associated with a computing environment. In a typical virtualized machine architecture a virtual hard disk stores a guest operating system data and application files for a virtual machine. Virtualization software receives disk read and write requests from guest software running on the virtual machine and maps the requests to a disk image file containing an image of the virtual disk on a datastore accessible by the host. The disk image file is block based and contains file segments that map to disk blocks of the virtual disk. Thus when the virtual machine reads a particular disk block that request is mapped to a read of the corresponding segment of the disk image file the contents of which are supplied to the virtual machine in a manner consistent with an ordinary disk read.

Server based computing such as available using computer virtualization architectures allows a networked client computing system remotely situated with respect to a server computing system to access computing resources on the server. For example a client computing system can use a remote desktop protocol such as Remote Desktop Protocol RDP Virtual Network Computing VNC or PCoIP to access a desktop remotely. A virtual desktop is a virtual computing system that operates as a desktop or workstation computer that an end user can interact with using the remote desktop protocol and client software and or hardware. The client software and or hardware transmits user input such as keyboard or mouse input to the remote system to be processed there and receives display and other data such as sound for presentation to the user.

Server based computing facilitates centralized management of computing resources. However one drawback is that the user must have the client system remain connected to the network while accessing to the user s desktop stored on the server.

As an alternative to server based computing client side computing allows the user to be located away from an enterprise network and in offline mode i.e. not connected to a network or the Internet. From an enterprise management standpoint however client side computing leads to undesirable inefficiencies when it comes to such tasks as updating operating systems and applications enforcing security licensing compliance locking information forcing adherence to various enterprise or corporate policies and data backup.

Some of the challenges described above have been addressed by extending the server based desktop virtual machine architecture to a client machine by allowing a user to check out a virtual desktop such that it can be accessed on the client machine while offline. At the time of check out a copy of the virtual disk of the user s virtual desktop is instantiated on the client machine and accessed by a new virtual machine started on the client system. The user is then able to access his or her virtual desktop without being connected to a network. Later upon check in the changes to the virtual disk are synchronized to the virtual disk maintained in the server system.

Others have addressed the above challenges by running a virtual desktop in the datacenter on the server system and using a thin display only client to cause the server system to stream down only needed portions of the virtual disk upon each access for example using a limited cache .

In all these cases the actual desktop virtual disk image is provisioned maintained and or monitored in the datacenter. Accordingly all of the user content stored on the virtual disks by a virtual desktop is also maintained by the virtual computing infrastructure executing on the servers. To access the data a user must start a virtual desktop load or otherwise gain access to the data to perform desired functions and then exit the virtual desktop.

In recent years the computing experience has changed due to the wide spectrum of devices are capable of running the Internet on handheld devices. Different form factors capacities permissions etc. make the delivery and running virtual desktops difficult on these devices.

Embodiments described herein provide enhanced computer and network based method systems and techniques for providing access to content stored remotely for example as part of a virtual machine infrastructure or elsewhere in a networked environment using a single mechanism that allows access to the data in the same way potentially from many different form factor devices regardless of whether the data is stored as part of a running or offline virtual machine. Example embodiments provide an Enhanced Virtual Desktop Management EVDM Server System which enables users to access their data applications and or settings stored as part of a virtual machine environment or replicated otherwise on a network using a generic application programming interface API . Data applications and or settings as they are stored in files for example on a virtual data disk will be referred to as just data unless otherwise indicated. The data for a particular user e.g. the user s personal files settings etc. constitutes the user s User Profile. The API can be incorporated into a web browser or other third party interface to provide access to the users data without needing to remote a bitmap representation of a virtual desktop display e.g. of the virtual desktop running in a datacenter or other computational heavy aspects of a virtual machine environment. Accordingly users can access their data applications and settings stored in a datacenter or in other remote networked locations such as cloud storage regardless of the type of access device used to obtain the data and regardless of whether the corresponding desktop is running in the data center provisioned in the datacenter but running on a client device or not running at all as long as the device has access to the corresponding storage network e.g. the Internet long enough to download the data.

In overview the Enhanced Virtual Desktop Management EVDM Server or EVDM System running on a server computing system implements the API using an API handler which forwards permissible and authorized input requests to a Content Abstraction Layer CAL . The Content Abstraction Layer is responsible for the process of actually obtaining the data including knowing the source location of the data so that the requestor can request a file the same way regardless of where or how it is stored and regardless of whether it contains applications user data and or settings etc. The Content Abstraction Layer determines the source of the requested data connects as appropriate to components needed to acquire the requested data even if they reside in an offline virtual machine remotely stored as part of a virtualization infrastructure and delivers the data back to the requester on behalf of the EVDM Server. To assist the Content Abstraction Layer a special virtual machine called a Control VM is provided to access data stored remotely in a non running virtual machine. The Control VM can mount or otherwise access data disks on the fly to access requested files. In addition special identity management support and policies are defined that are specific to a user s right to access stored data.

The Content Abstraction Layer as will be described in detail below interacts with appropriate virtualization system components not shown to retrieve the requested data from the appropriate data source while hiding the details about the actual source of the data from the requester. The requested data e.g. user data applications and or setup may be data stored on different back ends that is data that is part of a virtual disk of a running virtual desktop data that is stored on a virtual disk e.g. a disk image stored according to a format such as vmdk provided by VMware Inc. associated with a virtual machine that is not running or not associated with a user at all data stored elsewhere on the network for example replicated to a remote storage facility such as cloud storage that is scalable fast inexpensive data storage provided by Amazon S3 Rackspace Mosso EMC Atmos Yahoo MObStor or as a private datacenter on premise deployment using for example offerings from Parascale Mezeo etc. or profile data available through other interfaces and centrally managed on a shared storage using Microsoft profile based technologies for example roaming profiles smart profile technologies from companies like RTO Software AppSense RES Software Citrix etc. Roaming profiles are profile data that allow users to log on to different computers within a same Windows server domain and maintain access to their local files and configuration settings. In addition to these backend stores virtualized applications can be optionally stored on a shared file system accessible from the Enhanced Connection Broker on the EVDM Server. Other remote data interfaces may be similarly supported by the Profile API within an EVDM Server .

Once the appropriate data is retrieved as needed to respond to the Profile API request a view of the results is generated as needed and returned to the requester. Of note in some scenarios for example when the API is called directly by a 3party application no view generation may be performed.

The techniques of an EVDM Server for abstracting out data access are especially useful to client devices having limited computing resources and or small form factors such as smartphones personal data access devices travel laptops etc. For example using the exemplary techniques for providing uniform access to remote content UARC techniques a user using a small handheld smartphone can view documents stored in a datacenter and open them using local applications especially formulated to display contents on that form factor device. In addition certain applications such as Windows based applications running on Windows based client devices can be downloaded to the client device as simple files and executed locally with or without downloading other portions of the VM environment.

Thus using UARC techniques the Enhanced Virtual Desktop Management Server is able to provide universal access to content owned or otherwise permissible to be accessed by users even if the content is stored in a datacenter as part of virtual machines. In addition UARC techniques separate the notion of access to data from access to applications and other portions of the virtual infrastructure so that users can gain access to their data without needing to execute the complete virtual machine computing container. The virtual desktop is no longer only accessible as a complete bubble or virtual machine different components of the desktop such as the applications and the user profile portion of the desktop can be made accessible separately from each other and separate from the other user data. In this manner the EVDM Server can provide partial access to virtual desktops.

In addition the uniform access to remote content techniques and Enhanced Virtual Desktop Management Server may be useful to access a variety of other types of data and from other source locations even if they are not explicitly mentioned herein. Also although certain terms are used primarily herein other terms could be used interchangeably to yield equivalent embodiments and examples. For example it is well known that equivalent terms in the virtualization field and in other similar fields could be substituted for such terms as hypervisor VMMS etc. In addition terms may have alternate spellings which may or may not be explicitly mentioned and all such variations of terms are intended to be included.

Example embodiments described herein provide applications tools data structures and other support to implement an Enhanced Virtual Desktop Management Server System to be used to implement uniform access to remote virtual desktop content. Other embodiments of the described techniques may be used for other purposes including for example for file sharing applications social network and other collaborative applications ECM enterprise content management applications etc. In the following description numerous specific details are set forth such as data formats and code sequences etc. in order to provide a thorough understanding of the described techniques. The embodiments described also can be practiced without some of the specific details described herein or with other specific details such as changes with respect to the ordering of the code flow different code flows etc. Thus the scope of the techniques and or functions described are not limited by the particular order selection or decomposition of steps described with reference to any particular routine.

The term desktop refers to a human interface environment through which users can launch interact with and manage applications settings and or data etc. Virtualized desktops may export user interfaces e.g. keyboard and mouse input audio and visual output to the user from virtual machines running remotely in the datacenter or locally on the client or in some cases using a hybrid. In the case of virtualization environments the client side of the desktop typically includes a bitmap representation of the desktop running wherever it is being run. Input to and output from the virtualized desktop are reflected in the bitmap representation on the client as it occurs on the virtualized desktop.

Remote access to virtualized desktops is generally provided to client devices through a Virtual Desktop Management VDM Server . The VDM Server provides virtual desktops to the remote user devices and manages the corresponding virtual machines through communications with a software interface of a Virtual Machine Management Server VMMS . The Virtual Machine Management Server VMMS is responsible for provisioning and maintaining the multitude of Virtual Machines VMs implemented across potentially a multitude of physical computers such as computer and . When a user wishes to access an existing virtual machine the user establishes a connection through the VDM Server and a virtual desktop is presented as a user interface on the user s client device through which communications are made with the underlying virtual machine.

In the example embodiment shown as implemented for example by VMware Inc. s virtualization infrastructure architecture each physical computer for example computer contains the underlying hardware virtualization software here a hypervisor and one or more virtual machines for example VM and VM which each contain Agent Software guest system software labeled here as A in each VM box. The Agent Software is typically responsible for connecting each VM to the VDM Server and manages each desktop connection. It typically notifies the VDM Server upon each login logoff and disconnect. The Agent Software also provides support for remote devices such as USB devices etc.

The VMMS typically manages pools of compute resources used to run virtual machines on a set of clusters typically containing multiple servers with CPUs memory and communications hardware network . A virtual computer a virtual machine or VM when active consumes physical compute resources and is managed by a hypervisor layer such as hyperviser running on physical computer . The hypervisor manages physical resources as well as maintains virtual to physical hardware mappings. While some VMMS specialize in virtual machine management such as VMware s VirtualCenter Microsoft s Virtual Machine Manager Citrix s XenCenter others can manage both physical and virtual computers such as IBM s Director HP s OpenView and Microsoft s System Center Suite.

The Software Interface running on the VMMS communicates with these hypervisors e.g. hypervisor to provision and manage each VM. For example according to traditional virtualization techniques when a remote user e.g. user requests access to a particular existing desktop the VDM Server through its software communicates with the VMMS through its software interface to start the corresponding VM executing on an appropriate physical computer and to relay the user interface exported by the VM to the remote user so that the user can interact with the desktop. In some instances e.g. according to administrator policies when the desktop is exited or otherwise shutdown the VDM Server communicates with the VMMS to save the VM image to the datastore as appropriate and to de allocate physical and VM system resources as needed.

In general the VMMS Server provides interfaces to enable other programs such as the Pool Manager to control the lifecycle of the various virtual machines that run on a hypervisor. For example it supports operations for

In one example embodiment of an existing virtualization infrastructure providing by VMware Inc. a Virtual Desktop Management VDM Server includes an Administrative Console an Inventory Manager a Connection Broker and a Pool Manager . The Connection Broker allows a remote user such as remote user through a client device to select a type of virtualized desktop and initiate a desktop session or to access an existing connection to a virtualized desktop.

The Inventory Manager maintains a mapping of different user belongings in the system. For example user may be entitled to certain applications may have access to more than one desktop etc. The Inventory Manager also keeps track of the running virtual desktops in the system. The mappings may be stored using any number of mechanisms including using one or more directory servers accessible through network .

The Pool Manager component manages the complete lifecycle of virtual desktops. Desktops in a pool are grouped together based on similar software requirements. Desktop Administrators create logical desktops groups desktop pools that are provisioned typically from the same base image including the Agent Software. For example a desktop pool may include virtual machines that run the same set of software applications and run the same operating system. As yet another example a desktop pool may contain a set of cloned virtual machines that are identical in every aspect but are customized to include unique identity that includes for example a unique computer name IP MAC Address Domain membership Software license serial numbers OS specific security identifiers among other things. The base image can be a virtual machine or a template virtual machine that is created and or managed by the VMMS .

The software state of all the virtual machines in a desktop pool may be persistent or non persistent. Persistent desktops maintain the state of the files or applications stored inside the virtual machines. Non Persistent desktops are stateless desktops the desktop state is restored to the original state after every user session. In some cases the Desktop Administrator can define how frequently the revert to golden state operation should be performed. The restore to pristine image or revert to golden state operation can also be scheduled to occur based on certain conditions.

For example a department of an offshore organization may include a plurality of data entry clerks and a manager. The manager may be provided access to a private persistent VM and the data entry clerks may be provided access to a logical grouping of non persistent VMs. The data entry clerks may use any VM in the logical grouping to perform data entry for example in a database. However because the VMs in the logical grouping are non persistent and are configured to discard session state every day no changes made during a working session may be persisted in the VM. This ensures that the data entry clerks obtain consistent desktops regardless of which VM in the logical grouping is being used and provide an additional layer of security. However because the manager has access to a persistent VM changes to the desktop s software or documents may be made by the manager. For example the manager may create files using an application like Microsoft Office and store those files on the desktop executing in the persistent VM. When the manager connects to the desktop on subsequent attempts all files and application software are available.

The Administrative Console typically provides a user interface for a Desktop Administrator to manage the configuration of desktop pools define user access policies manage ongoing maintenance software installed in the desktops etc. For example the Administrative Console may permit the Desktop Administrator to create desktop pools associate desktop pools with a VMMS provide other details such as the compute resources hosts clusters needed to run the VMs logical resource pools e.g. VI DRS Resource Pools for load balancing type of memory sharing configuration e.g. reserve memory for virtual machines or use memory overcommit storage used to provision the VMs identifying one or more datastores guest customization details like a custom naming scheme for VMs in the pool e.g. a marketingxxxx custom name such that the VMs in the pool are called marketing0001 to marketing9999 domain membership info e.g. to add VM to domain vmware vdi.com etc. associate a desktop pool with a master image or template define VM state policies keep VMs powered on suspend VM when user logs off etc. set up custom messages to be sent to end users when the desktops are put into maintenance mode e.g. for weekly patches hotfixes etc. and or manage the application registration and load process.

The Directory Server stores the persistent state required for managing the virtual desktops. For example the VMs in a desktop pool maybe associated with one or more users. The user identifiers for a pool may be stored in the directory server . The users may also be referenced through an external directory server such as Microsoft Active Directory Novell eDirectory IBM Tivoli Directory Server etc. In one embodiment the directory server may contain state for 

Examples and details of variants of virtualization architectures such as that described with reference to can be found in U.S. patent application Ser. No. 11 395 012 entitled Virtualized Desktop Allocation System Using Virtual Infrastructure filed Mar. 31 2006 U.S. patent application Ser. No. 12 058 269 entitled Synchronized Clones filed Mar. 28 2008 and in U.S. Patent Publication No. 2009 0216975 entitled Extending Server Based Desktop Virtual Machine Architecture to Client Machines filed Feb. 23 2009.

In order to provide the uniform access to remote content UARC techniques described herein an Enhanced Virtual Desktop Management EVDM Server may be configured as detailed below. The EVDM Server may be deployed in place of the VDM Server in a virtualization environment similar to that described with reference to . Most of the modifications to accomplish this enhanced method of accessing virtual desktop related data reside with the Connection Broker component however other adjustments have been made to the Inventory Manager Pool Manager and Administrative Console etc. to account for the ability to access different content not just entire virtual machines potentially under different policy rules and at distributed locations.

First the Connection Broker which in the traditional virtual infrastructure is responsible for initiating and managing connections to virtual desktops is enhanced to provide connection access at a different level of granularity the data itself. In particular it is the Enhanced Connection Broker of the Enhanced Virtual Desktop Management EVDM Server that provides the API handling and Content Abstraction Layer described with respect to .

The Bulk Data Transfer component is responsible for transferring data such as big files when the communications channel from the EVDM Server to the client device e.g. device or is slow. The Bulk Data Transfer component obtains the data and then temporarily caches the data to be accessed by the client device. In some embodiments a transport mechanism such as a TCP socket FTP connection http upload download etc. may be provided as a fast communications channel to a Desktop VM running desktop or to a Control VM once a connection to a non running desktop has been initiated . Alternatively the Bulk Data Transfer component may communicate directly with the Desktop VM Control VM to obtain large amounts of data over a channel that is still in most cases faster than the connection from the EVDM Server to the client device and to cache the data as part of the Bulk Transfer component . Data is return to the API Handler at a rate appropriate to delivery to the client device.

The Management Interface component may be invoked for example by a Desktop Administrator to set up policies for access to the user data. For example policies rules may be stored in the policy database that are time based e.g. no access between 9 5 daily or that are device based e.g. access only allowed from a Blackberry device later than model x . The Management Interface component may also be invoked to facilitate the Content Abstraction Layer to perform certain functions. For example the Administrator may use the Management Interface component to cause the CAL to index files so that search queries may be executed by a client device or to delete files or the virtual disk when an identified user leaves the company etc.

Several API are supported by an example Enhanced Connection Broker such as Enhanced Connection Broker of . In one embodiment the Profile API that are processed by the API Handler of an example ECB include 

Different techniques are used by a Content Abstraction Layer of an Enhanced Connection Broker such as CAL in order to access content from the various scenarios such as the virtual machines the network storage or the application repository . In particular when virtual desktops are running e.g. the user s desktop is running in a datacenter the Content Abstraction Layer collects the data by sending a message e.g. via an interprocess communication protocol such as distributed RPC secure sockets Java Messaging Server JMS http getpost RMI etc. to a software agent running in the desktop s virtual machine see box A in VM in and a user view is generated. Alternatively when the disks are in the datacenter but the desktops are powered off not running or the desktops have been checked out to a client then either the desktop can be powered on if the policies such as those stored in the Policy Database so define or the user data disk i.e. area on a virtual disk designated for user profile data such as what is accessible through My Documents in Windows XP Operating System or a virtual disk dedicated to same can be mounted using a Control VM running on a hypervisor attached to the storage that contains the desired virtual disk and the data retrieved. In some embodiments checked out virtual machines are treated like non running desktops because the desktop s virtual machine is albeit temporarily not running in the server and may be running or not on a client at any particular point in time. In addition the request for the user content may be coming from a client device that is different from the client device having the checked out virtual machine.

A Control VM is a helper virtual machine that provides access to virtual disks when the corresponding virtual machine is not running. Also when the desktops are only replicated in the datacenter and there are not enough computational resources to run the desktops then again Control VMs can be used to mount the corresponding user disks to provide on demand access to user content in these desktops even though the user cannot run the desktop. The scenarios involving use of a Control VM to mount a virtual disk to retrieve data are described below with respect to . In addition when accessing data from network storage the data may be fetched directly from the external storage. This scenario is described below with respect to . Once the data is obtained if desired the Content Abstraction Layer generates a view for display on a client device.

In general a Control VM can use two different mechanisms to access the data stored on a virtual disk namely it can a mount a disk or b use network access to the datastore that stores the data. As used herein a datastore is an abstraction for a storage volume that is used to store virtual machines. The virtual disks are stored on storage devices such as locally attached disks networked disk arrays and network attached storage NAS filers. Virtual Machines are typically provisioned on datastores using a VMMS such as VMMS of . Fibre Channel SAN arrays iSCSI SAN arrays and NAS network attached storage arrays are widely used storage technologies to store virtual machines. Sharing the storage arrays among groups of servers via SANs allows aggregation of the storage resources and provides more flexibility in provisioning resources to virtual machines. Datastores hide the idiosyncrasies of various storage options and provide a uniform model for applications using the VMMS APIs. In one embodiment datastores may use either an VMFS or NFS based file system.

Mechanism a for accessing the data relies on the VMMS to add the virtual disk to the Control VM s set of devices. This can happen before the Control VM is powered on or during its running operation. Agent software running inside the Control VM as a portion or all of the Guest System Software resident in a VM then triggers a discovery of the new device through its guest operating system e.g. by doing a device rescan and mounts the disk to a logical mount point e.g. a drive letter or name like vmware user username . Details of one embodiment for discovering and mounting the new device are described further below with respect to . In this case a Windows or Linux instance i.e. a virtual machine running Windows or Linux can be used as the Control VM and since access is being mediated by a hypervisor any storage backend that is supported by the hypervisor will be accessible from within the Control VM. Note that the Control VM instance needs to run on a hypervisor instance that has access to the storage that is hosting the target virtual disk. In different embodiments one or more hypervisor instances may access the datastore where the target virtual disk is stored.

Mechanism b relies on the support for network file protocols such as NFS in modern operating systems in order to access the datastore that is hosting the target virtual disk. Using this mechanism the Control VM can access storage that is not necessarily accessible to its particular hypervisor instance without the need to instantiate an additional Control VM on a different hypervisor that does have access. Once the datastore is accessible from within the Control VM the target virtual disk can be mounted and exposed to the guest operation system and used to retrieve data. In some embodiments the agent software runs the equivalent of a mini web server that provides a simple API interface such as a REST interface or other web server supported API for common operations useful to generate the client view. For example it may provide primitives to list a directory list files in an input directory download upload of files etc. This web service can be called by for example the Content Abstraction Layer of an EVDM Server to retrieve the requested user data.

In event a user request through the Profile API for example as initiated by a web browser or 3party application is made to the Control Layer for example to request data from a non running desktop. The Control Layer authenticates the user event and locates the virtual disk containing the requested data. According to one embodiment mappings between the user and the user data including the identification of user data disks virtual disks containing user data may be stored on a directory server for example Directory Server in . In other embodiments internal and or enterprise databases containing such information may be maintained. Other embodiments may utilize other methods and other forms of data repositories. In instances where more than one user data disk is available for a user the user may be requested to select the appropriate disk. In other cases root folder information may be kept to aid in interpreting a request that specifies a network share i.e. the network share typically specifies sufficient information so that the root folder can be identified and hence looked up in the directory server or data repository . Here a root folder may mean path information to find My Documents or other default document folder on a drive or a different folder directory root. If required the Control Layer queries the VMMS to determine which Control VM has access to the corresponding virtual disk e.g. the user data disk . If the virtual disk for example disk is not yet mounted the Control Layer sends a control command using the mini web service to the determined Control VM here Control VM to mount the disk event on a specific datastore shared or local depending upon the configuration . The determined Control VM uses the Agent Software s Virtual Device Manager component to invoke the Virtual Hard Disk Controller to mount the virtual disk containing the user data event . In some embodiments this mounting is performed by performing a controller e.g. SCSI rescan to discover the device and then mount it to a logical mount point. A device ready for file access or similar message event is returned to the Control Layer of the Content Abstraction Layer of the EVDM Server. Optionally a top level user content view is generated event and returned to the requesting client with a security identifier that the client preferably uses for each subsequent request for data on that mounted disk. For example initially the files at the root directory of the virtual disk are returned in order to populate an Explorer type of user interface i.e. showing a tree view of the file system with a hierarchical folder structure and a list of files contained by a folder selected in the tree view e.g. the My Documents folder .

On a subsequent user request event the user request is validated as before see event and the request is handled. For example if user requests a file on a previously mounted disk the request is forwarded to a previously determined Control VM event using the mini web service and in some cases the previously issued security identifier. The Control VM looks up the mounted user disk checks for policies that support access to the data and serves the request event to access the data. User request output is then returned to the Data Layer of the EVDM Server event and subsequently to the requesting client event as before.

In addition to providing an Enhanced Connection Broker in an Enhanced Virtual Desktop Management Server it is noted that several enhancements are made to other components of virtualization infrastructure to support this on demand access to remote content outside of a virtual desktop. For example referring to the Inventory Manager may keep track of the active Control VMs and the user data disks that have been mounted in some cases as part of mounted virtual disks . In addition any limitations for example a maximum number of outstanding operations maximum number of virtual disks to be mounted in a single Control VM etc. may also be managed by the Inventory Manager . The Administration Console may allow a Desktop Administrator to define control policies surrounding the accessibility of the data from remote devices. For example the Administrator can define that some devices and some data including virtual applications may be restricted or accessible based upon the particular device time of day read only versus read write etc. Virtual applications are traditional applications that are packaged and combined with a runtime engine so that the application runs in a limited environment to impose minimal impact on the operating system including for example sandboxed registry settings and associated data and executable files but at the same time allowing limited access by the application to operating system resources. An example virtual application are applications such as Microsoft Office that are packaged by ThinApp software which is available from VMware of Palo Alto Calif. ThinApp is capable of packaging a complete application suite into a single executable file that can be loaded from a local disk drive or accessed from shared network storage.

The Pool Manager may be modified to track and annotate what content in the pool is available for access through the Profile API. In one embodiment Agent Software present in each virtual machine obtains annotations e.g. hints or lists of what is accessible through some form of shared channel e.g. the Windows registry shared memory a configuration properties file in guest database etc. In such embodiments information on what content is available for access according to the defined policies are communicated between the Agent Software and the Pool Manager rather than to interface directly with the Policy Databases in order to respect secure connections. In other embodiments the Agent Software may be permitted to access information from the Policy Database information. Also as described above the Agent Software is enhanced to support a custom web server e.g. an embeddable HTTP engine that starts and stops on a specific port which is configurable and handles the request forwarded by the Content Abstraction Layer as a result of an API invocation on behalf of a client device. The web server also provides meta data and bulk file copy access to the Enhanced Connection Broker through a secure control protocol see . .

Since the Enhanced Connection Broker can also provide access to virtual applications as for example one or more executable files from some sort of shared storage for example Application Repository in some mechanism is included in the virtualized infrastructure to determine whether a requesting user has access to the application or not. One such mechanism can be provided based upon an entitlements mechanism incorporated into a policy database or used with a directory server. Other mechanisms can be supported as well.

In the embodiment described above that incorporates use of Directory Server or an equivalent data repository additional mappings for users need to be maintained to support UARC techniques. For example mappings between users and user data disks between applications and users indications of where the user data is stored in the system for example which VMMS cluster datastore or user data disk. In addition information may be stored pertaining to location information in network storage including for example identity of an external cloud storage provider unique resource identifiers URIs or a UNC path e.g. a pathname computer name shared folder resource to identify the root top level storage bucket for the data etc.

Underlying these modifications it is to be understood that the Virtual Machine Management Server for example the VMMS and the hypervisor are capable of supporting a control virtual machine to mount and unmount a virtual disk even when the virtual machine is not running powered on . A control VM may be automatically instantiated and launched as needed.

In some embodiments third party tools that synchronize user data for example to be backed up or otherwise replicated on external network storage may be incorporated into a user s virtual machine. In this case the VMMS EVDM Server hypervisors etc. may be configured to locate this data and the manage policies or access such policies associated with the external data. The Control VM is then able to access the data on the network resource and provide it to a requesting user providing it has some mechanism for determining where the data is stored. In some example embodiments as mentioned a Directory Server may be used to identify the root storage bucket for the data.

As mentioned with regard to once the target data for a particular API is generated a view or content markup of some nature may be generated by the Enhanced Virtual Desktop Management Server for presentation on a user interface of a client device. In some embodiments the EVDM Server tracks the form factor of the requesting client and so can mark up the data results so as to be presentable by that form factor device . In other embodiments a generic e.g. XML or other tagged mark up is created so that any customized application can consume and present the data. In one embodiment the mark up behaves like a web application for delivery through a web browser. Upon user login the user is presented with a list of files and directories in a topmost folder and alternatively a list of applications available for download. Optionally the user data and applications available to the users could be packaged and presented to end users in the form of a special web based desktop a desktop that can be customized by wall paper in the browser for example . This web based desktop could provide similar benefits to a real virtual desktop running in the datacenter. Such a web based desktop might be appropriate for a range of devices and use cases.

In other embodiments a custom client application may be written using the API to allow the user access to the content through some form of a shared folder for example a shared briefcase that integrates operating system specific file exploration functions. For example a user may start working on a document at work by accessing the desktop running in the datacenter. In the evening before leaving for the day the user saves his work and goes home. At home user has installed the desktop custom software that provides the roaming briefcase feature. The roaming briefcase file explorer integration connects to the Enhanced Virtual Desktop Management server and discovers the new file. The user can then download the file to his local machine and continue to work on the same document. It should be noted that this system provides merely an alternative to accessing the same file using his virtual desktop in the traditional way the user can still connect to his virtual machine in the datacenter and work on the document by remotely accessing the running virtual machine using a remote desktop protocol as described above.

In yet other embodiments no specific view is generated at all the view of the data is completely client generated using raw results e.g. XML formatted results returned by the API.

The EVDM server computing system may comprise one or more server and or client computing systems and may span distributed locations. In addition each block shown may represent one or more such blocks as appropriate to a specific embodiment or may be combined with other blocks. The EVDM server may be software residing on the computing system or may be synonymous with the server computing system in some embodiments. Moreover the various blocks of the Enhanced Virtual Desktop Management Server may physically reside on one or more machines which use standard e.g. TCP IP or proprietary interprocess communication mechanisms to communicate with each other.

In the embodiment shown EVDM server computing system comprises a computer memory memory a display one or more Central Processing Units CPU Input Output devices e.g. keyboard mouse CRT or LCD display etc. other computer readable media and one or more network connections . The EVDM Server is shown residing in the memory . In other embodiments some portion of the contents some of or all of the components of the EVDM Server that implement the logic of the server may be stored on and or transmitted over the other computer readable media . The components of the Enhanced Virtual Desktop Management Server preferably execute on one or more CPUs and manage the requests for data from heterogeneous sources as described herein. Other code or programs and potentially other data repositories such as data repository also reside in the memory and preferably execute on one or more CPUs . In addition one or more Control VMs or Desktop VMs may be executing in the memory of the server computing system depending upon the virtualization infrastructure configuration. Of note one or more of the components in may not be present in any specific implementation. For example some embodiments embedded in other software or hardware may not provide means for user input or display.

In a typical embodiment the EVDM Server includes one or more Identity Management modules one or more User Interface Management modules one or more Bulk Data Transfer interface modules API Handler s Content Abstraction Layer Policies Data Repository and Audit Data Repository . In at least some embodiments the Identity Management module is provided external to the EVDM Server and is available potentially over one or more networks . Other and or different modules may be implemented. In addition the EVDM Server may interact via a network with application or client code that uses data provided by the API Handler by means of the Content Abstraction Layer one or more third party computing systems or applications and or one or more Control VMs such as those that access virtual desktop data from virtual disks stored as part of a virtual machine infrastructure as described earlier. Also of note the Policies Data Repository and Audit Data Repository may be provided external to the EVDM Server as well for example in a data base accessible over one or more networks . In an example embodiment components modules of the EVDM Server are implemented using standard programming techniques.

The embodiments described above may also use well known or proprietary synchronous or asynchronous client server computing techniques. However the various components may be implemented using more monolithic programming techniques as well for example as an executable running on a single CPU computer system or alternately decomposed using a variety of structuring techniques known in the art including but not limited to multiprogramming multithreading client server or peer to peer running on one or more computer systems each having one or more CPUs. Some embodiments are illustrated as executing concurrently and asynchronously and communicating using message passing techniques. Equivalent synchronous embodiments are also supported by an EVDM Server implementation.

In addition programming interfaces to the data stored as part of the EVDM Server e.g. in the data repositories and can be available by standard means such as through C C C and Java APIs libraries for accessing files databases or other data repositories through scripting languages such as XML or through Web servers FTP servers or other types of servers providing access to stored data. The data repositories and may be implemented as one or more database systems file systems or any other method known in the art for storing such information or any combination of the above including implementation using distributed computing techniques stored procedures or methods attached to objects such as policy objects etc. although other techniques are equally effective.

Also the example EVDM Server may be implemented in a distributed environment comprising multiple even heterogeneous computer systems and networks. For example in one embodiment the Identity Management module the API Handler and the Policies Data Repository are all located in physically different computer systems or virtual machines. In another embodiment various modules of the EVDM Server are hosted each on a separate server machine and may be remotely located from the tables which are stored in the data repositories and . Also one or more of the modules may themselves be distributed pooled or otherwise grouped such as for load balancing reliability or security reasons. Different configurations and locations of programs and data are contemplated for use with techniques of described herein. A variety of distributed computing techniques are appropriate for implementing the components of the illustrated embodiments in a distributed manner including but not limited to TCP IP sockets RPC RMI HTTP Web Services XML RPC JAX RPC SOAP REST etc. RDP VMC etc. Other variations are possible. Also other functionality could be provided by each component module or existing functionality could be distributed amongst the components modules in different ways yet still achieve the functions of an EVDM Server.

Furthermore in some embodiments some or all of the components of the EVDM Server may be implemented or provided in other manners such as at least partially in firmware and or hardware including but not limited to one ore more application specific integrated circuits ASICs standard integrated circuits controllers e.g. by executing appropriate instructions and including microcontrollers and or embedded controllers field programmable gate arrays FPGAs complex programmable logic devices CPLDs etc. Some or all of the system components and or data structures may also be stored e.g. as executable or other machine readable software instructions or structured data on a computer readable storage medium e.g. a hard disk a memory a network or other storage or a portable media article to be read by an appropriate drive or via an appropriate connection . Some or all of the system components and data structures may also be transmitted via generated data signals e.g. as part of a carrier wave or other analog or digital propagated signal on a variety of computer readable transmission mediums including wireless based and wired cable based mediums and may take a variety of forms e.g. as part of a single or multiplexed analog signal or as multiple discrete digital packets or frames . Such computer program products may also take other forms in other embodiments. Accordingly embodiments of this disclosure may be practiced with other computer system configurations.

As described in one of the functions of an Enhanced Virtual Desktop Management Server is to process the Profile API by finding appropriate content and retrieving it from a correct remote location while hiding such details from a requesting application. Also as explained in these functions are the responsibility of an Enhanced Connection Broker implemented by the EVDM Server.

Specifically in block the CAL receives from an API handler such as API Handler in the user credentials from the requester client system. In block it determines whether the credentials are authentic using standard and well known authentication techniques such as Active Directory RSS two factor authentication biometric authentication smart cards and the like . If the authentication test fails then the CAL returns a failure error code in block otherwise continues in block . In block the CAL determines the client device form factor for use for example in generating a view in block and receives an indication of the content desired by the user. In block the CAL determines the source for the requested content for example whether it is a virtual disk network share roaming profile etc. and continues in block .

Blocks process the obtaining of the requested data dependent upon the type of the source for the data.

In block the CAL determines whether the corresponding content source was determined to be an active desktop with a running Desktop VM and if so continues in block else continues in block . In block the CAL determines the active VM a Desktop VM that corresponds to the running desktop by obtaining for example the running VM s current IP address. Several techniques may be used to implement this determination. For example in some embodiments a directory service such as Directory Server in stores mappings from a user to the user s virtual disks and VMs and their corresponding IP addresses which are kept up to date when a connection with desktop is established. During the connection the EVDM may maintain the relevant IP addresses in memory. Once the appropriate running Desktop VM is determined the CAL sends an appropriate interprocess message to the Desktop VM to obtain the requested content. Known message passing techniques are used for example secure sockets http get post JMS RMI etc. to send messages to a virtual machine running for example in the datacenter. The CAL then continues in block to process the output.

In block the CAL determines instead whether the content source is a checked out VM e.g. a VM running client side temporarily. If so then the CAL continues in block otherwise continues in block . In block the CAL determines the location of the associated virtual disk and a location of a Control VM that has access to the determined associated virtual disk. One embodiment for making this determination is described below with reference to . In the embodiment illustrated the determination for locating a Control VM whether the desktop is checked out to a client machine or not running at all is the same. Both assume the VM is not running in the datacenter as for example the checked out desktop may not be running on the same client device as the current request for user data. In other embodiments the process for determining a Control VM for the checked out desktop may differ from that for a non running desktop. Once the Control VM is determined the CAL continues in block .

In block the CAL determines instead whether the content source is a virtual disk belonging to a virtual desktop that is not running. If so the CAL continues in block otherwise continues in block . In block the CAL determines the location of the associated virtual disk and a location of a Control VM that has access to the determined associated virtual disk. One embodiment for making this determination is described below with reference to . The CAL then continues in block .

In block the CAL sends a message to the determined Control VM corresponding to a checked out or non running desktop and depending upon the API request mounts the determined virtual disk if needed to gain access to the content. As described above depending upon the stored policies and other mappings the Control VM may instead be powered on to automatically gain access to the requested content by remoting the virtual desktop.

In block the CAL obtains the requested content as output from the Desktop VM or Control VM and continues in block .

In block the CAL determines instead whether the content source corresponds to a network share or roaming profile and if so continues in block otherwise processes any other source of content as required and continues to block . In block the CAL determines the network share details for example consulting a directory server to find information and an identifier to access the network share e.g. a URI a UNC name etc. . In block the CAL connects to the location using the identifier to the share and obtains the requested data. The CAL then continues in block .

In block the CAL generates a client view e.g. a user interface based upon the detected form factor. If on the other hand the requesting client code is API based or otherwise indicates the CAL does not generate a view. In that case the client code obtains the file and uses a local viewer coded to present the file format. For example an iphone application that accesses the CAL might employ a special iphone built in viewer for office documents or third party software like QuickOffice to present the file on the phone. For browser based client applications the documents can optionally be opened using 3party web based software such as google docs zoho etc.

After processing assuming the CAL is operating as a daemon process that sleeps between actions the CAL returns to block awaiting invocation by the next user data request.

For subsequent requests to access data from the same virtual disk user data disk the CAL will generally follow the same logic pattern as in blocks but may provide access to data other than the root data of the user data disk and will not cause a mount to occur as the virtual disk is already mounted.

In block the CAL queries the VMMS to obtain details of the identified virtual machine including the virtual disk information. In block the CAL queries the VMMS to find the datastore storage volume s that contains the virtual disk of the identified virtual machine. In block the CAL queries the VMMS to identify one or more hypervisors e.g. ESX hosts in a VMware virtualization infrastructure that has access to the identified datastore. In block the CAL chooses a Control VM that is running on one of the identified hypervisors. If a Control VM is not already running an appropriate Control VM is automatically instantiated and an identifier to the instantiated Control VM returned. In block the CAL sends a message to the chosen Control VM to mount the identified virtual disk to the selected Control VM and returns an indicator to the chosen Control VM.

Note as described with reference to when the Control VM receives the message via its Agent mini webserver interface it causes the device controller to do a rescan to discover the newly added device. The Control VM can then mount the virtual disk as a logical mounting point such as a logical drive.

Depending upon the virtualization infrastructure incorporated the CAL the VMMS and the EVDM Server may perform different operations to gain access to the virtual disk without running the virtual desktop on the client device.

From the foregoing it will be appreciated that although specific embodiments have been described herein for purposes of illustration various modifications may be made without deviating from the spirit and scope of the present disclosure. For example the methods and systems for performing uniform access to remote content associated with virtual machines discussed herein are applicable to other architectures other than a VMware Inc. architecture. Also the methods and systems discussed herein are applicable to differing protocols communication media optical wireless cable etc. and devices such as wireless handsets electronic organizers personal digital assistants portable email machines game machines pagers navigation devices such as GPS receivers etc. .

