---

title: System, method and computer program product for associating a plurality of stored elements with a creation of a patch
abstract: In accordance with embodiments, there are provided mechanisms and methods for associating a plurality of stored elements with a creation of a patch. These mechanisms and methods for associating a plurality of stored elements with a creation of a patch can enable improved patch development for multi-tenant on-demand database systems, improved patch flexibility, etc.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08930933&OS=08930933&RS=08930933
owner: salesforce.com, inc.
number: 08930933
owner_city: San Francisco
owner_country: US
publication_date: 20101102
---
This application claims the benefit of U.S. Provisional Patent Application 61 315 779 entitled Packaging Patches by Smith et al. filed Mar. 19 2010 the entire contents of which are incorporated herein by reference.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

One or more implementations relate generally to installing code and more particularly to developing patches for installed code.

The subject matter discussed in the background section should not be assumed to be prior art merely as a result of its mention in the background section. Similarly a problem mentioned in the background section or associated with the subject matter of the background section should not be assumed to have been previously recognized in the prior art. The subject matter in the background section merely represents different approaches which in and of themselves may also be inventions.

In conventional multi tenant on demand database systems it may be desirable to create a patch for a version of code installed within the multi tenant on demand database. For example a developer may create and release a patch for a particular application installed within the multi tenant on demand database. Unfortunately conventional patch development systems have been associated with various limitations.

Just by way of example traditional methods of developing a patch for code may address the latest version of the code that has been installed within the multi tenant on demand database even if the patch is for an earlier version of the code. This may force users who utilize versions of code earlier than the latest version to install the latest version of code to obtain patches for their code. As such the only way to provide bug fixes to customers under conventional systems may be to ask them to upgrade to another version of code which a risk averse customer may be reluctant to do. Accordingly it is desirable to provide techniques that increase the flexibility of patch development.

In accordance with embodiments there are provided mechanisms and methods for associating a plurality of stored elements with a creation of a patch. These mechanisms and methods for associating a plurality of stored elements with a creation of a patch can enable improved patch development for multi tenant on demand database systems improved patch flexibility etc.

In an embodiment and by way of example a method for associating a plurality of stored elements with a creation of a patch is provided. In one embodiment creation of a first version of code to be installed in a multi tenant on demand database system is identified. Additionally a plurality of elements associated with the creation of the first version of code is stored. Further creation of a patch associated with the first version of code is identified. Further still the stored plurality of elements is associated with the creation of the patch. In another embodiment creation of a first version of code to be installed within a multi tenant on demand database system is identified. Additionally creation of a second version of code to be installed within the multi tenant on demand database system is identified. Further creation of a patch associated with the first version of the code is enabled after the creation of the second version of the code.

While one or more implementations and techniques are described with reference to an embodiment in which enabling an aspect required with respect to code to be installed within a multi tenant on demand database system is implemented in a system having an application server providing a front end for an on demand database system capable of supporting multiple tenants the one or more implementations and techniques are not limited to multi tenant databases nor deployment on application servers. Embodiments may be practiced using other database architectures i.e. ORACLE DB2 by IBM and the like without departing from the scope of the embodiments claimed.

Any of the above embodiments may be used alone or together with one another in any combination. The one or more implementations encompassed within this specification may also include embodiments that are only partially mentioned or alluded to or are not mentioned or alluded to at all in this brief summary or in the abstract. Although various embodiments may have been motivated by various deficiencies with the prior art which may be discussed or alluded to in one or more places in the specification the embodiments do not necessarily address any of these deficiencies. In other words different embodiments may address different deficiencies that may be discussed in the specification. Some embodiments may only partially address some deficiencies or just one deficiency that may be discussed in the specification and some embodiments may not address any of these deficiencies.

Systems and methods are provided for associating a plurality of stored elements with a creation of a patch.

As used herein the term multi tenant database system refers to those systems in which various elements of hardware and software of the database system may be shared by one or more customers. For example a given application server may simultaneously process requests for a great number of customers and a given database table may store rows for a potentially much greater number of customers.

Next mechanisms and methods for associating a plurality of stored elements with a creation of a patch will be described with reference to example embodiments.

In another embodiment the code may be associated with a platform of the multi tenant on demand database system. For example the code may be drafted in a programming language associated with the multi tenant on demand database system. In another example the code may be drafted in order to integrate with the platform of the multi tenant on demand database system.

Additionally in one embodiment the code may be drafted by an entity associated with the multi tenant on demand database system. For example the code may be drafted by a partner of the multi tenant on demand database system a developer associated with the multi tenant on demand database system etc. Further in another embodiment the code may provide a service in association with the multi tenant on demand database system. In another embodiment the code may include an enhancement of a service provided by the multi tenant on demand database system.

It should be noted that as described above such multi tenant on demand database system may include any service that relies on a database system that is accessible over a network in which various elements of hardware and software of the database system may be shared by one or more customers e.g. tenants . For instance a given application server may simultaneously process requests for a great number of customers and a given database table may store rows for a potentially much greater number of customers. Various examples of such a multi tenant on demand database system will be set forth in the context of different embodiments that will be described during reference to subsequent figures.

Additionally in one embodiment the first version of the code may include a particular release of the code. For example the first version of the code may include an initial release of the code a subsequent release of the code after the initial release of the code etc. In yet another embodiment the first version of the code may be associated with a workspace. For example a first workspace e.g. an organization work interface etc. may be used to create the first version of the code.

Further as shown in operation a plurality of elements associated with the creation of the first version of code is stored. In one embodiment the plurality of elements may have been used to create the first version of code. For example the plurality of elements may include one or more version artifacts. In another example the plurality of elements may include a state of the first version of code. For instance the plurality of elements may include one or more custom objects associated with the first version of code one or more pages associated with the first version of code apex code associated with the first version of code triggers associated with the first version of code one or more elements of metadata one or more settings etc.

Additionally in one embodiment the plurality of elements may be extracted from the workspace used to create the first version of code. For example the plurality of elements may be copied from the workspace. In another embodiment the plurality of elements may be extracted and or stored using an application programming interface API e.g. a metadata API etc. . Further in one embodiment the plurality of elements may be stored in one or more formats e.g. Extensible Markup Language XML etc. . In another embodiment the plurality of elements may be stored in a compressed format e.g. a ZIP format etc. .

Further still in one embodiment the plurality of elements may be stored on a disk e.g. in a local database a remote database etc. . In another embodiment the plurality of elements may be stored using cloud computing e.g. utilizing storage of the cloud etc. . Of course however the plurality of elements may be stored in any manner.

Also as shown in operation creation of a patch associated with the first version of code is identified. In one embodiment the patch may improve one or more elements of the first version of code. For example the patch may fix an error in the first version of code may improve upon the first version of code etc. In another embodiment the patch may be added to the first version of code. For example the patch may be integrated with the first version of the code.

Additionally in one embodiment the patch may be associated with a workspace. For example an instance of a workspace e.g. an organization work interface etc. may be used to create the patch. In another embodiment the workspace may include a shell workspace e.g. a blank workspace etc. . Further in another embodiment a second version of the code to be installed within the multi tenant on demand database system may be created after the creation of the first version of the code but before the patch is created. In yet another embodiment the second version of the code may be associated with a second workspace. For example a second instance of the workspace may be used to create the second version of the code where the second workspace is different from the first workspace used to create the first version of the code.

Furthermore as shown in operation the stored plurality of elements is associated with the creation of the patch. In one embodiment the plurality of elements may be retrieved from where they were stored. Additionally in another embodiment the plurality of elements may be associated e.g. integrated etc. with the workspace associated with the patch. For example the plurality of elements may be deployed into the blank workspace associated with the patch. In this way the developer of the patch may be able to create the patch for the first version of the code even though the second version of the code has already been created. Additionally the patch for the first version of the code may be created utilizing a workspace that is similar to the workspace used during the creation of the first version of code.

As shown in operation creation of a first version of code to be installed within a multi tenant on demand database system is identified. In one embodiment the first version of the code may be created by a developer utilizing an instance of a workspace. In another embodiment the first version of code may be associated with a version number. For example the first version of code may be designated version 1.0 etc.

Additionally as shown in operation creation of a second version of the code to be installed within the multi tenant on demand database system is identified. In one embodiment the second version of the code may be created by the developer or a developer other than the developer who created the first version of code utilizing an instance of a workspace other than the instance of the workspace utilized to create the first version of the code. In another embodiment the second version of code may be associated with a version number. For example the second version of code may be designated version 2.0 etc.

Further as shown in operation creation of a patch associated with the first version of the code is enabled after the creation of the second version of the code. In one embodiment enabling the creation of the patch may include extracting and storing one or more elements associated with the creation of the first version of code. Additionally the one or more elements may then be associated with the creation of the patch. Additionally the patch may be associated with an extension of the version number of the first version of code. For example the patch may be designated version 1.0.1 etc. In another embodiment the patch associated with the first version of the code may branch off the first version of the code e.g. using horizontal branching etc. and may not branch off the second version of the code e.g. using vertical branching etc. .

As shown in operation version 1.0 of an installable program is uploaded to a multi tenant on demand database system. In one embodiment a developer may create version 1.0 of the program in a first workspace and upload version 1.0 of the program to the multi tenant on demand database system for subsequent installation of the program by a user. Additionally as shown in operation a user installs version 1.0 of the program. For example the user may access an account of the multi tenant on demand database system and request that version 1.0 of the program is installed within that account.

Further as shown in operation version 2.0 of the installable program is uploaded to the multi tenant on demand database system. In one embodiment the developer may create version 2.0 of the program in a second workspace other than the first workspace and upload version 2.0 of the program to the multi tenant on demand database system for subsequent installation of the program by a user. Further still as shown in operation a bug is discovered in version 1.0 of the program. In one embodiment the developer may discover the bug in version 1.0. In another embodiment one or more users who have installed version 1.0 of the program may discover the bug and alert the developer e.g. via an electronic mail message etc. .

Also as shown in operation the workspace used to create version 1.0 of the program is recreated. In one embodiment one or more elements associated with the workspace used by the developer to create version 1.0 of the program may be extracted and saved when the developer originally created version 1.0 of the program. Additionally these elements may then be associated with a new workspace in order to recreated the workspace used to create version 1.0 of the program.

In addition as shown in operation the developer fixes the bug by creating a patch using the recreated workspace and uploads patched version 1.0.1 of the program to the multi tenant on demand database system for subsequent installation by the user. Furthermore as shown in operation the user that installed version 1.0 of the program installs version 1.0.1 of the program. In one embodiment version 1.0.1 of the program may be manually installed by the user may be automatically installed based on one or more predetermined criteria etc.

In this way a workspace may be created to assist in developing an earlier version of the program than the latest available version. This workspace may replicate the development state in the workspace that has all the elements associated with version 1.0 of the program e.g. the state in which version 1.0 was created . Further the workspace may enable the developer to release a patch utilizing horizontal branching e.g. from version 1.0 to 1.0.1 instead of vertical branching e.g. from version 1.0 to version 1.3 such that the patch is branched off of the version of the program that has the bug.

As shown in operation a version of a package is created by a developer in an organization. For example the developer may create the version of the package in the main developer folder of a multi tenant on demand database system. Additionally as shown in operation elements associated with the package version organization are extracted and stored. For example the elements may include one or more settings e.g. customer settings etc. one or more licenses one or more values e.g. user values etc. etc.

In another example the elements may include one or more organizational level features e.g. an organizational shape etc. . For example the elements may include features enabled in the organization that the package depends on e.g. subscription features features that have to be specifically enabled etc. In another example the elements may include feature requirements of the package data. Further in one embodiment the elements may include one or more package level features. For example the elements may include package version artifacts stored in XML data one or more elements of metadata e.g. in a zip file etc.

Additionally as shown in operation it is determined that the developer wants to create a patch for the version of the package. For example the developer may select one or more icons of the multi tenant on demand database system input one or more requests to the multi tenant on demand database system etc. In response as shown in operation a new developer organization is created. For example an empty shell organization may be created within the multi tenant on demand database system from a main developer folder.

Further as shown in operation the stored elements associated with the package version workspace are retrieved and deployed to the new developer organization. In one embodiment organizational level features may be copied to the organization first followed by package level features. In another embodiment feature requirements may be tracked in the package data and if one or more of the features are not enabled an error message may be presented to the developer. In another embodiment the package level features may be deployed into the developer organization as metadata in a zip file e.g. using a metadata API etc. .

In another embodiment name sharing may be enabled. For example the new developer organization used to create the patch may have the same name as the organization used to create the package version. In another embodiment one or more manual adjustments may be allowed by the developer. For example the developer may be allowed to access and alter the new organization so that the developer can log in and adjust the new organization e.g. to fix any errors associated with deployment of the stored elements to roll back the organization to avoid one or more bugs etc. .

In this way the deployment of the stored elements into the new developer organization used to patch the version of the package may enable the new developer organization to look and act the same as the workspace used by the developer to create the version of the package. In one embodiment this may be performed in an on demand manner whenever the developer wishes to create a patch for a package version.

To further illustrate consider a patch development organization patch org that allows a partner as a part of a large push upgrade project to upgrade their customers using a push model. In one embodiment the patch org is a salesforce.com inc. organization. In other embodiments it may be an organization hosted by another service provider.

In one embodiment the patch org includes a workspace as described above that allows the partner to branch previous versions of a released managed package. For instance the patch org provides the partner with a workspace in which they can create and upload patch fixes for their packages.

In one embodiment packages may include applications that partners develop on the multi tenant on demand database system platform. In another embodiment package development and publication may be sequential i.e. the partner may make changes until satisfied then may upload a released version of the package which can be installed by customers . The partner may then make more changes to the package and may upload another released version which customers may install and so on.

Over time the partner may end up with a fragmented customer base on different versions of the application. Patch orgs may solve this problem by allowing a partner to create a targeted fix a patch for a previously released version by re creating the state of the development organization as it existed at the time the previous version was uploaded. Customers may then install this patch and may not be forced to upgrade to a later version.

In source control terms a patch org may be an on demand branch meaning the patch org may be in the same state as if forked from the main development branch at the time a particular package version was uploaded. For example a partner may have created various versions of an application. Assume that version 6.0 of the application fixes a critical bug introduced in version 3.0. A customer on version 4.0 may not need to upgrade all the way to version 6.0 to get this bug fix since by using a patch org the partner can create a targeted patch for version 4.0 4.0.1. In this example the customer s on version 4.0 can install the 4.0.1 patch to fix the bug.

Additionally in one embodiment a metadata API e.g. mdAPI etc. may support legacy package versions. In this or another embodiment the mdAPI itself may be versioned. In another embodiment package upload and install may rely on the mdAPI to create a package version artifact e.g. the metadata zip etc. . In another embodiment this artifact may be used to drive patch org creation using the mdAPI.

Further in another embodiment a patch org may be created with the mdAPI by first signing up a barebones shell organization with the proper organization permissions and preferences e.g. dev organization shape etc. and then deploying the stored elements e.g. version artifacts as developed metadata. In one embodiment deploying the stored elements may involve work in five areas although more or less work may be involved. In this example the first area of work is the uploading the package which may include defining at upload time the shape of the base development organization in order to create a patch org with the proper parameters. The second area can include a sign up step which creates the development organization shell and modifies it to fit the shape of the base organization associated with the stored elements and a snapshot of the development organization s shape.

The third area of work may include the steps and systems necessary to deploy a package. In one embodiment deploying a package may include deploying metadata from the stored elements associated with a package as developed metadata once the patch org is up. In another embodiment prior to this there may need to be some tweaking of the org that does not involve permissions or preferences e.g. Entity Org Shape etc. . The fourth area of work may include blacktab support. In one embodiment blacktab support may include the ability to access and modify the permissions and preferences of a signed up patch org or to restart the sign up process in the cases where package deploy fails due to organization shape. The fifth area of work includes maintaining developer control over the patch org. For example in one embodiment this may include limiting what developers are allowed to do within the org once a patch org has been successfully created.

In one embodiment at package upload time a snapshot of the development organization s shape and the user license of the uploading user are taken. These snapshots may be serialized and added as stored elements associated with a package. By doing this the stored elements may be replicated via fileforce replication. Also this may mean that patch org creation only depends on one replicated stored element instead of two.

It should be noted that development organization shape may be different from package organization s shape. The development organization shape may describe the organization permissions and preferences present in a whole development organization e.g. the base dev org or the patch dev org etc. . In one embodiment the package organization shape may describe the org permissions and preferences needed in a subscriber org in order to install or upgrade a particular package version. Package organization shape may play a role in patch org creation.

Also in another embodiment at sign up the current main development organization shape may be copied to the patch org. Additionally one or more things that may need to happen during signup. For example a new organization may be created with a new user e.g. copied from the signing up user etc. and with the proper patch org permissions. Additionally the new organization may be provisioned so that parameters and preferences match those of the main development organization. Further static provisioning may be performed based on the fact that this is a patch dev org. In another embodiment the task of creating the new org may be accomplished using a handler stack e.g. in a salesforce.com implementation a call is made to the EDITION ORG ROW ONLY SIGNUP HANDLERS . However there may need to be more sign up handlers added on to the end to perform the other tasks.

In yet another embodiment an organization may be identified as a patch org based on the database state in the organization row specifically the parent org id column . For example the parent org id may be replaced by an identifier that identifies an organization as a patch org. The new org permission may allow us to more easily provision patch orgs and may fit into the org permission dependency tree.

There are some permissions and preferences that may be on or off despite the base development organization shape. Table 1 illustrates examples of permissions and preferences that may be on or off in a salesforce.com specific implementation. Of course it should be noted that the examples shown in Table 1 are set forth for illustrative purposes only and thus should not be construed as limiting in any manner.

In another embodiment once a patch org has been successfully signed up and provisioned metadata in the package version artifact may be deployed into it as developed metadata. For example in a salesforce.com implementation the PackageInstallEngine may be instantiated to handle package deploy for patch orgs. This new instantiation may be tasked with doing one or more of setting up any non provisioned package org shape deploying the metadata performing post copy DML operations e.g. for extensions and id mappings etc. connecting AMPM foreign keys sending a success or failure email etc.

Additionally in one embodiment package org shapes may be handled during signup when the developer organization shape is copied from the base development organization. However there may be some exceptions examples of which are detailed below. Table 2 illustrates various possible feature org shape exceptions in a salesforce.com specific implementation. Of course it should be noted that the exceptions shown in Table 2 are set forth for illustrative purposes only and thus should not be construed as limiting in any manner.

In another embodiment no entity org shape may be handled at signup time and all of it may have to be handled at deploy time. Table 3 illustrates various possible entity organization shape exceptions according to one embodiment. Of course it should be noted that the exceptions shown in Table 3 are set forth for illustrative purposes only and thus should not be construed as limiting in any manner.

In yet another embodiment patch orgs may be used for a limited amount of time e.g. 30 days etc. . In another embodiment if the partner wants to patch the same version again the patch org may be recreated and the latest patch may be uploaded from that patch org. For example Patch 1.0 1.01 in dev. 1.01 and 1.0.2 may be uploaded from patch org. If 30 days pass the patch org may be deleted. Further if the developer then wants to release 1.0.3 the patch org 1.0.2 may be recreated.

Additionally in one embodiment a package deploy into the patch org may not initially succeed. In one embodiment a blacktab page may be created to try and fix the signed up patch dev org. At a minimum the blacktab page may be able to easily turn on off org permissions and preferences adjust non provisioned package org shape e.g. create record types etc. retry the package deployment etc.

In another embodiment because a development organization shape may be copied from a base organization patch org developers may not be able to do anything in a patch org that is forbidden in the base organization. They may be further restricted by the static permissions setup during signup.

Table 4 illustrates an exemplary provisioned package org shape. Of course it should be noted that the provisioned package org shape shown in Table 4 is set forth for illustrative purposes only and thus should not be construed as limiting in any manner.

Environment is an environment in which an on demand database system exists. User system may be any machine or system that is used by a user to access a database user system. For example any of user systems can be a handheld computing device a mobile phone a laptop computer a work station and or a network of computing devices. As illustrated in and in more detail in user systems might interact via a network with an on demand database system which is system .

An on demand database system such as system is a database system that is made available to outside users that do not need to necessarily be concerned with building and or maintaining the database system but instead may be available for their use when the users need the database system e.g. on the demand of the users . Some on demand database systems may store information from one or more tenants stored into tables of a common database image to form a multi tenant database system MTS . Accordingly on demand database system and system will be used interchangeably herein. A database image may include one or more database objects. A relational database management system RDMS or the equivalent may execute storage and retrieval of information against the database object s . Application platform may be a framework that allows the applications of system to run such as the hardware and or software e.g. the operating system. In an embodiment on demand database system may include an application platform that enables creation managing and executing one or more applications developed by the provider of the on demand database system users accessing the on demand database system via user systems or third party application developers accessing the on demand database system via user systems .

The users of user systems may differ in their respective capacities and the capacity of a particular user system might be entirely determined by permissions permission levels for the current user. For example where a salesperson is using a particular user system to interact with system that user system has the capacities allotted to that salesperson. However while an administrator is using that user system to interact with system that user system has the capacities allotted to that administrator. In systems with a hierarchical role model users at one permission level may have access to applications data and database information accessible by a lower permission level user but may not have access to certain applications database information and data accessible by a user at a higher permission level. Thus different users will have different capabilities with regard to accessing and modifying application and database information depending on a user s security or permission level.

Network is any network or combination of networks of devices that communicate with one another. For example network can be any one or any combination of a LAN local area network WAN wide area network telephone network wireless network point to point network star network token ring network hub network or other appropriate configuration. As the most common type of computer network in current use is a TCP IP Transfer Control Protocol and Internet Protocol network such as the global internetwork of networks often referred to as the Internet with a capital I that network will be used in many of the examples herein. However it should be understood that the networks that the one or more implementations might use are not so limited although TCP IP is a frequently implemented protocol.

User systems might communicate with system using TCP IP and at a higher network level use other common Internet protocols to communicate such as HTTP FTP AFS WAP etc. In an example where HTTP is used user system might include an HTTP client commonly referred to as a browser for sending and receiving HTTP messages to and from an HTTP server at system . Such an HTTP server might be implemented as the sole network interface between system and network but other techniques might be used as well or instead. In some implementations the interface between system and network includes load sharing functionality such as round robin HTTP request distributors to balance loads and distribute incoming HTTP requests evenly over a plurality of servers. At least as for the users that are accessing that server each of the plurality of servers has access to the MTS data however other alternative configurations may be used instead.

In one embodiment system shown in implements a web based customer relationship management CRM system. For example in one embodiment system includes application servers configured to implement and execute CRM software applications as well as provide related data code forms webpages and other information to and from user systems and to store to and retrieve from a database system related data objects and Webpage content. With a multi tenant system data for multiple tenants may be stored in the same physical database object however tenant data typically is arranged so that data of one tenant is kept logically separate from that of other tenants so that one tenant does not have access to another tenant s data unless such data is expressly shared. In certain embodiments system implements applications other than or in addition to a CRM application. For example system may provide tenant access to multiple hosted standard and custom applications including a CRM application. User or third party developer applications which may or may not include CRM may be supported by the application platform which manages creation storage of the applications into one or more database objects and executing of the applications in a virtual machine in the process space of the system .

One arrangement for elements of system is shown in including a network interface application platform tenant data storage for tenant data system data storage for system data accessible to system and possibly multiple tenants program code for implementing various functions of system and a process space for executing MTS system processes and tenant specific processes such as running applications as part of an application hosting service. Additional processes that may execute on system include database indexing processes.

Several elements in the system shown in include conventional well known elements that are explained only briefly here. For example each user system could include a desktop personal computer workstation laptop PDA cell phone or any wireless access protocol WAP enabled device or any other computing device capable of interfacing directly or indirectly to the Internet or other network connection. User system typically runs an HTTP client e.g. a browsing program such as Microsoft s Internet Explorer browser Netscape s Navigator browser Opera s browser or a WAP enabled browser in the case of a cell phone PDA or other wireless device or the like allowing a user e.g. subscriber of the multi tenant database system of user system to access process and view information pages and applications available to it from system over network . Each user system also typically includes one or more user interface devices such as a keyboard a mouse trackball touch pad touch screen pen or the like for interacting with a graphical user interface GUI provided by the browser on a display e.g. a monitor screen LCD display etc. in conjunction with pages forms applications and other information provided by system or other systems or servers. For example the user interface device can be used to access data and applications hosted by system and to perform searches on stored data and otherwise allow a user to interact with various GUI pages that may be presented to a user. As discussed above embodiments are suitable for use with the Internet which refers to a specific global internetwork of networks. However it should be understood that other networks can be used instead of the Internet such as an intranet an extranet a virtual private network VPN a non TCP IP based network any LAN or WAN or the like.

According to one embodiment each user system and all of its components are operator configurable using applications such as a browser including computer code run using a central processing unit such as an Intel Pentium processor or the like. Similarly system and additional instances of an MTS where more than one is present and all of their components might be operator configurable using application s including computer code to run using a central processing unit such as processor system which may include an Intel Pentium processor or the like and or multiple processor units. A computer program product embodiment includes a machine readable storage medium media having instructions stored thereon in which can be used to program a computer to perform any of the processes of the embodiments described herein. Computer code for operating and configuring system to intercommunicate and to process webpages applications and other data and media content as described herein are preferably downloaded and stored on a hard disk but the entire program code or portions thereof may also be stored in any other volatile or non volatile memory medium or device as is well known such as a ROM or RAM or provided on any media capable of storing program code such as any type of rotating media including floppy disks optical discs digital versatile disk DVD compact disk CD microdrive and magneto optical disks and magnetic or optical cards nanosystems including molecular memory ICs or any type of media or device suitable for storing instructions and or data. Additionally the entire program code or portions thereof may be transmitted and downloaded from a software source over a transmission medium e.g. over the Internet or from another server as is well known or transmitted over any other conventional network connection as is well known e.g. extranet VPN LAN etc. using any communication medium and protocols e.g. TCP IP HTTP HTTPS Ethernet etc. as are well known. It will also be appreciated that computer code for implementing embodiments can be implemented in any programming language that can be executed on a client system and or server or server system such as for example C C HTML any other markup language Java JavaScript ActiveX any other scripting language such as VBScript and many other programming languages as are well known may be used. Java is a trademark of Sun Microsystems Inc. .

According to one embodiment each system is configured to provide webpages forms applications data and media content to user client systems to support the access by user systems as tenants of system . As such system provides security mechanisms to keep each tenant s data separate unless the data is shared. If more than one MTS is used they may be located in close proximity to one another e.g. in a server farm located in a single building or campus or they may be distributed at locations remote from one another e.g. one or more servers located in city A and one or more servers located in city B . As used herein each MTS could include one or more logically and or physically connected servers distributed locally or across one or more geographic locations. Additionally the term server is meant to include a computer system including processing hardware and process space s and an associated storage system and database application e.g. OODBMS or RDBMS as is well known in the art. It should also be understood that server system and server are often used interchangeably herein. Similarly the database object described herein can be implemented as single databases a distributed database a collection of distributed databases a database with redundant online or offline backups or other redundancies etc. and might include a distributed database or storage network and associated processing intelligence.

User system network system tenant data storage and system data storage were discussed above in . Regarding user system processor system A may be any combination of one or more processors. Memory system B may be any combination of one or more memory devices short term and or long term memory. Input system C may be any combination of input devices such as one or more keyboards mice trackballs scanners cameras and or interfaces to networks. Output system D may be any combination of output devices such as one or more monitors printers and or interfaces to networks. As shown by system may include a network interface of implemented as a set of HTTP application servers an application platform tenant data storage and system data storage . Also shown is system process space including individual tenant process spaces and a tenant management process space . Each application server may be configured to tenant data storage and the tenant data therein and system data storage and the system data therein to serve requests of user systems . The tenant data might be divided into individual tenant storage areas which can be either a physical arrangement and or a logical arrangement of data. Within each tenant storage area user storage and application metadata might be similarly allocated for each user. For example a copy of a user s most recently used MRU items might be stored to user storage . Similarly a copy of MRU items for an entire organization that is a tenant might be stored to tenant storage area . A UI provides a user interface and an API provides an application programmer interface to system resident processes to users and or developers at user systems . The tenant data and the system data may be stored in various databases such as one or more Oracle databases.

Application platform includes an application setup mechanism that supports application developers creation and management of applications which may be saved as metadata into tenant data storage by save routines for execution by subscribers as one or more tenant process spaces managed by tenant management process for example. Invocations to such applications may be coded using PL SOQL that provides a programming language style interface extension to API . A detailed description of some PL SOQL language embodiments is discussed in commonly owned co pending U.S. Provisional Patent Application 60 828 192 entitled PROGRAMMING LANGUAGE METHOD AND SYSTEM FOR EXTENDING APIS TO EXECUTE IN CONJUNCTION WITH DATABASE APIS by Craig Weissman filed Oct. 4 2006 which is incorporated in its entirety herein for all purposes. Invocations to applications may be detected by one or more system processes which manages retrieving application metadata for the subscriber making the invocation and executing the metadata as an application in a virtual machine.

Each application server may be communicably coupled to database systems e.g. having access to system data and tenant data via a different network connection. For example one application server might be coupled via the network e.g. the Internet another application server might be coupled via a direct network link and another application server might be coupled by yet a different network connection. Transfer Control Protocol and Internet Protocol TCP IP are typical protocols for communicating between application servers and the database system. However it will be apparent to one skilled in the art that other transport protocols may be used to optimize the system depending on the network interconnect used.

In certain embodiments each application server is configured to handle requests for any user associated with any organization that is a tenant. Because it is desirable to be able to add and remove application servers from the server pool at any time for any reason there is preferably no server affinity for a user and or organization to a specific application server . In one embodiment therefore an interface system implementing a load balancing function e.g. an F5 Big IP load balancer is communicably coupled between the application servers and the user systems to distribute requests to the application servers . In one embodiment the load balancer uses a least connections algorithm to route user requests to the application servers . Other examples of load balancing algorithms such as round robin and observed response time also can be used. For example in certain embodiments three consecutive requests from the same user could hit three different application servers and three requests from different users could hit the same application server . In this manner system is multi tenant wherein system handles storage of and access to different objects data and applications across disparate users and organizations.

As an example of storage one tenant might be a company that employs a sales force where each salesperson uses system to manage their sales process. Thus a user might maintain contact data leads data customer follow up data performance data goals and progress data etc. all applicable to that user s personal sales process e.g. in tenant data storage . In an example of a MTS arrangement since all of the data and the applications to access view modify report transmit calculate etc. can be maintained and accessed by a user system having nothing more than network access the user can manage his or her sales efforts and cycles from any of many different user systems. For example if a salesperson is visiting a customer and the customer has Internet access in their lobby the salesperson can obtain critical updates as to that customer while waiting for the customer to arrive in the lobby.

While each user s data might be separate from other users data regardless of the employers of each user some data might be organization wide data shared or accessible by a plurality of users or all of the users for a given organization that is a tenant. Thus there might be some data structures managed by system that are allocated at the tenant level while other data structures might be managed at the user level. Because an MTS might support multiple tenants including possible competitors the MTS should have security protocols that keep data applications and application use separate. Also because many tenants may opt for access to an MTS rather than maintain their own system redundancy up time and backup are additional functions that may be implemented in the MTS. In addition to user specific data and tenant specific data system might also maintain system level data usable by multiple tenants or other data. Such system level data might include industry reports news postings and the like that are sharable among tenants.

In certain embodiments user systems which may be client systems communicate with application servers to request and update system level and tenant level data from system that may require sending one or more queries to tenant data storage and or system data storage . System e.g. an application server in system automatically generates one or more SQL statements e.g. one or more SQL queries that are designed to access the desired information. System data storage may generate query plans to access the requested data from the database.

Each database can generally be viewed as a collection of objects such as a set of logical tables containing data fitted into predefined categories. A table is one representation of a data object and may be used herein to simplify the conceptual description of objects and custom objects. It should be understood that table and object may be used interchangeably herein. Each table generally contains one or more data categories logically arranged as columns or fields in a viewable schema. Each row or record of a table contains an instance of data for each category defined by the fields. For example a CRM database may include a table that describes a customer with fields for basic contact information such as name address phone number fax number etc. Another table might describe a purchase order including fields for information such as customer product sale price date etc. In some multi tenant database systems standard entity tables might be provided for use by all tenants. For CRM database applications such standard entities might include tables for Account Contact Lead and Opportunity data each containing pre defined fields. It should be understood that the word entity may also be used interchangeably herein with object and table .

In some multi tenant database systems tenants may be allowed to create and store custom objects or they may be allowed to customize standard entities or objects for example by creating custom fields for standard objects including custom index fields. U.S. patent application Ser. No. 10 817 161 filed Apr. 2 2004 entitled Custom Entities and Fields in a Multi Tenant Database System and which is hereby incorporated herein by reference teaches systems and methods for creating custom objects as well as customizing standard objects in a multi tenant database system. In certain embodiments for example all custom entity data rows are stored in a single multi tenant physical table which may contain multiple logical tables per organization. It is transparent to customers that their multiple tables are in fact stored in one large table or that their data may be stored in the same table as the data of other customers.

While one or more implementations have been described by way of example and in terms of the specific embodiments it is to be understood that one or more implementations are not limited to the disclosed embodiments. To the contrary it is intended to cover various modifications and similar arrangements as would be apparent to those skilled in the art. Therefore the scope of the appended claims should be accorded the broadest interpretation so as to encompass all such modifications and similar arrangements.

