---

title: Generating web services from business intelligence queries
abstract: In an embodiment of the invention, analytical data may be extracted from a business intelligence (BI) system on criteria specified in metadata of a business intelligence query. Once the data is extracted from the BI system, the extracted content may be provided in the context of semantic identifiers. In an embodiment, the semantic identifiers may provide a description of the extracted content associated with the identifier. In one embodiment, the semantic identifiers may be obtained from the criteria specified in the query. In another embodiment, the semantic identifiers may be defined in and obtained from a separate enterprise service repository. In an embodiment, a proposed mapping between query elements and semantic identifiers may be suggested by a processor.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08438190&OS=08438190&RS=08438190
owner: SAP AG
number: 08438190
owner_city: Walldorf
owner_country: DE
publication_date: 20100108
---
Organizations rely on business intelligence BI to support decision making. Business intelligence may support business decision making by extracting information from business intelligence systems such as data warehouses for instance analyzing the extracted information and organizing the analyzed results into a desired structure to facilitate business decision making. In some instances organizations may use different business warehouse systems data analysis systems and systems to organize or present the analyzed data in a desired structure. Each of these different systems may contain applications supplied by different vendors and therefore have different interoperability interfaces.

Various protocols have been developed to ensure interoperability of these different business intelligence components. XML for Analytics XMLA is a simple object access protocol interface that is commonly used for data access for analytical purposes. However XMLA requires multidimensional expressions MDX language statements to extract and manipulate data from online analytical processing databases typically found in business intelligence systems. Writing MDX statements requires programming skills which implies additional costs because of the necessary developer profiles required. Additionally even if a developer of a consumer application is able to formulate a MDX statement to extract and manipulate the desired data the resulting non semantic output an example of which is shown in is difficult to understand.

One reason that XMLA data set outputs such as data set output do not contain descriptions or semantic identifiers associated with the specific data values is that XMLA is designed to access and retrieve data from any BI system data provider. Because XMLA is designed as a universal protocol for accessing data from any data provider the interface and the data set output is generic and non semantic.

However in organizations with multiple computing systems additional flexibility in using data output from business intelligence systems may be necessary. For example instead of directly presenting the data set output an organization may want to export the business intelligence system data output to another system such as an enterprise resource planning system or a customer relationship management system. To ensure compatibility with these systems the output data may have to be transformed to a format recognized by the other systems. The non semantic query result output from these business intelligence systems makes it difficult for an organization to integrate the query result output into other systems and applications.

While it may be possible to manually create a program that provides the results of business intelligence system queries in a desired semantically meaningful output format the necessary manual implementation would be cumbersome and inefficient. Every time a new query is created or an existing query is substantially modified the program would have to be altered to provide the queries results into the desired format. Not only is this process cumbersome and resource intensive but it may also require specialized programming skills that may limit the number of individuals in an organization who can manually modify the program.

Other interfaces such as the Business Intelligence Consumer Services do not overcome these limitations. Although these interfaces support object models enabling selection of desired search criteria through a graphical user interface instead of through a programming syntax such as MDX these interfaces also produce the same non semantic output shown in .

There is a need for an interface tool that automatically provides generic business intelligence system query results in an intuitive semantic structure easily consumable by other systems in an organization while providing non programming declarative data access.

In an embodiment of the invention business intelligence content may be extracted from a BI system based on criteria specified in metadata of a business intelligence query. Once the business intelligence content is extracted from the BI system the content may be exposed along with its semantic meaning. In an embodiment semantic identifiers may provide a description of the extracted content associated with the identifier. In one embodiment the semantic identifiers may be obtained from the criteria specified in the query. In another embodiment the semantic identifiers may be defined in and obtained from a separate enterprise service repository. In an embodiment a proposed mapping between elements of the query and the semantic identifiers may be suggested by a processor. The proposed mapping may be adaptive and may suggest a mapping in view of related mappings previously selected by one or more users.

In an embodiment a query designer application may include a set of computer instructions that when executed by a processor allow a user to design a business intelligence query to retrieve data from a business intelligence system. A query designer may provide a graphical user interface for a user with little programming experience to enable the user to design a suitable query by pointing and clicking and or dragging objects in an embodiment. In an embodiment the web service generation request may be triggered after a query is created displayed or modified in the query designer application though in other embodiments the web service generation request may be triggered from another application. Once a web service generation request has been initiated a business intelligence system query related to the web service generation request may be sent to a web service generator application . In an embodiment the business intelligence query may be selected by a user before or after the web service generation request is initiated. In an embodiment the business intelligence system query may be selected from the query designer application . In an embodiment the business intelligence query associated with a particular web service request may be identified by user input through a database or lookup table.

In an embodiment once the business intelligence query has been identified one or more configurations corresponding to application logic or fields of the query may be retrieved by the service generation application . Configurations may be retrieved by the service generation application in different embodiments before or after business intelligence content data is extracted from the business intelligence system .

In an embodiment each configuration may contain a mapping between fields in a business intelligence query and corresponding fields in a web service output. In an embodiment the fields in a web service output may include structures and elements typed by data structures and data types specified in the business intelligence system query . In another embodiment the fields in a web service output may include structures and elements typed by data structures and data types specified in an Enterprise Service Repository. In an embodiment the selected business intelligence system query may be used to retrieve business intelligence metadata from the business intelligence system responsive to the query . In an embodiment the metadata sent from the business intelligence system responsive to the query may contain the desired results of the query. In an embodiment the configuration associated with the query may be used to identify the portions of the returned metadata containing the desired results.

Once the portions of the metadata containing the desired results have been identified content corresponding to the identified metadata may be read from enterprise services repository . In an embodiment the content read from the repository may be identified by comparing one or more objects in the metadata to a mapping to identify the corresponding data types in the repository .

Once the portions of the metadata and or the corresponding content from the enterprise services repository have been identified new artifacts may be created using the corresponding web service output fields in the configuration and or corresponding content from repository as well as the portions of the metadata containing the desired results. The new artifacts in an embodiment may contain programming instructions specifying a structure of an output of the web service request . Each of the new artifacts and associated configurations may be customized for different programming languages such as ABAP or user configured data structures. Each of the artifacts may also be stored in an ABAP dictionary in an embodiment.

In some embodiments the data elements used in business intelligence systems and queries may not directly correspond to data elements used in other systems of the organization. For example in an embodiment where pre existing business intelligence systems and content is used to create business intelligence queries the query elements and fields in the business intelligence queries may not directly correspond to elements and nodes of business objects used in some other computing systems of the organization. In such a circumstance it may be necessary to create a transformation rule for structure and value mapping between the two systems based on the content obtained from the repository . In an embodiment programming instructions based on the transformation rules for each of the data elements in the selected business intelligence query may be created and stored in an ABAP dictionary .

In different embodiments a plurality of pieces of programming instructions specifying the output structure and or mapping of data elements in the business intelligence system query output may be stored and used. For example in an embodiment multiple programming instruction pieces may be combined where each instruction piece is limited to mapping a portion of query elements used in a particular query .

Once the necessary instructions have been generated the instructions may be bound to an object action or event so that when a triggering condition of the object action or event is satisfied the selected query will execute and the results will be automatically transformed into a specified format with any further user intervention. shows an exemplary output in an embodiment of the invention where a selected query has been executed and the result of the query have been transformed into specified format having semantic identifiers for each output value.

For example the tag may refer to a Sold to node in a customer relationship management system in an embodiment. Additionally the and tags within the tag may refer to ID and Description elements within the Sold to node. Thus in the example of the item in the tag may have been sold to a customer with ID 3271 which is named media store .

The other tags in the tag such as and may refer to order quantity net price gross order value and net order value nodes respectively. In an embodiment each of these semantic tags may refer to business intelligence query characteristics or key figures. In another embodiment each of these semantic tag names may also refer to data structures and data types specified in an Enterprise Service Repository. Thus once the data is exported to another system the results can be readily processed without any additional transformational programming steps by the user.

The semantic output data shown in may be designed and structured in an embodiment so the data embedded within the output can be readily used by other programs. In addition to the output data format shown in other embodiments may have different output formats. For example in other embodiments the tag names and structure may vary depending on the business objects nodes and elements used in the other systems using the output from the business intelligence system. The generic XMLA output shown in however may not be readily used by other programs until the data in the output is identified and associated with corresponding fields in the other programs.

In an embodiment each provider class may contain a set of specific instructions in ABAP for transforming query results into a desired semantic output format. Each function module may contain a set of specific instructions in ABAP for transforming query results into a desired semantic output format. In an embodiment multiple service implementations may exist for different web services to create a desired transformation service when extracting the desired BI query data.

In an embodiment the implementation of the desired transformation service may operate on a result of a BI query in box . Query results may be generated through a multiprovider in box interacting with the BI query in box and source data in box .

In an embodiment the web services provider may support three different types of semantics for the transformation following either the SOAP W3C standards or the Representational State Transfer REST service architecture style. Level enterprise web service semantics in box may be used when the query results from the BI system may be mapped to corresponding objects in different systems. Level basic web service semantics in box may be used when the query results represent the same object and or the same semantic meanings associated with the objects of the BI system. Web service following the REST style in box may be used in other circumstances when customized semantic transformations that may not be supported by level or level SOAP web services are needed.

In an embodiment the type of semantics of the web service provider may be selected by configuration settings in the particular context. The selected semantic type may be used in conjunction with the service implementation to transform a result from the BI query to a desired semantic format. In an embodiment the web service provider may expose the BI query result based on the default query view .

In an embodiment various components may be used to generate programming instructions for transforming BI query results. For example in an embodiment configuration settings may be used to generate sets of programming instruction pieces for transforming BI query results based on mapping instructions specified in the configuration. These programming pieces may be ABAP classes methods Business Add Ins BAdIs or other forms of program instructions.

In an embodiment context data for a transformation such as an identifier of a corresponding service in an enterprise service repository an identifier of whether data is transferred synchronously asynchronously inbound or outbound or an identifier of backend system names for classes methods and other objects may be used to select the proper configuration or configuration settings and set the correct variables in the programming instructions to transform the BI query results.

In an embodiment a variable may be a user entered field value that focuses a business intelligence query to specific data entered by the user at runtime. Thus in an embodiment the transformation programming instructions may change depending on the context data and the configuration or configuration settings so that some coding sequences may be omitted or included depending on the configuration selected and the context data. In an embodiment however some of the programming instructions may remain unchanged even though the user entered runtime variable value may change.

In an embodiment semantic descriptions used in the transformation of the BI query results may be included in programming instructions. The semantic descriptions may be contained in context parameters or may be specified in the configuration or configuration settings.

In some embodiments query element mappings may be used to transform fields identifiers and elements recognized by business intelligence systems to elements objects nodes and data types used by other systems in an organization. For example query element 0CRM SOLDTO ID recognized by the business intelligence system may be set equal to a similar content field in a CustomerID global data type of web service element 0CRM SOLDTO ID in the enterprise service repository map list on the right of . Thus data in this particular query element may be directly transferred to the corresponding global data type in enterprise service repository. Although in example the query element and corresponding global data type were similar in other situations the global data types may differ from the corresponding query elements .

For example the Currency field of the 0NETVALORD query element may map to a Currency Code field in an Amount global data type of the 0GRSVALORD web services element. Other rules may perform other manipulations and transfers of data between fields.

In box desired data elements recognized by the business intelligence system may be included in a declarative request structure to retrieve specific data from the business intelligence system. In an embodiment supplied values of desired data elements may be included in the declarative request structure to narrow the result to a specific data set to be used for a specific purpose. The data elements and supplied values of the data elements included in the declarative request structure may be contained in a business intelligence system query associated with the web service call. Desired values of particular elements are supplied by a user at runtime so that different values of particular elements may be used when the web service call is initiated.

Once the declarative request structure has been created with data elements and other components recognized by the business intelligence system the web service call may be executed and the request structure may be send to the business intelligence system for data retrieval. The business intelligence system will then return the requested information.

In box a response message is received from the business intelligence system which may contain the desired results. The results in the response message may be incorporated in a corresponding semantic tag or other semantic data to identify the responsive data in the results. Semantic tags and data may include an identifier or description of corresponding data. In some embodiments the identifier or description may correspond to data structures and data types specified in an enterprise service repository.

In box the response may be analyzed and optionally transformed into a desired format compatible with one or more systems using the output in the response from the business intelligence system. In some embodiments additional metadata may be added to the restructured response output in box . The additional metadata may add further descriptive information for the data in the response output. Once the analysis is complete the restructured response output may be processed directly displayed or redirected to a second system to be further processed in box .

Each of the systems in may contain a processor memory containing a database and an input output interface all of which are interconnected via a system bus. In various embodiments each of the systems and may have an architecture with modular hardware and or software systems that include additional and or different systems communicating through one or more networks. The modular design may enable a business to add exchange and upgrade systems including using systems from different vendors in some embodiments. Because of the highly customized nature of these systems different embodiments may have different types quantities and configurations of systems depending on the environment and organizational demands.

In an embodiment memory may contain different components for retrieving presenting changing and saving data. Memory may include a variety of memory devices for example Dynamic Random Access Memory DRAM Static RAM SRAM flash memory cache memory and other memory devices. Additionally for example memory and processor s may be distributed across several different computers that collectively comprise a system.

Processor may perform computation and control functions of a system and comprises a suitable central processing unit CPU . Processor may comprise a single integrated circuit such as a microprocessor or may comprise any suitable number of integrated circuit devices and or circuit boards working in cooperation to accomplish the functions of a processor. Processor may execute computer programs such as object oriented computer programs within memory .

The foregoing description has been presented for purposes of illustration and description. It is not exhaustive and does not limit embodiments of the invention to the precise forms disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from the practicing embodiments consistent with the invention. For example some of the described embodiments may include software and hardware but some systems and methods consistent with the present invention may be implemented in software or hardware alone. Additionally although aspects of the present invention are described as being stored in memory one skilled in the art will appreciate that these aspects can also be stored on other types of computer readable media such as secondary storage devices for example hard disks floppy disks or CD ROM the Internet or other propagation medium or other forms of RAM or ROM.

