---

title: Combining hash-based duplication with sub-block differencing to deduplicate data
abstract: In one embodiment, a method includes accessing data; partitioning the data into sub-blocks; determining whether a first one of the sub-blocks is identical to another one of the sub-blocks or similar to another one of the sub-blocks; if the first one of the sub-blocks is identical to another one of the sub-blocks, applying by the one or more computer systems hash-based deduplication to storage of the first one of the sub-blocks with respect to the other one of the sub-blocks; and, if the first one of the sub-blocks is similar to another one of the sub-blocks, applying by the one or more computer systems sub-block differencing to storage of the first one of the sub-blocks with respect to the other one of the sub-blocks.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08442942&OS=08442942&RS=08442942
owner: 
number: 08442942
owner_city: 
owner_country: 
publication_date: 20100325
---
Data deduplication reduces the amount of data storage required to represent and retain data. Data deduplication typically works by identifying duplicate portions of data being stored and replacing those duplicate portions with pointers to existing stored copies of that data requiring a unique sequence of data to be stored only once.

A deduplication engine may use a data structure known as a primary index to store signature values such as hash values that are associated with sequences of data being stored. These sequences of data known as sub blocks may be smaller portions of a larger file or data stream. Copies of unique sub blocks may be stored in a repository which may reside on a hard disk drive HDD in a storage area network SAN or in other mass storage. The deduplication engine may use the primary index to store a pointer to an address or location in the repository to point from the signature of a sub block to the actual storage location of the sub block associated with it. Herein reference to a signature encompasses a signature value and vice versa where appropriate. Herein reference to a deduplication engine encompasses a hardware or software element such as for example a computer program or a combination of two or more such elements that algorithmically perform data deduplication where appropriate. This disclosure contemplates any suitable programming language for any suitable computer program for data deduplication where appropriate. This disclosure contemplates any suitable number and type of computer systems executing any suitable computer program for data deduplication where appropriate. Each of the computer systems may be unitary or distributed where appropriate and a distributed computer system may span multiple computer systems or multiple datacenters where appropriate.

In data deduplication access to the primary index often presents a bottleneck. This bottleneck may exist because random data access is slower than sequential data access. Content driven lookups such as searching for a signature of a sub block in a primary index are inherently random processes and the relative slowness of random data access may impose significant time requirements on content driven lookups. In addition the primary index may be large which may compound these time requirements. To address these issues particular implementations of deduplication engines may move data that would otherwise be found only in the primary index to alternative storage locations outside the primary index that are physically adjacent to data blocks that are statistically more likely to have been accessed relatively recently.

During deduplication the deduplication engine may initially look up a signature value such as a hash value for a sub block of data being deduplicated in a primary index. The primary index may reference an outside storage location such as a grouping of related sub blocklet meta data which in particular embodiments may be known as a cluster header . The outside storage location may include one or more portions of the information content of the primary index. As an example and not by way of limitation the outside storage location may include sub block signature values and associated pointers to the data in the sub blocks. The associated pointers may be pointers from signature values to addresses in a repository where the data in the sub blocks is stored.

An outside storage location may include a sequential representation of sub blocks of previously deduplicated data. If a signature of a sub block of data currently being deduplicated is a sequential repetition of a signature of one of the sub blocks of this previously deduplicated data this sequential repetition may be identified to realize time or computational savings. This sequential matching may provide time or computational savings by for example preventing the deduplication engine from expending time or computational resources to search by random access through the primary index for the signature of the sub block of data currently being deduplicated. Stored data may tend to be repetitive in nature and the use of a primary index may facilitate significant overall gains in performance.

In particular embodiments hash based duplication is a method of data deduplication that involves segmenting data into variable or fixed sized sub blocks calculating the hash of each of the sub blocks and matching identical sub blocks by their hashes. U.S. Pat. No. 5 990 810 issued 23 Nov. 1999 to Ross. N. Williams incorporated herein by reference as an example and not by way of limitation discloses example hash based duplication. In particular embodiments file differencing is a method of data deduplication that involves calculating a series of fingerprints of each file and matching files based on the number of fingerprints they have in common. Once two files have been found that are similar the old copy is read and the new copy is stored as a difference. Udi Manber USENIX W1994 TCP San Francisco Calif. Jan. 17 21 1994 incorporated herein by reference as an example and not by way of limitation discloses example file differencing. Herein reference to file differencing encompasses sub block differencing where appropriate.

Hash based duplication may reduce disk reads of old data provide higher levels of deduplication work well with compression and facilitate the deletion of old data. However a sub block index used in hash based duplication may require a large amount of memory and hash based duplication may require distinct sub blocks not to have the same hash. A sub block index used in file differencing may require less memory and since it does not rely solely on hash based comparison file differencing tends to be immune from hash collisions. However in file differencing an old copy of the file may have to be read on store to create a difference file and the old copy of the file may have to be read again on retrieve to restore the file. File differencing may make deletion of old data more difficult since the old unused part of an original file may not be deleted if a newer file references the same part. File differencing may make compression more difficult since if the original file was compressed the original file may need to be uncompressed to create a difference file slowing down store.

Particular embodiments combine hash based duplication with sub block differencing to deduplicate data. As an example and not by way of limitation the deduplication engine may first segment data for deduplication into variable sized sub blocks as U.S. Pat. No. 5 990 810 discloses. The deduplication engine may then calculate a cryptographic hash which in particular embodiments may be known as a sub block hash of the sub block and look up the sub block in an index. If the sub block is already present the deduplication engine may match it and store only one unique copy. If the sub block is not already present the deduplication engine may identify locations in the sub block and take cryptographic hashes or differencing hashes of small blocks of data in the sub block. These small blocks of data may be approximately 10 to 1000 bytes long depending on the size of the sub block. To identify the locations of these small blocks of data in the sub block the deduplication engine may use a suitable method disclosed by Udi Manber USENIX W1994 TCP San Francisco Calif. Jan. 17 21 1994 a suitable method disclosed by U.S. Pat. No. 5 990 810 suitable fixed offsets such as for example the first n bytes of the sub block the last n bytes of the sub block and any fixed offset in between or any suitable combination of these. In addition or as an alternative to identify the locations of the small blocks of data in the sub block the deduplication engine may use a suitable version of a sub block parser. As an example and not by way of limitation if the parser has a parameter that dictates the mean sub block length the deduplication engine may re run the parser using a shorter mean sub block length and instead of creating sub block boundaries use the location as a reference point for differencing hashes. As another example the deduplication engine may use a single parser run to segment the data into sub blocks and determine suitable locations for fingerprinting. For example the parser may segment the data into approximately 16 kilobyte chunks. Every x of these chunks may then form a sub block and the start of every one of these chunks may be fingerprinted.

The deduplication engine may then look up these differencing hashes in the same index that stores the sub block hashes or an alternative index to find similar sub blocks. The deduplication engine may determine whether a sub block is similar based on the number of matching differencing hashes in the sub block. If the deduplication engine finds similar sub blocks it may load the contents of the old sub blocks and store only the difference between the new sub blocks and the old sub blocks. If the deduplication engine does not find similar sub blocks it may store the differencing hashes in the same or a different index.

In particular embodiments in comparison with hash based duplication alone combining hash based duplication with sub block differencing may reduce the size of the sub block index. As an example and not by way of limitation instead of indexing 10 kilobyte sub blocks particular embodiments may index one megabyte sub blocks and have 10 differencing hashes. These embodiments would use ten times fewer entries in the index and would rival space reduction for 10 kilobyte sub blocks. In particular embodiments in comparison with file differencing alone combining hash based duplication with sub block differencing may facilitate faster matching of identical data since the deduplication engine need not load an old copy of identical data.

Particular embodiments provide a method for backing up data that uses one scheme to deduplicate portions of data that are identical and another scheme to deduplicate portions of the data that are similar which may facilitate more efficient use of storage and processing power.

Sub blocks SB and SB both contain sub block data A. They are identical to each other and as a result their signature values such as hash values will be the same. Similarly sub blocks SB and SB are identical to each other and their signature values are the same. None of sub blocks SB SB and SB are identical to any other sub block SB SB. Sub blocks SB SB and SB are non identical sub blocks.

Some of the non identical sub blocks may have portions of data that are similar to each other. Sub block data B of sub block SB includes block segments B B and sub block data D of sub block SB includes block segments B D B D B and D. Sub blocks SB and SB both include block segments B B and B. However sub block SB does not include block segments D D and D.

In particular embodiments the deduplication engine uses fingerprints FP FP which may be rabin signature values to determine whether non identical sub blocks are similar. As an example and not by way of limitation if a certain minimum percentage such as for example approximately 75 of the fingerprints associated with two non identical sub blocks are the same the deduplication engine may conclude that the two non identical sub blocks are similar and treat them accordingly. The deduplication engine may calculate a difference between similar sub blocks and use the difference to re create a sub block. In sub block data B and sub block data D both include block segments B B and B. In which illustrates an example combination of hash based duplication with sub block differencing to deduplicate data difference between sub block data B and sub block data D includes block segments D D and D. Particular embodiments may use sub block data B together with difference to re create at block in sub block data D for sub block SB. Particular embodiments may re create sub block data D for sub block SB using block segments B B and B from sub block data B and block segments D D and D from difference .

Although the present disclosure describes and illustrates data deduplication for purposes of backing up data the present disclosure contemplates any suitable uses for data deduplication. As an example and not by way of limitation particular embodiments may use data deduplication for purposes of transmitting data or storing data that is not backed up.

As described above the deduplication engine may partition data into sub blocks SB SB. A variable length parser which may be internal or external to the deduplication engine may determine boundaries BN BN. The deduplication engine may partition data into sub blocks SB SB beginning and ending respectively at boundaries BN BN. In particular embodiments the variable length parser uses hash values to determine boundaries BN BN.

In particular embodiments sub blocks SB SB are variable length sub blocks which may vary in length. In particular embodiments the mean length of sub blocks SB SB may be in the range of approximately 16 kilobytes to approximately one megabyte. Particular embodiments assume a mean sub block length of approximately one megabyte.

Particular embodiments may adjust the mean sub block length based on the degree of data deduplication desired. A relatively large mean sub block length may reduce the number of sub blocks and therefore reduce the total amount of sub block overhead. This may improve performance but may reduce the space efficiency of the data deduplication. A relatively small mean sub block length may facilitate a higher degree of data deduplication. However a smaller mean sub block length may require the use of more processing power due to more boundaries BN BN and signature values being determined for the larger number of sub blocks. Therefore using a smaller mean sub block length may reduce performance but increase the space efficiency of the data deduplication.

Compared with previous systems and method for data deduplication particular embodiments may facilitate quicker matching of identical sub blocks by comparing their hash values using an index of hash values. In particular embodiments if larger sub blocks are used which may reduce data deduplication more fingerprints may be used to determine whether non identical sub blocks are similar. Particular embodiments apply one or more suitable differencing techniques to these similar sub blocks. The differencing techniques used may depend on the underlying data type.

Particular embodiments use a set of one or more hash values to uniquely identify sub block data A E in sub blocks SB SB. As an example and not by way of limitation assume that sub blocks SB and SB which both include sub block data A result in the hash value a sub block SB which includes sub block data B results in the hash value b sub blocks SB and SB which both include sub block data C result in the hash value c sub block SB which includes sub block data D results in the hash value d and sub block SB which includes sub block data E results in the hash value e. As the deduplication engine deduplicates data the deduplication engine may associate the hash values a e with an index .

When the deduplication engine hashes the sub block data in a sub block the deduplication engine may look up the hash value in index . If index already includes that hash value then the deduplication engine may determine that the signature value of that sub block is identical to the signature value of another sub block that the deduplication engine has already processed. The deduplication engine may process the sub block and then associate its hash value with an index such as index that holds hash values. As an example and not by way of limitation when the deduplication engine processes sub block data A for sub block SB having the hash value a the deduplication engine may associate the hash value a with index . The deduplication engine may process sub block data A for sub block SB which also has a hash value of a. The deduplication engine may look up the hash value of sub block SB in index during the processing of sub block SB. Because the hash value of sub block SB is already associated with index and matches the hash value of sub block SB the deduplication engine may determine that sub blocks SB and SB have identical signature values.

Although the present disclosure describes and illustrates determining whether sub blocks are identical by looking up corresponding hash values in an index the present disclosure contemplates any suitable method for determining whether sub blocks are identical as an alternative or in addition to determining whether sub blocks are identical by looking up corresponding hash values in an index . As an example and not by way of limitation the deduplication engine may compare data associated with the sub blocks to determine whether they are identical. More specifically the deduplication engine may for example compare sub block data A in sub block SB with sub block data A in sub block SB.

In particular embodiments the deduplication engine also determines whether non identical sub blocks are similar. As an example and not by way of limitation consider sub blocks SB and SB. Sub block SB includes block segments B B. Sub block SB includes block segments B D B D B and D. Sub blocks SB and SB both include block segments B B and B. However sub block SB does not include block segments D D and D. In particular embodiments the deduplication engine may use fingerprints FP FP to determine whether non identical sub blocks are similar. In particular embodiments the deduplication engine may treat two non identical sub blocks as similar if a certain minimum percentage such as for example at least approximately 75 of the fingerprints associated with them are the same. The deduplication engine may calculate a difference between similar sub blocks and use the difference later to re create one or both of the sub blocks. In particular embodiments storing the difference between two similar sub blocks instead of storing the entire new version of the new sub block reduces the storage space required or used.

As described above sub block data B and sub block data D in sub blocks SB and SB both include block segments B B and B. Difference between sub block data B and sub block data D includes block segments D D and D. In particular embodiments the deduplication engine may use sub block data B together with difference to re create at block in sub block data D for sub block SB. The deduplication engine may re create sub block data D for sub block SB can be using block segments B B and B in sub block data B and block segments D D and D in difference .

Particular embodiments use fingerprints FP FP to determine whether non identical sub blocks are similar. Fingerprints FP FP are associated with sub block SB and fingerprints FP FP and FP are associated with sub block SB. Particular embodiments may use a cryptographically secure hash algorithm such as for example Secure Hash Algorithm 1 SHA 1 to generate fingerprints FP FP making them strong hashes or cryptographic sums of portions of data that start at interesting locations. In particular embodiments a hash from a non cryptographically secure hashing algorithm such as for example a rolling hash is a weak hash.

In particular embodiments when the deduplication engine takes a fingerprint at an interesting location the deduplication engine stores it in fingerprint index . The deduplication engine may look up any subsequently taken fingerprints in fingerprint index to determine if they are identical. Fingerprint index may be associated with index according to the relationship of fingerprints FP FP to the hash values at interesting locations IL IL in . As an example and not by way of limitation fingerprint index which may include FP may include an indicator indicating that FP is linked to the hash value a of sub block data B in sub block SB. In particular embodiments fingerprint index and index are coupled with each other. In particular embodiments index includes an indexing of fingerprints along with an indexing of hash values. Although the present disclosure describes and illustrates a particular arrangement of index and fingerprint index the present disclosure contemplates any suitable arrangement of index and fingerprint index . As an example and not by way of limitation in particular embodiments fingerprint index need not be coupled to index .

In particular embodiments the deduplication engine performs two hashes. As en example and not by way of limitation the deduplication engine may use a first hash such as for example a rolling hash to identify an interesting location. When the deduplication engine has found the interesting location the deduplication engine may use a strong hash to take a fingerprint of the data at before or after the interesting location which may for example be in the range of 10 bytes to one kilobyte in length . In the deduplication engine has identified interesting locations IL IL and IL which are associated with sub block SB and sub block data B and interesting locations IL IL and IL which associated with sub block SB and sub block data B . The deduplication engine may then take fingerprints of the data at these interesting locations. In the deduplication engine has taken fingerprints as follows fingerprint FP at interesting location IL fingerprint FP at interesting location IL fingerprint FP at interesting location IL fingerprint FP at interesting location IL fingerprint FP at interesting location IL and fingerprint FP at interesting location IL.

In particular embodiments sub blocks are similar if at least a minimum percentage of their respective fingerprints are the same. As an example and not by way of limitation the deduplication engine may consider sub blocks to be similar if at least 75 of their fingerprints are the same. In particular embodiments this percentage is adjustable. In particular embodiments this percentage may be anywhere between 25 and 90 . In sub blocks SB and SB have two out of three of their respective fingerprints that are the same fingerprints FP and FP . Since at least 75 of their signature values are the same the deduplication engine may consider sub blocks SB and SB to be similar. The percentage may be adjusted to provide a desired amount of deduplication to accommodate an available storage or to accommodate available processing power or for any other suitable reason.

The present disclosure contemplates any suitable method for determining any suitable interesting location. As an example and not by way of limitation particular embodiments may use a rolling hash. Particular embodiments may use fixed offsets to determine interesting locations. Particular embodiments may use the beginnings and ends of sub blocks as interesting locations. Particular embodiments may use a fixed offset that is in between the beginning and the end of a sub block as an interesting location. Particular embodiments may use a combination of these or any other suitable methods to determine interesting locations.

Herein reference to sub blocks that are non identical and dissimilar encompasses sub blocks that are not identical and not similar where appropriate.

As described above deduplication engine may include a hardware or software element such as for example a computer program or a combination of two or more such elements that algorithmically perform data deduplication. This disclosure contemplates any suitable programming language for any suitable computer program for data deduplication where appropriate. This disclosure contemplates any suitable number and type of computer systems executing any suitable computer program for data deduplication where appropriate. Each of the computer systems may be unitary or distributed where appropriate and a distributed computer system may span multiple computer systems or multiple datacenters where appropriate. Deduplication engine may include one or more deduplication engines .

In particular embodiments deduplication engine provides in line deduplication. As an example and not by way of limitation deduplication engine may deduplicate data from client as client or another device stores data at data store which may provide back up or other storage for client . In particular embodiments deduplication engine provides post process deduplication in addition or as an alternative to in line deduplication. As an example and not by way of limitation deduplication engine may access data stored at data store which client or another device may have stored at data store without having data deduplication performed on it and then deduplicate and re store it. In particular embodiments deduplication engine may assist in re creating data stored at data store when client accesses it.

In particular embodiments deduplication engine includes a data partitioning module an identical sub block module a similar sub block module and a differencing module . Data partitioning module identical sub block module similar sub block module and differencing module may each include a hardware or software element or a combination of two or more such elements that provide particular functionality for data deduplication. In particular embodiments data partitioning module partitions data such as for example data into sub blocks such as for example sub blocks SB SB and creates fingerprints such as for example fingerprints FP FP . In particular embodiments identical sub block module determines whether a sub block is identical to one or more other sub blocks. In particular embodiments similar sub block module determines whether a sub block is similar to one or more other sub blocks. In particular embodiments differencing module calculates differences between sub blocks that are similar to each other.

In particular embodiments data partitioning module identical sub block module similar sub block module and differencing module are functionally logically or physically separate from each other. As an example and not by way of limitation data partitioning module may have its own hardware or software elements distinct from those of each of identical sub block module similar sub block module and differencing module . In particular embodiments two or more of data partitioning module identical sub block module similar sub block module and differencing module are functionally logically or physically combined with each other where appropriate. As an example and not by way of limitations two or more of data partitioning module identical sub block module similar sub block module and differencing module may share one or more of their hardware or software elements with each other.

Data partitioning module identical sub block module similar sub block module and differencing module may access e.g. write to or read from deduplication engine data as needed to provide their functionality. Deduplication engine data may include one or more differences calculated between similar sub blocks such as for example difference between sub block data B and sub block data D one or more indexes such as for example index and fingerprint index and other suitable deduplication engine data . One or more portions of deduplication engine data may be internal to deduplication engine where appropriate. One or more portions of deduplication engine data may be external to deduplication engine where appropriate. This disclosure contemplates deduplication engine data being stored in any suitable manner using any suitable memory.

By determining that the first and second ones of sub blocks SB SB are identical particular embodiments provide a higher degree of deduplication. Storing relatively large sub blocks may work well with compression and may facilitate the deletion of the sub block data of those sub blocks.

At step identical sub block module determines that a third one such as for example sub block SB of sub blocks SB SB is not identical to any other ones of sub blocks SB SB. The hash values for the sub blocks being compared at step may be determined and stored in index at step or step so that identical characteristics of the sub blocks of interest at step may be determined. As an example and not by way of limitation identical sub block module may determine whether index does not include the hash values for sub blocks SB SB and SB. Identical sub block module may look up in index the hash value b for sub block data B of sub block SB. Index may not include the hash value b and identical sub block module may conclude that deduplication engine has not encountered an identical sub block for sub block data B.

At step similar sub block module determines that the third one such as for example sub block SB of sub blocks SB SB is similar to a fourth one such as for example sub block SB of sub blocks SB SB. The hash values for these sub blocks may be determined and stored in index at step or . As an example and not by way of limitation similar sub block module may determine interesting locations IL IL for sub blocks SB and SB. Because deduplication engine stores sub block SB before it stores sub block SB sub block SB may have a link to sub block SB. Deduplication engine may store difference between sub blocks SB and SB with sub block SB. Deduplication engine may increment a reference count of sub block SB indicate that sub block SB is similar to sub block SB. In particular embodiments deduplication engine stores with a sub block the difference associated with the sub block. As an example and not by way of limitation deduplication engine may store difference with sub block SB. Assume that the difference between sub blocks SB and SB is x the difference between sub blocks SB and SB is y deduplication engine processes sub block SB before sub block SB and deduplication engine processes sub block SB before sub block SB. Deduplication engine may store sub blocks SB and SB in their entirety and increment reference counts for sub blocks SB and SB. Deduplication engine may store the difference x with sub block SB and store the difference y with sub block SB.

By determining that the third one of sub blocks SB SB which is not identical to any other ones of sub blocks SB SB is similar to a fourth one of sub blocks SB SB deduplication engine may store difference D D and D between the third and fourth ones of sub blocks SB SB. In particular embodiments storing difference may use less storage than storing both of the third and fourth ones of sub blocks SB SB in their entirety. In particular embodiments storing difference may reduce the occurrence of hash collisions.

At step differencing module determines a difference between the third one such as for example sub block SB of sub blocks SB SB and the fourth one such as for example sub block SB of sub blocks SB SB which the third one is similar to at which point the method ends. As an example and not by way of limitation differencing module may determine that difference between sub blocks SB and SB is D D and D. In particular embodiments differencing module is a part of a differencing mechanism. In particular embodiments a differencing mechanism is a part of differencing module . In particular embodiments a differencing mechanism is separate from but communicatively coupled to differencing module .

Although this disclosure describes and illustrates particular steps of the method of as occurring in a particular order this disclosure contemplates any suitable steps of the method of occurring in any suitable order. Although this disclosure describes and illustrates particular components carrying out particular steps of the method of this disclosure contemplates any suitable components carrying out any suitable steps of the method of .

In particular embodiments deduplication engine or another device may use sub block data B of sub block SB together with difference to re create at block in sub block data D associated with sub block SB. In sub block SB includes sub block data B which includes block segments B B and sub block SB includes sub block data D which includes block segments B D B D B and D . Deduplication engine or another device may use block segments B B and B from sub block SB together with block segments D D and D from difference to re create at block in sub block data D for sub block SB.

In particular embodiments to re create sub blocks SB SB deduplication engine or another device may use sub block data A of identical sub blocks SB and SB sub block data C of identical sub blocks SB and SB sub block data B and sub block D of similar sub blocks SB and SB and difference . The use of both deduplicating portions of data that are identical such as for example sub block data A of sub blocks SB and SB and sub block data C of sub blocks SB and SB and deduplicating portions of data that are similar such as for example sub block data B and sub block D of sub blocks SB and SB facilitates the transformation of data into deduplicated data. In particular embodiments deduplication engine may transform the deduplicated data to re create at block in data . In particular embodiments deduplication engine may store a deduplicated version of data in electronic memory as a backup for purposes of re creating the original version of data .

Although this disclosure describes and illustrates similarities and differences between two sub blocks this disclosure contemplates similarities and differences between or among any suitable number of sub blocks. Although this disclosure describes and illustrates similar sub blocks such as for example sub blocks SB and SB not being identical to any other sub blocks such as for example any other ones of SB SB this disclosure contemplates deduplicating any combination of identical or similar sub blocks. As an example and not by way of limitation a sub block SB may contains sub block data that is not similar enough to sub block data of sub block SB or sub block SB individually but may contain sub block data that is similar to the set of sub block SB and sub block SB. If sub blocks SB and SB are contiguous sub block SB may contain sub block data that overlaps the sub block data of the set of sub blocks SB and SB. Particular embodiments may match sub blocks that are similar to sets of sub blocks in addition or as an alternative to individual sub blocks.

Particular embodiments facilitate quick matching of data for deduplication purposes while also increasing sub block size thereby facilitating faster running of a deduplication engine. In particular embodiments identical sub blocks are matched without having to read their data off a disk and similar sub blocks are matched using differencing techniques. Portions of the data that are identical and portions of the data that are similar are then deduplicated. Particular embodiments facilitate increasing the amount of matching for deduplication while at the same time reducing the need to read data off disks or to store data thereby increasing efficiency and saving resources.

In particular embodiments using identical sub blocks to deduplicate as many identical sub blocks as possible reduces the number of times that a sub block needs to be retrieved from storage to determine a difference between that sub block and another sub block. In particular embodiments storing identical sub blocks facilitates deleting and compressing their data. Deleting data associated with a sub block that is stored in the form of a difference may be more difficult.

In particular embodiments combining the processing of identical sub blocks with the processing of similar sub blocks may facilitate increasing the mean length of sub blocks. Increasing the mean length of sub blocks may facilitate more efficient use of storage and processing power. Less storage and processing power may be needed to store larger sub blocks. In particular embodiments combining the processing of identical sub blocks with the processing of similar sub blocks may reduce the size of an index such as for example index used in data deduplication. Particular embodiments store signature values an index that is coupled with or the same index as index . As an example and not by way of limitation deduplication engine may store ten fingerprints and one hash for each sub block. This may amount to 11 indexed entries per megabyte. Index may have ten times fewer entries than an index that indexes sub blocks with a mean length of four to 16 kilobytes.

This disclosure contemplates any suitable number of computer systems . This disclosure contemplates computer system taking any suitable physical form. As example and not by way of limitation computer system may be an embedded computer system a system on chip SOC a single board computer system SBC such as for example a computer on module COM or system on module SOM a desktop computer system a laptop or notebook computer system an interactive kiosk a mainframe a mesh of computer systems a mobile telephone a personal digital assistant PDA a server or a combination of two or more of these. Where appropriate computer system may include one or more computer systems be unitary or distributed span multiple locations span multiple machines or reside in a cloud which may include one or more cloud components in one or more networks. Where appropriate one or more computer systems may perform without substantial spatial or temporal limitation one or more steps of one or more methods described or illustrated herein. As an example and not by way of limitation one or more computer systems may perform in real time or in batch mode one or more steps of one or more methods described or illustrated herein. One or more computer systems may perform at different times or at different locations one or more steps of one or more methods described or illustrated herein where appropriate.

In particular embodiments computer system includes a processor memory storage an input output I O interface a communication interface and a bus . Although this disclosure describes and illustrates a particular computer system having a particular number of particular components in a particular arrangement this disclosure contemplates any suitable computer system having any suitable number of any suitable components in any suitable arrangement.

In particular embodiments processor includes hardware for executing instructions such as those making up a computer program. As an example and not by way of limitation to execute instructions processor may retrieve or fetch the instructions from an internal register an internal cache memory or storage decode and execute them and then write one or more results to an internal register an internal cache memory or storage . In particular embodiments processor may include one or more internal caches for data instructions or addresses. The present disclosure contemplates processor including any suitable number of any suitable internal caches where appropriate. As an example and not by way of limitation processor may include one or more instruction caches one or more data caches and one or more translation lookaside buffers TLBs . Instructions in the instruction caches may be copies of instructions in memory or storage and the instruction caches may speed up retrieval of those instructions by processor . Data in the data caches may be copies of data in memory or storage for instructions executing at processor to operate on the results of previous instructions executed at processor for access by subsequent instructions executing at processor or for writing to memory or storage or other suitable data. The data caches may speed up read or write operations by processor . The TLBs may speed up virtual address translation for processor . In particular embodiments processor may include one or more internal registers for data instructions or addresses. The present disclosure contemplates processor including any suitable number of any suitable internal registers where appropriate. Where appropriate processor may include one or more arithmetic logic units ALUs be a multi core processor or include one or more processors . Although this disclosure describes and illustrates a particular processor this disclosure contemplates any suitable processor.

In particular embodiments memory includes main memory for storing instructions for processor to execute or data for processor to operate on. As an example and not by way of limitation computer system may load instructions from storage or another source such as for example another computer system to memory . Processor may then load the instructions from memory to an internal register or internal cache. To execute the instructions processor may retrieve the instructions from the internal register or internal cache and decode them. During or after execution of the instructions processor may write one or more results which may be intermediate or final results to the internal register or internal cache. Processor may then write one or more of those results to memory . In particular embodiments processor executes only instructions in one or more internal registers or internal caches or in memory as opposed to storage or elsewhere and operates only on data in one or more internal registers or internal caches or in memory as opposed to storage or elsewhere . One or more memory buses which may each include an address bus and a data bus may couple processor to memory . Bus may include one or more memory buses as described below. In particular embodiments one or more memory management units MMUs reside between processor and memory and facilitate accesses to memory requested by processor . In particular embodiments memory includes random access memory RAM . This RAM may be volatile memory where appropriate Where appropriate this RAM may be dynamic RAM DRAM or static RAM SRAM . Moreover where appropriate this RAM may be single ported or multi ported RAM. The present disclosure contemplates any suitable RAM. Memory may include one or more memories where appropriate. Although this disclosure describes and illustrates particular memory this disclosure contemplates any suitable memory.

In particular embodiments storage includes mass storage for data or instructions. As an example and not by way of limitation storage may include an HDD a floppy disk drive flash memory an optical disc a magneto optical disc magnetic tape or a Universal Serial Bus USB drive or a combination of two or more of these. Storage may include removable or non removable or fixed media where appropriate. Storage may be internal or external to computer system where appropriate. In particular embodiments storage is non volatile solid state memory. In particular embodiments storage includes read only memory ROM . Where appropriate this ROM may be mask programmed ROM programmable ROM PROM erasable PROM EPROM electrically erasable PROM EEPROM electrically alterable ROM EAROM or flash memory or a combination of two or more of these. This disclosure contemplates mass storage taking any suitable physical form. Storage may include one or more storage control units facilitating communication between processor and storage where appropriate. Where appropriate storage may include one or more storages . Although this disclosure describes and illustrates particular storage this disclosure contemplates any suitable storage.

In particular embodiments I O interface includes hardware software or both providing one or more interfaces for communication between computer system and one or more I O devices. Computer system may include one or more of these I O devices where appropriate. One or more of these I O devices may enable communication between a person and computer system . As an example and not by way of limitation an I O device may include a keyboard keypad microphone monitor mouse printer scanner speaker still camera stylus tablet touchscreen trackball video camera another suitable I O device or a combination of two or more of these. An I O device may include one or more sensors. This disclosure contemplates any suitable I O devices and any suitable I O interfaces for them. Where appropriate I O interface may include one or more device or software drivers enabling processor to drive one or more of these I O devices. I O interface may include one or more I O interfaces where appropriate. Although this disclosure describes and illustrates a particular I O interface this disclosure contemplates any suitable I O interface.

In particular embodiments communication interface includes hardware software or both providing one or more interfaces for communication such as for example packet based communication between computer system and one or more other computer systems or one or more networks. As an example and not by way of limitation communication interface may include a network interface controller NIC or network adapter for communicating with an Ethernet or other wire based network or a wireless NIC WNIC or wireless adapter for communicating with a wireless network such as a WI FI network. This disclosure contemplates any suitable network and any suitable communication interface for it. As an example and not by way of limitation computer system may communicate with an ad hoc network a personal area network PAN a local area network LAN a wide area network WAN a metropolitan area network MAN or one or more portions of the Internet or a combination of two or more of these. One or more portions of one or more of these networks may be wired or wireless. As an example computer system may communicate with a wireless PAN WPAN such as for example a BLUETOOTH WPAN a WI FI network a WI MAX network a cellular telephone network such as for example a Global System for Mobile Communications GSM network or other suitable wireless network or a combination of two or more of these. Computer system may include any suitable communication interface for any of these networks where appropriate. Communication interface may include one or more communication interfaces where appropriate. Although this disclosure describes and illustrates a particular communication interface this disclosure contemplates any suitable communication interface.

In particular embodiments bus includes hardware software or both coupling components of computer system to each other. As an example and not by way of limitation bus may include an Accelerated Graphics Port AGP or other graphics bus an Enhanced Industry Standard Architecture EISA bus a front side bus FSB a HYPERTRANSPORT HT interconnect an Industry Standard Architecture ISA bus an INFINIBAND interconnect a low pin count LPC bus a memory bus a Micro Channel Architecture MCA bus a Peripheral Component Interconnect PCI bus a PCI Express PCI X bus a serial advanced technology attachment SATA bus a Video Electronics Standards Association local VLB bus or another suitable bus or a combination of two or more of these. Bus may include one or more buses where appropriate. Although this disclosure describes and illustrates a particular bus this disclosure contemplates any suitable bus or interconnect.

Herein reference to a computer readable storage medium encompasses one or more tangible computer readable storage media possessing structure. As an example and not by way of limitation a computer readable storage medium may include a semiconductor based or other integrated circuit IC such as for example a field programmable gate array FPGA or an application specific IC ASIC a hard disk an HDD a hybrid hard drive HHD an optical disc an optical disc drive ODD a magneto optical disc a magneto optical drive a floppy disk a floppy disk drive FDD magnetic tape a holographic storage medium a solid state drive SSD a RAM drive a SECURE DIGITAL card a SECURE DIGITAL drive or another suitable computer readable storage medium or a combination of two or more of these where appropriate. Herein reference to a computer readable storage medium excludes any medium that is not eligible for patent protection under 35 U.S.C. 101. Herein reference to a computer readable storage medium excludes transitory forms of signal transmission such as a propagating electrical or electromagnetic signal per se to the extent that they are not eligible for patent protection under 35 U.S.C. 101.

This disclosure contemplates one or more computer readable storage media implementing any suitable storage. In particular embodiments a computer readable storage medium implements one or more portions of processor such as for example one or more internal registers or caches one or more portions of memory one or more portions of storage or a combination of these where appropriate. In particular embodiments a computer readable storage medium implements RAM or ROM. In particular embodiments a computer readable storage medium implements volatile or persistent memory. In particular embodiments one or more computer readable storage media embody software. Herein reference to software may encompass one or more applications bytecode one or more computer programs one or more executables one or more instructions logic machine code one or more scripts or source code and vice versa where appropriate. In particular embodiments software includes one or more application programming interfaces APIs . This disclosure contemplates any suitable software written or otherwise expressed in any suitable programming language or combination of programming languages. In particular embodiments software is expressed as source code or object code. In particular embodiments software is expressed in a higher level programming language such as for example C Perl or a suitable extension thereof. In particular embodiments software is expressed in a lower level programming language such as assembly language or machine code . In particular embodiments software is expressed in JAVA. In particular embodiments software is expressed in Hyper Text Markup Language HTML Extensible Markup Language XML or other suitable markup language.

The present disclosure encompasses all changes substitutions variations alterations and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend. Similarly where appropriate the appended claims encompass all changes substitutions variations alterations and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend.

