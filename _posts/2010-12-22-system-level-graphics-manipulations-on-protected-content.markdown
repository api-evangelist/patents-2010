---

title: System level graphics manipulations on protected content
abstract: At least certain embodiments of the present disclosure include a method to manipulate graphics with protected content. In some embodiments, a composite engine of a computing system retrieves data within a region within a frame buffer holding pixels of an image displayed on a display device of the computing system. The region corresponds to an area of interest within the image, and the data retrieved includes pixels forming a portion of the image in the area of interest and protected content associated with the image. The composite engine may re-composite the area of interest with the pixels retrieved to produce an enlarged version of the portion of the image in the area of interest, without exposing the protected content to applications outside of the window server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08836727&OS=08836727&RS=08836727
owner: Apple Inc.
number: 08836727
owner_city: Cupertino
owner_country: US
publication_date: 20101222
---
Conventionally content providers of digital graphics or video content provide pixel information of digital graphics or video content under one or more predetermined agreements to window servers of computing systems. For example the window servers may have agreed to keep the digital graphics or video content provided safe and thus preventing unauthorized copying of the digital graphics or video content provided. Such pixel information of digital graphics or video content is referred to as protected information. During processing and rendering of the digital graphics or video content on a user s computing system a pixel client running on the computing system such as a window server receives pixel information from a content providing application and actually draws images based on the pixel information received. Sometimes the pixel client transfers the pixel information received to another application for further processing such as zooming. Because the pixel information being transferred out of the pixel client is susceptible to unauthorized manipulation e.g. unauthorized copying by a third party application the pixel client typically withholds protected content from being transferred out. As a result the pixel client chooses not to display some information in an effort to protect it. For example the pixel client chooses to omit certain copyrighted content e.g. an image from a movie from a screenshot or prevents protected content from being sent to an external recording device.

Some embodiments include one or more application programming interfaces APIs in an environment with calling program code interacting with other program code being called through the one or more interfaces. Various function calls messages or other types of invocations which further may include various kinds of parameters can be transferred via the APIs between the calling program and the code being called. In addition an API may provide the calling program code the ability to use data types or classes defined in the API and implemented in the called program code.

At least certain embodiments include an environment with a calling software component interacting with a called software component through an API. A method for operating through an API in this environment includes transferring one or more function calls messages other types of invocations or parameters via the API.

Some embodiments of the present disclosure include a method for system level graphics manipulations on images having protected content. In one embodiment a composite engine running on a window manager of a computing system composites pixel information of a region of interest within an image in a first buffer. The composite engine then composites pixel information of the image and the pixel information of the region of interest from the first buffer in a second buffer to render the image with an enlarged view of the region of interest without exposing the pixel information of the region of interest outside of the window manager.

Some embodiments of the present disclosure include an apparatus for system level graphics manipulations on images having protected content. In one embodiment the apparatus includes a computer readable storage medium to store a frame buffer and a secondary buffer. The apparatus further includes a graphics processing device to run a window manager to copy pixel information of a region of interest within an image into the secondary buffer and to composite pixel information of the image with the pixel information of the region of interest from the secondary buffer in the frame buffer to render the image with an enlarged view of the region of interest.

Various devices which perform one or more of the foregoing methods and machine readable media which when executed by a processing system cause the processing system to perform these methods are also described.

Various embodiments and aspects of the disclosure will be described with reference to details discussed below and the accompanying drawings will illustrate the various embodiments. The following description and drawings are illustrative of the disclosure and are not to be construed as limiting the disclosure. Numerous specific details are described to provide a through understanding of various embodiments of the present disclosure. However in certain instances well known or conventional details are not described in order to provide a concise discussion of embodiments of the present disclosure.

Some portions of the detailed descriptions which follow are presented in terms of algorithms which include operations on data stored within a computer memory. An algorithm is generally a self consistent sequence of operations leading to a desired result. The operations typically require or involve physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as processing or computing or calculating or determining or displaying or the like can refer to the action and processes of a data processing system or similar electronic device that manipulates and transforms data represented as physical electronic quantities within the system s registers and memories into other data similarly represented as physical quantities within the system s memories or registers or other such information storage transmission or display devices.

The present disclosure can relate to an apparatus for performing one or more of the operations described herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a machine e.g. computer readable storage medium such as but is not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs erasable programmable ROMs EPROMs electrically erasable programmable ROMs EEPROMs flash memory magnetic or optical cards or any type of media suitable for storing electronic instructions and each coupled to a bus.

A machine readable medium includes any mechanism for storing or transmitting information in a form readable by a machine e.g. a computer . For example machines store and communicate internally and with other devices over a network code and data using machine readable media such as machine readable storage media e.g. magnetic disks optical disks random access memory read only memory flash memory devices phase change memory and machine readable communication media e.g. electrical optical acoustical or other form of propagated signals such as carrier waves infrared signals digital signals etc. .

At least certain embodiments of the present disclosure include one or application programming interfaces in an environment with search software interacting with a software application. Various function calls or messages are transferred via the application programming interfaces between the search software and software applications. Transferring the function calls or messages may include issuing initiating invoking or receiving the function calls or messages. Example application programming interfaces transfer function calls to implement various operations e.g. search networking service discovery etc. for a device having a display region. An API may also implement functions having parameters variables or pointers. An API may receive parameters as disclosed or other combinations of parameters. In addition to the APIs disclosed other APIs individually or in combination can perform similar functionality as the disclosed APIs.

The display region may be in a form of a window. A window is a display region which may or may not have a border and may be the entire display region or area of a display. In some embodiments a display region may have at least one window and or at least one view e.g. web text or image content . The methods systems and apparatuses disclosed can be implemented with display regions windows and or views.

At least certain embodiments of the disclosure may be part of a portable electronic device such as a digital media player e.g. a portable music and or video media player which may include a media processing system to present the media a storage device to store the media and may further include a radio frequency RF transceiver e.g. an RF transceiver for a cellular telephone coupled with an antenna system and the media processing system. In certain embodiments data stored on a remote storage device may be transmitted to the portable electronic device through the RF transceiver. The data may be for example one or more of music or other audio still pictures or motion pictures etc.

The portable media player may include a media selection device such as a click wheel input device on an iPod or iPod Nano media player from Apple Computer Inc. of Cupertino Calif. a touch screen input device pushbutton device movable pointing input device or other input device. The media selection device may be used to select the media stored on the storage device and or the remote storage device. The portable media player may in at least certain embodiments include a display device which is coupled to the media processing system to display titles or other indicators of media being selected through the input device and being presented either through a speaker or earphone s or on the display device or on both display device and a speaker or earphone s . In some embodiments the display device and input device are integrated while in other embodiments the display device and input device are separate devices.

Embodiments of the disclosure described herein may be part of other types of data processing systems such as for example entertainment systems or personal digital assistants PDAs or general purpose computer systems or special purpose computer systems or an embedded device within another device or cellular telephones which do not include media players or multifunctional touch tablet devices or other multifunctional touch devices or devices which combine aspects or functions of these devices e.g. a media player such as an iPod portable media player combined with a PDA an entertainment system and a cellular telephone in one device an iPhone . Because these devices generally have multiple functionalities these devices may also be referred to as multifunctional devices hereinafter. In this disclosure electronic devices and consumer devices are types of devices.

In some embodiments a platform provides various search service discovery and networking operations. The platform includes hardware components and an operating system. The hardware components may include a processing unit coupled to an input panel and a memory coupled to the processor. The operating system includes one or more programs that are stored in the memory and configured to be executed by the processing unit. One or more programs include various instructions for transferring function calls or messages through an Application Programming Interface API in order to perform various search service discovery and networking operations.

One or more APIs may be used in some embodiments. An API is an interface implemented by a program code component or hardware component hereinafter API implementing component that allows a different program code component or hardware component hereinafter API calling component to access and use one or more functions methods procedures data structures classes and or other services provided by the API implementing component. An API can define one or more parameters that are passed between the API calling component and the API implementing component.

An API allows a developer of an API calling component which may be a third party developer to leverage specified features provided by an API implementing component. There may be one API calling component or there may be more than one such component. An API can be a source code interface that a computer system or program library provides in order to support requests for services from an application. An operating system OS can have multiple APIs to allow applications running on the OS to call one or more of those APIs and a service such as a program library can have multiple APIs to allow an application that uses the service to call one or more of those APIs. An API can be specified in terms of a programming language that can be interpreted or compiled when an application is built.

In some embodiments the API implementing component may provide more than one API each providing a different view of or with different aspects that access different aspects of the functionality implemented by the API implementing component. For example one API of an API implementing component can provide a first set of functions and can be exposed to third party developers and another API of the API implementing component can be hidden not exposed and provide a subset of the first set of functions and also provide another set of functions such as testing or debugging functions which are not in the first set of functions. In other embodiments the API implementing component may itself call one or more other components via an underlying API and thus be both an API calling component and an API implementing component.

An API defines the language and parameters that API calling components use when accessing and using specified features of the API implementing component. For example an API calling component accesses the specified features of the API implementing component through one or more API calls or invocations embodied for example by function or method calls exposed by the API and pass data and control information using parameters via the API calls or invocations. The API implementing component may return a value through the API in response to an API call from an API calling component. While the API defines the syntax and result of an API call e.g. how to invoke the API call and what the API call does the API may not reveal how the API call accomplishes the function specified by the API call. Various API calls are transferred via the one or more application programming interfaces between the calling API calling component and an API implementing component. Transferring the API calls may include issuing initiating invoking calling receiving returning or responding to the function calls or messages in other words transferring can describe actions by either of the API calling component or the API implementing component. The function calls or other invocations of the API may send or receive one or more parameters through a parameter list or other structure. A parameter can be a constant key data structure object object class variable data type pointer array list or a pointer to a function or method or another way to reference a data or other item to be passed via the API.

Furthermore data types or classes may be provided by the API and implemented by the API implementing component. Thus the API calling component may declare variables use pointers to use or instantiate constant values of such types or classes by using definitions provided in the API.

Generally an API can be used to access a service or data provided by the API implementing component or to initiate performance of an operation or computation provided by the API implementing component. By way of example the API implementing component and the API calling component may each be any one of an operating system a library a device driver an API an application program or other module it should be understood that the API implementing component and the API calling component may be the same or different type of module from each other . API implementing components may in some cases be embodied at least in part in firmware microcode or other hardware logic. In some embodiments an API may allow a client program to use the services provided by a Software Development Kit SDK library. In other embodiments an application or other client program may use an API provided by an Application Framework. In these embodiments the application or client program may incorporate calls to functions or methods provided by the SDK and provided by the API or use data types or objects defined in the SDK and provided by the API. An Application Framework may in these embodiments provide a main event loop for a program that responds to various events defined by the Framework. The API allows the application to specify the events and the responses to the events using the Application Framework. In some implementations an API call can report to an application the capabilities or state of a hardware device including those related to aspects such as input capabilities and state output capabilities and state processing capability power state storage capacity and state communications capability etc. and the API may be implemented in part by firmware microcode or other low level logic that executes in part on the hardware component.

The API calling component may be a local component i.e. on the same data processing system as the API implementing component or a remote component i.e. on a different data processing system from the API implementing component that communicates with the API implementing component through the API over a network. It should be understood that an API implementing component may also act as an API calling component i.e. it may make API calls to an API exposed by a different API implementing component and an API calling component may also act as an API implementing component by implementing an API that is exposed to a different API calling component.

The API may allow multiple API calling components written in different programming languages to communicate with the API implementing component thus the API may include features for translating calls and returns between the API implementing component and the API calling component however the API may be implemented in terms of a specific programming language. An API calling component can in one embedment call APIs from different providers such as a set of APIs from an OS provider and another set of APIs from a plug in provider and another set of APIs from another provider e.g. the provider of a software library or creator of the another set of APIs.

It will be appreciated that the API implementing component may include additional functions methods classes data structures and or other features that are not specified through the API and are not available to the API calling component . It should be understood that the API calling component may be on the same system as the API implementing component or may be located remotely and accesses the API implementing component using the API over a network. While illustrates a single API calling component interacting with the API it should be understood that other API calling components which may be written in different languages or the same language than the API calling component may use the API .

The API implementing component the API and the API calling component may be stored in a machine readable medium which includes any mechanism for storing information in a form readable by a machine e.g. a computer or other data processing system . For example a machine readable medium includes magnetic disks optical disks random access memory read only memory flash memory devices etc.

In Software Stack an exemplary embodiment applications can make calls to Services or using several Service APIs and to Operating System OS using several OS APIs. Services A and B can make calls to OS using several OS APIs.

Note that the Service has two APIs one of which Service API receives calls from and returns values to Application and the other Service API receives calls from and returns values to Application . Service which can be for example a software library makes calls to and receives returned values from OS API and Service which can be for example a software library makes calls to and receives returned values from both OS API and OS API . Application makes calls to and receives returned values from OS API .

Generally speaking window manager determines which display regions e.g. windows or views to display and controls the placement and appearance of display regions and or views in a graphical user interface GUI of the computing system. In addition to display regions and views related to the computing system window manager may provide for display regions and views controlled by other applications including third party user applications e.g. content providing application on the computing system. In the case of an application window manager may request that display data such as pixel information from the application be sent directly to window manager . Note that for security reasons window manager can be isolated from user applications. Instead of direct access user applications may have to access window manager indirectly using proxy objects and remote procedure calls RPCs . Details of some embodiments of a window manager and interaction between a window manager and applications are described in U.S. patent application Ser. No. 12 405 202 filed Mar. 16 2009 which is published U.S. application no. 2010 0235777 and which is herein incorporated by reference in its entirety. In some embodiments window manager may be implemented with system software integrated in the operating system OS of the computing system. Window manager can run on a graphics processing device a.k.a. a graphics processor or a graphics processing unit GPU . Window manager can be considered a window server such as the window server used in Mac OSx which is an operating system from Apple Inc. of Cupertino Calif. Window manager in one embodiment acts as an intermediary between one or more applications that provide content for display such as content providing application and the graphics display sub system which includes one or more frame buffers that drive one or more displays in this architecture these applications which provide content cannot directly write display data to the frame buffer but rather provide their display data to window manager which processes and composites the display data from these one or more applications and then loads the pixel data into the one or more frame buffers. Window manager can operate in its own memory space which is reserved for its use and is independent of the memory space reserved for use by these one or more applications.

In some embodiments content providing application is communicably connected to window manager and composite engine within window manager . In general content providing application provides content to users of the computing system. The content provided typically can include video and audio. For example the content may include a movie clip a music video a digital photograph etc. Thus the content typically can include pixel information of images within the content. Content providing application sends pixel information to window manager . Other content providing applications can also send pixel information for their applications to window manager . Furthermore the content may include protected content which may be restricted in use viewing sharing copying etc. under one or more agreements between a source of the content and a provider of content providing application . For instance the protected content may include digital right management DRM information e.g. copyright information licensing information etc. of the content. Such protected content is also sent from content providing application to window manager with an indication to window manager that the content is protected. One example of content providing application is iTunes provided by Apple Inc. of Cupertino Calif.

In some embodiments window manager includes composite engine which is responsible for compositing pixel information of images into the applicable format of frame buffer . The composite engine can composite together the images from various applications and various windows controlled by those applications to create a composite image that is loaded into frame buffer for display. Then composite engine loads frame buffer with the composited pixel information . From frame buffer the composited pixel information may be transferred to or scanned into display device . Display device can display the image represented by the composited pixel information from frame buffer . Display device can be for example a liquid crystal display LCD device.

When viewing the image on display device a user of the computing system may desire to manipulate the image for instance to magnify or zoom into a particular region of interest within the image displayed. The user may input a request to magnify or zoom into the region of interest within the image using a user input device not shown of the computing system such as for example a mouse a keyboard a touch screen a touchpad etc. In response to the request composite engine may perform the following operations to manipulate the image without exposing the protected content of the image to applications external to window manager .

Referring to composite engine may composite pixel information of the region of interest in secondary buffer . Note that in the current example the region of interest is to be enlarged or zoomed into. Thus the secondary buffer can also be referred to as a zoom buffer. Then composite engine retrieves the pixel information of the region of interest from secondary buffer . Next composite engine composites pixel information of the image and combines it with the pixel information of the region of interest from secondary buffer . At this stage composite engine enlarges the region of interest. Then composite engine loads the composited pixel information into frame buffer . The composited pixel information is then transferred from frame buffer to display device which displays the image with an enlarged view of the region of interest. In some embodiments composite engine may further perform other operations to manipulate or enhance the image before during or after re composition of the pixel information. Some examples of the other operations to manipulate the image include filtering dithering contrast enhancement or other image enhancement operations.

In some embodiments the user may have requested to have the magnified region of interest to occupy the entire display region on a display panel of display device and hence the image composited in frame buffer may contain only pixel information of the enlarged view of the region of interest. Alternatively the user may have requested to have the magnified region of interest to occupy only a portion of the display region e.g. the top left corner of the display region and hence the image composited in frame buffer may contain both the pixel information of the image and pixel information of the region of interest.

Note that to composite a magnified view of the region of interest composite engine does not have to transfer the relevant pixel information to an application e.g. a zoom application external to window manager . All pixel information including protected content is kept by window manager while composite engine processes the pixel information. Other applications running on the computing system may not be allowed to access the pixel information including protected content of the content from content providing application . As such other applications external to window manager can be prevented from copying or reproducing the protected content. Contrary to some conventional approach which causes display device to display a checkerboard pattern on at least a portion of the magnified region of interest in order not to expose the protected content to applications external to window manager the above approach faithfully reproduces a magnified image of the region of interest without compromising security. Furthermore window manager does not have to request pixel information from content providing application again in order to magnify the region of interest. As such the overall efficiency of image manipulation using the above approach can be improved over the conventional approach.

In some embodiments composite engine running on window manager may receive a request to zoom into a region of interest within an image. In response composite engine can composite pixel information of the image in screen buffer . Then composite engine can copy pixel information of the region of interest into secondary buffer . As discussed above the secondary buffer may be referred to as a zoom buffer. Composite engine may retrieve composited pixel information of the image from screen buffer A and pixel information of region of interest from secondary buffer B . Composite engine can combine the pixel information retrieved from screen buffer and secondary buffer to composite a final image to be displayed . The final image may include an enlarged view of the region of interest overlaid on the image. Composite engine loads frame buffer with composited pixel information of the final image . From frame buffer composited pixel information may be transferred to display device to display the final image .

In some embodiments multiple secondary buffers are provided to display multiple enlarged views of multiple regions of interest in a final image and or to display multiple enlarged views of a single region of interest. The region s of interest may be enlarged by the same scale or different scales. For example in the top left corner of a final image an enlarged view of a first region of interest is displayed at 2 magnification and in the top right corner of the final image an enlarged view of a second region of interest is displayed at 5 magnification. Note that the first and the second regions of interest may be the same region of interest or different regions of interest.

In some embodiments the magnified region of interest is displayed on part of the display region of the display device overlaying on the original image to form a new image . In the current example the magnified region of interest is overlaid on the left upper corner of the original image which still occupies the entire display region on the display device. In other embodiments the region of interest may be overlaid on other locations within the original image . Alternatively the magnified region of interest may be large enough to occupy the entire display region and hence only the magnified region of interest is displayed i.e. the original image is no longer displayed .

In some embodiments processing logic of an image from a content providing application processing block . Then processing logic composites the pixel information to put it into a format suitable for a frame buffer to prepare for rendering the image processing block . The pixel information may include protected content associated with the image such as DRM information and an indicator to indicate that such information is protected.

After compositing the pixel information processing logic loads the composited pixel information into the frame buffer processing block . Then processing logic transfers the pixel information from the frame buffer to a display device to render the image processing block .

While the image is being displayed a user viewing the image may desire to zoom into a particular region within the image hereinafter referred to as the region of interest . In response processing logic may magnify the region of interest. However in order to avoid exposing any protected content within the pixel information corresponding to the region of interest as well as improving the speed or performance of the magnification operations processing logic may keep the magnification operations within the paths between the frame buffer and the composite engine without requesting the pixel information of the region of interest from the content providing application again. Detail of one embodiment of a method to magnify the region of interest is described below.

In some embodiments processing logic receives a user request to magnify a region of interest within an image processing block . The image is rendered using pixel information previously supplied from a content providing application. One embodiment of a method to render the image has been described above. In response to the user request processing logic uses the composite engine to composite pixel information of the region of interest in a secondary buffer processing block . Note that processing logic does not request the pixel information of the region of interest from the content providing application again rather processing logic uses the pixel information locally available in the frame buffer. Thus the overall speed of the magnification operations can be improved.

Using the composite engine processing logic combines the pixel information of the image with the pixel information of the region of interest from the secondary buffer in order to generate a final image processing block . In some embodiments processing logic may further perform other operations to manipulate the region of interest before or during re composition of the pixel information. Some examples include filtering dithering contrast enhancement or other image enhancement operations.

In some embodiments the pixel information includes protected content associated with the image such as DRM information. For example the protected content may include copyrighted images which should not be copied or reproduced without prior consent of the copyright owner. The pixel information may further include an indicator e.g. a flag to indicate to processing logic that such content is protected. Processing logic may use composite engine to magnify the region of interest in the final image processing block . By using the composite engine to magnify the region of interest processing logic may avoid exposing the protected content to applications outside of the window manager. Then processing logic loads the composited pixel information into the frame buffer processing block . Finally processing logic transfers the composited information from the frame buffer to the display device to render a final image having a magnified view of the region of interest on the display device processing block .

One should appreciate that the techniques discussed above can be used to manipulate an image in other ways in addition to or in alternative to zooming into the image. For example the above techniques can be used to duplicate a portion of an image at a new location in response to a user request.

In some embodiments device includes a memory and a video memory . The memory and video memory may be implemented with one or more computer readable storage devices such as Random Access Memory RAM static Random Access Memory SRAM flash memory etc. The video memory may be dedicated for holding data and or instructions related to graphics and image processing whereas the memory may be used for holding other data and or instructions not directly related to graphics and image processing. Generally speaking the video memory may allow faster access of data by video processor . For example frame buffer in described above may be stored on video memory .

This device may also optionally include a display controller and display device which is coupled to the other components through the bus . The display device may include a liquid crystal display LCD a cathode ray tube CRT or a touch screen etc. One or more input output controllers are also coupled to the bus to provide an interface for input output devices and to provide an interface for one or more sensors which are for sensing user activity. The bus may include one or more buses connected to each other through various bridges controllers and or adapters as are well known in the art. The input output devices may include a keypad or keyboard or a cursor control device such as a touch input panel. Furthermore the input output devices may include a network interface which is either for a wired network or a wireless network e.g. an RF transceiver . The sensors may be any one of the sensors described herein including for example a proximity sensor or an ambient light sensor. In at least certain implementations of the device the microprocessor may receive data from one or more sensors and may perform the analysis of that data in various ways. In some embodiments device includes a graphics processor dedicated for processing instructions and analyzing data related to graphics and image processing in the manner described herein. For example composite engine in described above may be executed on the video processor .

In certain embodiments of the present disclosure device can be used to implement at least some of the methods discussed in the present disclosure.

In the foregoing specification the disclosure has been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of the disclosure as set forth in the following claims. The specification and drawings are accordingly to be regarded in an illustrative sense rather than a restrictive sense.

