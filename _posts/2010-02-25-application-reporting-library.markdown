---

title: Application reporting library
abstract: An apparatus and a method for detecting and reporting malfunctions in computer programs is described. A reporting library of an Application Programming Interface (API) is configured to direct a report of software malfunction to a specified server. The API is implemented in an application to be executed on a computer system. The application implementing the API is to report software malfunction of the application to the specified server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08245082&OS=08245082&RS=08245082
owner: Red Hat, Inc.
number: 08245082
owner_city: Raleigh
owner_country: US
publication_date: 20100225
---
Embodiments of the present invention relate to computing systems and more particularly to error reporting in computer programs.

Software malfunction may still occur despite a software developer s efforts to eliminate errors from the software before it is placed on the market. To assist software developers in better identifying potential errors commercially available software have been developed to collect information upon the occurrence of a program error. One example of such software creates a snapshot of a portion of the computer s memory at the time of a crash. The crash is an event that is usually prompted by an error. It prevents the further normal operation of the software and depending upon the severity of the error of the computer system itself. Users may be offered an opportunity to transmit the crash data to provide the manufacturer an opportunity to diagnose the cause of the error. The crash data can contain information to assist in identifying program errors.

However such software is limited in how a crash is detected. The crash data is also limited to be sent to one particular destination the software developer. Specifying how and what kind of information to gather and where to send it to can be a daunting task for a non power user or a user without any knowledge of debugging techniques.

Described herein is an apparatus and a method for detecting and reporting malfunctions in computer programs. In one embodiment a reporting library of an Application Programming Interface API is configured to direct a report of software malfunction to a specified server. The API is implemented in an application to be executed on a computer system. The application implementing the API is to report software malfunction of the application to the specified server.

Computer system includes for example applications and . Each of these application may be configured to report any software malfunction to an external server. For example application is configured to report software malfunction to external server . Application and are configured to report software malfunction to external server .

One way of preventing reporting of such information to third party servers or external servers would be to just disable reporting features in the applications as illustrated in . Unfortunately some of the software malfunction problems can miss developers attention and are left unfixed. In order to improve software as much information as possible needs to be gathered.

Once application and uses library they will be reporting to a specified server as configured in the library . For example an application may include a web browser. If a user started the web browser and the web browser realized that it was closed ungracefully last time it will show a dialog window that has the description some debug information and offers the user to send the reporting data to e.g. Bugzilla a place that accumulates reports bugs . Behavior of this dialog will depend on library . The application can be configured to send bugs to Red Hat and user will see the web browser offering to send the report to Red Hat directly.

Developers of applications and can use the library by the provided API . Once the reporting information is passed to library it will be delivered to a pre specified place previously configured.

In another embodiment libraries are extensible by design and can be extended by modules e.g. module for reporting to Red Hat directly module for reporting to Bugzilla.

As such library abstracts the reporting process. Software developers will not need to bother with the implementation of the reporting in their applications anymore. They will just reuse existing codes and extend them if needed.

In one embodiment data of the software malfunction is collected and a crash report is generated by a data collector provided by the API. At data related to the crash is reported to a specified server in a manner as specified in the API.

In one embodiment the application implementing the API is to redirect the report of software malfunction from a default server associated with the application to the specified server. In another embodiment the application implementing the API does not report to the default server associate with the application.

The application implementing the API can form a first reporting module and a second reporting module. The first reporting module is configured to report to a first server. The second reporting module is configured to report to a second server.

The computer system communicates with the specified server over a network of computers e.g. Internet .

The exemplary computer system includes a processing device a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM a static memory e.g. flash memory static random access memory SRAM etc. and a data storage device which communicate with each other via a bus.

Processing device represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processing device may be complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor or processor implementing other instruction sets or processors implementing a combination of instruction sets. Processing device may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. The processing device is configured to execute applications for performing the operations and steps discussed herein with. In one embodiment API may be include hardware or software or a combination of both.

The computer system may further include a network interface device. The computer system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The data storage device may include a computer accessible storage medium on which is stored one or more sets of instructions embodying any one or more of the methodologies or functions described herein. The software may also reside completely or at least partially within the main memory and or within the processing device during execution thereof by the computer system the main memory and the processing device also constituting computer accessible storage media. The software may further be transmitted or received over a network via the network interface device.

The computer accessible storage medium may also be used to store API and applications . While the computer accessible storage medium is shown in an exemplary embodiment to be a single medium the term computer accessible storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term computer accessible storage medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term computer accessible storage medium shall accordingly be taken to include but not be limited to solid state memories optical and magnetic media.

In the above description numerous details are set forth. It will be apparent however to one skilled in the art that the present invention may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present invention.

Some portions of the detailed descriptions above are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as processing or computing or calculating or determining or displaying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The present invention also relates to apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but is not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions and each coupled to a computer system bus.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.

It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. The scope of the invention should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

