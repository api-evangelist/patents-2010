---

title: Computer system management method and client computer
abstract: The present invention efficiently displays in a tree structure form a file operation history. A file storage identifier, an operation identifier, and a count are stored as additional meta-information in an alternate data stream with respect to each file stored in a client terminal file system. The operation identifier manages a number of operations (operation generations). The count manages copy frequencies. This meta-information is also sent to a management apparatus, and used for displaying the file operation history in a tree structure form.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09124616&OS=09124616&RS=09124616
owner: Hitachi, Ltd.
number: 09124616
owner_city: Tokyo
owner_country: JP
publication_date: 20100628
---
This application is related to U.S. patent application Ser. No. 12 937 952 filed Oct. 24 2010 and U.S. patent application Ser. No. 12 808 130 filed Jun. 14 2010.

The system disclosed in Patent Literature 1 is an example of an operation detecting system for detecting either a malicious or a suspicious operation. In the technology described in Patent Literature 1 an administrator user after creating an illegal operation pattern beforehand and registering same in a database of a log analysis server determines risk in accordance with the degree of matching with the contents of a pre registered user operation log.

The operation pattern of the technology described in the Patent Literature 1 is able to detect an information leak with respect to a file stored in the client PC itself but an intentional leak by the client PC administrator cannot easily be detected in a case where access has been obtained to multiple server computers external to the client PC. Furthermore a file operation history cannot be readily displayed in the above mentioned prior art.

In order to achieve the above mentioned object the present invention uses information related to a file operation history as additional meta information. The additional meta information is stored in either a predetermined storage area inside a file or in another area outside of the file. This meta information may comprise file storage identification information which is assigned in a case where the file is stored in a file system of a client computer operation generation identification information showing a number of operations and copy frequency information showing copy frequency. When a file is put into operation meta information is created and associated with respect to a destination file. The meta information is also sent to and stored in a management apparatus. A file operation history can be detected and displayed based on the meta information held in the management apparatus. In addition the present invention comprises an illegal operation detection system for detecting an illegal file operation. The illegal operation detection system comprises a monitoring apparatus and a management terminal. The monitoring apparatus treats the microprocessor of a client computer as a monitoring target and monitors an operation with respect to the information on a screen of an output apparatus coupled to the monitoring target. The management terminal treats the monitoring apparatus as a management target and manages a monitoring result of the monitoring apparatus. The monitoring apparatus in response to an operation for inputting information to the monitoring target identifies an access source of the input information being inputted into the monitoring target and in addition assigns to the input information an identifier denoting the access source of the relevant input information and in response to an operation for outputting information from the monitoring target identifies the output destination of the output information being outputted from the monitoring target and in addition retrieves an identifier denoting an access source of the output information determines whether or not a combination of the output destination of the identified output information and the access source of the retrieved output information conforms to an illegal operation condition and creates an alert in accordance with the result of this determination.

The embodiment of the present invention will be explained hereinbelow. First of all a method for detecting an illegal file operation will be explained and next a method for managing a history of file operations will be explained. In addition a method for acquiring a file path will be explained.

This example comprises a first means for monitoring the content of an operation with respect to an application program running on a client PC Personal Computer serving as the client computer identifying an access source of input information being inputted by the client PC and in addition assigning an identifier to the input information showing the access source of the relevant input information and a second means for identifying an output destination of output information being outputted from the client PC and in addition checking an identifier that has been assigned to the output information and generating an alert in accordance with a condition for the access source and the output destination of the output information.

A first example of the present invention will be explained hereinbelow based on the drawings. is a system block diagram showing an embodiment of an illegal operation detection system of the present invention. In the illegal operation detection system of the present invention a LAN Local Area Network inside an information center and a network inside a site are coupled via a wide area network and the above mentioned information center is also coupled to the Internet via another wide area network . The illegal operation detection system comprises a management server installed inside the information center and a client PC installed inside the site .

The management server treats the inside of the information center and the inside of the site as a management area treats the machines for example a mail server a file server an in house Web server a client PC a network printer and so forth deployed inside this management area as management targets and manages these management targets. A manager which is in charge of the entire illegal operation detection system and a disk which stores a PC management DB Database utilized by the above mentioned manager to manage multiple client PCs operate in this management server . The management server corresponds to the management terminal and or the management apparatus .

Each client PC comprises a microprocessor loaded with various types of application programs. An agent which serves as a monitoring apparatus that treats each client PC as a monitoring target and monitors operations with respect to the information on a screen of an output apparatus coupled to this monitoring target runs on each client PC . The client PC for example comprises a computer like a personal computer a personal digital assistant or a mobile telephone.

A user who uses the client PC performs a task using an e mail a Web server a file server and so forth. For this reason the mail server the file server and the in house Web server are installed and coupled via the LAN at the information center . Furthermore an external Web server accessible from the client PC is coupled via the Internet.

A network printer used in printing is also coupled to the network at the site . Furthermore the external Web server and a flash memory or other such removable media from among the storage media coupled to the client PC are not management targets of the management server and are processed as test targets.

A user who utilizes the client PC here uses any of the application programs to save a file attached to an e mail addressed to him that has arrived at the mail server or a file stored in the file server or a file registered in the in house Web server as a local file in the local file system inside the file system formatted disk of the client PC .

A file saved to the local file system is exported outside of the client PC using any of the application programs . For example the file explorer may to used to copy this file to the removable media coupled to the device I F or may be printed on the network printer using a printing function of either the word processor or the spreadsheet.

Furthermore a file may be attached to an e mail text created using the mailer and sent to recipients inside and outside the organization or the file may be uploaded to either the in house or an external Web server.

An area called a link exists on the Web browser screen the screen of the output apparatus coupled to the client PC . When this link is clicked using a pointing device an input apparatus such as a mouse that is coupled to the client PC a screen transition occurs. In a case where the mouse cursor is placed over the link character string and the left button is clicked the display either transitions to the next screen also referred to as a page or a process for displaying a download dialog for downloading a target a file at the clicked link is executed.

Furthermore in a case where the mouse cursor is placed over the link character string and the right button is clicked a pop up window called a context menu is displayed. There are items such as Save target to file A . . . in the context menu displayed here and by left clicking on this item a process for displaying a download dialog for downloading the target is executed.

In the download dialog there is a field showing the location where the downloaded file is to be saved a field that displays save destination folder options and showing the filename to be saved. The filename to be saved can be rewritten. The user is able to operate the fields and select the folder in which the file is to be saved use the field as needed to change the save filename use the Web browser to download the file by clicking on the save button and save the file to an arbitrary folder.

The agent comprises a process monitoring module a printer monitoring module a browser monitoring module a dialog operation monitoring module a file operation monitoring module and a TCP communication monitoring module .

The process monitoring module monitors the operating status of an application program running on the client PC . The printer monitoring module monitors an output operation to a printer to include the network printer . The browser monitoring module monitors a user operation in accordance with a Web browser . The dialog operation monitoring module monitors various dialogs which are displayed on the screen of the client PC and used by the user to select a file for uploading or downloading. The file operation monitoring module monitors an operation for example a button click or the drag drop of an object displayed inside an application window in which a user uses a mouse or other such pointing device on the screen of the client PC with respect to various types of applications displayed on the above mentioned screen. The TCP communication monitoring module for example monitors a state in which the mailer or other such application which sends and receives data via a network either sends or receives a data stream using the TCP IP Transmission Control Protocol Internet Protocol socket in accordance with a user operation.

Furthermore the agent has a system policy which is a setting file for controlling the operation of the module and a security policy which is a setting file for carrying out control related to security in particular and in addition comprises an access source DB for storing information necessary for the monitoring module group described above to configure information related to a user operation. The content and role of the access source DB will be explained further below.

The process monitoring module realizes a boot detection function for detecting the fact that a process boot has been requested on the client PC a suppression function for suppressing a boot in a case where the process to be booted violates the security policy and a user notification function for notifying the user that a boot has been suppressed.

The printer monitoring module realizes a print detection function for detecting the fact that printing using the printer has been requested on the client PC a suppression function for suppressing a print in a case where the data to be printed violates the security policy and a user notification function for notifying the user that a boot has been suppressed.

The browser monitoring module realizes an access detection function for detecting the fact that the browser has been used on the client PC to access a Web server and a detection content holding function for temporarily holding the URL Uniform Resource Locator of the accessed Web server and the received html Hypertext Markup Language data and so forth.

The dialog operation monitoring module realizes a dialog detection function for detecting the fact that either a file selection dialog or a print dialog has been displayed in accordance with the user operating an application program on the client PC and an access source information assignment test function for assigning information related to the access source of a file and executing a test of the information related to the assigned access source with respect to a file that has been put into operation using the above mentioned dialog.

As used here an operation for displaying a file section dialog for example is an operation for either downloading or uploading a file using a Web browser an operation for saving a file attachment from an incoming e mail via the mailer or an operation for attaching a file to an outgoing e mail. Furthermore an operation for displaying a print dialog corresponds to an operation for selecting the print function using a word processor or a spreadsheet.

The file operation monitoring module realizes an operation detection function for detecting the fact that either a mouse button was clicked in a window of an application program on the client PC or an operation such as a drag drop of an object displayed inside a window has been carried out and an access source information assignment test function for assigning information related to the access source of a file and executing a test of the information related to the assigned access source with respect to a file that has been put into operation using a mouse.

As used here a file operation in accordance with the click of a mouse button for example corresponds to either an operation for right clicking on a link displayed on a Web browser screen and storing the object pointed to by the link in the displayed menu as a file or an operation for dragging dropping a file attached to the mailer incoming message screen and copying same to the desktop.

The TCP communication monitoring module has a socket reception detection function for detecting the fact that a file has been sent received over a network as a result of the user performing an operation via a network application on the client PC a protocol analysis function for analyzing the data that has been sent received via the above mentioned socket and in a case where a file has been downloaded to the client PC via the socket a registration communication function for registering information related to the access source of this file in the access source DB and in addition communicating this file access source related information to the access source information assignment test modules and .

Each of the monitoring modules described hereinabove in accordance with the detected contents can have a function for communicating with either another monitoring module or the access source DB a function for sending an alert to the manager via the manager communication function that and the monitoring module control and a function for creating an alert and or a detection content log.

Furthermore in the following explanation information related to the present invention will be explained using an expression such as file related information but this information may be also be expressed using something other than a table or other such data structure. For this reason in order to show that the information does not rely on a data structure file related information and the like may simply be called information . Similarly since a portion described as a DB does not necessarily comprise a database data structure a description of a DB may also simply refer to information .

Furthermore when explaining the nature of each piece of information expressions such as identification information identifier first name last name and ID are used but these expressions are interchangeable.

In addition in the following explanation program may be used as the subject in an explanation but since a stipulated process is carried out by a processor executing a program while using a memory and a communication port a communication control apparatus the processor may also be used as the subject of an explanation. Furthermore a process that is disclosed having a program as the subject may be a process that is performed by the management server or other such computer or an information processing apparatus. Also either all or part of a program may be realized using dedicated hardware. Furthermore the present invention does not always have to be realized using a thread mechanism but rather any mechanism such as a micro thread or process mechanism that is able to be executed by a mechanism that manages the execution of a program provided by the OS may be used.

Also various types of programs may be installed in the respective computers in accordance with a program distribution server or a storage medium.

Furthermore the management computer comprises an input output apparatus. As examples of this input output apparatus a display a keyboard and a pointer device can be cited but an apparatus other than these may also be used. As an alternative to the input output apparatus either a serial interface or an Ethernet interface may be used as an input output apparatus and this interface may substitute for the inputting and displaying of the input output device by being coupled to a computer for display use comprising a display a keyboard or a pointer device to display the display information on the display computer and receive input.

Next a sequence of steps for realizing the first means which detects the fact that the user has carried out an import operation to the client PC and assigns an identifier indicating that an import operation has been performed will be explained in accordance with .

When the user left clicks on a link displayed on the Web browser a page transition user operation event occurs in the Web browser and the browser monitoring module detects this page transition user operation event . The browser monitoring module saves the post transition URL that is the URL of the object of the link that was clicked and waits for an information provision request from the dialog operation monitoring module .

Meanwhile in a case where the object specified by the link in accordance with the left click operation is a type that is not able to be displayed in line by the Web browser a file download dialog is displayed. In accordance with this the dialog operation monitoring module detects a dialog operation event when the file download dialog is displayed requests that the browser monitoring module provide post transition URL information and thereafter inputs the post transition URL information from the browser monitoring module .

When the save button is clicked in the above mentioned file download dialog the dialog operation monitoring module inputs a save destination filename from the information the information resulting from OS processing displayed in the dialog and acquires a full path as the save destination information of the above mentioned file . In addition in a case where the server included in the post transition URL inputted in Step is the in house Web server the dialog operation monitoring module assigns an access source identifier to the above mentioned file . In a case where Microsoft s registered trademark NTFS NT File System is used as the local file system utilized by the client PC this identifier may be realized using an alternate stream .

When the user displays a page on a Web browser the browser monitoring module detects a page transition user operation event . At this time the Web browser holds the post transition URL and the page source and these can be delivered in accordance with a browser monitoring module request. When the user performs a right click operation with respect to the link displayed on the Web browser in this state a mouse operation event occurs and the file operation monitoring module detects the above mentioned event .

The file operation monitoring module that detected the occurrence of the mouse operation event saves the information related to the location where the mouse operation event occurred on the Web browser as object relation information and sends same to the browser monitoring module .

The browser monitoring module saves the post transition page URL and the page source each time a page is displayed on the Web browser .

When an item related to a file save is selected from the displayed context menu in accordance with a user right click a file save dialog is displayed.

The dialog operation monitoring module upon detecting the above mentioned dialog display event acquires the displayed page URL and page source page data from the browser monitoring module . In addition the dialog operation monitoring module acquires the file path via which the above mentioned file was saved and in a case where the server included in the URL of the above mentioned file is the in house Web server treats the file access source as a monitoring target and assigns an access source identifier to the file .

When the user carries out a message receiving operation such as booting the mailer or executing an e mail display operation a message is downloaded from the mail server in accordance with a protocol such as POP Post Office Protocol 3 or IMAP Internet Message Access Protocol 4. In so doing the TCP communication monitoring module which monitors a socket in either a network driver or a TCP IP protocol stack implements an e mail text data analysis process and acquires a sender name and a file attachment filename that are in the message .

In addition the TCP communication monitoring module decodes file attachment data that has been coded in Base or the like and computes a hash value . The file attachment filename the hash value and the file attachment sender name obtained in accordance with Steps and are registered in the access source DB .

The user may attempt to execute an operation for saving a file attachment to the local file system while using the mailer to peruse the e mail text this operation is not executed immediately after the e mail data has been downloaded but rather is executed after a considerable period of time has passed . When the mailer carries out the operation for saving the file attachment using a file save dialog the dialog operation monitoring module detects a dialog display event inputs a filename from the information displayed in the dialog and inputs the full path of the file save destination . In addition the dialog operation monitoring module uses the filename displayed in the above mentioned dialog as a key to search the access source DB and acquires an attribute such as file sender name .

In a case where the file attachment filename here is a generic name for example specification.doc it is conceivable that multiple records are registered in the source input DB . In a case like this it is possible to acquire the file sender name by computing a hash value with respect to the file of the save destination filename inputted in Step and using the above mentioned hash value as a key to search the access source DB .

In a case where the file sender name is that of another user in the organization in Step an access source identifier is assigned to the above mentioned file .

The processing from Step through Step is the same as the sequence of steps Step through Step in . It is not only a method in which the user uses the file save dialog to carry out an operation for saving a file attachment to the local file system while perusing an e mail text with the mailer but is also a method for dragging dropping an icon denoting a file attachment displayed in the mailer screen to the desktop or the file explorer.

When an operation like this is carried out the file operation monitoring module detects a mouse based drag drop event from the mailer screen . In addition the file operation monitoring module monitors a file creation event with respect to the file system and in response to the mouse based drag drop operation acquires the name of the file created in the local file system and the full path uses the filename and the file hash value as keys to search the access source DB and acquires an attribute such as the file sender name . In a case where the file sender name in Step is that of another user inside the organization an access source identifier is assigned to the above mentioned file .

Next the sequence of steps which realizes the second means for detecting the fact that the user has carried out an export operation from the client PC checking the identifier that denotes an import was performed and sending an alert will be explained in accordance with .

When the user clicks on a button for adding an upload target file on a Web browser displayed form screen used in a file upload the Web browser displays a file selection dialog. The dialog operation monitoring module detects the event in which the file selection dialog was displayed acquires the name of the selected file and starts monitoring the opening of the file .

When the user selects a file using the file selection dialog and clicks on a file registration button in the above mentioned form screen the form screen is submitted and the screen displayed on the Web browser transitions.

The browser monitoring module detects a page transition event that occurs as a result of this and saves the post transition URL .

In a case where the file upload is submitted at this time the dialog operation monitoring module detects a file opening with respect to this file and acquires the file path of this file from the OS .

The dialog operation monitoring module determines whether or not an alert condition is satisfied and in a case where the determination is that the alert condition has been satisfied sends an alert to the manager . The dialog operation monitoring module acquires the page post transition URL from the browser monitoring module determines whether or not the file output destination is a test target and in a case where the Web server that uploaded the file is an external server treats the file output destination as a test target and checks the access source identifier of the file. The dialog operation monitoring module implements a process for outputting an alert in a case where the file is one that was copied from the in house file server a file that was downloaded from the in house Web server or an acquired upload target file that was attached by the mailer.

The process for outputting an alert is a process for sending an alert to the manager of the management server in a case where a predetermined alert condition has been satisfied. The predetermined alert condition is configured such that an alert is sent in a case where a file upload destination server such as an external Web server is the monitoring target and in addition the upload target file is the management target.

In a case where the output destination of the output information outputted from the client PC that is the Web server to which the file was uploaded is the external Web server this Web server is a test target that differs from the management server management target.

A file that is a management target of the management server is a client PC processed file for example a file that corresponds to any of 1 a file copied from the in house file server 2 a file downloaded from the in house Web server or 3 an acquired file that was attached to the mailer. In a case like this where the file access source is a management server management target the output information the file outputted from the client PC is determined to be information created in accordance with an illegal operation. As a result of this an alert to the effect that the file conforms to an illegal operation condition an alert condition is created and this alert is sent to the management server .

In accordance with this the management server determines that an illegal operation which runs a high risk of resulting in an information leak has been detected and manages the information resulting from the illegal operation as information to be processed via an alert. In accordance with this the administrator is able to execute a measure for suppressing information leaks based on the alerts collected in the management server .

When the user uses the file selection dialog to carry out a file attachment operation while creating an e mail to be sent using the mailer the dialog operation monitoring module detects a display event of the file selection dialog acquires the name of the selected file and the full path of the file and stands by until the e mail is sent.

Thereafter when the user implements an outgoing e mail operation using the mailer the TCP communication monitoring module analyzes the data to be sent using the SMTP Simple Mail Transfer Protocol protocol and acquires the destination and the file attachment filename .

In a case where a file attachment was attached to the outgoing e mail and in addition the e mail destination was outside of the organization the TCP communication monitoring module communicates the fact that the e mail was sent to an external address to the dialog operation monitoring module that is standing by .

The dialog operation monitoring module checks the identifier denoting the access source of the sent file and in a case where the file is any of a file that was copied from an in house file server or a file that was downloaded from the in house Web server or a mailer attached acquired file implements a process for outputting an alert .

When the user uses a drag drop to carry out a file attachment operation while creating an e mail to be sent using the mailer the file operation monitoring module detects the fact that a file has been dragged dropped from the file explorers or the like to a window of the mailer acquires the name of the selected file and the full path of the file and stands by until the e mail is sent.

Thereafter when the user implements an outgoing e mail operation using the mailer the TCP communication monitoring module analyzes the data to be sent using the SMTP protocol and acquires the destination and the file attachment filename .

In a case where a file attachment was attached to the outgoing e mail and in addition the e mail destination was outside of the organization the TCP communication monitoring module communicates the fact that the e mail was sent to an external address to the dialog operation monitoring module that is standing by .

The file operation monitoring module checks the identifier denoting the access source of the sent file and in a case where the file is any of a file that was copied from an in house file server or a file that was downloaded from the in house Web server or a mailer attached acquired file implements a process for outputting an alert .

When the user carries out a print operation using an application the dialog operation monitoring module detects a print dialog display event and acquires the title of the window of the application implementing the printing . In accordance with this the dialog operation monitoring module opens the application and acquires the full path of the file for which printing is attempting to be executed .

Thereafter when the user clicks on a print button in the print dialog the dialog operation monitoring module detects the fact that the dialog has been closed checks the identifier denoting the access source of the file that was sent and implements a process for outputting an alert in a case where the file was copied from an in house file server or the file was downloaded from an in house Web server or the file was a mailer attached acquired file .

Two sequences of steps are displayed in . The sequence of steps of first means which is realized in accordance with processing executed by the file operation monitoring module when the user copies file server information to the local file system using the file explorer is shown at the top of . The sequence of steps of second means which is realized in accordance with processing executed by the file operation monitoring module when the user copies a file to a removable media using the file explorer is shown at the bottom of .

The sequence of steps corresponding to first means will be explained first. When the user carries out either a file explorer based file copy or move operation the file operation monitoring module identifies the copy source and the copy destination of the file . In a case where the copy source is the file server and in addition the copy destination is the client PC the file operation monitoring module assigns an access source identifier to the operation target file .

The sequence of steps corresponding to second means will be explained. When the user carries out either a file explorer based file copy or move operation the file operation monitoring module identifies the copy source and the copy destination of the file . In a case where the copy source was the local file system of the client PC and in addition the copy destination was a removable media coupled to the client PC the file operation monitoring module checks the access source identifier of the operation target file. The file operation monitoring module implements a process for outputting an alert in a case where the operation target file is any of a file that was copied from an in house file server or a file that was downloaded from the in house Web server or a mailer attached acquired file .

The access source DB comprises a field for storing a filename a field for storing the name of the sender of an e mail and a field for storing the hash value of a file described in the field .

The access source identifier may be realized as ini file formatted data using the alternate stream in the case of Microsoft s NTFS as was described using as well. In the case of a file accessed from the mail server the sender s e mail address is entered in the From line. In the case of a file accessed from the file server either the server name or IP address of the file server is entered in the Server line. In the case of a file accessed from the in house Web server the URL denoting the accessed file is entered in the URL line. An unused line may be deleted and equal or later may be left blank.

In the present invention it is possible to send the contents included in the access source identifier to the management server as an alert using second means. In accordance with first means in a case where the time at which the management target information was imported to the client PC is included in the access source identifier besides the access source of the exported information it is possible to include the access date time in the content of the alert.

To realize the above a time information field for storing the time at which an e mail comprising a file attachment was received may be added as an access source DB field. The configuration may be such that the TCP communication module registers the received time entered in the e mail header in the time information field in Steps and and acquires the recording time of the time information field as well and assigns the time information to the access source identifier in Steps and for acquiring the file attribute.

The browser monitoring module boots up at the same time as the Web browser configures monitoring of user operation events with respect to the Web browser explained using and and enters a loop for determining whether an event has occurred . In a case where the occurrence of an event has been detected the browser monitoring module executes a step for determining whether or not the page has transitioned in accordance with a left click operation by the user .

In a case where the page has transitioned in accordance with a left click operation by the user the browser monitoring module subsequent to executing a step for acquiring the post transition URL executes a step for sending the URL to the dialog monitoring module .

Alternatively in a case where the page did not transition the browser monitoring module executes a step for acquiring browser based coordinate information of a mouse event from the file operation monitoring module . The browser monitoring module executes a step for acquiring an HTML anchor tag that is located beneath the mouse cursor and executes a step for extracting the URL selected using the mouse cursor. The buzzer monitoring module executes a step for sending the URL to the dialog monitoring module .

The dialog operation monitoring module boots up when the user logs in to the client PC . The dialog operation monitoring module is for monitoring file operations using the dialogs described using and and for example after performing timer monitoring and other such setups monitors for events in which a dialog is displayed .

In a case where an event occurs the dialog operation monitoring module checks whether either an upload dialog or a download dialog is being displayed and in a case where one of these dialogs in displayed determines the type of application that displayed this dialog . In a case where the application is the mailer the dialog operation monitoring module implements a step for creating a mailer check thread and in a case where the application is the Web browser implements a step for creating a Web browser check thread.

In Step in a case where the dialog being displayed is neither the upload dialog nor the download dialog the dialog operation monitoring module determines whether or not this displayed dialog is the print dialog . The dialog operation monitoring module implements a step for creating a print check thread in the case of the print dialog.

After implementing the steps for creating the respective threads the dialog operation monitoring module returns to the step for monitoring for events in which a dialog is displayed.

Thereafter when the user clicks on the dialog save button or the like and the dialog ceases to be displayed the dialog operation monitoring module executes the processing of Step and later.

First the dialog operation monitoring module determines whether a full path was acquired in accordance with Step and in addition whether the file indicated by this full path exists . In a case where the file exists the dialog operation monitoring module executes the processing of Step and subsequent steps and in a case where the file does not exist returns to Step .

In a case where the file exists the dialog operation monitoring module first determines whether or not the dialog is a download dialog and in a case where it is a download dialog computes the hash value of the file identified in Step . The dialog operation monitoring module as shown in retrieves the information that the TCP communication monitoring module registered in the access source DB and in a case where this information matches a predetermined condition such as a case in which the access source is another user in the organization write the access source information to the file identified by the full path acquired in Step .

In the case of an upload dialog the dialog operation monitoring module receives the destination information from the TCP communication module as shown in and in a case where the file specified in the upload dialog was sent attached to an e mail reads the access source information of the file identified in Step . The dialog operation monitoring module checks the alert condition creates an alert and sends the alert to the management server as needed .

In this thread the dialog operation monitoring module checks whether either the upload dialog or the download dialog is displayed and in a case where one of these dialogs is displayed acquires the folder name from the character string displayed in the dialog acquires a filename configures a full path for either the upload target or the download target file and returns to Step . Thereafter when the user clicks on the dialog save button or the like and the dialog ceases to be displayed the dialog operation monitoring module executes the processing of Step and subsequent steps.

First the dialog operation monitoring module determines whether a full path was acquired in accordance with Step and in addition whether the file indicated by the full path exists . In a case where the file exists the dialog operation monitoring module executes the processing of Step and subsequent steps and in a case where the file does not exist returns to Step . In a case where the file exists the dialog operation monitoring module first determines whether or not the dialog is a download dialog and in a case where it is a download dialog as shown in acquires the download source information held by the browser monitoring module and in a case where this information matches a predetermined condition such as when the access source is another user in the organization writes the access source information to the file indicated by the full path acquired in Step .

In the case of an upload dialog the dialog operation monitoring module acquires the upload destination information held by the browser monitoring module from the browser monitoring module as shown in . In a case where the file specified in the upload dialog has been sent the dialog operation monitoring module reads the access source information of the file identified by the full path acquired in Step checks whether or not the alert condition is satisfied creates an alert and sends the alert to the management server as needed .

In this thread the dialog operation monitoring module checks whether a print dialog is being displayed and in a case where a print dialog is displayed acquires the process ID of the print source application program and also acquires a filename from a list of files that the application program identified by this process ID has opened . The dialog operation monitoring module configures the full path of the print target file and returns to Step .

Thereafter when the user clicks on the print button or the like in the dialog and the dialog ceases to be displayed the dialog operation monitoring module reads the access source information of the print target file checks the alert condition creates an alert and sends the alert to the management server as needed .

The file operation monitoring module boots up when the user log in to the client PC and after starting a mouse event hook monitors for a file operation using the mouse as described using and . The file operation monitoring module upon detecting an event determines whether or not the detected mouse operation event was a right click .

In the case of a right click operation the file operation monitoring module acquires mouse cursor coordinates of the foreground window executes a process for converting to the browser window coordinates executes a process for notifying the browser monitoring module of the coordinates acquired in Step and return to event monitoring.

Alternatively in a case where the determination in Step was that the mouse operation event was not a right click the file operation monitoring module executes a process for determining whether or not it was a drag event and in a case where the event was not a drag event return to monitoring for events.

In a case where the event is a drag event the file operation monitoring module detects an event in which a dragged object was dropped and determines whether the file dragged in the file explorer was dropped in the mailer .

In a case where the determination in Step is No the file operation monitoring module proceeds to Step which will be explained further below. In a case where the determination in Step is Yes the file operation monitoring module acquires the drag source file path reads the access source information of the file identified by the full path acquired in Step and after checking the alert condition sends an alert to the management server as needed .

In a case where the object drop destination was not the mailer in Step the file operation monitoring module determines whether the drag drop event was one in which the drag was on the mailer and the drop was in the file explorer .

In a case where the determination in Step is No the file operation monitoring module returns to event monitoring and in a case where the determination in Step is Yes acquires the drop destination file path of the file that was attached to the e mail . Next the file operation monitoring module computes the hash value of the file for which the full path was acquired in Step and retrieves the information registered in the access source DB . In a case where the information matches a predetermined condition such as when the access source is another user in the organization the file operation monitoring module writes the access source information to the file indicated by the full path acquired in Step .

Furthermore as for the processing of the file operation monitoring module with respect to the sequence of steps shown in the file operation monitoring module may also carry out processing in accordance with Steps and in a case where the drag source is the file server and the drop destination is the local file system and may also carry out processing in accordance with Steps and in a case where the drag source in the local file system and the drop destination is a removable media.

The file operation monitoring module may also carry out processing in accordance with Step in a case where the drag source is the file server and the drop destination is a removable media .

The TCP communication monitoring module boots up when the user logs in to the client PC and monitors for communication data in accordance with the SMTP POP3 and IMAP4 protocols. The TCP communication monitoring module starts monitoring socket communications and determines whether or not data is being sent and received via any of the above mentioned protocols . In a case where Step is No the TCP communication monitoring module returns to monitoring socket communications and in the case of a Yes implements the processing of Step and subsequent steps.

In Step the TCP communication monitoring module implements an e mail data analysis. At this time the TCP communication monitoring module is able to analyze the information of the sender and the receiver from the header area of the e mail data and in addition is able to obtain information such as the presence or absence of a file attachment and a filename by analyzing the MIME Multipurpose Internet Mail Extension part.

Next the TCP communication monitoring module identifies whether or not the e mail has a file attachment and in the case of an attachment also determines whether the protocol type is either the POP3 or the IMAP4 for receiving an e mail or the SMTP for sending an e mail . In the case of an incoming e mail the TCP communication monitoring module acquires the sender name and the filename of the attachment computes a hash value subsequent to decoding the file attachment data and after also carrying out a registration with respect to the access source DB returns to monitoring socket communications.

Alternatively in a case where the determination in Step is an outgoing e mail the TCP communication monitoring module acquires the sender name and the file attachment filename and sends the information acquired in Step to the dialog operation monitoring module and the file monitoring module .

In accordance with the configurations and processes described hereinabove this system makes it possible to identify the fact that information input information imported to the client PC from a machine which is different than a management target was exported to a machine that is a test target. As methods for importing information to the client PC there are 

In the case of a file system for example Microsoft s NTFS comprising a function by which an access source identifier is also assigned to post process information to include copied information when a process such as a copy a rename or a move is carried out with respect to imported information inside the local file system of the client PC an alert can be sent to the management server as an information export operation envisioned by the illegal operation detection system of this example when

The alert condition for sending an alert using this system may be decided based on the contents of the access source identifier . For example the security policy may be configured such that all in house Web servers are targeted when information has been imported in accordance with a download using a Web browser or only when a specific Web server URL included in the access source identifier is targeted in a case where it is possible to identify the Web server in which important information is stored.

It is also possible to change the condition for outputting an alert in accordance with the time slot during which the export operation was carried out the information type or size.

According to this example it is possible to detect an export operation to another organization subsequent to a user having imported to the client PC he is using confidential information created on another computer inside the organization as an illegal operation. Therefore in this example a user executed operation that runs the risk of resulting in an information leak can be detected as an illegal operation.

Consequently because a user operation that runs the risk of becoming an information leak is detected it is possible to realize a function that raises an alert with respect to an illegal operation that risks the leakage of information without performing an initial setting for outputting an alert in a case where a specific information output operation is performed or an initial setting that defines an illegal operation pattern.

It is also possible to suppress information leaks by detecting illegal operations that run the risk of resulting in an information leak incident and managing the information accompanying the illegal operation as information to be processed using an alert.

A second example will be explained by referring to . In this example in file trace information for managing the history of file operations is stored in each file and the same information as the in file trace information is stored in the management server . In the explanations of the following examples to include this example the focus will be on those portions that differ from the example described hereinabove.

When the user creates a new file this file creation is detected by the file operation monitoring module . The file operation monitoring module creates in file trace information . The created in file trace information is stored in the alternate stream of the file . In addition the agent program sends the created in file trace information to the manager . In accordance with this the same information as the in file trace information is also stored in the PC management DB of .

The in file trace information for example comprises a file storage identifier FID an operation identifier OID and a count. The file storage identifier is information that is configured in a case where the file is stored in the file system of the client PC and is for uniquely identifying this file. The operation identifier corresponds to the operation generation information and is information denoting the number of times the file has been put into operation the generation . The count corresponds to the copy frequency information and denotes the number of times the file has been copied. In other words the count denotes the number of lineages that branched from a file.

Furthermore the count shown in the file is also used for creating the next operation identifier. That is since the lineages increase by one every time the file is copied the count value in the operation source file is passed along to the operation identifier of the operation destination file to denote how many times a file of a certain lineage has been put into operation.

Next in a case where the file has been copied the file operation monitoring module acquires the in file trace information from the alternate stream of the file and creates post copy operation in file trace information . The created in file trace information is stored in the alternate stream of the copy destination file . In addition the same information as this in file trace information is associated with the copy destination file and stored in the PC management DB.

In line with the copy operation the value of the count of the copy source file is updated from 0 to 1 . The copying of the file signifies that a new file of the same content is created while the copy source remains as is. That is multiple files having the same content exist together. Accordingly the count value is updated in accordance with the copy frequency and a distinction is made between the lineage of each copy.

The file operation is a copy an operation source file is a copy source file an operation destination file is a copy destination file. The copy source file and the copy destination file comprise the same file data. Therefore the file storage identifier of the copy source file is the same as the file storage identifier of the copy destination file .

The explanation will focus on the changing of the operation identifier. The operation identifier of the copy source file is 0 . Each time the number of operations increases by one the number of digits of the operation identifier increases by one. The operation identifier of the operation destination file is comprised from the operation identifier and the count of the operation source file. The operation identifier of the operation source file is 0 and the count is also 0 . Therefore the operation identifier of the operation destination file is created as 00 by lining up the operation source file operation identifier 0 next to the operation source file count 0 .

That is the operation identifier denotes both the number of operations and the lineages number of branches . The number of digits of the operation identifier denotes the number of operations. Two digits denote a second operation. In the above example the first operation is the creation of the file. A numeral or character other than 0 included in the operation identifier denotes a descendent of nth copies. For example a file which has an operation identifier of 000 is the direct descendant of the file which has an operation identifier of 0 and is the file that was created in accordance with a third operation.

A case in which the name of a file has been changed either manually or automatically will be explained. The file operation in this case is a rename. The operation source file is the rename source pre rename file . The operation destination file is the rename destination post rename file .

The file operation monitoring module acquires the in file trace information from the alternate stream of the file and creates post rename in file trace information . The created in file trace information is stored in the alternate stream of the rename destination file . Similar to the description given above the same information as this in file trace information is associated with the rename destination file and is stored in the PC management DB.

Only the name of the rename destination file changes and it comprises the same file data as the file . Therefore the file storage identifier of the rename source file and the file storage identifier of the rename destination file are the same.

The operation identifier 000 of the rename destination file is created by lining up the rename source file operation identifier 00 and the count 0 . Since the rename source file operation identifier 000 has three digits it is clear that this file is the file that was created by the third operation counting from the creation of the file which is the source. Furthermore 0 is configured in the count of the rename destination file .

A case in which the file that underwent the rename has been deleted from the file system either manually or automatically will be explained. The file operation here is a file deletion. The operation source file is deletion target file . An operation destination file does not exist. This is because the file will be deleted.

The operation destination file does not exist but in file trace information for an operation destination file is created. The file storage identifier is the same as the file storage identifier of the deletion target file . The operation identifier 0000 is created by lining up the deletion target file operation identifier 000 and the count 0 . The same information as the in file trace information created for the operation destination file is stored in the PC management DB.

A case in which the source file has been moved will be explained. In this case the file operation is a file move the operation source file is the move source file and the operation destination file is the move destination file . The file operation monitoring module upon detecting this file move acquires the in file trace information of the move source file and creates in file trace information for the move destination file based on this in file trace information.

Similar to a file copy there is no change in the file data before or after the file operation for a file move. Therefore in the in file trace information of the move destination file the file storage identifier is the same as the file storage identifier of the move source file . The operation identifier 01 in the in file trace information of the move destination file is created by lining up the move source file operation identifier 0 and the count 1 . Furthermore as was described hereinabove the initial value 0 is configured in the move destination file count.

Furthermore in the case of a file move unlike a file copy the move source file ceases to exist and only the move destination file remains in the file system . However the in file trace information related to the move source file continues to be stored in the PC management DB.

A case in which the move destination file has been deleted will be explained. The file operation in this case is a file deletion and the operation source file is the deletion target file . Since the file is to be deleted the operation destination file does not exist. However as was explained hereinabove in file trace information for an operation destination file is created and stored in the PC management DB. An operation identifier 010 is created in the in file trace information by lining up the deletion target file operation identifier 1 and the count 1 . The initial value 0 is configured in the count value of the in file trace information .

The history of the file operations described using will be explained once again by referring to . In each file operation shown in will be explained one at a time. However the duplicate file operations the file deletions among the respective file operations shown in are shown only once in the .

The relationship between the in file trace information and the storage contents of the PC management DB are shown in . The left side of shows the initial state. In the initial state there are no files stored in the file system of the client PC and there are no records recorded in the PC management DB.

The right side of shows a state in which one file has been stored in the file system. For example a file such as a file downloaded from the Web server or a file downloaded from the file server a file copied from the removable media or a file attached to an e mail is stored in the file system.

When the file is stored in the file system in file trace information for this file is created. In this in file trace information 0 is configured in the operation identifier and the initial value 0 is also configured in the count. The same information as the in file trace information is stored in the PC management DB. In addition the content of a file operation information denoting where the file was acquired from is also stored together in the PC management DB.

Refer to . The left side of is the same as the right side of . Therefore the state of the right side of will be explained. The right side of shows a state in which the initial file C test.txt stored in the file system in the right side of has been copied to another directory. In the in file trace information of the copy destination file C test test.txt 00 is configured in the operation identifier OID and 0 is configured in the count. The file storage identifier FID is the same as prior to the copy. The same information as the in file trace information of the copy destination file is associated with the operation content and stored in the PC management DB.

The creation of a single copy C test test.txt from the initial file C test.txt changes the count value included in the in file trace information of the initial file from 0 to 1 . However the record corresponding to the in file trace information of the initial file stored in the PC management DB does not change before or after the copy operation. The in file trace information of the initial file that is stored in the PC management DB does not change at all. That is the same information as the post file operation in file trace information is stored in the PC management DB and the content of the record corresponding to the in file trace information of the file that has been put into operated does not change thereafter even in a case where the file corresponding to this in file trace information is put into operation yet again.

Refer to . The left side of is the same as the right side of . Therefore the state of the right side of will be explained. The right side of denotes a state in which the filename of the file that was copied in the right side of has changed from text.txt to text2.txt .

In file trace information of the rename destination file C test text2.txt is created based on the in file trace information of the rename source file C test text.txt . This created in file trace information is stored in the alternate stream of the rename destination file . In addition the same information as the created in file trace information is also stored in the PC management DB.

An operation identifier 000 is configured in the in file trace information of the rename destination file . The operation identifier 000 related to the rename destination file is created by lining up the operation identifier 00 and the count 0 of the rename source file to make three digits. The initial value 0 is configured in the count related to the rename destination file .

Focusing on the PC management DB shown in the lower right of a total of three pieces of in file trace information i.e. the in file trace information related to the initial file more accurately the information which added the operation content to the same information as the in file trace information. The same holds true hereinbelow the in file trace information related to the copied file and the in file trace information related to the renamed file are stored in the PC management DB. As described hereinabove the content of the respective pieces of in file trace information stored in the PC management DB does not change regardless of a subsequent file operation. This is because the transition history of the file operations are detected and visualized based on the respective pieces of in file trace information stored in the PC management DB.

Refer to . The left side of is the same as the right side of . Therefore the state of the right side of will be explained. The right side of shows a state in which the initial file C text.txt has been moved to another directory D .

The in file trace information related to the move destination file D text.txt is created based on the in file trace information of the move source file C text.txt and stored in the alternate stream of the move destination file . The same as above the same information as this in file trace information is sent to and stored in the PC management DB.

The operation identifier 01 related to the move destination file is created by lining up the operation identifier 0 and the count 1 of the move source file to achieve two digits. The initial value 0 is configured in the count value. Furthermore there is no change in the file storage identifier throughout .

Refer to . Since the left side of is the same as the right side of the state of the right side of will be explained. The right side of shows a state in which the file that was moved in the right side of is deleted from the file system.

The in file trace information of the deleted file is created based on the in file trace information of the deletion target file D text.txt . The same information as the created in file trace information is sent to and stored in the PC management DB. The created in file trace information is not stored in the alternate stream. This is because the file is deleted and an alternate stream for storage does not exist.

The operation identifier 010 related to the deleted file is created by lining up the operation identifier 01 and the count 0 of the deletion target file to achieve three digits. The initial value 0 is configured in the count related to the deleted file. Since the file has already been deleted this count value does not increase.

In a case where a user administrator wishes to output a file operation history the following processing is executed. First the user selects the in file trace information that constitutes the source. The manager inside the management server retrieves the PC management DB using the file storage identifier included in the in file trace information selected by the user. In accordance with this only the records comprising the file storage identifier selected by the user are extracted. In addition the manager sorts the respective records comprising the user selected file storage identifier based on the operation identifiers.

The information obtained in this way shows the history of all the file operations originating from the same file. In file trace information in which the first through the last but one digits of the operation identifier are the same belongs to operations of the same lineage. In file trace information having one more operation identifier digit one more operation identifier character than the other in file trace information that belongs to the same lineage of file operations denotes a subsequent operation.

The file operation monitoring module checks the copy source and the copy destination and writes access source information as needed to the alternate stream of the file being put into operation . Then the file operation monitoring module writes in file trace information to the alternate stream of the file that was put into operation .

In a case where explorer or another such application program is used to either move or copy a file as explained hereinabove the content of the file alternate stream is also either moved or copied the value of the operation identifier changes . When a file is deleted the content of the alternate stream is also deleted.

The file operation monitoring module creates operation destination in file trace information sends the operation destination in file trace information to the manager and stores same in the PC management DB and in addition updates the operation source in file trace information as needed. An in file trace information operation will be explained in detail further below.

When the determination is that the operation is a file operation source the monitoring module creates new in file trace information and writes the newly created in file trace information to the alternate stream of the newly created file . In addition the monitoring module sends the newly created in file trace information to the manager and stores same in the PC management DB .

When the determination is that the file operation does not constitute a source the monitoring module attempts to acquire in file trace information from the alternate stream of the file that is the operation source . The monitoring module determines whether or not it is possible to acquire the in file trace information from the alternate stream of the operation source file . In a case where it is not possible to acquire the in file trace information from the alternate stream of the operation source file the monitoring module creates new in file trace information for the operation source file .

For example the in file trace information will not be written in the alternate stream of a file that existed prior to the file operation history management system related to this example being installed in the computer system. Therefore for a file like this new in file trace information is created and written to the alternate stream and .

The monitoring module creates the in file trace information related to the operation destination file and in addition in a case where updating is required updates the in file trace information related to the operation source file . In a case where it was possible to acquire the in file trace information from the alternate stream of the operation source file in Step processing moves to Step .

The monitoring module executes a user desired file operation and determines whether or not the operation destination file exists . In a case where the operation destination file exists the monitoring module writes the in file trace information related to the operation destination file created in Step to the alternate stream of the operation destination file .

In a case where the operation destination file does not exist the monitoring module determines whether or not the operation source file exists . In a case where the operation source file exists the monitoring module writes the in file trace information created in Step to the alternate stream of the operation source file when updating is required . For example in the case of a file copy it is necessary to increase the count value inside the in file trace information related to the operation source file the copy source file .

In a case where either the operation source file does not exist or the in file trace information stored in the alternate stream of the operation source file has been updated the monitoring module sends the in file trace information related to the operation destination file to the manager and stores same in the PC management DB .

As explained hereinabove in the case of a file create copy move and rename the operation destination file exists. In the case of a file deletion the operation destination file does not exist. In a case where the operation destination file does not exist the in file trace information for the operation destination file created in Step is managed solely by the PC management DB.

In the case of a file move rename and delete the operation source file ceases to exist. The operation source file exists only in the case of a file create or copy.

The monitoring module determines whether or not the operation identifier of the in file trace information related to the operation destination file is less than 31 digits . As described above the operation identifier is increased by one each time an operation is performed and the upper limit of the number of digits is 32.

In a case where the operation identifier is less than 31 digits the monitoring module determines whether or not the count value in the in file trace information related to the operation destination file is less than 60 . As described above the count increases by one each time a copy is performed and the upper limit for this count is 60. In a case where the count value is less than 60 the monitoring module adds one character that has been converted from the count related to the operation source file to the end of the operation identifier related to the operation destination file . In accordance with this the operation identifier related to the operation destination file becomes a value obtained by lining up the operation identifier related to the operation source file and the count related to the operation source file.

Return to . Subsequent to Step the monitoring module configures the initial value 0 in the count related to the operation destination file and in a case where a count update is required also increases the count value related to the operation source file by one . That is in a case where a file has been copied the monitoring module increases the count value of the operation source file by one. In the case of a file operation other than copy the count value of the operation source file does not change.

In a case where the count value related to the operation destination file is not less than 60 the monitoring module determines whether or not it is an illegal operation . As described in the first example in a case where a file for which the access source identifier has been configured is outputted to either an external server or a removable media for example this can be determined to be an illegal operation.

In the case of an illegal file operation determination the monitoring module configures a z in the last 60 digit of the operation identifier related to the operation destination file . A 0 is configured in the count related to the operation destination file .

In a case where the determination is that the file operation is not illegal the monitoring module configures a y in the last 60 digit of the operation identifier related to operation destination file . A 0 is configured in the count related to the operation destination file .

In a case where it has been determined that the operation identifier is not less than 31 digits a determination is made as to whether or not the operation identifier is 31 digits . In a case where the operation identifier is not 31 digits this processing ends. In a case where the operation identifier is 31 digits the monitoring module determines whether or not an illegal file operation has occurred . In a case where an illegal file operation has not occurred this processing ends. In a case where an illegal file operation has occurred the monitoring module adds a 0 to the last digit of the operation identifier related to the operation destination file to create a 32 digit operation identifier .

The reason for determining that the file operations were illegal in Steps and will be explained. For example in a case were a file is either written to the removable media or uploaded to the external Web server it is not possible to write the in file trace information to the alternate stream of the operation destination file. This is because the operation destination file exists outside of the client PC file system . Therefore the operation destination file in the case on an illegal operation is equivalent to a leaf at the end of the tree structure.

However due to limited data storable areas in this example the operation identifier is restricted to 32 digits 32 characters and the ranges of usable characters for use as the operation identifier are restricted to 0 through 9 A through Z and a through z.

In a case where the file operation history is traced regardless of whether or not it is an illegal operation two groups can be formed i.e. a group of files for which the operation identifier ends in z and a group of files in which the operation identifier has reached the upper limit value of 32 characters. These file groups become the leaf portions in the tree structure of the file operation history but are not necessarily files that have been put into operation illegally.

Therefore in this example in a case where the operation identifier is 32 characters and a case where the operation identifier ends in z it is supposed that the value state is that of an illegal operation. In the case of an operation other than an illegal operation these values respectively transition to the immediate previous state i.e. to a state in which the number of digits of the operation identifier is 31 characters and a state in which the character y is added to the operation identifier.

A y is assigned to all operation identifiers of files that are created by subsequent copy operations that are not illegal operations . Thereafter when an illegal operation is carried out with respect to the file z is assigned to the operation identifier . An operation for which z has been assigned to the operation identifier cannot have a child node. Therefore it is clear at a glance that an operation for which z has been configured at the end of the operation identifier is an illegal operation.

The manager of the management server searches the PC management DB using the file storage identifier of the file selected by the user as the search key and extracts the record s comprising the selected file storage identifier. In addition the manager sorts the extracted records based on the operation identifiers. Table at the top of shows the result of this sorting.

Since the results in table show the order of a Depth First Search of a tree structure a tree structure can easily be plotted on the basis of the table results. The trace information minus the final character of the operation identifier becomes the parent trace information. For example the parent operation the parent operation is the operation previous to the one in question of an operation for which the operation identifier is 0010 is the operation comprising the operation identifier 001 . In the tree display screen and the table corresponds to corresponds to corresponds to corresponds to corresponds to corresponds to corresponds to and corresponds to respectively.

The monitoring of a file operation history a file operation trace has been explained hereinabove by focusing on the file operations in the file system . However this example is not limited to file system based file operations but rather is also applicable to cases such as a file upload or download using a Web browser the sending and receiving of a file using e mail and printing from an application program.

File operations are not limited to the file create move copy rename and delete described hereinabove. For example the following can also be managed as file operations 

The relationship between the operation source file and the operation destination file in either a file upload or download using a Web browser is as follows. Operation source file will be abbreviated to operation source and operation destination file will be abbreviated to operation destination here.

To trace each of the above mentioned operations 1 through 6 the processing described using is respectively executed in the step for assigning the inputidentifier the step for checking and so forth whether or not the operation corresponds to the alert condition and the step for registering the operation in the input source DB .

Upon executing the processing of the following points will differ for each of the above mentioned operations 1 through 6 .

This operation constitutes the file source operation and as such the determination in Step will always be Yes .

Since the operation destination is the input source DB in the processing of Step the trace information is not written to the file alternate stream but rather the in file trace information is stored in the input source DB . Making the input source DB the operation destination is done so that the source operation the receiving of the e mail with a file attachment can be identified no matter how often the file attached to the e mail is copied in the file system .

In Step the in file trace information is not acquired from the operation source alternate stream but rather the in file trace information is acquired from the input source DB .

As described above this example is also able to manage the operations of the above mentioned 1 through 6 . shows a table which has been extracted from the PC management DB in accordance with a user selected condition and a file operation history tree structure that was plotted on the basis of the table .

Being configured like this this example is able to efficiently manage a history of file operations. In addition utilizing the file storage identifier and the operation identifier makes it possible to easily display the history of file operations in a tree structure.

In the case of a DB that does not comprise the file storage identifier and the operation identifier after reading the operation source file from the DB the tasks of using this operation source file to search the operation destination file field and using the retrieved filename to once again search the operation source file field must be repeated many times. Therefore the number of accesses to the DB increases significantly and it takes time to create a table for extracting an operation history and to display a tree structure.

By contrast in this example the operation history of a user selected file can be easily extracted and displayed via a tree structure by simply reading the file storage identifier and operation identifier from the PC management DB. Usability is therefore enhanced.

In addition in this example the file storage identifier the operation identifier and the count are written to the alternate stream of the file Furthermore as described in the first example an access source identifier may also be written to the alternate stream . Therefore even in a case where the PC management DB shuts down temporarily or a record is partially destroyed it is possible to manage the history of file operations by reading the in file trace information stored in the file alternate stream.

Furthermore the configuration may also be such that the information for managing the file operation history is not stored in the file alternate stream but rather is stored and managed in a DB inside the client PC. For example it is also possible to monitor the operation history of a file that is inputted and outputted to the client PC using a DB of a configuration like that shown in .

Also this example is not limited to the NTFS alternate stream and for example an auxiliary data area like a resource fork may also be used. The auxiliary data area as a data area that attaches to a file and is an area that becomes an operation target together with the file data when the file is put into operation. Data can be read from and written to the auxiliary data area either by using a different function than either a read function or a write function with respect to the file data or by specifying an argument that differs from an ordinary argument with respect to either the read function or the write function.

A third example will be explained by referring to . In the first example either a URL or an e mail address and the full path on the file system are acquired by acquiring either a Web browser user operation or a character string input to a dialog. In this example another method is used to detect the corresponding relationship between the file path information the full path and either the URL or the e mail address.

The file I O monitoring module comprises a file I O detection function for detecting a file input output that occurs in either the Web browser or the various application programs and an access source information assigning function for writing access source information the access source identifier to the file alternate stream.

The HTTP communication monitoring module comprises a socket reception detection function for detecting the sending and receiving of a file a protocol analysis function for analyzing the data that has been sent received via the socket and a function for carrying out a registration and the assigning and checking of the access source information. In a case where a file has been downloaded to the client PC via the socket the function which performs registration and a notification among other things assigns the access source information to this file and registers same in the browser input DB .

The TCP communication monitoring module and the HTTP communication monitoring module monitor communications on a communication network. The TCP communication monitoring module monitors the outgoing and incoming e mails POP3 IMAP SMTP . The HTTP communication monitoring module monitors HTTP communications. The file I O monitoring module monitors a file read write that uses a Web browser or a mailer.

In order to combine the file data that has been sent and received via a communication network with the file data that has been input output to from the file system this example provides DBs through which use the hash values of this file data as keys.

A case in which a file is downloaded to the client PC will be explained. When the user downloads a file the download source information either the URL or the e mail address and the download data can be acquired by either the TCP communication monitoring module or the HTTP communication monitoring module . This download source information and the hash value of the downloaded data area are stored in the input DB refer to .

Refer to here. shows an example of the configuration of the browser input DB . The browser input DB manages a file that has been downloaded via a Web browser. The browser input DB for example comprises an access source URL field A a hash value field B a file storage identifier field C an operation identifier field D and a count field E.

A file s download source URL is stored in the access source URL field A. A hash value computed on the basis of the data of the downloaded file is stored in the hash value B. The file storage identifier assigned to the downloaded file is stored in the file storage identifier field C. The operation identifier configured in the downloaded file is stored in the operation identifier field D. A count related to the downloaded file is stored in the count field E. The hash value the file storage identifier the operation identifier and the count are the same for another DB which will be explained further below.

Refer to . shows an example of the DB for managing a file a file attached to an e mail that is acquired via the mailer. The mail input DB for example comprises a filename field A a sender name field B a hash value field C a file storage identifier field D an operation identifier field E and a count field F.

The name of a file attached to an e mail is stored in the filename field A. The name of the sender of the e mail to which the file is attached is stored in the sender name field B. The hash value the file storage identifier the operation identifier and the count are the same as those in and as such explanations thereof will be omitted.

When either a browser or a mailer downloads a file the downloaded file data is written to the file system of the client PC. The file I O monitoring module detects the file data write to the file system .

The file I O monitoring module finds the hash value of the file data stored in either the browser or the mailer and searches to determine whether a record of the same hash value is in the input DBs or . In a case where the same hash value record exists this record denotes the downloaded file. Therefore the corresponding access source information and in file trace information are assigned to the file identified in accordance with the hash value.

A case in which a file is uploaded will be explained. The user is able to use either a Web browser or an e mail to send a file outside the client PC. Either the browser or the mailer reads the upload target file data when the user uploads a file. The file I O monitoring module detects this file data reading. The file I O monitoring module finds the path and hash value of the file that was read by either the browser or the mailer and stores same in the output DBs and .

Refer to . is the DB for managing a file that has been outputted outside the client PC using a browser. The browser output DB for example comprises an upload file field A a hash value B a source field C a server field D a URL field E a file storage identifier field F an operation identifier field G and a count field H.

Path information in which the path information of the uploaded file denotes the storage destination of the uploaded file is stored in the upload file field A. The name of the user who uploaded the file is stored in the source field C. The name of the upload destination server is stored in the server field D. The upload destination URL is stored in the URL field E.

When either the browser or the mailer reads the file data this file data is uploaded. Either the TCP communication monitoring module or the HTTP communication monitoring module detects the file upload.

Either the TCP communication monitoring module or the HTTP communication monitoring module acquires the data of the file to be uploaded and finds the hash value thereof. Either the TCP communication monitoring module or the HTTP communication monitoring module searches to determine whether a record comprising the same hash value as the hash value that was found is in the output DBs and . In a case where a record having the same hash value exists it is possible to determine that the user uploaded the file. In a case where the determination is that the file was uploaded as described using the first example a check of whether or not an alert condition is satisfied the sending of an alert and an in file trace information operation are performed.

The user uses the browser to start the file download . The HTTP communication monitoring module detects the HTTP communication header and analyzes this header . When the result of the analysis is a receive operation Step and subsequent steps are executed. In the case of a send operation Step and subsequent steps of are executed.

The HTTP communication monitoring module acquires the access source URL and access data the downloaded file from the results of the analysis in Step . The HTTP communication monitoring module computes the hash value of the access data acquired in Step . The HTTP communication monitoring module performs the in file trace information operation shown in . New in file trace information is created here because the file download was via the browser. The HTTP communication monitoring module stores the access source URL the access data hash value and the in file trace information in the browser input DB .

When the file download starts the browser receives the download data from the socket and writes the download data to the file system .

The file I O monitoring module detects the operation in Step using a method such as an API Application Programming Interface hook . The file I O monitoring module finds the hash value of the data that the browser wrote to the file system . The file I O monitoring module acquires the browser based file write destination path .

The file I O monitoring module uses the hash value found in Step as a search key to search the browser input DB . In a case where a record comprising the same hash value is found the file being managed in accordance with this record is the user downloaded file. Accordingly the file I O monitoring module acquires the file attributes the access source URL and the file operation trace information from the browser input DB and executes Step and subsequent steps.

In a case where a record comprising the same hash value as the hash value of the downloaded file is not found this processing ends since a file write did not occur in accordance with the user download operation.

The file I O monitoring module writes the access source information of to the alternate stream of the file discovered on the basis of the hash value . In addition the file I O monitoring module writes the in file trace information of to the file alternate stream .

The file I O monitoring module detects the operation of Step using an API hook or other such method . The file I O monitoring module finds the hash value of the file that the browser read . The file I O monitoring module acquires the access source information from the file alternate stream . In addition the file I O monitoring module acquires the in file trace information from the file alternate stream . The file I O monitoring module stores the file path the file hash value the access source information and the in file trace information in the browser output DB .

The browser upon completing the read of the upload file uploads the file via the socket . This send operation is detected by the HTTP communication monitoring module . The HTTP communication monitoring module analyzes the HTTP header and in the case of a send operation executes Step and subsequent steps. In the case of a receive operation the HTTP communication monitoring module executes and subsequent steps of .

The HTTP communication monitoring module acquires the upload destination URL and the upload data from the results of the header analysis in Step . The HTTP communication monitoring module computes the hash value of the upload data acquired in Step .

The HTTP communication monitoring module searches the browser output DB on the basis of the hash value found in Step and acquires a record comprising the same hash value as the hash value of the uploaded file. In a case where the same hash value record is found the file being managed by this record is the file that was uploaded by the user. Therefore the HTTP communication monitoring module acquires the file attributes the file path the access source information and the file operation trace information the FID the OID and the count from this record and executes Step and subsequent steps. In a case where the same hash value recorded is not found this processing is ended since the communication was by a program other than the monitoring target browser.

The HTTP communication monitoring module operates on the in file trace information with respect to the file detected on the basis of the hash value . In addition the HTTP communication monitoring module checks whether or not the browser based file upload satisfies the alert condition and sends an alert as needed .

In a case where the result of the analysis is that a file is attached to the incoming e mail the TCP communication monitoring module executes Step and subsequent steps. Furthermore in a case where the file attached to the e mail is to be sent the TCP communication monitoring module executes and subsequent steps of . In a case where either the e mail that is sent received does not have a file attachment or it is a communication other than a mail send receive this processing is ended.

The TCP communication monitoring module acquires the e mail sender name the file attachment filename and the file attachment data from the results of the analysis of Step . Next the TCP communication monitoring module computes the hash value of the file attachment data acquired in Step .

The TCP communication monitoring module carries out the in file trace information operation shown in . New in file trace information is created because an e mail with a file attachment has been received. The TCP communication monitoring module stores the file attachment filename the sender name the hash value of the file attachment data and the in file trace information in the mail input DB .

When the user carries out an operation for saving the file that is attached to the e mail the mailer writes the file attachment to the file system .

The file I O monitoring module detects the operation of Step using an API hook or other such method . The file I O monitoring module finds the hash value of the file data written by the mailer . In addition the file I O monitoring module acquires the path to the destination into which the mailer has written the file .

The file I O monitoring module searches the mail input DB based on the hash value determined in Step . In a case where a record which has the same hash value as the hash value of the file written to the file system by the mailer is found the file corresponding to this record is the file that was attached to the e mail. Accordingly the file I O monitoring module acquires the file attributes the file attachment filename the sender name and the file operation trace information from this record and executes Step and subsequent steps.

In a case where a same hash value record is not found this processing is ended because the file write of Step is not the file write that occurred in the file attachment download operation .

The file I O monitoring module performs an in file trace information operation . In the in file trace information operation process the file operation trace information is written to the alternate stream of the saved file the file that was attached to the e mail and stored in the file system . In addition the file I O monitoring module assigns the access source information of to the alternate stream of the saved file.

The file I O monitoring module detects the file write of Step using an API hook or other such method . The file I O monitoring module finds the hash value of the mailer read file . The file I O monitoring module acquires the access source information from the file alternate stream . The file I O monitoring module acquires the in file trace information from the file alternate stream . The file I O monitoring module stores the file path the file hash value the access source information and the in file trace information in the mail output DB .

When the user sends the e mail to which the file is attached the mailer sends the file attached e mail via the socket . The TCP communication monitoring module detects this outgoing e mail and analyzes the TCP header . In a case where the file attached e mail has been sent the TCP communication monitoring module executes Step and subsequent steps. Furthermore in a case where the file attached e mail has been received the TCP communication monitoring module executes and subsequent steps of . In a case where an e mail to which a file is not attached is either sent or received or the case of a communication other than a mail send receive this processing is ended.

The TCP communication monitoring module acquires the destination e mail address and the data of the file attached to the e mail from the header analysis results of Step . The TCP communication monitoring module computes the hash value of the file data acquired in Step .

The TCP communication monitoring module searches the mail output DB and the mail input DB based on the hash value determined in Step and acquires the file attribute . The reason for searching the mail output DB and the mail input DB will be explained further below.

The TCP communication monitoring module operates on the in file trace information with respect to the file detected on the basis of the hash value checks the alert condition and sends an alert as needed .

The reason for searching both the mail output DB and the mail input DB in Step of will be explained. In a case where the user attaches a file to an e mail and sends this e mail a record is stored in the mail output DB .

Alternatively in a case where a file attached e mail has been transferred the user receives this e mail prior to the e mail transfer . In a case where the mailer of the client PC has received the file attached e mail a record is stored in the mail input DB .

The TCP communication monitoring module is simply monitoring the communication and is not able to make a determination as to whether the monitored communication is the communication mail send corresponding to or the communication mail transfer corresponding to . Accordingly in this example both the mail output DB and the mail input DB are searched in both cases regardless of whether it is a mail send or a mail transfer.

Being configured like this this example monitors communications between the client PC and the network and in addition monitors the input output to from the file system. Then the file is identified by comparing the hash value of the file detected in the communication with the hash value of the file being managed in the file system. The access source information and the in file trace information are associated with the identified file.

Therefore compared to a configuration that identifies a file either based on a user operation via the browser or based on a character string inputted to a dialog this example is able to identify a file relatively easily and to associate path information or an e mail address or a URL with the file.

For example the type of browser that the user is using may change or the browser may be upgraded. Furthermore there may also be cases in which the configuration of a dialog changes in accordance with an upgraded version of an application program or a completely new application program may be installed in the client PC . To deal with these environment changes the computer program for acquiring the path from either the browser or the dialog must be adjusted frequently by hand making it troublesome to maintain this system. By contrast in this example a communication monitoring result and the result of system input output monitoring are associated with a common hash value. Therefore the impact of changes in the environment like those described above can be minimized and this system can be maintained and operated relatively easily. Furthermore this example can be combined with either the first example or the second example.

Furthermore the present invention is not limited to the above described examples. A person having ordinary skill in the art will be able to make various additions or changes within the scope of the present invention. For example the second example may also be combined with the first example and a configuration that is independent of the first example may also be used. That is it is possible to manage a file operation history and visualize same using a tree structure either inside a single client PC or inside a group comprising multiple client PCs.

