---

title: Monitoring files in cloud-based networks
abstract: Embodiments relate to systems and methods for monitoring files in cloud-based networks. In particular, a file managing module can manage the access and retrieval of files stored in cloud-based networks on a distributed basis. In embodiments, the file managing module can receive a file access request from a requesting entity. The file managing module can use the file access request to determine a storage location mapped to a hash structure. Generation numbers associated with the both the storage location and the actual file at the storage location can be compared to determine whether the file has been unexpectedly modified or relocated. The file managing module can sync any discrepancy between the generation numbers and retrieve the file for the requesting entity.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08660996&OS=08660996&RS=08660996
owner: Red Hat, Inc.
number: 08660996
owner_city: Raleigh
owner_country: US
publication_date: 20100929
---
The present teachings relate to systems and methods for monitoring files in cloud based networks and more particularly to platforms and techniques for ensuring the accuracy of a file location mapped to a hash structure in a cloud based network before retrieving the file.

Hash structures are used in computer systems to map identifying values or keys to their associated values. A hash function is used to transform the key into the index of an array element where the associated value is stored. When items in the hash structure are removed or deleted the hash structure undergoes a rehash whereby existing items in the hash structure are mapped to new locations. Hash structures can be used in cloud based networks whereby key to value mappings are stored in resources associated with the cloud based network.

 Consistent hashing can be implemented such that the addition or removal of one slot does not significantly change the mapping of keys to locations. In particular consistent hashing involves associating a real angle to items to effectively map the item to for example a point on the edge of a circle. In addition available machines or servers are mapped to locations around the circle. The machine or server on which the item is to be stored is chosen by selecting the machine at the next highest angle along the circle after the item. If a storage location on the machine becomes unavailable then the angles mapping to the location are removed and requests for files that would have mapped to the unavailable location are now mapped to the next available storage location.

However consistent hashing can be problematic in situations in which a user or computer program requests to access a file that has been moved renamed or deleted without the user or computer program having the necessary data to determine the change. As such finding and accessing the file can take more time and can lead to system hardware or software problems faults or other errors. Further hashing in cloud based networks can be problematic when multiple entities have access to move rename or delete files stored on devices of the cloud based network.

Therefore it may be desirable to provide systems and methods for monitoring files in cloud based networks. In particular it may be desirable to ensure the accuracy of a file location mapped to a hash structure in a cloud based network before retrieving the file.

Embodiments of the present teachings relate to systems and methods for monitoring files in cloud based networks. In particular embodiments relate to platforms and techniques for ensuring the accuracy or validity of a file location mapped to a hash structure in a cloud based network prior to retrieving or accessing the file. The hash structure in combination with the cloud based network can allow for a distributed system of file storage and retrieval. For example an operator of the cloud based network can insert files into available resources of the cloud on a dynamic and or distributed basis while using the hash structure to maintain locations of the files. In embodiments users or computer hardware or software can request access to the file mapped to the hash structure. Specifically a memory address of the file can be allocated to a storage device that is also mapped to the hash structure. Further the users can be a set of end users accessing via a set of instantiated virtual machines in a cloud based network files associated with application or product resources provided by one or more vendors such as independent service vendors ISVs .

Embodiments described herein can be implemented in or supported by a cloud network architecture. As used herein a user can refer a person customer subscriber administrator corporation organization or other entity accessing files and or devices storing the files in the cloud based network. In embodiments the user can operate or manage computer software or hardware that can access files and or devices storing the files in the cloud based network. Further as used herein a cloud can comprise a collection of resources that can be invoked to instantiate a virtual machine process or other resource for a limited or defined duration.

As used herein the resources can be hardware such as for example servers device drivers storage such as hard drives virtual memory databases random access memory RAM and other memory processors multimedia cards and the like in the cloud based network. The resources can be accessed by users or by software or applications independent from or associated with resources of the cloud based network. In embodiments vendors such as ISVs can supply software resources for use with other resources in a cloud based network. Resources in the cloud based network can include any hardware software or communications resources such as ports or channels provided to a virtual machine or other machine or process in the cloud. Resources can likewise include services such as Web based services deployed in the cloud for example security or identity management services and or other resources.

As used herein a hash structure can be any data structure that uses a hash function to map keys to their associated values. In embodiments the associated values can comprise an address location of a file stored on an associated storage device. In embodiments one or more hash structures can be implemented in any resource of a cloud based network or can comprise values pointing to files associated with the resources of the cloud based network. Further in embodiments the one or more hash structures can be implemented as a consistent hashing scheme whereby the address locations are mapped and allocated to mapped resources. One or more users or entities can access the hash structures to overwrite change delete or otherwise modify keys or values associated with the hash structures. It should be appreciated that numerous hash functions can be employed to map keys to the associated values. In embodiments the hash structures can be employed in one or more cloud based networks.

In embodiments the entire set of resource servers or other hardware or software resources used to support the cloud along with its instantiated virtual machines is managed by a cloud management system . The cloud management system can comprise a dedicated or centralized server and or other software hardware and network tools that communicate via network such as the Internet or other public or private network with all sets of resource servers to manage the cloud and its operation. To instantiate a new set of virtual machines a user can transmit an instantiation request to the cloud management system for the particular type of virtual machine that the user desires to invoke for its intended application. A user can for instance make a request to instantiate a set of virtual machines configured for email messaging or other applications from the cloud . The request can be received and processed by the cloud management system which identifies the type of virtual machine process or other resource being requested. The cloud management system can then identify the collection of resources necessary to instantiate that machine or resource. In embodiments the set of instantiated virtual machines or other resources can for example comprise virtual transaction servers used to support Web storefronts or other transaction sites.

In embodiments the user s instantiation request can specify a variety of parameters defining the operation of the set of virtual machines to be invoked. The instantiation request for example can specify a defined period of time for which the instantiated machine or process is needed. The period of time can be for example an hour a day or other increment of time. In embodiments the user s instantiation request can specify the instantiation of a set of virtual machines or processes on a task basis rather than for a predetermined amount of time. For instance a user could request resources until a software update is completed. The user s instantiation request can specify other parameters that define the configuration and operation of the set of virtual machines or other instantiated resources. For example the request can specify an amount of processing power or input output I O throughput the user desires to be available to each instance of the virtual machine or other resource. In embodiments the requesting user can for instance specify a service level agreement SLA acceptable for their purposes. Other parameters and settings can be used. One skilled in the art will realize that the user s request can likewise include combinations of the foregoing exemplary parameters and others.

When the request to instantiate a set of virtual machines or other resources has been received and the necessary resources to build that machine or resource have been identified the cloud management system can communicate with one or more of the set of resource servers to locate resources to supply the required components. The cloud management system can select providers from the diverse set of resource servers to assemble the various components needed to build the requested set of virtual machines or other resources. It may be noted that in some embodiments permanent storage such as hard disk arrays may not be included or located within the set of resource servers available to the cloud management system since the set of instantiated virtual machines or other resources may be intended to operate on a purely transient or temporary basis. In embodiments other hardware software or other resources not strictly located or hosted in the cloud can be leveraged as needed. For example other software services that are provided outside of the cloud and hosted by third parties can be invoked by in cloud virtual machines. For further example other non cloud hardware and or storage services can be utilized as an extension to the cloud either on an on demand or subscribed or decided basis.

With the resource requirements identified the cloud management system can extract and build the set of virtual machines or other resources on a dynamic or on demand basis. For example one set of resource servers may respond to an instantiation request for a given quantity of processor cycles with an offer to deliver that computational power immediately and guaranteed for the next hour. A further set of resource servers can offer to immediately supply communication bandwidth for example on a guaranteed minimum or best efforts basis. In other embodiments the set of virtual machines or other resources can be built on a batch basis or at a particular future time. For example a set of resource servers may respond to a request for instantiation at a programmed time with an offer to deliver the specified quantity of processor cycles within a specific amount of time such as the next 12 hours.

The cloud management system can select groups of servers in the set of resource servers that match or best match the instantiation request for each component needed to build the virtual machine or other resource. The cloud management system can then coordinate the integration of the completed group of servers from the set of resource servers to build and launch the requested set of virtual machines or other resources. The cloud management system can track the combined group of servers selected from the set of resource servers or other distributed resources that are dynamically or temporarily combined to produce and manage the requested virtual machine population or other resources.

In embodiments the cloud management system can generate a resource aggregation table that identifies the various sets of resource servers that will be used to supply the components of the virtual machine or process. The sets of resource servers can be identified by unique identifiers such as for instance Internet protocol IP addresses or other addresses. The cloud management system can register the finalized group of servers in the set of resource servers contributing to an instantiated machine or process.

The cloud management system can then set up and launch the initiation process for the virtual machines processes or other resources to be delivered from the cloud. The cloud management system can for instance transmit an instantiation command or instruction to the registered group of servers in the set of resource servers . The cloud management system can receive a confirmation message back from each participating server in the set of resource servers indicating a status regarding the provisioning of their respective resources. Various sets of resource servers may confirm for example the availability of a dedicated amount of processor cycles amounts of electronic memory communications bandwidth or applications or other software prepared to be served.

As shown for example in the cloud management system can then instantiate one or more than one set of virtual machines or other processes based on the resources supplied by the registered set of resource servers shown in . In embodiments the cloud management system can instantiate a given number for example 10 500 1000 or other numbers of virtual machines to be made available to users on a network such as the Internet or other public or private network. Each virtual machine can be assigned an instantiated machine ID that can be stored in the resource aggregation table or other record or image of the instantiated population. Additionally the cloud management system can store the duration of each virtual machine and the collection of resources utilized by the complete set of instantiated virtual machines .

In embodiments the cloud management system can further store track and manage a user s identity and associated set of rights or entitlements to software hardware and other resources. Each user that populates a set of virtual machines in the cloud can have specific rights and resources assigned and made available to them. The cloud management system can track and configure specific actions that a user can perform such as provision a set of virtual machines with software applications or other resources configure a set of virtual machines to desired specifications submit jobs to the set of virtual machines or other host manage other users of the set of instantiated virtual machines or other resources and other privileges or actions. The cloud management system can further generate records of the usage of instantiated virtual machines to permit tracking billing and auditing of the services consumed by the user. In embodiments the cloud management system can for example meter the usage and or duration of the set of instantiated virtual machines to generate subscription billing records for a user that has launched those machines. Other billing or value arrangements are possible.

The cloud management system can configure each virtual machine to be made available to users of the network via a browser interface or other interface or mechanism. Each instantiated virtual machine can communicate with the cloud management system and the underlying registered set of resource servers via a standard Web application programming interface API or via other calls or interfaces. The set of instantiated virtual machines can likewise communicate with each other as well as other sites servers locations and resources available via the Internet or other public or private networks whether within a given cloud or between clouds.

It may be noted that while a browser interface or other front end can be used to view and operate the set of instantiated virtual machines from a client or terminal the processing memory communications storage and other hardware as well as software resources required to be combined to build the virtual machines or other resources are all hosted remotely in the cloud . In embodiments the set of virtual machines or other resources may not depend on or require the user s own on premise hardware or other resources. In embodiments a user can therefore request and instantiate a set of virtual machines or other resources on a purely off premise basis for instance to build and launch a virtual storefront or other application.

Because the cloud management system in one regard specifies builds operates and manages the set of instantiated virtual machines on a logical level the user can request and receive different sets of virtual machines and other resources on a real time or near real time basis without a need to specify or install any particular hardware. The user s set of instantiated machines processes or other resources can be scaled up or down immediately or within a short period of time on an on demand basis if desired. In embodiments the various sets of resource servers that are accessed by the cloud management system to support a set of instantiated virtual machines or processes can change or be substituted over time. The type and operating characteristics of the set of instantiated virtual machines can nevertheless remain constant or almost constant since instances are assembled from abstracted resources that can be selected and maintained from diverse sources based on uniform specifications.

In terms of network management of the set of virtual machines that have been successfully configured and instantiated the cloud management system can perform various network management tasks including security maintenance and metering for billing or subscription purposes. The cloud management system of a given cloud can for example install or terminate applications or appliances on individual machines. The cloud management system can monitor operating virtual machines to detect any virus or other rogue process on individual machines and for instance terminate the infected application or virtual machine. The cloud management system can likewise manage an entire set of instantiated virtual machines or other resources on a collective basis for instance to push or deliver a software upgrade to all active virtual machines. Other management processes are possible.

In embodiments more than one set of virtual machines can be instantiated in a given cloud at the same overlapping or successive times. The cloud management system can in such implementations build launch and manage multiple sets of virtual machines based on the same or different underlying set of resource servers with populations of different instantiated virtual machines such as may be requested by different users. The cloud management system can institute and enforce security protocols in a cloud hosting multiple sets of virtual machines. Each of the individual sets of virtual machines can be hosted in a respective partition or sub cloud of the resources of the main cloud . The cloud management system of a cloud can for example deploy services specific to isolated or defined sub clouds or isolate individual workloads processes within the cloud to a specific sub cloud. The subdivision of the cloud into distinct transient sub clouds or other sub components which have assured security and isolation features can assist in establishing a multiple user or multi tenant cloud arrangement. In a multiple user scenario each of the multiple users can use the cloud platform as a common utility while retaining the assurance that their information is secure from other users of the overall cloud system. In further embodiments sub clouds can nevertheless be configured to share resources if desired.

In embodiments and as also shown in the set of instantiated virtual machines generated in a first cloud can also interact with a set of instantiated virtual machines or processes generated in a second third or further cloud . Further the cloud management system of the first cloud can interface with the cloud management system of the second cloud to coordinate those domains and operate the clouds and or virtual machines or processes on a combined basis. The cloud management system of a given cloud can track and manage individual virtual machines or other resources instantiated in that cloud as well as the set of instantiated virtual machines or other resources in other clouds.

In the foregoing and other embodiments the user making an instantiation request or otherwise accessing or utilizing the cloud network can be a person customer subscriber administrator corporation organization or other entity. In embodiments the user can be or include another virtual machine application or process. In further embodiments multiple users or entities can share the use of a set of virtual machines or other resources.

It should be appreciated that the hash structure or a copy thereof can be implemented or stored on other resources of cloud such as for example the cloud management system . It should further be appreciated that the file managing module can be implemented on other hardware and or software components configured to interface with the other components and entities described herein. Further it should be appreciated that the file managing module can be configured to interface with additional clouds not shown in figures and associated resources such as virtual machines of the additional clouds.

In embodiments the requesting entity can be a user owner administrator company software program or application or other entity or resource who can submit a request to access or retrieve a file stored on the set of resources of the cloud . For example a user can submit a file request to access or retrieve a file stored on a virtual machine in the cloud . In embodiments the file managing module can determine from the file request a candidate storage address for the file that can be mapped to the hash structure and allocated to a resource also mapped to the hash structure . The file managing module can be configured to communicate with the cloud management system the set of resources the hash structure and or other resources of the cloud .

According to the present embodiments the file managing module can monitor a file via a file link mapped on the hash structure . In embodiments the file link can point to a storage location of the resources on which the files are stored such as for example a uniform resource locator URL . Further the resources themselves can be mapped to the hash structure . In embodiments each of the file links mapped on the hash structure as well as the files themselves can comprise a generation number to indicate a location update history of the associated file. In embodiments the generation number can be a tag value indicator comment note or the like associated with the file. For example the generation numbers of the file link and of the associated file can be a counter that can be incremented any time the associated file is modified or relocated. It should be appreciated that the generation numbers can comprise additional information associated with modifications to and relocations of the file. As used herein a modification can refer to an access revision alteration encoding decoding duplication or any other change that can occur to a file. Further as used herein a relocation can refer to any time a file is moved to or saved in a new location on the same or different resource.

In embodiments the file managing module can append the generation number to the file link that is mapped on the hash structure and to the actual file that is stored on one of the resources . In embodiments the file managing module can read from and write to the generation numbers associated with any files. Further in embodiments the file managing module can compare the generation numbers to determine if a file at a storage location on an associated resource has been modified or relocated by an entity other than itself. For example a file may have been modified or relocated by an entity other than the requesting entity if there is an inconsistency between the generation number of the file link mapped to the hash structure and the generation number of the associated file. In embodiments the modification or relocation may have occurred without the file managing module having the necessary data to determine that the file had been modified or relocated. In embodiments the examination of the generation numbers can reduce false positive hashes in which the file managing module retrieves a replacement file that the file managing module expects to be the actual valid file requested by the requesting entity .

In embodiments the file managing module can use the hash structure to employ a consistent hashing system to map the file links corresponding to memory addresses of files stored on the set of resources in the cloud . Further the consistent hashing system can map the resources on which the files are stored. For example the consistent hashing system can employ a mathematical mapping space used in conjunction with a mathematical relationship to locate memory addresses of requested files and associated resources. In embodiments the hash structure can be any mapping space in which files and resources can be mapped such as for example a circle with a specified radius a two dimensional space of real numbers a line a three dimensional space of real numbers an ellipse a three dimensional sphere or other spaces. In embodiments the mapping of the file links and resources in the hash structure can be accomplished with a hash function as conventionally understood. For example the hash function can receive a key input and map the key input to an array element where the corresponding value is to be sought. In embodiments the corresponding value can be the file link comprising a memory address or storage location for one of the set of resources on which a requested file is stored.

In operation the file managing module can examine a file access request from the requesting entity to determine the file link mapped to the hash structure . For example the file managing module can use an algorithm to generate an input key for the hash function of the hash structure based on a name of the file. The associated value can be the file link for a candidate storage location in which the file is stored. It should be appreciated that other key generation and value determination algorithms are envisioned. In embodiments the file link can comprise a generation number. In further embodiments the node mapped to the hash structure can be the requested file itself.

The file link can be allocated to one of the set of resources also mapped to the hash structure based on a mathematical relationship between the file link and the resource in the mapping space. For example the file link can be allocated to the resource using consistent hashing. The file managing module can follow the file link to the candidate storage location. If the candidate storage location contains an additional link the file managing module can follow the additional link and any subsequent links until reaching the actual file. Further if the file managing module has to follow additional links the file managing module can be configured to update the original file link mapped to the hash structure to point directly to where the actual file can be found. In embodiments the file managing module can be configured to search for a file if the file link is null or broken and can update the file link if the original file is found.

Once the file is found the file managing module can examine a generation number associated with the file and compare the file generation number to the generation number of the file link mapped to the hash structure . If the generation numbers are consistent or in other words if the file has not been unexpectedly modified or relocated the file managing module can retrieve the file and utilize the file as necessary. In contrast if the generation numbers are not consistent or in other words the file has unexpectedly been modified or relocated the file managing module can update the file link mapped to the hash structure to for example sync the generation numbers. In embodiments the file managing module can notify the requesting entity of any unexpected file modification or relocation. Therefore the requesting entity can be notified or can detect on a next access that a file access or retrieval can be hazardous to operation of any associated hardware or software. In other embodiments the file managing module can retrieve and utilize the file even though the file has been unexpectedly modified or relocated.

For example assume a financial management software application needs to access a spreadsheet file that is stored on a device in a cloud network. The software application can submit a request comprising the name of the spreadsheet file to the file managing module which can use the name of the spreadsheet file as a key input to the hash structure . The name of the spreadsheet file can map via a hash function to a candidate storage location in which the spreadsheet file is stored. The file managing module can determine which resource to which the storage location is allocated and follow the storage location to access the spreadsheet file. The storage location can comprise a generation number that when compared to a generation number of the actual spreadsheet file can indicate whether the spreadsheet file at the corresponding storage location has been unexpectedly modified or relocated. If the spreadsheet file has been unexpectedly modified or relocated the file managing module can notify the software application that the spreadsheet file may be the wrong version. However if a comparison of the generation numbers indicates that the spreadsheet file is valid the file management module can retrieve the spreadsheet file for the software application.

Referring to illustrated is an exemplary file link according to various embodiments. The file link can correspond to a file and can be mapped to a hash structure for example using consistent hashing. The file link can comprise a memory address and a generation number . In embodiments the generation number can be appended to the memory address as shown in . However it should be appreciated that the generation number can be stored with the memory address in any way. The memory address can specify the storage location in which the corresponding file is stored. In embodiments the storage location can be allocated to a resource also mapped to the hash structure as discussed herein.

As shown in the generation number can be an integer corresponding to the number of times the corresponding file stored at the memory address has been relocated modified replaced deleted and or the like. For example as shown in the generation number is 3 which can indicate that the file stored at memory address has been relocated a total of the three 3 times. It should be appreciated that although depicts the generation number as an integer the generation number can be anything that can indicate when how or by what entity a file is modified or relocated. In embodiments the actual file can comprise a similar generation number that can be used to determine if the file has been unexpectedly modified or relocated as discussed herein.

Referring to depicted is a exemplary mathematical space used to allocate files to resources using consistent hashing. As shown in the mathematical space can be a circle with a radius of 1 however it should be appreciated that the mathematical space can comprise different spaces. The mathematical space can comprise files and a plurality of servers mapped to points on the circle using a hash function. For example as shown in files F F and servers S S are mapped as points on the circle of the mathematical space . Further each of the files F F is allocated to the closest server S S moving clockwise around the circle as indicated by arrow . For example file F is allocated to server S file F is allocated to server S and files F F are allocated to server S.

According to the present embodiments each of files F F can be a storage location of a file stored on one of servers S S and can comprise a generation number to indicate a version number or update history of the stored file as discussed herein. As such a user or program accessing files F F can examine the attributes of the generation number to determine an access and modification history of the stored file. For example a user can request a file allocated to a server and determine through the generation number that the file was modified by another user or entity. For further example a program can request a file mapped to a specific location and determine through the updated version tag that what is at the specific location is actually a different file that replaced the original file requested. Therefore the program can determine that the different file is not the file originally intended and can generate a notification indicating the same. It should be appreciated that other options for handing unexpected files are envisioned such as for example retrieving the file as is terminating an associated program replacing the accessed file with a different file and other options.

Processor can also communicate with computer readable storage medium and the file managing module to execute control logic manage the file histories of files stored in the cloud as described herein and control the operation of virtual machines and other resources in cloud . Other configurations of cloud management system associated network connections and other hardware and software resources are possible.

In the file managing module can determine the type of node mapped to the hash structure resulting from checking the hash structure. If the node is a file such as the file requested by the entity the processing can proceed to a success condition in which for example the file can be retrieved and provided to the requesting entity. In embodiments the file can be a document executable file configuration file application file or any other type of file. In embodiments the file can be retrieved and implemented executed distributed or otherwise accessed by the requesting entity.

If the node is null processing can proceed to in which a search for the requested file can be conducted. In embodiments the file managing module another entity or other processes operations or logic can search local or remote memory storage or the like to attempt to locate the requested file or a link to the requested file. If the node is a link processing can proceed to in which the link can be followed. In embodiments the link can comprise a generation number that can indicate for example when or how many times the file has been modified or relocated as described herein. In embodiments the node can be a link to a storage location on a computer a server a virtual machine or another resource in the cloud based network. In further embodiments the storage location can be allocated to a resource determined through consistent hashing methods and algorithms as discussed herein.

In response to following the link to the storage location in the resulting storage location can be examined in . If the resulting storage location comprises another link processing can proceed to in which the previously accessed link can be deleted. In a flag can be set that can indicate that the previously accessed link has been deleted. In embodiments the flag can be set by an application performing the processing of . After the flag is set processing can proceed back to in which the new link is followed. Alternatively if the resulting storage location is null processing can proceed to in which a search for the requested file can be conducted. Further alternatively if the resulting storage location comprises a file processing can proceed to in which the file managing module or another entity can determine if the flag in the application has been set.

If the flag has not been set processing can proceed to in which the file managing module or another entity can access the file and determine if the file is the correct version expected by the requesting entity. In embodiments a generation number associated with the file can be examined to determine for example when or how many times the file has been modified or relocated as described herein. In embodiments the file managing module can compare the generation number of the link to the generation number of the file to determine whether the file has been unexpectedly modified or relocated. In embodiments the determination can conclude whether the file has been modified or relocated by a user computer server application or entity other than the entity originally requesting the file. Further in embodiments the determination can conclude whether the file has been modified or relocated without the entity originally requesting the file having the necessary information to determine that the file was modified or relocated. In further embodiments the determination can prevent the occurrence of false positives in which the file managing module retrieves a replacement file that the file managing module expects to be the actual valid file requested by the requesting entity.

Upon the determination if the generation numbers do not match processing can proceed to in which the file managing module or another entity can update the original link mapped to the hash structure by for example syncing the generation number of the link with the generation number of the file. In embodiments the file managing module or other entity can generate a notification to the requesting entity that the file versions do not match at which point the requesting entity or other entity can choose whether to retrieve the file anyway not retrieve the file terminate the application or the like. If the file version does match processing can proceed to in which the file can be retrieved and provided to the requesting entity.

Referring back to if the flag has been set processing can proceed to in which the file managing module or another entity can update the original link that is mapped to the hash structure. In embodiments the original link can be modified to point to the storage location in which the file is located. Further referring back to the file search of the file managing module or other entity can determine if the file is found in . If the file is found processing can proceed to in which the original link can be updated as described herein. After updating the original link processing can proceed to the success condition in which the file can be retrieved for the requesting entity.

If the file is not found processing can proceed to a failure condition . In embodiments a notification that the file cannot be located can be generated. For example the notification can be a message to the entity requesting the file. It should be appreciated that other responses to a missing file are envisioned such as for example providing the requesting entity a default file and other responses.

The foregoing description is illustrative and variations in configuration and implementation may occur to persons skilled in the art. For example while embodiments have been described which operate using one file managing module and associated cloud management system in embodiments one or more of file managing module and associated cloud management system and or other servers data stores and or other logic or resources can be used. For further example while embodiments have been described in which files associated with cloud resources are monitored in embodiments the files can be monitored at any time or interval. Other resources described as singular or integrated can in embodiments be plural or distributed and resources described as multiple or distributed can in embodiments be combined. The scope of the present teachings is accordingly intended to be limited only by the following claims.

