---

title: Extensible RDF databases
abstract: A method and apparatus for introducing domain-specific data types with associated semantics in an RDF database system using an extensibility framework mechanism. The extensibility framework mechanism allows users to map serialized instance data for a particular user-defined data type to properties of a base data structure associated with the domain-specific data and to map instance data in base data structures to the data's serialized form. The RDF database system may return inferred properties of RDF data stored in domain-specific data types in response to a query on the data. Further, the RDF database system may infer relationships between resources in stored data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08489649&OS=08489649&RS=08489649
owner: Oracle International Corporation
number: 08489649
owner_city: Redwood Shores
owner_country: US
publication_date: 20101213
---
This application is related to U.S. patent application Ser. No. 12 188 267 titled DATABASE BASED INFERENCE ENGINE FOR RDFS OWL CONSTRUCTS and International Patent Appln. No. PCT US2006 014196 titled INTEGRATING RDF DATA INTO A RELATIONAL DATABASE SYSTEM the contents of both of which are incorporated by reference as if fully set forth herein.

The present invention relates to an extensibility framework mechanism in an RDF database and more particularly to facilitating introducing user defined data types with associated semantics into an RDF database and inferring properties of data stored as a user defined data type.

In the RDF data model the data is modeled as labeled and directed graphs represented as a set of triples. The nodes in the graph are used to represent two parts of a given triple and the third part is represented by a directed link that describes the relationship between the nodes. In the context of an RDF expression the two nodes are referred to as subject and object and the link describing the relationship is referred to as predicate .

The subject and object of a particular RDF expression may be resources that are identified by Uniform Resource Identifiers URIs . A predicate is also represented by a URI. A URI includes a prefix that may refer to an electronic location on the Internet or may refer to a namespace within a database system. For example standard prefixes rdf rdfs and xsd are generally defined as follows 

Prefixes such as ogc and edb may be defined within a database system to refer to a personal or other namespace in the system.

Instead of a resource the object of a particular RDF expression may be a literal of some well defined data type e.g. xsd string xsd integer xsd float xsd double xsd boolean xsd dateTime xsd decimal etc. Many literals are found within the xsd namespace however literals may be defined within any number of namespaces. An RDF database system generally includes mappings between literals and the corresponding data types as supported by the host database management system. For example when an RDF database system is implemented as a SQL application the xsd string data type in RDF may be mapped to a VARCHAR2 data type in the database management system.

The properties that describe a resource are broadly classified into object type properties and data type properties. Object type properties describe a subject resource indicated by a URI in the subject position of a triple using another resource in the object position of the triple also identified by a URI. On the other hand a data type property describes a subject resource using a literal in the object position of the triple. In the following example Triple 1 is an object type property and Triple 2 is a data type property.

SPARQL which stands for SPARQL Protocol and RDF Query Language is an example of an RDF query language. SPARQL is based on triple graph pattern matching and was standardized by the W3C in January 2008. In a SPARQL triple graph pattern any or all of the subject object and predicate may be a variable. See SPARQL Query Language for RDF W3C Recommendation 15 Jan. 2008 found at the time of writing this specification in the folder TR rdf sparql query at the domain www.w3.org the entirety of which is incorporated by reference herein. The W3C recommendation for SPARQL indicates that a basic graph pattern matches a subgraph of the RDF data when RDF terms from that subgraph may be substituted for the variables and the result is RDF graph equivalent to the subgraph. See id. 

A basic SPARQL query may include a SELECT clause a WHERE clause and one or more query variables. A SPARQL query may also include one or more PREFIX bindings a FILTER clause a FROM clause a FROM NAMED clause a GRAPH clause an ORDER BY clause etc. An example SPARQL Query 1 is shown below 

Existing systems hardwire both mappings between the logical and physical representations of RDF data and mappings between SPARQL query constructs and corresponding constructs in the underlying host system. Such hardwired mappings make extending RDF database systems expensive and error prone in light of new requirements from emerging application domains. Open source database systems allow end user modifications to the core components. However this approach often leads to one off specializations that are not reusable and hard to maintain.

The approaches described in this section are approaches that could be pursued but not necessarily approaches that have been previously conceived or pursued. Therefore unless otherwise indicated it should not be assumed that any of the approaches described in this section qualify as prior art merely by virtue of their inclusion in this section.

In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however that the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.

User defined functions and domain specific data types with associated semantics can be introduced in an RDF database system using an extensibility framework mechanism in the RDF database system. The extensibility framework mechanism allows users to map serialized instance data for a particular user defined data type to properties of a base data structure associated with the domain specific data and to map instance data in base data structures to the data s serialized form. The RDF database system may return inferred properties of RDF data stored in domain specific data types in response to a query on the data. Further the RDF database system may infer relationships between resources in stored data.

Database extensibility refers to the ability to include new functionality in a database system without requiring a re architecture of the system. Database extensibility is commonly achieved using an extensibility framework mechanism that may include a combination of software and data. For example an extensibility framework mechanism may include Application Programming Interfaces APIs or other well defined interfaces that allow a user to implement functions data types indexes etc. for use within a host database management system. An extensibility framework mechanism may also include data that maps user implemented structures to base data structures in the host database management system and mechanisms for rewriting queries based on data stored at the extensibility framework mechanism or at the host system etc.

Such an extensibility framework mechanism allows users to plug domain specific logic which supplements native database functionality into the database system. The well defined interfaces in an extensibility framework mechanism allow a user defined data type to interact with core database components when the interfaces are implemented for a specific user defined data type. For example a mechanism implemented through an extensibility framework mechanism for indexing spatial data that is stored in relational tables should implement interfaces that are invoked for any data manipulation operations on the tables that are required for the indexing. The interface functions include domain specific logic to make necessary modifications to the index data. As a further example a user defined function added to the functionality of a relational database system through an extensibility framework mechanism may have access to the core relational database system components that can be used to optimize the function. Such functions may be used in a query in the same manner as functions that are built into the database system may be used in queries.

Adding new database functionality through extensibility framework mechanisms has significant benefits over integrated approaches which often involve re architecting the database system at a significant cost. While many relational database systems offer extensibility framework mechanisms for extending the relational database s functionality with user defined functions data types operators access methods and or indexes extensibility framework mechanisms that allow for the same breadth of functionality do not exist for database systems that support Resource Description Framework RDF data models.

Inherent differences between conventional database systems and the RDF data model introduce unique challenges for extensibility. To illustrate a database system handling RDF data and queries thereon such as SPARQL queries often runs on top of a host environment that supports some primitive operations. Thus an implementation of the RDF data model typically captures RDF expressions with the aid of ontologies standard vocabularies and other capabilities of the host environment on which the implementation runs.

For example an RDF database system may be implemented as a SQL application on a relational database management system which natively stores data in relational tables and allows SQL queries on the data. Such systems while presenting a logical RDF view of the data physically store the data in relational tables generally using a proprietary mapping that is often influenced by performance tradeoffs. Additionally the SPARQL queries issued on the logical RDF data model are internally mapped to corresponding SQL on the underlying physical storage. In an alternate implementation example of an RDF database a Java based system may be used to store RDF data as instances of Java objects. In this implementation queries on the RDF data may be mapped to corresponding methods in Java class libraries. For example a reference to REGEX an operator that is part of the SPARQL query language in the FILTER clause of a SPARQL query may be mapped to a matching method in the java.lang.String class.

Existing systems hardwire both mappings between the logical and physical representations of RDF data and mappings between SPARQL query constructs and corresponding constructs in the underlying host system. Such hardwired mappings make extending RDF database systems expensive and error prone in light of new requirements from emerging application domains. Open source database systems obviate the need for extensibility framework mechanisms by allowing end user modifications to the core components. However this approach often leads to one off specializations that are not reusable and hard to maintain.

In a database management system that includes an RDF database see e.g. the system of described below the database management system may include one or multiple extensibility framework mechanisms. For example a first extensibility framework mechanism may be associated with the database management system and a second extensibility framework mechanism may be associated with the RDF database specifically. Further a single extensibility framework mechanism may service both the RDF database and the database management system as a whole. For the purposes of this description functions that are attributed to a particular extensibility framework mechanism may be performed by any extensibility framework mechanism associated with any module of the database management system or associated with the database management system itself.

Client device may be implemented by any type of client device. Example implementations of client device include without limitation workstations personal computers laptop computers personal digital assistants PDAs cellular telephony devices and any other type of computing device. In example network arrangement client device is configured with an application . Application may be any type of application process that makes use of DBMS . Client device may be configured with other mechanisms processes and functionality depending upon a particular implementation.

DBMS may be implemented using any type of device that is capable of communicating with client device over network . DBMS may also be implemented on several such devices. DBMS is configured to receive information including queries and database updates over network e.g. through HyperText Transfer Protocol HTTP HyperText Transfer Protocol Secure HTTPS etc. DBMS manages RDF database which handles data according to the RDF data model and evaluates queries over stored RDF data. Data stored in RDF database may or may not be stored in RDF form. For example DBMS may store RDF data in relational tables in object classes etc. depending on the implementation of DBMS . For ease of explanation in certain examples herein DBMS is assumed to be implemented as a relational database with RDF database running as a SQL application. However DBMS may be implemented as a relational database system a Java based database system some other object oriented database system a database system that natively stores RDF data or any other implementation of a database system with RDF database implemented appropriately for the underlying system. RDF database may or may not run on the same device as DBMS . DBMS may be further configured with other mechanisms processes and functionalities depending upon a particular implementation.

In example network arrangement DBMS is configured with database storage . Database storage may be implemented on a device that is external to a device on which one or more components of DBMS are implemented. Also database storage may be implemented on a device on which one or more components of DBMS are implemented. Database storage may be implemented by any type of storage including volatile and non volatile storage. Database storage may include without limitation random access memory RAM one or more hard or floppy disks or main memory. Furthermore database storage may not be directly connected to DBMS but may be accessible to DBMS over network .

DBMS manages RDF database and may manage one or more other databases. DBMS may comprise one or more database servers. A server such as a database server is a combination of integrated software components and an allocation of computational resources such as memory a device and processes on the device for executing the integrated software components on a processor the combination of the software and computational resources being dedicated to performing a particular function on behalf of one or more clients.

A database comprises database data and metadata that is stored on a persistent memory mechanism such as a set of hard disks e.g. database storage . Database data may be stored in one or more data containers. Each container contains records. The data within each record is organized into one or more fields. In relational database management systems the data containers are referred to as tables the records are referred to as rows and the fields are referred to as columns. In object oriented databases the data containers are referred to as object classes the records are referred to as objects and the fields are referred to as attributes. Other database architectures may use other terminology.

Database applications and clients e.g. client device or application interact with a database server managed by DBMS by submitting to the database server commands that cause the database server to perform operations on data stored in database storage . A database command may be in the form of a database statement that conforms to a database language. An example language for expressing database requests is the Structured Query Language SQL . There are many different versions of SQL some versions are standard and some proprietary and there are a variety of extensions. Another example language for expressing database requests is SPARQL described above. Although some examples are described based on SPARQL and Oracle s SQL the techniques provided herein are not restricted to any particular query language. Examples of other RDF query languages include Notation3 Query Language N3QL RDF Data Query Language RDQL Sesame RDF Query Language SeRQL etc.

Network may be implemented with any type of medium and or mechanism that facilitates the exchange of information between client device and DBMS . Furthermore network may use any type of communications protocol and may be secured or unsecured depending upon the requirements of a particular application.

When data is accessed in RDF database functions may be used to transform and test the data values involved in the data access. The SPARQL standard includes a set of built in functions and has provisions for extension functions. Within a standard SPARQL query functions can be used e.g. in the FILTER clause to apply certain constraints on the query results. For example the following predicate may be used in the FILTER clause of a SPARQL query This predicate uses the STR function which strips any data type information for any literal values passed into the function. The STR function is one possible example of a function that is built into the SPARQL standard. Such standard functions may be included in RDF database and implemented without using an extensibility framework mechanism. Alternatively standard SPARQL functions may be implemented using the extensibility framework mechanism of RDF database .

An extensibility framework mechanism allows a user to plug user defined functions into RDF database . For example a user may create a user defined function that maps a SPARQL extension function to a corresponding construct in DBMS . The extensibility framework mechanism makes use of mappings of literal data types to corresponding data types in DBMS to map the types of an extension function s arguments and return values to the appropriate data types in DBMS . For example xsd string is mapped to a corresponding native data type in DBMS such as VARCHAR2 or Java.lang.String etc. depending on the implementation of DBMS . Mappings of literal data types to data types in DBMS may be accomplished through the extensibility framework mechanism of RDF database or may be included in RDF database outside of the extensibility framework mechanism.

The extensibility framework mechanism of RDF database may accept the name of a construct native to DBMS that supports the functionality required by a user defined function. Continuing with example of a user may identify the SQL function UPPER as supporting the functionality of edb upper as shown in Specification of . The information in specification when entered into the extensibility framework mechanism of RDF database allows RDF database to appropriately evaluate edb upper i.e. by calling UPPER when the user defined function is invoked in a SPARQL query. A similar mapping between a user defined function and its implementation may be specified when RDF database is implemented in a different environment such as a Java based system.

As an alternative to defining a user defined function programmatically an XML or RDF based language may be used to declaratively add user defined functions to RDF database . For example illustrates a set of example RDF data that may be used to add a user defined function as metadata to RDF database . Example triples include terms that have the prefix rdfext which are terms that are defined in RDF database that are used to define new entities in the extensibility framework mechanism of RDF database . The terms rdfext hasArguments rdfext hasReturnType and rdfext hasSQLImplementation are examples of standard properties that a user can associate with an extension function to allow the extensibility framework mechanism to interpret the function and properly implement it. The terms that are scoped to the rdfext prefix and are used herein are example terms and may be expressed differently depending on the implementation of the invention. In one embodiment of the invention a user may make changes to the terms in rdfext using the extensibility framework mechanism in RDF database .

Triple indicates to the system that edb upper is of type rdfext ExtensionFunction which is defined as an indicator of a user defined function. Triples describe the semantics of the extension function edb upper . Specifically triple states that edb upper has a list of arguments that are indicated in the rest of the triples as   arglist . Triples and enumerate the list of arguments for edb upper . Triple states that the argument list for edb upper has a first argument that is of type xsd string . Triple indicates that there are no more arguments in the argument list i.e. the rest of   arglist is nil. Triple indicates that the return type of edb upper is of type xsd string .

Triple states that edb upper has a corresponding SQL function called UPPER . Thus a query transformation engine in RDF database may map the function UPPER which is native to DBMS to any instance of edb upper in a SPARQL query issued to RDF database . Because of the semantics defined for edb upper in RDF data the query transformation engine can map the arguments and return value for edb upper to the arguments and return value for UPPER .

Domain specific data is often complex and semi structured. In relational database systems domain specific data are typically modeled using abstract data types which may or may not have a string representation. In comparison an RDF data model captures all forms of data using a uniform triple representation which allows complex data to be captured as string values assigned to some data type property. In one embodiment of the invention serialized domain specific data is stored and processed in RDF database through user defined data types.

The extensibility framework mechanism of RDF database allows definitions of user defined data types and properties of the data types with associated semantics to be input into the DBMS . Through user defined data types RDF database may manage domain specific data which may have special requirements for storage indexing and searching that are not met by base data structures in RDF database . Further the extensibility framework mechanism can leverage the underlying database functionality built into base data structures to support domain specific data types. For the purposes of this disclosure a base data structure is a data structure implemented in either RDF database or DBMS . Base data structures may include optimizations for one or more of storing indexing and searching data. Base data structures may be native to RDF database or DBMS or may be implemented non natively e.g. through an extensibility framework mechanism for the database. A data structure such as a data type a function an object an index etc. that is native to a database system is a data structure that is implemented in the database system without user input.

To implement a user defined data type for a particular domain a user provides information about the new data type to RDF database . The information provided by the user includes how to map serialized domain specific data to base data structures how to serialize domain specific data stored in base data structures and optionally one or more operators on the domain specific data. Mapping RDF data to base data structures allows DBMS to access the data in greater detail than if the data were stored in a serialized form.

Serialized domain specific data is generally structured data. Examples of structured data include XML tables comma separated values etc. Often a standard serialization format exists for domain specific data. For example Geography Markup Language GML is a standardized XML type format for expressing geographical information. The data to be stored as a user defined data type may be formatted according to a standard such as GML or may be formatted according to rules devised by the user or based on some other pattern. Some examples herein are described with respect to a spatial object that is serialized using GML. However user defined data types may be designed to store any kind of object and may use any kind of serialization within the embodiments of the invention.

Step further indicates that the definition information includes a mapping between one or more attributes of the new database data type and one or more attributes of a particular base data structure of the database management system. The base data structure is a structure in DBMS that is associated with optimizations for one or more of storing indexing and searching the domain specific data for the new data type. If DBMS does not include a base data structure appropriate for the user defined data type the data may be stored it in its original format. Furthermore the base data structure may be a set of columns or fields chosen to represent the domain specific data may be an object defined natively in DBMS or may be user defined e.g. through an extensible framework.

To illustrate step a user may wish to leverage functionality that is native to DBMS in dealing with the domain specific geometrical data associated with the ogc GMLType data type. Thus in one embodiment of the invention the extensibility framework mechanism of RDF database allows the user to map instance data for ogc GMLType to properties of a base data structure in RDF database or DBMS . SDO GEOMERTY defined in DBMS manages data in the spatial domain and the user maps ogc GMLTYPE to SDO GEOMETRY. Storing RDF data that is formatted according to GML in a base data structure provides for the user defined data type the storage indexing and searching optimizations implemented in SDO GEOMETRY.

A mapping between serialized data for a user defined data type and a base data structure in a database management system such as DBMS may include one to one one to many many to one or many to many mappings between aspects of the serialized data and attributes of the base data structure. Further such a mapping may include conditional statements and Boolean expressions. The user of an extensible framework mechanism may choose to implement a mapping function on DBMS and refer to the function by name or alternatively create the mapping in RDF itself.

RDF data includes a list of attribute maps. The attribute mapping is a list of individual mappings with first and rest e.g. triples and with rest expanding into first and rest until rdf nil . The first mapping in triples is that of   geoCoordinates which is a one to one mapping where a particular location in ogc GMLType data corresponds to a particular attribute of SDO GEOMETRY. The mapping for a second attribute sdo geotype does not have a specific source but involves a case statement with XPath tests as illustrated in triples . The term   geoTypeCase which is the subject of triples and is defined as a list of Case statements with a first and rest of its own. Each case statement has a condition involving edb when XPathExists and the value when the condition evaluates to true see e.g. triples .

A mapping that is expressed using a function as in or RDF data as in may be associated with the definition of a user defined data type using a few RDF statements such as 

In situations where the type mapping is implemented in the host system e.g. DBMS edb typeMapping may refer to yet another RDF term that identifies the host function that implements the mapping as follows 

Continuing with the explanation of step triples of indicate that the   geoCoordinates attribute which can be extracted with the XPath expression gml coordinates in an instance of ogc GMLTYPE type is mapped to the sdo ordinates attribute of the SDO GEOMETRY base data type. The term gml coordinates is a location identifier which corresponds to an XPath expression in this case. An XPath expression is an example type of location identifier that may be used within the embodiments of the invention.

At step a set of subject predicate object expressions that includes a particular subject predicate object expression that comprises object data associated with the new database data type are stored in base data structures of the database management system wherein each subject predicate object expression corresponds to a subject a predicate and an object. A subject predicate object expression is a grouping of data styled as a subject data styled as a predicate and data styled as an object. An RDF triple is an example of data formatted as a subject predicate object expression. For example illustrates a set of RDF data that may be stored in RDF database . RDF data defines properties of a city resource geo Nashua . Triple indicates that geo Nashua is of type geo City where geo Nashua is the subject of the triple rdf type is the predicate of the triple and geo City is the object of the triple. Triple indicates that geo Nashua is an instance of a Geometry object as defined in at triple . Triple indicates that geo Nashua has a name Nashua which is of type xsd string .

Triple includes the predicate ogc hasGeometry as defined in triples of . Through use of ogc hasGeometry triple associates the city resource geo Nashua with an instance of the user defined data type ogc GMLType . Thus triple is a subject predicate object expression that has object data associated with the user defined data type ogc GMLType . A city resource such as geo Nashua may have any number of properties associated therewith.

RDF database stores triples in base data structures. As previously indicated a base data structure is any data structure that is implemented in RDF database or in DBMS . For example the base data structures that RDF database uses to store triples may be any combination of a set of columns or fields chosen to represent the domain specific data an object defined natively in DBMS a user defined data structure etc.

Step further indicates that a predicate describes a relationship between a corresponding subject and object. Using the example of triple the predicate rdf type indicates that geo Nashua is of the type geo City . Thus rdf type defines the relationship between the subject and object of triple . A triple predicate may indicate any kind of relationship between a corresponding subject and object to express any relationship that is appropriate for the data.

At step the particular subject predicate object expression is identified as including the object data associated with the new database data type. For example upon receiving triple to store RDF database identifies triple as including object data of type ogc GMLType .

At step in response to identifying the particular subject predicate object expression a particular attribute from the object data of the particular subject predicate object expression is extracted based on the mapping. For example triples of indicate that   geoCoordinates of a ogc GMLType object maps to sdo ordinates of SDO GEOMETRY. In response to determining that triple includes object data of type ogc GMLType RDF database extracts the values necessary for creating an instance of the SDO GEOMETRY object including coordinates as referred to in triples if coordinates are present in the GML data. For this purpose the extensible framework provides programmatic interfaces to map instances of ogc GMLType to SDO GEOMETRY instances and vice versa.

At step the particular attribute is stored in an instance of the particular base data structure based on the mapping. For example triples of indicate that   geoCoordinates of an object of type ogc GMLType maps to sdo ordinates of an SDO GEOMETRY instance. Based on this mapping RDF database causes DBMS to create an instance of SDO GEOMETRY. RDF database stores the value of   geoCoordinates from the GML data in an sdo ordinates attribute of the SDO GEOMETRY instance.

In addition to a mapping between serialized domain specific data and a base data structure as illustrated above the definition of a user defined data type includes a mapping between the base data structure storing domain specific data and the serialized format of the data. is a flowchart that illustrates reconstructing domain specific data from data stored in a base data structure in a database system.

At step definition information for a definition of a new database data type is received from a user at a database management system wherein the definition information includes a mapping between one or more attributes of a particular base data structure and one or more attributes of the new database data type. For example illustrates RDF data that defines a mapping between the base data structure for domain specific data associated with ogc GMLType SDO GEOMETRY and the serialized format for the data. A user of client device inputs RDF data into the extensibility framework mechanism of RDF database as part of the definition of the ogc GMLType user defined data type. Triples indicate that sdo ordinates of the SDO GEOMETRY base data type is mapped to   geoCoordinates found at the XPath gml coordinates in ocg GMLType data.

At step a request for a particular subject predicate object expression is received information for which is stored in attributes of an instance of the particular base data structure. Continuing with the previous example RDF database receives a request for the serialized version of ogc GMLType data found in triple which is stored in an instance of SDO GEOMETRY according to the embodiments of the invention. An example request is illustrated in the following SPARQL Query 2 received at RDF database 

At step in response to receiving the request the instance of the particular base data structure is identified. For example in response to receiving Query 2 RDF database identifies the city resource associated with the name Nashua in its triple stores and identifies the SDO GEOMETRY object associated with the city resource. The base data structure instances that are associated with RDF data may be tracked in any number of ways within the embodiments of the invention.

At step at least part of object data of the particular subject predicate object expression is reconstructed from the instance of the particular base data structure based on the mapping. For example RDF database determines from the information defining the ogc GMLType data type that sdo ordinates of the SDO GEOMETRY base data type is mapped to   geoCoordinates of ogc GMLType data. RDF database inserts the value of the sdo ordinates attribute of the instance of SDO GEOMETRY which is associated with the Nashua city resource into reconstructed ogc GMLType data. Specifically RDF database places the aforementioned value of sdo ordinates at a location identified by the XPath gml coordinates in the instance of ogc GMLType data. In one embodiment of the invention RDF database starts with a GML template and inserts data from an SDO GEOMETRY object into the template. In another embodiment of the invention all instructions for data placement are included in the definition of ogc GMLType .

A user may implement one or more operators on the data of a user defined data type such as ogc GMLType . A user may map the name parameters and return value for an operator on data for a user defined data type to a name parameters and return value for an operator that is known to DBMS e.g. a natively defined operator. In one embodiment of the invention an operator for a user defined data type is mapped to an operator for a base data structure associated with the user defined data type.

For example the following is a logical illustration of a mapping between a user defined operator ogf relate which operates on ogc GMLT data and an operator mdsys.sdo relate that is defined in DBMS 

Clients such as client device of can refer to user defined operators of user defined data types in queries on RDF database . For example a user may include ogf relate in the FILTER clause of a SPARQL query. To evaluate a SPARQL query RDF database translates the SPARQL query into the query format used by DBMS e.g. SQL. In order to evaluate ogf relate in the SPARQL query RDF database refers to the information on the operator included in the extensibility framework mechanism. Thus when RDF database translates the SPARQL query into SQL RDF database replaces the information for ogf relate with the information required for mdsys.sdo relate as indicated in the definition for ogf relate .

As shown in information entered into the extensibility framework mechanism of RDF database may be expressed according to RDF data principles. Thus a new data type or other new functionality being entered into RDF database through the extensibility framework mechanism can be stated declaratively. For example triples are subject predicate object expressions that conform to the RDF format and inform RDF database of user defined structures to implement therein.

Information entered into the extensibility framework mechanism may also be expressed conventionally. For example the following is a superclass that defines standard functions that are to be implemented in a user defined data type that is a subclass of the superclass 

In one embodiment of the invention RDF database infers properties of RDF data stored in RDF database which inferred properties are not made explicit in the stored data. More specifically RDF database infers properties of user defined data types that are not materialized in RDF database based on information stored for the user defined data types or based on information computed using user defined operators associated with the user defined data types. Inference that is based on instance data does not necessarily involve operators that belong in the FILTER clause of a SPARQL query. Inferred properties may be broadly classified into multiple types which include a those properties that describe a resource using the domain specific data also called access properties b those properties that relate a resource with other resources using the domain specific semantics also called relationship properties and c those properties that are non binary in nature.

Access properties are domain specific RDF data type properties that describe a resource. Access properties of a particular resource are functionally dependent on the domain specific instance data associated with the same resource. Therefore the value of an access property is not materialized in RDF database but is computed as needed based on instance data stored for the associated user defined data type and one or more rules included in the definition of the user defined data type. These rules referred to as inference rules define a mapping between instance data for a user defined data type and the value of an access property for the data type.

For example ogc hasEnvelope is an access property of ogc GMLType that describes the geometry of a resource in terms of the minimum bounding box for the geometry. illustrates inference rules which allow RDF database to infer relationships between RDF resources and to infer properties of the resources. The rules illustrated in are exemplary rules and may be expressed in many different ways within the embodiments of the invention.

Rule of defines an inference rule for ogc GMLType for deriving ogc hasEnvelope from ogc GMLType instance data stored in RDF database . Specifically rule includes an antecedent terms and and a consequent term . Term includes a user defined function edb getEnvelope that is mapped to a getEnvelope function for SDO GEOMETRY. Thus rule indicates that if a particular resource represented by gobj has an associated geometry object represented by geo AND that geometry object has an envelope represented by egeo THEN ogc hasEnvelope should return the envelope represented by egeo for the resource represented by gobj when called on the resource. In other words RDF database can derive the ogc hasEnvelope property for a geometry object if the object has associated geometry data in GML and the invocation of the edb getEnvelope function returns the appropriate envelope.

To illustrate RDF database has stored RDF data in the database s triple store according to the embodiments of the invention. RDF database then receives the following SPARQL Query 3 

The ogc hasEnvelope property for geo Nashua is not explicitly defined for the resource in RDF data . However RDF database can infer the bounding box for ogc hasEnvelope as described in rule using the ogc hasGeometry property that is explicitly defined for geo Nashua in triple .

RDF database rewrites the query based on the mapping between ogc hasEnvelope and ogc hasGeometry in rule as shown in the following Query 4 

In one embodiment of the invention Query 3 is rewritten to Query 4 on an in memory representation of the user issued SPARQL query Query 3. Query 4 is converted to SQL and is handled by DBMS using a combination of look ups into the triple store of RDF database as well as evaluation of necessary functions to compute the query result. The generation of SQL for any given SPARQL query is guided by domain specific rule declared using the extensibility framework mechanism. Query 4 may be mapped into a SQL query on relational tables storing triples the query including the SQL equivalents for the extension functions used in the SPARQL query. DBMS may perform further rewrites on Query 4 not reflected in the examples herein.

A resource may also be described in terms of its relationships with other resources e.g. from the same domain. Properties that relate two resources in the subject and object positions of triples are known as relationship properties and are object type properties. For example a spatial application may need to describe geometric objects in terms of their relationships with other objects such as a river intersects a city city contains a park etc. A user may define an operator to express relationships that involve a user defined data object. For example a user may define an ogc intersects operator on ogc GMLType data that indicates that a subject resource in a triple where ogc intersects is the predicate intersects an object resource of the triple.

Binary relationships between domain specific resources may be tested using a standard SPARQL query. The ogc GMLType data type may be used to capture geometrical information about RDF entities such that the entities can be searched based on their spatial characteristics. To illustrate a SPARQL query that tests binary relationships the following Query 5 uses ogc intersects to identify all the rivers in RDF database that intersect the city of Nashua 

To evaluate Query 5 RDF database logically expands the query using rules associated with user defined structures referred to therein and translates the SPARQL query into the query format used by DBMS e.g. SQL. The extensibility framework mechanism of RDF database manages the semantics of the domain specific relationship properties with the use of declarative rules that can guide the query rewrite.

For example rule of defines the semantics of the ogc intersects operator. The formulation of rule assumes that edb intersects is a user defined function that is mapped to an intersects function for SDO GEOMETRY in DBMS . Term indicates that a first resource fobj has a first geometry fgeo term indicates that a second resource sobj has a second geometry sgeo and term indicates that edb intersects returns the Boolean true when called for the first geometry and the second geometry. If terms and hold true the first resource intersects the second resource.

RDF database translates Query 5 based on any domain specific rule in the database that is applicable to Query 5. The following Query 6 illustrates a logical translation that RDF database may perform on Query 5 based on rule 

RDF database evaluates Query 6 using triples stored in the repository for RDF database as well as any extension functions plugged into the system. Furthermore when RDF database is implemented as a SQL application the SPARQL Query 6 is executed using an equivalent SQL query that accounts for any references to extension functions in the query.

Query 6 illustrates one path to determining which river resources intersect the city Nashua. Domain specific properties may be further qualified by alternate ways of deriving a specific relationship using the same or other properties of the domain specific data. In one embodiment of the invention these alternate forms for deriving the domain specific properties are expressed as multiple rules that must all be explored during query rewrite. In another embodiment of the invention only one or more of the rules are explored during query rewrite. Thus in one embodiment of the invention RDF database evaluates Query 5 using all paths that would result in finding River resources that intersect Nashua s geometry. For example RDF database may evaluate the following paths for determining rivers that intersect Nashua 

Because ogc GMLType is mapped to the SDO GEOMETRY base data structure DBMS can evaluate Query 5 using query functionality optimizations and indexing capabilities already implemented for SDO GEOMETRY. For example a DBMS may be able to manage a large number of SDO GEOMETRY objects through indexing etc. Further DBMS may include an index for SDO GEOMETRY that DBMS can utilize to determine whether any SDO GEOMETRY object intersects another SDO GEOMETRY object. Thus RDF database may evaluate Query 5 using such an index.

Some relationships between resources cannot be expressed using a binary relationship. To illustrate intersects and contains are binary relationships. In contrast within distance relates two objects in the context of a distance parameter which tests whether a particular resource is within a particular distance from a second resource. Such a relationship is non binary. The illustrated relationships are exemplary many relationships qualify as binary and many others qualify as non binary.

Relationships between resources that are not considered binary may be handled using extension functions which may be used in the FILTER clause of a standard SPARQL query. Any parameterized relationships that exist between resources such as the within distance relationship may be tested using a corresponding extension function that accepts more than two arguments. The extensibility framework mechanism for plugging in user defined functions may further be used to perform complex domain specific computations within the filter clause of the query.

According to one embodiment the techniques described herein are implemented by one or more special purpose computing devices. The special purpose computing devices may be hard wired to perform the techniques or may include digital electronic devices such as one or more application specific integrated circuits ASICs or field programmable gate arrays FPGAs that are persistently programmed to perform the techniques or may include one or more general purpose hardware processors programmed to perform the techniques pursuant to program instructions in firmware memory other storage or a combination. Such special purpose computing devices may also combine custom hard wired logic ASICs or FPGAs with custom programming to accomplish the techniques. The special purpose computing devices may be desktop computer systems portable computer systems handheld devices networking devices or any other device that incorporates hard wired and or program logic to implement the techniques.

For example is a block diagram that illustrates a computer system upon which an embodiment of the invention may be implemented. Computer system includes a bus or other communication mechanism for communicating information and a hardware processor coupled with bus for processing information. Hardware processor may be for example a general purpose microprocessor.

Computer system also includes a main memory such as a random access memory RAM or other dynamic storage device coupled to bus for storing information and instructions to be executed by processor . Main memory also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor . Such instructions when stored in storage media accessible to processor render computer system into a special purpose machine that is customized to perform the operations specified in the instructions.

Computer system further includes a read only memory ROM or other static storage device coupled to bus for storing static information and instructions for processor . A storage device such as a magnetic disk or optical disk is provided and coupled to bus for storing information and instructions.

Computer system may be coupled via bus to a display such as a cathode ray tube CRT for displaying information to a computer user. An input device including alphanumeric and other keys is coupled to bus for communicating information and command selections to processor . Another type of user input device is cursor control such as a mouse a trackball or cursor direction keys for communicating direction information and command selections to processor and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes a first axis e.g. x and a second axis e.g. y that allows the device to specify positions in a plane.

Computer system may implement the techniques described herein using customized hard wired logic one or more ASICs or FPGAs firmware and or program logic which in combination with the computer system causes or programs computer system to be a special purpose machine. According to one embodiment the techniques herein are performed by computer system in response to processor executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory from another storage medium such as storage device . Execution of the sequences of instructions contained in main memory causes processor to perform the process steps described herein. In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions.

The term storage media as used herein refers to any media that store data and or instructions that cause a machine to operation in a specific fashion. Such storage media may comprise non volatile media and or volatile media. Non volatile media includes for example optical or magnetic disks such as storage device . Volatile media includes dynamic memory such as main memory . Common forms of storage media include for example a floppy disk a flexible disk hard disk solid state drive magnetic tape or any other magnetic data storage medium a CD ROM any other optical data storage medium any physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM NVRAM any other memory chip or cartridge.

Storage media is distinct from but may be used in conjunction with transmission media. Transmission media participates in transferring information between storage media. For example transmission media includes coaxial cables copper wire and fiber optics including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio wave and infra red data communications.

Various forms of media may be involved in carrying one or more sequences of one or more instructions to processor for execution. For example the instructions may initially be carried on a magnetic disk or solid state drive of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system can receive the data on the telephone line and use an infra red transmitter to convert the data to an infra red signal. An infra red detector can receive the data carried in the infra red signal and appropriate circuitry can place the data on bus . Bus carries the data to main memory from which processor retrieves and executes the instructions. The instructions received by main memory may optionally be stored on storage device either before or after execution by processor .

Computer system also includes a communication interface coupled to bus . Communication interface provides a two way data communication coupling to a network link that is connected to a local network . For example communication interface may be an integrated services digital network ISDN card cable modem satellite modem or a modem to provide a data communication connection to a corresponding type of telephone line. As another example communication interface may be a local area network LAN card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information.

Network link typically provides data communication through one or more networks to other data devices. For example network link may provide a connection through local network to a host computer or to data equipment operated by an Internet Service Provider ISP . ISP in turn provides data communication services through the world wide packet data communication network now commonly referred to as the Internet . Local network and Internet both use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link and through communication interface which carry the digital data to and from computer system are example forms of transmission media.

Computer system can send messages and receive data including program code through the network s network link and communication interface . In the Internet example a server might transmit a requested code for an application program through Internet ISP local network and communication interface .

The received code may be executed by processor as it is received and or stored in storage device or other non volatile storage for later execution.

In the foregoing specification embodiments of the invention have been described with reference to numerous specific details that may vary from implementation to implementation. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense.

