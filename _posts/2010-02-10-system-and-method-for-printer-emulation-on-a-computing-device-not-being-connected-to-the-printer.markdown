---

title: System and method for printer emulation on a computing device not being connected to the printer
abstract: A system and method are provided for accurately emulating a printer on a computing device that is not connected to the printer. The computing device is provided with firmware and programming code that interfaces with the firmware for a customized printing operation. The firmware is provided with the printer and the computing device. The programming code is provided with the computing device, and the computing device runs the programming code. The programming code interfaces with the firmware provided with the computing device and causes the computing device to emulate the printer, when the printer runs the programming code. The computing device and the printer are not connected.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09436422&OS=09436422&RS=09436422
owner: SATO HOLDINGS KABUSHIKI KAISHA
number: 09436422
owner_city: 
owner_country: JP
publication_date: 20100210
---
The present application is a 35 U.S.C. 371 national phase application of PCT JP2010 000831 filed Feb. 10 2010 and published as WO 2011 099064 the content of which is incorporated in full by reference herein.

The present invention relates generally to printers and more particularly to providing accurate print emulation and preview functionality.

The use of computing devices to prepare electronic files such as labels documents data reports or other formatted output remains prevalent. Prior to outputting an electronic file or other electronic information to an output device such as a printer users desire to preview how the document will appear as printed. Many prior art software programs offer a print preview feature that displays on a computing device s display screen a previewed representation of printed output. An example print preview solution is described in greater detail in Japanese patent publication H06 110626 entitled PRINTER AND PRINTING SYSTEM USING THE SAME which is incorporated herein by reference in its entirety.

Another need for print preview functionality exists for software developers and programmers who write applications that use printers or that generate other printed output. Print preview functionality however often cannot represent an actual printing result accurately. This is often because the computing device can not correctly or accurately emulate an actual printer environment. For example a user creates a particular and previously unknown typeface font on a computing device and uses the font in a document prepared on the user s word processing software. The printing device connected to the computing device does not have any record of the font. Accordingly when the user selects a print preview option the computing device displays the font on the display device. When the user outputs a print job that uses the font to the printer however the printer is unable to generate the font. Thus the print preview option provided by the computing device is inaccurate. In order to accurately preview printed output in the prior art the user has to physically print the file or other output or needs to be coupled to a printer. This wastes paper or other valuable printed media consumes time and or limits the development environment for the user.

A need for accurate previewing of printed output is particularly high for printed labels. Printed labels continue to be used in many applications including for shipping and mailing medical specimen vials grocery and product inventories or the like. Unfortunately previous solutions such as described in H06 110626 require a user to connect a printing device to a computing device. Furthermore the connected printing device requires special firmware that expands the printing image in the printer s image buffer which is sent back to the computing device for display. This results in wasted printer memory resource.

There remains a desire in the industry for users to preview an accurate representation of printed matter without a need to connect a printing device

Accordingly a system and method are provided for accurately emulating a printer on a computing device that is not connected to the printer. The computing device is provided with firmware and programming code that interfaces with the firmware for a customized printing operation. Moreover the firmware is provided with the printer and the computing device and is operable on each of the computing device and the printer as a function of at least one respective application programming interface. One application programming interface may be provided with the printer and another application programming interface may be provided with the computing device or both the computing device and the printer may be provided with the same application programming interface.

The programming code is provided with the computing device and the computing device runs the programming code. The programming code interfaces with the firmware provided with the computing device and causes the computing device to emulate the printer when the printer runs the programming code. Moreover the computing device and the printer are not connected.

Other features and advantages of the present invention will become apparent from the following description of the invention that refers to the accompanying drawings.

In a preferred embodiment a printer is emulated as a function of a shared printer firmware operable via one or more application programming interfaces APIs and that enable custom and extended functionality. In a preferred embodiment an interpreted scripting language LUA is used to generate the firmware and to provide custom printing applications via an integrated development environment. In accordance with the present application at least one of a printer s firmware one or more printer s API s and or printer software applications that are developed and operate on a printer are provided in an integrated development environment that is operable on a computing device. Preferably the integrated environment includes a graphical user interface that emulates at least in appearance a control panel that is provided with the printer.

Thus one or more software programs that operate on a printer such as the printer s firmware a software application and a printer API are loaded on the computing device and operate in an integrated environment. The integration of the printer software with the graphical user interface provides users with accurate print preview representations of printed output because the same software e.g. firmware API s and or application s that operate on the printer operate on the computing device as well. Preferably one or more printer API s are designed such that the application and shared firmware execute on both the printer itself and on the computing device e.g. a personal computer operating the MICROSOFT WINDOWS operating system thereby enabling a true emulation of the printer. The teachings herein provide a new and non obvious printer emulation at least because injected code functions to access any part of a developed printer software application and or the shared firmware via one or more API s.

Thus the teachings herein include software that operates effectively on a computing device in the same way as if it was provided with an actual physical printer. Users particularly developers of software for the respective printers view an accurate representation of the printer s functionality as well as an accurate preview of printed output on the user s display device even though the display device is provided separately from the physical printer. In this way the development environment does not suffer from the shortcomings described above with regard to prior art print preview functionality.

In an embodiment a printer application is written in LUA which is a platform independent language and developed in the C programming language. Computer and printer interaction with LUA is done through an interface such as the C API. By using the C API LUA based operations perform the same way on various platforms including a printer platform and a computing e.g. MICROSOFT WINDOWS platform. In order to achieve an accurate printer emulation on a computing device the C API should function similarly or the same way on both platforms. On a computing device such as a personal computer running the MICROSOFT WINDOWS operating system a file system is provided by the operating system. In accordance with the teachings herein a file system API is provided for a printing device. Preferably a file system API is used on both platforms e.g. a computing device and a printing device to ensure identical behavior as a software application executes on the respective platforms. Preferably both a computing device and printing device are provided with a LUA virtual machine as known in the art and a C API such that when a software application is loaded on either platform such as via memory card USB connected device transferred over a network or the like the application is recognized by the C API and it runs consistently. Accordingly the application runs the same way on the computing device as it does on the printing device thereby eliminating a need to physically connect the printing device to the computing device to observe the application as it runs.

The teachings herein also eliminate the prior art burden of having to physically print labels or other output to observe how printed output will appear. For example a proprietor of a chain of fast food restaurants needs to create respectively formatted labels for each of a plurality of restaurants in the chain. The proprietor uses the integrated development platform in accordance with the teachings herein to design and preview the labels. The proprietor thereafter distributes the label design to each of the restaurants in the chain for generating labels. The labels that are output at each restaurant are accurately previewed by the proprietor. Even though the proprietor does not physically access to the printers used at the restaurants the preview is accurate. Thus the label production workflow is significantly more efficient than that of the prior art. Moreover the integrated environment operating on a computing device does not require a printer connected to the computing device that transmits image data back to computing device. Accordingly the memory resource of printers is conserved.

In a preferred embodiment an integrated development environment includes a graphical user interface that is operable for designing and or developing output such as labels. Preferably an integrated development environment for example for designing data labels for a label and tag printer is provided in combination with a graphical user interface that provides virtual representation of the printer such as the printer s control panel. The integrated development environment and or the graphical user interface that represents the printer preferably include the printer s firmware and one or more applications that are executed by the printer. Thus application development tools are provided that operate on a computing device such as a personal computer and that include scripts and or code libraries that facilitate application development of programs that execute on or by a printing device. This provides improved connectivity capabilities such as for decentralized and local application development by a plurality of parties. In this way many programmers can work remotely from a centralized office and do not have to be located in close proximity to end users and customers in order to produce applications that are customized and or tailored for specific customer needs. This results in shorter lead time which represents the time when a request from a client is made to the time when a program is deployed and used by the customer. The systems and methods herein further strengthen relationships with customers and developers.

Preferably developers of formatted output such as printed labels use the teachings herein to develop applications for formatted output. The developers are provided with an accurate virtual or displayed representation of printed output as well as a virtual representation of the respective output device such as the printer that will produce the output. For example a graphical user interface is provided for developers that includes a representation of the printer control panel e.g. the LCD and keyboard keypad that is provided with the printer for end users to print labels. In this way developers can test how a particular printer or other output device will respond for an end user. For example the developer can preview how the printer will behave in response to one or keys that are selected by an end user. Further the developer is provided with an accurate representation of the liquid crystal display LCD or other display provided with the printing device in response to one or more key selections made by an end user. Moreover the developer is provided with an accurate representation of the physical output that the printer will provide. In this way the teachings herein simulate and accurately represent output results from a printing device as well as printer key operation and LCD or other display results on the developer s computing device. This is enabled at least in part by providing firmware that is in the printing device in the developer s computing device. In this way the physical output i.e. printing environment is accurately represented without a need to physically couple an output device or printer to the developer s computing device. Another advantage for developers is that when developing applications or injected functions debugging is done on a computer thereby eliminating or reducing time consuming downloads and test prints.

Thus a plurality of printing solutions are provided by including a printer s firmware source code in a developer s computing device to accurately represent the result of for example software developed for proprietary printer control and operations.

Referring now to the drawing figures in which like reference numerals represent like elements illustrates an exemplary hardware arrangement in accordance with an embodiment for developing and emulating a printing environment over a communication network and referred to herein generally as system . System preferably comprises at least one information processor which may be configured to operate as an Internet web server and database file server and that is programmed and configured to access communication network and communicate with user workstation s . User workstations and information processor s may communicate via the known communications protocol Transmission Control Protocol Internet Protocol TCP IP. In the example shown in information processor is provided with an integrated development programming environment IDE such as to develop applications in the LUA programming language as known to those skilled in the art. Information processor is provided with or has access to all databases necessary to support the teachings herein. Information processor is also preferably provided with printer firmware that is installed on printer . However it is contemplated that information processor and or user workstation can access any required database via communication network or any other communication network to which information processor may be coupled. Communication network is preferably a global public communication network such as the Internet but can also be a wide area network WAN local area network LAN an intranet or other network that enables computing devices and peripheral devices to communicate.

In a preferred embodiment information processor and user workstations are any computer readable medium devices that are capable of sending and receiving data across communication network e.g. mainframe computers mini computers personal computers laptop computers personal digital assistants PDA cellular telephones and Internet access devices such as Web TV. In addition information processor is preferably equipped with web browser software such as MICROSOFT INTERNET EXPLORER MOZILLA FIREFOX or the like. Information processor is coupled to communication network using any known data communication networking technology.

Also shown in is printer that is preferably a label and tag printer and operable to print labels and tags of data received from information processor . Printer may be provided with keyboard and display to enable input and output functionality with printer in addition to or in the absence of or in conjunction with information processor . A keyboard is preferably provided that is operable to receive and interpret i.e. read signals from a user using printer . The keyboard may be an external keyboard or other input device not directly coupled to printer . Moreover a display is preferably provided that operates to present a variety of textual and graphical content on printer . The display may be an external display not shown attached to printer . Preferably the display supports a wide selection of fonts and coding types for example for many different written languages.

The various components of information processor and or workstation need not be physically contained within the same chassis or even located in a single location. For example storage device may be located at a site which is remote from the remaining elements of information processor and may even be connected to CPU across communication network via network interface . Information processor and or user workstation preferably includes a memory equipped with sufficient storage to provide the necessary databases forums and other community services as well as acting as a web server for communicating hypertext markup language HTML Java applets and Active X control programs. Information processor and or user workstations are arranged with components for example those shown in suitable for the expected operating environment. The CPU s network interface s and memory and storage devices are selected to ensure that capacities are arranged to accommodate expected demand.

The nature of the invention is such that one skilled in the art of writing computer executable code i.e. software can implement the functions described herein using one or more of a combination of popular computer programming languages scripting languages and developing environments including but not limited to LUA C C C Visual Basic JAVA HTML XML ACTIVE SERVER PAGES JAVA server pages servlets MYSQL and PHP.

Although the present application is described by way of example herein and in terms of a web based system using web browsers and a web site server e.g. information processor system is not limited to such a configuration. It is contemplated that system is arranged such that printer communicates with and outputs data received from information processor and or user workstation using any known communication method for example using a non Internet browser WINDOWS viewer coupled with a local area network protocol such as the Internet Packet Exchange IPX dial up third party private network or a value added network VAN .

It is further contemplated that any suitable operating system can be used on information processor for example DOS WINDOWS 3.x WINDOWS 95 WINDOWS 98 WINDOWS NT WINDOWS 2000 WINDOWS ME WINDOWS CE WINDOWS POCKET PC WINDOWS XP MAC OS UNIX LINUX PALM OS POCKET PC and any other suitable operating system.

In a preferred embodiment printer applications are developed in the LUA programming language. In accordance with a preferred embodiment a LUA interpreter is included that is operable to process LUA programming statements provided in the applications. Unlike typical high level programming languages LUA is a scripting language and not a basic programming language. The teachings herein implement printer APIs that are extensions to the LUA language that interface with the printer firmware and that are interpreted by the LUA interpreter. This enables more advanced and complex applications to be developed such as via function calls. Furthermore by implementing APIs that are extensions to the LUA programming language a portion of printer functionality can be modified as opposed to prior art label and tag printers that require a complete overwrite of their respective firmware applications in order to implement a single change.

In a printer such as a label and tag printer is represented in box and includes firmware that is particular to the printing device and not shared with information processor . Also provided with printer is shared firmware that is particular to printer but operates on information processor as well and that enables printer emulator to be accurate. As noted above the printer s firmware is preferably provided with information processor that enables the emulator to accurately represent printed output and the way that the printer will function while the application is executing. Moreover printer includes the API and printer application .

In a preferred embodiment information processor is provided with application developer and printer emulator that enable for example a software developer to write a printing application for printer . illustrates an example display screen that is displayed on information processor and that represents an exemplary embodiment of application developer . In the example shown in the application developer is provided as an integrated development environment IDE and used to develop a label application for outputting a plurality of labels on printer . As shown in table section provides a list of one or more data tables that store information to be printed on a label. Options section includes additional application development selections including for data field entry label layout options and data source. In the example shown in the option Tables is selected.

Continuing with reference to label format section includes interactive graphical screen controls that provide options for designing a label to be output on for example printer . In the example shown in a label is being designed for a retail company and the respective label is developed for a product AGAM. Options are provided for among other things font type lines boxes or the like. Data table section includes a display of a respective table of information that is used for inclusion in the designed label. In a preferred embodiment data tables or other formatted sources of information are provided to information processor such as via FTP e mail physical disk or drive or the like. In this way a decentralized source of label data can be managed without a need for a label application programmer to be physically located nearby to the location where the labels will be eventually printed and or used.

Continuing with reference to code generating section is provided for a user of information processor to write programming code that is included in a printing application. In the example shown in LUA programming statements are displayed and used to provide color options to be included in a label. Integrating programming code development in a graphical label development platform enables convenient options for developers to accurately and quickly develop printing applications. Further properties section include options for controlling the appearance and data to appear in printed output such as a label. In the example shown in the word Agam is selected and identified in properties section to be in the font type Sans Bold font 12 point at X Y coordinates and the data for the label is provided from a table such as displayed in table section .

Thus and as shown in exemplary display screen an integrated development environment that represents application developer is usable for developing an application for formatted printed output such as a label.

As noted herein programmed applications that are usable for printing such as custom data labels were developed in the prior art by parties who had to be situated physically close to each other. Developers needed access to the end user s data as well as to be physically connected to the end user s printing device in order to test the output and revise the application as necessary. In accordance with the teachings herein developers no longer have to be tied physically to an end user s printer and can instead develop printing applications remotely that are integrated with the end user s data and that can be tested and evaluated away from the end user s site as well.

Table section illustrates an exemplary data table that has been imported from an exemplary client and includes data for product code product name manufacturer code and color code. Once imported the data are usable for a custom printing application such as for data labels and further is usable for the exemplary customer.

As noted above in addition to application developer software is included that operates on information processor effectively in the same way as software provided with an actual physical printer . This enables users to view an accurate representation of a printer as well as an accurate preview of printed output on the user s display device even though the display device is located separately from the physical printer.

Thus as shown and described herein the present application solves problems associated in the prior art such as relating to printer emulation and program development. By sharing firmware with a printer and a computing device an accurate printer emulation is obtained including providing an accurate print output preview. Moreover the development cycle for printer software applications is significantly reduced and engineers and programmers no longer have to be located physically near to end users. A decentralized advanced fast and cost effective solution is provided for custom tailored printing solutions that were previously unavailable in the prior art. This is provided at least in part due to use of a powerful programming and scripting language such as LUA that is capable of accessing and interfacing with file systems to provide powerful printer functions connectivity functionality and improved font and code page handling. The result is a shorter total lead time and more accurate application solutions provided initially to customers which improves and solidifies customer relations.

Moreover very complex print configurations are now possible particularly for labels that may include for example various colors logos database information barcodes and operator sequences for an improved workflow. After customer databases are accessed or obtained and customer requests or requirements are defined a programmer can use the teachings herein to design a label format that includes the customer s data and custom graphics and that can be packaged in an application and transmitted to the customer quickly. Moreover the application can be verified for accuracy via printer emulator .

In one embodiment customers receive printers that have virtually no predefined functionality and are essentially empty machines. An end user accesses and downloads a printer application over a communication network via the end user s computing device. Thereafter the printer executes programming instructions that provide custom functionality.

Although the present invention is described and shown in relation to particular embodiments thereof many other variations and modifications and other uses will become apparent to those skilled in the art. It is preferred therefore that the present invention be limited not by the specific disclosure herein.

