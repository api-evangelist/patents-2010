---

title: Providing a security boundary
abstract: In order to enable potentially conflicting applications to execute on the same computer, application programming interface (API) calls are intercepted when an application attempts to access a computer system's resources. During a learning mode of operation, a security monitor stores data in a security monitor database identifying which applications are allowed to access the computer system resources. At runtime of an application, the security monitor operates in an enforcement mode and utilizes the contents of the security monitor database to determine if an application is permitted to access system resources. If data associated with the application is located in the security monitor database, the application is allowed to access computer system resources, if data associated with the application is not located in the security monitor database, the application is not allowed to access computer system resources.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09003543&OS=09003543&RS=09003543
owner: Microsoft Technology Licensing, LLC
number: 09003543
owner_city: Redmond
owner_country: US
publication_date: 20101221
---
Data center administrators face a challenging task to fulfill the data requirements of a datacenter while also maintaining acceptable power hardware and space requirements. Often in order to minimize expenditures administrators increase the application density of servers within a datacenter. Application density is a measure of the number of applications executing on a single physical computer. By increasing the number of applications running on each physical computer the number of servers required to support data center operations may be minimized.

In order to increase application density within a datacenter administrators may also utilize virtual machines VMs . Virtual machines can increase application density by enabling the sharing of a machine s physical resources by multiple virtual machines. For various reasons however it is not always possible to execute two different applications within the same VM. For instance it may be undesirable for two different applications to execute within the same VM due to security concerns. As another example two different applications executing on the same VM might conflict when attempting to access the same resource.

In order to enable two potentially conflicting applications to execute on the same computer it might be necessary to execute an individual VM for each application. However it can be costly to execute multiple VMs in this manner due to the licensing costs associated with executing each virtual machine. In addition performance cost for executing multiple VMs can be significant when operating in an environment containing a large number of machines for example operating in a cloud environment. Within a data center each VM is typically monitored and managed. Accordingly the management cost for operating a data center increases with the addition of VMs because each VM may require various patches or policies in order to operate in a desired fashion.

Concepts and technologies are disclosed herein for providing a security boundary. Through an implementation of the concepts and technologies presented herein multiple applications can be executed on the same computer in a manner that provides a secure boundary between the applications. In this manner two or more applications may be executed on the same physical or virtual computer for which it might otherwise be undesirable or impossible. Consequently the technologies disclosed herein may be utilized to reduce the number of VMs and the associated licensing fees required to execute incompatible or conflicting applications.

According to one aspect presented herein a security monitor executes in a learning mode to monitor application programming interface API calls made by executing applications to identify the resources that are used by the application. The security monitor adds an editable virtual access control list ACL for each of the identified resources to a security monitor database that may be used to control access to each identified system resource ranging from complete access to off limits. Once the security monitor has identified the resource accessed by an API call the security monitor allows the API call to proceed as normal.

In an enforcement mode of operation the security monitor monitors API calls made by executing applications to determine whether the applications are authorized to access system resources. In particular when the security monitor is in the enforcement mode the security monitor intercepts the API calls made by an application. The security monitor then accesses the security monitor database to determine if the requesting application is authorized to access the requested system resources. If the security monitor determines that the application is authorized to access the requested system resources then the API call is allowed to proceed as normal. If the security monitor determines that the application is not authorized to access the requested system resources the security monitor denies access to the system resources by the application. A system administrator may edit an ACL to allow a denied application access to the requested systems resources.

It should be appreciated that the embodiments disclosed herein may be utilized in conjunction with virtualized applications non virtualized applications executing in a hardware virtualized environment non virtualized applications executing in a non virtualized environment and other types of applications. It should also be appreciated that the above described subject matter might also be implemented as a computer controlled apparatus a computer process a computing system or as an article of manufacture such as a computer readable storage medium. These and various other features will be apparent from a reading of the following Detailed Description and a review of the associated drawings.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended that this Summary be used to limit the scope of the claimed subject matter. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.

The following detailed description is directed to technologies for providing a security boundary. As discussed briefly above and described in greater detail below a learning mode of operation is executed in which application API calls are intercepted. Data identifying the API calls is recorded in a security monitor database. At a run time of the application a security monitor allows the applications to access resources based on the data stored in the database during the learning mode of operation. Additional details regarding these processes will be provided below with regard to .

While the subject matter described herein is presented in the general context of program modules that execute in conjunction with the execution of an operating system and application programs on a computer system those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the subject matter described herein may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like.

In the following detailed description references are made to the accompanying drawings that form a part hereof and which are shown by way of illustration specific embodiments or examples. Referring now to the drawings in which like numerals represent like elements throughout the several figures aspects of a computing system computer readable storage medium and computer implemented methodology for providing a security boundary will be presented.

In order to enable the execution of virtual machines a software hypervisor may be executed to provide functionality for configuring executing and managing the operation of virtual machines. The hypervisor is a layer of software that runs above the physical hardware of the host computer upon which it executes and below one or more operating systems A C. The hypervisor might also be implemented in hardware.

The hypervisor provides isolated execution environments called partitions. In the example shown in the operating system A and the applications A are executing in a first partition the operating system B and the applications B are executing in a second partition and the operating system C and the applications C are executing in a third partition. The hypervisor provides each partition with its own set of virtual hardware resources for example memory devices and central processing unit CPU cycles . The hypervisor also controls and arbitrates access to the underlying hardware as needed.

As will be described in greater detail below the hypervisor might implement the functionality disclosed herein for providing a security boundary to provide a security boundary between applications executing within the same partition by assigning an access control list ACL to each system resource and assigning permissions to use each system resource based on a permission list containing applications allowed to use the system resources. In other embodiments the functionality presented herein might be implemented within an operating system or by an application program that installs low level operating system drivers to enable the functionality disclosed herein. In this regard it should be appreciated that is merely illustrative and that the embodiments presented herein might be utilized within many different types of virtualization environments that have been implemented in many different ways. For instance the embodiments disclosed herein may be utilized in conjunction with virtualized applications non virtualized applications executing in a hardware virtualized environment non virtualized applications executing in a non virtualized environment and other types of applications.

During execution the applications may place one or more application programming interface API callsin order to facilitate communications with other programs and access system resources. It should be appreciated that as used herein the term system resources encompasses all resources or objects for which an operating system OS does not otherwise control access for use. For instance system resources may include network endpoints network ports files windows user interface UI elements a registry open database connectivity ODBC connection strings and other types of resources.

While in learning mode the security monitor intercepts the API calls made by the applications . This is illustrated in as the block . In response to intercepting an API call the security monitor associates one or more editable ACLs with the system resources that are the target of the API call. The one or more editable ACLs may be used to control access to the system resources ranging from complete access to the system resources to off limits in one embodiment the security monitor stores the one or more ACLs in a security monitor database . The metadata may include data identifying the system resource requested by the application and an indication that the application is permitted to access the resources. After the ACLs are stored in the security monitor database the intercepted API calls are allowed to proceed as normal. This is illustrated at block shown in .

As will be described in greater detail below the security monitor utilizes the contents of the security monitor database at runtime of the applications to allow or deny access to system resources. In particular the security monitor will permit API calls to access resources by applications that have been processed by the learning mode described above. API calls to access system resources by applications that have not been processed in the learning mode described above will not be permitted. In this regard the data stored by the security monitor in the security monitor database is utilized as a whitelist. An administrator may allow or deny access to system resources after the learning mode has occurred by editing the whitelist to add or remove applications for example applications . It should be appreciated therefore that the type of data stored in the security monitor database described above is merely illustrative and that the security monitor may store other types of data.

In the example shown in the security monitor has processed the application in the learning mode described above. The application has not however been executed in the learning mode. Consequently the security monitor database includes data identifying the API calls made by the application . The security monitor database does not contain data identifying API calls made by the application .

While in the enforcement mode the security monitor intercepts API calls made by the application and application . This is represented in by the block . In response to intercepting the API calls the security monitor accesses the contents of the security monitor database to determine if the API calls should be permitted. For instance in one implementation the security monitor accesses ACLs and metadata stored during learning mode to determine if the API calls made by the application and the application should be permitted.

Because the application has been processed in the learning mode the security monitor determines that application is authorized to access the requested system resources. Because application is authorized to access system resources the intercepted API call made by application is allowed to proceed as normal. This is illustrated in the blocks and in . Because the application has not been executed in the learning mode the security monitor also determines that the application is not authorized to access the system resources. Because application is not authorized to access system resources the intercepted API call made by application is not permitted to proceed.

The routine begins at operation where an administrator executes the security monitor in the learning mode. Once the security monitor has begun executing the routine proceeds to operation where the applications running on the computer initiate API calls. From operation the routine proceeds to operation .

At operation the security monitor intercepts the API calls initiated by the one or more applications. In response to intercepting an API call the routine proceeds to operation where the security monitor adds the application making the API call to an ACL associated with the requested resource. An administrator might also be permitted to specify that an application can access the resources by modifying the ACLs. From operation the routine proceeds to operation .

At operation the one or more ACLs are stored in the security monitor database . Once the security monitor has updated the security monitor database the routine proceeds to operation where the intercepted API calls are allowed to proceed as normal. From operation the routine proceeds to operation where it ends.

At operation the security monitor accesses the security monitor database . The security monitor then determines using the data stored in the security monitor database whether the application initiating the API call are authorized to access the requested system resources. This occurs at operation .

If the security monitor determines that an application is authorized to access the requested system resource the routine proceeds to operation where the server allows the API call to proceed as normal. At operation the application is the permitted access to the requested resource. From operation the routine proceeds to operation where it ends.

If at operation the security monitor determines that the application is not authorized to access the requested system resource the routine proceeds to operation where the server prevents the API call made by application from executing. From operation the routine proceeds to operation where it ends.

It should be appreciated that the security monitor may store information relating to failed API calls. This information may be provided to an administrator by way of a suitable user interface. The administrator may use this data to determine whether the application making the failed API call should be allowed to access certain system resources. In this regard the administrator may modify the data e.g. an ACL stored in the security monitor database to permit execution of an API call by the application during a future execution.

The computer architecture shown in includes a central processing unit CPU a system memory including a random access memory RAM and a read only memory ROM and a system bus that couples the memory to the CPU . A basic input output system containing the basic routines that help to transfer information between elements within the computer such as during startup is stored in the ROM . The computer further includes a mass storage device for storing an operating system application programs and other program modules which are described in greater detail herein.

The mass storage device is connected to the CPU through a mass storage controller not shown connected to the bus . The mass storage device and its associated computer readable media provide non volatile storage for the computer . Although the description of computer readable media contained herein refers to a mass storage device such as a hard disk or CD ROM drive it should be appreciated by those skilled in the art that computer readable media can be any available computer storage media that can be accessed by the computer .

By way of example and not limitation computer readable media may include volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. For example computer readable media includes but is not limited to RAM ROM EPROM EEPROM flash memory or other solid state memory technology CD ROM digital versatile disks DVD HD DVD BLU RAY or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer .

According to various embodiments the computer may operate in a networked environment using logical connections to remote computers through a network such as the network . The computer may connect to the network through a network interface unit connected to the bus . It should be appreciated that the network interface unit may also be utilized to connect to other types of networks and remote computer systems. The computer may also include an input output controller for receiving and processing input from a number of other devices including a keyboard mouse or electronic stylus not shown in . Similarly an input output controller may provide output to a display screen a printer or other type of output device also not shown in .

As mentioned briefly above a number of program modules and data files may be stored in the mass storage device and RAM of the computer including an operating system suitable for controlling the operation of a networked desktop laptop or server computer. The mass storage device and RAM may also store one or more program modules. In particular the mass storage device and the RAM may store the hypervisor applications and the security monitor and the security monitor database each of which was described in detail above with respect to . The mass storage device and the RAM may also store other types of program modules and data.

It should be appreciated that the software components described herein may when loaded into the CPU and executed transform the CPU and the overall computer from a general purpose computing system into a special purpose computing system customized to facilitate the functionality presented herein. The CPU may be constructed from any number of transistors or other discrete circuit elements which may individually or collectively assume any number of states. More specifically the CPU may operate as a finite state machine in response to executable instructions contained within the software modules disclosed herein. These computer executable instructions may transform the CPU by specifying how the CPU transitions between states thereby transforming the transistors or other discrete hardware elements constituting the CPU .

Encoding the software modules presented herein may also transform the physical structure of the computer readable media presented herein. The specific transformation of physical structure may depend on various factors in different implementations of this description. Examples of such factors may include but are not limited to the technology used to implement the computer readable media whether the computer readable media is characterized as primary or secondary storage and the like. For example if the computer readable media is implemented as semiconductor based memory the software disclosed herein may be encoded on the computer readable media by transforming the physical state of the semiconductor memory. For example the software may transform the state of transistors capacitors or other discrete circuit elements constituting the semiconductor memory. The software may also transform the physical state of such components in order to store data thereupon.

As another example the computer readable media disclosed herein may be implemented using magnetic or optical technology. In such implementations the software presented herein may transform the physical state of magnetic or optical media when the software is encoded therein. These transformations may include altering the magnetic characteristics of particular locations within given magnetic media. These transformations may also include altering the physical features or characteristics of particular locations within given optical media to change the optical characteristics of those locations. Other transformations of physical media are possible without departing from the scope and spirit of the present description with the foregoing examples provided only to facilitate this discussion.

In light of the above it should be appreciated that many types of physical transformations take place in the computer in order to store and execute the software components presented herein. It also should be appreciated that the computer may comprise other types of computing devices including hand held computers embedded computer systems personal digital assistants and other types of computing devices known to those skilled in the art. It is also contemplated that the computer may not include all of the components shown in may include other components that are not explicitly shown in or may utilize an architecture completely different than that shown in .

Based on the foregoing it should be appreciated that technologies for providing a security boundary are provided herein. Although the subject matter presented herein has been described in language specific to computer structural features methodological and transformative acts specific computing machinery and computer readable media it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features acts or media described herein. Rather the specific features acts and mediums are disclosed as example forms of implementing the claims.

The subject matter described above is provided by way of illustration only and should not be construed as limiting. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described and without departing from the true spirit and scope of the present invention which is defined by the claims set forth below.

