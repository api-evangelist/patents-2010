---

title: Methods and structure for tuning storage system performance based on detected patterns of block level usage
abstract: Methods and structure within a storage system for tuning performance of the storage system based on monitored block level access within the storage system. Block level access, either in cache memory or on the storage devices of the storage system, is monitored to detect patterns of access and/or data that correspond to an identified host system program. Based on the identified host system program, a profile of desired storage device configuration information is selected by the storage system. The profile comprises information identifying optimal configuration of a logical volume used by the corresponding host system program. Reconfiguration options are identified from the profile information and used either to automatically reconfigure the logical volume or are presented to a user to permit the user to select desired options from the reconfiguration options.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08495324&OS=08495324&RS=08495324
owner: LSI Corporation
number: 08495324
owner_city: San Jose
owner_country: US
publication_date: 20101116
---
The invention relates generally to storage systems and more specifically relates to methods and structures operable within a storage system to detect patterns of block level usage to enable tuning of the operation of the storage system for identified applications and systems.

Patterns of use of computer storage systems often vary widely depending on the particular system and or application program that is accessing the storage system. For example different file systems often corresponding with different operating systems may organize file and directory structures on volumes of the storage system in very different ways. Or for example different database management systems may organize data and meta data e.g. indexing information differently with respect to one another and all such database systems may organize data and meta data differently than operating system and file system programs. Still further virtualized systems e.g. hypervisor programs that virtualize all hardware in a computing system may organize user data and meta data describing volumes in different ways than the underlying systems and applications that may be running under control of the virtualization programs.

Various system programs and application programs present very different needs to storage systems thus making it difficult to achieve optimal performance and reliability for data storage systems. A very skilled system administrator may be aware of these different needs and may organize and configure each logical volume on a storage system in hopes of achieving desired performance and or reliability goals. Such customized configuration for each of potentially many logical volumes residing on each of potentially many storage systems presents a significant challenge for even the most skilled system administrators. Further in some cases the system administrator may not even be aware of precisely what system programs and or application programs are accessing particular logical volumes. Rather the system administrator may simply be requested by users to create logical volumes having some predetermined storage capacity and may never even be informed about the potential usage of the requested volumes.

Even a skilled system administrator may lack detailed knowledge of storage systems regarding the various options for the underlying logical volume organization and configuration. Further even a skilled system administrator may lack detailed knowledge of the needs for particular system and or application programs for storage volume organization configuration to achieve optimal performance and or reliability. In view of the difficulties presented to a system administrator hoping to optimize performance of a variety of logical volumes and corresponding programs it is common that no attempt is even made to provide such customized configuration to achieve optimal performance and or reliability.

Thus it is an ongoing challenge to improve performance and or reliability of logical volumes in storage systems based on patterns of usage by a variety of system and application programs.

The present invention solves the above and other problems thereby advancing the state of the useful arts by providing methods and structure for substantially automated tuning of performance of the storage system based on monitored block level access within the storage system. Block level access either in cache memory or on the storage devices of the storage system is monitored to detect patterns of access and or stored data values that correspond to an identified host system program. Based on the identified host system program a profile of desired storage device configuration information is selected by the storage system. The profile comprises information identifying desired optimal configuration of a logical volume used by the corresponding host system program. Reconfiguration options are identified from the profile information and used either to automatically reconfigure the logical volume or are presented to a user to permit the user to select desired options from the reconfiguration options.

In one aspect hereof a method is provided in a storage system for adjusting the storage system operation. The method comprises monitoring block level access to a logical volume stored in the storage system responsive to processing of I O requests received from one or more attached host systems. The method then identifies a storage profile within the storage system based on the monitored block level access and reconfigures the storage system based on information in the identified storage profile to improve performance of the storage system.

Another aspect hereof provides method operable in a storage system the storage system comprising a plurality of logical volumes the method for adjusting the storage system operation to improve performance of one or more of the logical volumes. The method comprises for each logical volume of the plurality of logical volumes monitoring block level access to the logical volume responsive to processing of I O requests received from one or more attached host systems. The method then identifies a program operable on an attached host system the identified program associated with the logical volume based on the monitored block level access. The method then identifies one or more reconfiguration options for the logical volume based on the monitored block level access. The method then reconfigures the logical volume in accordance with one or more of the identified reconfiguration options to improve performance of the logical volume for I O requests from the identified program.

Still another aspect hereof provides a storage system comprising a logical volume adapted to store blocks of data. The logical volume is configured from portions of one or more of the plurality of storage devices. The system further comprises an I O processor coupled with the plurality of storage devices. The I O processor is adapted to receive an I O request directed to the logical volume from an attached host system and further adapted to process the I O request by issuing block access operations to the logical volume. The system also comprises a block I O monitor coupled with the I O processor and coupled with the plurality of storage devices. The monitor is adapted to detect block access operations issued by the I O processor to access blocks of data on the plurality of storage devices. The system still further comprises a detection engine coupled with the block I O monitor and adapted to detect a pattern of block access operations that identify a host system program that issued the I O requests corresponding with the detected pattern. The system also comprises a configuration engine coupled with the detection engine. The configuration engine is adapted to determine possible reconfiguration options to improve performance of the storage system in processing I O requests to the logical volume from the identified host system program. The configuration engine is further adapted to reconfigure the logical volume in accordance with the one or more reconfiguration options.

In processing an I O request I O processor performs block level operations to access data on an identified logical volume . through .coupled with I O processor i.e. block level read and write operations . The block level access operations typically identify a starting logical block address on an identified logical volume and an extent or size of the block level operations to be performed as well as associated data where the block level operations comprises a write operation.

Storage system also comprises cache memory coupled with I O processor . As is well known in the art I O processor utilizes cache memory to improve performance of its I O request processing. Blocks of data written to an identified logical volume by I O processor may also be stored in cache memory such that subsequent read I O requests may be more rapidly performed by I O processor through block level access to cache memory rather than slower access to the storage devices of the identified logical volume. Cache memory may comprise any suitable memory components including for example high speed static or dynamic RAM components.

Logical volumes . through .each comprise portions of one or more storage devices of storage system . The storage devices not shown that comprise a logical volume . through .may be any suitable device for persistent storage of data including for example magnetic and optical disk drives semiconductor storage devices e.g. RAM disks or flash drives etc. I O processor generally performs mapping of logical addresses of an I O request associated with an identified logical volume to corresponding physical addresses on the one or more physical storage devices that comprise the identified logical volume.

In accordance with features and aspects hereof storage system further comprises a number of components adapted to monitor the block level access by I O processor to detect patterns in the monitored block level access associated with a host program and to reconfigure or recommend reconfiguration of an identified logical volume based on desirable or optimal parameters specified for the identified associated host system program. In particular system comprises block I O monitor adapted to detect block level access operations issued by I O processor to access blocks of data associated with the logical volumes . through .. In one exemplary embodiment block I O monitor may further comprise write cache monitor specifically adapted to monitor block level access by I O processor in cache memory . Block I O monitor may further comprise block device scanner adapted to scan blocks on logical volumes . through .accessed by I O processor .

System further comprises detection engine coupled with block I O monitor and adapted to detect patterns in the block level access information provided by block I O monitor . In particular detection engine detects patterns in the location logical block addresses and size of block accesses as well as particular data patterns in the data associated with particular block accesses. Detection engine utilizes a variety of heuristic rules to identify a particular host system program e.g. operating systems and or application program that matches detected patterns of block access. In one exemplary embodiment detection engine may be coupled with heuristics database used to store various patterns defining heuristic rules applied by detection engine to identify a host system program based on the pattern of block accesses.

System may further comprise configuration engine coupled with detection engine to receive identification of the host system program detected by operation of detection engine . Responsive to receipt of the information identifying the host system program configuration engine determines one or more possible reconfiguration options to improve performance of the storage system in processing I O requests directed to a logical volume from the identified host system program. In some exemplary embodiments configuration engine may automatically reconfigure aspects of one or more logical volumes . through .in accordance with one or more of the identified reconfiguration options. In other exemplary embodiments configuration engine may output identified reconfiguration options to a management user and await responsive input from management user indicating a selected subset of the possible reconfiguration options. In one exemplary embodiment configuration engine may be coupled with storage profiles database used to store a plurality of storage profiles each associated with one of a plurality of host system programs. Each storage profile identifies any number of desirable or optimal configuration parameters associated with a logical unit to be utilized by a corresponding identified host system program.

Those of ordinary skill in the art will readily recognize numerous additional and equivalent parameters that may be specified in a storage profile for an associated host system program. In one exemplary embodiment information used to create such storage profiles may be derived from published specifications regarding a host system program. In other embodiments information used to create storage profiles may be derived from empirical data gathered by management user or otherwise automatically gathered by operation of storage system .

Storage profiles also referred to herein as templates may define any number of parameters relating to preferred desired or optimal configuration and operation of a logical volume associated with a corresponding host system program. In one exemplary embodiment the parameters in a storage profile may be encoded as eXtensible Markup Language XML tags each defining a corresponding parameter and potentially grouped by common types or other logical groupings of parameters. By way of example VMWare s vSphere environment is widely used and typical in the sense that it exhibits storage usage characteristics that can be exploited to enhance performance and simplify the end user experience. These storage usage characteristics form the basis of the information kept in the vSphere application template. An exemplary VMWare vSphere storage profile encoded in XML format may be as follows 

In one exemplary embodiment storage system further comprises LUN logical volume usage database coupled between detection engine and configuration engine . LUN usage database may be used to organize structure the block access to reveal pattern information and associated information identifying a host system program that matches certain patterns of block access.

Functions provided by block I O monitor detection engine and configuration engine may be implemented as programmed features operable within the same general or special purpose processor described above with respect to I O processor . In other embodiments a separate general or special purpose processor not shown may be provided within storage system along with corresponding programmed instructions to perform the functions of block I O monitor detection engine and configuration engine . In still other exemplary embodiments the functions of block I O monitor detection engine and configuration engine may be implemented as custom designed circuitry within storage system designed to operate in cooperation with I O processor to monitor block level access to heuristically detect patterns in the block level access that match an identified host system program and to reconfigure a logical volume associated with the identified host system program to improve performance of storage system .

Those of ordinary skill in the art will readily recognize numerous additional and equivalent elements in a fully functional storage system . Such additional and equivalent elements are omitted herein for simplicity and brevity of this discussion.

Though the method of is expressed in terms of monitoring and reconfiguring a single logical volume those of ordinary skill in the art will readily recognize that multiple such methods may be simultaneously concurrently operable within a storage system to monitor and potentially reconfigure all logical volumes under control of the storage system.

Step scans the data stored on the storage devices that comprise the logical volume. Processing of step may be implemented with carrying levels or depth of scanning such as shallow medium and deep . When set at the shallow scanning level step can quickly complete its scanning tasks by scanning well known LBA regions associated with various host system programs. This shallow level scanning operation may include the beginning and end of a logical volume for partition table discovery and or the beginning and end of partition boundaries for filesystem and logical volume metadata discovery. Operating system boot devices can also be discovered by scanning the boot record of a logical volume. At the medium scanning level metadata belonging to host system programs using the logical volume can be further scanned and analyzed. The medium level scanning by step may also discover less common host system programs. Deep level scanning by step provides the opportunity to perform data mining on a volume.

At step all such monitored scanned block access information may be aggregated for further processing to identify patterns in the monitored block access indicating a particular host system program utilizing the logical volume. As noted above the aggregated block access information may be stored in a buffer or database to permit subsequent analysis of the block access patterns over a period of time.

Responsive to matching a pattern of block level accesses and or data values according to a heuristic rule step identifies the host system program associated with the heuristic rule that matched the pattern of block level accesses and or data values. When a logical volume is detected as being associated with a particular identified host system program that mapping information may be stored e.g. in the LUN usage database of for later use in analyzing performance and configuration of a logical volume thus avoiding repeated detection and matching of patterns . In some embodiments the processing of steps and may be merged with other scanning activities such as drive media error detection or parity error detection.

Step then selects a storage profile corresponding with the identified host system program. As noted above the storage profile provides parameters for desired or optimal configuration operation of a logical unit utilized by the identified host system program.

Those of ordinary skill in the art will readily recognize numerous additional and equivalent steps in the method described by . Such additional and equivalent steps are omitted here herein for simplicity and brevity of this discussion.

While the invention has been illustrated and described in the drawings and foregoing description such illustration and description is to be considered as exemplary and not restrictive in character. One embodiment of the invention and minor variants thereof have been shown and described. In particular features shown and described as exemplary software or firmware embodiments may be equivalently implemented as customized logic circuits and vice versa. Protection is desired for all changes and modifications that come within the spirit of the invention. Those skilled in the art will appreciate variations of the above described embodiments that fall within the scope of the invention. As a result the invention is not limited to the specific examples and illustrations discussed above but only by the following claims and their equivalents.

