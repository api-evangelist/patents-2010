---

title: System and method for automatically optimizing capacity between server clusters
abstract: A resource management system for a virtual machine computing environment includes a software component that optimizes capacity between server clusters or groups by monitoring the capacity of server clusters or groups and automatically adding and removing host systems to and from server clusters or groups. The software component may be implemented at a server cluster management level to monitor and execute host system moves between server clusters and/or at a higher level in the resource management hierarchy. At the higher level, the software component is configured to monitor and execute host system moves between sets of server clusters being managed by different server cluster management agents.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08874744&OS=08874744&RS=08874744
owner: VMware, Inc.
number: 08874744
owner_city: Palo Alto
owner_country: US
publication_date: 20100203
---
Computer virtualization is a technique that involves encapsulating a physical computing machine platform into a virtual machine that is executed under the control of virtualization software on a hardware computing platform. Virtualization software enables multiple virtual machines to be run on a single hardware computing platform and can manage the allocation of computing resources to each virtual machine.

A set of hardware computing platforms can be organized as a server cluster to provide computing resources for example for a data center. In addition supporting technology can move running virtual machines between servers also referred to herein as host systems in the cluster an example of this supporting technology is sold as VMware VMotion by VMware Inc. of Palo Alto Calif. In addition server cluster virtualization management software that incorporates cluster resource management technology can determine initial and ongoing locations of virtual machines on hardware computing platforms in the server cluster and can manage the allocation of cluster computing resources. An example of this server cluster virtualization management software is sold as VMware Distributed Resource Scheduler by VMware Inc. of Palo Alto Calif. hereinafter referred to as DRS . In addition the server cluster virtualization management software can request that a server in the cluster power itself down and can use mechanisms available in the marketplace to remotely power on a server that is powered down. An example of this power management software is sold as the VMware Distributed Power Management feature within DRS by VMware Inc. of Palo Alto Calif. hereinafter referred to as DPM .

Current implementations of DRS limit the cluster size to a certain number N of servers. As a consequence resource management has to be carried out in groups of N servers or less. For data centers that operate considerably more than N servers and data centers that operate multiple groups of servers where each group is dedicated to a different customer or has a particular server configuration DRS cannot ensure optimized resource management. Although resource usage within any single group of servers may be balanced using DRS adding capacity to an overloaded group of servers cannot be easily done.

One or more embodiments of the present invention provide a system and a method for automatically optimizing capacity between server clusters or groups that support a virtual machine computing environment. Such a system and method enable the balancing of resources across server clusters or groups and provides inter cluster or inter group resource sharing without compromising the isolation aspect of a server cluster or a server group.

According to this system and method a software component monitors the capacity of server clusters or groups and automatically adds and removes host systems to and from server clusters or groups. The software component may be implemented at a server cluster management level to monitor and execute host system moves between server clusters and or at a higher level in the resource management hierarchy. At the higher level the software component is configured to monitor and execute host system moves between sets of server clusters being managed by different server cluster management agents.

A method of allocating physical computing resources in a virtual machine computing environment according to an embodiment of the present invention includes the steps of computing a usage metric of a multiple groups of server computers determining a load imbalance between the groups evacuating a host system in an under utilized group and allocating the evacuated host system to an over utilized group. The host system move from the under utilized group to the over utilized group is carried out when the overall utilization is high enough. In situations where overall utilization is low the host system move is not carried out although load imbalance has been determined.

A method of allocating physical computing resources in a virtual machine computing environment according to another embodiment of the present invention includes the steps of computing a usage metric of a group of server computers determining a load imbalance for the group and allocating an additional server computer to the group if the group is overloaded and deallocating one of the server computers of the group if the group is underloaded.

A hierarchical resource management system according to an embodiment of the present invention includes a plurality of first level resource managers each configured to monitor a load imbalance across two or more clusters of server computers and a second level resource manager configured to monitor a load imbalance between groups of server computers where each group is monitored by one of the first level resource managers.

Other embodiments of the present invention include without limitation a computer readable storage medium that includes instructions that enable a processing unit to implement one or more aspects of the disclosed methods as well as a system configured to implement one or more aspects of the disclosed methods.

The components of cluster manager are detailed in . Cluster manager includes the same components except they are used to manage server clusters and server repository . The components of cluster manager include a server cluster virtualization management software which comprises a user interface DRS module and a DPM module . An inter cluster capacity manager is implemented as an extension to server cluster virtualization management software and communicates with server cluster virtualization management software using Application Programming Interface API calls. Inter cluster capacity manager has three modules. The first module is a capacity monitor which collects at periodic intervals resource usage statistics. In one embodiment resource usage statistics that are collected include the total idle capacity of each cluster managed by cluster manager . In another embodiment resource usage statistics that are collected include entitlement data for each running virtual machine VM . Entitlement data for a VM at a point in time signifies the amount of resources the VM is entitled to at that point in time. The resource usage statistics may be supplied by a software component inside server cluster virtualization management software that is separate from DRS module or they may be supplied by DRS module . The second module is a policy engine which stores information policy on how resources are to be allocated to each server cluster. The third module is a capacity balancer which receives inputs from the capacity monitor and the policy engine and makes decisions on host system moves accordingly. In one embodiment the capacity balancer makes host system move decisions less frequently than entitlement data collection because it may be desirable to analyze capacity trends prior to making a move decision. In either case the frequency of data collection and the frequency of host system move decisions are configurable parameters. In another embodiment as will be further described below the capacity balancer makes host system move decisions by comparing a statistical measure of variance between normalized entitlements of server clusters.

In the embodiment described above inter cluster capacity manager is shown as an extension of server cluster virtualization management software . In alternative embodiments inter cluster capacity manager may be a stand alone software component that periodically polls each of the clusters for resource usage statistics or a software component inside server cluster virtualization management software that periodically polls each of the clusters for resource usage statistics.

A server repository or is a logical group of host systems that are made available for any of the server clusters to utilize. Some are powered off to preserve power consumption. Others are left powered on and booted for quick deployment.

A server repository is a logical group of host systems that are made available by virtual cloud resource manager for either cluster manager to allocate. Some are powered off to preserve power consumption. Others are left powered on and booted for quick deployment.

Then at a later time when cluster manager determines through inter cluster capacity manager that server cluster is overutilized it allocates a host system from server repository e.g. host system to server cluster . also shows host systems within server repository . Cluster manager may also allocate host system or to server cluster as needed. In addition if server cluster becomes overutilized cluster manager may also allocate host system or to server cluster as needed. For quicker deployment any of host systems in server repository may be kept in a powered on state. If power conservation is of higher priority one or more of host systems in server repository may be powered off. In certain instances e.g. in situations where no cluster seems to be close to needing additional resources host systems in server repository may be powered off in a more aggressive manner. There also may be situations where a set number of host systems in server repository the set number being configurable are kept powered on and the rest are powered off. In all of these different scenarios the powered off host systems need to be remotely powered on and booted for deployment.

The equations for computing the normalized entitlement for a group of server clusters managed by a cluster manager also referred to as Virtual Center or VC for short and at the cloud level are provided below. In the equations below Eis the entitlement value for a VM Eentitlement for a cluster C as calculated by DRS entitlement for a cluster C as adjusted for statistical smoothing Eis the total entitlement for a group of clusters managed by one cluster manager VC as calculated at the VC layer and its statistically adjusted value. NEis the normalized entitlement for a server cluster C. NEis the normalized entitlement for a group of server clusters managed by a cluster manager VC.

In the equations above the entitlement value represents either processing power or memory capacity and the normalized entitlement is calculated separately for each resource.

In step the normalized entitlements of two server clusters or server groups are compared to determine imbalance. In one example the normalized entitlement of server cluster is compared with the normalized entitlement of server cluster to determine if there is any imbalance between these two server clusters. In another example the normalized entitlement of a first server group containing host systems in server clusters is compared with the normalized entitlement of a second server group containing host systems in server clusters . If there is no imbalance i.e. the difference between the two normalized entitlements is less than a predetermined threshold the flow returns to step . If there is an imbalance i.e. the difference between the two normalized entitlements is greater than a predetermined threshold step is executed. In step a host system from the server cluster or server group with the lower normalized entitlement is evacuated and allocated to the server cluster or server group with the higher normalized entitlement. The movement of the host system can be carried out by making API calls into server cluster virtualization management software to move the host system out of one server cluster and into another server cluster.

When determining imbalance processing power imbalance may be evaluated or memory capacity imbalance may be evaluated or an overall imbalance may be evaluated. The overall imbalance is a weighted combination of the imbalance on each resource. The weight value for each is configurable and defaults to 0.25 for processing power and 0.75 for memory capacity.

In one embodiment the decision block in step is carried out with less frequency than steps and . Consequently the decision on whether there is an imbalance is made by comparing the running averages of the normalized entitlements.

In one embodiment the decision block in step is carried out by comparing a statistical measure of variance between the normalized entitlements of server clusters or server groups. In one example the variance e.g. standard deviation of normalized entitlements of server cluster and server cluster is calculated. If the variance e.g. standard deviation is above a user specified threshold a host system is evacuated from the server cluster with the lower normalized entitlement and allocated to the server repository or a server cluster with the higher normalized entitlement. After such a move the variance e.g. standard deviation is computed again and the process is repeated until no further moves are possible or the variance is below the threshold. In a similar manner variance can be used to determine the imbalance between server groups.

A systematic search can be carried out to find a spare host system for one or more overloaded clusters. First the server repository is examined and the spare host system is allocated from the server repository if one is available. If not the underloaded clusters and clusters in equilibrium are sorted in ascending order of normalized entitlement and beginning from the top look for host systems that have been powered down and if none select a host system from the most underloaded cluster.

In some embodiments of the present invention the host system move from the under utilized group to the over utilized group may not be always carried out although the load imbalance is sufficiently high. In situations where overall utilization is low e.g. the maximum normalized entitlement of the server clusters or groups is less than a predefined threshold the host system move is not carried out although load imbalance is sufficiently high.

On the other hand if the normalized entitlement is greater than the upper threshold value steps and are carried out or if the normalized entitlement is less than the lower threshold value steps and are carried out. In step a host system is allocated to the server cluster or server group from the server repository. Then in step the host system is configured according to a default host profile of the server cluster to which it was added and DRS performs balancing of the workloads within that server cluster. In step a host system is selected from the server cluster or server group according to heuristics previously discussed and evacuated. Then in step the evacuated host system is logically placed in the server repository. The movement of the host system can be carried out by making API calls into server cluster virtualization management software to move the host system out of a server cluster or server repository and into a server cluster or server repository.

In one embodiment the decision blocks in steps and are carried out with less frequency than steps and . Consequently the decision on whether there is an imbalance is made by comparing the running averages of the normalized entitlements against the thresholds. In alternative embodiments if a sudden rise in normalized entitlement is detected the decision block in step may be executed earlier than its scheduled time so that the sudden rise in processing and or memory demands can be met in a timely manner.

In addition various policies for resource management may be specified. For example a default low limit and a default high limit may be defined for all server clusters. For some server clusters these limits may be overridden with custom values. When the percentage of spare capacity is below the low limit then a host system is added to the server cluster. When the percentage of spare capacity is above the high limit then a host system is removed from the server cluster. If the low limit is 0 and the high limit is 100 for a server cluster that server cluster will not be monitored.

The various embodiments described herein may employ various computer implemented operations involving data stored in computer systems. For example these operations may require physical manipulation of physical quantities usually though not necessarily these quantities may take the form of electrical or magnetic signals where they or representations of them are capable of being stored transferred combined compared or otherwise manipulated. Further such manipulations are often referred to in terms such as producing identifying determining or comparing. Any operations described herein that form part of one or more embodiments of the invention may be useful machine operations. In addition one or more embodiments of the invention also relate to a device or an apparatus for performing these operations. The apparatus may be specially constructed for specific required purposes or it may be a general purpose computer selectively activated or configured by a computer program stored in the computer. In particular various general purpose machines may be used with computer programs written in accordance with the teachings herein or it may be more convenient to construct a more specialized apparatus to perform the required operations.

The various embodiments described herein may be practiced with other computer system configurations including hand held devices microprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like.

One or more embodiments of the present invention may be implemented as one or more computer programs or as one or more computer program modules embodied in one or more computer readable media. The term computer readable medium refers to any data storage device that can store data which can thereafter be input to a computer system. Computer readable media may be based on any existing or subsequently developed technology for embodying computer programs in a manner that enables them to be read by a computer. Examples of a computer readable medium include a hard drive network attached storage NAS read only memory random access memory e.g. a flash memory device a CD Compact Discs such as CD ROM a CD R or a CD RW a DVD Digital Versatile Disc a magnetic tape and other optical and non optical data storage devices. The computer readable medium can also be distributed over a network coupled computer system so that the computer readable code is stored and executed in a distributed fashion.

Although one or more embodiments of the present invention have been described in some detail for clarity of understanding it will be apparent that certain changes and modifications may be made within the scope of the claims. Accordingly the described embodiments are to be considered as illustrative and not restrictive and the scope of the claims is not to be limited to details given herein but may be modified within the scope and equivalents of the claims. In the claims elements and or steps do not imply any particular order of operation unless explicitly stated in the claims.

In addition while described virtualization methods have generally assumed that virtual machines present interfaces consistent with a particular hardware system persons of ordinary skill in the art will recognize that the methods described may be used in conjunction with virtualizations that do not correspond directly to any particular hardware system. Virtualization systems in accordance with the various embodiments implemented as hosted embodiments non hosted embodiments or as embodiments that tend to blur distinctions between the two are all envisioned. Furthermore various virtualization operations may be wholly or partially implemented in hardware. For example a hardware implementation may employ a look up table for modification of storage access requests to secure non disk data.

Many variations modifications additions and improvements are possible regardless the degree of virtualization. The virtualization software can therefore include components of a host console or guest operating system that performs virtualization functions. Plural instances may be provided for components operations or structures described herein as a single instance. Finally boundaries between various components operations and data stores are somewhat arbitrary and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of the invention s . In general structures and functionality presented as separate components in exemplary configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components. These and other variations modifications additions and improvements may fall within the scope of the appended claims s .

