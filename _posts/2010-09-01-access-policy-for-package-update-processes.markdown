---

title: Access policy for package update processes
abstract: Methods and systems for defining and generating fine-grained access policy for authorizing software package updates are provided. The methods of defining and enforcing a package update policy include providing a package update policy file that identifies a set of software packages and users authorized to perform package updates in association with the set of software packages, and storing the policy file on computers in a managed network. When a computer in the managed network receives a request from an unprivileged user to update a software package on the computer, the computer retrieves the package update policy file and determines an authorization of the user to update the software package based on an identity of the user, an identity of the software package, and the policy file. The computer then processes the request based on the determined authorization of the user.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08856953&OS=08856953&RS=08856953
owner: Red Hat, Inc.
number: 08856953
owner_city: Raleigh
owner_country: US
publication_date: 20100901
---
The present teachings relate generally to systems and methods for defining access policy and more particularly to platforms and techniques for defining and enforcing a per package or other fine grained access policy for software package update processes.

In modern operating systems ordinary unprivileged users are often distinguished from a more powerful privileged user sometimes referred to as a super user or root in UNIX or UNIX like operating systems. While a privileged user typically has complete access to all aspects of an operating system OS and hardware supporting the OS unprivileged users typically have only limited access to services provided by the OS and have little direct control over the supporting hardware. Thus an unprivileged user requires additional privileges and rights to perform certain privileged operations such as installing software packages and updating installed software packages.

Various OS specific access control mechanisms for granting unprivileged users the permission to perform privileged operations have been devised. For example systems based on RED HAT LINUX distributions usually grant a user access to devices if and only if the user is logged in at a local console. In contrast systems based on DEBIAN LINUX distributions often rely on group membership e.g. users in the optdrv group can access optical drives users in the rmvdev group can mount removable media etc. Furthermore commands such as sudo allow users to perform certain privileged operations with root privileges but without requiring a root password. Finally software tools such as udev and GNU Network Object Model Environment GNOME System Tools utilize inter process communication mechanisms to provide a very narrow and well defined subset of privileged operations to unprivileged desktop applications.

However such OS specific access control mechanisms can impede upstream projects e.g. GNOME and KDE from implementing features that require administrative privileges because most downstream consumers e.g. OSes implement different and often incompatible access control mechanisms. In addition existing access control mechanisms are coarsely grained. For example permission to perform privileged operations may be granted based on whether or not a user is at a console or is a member of a group. To compound the problem granting permission based solely on group membership can be problematic because in certain OSes if a user was once a member of a group that user can become a member of the group again without proper authorization. Furthermore improper usage of existing access control mechanisms such as sudo can cause full fledged applications to run as a super user which can result in millions of lines of code running as root. Not only does such misuse cause those applications to appear out of place because settings in those applications would read per user settings from root s home directory it also violates the principle of least privilege and circumvents critical security measures.

Therefore it may be desirable to provide a mechanism for defining and enforcing a fine grained access policy for performing privileged operations such as installing and updating software packages for instance on a per package or other basis.

According to the present teachings in one or more aspects methods and systems that define and enforce a fine grained access policy for performing software package related privileged operations are provided. In a general implementation of the present teachings an authentication agent is provided in an application space of an operating system OS . The authentication agent can be operatively coupled to an access control mechanism provided in a kernel space of the OS to allow unprivileged users to perform package related privileged operations in accordance with fine grained access policy and restrictions. In various embodiments an unprivileged user can be a non root user. Package related privileged operations can include for example updating one or more packages for instance updating an existing installed package downloading a package installing a new package reinstalling an installed package removing an installed package downgrading an installed package obsoleting an installed package and or other operations performed on or related to software packages and their related operating system and or other resources.

The policy state of machines in a managed network with respect to package updates can be set by an administrator or left at default values allowing unprivileged users on a client machine to access and download updates from a trusted repository e.g. a FEDORA repository and to perform package update on the client machine. To manipulate one or more users privilege to download and or update one or more packages on a client machine on a live basis the administrator can create and or edit a local access policy file or database on the client machine. The administrator can provide the local access policy file to permit selected users and or users in selected groups or roles to perform package related privileged operations on a package or a selected set of packages on the client machine. The local access policy file can be configured to apply to individually named users groups of users user roles packages applications and or other comparatively fine grained entities and or attributes and or to any combination thereof. The local access policy file can be configured to apply to individually named packages groups of packages classes or types of packages or any combination thereof.

Reference will now be made in detail to exemplary embodiments of the present teachings which are illustrated in the accompanying drawings. Wherever possible the same reference numbers will be used throughout the drawings to refer to the same or like parts. In the following description reference is made to the accompanying drawings that form a part thereof and in which is shown by way of illustration specific exemplary embodiments in which may be practiced. These embodiments are described in sufficient detail to enable those skilled in the art to practice these embodiments and it is to be understood that other embodiments may be utilized and that changes may be made without departing from the scope of the present teachings. The following description is therefore merely exemplary.

As shown system can include at least one processor a keyboard a pointing device e.g. a mouse a touchpad and the like a display main memory an input output controller and a storage device . System can also be provided with additional input output devices such as a printer not shown . The various components of system communicate through a system bus or similar architecture. In addition system can include an operating system OS that resides in memory during operation. As to keyboard pointing device and display these components can be implemented using components that are well known to those skilled in the art. One skilled in the art will also recognize that other components and peripherals can be included in system .

One skilled in the art will recognize that system can include multiple processors . For example system can include multiple copies of the same processor. Alternatively system can include a heterogeneous mix of various types of processors. For example system can use one processor as a primary processor and other processors as co processors. For another example system can include one or more multi core processors and one or more single core processors. Thus system can include any number of execution cores across a set of processors e.g. processor .

Main memory serves as a primary storage area of system and holds data that is actively used by applications running on processor . One skilled in the art will recognize that applications are software programs that each contains a set of computer instructions for instructing system to perform a set of specific tasks and that the term applications may be used interchangeably with application software application programs and or programs in accordance with embodiments of the present teachings. Memory can be implemented as a random access memory or other form of memory which are well known to those skilled in the art.

OS is an integrated collection of routines and instructions that are responsible for the direct control and management of hardware in system and system operations. Additionally OS provides a foundation upon which to run application software. OS may be predominantly software but may also contain partial or complete hardware implementations and firmware. Well known examples of operating systems that are consistent with the principles of the present teachings include LINUX MAC OS by APPLE COMPUTER SOLARIS by SUN MICROSYSTEMS WINDOWS e.g. WINDOWS CE WINDOWS NT WINDOWS 2000 WINDOWS XP and WINDOWS VISTA by MICROSOFT CORPORATION OPEN VMS and AIX by IBM.

Reference will now be made to to illustrate an exemplary embodiment of a mechanism for defining and enforcing a fine grained access policy for performing software package related privileged operations in system in accordance with various embodiments of the present teachings. OS can include a kernel not shown which serves as the core of OS and can provide low level services such as thread management address space management direct memory access inter process communication basic runtime libraries defining and enforcing policies access control and the like. The kernel can directly access or reside in a kernel space of memory as shown in reserved for the use of the kernel device drivers supported by the kernel and any kernel extensions. In various embodiments the kernel can initiate an authentication agent and or a mechanism using one of the low level services e.g. an access control service or basic runtime libraries e.g. a runtime library for controlling access to privileged operations either during startup e.g. boot up of system or on demand such as when an unprivileged process in an application space attempts to perform a privileged operation. A process can be considered unprivileged if its owner is an unprivileged user. For illustration purposes and without limiting various embodiments of the present teachings authentication agent is shown as dedicated process running separately from other processes in application space . Other configurations are possible without departing from the scope of the present teachings. For example authentication agent can run as a part e.g. a thread of a process e.g. a process for package managment or be co instantiated with one or more other processes e.g. a privileged helper process by an application or the kernel.

In order to run applications in application space OS can create one or more processes e.g. processes and in application space to execute the instructions of the applications. Processes and can be instances of one or more applications such as a networking applet a file manager a power manager a package manager or any other applications known to one skilled in the art. In various embodiments application space is operatively coupled to OS and external to kernel space and can have a lower level of privilege to access resources of system than the kernel of OS . Application space can be a user space provided by OS and or a runtime environment such as for example JAVA RUNTIME ENVIRONMENT by SUN MICROSYSTEMS and COMMON LANGUAGE RUNTIME by MICROSOFT CORPORATION.

Application space can provide a set of software instructions that supports the execution of applications and can include one or more application programming interfaces not shown or APIs. The APIs can be configured to provide a set of routines that the processes invoke to obtain authorization to perform package related privileged operations such as a package update process which can include updating downloading installing reinstalling removing downgrading and or obsoleting a package. For example the processes running in application space can invoke an authorization API which in turn rely on authentication agent to determine and or obtain authorization to perform one or more software package related privileged operations.

The processes represent running instances of applications and includes variables and other state information. In general the processes running in application space are independent of each other have separate address spaces and can communicate with each other using known inter process communication IPC mechanisms e.g. pipes sockets streams Desktop Bus and the like or other communication services provided by OS . Each of the processes may include one or more execution contexts e.g. threads and . An execution context relates to the operations for performing one or more tasks of its associated process. Execution contexts are also known to those skilled in the art as threads of execution fibers and the like. Typically multiple threads of a single process share the same address space and other resources of system . During runtime the processes can each create one or more execution contexts to perform one or more tasks.

As shown in authentication agent runs in application space and can communicate with mechanism and or an authorization database via a system message bus not shown . The system message bus can utilize IPC mechanisms or other communication mechanisms known to one skilled in the art. For illustration purposes and without limiting various embodiments of the present teachings authorization database is shown as separate from mechanism . Other configurations are possible without departing from the scope of the present teachings. For example authorization database can be a part of mechanism .

Authentication agent can receive a request from one of the processes in application space to perform one or more package related privileged operations. After receiving the request authentication agent can identify the requesting process the owner of the requesting process the requested operation and or the object of the requested operation. Authentication agent can determine if the requesting process and or the owner thereof is authorized to perform the privileged operation in accordance with a fine grained access policy. If authentication agent determines that the requesting process and or the owner thereof is authorized to perform the privileged operation authentication agent can write an entry for the requesting process in authorization database . Based on the entry in authorization database mechanism can authorize and or perform the privileged operation requested by the requesting process.

In various embodiments the fine grained access policy can define authorization levels required for one or more subjects to perform one or more actions on one or more objects. A subject can include a user a group of users a user role and the like. The user can be for example the owner of a requesting process. An action can include a privileged operation such as a software package related privileged operation. An object can include a software package a type of software package a group identifier for a group of software packages and the like. By using exemplary methods as illustrated in and described in greater detail below authentication agent and mechanism can grant or deny requests by users to perform package related privileged operations in accordance with a fine grained access policy for package updates. The package update policy can define authorization levels required for one or more users to perform package related privileged operations such as a package update process which includes for example updating downloading installing reinstalling removing downgrading and or obsoleting a package. The package update policy can identify one or more users using a user identifier UID a group identifier GID a user role or any combination thereof. The package update policy can identify software packages using a package identifier a type of package a group identifier for a group of packages or any combination thereof. Authorization levels can include for example authorized authorized if authenticated as self authorized if authenticated as an administrator and unauthorized.

When a user makes a request via one of the processes in application space to perform a package related privileged operation authentication agent can grant or deny the request based on a subject an action and or an object of the request. Authentication agent can identify the requesting process and information associated with the requesting process such as a process identifier PID a UID of the owner the requesting process a GID of the owner a session identifier and whether or not the session is active and the like. Prior to granting the request authentication agent can require the owner of the requesting process to authenticate as the user identified by the UID or to escalate the user s access privilege by logging in as root or an administrator in accordance with the fine grained access policy.

In stage the administrator can store and or edit the package update policy file on the computers in the managed network. Once the package update policy file is loaded on a computer e.g. system an access control mechanism e.g. authentication agent mechanism and authorization database can authorize selected users and or users in selected groups or roles to perform package related privileged operations on a package or a selected set of packages.

In stage authentication agent can receive a request from an unprivileged user e.g. via a process owned by the unprivileged user to perform a package related privileged operation. Authentication agent can identify the requesting process and extract information associated with the requesting process such as a UID of the owner of the requesting process as well as the package or set of packages associated with the requested operation. Next in stage authentication agent can determine based on the fine grained access policy whether or not the unprivileged user is authorized to perform the privileged operation on the package or set of packages. Prior to authorizing the request authentication agent can require the owner of the requesting process to authenticate as the user identified by the UID or to escalate the user s access privilege by logging in as root or an administrator in accordance with the fine grained access policy.

In stage if authentication agent determines that the unprivileged user is authorized to perform the requested operation then authentication agent can either directly or by using a privileged helper program write an entry for the unprivileged user in authorization database that authorizes the unprivileged user to perform the requested operation. Based on the entry in authorization database mechanism can authorize and or perform the requested operation for the unprivileged user. Alternatively if authentication agent determines that the unprivileged user is not authorized to perform the requested operation then authentication agent can deny the request and can also take other actions such as logging the request and or notifying the administrator. After stage processing can repeat return to a prior processing stage jump to a further processing stage or end.

Certain embodiments may be performed as a computer program. The computer program may exist in a variety of forms both active and inactive. For example the computer program can exist as software program s comprised of program instructions in source code object code executable code or other formats firmware program s or hardware description language HDL files. Any of the above can be embodied on a computer readable medium which include storage devices and signals in compressed or uncompressed form. Exemplary computer readable storage devices include conventional computer system RAM random access memory ROM read only memory EPROM erasable programmable ROM EEPROM electrically erasable programmable ROM and magnetic or optical disks or tapes. Exemplary computer readable signals whether modulated using a carrier or not are signals that a computer system hosting or running the present teachings can be configured to access including signals downloaded through the Internet or other networks. Concrete examples of the foregoing include distribution of executable software program s of the computer program on a CD ROM or via Internet download. In a sense the Internet itself as an abstract entity is a computer readable medium. The same is true of computer networks in general.

While various embodiments of the present teachings have been described with reference to the exemplary embodiments thereof those skilled in the art will be able to make various modifications to the described embodiments without departing from the true spirit and scope. The terms and descriptions used herein are set forth by way of illustration only and are not meant as limitations. For example although the exemplary method has been described by examples the steps of the method may be performed in a different order than illustrated or simultaneously. Moreover while the exemplary systems and methods provide a mechanism for defining and enforcing a fine grained access policy for performing software package related privileged operations the mechanism can be configured to define and enforce a fine grained access policy for all or specific privileged operations according to various embodiments of the present teachings. Those skilled in the art will recognize that these and other variations are possible within the spirit and scope as defined in the following claims and their equivalents.

