---

title: Customized ID generation
abstract: Technologies are described herein for customized identifier (“ID”) generation by an ID service. One or more calling components (“components”) remote from the ID service generate requests for IDs. The requests can include one or more rules defining how the IDs are to be generated, type data identifying a type of IDs to be generated, encryption data specifying whether, and if so, how the IDs are to be encrypted, and number data defining how many IDs are to be generated at a particular time. The ID service receives the request, and in response to the request, generates the number of IDs specified, in accordance with the rules, type data, and encryption data provided in the request. An ID database can store one or more of the IDs and/or rules associated with the components, such that each component can be relieved from maintaining its own database for ID operations.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08856540&OS=08856540&RS=08856540
owner: Amazon Technologies, Inc.
number: 08856540
owner_city: Reno
owner_country: US
publication_date: 20101229
---
Identifiers IDs may be used in various types of systems networks and or other devices systems to identify entities and or resources used consumed and or provided by the systems. The use of IDs to identify entities can be a valuable tool for simplifying data operations. For example systems can assign IDs of a consistent format size and or type to various unrelated entities that otherwise may be described in varied formats lengths and or types of labels and or may have identical or overlapping labels or other identifying information. Thus systems can use IDs to simplify identification of resources and or other entities.

Typically systems that make use of IDs generate IDs using logic and store the IDs and or the logic for generating the IDs in a dedicated database. As IDs are needed the system generates a new ID typically incrementing a previously created or used ID. The IDs may be incremented by one or more digits or other alphanumeric characters or otherwise may be generated based upon the logic associated with the system. According to various implementations the logic associated with the systems may define how the IDs are created for example by basing a new ID upon an incremental change to a previously created or used ID as well as other aspects of the IDs such as length of the IDs format of the IDs a type for the IDs and or other information defining the IDs.

In order for IDs to be useful to the system the IDs typically are required to be unique with respect to one another and or with respect to IDs generated by other systems with which the system interacts. Enforcing uniqueness across varied platforms and or systems can be challenging as varied platforms and or systems may coincidentally select similar or identical ID generation schemes that allow or even unintentionally encourage ID collisions. As systems merge communicate interact and or rely upon one another the need for unique IDs can become more pronounced.

Furthermore as many traditional networking systems are migrated to virtually hosted networking systems and or networks various systems and or their respective databases for ID generation may be hosted by the same or closely related virtual resources. Thus one or more virtual machines may be tasked with hosting two or more systems and their respective two or more ID databases to support various operations including but not limited to ID generation and management. This redundancy can increase costs associated with virtual hosting services.

The following detailed description is directed to technologies for customized identifier ID generation. According to various implementations an ID includes but is not limited to strings integers and or other data that can be used to identify one or more entities. For example the IDs can include alphanumeric strings globally unique identifiers GUIDs a combination of characters encrypted and or non encrypted strings integers and the like and or other data. According to various embodiments the entities identified by the IDs include but are not limited to merchant accounts merchants marketplaces websites services virtual resources products items customers orders domain names and the like.

Utilizing the technologies described herein an ID service is configured to receive requests for generating customized IDs from a number of calling components components . According to implementations the components are components of websites client devices such as client computers smartphones server computers and the like and or other components of other systems in communication with the ID service. The requests received by the ID service include one or more rules for generating the IDs. The one or more rules specify a format and or method used by the ID service to generate the IDs for the components as well as additional or alternative data.

According to various implementations the requests further can include type data specifying a type of ID to be generated by the ID service. In some embodiments the type data specifies a type corresponding to a globally unique identifier GUID for the IDs. Thus the ID service can generate a GUID for each requested ID and provide the GUID to the component in response to the request. Other types of IDs can be specified by the type data. The requests also can include encryption data specifying if IDs generated by the ID service are to be encrypted by the ID service before providing the IDs to the components. The encryption data can include data indicating a value such as a 0 1 true false yes no and or another value wherein the encryption data functions as an encryption flag that indicates whether or not a generated ID is to be encrypted. Additionally or alternatively the encryption data can specify an encryption method or algorithm used to encrypt the ID.

The requests further can include number data specifying a number of IDs to be generated by the ID service in response to the request. For example the number data can specify a number of IDs to be generated such that the ID service responds to the request with a batch of IDs. In some embodiments the batch of IDs can be provided to the component at one time thereby reducing communication traffic between the component and the ID service for provisioning of the number of IDs. Additionally or alternatively the number data can specify a number of IDs generated simultaneously wherein the number of IDs are backward and or forward compatible with one another. For example the ID service may generate two or more IDs for a particular request wherein the two or more IDs correspond to two or more versions of a single ID that may be associated with a particular entity. In one embodiment the ID service generates a 32 bit version of an ID and a 64 bit version of the ID provides one or more of the versions of the ID to a component and stores one or more versions of the ID for future reference and or use. It should be understood that this embodiment is exemplary and should not be construed as being limiting in any way.

The IDs generated by the ID service can be provided one or more at a time to a component associated with the request. According to various embodiments the IDs are provided to the component that generated the request but this is not necessarily the case. The IDs can be provided one at a time or in batches of IDs. The component can cache or store the one or more IDs and or assign or associate the IDs with one or more entities as the IDs are needed. Alternatively the component can generate a request for an ID each time an ID is needed for example each time a new product is added to a marketplace each time an order is created and the like.

According to some implementations the ID service is configured to generate IDs for any number of components. The components can submit rules to the ID service and the ID service can store the rules at a data storage device for use in generating IDs for the component. In some embodiments the components authenticate with the ID service before during or after submitting a request to the ID service for generating an ID. Thus the ID service can ensure that users of the ID service are authorized to generate IDs using the ID service and or the ID service can retrieve rules associated with the component requesting generation of an ID if the rules are not submitted with the request. These and other aspects of the concepts and technologies disclosed herein will be described in more detail below with reference to the figures.

It should be appreciated that the subject matter presented herein may be implemented as a computer process a computer controlled apparatus a computing system or an article of manufacture such as a computer readable storage medium. While the subject matter described herein is presented in the general context of program modules that execute on one or more computing devices those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types.

Those skilled in the art will also appreciate that the subject matter described herein may be practiced on or in conjunction with other computer system configurations beyond those described herein including multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers handheld computers personal digital assistants e readers cellular telephone devices special purposed hardware devices network appliances and the like. The embodiments described herein may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

In the following detailed description references are made to the accompanying drawings that form a part hereof and that show by way of illustration specific embodiments or examples. The drawings herein are not necessarily drawn to scale. Like numerals represent like elements throughout the several figures.

More particularly the functionality associated with the ID service is provided in some embodiments by computing resources of the network . The computing resources of the network include but are not limited to data processing resources data storage resources communication resources and the like. Each type of computing resource may be general purpose or may be available in a number of specific configurations. For example data processing resources may be available as virtual machine instances instances configured to provide World Wide Web Web servers application servers media servers database servers and the like. Data storage resources may include file storage devices block storage devices and the like. Each type or configuration of computing resource may be available in different sizes such as large resources consisting of many processors large amounts of memory and or large storage capacity and small resources consisting of fewer processors smaller amounts of memory and or smaller storage capacity. These and other aspects of the network and or the ID service can be tailored by network operators service operators and or other entities based upon various needs and or preferences.

In other embodiments the functionality of the ID service is provided by a computer server or other computing device configured to execute an application program or module for providing the functionality described herein for customized ID generation. In the illustrated embodiment shown in the functionality of the ID service is provided by a server computer configured to execute an ID generator module or application ID generator . It should be understood that this embodiment is exemplary and should not be construed as being limiting in any way. Because the functionality of the ID service can be provided by various combinations of hardware software and or other real or virtual resources it should be understood that the functionality described herein with regard to the ID service and or the ID generator can be provided by one or more hardware and or software components.

The ID service is configured to receive requests for IDs from one or more calling components components A N hereinafter referred to generically as components in communication with the ID service . According to various embodiments the components include but are not limited to systems devices network nodes software modules applications services websites and or components of these and other entities. In one embodiment the components correspond to website components that use IDs to identify one or more entities. It should be understood that this embodiment is exemplary and should not be construed as being limiting in any way.

As will be described in more detail herein the components are configured to generate the requests for IDs and to submit the requests to the ID service for generation of customized IDs in accordance with one or more rules and or other parameters submitted with the requests by the components . According to various implementations the ID service can store generated IDs information associating IDs with one another and or components and or other data at a data storage device accessible by the ID service . According to embodiments the functionality of the data storage device accessibly by the ID service is provided by one or more databases servers memory devices mass storage devices and or other stand alone networked and or cloud based memory storage devices. In the illustrated embodiment the data storage device is illustrated as an ID datastore . It should be understood that this embodiment is exemplary and should not be construed as being limiting in any way.

In some embodiments the ID service stores one or more generated IDs in the ID datastore in addition to or instead of providing the IDs to the components . In one embodiment two or more versions of an ID are generated by the ID service and the two or more versions of the ID are stored at the ID datastore . One or more versions of the ID also can be provided to the component for use. The component can retrieve additional versions of the ID based upon a lookup in the ID datastore referencing the version of the ID used by the component .

The ID datastore also can be used to store rules for generating the IDs. The rules can be associated with a component and can be retrieved and used to generate IDs when requested by the component instead of or in addition to receiving rules from the component with the request for the IDs. According to various implementations the components authenticate with the ID service before during or after submitting requests for IDs to the ID service . Via authentication the ID service is configured to establish authority for generating the IDs and or to identify the component requesting IDs such that rules associated with the component can be retrieved. Thus the components can submit rules for generating IDs with each request for an ID or the rules associated with the components can be stored and associated with the components such that the rules do not need to be submitted by the components each time an ID is requested.

Turning now to additional aspects of a system for generating customized IDs are described in detail. As shown in a component transmits a request for a customized ID to the ID service . The component is configured to generate and format the request . According to implementations the request is formatted by the component in a format language or protocol interpretable by the ID service . In some embodiments the request is generated as an extensible markup language XML file that includes various parameters detailing the type number and or other aspects of the customized ID s requested by the component . It should be understood that this embodiment is exemplary and should not be construed as being limiting in any way. While only one component is illustrated in it should be clear from the description herein that the ID service is configured to receive requests from a number of components and that the ID service can generate IDs customized to each of the components in accordance with the rules and or other parameters generated by the components and submitted to the ID service with the requests and or stored by the ID service .

According to one embodiment the parameters and or other data included in the request include but are not limited to one or more rules defining how the ID service is to generate IDs type data indicating a type of ID to be generated by the ID service encryption data specifying if IDs generated in response to the request are to be encrypted and number data specifying a number of IDs to be generated by the ID service in response to the request . According to various embodiments additional or alternative information may be included in the request .

The rules define how the IDs are generated for the component calling the ID service . For example the rules can specify a scheme used to generate IDs such as a rule for incrementing a last generated ID or other base data a rule for basing ID generation upon session or time information and the like and or other rules. The rules also can specify for example a number of characters whether and if so how to increment the IDs for subsequent ID requests and or other aspects of how the IDs are to be formatted and or generated.

The rules also can specify a degree to which the IDs generated by the ID service are to be unique. For example in some embodiments the rules specify that the IDs generated by the ID service are to be unique globally such that no other entity can generate an ID identical to an ID generated in accordance with the rules . In other embodiments the rules specify a scope for which the IDs generated by the ID service are to be unique. In various implementations the scope specified by the rules includes a geographic region a state a country a domain name a generic top level domain name gTLD such as .com .co.il .biz .co.uk and the like a website a service a network a virtual resource a virtual network and the like. The rules can be tailored by the component and or any authorized entity associated with the component .

In some embodiments the ID service is configured to store the rules in the ID datastore and to associate the rules with the component submitting the rules . Thus the ID datastore can be used to store rules associated with a number of components and the request can include a reference identifying the rules instead of or in addition to including the rules themselves. As such the component or an authorized entity associated therewith can tailor the rules and request IDs without submitting the rules with each request.

The type data includes data specifying a type for the ID requested by the component . The type data can be used to specify a type for the IDs such as for example a type corresponding to a 32 bit format a type corresponding to a 64 bit format a type corresponding to a 128 bit format and or other types. In some embodiments the type data specifies a GUID type. Thus the request may be interpreted by the ID service to generate a GUID for each requested ID. In some embodiments the type data can be embodied by the rules . It therefore should be understood that in some embodiments the rules and or the type data can include an indication that the ID service is to generate GUIDs for each requested ID. In these embodiments one or more of the rules and or the type data can be omitted from the request . It should be understood that this embodiment is exemplary and should not be construed as being limiting in any way.

The encryption data includes data specifying if IDs generated by the ID service are to be encrypted and or data defining how the IDs are to be encrypted. In some embodiments IDs generated by the ID service are encrypted before providing the generated IDs to the component . The encryption data includes in some implementations a value such as 0 1 true false yes no or another value. As such the encryption data can be interpreted by the ID service as an encryption flag that indicates whether or not the IDs are to be encrypted. Additionally or alternatively the encryption data can include or indicate an encryption algorithm or method used to encrypt the IDs. Thus the encryption data can include a hash key or algorithm or other data used by the ID service to encrypt the IDs in addition to or instead of a flag indicating whether or not IDs are to be encrypted.

The number data includes data specifying a number of IDs to be generated by the ID service in response to the request . In some embodiments the number data is used to specify a size of a batch of IDs generated by the ID service . Thus the component can request for example a batch of IDs of almost any size. The batch of IDs can be provided to the component and the component can store or cache the IDs at a data storage device. As the IDs are needed by the component the component can retrieve the IDs from the stored or cached batch of IDs and can assign the IDs to entities instead of generating individual requests for each ID needed by the component .

In other embodiments the number data is used to specify a number of related IDs to be generated by the ID service . Thus the component can request a number of related IDs such that backward and forward compatible IDs are available for a particular entity for which the IDs are requested. For example a component may administer IDs in a 32 bit format at a particular time but may have plans or may anticipate migrating to a 64 bit format in the future. Thus the number data can be interpreted by the ID service to generate two or more related IDs wherein a first version of the ID is generated in a first format and a second version of the ID is generated in a second format. In one embodiment the first format corresponds to a 32 bit format and the second format corresponds to a 64 bit format. It should be understood that this embodiment is exemplary and should not be construed as being limiting in any way. Furthermore it should be understood that more than two versions of the IDs can be generated by the ID service in more than two formats.

In response to the request the ID service can generate the one or more IDs . In some embodiments one or more of the IDs are stored at the ID datastore instead of or in addition to providing the IDs to the component . In some embodiments for example the ID service generates two or more versions of an ID provides one or more versions of the ID to the component and stores one or more versions of the ID in the ID datastore with data associating the various versions of the ID with one another. The component can later request another version of the ID by submitting data identifying the version of the ID received by and or used by the component . The ID service can perform a lookup in the ID datastore for another version of the ID and provide the other version of the ID to the component . It should be understood that this embodiment is exemplary and should not be construed as being limiting in any way.

Turning now to aspects of a method for generating requests for customized IDs will be described in detail. It should be understood that the operations of the methods disclosed herein are not necessarily presented in any particular order and that performance of some or all of the operations in an alternative order s is possible and is contemplated. The operations have been presented in the demonstrated order for ease of description and illustration. Operations may be added omitted and or performed simultaneously without departing from the scope of the appended claims.

It also should be understood that the illustrated methods can be ended at any time and need not be performed in their respective entireties. Some or all operations of the methods disclosed herein and or substantially equivalent operations can be performed by execution of computer readable instructions included on a computer storage media as defined herein. The term computer readable instructions and variants thereof as used in the description and claims is used expansively herein to include routines applications application modules program modules programs components data structures algorithms and the like. Computer readable instructions can be implemented on various system configurations including single processor or multiprocessor systems minicomputers mainframe computers personal computers hand held computing devices microprocessor based programmable consumer electronics combinations thereof and the like.

Thus it should be appreciated that the logical operations described herein are implemented 1 as a sequence of computer implemented acts or program modules running on a computing system and or 2 as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance and other requirements of the computing system. Accordingly the logical operations described herein are referred to variously as states operations structural devices acts or modules. These operations structural devices acts and modules may be implemented in software in firmware in special purpose digital logic and any combination thereof.

For purposes of illustrating and describing the concepts of the present disclosure the method is described as being performed by the component . It should be understood that this embodiment is exemplary and should not be viewed as being limiting in any way. The method begins at operation wherein the component generates the rules to be submitted to the ID service for use in generating IDs requested by the component . The rules can include data defining how the IDs are to be generated and or other information such as a base ID upon which the generated IDs are based data identifying the last ID generated by the ID service and or other information that may be used by the ID service to generate the one or more IDs as explained above.

From operation the method proceeds to operation wherein the component formats a request for submission to the ID service for use in generating the one or more IDs . As explained above with reference to the request can include the rules as well as other data defining how the IDs are to be generated by the ID service . According to various embodiments the request can include the rules the type data the encryption data the number data and or other data. Operation includes in some implementations formatting a file that includes these and or other information for generating the IDs for submission to the ID service as the request . In one embodiment the request is formatted as an XML file that is interpretable by the ID service to determine the rules as well as a type information encryption information a number of IDs to be generated and or other information associated with the request .

From operation the method proceeds to operation wherein the component sends the request to the ID service . The request can be transmitted to the ID service via various networks and or devices. In some embodiments for example the ID service receives the request via an application programming interface API exposed by the ID service to the component . Thus the component can call the ID service via the API and transmit the request embodying the rules the type data the encryption data the number data and or other information to the ID service . It should be understood that this embodiment is exemplary and should not be construed as being limiting in any way.

From operation the method proceeds to operation wherein the component receives one or more IDs from the ID service . A method for generating the IDs is illustrated and described in detail below with reference to . As explained above with reference to the component receives the number of IDs of the type specified by the number data and the type data respectively of the request wherein the IDs are generated in accordance with the rules of the request . Additionally the IDs received by the component can be encrypted if the encryption data of the request so specifies. These and other aspects of generating the IDs will be described with reference to below.

From operation the method proceeds to operation wherein the component associates one or more of the IDs with one or more entities. According to various embodiments the entities with which the IDs are associated include but are not limited to merchants or merchant accounts websites services virtual resources products customers orders items networks and or other entities. As explained above the IDs can be received as a batch of IDs and can be stored or cached by the component . Thus although not illustrated in it should be understood that the method can include storing or caching one or more of the IDs and retrieving one or more of the IDs as the IDs are needed for associating with one or more entities. From operation the method proceeds to operation . The method ends at operation .

Turning now to aspects of a method for generating one or more customized IDs is illustrated in detail. For purposes of illustrating and describing the concepts of the present disclosure the method is described as being performed by the ID service . It should be understood that this embodiment is exemplary and should not be viewed as being limiting in any way. The method begins at operation wherein the ID service receives a request to generate one or more IDs . As explained above with reference to the request can include one or more rules type data specifying a type of ID to be generated encryption data specifying whether the ID is to be encrypted and or how the ID is to be encrypted number data specifying a number of IDs to be generated and or other information. Although not illustrated in it should be understood that the ID service can extract or parse these and other information from the request to determine rules used to generate the IDs a type and number of IDs to be generated whether and or how the IDs are to be encrypted as well as other aspects of how the IDs are to be generated.

From operation the method proceeds to operation wherein the ID service determines if the type of ID specified in the request corresponds to a type associated with a GUID. If the ID service determines that the type specified in the request corresponds to a type associated with a GUID the method proceeds to operation wherein the ID service generates a GUID as the ID . If the ID service determines in operation that the type specified by the request does not correspond to a type associated with a GUID the method proceeds to operation wherein the ID service generates the ID based upon the one or more rules included in the request .

From operations or the method proceeds to operation wherein the ID service determines if the ID generated by the ID service is unique. As explained above in some embodiments the rules received by the ID service can specify a degree to which the IDs are to be unique. In other embodiments the ID service enforces various levels of uniqueness based upon preferences specifications and or global rules imposed by the ID service and or other entities. Thus the operation includes determining if the ID generated by the ID service satisfies a uniqueness requirement regardless of whether that uniqueness requirement is specified on a global national statewide website wide domain name wide service wide gTLD wide and or other level.

If the ID service determines in operation that the ID generated by the ID service is not unique the method returns to operation and the operations can be repeated until the ID generated in operations satisfies the specified uniqueness requirement. It should be noted that GUIDs should by design be unique though it is technically possible although extremely improbable that two identical generated GUIDs can be created. If the ID service determines in operation that the ID is unique the method proceeds to operation .

Although not illustrated in in some embodiments the ID service is configured to take additional or alternative actions if the ID is determined not to be unique in operation . For example the ID service can generate a notification or error message to inform the component associated with the request that the rules have resulted in generation of an ID determined not to be unique. The ID service also can suggest methods for modifying the rules and or otherwise modifying the request to encourage generation of unique IDs . The ID service also can identify other components for which generated IDs can collide with the IDs generated in operations or and inform the component . These and other actions are possible and are contemplated.

In some embodiments the processes described above with regard to operation can be omitted and or replaced with other functionality for enforcing uniqueness on created IDs . For example the ID service can enforce uniqueness on all IDs generated by the ID service in addition to or instead of checking created IDs to determine if the created IDs are unique. According to various implementations the ID service enforces uniqueness by ensuring that two identical IDs are never generated. For example the ID service can lock a generated ID for use after creation thereby ensuring that identical IDs cannot be created or stored in the ID datastore . In other embodiments the rules can be tailored to provide IDs generated by incrementing alphanumeric characters such as numbers such that two identical IDs are never created by the ID service . In yet other embodiments the ID service can rely upon various formula blocks for generating various components of the IDs separately to reduce or eliminate collisions between created IDs . In these and other embodiments the IDs generated by the ID service can be unique when created and therefore there may be no need to check the IDs to ensure that the IDs are unique. Thus the functionality described above with respect to operation for enforcing uniqueness on the created IDs can be omitted or replaced with functionality for enforcing uniqueness requirements on the IDs during generation of the IDs in addition to or instead of the functionality described above with reference to operation .

In operation the ID service determines if the ID is to be encrypted and or how the ID is to be encrypted. As explained herein the ID service can examine the encryption data of the request and determine if the ID is to be encrypted and or a type of encryption to be applied to the ID . If the ID service determines that the ID is to be encrypted the method proceeds to operation wherein the ID service encrypts the ID in accordance with an encryption scheme. The encryption scheme can be specified by the encryption data of the request and or by preferences settings and or other information associated with the ID service . In some embodiments the ID service encrypts the ID by applying a hash algorithm to the ID . In one implementation the hash algorithm applied by the ID service is received as a part of the request more particularly as the encryption data . In another implementation the ID service stores one or more hash algorithms and the ID service associates the one or more hash algorithms with one or more of the components and or uses one or more of the hash algorithms based upon preferences or settings associated with the ID service . If the ID service determines in operation that the ID is not to be encrypted or from operation the method proceeds to operation .

In operation the ID service determines if the ID is to be stored at a data storage device such as the ID datastore . As explained above the ID service can store one or more copies or versions of the IDs at the ID datastore and or another data storage device for various purposes. If the ID service determines in operation that the ID is to be stored the method proceeds to operation wherein the ID service stores the ID or a copy of the ID . The ID can be stored with association data if desired to allow lookups into the data stored at the ID datastore or another data storage device to identify the ID . If the ID service determines in operation that the ID is not to be stored or from operation the method proceeds to operation .

In operation the ID service determines if another ID is to be generated by the ID service . As explained herein the ID service can determine that a number of related IDs are to be generated and or that a batch of IDs are to be generated. In some embodiments the ID service makes the determination illustrated at operation by examining the number data of the request though this is not necessarily the case. If the ID service determines in operation that another ID is to be generated the method returns to operation . The operations can be iterated any number of times by the ID service until the desired number of IDs are generated. If in any iteration of operation the ID service determines that another ID is not to be generated the method proceeds to operation wherein the ID service provides the IDs to the component .

From operation the method returns to operation wherein the ID service waits for another request from the same or another of the components . As explained above it should be understood that the method can end at any time. Also although not illustrated in it should be understood that the ID service and or another entity can authenticate the component associated with the request received in operation if desired. As mentioned above the authentication of the component can occur before during or after the request is received by the ID service . Successful authentication by the component can be required before the ID service executes the method and or can be used to retrieve the rules associated with the component . Thus it should be understood that an authentication operation can be provided before operation after operation and or in conjunction with operation .

The computer includes a baseboard or motherboard which is a printed circuit board to which a multitude of components or devices may be connected by way of a system bus or other electrical communication paths. In one illustrative embodiment one or more central processing units CPUs operate in conjunction with a chipset . The CPUs are standard programmable processors that perform arithmetic and logical operations necessary for the operation of the computer .

The CPUs perform the necessary operations by transitioning from one discrete physical state to the next through the manipulation of switching elements that differentiate between and change these states. Switching elements may generally include electronic circuits that maintain one of two binary states such as flip flops and electronic circuits that provide an output state based on the logical combination of the states of one or more other switching elements such as logic gates. These basic switching elements may be combined to create more complex logic circuits including registers adders subtractors arithmetic logic units floating point units and the like.

The chipset provides an interface between the CPUs and the remainder of the components and devices on the baseboard. The chipset may provide an interface to a random access memory RAM used as the main memory in the computer . The chipset may further provide an interface to a computer readable storage medium such as a read only memory ROM or non volatile RAM NVRAM for storing basic routines that that help to startup the computer and to transfer information between the various components and devices. The ROM or NVRAM may also store other software components necessary for the operation of the computer in accordance with the embodiments described herein.

The computer may operate in a networked environment using logical connections to remote computing devices and computer systems through the network . The chipset may include functionality for providing network connectivity through a network interface controller NIC such as a gigabit Ethernet adapter. The NIC is capable of connecting the computer to other computing devices over the network . It should be appreciated that multiple NICs may be present in the computer connecting the computer to other types of networks and remote computer systems.

The computer may be connected to a mass storage device that provides non volatile storage for the computer. The mass storage device may store system programs application programs other program modules and data which have been described in greater detail herein. The mass storage device may be connected to the computer through a storage controller connected to the chipset . The mass storage device may consist of one or more physical storage units. The storage controller may interface with the physical storage units through a serial attached SCSI SAS interface a serial advanced technology attachment SATA interface a fiber channel FC interface or other type of interface for physically connecting and transferring data between computers and physical storage units.

The computer may store data on the mass storage device by transforming the physical state of the physical storage units to reflect the information being stored. The specific transformation of physical state may depend on various factors in different implementations of this description. Examples of such factors may include but are not limited to the technology used to implement the physical storage units whether the mass storage device is characterized as primary or secondary storage and the like.

For example the computer may store information to the mass storage device by issuing instructions through the storage controller to alter the magnetic characteristics of a particular location within a magnetic disk drive unit the reflective or refractive characteristics of a particular location in an optical storage unit or the electrical characteristics of a particular capacitor transistor or other discrete component in a solid state storage unit. Other transformations of physical media are possible without departing from the scope and spirit of the present description with the foregoing examples provided only to facilitate this description. The computer may further read information from the mass storage device by detecting the physical states or characteristics of one or more particular locations within the physical storage units.

In addition to the mass storage device described above the computer may have access to other computer readable storage medium to store and retrieve information such as program modules data structures or other data. It should be appreciated by those skilled in the art that computer readable storage media can be any available media that provides for the storage of non transitory data and that may be accessed by the computer .

By way of example and not limitation computer readable storage media may include volatile and non volatile removable and non removable media implemented in any method or technology. Computer readable storage media includes but is not limited to RAM ROM erasable programmable ROM EPROM electrically erasable programmable ROM EEPROM flash memory or other solid state memory technology compact disc ROM CD ROM digital versatile disk DVD high definition DVD HD DVD BLU RAY or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that can be used to store the desired information in a non transitory fashion.

The mass storage device may store an operating system utilized to control the operation of the computer . According to one embodiment the operating system includes a member of the LINUX family of operating systems. According to another embodiment the operating system includes a member of the WINDOWS SERVER family of operating systems from MICROSOFT Corporation in Redmond Wash. According to further embodiments the operating system may include a member of the UNIX or SOLARIS families of operating systems. It should be appreciated that other operating systems may also be utilized. The mass storage device may store other system or application programs and data utilized by the computer such as the ID generator .

In one embodiment the mass storage device or other computer readable storage media is encoded with computer executable instructions that when loaded into the computer transform the computer from a general purpose computing system into a special purpose computer capable of implementing the embodiments described herein. These computer executable instructions transform the computer by specifying how the CPUs transition between states as described above. According to one embodiment the computer has access to computer readable storage media storing computer executable instructions which when executed by the computer perform aspects of one or more of the methods and described with reference to respectively.

The computer may also include an input output controller for receiving and processing input from a number of input devices such as a keyboard a mouse a touchpad a touch screen an electronic stylus or other type of input device. Similarly the input output controller may provide output to a display such as a computer monitor a flat panel display a digital projector a printer a plotter or other type of output device. It will be appreciated that the computer may not include all of the components shown in may include other components that are not explicitly shown in or may utilize an architecture completely different than that shown in .

Based on the foregoing it should be appreciated that technologies for generating customized IDs have been presented herein. Although the subject matter presented herein has been described in language specific to computer structural features methodological acts and computer readable media it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features acts or media described herein. Rather the specific features acts and mediums are disclosed as example forms of implementing the claims.

The subject matter described above is provided by way of illustration only and should not be construed as limiting. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described and without departing from the true spirit and scope of the present invention which is set forth in the following claims.

