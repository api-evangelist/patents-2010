---

title: Multi-language software development
abstract: A method in a software development environment for developing product runtime code having at least two code components written in different runtime languages, the method comprising: providing a programming interface for development of the code components in a single development language: translating developed code components in the development language back to the respective runtime language for execution.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08365154&OS=08365154&RS=08365154
owner: International Business Machines Corporation
number: 08365154
owner_city: Armonk
owner_country: US
publication_date: 20100528
---
The present invention relates generally to the field of computers and computer software and more particularly to a computer system and method for developing software.

Systems management software programs provide enterprise wide administration of computer systems. Systems management typically involves at least some of the following processes storage management security management hardware and software inventories server availability and monitoring software installation network capacity and monitoring security and anti virus etc. For example the IBM Tivoli Management Framework is a known systems management platform whose architecture enables the platform to manage large numbers of remote devices and processes within a distributed computer system IBM and Tivoli are trademarks of International Business Machines Corporation .

A number of Tivoli products which operate within the Tivoli Management Framework employ more than one technology and programming language. Examples of such products are Tivoli Netcool Performance Manager Wireless TNPMW which provides performance metrics to manage all aspects of a service provider s wireless network infrastructure Tivoli Netcool Service Quality Manager TNSQM which enables service providers to monitor and report on the service quality delivered to their end customers and IBM Tivoli Network Manager ITNM formerly Netcool Precision which monitors the network to locate and report on problems as they develop thereby enabling network staff administrators to resolve problems before they escalate to impact availability and performance of business services. These products may also have their own bespoke programming languages as well.

Modification of these products for example to customise or extend the products where the products include scripts formulae plug ins etc. requires development in different programming languages and possibly in their bespoke programming languages. For example to integrate Netcool Provisio to new technologies it is necessary to employ the bespoke SNMP formula language Simple Network Management Protocol is used in network management systems to monitor attached devices for conditions that may require administrator attention the Complex Matrix Engine CME formula language or the ECMAScript JavaScript JScript . Each of these languages has its own syntax.

Currently there are a number of Integrated Development Environments IDEs such as Eclipse www.eclipse.org and Software Development Kits SDKs such as the Java Development Kit from IBM which integrate access to software code for rapid application development and testing of customisations and extensions to existing products Eclipse is a trademark of The Eclipse Foundation and Java is a trademark of Sun Corporation .

There are a number of problems associated with customisation and or extension of software products operating within a computer system. For some products it is sometimes necessary to carry out several change tasks and frequently such tasks are related to other tasks in different software products in different programming languages. Also the bespoke programming languages themselves may undergo changes and revisions over time. A software engineer or programmer must know multiple programming languages and the learning curve for a new language is very steep. Also IDEs and SDKs are tightly coupled to particular programming languages and environments. This means that in order to edit two software components in different languages a software engineer is required to use multiple IDEs or SDKs

All of these problems increase the development complexity and the testing time significantly and have repercussions for all stages of software development including design and testing.

Accordingly the present invention provides a method in a software development environment for developing product runtime code having at least two code components written in different runtime languages the method comprising providing a programming interface for development of the code components in a single development language translating developed code components in the development language back to the respective runtime language for execution.

An advantage of this method is that a single IDE SDK need be used. Software engineer programmer productivity can be increased as time to learn different languages is reduced. This can speed time to market for new product features. Use of a single language for development which is then translated back into the programming language for deployment facilitates greater software code interchange between products. There is no need for cross language interoperability layers.

Preferably the programming interface provides the facilities of the runtime languages in the development language.

Preferably the programming interface is a Java native interface JNI and the development language is Java. Java is generally considered to be an easy language to use and has reduced debugging time.

The present invention accordingly provides in a second aspect an apparatus for developing product runtime code having at least two code components composed in different runtime languages the apparatus comprising means for providing a programming interface for development of the code components in a single development language and means for translating developed code components in the development language back to the respective runtime language for execution.

The present invention accordingly provides in a third aspect an apparatus comprising a central processing unit a memory subsystem and input output subsystem and a bus subsystem interconnecting the central processing unit the memory subsystem the input output subsystem and the apparatus as described above.

The present invention accordingly provides in a fourth aspect a computer program element comprising computer program code to when loaded on a computer system and executed thereon cause the computer to perform the steps of the method as described above.

The present invention may also be embodied in a distributed computer system having more than one computer system CPU and more than one storage device . Such systems can carry out concurrent processes and run multiple processes. In distributed computer systems programs may be split up into parts that can run simultaneously on multiple CPUs communicating over a network.

The programming interface provides all the functions of the runtime language for the selected code component in the software development environment and in the development language. Functions which may be provided include routines subroutines branches application programming interface functions library functions methods in an object oriented system macros procedures scripts or other software facilities. In accordance with one embodiment of the invention the programming interface is the Java Native Interlace JNI Programming interfaces such as JNI help a software engineer to modify a code component written in a runtime language to be accessible to programming languages such as Java. The programming interface e.g. JNI enables native program functions written in for example the C programming language to be exposed to and called by a different development language. The programming interface may wrap functions in the runtime language for use in the development language. It may alternatively or additionally include a mapping between functions in the runtime language and the development language. It may also include a translator for identifying equivalent facilities in the runtime and development languages.

At step development edits are made to the code components in the development language. A software development environment such an IDE or SDK made be utilised to develop update and or change code components.

At step an edited changed code component undergoes a translation in order to render it operable in the runtime language. The code component is then executed in the runtime language at step . Edited changed code components having the same runtime and development languages have no need for the translation step and they can be executed in the runtime language at step .

Insofar as embodiments of the invention described are implementable at least in part using a software controlled programmable processing device such as a microprocessor digital signal processor or other processing device data processing apparatus or system it will be appreciated that a computer program for configuring a programmable device apparatus or system to implement the foregoing described methods is envisaged as an aspect of the present invention. The computer program may be embodied as source code or undergo compilation for implementation on a processing device apparatus or system or may be embodied as object code for example.

Suitably the computer program is stored on a carrier medium in machine or device readable form for example in solid state memory magnetic memory such as disk or tape optically or magneto optically readable memory such as compact disk or digital versatile disk etc. and the processing device utilises the program or a part thereof to configure it for operation. The computer program may be supplied from a remote source embodied in a communications medium such as an electronic signal radio frequency carrier wave or optical carrier wave. Such carrier media are also envisaged as aspects of the present invention.

It will be understood by those skilled in the art that although the present invention has been described in relation to the above described example embodiments the invention is not limited thereto and that there are many possible variations and modifications which fall within the scope of the invention.

The scope of the present invention includes any novel features or combination of features disclosed herein. The applicant hereby gives notice that new claims may be formulated to such features or combination of features during prosecution of this application or of any such further applications derived therefrom. In particular with reference to the appended claims features from dependent claims may be combined with those of the independent claims and features from respective independent claims may be combined in any appropriate manner and not merely in the specific combinations enumerated in the claims.

