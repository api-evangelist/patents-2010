---

title: Flexible authentication and authorization mechanism
abstract: Techniques and tools for flexible authentication and authorization of services on a push framework. For example, a push notification framework allows services (social networking web services, etc.) to use either an authenticated access mode or an unauthenticated access mode, in order to push information to client devices (e.g., mobile devices). In the authenticated mode, the push framework requires registration of the service with the push framework before allowing the service to push notifications to client devices. Different authenticated modes are provided for third-party and first-party services. In the unauthenticated mode, registration is not required, but notifications are throttled, thereby limiting risk of abuse by unauthenticated services. This allows flexibility for services that use the push framework.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08763089&OS=08763089&RS=08763089
owner: Microsoft Corporation
number: 08763089
owner_city: Redmond
owner_country: US
publication_date: 20100112
---
The described technology relates to authentication and authorization for services that deliver information to client devices using a push model.

In the mobile domain a service e.g. a social networking web service financial web service news service etc. can push notifications to a corresponding application on a client device e.g. a smart phone . Often a mobile platform will act as an intermediary between a service and a client device and will impose rules or restrictions on how the service communicates with the client device. A communication channel that allows push notifications to be sent from a service to a client device can be referred to as a push channel. A platform that enables a push channel typically requires the device and service to authenticate themselves with the platform. The complexities of device authentication can be hidden from the application by a push client stack on the device. However the service authentication needs to be handled by the service directly which results in additional cost and development effort. This makes it difficult for existing services or new services to adapt to the requirements of authentication resulting in slower adoption of the platform.

Although authentication provides some measure of security it also can be restrictive. In fact the utility of many services e.g. social networking services depends on openness and ease of communication which can be restricted by requiring authentication. In addition for authentication to be reliable a secure communication protocol is required.

Proxy services can be used to bridge the gap between platform servers that require a secure protocol for client device data transmission and services that prefer to use more open protocols such as ordinary or non secure Hypertext Transfer Protocol HTTP . In the example shown in a proxy service enables communication between platform server and service by communicating with platform server via a secure protocol HTTPS and communicating with service via ordinary HTTP.

The use of proxy services introduces several problems. One problem is increased latency the introduction of a proxy service as an intermediary can cause communication delays by introducing additional steps in the process of communication between platform servers and other services. Another problem is that a proxy service will tend to become a bottleneck as another service adds features that it wishes to expose to particular resources on the other side of the proxy service. This is because as new features are added the proxy service must adapt to allow communications that enable the new features. Use of proxy services also may expose a user to additional security risks because while the service the user wants to receive notifications from may be reliable the proxy service may not be.

Representational state transfer or REST refers to a set of web services design principles that focus on uniform resource identifiers URIs HTTP and other non proprietary formats and protocols to provide web services. RESTful services employ REST design principles and tend to have less dependence on middleware instead providing data in a more standard format that is easier for different applications to work with. Examples of RESTful web services include Twitter Facebook and gMail.

Because of the increasing popularity of REST design in web services applications that can work effectively with RESTful web services are increasingly desirable.

Whatever the benefits of previous techniques they do not have the advantages of the techniques and tools presented below.

Techniques and tools for flexible authentication and authorization on a push framework e.g. a push notification framework are described. In several described embodiments a push notification framework allows services e.g. a social networking web services financial web services news services etc. to use the push notification framework either in an authenticated access mode or an unauthenticated access mode in order to push information to client devices. In the authenticated mode the push framework requires registration of the service with the push framework before allowing the service to push notifications to client devices. In the unauthenticated mode registration is not required. This allows flexibility for services that use the push framework.

In one aspect a push notification framework provides an authenticated mode and an unauthenticated mode to a service. The authenticated mode requires registration of the service with the push notification framework. The unauthenticated mode allows unregistered use of the push notification framework. Unregistered use can be regulated by throttling notification flow e.g. limiting number of push notifications during a time period or for a particular client device or a subscription on a client device from the service. The push notification framework selects between the authenticated mode and the unauthenticated mode based on identifying information provided by the service. The identifying information provided by the service can include a service name. Based at least in part on the selected mode the push notification framework provides subscription information to the service that permits the service to send push notifications to one or more client devices over a network e.g. via a push notification framework server . The subscription information can include information e.g. an IP address that indicates endpoint e.g. and HTTP or HTTPS endpoint for communicating with the push notification framework.

The content of the subscription information can vary depending on whether unauthenticated mode or authenticated mode is selected. For example if unauthenticated mode is selected the subscription information can include a front end HTTP endpoint. For authenticated services an authenticated third party service sub mode or an authenticated internal service sub mode can be selected and the subscription information can vary depending on the selected sub mode. For example the subscription information can include a front end HTTPs endpoint if authenticated third party service sub mode is selected or a back end HTTP endpoint if authenticated internal service sub mode is selected.

In another aspect a push framework receives subscription request information from a client device the subscription request information identifying a service operable to send push notifications over a network to the client device. Based at least in part on the subscription request information the push framework selects between an unauthenticated communication mode and one or more authenticated communication modes. The push framework provides a subscription token to the client device. For example the push framework provides the subscription token to a push notification client stack on the client device which then forward the subscription token to a client application for delivery to the service. The subscription token comprises endpoint information corresponding to the selected communication mode. The endpoint information facilitates sending of push notifications from the service to the client device via the push framework. For example the endpoint information corresponding to an unauthenticated mode can be an IP address for a front end HTTP endpoint at a push framework server. The endpoint information corresponding to an authenticated mode can be an IP address for a front end HTTPS endpoint at a push framework server. For first party services the endpoint information can be a private HTTP endpoint that is not accessible by third party services.

When the selected mode is unauthenticated mode the push framework can throttle push notifications. For example the push framework can monitor volume of push notifications sent by the service determine whether the volume of push notifications sent by the service exceeds a threshold and if the threshold is exceeded prevent subsequent push notifications from being sent to the client device. The threshold can be associated with a time period. For example the threshold can be a maximum number of push notifications that can be sent by the service to the client device in a day. The push framework can prevent subsequent notifications from being sent by for example invalidating the subscription token.

In another aspect a push notification framework server receives a push notification message e.g. HTTP POST request containing a push notification and a subscription token from a service operable to send push notifications to one or more mobile client devices via the push notification framework server. Depending on whether the service is an authenticated service or an unauthenticated service and whether the service is a first party service or a third party service a communication mode is selected. The communication mode can be an unauthenticated communication mode an authenticated third party communication mode or an authenticated first party communication mode. A decision on whether to throttle push notifications from the service is based at least in part on the selected communication mode.

The foregoing and other objects features and advantages of the invention will become more apparent from the following detailed description which proceeds with reference to the accompanying figures.

Described embodiments include various techniques and tools for flexible authentication and authorization on a push framework which can be a push notification framework. A push framework is a framework which can be implemented in a computer system that regulates communications sent from services e.g. web services implemented on one or more server computers to client devices e.g. client wireless devices such as smart phones according to a push model where services send information to client devices without the client device making a specific request for the information to be sent. Services and push frameworks typically include one or more server computers that communicate with each other with client devices and or with other computer systems.

Sending information according to a push model can be described as pushing the information. One type of information that can be sent in a push model of communication is a push notification. A push framework that handles push notifications can be referred to as a push notification framework. In some embodiments a push notification framework includes a push notification framework PNF server and a push notification client stack on one or more client devices e.g. mobile devices running a Microsoft Windows Mobile operating system . The push notification framework allows a service to push notifications via the PNF server and allows client devices to receive notifications via the push notification client stack on the respective device. Described techniques and tools can be applied to push frameworks generally or push notification frameworks specifically.

A push notification refers to information that notifies a client device or a user of a client device about some condition. An example of a push notification is a message delivered to a client device to inform a user that available information on a web service e.g. a social networking web service a financial web service or a news service has been updated. Other examples of push notifications include advertisements emails or text messages and announcements about urgent software updates. Notifications may contain specific messages in themselves e.g. a note from another user on a social networking web site or they may act as notices of other information e.g. a video message voicemail message or email that is available elsewhere. It should be understood that any number of different types of notifications can be accommodated in described embodiments.

Permitting information to be pushed from services to client devices while useful can lead to vulnerabilities. For example if a service sends too many push notifications to a mobile device in a given time period the notifications may consume too many computing resources and or drain the battery of the mobile device. Such an overload could be unintentional e.g. as a result of a poorly designed application or a mismanaged service or intentional e.g. as a result of a denial of service or DoS attack on the device .

In several described embodiments a push framework allows services to use the push framework either in an authenticated access mode or an unauthenticated access mode in order to push information to client devices. In the authenticated mode the push framework requires registration of the service with the push framework before allowing the service to push notifications to client devices. Authenticated mode can be used by services that have a deeper integration with the push framework. For example authenticated mode can be used by services that have already established a trusted relationship with the push framework by exchanging identifying information over an encrypted communication channel. Registration can involve different processes and requirements but generally requires that a push framework be given confirmation of the identity of a service. In the unauthenticated mode registration is not required. This allows flexibility for services that use the push framework. Described embodiments can make the interface between a push framework and a service flexible enough to allow the service to start using the push framework without requiring the service to comply with authentication mechanisms.

Functionality for monitoring and regulating flow of pushed information is described. For example push notifications can be throttled e.g. by limiting the number of push notifications to a particular number over a particular time period sent to a particular user or device in an unauthenticated mode. Described embodiments regulate services operating in an unauthenticated mode by throttling pushed information yet also provide one or more authenticated modes such as for services that would like to push information to client devices without being throttled.

Described embodiments of push framework techniques and tools use flexible authentication and authorization.

Authentication refers to a process by which computers or other digital devices can reliably identify each other. Authentication can refer to a general process of confirming identities of devices or to specific instances. For example authentication is desired in a server client relationship between Server X and Client Y. During client authentication Server X gets confirmation that a device claiming to be Client Y is indeed Client Y. During server authentication Client Y gets confirmation that a device claiming to be Server X is indeed Server X. Such confirmation can be provided in the form of a digital certificate or in some other form. The issue of whether authentication is performed the type of authentication to be performed if any and how the authentication is to be performed can depend on any of several factors including the needs or nature of particular transactions communications and relationships between servers and devices.

There are different ways to authenticate devices some of which involve secure data transmission protocols. TLS Transport Layer Security and SSL Secure Socket Layer are examples of secure data transmission protocols based on public key cryptography. They enable server and client authentication and data encryption across networks. TLS and SSL are two of the protocols that provide secure data transmission over the World Wide Web via the Hypertext Transfer Protocol HTTP . Secure HTTP or HTTPS is one of the most important elements for performing secure transactions over networks such as the Internet.

Authorization refers to the privileges or lack of privileges that particular entities have with regard to particular resources. In general an entity that is authorized to access a particular resource is permitted to access that resource in some way. Authorization is conferred by an authority regarding the privileges and resources that are the subject of the authorization. For example a push notification framework can act as an authority regarding whether a service can send push notifications to client devices. Authorization can be conditional. For example authorization to send push notifications to a client device by a particular method can be conditional on registering a service and operating in an authenticated mode. Authorization can be revocable. For example authorization to send push notifications to a client device can be revoked if a number of push notifications exceeds a threshold during a given time period. Authorization can be limited. For example authorization to send push notifications to a client device may be limited to particular times of day. Authorization can be considered separately from or in combination with authentication.

In the example shown in service is an unauthenticated service that communicates with a push framework and service is an authenticated service that communicates with the push framework . The two services can communicate with any number of client devices e.g. mobile devices and will typically communicate with different subsets of the client devices.

A client device can establish a connection e.g. a persistent connection with a push framework server to facilitate receiving pushed information from services. In the example shown in a client device requests a connection with a push framework server . The push framework server responds to the request for connection in this example by providing a server certificate . The client device processes the response from the push framework server in this example by confirming the server certificate . The client device identifies itself to the push framework server in this example by providing a client device certificate . The push framework server processes the identification from the client device in this example by confirming the client device certificate . A connection is then established between the client device and the push framework server .

A service can establish a connection with a push framework server to facilitate authentication of the service. Authentication can be required by a push framework before the service is allowed to use an authenticated mode provided by the push framework. In the example shown in a service e.g. a service that sends push notifications to client devices requests a connection with a push framework server . The push framework server responds to the request for connection in this example by providing a server certificate . The service processes the response from the push framework server in this example by confirming the server certificate . The service identifies itself to the push framework server in this example by providing a service certificate . The push framework server processes the identification from the service in this example by confirming the service certificate . For example the push framework server verifies that the service certificate subject name is registered with the push framework. The connection is then established.

In the example shown in a push notification framework PNF establishes secure communication with mobile client devices and regulates services that wish to communicate with the mobile devices via push notifications. The PNF includes PNF server and a push notification client stack that communicates with the PNF server on the mobile devices . Secure communication between the PNF server and the mobile client devices is achieved with a persistent connection to individual mobile devices via TCP Transmission Control Protocol using TLS. The choice of TCP as a transport protocol can be useful for example when working with devices that include wireless cellular telephone capabilities. TCP is a binary protocol which helps conserve bandwidth. Text based protocols such as HTTP would consume more bandwidth in this scenario but could be useful in situations where bandwidth limitations are less severe.

The PNF provides different modes under which services can operate. Specifically the PNF provides an authenticated mode for internal or first party services authenticated internal mode an authenticated mode for external or third party services authenticated third party mode and an unauthenticated mode. Internal and third party modes can be considered sub modes of an authenticated mode. Depending on the mode a particular service uses e.g. authenticated internal authenticated third party or unauthenticated the PNF provides a way for the service to communicate with the mobile devices.

In the example shown in service is an unauthenticated service that communicates with the PNF server via un secured HTTP and service is an authenticated service that communicates with the PNF server via secure HTTP HTTPS . The two services can communicate with any number of client devices e.g. mobile devices and will typically communicate with different subsets of client devices.

In the example shown in service is an unauthenticated service that communicates with PNF server via un secured HTTP and service is an authenticated service that communicates with the PNF server via secure HTTP HTTPS .

As an authenticated service enough is known about service such that if a communication flow from service violates acceptable limits e.g. due to intentional abuse or poor application design the PNF server can de authorize the service which may entail preventing access to client devices e.g. mobile devices permanently blacklisting the service or until required remedial measures have been taken.

As an unauthenticated service the exact identity of service may not be known which may limit the ability of the PNF server to take direct action against service such as may be desirable in the event that communication flow from service violates acceptable limits e.g. where service sends an excessive number of notifications in a given time period . However the PNF server can regulate service even without authentication using monitoring and regulating module . In this example module throttles push notifications enforcing limits on the push notifications that can be sent by service . The module is flexible allowing adjustments of limits on numbers of push notifications and other parameters such as time periods. Module can throttle push notifications for all client devices that are accessible by service or for some subset of the devices that are accessible by service .

Throttling can be used for example to mitigate the potential effects of excessive or inappropriate notifications from services whether intentional or unintentional. For example throttling can be used to restrict notifications sent from a service to a particular device or subscription to a particular number in a given time period e.g. 500 notifications per subscription per day or notifications per subscription per hour .

Module can also throttle push notifications from other services. For example if service switches from an authenticated mode to an unauthenticated mode module can throttle push notifications from service . The PNF server also can monitor and regulate push notifications from authenticated services such as by using module or a different module that is specifically designed to monitor and regulate authenticated services.

As used herein internal service and first party service each refer to a service that is affiliated with a push framework. In some embodiments an internal service occupies a position in a network topography such that the internal service can be automatically authenticated by the push framework. Typically this will occur when the internal service is controlled by the same entity as the push framework. Third party service refers to a service that is not an internal or first party service. Typically a third party service is not under the control of the same entity that controls the push framework. Internal services can be given trusted status which can designate such services as trusted services. Trusted services can operate with a reduced level of proof of authentication. A trusted status can be granted to any service that satisfies criteria to qualify as a trusted service. The criteria for determining whether a service is a trusted service will depend on several factors including user needs and expectations security concerns etc.

The process of authentication for services can depend on many factors such as whether the service is a third party service or a first party internal service. Referring again to a distinction between internal services e.g. service and third party services e.g. service can be made based on network topography. For example an internal service may be automatically authenticated based on network topography.

In this example authenticated first party service is automatically authenticated based on network topography and authenticated third party service is authenticated using HTTPS to perform a mutual authentication in which the service confirms the identity of the push framework server by validating the authenticity of a certificate for the push framework and the push framework server confirms the identity of the service by validating the authenticity of a certificate for the service. Validating authenticity of certificates can involve for example checking whether the certificate is issued by a trusted certificate issuing authority and then validating the certificate with the trusted certificate issuing authority. In some embodiments validating that a service is registered is another step to authenticate a service. For example when an HTTPS session is established the push framework server extracts the subject name from the certificate for the service and validates whether the subject name is registered with the push framework.

A push framework can require any service whether authenticated or unauthenticated to be authorized. For example a push framework can require a service to be authorized to communicate with client devices or to have access to resources on the push framework or on client devices. A push framework can require proof of authorization. The particular level and method of proof can vary depending on several factors such as whether a service is authenticated or not. As an example a service can prove that it is authorized by providing a valid token to the push framework server.

In the example shown in client device sends a request for a subscription to a push notification framework server PNF server . The requested subscription is for receiving push notifications from a service . The PNF server generates a token that can be used to prove that the service is authorized. The token indicates privileges that the service has with regard to particular resources e.g. the client device . For example privileges can indicate whether a service has permission to push notifications to an individual device or a set of devices push advertisements to an individual device or a set of devices retrieve information on user behavior e.g. by accessing a database that stores information relevant to targeted advertising or perform some other function.

The PNF server provides the token to the client device . The PNF server can provide the token to the client device in any of several possible ways. As an example the PNF server can use a preexisting secure connection e.g. a persistent TLS connection and send the token in encrypted form to the client device . When the client device has obtained the token the client device provides the token to the service . The client device can provide the token to the service in any of several possible ways. As an example a client device can establish a secure connection e.g. a TLS connection with the service and send the token in encrypted form to the service.

In the example shown in a user of a client device activates a subscription on a PNF server . This example shows an exemplary configuration of and communications by a device OS and a client application within the client device although other configurations and communication models are possible. An application programming interface API call is made by the client application to the device OS which sends a request for a subscription to the PNF server . The subscription request includes information sufficient to allow the PNF server to provide the correct token for the subscription. For example in some embodiments a subscription request includes a service name and the PNF server checks a configuration value associated with the service name. The configuration value can indicate for example whether the service is a first party service or a third party service. For authenticated services the service name registered at the PNF server must match a subject name in a digital certificate provided by a service to the PNF server during service authentication. The PNF server then provides a token to the device via the device OS that corresponds to the requested subscription. For example the token includes information such as a URI that points to a endpoint e.g. an HTTP or HTTPS endpoint for communicating with the PNF server . The URI contains the address of the PNF server so the service can push notifications to the PNF server for delivery. The device OS provides the token to the client application . The client device then provides this token via the client application to the service e.g. via a secured or unsecured connection to the service .

For example client application resides on client device and allows a user of the client device to receive push notifications from a social networking service. Client application does not communicate directly with the PNF server . Instead client application makes an API call e.g. getToken to a push notification client stack on the device OS . The device OS translates the API call according to an appropriate protocol and submits it to the PNF server . The device OS receives the token in the client stack on behalf of the client application . After receiving the token from the client stack the client application communicates with the service according to an appropriate protocol and securely transmits the token.

Alternatively subscriptions can be created in other ways. For example to get a URI that can be used by more than one service a client device can request a subscription with an empty service name. Such a token can then be used by more than one unauthenticated service.

This example describes options for authorizing client applications. In this example a client application can only be installed on a client device if the client application has been authorized for installation. For example the client application can be authorized if it was purchased from a trusted marketplace and if the client application adheres to a set of policies e.g. policies regarding use of a push framework . Certification may require client applications to be written in a particular way e.g. to ensure that the application operates according to required policies .

In one embodiment the validation of client applications is performed by the device OS on the client device based on information provided by a trusted marketplace. The authorized client application can then be installed on the client device and any request from the application regarding push notifications e.g. a request to get a subscription token is trusted.

Described options for authorizing client applications can be used in combination with flexible authentication. For example if client applications are required to be authorized developers of new client applications for a service can still avoid authentication of the service if an unauthenticated mode is desired and push notifications to client devices as long as the new client application has been developed according to any required policies.

In described embodiments services provide tokens along with pushed information when sending the pushed information to a push framework. The tokens include information to prove to the push framework server that the service providing the token is authorized.

In the example shown in a service provides a token and a push notification to a PNF server . The PNF server confirms the validity of the token. For example the PNF server can compare the token with a table of valid tokens to check that the token is valid or the PNF server can perform some other function with the token such as a hash function to determine if the token is valid. If the token is valid the PNF server forwards the push notification to the client device . Upon receipt of the push notification the client device can present an alert e.g. a pop up notification on a display of the client device that indicates receipt of the push notification.

Tokens can be formatted in different ways and can contain different kinds of information. The choice of specific uses for tokens and formats and contents of tokens can depend on several factors including the type of service that will be using the token e.g. authenticated or unauthenticated third party or internal . The token can indicate different things to a push framework. For example a token can indicate that a service is authorized to send push notifications. A token also can indicate whether the service sending the token is a first party or internal service or a third party service. A token also can indicate whether push notifications from the service sending the token should be monitored or regulated e.g. by throttling push notifications . A token also can indicate a resource e.g. an HTTP endpoint to facilitate sending pushed information to client devices.

In the example shown in tokens are shown for an authenticated first party service an authenticated third party service and an unauthenticated third party service respectively. The tokens are formatted as HTTP or HTTPS uniform resource identifiers URIs . The tokens are shown in the following form 

where transferProtocol indicates the transfer protocol e.g. HTTP HTTPS IPAddress is an IP address representing an HTTP or HTTPS endpoint for the service serviceType is the type of service e.g. first party or third party authenticated or unauthenticated throttled or unthrottled protocolVersion is a protocol version number and subscriptionInfo is subscription information that facilitates sending pushed information to client devices.

In one embodiment subscription information includes encrypted content also called an encrypted blob that identifies a target client application on a client device to receive a push notification and identifies a TLS session for the client device. The TLS session information allows a push framework server to use a TLS connection to send the push notification to the identified target client application. At the client device a push notification client stack receives the push notification and the client application information and forwards the push notification to the client application. Subscription information also may include other information such as the name of the service if known .

Token is a token for an authenticated first party or internal service. In this example the service is authenticated based on network topology. The placeholder in the URI represents a PNF server s private HTTP endpoint for the first party service.

Token is a token for a throttled unauthenticated third party service. The placeholder in the URI represents a PNF server s HTTP endpoint for the unauthenticated third party service.

Token is a token for an unthrottled authenticated third party service. In this example the service is authenticated using certificates. The placeholder in the URI represents a PNF server s HTTPS endpoint for the authenticated third party service.

A service can use HTTP verbs when pushing information to a push framework. This can be useful for example when the service is a RESTful web service.

The process of service authorization can depend on many factors such as whether a service seeking authorization is authenticated or unauthenticated.

In this example a push framework determines whether a service is authorized by validating a token provided by the service. The push framework decrypts encrypted content in the token to obtain a service name and a pointer to a subscription endpoint e.g. a TLS session with a client device . The push framework checks the service name associated with a previously created subscription associated with the TLS session on a session manager on a push framework server to see if it matches the service name included in the token. If so the pushed information is authorized for delivery and the pushed information can be delivered. For example the pushed information can be queued for later delivery to an appropriate client device.

The push framework also can make additional checks to determine whether pushed information is authorized for a particular client device or subscription. For example the push framework can check whether a push notification complies with additional parameters associated with a subscription such as time ranges which can limit when push notifications can be delivered.

In this example a PNF implements flexible authentication and authorization techniques. The PNF provides authenticated modes and an unauthenticated mode for services that send push notifications to client devices. The PNF also permits authorization to be denied or revoked under certain conditions. To receive push notifications from service a client device creates a subscription with the PNF. The client device provides a service name for the service at the time of creating the subscription. The PNF then provides a subscription token corresponding to the service. The service uses the subscription token to push notifications to the client device.

In authenticated modes services that communicate with the PNF are able to confirm that they are communicating with a valid PNF and the PNF is able to confirm that it is receiving notifications from a known service. One authenticated mode is for third party services. Third party authenticated services provide a service certificate which includes a service name in the subject name of the certificate to the PNF. The third party service certificate s subject name is registered with the PNF and is marked as an external third party service. To receive push notifications a client device creates a subscription by sending a subscription request with the appropriate service name to the PNF. The PNF provides a subscription token containing a front end HTTPS endpoint after authenticating that the service name is registered and marked as an external third party service. The client device provides the subscription token to the third party service. Using the HTTPS endpoint the third party service pushes notifications to the client device. The third party service also can use the HTTPS endpoint to confirm that it is communicating with a valid PNF. Furthermore the PNF can re authenticate by comparing the subject name of the certificate received in the HTTPS session with the service name registered by the PNF.

Another authenticated mode is for first party internal services. First party services provide a service certificate which includes a service name in the subject name of the certificate to the PNF. The first party service certificate s service name is registered with the PNF and marked as an internal service. To receive push notifications a client device creates a subscription by sending a subscription request with the appropriate service name to the PNF. The PNF provides a subscription token containing a back end HTTP endpoint to the client device after confirming that the service name is registered and marked as an internal first party service. The client device provides the subscription token to the service. The service uses the back end HTTP endpoint to push notifications to the client device. The service also can authenticate that it is communicating with a valid PNF using the back end HTTP endpoint. Furthermore the PNF can re authenticate by confirming that any notification received on the back end HTTP endpoint is from a first party service. No third party service will be able to access back end HTTP endpoints because back end HTTP endpoints are only exposed to first party services.

The PNF also provides an unauthenticated mode. In the unauthenticated mode the PNF allows unauthenticated services to send push notifications subject to throttling controls. In this example unauthenticated mode is used if a service first party or third party cannot be authenticated at the time of subscription creation. The unauthenticated service is provided with a front end HTTP endpoint of the PNF. Notifications coming through this endpoint are throttled. For example unauthenticated services will only be authorized to push notifications up to a set limit per subscription per day per device. If the limit is reached on a subscription the PNF stops or pauses the notification flow from that service. Alternatively other limits can be set. For example a time period can be set in terms of hours or minutes rather than days.

The PNF also permits authorization to be denied or revoked under certain conditions. The PNF can revoke notification flow to a specific subscription or device. For example the PNF can cancel a subscription or invalidate a token to stop notification flow. Furthermore the PNF can blacklist i.e. block future notifications for an application or service based on its application name or service name as appropriate.

Mobile client device can subscribe to receive push notifications from services . For example mobile client device creates a subscription and receives a subscription token containing a notification endpoint appropriate to one of the services according to the example technique depicted in . In one embodiment a client application requests a token via a client stack API and the client stack establishes a TLS connection if a TLS connection has not already been established e.g. if the corresponding client application is the first application on the device to request a token. Upon receiving the token the mobile client device provides the token to the appropriate service e.g. service or .

When a service needs to push information e.g. a notification to the PNF server it will establish an HTTP or HTTPS session as appropriate and push the information. For example a service uses the token provided by the mobile client device to post a notification using an HTTP POST command. In some embodiments tokens take one of the forms shown in depending on whether a service is authenticated or unauthenticated and whether the service is a first party service or a third party service. As shown in authenticated first party service sends push notifications to the notification listener using a back end BE HTTP endpoint. For example a connection is made using back end port identified as port 80 in the PNF server . Unauthenticated service sends push notifications to the notification listener using a front end FE HTTP endpoint. For example a connection is made using front end port identified as port 80 in the PNF server . Authenticated third party service sends push notifications to the notification listener using a front end FE HTTPS endpoint. For example a connection is made using front end port identified as port 444 in the PNF server .

The PNF server will identify a subscription with a unique virtual port rather than a physical port in the networking stack. In one embodiment subscription information in a subscription token contains a unique number to identify the subscription under a given session with the device. The persistent session opens a single port on the device and on the PNF server port 443 and with that session and physical port multiple subscriptions and applications are identified via logical ports.

The PNF server authenticates the service if a push notification arrives on a an HTTPS endpoint or b a private back end HTTP endpoint. In case a authentication is based on a certificate exchange as well as on a confirmation that the service s certificate subject name i.e. the service name is registered or whitelisted with the PNF server . In case b authentication is implicit since only internal first party services will be able to reach that endpoint of the PNF server due to network topography.

The PNF server does not authenticate the service if a push notification arrives on a front end HTTP endpoint which is used in unauthenticated mode. If the token indicates that a push notification is authorized the PNF server pushes the notification to the mobile client device . In unauthenticated mode push notifications are throttled.

In one embodiment a push notification framework PNF is implemented as a best efforts system in which it is permissible to not deliver notifications depending on conditions. For example notifications can be pushed to client devices so long as capacity for storing the notifications is not exceeded. As another example notifications may not be delivered where a user has requested that notifications from a given service be paused and stored for later delivery or where the user has set a customized limit on the number of notifications that should be delivered during a given time period. The PNF will typically have finite storage space allocated to the user and or service for undelivered notifications and may have to drop undelivered messages if the space limit is exceeded. If this occurs the PNF can notify the user or the user s device and include information describing for example number of messages lost time and date ranges of lost messages etc. Such data may be provided for taking corrective action or simply for the user s information.

Described embodiments of a push notification framework PNF take into account one or more of the threat scenarios and possible mitigations shown below in Table 1 

In addition to throttling controls that can be implemented for example on a push notification framework PNF additional flow control mechanisms can be employed at a client device. These can include user modes or preferences e.g. do not disturb or conserve battery which can be used to stop or reduce delivery of notifications.

A user can stop future notifications with a user initiated revocation of authorization if notifications are excessive or otherwise inappropriate from the user s perspective such as by temporarily or permanently suspending delivery of new notifications or by removing an application on the user s device. For example at a PNF server such user actions can be interpreted as a request to cancel the subscription that links the user s device to the service. The PNF can then cancel the subscription and future notifications even if accompanied by a previously valid token will be prevented from reaching the user. The user initiated revocation can be done in combination with functionality such as the described throttling function. This can be useful for example where the user s personal threshold for what constitutes excessive notifications is less than the notification limit set by the PNF e.g. 500 notifications per day .

When notifications are suppressed they can be deleted queued for later delivery or processed in some other way.

In any of the examples herein a client device can be a computing device that is capable of wired communication wireless communication or both wired and wireless communication. For example a client device can be a mobile communications device e.g. a cell phone or a smart phone a computer e.g. a laptop desktop or tablet computer a personal digital assistant PDA or another type of computing device with a built in or add on wireless network adapter e.g. a Wi Fi wireless network adapter . Client devices that are capable of wireless communication can be referred to as a client wireless device. For example a client wireless device can be a laptop or PDA with an 802.11b or 802.11g wireless network adapter.

Client devices can be mobile or stationary. For example a user can carry a client wireless device to various locations e.g. by walking with a PDA to various locations on a corporate campus or by driving to various locations within a city .

A client device can perform functions e.g. a sequence of functions automatically. For example a client device can automatically listen for push notifications from services that the device subscribes to and display alerts. Functions that a client device can perform automatically e.g. without user intervention can also be performed manually e.g. with user intervention .

A client device can include software e.g. a software program or module allowing the client device to perform various functions in order to receive and use information. For example the software can allow the client device to listen for push notifications from services that the device subscribes to and display alerts based on information received in push notifications.

In any of the examples herein a wireless network can be used to provide services to client wireless devices. A wireless network can be a wireless computer network. For example a wireless network can be a Wi Fi wireless network a wireless network operated under the Wi Fi IEEE 802.11 standard such as 801.11a 802.11b 802.11g 802.11n etc. . Other types of wireless networks e.g. other wireless network protocols and technologies can also be used to provide location based services such as Bluetooth IEEE 802.15 WiMAX IEEE 802.16 and other wireless network technologies.

A wireless network can comprise various components. A wireless network can include wireless network adapters. For example wireless network adapters can include wireless cards e.g. Wi Fi cards in computers PDAs cell phones smart phones or other computing devices. Wireless network adapters can be built in e.g. a PDA with built in or integrated wireless capability or added e.g. a laptop with a wireless network adapter card . Wireless network adapters can also include wireless access points when operated as adapters e.g. in ad hoc mode . A wireless network adapter can be operated for example in infrastructure mode e.g. with a central point through which all wireless traffic passes or in ad hoc mode e.g. supporting peer to peer connections between wireless network adapters .

A wireless network can be operated in various modes. For example a wireless network such as a Wi Fi wireless network can be operated in ad hoc mode. Ad hoc mode can be a mode in which wireless network adapters communicate directly e.g. peer to peer communication without the need for a central access point in infrastructure mode.

The wireless network can be a Wi Fi wireless network. The wireless network can be generated by a wireless network adapter of the information server and can encompass a wireless network zone. The wireless network can be an ad hoc wireless network.

For example the information server can comprise a wireless network adapter configured in ad hoc mode. The information server can provide location based services by sending via the wireless network adapter push notification information. The client wireless device can also comprise a wireless network adapter configured in ad hoc mode. The client wireless device can connect to the wireless network in ad hoc mode e.g. to the wireless network adapter of the information server and receive the push notification information.

The system can be a wireless network infrastructure comprising one or more information servers e.g. information server providing services to one or more client wireless devices e.g. client wireless device .

The information server provides location based services by sending over the wireless network service information via a number e.g. an arbitrary number of network ports . For example for a service that provides push notification information different types of push notification information can be associated with a specific network port e.g. a specific network port number .

The client wireless device receives service information from the information server . The client wireless device can receive the service information by listening on a number e.g. an arbitrary number of network ports e.g. listening using network sockets . For example the client wireless device can listen on a specific network port e.g. a specific network port number associated with push notification information from a specific service.

For example the information server can send push notification information for a specific service on network port A one of the three network ports depicted at . The client wireless device can be listening e.g. continuously listening on network port A one of the three network ports depicted at for the push notification information for the specific service. When client wireless device detects the information on network port A the client wireless device can receive the push notification information.

The information server can send information using the UDP protocol the User Datagram Protocol of the Internet Protocol suite and the client wireless device can receive the information using the UDP protocol. The information server can use specific UDP port numbers e.g. sending information from a specific UDP source port number to a specific UDP destination port number . For example network port A can correspond to UDP port number 120 and network port A can correspond to UDP port number 120. Port number 120 can correspond to a specific location based service such as a library location based service. Similarly network port B can correspond to UDP port number 130 and network port N can correspond to UDP port number 140. 

Different port numbers can also be used for the information server side and the client wireless device side. For example network port A e.g. the broadcasting side can correspond to UDP port number 120 and network port A e.g. the receiving side can correspond to UDP port number 121. 

The specific port numbers can be known to the information server and the client wireless device . As a result the information server and client wireless device can know which network port numbers on which to listen for specific services.

In other examples described herein a PNF client and a PNF server will just use a single physical port and each application s subscription will be identified via a virtual port.

At A a preference for Service A is displayed. Associated with preference A is a checkbox that has been checked e.g. by a user of the user interface . A checked checkbox can indicate that the respective service is enabled e.g. that push notification information will be received and alerts displayed for Service A . In addition a Preferences user interface control e.g. a button or link is associated with preference A. The Preferences user interface control can allow a user to configure additional preferences regarding Service A. 

At B a preference for Service B is displayed and at N a preference for a specific location based service Service N is displayed. Associated with preference N is a checkbox that has not been checked. The unchecked checkbox can indicate that the location based service is disabled e.g. that push notification information will not be received and thus no alerts displayed for Service N . In addition Preferences user interface controls e.g. a button or link are associated with preferences B and N respectively. The Preferences user interface control associated with preference N is depicted as disabled e.g. a user cannot configure additional preferences regarding Service N because it has been disabled .

For example the preferences A B N can allow a user to control the display of alerts related to push notifications from Service A. For example A can be a preference allowing the user to choose e.g. via a drop down user interface control an alert method e.g. audio notification pop up window etc. to indicate to the user when a push notification has been received.

Any number e.g. an arbitrary number of preferences can be displayed in the user interface for a specific location based service.

In any of the examples herein alerts can be presented on client devices. Alerts can be presented when the client device receives push notifications. Alerts can be presented after filtering push notifications using preferences. The presentation of alerts can involve visual presentation audio presentation other presentation e.g. vibration or other physical movement of a client device or a combination.

Alerts can be displayed in a variety of formats. For example an alert can be indicated by a pop up window or badge on a display of a client device or by a blinking or flashing light. As another example alerts can be presented by audio e.g. an audible beep or ring .

Alerts can contain a variety of information. For example an alert can contain text pictures multimedia e.g. audio and video links e.g. links to Web sites and other types of information. A numbered badge notification can indicate not only that an alert is active but also a number of similar alerts. For example a numbered badge that indicates the arrival of several push notifications can be represented by a badge representing push notifications and a number on the badge indicating a number of push notifications that have arrived at the client device.

With reference to the computing environment includes at least one central processing unit and memory . In this most basic configuration is included within a dashed line. The central processing unit executes computer executable instructions and may be a real or a virtual processor. In a multi processing system multiple processing units execute computer executable instructions to increase processing power and as such multiple processors can be running simultaneously. The memory may be volatile memory e.g. registers cache RAM non volatile memory e.g. ROM EEPROM flash memory etc. or some combination of the two. The memory stores software that can for example implement the technologies described herein. A computing environment may have additional features. For example the computing environment includes storage one or more input devices one or more output devices and one or more communication connections . An interconnection mechanism not shown such as a bus a controller or a network interconnects the components of the computing environment . Typically operating system software not shown provides an operating environment for other software executing in the computing environment and coordinates activities of the components of the computing environment .

The storage may be removable or non removable and includes magnetic disks magnetic tapes or cassettes CD ROMs CD RWs DVDs Blu ray discs or any other medium which can be used to store information and which can be accessed within the computing environment . The storage stores instructions for the software which can implement technologies described herein.

The input device s may be a touch input device such as a keyboard keypad mouse pen touchscreen or trackball microphone or other audio input device video camera or other video input device a scanning device or another device that provides input to the computing environment . The output device s may be a display printer speaker CD or DVD writer or another device that provides output from the computing environment .

The communication connection s enable communication over a communication medium e.g. a connecting network to another computing entity. The communication medium conveys information such as computer executable instructions or other data in a modulated data signal.

Computer readable media are any available media that can be accessed within a computing environment . By way of example and not limitation with the computing environment computer readable media include memory storage communication media not shown and combinations of any of the above.

Any of the methods described herein can be performed via one or more computer readable media e.g. storage media having computer executable instructions for performing such methods. Operation can be fully automatic semi automatic or involve manual intervention.

The technologies of any example described herein can be combined with the technologies of any one or more other examples described herein.

In view of the many possible embodiments to which the principles of the disclosed invention may be applied it should be recognized that the illustrated embodiments are only preferred examples of the invention and should not be taken as limiting the scope of the invention. Rather the scope of the invention is defined by the following claims. We therefore claim as our invention all that comes within the scope and spirit of these claims.

