---

title: Managing and securing manageable resources in stateless web server architecture using servlet filters
abstract: Access is controlled to managed resources in a stateless web server architecture including a stateless web server computing platform; a resource locator map portion of the stateless web server computing platform providing a unique resource locator code representing each managed resource in a stateless web server architecture, wherein the managed resource is assigned to a plurality of application program components; a set of servlet filters disposed in a portion of the stateless web server computing platform, each servlet filter associated with one of the application program components; a resource locator matcher portion of the stateless web server computing platform, responsive to a user request to a unique resource locator, matching a pattern in the user request to one or more of the application program components using a corresponding servlet filter; and a request dispatcher portion of the stateless web server computing platform sending the user request to the matched application program component, wherein the application program component receives and processes the user request.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09021093&OS=09021093&RS=09021093
owner: International Business Machines Corporation
number: 09021093
owner_city: Armonk
owner_country: US
publication_date: 20100817
---
The invention generally relates technologies to manage resources in a web server having a stateless architecture.

Web servers often provide complicated services to the consumers or visitors to the web sites that they host. Some visitors are web browser programs being executed by client computers or web enabled devices such as smartphones. In this situations a human usually is operating the web browser and the service is something the human user needs such as news social networking information searching bank account management etc.

In other cases the visitors of the hosted web service are other programs needing the functionality provided by the hosted service such as calculation of mortgage payments checking inventory of available products obtaining available flight information etc. From the web server s perspective it is often indistinguishable what type of remote user is accessing the hosted service human or machine.

In early generations of web based services a series of screens or pages would be provided from the web server to the remote user according to the input provided by the remote user and based upon the logic of the hosted service. These logical processes were often designed according to state machine logic in which the web server tracked the state of the current session with the user in order to assist in determined what the next state of the service should be for that remote user. The web server was responsible for remembering each client and their session states and statuses.

However in the evolution of web based services in which several servers not just one may contribute to the overall hosted service this type of centralized state machine logic on the web server because inefficient difficult to design and difficult to debug. For example commonly a user may use a web browser to access a news web page which has text and picture hosted by the main news web server advertisements hosted by separate ad servers and videos hosted by still separate video servers . The web page becomes a point of integration of information from all of these web servers but forcing one web server to logically and functionally integrate all of the separate state machines for all of these source providers is problematic.

 Stateless web server architectures have been developed to address this shift in web based service hosting. A widely adopted stateless web server architecture is Representational State Transfer REST which is reported to have been proposed in 2000 by Roy Fielding at the University of California Irvine. In stateless web server architectures the current state of a client s session is recorded by sending a trackable file such as a cookie file to the remote client device where it is stored and then later returned to the web server with the next request. In classic state machine design this means that the state machine executed by the web server is indexed by a state variable stored by the remote client. This architecture goes further to enable the different state machines on different servers which are contributing content or functionality to a client s session to use the state variable supplied by or from the client without having to pass the state variable through a central or integrating web server.

Access is controlled to managed resources in a stateless web server architecture including a stateless web server computing platform a resource locator map portion of the stateless web server computing platform providing a unique resource locator code representing each managed resource in a stateless web server architecture wherein the managed resource is assigned to a plurality of application program components a set of servlet filters disposed in a portion of the stateless web server computing platform each servlet filter associated with one of the application program components a resource locator matcher portion of the stateless web server computing platform responsive to a user request to a unique resource locator matching a pattern in the user request to one or more of the application program components using a corresponding servlet filter and a request dispatcher portion of the stateless web server computing platform sending the user request to the matched application program component wherein the application program component receives and processes the user request.

The inventors of the present invention have recognized a problem in the art not previously recognized or addressed regarding administration of stateless web servers and the application programs they host.

A complex system such as a hosted web service application program e.g. IBM WebSphere or similar normally consists of many administrative C C and S resources contributed to the system by different components and stack products as shown in . A current solution in WebSphere for example to handle these contributed resources from various components and stack products within a single administrative component is found to be more complex and difficult to manage because the central administrative component needs to have full interface and functionality information for the resources and their behavior. But since resources are contributed by different components and different stack products it is difficult to design a central administrative component capable of anticipating all such interface and functionalities in order to manage all the possible different resources. Each component and stack product may use different strategy to represent resource and its behavior. The current solution WebsSphere product for example requires each component to adhere to strict rules for defining resources and resource behavior. Resources which do not adhere to the strict rules Cand S cannot be administered through the central administration unit .

The inventors of the present invention have recognized a first problem in the art regarding managing administrative resources in a stateless web server of managing contributed resources which do not conform to rules according to a central administration unit.

The inventors have recognized a second problem in the art regarding securing administrative resources instance based security for stateless web servers. Instance based security of resources includes assigning different security constraints for different instances of resources as well as assigning different security constraints for different attributes or properties of each resource instance e.g. fine grained security .

No known methods handle instance based security at attribute or properties level for stateless web servers whereas current technologies perform security functions at the server in a client server environment. In these arrangements the communication between client and server is primarily Remote Procedure Call RPC types of communication. The main drawback of RPC mechanism for performing fine grained security is that the information required to perform security needs to be extracted from the RPC methodname parameter names etc. But there is no uniform way of identifying the resource. This makes it hard to perform fine grained authorization using RPC mechanism. Performing attribute based or instance based authorization is very difficult in this case if not impossible.

A stateless architecture such as a RESTful architecture addresses the problem of RPC. In RESTful architecture each resource is represented by a Uniform Resource Locator URL . This makes it easy to identify the resource being authorized.

Relying upon some of the advantages of such stateless architectures which use URL s to identify each resource the present invention solves the foregoing problems and limitations of the existing art by providing access and usage authorization of system resources based on resource instance. Further the present invention provides attribute level authorization efficiently as well which is otherwise difficult and inefficient in a standard RPC based architecture.

The present invention is expected to provide particularly great benefit to central administration technologies of stateless web servers such as web servers implementing a RESTful architecture. The present invention may however be found to be useful in other web server architectures.

In a RESTful architecture each resource is represented by a unique URL. When an end user specifies a URL to access a resource that resource may belong to any one of many components and stack products with in the web server system.

As shown in if all requests directly go to the central administrative unit the administrative unit must identify to which component the requested resource belongs. This requires the central administrative unit to have knowledge about all the components and stack products.

Embodiments according to the present invention utilize servlet filters to automatically dispatch the servlet request to the right component . Upon initialization installation or registration each component or stack product provides a servlet filter as shown in . A servlet filter can be added based on the URL pattern associated with the component to which a resource belongs. Because resources directly map to the specific URL pattern it is efficient for stack products to specify its own servlet filter.

Once servlet filters are specified for various resources the central administration unit waits to receive resource requests from remote client users the requests including a specific URL associated with the requested resource.

The received URL is then mapped to one or more servlet filters which are then automatically invoked to handle the requested function or information. If the servlet filter code determines that the URL belongs to its component it can handle the request and process request. After processing the request it can call the next servlet filter in a servlet filter chain if there is any . If the resource should not be handled by another servlet filter it can simply return from the filter and no other filter is invoked .

We now briefly discuss an alternate solution considered by the inventors not in a manner of teaching away from the alternate solution but as an illustration of an alternate embodiment according to the same invention. In this alternate embodiment each stack product creates its own application as opposed to servlet filter to manage its own resources. A limitation of this approach is that the end user needs to know context root of each stack product s application. This makes its operation less transparent to the end user. Moreover the same resource may need to be processed by multiple stack products in some cases and that will be difficult with different applications for each stack product. In some manners of use however these limitations may not be significant so this alternative embodiment may be useful.

To secure administrative resources in one embodiment according to the invention a RESTful application is implemented as a servlet application. Because all servlets undergo authorization based on URL pattern by the servlet container then every resource instance is identifiable by a URL and therefore the embodiment of the invention is enabled to assign different security constraints for different URL patterns in the deployment descriptor of the RESTful application servlet using code such as shown in which includes two security constraints each of which specifies a URL pattern and a role name for that pattern shown in bolded text .

This example descriptor is used by webcontainer servlet container to perform authorization. In this example different roles are assigned for server and application resource instances. When a resource is accessed by an end user proper authorization is automatically performed.

By extending a stateless web server architecture to represent each attribute as opposed to just each component as a URL different security constraints can readily be applied to different attributes within a resource thereby providing fine grained control as exemplified in . If there is a password attribute in the server1 resource it may be needed to protect it using a different role in some situations.

The following three general steps illustrate how readily a servlet filter to handle resources specific to Portal server in an WebSphere application server may be created.

Since new components and stack products can be added to a web server at any time new servlet filters need to be added at runtime as well for each component and stack product added. This can be accomplished by one of the by providing a tool to update the deployment descriptor such as in web.xml or A deployment descriptor difference delta file e.g. web delta.xml containing the new component s or stack product s filter should may be merged with application programs current deployment descriptor.

In either method after the deployment descriptor is modified the application program may need to be restarted to read the changes to deployment descriptor. If an application program needs to be available continuously there are already other methods available in WebSphere to achieve this such as starting the same application in another server with the new or updated deployment descriptor and subsequently re directing all calls to that server.

Security is automatically enforced by the web container because of declarative nature of security constraints. In addition to that it is required to update the deployment descriptor when a new resource is created or deleted as well. For example after a new server is created the deployment descriptor must be updated with new security constraint required for the new server created. Once the deployment descriptor is updated the webcontainer must be caused to read the updated deployment descriptor. There are two ways to accomplish this by providing a tool to update deployment descriptor of application that adds additional security constraints in the web.xml file and a new deployment delta.xml file with additional security constraints can be added when a new resource is created and merged with existing web.xml file.

With either method after deployment descriptor is updated the authorization engine webcontainer will be informed to use the updated deployment descriptor. If an external authorization engine is being used the external authorization module will be informed to read the new changes to the deployment descriptor.

Bearing in mind the foregoing disclosure we turn to which illustrates an example operation of an embodiment of the invention. A administrator using an administration console desires to access a portal manager servlet on a RESTful web server. The administrator identifies this with a request for a URL associated with the portal manager servlet namely 

The unique portion localhost 9090 admin portal server server1 is pattern matched by a servlet filter shown with hash marks among several servlet filters and the request is directed according to the invention by the specific servlet filter to its associated portal servlet shown with hash marks among many available on the RESTful server.

Regarding computers for executing the logical processes set forth herein it will be readily recognized by those skilled in the art that a variety of computers are suitable and will become suitable as memory processing and communications capacities of computers and portable devices increases. illustrates a generalized computing platform such as common and well known computing platforms such as Personal Computers web servers such as an IBM iSeries server and portable devices such as personal digital assistants and smart phones running a popular operating systems such as Microsoft Windows or IBM AIX Palm OS Microsoft Windows Mobile UNIX LINUX Google Android Apple iPhone operating system and others may be employed to execute one or more application programs to accomplish the computerized methods described herein. Whereas these computing platforms and operating systems are well known an openly described in any number of textbooks websites and public open specifications and recommendations diagrams and further details of these computing systems in general without the customized logical processes of the present invention are readily available to those ordinarily skilled in the art.

Many such computing platforms but not all allow for the addition of or installation of application programs which provide specific logical functionality and which allow the computing platform to be specialized in certain manners to perform certain jobs thus rendering the computing platform into a specialized machine. In some closed architectures this functionality is provided by the manufacturer and may not be modifiable by the end user.

The hardware portion of a computing platform typically includes one or more processors accompanied by sometimes specialized co processors or accelerators such as graphics accelerators and by suitable computer readable memory devices RAM ROM disk drives removable memory cards etc. . Depending on the computing platform one or more network interfaces may be provided as well as specialty interfaces for specific applications. If the computing platform is intended to interact with human users it is provided with one or more user interface devices such as display s keyboards pointing devices speakers etc. And each computing platform requires one or more power supplies battery AC mains solar etc. .

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof unless specifically stated otherwise.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

It will be readily recognized by those skilled in the art that the foregoing example embodiments do not define the extent or scope of the present invention but instead are provided as illustrations of how to make and use at least one embodiment of the invention. The following claims define the extent and scope of at least one invention disclosed herein.

