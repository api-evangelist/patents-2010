---

title: Transition from WS-Federation passive profile to active profile
abstract: A server system sends a first credential request to a passive requestor at a client device. After sending the first credential request, the server system receives a credential for a user of the client device. If the credential is valid, the server system can provide the passive requestor with access to a resource provided by the server system. After providing the passive requestor with access to the resource, the server system provides an active requestor at the client device with access to the resource without sending a second credential request to the active requestor. Consequently, it may not be necessary for a user of the client device to provide credentials twice in order for the passive requestor and the active requestor to access the resource.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08370914&OS=08370914&RS=08370914
owner: Microsoft Corporation
number: 08370914
owner_city: Redmond
owner_country: US
publication_date: 20101215
---
There are many circumstances in which online resources should only be accessible to authorized people. For example a company s employee directory may a resource that only authorized people should be able to see. Accordingly many systems have been developed to determine whether a person seeking to access a resource is authorized to access the resource.

The Organization for the Advancement of Structured Information Standards OASIS has advanced a set of related standards for determining whether users are authorized to access web services. These standards include WS MetadataExchange WS Security WS Trust WS Federation and others. Typically a web service is an application programming interface API that is accessed via Hypertext Transfer Protocol HTTP and executed on a remote system that hosts the requested service. For example a web service can be a web API that provides access to a company s employee directory. A web API is an API that is accessed via HTTP and executed on a remote system that hosts the requested service.

The standards advanced by OASIS rely at least to some degree on the exchange of security tokens. A security token is a data structure representing a collection of claims. A claim is a declaration by an entity. A web service can require users to present security tokens issued by a Security Token Service trusted by the web service in order for the web service to allow the users to access the web service. Moreover the security tokens must include certain claims. For example a web service can require security tokens to include claims declaring that the users are in the accounting department of a company.

The WS Federation standard provides for at least two ways for a client to obtain a security token from a Security Token Service and to use the security token to access a web service. These ways include the WS Federation Passive Requestor Profile and the WS Federation Active Requestor Profile. Clients that do not utilize the SOAP protocol typically use the WS Federation Passive Requestor Profile. For instance web browser applications typically use the WS Federation Passive Requestor Profile to obtain and use security tokens. Clients that utilize the SOAP protocol can use the WS Federation Active Requestor Profile. Thick client applications such as workplace productivity applications typically use the WS Federation Active Requestor Profile to obtain and use security tokens. In some instances clients using the WS Federation Active Requestor Profile can obtain and use security tokens more efficiently than clients using the WS Federation Passive Requestor Profile because fewer messages may need to be sent across a network when using the WS Federation Active Requestor Profile.

In some instances a client may use both the WS Federation Passive Requestor Profile and the WS Federation Active Requestor Profile. For example a complex thick client application can include several components developed at different times. In this example an earlier developed component in the client application can be programmed to use the WS Federation Passive Requestor Profile to access a web service while a later developed component in the same client application can be programmed to use the WS Federation Active Requestor Profile to access the same web service. In this example a client application can include components that use the WS Federation Passive Requestor Profile and components that use the WS Federation Active Requestor Profile because it may be too costly to reprogram the components to use the WS Federation Passive Requestor Profile.

In instances where components of a client application use both the WS Federation Passive Requestor Profile and the WS Federation Active Requestor Profile a user may need to provide a credential when one component of the client application uses the WS Federation Passive Requestor Profile to obtain a security token to access a web service. For instance a user may need to provide a username and password when one of the components uses the WS Federation Passive Requestor Profile to obtain a security token to access a web service. Subsequently the user may need to provide the same credential again when another component of the client application uses the WS Federation Active Requestor Profile to obtain a security token to access the same web service. The user may find it annoying to provide the same credential twice to access the same web service.

A client device prompts a user to provide a credential while obtaining a first security token from a Security Token Service STS provided by a server system. The client device later sends a first access request to the server system. The first access request comprises a HTTP request whose fulfillment entails accessing a resource provided by the server system. The first access request includes the first security token. After obtaining the first security token the client device obtains a second security token from the STS without prompting the user for a credential for a second time. Furthermore after obtaining the second security token the client device sends a second access request to the server system. The second access request comprises a SOAP request whose fulfillment entails accessing a second resource provided by the server system. The second access request includes the second security token. In this way it may not be necessary for the user to provide credentials twice in order for the client device to access the first resource and the second resource.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended as an aid in determining the scope of the claimed subject matter.

The client device is a computing device. For example the client device can be a laptop computer a desktop computer a netbook computer a handheld computer a smart phone a television set top box a video game console an in car computer a personal media player or another type of computing device. In some embodiments the client device is of the type described below with reference to the example of . Although the client device is shown in the example of as a laptop computer it should be appreciated that the client device can be other types of computing devices.

Furthermore the example environment of includes a server system . The server system comprises a set of one or more computing devices . In various embodiments the computing devices can belong to various computing device types. For example one or more of the computing devices can be standalone servers blade server devices mainframe computers routers firewall devices data storage devices and other types of computing devices. Although the computing devices are shown in the example of as being standalone server devices it should be appreciated that the computing devices can be other types of computing devices. In some embodiments the computing devices can be of the type described below with reference to the example of .

A network facilitates communication between the client device and the server system . In various embodiments the network can include various types of communication network. For example the network can include the Internet. In another example the network can include a local area network a personal area network a wide area network or another type of network. The network includes one or more links that facilitate communication between computing devices connected to the network . These links can include wired or wireless links.

As illustrated in the example of the server system provides a resource a security token server STS and a claim provider . The resource can be associated with a Uniform Resource Identifier URI that includes the domain name of the server system . For example if the domain name of the server system is www.contoso.com the URI of the resource can be www.contoso.com resource. The STS can be associated with a different URI that includes the domain name of the server system . For example if the domain name of the server system is www.contoso.com the URI of the resource can be www.contoso.com STS. 

In some embodiments the server system provides the resource the STS and the claim provider when one or more of the computing devices in the server system execute computer executable instructions associated with the resource the STS and the claim provider . Such computer executable instructions can be stored on one or more computer storage media at the server system .

The resource is an endpoint for a web service. The web service can provide various types of services. For example the resource can be an endpoint for a directory service that provides contact information about employees of a company. In another example the resource can be an endpoint for a website hosting service that hosts a company s intranet website.

The resource can provide sensitive information or perform sensitive tasks. For example the resource can provide confidential information about employees. In another example the resource can book orders for goods or services. Accordingly only some users are authorized to access the resource .

Because only some users are authorized to access the resource the resource determines whether users such as the user are authorized to access the resource before allowing the users to access the resource . The resource can use the WS Federation Passive Requestor Profile Protocol to determine whether users are authorized to access the resource . For ease of explanation this patent document can refer to the WS Federation Passive Requestor Profile Protocol as the passive protocol. In addition the resource can use the WS Federation Active Requestor Profile Protocol to determine whether users are authorized to access the resource . For ease of explanation this patent document can refer to the WS Federation Active Profile Protocol as the active protocol. 

As illustrated in the example of an application runs on the client device . The application can belong to a variety of different application types. For example the application can be a word processor application e.g. MICROSOFT Word a spreadsheet application e.g. MICROSOFT EXCEL a slideshow application e.g. MICROSOFT POWERPOINT an email client application e.g. MICROSOFT OUTLOOK a video game application a software development application or another type of application.

The application comprises multiple components. Each of the components is a unit of software that runs within the application . For example the components can be modules APIs plug ins classes threads processes or other units of software. The components of the application can perform various tasks. For example a component of the application can look up email addresses for people. In another example another component of the application can retrieve and present help content.

As illustrated in the example of the application comprises a passive component and an active component . The passive component and the active component communicate with the server system to access the resource . As discussed above the resource can use the passive protocol and the active protocol to determine whether users are authorized to access the resource . The passive component is a passive requestor. In other words the passive component supports HTTP but does not utilize SOAP. Consequently the passive component is able to use the passive protocol but is not able to use the active protocol. The active component is an active requestor. In other words the active component is capable of issuing and receiving SOAP messages such as those described in WS Security and WS Trust. Consequently the active component is able to use the active protocol.

When the passive component first attempts to access the resource using the passive protocol the client device prompts the user to provide a credential. For example the client device can prompt the user to enter a username and password. In another example the client device can prompt the user to provide a one time password.

Subsequently the active component attempts to access the resource using the active protocol. When the active component attempt to access the resource using the active protocol the resource is able to determine that the user is authorized to access the resource without the validation of a credential received from the user . Consequently the client device does not need to prompt the user to enter a credential when the active component attempts to access the resource using the active protocol.

Furthermore as illustrated in the example of the client device comprises a cookie cache . The cookie cache stores cookies received by the client device . A cookie is a block of data that a server stores on a client system. The client system sends a copy of the cookie back to the server when the client system subsequently accesses the server.

After sending the first security token to the passive component the STS receives a token request from the active component . For ease of explanation this patent document can refer to token requests from the active component as active token requests. In response the STS sends a second security token to the active component without sending a message to the active component requesting one or more credential for the user . The active component can use this second security token in requests to the server system whose fulfillment entails accessing the resource . The server system uses the second security token to determine whether the active component is authorized to access the resource . In this way the server system can provide the active component with access to the resource without prompting the user to provide credentials.

In response to the first access request the resource determines whether the user is authorized to access the resource . Because the first access request does not include a security token the resource determines that the user is not authorized to access the resource . Accordingly the resource sends a first redirection response to the passive component in response to the first access request . The first redirection response is a HTTP redirection response that instructs the passive component to automatically send a token request to the STS . After receiving the first redirection response the passive component obtains a security token from the STS . This patent document can refer to this security token as the passive security token. described in detail below illustrates an example exchange of messages to obtain the passive security token.

After obtaining the passive security token the passive component automatically sends a second access request to the resource . The second access request is a HTTP request whose fulfillment entails accessing the resource . The second access request includes the passive security token. The passive component automatically sends the second access request to the resource because a last step of obtaining the passive security token is a redirection response from the STS instructing the passive component to send a second access request to the resource . Fulfillment of the second access request can entail accessing the resource in the same way as the first access request. For example if the first access request comprised a request to retrieve an email address of a particular employee the second access request can also comprise a request to retrieve the email address of the particular employee.

When the resource receives the second access request the resource determines based on the passive security token whether the user is authorized to access the resource . In various embodiments the resource determines whether the user is authorized to access the resource in various ways. For example the server system can provide a federation component a token handler component a session authentication component and an authorization component. In this example the resource forwards the passive security token to the federation component. The federation component determines whether the passive security token was digitally signed or encrypted by a security token service trusted by the resource . If the passive security token was digitally signed or encrypted by a trusted security token service the federation component forwards the passive security token to the token handler component. The token handler component determines whether the passive security token include claims required to access the resource . In this example if the passive security token includes claims required to access the resource the authorization component indicates to the resource that the user is authorized to access the resource .

Assuming that the resource determines that the user is authorized to access the resource the resource sends a first access response to the passive component . The first access response is a HTTP response that is responsive to the second access request. The first access response indicates that the second access request was successful. For example the first access request can include data that explicitly or implicitly indicate that the server system was able to fulfill the second access request.

The first access response comprises a cookie. The cookie in the first access response contains the passive security token. In addition to the cookie the first access response can include various types of data. For example if the second access request comprised a request to retrieve an email address of a particular employee as discussed in previous examples the first access response can include the email address of the particular employee.

When the passive component receives the cookie the passive component stores the cookie in the cookie cache along with the domain name of the server system . For example if the domain name of the server system is www.contoso.com the passive component stores the cookie in the cookie cache along with the domain name www.contoso.com. 

The passive component may need to access the resource again. For example the passive component may need an email address for a second employee. Accordingly the passive component sends a third access request to the resource . The third access request includes the cookie containing the passive security token. When the resource receives the third access request the resource determines that the user is authorized to access the resource based on the passive security token within the cookie in the third access request . Accordingly the resource responds to the third access request by sending a second access response . The second access response is a HTTP response that is responsive to the third access request. The second access response indicates that the third access request was successful. For example if the third access request comprises a request for an email address of the second employee the second access response can comprise the email address of the second employee.

When the STS receives the token request the STS sends a credential request to the passive component . The credential request indicates that the STS needs a credential received from the user . For example the credential request can indicate that the STS needs a username and password from the user .

In response to the credential request the passive component prompts the user to provide the credential . For example the passive component can cause the client device to display to the user a dialog box requesting the credential. Subsequently the passive component receives the credential from the user . When the passive component receives the credential from the user the passive component sends the credential to the STS .

When the STS receives the credential the STS validates the credential . For example the credential can be a username password combination. In this example the STS can determine that the username password combination matches a stored username password combination.

Assuming that the STS successfully validates the credential the STS sends a claims request to the claim provider . The claims request comprises a request for the claim provider to provide one or more claims. A claim is a declaration made by an entity. In the context of the entity can be the claim provider . In some embodiments the claims request specifies which claims are to be provided by the claim provider .

In response to the claims request the claim provider returns one or more claims to the STS . The claims can be declare various things. For example one of the claims can declare that the user has a particular role e.g. engineer in a company. In another example one of the claims can declare that the user is younger than eighteen years of age.

Upon receiving the claims from the claim provider the STS generates the passive security token . In general a security token represents a collection of claims. The passive security token generated by the STS represents a collection of claims that includes one or more of the claims returned by the claim provider .

In various embodiments the passive security token can be formatted in various ways. For example the passive security token can be formatted as a Security Assertion Markup Language SAML formatted security token. Furthermore in some embodiments the passive security token can be a signed security token. A signed security token is a security token that is asserted and cryptographically signed by a specific authority. For instance a signed security token can be an X.509 certificate or a Kerberos ticket.

After the STS generates the passive security token the STS sends a redirection response to the passive component . The redirection response includes the passive security token. Furthermore the redirection response instructs the passive component to automatically send to the resource an access request containing the passive security token. In this way the passive component receives the passive security token and automatically sends the second access request.

The security policy of the resource can specify a set of claims that a user must be able to provide in order to be authorized to access the resource . For example the security policy of the resource can specify that a user must be able to provide a claim indicating that the user is an employee in a particular department of a company. In some embodiments the security policy of the resource conforms to the WS Policy specification recommended by OASIS.

In another example the active component can send an access request to the resource instead of sending the policy request. The access request comprises a SOAP request whose fulfillment entails accessing the resource . For example the resource can be an endpoint for a directory service that provides contact information for employees of a company. In this example the first access request can comprise a request to retrieve a vCard for a particular employee of the company. The access request does not include a security token. Because the access request does not include a security token the resource does not allow the user to access the resource in the manner entailed by the resource request. Rather the resource sends an error message to the active component in response to the access request. The error message includes the security policy of the resource . Thus the active component receives the security policy of the resource if the active component sends a policy request or an access request to the resource .

After the active component receives the security policy of the resource the active component sends a token request to the STS . The active component sends the token request to the STS as an HTTP request that encapsulates a SOAP request for a security token that includes claims required by the security policy of the resource . The HTTP request also includes the cookie that contains the passive security token.

When the passive component received the cookie from the resource the passive component stored the cookie into the cookie cache along with the domain name of the server system . When the application or components of the application send a HTTP request to a server having a particular domain name the cookie cache is checked to determine whether the cookie cache contains a cookie associated with the particular domain name. If the cookie cache contains a cookie associated with the particular domain name the application sends the cookie to the server with the HTTP request. Because the passive component stored a cookie associated with the domain name of the server system into the cookie cache and because the STS is at the server system the active component sends the token request to the resource in a HTTP request that includes the cookie containing the passive security token.

When the STS receives the token request the STS determines whether the token request was sent in a HTTP request that includes a cookie containing a security token . If the STS determines that the token request was sent in a HTTP request that does not include a cookie containing a security token the STS can send a message to the active component requesting one or more credentials for the user . In response the active component can prompt the user to provide the credentials.

Assuming however that the token request was sent in a HTTP request that includes a cookie containing a security token the STS validates the security token . In other words the STS determines whether the security token was issued by a security token service trusted by the STS . In the current context the security token is the passive security token previously issued by the STS . The STS is able to determine that the passive security token was previously issued by the STS because the STS is able to determine that the STS cryptographically signed the passive security token. The STS is a security token service trusted by the STS . Hence the STS can be confident that the security token is authentic. The fact that the STS previously issued the passive security token also indicates to the STS that the STS has previously authenticated an identity of the user . Therefore there is no need for the STS to send to the active component a request for credential in order to authenticate an identity of the user again.

In some embodiments the STS can perform one or more additional actions to validate the passive security token. For example the passive security token can be associated with an expiration period. In this example the STS validates the passive security token when the expiration period for the passive security token is not yet expired. In this example if the expiration period for the passive security token has expired the STS does not validate the passive security token. Accordingly the STS can send a credential request that requests a credential from the user .

After validating the passive security token the STS sends a claim request to the claim provider for claims regarding the user . As mentioned above the token request can specify claims required by the security policy of the resource . In such instances the claim request can request one or more of the claims required by the security policy of the resource . In response to the claim request the claim provider provides one or more claims to the STS .

When the STS receives the claims from the claim provider the STS generates a new security token . This patent document can refer to this new security token as the active security token. The active security token represents a collection of claims that includes one or more of the claims provided by the claim provider . In some embodiments the passive security token and the active security token include different claims. In various embodiments the active security token can be formatted in various ways. For example the active security token can be formatted as a SAML formatted security token. Furthermore in some embodiments the active security token can be a signed security token.

After generating the active security token the STS sends a token response to the active component . The token response comprises a SOAP response that is responsive to the token request. The token response includes the active security token.

Subsequently the active component sends an access request to the resource . The access request comprises a SOAP request that includes the active security token. Fulfillment of the access request entails accessing the resource . Fulfillment of the access request can entail accessing the resource in various ways. For example the resource can be an endpoint for a directory service that provides contact information for employees of a company. In this example the first access request can comprise a request to retrieve a vCard for a particular employee of the company.

When the resource receives the access request the resource determines based on the active security token in the access request whether the user is authorized to access the resource . In various embodiments the resource can perform various actions to determine whether the user is authorized to access the resource . For example the resource can determine whether the active security token is cryptographically signed by a security token service trusted by the resource . Furthermore the resource can determine whether the active security token includes the claims required by the security policy of the resource .

If the resource determines that the user is authorized to access the resource the resource sends an access response to the active component . The access response includes a SOAP response that is responsive to the access request. The access response indicates that the access request was successful. The access response can include various types of data. For example if the access request comprises a request to retrieve a vCard for a particular employee of the company the access response can include the vCard for the particular employee. This patent document can refer to access requests sent by the active component as active access requests.

In some embodiments the server system can provide one or more resources in addition to the resource . For example the server system can provide endpoints for other web services. In such embodiments the active component can perform the actions illustrated in the example of with regard to one of the additional resources instead of the resource . Thus the active component may be able to access the additional resource without prompting a user for a credential even though the passive component did not access the additional component.

The term computer readable media as used herein may include computer storage media and communication media. As used in this document a computer storage medium is a device or article of manufacture that stores data and or computer executable instructions. Computer storage media may include volatile and nonvolatile removable and non removable devices or articles of manufacture implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. By way of example and not limitation computer storage media may include dynamic random access memory DRAM double data rate synchronous dynamic random access memory DDR SDRAM reduced latency DRAM DDR2 SDRAM DDR3 SDRAM solid state memory read only memory ROM electrically erasable programmable ROM optical discs e.g. CD ROMs DVDs etc. magnetic disks e.g. hard disks floppy disks etc. magnetic tapes and other types of devices and or articles of manufacture that store data. Communication media may be embodied by computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal may describe a signal that has one or more characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media may include wired media such as a wired network or direct wired connection and wireless media such as acoustic radio frequency RF infrared and other wireless media.

In the example of the computing device comprises a memory a processing system a secondary storage device a network interface card a video interface a display unit an external component interface and a communication medium . The memory includes one or more computer storage media capable of storing data and or instructions. In different embodiments the memory is implemented in different ways. For example the memory can be implemented using various types of computer storage media.

The processing system includes one or more processing units. A processing unit is a physical device or article of manufacture comprising one or more integrated circuits that selectively execute software instructions. In various embodiments the processing system is implemented in various ways. For example the processing system can be implemented as one or more processing cores. In another example the processing system can comprise one or more separate microprocessors. In yet another example embodiment the processing system can comprise an application specific integrated circuit ASIC that provides specific functionality. In yet another example the processing system provides specific functionality by using an ASIC and by executing computer executable instructions.

The secondary storage device includes one or more computer storage media. The secondary storage device stores data and software instructions not directly accessible by the processing system . In other words the processing system performs an I O operation to retrieve data and or software instructions from the secondary storage device . In various embodiments the secondary storage device comprises various types of computer storage media. For example the secondary storage device can comprise one or more magnetic disks magnetic tape drives optical discs solid state memory devices and or other types of computer storage media.

The network interface card is a device or article of manufacture that enables the computing device to send data to and receive data from a communication network. In different embodiments the network interface card is implemented in different ways. For example the network interface card can be implemented as an Ethernet interface a token ring network interface a fiber optic network interface a wireless network interface e.g. Wi Fi WiMax etc. or another type of network interface.

The video interface enables the computing device to output video information to the display unit . The display unit can be various types of devices for displaying video information such as a cathode ray tube display an LCD display panel a plasma screen display panel a touch sensitive display panel an LED screen or a projector. The video interface can communicate with the display unit in various ways such as via a Universal Serial Bus USB connector a VGA connector a digital visual interface DVI connector an S Video connector a High Definition Multimedia Interface HDMI interface or a DisplayPort connector.

The external component interface enables the computing device to communicate with external devices. For example the external component interface can be a USB interface a FireWire interface a serial port interface a parallel port interface a PS 2 interface and or another type of interface that enables the computing device to communicate with external devices. In various embodiments the external component interface enables the computing device to communicate with various external components such as external storage devices input devices speakers modems media player docks other computing devices scanners digital cameras and fingerprint readers.

The communications medium facilitates communication among the hardware components of the computing device . In the example of the communications medium facilitates communication among the memory the processing system the secondary storage device the network interface card the video interface and the external component interface . The communications medium can be implemented in various ways. For example the communications medium can comprise a PCI bus a PCI Express bus an accelerated graphics port AGP bus a serial Advanced Technology Attachment ATA interconnect a parallel ATA interconnect a Fiber Channel interconnect a USB bus a Small Computing system Interface SCSI interface or another type of communications medium.

The memory stores various types of data and or software instructions. For instance in the example of the memory stores a Basic Input Output System BIOS and an operating system . The BIOS includes a set of computer executable instructions that when executed by the processing system cause the computing device to boot up. The operating system includes a set of computer executable instructions that when executed by the processing system cause the computing device to provide an operating system that coordinates the activities and sharing of resources of the computing device . Furthermore the memory stores application software . The application software comprises computer executable instructions that when executed by the processing system cause the computing device to provide one or more applications. The memory also stores program data . The program data is data used by programs that execute on the computing device .

The various embodiments described above are provided by way of illustration only and should not be construed as limiting. Those skilled in the art will readily recognize various modifications and changes that may be made without following the example embodiments and applications illustrated and described herein. For example the operations shown in the figures are merely examples. In various embodiments similar operations can include more or fewer steps than those shown in the figures. Furthermore in other embodiments similar operations can include the steps of the operations shown in the figures in different orders. Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

