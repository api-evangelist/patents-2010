---

title: System and method of presenting entities of standard applications in wireless devices
abstract: A method of presenting data entities of standard device applications in wireless devices is provided. Component-based applications are hosted on a wireless device providing an application runtime environment for hosting at least one component-based application. Component definitions are hosted for developing the component-based application. A standard data component implements a standard data component definition; the standard data component definition is embedded into the component-based application definition during development. The standard data component providing access to a standard device data entity by invoking device dependent APIs the standard data component presenting the standard device data entity as a user defined data component. The application runtime environment automatically making functionality available of the user defined data components available to standard data component.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08391845&OS=08391845&RS=08391845
owner: Research In Motion Limited
number: 08391845
owner_city: Waterloo
owner_country: CA
publication_date: 20101022
---
This non provisional application claims benefit to U.S. Provisional Application 60 672 032 filed on Apr. 18 2005 and is a continuation of U.S. patent application Ser. No. 11 405 510 filed Apr. 18 2006 which are hereby incorporated by reference.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent files or records but otherwise reserves all copyrights whatsoever.

The present disclosure relates generally to a communications system for providing communications to a plurality of devices and specifically to a system and method of presenting entities of standard device applications in wireless devices.

Due to the proliferation of wireless networks there are a continually increasing number of wireless devices in use today. These devices include mobile telephones personal digital assistants PDAs with wireless communication capabilities two way pagers and the like. Concurrently with the increase of available wireless devices software applications running on such devices have increased their utility. For example the wireless device may include an application that retrieves a weather report for a list of desired cities or an application that allows a user to shop for groceries. These software applications take advantage of the ability to transmit data of the wireless network in order to provide timely and useful services to users often in addition to voice communication. However due to a plethora of different types of devices restricted resources of some devices and complexity of delivering large amounts of data to the devices developing software applications remains a difficult and time consuming task.

A wireless handheld device has limited battery power memory and processing capacity. Since communication on a device is very expensive in terms of energy consumption it is desirable to minimize resource use of the device as much as possible.

Devices from different manufacturers expose standard device application data entities SDADEs by providing their in house application programming interfaces APIs which are usually not compliant to each other. Following the traditional way of developing a device application a third party device application vendor tailors or re develops applications on a per device manner in order to use specific vendors proprietary function calls to access SDADEs. Furthermore for a specific device the same piece of code has to be rewritten for each of its applications in order to access the device s SDADEs which should be avoided by somehow sharing the code among these applications.

A method of presenting data entities of standard device applications as built in data components is provided. Standard device application data entities SDADEs include but are not limited to Contact Email Task ToDo which are usually exposed by their owner standard device applications to non standard or user developed device applications in the form of application programming interfaces APIs .

In accordance with an aspect there is provided a method of presenting data entities of standard device application in a wireless device the method comprising hosting component based applications on the wireless device providing an application runtime environment for hosting at least one component based application hosting component definitions for developing the component based application the definitions comprising a data component for representing application specific data a non data component for representing non data components and a standard data component for representing standard built in data on the device storing device and device specific application programming interfaces APIs wherein the standard data component implements a standard data component definition the standard data component definition embedded into the component based application definition during development the standard data component providing access to a standard device data entity by invoking the device dependent APIs the standard data component presenting the standard device data entity as a user defined data component the application runtime environment automatically making functionality available of the user defined data components available to standard data component.

Advantageously presenting SDADEs as built in data components of these non standard device applications standardizes and simplifies the access to SDADEs. A device application with such built in SDADEs can access standard data entities exposed by standard device applications in the same way as they access their own data components without conducting API function invocations which are usually device dependent.

A system and method of the present patent disclosure will now be described with reference to various examples of how the embodiments can best be made and used. For convenience like reference numerals are used throughout the description and several views of the drawings to indicate like or corresponding parts wherein the various elements are not necessarily drawn to scale.

Referring to an example of communication infrastructure is illustrated generally by numeral . The communication infrastructure comprises a plurality of wireless devices a communication network an application gateway and a plurality of backend services .

The wireless devices are typical personal digital assistants PDAs but may include other devices. Each of the wireless devices includes a runtime environment capable of hosting a plurality of component applications.

Component applications comprise one or more data components presentation components and or message components which are written in a structured definition language such as Extensible Markup Language XML code. The component applications can further comprise workflow components which contain a series of instructions such as written in a subset of ECMAScript and can be embedded in the XML code in some implementations. Therefore since the applications are compartmentalized a common application can be written for multiple devices by providing corresponding presentation components without having to rewrite the other components. Further large portions of the responsibility of typical applications are transferred to the runtime environment for component application. The details of the component applications are described at the end of this description.

The wireless devices are in communication with the application gateway via the communication network . Accordingly the communication network may include several components such as a wireless network a relay a corporate server and or a mobile data server for relaying data between the wireless devices and the application gateway .

The application gateway comprises a gateway server a provisioning server and a discovery server . The gateway server acts as a message broker between the runtime environment on the wireless devices and the backend servers . The gateway server is in communication with both the provisioning server and the discovery server . The gateway server is further in communication with a plurality of the backend servers such as Web services database services as well as other enterprise services via a suitable link. For example the gateway server is connected with the Web services and database services via simple object access protocol SOAP and Java database connectivity JDBC respectively. Other types of backend servers and their corresponding links can be connected to the gateway server .

Preferably each wireless device is initially provisioned with a service book or IT policy facility to establish various protocols and settings including connectivity information for the corporate server and or the mobile data server . These parameters may include a uniform resource locator URL for the application gateway server as well as its encryption key. Alternatively if the wireless device is not initially provisioned with the URL and encryption key they may be pushed to the wireless device via the mobile data server . The mobile device can then connect with the application gateway via the URL of the application gateway server .

Referring to there is illustrated in a flow diagram an example of a wireless component application communication model . From a high level perspective the overall wireless component application infrastructure includes a wireless component application runtime environment device RE running on the device and a wireless component application gateway AG running on the server .

The AG serves as a mediator between a wireless component application sometimes referred to as application in this disclosure executed by the RE and one or more back end services with which the application communicates. Often the back end service is expected to be a Web service using SOAP over HTTP or HTTPS as the transport protocol. As Web services are the most commonly expected back end service the term Web service is used interchangeable with back end service throughout this disclosure. However it is appreciated that other types of back end services can also be adapted to the disclosure. exemplifies a synchronous link with a back end service . However it should be appreciated that the AG can be in communication with back end services over asynchronous links.

The wireless component application communication model is based upon an asynchronous messaging paradigm. In this model the application gateway AG establishes and mediates the connection between the device and the back end service s to 

Referring to there is illustrated in a sequence diagram an example of a communication sequence for the wireless component application communication model of . The diagram describes the communications sequence between the device and the back end service s 

Mobile Application Definition The application definition is the XML representation of the application containing a data model data types a visual model screens layouts menus controls a communication model messages and other resources. The communication model of the application aggregates the use of various data sources on the server side. To the runtime environment the application communication is uniformly handled as if it is with just one data source.

Mobile Application Index of Data Sources This is a list of the Data Sources participating in the application. The list refers to the data source definitions also included in the bundle.

Mobile Application Data Source Definitions The application bundle contains one definition per data source. This defines the data source communication model external API and the data types used by it.

Mobile Application Communication Mapping The application communication mapping defines the association between the application communication model and the data source communication model that needs to be used in order to effectively map the application data at runtime.

Mobile Application Connectivity Information Service Descriptor The Service Descriptor contains information e.g. credentials necessary to connect to the data source in order to enable data flow update data source retrieve data from data source .

Data Source Mapping Loading Process During application upload installation to a particular device some portions of the application bundle are loaded by the server proxy and stored locally. The server proxy will later use this information at runtime to serve the mobile application communication with the various data sources that it was built to communicate with.

Referring to a more detailed view of an example of the application gateway is shown. The application gateway server includes three layers of service a base services layer an application gateway services layer and an application services layer . The application gateway server further includes an administration service .

A provisioning service and a discovery service are provided by the provisioning server and discovery server respectively.

At the lowest level the base services layer offers basic domain independent system services to other components in higher levels. Thus for example all subsystems in the application gateway services layer and the application services layer can utilize and collaborate with the subsystems in the base services layer . In the present embodiment the base services layer includes a utilities subsystem a security subsystem a configuration subsystem and a logging subsystem .

The application gateway services layer provides wireless component application domain specific services. These services provide efficient message transformation and delivery to backend systems and provide wireless device and component application lifecycle management. In the present embodiment the application gateway services layer includes a lifecycle subsystem a connector subsystem a messaging subsystem and a transformation subsystem .

The application services layer sits at the top of the architecture and provides external program interfaces and user interfaces using subsystems provided by the lower layers. For example various applications such as a service provider lifecycle application a packaging application and a message listening application provide external program interfaces since they communicate primarily with applications on external systems. Similarly an administration application provides a user interface by providing a user with the ability to access and potentially modify application gateway data and or parameters.

The administration service is responsible for administrative system messages administration of the wireless devices runtime administration of the application gateway subsystems support and display system diagnostics and administration of default implementations of the provisioning and discovery services.

The messaging listening application or messaging listeners provides an interface for receiving messages from the wireless devices as well as external sources and forwarding them to the messaging subsystem. Further the message listening application typically authenticates that the source of the message is valid.

Referring to an example of the message listening application is shown in greater detail. The message listening application includes three listeners a notification listener a compact message listener and a mobile data service acknowledgement listener . The notification listener receives notification and response messages from event sources via a notification interface . Other message listener interfaces may be added.

In one embodiment the notification interface may be implemented using Web Service WS Eventing. Web services often want to receive messages when events occur in other services such as the event sources and applications. A mechanism for registering interest is provided in the art by WS Subscription. WS Subscription defines a protocol for one Web service referred to as a subscriber to register interest with another Web service referred to as an event source for receiving messages about events referred to as notifications. When the event source notifies the subscriber of an event it is referred to as WS Eventing.

The compact message listener receives messages from the mobile devices via a compact message interface . The mobile data service acknowledgment listener receives and acknowledges notifications from the mobile data service via a mobile data service interface . Each of the three listeners and receive administrative messages from the administration service via a listener administrative interface .

In the present embodiment the listener interfaces and are configured using Hypertext Transfer Protocol Hypertext Transfer Protocol over Secure Socket Layer HTTP HTTPS . However these protocols have been selected as a design choice and other protocols may be used when desired. Accordingly external systems transmit a HTTP HTTPS request which is received by the appropriate listener. The listener takes the message makes minimal transformations and forwards it to the messaging subsystem . The transformations include copying HTTP header information into message object fields. For example the HTTP header information may identify the mobile data service and wireless device from which the message originated.

As previously described the message listening application authenticates that the source of the message be it the mobile data service the wireless device or event source is valid.

Further if reliable messaging is required service availability is ensured and the listeners deal with solutions to availability attacks. In order to facilitate this the messaging subsystem defines a threshold for a maximum number of messages and connections for a given time period from any backend server component application or wireless device. The administrator can modify this threshold as desired as well as allow for specific exceptions via the administration service .

Further since message interception and replay attack is possible the listeners detect and prohibit this attack using mechanisms that identify replayed messages. These mechanisms typically include the use of a nonce. A nonce is defined as parameter that varies with time. A nonce can be a timestamp or other special marker intended to limit or prevent the unauthorized replay or reproduction of a message. Because a nonce changes with time it can be used to determine whether or not a message is original or a replay or reproduction of the original message. The use of a nonce for preventing interception and replay attacks is known in the art and need not be described in detail as standard implementations are utilized.

Further other technologies such as sequencing can also be used to prevent replay of application messages in addition to or in lieu of the time timestamp technique. Once again such techniques are known in the art and need not be described in detail as standard implementations are utilized.

Referring to an example of the lifecycle subsystem is shown in greater detail. The lifecycle subsystem includes a lifecycle service and a device depot .

The lifecycle service processes device initiated messages that relate to the wireless device the runtime environment lifecycle and the component application lifecycle. Such messages for example may relate to a wireless device registration or suspension wireless device swap wireless device availability a component application installation upgrade or deletion and runtime environment upgrades. These messages are communicated to and from the connector subsystem via a device system message processing interface .

The lifecycle service further provides the ability to query for wireless devices and component application using various filters. In order to facilitate this feature the lifecycle service communicates with the messaging subsystem and the administration subsystem via a device information query update interface . In the present embodiment the device information query update interface is implemented using a set of Java application program interfaces APIs for querying and updating device information. Typical interfaces include those for managing the wireless device s security and client administration policy.

The lifecycle subsystem manages a security profile for each wireless device registered with the application gateway in the device depot . Each security profile includes a secure symmetric key for each device. This key is used for secure communication between the wireless device and application gateway .

The client administration policy includes retrieving wireless device status searching for component applications satisfying certain modifiable criteria and searching for devices satisfying certain modifiable criteria. For example it may be desirable to determine which component applications are installed on all the wireless devices or which wireless devices have specific component applications installed.

Yet further a lifecycle administration interface is provided for facilitating the management of the lifecycle subsystem and the device depot by the administration subsystem . For example the administration subsystem can indicate the availability of a new version of a component application or the runtime environment.

Accordingly the lifecycle service manages the status of each of a plurality of assigned wireless devices including the runtime environment and component applications stored therein. Information such as the runtime environment component application status and the wireless device security settings are stored in the device depot . The security settings may include for example client administration policy and the wireless device s encryption key.

The application gateway server also allows for the use of third party lifecycle components also referred to as lifecycle service providers which are typically external to the application gateway . In order to facilitate lifecycle service providers lifecycle service provider listeners are provided at the application services layer. The lifecycle service provider listeners are responsible for receiving notification on all lifecycle system messages from the lifecycle service providers and transmitting them to the administration subsystem for processing. Further the lifecycle service providers can access the administration service to configure the application gateway server or send system messages.

The administration subsystem administers system messages system devices application gateway subsystems system diagnostics and default implementations of the provisioning and discovery services. Referring to a more detailed view of an example of the administration subsystem is shown. The administration subsystem includes an administration service an administration console and administration applications . The administration applications include a Java Management Extension JMX application and a Web service application .

A browser interface couples an administrator with the administrator console for administrating the application gateway . An administrator interface couples the administration service with the messaging subsystem for delivering administrative system messages. The administration applications are coupled to their respective third party administrative applications via an appropriate interface. For example the JMX application is coupled via a JMX interface and the Web service application is coupled via a Web service interface .

The administration service processes component application and runtime environment lifecycle events initiated by the administrator or the lifecycle service providers through the lifecycle administration interface. Examples of such events include installing a component application using push provisioning refreshing the encryption key upgrading the component application or runtime components removing component applications quarantining component applications and removing component applications from quarantine applying component application cleanup script querying the runtime environment for a status update and updating the client administration policy.

The administration service is also responsible for administration of the wireless devices . Accordingly the administration service is capable of responding to wireless device registration system messages and maintaining wireless device settings such as the security key mobile data service URL runtime version and status. The administration service further supports the ability to list devices in accordance with predefined filter characteristics such as querying a device for its component application and runtime environment settings and querying for component applications on specific devices.

The administration service also provides the administrator with the ability to access application gateway subsystems runtime information and settings per cluster node if applicable and perform system related tasks. Such tasks include viewing the message subsystem runtime information including message information per wireless device and per component application as well as the number of messages in queue and a snapshot of the number of pooled objects of specific type. The administrator is able to modify specific settings at runtime as well as delete or reschedule expired messages.

Other information and settings provided by the administration service includes the following. The application gateway subsystem parameters are available for modification. Therefore for example the administrator can enable and disable various features at runtime. Database settings can be configured for a centralized application gateway database. This database may include all of the subsystem depots. The application gateway URLs can be configured to be accessible to external systems. For example a URL may be assigned to the administration application to allow access by third parties. Also a URL may be assigned to the packaging application to allow access by the provisioning service.

The administration service may also store discovery service credentials service provider credentials mobile data service parameters and security parameters. The discovery service credentials can be used to authenticate the discovery service upon receiving a notification message that a component application is available. Similarly service provider credentials including its URL can be used to authenticate a service provider upon receiving component application or runtime environment lifecycle messages. Mobile data service parameters can be used to connect the administrator to the mobile data service and include its IP address user identification and password. The application gateway security parameters and settings such as the application gateway public and private key and key refreshing policy are used for encrypting communication between the application gateway and external applications.

The administration service is also used for registering additional subsystems such as custom connectors and lifecycle listeners for example.

The Web service application uses Web services for directing service provider initiated system messages to the administration service for processing and delivery to device if required.

Similarly the JMX application directs service provider initiated system messages to the administration service for processing and delivery to device if required. However the JMX interface is an open interface that any management system vendor can leverage. The administration infrastructure is based on JMX technology which is an open technology for system management and monitoring. Each management system implements a set of Mbeans objects in order to be configurable. These objects must be registered with an MbeanServer running in the process space of the object in accordance with JMX specification.

Since the application gateway can potentially run in a distributed environment that is some subsystems may run on different application servers then each application server needs to have its own implementation of the MbeanServer. Further each subsystem needs to be configured using a separate Administration Console provided by the corresponding application server or using third party console that knows how to access the functionality provided by MbeanServer.

A runtime environment framework container is a client resident container within which applications are executed on a device. The container manages the application lifecycle on the device provisioning execution deletion etc. and is responsible for translating the metadata XML representing an application into an efficient executable form on a device. The container provides a set of services to the application as well as providing support for optional JavaScript. These services include support for UI control data persistence and asynchronous client server messaging etc.

The application services module includes a screen service for providing an interface between currently running applications and a user an interpreter service for providing an execution environment for the applications a metadata service for handling and mediating application metadata related access and an access service for allowing applications to access other applications on the device .

The administration module includes a control center for handling a user interface of the wireless component application runtime environment framework processing user interaction with the wireless component application runtime environment framework and for integrating the wireless component application runtime environment framework with the network system .

The PLM services module includes a RE container for coordinating RE container upgrades and backup restore processes and for implementing a default error handling mechanism for the RE framework a discovery service module for locating applications in an application repository a provisioning service for application provisioning including application downloads installation and upgrades and a lifecycle service for registering maintaining information for and administrating applications.

The messaging module includes a messaging service module for message queuing message de compacting and message distribution.

The base services module includes a persistence service for storing a RE profile including its version directory client administration policy application administration policies security keys available upgrades etc. storing an application profile including its version metadata application persistence data components application persistable global data and application resource available upgrades etc. and storing reliable messages including outgoing messages pending delivery due to out of coverage and incoming reliable messages pending processing . The base services module also includes a securing service for restricting access to RE services providing message authentication integrity and encryption. The base services module also includes a communication service for sending and receiving messages in and out of the device downloading resources and files from appropriate repositories and notifying interested RE services about wireless coverage events.

The wireless component application daemon module includes a daemon for restarting the wireless component application process whenever it stops due to a fatal exception.

A common set of standard data component definitions is shared by the ARE module and the IDE as depicted in . An ARE module on a specific device accommodates corresponding standard component implementations of these definitions which provide access to standard device application data entities SDADEs by invoking device dependent APIs or making requests to device data repositories .

In one embodiment of a CBA types of components for an application include i data having behaviors to create remove load persistent update and other data operations ii messages having a send behavior and iii a screen having behaviors to display refresh close and other screen related operations. With respect to a data component along with the aforementioned behaviors for individual data components a search function may be available to a set of data components or a data collection. Preferably the search function of data components is built in into the ARE and automatically available to all user defined and standard data components this means by representing these standard application data e.g. Calendar Task etc. as standard built in data components in CBA has another benefit functions available for normal data components are automatically accessible by a standard data component. For example a user can search for a Task without writing any extra code.

Standard data components SDCs are built in data components to a CBA . The definitions of SDCs SDCDs are standardized to a specific series of devices or devices of a specific manufacturer and encompassed by the IDE and ARE modules . A SDC acts as a developer defined data components but is a front end to the data of the associated device repository data or device APIs .

As shown in the ARE module and IDE share a common set of standard data component definitions SDCDs . The ARE module provides a runtime context and implementation of the SDCDs while the IDE offers application developers the facilities of accessing and embedding SDCDs into the applications in the development stage. SDCDs of an ARE module and an IDE are to be in sync. Furthermore a mechanism could be introduced into the IDE to provide different versions of SDCDs for different targeted ARE modules . For example the mechanism can be implemented as a common set of Java interfaces or classes if Java is being used that are shared by the ARE and the IDE . When the IDE is dealing with devices that have different definitions of standard data a configuration is introduced so the developer can choose which type of devices are the target platform for a specific application allow for the standard definition for those specific devices to be used.

Advantageously in a component based application the access to a built in data repository of a device is presented as a access to standard data components SDC thereby eliminating the need for additional and non reusable between device applications code in each application as would be the case for a traditional application exposing the access as device APIs. Moreover when developing a CBA with built in standard data components a developer does not have to use platform dependent APIs and implement corresponding code to access standard data repositories e.g. Contact Email Task etc. as is usually inevitable for a traditional application. Advantageously by operating on SDCs in a manner used for a normal data component data in a standard repositories can be created modified deleted and or searched in a device independent means.

Functions of an SDC that are not available through device application programming interfaces APIs can be incorporated into as behaviors or functions of data components which automatically become available to SDCs . For example in the development of CBA with built in SDCs search functions can be defined and incorporated into data components which become available to a SDC . For example a Contact search function is usually not directly available through a device API. Without built in SDCs a developer has to implement the search function for each of device data repositories and the code written is not sharable among device applications that require the same function.

One example of a Contact application standard data component in an embodiment of the data entity representation system is provided below. There are other possible implementations.

The data entity presentation system and methods according to the present disclosure may be implemented by any hardware software or a combination of hardware and software having the above described functions. The software code either in its entirety or a part thereof may be stored in a computer readable memory. Further a computer data signal representing the software code which may be embedded in a carrier wave may be transmitted via a communication network. Such a computer readable memory and a computer data signal are also within the scope of the present disclosure as well as the hardware software and the combination thereof.

While particular embodiments of the present disclosure have been shown and described changes and modifications may be made to such embodiments without departing from the true scope of the disclosure.

