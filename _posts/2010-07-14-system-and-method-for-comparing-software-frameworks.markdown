---

title: System and method for comparing software frameworks
abstract: In one embodiment, a method may include symbolically executing application code on a first framework. The method may also include creating a first model based on the symbolic execution of the first framework. The method may additionally include symbolically executing the application code on a second framework. The method may further include creating a second model based on the symbolic execution of the first framework. The method may also include determining one or more parameters associated with the first framework based on the first model. The method may additionally include determining one or more parameters associated with the second framework based on the second model. The method may also include selecting one of the first framework and the second framework as a desired framework for execution of the application code based on a comparison of the one or more parameters associated with the first framework and the one or more parameters associated with the second framework.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09477928&OS=09477928&RS=09477928
owner: Fujitsu Limited
number: 09477928
owner_city: Kawasaki
owner_country: JP
publication_date: 20100714
---
In developing Web applications developers often use JavaScript. JavaScript is a language standard that is typically used to enable programmatic access to computational objects within a host environment. It may be characterized as a prototype based object oriented scripting language that is dynamic weakly typed and has first class functions. JavaScript is primarily used in the form of client side JavaScript implemented as part of a Web browser in order to provide enhanced user interfaces and dynamic websites.

In developing JavaScript applications developers may choose from multiple JavaScript frameworks. Examples of JavaScript frameworks are Dojo Yahoo User Interface YUI and others. Generally speaking a framework is an abstraction in which common code providing generic functionality can be selectively overridden or specialized by user code providing specific functionality. Frameworks are a special case of software libraries in that they are reusable abstractions of code wrapped in a well defined application programming interface API yet they contain some key distinguishing features that separate them from normal libraries. Among these distinguishing features are inversion of control e.g. in a framework unlike in libraries or normal user applications the overall program s flow of control is not dictated by the caller but by the framework default behavior e.g. a framework has a default behavior extensibility e.g. a framework can be extended by the user usually by selective overriding or specialized by user code providing specific functionality and non modifiable framework code e.g. framework code in general is not allowed to be modified users can extend the framework but not modify its code .

Despite the many choices of frameworks developers are often not able to determine which of the frameworks may be more desirable to use e.g. which framework will execute faster the number of inputs required the number of constraints etc. .

The present invention provides a method and a system for comparing software frameworks that substantially eliminates or reduces at least some of the disadvantages and problems associated with previous methods and systems.

In accordance with a particular embodiment of the present invention a method may include symbolically executing application code on a first framework. The method may also include creating a first model based on the symbolic execution of the first framework. The method may additionally include symbolically executing the application code on a second framework. The method may further include creating a second model based on the symbolic execution of the first framework. The method may also include determining one or more parameters associated with the first framework based on the first model. The method may additionally include determining one or more parameters associated with the second framework based on the second model. The method may also include selecting one of the first framework and the second framework as a desired framework for execution of the application code based on a comparison of the one or more parameters associated with the first framework and the one or more parameters associated with the second framework.

Technical advantages of particular embodiments of the present invention include a methodology whereby software frameworks may be compared.

Other technical advantages will be readily apparent to one skilled in the art from the following figures descriptions and claims. Moreover while specific advantages have been enumerated above various embodiments may include all some or none of the enumerated advantages.

Application may include any program of instructions operable to when executed by a processor perform one or more tasks e.g. render at least a portion of a Web application . In some embodiments application may be written in JavaScript code.

As described above comparison toolkit may compare execution of application code on at least two or more frameworks. In certain embodiments the frameworks may include JavaScript frameworks e.g. DoJo YUI etc. . In these and other embodiments comparison toolkit may compare frameworks by applying application code to each framework using symbolic execution. illustrates example symbolic execution. As shown in each path in the tree represents a possibly infinite set of execution paths. To check the property if a 1 b 0 c 2 using symbolic execution as illustrates the property may be negated the negation being if a 1 b 0 c 2 and the negation may be checked at the end of each path of the symbolic execution. For the execution path ending with z x y z 0 an integer linear programming ILP solver or a solver using another suitable decision procedure may attempt to find a solution to the following first set of equations x 1 y 0 z x y z 0 and z 2. For the execution path ending with z x y 1 z 0 an ILP solver or a solver using another suitable decision procedure may attempt to find a solution to the following second set of equations x 1 y 0 z x y 1 z 0 and z 2. In both sets of equations the first two equations x 1 and y 0 may be preconditions and the last equation z 2 may be a post condition. If no solution is found for the first or second set of equations the property if a 1 b 0 c 2 is true. If a solution is found for the first or second set of equations the property is false and the solution is a counter example violating the property.

Based on the symbolic executions of the application code on the plurality of frameworks comparison toolkit may create a model e.g. control flow graph tree or another representation for each framework execution. Comparison toolkit may based on each model determine one or more parameters for each framework execution. In some embodiments such parameters may be output by comparison toolkit as comparison data . The one or more parameters may include estimated execution time for the application code using the framework number of inputs required for the execution of the application code using the framework number of constraints of the execution of the application code using the framework or any other suitable parameter.

In some embodiments comparison toolkit may determine a desired framework to be used for the application code based on the one or more parameters e.g. comparison toolkit may select the framework that provides the fastest execution of application code . In certain of these embodiments the determination of the desired framework may be output by comparison toolkit as a portion of comparison data . In other embodiments a developer of application code or another person may determine a desired framework based on analysis of the one or more parameters.

At step comparison toolkit may symbolically execute application code on each of a plurality of frameworks.

At step based on the symbolic executions of the application code on the plurality of frameworks comparison toolkit may create a model e.g. control flow graph tree or another representation for each framework execution.

At step comparison toolkit may based on each model determine one or more parameters for each framework execution.

At step comparison toolkit and or a developer of application code may determine a desired framework to be used for the application code based on the one or more parameters e.g. comparison toolkit may select the framework that provides the fastest execution of application code .

Although discloses a particular number of steps to be taken with respect to method method may be executed with greater or lesser steps than those depicted in . In addition although discloses a certain order of steps to be taken with respect to method the steps comprising method may be completed in any suitable order.

Method may be implemented using environment or any other system operable to implement method . In certain embodiments method may be implemented partially or fully in software and or firmware embodied in computer readable media.

This disclosure contemplates any suitable number of computer systems . This disclosure contemplates computer system taking any suitable physical form. As example and not by way of limitation computer system may be an embedded computer system a system on chip SOC a single board computer system SBC such as for example a computer on module COM or system on module SOM a desktop computer system a laptop or notebook computer system an interactive kiosk a mainframe a mesh of computer systems a mobile telephone a personal digital assistant PDA a server or a combination of two or more of these. Where appropriate computer system may include one or more computer systems be unitary or distributed span multiple locations span multiple machines or reside in a cloud which may include one or more cloud components in one or more networks. Where appropriate one or more computer systems may perform without substantial spatial or temporal limitation one or more steps of one or more methods described or illustrated herein. As an example and not by way of limitation one or more computer systems may perform in real time or in batch mode one or more steps of one or more methods described or illustrated herein. One or more computer systems may perform at different times or at different locations one or more steps of one or more methods described or illustrated herein where appropriate.

In particular embodiments computer system includes a processor memory storage an input output I O interface a communication interface and a bus . Although this disclosure describes and illustrates a particular computer system having a particular number of particular components in a particular arrangement this disclosure contemplates any suitable computer system having any suitable number of any suitable components in any suitable arrangement.

In particular embodiments processor includes hardware for executing instructions such as those making up a computer program. As an example and not by way of limitation to execute instructions processor may retrieve or fetch the instructions from an internal register an internal cache memory or storage decode and execute them and then write one or more results to an internal register an internal cache memory or storage . In particular embodiments processor may include one or more internal caches for data instructions or addresses. The present disclosure contemplates processor including any suitable number of any suitable internal caches where appropriate. As an example and not by way of limitation processor may include one or more instruction caches one or more data caches and one or more translation lookaside buffers TLBs . Instructions in the instruction caches may be copies of instructions in memory or storage and the instruction caches may speed up retrieval of those instructions by processor . Data in the data caches may be copies of data in memory or storage for instructions executing at processor to operate on the results of previous instructions executed at processor for access by subsequent instructions executing at processor or for writing to memory or storage or other suitable data. The data caches may speed up read or write operations by processor . The TLBs may speed up virtual address translation for processor . In particular embodiments processor may include one or more internal registers for data instructions or addresses. The present disclosure contemplates processor including any suitable number of any suitable internal registers where appropriate. Where appropriate processor may include one or more arithmetic logic units ALUs be a multi core processor or include one or more processors . Although this disclosure describes and illustrates a particular processor this disclosure contemplates any suitable processor.

In particular embodiments memory includes main memory for storing instructions for processor to execute or data for processor to operate on. As an example and not by way of limitation computer system may load instructions from storage or another source such as for example another computer system to memory . Processor may then load the instructions from memory to an internal register or internal cache. To execute the instructions processor may retrieve the instructions from the internal register or internal cache and decode them. During or after execution of the instructions processor may write one or more results which may be intermediate or final results to the internal register or internal cache. Processor may then write one or more of those results to memory . In particular embodiments processor executes only instructions in one or more internal registers or internal caches or in memory as opposed to storage or elsewhere and operates only on data in one or more internal registers or internal caches or in memory as opposed to storage or elsewhere . One or more memory buses which may each include an address bus and a data bus may couple processor to memory . Bus may include one or more memory buses as described below. In particular embodiments one or more memory management units MMUs reside between processor and memory and facilitate accesses to memory requested by processor . In particular embodiments memory includes random access memory RAM . This RAM may be volatile memory where appropriate Where appropriate this RAM may be dynamic RAM DRAM or static RAM SRAM . Moreover where appropriate this RAM may be single ported or multi ported RAM. The present disclosure contemplates any suitable RAM. Memory may include one or more memories where appropriate. Although this disclosure describes and illustrates particular memory this disclosure contemplates any suitable memory.

In particular embodiments storage includes mass storage for data or instructions. As an example and not by way of limitation storage may include an HDD a floppy disk drive flash memory an optical disc a magneto optical disc magnetic tape or a Universal Serial Bus USB drive or a combination of two or more of these. Storage may include removable or non removable or fixed media where appropriate. Storage may be internal or external to computer system where appropriate. In particular embodiments storage is non volatile solid state memory. In particular embodiments storage includes read only memory ROM . Where appropriate this ROM may be mask programmed ROM programmable ROM PROM erasable PROM EPROM electrically erasable PROM EEPROM electrically alterable ROM EAROM or flash memory or a combination of two or more of these. This disclosure contemplates mass storage taking any suitable physical form. Storage may include one or more storage control units facilitating communication between processor and storage where appropriate. Where appropriate storage may include one or more storages . Although this disclosure describes and illustrates particular storage this disclosure contemplates any suitable storage.

In particular embodiments I O interface includes hardware software or both providing one or more interfaces for communication between computer system and one or more I O devices. Computer system may include one or more of these I O devices where appropriate. One or more of these I O devices may enable communication between a person and computer system . As an example and not by way of limitation an I O device may include a keyboard keypad microphone monitor mouse printer scanner speaker still camera stylus tablet touchscreen trackball video camera another suitable I O device or a combination of two or more of these. An I O device may include one or more sensors. This disclosure contemplates any suitable I O devices and any suitable I O interfaces for them. Where appropriate I O interface may include one or more device or software drivers enabling processor to drive one or more of these I O devices. I O interface may include one or more I O interfaces where appropriate. Although this disclosure describes and illustrates a particular I O interface this disclosure contemplates any suitable I O interface.

In particular embodiments communication interface includes hardware software or both providing one or more interfaces for communication such as for example packet based communication between computer system and one or more other computer systems or one or more networks. As an example and not by way of limitation communication interface may include a network interface controller NIC or network adapter for communicating with an Ethernet or other wire based network or a wireless NIC WNIC or wireless adapter for communicating with a wireless network such as a WI FI network. This disclosure contemplates any suitable network and any suitable communication interface for it. As an example and not by way of limitation computer system may communicate with an ad hoc network a personal area network PAN a local area network LAN a wide area network WAN a metropolitan area network MAN or one or more portions of the Internet or a combination of two or more of these. One or more portions of one or more of these networks may be wired or wireless. As an example computer system may communicate with a wireless PAN WPAN such as for example a BLUETOOTH WPAN a WI FI network a WI MAX network a cellular telephone network such as for example a Global System for Mobile Communications GSM network or other suitable wireless network or a combination of two or more of these. Computer system may include any suitable communication interface for any of these networks where appropriate. Communication interface may include one or more communication interfaces where appropriate. Although this disclosure describes and illustrates a particular communication interface this disclosure contemplates any suitable communication interface.

In particular embodiments bus includes hardware software or both coupling components of computer system to each other. As an example and not by way of limitation bus may include an Accelerated Graphics Port AGP or other graphics bus an Enhanced Industry Standard Architecture EISA bus a front side bus FSB a HYPERTRANSPORT HT interconnect an Industry Standard Architecture ISA bus an INFINIBAND interconnect a low pin count LPC bus a memory bus a Micro Channel Architecture MCA bus a Peripheral Component Interconnect PCI bus a PCI Express PCI X bus a serial advanced technology attachment SATA bus a Video Electronics Standards Association local VLB bus or another suitable bus or a combination of two or more of these. Bus may include one or more buses where appropriate. Although this disclosure describes and illustrates a particular bus this disclosure contemplates any suitable bus or interconnect.

Herein reference to a computer readable storage medium encompasses one or more tangible computer readable storage media possessing structure. As an example and not by way of limitation a computer readable storage medium may include a semiconductor based or other integrated circuit IC such as for example a field programmable gate array FPGA or an application specific IC ASIC a hard disk an HDD a hybrid hard drive HHD an optical disc an optical disc drive ODD a magneto optical disc a magneto optical drive a floppy disk a floppy disk drive FDD magnetic tape a holographic storage medium a solid state drive SSD a RAM drive a SECURE DIGITAL card a SECURE DIGITAL drive or another suitable computer readable storage medium or a combination of two or more of these where appropriate. Herein reference to a computer readable storage medium excludes any medium that is not eligible for patent protection under 35 U.S.C. 101. Herein reference to a computer readable storage medium excludes transitory forms of signal transmission such as a propagating electrical or electromagnetic signal per se to the extent that they are not eligible for patent protection under 35 U.S.C. 101.

This disclosure contemplates one or more computer readable storage media implementing any suitable storage. In particular embodiments a computer readable storage medium implements one or more portions of processor such as for example one or more internal registers or caches one or more portions of memory one or more portions of storage or a combination of these where appropriate. In particular embodiments a computer readable storage medium implements RAM or ROM. In particular embodiments a computer readable storage medium implements volatile or persistent memory. In particular embodiments one or more computer readable storage media embody software. Herein reference to software may encompass one or more applications bytecode one or more computer programs one or more executables one or more instructions logic machine code one or more scripts or source code and vice versa where appropriate. In particular embodiments software includes one or more application programming interfaces APIs . This disclosure contemplates any suitable software written or otherwise expressed in any suitable programming language or combination of programming languages. In particular embodiments software is expressed as source code or object code. In particular embodiments software is expressed in a higher level programming language such as for example C Perl or a suitable extension thereof. In particular embodiments software is expressed in a lower level programming language such as assembly language or machine code . In particular embodiments software is expressed in JAVA. In particular embodiments software is expressed in Hyper Text Markup Language HTML Extensible Markup Language XML or other suitable markup language.

A component of example environment may include logic and or other suitable element. Logic performs the operations of the component for example executes instructions to generate output from input. Logic may include hardware software and or other logic. Logic may be encoded in one or more tangible computer readable storage media and may perform operations when executed by a computer. Certain logic such as a processor may manage the operation of a component. Examples of a processor include one or more computers one or more microprocessors one or more applications and or other logic.

Although the present invention has been described in detail with specific components being identified various changes and modifications may be suggested to one skilled in the art and further it is intended that the present invention encompass any such changes and modifications as clearly falling within the scope of the appended claims.

Note also that with respect to specific process flows disclosed any steps discussed within the flows may be modified augmented or omitted without departing from the scope of the invention. Additionally steps may be performed in any suitable order or concurrently without departing from the scope of the invention.

Numerous other changes substitutions variations alterations and modifications may be ascertained to one skilled in the art and it is intended that the present invention encompass all such changes substitutions variations alterations and modifications as falling within the scope of the appended claims.

