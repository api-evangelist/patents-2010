---

title: Systems and methods for infrastructure validation
abstract: Systems and method are provided for testing an infrastructure. The infrastructure may include one or more computers connected by a network. Moreover, each of the computers may include an agent. In one embodiment, the method includes receiving, at a controller, a test request to perform at least one of a plurality of predetermined tests, the predetermined test including one or more parameters associated with performing the predetermined test and one or more expected results from performing the predetermined test. The method further includes determining whether the predetermined test is available at one of the computers. The method also includes sending, by the controller, the predetermined test to one of the computers based on the results of the determining step, such that the agent at the computer performs the predetermined test sent by the controller. Furthermore, the method includes receiving, at the controller, one or more results of the predetermined test performed by the agent at the computer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08583722&OS=08583722&RS=08583722
owner: Federal Home Loan Mortgage Corporation
number: 08583722
owner_city: McLean
owner_country: US
publication_date: 20100507
---
This is a continuation of U.S. application Ser. No. 11 349 184 filed Feb. 8 2006 which is incorporated herein by reference.

The present invention relates to data processing and more particularly systems and methods for testing an infrastructure.

There is and will continue to be advances and changes in how enterprises conduct business. Whether these advances and changes occur through growing competition globalization mergers acquisition or a restructure of business processes a key to success will be how quickly the enterprise s information technology IT organization can adapt to evolving business needs. Adapting to these needs presents challenges to the business enterprise.

One such challenge is the development and deployment of software applications used in connection with the business enterprise. These business applications are often developed and deployed by the business enterprise to support operations improve internal and external business processes and to allow customers and suppliers to conduct business with the business enterprise. The business applications may interact with hardware and software distributed across an intranet and the Internet. As such the infrastructure or framework associated with a business application may include hardware and software across an intranet or the Internet. When developing a business application the infrastructure of the business application should be tested before installation of the business application to facilitate timely and reliable deployment of the application. By way of example a purchasing application at a computer may require access through the Internet to another computer hosting a database application for providing price information. The same purchasing application may also require access through an intranet to another computer hosting an internal accounting database application and other internal applications. The infrastructure of the purchasing application may thus include the hardware and software associated with the purchasing application as well as other applications. For example the infrastructure may include computers their operating systems and the networks connecting the computers network devices e.g. routers firewalls and the like web servers and database applications. In this example although development of the purchasing application is complex testing of the infrastructure of the purchasing application is also complex since it may require testing numerous disparate applications databases network connections and the like some of which may not be under the control of the business enterprise. Moreover the testing of the infrastructure associated with the application is often unique to the application and performed manually making it prone to error and time consuming. Furthermore once infrastructure testing of the application is complete another application may also require infrastructure testing prompting additional manual testing unique to the other application. There is thus a need to improve testing of an infrastructure associated with an application such as a business application being developed and deployed.

The present invention provides systems and methods including computer program products for testing an infrastructure.

In one embodiment there is provided a method for testing an infrastructure. The infrastructure may include one or more computers connected by a network. Moreover each of the computers may include an agent. In one embodiment the method includes receiving at a controller a test request to perform at least one of a plurality of predetermined tests the predetermined test including one or more parameters associated with performing the predetermined test and one or more expected results from performing the predetermined test determining whether the predetermined test is available at one of the computers sending by the controller the predetermined test to one of the computers based on the results of the determining step such that the agent at the computer performs the predetermined test sent by the controller and receiving at the controller one or more results of the predetermined test performed by the agent at the computer.

It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and are not restrictive of the invention as described. Further features and or variations may be provided in addition to those set forth herein. For example the present invention may be directed to various combinations and subcombinations of the disclosed features and or combinations and subcombinations of several further features disclosed below in the detailed description.

Reference will now be made in detail to the invention examples of which are illustrated in the accompanying drawings. The implementations in the following description do not represent all implementations consistent with the claimed invention. Instead they are merely examples. Wherever possible the same reference numbers throughout the drawings refer to the same or like parts.

In some embodiments controller may first determine which tests are available at an agent before sending a test to an agent. For example controller may contact each agent requesting a list of the tests available for execution on that particular agent machine. Tests are organized into related sets referred to as test components. A test component may be implemented as an object for distributing tests to agents and for presenting available tests to users. An object means a bundle of variables e.g. data and related methods accessed by software. In object oriented programming an object is a concrete realization instance of a class that consists of data and the operations associated with that data. The schema that lists tests may be implemented as a user defined list of tests and agents capable of performing those tests. For example an agent implemented in software as an object at a computer may be used to test a database at the computer. In this example the schema may indicate that the agent can perform one or more of the following tests or test components login to the database perform a scripted query of the database perform a scripted update of the database and perform a scripted retrieve from a table within the database.

When the test is sent to an agent for execution the agent such as agent may call a test component e.g. test component to execute the test. Next test component may provide the test results to agent . Controller may then receive from agent the actual test results and provide the actual test results to user interface for display steps .

Although depicts test as running in parallel tests may instead run in a serial manner. Moreover there may be some dependency between tests. For example a first test may test whether an agent can login to a server while a subsequent second test may test an application at the server. The second test however may be dependent on the outcome of the first test. Specifically if the first test fails e.g. a failed login to the server then the second test would not be performed. Moreover stopping the test after a failed test may provide insight into the source of a possible problem. Returning to the previous example a failure by the first test may indicate a problem with the server or its login.

Moreover tests may also include an indication of which agents are capable of performing a test. For example when agent is hosted on computer configured with Windows a test such as a Windows login test of computer could be associated with agent . Moreover the test may include an indication that the Windows login test is capable of being performed at computer . Other examples of tests include the following an HTTP GET test for testing whether an hyper text transfer protocol http connection may be established from a particular computer to a server on the Internet or an intranet a ping test for testing whether a computer connected to network responds to a ping command a TCP Settings test for testing the value of one or more TCP configuration parameters e.g. tcp time wait interval tcp conn req max q a test of the NTP Network Time Protocol to determine whether network time is available on a computer a login test to determine whether an agent can login to another computer or application a firewall test to determine whether an agent at a computer can send and receive packets through a firewall a software test to identify the software versions installed on a computer a kernel module test to identify currently loaded operating system kernel modules a patch test to identify currently installed patches an inter process communication setting test to identify shared memory and semaphore settings a database login test to validate that a user or business application can login to a database from a particular computer and any other test appropriate for testing the infrastructure. The test request may thus allow the aggregation of tests for different computers and their corresponding software.

Tests may be predetermined and stored at storage device . For example a user may define each of the tests with appropriate parameter values and expected result values and store them for later use. Moreover the actual results from performing tests may be stored as well. Storing actual test results enables controller to compare actual results from different tests to identify differences and possible anomalies.

Moreover by providing persistence of tests other users can utilize the stored tests or utilize the stored tests as templates to configure other tests. For example before deploying a new application that interacts with other computers applications e.g. database applications and networks a pre existing test request and corresponding tests may be used as a template to develop other test requests and tests specific to the new business application. Moreover tests may be selected from stored tests to configure a customized test sequence of one or more tests. The customized test sequence also referred to as a test script may enable testing of an application either before during or after its deployment on the infrastructure which may eliminate the need to develop or purchase a commercial off the shelf test tool useable only with the application under test.

The test script may also be stored and reused for additional testing. The results of additional testing may provide test data that can be compared with previous baseline tests. Such comparative testing may provide additional information regarding the performance of the application.

When a business application is being developed any testing of its infrastructure may be performed independently of the business application. Specifically while the business application is being developed any infrastructure components of system that will be needed to accommodate the business application would be tested beforehand using controller and agents . For example access to a database server at a remote network would be tested before installation of the business application validating a part of the infrastructure e.g. access to the database without requiring the actual business application at system . Controller and agents may thus provide testing of an infrastructure independent of the business application for which the testing is performed.

Although testing of an infrastructure is described above as occurring before a business application is deployed testing can be performed at anytime. For example whenever a change is made to a business application or a change is made to the infrastructure e.g. a new or updated operating system is added or a new or updated database is added the infrastructure may be tested. The actual results of testing may be compared to previous actual test results. Moreover infrastructure testing may be used to determine whether or not a problem being encountered by a particular business application is being caused by an infrastructure component e.g. network operating system a specific application . For example by testing the infrastructure independent of the business application the infrastructure may be ruled out as a possible source of the problem when infrastructure testing is successful.

When sending or receiving test request and tests within system the structure depicted in may serve as a message format for such sending or receiving.

Client may include one or more processors such as computers to interface with server system . Client system includes user interface for interacting with controller at server . Client system connects to server system through network connection . Although shows a single client system and a single server system a plurality of client systems and server systems may be used. Moreover although is described with respect to a client server architecture system can use any other appropriate architecture.

User interface may provide an interface to allow a user to interact with controller or agents . User interface may include a browser to facilitate interaction with controller . In some embodiments user interface may be implemented using a Java Swing application that is deployed using Java WebStart. Java software including Swing and WebStart is commercially available from Sun Microsystems Santa Clara Calif. As with other graphical user interface toolkits Swing includes toolkit items such as text boxes buttons split panes and tables. The Swing toolkit items allow a developer to develop a user interface such as user interface . The Java WebStart environment may be used to manage the configuration and installation of user interface once it is downloaded for installation from a web server . Although Swing and WebStart are described other toolkits and environments may be used.

User Interface may communicate with controller through network connection . Moreover user interface may call controller using protocols such as a Remote Procedure Call RPC or a Simple Object Access Protocol SOAP . In one embodiment a Java Remote Method Invocation RMI is used by user interface to call controller although other protocols may be used.

When Remote Method Invocation is used at user interface a registry may provide a naming service allowing discovery of registered components. For example when using Remote Method Invocation each of user interface controller agents and test components may each register with a registry such as registry . Agent may register at registry which may share the registry information with registry to allow controller to discover agent

Network connections and network may each include alone or in any suitable combination a telephony based network a local area network LAN a wide area network WAN a dedicated intranet wireless LAN the Internet an intranet a wireless network a bus or any other any communication mechanisms. Further any suitable combination of wired and or wireless components and systems may be used to provide a communication mechanism in network connections and network . Moreover network connections and network may be embodied using bi directional or unidirectional communication links. Network connections and network may also implement web based protocols such as Transmission Control Protocol Internet Protocol TCP IP Hyper Text Transfer Protocol HTTP SOAP RPC RMI and the like.

Server system may include one or more processors such as computers to interface with other computers such as client system and agents including their corresponding computers . In addition to the components described above with respect to server may include server and a command line processor component . Server may allow software for a user interface such as user interface to be downloaded to a computer such as client . Command line processor may allow commands to be sent directly to controller to bypass user interface .

Controller may control testing performed during validation of infrastructure . To control testing controller may control one or more agents at computers so that the agents can perform predetermined tests included within a test request. When a test request is received at controller controller may authenticate the user requesting the execution of the test request. Each test request or tests contained therein may include information indicating which user or type of users is authorized to perform testing. For example controller may query an LDAP Lightweight Directory Access Protocol server to determine the user type e.g. administrator user or normal user . Based on the results of the query controller may authorize testing. Alternatively controller may send user information to agents so that the agents can determine whether the user is authorized to perform a test at an agent.

When controller receives from user interface a test request controller may determine which agents can execute the tests included within the test request. Controller may determine which tests an agent can perform based on a list of agents and corresponding tests available at each of those agents. Moreover the tests available at an agent e.g. the test components at an agent may be unique to the computer hosting the agent. For example the test components may be specific to the following operating system type at the computer hosting the agent e.g. Windows Solaris Linux AIX and the like and applications configured on the computer hosting the agent e.g. whether the computer includes a WebLogic 8.1 server a WebMethods 6.1 server Apache 2.2 server UDB 7.2 Universal Database and the like . The list of agents and available tests may be stored at storage device .

When an agent is first called the agent may first determine which test components are available and installed at the agent. To discover the test components at an agent the agent may determine which tests components should be installed based on a stored list of tests. Alternatively the agent may determine which test components are installed based information stored at registry or storage device . Next the agent may call each installed test component to determine whether the test component is indeed testable on the computer hosting the agent. The called test component may then perform one or more self tests e.g. check the operating system installed software and the like to determine whether it is available for test on the computer hosting the agent.

If the test component is available for test on the computer the test component may build a description of itself and include the description within an object referred to as a test component object . For example a test component may contain a group of tests for the Solaris operating system. One of these tests may test the login at a computer with a Solaris operating system. After a self check test component may build a description of itself such as SolarisTests. If the login test is testable test component may build a description of the login test such as LoginTest. If the test component is testable agent adds test component the description of the test component e.g. SolarisTests and the descriptions of the tests e.g. LoginTest belonging to that test component to a list of test components available at agent . The list may be stored at server e.g. storage client computers or at any other appropriate location. Furthermore agents may reload the set of test components without restarting the agents.

Storage device may be any type of storage medium including for example a hard drive an optical drive flash memory or any other computer readable storage medium. Storage device may store information used when testing the infrastructure associated with system including test requests tests parameters expected test results actual test results and user preferences. For example depicts tests and stored at storage device .

In one embodiment to send a test to an agent controller may initiate a call e.g. an RMI call or an RPC call to an agent . The call may instantiate the agent as an object. When each of agents is instantiated agents may register with registry . Moreover agents may determine based on a list of stored tests the test components available at each of the agents . If a stored list is not available an agent may discover which tests are available as described above. depicts agent as having two test components . The two test components may be specific to agent or the infrastructure associated with computer . For example agent may include test components that are specific to computer including its hardware and software such as the operating system e.g. Sun Solaris 9 and the applications e.g. WebLogic Apache UDB installed on or accessible by computer

Computers may be implemented as processors capable of being configured with agents . Agents each provide a mechanism for performing one or more tests and providing a corresponding test result. When instantiated agents may each instantiate a test component which can be called upon to perform one or more tests. The instantiated test component may return any test results to the agent that called the test component. The agent may also gather results from a plurality of test components and send the results to controller . Controller then sends the results to user interface .

Network access device labeled NAD provides access to a network or connection. Network access device may include one or more of the following a router a firewall a modem a NIC network interface card and any other device used when providing access to a connection or network such as the Internet or an intranet. When a test requires access to another network device may be used. For example if a ping command is required to validate a connection to a server external to system the ping command may go through network device and network . As such infrastructure testing may include validating that the connection may be established through network device .

For each test controller sends the tests to agents on the computers. The computers may be selected for test by a user through user interface . The agent on the requested computer will validate that the test component on the computer can perform the requested test step . For example controller may send a test to an agent on a computer. The agent may then determine whether or not the requested test component and test are available based on a list of available test component descriptions and or test descriptions. The agent may be hosted on a computer with a Sun based operating system such as Solaris 9. The agent may include a Solaris 9 test component in its list of available test components. The Solaris 9 test component may serve as a container for tests at the computer configured with Solaris 9. The Solaris 9 test component may be configured to include a version check of the Solaris 9 operating system a check of patches installed on the Solaris 9 operating system a check of other applications installed on the computer. Furthermore the agent may include a Network test component in its list of available test components. The Network test component may include a ping a trace route and a check of the network configuration e.g. ipconfig for Windows machines ifconfig for Solaris machines . A test component may thus be configured to only include tests specific to a computer and or its operating system. In addition the test component may include tests that are unaffected by the specific computer and or operating system. An example of one such unaffected test is the ping command.

Based on the results of step controller then sends each test to an agent capable of performing the test step . When a test e.g. test is received at an agent e.g. agent agent identifies which test component is associated with the requested test step . Agent then performs the test by calling the identified test component step . To identify which test component can perform the test agent may determine which of the test components can be called to perform the test based on stored descriptions of the test components. The called test component e.g. test component may then execute the test e.g. test using the parameters and expected results included within test . For example if test component tests access to a database test may include as parameters the location of the database e.g. an Internet Protocol address of the database and login credentials e.g. a login name and password . The expected results may include a reply from the database.

Any actual results from testing may be included as a field of an object instantiated as an actual results object. Test component may then return the actual results object to agent . Agent may then return the actual results object to controller . Controller may then return the actual results object to user interface for display. When multiple tests are included in the test request controller may consolidate actual results and then send them as a group to user interface . Moreover the actual results may be stored in storage for later use. The actual results may be associated with the original test when the actual results are sent from test component agent and controller to user interface .

When controller is implemented as an object controller is modeled as controller object which contains a list of all available tests per agent and methods such as methods for communicating with the user interface . When agent is implemented as an object agent is modeled as agent object which contains a list of all available tests for that instance of the agent and methods such as methods for running tests. When agent instantiates a test component it is modeled as test component object . Test component object includes a component description and a method to determine whether the test component object is testable on agent . Moreover test component object can run one or more tests which are also objects having the form of test object . Test component object may be extended to include a network test object containing all of the predetermined network tests or a Solaris 8 test object containing all of the predetermined Solaris 8 tests both of which use the native command object to enable the execution of commands at the operating system level.

When test request is implemented as an object test request is modeled as test request object . When tests are implemented as objects tests are each modeled as test objects such as test object . further depicts an example of the object oriented structure of test request and test object . Moreover test object may include expected results and parameters as well as actual results . In one embodiment the objects are used during the calls between components of system .

In one embodiment after login by a user system may retrieve from storage device any saved test requests. Moreover when a user provides a computer name and requests a list of available tests for the computer or the agents therein system provides a list of available tests or test components for the computer. The list of test components may be stored at user interface at server or other accessible location. For example a list of available test components may include 1 agent having test components and 2 agent having test components . If the list is not available at user interface or server controller may call an agent to see if that agent has a list of available test components at that agent. If the agent does not have a list of available test components the agent may discover all its installed test components by querying each of the test components to determine test component availability. For example if a test component were available the test component would be called by an agent and would create a test component description. The test component description may be included in a list of available test components.

In one embodiment a user through user interface may create a test request. For example a user may login to user interface and then request through user interface that a new test request be created. User interface may then prompt the user for a test request name. After receiving the name user interface may validate that the name is not already in use e.g. a duplicate of a previously used name stored at storage . If not a duplicate system may create a test request with the name provided by the user.

The user may then add tests to the created test request. For example a user through user interface may list any available test components for a computer or its agent and select a test within an available test component. The user may also provide parameter values using parameter descriptions associated with the selected test. Through user interface the user may add the test to the test request. User interface may also validate that all required information e.g. parameters and expected results for the test has been provided.

Test requests and tests may be deleted and renamed. Moreover test requests and tests may also serve as clones or templates for other tests saving time when developing new test requests and tests.

A user can select a test request and click run to send the available test to controller . When a test is selected the corresponding test request s parameters and expected results are displayed at panes and while the actual results are displayed at pane . For example the Network test component may include a hostname resolution test for resolving an input host name to its corresponding IP address. The hostname resolution test would include parameters such as the host name to be resolved an expected result for the IP address and an actual result. User interface allows the test results to be shown saved deleted or shared with other users using the button at control pane

When a user selects the test request named Basic Solaris Check the available tests for that test request are displayed. A user may then customize infrastructure testing by selecting computers e.g. computers and test components e.g. and tests e.g. . As such a user can configure and execute tests review and compare test results for disparate computers and their software using a single user interface and associated controller and agents.

The systems and methods disclosed herein may be embodied in various forms including for example a data processor such as a computer that also includes a database digital electronic circuitry firmware software or in combinations of them. Moreover the above noted features and other aspects and principles of the present invention may be implemented in various environments. Such environments and related applications may be specially constructed for performing the various processes and operations according to the invention or they may include a general purpose computer or computing platform selectively activated or reconfigured by code to provide the necessary functionality. The processes disclosed herein are not inherently related to any particular computer network architecture environment or other apparatus and may be implemented by a suitable combination of hardware software and or firmware. For example various general purpose machines may be used with programs written in accordance with teachings of the invention or it may be more convenient to construct a specialized apparatus or system to perform the required methods and techniques.

The systems and methods disclosed herein may be implemented as a computer program product i.e. a computer program tangibly embodied in an information carrier e.g. in a machine readable storage device or in a propagated signal for execution by or to control the operation of data processing apparatus e.g. a programmable processor a computer or multiple computers. A computer program can be written in any form of programming language including compiled or interpreted languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.

The foregoing description is intended to illustrate but not to limit the scope of the invention which is defined by the scope of the appended claims. Other embodiments are within the scope of the following claims.

