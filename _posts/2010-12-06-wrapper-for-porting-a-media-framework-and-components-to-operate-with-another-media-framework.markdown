---

title: Wrapper for porting a media framework and components to operate with another media framework
abstract: A system comprises a media framework component graph, a first media framework, a second media framework, and a media framework translator. The media framework component graph comprises one or more components. The one or more components are coupled with the first media framework. The first media framework is designed to run the media framework component graph. The media framework translator enables the first media framework and the media framework component graph to both function as a component for the second media framework.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08621445&OS=08621445&RS=08621445
owner: VisualOn, Inc.
number: 08621445
owner_city: Santa Clara
owner_country: US
publication_date: 20101206
---
Processing and rendering media e.g. audio or video is a very popular application on computers cellular phones and embedded computing devices. Many different software applications exist to perform the media processing and rendering some specific to one type of computing device and some which exist on multiple platforms. Underlying the software is typically a media framework application programming interface API which provides access to the media capabilities of the computing device. A media framework additionally has an associated set of functionality that may be used with the framework to build new media applications referred to variously as framework components or plug ins. These components may be authored by the framework authors and included along with the framework or they may be authored by a third party and distributed separately. There exist several media frameworks e.g. DirectShow OpenMAX GStreamer QuickTime Helix DNA Xine etc. Each framework is available for a different set of computing platforms and each has different behaviors leading to different advantages and disadvantages for each of the media frameworks. Additionally each media framework has a different set of components some components are available for one media framework and not for another. There are many different reasons why one media framework might be chosen over another including availability on a desired computing platform cross platform capability availability of specific components optimization of a particular functionality or the developer s own particular preference. A software developer trying to move to a new media framework from one he is used to will likely have to learn new framework behaviors as well as learn to use new framework components and to work without others increasing development time and complexity.

The invention can be implemented in numerous ways including as a process an apparatus a system a composition of matter a computer program product embodied on a computer readable storage medium and or a processor such as a processor configured to execute instructions stored on and or provided by a memory coupled to the processor. In this specification these implementations or any other form that the invention may take may be referred to as techniques. In general the order of the steps of disclosed processes may be altered within the scope of the invention. Unless stated otherwise a component such as a processor or a memory described as being configured to perform a task may be implemented as a general component that is temporarily configured to perform the task at a given time or a specific component that is manufactured to perform the task. As used herein the term processor refers to one or more devices circuits and or processing cores configured to process data such as computer program instructions.

A detailed description of one or more embodiments of the invention is provided below along with accompanying figures that illustrate the principles of the invention. The invention is described in connection with such embodiments but the invention is not limited to any embodiment. The scope of the invention is limited only by the claims and the invention encompasses numerous alternatives modifications and equivalents. Numerous specific details are set forth in the following description in order to provide a thorough understanding of the invention. These details are provided for the purpose of example and the invention may be practiced according to the claims without some or all of these specific details. For the purpose of clarity technical material that is known in the technical fields related to the invention has not been described in detail so that the invention is not unnecessarily obscured.

A wrapper for porting a media framework and components to operate with another media framework is disclosed. Translation wrapper software is used to package a multimedia software module built from a set of media framework components along with their associated media framework into a new media framework component for a different media framework. For instance a set of components for the OpenMAX framework that form a video processing and rendering engine could be wrapped along with the OpenMax framework and any other appropriate code to create a component for the DirectShow framework with all of the functionality of the original video processing and rendering engine. In this way a developer who is used to working with OpenMAX and with the specific set of OpenMAX components can develop for DirectShow with only minimal extra development time.

Software created by translating code will inevitably have some overhead. In this case the overhead is primarily due to the fact that there is an extra layer of communication e.g. DirectShow communicates with OpenMAX and then OpenMAX communicates with the OpenMAX components. Performance of the translated multimedia software module will be reduced according to the activity of this communication path. A component level translation approach e.g. translating a set of components by repackaging each one as a component for the target framework and then building the desired multimedia software module in the target framework using the translated components will likely create multimedia software module that suffers in this way greatly in addition to adding the tasks of porting each component to work with the target framework and in the target framework environment. For example taking a number of OpenMAX components translating each to work in the DirectShow environment and making sure that each translated component is able to properly talk to the media framework DirectShow and work within the DirectShow environment. Communications between the originating media framework and the target media framework are reduced in the invention by packaging components at a functional level. A set of components that performs a desired functionality is built into a multimedia software module along with its originating framework. Communications with the multimedia software module are then limited to basic commands such as start stop load file etc. Wrapper translation code for the target framework is added to the multimedia software module creating a new component for the target framework. Communications between the originating and target frameworks are limited to the same set of basic commands and translation overhead is minimized as well as the translation work for each individual component.

An additional benefit to this approach over a component level translation approach is that the developer is always working within the originating media framework with which he is most familiar. Any idiosyncrasies of the target framework will be addressed by a well designed wrapper. In a component level translation approach the developer has access to the components he is used to working with but must use them to build a component graph within the unfamiliar target framework. Thus not all of the benefits of improved development time will be realized.

In some embodiments the target media framework requires at least two components to be used to create a media framework module. When necessary the translation software includes the extra step of creating a dummy component to be used alongside the translated component in order to satisfy the media framework.

In some embodiments computing system comprises a smart phone that includes a media framework coupled to one or more components where the media framework coupled to the one or more components is capable of loading a data file for example a video or audio file and processing the data file to present the data file to a user. In various embodiments the data file is presented to the user as a video stream displayed using a color or black and white display or an audio stream output using a speaker or headphones or broadcast to a wireless connected audio output device e.g. a Bluetooth connected head set . In some embodiments processing the data file includes decompressing or decrypting the data file for example processing the data file compatible with a format such as MPEG 1 MPEG 2 MPEG 4 H.264 e.g. a format specified by the Moving Picture Experts Group MP3 e.g. MPEG 1 audio layer 3 AAC Advanced Audio Coding Windows Media Audio Windows Media Video MIDI e.g. Musical Instrument Digital Interface media containers such as AVI e.g. audio video interleaved container format ASF e.g. advanced systems format for streaming an audio video container WAV e.g. waveform audio file format or MOV e.g. a quick time multimedia format . In various embodiments data storage device comprises a solid state memory e.g. a random access memory a magnetic memory an optical memory or any other appropriate data storage device.

The media framework components forming media framework component graph communicate with each other with media framework and with externally available computing resources as appropriate. For example media framework component does not communicate directly with another media framework component but communicates with media framework . If media framework component needs to communicate with media framework component for instance communications are routed through media framework . On the other hand media framework component and media framework have a direct connection established and are able to communicate directly with one another. Media framework component receives information from a streaming media e.g. audio video a composite audio video signal or any other appropriate media type source e.g. media input device of and processes the streaming media source or sends it to another media framework component. Media framework component receives data e.g. media data media metadata or any other appropriate kind of data from a data storage e.g. data storage device of external to media framework module and processes the data or sends it to another media framework component. Media framework component delivers information to a media output e.g. a coupled media output device of . In various embodiments information delivered by media framework component to a media output device is derived from media received by media framework component from data received from media framework component or by any other appropriate means. Media framework component delivers information to a data storage e.g. data storage device of external to media framework module . In various embodiments information delivered by media framework component to the data storage device is derived from media received by media framework component from data received from media framework component or by any other appropriate means. In some embodiments a media framework component communicates only with media framework and does not communicate with any other media framework component or with any external media or storage device. In some embodiments a media framework component communicates only with the media framework and with other media framework components and do not communicate with any external media or storage devices. In some embodiments a media framework component communicates with a network e.g. network of . In some embodiments a media framework component communicates with other software running on a computing system e.g. software of .

Media framework communicates with media framework translator . Media framework translator comprises a software interface for media framework for controlling and interpreting communications from media framework. Communications received by media framework translator from media framework are translated and communicated to an external media framework e.g. media framework of . Media framework and the external media framework comprise different media frameworks e.g. media framework comprises OpenMax and the external media framework comprises DirectShow . Media framework translator comprises a software interface designed for the specific combination of media frameworks used for media framework and the external media framework e.g. media framework translator comprises a first piece of code if media framework comprises OpenMax and the external media framework comprises DirectShow and media framework translator comprises a second piece of code if media framework comprises OpenMax and the external media framework comprises GStreamer . Media framework translator is designed to communicate with the external media framework in such a way that translated media framework component appears to the external media framework like a media framework component e.g. a media framework component such as media framework component of . In some embodiments the functionality of the media framework component created by translated media framework component comprises the functionality of the media framework module that could be created by the combination of media framework component and media framework component graph . In some embodiments media framework translator comprises both a media framework translator and a component wrapper. A component wrapper comprises a wrapper for allowing a media framework and a media framework component graph to run in an environment other than that which it was designed for. In various embodiments a component wrapper provides environment variables software libraries operating system virtualization or any other appropriate software for allowing a media framework and a media framework component graph to run in an environment other than that which it was designed for. In some embodiments media framework can run natively in the environment of the external media framework and does not require a component wrapper.

In a typical media framework module e.g. media framework module of formed by the combination of a media framework and a media framework component graph communications by the media framework out of the media framework module are relatively limited. In some embodiments communications by the media framework out of the media framework module are limited to user interface communications. High bandwidth communications e.g. streaming media communications data storage communications other data communications are made directly with one or more of the media framework components forming the media framework component graph and do not pass through the media framework. In a translated media framework module e.g. translated media framework module of formed from translated media framework component high bandwidth communications are made directly to media framework component graph and do not pass through either media framework or the external media framework. Since media framework and the external media framework are not involved with high bandwidth communications in the translated media framework module and therefore neither is media framework translator the extra software and complexity of translation as compared with a typical media framework module do not affect the rate of the high bandwidth communication and therefore add little additional overhead to the module functionality.

In a second media framework component associated with a second media framework is received. In some embodiments the second media framework component is received by the media framework module developer from a translated media framework component creation system e.g. translated media framework component creation system of . In some embodiments the second media framework component comprises the first media module e.g. the second media framework component comprises the first media framework and associated first media framework components. In various embodiments the second media framework comprises DirectShow OpenMAX GStreamer QuickTime Helix DNA Xine or any other appropriate media framework. In some embodiments the second media framework component additionally comprises a media framework translator. In some embodiments the media framework translator is specific to the first media framework and the second media framework. In some embodiments the second media framework component is a translated media framework component e.g. translated media framework component of .

In second media module comprising the second media framework and the second media framework component is built. In some embodiments the second media module comprises translated media framework module e.g. translated media framework module of . In some embodiments the functionality of the second media module is the same as the functionality of the first media module. In some embodiments the second media module additionally comprises a dummy media framework component. In various embodiments the second media software comprises a media application a media plug in a media add on a media feature or any other appropriate media software.

Although the foregoing embodiments have been described in some detail for purposes of clarity of understanding the invention is not limited to the details provided. There are many alternative ways of implementing the invention. The disclosed embodiments are illustrative and not restrictive.

