---

title: Optimization scheduler for deploying applications on a cloud
abstract: A system is provided to deploy a computing application on a cloud using optimization criteria. The system comprises a launch request detector to detect a request to launch a computing application within a virtualization service, an application requirement detector to determine application requirement for the computing application, a cloud resource inventory detector to determine cloud resource inventory, an optimization requirement detector, a matching module, and a configuration module. The optimization requirement detector may be configured to determine an optimization requirement. The matching module may be configured to perform matching of the application requirement with the resource inventory based on the optimization requirement. The configuration module may be configured to generate an optimized application deployment configuration based on the result of the matching and cause launching of the computing application within the virtualization service using the optimized application deployment configuration.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08656023&OS=08656023&RS=08656023
owner: Adobe Systems Incorporated
number: 08656023
owner_city: San Jose
owner_country: US
publication_date: 20100826
---
This disclosure relates generally to the technical fields of software and or hardware technology and in one example embodiment to system and method to deploy a computing application on a cloud using optimized configuration.

The approaches described in this section could be pursued but are not necessarily approaches that have been previously conceived or pursued. Therefore unless otherwise indicated herein the approaches described in this section are not prior art to the claims in this application and are not admitted to be prior art by inclusion in this section.

The phrase cloud computing refers to an architectural paradigm in which computation is moved from local servers to a remote service that provides computation as a commodity or utility. A cloud is typically a large collection of shared commodity computation resources that can be interchangeably provisioned in response to clients computation requests. Cloud computing is frequently used in software as a service SaaS application architectures and may be viewed as an implementation choice for application deployment that leverages shared resources and improved cost structure of the cloud. A cloud computing approach may be used to implement a variety of computational paradigms such as virtual machines jobs remote procedure calls traditional servers etc.

In the following detailed description numerous specific details are set forth to provide a thorough understanding of claimed subject matter. However it will be understood by those skilled in the art that claimed subject matter may be practiced without these specific details. In other instances methods apparatuses or systems that would be known by one of ordinary skill have not been described in detail so as not to obscure claimed subject matter.

Some portions of the detailed description which follow are presented in terms of algorithms or symbolic representations of operations on binary digital signals stored within a memory of a specific apparatus or special purpose computing device or platform. In the context of this particular specification the term specific apparatus or the like includes a general purpose computer once it is programmed to perform particular functions pursuant to instructions from program software. Algorithmic descriptions or symbolic representations are examples of techniques used by those of ordinary skill in the signal processing or related arts to convey the substance of their work to others skilled in the art. An algorithm is here and generally considered to be a self consistent sequence of operations or similar signal processing leading to a desired result. In this context operations or processing involve physical manipulation of physical quantities. Typically although not necessarily such quantities may take the form of electrical or magnetic signals capable of being stored transferred combined compared or otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to such signals as bits data values elements symbols characters terms numbers numerals or the like. It should be understood however that all of these or similar terms are to be associated with appropriate physical quantities and are merely convenient labels. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout this specification discussions utilizing terms such as processing computing calculating determining or the like refer to actions or processes of a specific apparatus such as a special purpose computer or a similar special purpose electronic computing device. In the context of this specification therefore a special purpose computer or a similar special purpose electronic computing device is capable of manipulating or transforming signals typically represented as physical electronic or magnetic quantities within memories registers or other information storage devices transmission devices or display devices of the special purpose computer or similar special purpose electronic computing device.

A computing application also referred as merely an application may be made available to users by deploying the application on one or more virtual instances of a machine running on a cloud i.e. within a public virtualization space such as e.g. the virtualization space provided by Amazon Elastic Compute Cloud EC2 service. The manner in which an application can be deployed on a cloud depends on application requirement with respect to resources on one hand and also on the availability of resources resource inventory that can be provided to the application by the virtualization service provider. A virtualization service provider may also be referred to a cloud provider. Often more than a single application deployment configuration may satisfy application requirement given a particular resource inventory. For example an application may be deployed on a cloud using varying number of virtual instances of a machine the application may be deployed using different or multiple virtualization service providers the virtual instance of a machine running the application or one or more components of an application may be started and stopped according to the need of the users etc. One of these different application deployment configurations may be most cost effective e.g. deploying the application on a fewer number of virtual instances of a machine while another application deployment configuration may be characterized by greater performance at a higher cost e.g. deploying the application on a greater number of virtual instances of a machine .

In one embodiment method and system are provided to determine the optimized configuration for deploying the application on a cloud based on a determined optimization goal. The optimization goal may be e.g. the lowest cost higher availability of the application to users greater reliability etc. The optimized configuration may be determined by matching application requirement with a resource model. A resource model also termed resource inventory may describe what type of resources e.g. CPU Disk Memory and Network can be made available to the application their capacity and their usage charge. A system to determine the optimized configuration for deploying an application on a cloud may be termed a smart scheduler.

Application requirement may be provided to the smart scheduler together with a request to launch the application or alternatively the application may be registered with the smart scheduler such that the application requirement information is obtained and stored at a location accessible by the smart scheduler prior to any launch request. A smart scheduler may also be configured to obtain resource inventory with respect to one or more cloud providers. In one embodiment the resource inventory may be captured e.g. by accessing a web site of the provider of a virtualization service. The optimization goal information may be provided to the smart scheduler e.g. together with the request to launch an application or at the time when and if the application is registered with the smart scheduler.

The requested application is launched on a cloud by instructing the cloud provider to access one or more machine images containing the application description and load the one or more machine images onto the physical machines provided by the cloud provider and make it accessible to the user via a network. A machine image is a read only boot image that is used for launching an instance of a virtual machine running one or more components of the requested computing application. One or more machine images representing a computing application may be provided to a network storage system e.g. AmazonS3 by a control server also referred to as a controller .

A system that provisions and manages a computing application hosted on one or more virtual instances of a machine may be referred to as a hosted service system. A hosted service system may include a smart scheduler and may be configured to provide automated administration of a computing application replacing the administration tasks that would otherwise be performed by the customer when running in an on premise production deployment. The technology within an example hosted service system may hide the behavior of the underlying virtualization service and provide instances of a computing application that are substantially indistinguishable e.g. in terms of reliability security and performance from local on premise deployments of the computing application. For example a hosted service system may provision and manage computing applications such as a generic content server Adobe LiveCycle Enterprise Suite ES and Adobe ConnectPro offered by Adobe Systems Incorporated etc. While embodiments of the smart scheduler are described with reference to Amazon EC2 service other virtualization services may be utilized.

In operation a user can access a provider s web site and request to launch a computing application that can be deployed remotely on a plurality of virtual instances of a machine on a cloud such that the user no longer is required to deploy the computing application locally within their own data center on their own hardware. A request may be triggered by a user e.g. by activating a visual control such as a Start button presented on a web page. When a smart scheduler provided at the hosted service system receives a request to launch a computing application on a cloud the smart scheduler in response determines application requirement and a resource model based on a cloud resource inventory and determines an optimized application deployment configuration. Then a call is made to the application programming interface API associated with the virtualization service to trigger the loading of one or more machine images associated with the requested computing application using the optimized application deployment configuration. For example the smart scheduler can instruct the virtualization service host to start ten small capacity servers rather than five greater capacity servers if the ten server configuration offers to the application the same CPU power at a lower cost. The smart scheduler may also be configured to instruct the virtualization service host to start a CPU intensive task using a first virtualization service and start an I O intensive task using a different virtualization service based on respective pricing models of the two virtualization service providers. The smart scheduler may also be configured to provide an instruction to start both the database server and the application server associated with a computing application in the same virtual network if it is determined that such configuration may lower the bandwidth cost.

An example architecture within which method and system to provision and manage a clustered computing application hosted by a plurality of virtual nodes may be implemented is described with reference to an architecture diagram illustrated in . The architecture may include a client computer system and a hosted service system . In one example embodiment the hosted service system is to provision and manage an enterprise SaaS product utilizing a cloud based computing service as a virtualization infrastructure. Cloud based computing services as shown in are provided by a virtualization service host and a network storage service . In one embodiment a hosted service system utilizes Amazon EC2 as a virtualization service and Amazon Simple Storage Service Amazon S3 as a network storage service. In some embodiments the hosted service system may utilize more than one virtualization service host e.g. one host being Amazon EC2 and another host provided by Adobe Systems Incorporated. The client computer system and the hosted service system may be in communication with each other via a communications network that may be a public network e.g. the Internet .

The virtualization service host may load a computing application onto a cloud. The computing application may be accessed by the client via a browser application . As mentioned above a user in control of the client computer system may send a request to the hosted service system to load the computing application. The request may be initiated via a user interface provided by the hosted service system to the client computer system via the browser application .

The user interface in one embodiment provides both an end user s and a system administrator s view of the computing application and also permits issuing control operations to the computing application and permits viewing the resulting changes in the state of the computing application . For example where the computing application is a content server an end user may manipulate various electronic forms. The user interface may also serve as a source of information for the hosted service system including documentation downloads and support. The user interface in one embodiment uses Adobe Flex software offered by Adobe Systems Incorporated as the user interface technology for the implementation of the user interface. The user interface in one embodiment uses an XML Extensible Markup Language based representational state transfer REST style secure communications protocol to synchronize its operations with a control server . A request to access the user interface may be authenticated using one of a variety of authentication techniques.

The request from the client computer system to load the computing application is received at the control server which responds to the request by activating an access interface provided by the virtualization service host . The control server in one example embodiment provides coordination between the components of the architecture provides administration and monitoring of the virtualization service host and also may be configured to audit system usage and resource allocation with respect to the computing application . The control server includes a database to store information pertaining to various aspects of system usage. The control server in one embodiment runs within a standard Hypertext Transfer Protocol Secure HTTPS compliant web server and may be deployed as a publically accessible web application that is available outside a firewall. The control server in one embodiment is implemented using Ruby on Rails technology.

The virtualization service host accesses the storage of the network storage system to obtain one or more machine images in order to load the associated computing application . The machine images can be uploaded to the network storage system by the control server utilizing an access interface provided with the network storage system . The hosted service system further includes a secure networking client to provide a bidirectional encrypted compressed connection between a machine in the end user s secure network environment e.g. the client computer system and one or more instances of a virtual machine running within the virtualization infrastructure the computing application . The networking client manages various aspects of transmission control protocol TCP traffic forwarding encryption and network discovery such that the user can access the computing application as if it was running locally on the user s machine. In this mode the user s network security envelope is extended to surround the computing application using comparable levels of encryption and protection against network security threats.

In one example embodiment the control server comprises a smart scheduler . The smart scheduler may be configured to determine an optimized configuration for launching a computing application on a cloud by matching the application resource requirement with the cloud resource model based on the optimization requirement. The optimization requirement may be based on the need to lower the cost of using the virtualization service based on the need to increase the bandwidth available to the computing application to reduce latency or some other optimization goals. A diagrammatic representation of an example application requirement and an example resource inventory that may be used for determining the resource model is shown in . As shown in an application requirement AppRequirement comprises interaction pattern among application pools where a pool may be executing on one or more instances of a virtual machine with a load balance LB being used as a front end for processing users requests. A pool is a group of machines that provide the same functionality to its clients. If the client workload is too high for the capacity the pool offers the controller may issue an instruction to grow the pool by adding more members into the pool. The pools size is thus proportional to its processing capacity. Application requirement also comprises an application descriptor which is the specification of the service level requirement. Overall parameters of the application descriptor include optimization goal also referred to as optimization requirement inter pool dependencies and inter pool bandwidth requirement. Pool parameters of the application descriptor include VM virtual machine requirement minimum maximum pool size bandwidth and latency requirement and security requirement. Resource inventory as shown in may indicate which cloud providers are available which data centers DSc are provided by each cloud provider and the number and type of virtual instances of a machine that can be provided by each cloud provider. Resource inventory may be expressed utilizing inventory descriptors such as machine capacity network capacity machine cost and network cost. For example if the application requires K amount of CPU power and the resource model indicates that a class A machine can offer B units of CPU power then the smart scheduler may determine that at least K B machines would be necessary in order to meet the CPU requirement of the application.

As shown in the method commences with operation where the launch request detector of detects a request to launch a computing application on a cloud within a virtualization service . At operation the application requirement detector of determines application requirement for the computing application. At operation the cloud resource inventory detector of determines cloud resource inventory. As mentioned above the cloud resource model indicates resources that can be made available to the computing application within the virtualization service. At operation the optimization requirement detector of determines an optimization requirement associated with the computing application. The optimization requirement may be provided to the smart scheduler that may be implemented as the system of by an administrator. The optimization requirement comprises one or more parameters indicating optimization criteria such as for example lowest cost or highest performance. At operation the matching module of performs matching of the application requirement with the resource inventory based on the optimization requirement. At operation the configuration module of generates an optimized application deployment configuration based on the result of the matching and causes launching of the computing application within the virtualization service using the optimized application deployment configuration.

The example computer system includes a processor e.g. a central processing unit CPU a graphics processing unit GPU or both a main memory and a static memory which communicate with each other via a bus . The computer system may further include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT . The computer system also includes an alphanumeric input device e.g. a keyboard a user interface UI cursor control device e.g. a mouse a disk drive unit a signal generation device e.g. a speaker and a network interface device .

The disk drive unit includes a computer readable or machine readable medium on which is stored one or more sets of instructions and data structures e.g. software embodying or utilized by any one or more of the methodologies or functions described herein. The software may also reside completely or at least partially within the main memory and or within the processor during execution thereof by the computer system the main memory and the processor also constituting machine readable media.

The software may further be transmitted or received over a network via the network interface device utilizing any one of a number of well known transfer protocols e.g. Hyper Text Transfer Protocol HTTP .

While the machine readable medium is shown in an example embodiment to be a single medium the term machine readable medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine readable medium shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention or that is capable of storing or encoding data structures utilized by or associated with such a set of instructions. The term machine readable medium shall accordingly be taken to include but not be limited to solid state memories optical and magnetic media. Such medium may also include without limitation hard disks floppy disks flash memory cards digital video disks random access memory RAMs read only memory ROMs and the like.

Thus method and system to deploy a computing application on a cloud have been described. While some example approaches described herein may be used with ADOBE products the techniques described herein may be utilized beneficially with various other products.

The embodiments described herein may be implemented in an operating environment comprising software installed on a computer in hardware or in a combination of software and hardware. Although embodiments have been described with reference to specific example embodiments it will be evident that various modifications and changes may be made to these embodiments without departing from the broader spirit and scope of the invention. Accordingly the specification and drawings are to be regarded in an illustrative rather than a restrictive sense.

