---

title: Embedded systems debugging
abstract: The invention relates to a data processing system comprising a central processing unit, a first memory coupled to the central processing unit for storing variable data values, an eventing engine coupled to the central processing, a debug module coupled to the central processing unit and to the eventing engine for receiving the variable data values by way of the eventing engine in real time and configured to trigger breakpoints; and an interface to connect to an external device. Both event-based variable watching and debugging can occur contemporaneously by a user using an external device connected to the interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07958399&OS=07958399&RS=07958399
owner: Whirlpool Corporation
number: 07958399
owner_city: Benton Harbor
owner_country: US
publication_date: 20100315
---
The present application is a continuation of U.S. patent application Ser. No. 11 683 697 filed Mar. 8 2007 which is incorporated by reference in its entirety.

Debugging and development tools for locating and eliminating defects or bugs in programs for data processing systems are well known. In the past debugging tools were able to monitor an associated memory as a program was operating normally which is referred to as real time debugging. Real time debugging enables data variable watching during program execution in order to determine whether or not the program is working properly.

Initially a debug program was executed on the main board of the computer. As both programs and processing systems have increased in speed and complexity the large increase in data and variables to watch during a debug operation exceeded the processing power of the processor and or the output of the data bus to permit real time debugging from software running on the computer. In response the monitoring of data variables has been limited to obtaining variable updates only when the code is not running or intentionally stopped. Debugging tools typically accomplish this using breakpoints which halt program execution upon the occurrence of specific events. Data variables generated by the program can then be examined at the breakpoint. This poses a problem as the program can behave differently when it is halted than it would during normal operation. In addition this creates severe limitations on debugging abilities as data variables are not examined between breakpoints.

When real time debugging is necessary relatively expensive external hardware is used. The external debugging device has sufficient processor speed and a fast enough data bus to effect the real time debugging. Many families of processors do not have the ability to provide real time variable monitoring or debugging. There is therefore a need for the ability to debug complex programs in real time using only standard debugging software and the data processing system itself.

The invention relates to a data processing system that includes a central processing unit for executing instructions to implement a program a first memory coupled to the central processing unit for storing variable data values generated by the instructions for variables of the program an eventing engine configurable at runtime by an application programming interface to monitor in real time one or more of the variable data values and determine the occurrence of an event related to the variable data values a debug module coupled to the central processing unit and to the eventing engine for receiving the variable data values by way of the eventing engine in real time and configured to trigger breakpoints and an interface to connect to an external device. Both event based variable watching and debugging can occur contemporaneously by a user using an external device connected to the interface.

The system can also include a debug bus so that the debug module outputs real time data values over the debug bus in response to messages from the eventing engine. In one embodiment the central processing unit is coupled to the first memory over a bus and the eventing engine is coupled to the bus to monitor in real time the variable data values.

In another aspect of the invention a method of using a data processing system comprising a central processing unit having executable instructions an eventing engine coupled to the central processing unit and a debug module coupled to the central processing unit the eventing engine and an external bus includes sending a first event subscription message to the eventing to watch a first variable sending a second event subscription message to the eventing engine to watch a second variable sending a first event message to the central processing unit related to the first variable and sending a second event message to the debug module related to the second variable. The central processing unit executes the instructions based on the first event message and the debug module provides data to the external bus based on the second event message.

The invention provides a way of obtaining real time variable updates in a configurable manner to enable real time debugging of a data processing system. The invention accomplishes this by using an eventing engine of an event based software application to watch for the occurrence of predetermined events which drives the event handler of the software to call the appropriate function for handling the event. A message signifying the occurrence of an event can then be sent to at least one other component within the data processing system. The determination of an event is accomplished by monitoring the values of the variables of the program and determining if the variables indicate the presence of an event. These variables can be the same variables whose values would be monitored as part of a debug operation. The data processing system can be one as would be used in any of a number of electronic devices such as an automobile a PC a household appliance or any other device that uses a computer.

A device incorporating the invention will typically comprise one or more components which perform the operations of the device. By employing a software architecture that enables facile communication between internal components of a device and or between an external component and one or more of the internal components of the appliance various components can communicate with the device to expand the capability functionality and usability of the device.

The event based software architecture can be any program with or without the corresponding hardware where the flow of the program is determined by user actions or messages within the program or from other programs. A suitable event based software architecture is disclosed in the parent application No. U.S.2006 022420 titled SOFTWARE ARCHITECTURE SYSTEM AND METHOD FOR COMMUNICATION WITH AND MANAGEMENT OF AT LEAST ONE COMPONENT WITHIN A HOUSEHOLD APPLIANCE filed Jun. 8 2006 and incorporated herein by reference in its entirety.

In this particular example of software architecture SA the SA is implemented on and communicates over an internal communications network on an appliance which connects the various physical components of the appliance.

Some of the physical components have a corresponding controller main controller motor controller user interface etc. which may be a simple microprocessor mounted on a printed circuit board. Other components have no controller. Typically the components that have controllers and if there are more than one are typically also network enabled cooperate through network messaging or other forms of data transmission to directly or indirectly through other components control the operation of all of the components and their contained or attached devices to implement an operation or cycle for the appliance.

The SA can but does not have to reside on each of the components with a controller. Those components with the SA or a variant of the SA compliant with the SA compliance determined by the ability to send receive and process packets form a node on the network that can communicate with the other nodes.

The SA performs multiple functions identifying each of the components corresponding to a node to the network identifying the capabilities or functions of the identified components to the network identifying the status of the components to the network providing well defined command interfaces for each component providing communication between internal and external software components that are not part of the SA and providing communication between components non SA software components on different physical components. In this way the SA functions to inform all of the nodes on the network of the presence capabilities and status of the other nodes.

The SA comprises multiple modules each of which has different functionality. Various combinations of the modules or all of the modules can reside on each of the components. One module having the basic or core functionality for the invention resides on all of the components. In one anticipated configuration all of the modules reside at least on the main controller which establishes the main controller to function as a primary or controller SA with the other nodes functioning in a client relationship to the controller SA. In such a configuration all of the nodes would communicate through the Controller SA.

The SA is sufficiently robust that it can permit configurations without a Controller SA or with multiple Controller SA. Regardless of the configuration any component with a residing SA can function as a client with respect to the other components.

The internal communications can be connected to one or more external components directly or through an external network. The external components would also have one some or all of the SA modules in resident.

All of the communications between internal and external components and or any combination of components described in this application can be implemented by the software and network structures disclosed in this application.

The software architecture is preferably configured to generate a plurality of messages with at least one of the software elements residing in each of the components and configured to enable transmission of at least one of the plurality of messages between the components. The messages can be transmitted for bi directional communication between components. The messages can include command messages. The command messages can include event messages which indicate that an event has happened that could require the calling of a particular function or module of the software in response to the event.

The various components of the data processing system are interconnected by a plurality of buses enabling data communication therebetween. An example of a data processing system is a main controller or motherboard. All messages sent within the system preferably have the same format. Each bus provides either unidirectional or bidirectional data communication. The CPU is coupled to the memory by a main communication bus which can comprise both a data bus and an address bus to transmit the value for a corresponding memory location. The CPU is also coupled to the eventing engine by a CPU event notification bus and to the debug module by a CPU debug bus . The eventing engine is coupled to the main communication bus by an event monitoring bus and to the debug module by a debug event notification bus . The eventing engine and the debug module are coupled to an external bus by an event bus and a debug bus respectively. The external bus is configured for connection to any number of external devices not shown such as through a serial port an Ethernet port a JTAG interface or the like. The external memory is coupled to the main communication bus by external memory bus .

The CPU can execute various instructions to implement an event based program. The instructions generate various variable data values for a plurality of variables associated with the program. These variable data values of the variables are stored in or written to the memory . They can also be stored in the external memory which can serve as a back up copy of the memory . The main communication bus enables the CPU to read data from and write data to the memory . The external memory bus is coupled to the main communication bus so that the CPU can write variable data values to the external memory at the same time as it writes the variable data values to the memory .

The debug module is used to communicate data across the debug bus with the external bus . An external device connected thereto can interface with the debug module for debugging purposes. Suitable debugging interfaces include but are not limited to current JTAG and BDM standards. Alternatively a suitable debugging interface can be constructed as part of the external bus .

The event monitoring bus is configured to enable the eventing engine to read data directly from the main communication bus . In other words the eventing engine can inspect all data passing through the main communication bus . During this inspection the eventing engine looks for variable data values of interest. Typically the evening engine will look for a change in a variable data value. One manner of doing so is to look for a write command from the CPU that changes the variable data value of a specific variable in the memory . A change in a variable data value might represent an event to which the event based program will respond with a call to the proper function or subroutine. If true and the change does represent an event the eventing engine can send a message to the CPU and or the debug module via CPU event notification bus and or debug event notification bus respectively. These messages can be broadcast simultaneously to both the CPU and the debug module .

Referring now to in order to accomplish event recognition and message sending the eventing engine comprises an event handler a memory heap and a data acquisition application program interface referred to herein as a DAQ . The event handler sends and receives all messages issuing from and directed to the eventing engine . Received messages can include information for configuring the event handler to send event notification messages to certain components. For example the debug module can send a message via debug event notification bus to the event handler to subscribe to a particular event which tells the eventing engine that the variable for that event is of interest and should be watched. Such a message would instruct the event handler to send a certain message to the debug module upon the occurrence of an event specified by the message. Similarly the CPU is capable of subscribing to specific events via CPU event notification bus .

The debug module can be configured to subscribe to at least one specific event either by software or hardware within the data processing system or by an external device. An external device can connect to the external bus and send messages through the debug bus to the debug module instructing the debug module to subscribe to certain events. External devices can be user operated devices such as a PC. Preferably the debug module can also subscribe the CPU to a specific event by sending an appropriate message to the event handler .

The memory heap comprises a memory in which is stored a plurality of elements corresponding to an array of events configured by the event handler via memory heap access bus . Each event is defined in the memory heap by a pointer to the location of an associated variable data value in the memory the current value of the variable data value in the memory an event operator and an operator argument. In some instances an event can have multiple operators or arguments. A developer can use several event operators. Examples include on change greater than less than equal to deadband filter bitmask linking of two or more events through a logical expression etc. Additional operators could be designed to control the memory heap at runtime and could function to clear events add events turn external notification on off get events get event data etc. The argument is preferably a numeric value such as the number 5 .

The event handler can examine the memory heap using a memory heap access bus at any time to check for the occurrence of an event. For example the event handler can iterate over each of the elements of the memory heap or it can inspect a particular element upon a change in the variable data value for that element. In addition the event handler can send data from the memory heap across event bus to the external bus . In this manner the data stored in the memory heap can be sent to an external device. Preferably the event bus is used to send data from the memory heap to a PC connected to the external bus for real time data transfer purposes not associated with debugging. An example of such a purpose would be if the data processing system were connected to an external device in order to operate the external device.

The DAQ monitors the main communication bus via the eventing bus for variable data values of interest and can supply the variable data values to the memory heap and the Event handler . The event handler can instruct the DAQ using a DAQ bus to watch the main communication bus for data associated with at least one or more specific events. The DAQ can be configured by the event handler to watch for the occurrence of data associated with a specific variable data value and the DAQ can selectively store said data in the memory heap using a memory heap storage bus . The DAQ does so by comparing the variable data value recognized on the main communication bus to the variable data value stored in the memory heap . If the DAQ detects that the variable data value on the main communication bus is different from the variable data value stored in the memory heap for a specific event the DAQ will store the new variable data value in the memory heap in the array for the associated event. At the same time the DAQ will send a change signal which is a signal indicating a variable data value change to the event handler .

When the event handler receives a change signal from the DAQ the event handler will examine the memory heap to determine whether or not an event has occurred. The event handler can examine the memory heap prior to the writing of the changed variable data value to the memory heap . In this way the event handler can use both the value in the memory heap and the changed value to determine if an event has occurred. The event handler accomplishes this by logically checking the associated variable data value against the event operator and argument. When the event conditions evaluate to TRUE notification messages are generated and broadcast to the debug module and or the CPU depending on whether or not each component has subscribed to the particular event. These messages can contain data indicative of the specific event the variable data value detected and or any other signals requested by the subscriber. For example an event might have a greater than operator and an argument of 10 and the debug module could be subscribed to the event. The event handler would then logically test the variable data value in the memory heap associated with the event to see if it was greater than 10. If the variable data value is greater than 10 the event handler would send a message to the debug module containing all data associated with event the pointer the operator the argument and the variable data value .

In addition to looking for events for the event based program the eventing engine can be used by the debug module to monitor variable data values in real time and for standard debugging capabilities. The debug module can request that the event handler monitor certain variables and provide their variable data values. The event handler will then send messages whenever any event occurs so that the debug module is able to output real time variable data values over the debug bus using only minimal bandwidth. This is achieved because variable data values are only output by the eventing engine when they meet the criteria for the desired event. This provides real time data values to the debug module without requiring a complete memory dump. By tracking the variable data values of interest which is normally a subset of all of the variable data values and sending changes in those values over a dedicated bus the eventing engine is able to provide the debug module with real time variable data values while remaining embedded within the hardware of the data processing system . This enables real time debugging which has not currently been available for many processors.

The debug module could also be configured so that certain events would trigger breakpoints which would halt program execution and enable memory dumps. However the memory dump bus is not capable of transmitting real time variable data values to the debug module as that would require an enormous bandwidth not supported by memory dump buses.

While the invention has been specifically described in connection with certain specific embodiments thereof it is to be understood that this is by way of illustration and not of limitation. Reasonable variation and modification are possible within the scope of the forgoing disclosure and drawings without departing from the spirit of the invention which is defined in the appended claims.

