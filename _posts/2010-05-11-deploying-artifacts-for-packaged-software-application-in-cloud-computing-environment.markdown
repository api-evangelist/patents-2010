---

title: Deploying artifacts for packaged software application in cloud computing environment
abstract: Deploying artifacts and tools in cloud computing environment for provisioning packaged software applications generates a user interface code automatically and dynamically using information from at least structural data representations of cloud computing environment and base configuration requirements for running one or more packaged software applications in the cloud computing environment. In one aspect, the automatically generated code may be augmented using one or more library codes and auxiliary files. Specific configuration requirements are further obtained by running the automatically generated user interface code. One or more components to deploy in the cloud computing environment are determined that meet the base configuration requirements and the specific configuration requirements, by analyzing the structural data representations.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08417798&OS=08417798&RS=08417798
owner: International Business Machines Corporation
number: 08417798
owner_city: Armonk
owner_country: US
publication_date: 20100511
---
The present disclosure relates generally to computer applications and more particularly to managing information relating to the deployment of packaged software applications. One example of a packaged software application is an enterprise resource planning ERP application a company wide computer software system used to manage and coordinate all the resources information and functions of an organization from shared data stores. An ERP service project is a complex activity relating to the deployment of packaged software application which involves months or years of effort from many consultants. Consultants in such projects often rely on a large amount of various documents as the primary means to gather and share information and knowledge often by using office productivity tools such as document editors spreadsheet tools drawing and presentation tools. Information stored using such tools are difficult to reuse and often the data created and stored using those tools are difficult to compile. For example the productivity tools do not provide any way to access collate and report on the information.

A system and method of deploying artifacts and tools in cloud computing environment for provisioning packaged software applications are provided. The method in one aspect may include obtaining structural data representations of a cloud computing environment and configuration requirements for running one or more packaged software applications in the cloud computing environment. The method may also include generating automatically using a processor a user interface code using information from the structural data representations.

A system for deploying artifacts and tools in cloud computing environment for provisioning packaged software applications in one aspect may include a processor and structural data representations of cloud computing environment and base configuration requirements for running one or more packaged software applications in the cloud computing environment. The system may also include a user interface code dynamically generated from the structural data representations. The user interface code may be operable to accept specific configuration requirements for running one or more packaged software applications in the cloud computing environment. Program logic may be operable to determine one or more components to deploy in the cloud computing environment that meet the base configuration requirements and the specific configuration requirements by analyzing the structural data representations.

A computer readable storage medium storing a program of instructions executable by a machine to perform one or more methods described herein also may be provided.

Further features as well as the structure and operation of various embodiments are described in detail below with reference to the accompanying drawings. In the drawings like reference numbers indicate identical or functionally similar elements.

The present disclosure relates to deploying software applications and hardware components in a cloud computing environment for companies enterprises or the like. Some companies and or enterprises contract out for information technology IT services from other companies referred to herein as service companies instead of owning and maintaining their own IT. The service companies in turn provide the IT services for instance by using data centers or server farms . The IT services may include development if any installation configuration integration support and maintenance of the IT for the companies. Data centers server farms or the like are facilities used to house computer systems and associated components such as telecommunications and storage systems. The facilities generally include computer system components needed to provide the services redundant or backup power supplies redundant data communications connections environmental controls e.g. air conditioning fire suppression security devices and others needed for IT infrastructure. Software application can be deployed installed configured and run on such computer infrastructure and systems for different customers. Cloud may be implemented in data centers or server farms i.e. computer infrastructure and systems where software application can be deployed or otherwise installed configured and run wherein the details of the servers are hidden and abstracted to the view of the customers i.e. the companies contracting out for the services. Similarly cloud computing refers to computing in which various services and tasks are provided by resources distributed for example on the Internet.

Software deployment includes all of the activities that make a software system available for use and may include installation and configuration of various software components. For instance packaged application practices includes deploying software modules associated with a packaged application or a suite of software. For example enterprise resource planning ERP applications such as SAP Oracle and others may be deployed on a company s infrastructure system and or the like utilizing the methodologies described herein.

The present disclosure describes a tool or utility for provisioning components needed for providing customized IT services for specific customers in the cloud environment. The provisioning of the components includes determining or selecting the needed hardware and software components available in the cloud environment and building a virtual machine or the like that is catered to provide the specific service requested by the customer and according to the customer s hardware and system requirements.

The present disclosure describes modelizing or externalizing the real world items or components into objects containing information and links between or among the objects referred to herein as a model. The objects are computer data structures that structurally represent the real world items or components and their relationships. Those objects can be rendered into a concrete form for example in extended markup language XML form Unified Modeling Language UML form and or others. The model is used to automatically generate a user interface program which is a front user code for provisioning of the deployment of software application in the computing cloud. For example the information in the model is used by a front end user interface to dynamically present the available components in the cloud and match them to the configuration and requirements of the specific customer. The automatically generated user interface program may be further refined by the customer. At run time the user interface program accepts customer requirement specific inputs. Based on the inputs provisioning logic of the present disclosure determines resource allocations such as software and hardware components to deploy that best suit the customer s requirements.

The base model also defines or includes information about client functionality and requirements in structured data format. These include platform independent values specifying company functionality and behavior as requirements with precise representation of company procedures and rules. Example information about functionality and requirements may include but is not limited to what is to be done with the software or packaged application software to be deployed how the software or packaged application software should be deployed for the particular company etc. The base model may be generated automatically for example using methodologies such as those shown in U.S. patent application Ser. No. 12 575 163 filed Oct. 7 2009 the content of which is incorporated herein by reference in its entirety.

The base model further may define or include information about previous knowledge on software application deployments benchmark data and the like in structured data format. This information may include requirements for various projects. The information may be extracted for example from previously recorded or historical data relating to projects that have been provisioned before a priori knowledge of different projects for instance from experts benchmark data relating to different projects the information about the best or leading practices collected in repositories and others. For instance requirements and configuration data for deploying software applications for various projects are converted into an object link model form and for example stored as an XML file. Examples of such data may include but are not limited to the size of random access memory RAM processing speed of a processor database size table names and other hardware requirements and software configuration parameters for instance that a software application may require in order to properly deploy and run the software application.

The base model may be built by typing in or otherwise entering data into an editor such as the XML editor and creating the XML file. The data may also be entered into different file format e.g. an Excel file and an automatic tool may be used to convert or translate the Excel file data into the XML format or other model format.

As described above the base model represents in structural data form hardware and software for example the entire stack from operating system to web application servers to applications which will specify all the system prerequisite information of the components configuration information of the components integration information across the components if needed and links among them specifying how they are related and how they affect each other depending on their assigned values.

The information so modeled may be used to automatically and dynamically generate user interface UI code and or forms or the like that provide the users with different options for system configurations that are appropriate for the user defined requirements for the user s project. For instance an Eclipse Modeling framework EMF can use the information in the model to automatically and dynamically generate UI code and other applications e.g. application programming interface API capable of presenting the system configuration and parameter information to the user for a project. The model may be used repeatedly for different projects and also may be updated with new or updated information as more projects are provisioned and or as new or more information is obtained. For example the updated model may be used for generating UI code and or other applications for provisioning a project. The model may be updated and or used for provisioning another project by again automatically creating the UI code or API or the like based on the updated model. The generated UI code and or other applications are dynamic in that the code may change as the model is changed for instance as different projects are deployed. EMF is a modeling framework and code generation facility for building tools and other applications based on a structured data model. From a model specification described in XMI EMF provides tools and runtime support to produce a set of Java classes for the model along with a set of adapter classes that enable viewing and command based editing of the model and a basic editor.

The following is an example model stored in XML format. This XML document is an XML schema which describes the structure of XML documents which in turn specify a platform independent cloud computing model capturing the objects attributes company functionality and behavior of the program code that will be generated to support the provision of software application components in a cloud environment. In this particular example the XML schema defines the practice client project appliance one or more software images or installation related files platform software application and their types and attributes parameters in the model. A UI code may be automatically generated from this model. The UI code that is generated displays the objects and their attributes and accepts user values.

A portal UI may present one or more forms created dynamically based on the information in the model for instance using an EMF . UI refers to the user interface software used by the user to interact with the system logic or the like. A portal UI refers to the user interface that provides the user with a central place to interact with the system logic for example for resource allocation for software modules in a cloud environment. Web portal UI refers to the portal UI that runs on a Web browser rather than a proprietary graphical user interface.

The forms presented may include one or more questions and or finable input fields. The user may enter the answers to the questions and populate the input fields. The questions and input fields relate to values and parameters that may be used to determine which hardware and software components should be deployed to best suit the user s project. The user for example enters those values making decisions as to the deploying of the specified software applications. The portal UI may also present a list of components to deploy which is dynamically generated based on the model and from which the user may select. The list may include optional configurations that the user can select from a list of software modules that should be integrated together and others.

The user entered values thus define the specific configuration of a particular project. For instance the user may provide information such as various user counts per tool domain length of the project high availability requirements environment requirements security requirements backup and restore requirements cost requirements geographic distribution requirements and others. The portal UI may be a Web browser based tool that may be entered by the user by opening the appropriate URL uniform resource locator on a Web browser.

The logic in the portal UI and or the provisioning subsystem may use the user input data and perform an analysis of the model to determine the cloud computing components to deploy for the project as defined by the user entered requirements. The analytics may also take into account the models of previous projects benchmark data and other modeled information to determine the cloud computing components to present to the user for deployment.

The model based provisioning module or system retrieves various software images computer files needed for running software applications . The model based provisioning module or system also requests resources from a server pool that includes various hardware components in one or more data centers. For example hardware components needed to meet the requirements for the project specified by the user are retrieved. Thus the model based provisioning module or system fulfills the user entered requirements for the project by installing and configuring the selected software applications on the hardware servers .

The model based provisioning module or system creates one or more virtual machines VM that are able to handle the requirements entered by the user. The VM represents actual installation of the components with the necessary modifications of the parameter values for configuration. The VM can be installed on one or more physical hardware servers in data centers.

At a user interface program is automatically generated based on the information in the model. The automatically generated UI program for example presents a UI form or the like that is dynamically generated based on the model and that further presents appropriate questions and input fields for the user to answer populate or select. A model driven architecture MDA tool such as EMF tool that can generate a UI code or other application codes based on XML or the like data may be utilized to automatically and dynamically generate the UI program.

At the user may adjust or modify the UI program to meets the user s needs. For instance when the EMF or the like mechanism automatically generates a user interface and operations manipulating the objects and their attributes specified in the model it may provide basic get and set operations along with primitive user interface. This provides a starting point for the user to define more sophisticated and high level programming interfaces. Also the user can refine the user interface operations and also integrate the newly defined system with the other systems easily. Additionally the user may add any platform specific information to the model or the UI code at this point for example so that the performance of the generated code deployed in the particular platform will be optimized.

The UI program may be further refined to provide more high level operations on the objects and attributes user friendlier user interface and additional utilities such as data validity check. Also they may be optimized for performance by additional customization on platform specific attributes for the particular platform of the provisioning system. Further cosmetic changes style and look and feel changes may be added.

At the automatically generated UI code runs and presents the dynamically generated information about the company functionality and its requirements and also prompts the user for input values. Input values that the user may enter may include but are not limited to the speed of the processor the size of RAM operating system such as Linux or Windows or others component specific configurations such as database size table names and others that the user desires for running the packaged software applications. The automatically generated user interface may also present a menu of software modules items or components the user can select from possible set of components to deploy.

At based on the user input in step i.e. various data parameters and selected software modules items and or components provisioning subsystem logic of the present disclosure further queries and analyzes the model and determines one or more sets of components in the cloud computing that the user should deploy to meet the defined configuration requirements. The one or more sets of components may include but are not limited to various software components that should be integrated together that meet the user defined configuration requirements various hardware and firmware components that likewise can be used for running the various software components and the like. For instance for the selected software module the logic of the present disclosure tries to determine the optimal allocation of computing resources with the optimal configuration e.g. central processing unit CPU memory servers platforms and others. Further auxiliary files are put together and ready for compilation and deployment for instance linking with legacy or other code if needed. In this determining process the logic of the present disclosure utilizes the information captured in the model.

The deployment then can take place using the automatically generated code and auxiliary files. In addition information about this instance of deployment may be saved in the similar model format for instance in an XML format or the like. Such models may be used to generate progress reports for example for project management and monitoring.

In addition the information about this instance of deployment saved as one or more models may be used to generate documents that specify the deployment procedure which the user can view or use. Those documents can be used as requirement documents and guides for deploying packaged software applications.

Further script patches may be generated for a UI code in similar manner in which a patch model is built and UI from the patch model is automatically generated as script patches.

As described above the UI may be a web enabled or web browser enabled user interface. For instance a user may open or enter the UI by accessing the appropriate uniform resource locator URL associated with the UI code.

The steps shown in need not be performed all together. For instance model generating step may have been performed previously unrelated to the session for automatically generating a UI code and running the generated UI. Even yet the model generating step may be performed incrementally adding information to the model independent of the UI code generating and running steps. Likewise the UI code generating step and adjusting step may be performed at different times than the UI run time steps of and .

The cloud computing in one embodiment may be based on Research Compute Cloud e RC2 e Vega and Mirage research technologies. RC2 e serves as a living lab to showcase early unproven Research Technologies in context of the Research Compute Cloud. Vega Provisioning manager provides a provisioning abstraction layer to support a standard image based deployment across a multiple target virtualization technologies. It supports both single and composite server images and provides documented way for creating images for deployment. It provides a uniform mechanism to rapidly provision complex topologies using virtual images. Mirage Image repository treats images as structured data not machines. It performs IT operations on views of images exploits redundancy among large numbers of images and maintains image relationships. It provides efficient storage simplified faster image maintenance and faster image search image mobility through demand fetch.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

Referring now to the systems and methodologies of the present disclosure may be carried out or executed in a computer system that includes a processing unit which houses one or more processors and or cores memory and other systems components not shown expressly in the drawing that implement a computer processing system or computer that may execute a computer program product. The computer program product may comprise media for example a hard disk a compact storage medium such as a compact disc or other storage devices which may be read by the processing unit by any techniques known or will be known to the skilled artisan for providing the computer program product to the processing system for execution.

The computer program product may comprise all the respective features enabling the implementation of the methodology described herein and which when loaded in a computer system is able to carry out the methods. Computer program software program program or software in the present context means any expression in any language code or notation of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of the following a conversion to another language code or notation and or b reproduction in a different material form.

The computer processing system that carries out the system and method of the present disclosure may also include a display device such as a monitor or display screen for presenting output displays and providing a display through which the user may input data and interact with the processing system for instance in cooperation with input devices such as the keyboard and mouse device or pointing device. The computer processing system may be also connected or coupled to one or more peripheral devices such as the printer scanner not shown speaker and any other devices directly or via remote connections. The computer processing system may be connected or coupled to one or more other processing systems such as a server other remote computer processing system network storage devices via any one or more of a local Ethernet WAN connection Internet etc. or via any other networking methodologies that connect different computing systems and allow them to communicate with one another. The various functionalities and modules of the systems and methods of the present disclosure may be implemented or carried out distributedly on different processing systems e.g. or on any single platform for instance accessing data stored locally or distributedly on the network.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements if any in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

Various aspects of the present disclosure may be embodied as a program software or computer instructions embodied in a computer or machine usable or readable medium which causes the computer or machine to perform the steps of the method when executed on the computer processor and or machine. A program storage device readable by a machine tangibly embodying a program of instructions executable by the machine to perform various functionalities and methods described in the present disclosure is also provided.

The system and method of the present disclosure may be implemented and run on a general purpose computer or special purpose computer system. The computer system may be any type of known or will be known systems and may typically include a processor memory device a storage device input output devices internal buses and or a communications interface for communicating with other computer systems in conjunction with communication hardware and software etc.

The terms computer system and computer network as may be used in the present application may include a variety of combinations of fixed and or portable computer hardware software peripherals and storage devices. The computer system may include a plurality of individual components that are networked or otherwise linked to perform collaboratively or may include one or more stand alone components. The hardware and software components of the computer system of the present application may include and may be included within fixed and portable devices such as desktop laptop server. A module may be a component of a device software program or system that implements some functionality which can be embodied as software hardware firmware electronic circuitry or etc.

The embodiments described above are illustrative examples and it should not be construed that the present invention is limited to these particular embodiments. Thus various changes and modifications may be effected by one skilled in the art without departing from the spirit or scope of the invention as defined in the appended claims.

