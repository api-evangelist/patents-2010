---

title: Systems and methods for providing a virtual appliance in an application delivery fabric
abstract: The present disclosure is directed to systems and method for providing a virtual appliance. One or more application delivery controller appliances intermediary to a plurality of clients and a plurality of servers perform a plurality of application delivery control functions on network traffic communicated between the plurality of clients and the plurality of servers. A virtual application delivery controller is deployed on a device intermediary to the plurality of clients and the plurality of servers. The virtual application delivery controller executing on the device performs one or more of the plurality of application delivery control functions on network traffic communicated between the plurality of clients and the plurality of servers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08868724&OS=08868724&RS=08868724
owner: Citrix Systems, Inc.
number: 08868724
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20100430
---
This application claims priority to and is a non provisional of U.S. Application No. 61 174 699 Systems and Methods for Providing a Virtual Appliance in an Application Delivery Fabric filed May 1 2009 which is incorporated by reference in its entirety.

The present application generally relates to application delivery controllers. In particular the present application relates to systems and methods for providing one or more virtual application delivery controllers in an application delivery fabric.

Providing an application delivery fabric ADF whose capacity matches demands for resources presents a challenging dilemma. An ADF designer must estimate an expected level of demand for resources and purchase the corresponding number of application delivery controllers to service this demand and each of the application delivery controllers can be expensive. If the purchased application delivery controllers cannot service demands for resources the ADF can become overloaded resulting in a drop in performance. As a result additional controllers may need to be purchased. However should demand drop controllers in the fabric may be left idle. In this manner an application delivery fabric can prove to be insufficient for network needs or inefficiently used.

In the present disclosure application delivery controllers may be virtualized and deployed in response to ADF demands. A command center may monitor the loads of virtual application delivery controllers. If performance related metrics of the virtual application delivery controllers indicate the controllers are reaching their capacity or experiencing degradation in performance the command center may deploy additional virtual application delivery controllers in response. Further if the same metrics indicate that demand has dropped the command center may determine if loads may be consolidated on a fewer number of virtual controllers. Then the command center may undeploy virtual application delivery controllers thereby making resources available for other uses.

In one aspect the present disclosure is directed to a method for deploying a virtual application delivery controller. The method includes performing by one or more application delivery controller appliances intermediary to a plurality of clients and a plurality of servers a plurality of application delivery control functions on network traffic communicated between the plurality of clients and the plurality of servers. The method also includes deploying a virtual application delivery controller on a device intermediary to the plurality of clients and the plurality of servers. The method also includes performing by the virtual application delivery controller executing on the device one or more of the plurality of application delivery control functions on network traffic communicated between the plurality of clients and the plurality of servers.

The virtual application delivery controller may be deployed in a virtualized environment provided by the device. The virtual application delivery controller may be deployed to execute on a virtual machine provided by the device. The virtual application delivery controller may be deployed to execute as a virtual machine on the device. A cloud service may be requested to execute the virtual application delivery controller on resources provided by the cloud service. The virtual application delivery controller may be installed to execute in a non virtualized environment of the device. A centralized command center may determine to deploy the virtual application delivery controller. The one or more of the plurality of application delivery control functions for the virtual application delivery controller may be configured for deployment. The virtual application delivery controller may perform the one or more of the plurality of application delivery control functions on a first portion of network traffic concurrently to the one or more application delivery controller appliances performing the plurality of application delivery control functions on a second portion of network traffic. The virtual application delivery controller may perform a first application delivery control function on a first portion of network traffic subsequent to an application delivery controller appliance performing a second application delivery control function on the first portion of network traffic.

In another aspect the present disclosure is directed to a method for managing a plurality of application delivery controllers of an application delivery network. The method includes monitoring by an application delivery fabric ADF manager executing on a device an application delivery fabric ADF network comprising a deployment of a plurality of application delivery controllers intermediary to a plurality of a clients and a plurality of servers. The method also includes determining by the ADF manager responsive to monitoring that an operational or performance characteristic of the ADF network fails a corresponding threshold. The method also includes dynamically deploying by the ADF manager responsive to the determination a virtual application delivery controller as part of the ADF network.

The ADF manager may establish one or more application delivery controller appliances as part of the ADF network. The ADF manager may establish one or more virtual application delivery controllers as part of the ADF network. The ADF manager may determine responsive to monitoring that a number of users of the plurality of application delivery controllers exceeds a threshold. The ADF manager may determine responsive to monitoring that a number of connection of the plurality of application delivery controllers exceeds a threshold. The ADF manager may determine responsive to monitoring that response times of servers via the plurality of application delivery controllers exceeds a threshold. The ADF manager may determine responsive to monitoring that one of a bandwidth or transmission rates via the plurality of application delivery controllers exceeds a threshold. A cloud service may dynamically deploy the virtual application delivery controller. A virtual application delivery controller may be undeployed from the ADF network responsive to monitoring.

The features and advantages of the present invention will become more apparent from the detailed description set forth below when taken in conjunction with the drawings in which like reference characters identify corresponding elements throughout. In the drawings like reference numbers generally indicate identical functionally similar and or structurally similar elements.

Prior to discussing the specifics of embodiments of the systems and methods of an appliance and or client it may be helpful to discuss the network and computing environments in which such embodiments may be deployed. Referring now to an embodiment of a network environment is depicted. In brief overview the network environment comprises one or more clients also generally referred to as local machine s or client s in communication with one or more servers also generally referred to as server s or remote machine s via one or more networks generally referred to as network . In some embodiments a client communicates with a server via an appliance .

Although shows a network and a network between the clients and the servers the clients and the servers may be on the same network . The networks and can be the same type of network or different types of networks. The network and or the network can be a local area network LAN such as a company Intranet a metropolitan area network MAN or a wide area network WAN such as the Internet or the World Wide Web. In one embodiment network may be a private network and network may be a public network. In some embodiments network may be a private network and network a public network. In another embodiment networks and may both be private networks. In some embodiments clients may be located at a branch office of a corporate enterprise communicating via a WAN connection over the network to the servers located at a corporate data center.

The network and or be any type and or form of network and may include any of the following a point to point network a broadcast network a wide area network a local area network a telecommunications network a data communication network a computer network an ATM Asynchronous Transfer Mode network a SONET Synchronous Optical Network network a SDH Synchronous Digital Hierarchy network a wireless network and a wireline network. In some embodiments the network may comprise a wireless link such as an infrared channel or satellite band. The topology of the network and or may be a bus star or ring network topology. The network and or and network topology may be of any such network or network topology as known to those ordinarily skilled in the art capable of supporting the operations described herein.

As shown in the appliance which also may be referred to as an interface unit or gateway is shown between the networks and . In some embodiments the appliance may be located on network . For example a branch office of a corporate enterprise may deploy an appliance at the branch office. In other embodiments the appliance may be located on network . For example an appliance may be located at a corporate data center. In yet another embodiment a plurality of appliances may be deployed on network . In some embodiments a plurality of appliances may be deployed on network . In one embodiment a first appliance communicates with a second appliance . In other embodiments the appliance could be a part of any client or server on the same or different network as the client . One or more appliances may be located at any point in the network or network communications path between a client and a server .

In some embodiments the appliance comprises any of the network devices manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. referred to as Citrix NetScaler devices. In other embodiments the appliance includes any of the product embodiments referred to as WebAccelerator and BigIP manufactured by F5 Networks Inc. of Seattle Wash. In another embodiment the appliance includes any of the DX acceleration device platforms and or the SSL VPN series of devices such as SA 700 SA 2000 SA 4000 and SA 6000 devices manufactured by Juniper Networks Inc. of Sunnyvale Calif. In yet another embodiment the appliance includes any application acceleration and or security related appliances and or software manufactured by Cisco Systems Inc. of San Jose Calif. such as the Cisco ACE Application Control Engine Module service software and network modules and Cisco AVS Series Application Velocity System.

In one embodiment the system may include multiple logically grouped servers . In these embodiments the logical group of servers may be referred to as a server farm . In some of these embodiments the serves may be geographically dispersed. In some cases a farm may be administered as a single entity. In other embodiments the server farm comprises a plurality of server farms . In one embodiment the server farm executes one or more applications on behalf of one or more clients .

The servers within each farm can be heterogeneous. One or more of the servers can operate according to one type of operating system platform e.g. WINDOWS NT manufactured by Microsoft Corp. of Redmond Wash. while one or more of the other servers can operate on according to another type of operating system platform e.g. Unix or Linux . The servers of each farm do not need to be physically proximate to another server in the same farm . Thus the group of servers logically grouped as a farm may be interconnected using a wide area network WAN connection or medium area network MAN connection. For example a farm may include servers physically located in different continents or different regions of a continent country state city campus or room. Data transmission speeds between servers in the farm can be increased if the servers are connected using a local area network LAN connection or some form of direct connection.

Servers may be referred to as a file server application server web server proxy server or gateway server. In some embodiments a server may have the capacity to function as either an application server or as a master application server. In one embodiment a server may include an Active Directory. The clients may also be referred to as client nodes or endpoints. In some embodiments a client has the capacity to function as both a client node seeking access to applications on a server and as an application server providing access to hosted applications for other clients 

In some embodiments a client communicates with a server . In one embodiment the client communicates directly with one of the servers in a farm . In another embodiment the client executes a program neighborhood application to communicate with a server in a farm . In still another embodiment the server provides the functionality of a master node. In some embodiments the client communicates with the server in the farm through a network . Over the network the client can for example request execution of various applications hosted by the servers in the farm and receive output of the results of the application execution for display. In some embodiments only the master node provides the functionality required to identify and provide address information associated with a server hosting a requested application.

In one embodiment the server provides functionality of a web server. In another embodiment the server receives requests from the client forwards the requests to a second server and responds to the request by the client with a response to the request from the server . In still another embodiment the server acquires an enumeration of applications available to the client and address information associated with a server hosting an application identified by the enumeration of applications. In yet another embodiment the server presents the response to the request to the client using a web interface. In one embodiment the client communicates directly with the server to access the identified application. In another embodiment the client receives application output data such as display data generated by an execution of the identified application on the server .

Referring now to an embodiment of a network environment deploying multiple appliances is depicted. A first appliance may be deployed on a first network and a second appliance on a second network . For example a corporate enterprise may deploy a first appliance at a branch office and a second appliance at a data center. In another embodiment the first appliance and second appliance are deployed on the same network or network . For example a first appliance may be deployed for a first server farm and a second appliance may be deployed for a second server farm . In another example a first appliance may be deployed at a first branch office while the second appliance is deployed at a second branch office . In some embodiments the first appliance and second appliance work in cooperation or in conjunction with each other to accelerate network traffic or the delivery of application and data between a client and a server

Referring now to another embodiment of a network environment deploying the appliance with one or more other types of appliances such as between one or more WAN optimization appliance is depicted. For example a first WAN optimization appliance is shown between networks and and s second WAN optimization appliance may be deployed between the appliance and one or more servers . By way of example a corporate enterprise may deploy a first WAN optimization appliance at a branch office and a second WAN optimization appliance at a data center. In some embodiments the appliance may be located on network . In other embodiments the appliance may be located on network . In some embodiments the appliance may be located on network or network . In one embodiment the appliance and are on the same network. In another embodiment the appliance and are on different networks. In another example a first WAN optimization appliance may be deployed for a first server farm and a second WAN optimization appliance for a second server farm 

In one embodiment the appliance is a device for accelerating optimizing or otherwise improving the performance operation or quality of service of any type and form of network traffic such as traffic to and or from a WAN connection. In some embodiments the appliance is a performance enhancing proxy. In other embodiments the appliance is any type and form of WAN optimization or acceleration device sometimes also referred to as a WAN optimization controller. In one embodiment the appliance is any of the product embodiments referred to as WANScaler manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. In other embodiments the appliance includes any of the product embodiments referred to as BIG IP link controller and WANjet manufactured by F5 Networks Inc. of Seattle Wash. In another embodiment the appliance includes any of the WX and WXC WAN acceleration device platforms manufactured by Juniper Networks Inc. of Sunnyvale Calif. In some embodiments the appliance includes any of the steelhead line of WAN optimization appliances manufactured by Riverbed Technology of San Francisco Calif. In other embodiments the appliance includes any of the WAN related devices manufactured by Expand Networks Inc. of Roseland N.J. In one embodiment the appliance includes any of the WAN related appliances manufactured by Packeteer Inc. of Cupertino Calif. such as the PacketShaper iShared and SkyX product embodiments provided by Packeteer. In yet another embodiment the appliance includes any WAN related appliances and or software manufactured by Cisco Systems Inc. of San Jose Calif. such as the Cisco Wide Area Network Application Services software and network modules and Wide Area Network engine appliances.

In one embodiment the appliance provides application and data acceleration services for branch office or remote offices. In one embodiment the appliance includes optimization of Wide Area File Services WAFS . In another embodiment the appliance accelerates the delivery of files such as via the Common Internet File System CIFS protocol. In other embodiments the appliance provides caching in memory and or storage to accelerate delivery of applications and data. In one embodiment the appliance provides compression of network traffic at any level of the network stack or at any protocol or network layer. In another embodiment the appliance provides transport layer protocol optimizations flow control performance enhancements or modifications and or management to accelerate delivery of applications and data over a WAN connection. For example in one embodiment the appliance provides Transport Control Protocol TCP optimizations. In other embodiments the appliance provides optimizations flow control performance enhancements or modifications and or management for any session or application layer protocol.

In another embodiment the appliance encoded any type and form of data or information into custom or standard TCP and or IP header fields or option fields of network packet to announce presence functionality or capability to another appliance . In another embodiment an appliance may communicate with another appliance using data encoded in both TCP and or IP header fields or options. For example the appliance may use TCP option s or IP header fields or options to communicate one or more parameters to be used by the appliances in performing functionality such as WAN acceleration or for working in conjunction with each other.

In some embodiments the appliance preserves any of the information encoded in TCP and or IP header and or option fields communicated between appliances and . For example the appliance may terminate a transport layer connection traversing the appliance such as a transport layer connection from between a client and a server traversing appliances and . In one embodiment the appliance identifies and preserves any encoded information in a transport layer packet transmitted by a first appliance via a first transport layer connection and communicates a transport layer packet with the encoded information to a second appliance via a second transport layer connection.

Referring now to a network environment for delivering and or operating a computing environment on a client is depicted. In some embodiments a server includes an application delivery system for delivering a computing environment or an application and or data file to one or more clients . In brief overview a client is in communication with a server via network and appliance . For example the client may reside in a remote office of a company e.g. a branch office and the server may reside at a corporate data center. The client comprises a client agent and a computing environment . The computing environment may execute or operate an application that accesses processes or uses a data file. The computing environment application and or data file may be delivered via the appliance and or the server .

In some embodiments the appliance accelerates delivery of a computing environment or any portion thereof to a client . In one embodiment the appliance accelerates the delivery of the computing environment by the application delivery system . For example the embodiments described herein may be used to accelerate delivery of a streaming application and data file processable by the application from a central corporate data center to a remote user location such as a branch office of the company. In another embodiment the appliance accelerates transport layer traffic between a client and a server . The appliance may provide acceleration techniques for accelerating any transport layer payload from a server to a client such as 1 transport layer connection pooling 2 transport layer connection multiplexing 3 transport control protocol buffering 4 compression and 5 caching. In some embodiments the appliance provides load balancing of servers in responding to requests from clients . In other embodiments the appliance acts as a proxy or access server to provide access to the one or more servers . In another embodiment the appliance provides a secure virtual private network connection from a first network of the client to the second network of the server such as an SSL VPN connection. It yet other embodiments the appliance provides application firewall security control and management of the connection and communications between a client and a server .

In some embodiments the application delivery management system provides application delivery techniques to deliver a computing environment to a desktop of a user remote or otherwise based on a plurality of execution methods and based on any authentication and authorization policies applied via a policy engine . With these techniques a remote user may obtain a computing environment and access to server stored applications and data files from any network connected device . In one embodiment the application delivery system may reside or execute on a server . In another embodiment the application delivery system may reside or execute on a plurality of servers . In some embodiments the application delivery system may execute in a server farm . In one embodiment the server executing the application delivery system may also store or provide the application and data file. In another embodiment a first set of one or more servers may execute the application delivery system and a different server may store or provide the application and data file. In some embodiments each of the application delivery system the application and data file may reside or be located on different servers. In yet another embodiment any portion of the application delivery system may reside execute or be stored on or distributed to the appliance or a plurality of appliances.

The client may include a computing environment for executing an application that uses or processes a data file. The client via networks and appliance may request an application and data file from the server . In one embodiment the appliance may forward a request from the client to the server . For example the client may not have the application and data file stored or accessible locally. In response to the request the application delivery system and or server may deliver the application and data file to the client . For example in one embodiment the server may transmit the application as an application stream to operate in computing environment on client .

In some embodiments the application delivery system comprises any portion of the Citrix Access Suite by Citrix Systems Inc. such as the MetaFrame or Citrix Presentation Server and or any of the Microsoft Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment the application delivery system may deliver one or more applications to clients or users via a remote display protocol or otherwise via remote based or server based computing. In another embodiment the application delivery system may deliver one or more applications to clients or users via steaming of the application.

In one embodiment the application delivery system includes a policy engine for controlling and managing the access to selection of application execution methods and the delivery of applications. In some embodiments the policy engine determines the one or more applications a user or client may access. In another embodiment the policy engine determines how the application should be delivered to the user or client e.g. the method of execution. In some embodiments the application delivery system provides a plurality of delivery techniques from which to select a method of application execution such as a server based computing streaming or delivering the application locally to the client for local execution.

In one embodiment a client requests execution of an application program and the application delivery system comprising a server selects a method of executing the application program. In some embodiments the server receives credentials from the client . In another embodiment the server receives a request for an enumeration of available applications from the client . In one embodiment in response to the request or receipt of credentials the application delivery system enumerates a plurality of application programs available to the client . The application delivery system receives a request to execute an enumerated application. The application delivery system selects one of a predetermined number of methods for executing the enumerated application for example responsive to a policy of a policy engine. The application delivery system may select a method of execution of the application enabling the client to receive application output data generated by execution of the application program on a server . The application delivery system may select a method of execution of the application enabling the local machine to execute the application program locally after retrieving a plurality of application files comprising the application. In yet another embodiment the application delivery system may select a method of execution of the application to stream the application via the network to the client .

A client may execute operate or otherwise provide an application which can be any type and or form of software program or executable instructions such as any type and or form of web browser web based client client server application a thin client computing client an ActiveX control or a Java applet or any other type and or form of executable instructions capable of executing on client . In some embodiments the application may be a server based or a remote based application executed on behalf of the client on a server . In one embodiments the server may display output to the client using any thin client or remote display protocol such as the Independent Computing Architecture ICA protocol manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. or the Remote Desktop Protocol RDP manufactured by the Microsoft Corporation of Redmond Wash. The application can use any type of protocol and it can be for example an HTTP client an FTP client an Oscar client or a Telnet client. In other embodiments the application comprises any type of software related to VoIP communications such as a soft IP telephone. In further embodiments the application comprises any application related to real time data communications such as applications for streaming video and or audio.

In some embodiments the server or a server farm may be running one or more applications such as an application providing a thin client computing or remote display presentation application. In one embodiment the server or server farm executes as an application any portion of the Citrix Access Suite by Citrix Systems Inc. such as the MetaFrame or Citrix Presentation Server and or any of the Microsoft Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment the application is an ICA client developed by Citrix Systems Inc. of Fort Lauderdale Fla. In other embodiments the application includes a Remote Desktop RDP client developed by Microsoft Corporation of Redmond Wash. Also the server may run an application which for example may be an application server providing email services such as Microsoft Exchange manufactured by the Microsoft Corporation of Redmond Wash. a web or Internet server or a desktop sharing server or a collaboration server. In some embodiments any of the applications may comprise any type of hosted service or products such as GoToMeeting provided by Citrix Online Division Inc. of Santa Barbara Calif. WebEx provided by WebEx Inc. of Santa Clara Calif. or Microsoft Office Live Meeting provided by Microsoft Corporation of Redmond Wash.

Still referring to an embodiment of the network environment may include a monitoring server A. The monitoring server A may include any type and form performance monitoring service . The performance monitoring service may include monitoring measurement and or management software and or hardware including data collection aggregation analysis management and reporting. In one embodiment the performance monitoring service includes one or more monitoring agents . The monitoring agent includes any software hardware or combination thereof for performing monitoring measurement and data collection activities on a device such as a client server or an appliance . In some embodiments the monitoring agent includes any type and form of script such as Visual Basic script or Javascript. In one embodiment the monitoring agent executes transparently to any application and or user of the device. In some embodiments the monitoring agent is installed and operated unobtrusively to the application or client. In yet another embodiment the monitoring agent is installed and operated without any instrumentation for the application or device.

In some embodiments the monitoring agent monitors measures and collects data on a predetermined frequency. In other embodiments the monitoring agent monitors measures and collects data based upon detection of any type and form of event. For example the monitoring agent may collect data upon detection of a request for a web page or receipt of an HTTP response. In another example the monitoring agent may collect data upon detection of any user input events such as a mouse click. The monitoring agent may report or provide any monitored measured or collected data to the monitoring service . In one embodiment the monitoring agent transmits information to the monitoring service according to a schedule or a predetermined frequency. In another embodiment the monitoring agent transmits information to the monitoring service upon detection of an event.

In some embodiments the monitoring service and or monitoring agent performs monitoring and performance measurement of any network resource or network infrastructure element such as a client server server farm appliance appliance or network connection. In one embodiment the monitoring service and or monitoring agent performs monitoring and performance measurement of any transport layer connection such as a TCP or UDP connection. In another embodiment the monitoring service and or monitoring agent monitors and measures network latency. In yet one embodiment the monitoring service and or monitoring agent monitors and measures bandwidth utilization.

In other embodiments the monitoring service and or monitoring agent monitors and measures end user response times. In some embodiments the monitoring service performs monitoring and performance measurement of an application. In another embodiment the monitoring service and or monitoring agent performs monitoring and performance measurement of any session or connection to the application. In one embodiment the monitoring service and or monitoring agent monitors and measures performance of a browser. In another embodiment the monitoring service and or monitoring agent monitors and measures performance of HTTP based transactions. In some embodiments the monitoring service and or monitoring agent monitors and measures performance of a Voice over IP VoIP application or session. In other embodiments the monitoring service and or monitoring agent monitors and measures performance of a remote display protocol application such as an ICA client or RDP client. In yet another embodiment the monitoring service and or monitoring agent monitors and measures performance of any type and form of streaming media. In still a further embodiment the monitoring service and or monitoring agent monitors and measures performance of a hosted application or a Software As A Service SaaS delivery model.

In some embodiments the monitoring service and or monitoring agent performs monitoring and performance measurement of one or more transactions requests or responses related to application. In other embodiments the monitoring service and or monitoring agent monitors and measures any portion of an application layer stack such as any .NET or J2EE calls. In one embodiment the monitoring service and or monitoring agent monitors and measures database or SQL transactions. In yet another embodiment the monitoring service and or monitoring agent monitors and measures any method function or application programming interface API call.

In one embodiment the monitoring service and or monitoring agent performs monitoring and performance measurement of a delivery of application and or data from a server to a client via one or more appliances such as appliance and or appliance . In some embodiments the monitoring service and or monitoring agent monitors and measures performance of delivery of a virtualized application. In other embodiments the monitoring service and or monitoring agent monitors and measures performance of delivery of a streaming application. In another embodiment the monitoring service and or monitoring agent monitors and measures performance of delivery of a desktop application to a client and or the execution of the desktop application on the client. In another embodiment the monitoring service and or monitoring agent monitors and measures performance of a client server application.

In one embodiment the monitoring service and or monitoring agent is designed and constructed to provide application performance management for the application delivery system . For example the monitoring service and or monitoring agent may monitor measure and manage the performance of the delivery of applications via the Citrix Presentation Server. In this example the monitoring service and or monitoring agent monitors individual ICA sessions. The monitoring service and or monitoring agent may measure the total and per session system resource usage as well as application and networking performance. The monitoring service and or monitoring agent may identify the active servers for a given user and or user session. In some embodiments the monitoring service and or monitoring agent monitors back end connections between the application delivery system and an application and or database server. The monitoring service and or monitoring agent may measure network latency delay and volume per user session or ICA session.

In some embodiments the monitoring service and or monitoring agent measures and monitors memory usage for the application delivery system such as total memory usage per user session and or per process. In other embodiments the monitoring service and or monitoring agent measures and monitors CPU usage the application delivery system such as total CPU usage per user session and or per process. In another embodiments the monitoring service and or monitoring agent measures and monitors the time required to log in to an application a server or the application delivery system such as Citrix Presentation Server. In one embodiment the monitoring service and or monitoring agent measures and monitors the duration a user is logged into an application a server or the application delivery system . In some embodiments the monitoring service and or monitoring agent measures and monitors active and inactive session counts for an application server or application delivery system session. In yet another embodiment the monitoring service and or monitoring agent measures and monitors user session latency.

In yet further embodiments the monitoring service and or monitoring agent measures and monitors measures and monitors any type and form of server metrics. In one embodiment the monitoring service and or monitoring agent measures and monitors metrics related to system memory CPU usage and disk storage. In another embodiment the monitoring service and or monitoring agent measures and monitors metrics related to page faults such as page faults per second. In other embodiments the monitoring service and or monitoring agent measures and monitors round trip time metrics. In yet another embodiment the monitoring service and or monitoring agent measures and monitors metrics related to application crashes errors and or hangs.

In some embodiments the monitoring service and monitoring agent includes any of the product embodiments referred to as EdgeSight manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. In another embodiment the performance monitoring service and or monitoring agent includes any portion of the product embodiments referred to as the TrueView product suite manufactured by the Symphoniq Corporation of Palo Alto Calif. In one embodiment the performance monitoring service and or monitoring agent includes any portion of the product embodiments referred to as the TeaLeaf CX product suite manufactured by the TeaLeaf Technology Inc. of San Francisco Calif. In other embodiments the performance monitoring service and or monitoring agent includes any portion of the business service management products such as the BMC Performance Manager and Patrol products manufactured by BMC Software Inc. of Houston Tex.

The client server and appliance may be deployed as and or executed on any type and form of computing device such as a computer network device or appliance capable of communicating on any type and form of network and performing the operations described herein. depict block diagrams of a computing device useful for practicing an embodiment of the client server or appliance . As shown in each computing device includes a central processing unit and a main memory unit . As shown in a computing device may include a visual display device a keyboard and or a pointing device such as a mouse. Each computing device may also include additional optional elements such as one or more input output devices generally referred to using reference numeral and a cache memory in communication with the central processing unit .

The central processing unit is any logic circuitry that responds to and processes instructions fetched from the main memory unit . In many embodiments the central processing unit is provided by a microprocessor unit such as those manufactured by Intel Corporation of Mountain View Calif. those manufactured by Motorola Corporation of Schaumburg Ill. those manufactured by Transmeta Corporation of Santa Clara Calif. the RS 6000 processor those manufactured by International Business Machines of White Plains N.Y. or those manufactured by Advanced Micro Devices of Sunnyvale Calif. The computing device may be based on any of these processors or any other processor capable of operating as described herein.

Main memory unit may be one or more memory chips capable of storing data and allowing any storage location to be directly accessed by the microprocessor such as Static random access memory SRAM Burst SRAM or SynchBurst SRAM BSRAM Dynamic random access memory DRAM Fast Page Mode DRAM FPM DRAM Enhanced DRAM EDRAM Extended Data Output RAM EDO RAM Extended Data Output DRAM EDO DRAM Burst Extended Data Output DRAM BEDO DRAM Enhanced DRAM EDRAM synchronous DRAM SDRAM JEDEC SRAM PC 100 SDRAM Double Data Rate SDRAM DDR SDRAM Enhanced SDRAM ESDRAM SyncLink DRAM SLDRAM Direct Rambus DRAM DRDRAM or Ferroelectric RAM FRAM . The main memory may be based on any of the above described memory chips or any other available memory chips capable of operating as described herein. In the embodiment shown in the processor communicates with main memory via a system bus described in more detail below . depicts an embodiment of a computing device in which the processor communicates directly with main memory via a memory port . For example in the main memory may be DRDRAM.

The computing device may support any suitable installation device such as a floppy disk drive for receiving floppy disks such as 3.5 inch 5.25 inch disks or ZIP disks a CD ROM drive a CD R RW drive a DVD ROM drive tape drives of various formats USB device hard drive or any other device suitable for installing software and programs such as any client agent or portion thereof. The computing device may further comprise a storage device such as one or more hard disk drives or redundant arrays of independent disks for storing an operating system and other related software and for storing application software programs such as any program related to the client agent . Optionally any of the installation devices could also be used as the storage device . Additionally the operating system and the software can be run from a bootable medium for example a bootable CD such as KNOPPIX a bootable CD for GNU Linux that is available as a GNU Linux distribution from knoppix.net.

Furthermore the computing device may include a network interface to interface to a Local Area Network LAN Wide Area Network WAN or the Internet through a variety of connections including but not limited to standard telephone lines LAN or WAN links e.g. 802.11 T1 T3 56 kb X.25 broadband connections e.g. ISDN Frame Relay ATM wireless connections or some combination of any or all of the above. The network interface may comprise a built in network adapter network interface card PCMCIA network card card bus network adapter wireless network adapter USB network adapter modem or any other device suitable for interfacing the computing device to any type of network capable of communication and performing the operations described herein. A wide variety of I O devices may be present in the computing device . Input devices include keyboards mice trackpads trackballs microphones and drawing tablets. Output devices include video displays speakers inkjet printers laser printers and dye sublimation printers. The I O devices may be controlled by an I O controller as shown in . The I O controller may control one or more I O devices such as a keyboard and a pointing device e.g. a mouse or optical pen. Furthermore an I O device may also provide storage and or an installation medium for the computing device . In still other embodiments the computing device may provide USB connections to receive handheld USB storage devices such as the USB Flash Drive line of devices manufactured by Twintech Industry Inc. of Los Alamitos Calif.

In some embodiments the computing device may comprise or be connected to multiple display devices which each may be of the same or different type and or form. As such any of the I O devices and or the I O controller may comprise any type and or form of suitable hardware software or combination of hardware and software to support enable or provide for the connection and use of multiple display devices by the computing device . For example the computing device may include any type and or form of video adapter video card driver and or library to interface communicate connect or otherwise use the display devices . In one embodiment a video adapter may comprise multiple connectors to interface to multiple display devices . In other embodiments the computing device may include multiple video adapters with each video adapter connected to one or more of the display devices . In some embodiments any portion of the operating system of the computing device may be configured for using multiple displays . In other embodiments one or more of the display devices may be provided by one or more other computing devices such as computing devices and connected to the computing device for example via a network. These embodiments may include any type of software designed and constructed to use another computer s display device as a second display device for the computing device . One ordinarily skilled in the art will recognize and appreciate the various ways and embodiments that a computing device may be configured to have multiple display devices 

In further embodiments an I O device may be a bridge between the system bus and an external communication bus such as a USB bus an Apple Desktop Bus an RS 232 serial connection a SCSI bus a FireWire bus a FireWire 800 bus an Ethernet bus an AppleTalk bus a Gigabit Ethernet bus an Asynchronous Transfer Mode bus a HIPPI bus a Super HIPPI bus a SerialPlus bus a SCI LAMP bus a FibreChannel bus or a Serial Attached small computer system interface bus.

A computing device of the sort depicted in typically operate under the control of operating systems which control scheduling of tasks and access to system resources. The computing device can be running any operating system such as any of the versions of the Microsoft Windows operating systems the different releases of the Unix and Linux operating systems any version of the Mac OS for Macintosh computers any embedded operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or any other operating system capable of running on the computing device and performing the operations described herein. Typical operating systems include WINDOWS 3.x WINDOWS 95 WINDOWS 98 WINDOWS 2000 WINDOWS NT 3.51 WINDOWS NT 4.0 WINDOWS CE and WINDOWS XP all of which are manufactured by Microsoft Corporation of Redmond Wash. MacOS manufactured by Apple Computer of Cupertino Calif. OS 2 manufactured by International Business Machines of Armonk N.Y. and Linux a freely available operating system distributed by Caldera Corp. of Salt Lake City Utah or any type and or form of a Unix operating system among others.

In other embodiments the computing device may have different processors operating systems and input devices consistent with the device. For example in one embodiment the computer is a Treo 180 270 1060 600 or 650 smart phone manufactured by Palm Inc. In this embodiment the Treo smart phone is operated under the control of the PalmOS operating system and includes a stylus input device as well as a five way navigator device. Moreover the computing device can be any workstation desktop computer laptop or notebook computer server handheld computer mobile telephone any other computer or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.

As shown in the computing device may comprise multiple processors and may provide functionality for simultaneous execution of instructions or for simultaneous execution of one instruction on more than one piece of data. In some embodiments the computing device may comprise a parallel processor with one or more cores. In one of these embodiments the computing device is a shared memory parallel device with multiple processors and or multiple processor cores accessing all available memory as a single global address space. In another of these embodiments the computing device is a distributed memory parallel device with multiple processors each accessing local memory only. In still another of these embodiments the computing device has both some memory which is shared and some memory which can only be accessed by particular processors or subsets of processors. In still even another of these embodiments the computing device such as a multicore microprocessor combines two or more independent processors into a single package often a single integrated circuit IC . In yet another of these embodiments the computing device includes a chip having a CELL BROADBAND ENGINE architecture and including a Power processor element and a plurality of synergistic processing elements the Power processor element and the plurality of synergistic processing elements linked together by an internal high speed bus which may be referred to as an element interconnect bus.

In some embodiments the processors provide functionality for execution of a single instruction simultaneously on multiple pieces of data SIMD . In other embodiments the processors provide functionality for execution of multiple instructions simultaneously on multiple pieces of data MIMD . In still other embodiments the processor may use any combination of SIMD and MIMD cores in a single device.

In some embodiments the computing device may comprise a graphics processing unit. In one of these embodiments depicted in the computing device includes at least one central processing unit and at least one graphics processing unit. In another of these embodiments the computing device includes at least one parallel processing unit and at least one graphics processing unit. In still another of these embodiments the computing device includes a plurality of processing units of any type one of the plurality of processing units comprising a graphics processing unit.

In some embodiments a first computing device executes an application on behalf of a user of a client computing device . In other embodiments a computing device executes a virtual machine which provides an execution session within which applications execute on behalf of a user or a client computing devices . In one of these embodiments the execution session is a hosted desktop session. In another of these embodiments the computing device executes a terminal services session. The terminal services session may provide a hosted desktop environment. In still another of these embodiments the execution session provides access to a computing environment which may comprise one or more of an application a plurality of applications a desktop application and a desktop session in which one or more applications may execute.

Hardware layer provides the hardware elements upon which programs and services within kernel space and user space are executed. Hardware layer also provides the structures and elements which allow programs and services within kernel space and user space to communicate data both internally and externally with respect to appliance . As shown in the hardware layer includes a processing unit for executing software programs and services a memory for storing software and data network ports for transmitting and receiving data over a network and an encryption processor for performing functions related to Secure Sockets Layer processing of data transmitted and received over the network. In some embodiments the central processing unit may perform the functions of the encryption processor in a single processor. Additionally the hardware layer may comprise multiple processors for each of the processing unit and the encryption processor . The processor may include any of the processors described above in connection with . In some embodiments the central processing unit may perform the functions of the encryption processor in a single processor. Additionally the hardware layer may comprise multiple processors for each of the processing unit and the encryption processor . For example in one embodiment the appliance comprises a first processor and a second processor . In other embodiments the processor or comprises a multi core processor.

Although the hardware layer of appliance is generally illustrated with an encryption processor processor may be a processor for performing functions related to any encryption protocol such as the Secure Socket Layer SSL or Transport Layer Security TLS protocol. In some embodiments the processor may be a general purpose processor GPP and in further embodiments may be have executable instructions for performing processing of any security related protocol.

Although the hardware layer of appliance is illustrated with certain elements in the hardware portions or components of appliance may comprise any type and form of elements hardware or software of a computing device such as the computing device illustrated and discussed herein in conjunction with . In some embodiments the appliance may comprise a server gateway router switch bridge or other type of computing or network device and have any hardware and or software elements associated therewith.

The operating system of appliance allocates manages or otherwise segregates the available system memory into kernel space and user space . In example software architecture the operating system may be any type and or form of Unix operating system although the invention is not so limited. As such the appliance can be running any operating system such as any of the versions of the Microsoft Windows operating systems the different releases of the Unix and Linux operating systems any version of the Mac OS for Macintosh computers any embedded operating system any network operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or network devices or any other operating system capable of running on the appliance and performing the operations described herein.

The kernel space is reserved for running the kernel including any device drivers kernel extensions or other kernel related software. As known to those skilled in the art the kernel is the core of the operating system and provides access control and management of resources and hardware related elements of the application . In accordance with an embodiment of the appliance the kernel space also includes a number of network services or processes working in conjunction with a cache manager sometimes also referred to as the integrated cache the benefits of which are described in detail further herein. Additionally the embodiment of the kernel will depend on the embodiment of the operating system installed configured or otherwise used by the device .

In one embodiment the device comprises one network stack such as a TCP IP based stack for communicating with the client and or the server . In one embodiment the network stack is used to communicate with a first network such as network and a second network . In some embodiments the device terminates a first transport layer connection such as a TCP connection of a client and establishes a second transport layer connection to a server for use by the client e.g. the second transport layer connection is terminated at the appliance and the server . The first and second transport layer connections may be established via a single network stack . In other embodiments the device may comprise multiple network stacks for example and and the first transport layer connection may be established or terminated at one network stack and the second transport layer connection on the second network stack . For example one network stack may be for receiving and transmitting network packet on a first network and another network stack for receiving and transmitting network packets on a second network. In one embodiment the network stack comprises a buffer for queuing one or more network packets for transmission by the appliance .

As shown in the kernel space includes the cache manager a high speed layer integrated packet engine an encryption engine a policy engine and multi protocol compression logic . Running these components or processes and in kernel space or kernel mode instead of the user space improves the performance of each of these components alone and in combination. Kernel operation means that these components or processes and run in the core address space of the operating system of the device . For example running the encryption engine in kernel mode improves encryption performance by moving encryption and decryption operations to the kernel thereby reducing the number of transitions between the memory space or a kernel thread in kernel mode and the memory space or a thread in user mode. For example data obtained in kernel mode may not need to be passed or copied to a process or thread running in user mode such as from a kernel level data structure to a user level data structure. In another aspect the number of context switches between kernel mode and user mode are also reduced. Additionally synchronization of and communications between any of the components or processes and can be performed more efficiently in the kernel space .

In some embodiments any portion of the components and may run or operate in the kernel space while other portions of these components and may run or operate in user space . In one embodiment the appliance uses a kernel level data structure providing access to any portion of one or more network packets for example a network packet comprising a request from a client or a response from a server . In some embodiments the kernel level data structure may be obtained by the packet engine via a transport layer driver interface or filter to the network stack . The kernel level data structure may comprise any interface and or data accessible via the kernel space related to the network stack network traffic or packets received or transmitted by the network stack . In other embodiments the kernel level data structure may be used by any of the components or processes and to perform the desired operation of the component or process. In one embodiment a component and is running in kernel mode when using the kernel level data structure while in another embodiment the component and is running in user mode when using the kernel level data structure. In some embodiments the kernel level data structure may be copied or passed to a second kernel level data structure or any desired user level data structure.

The cache manager may comprise software hardware or any combination of software and hardware to provide cache access control and management of any type and form of content such as objects or dynamically generated objects served by the originating servers . The data objects or content processed and stored by the cache manager may comprise data in any format such as a markup language or communicated via any protocol. In some embodiments the cache manager duplicates original data stored elsewhere or data previously computed generated or transmitted in which the original data may require longer access time to fetch compute or otherwise obtain relative to reading a cache memory element. Once the data is stored in the cache memory element future use can be made by accessing the cached copy rather than refetching or recomputing the original data thereby reducing the access time. In some embodiments the cache memory element may comprise a data object in memory of device . In other embodiments the cache memory element may comprise memory having a faster access time than memory . In another embodiment the cache memory element may comprise any type and form of storage element of the device such as a portion of a hard disk. In some embodiments the processing unit may provide cache memory for use by the cache manager . In yet further embodiments the cache manager may use any portion and combination of memory storage or the processing unit for caching data objects and other content.

Furthermore the cache manager includes any logic functions rules or operations to perform any embodiments of the techniques of the appliance described herein. For example the cache manager includes logic or functionality to invalidate objects based on the expiration of an invalidation time period or upon receipt of an invalidation command from a client or server . In some embodiments the cache manager may operate as a program service process or task executing in the kernel space and in other embodiments in the user space . In one embodiment a first portion of the cache manager executes in the user space while a second portion executes in the kernel space . In some embodiments the cache manager can comprise any type of general purpose processor GPP or any other type of integrated circuit such as a Field Programmable Gate Array FPGA Programmable Logic Device PLD or Application Specific Integrated Circuit ASIC .

The policy engine may include for example an intelligent statistical engine or other programmable application s . In one embodiment the policy engine provides a configuration mechanism to allow a user to identifying specify define or configure a caching policy. Policy engine in some embodiments also has access to memory to support data structures such as lookup tables or hash tables to enable user selected caching policy decisions. In other embodiments the policy engine may comprise any logic rules functions or operations to determine and provide access control and management of objects data or content being cached by the appliance in addition to access control and management of security network traffic network access compression or any other function or operation performed by the appliance . Further examples of specific caching policies are further described herein.

The encryption engine comprises any logic business rules functions or operations for handling the processing of any security related protocol such as SSL or TLS or any function related thereto. For example the encryption engine encrypts and decrypts network packets or any portion thereof communicated via the appliance . The encryption engine may also setup or establish SSL or TLS connections on behalf of the client server or appliance . As such the encryption engine provides offloading and acceleration of SSL processing. In one embodiment the encryption engine uses a tunneling protocol to provide a virtual private network between a client and a server . In some embodiments the encryption engine is in communication with the Encryption processor . In other embodiments the encryption engine comprises executable instructions running on the Encryption processor .

The multi protocol compression engine comprises any logic business rules function or operations for compressing one or more protocols of a network packet such as any of the protocols used by the network stack of the device . In one embodiment multi protocol compression engine compresses bi directionally between clients and servers any TCP IP based protocol including Messaging Application Programming Interface MAPI email File Transfer Protocol FTP HyperText Transfer Protocol HTTP Common Internet File System CIFS protocol file transfer Independent Computing Architecture ICA protocol Remote Desktop Protocol RDP Wireless Application Protocol WAP Mobile IP protocol and Voice Over IP VoIP protocol. In other embodiments multi protocol compression engine provides compression of Hypertext Markup Language HTML based protocols and in some embodiments provides compression of any markup languages such as the Extensible Markup Language XML . In one embodiment the multi protocol compression engine provides compression of any high performance protocol such as any protocol designed for appliance to appliance communications. In another embodiment the multi protocol compression engine compresses any payload of or any communication using a modified transport control protocol such as Transaction TCP T TCP TCP with selection acknowledgements TCP SACK TCP with large windows TCP LW a congestion prediction protocol such as the TCP Vegas protocol and a TCP spoofing protocol.

As such the multi protocol compression engine accelerates performance for users accessing applications via desktop clients e.g. Microsoft Outlook and non Web thin clients such as any client launched by popular enterprise applications like Oracle SAP and Siebel and even mobile clients such as the Pocket PC. In some embodiments the multi protocol compression engine by executing in the kernel mode and integrating with packet processing engine accessing the network stack is able to compress any of the protocols carried by the TCP IP protocol such as any application layer protocol.

High speed layer integrated packet engine also generally referred to as a packet processing engine or packet engine is responsible for managing the kernel level processing of packets received and transmitted by appliance via network ports . The high speed layer integrated packet engine may comprise a buffer for queuing one or more network packets during processing such as for receipt of a network packet or transmission of a network packer. Additionally the high speed layer integrated packet engine is in communication with one or more network stacks to send and receive network packets via network ports . The high speed layer integrated packet engine works in conjunction with encryption engine cache manager policy engine and multi protocol compression logic . In particular encryption engine is configured to perform SSL processing of packets policy engine is configured to perform functions related to traffic management such as request level content switching and request level cache redirection and multi protocol compression logic is configured to perform functions related to compression and decompression of data.

The high speed layer integrated packet engine includes a packet processing timer . In one embodiment the packet processing timer provides one or more time intervals to trigger the processing of incoming i.e. received or outgoing i.e. transmitted network packets. In some embodiments the high speed layer integrated packet engine processes network packets responsive to the timer . The packet processing timer provides any type and form of signal to the packet engine to notify trigger or communicate a time related event interval or occurrence. In many embodiments the packet processing timer operates in the order of milliseconds such as for example 100 ms 50 ms or 25 ms. For example in some embodiments the packet processing timer provides time intervals or otherwise causes a network packet to be processed by the high speed layer integrated packet engine at a 10 ms time interval while in other embodiments at a 5 ms time interval and still yet in further embodiments as short as a 3 2 or 1 ms time interval. The high speed layer integrated packet engine may be interfaced integrated or in communication with the encryption engine cache manager policy engine and multi protocol compression engine during operation. As such any of the logic functions or operations of the encryption engine cache manager policy engine and multi protocol compression logic may be performed responsive to the packet processing timer and or the packet engine . Therefore any of the logic functions or operations of the encryption engine cache manager policy engine and multi protocol compression logic may be performed at the granularity of time intervals provided via the packet processing timer for example at a time interval of less than or equal to 10 ms. For example in one embodiment the cache manager may perform invalidation of any cached objects responsive to the high speed layer integrated packet engine and or the packet processing timer . In another embodiment the expiry or invalidation time of a cached object can be set to the same order of granularity as the time interval of the packet processing timer such as at every 10 ms.

In contrast to kernel space user space is the memory area or portion of the operating system used by user mode applications or programs otherwise running in user mode. A user mode application may not access kernel space directly and uses service calls in order to access kernel services. As shown in user space of appliance includes a graphical user interface GUI a command line interface CLI shell services health monitoring program and daemon services . GUI and CLI provide a means by which a system administrator or other user can interact with and control the operation of appliance such as via the operating system of the appliance and either is user space or kernel space . The GUI may be any type and form of graphical user interface and may be presented via text graphical or otherwise by any type of program or application such as a browser. The CLI may be any type and form of command line or text based interface such as a command line provided by the operating system. For example the CLI may comprise a shell which is a tool to enable users to interact with the operating system. In some embodiments the CLI may be provided via a bash csh tcsh or ksh type shell. The shell services comprises the programs services tasks processes or executable instructions to support interaction with the appliance or operating system by a user via the GUI and or CLI .

Health monitoring program is used to monitor check report and ensure that network systems are functioning properly and that users are receiving requested content over a network. Health monitoring program comprises one or more programs services tasks processes or executable instructions to provide logic rules functions or operations for monitoring any activity of the appliance . In some embodiments the health monitoring program intercepts and inspects any network traffic passed via the appliance . In other embodiments the health monitoring program interfaces by any suitable means and or mechanisms with one or more of the following the encryption engine cache manager policy engine multi protocol compression logic packet engine daemon services and shell services . As such the health monitoring program may call any application programming interface API to determine a state status or health of any portion of the appliance . For example the health monitoring program may ping or send a status inquiry on a periodic basis to check if a program process service or task is active and currently running. In another example the health monitoring program may check any status error or history logs provided by any program process service or task to determine any condition status or error with any portion of the appliance .

Daemon services are programs that run continuously or in the background and handle periodic service requests received by appliance . In some embodiments a daemon service may forward the requests to other programs or processes such as another daemon service as appropriate. As known to those skilled in the art a daemon service may run unattended to perform continuous or periodic system wide functions such as network control or to perform any desired task. In some embodiments one or more daemon services run in the user space while in other embodiments one or more daemon services run in the kernel space.

Referring now to another embodiment of the appliance is depicted. In brief overview the appliance provides one or more of the following services functionality or operations SSL VPN connectivity switching load balancing Domain Name Service resolution acceleration and an application firewall for communications between one or more clients and one or more servers . Each of the servers may provide one or more network related services referred to as services . For example a server may provide an http service . The appliance comprises one or more virtual servers or virtual internet protocol servers referred to as a vServer VIP server or just VIP also referred herein as vServer . The vServer receives intercepts or otherwise processes communications between a client and a server in accordance with the configuration and operations of the appliance .

The vServer may comprise software hardware or any combination of software and hardware. The vServer may comprise any type and form of program service task process or executable instructions operating in user mode kernel mode or any combination thereof in the appliance . The vServer includes any logic functions rules or operations to perform any embodiments of the techniques described herein such as SSL VPN switching load balancing Domain Name Service resolution acceleration and an application firewall . In some embodiments the vServer establishes a connection to a service of a server . The service may comprise any program application process task or set of executable instructions capable of connecting to and communicating to the appliance client or vServer . For example the service may comprise a web server http server ftp email or database server. In some embodiments the service is a daemon process or network driver for listening receiving and or sending communications for an application such as email database or an enterprise application. In some embodiments the service may communicate on a specific IP address or IP address and port.

In some embodiments the vServer applies one or more policies of the policy engine to network communications between the client and server . In one embodiment the policies are associated with a VServer . In another embodiment the policies are based on a user or a group of users. In yet another embodiment a policy is global and applies to one or more vServers and any user or group of users communicating via the appliance . In some embodiments the policies of the policy engine have conditions upon which the policy is applied based on any content of the communication such as internet protocol address port protocol type header or fields in a packet or the context of the communication such as user group of the user vServer transport layer connection and or identification or attributes of the client or server .

In other embodiments the appliance communicates or interfaces with the policy engine to determine authentication and or authorization of a remote user or a remote client to access the computing environment application and or data file from a server . In another embodiment the appliance communicates or interfaces with the policy engine to determine authentication and or authorization of a remote user or a remote client to have the application delivery system deliver one or more of the computing environment application and or data file. In yet another embodiment the appliance establishes a VPN or SSL VPN connection based on the policy engine s authentication and or authorization of a remote user or a remote client In one embodiment the appliance controls the flow of network traffic and communication sessions based on policies of the policy engine . For example the appliance may control the access to a computing environment application or data file based on the policy engine .

In some embodiments the vServer establishes a transport layer connection such as a TCP or UDP connection with a client via the client agent . In one embodiment the vServer listens for and receives communications from the client . In other embodiments the vServer establishes a transport layer connection such as a TCP or UDP connection with a client server . In one embodiment the vServer establishes the transport layer connection to an internet protocol address and port of a server running on the server . In another embodiment the vServer associates a first transport layer connection to a client with a second transport layer connection to the server . In some embodiments a vServer establishes a pool of tranport layer connections to a server and multiplexes client requests via the pooled transport layer connections.

In some embodiments the appliance provides a SSL VPN connection between a client and a server . For example a client on a first network requests to establish a connection to a server on a second network . In some embodiments the second network is not routable from the first network . In other embodiments the client is on a public network and the server is on a private network such as a corporate network. In one embodiment the client agent intercepts communications of the client on the first network encrypts the communications and transmits the communications via a first transport layer connection to the appliance . The appliance associates the first transport layer connection on the first network to a second transport layer connection to the server on the second network . The appliance receives the intercepted communication from the client agent decrypts the communications and transmits the communication to the server on the second network via the second transport layer connection. The second transport layer connection may be a pooled transport layer connection. As such the appliance provides an end to end secure transport layer connection for the client between the two networks .

In one embodiment the appliance hosts an intranet internet protocol or intranetIP address of the client on the virtual private network . The client has a local network identifier such as an internet protocol IP address and or host name on the first network . When connected to the second network via the appliance the appliance establishes assigns or otherwise provides an IntranetIP which is network identifier such as IP address and or host name for the client on the second network . The appliance listens for and receives on the second or private network for any communications directed towards the client using the client s established IntranetIP . In one embodiment the appliance acts as or on behalf of the client on the second private network . For example in another embodiment a vServer listens for and responds to communications to the IntranetIP of the client . In some embodiments if a computing device on the second network transmits a request the appliance processes the request as if it were the client . For example the appliance may respond to a ping to the client s IntranetIP . In another example the appliance may establish a connection such as a TCP or UDP connection with computing device on the second network requesting a connection with the client s IntranetIP .

In some embodiments the appliance provides one or more of the following acceleration techniques to communications between the client and server 1 compression 2 decompression 3 Transmission Control Protocol pooling 4 Transmission Control Protocol multiplexing 5 Transmission Control Protocol buffering and 6 caching. In one embodiment the appliance relieves servers of much of the processing load caused by repeatedly opening and closing transport layers connections to clients by opening one or more transport layer connections with each server and maintaining these connections to allow repeated data accesses by clients via the Internet. This technique is referred to herein as connection pooling .

In some embodiments in order to seamlessly splice communications from a client to a server via a pooled transport layer connection the appliance translates or multiplexes communications by modifying sequence number and acknowledgment numbers at the transport layer protocol level. This is referred to as connection multiplexing . In some embodiments no application layer protocol interaction is required. For example in the case of an in bound packet that is a packet received from a client the source network address of the packet is changed to that of an output port of appliance and the destination network address is changed to that of the intended server. In the case of an outbound packet that is one received from a server the source network address is changed from that of the server to that of an output port of appliance and the destination address is changed from that of appliance to that of the requesting client . The sequence numbers and acknowledgment numbers of the packet are also translated to sequence numbers and acknowledgement expected by the client on the appliance s transport layer connection to the client . In some embodiments the packet checksum of the transport layer protocol is recalculated to account for these translations.

In another embodiment the appliance provides switching or load balancing functionality for communications between the client and server . In some embodiments the appliance distributes traffic and directs client requests to a server based on layer or application layer request data. In one embodiment although the network layer or layer of the network packet identifies a destination server the appliance determines the server to distribute the network packet by application information and data carried as payload of the transport layer packet. In one embodiment the health monitoring programs of the appliance monitor the health of servers to determine the server for which to distribute a client s request. In some embodiments if the appliance detects a server is not available or has a load over a predetermined threshold the appliance can direct or distribute client requests to another server .

In some embodiments the appliance acts as a Domain Name Service DNS resolver or otherwise provides resolution of a DNS request from clients . In some embodiments the appliance intercepts a DNS request transmitted by the client . In one embodiment the appliance responds to a client s DNS request with an IP address of or hosted by the appliance . In this embodiment the client transmits network communication for the domain name to the appliance . In another embodiment the appliance responds to a client s DNS request with an IP address of or hosted by a second appliance . In some embodiments the appliance responds to a client s DNS request with an IP address of a server determined by the appliance .

In yet another embodiment the appliance provides application firewall functionality for communications between the client and server . In one embodiment the policy engine provides rules for detecting and blocking illegitimate requests. In some embodiments the application firewall protects against denial of service DoS attacks. In other embodiments the appliance inspects the content of intercepted requests to identify and block application based attacks. In some embodiments the rules policy engine comprises one or more application firewall or security control policies for providing protections against various classes and types of web or Internet based vulnerabilities such as one or more of the following 1 buffer overflow 2 CGI BIN parameter manipulation 3 form hidden field manipulation 4 forceful browsing 5 cookie or session poisoning 6 broken access control list ACLs or weak passwords 7 cross site scripting XSS 8 command injection 9 SQL injection 10 error triggering sensitive information leak 11 insecure use of cryptography 12 server misconfiguration 13 back doors and debug options 14 website defacement 15 platform or operating systems vulnerabilities and 16 zero day exploits. In an embodiment the application firewall provides HTML form field protection in the form of inspecting or analyzing the network communication for one or more of the following 1 required fields are returned 2 no added field allowed 3 read only and hidden field enforcement 4 drop down list and radio button field conformance and 5 form field max length enforcement. In some embodiments the application firewall ensures cookies are not modified. In other embodiments the application firewall protects against forceful browsing by enforcing legal URLs.

In still yet other embodiments the application firewall protects any confidential information contained in the network communication. The application firewall may inspect or analyze any network communication in accordance with the rules or polices of the engine to identify any confidential information in any field of the network packet. In some embodiments the application firewall identifies in the network communication one or more occurrences of a credit card number password social security number name patient code contact information and age. The encoded portion of the network communication may comprise these occurrences or the confidential information. Based on these occurrences in one embodiment the application firewall may take a policy action on the network communication such as prevent transmission of the network communication. In another embodiment the application firewall may rewrite remove or otherwise mask such identified occurrence or confidential information.

Still referring to the appliance may include a performance monitoring agent as discussed above in conjunction with . In one embodiment the appliance receives the monitoring agent from the monitoring service or monitoring server as depicted in . In some embodiments the appliance stores the monitoring agent in storage such as disk for delivery to any client or server in communication with the appliance . For example in one embodiment the appliance transmits the monitoring agent to a client upon receiving a request to establish a transport layer connection. In other embodiments the appliance transmits the monitoring agent upon establishing the transport layer connection with the client . In another embodiment the appliance transmits the monitoring agent to the client upon intercepting or detecting a request for a web page. In yet another embodiment the appliance transmits the monitoring agent to a client or a server in response to a request from the monitoring server . In one embodiment the appliance transmits the monitoring agent to a second appliance or appliance .

In other embodiments the appliance executes the monitoring agent . In one embodiment the monitoring agent measures and monitors the performance of any application program process service task or thread executing on the appliance . For example the monitoring agent may monitor and measure performance and operation of vServers A N. In another embodiment the monitoring agent measures and monitors the performance of any transport layer connections of the appliance . In some embodiments the monitoring agent measures and monitors the performance of any user sessions traversing the appliance . In one embodiment the monitoring agent measures and monitors the performance of any virtual private network connections and or sessions traversing the appliance such an SSL VPN session. In still further embodiments the monitoring agent measures and monitors the memory CPU and disk usage and performance of the appliance . In yet another embodiment the monitoring agent measures and monitors the performance of any acceleration technique performed by the appliance such as SSL offloading connection pooling and multiplexing caching and compression. In some embodiments the monitoring agent measures and monitors the performance of any load balancing and or content switching performed by the appliance . In other embodiments the monitoring agent measures and monitors the performance of application firewall protection and processing performed by the appliance .

Referring now to a block diagram depicts one embodiment of a virtualization environment . In brief overview a computing device includes a hypervisor layer a virtualization layer and a hardware layer. The hypervisor layer includes a hypervisor also referred to as a virtualization manager that allocates and manages access to a number of physical resources in the hardware layer e.g. the processor s and disk s by at least one virtual machine executing in the virtualization layer. The virtualization layer includes at least one operating system and a plurality of virtual resources allocated to the at least one operating system . Virtual resources may include without limitation a plurality of virtual processors generally and virtual disks generally as well as virtual resources such as virtual memory and virtual network interfaces. The plurality of virtual resources and the operating system may be referred to as a virtual machine . A virtual machine may include a control operating system in communication with the hypervisor and used to execute applications for managing and configuring other virtual machines on the computing device .

In greater detail a hypervisor may provide virtual resources to an operating system in any manner which simulates the operating system having access to a physical device. A hypervisor may provide virtual resources to any number of guest operating systems generally . In some embodiments a computing device executes one or more types of hypervisors. In these embodiments hypervisors may be used to emulate virtual hardware partition physical hardware virtualize physical hardware and execute virtual machines that provide access to computing environments. Hypervisors may include those manufactured by VMWare Inc. of Palo Alto Calif. the XEN hypervisor an open source product whose development is overseen by the open source Xen.org community HyperV VirtualServer or virtual PC hypervisors provided by Microsoft or others. In some embodiments a computing device executing a hypervisor that creates a virtual machine platform on which guest operating systems may execute is referred to as a host server. In one of these embodiments for example the computing device is a XEN SERVER provided by Citrix Systems Inc. of Fort Lauderdale Fla.

In some embodiments a hypervisor executes within an operating system executing on a computing device. In one of these embodiments a computing device executing an operating system and a hypervisor may be said to have a host operating system the operating system executing on the computing device and a guest operating system an operating system executing within a computing resource partition provided by the hypervisor . In other embodiments a hypervisor interacts directly with hardware on a computing device instead of executing on a host operating system. In one of these embodiments the hypervisor may be said to be executing on bare metal referring to the hardware comprising the computing device.

In some embodiments a hypervisor may create a virtual machine generally in which an operating system executes. In one of these embodiments for example the hypervisor loads a virtual machine image to create a virtual machine . In another of these embodiments the hypervisor executes an operating system within the virtual machine . In still another of these embodiments the virtual machine executes an operating system .

In some embodiments the hypervisor controls processor scheduling and memory partitioning for a virtual machine executing on the computing device . In one of these embodiments the hypervisor controls the execution of at least one virtual machine . In another of these embodiments the hypervisor presents at least one virtual machine with an abstraction of at least one hardware resource provided by the computing device . In other embodiments the hypervisor controls whether and how physical processor capabilities are presented to the virtual machine .

A control operating system may execute at least one application for managing and configuring the guest operating systems. In one embodiment the control operating system may execute an administrative application such as an application including a user interface providing administrators with access to functionality for managing the execution of a virtual machine including functionality for executing a virtual machine terminating an execution of a virtual machine or identifying a type of physical resource for allocation to the virtual machine. In another embodiment the hypervisor executes the control operating system within a virtual machine created by the hypervisor . In still another embodiment the control operating system executes in a virtual machine that is authorized to directly access physical resources on the computing device . In some embodiments a control operating system on a computing device may exchange data with a control operating system on a computing device via communications between a hypervisor and a hypervisor . In this way one or more computing devices may exchange data with one or more of the other computing devices regarding processors and other physical resources available in a pool of resources. In one of these embodiments this functionality allows a hypervisor to manage a pool of resources distributed across a plurality of physical computing devices. In another of these embodiments multiple hypervisors manage one or more of the guest operating systems executed on one of the computing devices .

In one embodiment the control operating system executes in a virtual machine that is authorized to interact with at least one guest operating system . In another embodiment a guest operating system communicates with the control operating system via the hypervisor in order to request access to a disk or a network. In still another embodiment the guest operating system and the control operating system may communicate via a communication channel established by the hypervisor such as for example via a plurality of shared memory pages made available by the hypervisor .

In some embodiments the control operating system includes a network back end driver for communicating directly with networking hardware provided by the computing device . In one of these embodiments the network back end driver processes at least one virtual machine request from at least one guest operating system . In other embodiments the control operating system includes a block back end driver for communicating with a storage element on the computing device . In one of these embodiments the block back end driver reads and writes data from the storage element based upon at least one request received from a guest operating system .

In one embodiment the control operating system includes a tools stack . In another embodiment a tools stack provides functionality for interacting with the hypervisor communicating with other control operating systems for example on a second computing device or managing virtual machines on the computing device . In another embodiment the tools stack includes customized applications for providing improved management functionality to an administrator of a virtual machine farm. In some embodiments at least one of the tools stack and the control operating system include a management API that provides an interface for remotely configuring and controlling virtual machines running on a computing device . In other embodiments the control operating system communicates with the hypervisor through the tools stack .

In one embodiment the hypervisor executes a guest operating system within a virtual machine created by the hypervisor . In another embodiment the guest operating system provides a user of the computing device with access to resources within a computing environment. In still another embodiment a resource includes a program an application a document a file a plurality of applications a plurality of files an executable program file a desktop environment a computing environment or other resource made available to a user of the computing device . In yet another embodiment the resource may be delivered to the computing device via a plurality of access methods including but not limited to conventional installation directly on the computing device delivery to the computing device via a method for application streaming delivery to the computing device of output data generated by an execution of the resource on a second computing device and communicated to the computing device via a presentation layer protocol delivery to the computing device of output data generated by an execution of the resource via a virtual machine executing on a second computing device or execution from a removable storage device connected to the computing device such as a USB device or via a virtual machine executing on the computing device and generating output data. In some embodiments the computing device transmits output data generated by the execution of the resource to another computing device .

In one embodiment the guest operating system in conjunction with the virtual machine on which it executes forms a fully virtualized virtual machine which is not aware that it is a virtual machine such a machine may be referred to as a Domain U HVM Hardware Virtual Machine virtual machine . In another embodiment a fully virtualized machine includes software emulating a Basic Input Output System BIOS in order to execute an operating system within the fully virtualized machine. In still another embodiment a fully virtualized machine may include a driver that provides functionality by communicating with the hypervisor . In such an embodiment the driver may be aware that it executes within a virtualized environment. In another embodiment the guest operating system in conjunction with the virtual machine on which it executes forms a paravirtualized virtual machine which is aware that it is a virtual machine such a machine may be referred to as a Domain U PV virtual machine . In another embodiment a paravirtualized machine includes additional drivers that a fully virtualized machine does not include. In still another embodiment the paravirtualized machine includes the network back end driver and the block back end driver included in a control operating system as described above.

Referring now to a block diagram depicts one embodiment of a plurality of networked computing devices in a system in which at least one physical host executes a virtual machine. In brief overview the system includes a management component and a hypervisor . The system includes a plurality of computing devices a plurality of virtual machines a plurality of hypervisors a plurality of management components referred to as tools stacks and a physical resource . The plurality of physical machines may each be provided as computing devices described above in connection with and A.

In greater detail a physical disk is provided by a computing device and stores at least a portion of a virtual disk . In some embodiments a virtual disk is associated with a plurality of physical disks . In one of these embodiments one or more computing devices may exchange data with one or more of the other computing devices regarding processors and other physical resources available in a pool of resources allowing a hypervisor to manage a pool of resources distributed across a plurality of physical computing devices. In some embodiments a computing device on which a virtual machine executes is referred to as a physical host or as a host machine .

The hypervisor executes on a processor on the computing device . The hypervisor allocates to a virtual disk an amount of access to the physical disk. In one embodiment the hypervisor allocates an amount of space on the physical disk. In another embodiment the hypervisor allocates a plurality of pages on the physical disk. In some embodiments the hypervisor provisions the virtual disk as part of a process of initializing and executing a virtual machine .

In one embodiment the management component is referred to as a pool management component . In another embodiment a management operating system which may be referred to as a control operating system includes the management component. In some embodiments the management component is referred to as a tools stack. In one of these embodiments the management component is the tools stack described above in connection with . In other embodiments the management component provides a user interface for receiving from a user such as an administrator an identification of a virtual machine to provision and or execute. In still other embodiments the management component provides a user interface for receiving from a user such as an administrator the request for migration of a virtual machine from one physical machine to another. In further embodiments the management component identifies a computing device on which to execute a requested virtual machine and instructs the hypervisor on the identified computing device to execute the identified virtual machine such a management component may be referred to as a pool management component.

Referring now to some exemplary embodiments of a virtual application delivery controller also referred to herein as a virtual appliance are shown and described. In brief overview any of the functionality and or embodiments of the appliance i.e. an application delivery controller described in connection with may be deployed in any embodiment of the virtualized environment described above in connection with . Instead of the functionality of the application delivery controller being deployed in the form of an appliance such functionality may be deployed in a non virtualized or virtualized environment on any computing device such as a server . In particular the functionality may be deployed through software modules or components that execute on the server .

Referring now to an exemplary embodiment of a virtual appliance operating on a hypervisor of a server is shown and described. As with the appliance of the virtual appliance may provide functionality for availability performance offload and security. For availability the virtual appliance may perform load balancing between layers and of the network and or may perform intelligent service health monitoring. For performance increases via network traffic acceleration the virtual appliance may perform caching and or compression. To offload processing of any servers the virtual appliance may perform connection multiplexing and pooling and or SSL processing. For security the virtual appliance may perform any of the application firewall functionality and or SSL VPN function of appliance .

Any of the functionality of the appliance as described in connection with may be packaged combined designed or constructed in a form of the virtual appliance delivery controller deployable as one or more software modules or components. For example with reference to any of the cache manager policy engine compression encryption engine packet engine GUI CLI shell services and health monitoring programs may be designed or constructed as a software module or component. These software modules or components may be provided in the form of an installation package to install on a computing device. When deployed on a computing device the virtualized appliance delivery controller may run on an operating system of the computing device and or in a virtualized environment . The virtualized appliance delivery controller may execute in a virtualized environment or non virtualized environment on any server . In the former situations instead of using the encryption processor processor memory and network stack of the appliance the virtualized appliance may use any of these resources as provided by the virtualized environment or as otherwise available on a server .

Referring now to another embodiment of the virtualized application delivery controller is shown and described. In brief overview any one or more vServers A N may be operating or executing in a virtualized environment of any type of computing device such as an off the shelf server . Any of the modules or functionality of the appliance described in connection with may be designed or constructed to operate in either a virtualized or non virtualized environment of a server . Any of the vServer SSL VPN Intranet UP Switching DNS acceleration App FW and monitoring agent may be packaged combined designed or constructed in a form of application delivery controller deployable as one or more software modules or components executable on a computing device and or virtualized environment of such a device.

In various embodiments a server may execute multiple virtual appliances . For example the server may execute multiple virtual machines in the virtualized environment and each virtual machine may run the same or different embodiment of the virtual appliance . Further each virtual machine may run one or more virtual appliances . In multi core processing systems a single core may execute each virtual machine or execution of the virtual machines may be dynamically allocated across multiple cores. In some embodiments the server may execute one or more virtual appliances on one or more virtual machines on a core of a multi core processing system. In additional embodiments the server may execute one or more virtual appliances on one or more virtual machines on each core of the multi core processing system.

Referring now to an embodiment of an environment providing an application delivery fabric ADF is shown and described. In brief overview a plurality of clients access resources from one or more servers in a data center via a combination of one or more appliances and one or more virtual appliances A N deployed on any one or more servers A N. In this embodiment a centralized management and command center provides a configuration administration and management tool for configuring monitoring and administering the appliances and any virtual appliances A N. One or more appliance may provide network wide actions in the form of SSL offloading Denial of Service Dos mitigation and or content switching. Further the one or more appliances may provide dynamic source routing DSR for a mesh or adhoc network of one or more virtual appliances A N. The virtual appliance A N may be deployed statically or dynamically on one or more servers . These virtual appliances may be dynamically deployed and undeployed in an adhoc manner as desired on demand automatic or manually. The virtual appliances may each perform one or more application delivery and performance functionality such as application specific load balancing compression and or application firewalling.

The application delivery fabric ADF comprises any number of infrastructure components systems applications or services deployed in a network such as a mesh or adhoc network for delivering applications to users. In some cases an ADF refers to systems and processes for delivering applications that make use of multiple integrated products deployed in a mesh or ad hoc network. The ADF may secure optimize accelerate and reliably deliver applications information and resources including front end mid tier support and back end systems. In some cases an ADF refers to the distributed infrastructure components deployed along the line of sight between data centers and users to ensure the successful reliable delivery of any application to any user in any location.

As illustrated in the ADF may comprise one or more appliances and one or more virtual appliances A N for delivering applications from servers in a data center to one or more clients . In some embodiments the ADF includes other systems such as the application delivery system of and or the WAN optimization device of . In some embodiments the ADF includes a portion of a cloud computing service in which servers systems and virtual appliances are available and deployed for use dynamically or otherwise as described in reference to . Each of the appliances systems and virtual appliances may be identified as a node in an adhoc or mesh network of the ADF . As appliances systems and virtual appliances are deployed and or undeployed the adhoc or mesh network changes and thus the ADF changes accordingly.

The appliances and or virtual appliances may communicate information via any type and form of connection and or protocol to provide information regarding the topology status location operation and performance of any node in the ADF . As deployment of nodes of appliances virtual appliances or systems change e.g. nodes are added or removed from the ADF the nodes may provide updates to the information regarding their topology status location operation and performance. In some embodiments one or more appliances and or virtual appliances may be configured as or act as a master node for maintaining or receiving such information. In some embodiments one or more appliances such as a master node may provide dynamic routing such as dynamic source routing to nodes in the ADF .

The ADF may comprise any combination of heterogeneous or homogenous systems appliances and virtual appliances . In some embodiments the ADF may be dedicated to a company or group of users. In other embodiments the ADF may support multi tenancy by supporting and being used for multiple companies or multiples groups of users. In some embodiments the ADF may comprise multiple appliances of the same type and or configuration. In other embodiments the ADF may comprise multiple appliances of different types and or different configurations. In some embodiments one or more of the deployed virtual appliances may be of the same type and or configuration. In other embodiments one or more of the deployed virtual appliances may be of different types and or different configurations. In some embodiments a virtual appliance may be deployed and or configured for load balancing. In some embodiments a virtual appliance may be deployed and or configured for acceleration such as compression and or caching. In various embodiments a virtual appliance may be deployed and or configured for security such as application firewall. In further embodiments a virtual appliance may be deployed and or configured for offloading by performing connection pooling and multiplexing. In some embodiments the virtual appliance may be configured for any combination of load balancing acceleration security and or offloading.

The ADF may use any services and resources of or from a cloud computing service or environment . An IT infrastructure may extend from a first network such as a network owned and managed by an enterprise into a second network which may be owned or managed by a separate entity than the entity owning or managing the first network. Resources provided by the second network may be said to be in a cloud . Cloud resident elements may include without limitation storage devices servers databases computing environments including virtual machines and desktops and applications. In various embodiments one or more networks providing computing infrastructure on behalf of customers may be referred to a cloud. In one of these embodiments a system in which users of a first network access at least a second network including a pool of abstracted scalable and managed computing resources capable of hosting user resources may be referred to as a cloud computing environment. In another of these embodiments resources may include without limitation virtualization technology data center resources applications and management tools. In some embodiments Internet based applications which may be provided via a software as a service or platform as a service model may be referred to as cloud based resources. In other embodiments networks that provide users with computing resources such as virtual machines or blades on blade servers may be referred to as compute clouds. In still other embodiments networks that provide storage resources such as storage area networks may be referred to as storage clouds. In further embodiments a resource may be cached in a local network and stored in a cloud.

An ADF and components of the ADF may be configured arranged implemented or deployed in any manner for any logical grouping of support to one or more companies one or more users or groups of users or one or more appliances services or resources. In some embodiments the ADF may be dedicated to a company or group of users. In other embodiments the ADF may support and be used for multiple companies or multiples groups of users. In some embodiments a first group of one or more appliances and or virtual appliances may be for a first data center. In some embodiments a second group of one or more appliances and or virtual appliances may be for a second data center. In some embodiments a first group of one or more appliances and or virtual appliances may be for a first application or service. In some embodiments a second group of one or more appliances and or virtual appliances may be for a second application or service. In some embodiments a first group of one or more appliances and or virtual appliances may be for a first company. In some embodiments a second group of one or more appliances and or virtual appliances may be for a second company. In some embodiments a first group of one or more appliances and or virtual appliances may be for a first group of users. In some embodiments a second group of one or more appliances and or virtual appliances may be for a second group of users.

The command center may comprise any type and form of user interface for administering configuring maintaining controlling and or monitoring of the ADF and or any components thereof. The command center may provide an interface for a user to identify add remove or modify any element of the topology configuration location and network information for any of the nodes in the adhoc or mesh network of the ADF . The command center may provide a user interface to identify under what conditions or by what policies any of the virtual appliances may be deployed and what functionality of these virtual appliances are to be deployed. The command center may provide a user an interface to deploy or undeploy a virtual appliance . The command center may provide a user interface to monitor the performance and operational characteristics of the ADF and or any components thereof.

Referring now to another embodiment of the ADF is depicted. In brief overview an ADF manager may provide management of the deployment and or undeployment of any component of the ADF such as a virtual appliance . Depending on the configuration logic or policies of the ADF manager one or more virtual appliances may be dynamically added or removed from the ADF . For example the ADF manager may cause one or more virtual appliances to be deployed in the ADF to address additional capacity needs. In another example an administrator may change policies that cause one or more virtual appliances to be undeployed or deployed.

The ADF manager may comprise any combination of hardware and or software to provide operations functions logic or business rules to manage and or control the ADF or any components thereof. The ADF manager may comprise any application program service library task script or set of executable instructions executing on a device. The ADF manager may perform any of the operations described herein. The ADF manager may operate run or execute on any device within or outside the nodes of the ADF. In some embodiments the ADF manager runs on one of the appliances . In another embodiment the ADF may operate on a stand alone device such as an ADF appliance or service. The ADF manager may communicate with interface to or be a part of the command center . In such embodiments the ADF manager may execute any administration configuration or policies changes to reflect such changes in the ADF . The ADF manager may also monitor the performance and or operational characteristics of the ADF and components thereof and provide such information to the command center .

The ADF manager may be designed and constructed to deploy or undeploy a virtual appliance in the ADF. The ADF manager may determine when and how to deploy or undeploy a virtual appliance based on any command configuration rule or policy. The ADF manager may dynamically deploy or undeploy a virtual appliance responsive to any command configuration rule or policy. The ADF manager may dynamically deploy or undeploy a virtual appliance responsive to monitoring detecting or identifying any operational and or performance characteristics of the nodes of the ADF .

The ADF manager such as configured on appliance may dynamically change the topology of virtual appliances responsive to any one or combination of a number of users a number of connections a number of requests use of bandwidth transmission rates round trip times response times health of a service or virtual server and or any statistical measurement of any of above. In response to any changes of these performance and or operational characteristics exceeding meeting or falling under or within a predetermined threshold or range the ADF manager may dynamically deploy or undeploy a virtual appliance . One or more policies may be specified or configured to set the threshold and identify the action to perform with respect to a virtual appliance . The ADF manager may deploy or undeploy a virtual appliance responsive to a policy. In some embodiments the policy may identify the type location and configuration of the virtual appliance . The policy may identify the type form and or location of a virtualized environment to run the virtual appliance . The policy may identify the type form and or location of a server processor or core of a processor to run the virtual appliance . The policy may identify when to undeploy a virtual appliance .

The ADF manager may communicate interface or integrate with one or more cloud computing services to deploy and or undeploy one or more virtual appliances on one or more servers provided by the cloud computing services . For example. the ADF manager may request a cloud computing service to deploy a virtual appliance . The ADF manager may provide the software of the virtual appliance to the cloud computing service to dynamically deploy on resources managed and provided by the cloud computing service .

Referring now to an embodiment of an ADF providing multi tenancy for a plurality of companies is depicted. In brief overview one or more ADFs may be used to support and deliver applications computing environments and or resources to multiple companies and their users such as company A company B and company C. One or more appliances may be deployed in the to service each of these companies. For example one appliance may receive network traffic from computing devices of these companies and determine which virtual appliances will service the traffic. One or more virtual appliances may be deployed in conjunction with the appliance to provide services to each of the companies. For example virtual appliance A may be dedicated to company A virtual appliance C to company C and virtual appliance B to both Company A and Company C.

With the use of virtualized environments a single server may host a plurality of virtual appliances via a plurality of virtual machines . As each virtualized environment may provide a distinct separation of resource use of the server via a virtual machine each of the virtual appliances may be dedicated to a different company users service or application without conflict to any another virtual appliance in a different virtualized environment . In this manner one or more virtual appliances may be deployed on a device that has multiple tenants. For example virtual appliance B and or server may comprise a first virtual appliance A on a first virtual machine A for a first company and a second virtual appliance B on a second virtual machine B for a second company. These virtual machines may either be in the same virtualized environment or different virtualized environments .

With the flexibility of deploying virtual appliances on virtual machines hosted on one or more servers the ADF may support multiple tenants such as multiple companies. Furthermore an ADF manager may dynamically change the topology of the ADF responsive to performance and or operational characteristics of the portion of the ADF corresponding to a specific tenant. For example responsive to capacity or policy changes the ADF manager may deploy or undeploy a virtual appliance for a company while leaving unchanged virtual appliances for another company. In other embodiments one or more ADF managers may manage multiple ADFs that overlay the same or common infrastructure components such as the same appliances and virtual appliances being used for multiple tenants. For example appliance and virtual appliance A may be part of a first ADF for company A. Appliance and virtual appliance B may be part of a second ADF for company B and appliance and virtual appliances B and C may be part of a third ADF for company C.

Referring now to another embodiment of an ADF delivered via a cloud computing service is depicted. In brief overview a cloud computing service provider may deploy an ADF and any appliances and or virtual appliances of the ADF to address changes in operation and performance such as capacity level of service and demand. For example the cloud computing service may be using an appliance and virtual servers A N at a first data center for servicing one tenant or user. Based on changes in operations the cloud computing service may deploy one or more virtual appliances at a second data center to handle these changes. For example the load on the first data center may reach a threshold and the cloud computing service may deploy virtual appliances at the second data center to handle the additional load. In this manner the cloud computing service may leverage the flexible extensible and dynamic nature of the ADF to more effectively and manage its operations in servicing and providing a level of service to users of their cloud computing service .

With the systems and methods of the ADF the virtual appliances and the virtual appliances operating on virtual machines and or multiple cores and processor these systems provide a dynamic flexible and extensible solution for scaling balancing and using resources more efficiently and effectively for delivering applications and resources to a wide range of users and technology environments. With the ADF described herein application delivery controllers can be deployed on demand and to any location and when and where most needed. Enterprises and administrators can leverage the ADF to provide more efficient use of resources including dynamic allocations re allocation of resources and flexible re purposing of resources that leverage dynamic data center processes.

It should be understood that the systems described above may provide multiple components of any of the components described herein and these components may be provided on either a standalone machine or in some embodiments on multiple machines in a distributed system. In addition the systems and methods described above may be provided as one or more computer readable programs embodied on or in one or more articles of manufacture. The article of manufacture may be a floppy disk a hard disk a CD ROM a flash memory card a PROM a RAM a ROM or a magnetic tape. In general the computer readable programs may be implemented in any programming language such as LISP PERL C C C PROLOG or in any byte code language such as JAVA. The software programs may be stored on or in one or more articles of manufacture as object code.

Referring now to an embodiment of a method for deploying a virtual application delivery controller is shown and described. The method includes performing by one or more application delivery controller appliances intermediary to a plurality of clients and a plurality of servers a plurality of application delivery control functions on network traffic communicated between the plurality of clients and the plurality of servers step . The method also includes deploying a virtual application delivery controller on a device intermediary to the plurality of clients and the plurality of servers step . The method also includes performing by the virtual application delivery controller executing on the device one or more of the plurality of application delivery control functions on network traffic communicated between the plurality of clients and the plurality of servers step .

One or more application delivery controller appliances intermediary to a plurality of clients and a plurality of servers performs a plurality of application delivery control functions on network traffic communicated between the plurality of clients and the plurality of servers step . The one or more appliances may perform application delivery control functions on network traffic received from clients. In some embodiments the appliances may perform these functions on network traffic routed from a master node. The appliances may perform functionality for availability performance offloading and or security according to any of the methods described in reference to . The appliances may also perform dynamic service routing on the network traffic to redirect the traffic to servers with resources of interest to the users of the clients.

In many embodiments the appliances communicate information about the their operation and or performance. The appliances transmit this information to any component such as a master node that aggregates information about the operation and performance of nodes in an ADF . In some embodiments the component may be an ADF manager or a command center such as the managers and command centers described in reference to . The appliances may receive information about the operation and or performance of other appliances and transmit the information to the ADF manager or command center . With respect to this method any operation described herein as performed by an ADF manager may be performed by a command center and vice versa.

In some embodiments a virtual application delivery controller ADC is deployed on a device such as a device intermediary to a plurality of clients and the plurality of servers step . The virtual ADC may be deployed with or operate in conjunction with the one or more application delivery controller appliances. In some embodiments multiple virtual ADCs are deployed on the same device. In some embodiments multiple virtual ADCs are deployed on a plurality of devices. In some embodiments a virtual ADC is deployed on an appliance. In some embodiments a virtual ADC is deployed on a core of a multi core appliance. In some embodiments a virtual ADC is deployed on a server. In some embodiments a virtual ADC is deployed on a server in a server farm. In some embodiments a virtual ADC is deployed on a server from a cloud computing service or network.

An ADF manager or centralized command center may determine to deploy the virtual application delivery controller . In many embodiments an ADF manager or command center uses a policy to decide when to deploy a virtual appliance on a device. The ADF manager or command center may include default policies to guide such deployment. In some embodiments a user such as an ADF administrator may customize the policies. For example a user may specify to a command center the conditions under which virtual appliances shall be deployed. The command center may monitor the nodes in the ADF deploy virtual appliances when one or more of the conditions are fulfilled. In alternative embodiments the command center may transfer these conditions to an ADF manager that monitors the nodes in the application delivery fabric . When the ADF manager detects that the conditions have been fulfilled the ADF manager may deploy a virtual appliance . In any of these embodiments the policy or conditions may relate to the operation and or performance of the nodes in the ADF .

The ADF manager may select a device to host the virtual appliance . For example the ADF manager may select the device from a predetermined group of devices such as a server farm at a data center. The ADF manager may store the identities of devices reserved for hosting virtual appliances or consult an external database for the identities of such devices. In some embodiments the ADF manager may request a cloud service to execute the virtual application delivery controller on resources provided by the cloud service . The cloud service may allocate a device to host the virtual appliance and transmit the identity of the device to the ADF manager .

The virtual appliance may be deployed via software modules installed on the selected device. The software modules may be stored in any location such as the ADF manager command center software database or an appliance . In various embodiments one or more of the plurality of application delivery control functions for the virtual appliance may be configured for deployment. For example a virtual appliance may be configured for load balancing acceleration security offloading or any combination thereof.

In some embodiments when the ADF manager determines a virtual appliance should be deployed the ADF manager may transmit a copy of software modules to the selected device for deployment thereon. In another example the ADF manager may transmit an instruction to the selected device to deploy a virtual appliance and the selected device may request the software modules for the virtual appliance from a software database. In further examples the ADF manager may transmit an instruction to the appliance closest to the selected device to transmit a copy of the software modules to the device. In yet another example the ADF manager may transmit the software modules to the cloud service and the cloud service deploys the modules on the device allocated for the virtual appliance .

The software modules of the virtual appliance may be installed to execute in a non virtualized environment of the device. In some of these embodiments the software modules may execute on the operating system of the device. In other examples the software modules are deployed in a virtualized environment provided by the device. In one such example the software modules may execute on a virtual operating system hosted by the device. In further examples the virtual appliance may be deployed to execute on a virtual machine provided by the device or deployed to execute as a virtual machine on the device. In some embodiments the software modules may include any of the virtual machines or virtualized environment for the virtual ADC.

Deploying a virtual appliance may change the topology of the ADF . After a virtual appliance is deployed on a device the virtual appliance begins communicating information about its topology status location operation and or performance. A virtual appliance may transmit such information to an ADF manager a command center a master node or any component that monitors the nodes of the ADF .

After the virtual application delivery controller is deployed on a device intermediary to the plurality of clients and the plurality of servers step the virtual application delivery controller executing on the device performs one or more of the plurality of application delivery control functions on network traffic communicated between the plurality of clients and the plurality of servers step .

The virtual appliance may perform the one or more of the plurality of application delivery control functions on a first portion of network traffic concurrently to the one or more application delivery controller appliances performing the plurality of application delivery control functions on a second portion of network traffic. In these embodiment the virtual appliance operates like an appliance functioning in parallel with other application delivery controller appliances in the ADF servicing a portion of the network traffic the ADF receives from clients. Thus the virtual appliance may be configured to perform the same application delivery control functions as the appliances . The virtual appliance may perform any of these functions before transmitting the network traffic to a server that services the network traffic.

The virtual appliance may perform a first application delivery control function on a first portion of network traffic subsequent to an application delivery controller appliance performing a second application delivery control function on the first portion of network traffic. In these embodiments the appliance first performs at least one application delivery control function on the network traffic. For example the appliance may perform network wide actions such as of SSL offloading Denial of Service Dos mitigation and or content switching. Then the appliance routes the network traffic to the virtual appliance via for example DSR. The virtual appliance performs at least one other application delivery control function on the network traffic such as application specific load balancing compression and or application firewalling. In these embodiments the virtual appliance may perform application delivery control functions distinct from the functions of the appliance . In particular the virtual appliance may perform one or more application delivery control functions that are performed subsequently to the application delivery control functions performed by the appliances .

In embodiments where the application delivery fabric is composed solely of virtual appliances a virtual appliance may perform a first application delivery control function on a first portion of network traffic subsequent to another virtual appliance performing a second application delivery control function on the first portion of network traffic. In these embodiments a virtual appliance may be configured to perform functions delegated to application delivery controllers. For example a virtual appliance may perform network wide actions such as of SSL offloading Denial of Service Dos mitigation and or content switching. Then the virtual appliance may route the network traffic to another virtual appliance that performs additional functions such as application specific load balancing compression and or application firewalling.

Referring now to an example embodiment of a method for managing a plurality of application delivery controllers of an application delivery network is shown and described. The method includes monitoring by an application delivery fabric ADF manager executing on a device an application delivery fabric ADF network comprising a deployment of a plurality of application delivery controllers intermediary to a plurality of a clients and a plurality of servers step . The method also includes determining by the ADF manager responsive to monitoring that an operational or performance characteristic of the ADF network fails a corresponding threshold step . The method also includes dynamically deploying by the ADF manager responsive to the determination a virtual application delivery controller as part of the ADF network step .

In operation an application delivery fabric ADF manager executing on a device monitors an application delivery fabric ADF network comprising a deployment of a plurality of application delivery controllers intermediary to a plurality of a clients and a plurality of servers step . The ADF manager may execute on any device as described in reference to . Further the ADF manager may monitor the ADF network according to any method described in reference to . In particular the ADF manager may be configured to receive information from each node in the ADF network about the node s topology status location operation and or performance. As such when each node is deployed in the ADF network the node may be configured to transmit such information to the ADF manager . In various embodiments a node may transmit information such as its number of users number of active connections response times bandwidth rates and or transmission rates.

In some embodiments a node may transmit the information at predetermined intervals of time. In additional embodiments a node may transmit the information in response to significant events. For example when a node detects that its performance has fallen beneath a threshold the node may transmit a signal to the ADF manager indicating this event. In another example when a node detects that its load has increased by a predetermined percentage or reached a predetermined capacity the node may indicate this event to the ADF manager .

Further the ADF manager may transmit probes to a node to obtain any type of information at any time. If the ADF manager has not received information from a node after a predetermined interval of time has lapsed the manager may transmit a probe inquiring about the status of the node. If the probe times out without a response the ADF manager may conclude that the node is non operational and or non functional. If the ADF manager receives information that multiple nodes have low bandwidth rates the ADF manager may probe the nodes for information about their active connections with a view towards consolidating the connections on one node.

The ADF network may refer to any of the embodiments described in reference to . The ADF manager may establish one or more application delivery controller appliances and or one or more virtual application delivery controllers as part of the ADF network . In some embodiments the ADF network may include nodes corresponding to one or more virtual appliances intermediary to a plurality of clients and a plurality of servers . These virtual appliances may provide the same functionality as the appliances . In various embodiments the virtual appliances may be intermediary to the plurality of appliances and the plurality of servers . The appliances perform at least one application delivery control function on network traffic and route the network traffic to the virtual appliances . The virtual appliances perform additional application delivery control functions on the network traffic before routing the network traffic to the servers . In further embodiments the ADF network may include a portion of at least one cloud computing service . The cloud computing services includes resources such as servers or other computing devices that may be dynamically deployed for the ADF network s use.

Responsive to the application delivery fabric ADF manager monitoring an application delivery fabric ADF network the ADF manager may determine that an operational or performance characteristic of the ADF network fails a corresponding threshold step . The ADF manager may aggregate the information received from the nodes to calculate an operational or performance characteristic of the ADF network . In some embodiments the ADF manager aggregates the information only from appliances . In other embodiments the ADF manager aggregates information from both appliances and virtual appliances .

In various embodiments the operational or performance characteristic may correspond to a number of users using the ADF network or a number of connections an ADF network is servicing. The operational or performance characteristic may correspond to the response times of servers via the appliances and or virtual appliances in the ADF network . The operational or performance characteristics may correspond to bandwidth and or transmission rates via the appliances and or virtual appliances . The ADF manager may store thresholds corresponding to any of these operational or performance characteristics.

When the ADF manager aggregates received information from the nodes to calculate an operational or performance characteristic of the ADF network the ADF manager may compare the characteristic to the corresponding threshold. If the characteristic exceeds the corresponding threshold the ADF manager may determine that the characteristic of the ADF network fails the threshold.

Responsive to the ADF manager determines that an operational or performance characteristic of the ADF network fails a corresponding threshold step the ADF manager may dynamically deploy or undeploy a virtual application delivery controller as part of the ADF network step .

The ADF manager may deploy the virtual appliance according to a policy when the ADF network fails a threshold. The ADF manager may select a device to deploy the virtual appliance according to any method described in reference to . In some embodiments the ADF manager may dynamically deploy the virtual appliance via a cloud service. The ADF manager may provide a request to deploy a virtual appliance to a cloud service. In some embodiments the request includes the software modules for deploying the virtual appliance . In response the cloud service allocates a server from its resources installs the software modules therein and transmits the identity of the server to the ADF manager . The ADF manager may add the cloud service s server to the ADF network and begin receiving information from this server .

In some embodiments in response to the ADF manager s request to deploy a virtual appliance the cloud service allocates a server and transmits the identity of the server to the ADF manager . Then the ADF manager transmits the software modules for deploying the virtual appliance to the cloud service and the cloud service installs the modules on the server . In some embodiments the ADF manager communicates directly with the allocated server to deploy the virtual appliance thereon. The ADF manager adds the server to the ADF network and begins receiving information from the server .

After the ADF manager dynamically deploys a virtual application delivery controller as part of the ADF network the ADF manager may undeploy a virtual application delivery controller from the ADF network such as responsive to monitoring or administration. As the ADF manager continues to receive information from the nodes in the ADF network the ADF manager may update operational or performance characteristics of the ADF network . Based on these characteristics the ADF manager may determine that network contraction is appropriate and undeploy a virtual appliance .

In many embodiments to make this determination the ADF manager compares the operational or performance characteristics of the ADF network with the operational or performance capacities of the network . As the ADF manager deploys more appliances or virtual appliances the ADF manager adds the operational or performance capacities of the newly deployed components to the net capacities of the pre existing ADF network . For example if the ADF manager deploys a virtual appliance capable of serving 4000 users the ADF increases the number of users the ADF network may service by 4000. In this manner the ADF manager may track the capacity of the deployed network .

The ADF manager may undeploy at least one virtual appliance if the operational or performance characteristics of the ADF network are less than a predetermined percentage of the network capacity. For example if the ADF manager determines the ADF network is operating at 75 of its capacity according to any of the metrics described herein the ADF manager may undeploy at least one virtual appliance . In some embodiments the ADF manager may undeploy at least one virtual appliance if the operational or performance characteristics of the ADF network warrant consolidation of network traffic among fewer appliances and virtual appliances. For example if removal of a virtual appliance and consolidation of the network traffic among the remaining appliances permits the ADF network to function within a predetermined range of capacities the ADF manager may undeploy at least one virtual appliance . The ADF manager may select any virtual appliance to undeploy. In some embodiments the ADF manager may select a virtual appliance operating at the lowest capacity. The virtual appliance s network traffic is rerouting to neighboring virtual appliances before undeployment. In many embodiments the ADF manager may select a virtual appliance with the smallest capacity. The ADF manager may continue to undeploy virtual appliances in order of increasing capacity until the ADF network reaches a desired overall capacity. In this manner by undeploying virtual appliances with small capacities first the ADF manager minimizes the number of virtual appliances in the ADF network .

Although the systems and methods herein may describe an application delivery fabric of application delivery controller appliances and virtual application delivery controllers in various embodiments the fabric may include solely a plurality of embodiments of virtual application delivery controllers as would be appreciated by one of ordinary skill in the art.

In view of the structure functions and apparatus of the systems and methods described here the present solution provides efficient and intelligent system for deploying virtual appliances. Having described certain embodiments of methods and systems for deploying virtual appliances it will now become apparent to one of skill in the art that other embodiments incorporating the concepts of the invention may be used. Therefore the invention should not be limited to certain embodiments but rather should be limited only by the spirit and scope of the following claims.

