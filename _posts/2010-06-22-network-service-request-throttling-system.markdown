---

title: Network service request throttling system
abstract: Disclosed are various embodiments for throttling requests for a network service. A request for a network service is received from a client application and parameters are extracted from the request. Throttling policies applicable to the parameters are identified and retrieved, and it is determined whether the request should be processed based at least upon the throttling policies and the request parameters.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09313604&OS=09313604&RS=09313604
owner: Amazon Technologies, Inc.
number: 09313604
owner_city: Seattle
owner_country: US
publication_date: 20100622
---
Network services such as web services are often implemented on various computing devices in a networked environment. A particular application implemented on a computing device may utilize application programming interfaces API s that are hosted on a remote computing device accessible via a network. Data store services can also be implemented on a remote data store and accessed by a particular application via the network. In such a network service environment effectively and efficiently throttling access to a particular API data store or other network service can facilitate uptime and help ensure the various network services have sufficient capacity to provide services to application clients.

In the following discussion a general description of the system and its components is provided followed by a discussion of the operation of the same. Embodiments of this disclosure are directed to systems and methods of throttling requests directed to network services. Embodiments of this disclosure facilitate throttling of client access to network services that may be implemented on various computing devices that may be located in disparate locations e.g. various data centers . As discussed herein a network service can include a web service data store or other computing resource which is accessible over a network. In other words a network service is accessed via a request that is transmitted over a network to a computing device which is providing functionality of the network service. Accordingly embodiments of this disclosure grant or deny a request to access a network service based at least upon one or more throttling policies that define various dimensions on which throttling of access to the network service is based.

With reference to shown is a networked environment according to various embodiments. The networked environment includes a request throttling system one or more clients one or more network service devices implementing a network service and a management system that are all in communication via a network . The request throttling system client network service device and the management system can all be implemented in computing systems or computing devices of varying hardware architectures. Additionally any or all of the above can be implemented in one computing device or in any number of computing devices. The depicted example which illustrates various systems in communication over the network is but one example shown for ease of depiction and discussion herein. The network includes for example the Internet intranets extranets wide area networks WANs local area networks LANs wired networks wireless networks or other suitable networks etc. or any combination of two or more such networks.

A computing device or computing system on which the request throttling system client network service device and or management system can be implemented may comprise for example a server computer or any other system providing computing capability. Alternatively a plurality of computing devices may be employed that are arranged for example in one or more server banks computer banks or other arrangements. For example a plurality of computing devices together may comprise for example a cloud computing resource a grid computing resource and or any other distributed computing arrangement. Such computing devices may be located in a single installation or may be dispersed among many different geographical locations. In one embodiment a computing device can represent a virtualized computer system executing on one or more physical computing systems. However for purposes of convenience a computing device is referred to herein in the singular. Even though a computing device is referred to in the singular it is understood that a plurality of computing devices may be employed in the various arrangements as described above.

The components executed on the network service device include for example a network service a request throttling client and other applications services processes systems engines or functionality not discussed in detail herein. The network service is executed to provide various functionality and or services to requesting clients. As one example the network service implements an application programming interface API that can be called or accessed by a client with a remote procedure call. In another example the network service can be a messaging oriented service that can provide an API that is accessed with extensible markup language XML based calls transmitted via the network . As another example the network service can provide an API data store and or database functionality for clients that can be accessed via XML messages that follow the Simple Object Access Protocol SOAP .

In yet another example the network service can authenticate credentials of a user that are provided in an authorization request transmitted to a network service by a client. Accordingly the network service in this example can receive a message containing credentials provided by a user and the network service can return a Boolean response that indicates whether the user is authenticated. Other variations and examples should be appreciated and it should further be appreciated that the above examples are merely illustrative and do not constitute an exhaustive list of examples of a network service . Also in the depicted networked environment multiple network services can be implemented on a network service device and multiple network service devices can be accessible via the network as can be appreciated.

The network service device can also execute a request throttling client that facilitates throttling of requests made to the network service in the networked environment . In one embodiment the request throttling client can receive a request to access a network service on behalf of a client application which can be either approved or denied by the request throttling server according to one or more request throttling policies. In other embodiments the request throttling server can authorize the request throttling client to process requests to access a network service and provide the request throttling client with one or more request throttling policies. In this example the request throttling client can itself process and then either approve or deny a request for a network service on behalf of a client application .

Accordingly in one embodiment the request throttling client can be a class library API and or function provided in the network service device that the network service can invoke in order to determine whether a request should be processed. Upon invoking such an API or requesting authorization the request throttling client and or request throttling server can approve or deny the request to access the network service according to various throttling policies that they are configured to enforce. As one example a network service executed in the Java platform on the network service device can access a Java class that implements functionality of the request throttling client as described herein.

The components executed in the request throttling system include for example a request throttling server and other applications services processes systems engines or functionality not discussed in detail herein. The request throttling server is executed to throttle limit and or screen requests to access network services provided via one or more network service devices . Access to a network service can be throttled in order to prevent and or detect a denial of service attack to enforce access restrictions to a particular network service to ensure fairness among clients attempting to access a particular network service to ensure that a given network service and or requesting client is not consuming excessive network bandwidth and or computing resources or other reasons as can be appreciated by a person of ordinary skill in the art.

Accordingly the request throttling server executed by the request throttling system can throttle requests to a network service by analyzing a request for the network service to determine whether the request results in the violation of a throttling policy. If the request results in the violation of a throttling policy the request throttling server can reject the request. Mechanisms by which requests are throttled are further discussed in more detail below.

The components executed on the client include for example a client application and other applications services processes systems engines or functionality not discussed in detail herein. A client application can be any application software and or service that may submit a request to a network service . In some embodiments a client can execute a network service that serves requests from other clients and the network service executed on the client can also take the form of a client application as it may submit requests to other network services in order to provide requested functionality to other client applications . Accordingly the client application and network service are depicted in the drawings as being executed in separate devices for ease of depiction and to facilitate discussion of the various embodiments of the disclosure. However a person of ordinary skill in the art should appreciate that this is but one example of a configuration according to this disclosure. It should be appreciated that in some embodiments the request throttling client can be executed on a client as well. Accordingly a client application can facilitate making a throttling determination with respect to requests for network service resources as described herein.

A request from a client application to the network service to access the network service can include various parameters from which throttling decisions can be made depending on the throttling policies that are being enforced in a system according to and other embodiments. As some non limiting examples a request can include a string or other data type that describes an identifier and or name of a client application that is submitting a request for a network service a user or customer identifier a name or identifier of the requested network service an internet protocol IP address or other network identifier and the API and or function requested within the requested network service . Additionally the request can include context specific parameters that can also be used to throttle requests for a network service . As one example in the context of a multi marketplace electronic commerce system facilitated by various client applications and network services a request for a network service can include a marketplace identifier that identifies a marketplace for which a requested is intended. For example an electronic commerce system may facilitate multiple electronic storefronts for various retailers and merchants. Accordingly the marketplace identifier can identify the retailer and or merchant so that the request throttling system and or request throttling client can throttle requests for network services based at least upon the marketplace with which the requests is associated.

The components executed on the management system include for example a request throttling management application and other applications services processes systems engines or functionality not discussed in detail herein. The management system can also include a data store that can store throttling policies usage data and or request data . The throttling policies can define policies which if violated can cause a request from a client application for a network service to be denied. Usage data can store data regarding the usage of a particular network service . In other words the usage data can store data regarding how much usage a particular network service in the networked environment is occurring on behalf of client applications .

Usage data can be tracked by the network service the request throttling server and or the request throttling client and transmitted to the request throttling management application for storage in the data store . The usage data of network services can include historical usage data rate usage data and data related to the parameters in a request so that request throttling policies can be enforced based the usage data as well as other data. Request data can store data regarding requests submitted by clients in the networked environment . As a non limiting example the request data can include data regarding the requests submitted by a particular client IP address which can be tracked and stored in the data store . In one embodiment the request throttling server can throttle requests on the basis of a client IP address. In this example a throttling policy can be defined that limits requests from an IP address at a certain rate threshold. Because request data can be tracked and historical request data can be maintained in the data store and accessible via the request throttling management application the request throttling server can refuse a request from the client IP address.

The throttling policies usage data and request data can also be cached in the request throttling system and or client so that they can be retrieved without accessing the management system and its data store . Because the request throttling server and or request throttling client may be potentially required to service large volumes of requests over short periods of time caching of data on a computing device on which a throttling decision is made can reduce data store accesses as well as reduce the response latency that results from a throttling determination.

The request throttling management application can also provide management functionality so that a user via a management console and or a management user interface provided by the request throttling management application can manage and or define throttling policies which can be enforced by the request throttling server and or the request throttling client . Additionally a user can view usage data and or request data to view status and historical throttling data.

Next a description of the operation of the various components of the networked environment is provided. As described above the request throttling server can perform throttling of requests on behalf of a client application to access functionality an API storage resources or other computing resources provided by a network service . Accordingly a request throttling client provided on a network service device can facilitate the throttling capabilities of the request throttling server . A network service can be configured to invoke functionality of the request throttling client when network service resources are requested by the client application . Accordingly in one embodiment the request throttling client can generate a request containing parameters with which the request throttling server can determine whether the request to access the network service should be approved or denied. In other words a network service can receive a request from a client application for network service resources and the request throttling client can be invoked by the network service in order to submit a request to the request throttling server to determine whether the request should be processed by the network service . In other embodiments the request containing parameters with which a throttling determination can be made is generated by the client application .

The request generated by the request throttling client and or client application can include various parameters describing the identity of the requesting client the client application and or the requested network service and transmit the request to the request throttling server . In some embodiments the parameters describe properties that are not related to an identity of a device service or application. As a non limiting example the request parameters can describe properties of the request itself such as data being passed to the requested network service and a request throttling policy can include a policy definition specific to the data. As one example a request throttling policy may include a policy definition that a given username cannot exceed a certain request rate to a particular network service . Accordingly the request can include a username so that the request throttling server can make a throttling determination on this basis. Accordingly the request throttling server can extract the parameters from the request and make a determination as to whether access to the requested network service should be granted. To make this determination the request throttling server can retrieve at least one throttling policy that corresponds to the extracted parameters from the request throttling management application .

Policies that correspond to the various dimensions of a request on which throttling determinations can be made and can be stored in the data store . As one example a policy can be defined that specifies that any one IP address cannot exceed a certain request rate at any given time. Accordingly the request throttling server can retrieve request data corresponding to an IP address from which a request is received and determine whether the request rate is exceeded. If the request rate is exceeded in this example the request throttling server can deny or throttle the request from the client IP address and transmit a denial message to the request throttling client . If executed in a network service device the request throttling client can then transmit a denial to the client application . If the request rate is not exceeded the request throttling server can transmit an approval to response to the request. If executed in a network service device the request throttling client can then allow the network service to process the request.

Additionally the request throttling server can also facilitate tracking and reporting of requests to the request throttling management application so that usage data and request data in the data store are updated with accurate data. Therefore in the above example the request throttling server can in conjunction with making a throttling determination generate a reporting object corresponding to the parameters extracted from the request and transmit the reporting object to the request throttling management application . By way of illustration the request throttling server can generate a reporting object that contains fields corresponding to the various parameters of the request. The request throttling management application can then update usage data and request data accordingly.

Reporting objects can also be tuned so that they are reported to the request throttling management application by the request throttling server on a periodic basis so that during periods of high volume servicing of requests computing resources of the request throttling system can be devoted to making throttling determinations rather than transmitting reporting objects to the request throttling management application . In some embodiments reporting objects can be configured with a counter and placed in a reporting queue for periodic reporting and or reporting when computing resources are available. Accordingly a reporting object can be created when a request is serviced by the request throttling server for which a reporting object has not been created and placed in a reporting queue. A request counter in the reporting object can incremented each time the request throttling server receives an additional request having parameters that match those in the reporting object and is serviced by the request throttling server . In this way the amount of data transferred to the request throttling management application can be minimized and the reporting schedule optimized so that performance of throttling by the request throttling server is improved.

The request throttling server can also throttle requests for network service resources based on historical and or cumulative request data and or usage data . As one example in the context of an electronic commerce system a policy can be defined that specifies that a particular customer identifier cannot access a particular network service more than a certain number of times over a period of a month. The request throttling server can determine from historical usage data and or request data whether a new request made by the customer identifier would violate such a policy.

To further improve performance of the throttling of requests in the networked environment the request throttling server can authorize the request throttling client to perform throttling of requests for network services made on behalf of a client . In this way a network service device executing a network service can perform throttling of its own requests according to policies defined and stored in the data store . Accordingly the request throttling server can transmit such an authorization to a request throttling client as well as one or more request throttling policies that are tailored for the network service device and or network service . The request throttling server can determine for example how many additional network service devices in the networked environment are executing a particular network service and generate a request throttling policy that allocates a proportionate amount of capacity to the network service device .

For example if the request throttling server determines that there are ten network service devices executing a particular network service and the request throttling server also determines that a policy is defined that sets a threshold usage rate for a particular network service that cannot be exceeded the request throttling server can transmit an authorization with a request throttling policy that assigns the network service one tenth of the usage rate specified by the policy. Such a request throttling policy can be cached in the network service device so that when the network service invokes the request throttling client to determine whether it can according to the throttling policies accept or reject a request for network service resources the request throttling client can retrieve the cached request throttling policy to determine whether the request should be approved or denied. In other embodiments the request throttling client can request a throttling policy from the request throttling server and or from the request throttling management application each time it needs to analyze a request to make a throttling determination.

Reference is now made to which depicts the flow of data between various components in the networked environment of according to various embodiments of the disclosure. A client application can initiate a request for a network service . In the depicted example in order for a network service to process the request from the client application the network service can invoke the request throttling client to facilitate making a throttling determination for the request. As noted above the request throttling client can be a separate application executed in a network service device or it can be a software library class or function that is provided within or accessible to the network service that the network service can invoke to determine whether a request should be processed or rejected. In one embodiment by way of illustration only the request throttling client can comprise an API with a function such as the following pseudocode 

Accordingly in the above example the network service can invoke the above function which can be provided in a library class etc. in order to determine whether a request from a client application should be processed. In the example of invoking the request throttling client causes a request having the parameters passed to the API to be generated and transmitted to the request throttling server . Upon receiving the request from the network service the request throttling server can extract parameters from the request and request a policy from the request throttling management application that matches or corresponds to at least one of the extracted parameters.

The request throttling management application can then transmit at least one policy that corresponds to the extracted parameters and the request throttling server can enforce the throttling policies by either approving or disapproving the request. The policies corresponding to the request can also be cached within the request throttling system and the request throttling server can be configured to retrieve policies corresponding to the request from such a cache to improve performance of the server. If the request throttling server approves the request it can transmit a throttling determination to the request throttling client and the network service can process the request for network service resources from the client application .

A policy provided by the request throttling management application is defined by at least one or more parameters which correspond to the parameters of a request to which the policy is applied. A throttling policy can include wildcards so that the policy may be applied to various requests that may share the same or similar parameters. Additionally the policy is also defined by thresholds and or rules which determine whether the request throttling server and or the request throttling client approve or deny a request from a client application for network service resources. Accordingly a throttling policy can define rate threshold policies such as a request rate at any given time an average request rate over a period of time etc. These rate threshold policies can be applicable to any of the dimensions that are represented by a request parameter. In other words a rate threshold policy can apply to a network service requested by a client application so that a request rate of a network service is limited to a certain threshold regardless of which application is requesting access to the service. A rate threshold policy can also apply to the requesting client application so that a given client application which can be identified with an identifier in a request parameter is limited to a certain request rate defined by the policy.

A throttling policy can also be defined by absolute thresholds which can specify non rate thresholds and can also be associated with a particular period of time. Absolute threshold policies can include for example a total number of requests over a given period of time and can be applicable to any of the dimensions that are represented by a request parameter. Like a rate threshold policy an absolute threshold policy can apply to a network service requested by a client application so that an absolute number of requests over a period of time is limited to a certain threshold regardless of which application is requesting access to the service. An absolute threshold policy can also in one example apply to the requesting client application so that a given client application which can be identified with an identifier in a request parameter is limited to a certain number of requests over a given period of time defined by the policy. It should also be appreciated that a throttling policy can include any combination of the above.

Upon retrieving a throttling policy the request throttling server in the example of can make a throttling determination based at least upon the throttling policy and the parameters extracted from a particular request. Upon making a throttling determination which can take the form of an approval or denial of access to a requested network service the request throttling server can transmit a response to the request throttling client which can subsequently cause the network service to transmit a response to the client application initiating the request for the network service . If the request is denied the network service can transmit a denial message or an error message. If the request is approved the network service can process the request and transmit an appropriate response to the client application . The request throttling server can also retrieve usage data and or request data from the request throttling management application to facilitate making a throttling determination. In the above example API where a Boolean response is defined as a return value for the handleRequest function call the request throttling client can return a true value if the request for a particular network service is granted and a false value if the request for the network service is denied. In other words the handleRequest function call can return a false value if access to the network service is being throttled based upon the identity of the requested network service the identity of the client application and or other parameters in a particular request as can be appreciated.

Reference is now made to which depicts an alternative example of data flow between the components of in which access to a network service is throttled according to embodiments of the disclosure. In the depicted example a request throttling client executed and or invoked by a network service can make a throttling determination based at least upon a throttling policy received from the request throttling server . The request throttling server in order to facilitate throttling of requests for network services in a networked environment can grant certain network service devices and or network services with the authority to make throttling determination regarding requests for network service resources received from a client application . Accordingly rather than acting as a conduit to a request throttling server that will make a throttling determination for a given request the request throttling client can make a throttling determination with regard to a client application request for a network service .

As noted above the request throttling client can be a separate application executed in a network service device or it can be a software library class or function that is accessible to the network service that can either make a throttling determination or transmit a request to a request throttling server which can make a throttling determination on its behalf. Assuming for the sake of explanation that the request throttling client comprises an API with a function such as in the pseudocode described above the network service can invoke the above function which can be provided in a library class etc. in order to request access to the network service described by requestedService. In the example of invoking the request throttling client authorized to make a throttling determination attempts to locate at least one throttling policy corresponding to the request parameters.

If a corresponding request throttling policy is not cached in the request throttling client or on the network service device then the request throttling client can request one or more throttling policies applicable to the request parameters from the request throttling sever . Accordingly the request throttling server if corresponding policies are not cached therein can request corresponding policies from the request throttling management application which can transmit at least one corresponding policy to the request throttling server which can then transmit the policies to the request throttling client . depicts an alternative embodiment where a request throttling client can request a throttling policy directly from the request throttling management application which as noted above can retrieve a corresponding policy from the data store by matching parameters in a request with parameters constraints defined in a policy .

Upon locating throttling policies that correspond to the request for a network service initiated by the client application the request throttling client can apply the policies to determine whether the request should be granted or denied. To facilitate a throttling determination the request throttling client can also retrieve usage data and or request data from the request throttling server and or request throttling management application .

In some embodiments the request throttling server can provide the network service and or request throttling client with the various throttling policies relevant to requests for the network service received from a client application when an authorization for the network service to perform its own throttling determinations is transmitted. Accordingly in one example the request throttling client can determine whether an appropriate request throttling policy is cached within the network service device . If an applicable policy is not cached then the request throttling client can approve and process the request from a client application .

Reference is now made to which depicts an alternative configuration of the components of according to various embodiments of the disclosure. illustrates an example of throttling of requests for network services in an environment involving multiple data centers that may be disparately located. In such an environment the request throttling server and or request throttling management application can facilitate throttling of access to network services across multiple data centers where clients and network service devices on which network services are executed are located across the various data centers. Additionally in order to handle an expected level of request traffic it may be desirable to provide one or more request throttling system as well as multiple network service devices executing network services located in multiple data centers . Accordingly a request throttling server can throttle requests to network services from multiple clients . Additionally multiple request throttling servers can be employed in tandem so that requests from multiple clients can be funneled to a particular data center and appropriately throttled.

In such an environment request throttling policies may apply to a particular client application and or a network service for example and each may be executed on multiple clients and network service devices that are located across various data centers . As one example a request throttling policy may specify that a client application identifier cannot exceed a threshold request rate. However the clients executing the client application may be located in different data centers and may be configured to access different request throttling servers located in their respective data centers .

As noted above the various request throttling servers can cache throttling policies usage data and or request data in order to make throttling determinations without having to request such data from the request throttling management application for each incoming request. Therefore the request throttling server can employ a reporting mechanism to report usage data and or request data to other request throttling servers which can update cached data accordingly. When a request from a client application for network service resources is processed by a request throttling server and a throttling determination is made the request throttling server can generate a reporting object corresponding to the parameters extracted from the request and transmit the reporting object to other request throttling servers in addition to the request throttling management application . In the example discussed above in reference to in one embodiment the request throttling server can generate a reporting object that contains fields corresponding to the various parameters of the request. The request throttling server can then update its cached usage data and or request data with the data represented by the reporting object. A request throttling policy applicable to a request can also specify whether a request having parameters matching the policy definitions of a policy should be reported. In this way request throttling policies can control the amount of reporting activity that a request throttling server handles.

The request throttling server can also employ reporting queues to facilitate reporting of reporting objects to other request throttling servers and the request throttling management application . Reporting queues can be employed so that the request throttling server does not have to report a result of each throttling determination when each request is processed. A request throttling server can generate a first reporting queue configured to facilitate reporting to another request throttling server and a second reporting queue to facilitate reporting to the request throttling management application . These separate reporting queues can be tuned to initiate reporting of reporting objects at varying frequencies. For example a reporting queue configured to report to another request throttling server can be tuned to flush its queue more frequently than a reporting queue configured to report reporting objects to the request throttling management application . Reporting queues can be differently tuned in this way because reporting usage data and or request data to another request throttling server can be considered to have a higher priority than reporting data to the request throttling management application .

Referring next to shown is a flowchart that provides one example of the operation of a portion of the request throttling server according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the request throttling server as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the request throttling system according to one or more embodiments.

Beginning with box the request throttling server receives a request from a request throttling client to access a network service . Request parameters are extracted from the request so that one or more throttling policies can be identified in box . In box the request throttling server can identify whether a throttling policy having parameters matching the request parameters is cached in the request throttling server . If throttling policies corresponding to the extracted request are cached in the request throttling server in box the one or more throttling policies can be retrieved from the cache. In box the request parameters can be compared against the policy definitions. In box the request can be approved or denied depending upon the comparison between the request parameters and the policy definitions and the process can proceed to jump block A continued in . If a request is approved the request throttling client if executed in a network service and or network service device can cause the network service to process a request from a client application .

From jump block A in in box the request throttling server can determine whether the request should be reported. As noted above a request throttling policy can define whether a request matching its policy definitions should be reported. If the policy specifies that the request should not be reported then the process can proceed to jump block B which refers back to where the process ends. If the request throttling server determines in box that the request should be reported then in box the request throttling server can determine whether a reporting object corresponding to the request parameters is in the appropriate reporting queues of the request throttling server .

If the request throttling server is in a multi data center and or a multi server environment it may have reporting queues associated with the other request throttling servers in its environment as well as a reporting queue associated with the request throttling management application . If a reporting object is not in one or more of the various reporting queues in a request throttling server then in box and box reporting objects for the reporting queues can be created and placed into the reporting queues. In box a counter in the reporting object can be incremented which corresponds to counting the request that was received and processed by the request throttling server . In some embodiments the counter can be incremented only if the request was approved by the request throttling server . The process can then proceed to jump block B which refers back to jump block B in where the process ends.

If in box request throttling policies are not cached in the request throttling server then in box the request throttling server can approve the request and transmit an approval to a request throttling client corresponding to the network service in which the request throttling client is invoked. In the depicted embodiment the request can be approved to improve performance and or throughput of the request throttling server so that a client application does not have to wait for the request throttling server to retrieve a policy to make a throttling determination from the request throttling management application which can be retrieved and cached in subsequent steps of the depicted process for subsequent requests having the same or similar parameters. In block the request throttling server can request a policy from the request throttling management application . In box if policies corresponding to the request parameters are available in the data store they are transmitted from the request throttling management application to the request throttling server and cached in box after which the process ends.

In some embodiments the request throttling server can simply approve the request in box and then end the depicted process. As one example the request throttling server can upon startup or at another time retrieve request throttling policies from the request throttling management application and cache the policies in the request throttling system . Accordingly the request throttling server can avoid making requests to the request throttling management application as a part of handling any given request and rely on the policies it has cached. However in other embodiments it should be appreciated that the request throttling server can request one or more policies that correspond to the parameters of the request from the request throttling management application and only approve or deny the request after a corresponding policy is located and a throttling determination is made.

Additionally in the depicted example the request throttling server does not initiate reporting of the request of a request throttling policy applicable to the request cannot be located because in the depicted embodiment the request throttling policy can specify whether the request should be reported. However in some embodiments the request throttling server can also initiate reporting of the request for which a policy cannot be located by following the reporting pipeline depicted in .

Referring next to shown is a flowchart that provides one example of the operation of a portion of the request throttling client according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the request throttling client as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the client according to one or more embodiments.

First in box a request to access a network service can be received in the request throttling client on behalf of a client application . If in box the request throttling client determines that it is not authorized to make a throttling determination for a request corresponding to the parameters used to invoke the request throttling client on its own then the generated request is transmitted to a request throttling server which can make a throttling determination and transmit either an approval or denial to the request throttling client . If the request throttling client determines that it is authorized to make a throttling determination for the request then in box it is determined whether throttling policies corresponding to the request parameters are cached in the request throttling client . Policies are retrieved from a cache in box and the request parameters are compared against policy definitions in box . If it is determined in box based at least upon usage data and request data that the request parameters violate the one or more policies then in box the request is denied by the request throttling client . If the request parameters do not violate the policies then the request is approved in box .

If in box it is determined that the throttling policies corresponding to the request parameters are not cached in the request throttling client then in box policies corresponding to the parameters are requested from the request throttling server . If policies are available that correspond to the parameters in box they are transmitted to and cached in the request throttling client in box . Then the process proceeds to apply or enforce the retrieved policies as described above. If a request throttling policy cannot be located then the process proceeds to box where the request is approved.

With reference to shown is a schematic block diagram of the computing device or computing system which can be used to implement a request throttling system and or a network service device according to an embodiment of the present disclosure. The depicted device computing device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end the computing device may comprise for example at least one server computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are request throttling server and or the request throttling client and potentially other applications. In addition an operating system may be stored in the memory and executable by the processor . It is understood that there may be other applications that are stored in the memory and are executable by the processors as can be appreciated. Where any component discussed herein is implemented in the form of software any one of a number of programming languages may be employed such as for example C C C Objective C Java Java Script Perl PHP Visual Basic Python Ruby Delphi Flash or other programming languages.

A number of software components are stored in the memory and are executable by the processor . In this respect the term executable means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory and run by the processor source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory and executed by the processor or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory to be executed by the processor etc. An executable program may be stored in any portion or component of the memory including for example random access memory RAM read only memory ROM hard drive solid state drive USB flash drive memory card optical disc such as compact disc CD or digital versatile disc DVD floppy disk magnetic tape or other memory components.

The memory is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memory may comprise for example random access memory RAM read only memory ROM hard disk drives solid state drives USB flash drives memory cards accessed via a memory card reader floppy disks accessed via an associated floppy disk drive optical discs accessed via an optical disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also the processor may represent multiple processors and the memory may represent multiple memories that operate in parallel processing circuits respectively. In such a case the local interface may be an appropriate network that facilitates communication between any two of the multiple processors between any processor and any of the memories or between any two of the memories etc. The local interface may comprise additional systems designed to coordinate this communication including for example performing load balancing. The processor may be of electrical or of some other available construction.

Although the request throttling server and or request throttling client and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits having appropriate logic gates or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The flowcharts of show the functionality and operation of an implementation of portions of the request throttling server and request throttling client respectively. If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the flowcharts of show a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in may be executed concurrently or with partial concurrence. Further in some embodiments one or more of the blocks shown in may be skipped or omitted. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Also any logic or application described herein including the request throttling server and the request throttling client that comprises software or code can be embodied in any non transitory computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present disclosure a computer readable medium can be any medium that can contain store or maintain the logic or application described herein for use by or in connection with the instruction execution system. The computer readable medium can comprise any one of many physical media such as for example electronic magnetic optical electromagnetic infrared or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives memory cards solid state drives USB flash drives or optical discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

