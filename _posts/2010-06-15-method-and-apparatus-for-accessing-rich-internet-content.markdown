---

title: Method and apparatus for accessing rich internet content
abstract: A method and apparatus for accessing rich Internet content is disclosed. In one embodiment, a computer implemented method selects an event within a rich Internet application (RIA) and determines if execution of the event requires at least one non-deterministic parameter value. If execution of the event requires at least one non-deterministic parameter value, the method sets the at least one non-deterministic parameter value to a predetermined parameter value and executes the event using the predetermined parameter value to access rich Internet content associated with the event.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08490114&OS=08490114&RS=08490114
owner: Adobe Systems Incorporated
number: 08490114
owner_city: San Jose
owner_country: US
publication_date: 20100615
---
Embodiments described herein generally relate to techniques for accessing web content and more specifically to accessing rich Internet content to support content related processes such as indexing of rich internet content.

Rich Internet Applications RIAs provide interactive functionality for multimedia content e.g. user interactive controls and application generated controls that creates an exciting and interesting multimedia experience. Consequently RIAs have become a very popular multimedia presentation tool on websites throughout the Internet.

An RIA typically is a collection of content that is wrapped within programming code to be executed by a playback routine. For example some RIAs may comprise animations interfaces games video clips audio clips and or other interactive or passive content referred to herein as rich Internet content . In addition the RIA typically includes program code to instruct a playback routine referred to as an RIA Player how to display and progress through the content of the RIA. One such RIA Player is a FLASH player FLASH is a registered trademark of Adobe Systems Incorporated that executes an RIA in the form of a SWF file to present rich Internet content to a viewer. Another type of RIA player includes the open source Gnash software. Other varieties of RIA players include frame based players and their associated RIAs.

To broadly utilize the content within an RIA the content needs to be accessible to content related processes such as for example content searching and indexing. However searching and indexing an RIA has been a challenge for the various search engines particularly because of multiple layers of interactive functionality contained in the RIA. According to a conventional technique search engine crawlers or other indexing agents are configured to execute an RIA triggering various interactive or other functionalities. As the crawler executes the RIA each functionality event is triggered and the crawler captures the text within a resulting page frame or other textual output to produce an index representing the content presented by the RIA. At various points during the RIA execution a function may have alternative branches that either automatically branch or branch in response to user input e.g. help button game selection and the like . The crawler exercises one branch then returns retraces to the branch point and exercises the alternate branch all the while capturing the textual information produced by the RIA.

In some instances a branch point or a point along the branch executes a call function that retrieves information from outside of the RIA e.g. current time current location or position a random number and the like. The RIA may use this information to determine the content to be displayed. When the crawler returns retraces to the branch point or branch that contains the call function the retrieved information in response to the call function may change thus making the content associated with the branch non deterministic. Such branching may create erroneous results or cause the crawler to loop indefinitely through the branch point and its potentially infinite number of branches. Any resulting information is inconsistent and therefore is not useful for search engine indexing.

Accordingly there exists a need in the art for a method and apparatus to access rich Internet content and improve content related processes such as indexing of RIA related content.

A method and apparatus for accessing rich Internet content is disclosed. In one embodiment a computer implemented method selects an event within a rich Internet application RIA and determines if execution of the event requires at least one non deterministic parameter value. If execution of the event requires at least one non deterministic parameter value the method sets the at least one non deterministic parameter value to a predetermined parameter value and executes the event using the predetermined parameter value to access rich Internet content associated with the event.

While the method and apparatus for accessing rich Internet content is described herein by way of example for several embodiments and illustrative drawings those skilled in the art will recognize that the method and apparatus for accessing rich Internet content is not limited to the embodiments or drawings described. It should be understood that the drawings and detailed description thereto are not intended to limit embodiments to the particular form disclosed. Rather the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the method and apparatus for accessing rich Internet content as defined by the appended claims. Any headings used herein are for organizational purposes only and are not meant to limit the scope of the description or the claims. As used herein the word may is used in a permissive sense i.e. meaning having the potential to rather than the mandatory sense i.e. meaning must . Similarly the words include including and includes mean including but not limited to.

Various embodiments of a method and apparatus for accessing rich Internet content are described. In the following detailed description numerous specific details are set forth to provide a thorough understanding of claimed subject matter. However it will be understood by those skilled in the art that claimed subject matter may be practiced without these specific details. In other instances methods apparatuses or systems that would be known by one of ordinary skill have not been described in detail so as not to obscure claimed subject matter.

Some portions of the detailed description which follow are presented in terms of algorithms or symbolic representations of operations on binary digital signals stored within a memory of a specific apparatus or special purpose computing device or platform. In the context of this particular specification the term specific apparatus or the like includes a general purpose computer once it is programmed to perform particular functions pursuant to instructions from program software. Algorithmic descriptions or symbolic representations are examples of techniques used by those of ordinary skill in the signal processing or related arts to convey the substance of their work to others skilled in the art. An algorithm is here and is generally considered to be a self consistent sequence of operations or similar signal processing leading to a desired result. In this context operations or processing involve physical manipulation of physical quantities. Typically although not necessarily such quantities may take the form of electrical or magnetic signals capable of being stored transferred combined compared or otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to such signals as bits data values elements symbols characters terms numbers numerals or the like. It should be understood however that all of these or similar terms are to be associated with appropriate physical quantities and are merely convenient labels. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout this specification discussions utilizing terms such as processing computing calculating determining or the like refer to actions or processes of a specific apparatus such as a special purpose computer or a similar special purpose electronic computing device. In the context of this specification therefore a special purpose computer or a similar special purpose electronic computing device is capable of manipulating or transforming signals typically represented as physical electronic or magnetic quantities within memories registers or other information storage devices transmission devices or display devices of the special purpose computer or similar special purpose electronic computing device. Various embodiments provide a method and apparatus for accessing rich Internet content generally associated with rich Internet applications RIAs .

In various embodiments network may include one or more networks including but not limited to Local Area Networks LANs e.g. an Ethernet or corporate network Wide Area Networks WANs e.g. the Internet wireless data networks some other electronic data network or some combination thereof.

The web server generally includes a CPU support circuits and a memory . The details of a computing system that may perform the functions of the web server are described with respect to below. The memory includes a rich Internet application RIA its associated rich Internet content and remote data i.e. information that is used by the RIA but is called from outside the rich Internet content .

One example of an RIA is a SWF file that supports rich multimedia content as well as interactive functions when executed by an RIA player such as a FLASH player. In various embodiments the support circuits comprises one or more support circuits including but not limited to input output I O interface network interface power supplies cache clock circuits one or more input output devices such as cursor control device keyboard and display s and the like. In various embodiments the memory may be implemented using any suitable memory technology such as static random access memory SRAM synchronous dynamic RAM SDRAM nonvolatile Flash type memory or any other type of memory. In the illustrated embodiment program instructions and data implementing any of the elements of the embodiments described above may be stored within the memory . In other embodiments program instructions and or data may be received sent or stored upon different types of computer accessible media or on similar media separate from the memory or the web server .

The search engine server generally includes a CPU support circuits and a memory . The details of a computing system that is capable of performing the functions of the search engine server are described with respect to below. The memory includes search engine software an indexer a rich Internet application RIA search player and a deterministic parameter application programming interface DP API module .

The search engine software provides functionality for searching the Internet. The indexer indexes various web pages on the Internet through organizing key words text from accessed pages into a rapidly searchable index. The RIA search player assists the indexer in indexing rich Internet content. That is accessible through RIA . When the search engine software accesses a page containing an RIA such as RIA the software executes the RIA search player to facilitate indexing the content of the RIA . The rich Internet application RIA search player excites all the events that a user might select while using an RIA player as well as excites all events that are automatically executed by an RIA player. Thereby all potential paths of all events are traversed and the content is mined i.e. accessed and indexed . During traversal of the potential paths branching of paths is generally encountered. Such branching points are tagged. Once one path branch is completely indexed the completed path is retraced back to the branch point and an alternate path from the branch point. is traversed.

While traversing all potential paths of the RIA some elements of the content introduce non determinism. Such elements are events of the RIA that require at least one non deterministic parameter value e.g. remote data to be used during execution. For example during execution a call may be made to access information outside the RIA or its associated content to retrieve time position random values network related information and the like i.e. remote data that are used to control aspects of the event execution as well as control the displayed content. Non determinism traditionally does not allow a path to be retraced thereby preventing effective indexing of the content . In one embodiment when a call for a non deterministic parameter is encountered within the RIA the RIA search player launches the DP API module . The DP API module provides a predetermined parameter value where a non deterministic parameter value remote data is required to access the rich Internet content . The functionality of the RIA search player and the DP API module is described in detail below with reference to method and method in and respectively. Providing a predetermined parameter value where a non deterministic parameter value is required to execute or play events in the RIA enables the branch es to be reliably retraced and allows effecting indexing of the rich Internet content associated with the RIA .

Because the RIA has different options there are different branches within the RIA that may be selected by a user or by the RIA itself. Such an RIA comprises a tree structure describing the arrangement of frames or groups of frames within the RIA . Inputs received by the RIA may cause the RIA to traverse down one branch of the tree or another and to output frames associated with each traversed branch in the tree.

In addition to the content within the RIA RIA may comprise additional information. For example an RIA having an animation or other frame sequence may also include a frame rate a timing signal for communicating with the RIA player or other signals to cause events within the RIA to occur. An RIA player may examine information such as a frame rate to determine how to playback the RIA content and may interpret signals received from the RIA to indicate playback is proceeding correctly or to cause other content to be invoked.

As depicted in the RIA menu screen shown in the RIA comprises a plurality of animations. To configure an RIA player to properly playback animation sequences the RIA comprises a plurality of frame rates for the different animations embedded within the RIA . The RIA also comprises a plurality of timing signals associated with the animations. In some RIAs the timing signals within the RIA are not generated based on a frame rate but are generated asynchronously to the execution of the RIA. For example a timing signal may occur every 50 ms regardless of a specified frame rate of within the RIA.

As a part of each of the animations games and interfaces the RIA comprises a plurality of frames that may be generated for display. Specifically during playback of the RIA the RIA player may output frames from the RIA in a particular order such as by playing the frames of an animation in sequence. Alternatively the RIA player may generate the frames in an order specified by user input. For example the RIA player may first display a menu frame such as screen to allow a user to select how to playback the frames within the RIA . The RIA player may then advance to a different frame within the RIA based on the user s selection.

For example the main menu screen of the RIA displays textual information in a menu as well as interface elements such as buttons and a scroll bar . The RIA shown in allows a user to scroll through a menu of animations and games by using the scroll bar . When a user desires to view one of the animations or to play one of the games the user may select the desired menu item and press the Select button . The RIA player will then access the selected content and display the animation for the user or allow the user to play the game. During a search engine indexing process a search engine such as for example the search engine software of using the RIA search player parses the RIA into searchable text by identifying all of the textual fields in the menu and then selects and parses each of the available animations and games by traversing the tree structure of the RIA and its content. The text found in frames of each path branch of the tree is indexed.

For example from the main menu screen the search engine software may select Game which causes the RIA search player to traverse the tree to the Game Menu node . From here the software may select each of the four menu options a description of the game instructions for the game play the game or see the credits for the game. Each of these menu options may lead to additional screens for example the instructions menu option allows the search engine software to retrieve two pages of instruction information about the game. The two pages of instruction information may for example include Page and Page . Furthermore each of these screens may include an animation that comprises a plurality of frames. At each frame the search engine software utilizes the indexer to index the text of each frame or sequence of frames.

As the tree is traversed the search engine software selects the Play option which causes the RIA search player to access remote data and to traverse the tree to the node labeled Call . Remote data may include data or any other information that is required for executing the RIA. From the Call the search engine software is presented with another set of menu options for selecting a predetermined number of modes for playing the game at nodes and and an option to not proceed at node . The search engine software may select any of the modes for playing the RIA and the RIA search player then plays the RIA accordingly. If the search engine software selects the option of not proceeding with the game at node or once the user has finished playing the game the search engine software may return to the main menu block and then select Animation . The RIA search player then plays the animation . In this manner the search engine software exposes information for the indexer to create an index of the rich Internet content.

If the remote date is non deterministic i.e. with each call different data will result and a different branch will be used the RIA search player as described below uses the predetermined parameter API module in to hold the remote data constant until the search engine completes the indexing process. Consequently the predetermined parameter API module makes the non deterministic outcome of the call function deterministic.

If at step a determination is made that the content includes an RIA option YES the method proceeds to step . At step the RIA search player for example RIA search player of is executed. At step the resulting content exposed by the RIA search player execution is indexed i.e. the text from a frame is organized into a searchable index. One embodiment of step is described in detail below with respect to . Once the RIA search player has completed accessing all the content of the RIA the method ends at step .

While executing the RIA the RIA search player may encounter events that have associated non deterministic parameter values. For example the non deterministic parameter values may include a random number a time related function a position function network related data and or the like. In one embodiment non deterministic parameters are identified when the event intends to access information outside the RIA and this information may change with each access. To eliminate any anomalous affects to indexing that may result from encountering non deterministic parameters one embodiment utilizes a procedure to hold the remote data constant while indexing.

At the step a determination is made whether a branch is created at the event. If a branch is created at the event option YES a branch flag is set at step to enable the method to retrace to the branch points and the method proceeds to step . If a branch does not exist at the event option NO the method proceeds to the step . At the step the event is executed. At step the resulting content provided by the execution of the event is exposed to the indexer e.g. the event results in a new frame and the indexer mines the text within the frame. At step the method proceeds to the next event along the branch of the RIA. At step the method queries whether the event executed is last in the branch. If the event executed is not the last in the branch option NO the method proceeds to step to traverse other nodes within the branch which have not been traversed yet. If the event executed is the last in the branch option YES the method proceeds to step .

At step the method queries whether all the branches are complete i.e. no branch flags remain set. If the query is affirmatively answered the method has completed the RIA indexing and ends at step . If the query is negatively answered the method proceeds to step to continue the indexing procedure in a new branch.

At the step the method returns to a node having a prior event with the branch flag already set within the last branch that was traversed i.e. retrace the branch . At step a different branch for the event is selected. At step the method queries whether the last branch has been reached. If the last branch is not reached option NO the method proceeds to the step for traversing a different branch and execute event s associated with the different branch. If the last branch is reached option YES the branch flag is reset at step . At step the branch complete flag is set to indicate that a branch has been completely traversed. Determinations at step and step ensure that all possible events of RIA are executed and resulting contents are provided for efficient indexing of the RIA

Accordingly the method advantageously and effectively handles non determinism introduced due to non deterministic parameter values by setting a predetermined value for the non deterministic parameter values. According to various embodiments a DP API module for example the DP API module sets a predetermined value for the non deterministic parameter values. Further the RIA search player uses the predetermined parameter values provided by the DP API to execute the RIA during the indexing process.

According to an embodiment the RIA search player uses for example the structures of int RandomNumber tm DateTimeParam and string locale to initialize the non deterministic parameters. These structures are initialized when the search engine initializes the RIA search player. The same set of parameters is used during the repeated invocations of functions i.e. during path retracing that are non deterministic in nature. The structures the values they represent are the most common parameters which introduce non determinism i.e. random number locale and time. Other structures may be added and initialized to handle other non deterministic parameters that may be utilized by an RIA or RIA player.

Various embodiments of method and apparatus for accessing rich Internet content as described herein may be executed on one or more computer systems which may interact with various other devices. One such computer system is computer system illustrated by which may in various embodiments implement any of the elements or functionality illustrated in . In various embodiments computer system may be configured to implement the web server and or the search engine server described above. In the illustrated embodiments computer system may be configured to implement the search engine software and the RIA search player as processor executable executable program instructions e.g. program instructions executable by processor s in various embodiments.

In the illustrated embodiment computer system includes one or more processors coupled to a system memory via an input output I O interface . Computer system further includes a network interface coupled to I O interface and one or more input output devices such as cursor control device keyboard and display s . In various embodiments any of components may be utilized by the software to receive user input. In some cases it is contemplated that embodiments may be implemented using a single instance of computer system while in other embodiments multiple such systems or multiple nodes making up computer system may be configured to host different portions or instances of various embodiments. For example in one embodiment some elements may be implemented via one or more nodes of computer system that are distinct from those nodes implementing other elements. In another example multiple nodes may implement computer system in a distributed manner.

In different embodiments computer system may be any of various types of devices including but not limited to a personal computer system desktop computer laptop notebook or netbook computer mainframe computer system handheld computer workstation network computer a consumer device application server storage device a peripheral device such as a switch modem router or in general any type of computing or electronic device.

In various embodiments computer system may be a uniprocessor system including one processor or a multiprocessor system including several processors e.g. two four eight or another suitable number . Processors may be any suitable processor capable of executing instructions. For example in various embodiments processors may be general purpose or embedded processors implementing any of a variety of instruction set architectures ISAs such as the x96 PowerPC SPARC or MIPS ISAs or any other suitable ISA. In multiprocessor systems each of processors may commonly but not necessarily implement the same ISA.

System memory may be configured to store program instructions and or data accessible by processor . In various embodiments system memory may be implemented using any suitable memory technology such as static random access memory SRAM synchronous dynamic RAM SDRAM nonvolatile Flash type memory or any other type of memory. In the illustrated embodiment program instructions and data implementing any of the elements of the embodiments described above may be stored within system memory . In other embodiments program instructions and or data may be received sent or stored upon different types of computer accessible media or on similar media separate from system memory or computer system .

In one embodiment I O interface may be configured to coordinate I O traffic between processor system memory and any peripheral devices in the device including network interface or other peripheral interfaces such as input output devices In some embodiments I O interface may perform any necessary protocol timing or other data transformations to convert data signals from one components e.g. system memory into a format suitable for use by another component e.g. processor . In some embodiments I O interface may include support for devices attached through various types of peripheral buses such as a variant of the Peripheral Component Interconnect PCI bus standard or the Universal Serial Bus USB standard for example. In some embodiments the function of I O interface may be split into two or more separate components such as a north bridge and a south bridge for example. Also in some embodiments some or all of the functionality of I O interface such as an interface to system memory may be incorporated directly into processor .

Network interface may be configured to allow data to be exchanged between computer system and other devices attached to a network e.g. network such as one or more external systems or between nodes of computer system . In various embodiments network may include one or more networks including but not limited to Local Area Networks LANs e.g. an Ethernet or corporate network Wide Area Networks WANs e.g. the Internet wireless data networks some other electronic data network or some combination thereof. In various embodiments network interface may support communication via wired or wireless general data networks such as any suitable type of Ethernet network for example via telecommunications telephony networks such as analog voice networks or digital fiber communications networks via storage area networks such as Fibre Channel SANs or via any other suitable type of network and or protocol.

Input output devices may in some embodiments include one or more display terminals keyboards keypads touchpads scanning devices voice or optical recognition devices or any other devices suitable for entering or accessing data by one or more computer systems . Multiple input output devices may be present in computer system or may be distributed on various nodes of computer system . In some embodiments similar input output devices may be separate from computer system and may interact with one or more nodes of computer system through a wired or wireless connection such as over network interface .

In some embodiments the illustrated computer system may implement any of the methods described above such as the methods illustrated by the flowcharts of . In other embodiments different elements and data may be included.

Those skilled in the art will appreciate that computer system is merely illustrative and is not intended to limit the scope of embodiments. In particular the computer system and devices may include any combination of hardware or software that can perform the indicated functions of various embodiments including computers network devices Internet appliances PDAs wireless phones pagers etc. Computer system may also be connected to other devices that are not illustrated or instead may operate as a stand alone system. In addition the functionality provided by the illustrated components may in some embodiments be combined in fewer components or distributed in additional components. Similarly in some embodiments the functionality of some of the illustrated components may not be provided and or other additional functionality may be available.

Those skilled in the art will also appreciate that while various items are illustrated as being stored in memory or on storage while being used these items or portions of them may be transferred between memory and other storage devices for purposes of memory management and data integrity. Alternatively in other embodiments some or all of the software components may execute in memory on another device and communicate with the illustrated computer system via inter computer communication. Some or all of the system components or data structures may also be stored e.g. as instructions or structured data on a computer accessible medium or a portable article to be read by an appropriate drive various examples of which are described above. In some embodiments instructions stored on a computer accessible medium separate from computer system may be transmitted to computer system via transmission media or signals such as electrical electromagnetic or digital signals conveyed via a communication medium such as a network and or a wireless link. Various embodiments may further include receiving sending or storing instructions and or data implemented in accordance with the foregoing description upon a computer accessible medium or via a communication medium. In general a computer accessible medium may include a storage medium or memory medium such as magnetic or optical media e.g. disk or DVD CD ROM volatile or non volatile media such as RAM e.g. SDRAM DDR RDRAM SRAM etc. ROM etc.

The methods described herein may be implemented in software hardware or a combination thereof in different embodiments. In addition the order of methods may be changed and various elements may be added reordered combined omitted modified etc. All examples described herein are presented in a non limiting manner. Various modifications and changes may be made as would be obvious to a person skilled in the art having benefit of this disclosure. Realizations in accordance with embodiments have been described in the context of particular embodiments. These embodiments are meant to be illustrative and not limiting. Many variations modifications additions and improvements are possible. Accordingly plural instances may be provided for components described herein as a single instance. Boundaries between various components operations and data stores are somewhat arbitrary and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of claims that follow. Finally structures and functionality presented as discrete components in the example configurations may be implemented as a combined structure or component. These and other variations modifications additions and improvements may fall within the scope of embodiments as defined in the claims that follow.

While the foregoing is directed to various embodiments of the invention other and further embodiments may be devised without departing from the basic scope thereof and the scope thereof is determined by the claims that follow.

