---

title: Remotable project
abstract: Aspects of the subject matter described herein relate to remote project access. In aspects, project data for a project that is hosted on a server is provided to a client for use in a development environment of the client. A development environment may be instantiated and configured to allow a user to interact with the project as if the project existed solely on the client. Components on the client and server take care of transferring data and messages to and from the server to ensure that the user experience is seamless.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09116778&OS=09116778&RS=09116778
owner: Microsoft Technology Licensing, LLC
number: 09116778
owner_city: Redmond
owner_country: US
publication_date: 20100429
---
Some server architectures allow an application to execute on a server while allowing users to interact with the applications via an Internet browser custom client side application or the like. For example a server may allow a user to view and or edit a document that physically resides on the server without downloading the document to a client machine. When a document is associated with a macro or some other executable code that a user may want to view or change providing a seamless user experience is problematic.

The subject matter claimed herein is not limited to embodiments that solve any disadvantages or that operate only in environments such as those described above. Rather this background is only provided to illustrate one exemplary technology area where some embodiments described herein may be practiced.

Briefly aspects of the subject matter described herein relate to remote project access. In aspects project data for a project that is hosted on a server is provided to a client for use in a development environment of the client. A development environment may be instantiated and configured to allow a user to interact with the project as if the project existed solely on the client. Components on the client and server take care of transferring data and messages to and from the server to ensure that the user experience is seamless.

This Summary is provided to briefly identify some aspects of the subject matter that is further described below in the Detailed Description. This Summary is not intended to identify key or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

The phrase subject matter described herein refers to subject matter described in the Detailed Description unless the context clearly indicates otherwise. The term aspects is to be read as at least one aspect. Identifying aspects of the subject matter described in the Detailed Description is not intended to identify key or essential features of the claimed subject matter.

The aspects described above and other aspects of the subject matter described herein are illustrated by way of example and not limited in the accompanying figures in which like reference numerals indicate similar elements and in which 

As used herein the term includes and its variants are to be read as open ended terms that mean includes but is not limited to. The term or is to be read as and or unless the context clearly dictates otherwise. The term based on is to be read as based at least in part on. The terms one embodiment and an embodiment are to be read as at least one embodiment. The term another embodiment is to be read as at least one other embodiment. Other definitions explicit and implicit may be included below.

Aspects of the subject matter described herein are operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments or configurations that may be suitable for use with aspects of the subject matter described herein comprise personal computers server computers hand held or laptop devices multiprocessor systems microcontroller based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers personal digital assistants PDAs gaming devices printers appliances including set top media center or other appliances automobile embedded or attached computing devices other mobile devices distributed computing environments that include any of the above systems or devices and the like.

Aspects of the subject matter described herein may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures and so forth which perform particular tasks or implement particular abstract data types. Aspects of the subject matter described herein may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing aspects of the subject matter described herein includes a general purpose computing device in the form of a computer . A computer may include any electronic device that is capable of executing an instruction. Components of the computer may include a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus Peripheral Component Interconnect PCI bus also known as Mezzanine bus Peripheral Component Interconnect Extended PCI X bus Advanced Graphics Port AGP and PCI express PCIe .

The computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by the computer and includes both volatile and nonvolatile media and removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media.

Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile discs DVDs or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer .

Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disc drive that reads from or writes to a removable nonvolatile optical disc such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include magnetic tape cassettes flash memory cards digital versatile discs other optical discs digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disc drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers herein to illustrate that at a minimum they are different copies.

A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner a touch sensitive screen a writing tablet or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB .

A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer may include a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

As mentioned previously when a document hosted on a server is associated with a macro or some other executable code that a user may want to view or change providing a seamless user experience is problematic. is a block diagram that generally represents an exemplary environment in which aspects of the subject matter described herein may be implemented. The environment may include a server a client and other entities not shown .

The server and the client may be implemented on or as one or more computers e.g. the computer as described in conjunction with . Although the terms client and server are sometimes used herein it is to be understood that a client may be implemented on a machine that has hardware and or software that is typically associated with a server and that likewise a server may be implemented on a machine that has hardware and or software that is typically associated with a desktop personal or mobile computer. Furthermore a client may at times act as a server and vice versa. At times two or more entities that more frequently act as a client or server may concurrently be peers servers or clients. In an embodiment a client and server may be implemented on the same physical machine.

Furthermore as used herein each of the terms server and client may refer to one or more physical or virtual entities one or more processes executing on one or more physical or virtual entities and the like. Thus a server may include an actual physical node upon which one or more processes execute a virtual node upon which one or more processes execute a service executing on one or more nodes a group of nodes that together provide a service and the like. A service may include one or more processes executing on one or more physical or virtual entities. Furthermore a single process may implement one or more servers.

The term process and its variants as used herein may include one or more traditional processes threads components libraries objects that perform tasks and the like. A process may be implemented in hardware software or a combination of hardware and software. In an embodiment a process is any mechanism however called capable of or used in performing an action. A process may be distributed over multiple devices or located on a single device.

The server may host project components that may include components for compiling executing validating modifying or otherwise manipulating software projects. Shown within the project components are blocks representing a project . In main memory of the server data structures may be used to represent the project the project folder and the code file . These data structures may be of a form that is readily usable by a program. For example these data structures may include elements that are represented as one or more binary bits in a format suitable for processing by a processor.

On disk data representing the project may reside in one or more project folders . Each project folder may include data regarding one or more items. Items may include for example objects workbooks sheets modules classes document pages user interface objects project properties and settings other items and the like. An item may include code and may be stored in a code file such as the code file .

The client may host a development environment used for software development. In viewing a document on the server a user may indicate that the user wants to view code associated with the document. For example the user may press a button in a window of an Internet browser.

In response to this indication a development environment may be created that allows the user to view edit debug and otherwise interact with code of the document. The development environment may reside on the server the client or one or more other entities not shown or have components on the server and the client . In one embodiment the client may create the development environment by executing one or more processes on the client . In another embodiment the client may view a development environment hosted on another entity e.g. the server via an Internet browser.

In one embodiment the development controller may be responsible for invoking and configuring the development environment. To do this the development controller may contact the proxy and obtain data regarding the project . Using this data the development controller may configure the project to be identical or similar e.g. with changes to file locations system variables and the like to the project . For example the development controller may configure the project to correspond to the project the project folder to correspond to the project folder and the code file to correspond to the code file .

The development controller may create or use one or more folders of a file system of the client and may put data corresponding to the project in the one or more folders. To do this the development controller may create folders on a storage medium of the client and place files and other data in the folders. The folders created on the client may correspond to folders of the project that exist on the server although they may be named differently . Similarly the files and other data in the folders on the client correspond to the files and other data of the project that exist on the server although changes may be made if needed to adapt the data in the files to the environment of the client . The development controller may then launch the development environment and configure the development environment to use the data in the one or more folders.

For settings of a project the development controller may make some changes from corresponding settings in the project . For example the project may refer to certain directories that are specific to the server . In configuring the development environment the development controller may map the directories of the server to directories of the client . Other configuration data that is specific to the server may also be mapped to apply to the client .

In one embodiment the development controller may provide configuration commands to the development environment via an object model e.g. collection of objects or classes exposed by an application programming interface API of the development environment . In another embodiment the development controller may be embedded in the development environment and may be able to more directly configure the development environment e.g. by calling non exposed objects .

In one embodiment the development controller may download all the project data of the project and put the project data in suitable locations on the client before invoking the development environment . In another embodiment the development controller may obtain data from the server on an as needed basis. In this embodiment the development controller may be embedded in the development environment and may intercept or receive certain calls e.g. calls to open files calls to close files calls for additional data and so forth . For example upon receiving a call to open a file in this embodiment the development controller may first retrieve the needed file from the server before allowing the call to proceed to a file system I O component.

In one embodiment the development controller may reside on the client . In another embodiment the development controller may reside on the server or on another entity not shown .

A proxy such as the proxy may be included in the project components . The proxy may be operable to receive requests from the development controller and to act to satisfy such requests appropriately. For example the proxy may receive a request for project data from the development controller may find the requested data and provide the requested data to the development controller.

In one embodiment the proxy may indicate that project or files provided to the development controller is are checked out or otherwise unavailable for editing or changing by other processes until the development controller indicates that the project or files are no longer being used. In another embodiment the proxy may inform the development controller of changes that occur to code of the project on the server and the development controller may update the development environment accordingly or may follow an algorithm for resolving conflicting updates if appropriate.

In addition to receiving and responding to requests from the development controller the proxy may be operable to attempt to communicate with the development controller before allowing pre defined actions to occur on the server with respect to the server software project. For example before allowing changes to the project or code within the project the proxy may communicate with the development controller . As another example the proxy may allow changes if the user does not have a particular code file open on the client but not allow changes if the user does have the code file open.

The examples above are not intended to be all inclusive or exhaustive of all scenarios in which the proxy may be involved before allowing action to occur to a server software project. Indeed based on the teachings herein those skilled in the art may recognize many other scenarios in which it may be appropriate for the proxy to allow or disallow actions to the server software project without departing from the spirit or scope of aspects of the subject matter described herein.

Furthermore to determine when it needs to be involved the proxy may be configured to receive or intercept certain commands generated by one or more components of the project components and to take additional actions with respect to these commands.

The proxy may inform the development controller as to changes in the structure of a document associated with the project. For example a new sheet may be added to a spreadsheet. After a new sheet has been added the proxy may communicate pertinent data regarding the new sheet to the development controller . In response the development controller may configure the development environment to recognize the new sheet. This may allow for example a software developer using the development environment to create code that accesses the new sheet. Furthermore doing this may allow smart editing tools to inform a software developer of the new sheet during editing via autocompletion or similar techniques.

In one embodiment a document on the server that is open on the client may initially not have an associated project. While the document is being viewed in the client a software project for the document may be created. In this embodiment the proxy may send data to the development controller that the development controller can use to create and configure a development environment for the project on the client .

The development controller may send changes that have been made to the project to the proxy at various times. For example when a user saves the project or a portion thereof the development controller may send the saved project or portion thereof to the proxy . As another example when a user attempts to execute code of the project via the development environment or close the development environment this may be a trigger that causes the development controller to send the project data to the proxy . When the proxy receives these changes the proxy may update the project as appropriate.

The apparatus of may host or implement the client of . Turning to the apparatus may include development components a store a communications mechanism and other components not shown . The apparatus may comprise one or more computing devices. Such devices may include for example personal computers server computers hand held or laptop devices multiprocessor systems microcontroller based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers cell phones personal digital assistants PDAs gaming devices printers appliances including set top media center or other appliances automobile embedded or attached computing devices other mobile devices distributed computing environments that include any of the above systems or devices and the like. An exemplary device that may be configured to act as the apparatus comprises the computer of .

The communications mechanism allows the apparatus to communicate with other entities. For example the communications mechanism may allow the apparatus to communicate with a server that host server software projects. The communications mechanism may be a network interface or adapter modem or any other mechanism for establishing communications as described in conjunction with .

The store is any storage media capable of providing access to data associated with software development. Access as used herein may include reading data writing data deleting data updating data a combination including two or more of the above and the like. The store may comprise a file system database volatile memory such as RAM other storage some combination of the above and the like and may be distributed across multiple devices. The store may be external internal or include components that are both internal and external to the apparatus .

The development components may include a development environment a development controller a user interface and other components not shown . As used herein the term component is to be read to include all or a portion of a device a collection of one or more software modules or portions thereof some combination of one or more software modules or portions thereof and one or more devices or portions thereof and the like.

The user interface is operable to receive input indicative of a software project that is hosted on a server. As mentioned previously in one embodiment a user may browse documents on a server via an Internet browser. When the user has found a document to which the user which to make changes to a software project the user may indicate that the user wants to view or edit a software project associated with a document by clicking on a button of the Internet browser which is displayed via the user interface selecting a menu item or otherwise interacting with the Internet browser.

The development environment may be operable to host a client software development project and to provide access to the client software development project via the user interface . The development environment may include an interface by which the development environment may be configured. As mentioned previously this interface may expose a collection of objects classes functions or the like that allow outside entities such as the development controller to configure and control the development environment .

The development controller is operable to establish a communication channel with a server and to obtain project data regarding a software project of the server via the communication channel. The project data indicates a structure and code of the software project. In conjunction with obtaining the project data the development controller is further operable to create a client software project corresponding to the server software project. This client software project may differ from the server software project e.g. different directories different system variables and the like so that the development environment may access the client software project on the apparatus without having to be aware of the layout of the software project on the server. In conjunction with creating a client software project the development controller may be further operable to configure the development environment via the interface to access the client software project.

The development controller may operate to provide the server with data indicative of updates made to the client software project. This may occur upon certain events e.g. a request from the server for any updates a user closing the development environment a user clicking on a save button of the development environment a user clicking on an execute button of the development environment other events and the like as previously mentioned.

The development controller may further operate to receive data indicative of a change made to a structure of a document associated with the server software project and to configure the development environment to recognize the change. For example a new sheet may be added to a spreadsheet associated with the server software project. As another example another section may be added to a word processing document associated with the server software project. After the development controller has configured the development environment to recognize the change to the document the development environment may better assist the user in software development. For example the development environment may assist in autocompletion activities e.g. suggesting object method or other names within the development environment. As another example the development environment may be able to determine whether the code references an existing object of the document and may flag errors as appropriate.

If the user clicks on or otherwise activates an execution control of the development environment to execute code associated with the project the development controller may provide any updates to the client project to the server and send the server an instruction to execute code of the server software project.

Although the development controller is illustrated as being separate from the development environment in another environment the development controller may be a part of the development environment. In this embodiment the development controller may not need to use the interface to configure or control the development environment .

At block a communication channel is established with the server . For example referring to the development controller establishes a network connection with the proxy of the server .

At block project data is obtained from the server. The project data indicates structure and code of the server software project. This structure and code of the server software project may be used to create a client software project corresponding to the server software project. For example referring to the development controller obtains project data about the project from the proxy .

At block a client software project corresponding to the server software project is created on the client. In one embodiment this software project may be created using data structures that exist solely in main memory on the client. In another embodiment this software project may be created using data structures in main memory and or on disk. For example referring to the development controller may create the client software project on the client .

At block the development environment is configured as appropriate to access the client software project. For example referring to the development environment is configured to access the client software project . In one embodiment configuring the development environment to access the client software project may simply involve indicating a location of a project file on a storage medium of the client. For example this may be done by passing one or more parameters when invoking the development environment. In another embodiment this may involve launching the development environment and configuring the development environment using a programming interface to the development environment.

At block other actions if any may be performed. Some of the other actions that may occur are illustrated in . Turning to blocks indicate actions that may occur when the document structure on the server changes. For example at block these actions begin. At block the client receives data indicating a change made to a structure of the document. For example a sheet may be added to a worksheet of the server. At block the development environment is configured to recognize the change. At block other actions if any may be performed.

Blocks indicate actions that may occur when events occur on the client. For example at block these actions begin. At block the development environment of the client may receive a command such as a command to save the project or a portion thereof a command to close the project a command to execute code of the project and the like. In response at block the client may send data indicative of changes made in the development environment to the server. At block other actions if any may be performed.

Blocks indicate actions that may occur when changes occur to the server software project. For example at block these actions begin. At block the client receives data indicating a change made to the server software project. For example code or objects may be changed added or deleted settings may be changed or the like. At block the client software project and the development environment may be configured in accordance with the change. At block other actions if any may be performed.

At block a request to access a server software project is received. For example referring to the server may receive a request to access the server software project .

At block a communication channel may be established with a development controller of the client. For example referring to a communication channel may be established between the proxy and the development controller .

At bock data regarding the project is provided to the development controller via the communication channel. This data indicates structure and code of the server software project for use in creating the client software project and configuring the development environment on the client.

At block other actions if any may be performed. Some of the other actions that may occur are illustrated in . Turning to blocks indicate actions that may occur when the document structure on the server changes. For example at block these actions may begin. At block the proxy on the server may determine that the structure of a document is changed. For example a sheet may be added to a spreadsheet. In response at block the proxy may send data indicating the change to a development controller of the client. At block other actions if any may be performed.

Blocks indicate actions that may occur in response to events that occur on the server. At block the actions begin. At block a server command is obtained. If the server command is one for which an updated copy of the project is needed at block the proxy checks with the client to determine whether any changes have been made on the client. At block other actions if any may be performed. For example if changes have been made on the client the proxy may obtain the changes from the development controller and update the server software project with the changes.

Blocks indicate actions that may occur in response to messages from the client. At block the actions begin. At block a change to the project is received from the client. In response at block the proxy may update the server software project in accordance with the change. If the server receives a message that indicates that the client has or is closing the project the proxy may remove a lock or change access rights to allow changes or other actions to be taken with respect to the server project. At block other actions if any may be performed.

The actions indicated in are not intended to be all inclusive or exhaustive of other actions that may be taken at the server or client. Based on the teachings herein those skilled in the art may recognize other actions that may occur on the server or client without departing from the spirit or scope of aspects of the subject matter described herein.

As can be seen from the foregoing detailed description aspects have been described related to remote project access. While aspects of the subject matter described herein are susceptible to various modifications and alternative constructions certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood however that there is no intention to limit aspects of the claimed subject matter to the specific forms disclosed but on the contrary the intention is to cover all modifications alternative constructions and equivalents falling within the spirit and scope of various aspects of the subject matter described herein.

