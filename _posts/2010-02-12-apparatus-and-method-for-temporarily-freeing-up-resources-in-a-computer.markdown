---

title: Apparatus and method for temporarily freeing up resources in a computer
abstract: Apparatus for data processing includes a processor, memory and storage. A plurality of sets of instructions, each corresponding to one of a plurality of programs, is stored in the storage. The processor is configured to load the sets of instructions from the storage into the memory, identify a first program as nonessential, close the first program and remove its corresponding set of instructions from the memory, and reload the set of instructions corresponding to the first program into the memory from the storage.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08495637&OS=08495637&RS=08495637
owner: Gzero Limited
number: 08495637
owner_city: Mansfield Woodhouse
owner_country: GB
publication_date: 20100212
---
This application claims priority from United Kingdom Patent Application No. 09 02 288.0 filed 12 Feb. 2009 the whole contents of which are incorporated herein by reference in their entirety.

Computers of various types including PCs laptops notebooks and tablets from various manufacturers generally allow a user to multitask by opening several applications and running processes and services in the background. Many of these particularly the services take up system memory and prevent the fast running of the computer when using a memory intensive application such as an online game or video editing software. It is possible for the user to close some of these processes and services but without detailed knowledge of the operating system and applications that are running the user may close down essential programs. Further once the user has finished with the memory intensive task it is difficult to restart the closed programs. Usually a reboot of the computer is necessary to reinstate it to its earlier condition.

According to a first aspect of the present invention there is provided apparatus for data processing comprising a processor memory and storage wherein a plurality of sets of instructions each corresponding to one of a plurality of programs is stored in said storage and said processor is configured to load said sets of instructions from said storage into said memory receive a first command to close non essential programs identify a first program as non essential close said first program and remove its corresponding set of instructions from said memory receive a second command to re open non essential programs and reload the set of instructions corresponding to said first program into said memory from said to storage.

According to a second aspect of the present invention there is provided apparatus for data processing comprising a processor memory storage and a network connection wherein a plurality of sets of instructions each corresponding to one of a plurality of programs is stored in said storage and said processor is configured to load said sets of instructions from said storage into said memory communicate with a remote server via said network connection to obtain an indication of non essential programs receive a first command to close non essential programs identify a first program as non essential close said first program and remove its corresponding set of instructions from said memory receive a second command to re open non essential programs and reload the set of instructions corresponding to said first program into said memory from said storage.

According to a third aspect of the present invention there is provided a method of temporarily freeing up resources in a computer comprising the steps of loading a plurality of sets of instructions from storage into memory thereby starting a plurality of corresponding programs receiving a command to close non essential programs identifying a first program as nonessential closing said first program and removing its corresponding set of instructions from memory receiving a second command to re open non essential programs and reloading the set of instructions corresponding to said first program into memory from storage.

According to a fourth aspect of the invention there is provided a computer readable medium having computer readable instructions executable by a computer such that when executing said instructions a computer will perform the steps of storing a plurality of sets of instructions each corresponding to one of a plurality of programs loading said sets of instructions from storage into memory receiving a first command to close non essential programs identifying a first program as non essential closing said first program and removing its corresponding set of instructions from said memory receiving a second command to re open non essential programs and reloading the set of instructions corresponding to said first program into memory from storage.

According to a fifth aspect of the present invention there is provided apparatus for data processing comprising a processor memory storage and a display wherein a plurality of sets of instructions each corresponding to one of a plurality of programs is stored in said storage and each set of instructions may be loaded into memory in order to create a running program and said processor is configured to identify how many programs are running and thereby calculate a first variable identify how many of said running programs are non essential and thereby calculate a second variable calculate an efficiency indication in dependence upon said first and second variables and display said efficiency indication on said display.

The Internet connects various computer systems and networks around the world. Several ways of connecting are shown in . Internet Service Provider ISP is connected to computers and . Computer is wirelessly connected on an ad hoc basis to computer . ISP connects server to the Internet . Server is part of a wired LAN which connects computers and . In addition computer is wirelessly connected to server via a wireless access point . Web server connects directly to the internet and provides a LAN that connects computers and . Computers and are connected to the internet via ISP while computers and are connected via wireless modem router which is also connected to the internet via ISP .

In addition a network comprising three remote servers and and a database server are connected to Internet .

Other methods of connecting computer systems such as servers personal computers and laptops to the internet both wired and wirelessly are possible.

Instructions controlling the processing system may be installed from a physical medium such as a CD ROM disk or over a network via network cable . These instructions enable the processing system to interpret user commands from the keyboard and the mouse such that data may be viewed edited and processed.

Other computers shown in and other computers suitable for use with the invention also have some form of processing system display means of connecting to and communicating with a network and means of providing manual input although they may not be as shown in .

The processing system shown in is detailed in . The processing system comprises two central processing units CPUs and operating in parallel. Each of these CPUs and has a dedicated secondary cache memory and that facilitates per CPU storage of frequently used instructions and data. Each CPU and further includes separate primary instruction and data cache memory circuits on the same chip thereby facilitating a further level of processing improvement. A memory controller provides a common connection between the CPUs and and main memory . The main memory comprises two gigabytes of dynamic RAM.

The memory controller further facilitates connectivity between the aforementioned components of the processing system and a high bandwidth non blocking crossbar switch . The switch makes it possible to provide a direct high capacity connection between any of several attached circuits. These include a graphics card . The graphics card generally receives instructions from the CPUs and to perform various types of graphical image rendering processes resulting in images clips and scenes being rendered in real time on the monitor .

A second SCSI bridge facilitates connection between the crossbar switch and a DVD CD ROM drive . The CD ROM drive provides a convenient way of receiving large quantities of instructions and data and is typically used to install instructions for the processing system onto a hard disk drive . Once installed instructions located on the hard disk drive may be loaded into main memory and then executed by the CPUs and . An input output bridge provides an interface for the mouse and the keyboard through which the user is able to provide instructions to the processing system . A network communication means is provided by an Ethernet card . However other network connections may be used which may use wired wireless or telephonic methods or some other methods of communication.

Other types of processing systems that include some form of processor memory and storage could be used. Alternatively computers having different processing systems but including a processor memory and storage would also be suitable for example the storage or the memory could be external to the processing system.

A computer such as computer may be used for a variety of purposes. In order to run software applications that the user can interact with the computer runs tasks such as processes and services. Each task uses up resources such as memory CPU clock cycle time hard drive storage space network bandwidth and so on. Some software applications such as word processing playing simple non networked games or viewing photographs do not use a large amount of resources. Others such as playing music editing images and browsing the Internet use a larger amount of resources. Applications that are very resource intensive include online role playing games video editing rendering animations and so on.

Each application is started by an executable file called a process. In addition many processes and services run in the background and are not obvious to the user. At any one time a large number of tasks may be running.

Instructions for most programs carried out by computer including the operating system services and processes are stored on hard drive . When a program is started the relevant instructions are copied into main memory so that they can be accessed by the CPUs and . This is known as loading to memory. Generally not all the instructions or data are loaded at first only those that are immediately required. As the program is carried out other instructions and data may be loaded into memory and some may be removed.

Some service instructions are loaded as soon as the operating system has initialised and others are loaded later or never. Services are programs that run transparently to a user and do not require user intervention. They may be associated with the operating system with an application or standalone. For example the operating system runs services that manage memory perform networking tasks allow the installation of new programs and so on.

Processes are programs that may require user intervention and therefore have a user interface of some kind. Some are run by the operating system but many processes are associated with applications. Therefore process instructions may be loaded into memory at startup when a user starts an application when an application starts an extra process or at some other time. For example a music playing application may have several processes in addition to the process that actually starts the application there may be an update scheduler service and a device detector service that are loaded at startup and run all the time plus a process that runs in the background while the application is running to monitor the contents of the hard drive.

The division between processes and services can be arbitrary and therefore the word tasks is used herein to cover both processes and services. Some operating systems do not make the distinction and some may make use of a further type of task. Therefore for the purposes of this document the term program is used defined as a piece of software that has an executable file or set of instructions which can be loaded into memory and removed from memory and which can be executed by a processor.

Much of hard drive is taken up by data which is stored by the user in the form of files or stored transparently by the operating system or processes. A certain amount of space which can be altered by the operating system or by the user is set aside for virtual memory . The remaining hard drive space is free space .

Memory therefore includes operating system loaded from operating system instructions services loaded from services instructions and processes loaded from processes instructions . In particular the process running efficiency boost application is loaded at the startup of computer in order to be available to boost the efficiency of the computer at any time.

Memory also includes data for immediate access including data required by operating system data required by services data required by processes including data required by efficiency application and other data . When a program is stopped its instructions and data are purged from memory . If data has not been saved to hard drive first it is lost.

Thus in order to free up resources including memory processes and services must be stopped so that their instructions and data are removed from memory . The user can do this manually but often a user is not knowledgeable enough to remove every program that can be removed. Operating systems generally have a large number of background services some of which are essential for the functioning of the operating system some of which are non essential and some of which are dependent upon the state of the computer for example a firewall is only essential if a computer is networked. Some programs need never run while some should only be stopped temporarily. While it is easy to close applications only a very experienced user should stop other programs.

Data required by efficiency application includes a local boost table . This is a list of programs that are or have been running on computer together with an indication of whether they are essential or non essential. Table is used by efficiency application to choose programs to stop when the user requests an efficiency boost.

Further when the user has finished a memory intensive application he may wish for all the stopped programs to be turned back on again. They may have been non essential but they may have a purpose. For example the user might stop a scheduler in order to stop it running during the memory intensive task but he will want it to run at another time. Therefore to restore the computer to the way it was before all the programs were stopped the user would have to restart the computer and restart the required programs. Efficiency application upon the user s request restarts all the stopped programs.

In addition many computers experience problems with spyware and malware that can take up a large amount of memory. Anti virus software is not always effective in removing these. It would be preferable if once these programs were stopped they were not restarted. Efficiency application can alert the user that certain programs should not be restarted and seek input before restarting them.

The speed and efficiency of computer is dependent upon the usage of several resources in particular CPU clock time available memory available network bandwidth and hard drive space.

CPUs and can perform a set number of operations per second. A faster processor can perform more operations per second. Each CPU cycles through its allocated programs performing one or more operation at a time from each program. Therefore if too many programs are running all of them are slowed not just the last one to be started.

Many programs access the internet such as application updates background download managers and viral software. If the user wishes to use an application that needs to access the internet quickly then another program that is taking up a lot of network bandwidth can cause slowness.

The amount of available memory greatly affects computer efficiency. The memory available to CPUs and includes first their own caches and respectively then RAM and finally virtual memory on hard drive . Instructions and data required for a task that is being currently used are kept in RAM . Instructions and data likely to be needed soon by a CPU are pre emptively loaded into the corresponding cache. When RAM starts to fill up instructions and data for tasks that have not been used in a while are written to virtual memory . When one of these tasks is switched to those instructions and data are written back to RAM in order that they can be accessed quickly. This can be efficient if the RAM is large enough but constant swapping of data between RAM and virtual memory takes up a lot of CPU time. Also if the hard drive is being accessed by another program this swapping takes longer.

If the amount of memory needed by the processes and services running on the processing system approaches the total available memory then the computer will run noticeably slower possibly seizing up altogether. Many operating systems will automatically increase the amount of virtual memory when this occurs but this does not solve the problem if there is not enough RAM for all the running programs.

The use of resources by unnecessary tasks both constantly and at unexpected times can be an annoyance to a user. For example the user of computer is playing a game over the Internet with the user of computer in which each user controls a character and the characters are fighting. The user of computer provides manual input indicating movement of his character. This movement is provided to computer . If computer does not display this movement fast enough then the user of computer may lose the game. This can be extremely frustrating and even a computer that has a large amount of RAM can suffer from this problem. For example a computer may be running at a speed acceptable to the user and then a background service such as a scheduled update starts using up CPU clock time memory and network bandwidth and also writing to the hard drive thus instantly slowing the computer.

A user may also find the over consumption of resources frustrating when using other resource intensive programs such as rendering or video editing. However a user may simply wish to speed the computer up for day to day operation.

Efficiency application addresses these issues. When the user of computer wishes to boost the efficiency of the computer by removing non essential programs from memory he can request efficiency application to perform an efficiency boost.

When application starts up it may operate as a standalone application even if computer is offline. In this case the application runs in the background until the user requests an efficiency boost at which point the current boost table is accessed to indicate the list of programs to close down.

Alternatively it communicates with one of remote servers or shown in this example as server and sends a logon request. Server approves the logon and sends updates and settings back to computer . This includes updating the boost list as follows.

Application sends a boost list request to server which includes a list of programs running on computer that are not already listed in boost table . The first time this runs the boost table will be empty and all running programs will be included in the request.

Server then sends a data request to database server . Database server queries a programs database held in its storage and returns a boost list to remote server . This lists those of the queried programs that are considered to be non essential. It also lists programs for which a status has already been provided to computer but whose status has changed. Server sends this as boost list to computer and application then uses this list to update local boost table . The application then runs in the background until the user requests an efficiency boost at which point the updated boost table is accessed to indicate the list of programs to close down.

Thus database load and network traffic is minimised since computer only enquires once about each program it runs. Also computer is able to run efficiency application when offline.

In alternative embodiments a locally held boost table may simply list a large number of programs any of which may or may not be running on computer along with a status of essential or non essential. Server would periodically query database server and send an updated list to all networked computers which would either replace the local boost tables or be used to update them. This is not a preferred embodiment however as each local boost table would be large and keeping them up to date would generate a large amount of database load and network traffic.

The user may at any time subsequent to an efficiency boost request application to restore the computer and application will then restart the stopped programs. Application can flag to the user that one or more of the stopped programs is known to be a malicious program such as spyware and ask whether it should be restarted.

Programs database includes a list of services and a list of processes. For each program an indication of operating system and a status tag is included. The status tag indicates whether the program should be stopped should not generally be stopped or should never be stopped. Thus it indicates whether programs are non essential or not. Other information may also be stored for example whether a program is considered to be malicious. This information may be included in the boost list .

Programs database may be populated manually or automatically. Generally a decision needs to be made by a knowledgeable person as to the status of a program but it is possible that the task could be automated.

Remote server like servers and runs a service that sets up and maintains sessions for each logged on computer. This provides a barrier between the database server and the user computers. Several remote servers can access a single database server but database server could be duplicated as many times as necessary.

Logon request may be a logon as a guest or as a named user. A named user can have settings stored in user database on database server in which case remote server queries that server before returning the logon approval . User settings may include user details such as name and address a list of programs that the user has indicated should be stopped or not stopped regardless of the boost list the fact that a user has subscribed and no longer sees adverts and so on. In this embodiment these user settings are saved on database rather than on the user s machines. This is so that if the user replaces his computer or has to reformat the computer due to a catastrophic error the settings are not lost.

User database includes a query history for each user. This history records for each user the programs that have been the subject of boost list requests. This allows local boost tables to be updated when an already queried program has its status changed. The user database may also include information regarding which programs are running at any time on networked computers. This information may need to be collected anonymously and would be submitted to database server along with data request .

Display of computer is illustrated in . The user interface of operating system is shown including a taskbar that includes applications icons representing running applications and processes icons representing background processes that are running. Typically the process for efficiency application is loaded into memory at start up of computer allowing the logon process to take place before the user needs the application. This is particularly useful if the application needs to be updated. Process icon is then displayed. When the user wishes to use application he switches to it by clicking on icon .

Alternatively the process for efficiency application may not be loaded until the user so requests by issuing a command to run the application for example by clicking on an icon on the desktop or in a menu. In this case the logon screen is displayed at this stage. In either case once the user is logged on and indicates that he wishes to use efficiency application computer displays user interface of application .

Interface includes a button labelled BOOST CPU counter memory counter services counter processes counter resources gauge and a button labelled ADVANCED . In its simplest form available to users logged on to a remote server as a guest counters to gauge and button are greyed out leaving only button available. Clicking on button will cause application to obtain a list of non essential programs and stop them after which the text of button changes to RESTORE . At this point clicking on button will cause application to restart the stopped tasks.

A registered user has full functionality including counters to gauge and button . Counters to give a numerical indication of respectively the CPU usage the memory usage the number of running services and the number of running processes. Gauge combines some or all of this information to provide an efficiency indication ie an overall indication of how effective the efficiency boost has been.

Interface further includes banner section that is used to display an advertisement. Optionally a user may choose to subscribe to the service in order to remove advertisements.

If a registered user clicks on button marked ADVANCED then section of interface drops down allowing the user more control over the efficiency application. This section contains a number of buttons such as buttons and labelled antivirus spyware malware instant messengers music players and themes respectively. Using these buttons the user may specify that certain categories of task should not be stopped in order to boost the resources of the computer. Therefore if the user wishes to prevent the efficiency application from stopping antivirus software for example he depresses button . The state of the buttons is persistent. By moving scroll bar the user can access more buttons.

These advanced settings are only available in this embodiment if the user logs on as a named user since user settings are saved remotely in database . However in other embodiments settings could be saved locally allowing a user to log on as a guest and still use the advanced settings. Alternatively a guest user would be permitted to access the settings but they would not be saved for the next use of the application.

Information stored about registered users in users database may be used to select advertisements for banner section to which they are more likely to respond.

Other embodiments of interface may contain other buttons and displays and in other embodiments unregistered users could access some or all of the functions.

Steps carried out by processing system of computer are detailed in . Each computer shown in and others suitable for the invention will follow a similar procedure.

At step the computer is switched on and at step the operating system is loaded into memory. Various operating systems are available some more suitable for certain computing devices than others and it is envisaged that the invention will be suitable for any of them. At step processes and services that are set up to start with the operating system are loaded into memory. For each one the operating system finds the executable file on hard drive loads it into memory and executes at least the first line of the file. Subsequently the executable file takes over.

At step efficiency application is downloaded from the internet if it is not already installed on computer and at step its process is loaded into memory as will be detailed further in .

At step the processing system performs operations in response to user input including background processes and services that keep the computer working. At step the user requests an efficiency boost by switching to efficiency application and pressing button . At step an efficiency boost is performed as will be described with reference to . The processing system then continues to operate in response to user input at step . However fewer background processes and services will be running enabling the user s chosen programs to run more quickly and fluidly with more of the computer s resources available.

At step the user requests a restore by switching to efficiency application and pressing button . Efficiency application then reloads stopped programs into memory as will be detailed further with respect to . The processing system then continues to perform tasks in response to user input at step . The original number of background processes and services will be running meaning that the computer is running in its original state.

At step the computer is shut down by the user entailing unloading all processes and services and finally unloading the operating system.

Alternatively if the question asked at step is answered in the affirmative indicating that the computer is online and the user wishes the efficiency application to work online then at step the operating system run by the computer is noted and at step a logon screen is displayed to the user. At step a logon request is sent to a service hosted by one of remote servers or . The request includes input received from the user which may be a username and password or may be a request to log on as a guest the version number of the efficiency application running and an indication of the operating system.

At step a question is asked as to whether the logon was successful ie whether a logon approval was received. If this question is answered in the negative then control is returned to step and the logon screen is redisplayed. Procedures are available at this stage for registering a user reminding a user of a lost password and other similar tasks.

If the question asked at step is answered in the affirmative to the effect that logon has been completed then at step user settings and updates are received from the remote server and implemented. Typically an update may comprise a newer version of the application if there is one available for the indicated operating system. Installing a new version may necessitate restarting the application at step but in this case logon details are not re requested. At step the local boost table is updated as will be described further with respect to .

At step icon is added to section of taskbar and the efficiency application is ready to use whenever the user requires it.

Step at which boost table is updated is detailed in . At step list of all processes and services that are running is obtained by interrogating operating system data and at step this list is compared with boost table to determine whether any running programs are not listed in boost table . If so these are identified as unknown programs. At step a boost list request is sent to the remote server with which the application is logged on. This request includes an indication of the operating system and a list of any unknown programs identified at step .

At step a boost list is received from the remote server. The procedure by which the remote server obtains this list is discussed with respect to . This comprises a list of updates to be made to boost table . If any unknown programs were sent with the boost list request then a status of essential or non essential is provided for each one unless it is unknown to database server in which case no status is provided. In addition updates may be provided to the status of one or more programs already listed in boost table . For each program further information may be provided and stored in boost table .

Thus at the end of this step computer holds an up to date list of all running programs with each marked either as boostable non essential or non boostable essential . In alternative embodiments the boost table may comprise for example only non essential programs rather than both essential and non essential programs.

It is also possible for the above steps carried out in this embodiment immediately following logon to be carried out when the user requests an efficiency boost. However this might slow down the boost process.

Alternative methods of keeping boost table up to date are envisaged. For example the boost request could include a list of all the programs running on computer and the boost list could include only non essential programs that are actually running allowing the boost table to be updated. However the described embodiment puts least strain on the database servers by using the simplest query.

In alternative embodiments no local boost table is kept. In these embodiments a computer must obtain a new boost list from a networked server every time the efficiency application is run. This could be done for example by requesting the database s entire list of programs by sending a list of running programs that can be used to query the database and returned with each program marked as boostable or non boostable or by some other means. This type of embodiment has the advantage of ensuring the security of the boost list since no local copy is kept to be corrupted or copied but increases database load and network traffic.

Step at which an efficiency boost is performed is detailed in . At step the user is warned that data loss may occur through use of the efficiency application. Generally processes belonging to applications are considered non essential. If the user does not save any data being worked on then it will be lost. However the user does not need to actually close the applications.

At step boost table is accessed to determine a list of boostable programs. This is obtained by listing all the programs that are marked in boost table as boostable. At step changes are made to the list as specified in the user settings. For example as described in the user may have indicated that programs relating to anti virus software are not to be closed.

At step the programs on the amended boost list are removed from memory as will be detailed further in and at step a log of errors if any is sent to the remote server. This log includes for example any programs that could not be closed and it may be of use to system administrators.

it is envisaged that a user may save a user preference indicating that computer is to boost at boot time. In this alternative embodiment efficiency application would run early in the boot process and prevent non essential programs from loading which would considerably speed up boot time. The user might then restore the computer to a non boosted state at any time after boot. This embodiment would take account of saved settings regarding which types of programs are to be boosted. For example the user may wish to retain wireless network card drivers and desktop themes while preventing other non essential programs from running.

It is further envisaged that the desktop displayed by the operating system for example explorer.exe run by Windows could be considered a non essential program. During the boost a different and more suitable desktop would be loaded. For example if the user is primarily a gamer then a desktop that resembles the display of a gaming console could be loaded allowing the user to choose games to play in a more familiar environment When computer was restored the operating system s desktop would be redisplayed.

If the question asked at step is answered in the affirmative to the effect that the program is running then at step the location of the instructions for the program ie the executable file is identified and logged in boost table .

At step a CLOSE command is sent to the program. In many cases this will cause the program to close itself. It will purge its data from memory possibly including saving it to hard drive close other programs that it has started and eventually close itself. However it does not always work particularly if a process is awaiting user input or has crashed. A question is therefore asked at step after a suitable delay as to whether the program has closed and if not a KILL command is sent at step which should take the matter out of the hands of the program and cause the operating system to shut it down removing it and its data from memory. Thus at step a question is asked after a suitable delay as to whether the program has closed and if not an error is logged at step in efficiency application data .

At this stage or if the CLOSE or KILL commands were successful or following an indication at step that the program is not running interface is updated at step if appropriate. This involves changing the values in counters to and gauge as will be further described with respect to .

At step a question is asked as to whether there is another program to close and if this question is answered in the affirmative then Control is then returned to step and the next program is selected. Alternatively if the question asked at step is answered in the negative then all the boostable programs that are running have been closed and step is completed.

Thus at the end of step all non essential programs and their data have been removed from memory. Optionally efficiency application may then monitor the usage of computer and send information back to remote server indicating the applications that are running on computer while the computer is boosted. This information can be useful to the administrators of the system for example to tailor the application to users of particular types of programs or to target advertising in banner section to a particular user.

Different operating systems have different commands for closing programs and therefore the CLOSE and KILL commands may be replaced by one or more other commands. In this embodiment the CLOSE command is preferred initially because it allows a program to close itself and may not result in a loss of data. KILL is less tidy and may well lose data.

The steps shown in this figure may more efficiently be carried out by several threads running in parallel given the requirement to wait and check if a program has closed.

During the boost process at step user interface is updated to reflect changes to the resource usage of computer . This also occurs during the restore process as will be described with respect to . Counters to indicating CPU usage the memory usage the number of running services and the number of running processes respectively are updated using information available from the operating system .

In addition gauge is updated to display the new efficiency indication and this is illustrated in . When user interface is first displayed and while computer is restored to its original state by carrying out the steps shown in an efficiency indication is obtained by carrying out a pre boost calculation . While a boost is taking place by carrying out the steps shown in an efficiency indication is obtained by carrying out a post boost calculation . Calculation is carried out each time a boostable program is closed and thus the needle can be seen to move during the boost process. Similarly calculation is carried out each time a program is reopened and thus the needle can be seen to move during the restore process. Alternatively each calculation could be carried out only once at the end of the boost and restore processes respectively.

Gauge in this example runs from 0 to 100 indicating a percentage boost level. Needle indicates the result of the post boost calculation while a greyed out needle indicates the results of a previously carried out pre boost calculation .

Pre boost calculation is defined as the sum of the number of running boostable programs as given by the number of programs on the list of bootable programs obtained at step and the number of unknown running programs divided by the total number of running programs all subtracted from one. For example suppose 100 programs are running. 58 of them are on the list of boostable programs while two of them are not listed in boost table . The result of pre boost calculation is therefore 1 58 2 100 0.4. This is displayed as an efficiency indication of 40 on gauge indicating that 60 of the programs running on computer are non essential.

Post boost calculation is defined as the sum of the number of programs on the list of boostable programs that did not not successfully close and the number of unknown running programs divided by the total number of running programs all subtracted from one. Following on from the example above suppose 57 of the 58 boostable programs are successfully closed. The final result of post boost calculation is therefore 1 1 2 100 0.97. This is displayed as an efficiency indication of 97 on gauge indicating that after the efficiency boost only 3 of the programs running on computer are non essential.

Thus if all the boostable programs are successfully closed and there are no unknown programs running gauge will display an efficiency indication of 100 following an efficiency boost indicating that no non essential programs are running on computer .

As is clear from the equations shown in unidentified programs are effectively included in the calculation as un closeable non essential programs. This is in order not to overstate the achievement of efficiency application to the user However they could equally be included as essential programs meaning that even when unidentified programs are running successful closure of all boostable programs would result in gauge showing 100 .

Other equations for measuring the efficiency boost are possible. The method described here only considers the number of running programs. However it would also be possible to weight the sum of programs by the amount of resources that each program is using such as memory and CPU.

Step at which stopped programs are restarted is detailed in . At step boost table containing the locations of all stopped programs is accessed to create a list of restorable programs and at step the first program in the list is selected. At step a question is asked as to whether this program is already running. The program may have been started by another program so if this question is answered in the negative control is forwarded to step for selection of the next entry.

If the question is answered in the negative then at step a question is asked as to whether the list contains a warning for this program. This is a piece of information in the boost table obtained with a boost list from database server indicating that the program may be malicious. If this question is answered in the affirmative then at step user input is requested as to whether the program should be restarted. If the user gives an answer in the negative the interface is updated at step and control is forwarded to step for selection of the next entry. The user may also be alerted to the existence of suitable antivirus or anti adware applications that can be obtained for free or purchased.

However if this question is answered in the affirmative or if there is no warning for this program then at step the program is loaded into memory from the indicated location. A question is then asked at step as to whether there is another program in the list and if so control is returned to step and the next entry is selected. Alternatively all programs have been reopened and step is completed.

At step logon request is received from a computer such as computer . At step a question is asked as to whether the logon details are valid. This step may comprise obtaining user details from database . If this question is answered in the negative an error is returned and the process is stopped at step . Another logon request may be received from the same computer but it will be handled by a new instance of the thread. If the logon details are valid including the case where the user is a guest and no password is required then at step a session is created.

At step personal settings if any are obtained from user database and sent to computer . At step a question is asked as to whether the version number indicated by computer is the latest version of the application for the indicated operating system and if this question is answered in the negative the latest version is sent at step .

At step a boost list request is received. At step a data request is sent to database server . Database server produces a boost list which server receives at step and sends as boost list to computer at step . The computer then uses this to update the local boost table as detailed in the previous figures.

As previously described the boost list request may include programs that are running on computer but do not appear on that computer s local boost table . Thus the data request comprises a request for the status of the listed programs and any further information on them that may be available and relevant. For example a program may be considered malicious. Data request also includes an identification of the user.

If a boost list request includes a program that is not listed in database it is reported to system administrators and will be added to the database. If a large number of computers report a new program in a short space of time it is possible that that program may be malicious such as viral software or malware. It is therefore possible that the invention herein described may provide an early warning of malicious programs.

Data request additionally prompts a query to be run on user database to check whether any flags have been set for program status changes. Periodically the status of a program may be changed from essential to non essential or vice versa. A query can then be run to flag any users that have ever requested the status of that program. When the user next sends a boost request the updated status of the program can be returned in a boost list and the flag removed.

Thus if efficiency application does not identify any unknown programs an empty boost list request is sent to server and a data request is still sent to database server in case any status updates need to be returned.

At step a log of errors may be received indicating for example programs that were hard to close. Programs running on a computer that are not in database can therefore be flagged to administrators. This enables administrators to keep the programs database up to date.

If another boost list request is received steps to are repeated. Alternatively at step a logoff request is received and at step the session is closed. A session may also be closed after a set period of time known as a timeout.

