---

title: Systems and methods for providing a client-side application programming interface to access a networked telecommunication resource
abstract: The present application is directed towards systems and methods for interfacing a network-agnostic application to a networked telecommunication resource. An agent executing on a client receives a request from an application in the form of an API function call and establishes a connection to a networked telecommunications resource. The agent handles network processing of the request, a response or responses, and asynchronous events, and translates them into corresponding API callbacks for use by the application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08473967&OS=08473967&RS=08473967
owner: Positron Telecommunication Systems
number: 08473967
owner_city: Montreal
owner_country: CA
publication_date: 20100430
---
The present application generally relates to telecommunications networks. In particular the present application relates to systems and methods for interfacing a network agnostic application to a networked telecommunication resource.

Business and Personal communications are diversifying away from the traditional phone to phone call model and are instead being replaced by multi user communications such as conference calls video conference calls fax being delivered by email voice being communicated over Session Initiation Protocol SIP or Voice over Internet Protocol VoIP and other new tools. While these different technologies and applications all converge on the user s PC the systems used to deliver and control these applications are different. There have been no simple and standard systems that application developers may use to create an application which will unite the command control and communication over a single API interface.

The present application is directed towards systems and methods for interfacing a network agnostic application to a networked telecommunication resource. An agent executing on a client receives a request from an application in the form of an API function call and establishes a connection to a networked telecommunications resource. The agent handles network processing of the request a response or responses and asynchronous events and translates them into corresponding API callbacks for use by the application.

In one aspect the present application features a method for providing a client side application programming interface to access a networked telecommunication resource. The method includes an agent executing on a client device receiving via a local application interface call from a client application a request to perform a function via a telecommunication resource. The method also includes the client agent establishing a transport layer connection via a network to the remote device identified by the agent as providing the telecommunication resource. The method further includes the client agent generating an application message corresponding to the local application interface call. The method also includes the client agent transmitting the application message over the transport layer connection via the network to the remote device. The method also includes the client agent receiving a response to the application message via the network from the telecommunication resource of the remote device. The method further includes the client agent returning a result to the local application interface call based on the response.

In some embodiments the method includes the client agent receiving a local API call from a client application that is not network aware. In other embodiments the method includes the client agent determining a network identifier for the telecommunication resource identified by the local application interface call.

In some embodiments the method includes the client agent generating for the application message an ASCII message from parameters of the local API call. In other embodiments the method includes the client agent encrypting the application message.

In one embodiment the method includes the client agent transmitting the application message via a telecommunications protocol over the transport layer connection to the remote device. In another embodiment the method includes the client agent parsing an application layer payload of the response to extract parameters. In still another embodiment the method includes the client agent decompressing an application layer payload of the response.

In some embodiments the method includes the client agent determining from content of an application layer payload of the response the result to return to the local API call. In other embodiments the method includes the client agent receiving an event via application layer data from one or more packets transmitted by the remote device to the agent. In still other embodiments the method includes the client agent transmitting the application message and receiving the response via the network transparently to the client application.

In another aspect the present application features a system for providing a client side application programming interface to a telecommunication. The system includes an agent executing on a client device receiving via a local application interface call from a client application a request to perform a function via a telecommunication resource. The system also includes a formatter of the agent formatting an application message corresponding to the local application interface call. The system further includes a communications manager of the agent establishing a transport layer connection via a network to the remote device identified by the agent as providing the telecommunication resource and transmitting the application message over the transport layer connection via the network to the remote device and wherein the communications manager receives a response to the application message via the network from the telecommunication resource of the remote device. The system also includes a parser of the agent parses the response received from the communication manager and wherein the agent returns a result to the local application interface call based on the parsed response.

In one embodiment the system includes the agent responsive to a plurality of local API calls and transparently to the client application transmitting requests to one or more telecommunication resources over the network and receiving responses over the network from the one or more telecommunication resources. In another embodiment the system includes the communications manager determining a network identifier for the telecommunication resource identified for the local application interface call. In still another embodiment the system includes the formatter generating for the application message an ASCII message from parameters of the local API call.

In another embodiment the system includes an encryptor of the agent encrypting the application message. In still another embodiment the system includes a protocol manager transmitting via the communications manager the application message via a telecommunications protocol over the transport layer connection to the remote device. In yet another embodiment the system includes the parser parsing an application layer payload of the response to extract parameters. In still another embodiment the system includes a decryptor decompressing an application layer payload of the response.

In some embodiments the system includes a protocol manager determining from content of an application layer payload of the response the result to return to the local API call. In other embodiments the system includes an events manager receiving from the communications manager an event via application layer data of one or more packets transmitted by the remote device and responsive to the event the events manager executing one or more callbacks registered for the event.

The details of various embodiments of the invention are set forth in the accompanying drawings and the description below.

The features and advantages of the present invention will become more apparent from the detailed description set forth below when taken in conjunction with the drawings in which like reference characters identify corresponding elements throughout. In the drawings like reference numbers generally indicate identical functionally similar and or structurally similar elements.

Prior to discussing the specifics of embodiments of the systems and methods of the present solution it may be helpful to discuss the network and computing environments in which such embodiments may be deployed. Shown in is a block diagram of an embodiment of a mixed switched and IP telecommunications environment. In brief overview a PBX Ethernet module interfaces with a switched network such as a public switched telephone network PSTN via a foreign exchange office FXO port or ports . The PBX Ethernet module also interfaces with switched telecommunications devices including a post office telephone service POTS also referred to as a post office telephone system or a plain old telephone system fax machine and a POTS phone via a foreign exchange service FXS port or ports . The PBX Ethernet module also interfaces with a computing device via a bus interface to a bus . The PBX Ethernet module and computing device interface with an Ethernet network via a router to communicate with devices and networks including voice over internet protocol VOIP phones and which may connect wirelessly to a wireless router VOIP computers and a network and a VOIP provider . Although shows a network between the VOIP provider and VOIP computer and router in some embodiments the VOIP provider and VOIP computer may be on the same network as router . In some embodiments devices connected to router such as VOIP phones and computing device PBX Ethernet module and VOIP computer may be referred to as comprising a local area network LAN or a private area network. Although not illustrated in some embodiments one or more additional network segments may exist between devices phones and computers connected to router .

Still referring to and in more detail in some embodiments a PBX Ethernet module may comprise one or more network ports one or more FXS ports and one or more FXO ports . The PBX Ethernet module may also include a bus interface for interfacing with a computing device . In many embodiments a PBX Ethernet module serves as an interface between a switched network such as a PSTN network and a packet network such as a private area network or local area network via a hardware interface such as Ethernet. In many embodiments a PBX Ethernet module may also serve as a controller for a private branch exchange PBX network. PBX Ethernet module is also described in more detail below in connection with .

A computing device may comprise a client a workstation a server a blade server an appliance or any other computing device that comprises a bus capable of interacting with a bus interface of a PBX Ethernet module . In many embodiments a computing device may supply power to a PBX Ethernet module via bus and bus interface . For example in one embodiment in which bus is a PCI bus and bus interface is a PCI interface a computing device may supply power to PBX Ethernet module from a power supply unit of computing device via the bus. In some embodiments bus and bus interface may comprise an VESA VL bus an ISA bus an EISA bus a MicroChannel Architecture MCA bus a PCI bus a PCI X bus a PCI Express bus a NuBus or any similar bus capable of carrying power to PBX Ethernet module . In many embodiments bus and bus interface may allow communication between computing device and PBX Ethernet module as described in more detail below.

In some embodiments router may comprise a router a switch a network hub a wireless router a LAN management appliance a network address translator a gateway multi port firewall or any other type of computing or network device for routing data packets amongst a plurality of computing devices IP phones or other network devices or segments. Router may connect to various devices via Ethernet firewire or other hardware interfaces or via wireless interfaces such as . . . . Wimax or any other wireless or RF interface. In some embodiments router may connect to a PBX Ethernet module via a network port and or a computing device via a network port . Network ports and may comprise Ethernet or firewire ports or other hardware interfaces or wireless transmitters and receivers capable of interfacing with a wireless interface of router .

In some embodiments PSTN may comprise any type and form of a public switched telephone network or connection thereto or other circuit switched network provided by a telephone company or other service provider. Connection from PSTN to PBX Ethernet module may be via one or more FXO ports and may be via analog or digital interfaces including POTS trunk lines ISDN T1 E1 or any other interface for connecting one or more PSTN trunks to a private branch exchange switch. In some embodiments POTS devices such as a POTS fax machine or a POTS phone may connect via a foreign exchange service FXS port or ports on PBX Ethernet module to the PSTN network .

In some embodiments a voice over IP VOIP provider may provide VOIP services to one or more components of the system including VOIP computers and a wired VOIP phone and a wireless VOIP phone . In many embodiments VOIP provider interfaces with these components via a network which may be a wide area network including the Internet a metropolitan area network a public network a private network a virtual private network or any other type and form of network. In some embodiments VOIP provider may be located on a local area network or private network and connected directly to router . VOIP provider may provide voice and or video routing incoming call signaling outgoing call dialing encryption conference calling voice mail and other VOIP features to VOIP phones and VOIP computers running software VOIP interfaces.

Referring now to illustrated is a block diagram of an embodiment of a PBX Ethernet device also referred to as module . In brief overview in some embodiments a PBX Ethernet module may comprise a processor a memory element a random access memory element a flash memory interface or element an Ethernet switch an Ethernet bridge and a network interface card . In some embodiments PBX Ethernet module may also comprise a digital signal processor and or a private branch exchange proxy . PBX Ethernet module may also comprise FXS ports and FXO ports discussed above in connection with . In many embodiments PBX Ethernet module may comprise a speech engine . In some embodiments PBX Ethernet module may comprise a power supply connected to a bus interface .

As shown a PBX Ethernet module may comprise interfaces for both a packet based network such as Ethernet switch Ethernet bridge and NIC and a circuit switched network such as FXS ports FXO ports and PBX proxy . In some embodiments a PBX Ethernet module serves as a bridge or interface between these two networks allowing interoperability and flexibility of deployment. In many embodiments PBX Ethernet module operates in a stand alone fashion executing an operating system and applications on processor using power supplied via the bus interface from a computing device and distributed via an on board power supply . By including a processor memory and operating system independent of those of computing device PBX Ethernet module has enhanced reliability and stability requiring in some embodiments only power from computing device . In other embodiments an external power supply may be connected to PBX Ethernet module such that computing device is not necessary for operation.

Still referring to and in more detail in some embodiments a PBX Ethernet module may comprise a processor which may be referred to as a central processing unit or CPU a processor a microprocessor or any similar notation. Processor may comprise any type and form of processing unit including those manufactured by Intel Corporation of Mountain View Calif. those manufactured by Motorola Corporation of Schaumburg Ill. those manufactured by Transmeta Corporation of Santa Clara Calif. the RS 6000 processor those manufactured by International Business Machines of White Plains N.Y. or those manufactured by Advanced Micro Devices of Sunnyvale Calif. or any other processor capable of executing the functions described herein.

Although much of the functionality described in more detail below such as an HMP application a speech engine a PBX Proxy etc. are recited as being executed or performed by processor in many embodiments a co processor not illustrated may execute or perform part or all of these functions to off load processing from the primary processor . Similarly in some embodiments functions described as being executed or performed by a co processor may be executed or performed by processor . Furthermore in some embodiments processor may comprise a multi core processor or may comprise multiple processors collectively referred to as processor . Thus one skilled in the art may readily appreciate that one or more processors and or co processors may perform or execute any of the functionality described herein.

In some embodiments processor may be connected via one or more internal busses to a memory element and random access memory . Memory element may comprise flash memory a hard drive or any other data storage element capable of storing data in a manner accessible and editable by processor . Memory may comprise one or more of an operating system a PBX application a host media processing HMP application a web server and a session initiation protocol SIP proxy . RAM may comprise one or more memory chips capable of storing data and allowing any storage location to be directly accessed by processor such as Static random access memory SRAM Burst SRAM or SynchBurst SRAM BSRAM Dynamic random access memory DRAM Fast Page Mode DRAM FPM DRAM Enhanced DRAM EDRAM Extended Data Output RAM EDO RAM Extended Data Output DRAM EDO DRAM Burst Extended Data Output DRAM BEDO DRAM Enhanced DRAM EDRAM synchronous DRAM SDRAM JEDEC SRAM PC100 SDRAM Double Data Rate SDRAM DDR SDRAM Enhanced SDRAM ESDRAM SyncLink DRAM SLDRAM Direct Rambus DRAM DRDRAM or Ferroelectric RAM FRAM . In some embodiments RAM may comprise a cache memory.

In some embodiments a PBX Ethernet module may include a flash memory interface . The flash memory interface may comprise and type and form of interface constructed and designed for receiving accessing or reading flash memory media or devices such as a the common flash memory interface CFI . In many embodiments flash memory interface may be used for loading new operating systems or applications onto a PBX Ethernet module . For example a user may insert a flash memory card into interface and restart the PBX Ethernet module triggering an initialization sequent to load new software from the flash memory card.

A network interface card or NIC may comprise one or more network ports as discussed above in connection with . In many embodiments a NIC serves as an Ethernet network interface for PBX Ethernet module . The NIC can in some embodiments be any of the network interface cards or mechanisms described herein. The NIC can have any number of ports. The NIC may be designed and constructed to connect to any type and form of network or router . While a single NIC is illustrated the PBX Ethernet module may comprise any number of NICs .

The NIC may in some embodiments interact with an Ethernet switch . Ethernet switch may comprise any combination of hardware and software elements for routing communications between a NIC a processor and an Ethernet bridge . For example a PBX Ethernet module may receive communications from a computing device via a bus interface as discussed above. In some instances these communications may be directed to processor such as control or configuration commands for any of applications . In other instances these communications may be directed outward to a network via NIC . Similarly incoming communications from a network via NIC may be directed to processor or to a computing device via the bus interface . Thus the functions of Ethernet switch allows the PBX Ethernet module to serve as a NIC for both applications of PBX Ethernet module and for computing device .

In some embodiments an Ethernet bridge serves to bridge a layer network from Ethernet switch to a computing device via bus interface . An Ethernet bridge may comprise any combination of hardware and software elements for connecting and managing network segments at the data link layer. In many embodiments Ethernet bridge further includes functionality to appear as a NIC or virtual NIC to computing device . For example in some embodiments upon installation of a PBX Ethernet module into a computing device Ethernet bridge may appear as an installed NIC or Ethernet adapter to computing device such that applications and protocols above the link layer may communicate via the PBX Ethernet module . In some embodiments no additional software drivers need be installed on computing device to allow for Ethernet communications via PBX Ethernet module . In one embodiment an Ethernet switch and or Ethernet bridge provide network address translation or port forwarding and provide distinct network addresses to one or more components of the PBX Ethernet module including a web server HMP application PBX application speech engine PBX proxy SIP proxy or any other component. In a further embodiment Ethernet switch and or Ethernet bridge provide a distinct network address to a host computing device via a bus interface . In one such embodiment PBX Ethernet module may be installed as an Ethernet adapter on computing device and direct communications to a first IP and port to computing device and communications to a second IP and port to components of PBX Ethernet module . For example PBX Ethernet module may direct communications to IP 1.2.3.4 to a host computing device via the bus interface and direct communications to IP 1.2.3.5 to web server executing on processor .

In some embodiments as discussed above PBX Ethernet module may be installed and configured to appear to be an Ethernet adapter to a computing device via the bus interface . Accordingly in many of these embodiments an operating system of computing device may direct network communications of applications executing on computing device to PBX Ethernet module .

Furthermore in some such embodiments a virtual operating system or virtual machine executing on computing device may direct network communications of virtualized applications to PBX Ethernet module . Such virtual operating systems or virtual machines may include a VMware virtual machine using software provided by VMware Inc. of Palo Alto Calif. a Xen virtual machine using software provided by XenSource Inc. or various open source developers a Windows Virtual PC Virtual Server or Microsoft Hyper V Server using software provided by Microsoft Corp. of Redmond Wash. a XenDesktop virtual machine using software provided by Citrix Systems Inc. of Fort Lauderdale Fla. a Parallels virtual machine using software provided by Parallels Inc. of Schaffhausen Switzerland a Java or Perl virtual machine or any other type and form of virtual operating system or virtual machine. Because the PBX Ethernet module may be visible as an Ethernet adapter to an application executing within a virtual machine or virtual operating system said virtualized application may direct SIP traffic to SIP PBX HMP and other applications of the PBX Ethernet module without requiring specialized driver hardware installation for the virtual machine.

Processor may also in some embodiments operatively connect to a digital signal processor or DSP . DSP may comprise hardware software or any combination of hardware and software for processing audio signals communicated over a switched telephone network. DSP may comprise functionality for analog digital signal conversion arithmetic processing hardware pipelining or any other functionality useful in audio processing. In some embodiments DSP may act as an echo canceller or hybrid echo suppressor. In many embodiments DSP provides functionality to a PBX system provided by PBX proxy described below such as fax and modem operations voice transcoding voice enhancement noise reduction noise shaping packet loss concealment audio compression expansion and gating equalization audio mixing conferencing and other features.

In some embodiments PBX Ethernet module may comprise a PBX proxy . PBX proxy may comprise hardware and or software components for providing a full function private branch exchange telephone system to one or more foreign exchange stations via FXS ports and PSTN trunk lines via FXO ports . In some embodiments PBX proxy may be controlled or configured by processor executing a PBX application . Although not illustrated in many embodiments PBX proxy is executed by a co processor to off load processing from processor . PBX proxy along with DSP and PBX application may provide PBX features to telephones connected to FXS ports including voice mail music on hold teleconferencing intercom functionality caller ID direct dial or other functions useful to users of a private branch exchange.

In many embodiments PBX Ethernet module comprises a speech engine . Speech engine may comprise any combination of hardware and software for voice recognition speech to text processing and text to speech processing. For example in one embodiment speech engine provides a voice menu system for incoming calls from PSTN network with voice recognition to allow for selection of menu items and routing of the incoming calls.

PBX Ethernet module may comprise a power supply . In many embodiments power supply receives power from a host computing device via a bus interface . In some embodiments power supply may convert these voltages to desired voltages for processor or other components. For example a PBX Ethernet module using a PCI interface may receive voltages provided by a power supply unit of computing device via a backplane including 3.3V or 5V and power supply may convert these voltages as desired such as to 1.8V for low power flash RAM cards. Power supply may further comprise functionality for dynamic voltage scaling for power management. In some embodiments power supply may include additional components to allow conversion of AC voltages to desired DC levels. In such embodiments a PBX Ethernet module may not require a host computing device for operation.

PBX Ethernet module may execute an operating system . In some embodiments operating system may be a desktop or server operating system including any of the Windows variants manufactured by Microsoft Corp. of Redmond Wash. Unix or a Unix like operating system including Gnu Linux or BSD or a proprietary system such as HP UX manufactured by Hewlett Packard of Palo Alto Calif. or AIX manufactured by IBM of Armonk N.Y. In some embodiments the operating system may be a firmware based or embedded operating system. In other embodiments the PBX Ethernet module may include any elements or combination of element of a computing device described below.

In some embodiments PBX Ethernet module may execute any type and form of application such as any one of several applications including a PBX application an HMP application a web server and a SIP proxy . In some embodiments a PBX application may provide configuration and functionality for the various functions of PBX proxy speech engine and DSP discussed above. In some embodiments an HMP application may provide configuration and functionality for host media processing including transcoding vocoding compression buffering automatic gain control and volume control time scale modification and other signal processing functionality.

In many embodiments processor may execute a web server . The web server may serve web pages to a user of computing device or another computer that can access PBX Ethernet module through a network for the purpose of configuration diagnostics monitoring and maintenance of various functions of PBX Ethernet module .

In some embodiments processor may execute a session initiation protocol SIP proxy . SIP proxy may comprise a SIP proxy server for performing the functionality of routing SIP requests between a plurality of clients. In many embodiments SIP proxy may comprise a SIP registrar and or a redirect server for directing SIP session invitations to external domains. For example SIP proxy may provide location services registering one or more IP addresses to a SIP uniform resource identifier URI . In some embodiments SIP proxy may comprise a user agent server and or user age client for managing an SIP session or transaction. In many embodiments SIP proxy may comprise a media proxy for managing audio and or video communications via a real time transport protocol RTP and or RTP control protocol RTCP . In some embodiments SIP proxy may be executed by a second processor or a co processor not illustrated.

Referring ahead to in a further embodiment a PBX Ethernet module may include an interconnection to a DSP resource module . DSP resource module may be similar to a PBX Ethernet module and include a processor memory RAM a flash memory interface a bus interface and a power supply . A DSP resource module may further comprise one or more DSPs and a connection to PBX Ethernet module . For example a PBX Ethernet module may include a connector for an application such as a PBX proxy executing on a coprocessor to connect to one or more DSPs on a DSP resource module for additional processing capability. Thus a DSP resource module may provide expandability of a PBX Ethernet system for reduced cost.

In some embodiments connections between interboard connection and may be via a parallel or serial connector such as a multi wire planar cable a flexible flat cable an ISA PCI PCI X or other type of bus or any other interface for communication between two modules of a system.

The central processing unit is any logic circuitry that responds to and processes instructions fetched from the main memory unit . In many embodiments the central processing unit is provided by a microprocessor unit such as those manufactured by Intel Corporation of Mountain View Calif. those manufactured by Motorola Corporation of Schaumburg Ill. those manufactured by Transmeta Corporation of Santa Clara Calif. the RS 6000 processor those manufactured by International Business Machines of White Plains N.Y. or those manufactured by Advanced Micro Devices of Sunnyvale Calif. The computing device may be based on any of these processors or any other processor capable of operating as described herein.

Main memory unit may be one or more memory chips capable of storing data and allowing any storage location to be directly accessed by the microprocessor such as Static random access memory SRAM Burst SRAM or SynchBurst SRAM BSRAM Dynamic random access memory DRAM Fast Page Mode DRAM FPM DRAM Enhanced DRAM EDRAM Extended Data Output RAM EDO RAM Extended Data Output DRAM EDO DRAM Burst Extended Data Output DRAM BEDO DRAM Enhanced DRAM EDRAM synchronous DRAM SDRAM JEDEC SRAM PC100 SDRAM Double Data Rate SDRAM DDR SDRAM Enhanced SDRAM ESDRAM SyncLink DRAM SLDRAM Direct Rambus DRAM DRDRAM or Ferroelectric RAM FRAM . The main memory may be based on any of the above described memory chips or any other available memory chips capable of operating as described herein. In the embodiment shown in the processor communicates with main memory via a system bus described in more detail below . depicts an embodiment of a computing device in which the processor communicates directly with main memory via a memory port . For example in the main memory may be DRDRAM.

The computing device may support any suitable installation device such as a floppy disk drive for receiving floppy disks such as 3.5 inch 5.25 inch disks or ZIP disks a CD ROM drive a CD R RW drive a DVD ROM drive tape drives of various formats USB device hard drive or any other device suitable for installing software and programs such as any client agent or portion thereof. The computing device may further comprise a storage device such as one or more hard disk drives or redundant arrays of independent disks for storing an operating system and other related software and for storing application software programs such as any program related to the client agent . Optionally any of the installation devices could also be used as the storage device . Additionally the operating system and the software can be run from a bootable medium for example a bootable CD such as KNOPPIX a bootable CD for GNU Linux that is available as a GNU Linux distribution from knoppix.net.

Furthermore the computing device may include a network interface or NIC to interface to a Local Area Network LAN Wide Area Network WAN or the Internet through a variety of connections including but not limited to standard telephone lines LAN or WAN links e.g. 802.11 T1 T3 56kb X.25 broadband connections e.g. ISDN Frame Relay ATM wireless connections or some combination of any or all of the above. The network interface may comprise a built in network adapter network interface card PCMCIA network card card bus network adapter wireless network adapter USB network adapter modem or any other device suitable for interfacing the computing device to any type of network capable of communication and performing the operations described herein. A wide variety of I O devices may be present in the computing device . Input devices include keyboards mice trackpads trackballs microphones and drawing tablets. Output devices include video displays speakers inkjet printers laser printers and dye sublimation printers. The I O devices may be controlled by an I O controller as shown in . The I O controller may control one or more I O devices such as a keyboard and a pointing device e.g. a mouse or optical pen. Furthermore an I O device may also provide storage and or an installation medium for the computing device . In still other embodiments the computing device may provide USB connections to receive handheld USB storage devices such as the USB Flash Drive line of devices manufactured by Twintech Industry Inc. of Los Alamitos Calif.

In some embodiments the computing device may comprise or be connected to multiple I O devices or one or more display devices which each may be of the same or different type and or form. As such any of the I O devices and or the display devices or I O controller may comprise any type and or form of suitable hardware software or combination of hardware and software to support enable or provide for the connection and use of multiple I O devices or display devices by the computing device . For example the computing device may include any type and or form of video adapter video card driver and or library to interface communicate connect or otherwise use the display devices . In one embodiment a video adapter may comprise multiple connectors to interface to multiple display devices . In other embodiments the computing device may include multiple video adapters with each video adapter connected to one or more of the display devices . In some embodiments any portion of the operating system of the computing device may be configured for using multiple display devices . In other embodiments one or more of the display devices may be provided by one or more other computing devices via a network.

In further embodiments an I O device may be a bridge between the system bus and an external communication bus such as a USB bus an Apple Desktop Bus an RS 232 serial connection a SCSI bus a FireWire bus a FireWire 800 bus an Ethernet bus an AppleTalk bus a Gigabit Ethernet bus an Asynchronous Transfer Mode bus a HIPPI bus a Super HIPPI bus a SerialPlus bus a SCI LAMP bus a FibreChannel bus or a Serial Attached small computer system interface bus.

A computing device of the sort depicted in typically operate under the control of operating systems which control scheduling of tasks and access to system resources. The computing device can be running any operating system such as any of the versions of the Microsoft Windows operating systems the different releases of the Unix and Linux operating systems any version of the Mac OS for Macintosh computers any embedded operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or any other operating system capable of running on the computing device and performing the operations described herein. Typical operating systems include WINDOWS 3.x WINDOWS 95 WINDOWS 98 WINDOWS 2000 WINDOWS NT 3.51 WINDOWS NT 4.0 WINDOWS CE and WINDOWS XP all of which are manufactured by Microsoft Corporation of Redmond Washington MacOS manufactured by Apple Computer of Cupertino Calif. OS 2 manufactured by International Business Machines of Armonk N.Y. and Linux a freely available operating system distributed by Caldera Corp. of Salt Lake City Utah or any type and or form of a Unix operating system among others.

In other embodiments the computing device may have different processors operating systems and input devices consistent with the device. For example in one embodiment the computer is a Treo 180 270 1060 600 or 650 smart phone manufactured by Palm Inc. In this embodiment the Treo smart phone is operated under the control of the PalmOS operating system and includes a stylus input device as well as a five way navigator device. Moreover the computing device can be any workstation desktop computer laptop or notebook computer server handheld computer mobile telephone any other computer or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.

Referring now to shown is a block diagram of an embodiment of a system for communicating with an interface module for a mixed switched and IP telecommunications environment. Briefly a client application communicates via a client agent with a PBX Ethernet module by using function calls and application callbacks . In some embodiments client agent may comprise a parser a message generator a communication manager and a callback generator . In some embodiments communication manager may comprise an encryption decryption module . Communication manager may transmit and receive network messages from various components of a PBX Ethernet module including a TDM gateway a video gateway a fax gateway DSP a PBX proxy an HMP server a speech engine and an SIP proxy . In some embodiments client agent serves as an application programming interface for components of PBX Ethernet module to allow for easy and consistent programming by application developers.

Still referring to and in more detail a client application may be executed by a computing device VOIP computer or any other computing device able to communicate via a network with PBX Ethernet module . Client application may comprise an application a service a routine an executable program a daemon or any other type and form of executable instructions such as instructions for interacting and controlling a communications module of PBX Ethernet module . In many embodiments client application may comprise a web browser a VOIP interface a fax manager a video teleconferencing interface or other similar application.

Client agent may comprise a service a routine or subroutine a function an API an executable program a daemon a run time environment a set of commands or any other type and form of executable instructions such as instructions for providing function calls and application callbacks to an application and transmitting receiving and interpreting network communications messages such as via modules of a PBX Ethernet module . In some embodiments client agent may receive a function call from a client application and parse the function call to generate a network message . Client agent may transmit the network message via any type and form of network layer interface such as a layer 2 4 interface via Ethernet to PBX Ethernet module . For example the client agent may establish transport layer connections using sockets e.g. layer 4 interfaces such as via TCP over IP or UDP over IP. Client agent may also receive a network message from PBX Ethernet module and parse the message to generate an application callback which may be passed to the application.

In many embodiments a client application may send functional calls and receive callbacks without being aware that a resource is non local or accessed via a network. By separating the application from the network communication application developers need not know about network protocols communications sockets handshaking procedures message acknowledgements and other features common to network communications. In some embodiments an application may send a function call to a resource without specifying a network identifier or address of the resource and the client agent may determine the identifier or address and generate a corresponding network communication as necessary. For example the application may only need to know the name of the resource and not the IP address of the resource. In many embodiments an application may use blocking function calls transmitted via client agent over a network without tying up a network interface or preventing other applications from using the network interface.

In another aspect the client agent makes a local non LAN based API LAN and network aware but does so transparently and or seamlessly to the application using the local non LAN API layer. The client agent may seamlessly and transparently translate convert or process a local procedural imperative or functional API call of the application to one or more network reply and response messages using socket based communications such as TCP over IP or UDP over IP. In some aspects even if the developer or application is aware that the client agent is performing network based communications and protocols the developer and or applications does not need knowledge of the mechanisms protocols and interfaces for such network based communications.

Application providers are experts in their application areas such as voice processing easy to use interfaces call flow handling amongst others but may not necessarily be experts or knowledgeable on the behavior of networks that they run on. The client side API systems and method described herein allow application vendors and developed to focus on the application and use the power of an Ethernet based system to intercommunicate with many communications systems. This will allow application vendors and developed to focus on applications and yet have the power to have resources for trans coding termination and communications from numerous systems. In providing such a system the application vendors will not have to create a framework and communication protocol which will decrease their engineering budget requirements for their client server applications which will also rapidly increase their time to market and reduce the risk in the development of the solution.

In some embodiments client agent may comprise a parser . A parser may comprise a service a routine or subroutine a function an executable program a daemon a set of commands or any other type and form of executable instructions for interpreting function calls and network messages . In some embodiments a parser may extract one or more functions parameters and or variables from a function call and or a network message . For example a function call may comprise a function indicating to start a new communication session with a resource and variables indicating to login via an application name a password and an indication to use encryption. In another example a function call may comprise a function indicating to create a communications session between a VOIP client on a network and a PSTN circuit and send a sequence of DTMF dialing tones on the PSTN circuit via a PBX module and include variables of the DTMF tones. In another example parser may parse a network message to identify a target application based on an IP address port number sequence number or any other identification in a header or payload and parse a payload of the message to identify an application callback to generate and one or more parameters to include in said callback.

A message generator may comprise a service a routine or subroutine a function an executable program a daemon a set of commands or any other type and form of executable instructions for generating a network message responsive to parsed functions and variables in a function call . In some embodiments a message generator may comprise a table of resources and or remote devices and corresponding network identifiers or addresses. In other embodiments a message generator may comprise functionality for determining a resource s network identifier through queries or domain identifiers. In some embodiments a message generator may create a network message having a header identifying a target resource or device s network address or identifier and having a payload comprising a function and or parameters parsed from a functional call .

A communication manager may comprise a service a routine or subroutine a function an API an executable program a daemon a run time environment a set of commands or any other type and form of executable instructions for transmitting and receiving network messages . In some embodiments a communication manager may comprise a network driver or adapter such as an Ethernet adapter. In some embodiments a communication manager may comprise or communicate with a hardware network interface such as a NIC. In many embodiments a communication manager may comprise additional functionality for secure communications including an encryption decryption module . In these embodiments a communication manager may encrypt and decrypt communications using various encryption methods or algorithms. In some embodiments a communication manager further comprises functionality for compressing and decompressing communications.

A callback generator may comprise a service a routine or subroutine a function an executable program a daemon a set of commands or any other type and form of executable instructions for generating an application callback responsive to a received and parsed network message . In some embodiments a callback generator comprises a callback table or database and generates application callbacks responsive to entries within the callback table. For example in one such embodiment a callback generator may receive a parsed network message indicating that an event such as an incoming call has occurred along with variables or parameters such as a call source and destination. The callback generator may create a callback to a client application in a predetermined format specified by the callback table and pass the callback to client application . In some embodiments the predetermined formats specified by the callback table allow application developers to create applications with functions executed responsive to the various predetermined callbacks.

As shown in network messages may be transmitted to and received from various modules or components of a PBX Ethernet module including a time domain multiplexing TDM gateway a video gateway a fax gateway a digital signal processor a private branch exchange proxy a host media processing server a speech engine a session initiation protocol proxy or any other component or module of a PBX Ethernet module . In some embodiments a communication may be directed to one of these modules by a network switch executing on PBX Ethernet module responsive to contents of a header and or payload of the communication. For example communications with a first destination port number may be directed to a TDM Gateway while communications with a second destination port number may be directed to a PBX proxy . In another example communications with a payload in a first application layer protocol may be directed to a video gateway while communications with a payload in a second application layer protocol may be directed to a fax gateway.

Shown in is a signal flow diagram of an embodiment of a client agent utilizing an application programming interface API between a client application and a host media processing HMP system. Briefly a client application registers callbacks with a client agent using an API protocol . The client application passes a request to the client agent which generates a command and transmits the command to an HMP . The HMP generates a response . HMP generates one or more events and transmits them to the client API which parses each event and generates an application callback . Many embodiments of API function call callback interactions do not involve acknowledgements unlike many network communication protocols. Similarly many embodiments of API function call callback interactions use blocking function calls in which a client application stalls and waits for a response until a response is received again unlike many network communications protocols. The client agent thus serves as a translator between a blocking function call callback interaction with an application and a network communication involving requests and acknowledgements with a remote device. In some embodiments client agent also serves as a multiplexer between multiple applications such that a network interface is not tied up by a blocking function call while waiting for a response from a remote device.

Still referring to and in more detail at a client application may register callbacks with a client agent using an API protocol . Registering a callback allows an application to specify one or more callbacks to be invoked in response to one or more events and provide arguments for callback parameters.

As is shown in some responses from a remote device such as a host media processing server may be discarded rather than being translated into a callback to client application . In some embodiments discarded responses may include acknowledgements. For example in a network communication involving a request acknowledgement protocol such as TCP a client may transmit a request to a remote device and the remote device may respond with an acknowledgement of the request being received. Because the acknowledgement only indicates receipt of the request rather than a response to the content of the request the acknowledgement may not be useful to a client application . Accordingly the client agent may discard the acknowledgement. In other embodiments duplicate responses may be received for example due to losses of acknowledgements that trigger retransmittals. In one such embodiment duplicate responses may be discarded. Once appropriate processing or other functions have been performed the remote device may transmit a response or an event to the client agent which may generate appropriate callbacks for the client application .

In some embodiments a command may direct a remote device such as a host media processor to initiate various functions such as a voice telephone call. Accordingly once initiated further communications may occur from the host media processor such as an indication of a busy signal or a call being dropped or various other telephony events. Accordingly events may be generated and transmitted to the client. Client agent may parse the events and generate appropriate callbacks responsive to each event.

Shown in is a block diagram of an embodiment of an API between a client application and an HMP system. In brief overview a client application passes a request to a client agent . In some embodiments a formatter formats the command into a network message and an encryption module encrypts the command for secure transmittal. Communication manager transmits the command to an HMP system . HMP transmits a response which is received by communication manager . In some embodiments the response is decrypted in a decryption module . A parser retrieves parameters from the response. The client agent may pass the parameters to the application and or update application data and callback table .

Referring ahead to another block diagram of an embodiment of an API between a client application and an HMP system is shown. Briefly an HMP sends an event via a network communication to a communication manager which queues the event as necessary in a queue . Parser retrieves parameters of the event and updates application data . In some embodiments using a callback table the parser generates an application callback and passes the callback to the client application . illustrates command response flow while illustrates an independent queue for event processing. Utilizing independent queues allows for asynchronous event handling in a multi threaded system.

Returning to a formatter may comprise a service a routine or subroutine a function an executable program a daemon a set of commands or any other type and form of executable instructions for parsing and processing requests. In some embodiments a formatter may comprise functionality for mapping a request to a command validating input parameters of the request and or generating a command message.

In some embodiments network messages may optionally be encrypted before transmission and decrypted after receipt. This may be useful in embodiments in which command and configuration messages travel via a public network where a malicious attacker can intercept and regenerate commands. In some embodiments network messages may be compressed and decompressed to reduce network bandwidth if necessary.

A communication manager as discussed above may handle transmission and receipt queuing buffering and other functionality as necessary or desired for processing network communications between the client and a remote device or module. Once received responses are decrypted and or decompressed and passed to parser . As discussed above as parser of a parser comprises functionality for extracting arguments and parameters from a response . In some embodiments parser updates application data responsive to the parameters in response . Application data may comprise a local mirror of host media processing data related to resources used by client application . In many embodiments parser generates a callback or modifies an entry in a callback table responsive to parameters in response .

Returning to events may be generated by a remote device such as HMP and notifications of an event may be transmitted via a network communication. Where a blocking function call will stall an application until a response is received such that only one function call and response are communicated between an application and remote device at a time multiple events may be sent by the remote device within a short time period. Thus to allow for processing of events in order in some embodiments a queue may be used to hold messages until a parser is available to process the event message. In one embodiment processing an event message may comprise extracting parameters and arguments from the payload of a network message the parameters and arguments identifying an event and or additional details of the event. In some embodiments retrieving a corresponding callback from callback table that was registered by the client application for the event. In some embodiments parser may update application data responsive to parameters of the event. In many embodiments parser may pass the retrieved application callback including any parameters of the event message to the client application .

Still referring to and in more detail at step a PBX Ethernet module may receive a network communication. In one embodiment the PBX Ethernet module may receive a network communication from a host computing device via a bus interface. In one embodiment in which the PBX Ethernet module is serving as a network adapter for the host computing device the network communication may be an application layer presentation layer or session layer communication via an API or other interface. In a further embodiment the PBX Ethernet module may add transport layer and or network layer headers to the communication to allow the message to be transmitted via a network. In another embodiment the PBX Ethernet module may receive the network communication via a network interface.

At step an Ethernet switch of the PBX Ethernet module may determine if the communication is directed locally to a component or module of the PBX Ethernet module or directed outbound. As used herein outbound refers to a destination external to PBX Ethernet module but such destination may be on a network connected to a network port of the PBX Ethernet module or may be a host computing device connected to a bus interface of the PBX Ethernet module. Thus in an embodiment in which the PBX Ethernet module is serving as a network adapter for a host computing device a communication received by the PBX Ethernet module from another network device and redirected to the host computing device may be considered to be redirected outbound to the host computing device. In some embodiments a determination of whether the communication is directed locally or directed outbound may be responsive to a destination IP address or port number of the communication. In another embodiment the determination may be made responsive to a protocol of the communication. In one such embodiment a communication may be directed outbound if it includes a payload in a protocol that the PBX Ethernet module does not use. For example if the PBX Ethernet module is not executing a mail server then a determination may be made that a communication with an IMAP or POP protocol payload is directed outbound.

At step the switch may direct the communication to an appropriate module or component of the PBX Ethernet module such as a PBX application or an HMP application a speech engine or a DSP resource a processor or co processor a web server a SIP proxy or any other module or component of the PBX Ethernet module as described above. In some embodiments the switch may direct the communication responsive to a characteristic of the communication such as a port number or protocol of the communication.

At step the module or component may process the communication. In many embodiments processing the communication is responsive to the contents of the communication such as a request or query. In some embodiments processing the communication by a module or component may comprise executing a function of said module or component. For example a PBX application may process the network communication to provide a PBX function or an HMP application may provide an HMP function on a payload of a communication. In other embodiments processing the communication may comprise modifying or reconfiguring the module or component. For example a communication may change a compression parameter of a DSP resource such that the DSP resource processes an audio or video signal differently. In some embodiments processing the communication may comprise generating a response to the communication and sending the response to the switch.

If at step the switch determines that the communication is not directed to a local component or module of the PBX Ethernet module then at step the switch may direct the communication to an outbound interface. In some embodiments where the communication is received from a network interface of the PBX Ethernet module directing the communication to an outbound interface may comprise directing the communication to a bus interface. In other embodiments where the communication is received from a bus interface of the PBX Ethernet module directing the communication to an outbound interface may comprise directing the communication to a network interface. In still other embodiments where the communication is received from a local module or component of the PBX Ethernet module then directing the communication to an outbound interface may comprise directing the communication to either a network interface a bus interface or both a network interface and a bus interface responsive to a header and or a payload of the communication. For example a broadcast communication may be sent to both interfaces.

Shown in is a flow chart of an embodiment of a method for providing a client side application programming interface to access a networked telecommunication resource. Briefly at step a client agent may receive a request from an application to perform a function. At step the client agent may establish a transport layer connection with a remote device. At step the client agent may parse the request and at step the client agent may generate an application message. The client agent may transmit the message at step . In some embodiments the client agent may receive a response from the remote device at step and may return a callback to the application at step .

Referring to and in more detail at step a client agent may receive a request from an application to perform a function. In some embodiments the client agent may receive a request via a local application interface call. In many embodiments the client agent may receive a blocking API call. In some embodiments the request to perform a function may be a request to perform a function via a telecommunication resource. However in a further embodiment the request to perform a function via the telecommunication resource may not identify the location of the resource or even indicate that the resource is not local to the client. For example in one such embodiment an application may pass a blocking call to the client agent to execute a PBX function but the call may not identify that the PBX function is to be performed by a PBX Ethernet module accessible via a network connection. In many embodiments the application may not be network aware or may be agnostic to a network.

At step in some embodiments the client agent may establish a transport layer connection with a remote device. In some embodiments the client agent may utilize an already established transport layer connection while in other embodiments the client agent may establish a new transport layer connection. In many embodiments in which the request received at step does not identify a resource by location the client agent may determine a network identifier such as an IP address and port of the resource. In one embodiment the client agent maintains a configuration such as a file table or database of network identifiers of one or more resources. In some embodiments establishing a transport layer connection may comprise performing a handshake routine such as the three way handshake of the TCP protocol.

Furthermore although referred to as a remote device in some embodiments the remote device may be a module of a PBX Ethernet module installed in a computing device as discussed above. Thus establishing a transport layer connection with a remote device may comprise establishing a transport layer connection between a computing device and a PBX Ethernet module installed to a bus of the computing device. For example if the computing device is executing the client agent the PBX Ethernet module may still be considered to be a remote device in spite of being installed as an Ethernet adapter in the computing device. Accordingly one of ordinary skill in the art may understand that remote should not be read as implying geographical distance or even network distance but rather that a remote device is a device accessible to the client agent via a network connection.

At step the client agent may parse the received request. In some embodiments parsing the request may comprise determining a requested resource from the request. Although illustrated as after step in many embodiments step may be performed prior to step . For example in one embodiment a client agent may receive a request and parse the request to determine a target resource of the request. The client agent may then establish a transport layer connection with the target resource.

At step in some embodiments the client agent may generate an application message corresponding to the local application interface call. In one embodiment generating the application message may comprise creating a header and payload of a network message with the header identifying a network identifier of a target resource and a payload comprising the request in a format and or protocol useable by the target resource. In one embodiment generating the application message may comprise generating an ASCII message from parameters of the local API call. In some embodiments generating the application message may comprise performing additional processing on the payload of the message including compression and or encryption. For example in one such embodiment the client agent may receive an API call with a request to modify parameters of a resource. The client agent may determine the network identifier of the resource and extract the parameters from the API call. The client agent may generate a network communication to an IP address and port number of the resource with an encrypted payload comprising the extracted parameters of the request for secure transmission over a public network.

At step the client agent may transmit the generated message to the remote device or resource over the transport layer connection. In some embodiments transmitting the generated message may comprise transmitting the application message via a telecommunications protocol over the transport layer connection to the remote device. For example in one such embodiment the message may be transmitted via an SIP or TCP protocol.

At step the client agent may receive a response from the remote device or resource via the network. In some embodiments the client agent may receive the response with an encrypted and or compressed payload. In a further embodiment the client agent may decrypt and or decompress the payload.

At step the client agent may return a local application interface call based on the response to the client application. In one embodiment the client agent may parse the payload of the response to extract parameters sent responsive to the request. In a further embodiment the client agent may generate the local application interface call or callback based on the extracted parameters. In some embodiments the client agent may generate the call based on a callback table that identifies a callback for a request and include parameters extracted from the payload of the response. In some embodiments in which a plurality of client applications interact with the client agent concurrently to transmit API requests the client agent may parse the header and or payload of the response to identify the client application that initiated the request corresponding to the response.

Although not illustrated in some embodiments the client agent may receive one or more network communications or packets transmitted by the remote device or resource. In these embodiments the client agent may generate corresponding application or event calls based on event parameters in the payload of the one or more network communications and pass the application or event calls to the client application.

While various embodiments of the methods and systems have been described these embodiments are exemplary and in no way limit the scope of the described methods or systems. Those having skill in the relevant art can effect changes to form and details of the described methods and systems without departing from the broadest scope of the described methods and systems. Thus the scope of the methods and systems described herein should not be limited by any of the exemplary embodiments and should be defined in accordance with the accompanying claims and their equivalents.

