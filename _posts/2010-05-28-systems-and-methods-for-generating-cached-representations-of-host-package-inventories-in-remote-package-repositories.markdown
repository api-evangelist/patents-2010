---

title: Systems and methods for generating cached representations of host package inventories in remote package repositories
abstract: Embodiments relate to systems and methods for generating cached representations of host package inventories in remote package repositories. A physical or virtual client machine can host a set of installed software packages, including operating system, application, and/or other software. A package manager installed on the client reports an inventory of the installed packages to one or more package servers. The package server(s) can receive the inventory from machines populating the managed network, and generate an encoded identification for each constituent package, such as a hash-based output based on package attributes. The encoded identification and other data can be stored to an aggregate package cache in the one or more package servers, for more efficient management of the host machines in the managed network. In embodiments, the package update files for each identifier can also be stored in the cache for even more efficient inventorying and package update operations.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08429256&OS=08429256&RS=08429256
owner: Red Hat, Inc.
number: 08429256
owner_city: Raleigh
owner_country: US
publication_date: 20100528
---
The present teachings relate to systems and methods for generating cached representations of host package inventories in remote package repositories and more particularly to platforms and techniques for capturing the package inventories of host machines in a managed network generating an encoded identifier for each package and storing those cumulative identifiers in a server side cache to facilitate further package update or other activity.

Users of physical or virtual machines commonly install software packages including package updates to those machines. The software packages can contain a set of related files chosen to perform a given application or task such as for example a group of software applications drivers and or other resources used to install and use messaging or media applications. In instances a software package can contain application software operating system software drivers patches and or other software components grouped as a logical set.

Software package managers exist to help a user initiate and perform software package updates such as for example the yum Yellowdog update manager package update manager available from Red Hat Inc. and others. In general available software package managers are configured to interact with the set of installed packages on a client and with one or more software package repositories and associated package servers to directly connect to those databases and download available package updates.

The process of managing package installations and initiating software package updates can involve however a significant degree of processing overhead including when the managed network in which the host or client machines are installed is large. In those and other cases tracking the package server may have to capture store register and manage a large database containing the identifiers of all the packages installed on each host machine in the managed network as well as the attributes of that package the host machine ID and then register that information with the actual package update files stored in one or more associated package repositories. Processing that data for instance to generate a collective package update for all machines on the network can therefore involve a significant amount of processing overhead including input output overhead as package update files are identified retrieved and served to the host machines which are scheduled for a package update. In those large scale and other network architectures it would be advantageous to be able to consult a local or high speed storage record of the package complements installed on machines in the managed network without a need to communicate with those machines directly. It would likewise be advantageous to generate a compact representation of the cumulative set of installed packages on the machines in the network and optionally to be able to store some or all of the associated package update files in a high speed or local cache attached to the package server itself so that package update files can be served without a need to access remote and or lower speed storage and serve package updates to the host machines more efficiently. It may accordingly be desirable to provide systems and methods for generating cached representations of host package inventories in remote package repositories in which a package server or other management platform can generate and manage encoded identifications of package installations from host machines in a managed network and store those encoded identifiers potentially with the corresponding package update files themselves to a local cache memory for use in package updating inventorying and or other activities.

Embodiments of the present teachings relate to systems and methods for generating cached representations of host package inventories in remote package repositories. More particularly embodiments relate to platforms and techniques for configuring and deploying one or more package servers which can receive an inventory of a set of installed packages from the set of client or host machines in a managed network. Each host or client machine can have a set of one or more installed packages installed hosted and or operating locally on that machine. Each of those host machines can in aspects transmit an inventory of its set of installed packages to the one or more package servers. In aspects the inventory can be encapsulated on an encoded or unencoded basis by each host for transmission to the one or more package servers. The one or more package servers and or other platforms or logic can receive and aggregate the inventory of the set of installed packages from to host machines populating the managed network and collect and store that information in an aggregate package cache. The aggregate package cache can be or include high speed local memory or storage attached to the one or more package servers. The one or more package servers can build within the aggregate package cache a set of encoded identifiers for each package file in the cumulative set of packages installed in the managed network. The encoded identification can be or include a hashed representation of the set of installed packages on a given target or client based on the package names file names installation dates and times sizes and or other attributes of the set of installed packages. The encoded identification can be associated with the corresponding package file or package update file in the aggregate package cache. In aspects the one or more package servers can thereby build a cached and or encoded representation of all the package complements of all host machines operating in the managed network facilitating efficient communications sorting and accessing of those package files for instance for performing single or collective updates to the host machines. In addition in embodiments the one or more package servers can also store some or all of the available package update files themselves in the aggregate package cache further enhancing package file retrieval transmission and host updating operations. These and other embodiments described herein address the various noted shortcomings in known package update technology and provide a user with enhanced package and system management capability for inventorying encoding caching tracking updating and managing the software package resources in a managed network with more storage and processing efficiency including less need for exchanges across the network to inventory and update client package sets as well as to perform additional management and configuration functions with enhanced capabilities.

Reference will now be made in detail to exemplary embodiments of the present teachings which are illustrated in the accompanying drawings. Where possible the same reference numbers will be used throughout the drawings to refer to the same or like parts.

In aspects each package in the set of installed packages can include a set of component files such as executable files and or other files or resources. In aspects the set of component files of the set of installed packages can contain executable files for or otherwise support or be associated with a set of applications installed on the one or more clients . In aspects the set of applications can be or include types of applications or other software such as for example messaging applications database applications media applications spreadsheet or modeling applications social networking applications word processing applications and or other applications or utilities and can in aspects include an operating system drivers and or components thereof. The set of installed packages and or the set of component files of those packages can have an associated set of package attributes which reflects or records the file names versions dates storage sizes software requirements an or other attributes related to the software packages including their updates installed on the one or more clients and or other hosts and reflected in the set of installed software packages .

In aspects the package manager can communicate with a network interface configured to connect to one or more networks such as the public Internet or other public or private networks. The package manager can thereby connect to one or more package servers and associated one or more package repositories hosting a set of software packages including application package updates operating system installations and or updates and or other software related to packages and their associated resources.

In aspects the one or more package servers can interact with the one or more clients and or other host machines to interrogate inspect inventory encode configure test update and or otherwise manage the set of installed packages operating on the one or more clients throughout the managed network . The package manager can for example provide a user with a set of package update options displayed via a user interface such as a graphical user interface or others to select various test configuration and or other management activities on the set of installed packages . The set of package update options presented to the user of the one or more clients can include options such as one or more selections to select packages for inventorying installation and or update installation options and or other options or parameters for the downloading of package updates from the one or more package servers and their associated one or more package repositories to the local set of installed packages . Each of the one or more package repositories can store or host a set of stored package updates such as an aggregate file storing a set of files utilities operating system or components therefore and or other software needed to effect a package update on the one or more clients and or other clients targets hosts or machines including virtual machines.

The package manager of some or all of the one or more clients in the managed network can be configured to capture an inventory of the set of installed packages by inspecting the set of installed packages the set of package attributes and or other local data or resources related to each subject client of the one or more clients . In aspects the inventory of the set of installed packages can include incorporate and or reference the set of package attributes as well as the package names package file names or other package IDs of the set of installed packages . Once locally captured and generated the package manager can transmit the inventory of the set of installed packages to the one or more package servers via the one or more networks . In aspects the inventory of the set of installed packages can receive the inventory of the set of installed packages and any associated data and use that information to build and manage an aggregate package cache located in or associated with the one or more package servers . In aspects the aggregate package cache can comprise or contain a package cache association table that can store package IDs encoded identifiers of those packages or their ID the set of attributes for each of the inventory of the set of installed packages reflected in the aggregate package cache information regarding the one or more clients whose package complements are stored in aggregate package cache and or other locally cached data. According to aspects the storage of the package cache association table and information therein related to the identities versions storage locations and other parameters related to package updates for the one or more clients can permit the one or more package servers to access sort analyze configure and initiate package update operations on the one or more clients with reduced communications and processing overhead since some or all information necessary to prepare and generate a package update on a single or collective basis can be accessed by the one or more package servers locally from high speed memory or storage.

In aspects and as illustrated for example more particularly in the one or more package servers can receive the inventory of the set of installed packages from each of the one or more clients in the managed network and process and store that information and related data to take advantage of the relatively high speed memory or storage resources of the aggregate package cache . In aspects the aggregate package cache can again be or include high speed electronic memory such as random access memory RAM or static random access memory SRAM and or other memory storage or media. In aspects the aggregate package cache can be installed or hosted in the one or more package servers themselves for instance via a system bus connected to a processor in the one or more package servers . The one or more package servers can place the inventory of the set of installed packages and or constituent data from that inventory received from each of the one or more clients in the aggregate package cache in a structured format such as the package cache association table . In aspects as shown the package cache association table can be organized as a flat or relational database although in aspects other data structures formats and or objects can be used.

In aspects the one or more package servers can receive a package update request from the one or more clients and process that request to generate the initiation of a package update operation on that request client or other host. In aspects the package update request can identify a package in the set of installed packages that the user wishes to update. In aspects one or more package servers can determine an encoded identifier for that package such as a hashed value of the package name or ID and use the encoded identifier to locate search and analyze the required update resources based on information in the aggregate package cache . For instance the one or more package servers can locate the necessary next package version for performing the requested package update and can access attributes of the package update such as compatibility or storage information to prepare the requested package update. In aspects the one or more package servers can also inspect the package cache association table to determine whether the corresponding package update file required for the pending update request is stored in the set of cached package updates in the aggregate package cache based on the encoded identifier or other key or field. In cases where the package update file is locally stored in the set of cached package updates the one or more package servers can retrieve and serve or transmit that file and or other data to the requesting one or more clients directly thus increasing the speed and efficiency with which the package update file can be delivered and the package update process performed. In aspects when the package update file is not stored in the set of cached package updates of the aggregate package cache but instead is stored in the set of stored package updates of the one or more repositories the one or more package servers can retrieve the package update file from that location or others and transmit the package update file to the requesting one or more clients . In aspects the transmission of the package update file can be made to multiple clients in the one or more clients on a group or broadcast basis. Both the searching management and organizing of package update operations can be enhanced as well as the delivery of the package update file to the one or more clients and or other machines of the managed network .

In aspects as shown the package cache association table can encode and store information that can be keyed on a field identifying the encoded identifier of the packages identified in the inventory of the set of installed packages received by the one or more package servers from each of the one or more clients of the managed network . In aspects as shown the encoded identifier can reflect an encoded representation such as an alphanumeric string or other output generated by a hash function applied to the set of attributes of each stored package. The package cache association table can likewise store attributes including the package name such as a file name or other ID for the constituent or underlying package file and or package update file which herein may together be referred to as a package update file . The package cache association table can store other fields or attributes such as the package versions the package size the package storage location indicating the source address or location of the package file itself the preceding version or versions of the package and the underlying compatible or required operating system for that package. The package cache association table can also include for each package and as shown record an identification of the machine group or group s of the one or more clients in the managed network which hosts or has installed the subject package. The package cache association table can likewise store additional attributes or data associated with each of the inventory of the set of installed packages for each of the one or more clients in the managed network including merely illustratively dependencies required for installation of those packages the vendor of those packages and or other fields or data.

As also shown in addition to the package cache association table in embodiments the aggregate package cache can also store a set of cached package updates incorporating the actual package update file for one or more cached package updates . The type or number of the set of cached package updates can depend for instance on the amount of available memory in the aggregate package cache available to the one or more package servers . In aspects in cases where the one or more clients requests the updating of a package whose encoded identifier appears in the package cache association table the package storage location of that package is reflected to be located in the set of cached package updates the one or more package servers can proceed to retrieve and serve the package update file directly from the set of cached package updates . In aspects the set of cached package updates can record the package update files stored therein based on a cache entry value from which the package update file can be extracted decoded or encoded as necessary and transmitted to the requesting one or more clients . Other data fields identifiers attributes commands and or other information can be included in the aggregate package cache the package cache association table and or the set of cached package updates .

In the package manager of the one or more clients can transmit the inventory of the set of installed packages to the one or more package servers and or other remote management platform. In aspects the inventory of the set of installed packages can incorporate the set of package attributes and or other data in addition to the package name of ID package file name and or file name s of the set of component files of each package. In embodiments it may be noted that any one or more of the one or more clients can transmit the inventory of the set of installed packages in an encoded format such as the same format used by the one or more servers to generate the encoded identifier stored on the server side to the aggregate package cache . In the one or more package servers and or other remote management platforms such as network management platforms such as for instance the fedora unified network controller func available from Red Hat Inc. can receive the inventory of the set of installed packages from the one or more clients .

In the one or more package servers can store the inventory of the set of installed packages to the aggregate package cache and or other local or remote storage. In the one or more package servers can generate the encoded identification of each package in the inventory of the set of installed packages for all of the one or more clients in the managed network. In aspects the encoded identifier of each package object can comprise an output or object generated using a hash function operating on text strings or other data reflecting one or more attributes in the set of package attributes . In cases where a hash function or hash operator is used the hash function can be or include SHA1 Secure Hash Algorithm 1 SHA2 Secure Hash Algorithm 2 SHA3 Secure Hash Algorithm 3 and or other hash functions operators or routines. In aspects the encoded identifier need not be based on a hash function but can in addition or instead be based on other classes of functions or algorithms. In the one or more package servers can stored the encoded identifier to the package cache association table in the aggregate package cache . In embodiments some or all of the packages identifiers stored in the package cache association table can also or instead be stored in an unencoded format.

In a package update request can be received from any one or more of the one or more clients in the managed network . In aspects the package update request received from the one or more clients can specify or identify the requested package in unencoded format or in embodiments can encode the requested package ID in a format such as hashed or other encoded format compatible with the encoding used by the one or more package servers to generate the encoded identifier on the server side. In the one or more package servers can retrieve the requested package update from the set of cached package updates stored in the aggregate package cache if indicated to be located in the set of cached package updates in the package cache association table . If not present in the set of cached package updates the requested package update can be retrieved from the one or more repositories or if not present in the one or more repositories can be retrieved from the repositories or data stores of software vendors operating in the managed network . In aspects retrieval processing performed based on data in the aggregate package cache can include the retrieval of the identification of the necessary package update and the attributes of that update as well as performing pre update processing such as compatibility tests or other verifications. In aspects retrieval processing using data in the aggregate package cache can also as noted include retrieval of the actual package update file corresponding to the update request in cases where the subject package update file has been stored to the set of cached package updates stored in the aggregate package cache .

In the one or more package servers can transmit the package update file to the one or more clients transmitting the update request for a package update file which client or host can then install that package update to the local set of installed packages . In the one or more package servers can update the aggregate package cache as appropriate for instance to store or reference a newly served package update file and or to store or reference a newly generated encoded identifier . In as understood by persons skilled in the art processing can return to a prior processing point jump to a further processing point or end.

The foregoing description is illustrative and variations in configuration and implementation may occur to persons skilled in the art. For example while embodiments have been described in which a unitary package manager locally installed one each machine in one or more clients is configured to control package update activity including the reporting of an inventory of the set of installed packages in embodiments multiple applications or software can interact to control the downloading installation testing reporting and other management of software packages. For further example while embodiments have been described in which package update activity is conducted on one client or host of a set of one or more clients in embodiments multiple local or remote targets hosts clients and or other machines can register to package manager and or other logic or resources to receive or perform package inventory update and or management activity. Still further while embodiments have been described in which the one or more package servers maintain a single or unitary aggregate package cache in aspects multiple memory or storage facilities installed in attached to and or associated with the one or more package servers can host store and retrieve data related to the collective inventories of the set of installed packages for the one or more clients in the managed network . Other resources described as singular or integrated can in embodiments be plural or distributed and resources described as multiple or distributed can in embodiments be combined. The scope of the present teachings is accordingly intended to be limited only by the following claims.

