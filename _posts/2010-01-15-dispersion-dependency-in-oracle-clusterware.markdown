---

title: Dispersion dependency in oracle clusterware
abstract: A method and apparatus for resource dispersion in a clusterware system is provided. The resource profiles for resources within a cluster of nodes are stored. Each resource profile includes attributes for a resource. One or more of the attributes in one of the resource profiles includes a dispersion dependency attribute that specifies that the resource is preferably not co-located with another resource. Resources are placed within the cluster based, at least in part, on the dispersion preference.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09207987&OS=09207987&RS=09207987
owner: Oracle International Corporation
number: 09207987
owner_city: Redwood Shores
owner_country: US
publication_date: 20100115
---
This application is related to the following applications 1 application Ser. No. 12 688 710 entitled Special Values In Oracle Clusterware Resource Profiles filed on Jan. 15 2010 the entire contents of which is hereby incorporated by reference as if fully set forth herein 2 application Ser. No. 12 688 715 entitled Local Resource Type As A Way To Automate Management Of Infrastructure Resources In Oracle Clusterware filed on Jan. 15 2010 the entire contents of which is hereby incorporated by reference as if fully set forth herein 3 application Ser. No. 12 688 723 entitled Unidirectional Resource and Type Dependencies In Oracle Clusterware filed on Jan. 15 2010 the entire contents of which is hereby incorporated by reference as if fully set forth herein 4 application Ser. No. 12 688 800 entitled Conditional Dependency in a Computing Cluster filed on Jan. 15 2010 the entire contents of which is hereby incorporated by reference as if fully set forth herein 5 application Ser. No. 12 688 739 entitled Dependency On A Resource Type filed on Jan. 15 2010 the entire contents of which is hereby incorporated by reference as if fully set forth herein 6 application Ser. No. 12 688 735 entitled Self Testable HA Framework Library Infrastructure filed on Jan. 15 2010 the entire contents of which is hereby incorporated by reference as if fully set forth herein. The applicants hereby rescind any disclaimer of claim scope in the related applications.

The present invention relates to clusterware systems. More specifically the invention relates to dispersion dependencies in clusterware systems.

Clusterware is a general term that refers to a software product that is used to combine a set of nodes into a single entity all members working together as a logical unit. A node may be a computer interconnected to other computers or a server blade interconnected to other server blades in a grid. The single entity is referred to as a cluster or computer cluster. Clusterware allows this cluster to be controlled as a unit. For example five nodes may be combined into a cluster each node with its own combination of applications that may be supported by the cluster as a whole. An example of an application that may be installed on some or each of the nodes is a database management system DBMS such as those produced by Oracle Corporation 500 Oracle Parkway Redwood Shores Calif. Applications may be clusterware aware sometimes referred to as clusterware enabled and controllable by clusterware. These applications are designed to be deployed and managed using clusterware. Other applications may also be controlled by clusterware.

Clusterware may be implemented as middleware residing between the operating system and any applications. Clusterware may also be implemented as part of the operating system. A cluster manager or a node with management authority manages the resources and services of a cluster. The policy engine a component of the cluster manager is responsible for managing services on the cluster according to policy specifications.

Services such as membership services are provided by the clusterware. Membership determines which computers or nodes are parts of the cluster and which other servers can be substituted for the failed server in the cluster.

Resource management is another service provided by clusterware. Resource management techniques may vary with each clusterware product. In some implementations clusterware considers everything it manages to be a resource and what clusterware knows about each resource is defined in a resource profile for that resource. A resource may be anything that the clusterware manages and may include any physical or logical entity that an application is comprised of or uses to be able to provide services. Anything a resource depends upon may also be considered a resource. Physical entities may include hardware resources such as network cards CPU and memory. Logical entities may include resources such as IP addresses applications and processes such as daemons. Resources may depend on other resources creating a hierarchy of resources. For example a web server application is a resource that depends on an IP address which is another resource.

To manage a resource means to direct resources and perform activities related to that resource. These activities may for example cause the resource to behave or be provisioned in a particular manner. Resource management includes placement and defining operability of resources within the cluster including bringing resources online and taking them offline as well as monitoring each resource. For example putting an Internet Protocol IP address in the proper configuration location for a web server is a way of managing an IP address while restarting the web server is a way of managing the web server. By managing the resources the cluster manager is able to ensure the availability of resources in an environment requiring high availability of services. This is sometimes referred to as HA high availability resource management.

In some implementations the resource profile controls what the clusterware will do when managing the resource. A resource profile is a collection of attributes having values that define the properties of the resource associated with the value. The attributes and properties may be made up of common or generic attributes and properties or may be application specific. For example if the resource crashes the resource profile defines whether or not the particular resource given the particular circumstance will be restarted. As another example if the resource keeps crashing it may be relocated to another node in the cluster based on the configuration in the resource profile. Resource profiles may be grouped together to make up a logical group of profiles. This logical group of resource profiles is sometimes referred to as an HA high availability policy.

Clusterware may use clusterware agents to assist in resource management activities. An agent is software comprising components of software modules that are invocable by other software modules that perform various actions on the applications or resources that manage the agent. Although a computing device actually performs agent functions pursuant to the instructions of the software modules it is more convenient to describe the software modules as performing the functionality. There is no need to obfuscate embodiments of the invention by defining the role of a computing device with respect to each particular function being performed as the software modules themselves adequately define this role.

Agents may have application or client side components that are specific to the application and clusterware or server side components that support the generic clusterware interface with an Application Programming Interface API connecting the two sides. Agents acting as an intermediary receive messages from the clusterware and handle the messages based on the application side components or application specific code. Additionally the application side components may receive information from the application such as resource state information that describes the state of the resource. This application specific code determines at the agent what a particular clusterware message means for the particular application. For example an application may need to save data in order to shut down gracefully. Therefore a stop command generated by the clusterware may result in the agent asking the application to save data followed by a command that causes the application to cease processing.

Clusterware may also be used to manage resource relationships such as resource dependencies. Described herein are approaches for creating new kinds of dependencies.

The approaches described in this section are approaches that could be pursued but not necessarily approaches that have been previously conceived or pursued. Therefore unless otherwise indicated it should not be assumed that any of the approaches described in this section qualify as prior art merely by virtue of their inclusion in this section.

In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however that the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.

In one embodiment resource profiles are stored. The resource profiles are for resources within a cluster of nodes. Each resource profile includes attributes for a resource. One or more of the attributes in one of the resource profiles includes a dispersion dependency attribute that specifies that the resource is preferably not co located with another resource. Resources are placed within the cluster based at least in part on the dispersion preference.

In another embodiment a first resource profile includes an attribute specifying a dispersion dependency between a first resource and a second resource. The first and second resources are placed on the same node of the cluster.

In another embodiment the resources are placed based at least in part on a dispersion metric that indicates a measurement of preference for a resource not being co located with another resource.

In another embodiment the dispersion dependency attribute specifies that the resource is preferably not co located with another one or more resources of a particular resource type.

Clusterware modeling or resource modeling is a term that describes the ability to express functional requirements of clusterware applications. Requirements are expressed in terms of resources that represent the components of the application as well as any dependencies and any relationships between resources and components. The ability to model resources in clusterware is an important aspect of a clusterware system because resource modeling allows policy based management to be performed by configuration instead of implementation using custom code that requires maintenance with each release of the clusterware product.

The bulk of modeling is expressed in resource profiles. For example a particular resource may depend on another resource in order to function properly. Other attributes such as attributes and may also be expressed in a resource profile. For example the cardinality of a resource or the number of nodes on which a resource may be provisioned may be expressed in a resource profile for the resource. Expressing these attributes in a resource profile and making the resource profile available to the clusterware policy engine is known as registering the resource.

Different kinds of dependencies may be expressed in a resource profile for a resource. A dependency is any relationship between a resource and another resource or resource type. For example a dependency in a resource profile for a particular HTTP server resource may indicate that the HTTP server depends on a particular IP Internet Protocol address resource such as 10.1.1.90. This dependency may have attributes or properties of its own that further describe the nature of the dependency. For example the dependency may be a hard dependency or a soft dependency.

Hard dependencies are a way of indicating that if A has a hard dependency on B A must be stopped when B s state is offline unknown or otherwise not in the online state. A hard dependency may also mean that actions performed with respect to B must also be performed with respect to A. For example if B is relocated to another node A must also be relocated to another node. Other dependency attributes may be used to indicate in the model that one resource must start or stop before another resource may become active.

The following is an example of a dependency attribute in a resource profile that specifies that the resource for which the resource profile is modeling is dependent on a resource called resourceB 

The dependency is a start dependency and a hard dependency. More than one dependency may be defined in a single resource profile. For example the following line may be found in a single resource profile 

No particular syntax for expressing dependencies or other attributes is required. For example resource profile attributes may be expressed in XML in an embodiment. In another embodiment dependencies may be expressed individually as follows 

Dispersion is a property between resources in a clusterware system that indicates that the resources should avoid co location. This property is referred to as a dispersion relation. The dispersion relation may be asymmetric or symmetric. In asymmetric dispersion a first resource may be configured to avoid a second resource even though the second resource is not configured to avoid the first resource. In symmetric dispersion all resources in the dispersion relation are configured to avoid one another. For convenience this application discusses dispersion relations in the context of asymmetric dispersion.

In an embodiment dispersion relations are expressed by configuration in a resource profile associated with a clusterware resource. Specifically a dispersion relation may be expressed as a dispersion dependency attribute in the resource profile of the resource that is configured to avoid co location with another resource. For example a particular web server resource HTTPD1 may be configured to avoid a particular report generator resource REPGEN1. This configuration may be included in the resource profile of the HTTPD1 resource but may not be included in the resource profile of the REPGEN1 resource thus creating an asymmetric dispersion relation. The configuration may be in the form of a start dependency attribute in the HTTPD1 resource profile as shown below 

Many reasons may exist for configuring one resource to avoid co location with another. For example the report generator may be known to require large amount of node resources such as memory and processor time. If reports are being generated users requesting websites from the web server may experience slow delivery of those websites. Dispersion of resources may also benefit services requiring high availability. Dispersing resources that provide some identical function across nodes ensures that the service is still available in the case of a node failure. For example if two HTTP servers that provide services to HTTP clients are running on different nodes a node failure will only affect one of the servers. As another example 3 independent IP Listener resources may in an embodiment be actively dispersed so that there is at least one pair active and providing the service while others are being recovered from a node failure.

This line indicates that upon starting resource A a dispersion dependency on resource B must be satisfied.

As another example resource B may be associated with a resource profile that is stored in resource profiles . The following line may appear in the resource profile for resource B 

This line indicates that upon starting resource B a dispersion dependency on resource A must be satisfied.

The placement of resource A and resource B on different nodes as shown in also satisfies this dispersion dependency in the profile associated with resource B . Although there is no requirement that each resource include in its resource profile a mirror image of a dispersion dependency included in the profile of the other such configuration may be desirable. For example each of the dependencies discussed above may be configured at the same time 

Although a dispersion dependency indicates a preference that the resource associated with the resource profile in which the dependency was configured not be co located with another resource dispersion does not indicate that a first resource cannot be co located with a second resource. A dispersion dependency is not an absolute but a preference.

However it is possible that despite the dispersion dependencies the clusterware manager may determine that resource A and resource B should be co located on the same node such as node A .

In an embodiment resources may be assigned resource types also referred to herein as types . A resource type is an attribute of a resource. Resources are unique but some resources are instances of the same kind of resource. For example 10.1.2.3 and 10.2.3.4 may be classified as IP addresses. As another example Oracle DBMS and MySQL may be classified as Database Management Systems. 

A type is an attribute that may be ascribed to resources and must be formally defined. There is no requirement that the type ascribed to a resource make logical sense. For example while it may be convenient to associate resources such as network interface cards with a type defined as NIC or Network Card the network interface cards may be just as easily associated with a type defined as Foo Bar. 

A type may be registered with the clusterware by creating a type definition. A type definition may be stored in any location format that the clusterware is capable of reading. The means of storage and storage format of type definitions may vary with each clusterware implementation. In one embodiment type definitions are stored as a text file and a reference to the text file is added to a clusterware configuration file. In another embodiment type definitions are stored in XML format. The following represents only one example of a type definition 

In order for a resource to be of a particular type that resource must be registered as a resource of the particular type. For example an Oracle DBMS application may have the following line in its associated resource profile 

Upon registration of the resource the clusterware policy engine will consider the resource type T ORACLE DBMS when managing the resource.

In an embodiment types may be used in dependencies. For example a particular resource may be dependent on a particular type. Such a dependency is distinct from a dependency of a resource on another resource.

In an embodiment every resource is associated with a type. In another embodiment resources may be associated with a type when such an association is deemed useful. Alternatively resources that are not associated with a type implicitly inherit a generic type.

A dispersion dependency may be based on a type rather than a resource. A first resource may not only be configured with a preference for avoiding co location with a second resource but that resource may also be configured with a preference for not being co located with any resource of a particular type.

For example it may be desirable for the previously mentioned HTTPD1 resource which may be of a type T WEBSERVER to avoid co location with other resources of the same type. The dispersion relation may be desirable for convenience resource conservation or any other conceivable reason. The resource profile associated with the HTTPD1 resource may include instead of dispersion dependency that identifies a particular resource to avoid a dispersion dependency that identifies a resource type to avoid. Such a configuration may be included in the resource profile for the HTTPD1 resource as follows 

This indicates that before the HTTPD1 resource starts its dispersion relation to other resources of the type T WEBSERVER must be considered.

Active dispersion is a term used to describe a dispersion relation that is continually evaluated. Examples provided above have assumed that dispersion dependencies are evaluated only when the resource is started. However other embodiments include additional classes of dependencies including active dependencies. Active dispersion dependencies are continually evaluated. In one embodiment a resource which has an active dispersion dependency on another resource or type should be moved if possible to avoid the resource or type for which a dispersion has been configured even if moving the particular resource requires that the resource be shut down before reprovisioning.

For example a first and second resource such as HTTPD1 and HTTPD2 may be configured with active dispersion dependencies on each other as shown in their respective resource profiles 

Active dispersion may also be implemented using types. For example the resource profile for HTTPD1 may include the following line 

This line indicates that the HTTPD1 resource may be moved to avoid co location of the HTTPD1 resource with any resource of the T WEBSERVER type.

Although resource A and resource B have been placed on the same node node A the clusterware policy engine actively monitors the cluster to determine whether the dispersion dependency can be better satisfied by moving resource B to another node. When node B is added to the cluster the clusterware policy engine determines that reprovisioning resource B will better satisfy the dependency. The clusterware policy manager reprovisions resource B to node B . Reprovisioning may include saving the state of resource B in memory or on a computer readable medium stopping resource B installing resource B and starting resource B or any combination of these steps including additional steps required for causing resource B to be placed on node B instead of node A .

Dispersion metrics assist the clusterware manager in determining which if any resources should be co located with one another. In an embodiment one or more dispersion metrics may be used to determine placement or movement of resources within a cluster. Dispersion metrics may be used alone or in combination with one another. Dispersion metrics may also be used in combination with other factors including availability of system resources when provisioning resources.

One dispersion metric may be based on the number of a particular type of resource on a node. For example a first node may include three resources of type T DBMS while a second resource includes only one resource of type T DBMS. If a particular resource has a dispersion dependency on type T DBMS both nodes fail to satisfy the dependency because each node includes at least one resource of the dispersed type. However a dispersion metric may be based on the number of resources of the dispersed type and used as a weighting mechanism for the clusterware policy engine to use for determining a preferred placement for the particular resource. In this case since the first node includes three resources of the dispersed type the metric associated with the first node will be 3. Since the second node includes only one resource of the dispersed type the metric associated with the second node will be 1. The clusterware policy engine will interpret the lower number as the metric associated with the preferred node and will place the particular resource on the second node.

In another embodiment a dispersion metric may be associated with a dispersion dependency in a resource profile. For example one dispersion dependency may be deemed more important than another.

The first line indicates that a dispersion metric of 3 will be associated with any resource of type A. The second line indicates that a dispersion metric of 4 will be associated with any resource of type B. This metric indicates the amount of aversion that resource C has to the type.

In the embodiment shown in node A includes one resource of type A and node B includes one resource of type B. Since resource C has a greater aversion to placement on the same node as a resource of type B resource C will be placed on node A .

In an embodiment an aggregate dispersion metric will be considered. The aggregate dispersion metric is based on the dispersion metrics assigned to dispersion dependencies and the number of those resources running on the node. If additional dispersion dependencies have been defined in a resource profile each dispersion metric for each resource will be included in the aggregate dispersion metric.

Thus resource C has a dispersion metric of 3 with respect to type A and has a dispersion metric of 4 with respect to type B.

The difference between and is that node A includes two resources of type A in . When the dispersion metric of 3 is counted for each resource of type A the aggregate dispersion metric associated with node A will be 6. However the aggregate dispersion metric associated with Node B will remain 4 because only one resource of type B is included on Node B . Since resource C has a greater aversion to Node A resource C will be placed on node B .

To alter the scenario in the metric assigned to each dependency may be changed. For example the resource profile for resource C may instead include the following lines 

This configuration would cause resource C to be placed on node A instead of node B since node A would have an aggregate dispersion metric of 4 while node B would have an aggregate dispersion metric of 9. In the example it would take five resources of type A instead of two to shift the node preference to node B .

Implied dispersion occurs when a dispersion attribute is inherited by a resource from a source other than a resource profile. For example a type definition file for a first type may indicate that resources of that type should by default have a dispersion dependency on a second type. In an embodiment any resource of the first type will have a dispersion dependency on a second type even if no dispersion relation is included in the resource profile for the first resource.

In another embodiment a dispersion attribute may be implied based on a dispersion dependency defined in the resource profile of another resource. For example if the resource profile for resource A includes 

then resource B based on implied dispersion will be treated as having a dispersion dependency on resource A. Even though a dispersion dependency has not been defined in the resource profile for resource B the clusterware manager in an embodiment will treat resource B as though the resource profile for resource B includes the following line 

The Venn diagram in step illustrates three sets of nodes in the cluster. The X set includes no nodes with the resource or resource type X. The Y set includes no nodes with the resource or resource type Y. The Z set includes no nodes with the resource or resource type Z. A is a set that represents the intersection of sets X Y and Z. If A is an empty set i.e. all nodes in the cluster include at least one of X Y or Z then the flow moves on to step . If A is not an empty set i.e. there is a node in the cluster that does not include X Y or Z then the flow moves to step .

At step the clusterware manager determines which nodes best satisfy the dispersion relations. Any registered dispersion metrics are considered along with the number of resources or types with which the first resource has a dispersion relation to. For example the first resource may have a dispersion dependency on a first type with a dispersion metric of 2 and a second type with a dispersion metric of 5 indicating a strong preference for not being co located with the second type. However if four resources of the first type are placed on a first node and only one resource of the second type is placed on a second node the aggregate dispersion metric will be considered. The aggregate dispersion metric will take the product of the dispersion metric of i.e. 2 and the number of that type of resource running on the node i.e. 4 to produce an aggregate dispersion metric of 8. The second node will be the preferred node since it has a smaller aggregate dispersion metric of 5. At step the first resource is placed on the node that best satisfies all dispersion relations.

At step the clusterware manager determines whether any of the dispersion dependencies for the first resource are active. If no dispersion dependencies are active at step the first resource is not reprovisioned once it has been placed on a node unless the node becomes inactive.

At step the clusterware manager determines whether all active dispersion relations are satisfied. If all active dispersion relations are satisfied the flow moves to step where the clusterware manager monitors the cluster for changes that affect the dispersion relation status. For example a node may become unavailable causing resources to be moved to a different node. The movement of resources may occur despite a contrary dispersion relation. At step a change is detected in a dispersion relation status. At step a determination is made that a dispersion relation is no longer satisfied.

When a determination is made that an active dispersion is not satisfied the flow moves to step where the clusterware manager monitors the cluster for available nodes that meet a dispersion metric threshold. For example it may be desirable to move a resource from a first node to a second node to satisfy a dispersion relation only if the second node provides a significant advantage over the first node. Thus even if a slight advantage would be gained the clusterware manager may determine that the threshold dispersion metric difference between the nodes for moving a resource has not been met.

At step a preferred node becomes available. At step the resource is moved to the preferred node. At this time the flow moves to step again to determine if all active dispersion relations are satisfied. In addition if a new resource is registered with the cluster a flow may begin at step to determine the node on which the resource should be placed.

According to one embodiment the techniques described herein are implemented by one or more special purpose computing devices. The special purpose computing devices may be hard wired to perform the techniques or may include digital electronic devices such as one or more application specific integrated circuits ASICs or field programmable gate arrays FPGAs that are persistently programmed to perform the techniques or may include one or more general purpose hardware processors programmed to perform the techniques pursuant to program instructions in firmware memory other storage or a combination. Such special purpose computing devices may also combine custom hard wired logic ASICs or FPGAs with custom programming to accomplish the techniques. The special purpose computing devices may be desktop computer systems portable computer systems handheld devices networking devices or any other device that incorporates hard wired and or program logic to implement the techniques.

For example is a block diagram that illustrates a computer system upon which an embodiment of the invention may be implemented. Computer system includes a bus or other communication mechanism for communicating information and a hardware processor coupled with bus for processing information. Hardware processor may be for example a general purpose microprocessor.

Computer system also includes a main memory such as a random access memory RAM or other dynamic storage device coupled to bus for storing information and instructions to be executed by processor . Main memory also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor . Such instructions when stored in storage media accessible to processor render computer system into a special purpose machine that is customized to perform the operations specified in the instructions.

Computer system further includes a read only memory ROM or other static storage device coupled to bus for storing static information and instructions for processor . A storage device such as a magnetic disk or optical disk is provided and coupled to bus for storing information and instructions.

Computer system may be coupled via bus to a display such as a cathode ray tube CRT for displaying information to a computer user. An input device including alphanumeric and other keys is coupled to bus for communicating information and command selections to processor . Another type of user input device is cursor control such as a mouse a trackball or cursor direction keys for communicating direction information and command selections to processor and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes a first axis e.g. x and a second axis e.g. y that allows the device to specify positions in a plane.

Computer system may implement the techniques described herein using customized hard wired logic one or more ASICs or FPGAs firmware and or program logic which in combination with the computer system causes or programs computer system to be a special purpose machine. According to one embodiment the techniques herein are performed by computer system in response to processor executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory from another storage medium such as storage device . Execution of the sequences of instructions contained in main memory causes processor to perform the process steps described herein. In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions.

The term storage media as used herein refers to any media that store data and or instructions that cause a machine to operation in a specific fashion. Such storage media may comprise non volatile media and or volatile media. Non volatile media includes for example optical or magnetic disks such as storage device . Volatile media includes dynamic memory such as main memory . Common forms of storage media include for example a floppy disk a flexible disk hard disk solid state drive magnetic tape or any other magnetic data storage medium a CD ROM any other optical data storage medium any physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM NVRAM any other memory chip or cartridge.

Storage media is distinct from but may be used in conjunction with transmission media. Transmission media participates in transferring information between storage media. For example transmission media includes coaxial cables copper wire and fiber optics including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio wave and infra red data communications.

Various forms of media may be involved in carrying one or more sequences of one or more instructions to processor for execution. For example the instructions may initially be carried on a magnetic disk or solid state drive of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system can receive the data on the telephone line and use an infra red transmitter to convert the data to an infra red signal. An infra red detector can receive the data carried in the infra red signal and appropriate circuitry can place the data on bus . Bus carries the data to main memory from which processor retrieves and executes the instructions. The instructions received by main memory may optionally be stored on storage device either before or after execution by processor .

Computer system also includes a communication interface coupled to bus . Communication interface provides a two way data communication coupling to a network link that is connected to a local network . For example communication interface may be an integrated services digital network ISDN card cable modem satellite modem or a modem to provide a data communication connection to a corresponding type of telephone line. As another example communication interface may be a local area network LAN card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information.

Network link typically provides data communication through one or more networks to other data devices. For example network link may provide a connection through local network to a host computer or to data equipment operated by an Internet Service Provider ISP . ISP in turn provides data communication services through the world wide packet data communication network now commonly referred to as the Internet . Local network and Internet both use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link and through communication interface which carry the digital data to and from computer system are example forms of transmission media.

Computer system can send messages and receive data including program code through the network s network link and communication interface . In the Internet example a server might transmit a requested code for an application program through Internet ISP local network and communication interface .

The received code may be executed by processor as it is received and or stored in storage device or other non volatile storage for later execution.

In the foregoing specification embodiments of the invention have been described with reference to numerous specific details that may vary from implementation to implementation. Thus the sole and exclusive indicator of what is the invention and is intended by the applicants to be the invention is the set of claims that issue from this application in the specific form in which such claims issue including any subsequent correction. Any definitions expressly set forth herein for terms contained in such claims shall govern the meaning of such terms as used in the claims. Hence no limitation element property feature advantage or attribute that is not expressly recited in a claim should limit the scope of such claim in any way. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense.

