---

title: Detecting non-touch applications
abstract: A computer-implemented method, computer-readable media, and wireless device that automatically determines whether an application requires a virtual input mechanism are provided. The wireless device includes a virtual machine and database. The virtual machine executes the application and parses code associated with the application to determine whether a virtual input mechanism is necessary. The database stores metadata that indicates whether the type of input needed for the application is touch or key.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08887129&OS=08887129&RS=08887129
owner: Sprint Communications Company L.P.
number: 08887129
owner_city: Overland Park
owner_country: US
publication_date: 20100125
---
Embodiments of the invention are defined by the claims below. Embodiments of the invention provide wireless devices methods and computer readable media for among other things determining whether an application requires a virtual input mechanism. The embodiments of the invention have several practical applications in the technical arts including providing support of non touch applications executing on a touch interface only wireless device and dynamically generating virtual input mechanisms for non touch applications.

In a first embodiment a computer implemented method to determine whether an application requires the virtual input mechanisms is provided. The computer implemented method may be executed by a server or a wireless device during application runtime or during installation of the application. The code of the application is parsed to identify touch or key methods. In turn a database is updated with metadata that indicates whether the application requires the virtual input mechanisms.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the detailed description. This summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used in isolation as an aid in determining the scope of the claimed subject matter.

Embodiments of the invention provide wireless devices computer readable media and computer implemented methods for detecting non touch applications and dynamically generating virtual input mechanisms for the non touch applications. The non touch applications are applications that are configured to use key inputs. For instance the non touch applications may be designed to work with keys available to a device such as wireless devices. The keys may include a 3 4 keypad with 0 9 and a direction input with up down left right a selection input with an OK button or phone button a menu button and two or more softkeys located under the screen. Other applications such as touch applications may be configured to work with touch inputs or in certain embodiments the touch applications may work with either touch inputs or key inputs. Embodiments of the invention allow a wireless device with a touch screen interface to execute a non touch applications by dynamically generating appropriate virtual input mechanisms for the non touch applications.

In some embodiments the virtual input mechanism may be generated manually or dynamically. To manually generate the virtual input mechanism a user may select a toggle switch to display a standard virtual key interface. The virtual input mechanism provides a means for a user to interface with an application using a set of keys configured to perform actions including but not limited to direction input number input menu input and selection input. In another embodiment the virtual input mechanism is generated dynamically based on the code associated with the application. A virtual machine associated with the wireless device may parse the code to automatically determine if an application is written to expect key input. In turn the application is identified as a non touch application if the virtual machine locates code that suggests the application expects only key inputs. The virtual machine may generate a virtual input mechanism specific to the key inputs indentified in the code. In some embodiments the user may use the toggle to manually override the automatic detection and display a standard set of keys.

The virtual machine may store metadata in a storage. The metadata indicates whether the code is non touch. In one embodiment the storage is a database. The wireless device may include a database that lists the applications available on the wireless device. For each application the database may store an indication of whether the application is non touch an indication of whether a virtual input mechanism is applied per screen or globally and the location of a java application descriptor file for the application. In another embodiment the database is stored externally from the wireless device. In certain embodiments the java application descriptor file may include the indication of whether the application is non touch and the indication of whether a virtual input mechanism is applied per screen or globally.

Throughout the description of the embodiments of the invention several acronyms and shorthand notations are used to aid the understanding of certain concepts pertaining to the associated system and services. These acronyms and shorthand notations are intended to help provide an easy methodology of communicating the ideas expressed herein and are not meant to limit the scope of the embodiments of the invention. The following is a list of these acronyms 

As one skilled in the art will appreciate embodiments of the invention include among other things a method wireless system and a computer program product. Accordingly the embodiments may take the form of a hardware embodiment firmware embodiment a software embodiment or an embodiment combining software and hardware. In one embodiment the computer program product includes computer useable instructions embodied on one or more computer readable media for updating configuration information.

Computer readable media include both volatile and nonvolatile media removable and nonremovable media and contemplates media readable by a database a switch and various other network resources. Network switches routers firewalls and related components are conventional in nature as are means of communicating with the same. By way of example and not limitation computer readable media comprise computer storage media and communications media.

Computer storage media or machine readable media include media implemented in any method or technology for storing information. Examples of stored information include computer useable instructions data structures program modules and other data representations. Computer storage media include but are not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile discs DVD holographic media or other optical disc storage magnetic cassettes magnetic tape magnetic disk storage and other magnetic storage devices. These memory components can store data momentarily temporarily or permanently.

A wireless system enables wireless devices to detect whether an application requires a VIM during installation of the application or runtime of the application. The VIM is generated dynamically or in response to a manual selection provided by the user. In some embodiments the wireless device includes a virtual machine that parses the code associated with the application to determine whether the application supports key input or touch inputs.

The wireless devices are configured to connect to the server and application database over the network . The wireless devices include computers laptops PDAs smartphones modems or any other computing device. The wireless devices may communicate wirelessly using mobile broadband. The wireless devices are operated by a user to initiate communications with wireless devices or other network resources. The wireless devices also download install and execute applications received from the application database . In some embodiments the wireless devices have a touch screen interface used to execute applications installed on the wireless devices .

The network connects servers to the wireless device and the applications database . The network may include a local area network a wide area network a virtual private network or the Internet. The network allows the servers to communicate with wireless devices .

The servers are connected to the network and communicate with wireless devices . The servers may include content servers multimedia servers email servers web servers or storage servers. The servers may push data to the wireless devices or respond to request for data received from the wireless devices . In one embodiment the servers provide the wireless devices with one or more applications stored in the applications database . The servers may also parse code associated with the applications to detect whether the application requires a VIM. In turn the servers may notify the wireless devices that the application supports key inputs touch inputs or both key inputs and touch inputs. In some embodiments the servers may remotely execute the applications for the wireless devices .

The applications database is connected to the network . The applications database provide applications to the wireless device or server . The applications include Java applications that are executed by either the wireless device or the server . In some embodiments the applications are stored in a JAR file and each application is associated with a JAD file.

In certain embodiments the wireless device may include a virtual machine and a database. The virtual machine parses the code for the applications and the database stores an indication of whether the application requires the VIM. The wireless device may include a touch screen configured to receive touch inputs and to display the VIM when needed.

The touch screen displays the VIM . The touch screen also receives user interactions that include touches from a stylus pen a finger or some other pointer instrument. The user interaction may be directed to a VIM or another input screen displayed by the wireless device.

The VIM is generated by the VM in response to the automatic detection process. Alternatively the VIM is generated in response to a toggle switch selected by the user of the wireless device. In one embodiment the VIM displays of a set of keys that are applied either globally to the application or per screen of the application. The VM that parses the code may select a global VIM . This means if one screen of the application requires key input the VM generates a global VIM for all screens of the application. Alternatively the VM that parses the code may select a per screen VIM . Thus VM may execute the automatic detection process per screen. The VM may chose to execute the automatic detection process at install or at runtime prior to showing each screen because some aspects of a screen may dynamically change.

The VM is configured to execute the automatic detection process to determine whether the code of the application requires key inputs. The VM may execute the detection process only once at install time to minimize the runtime delays. In an embodiment the VM may parse code stored in a JAR and store an indication of whether the VIM is required in the JAD file associated with the application.

The automatic detection process may occur off the wireless device on a server as a background process on the wireless device or as part of the firmware of the VM in the wireless device. In an embodiment the server may update the JAD file to indicate that the applications supports touch only inputs key only inputs or both key inputs and touch inputs.

In some embodiments the VM parses the code to locate touch methods or key methods. In turn the VM may dynamically generate VIM based on key inputs identified in the code. The VM may identify methods listening for inputs from physical keys such as a press key method a release key method or hold key method. The VM may detect whether the method includes a null process which means code implementing the method is not included. In one embodiment the VM looks for a number of lines of code for each method. When a threshold number of code lines e.g. 10 is present the VM identifies the keys associated with the method and includes those keys in the VIM and the VM updates an indication to specify that the application supports key inputs. The VM also looks for touch methods such as finger release methods drag methods finger touch etc. When a threshold number of code lines e.g. 5 is present the VM updates an indication to specify that the application supports touch inputs.

For instance the detection process may search the compiled code to determine if an application implemented a number of key input methods. The key input methods may include protected void keyPressed int keyCode protected void keyReleased int keyCode or protected void keyRepeated int keyCode etc. In another embodiment the VM may determine whether a number of constants associated with key inputs are defined in the code. The constants may include java constants such as GAME A GAME B KEY NUM1 KEY NUM2 KEY NUM3 UP DOWN LEFT and RIGHT. The VM may search for these constants to decide which virtual input is appropriate to include in the VIM . The VIM for an application in one embodiment may include either navigation inputs up down left right or numeric inputs 0 9. The detection process may also search the compiled code to determine if an application implemented a number of touch input methods. The touch input method may include protected void pointerPressed int x int y protected void pointerReleased int x int y protected void pointerDragged int x int y etc.

In one embodiment the compiled code is checked to determine whether a form that requires key input is present. The form may include controls and text fields that take key input. For instance a ChoiceGroup or CustomItem control may need a VIM . ChoiceGroup control may provide the user with a list of items and allow the user to select one. The ChoiceGroup control may require a VIM with up down left right and select key inputs. Other controls may requires different key inputs. The CustomItem may be associated with specific methods and may support key inputs touch input or both key and touch inputs. Accordingly the code associated with the CustomItem is checked for methods similar to the above identified key methods and touch methods.

The VM may store the VIM in a database or JAD file. In one embodiment the database may include a listing of applications their corresponding VIMs and whether the VIM is used globally or per screen. The database identifies each application the type of inputs supported the VIMs that were dynamically generated during a previous execution and an indication of whether the user has overridden automatic detection and requests a standard VIM . Accordingly the database may be accessed by the VM to select a VIM for display on the touch screen.

In certain embodiments the code associated with the application may be parsed at runtime or at install. The wireless device may obtain an indication that a VIM is required and the wireless device may receive and display the VIM from storage or generate a VIM dynamically. The metadata associated with the application is updated by the wireless device to indicate that a VIM is required for the application.

In step metadata associated with the code is updated to indicate whether the application supports key inputs touch input or both key and touch inputs. In certain embodiments an override is provided to allow a user of the application to choose to interface with the application with one of a touch input or a key input. The override may include a toggle switch. The toggle switch may cause a standard VIM to be display to the user. In one embodiment the toggle switch is a physical switch that is part of the wireless device. In an alternate embodiment the toggle switch is a software element that is displayed by the user interface.

The virtual input mechanism that includes keys required by the application may also be generated dynamically when the application requires specific key inputs. The virtual input mechanism may be configured according to a size of a screen available to the application. The metadata associated with the application may be specific to each screen of the application or global to all application screens. The metadata may be used to determine whether to display the VIM for an application. In an embodiment the metadata is stored in a database listing each application and the input preference for each application.

In summary a wireless device may support applications designed for key input only touch input only or both key and touch inputs. A VM executing on wireless device may dynamically generate the VIM that allows the application to receive the user inputs. A database may be updated to identify the input preferences detected for each application.

Additional arrangements of the various components depicted as well as components not shown are possible without departing from the spirit and scope of the present invention. Embodiments of the invention are described with the intent to be illustrative rather than restrictive. It is understood that certain features and subcombinations are of utility and may be employed without reference to other features and subcombinations and are contemplated within the scope of the claims. Some steps listed in the various figures need be carried out in the specific order described.

