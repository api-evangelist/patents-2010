---

title: Efficient streaming server
abstract: Providing media content includes receiving a request from a client for a portion of a selected media file in a streaming server at a streaming tier in a multi-tiered architecture for media content storage and streaming; streaming the requested portion of the selected media file to the client directly from the streaming server if the selected media file is stored on the streaming server; and streaming the requested portion of the selected media file to the client from the streaming server by reverse proxy to at least one server of a storage tier in the multi-tiered architecture if the media file is not stored on the streaming server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08769139&OS=08769139&RS=08769139
owner: Clarendon Foundation, Inc.
number: 08769139
owner_city: Murray
owner_country: US
publication_date: 20101220
---
The present application claims priority under 35 U.S.C. 119 e to U.S. Provisional Patent Application Ser. No. 61 299 459 which was filed on Jan. 29 2010.

The present disclosure relates generally to computers and computer related technology. More specifically the present disclosure relates to an efficient streaming server in a multi tiered streaming architecture.

Computer and communication technologies continue to advance at a rapid pace. Indeed computer and communication technologies are involved in many aspects of a person s day. Computers commonly used include everything from hand held computing devices to large multi processor computer systems.

Computers are used in almost all aspects of business industry and academic endeavors. More and more homes are using computers as well. The pervasiveness of computers has been accelerated by the increased use of computer networks including the Internet. These computers are often interconnected to form a computer network. One or more servers may provide data and services for other client computers on a network. The client computers are often referred to as clients. A computer network may include hundreds or even thousands of clients.

Many content distribution networks CDNs provide media content e.g. audio video streaming services to end users. Content providers desire their media content to be available to end users with minimal start up and buffering delays and with a good overall quality of service. However many prior art CDN systems do not provide the quality of service that users desire. For instance users of some types of CDNs due to limitations in bandwidth and implementation problems experience unreliable streaming and low quality media.

Content distribution networks may commonly be used to provide video streaming services to end users. A content distribution network may be a group of computer systems working to cooperatively deliver content quickly and efficiently to end users over a network. End users may be able to access a wide variety of content provided by various content producers. To compete for viewing time content producers desire their media content to be available to end users through high quality video and audio with minimal delays and stalling. Accomplishing this goal may require collaboration from a variety of networking equipment and storage systems. Such equipment and systems may only be capable of providing a limited bandwidth to end users. As a result media content may often be compressed using a variety of algorithms to reduce the amount of data required for streaming. However media content may only be compressed to a certain extent. Thus it may be desirable to develop efficient structures and collaboration mechanisms which will provide media content to end users at a rate required to maintain quality of service and experience for streaming. Providing more media content data at an optimal rate may allow smooth and high quality media content streaming thereby enhancing user viewing experience.

The present specification relates to a data storage structure which may provide mechanisms for increasing the efficiency at which media content may be streamed to end users. According to one configuration a data storage structure may include an archive tier at least one storage tier and a streaming tier. All media content available for streaming may be stored in the archive tier. That media content may also be distributed across multiple storage clusters making up the storage tier. The streaming servers may replicate locally at least some of the media content stored on multiple storage clusters. The streaming servers may then stream requested media content to client systems by sending the requested media content directly from local storage to the client systems and by acting as a reverse proxy to the storage clusters to stream media content stored by the storage clusters to the client systems. Through use of a data storage structure using principles described herein media content streaming may be provided to end users at an optimal rate and with more reliability.

Previous content delivery architectures may have potential performance bottlenecks that could affect scalability and performance delivery. By contrast the architecture for content delivery disclosed in the present specification may alleviate this performance and throughput bottleneck and may be capable of scaling up to support a large number of content streams from a point of presence POP . A multi tier media storage architecture with content distributed across a streaming tier and a storage tier is disclosed. Content may be dynamically moved and synchronized to the streaming tier servers based on access frequency and media content profile.

Thus a data storage structure for a content distribution network may be configured so as to provide horizontal scalability and increased system performance and throughput. This may be accomplished using a tiered data storage structure. The data storage structure may include an archive tier configured to store media content a storage tier connected to archive tier and a streaming server tier connected to the storage tier. The streaming server tier may be configured to stream media content to client systems.

Various configurations of the system are now described with reference to the Figures where like reference numbers indicate identical or functionally similar elements. The systems and methods as generally described and illustrated in the Figures herein could be arranged and designed in a wide variety of different configurations. Thus the following more detailed description of several configurations of the system as represented in the Figures is not intended to limit the scope of the invention as claimed but is merely representative of various system configurations.

Many features of the system configurations disclosed herein may be implemented as computer software electronic hardware or combinations of both. To clearly illustrate this interchangeability of hardware and software various components will be described generally in terms of their functionality. Whether such functionality is implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system. Skilled artisans may implement the described functionality in varying ways for each particular application but such implementation decisions should not be interpreted as causing a departure from the scope of the present invention.

Where the described functionality is implemented as computer software such software may include any type of computer instruction or computer executable code located within a memory device. Software that implements the functionality associated with components described herein may comprise a single instruction or many instructions and may be distributed over several different code segments among different programs and across several memory devices.

The client may be a computing device. Examples of computing devices include but are not limited to a desktop computer laptop computer cell phone smart phone tablet netbook e book i.e. e reader personal digital assistant PDA game console television personal media player and the like. The client may include a browser and a media player . The media player is an application used to play media files e.g. audio or video files . The media player may be separate from the browser or may be incorporated within the browser . The client uses the browser to browse the website . The client may select one or more media content URLs on the website . The media player may use the one or more URLs to access one or more media content streaming servers . The one or more media content streaming servers stream the media content associated with the one or more URLs to the client . The media player plays the streamed media content on the client .

As shown in one possible use case for this system is when a provider of content wishes to provide this content to end users on the Internet but further desires to have the hosting and streaming of the content provided by a service provider that specializes in the storage and streaming of media content such as the media content storage and streaming provider . The media content provider provides the content to the storage and streaming provider which in turn typically provides URLs to the media content provider so that the content provider can place the URLs onto its website . Users browsing the website may click on a thumbnail for example of a video that links to the URL provided by the storage and streaming provider . The client browser or media player may then access the video from the storage and streaming provider using the URL . This use case provides only one possible configuration. Many other configurations and use scenarios are possible using the systems and methods described herein.

The POPs are systems where media content is stored and or streamed to client computing devices through the network . The POPs may include archive tiers storage tiers and streaming tiers . The archive tiers have at least one storage device such as a disk. For example the archive tiers may comprise one or more just a bunch of disks JBODs for storing media content. That is the archive tier may comprise modules bricks assembled in a cluster arrangement where the modules include disks for storing digital content. These modules may be placed on a rack. The storage tiers include storage servers for storing media content. The streaming tiers include streaming servers. The POP A may receive encoded and or formatted media content from the media ingestion and encoding system . The POP A stores the encoded media content in the media archive tier A and the storage tier A . The POP may also store or cache the media content on the streaming tier . The media content may also be distributed via the network to additional POPs from the POP A . For example the POP N may receive the encoded media data and store it on its corresponding archive tier N storage tier N and or store or cache it on the streaming tier N

The media streaming tiers may stream the media content to one or more clients via the network e.g. intranet the Internet . For example POP A may stream media content to client A while POP N may stream media content to client N . Additionally a single client A may concurrently stream media content from one or more POPs . The clients include media players which play media content streamed from the POPs 

The media content storage and streaming provider may send a URL to the media content provider corresponding to the media content. For example a URL that includes the address of the media content on the streaming and or storage tiers may be sent to media content providers for placement on their websites . The storage and streaming provider may receive a request to access the media content from a client . For example it may receive a hyper text transfer protocol HTTP GET request from a client at a URL corresponding to the media content address for a specific portion of the media content. For example a client might request a specific set of 100 bytes of a media content file located at a specified URL. In certain embodiments the requested set of 100 bytes may be one portion chunk out of many portions requested by the client where the client is able to intelligently and dynamically vary the size of portions requested. The URL may be directly translated into the media content address without lookup. The media content storage and streaming provider may stream the media content to the client that requested the media content. For example one or more streaming servers on a streaming tier may stream the requested media content. Additionally media content may be streamed from multiple POPs 

The encoding system may also replicate and format the media content for viewing at different resolutions and or bit rates. For example the media content formats may include a 720p format a 480p format and a 1080p format. The media content management system may assign addresses to different pieces of media content for storage on the storage structure for streaming media content. In one possible configuration a separate directory folder is created and named for each media content provider . The media content management system may also create and name separate directory folders within the media content provider folders for each piece of media content. A piece of media content may be a video a music track a picture etc. Media content assets corresponding to each piece of media content may be stored in the media content directory folders. These assets may be files corresponding to the piece of media content. For example the media content assets of a video may include different video file formats bit rates resolutions corresponding audio files e.g. of differing bit rates languages etc. subtitle files e.g. of different languages etc. . The media content may be stored on both the storage tier and the archive tier . The storage structure for streaming media includes one or more storage clusters on the storage tier . Each of the storage clusters includes one or more storage servers . The media content management system may assign one of the storage clusters as a home storage cluster. For example a home storage cluster A is where a piece of media content is stored with a guaranteed location. Unless it is deleted from the system a piece of media content will always be available on its home storage cluster A i.e. its storage address will remain the same . Although a piece of media content has a home storage cluster it may also be distributed amongst additional storage clusters . The media content may also be cached on one or more streaming servers . The distribution of the media content may depend or be based on client demand for the media content. Each piece of media content available on the storage structure for streaming media is also stored in the archive storage on the archive tier . Accessing the media content stored on the archive tier generally has greater latency than accessing it on the storage tier . Storing the media content on the storage tier in addition to the archive tier may thus allow the streaming tier to access stored media content with less latency. This may enable the streaming tier to deliver the media content to the client more rapidly. Furthermore the 3 tiered architecture offers improved scalability over earlier architectures.

The storage structure for streaming media content may include a switch between the storage tier and the streaming tier . The switch connects the storage servers to streaming servers located on the streaming tier . The switch facilitates the transfer of media content from the storage tier to the streaming tier . The streaming servers may stream media content to a client via a network e.g. intranet the Internet . The client may include an intelligent client and a media player . The intelligent client is a hardware and or software module that requests multiple portions of media content from one or more of the streaming servers . For example the intelligent client may be configured to request multiple portions of a media content file where the different portions have variable sizes. The intelligent client may have embedded addresses e.g. URLs IP addresses that indicate an address e.g. a base address for accessing the POP the streaming tier and or storage tier . These embedded addresses may be configured when installing the intelligent client on a host device e.g. as a file named servers.dat . Additionally in certain embodiments the embedded addresses may be updated dynamically and transmitted to all intelligent clients in the network when and if an additional server or cluster is added to the storage structure . Thus the intelligent client may access a POP using an embedded address such that a Domain Name Service DNS lookup may not be necessary. The media player plays streamed media content and is designed to read certain media content formats. The media player may be part of the intelligent client . The client may request and receive media content from multiple streaming servers or multiple POPs in order to sustain a sufficient bit rate and throughput such that the media content may be displayed with a good quality of service.

Media content that is being currently streamed e.g. a working set may be moved to the streaming servers on the streaming tier . This task may be performed by a content synchronization daemon syncd . The working set may be moved or copied to the streaming tier local disk based on replication rules which may be customizable for each media content originator. However in the majority of embodiments media content will be copied to and remain on the streaming tier based on the popularity of the content. The storage structure makes a best effort i.e. best effort delivery to move working set files onto streaming servers . The ability to move the working set to the streaming tier may be limited by the local disk capacity available on streaming tier . Thus when a streaming server runs out of disk space least recently used LRU files may be deleted from the streaming server to make space while allowing more popular most recently used MRU files to remain on the streaming server. A copy of all media content ingested into the POP is stored in the archive storage in the archive tier . Some media content may be distributed on the storage clusters based on replication rules specified by a media content provider e.g. customer .

The architecture illustrated in may alleviate bottlenecks between the storage tier i.e. storage servers and the streaming tier i.e. streaming servers . More specifically the storage structure for streaming media may include the storage in the storage clusters and also the local disk cache on the streaming servers . Certain storage structure components are responsible for content ingestion and replication across other POPs and for moving and synchronizing content between the disk clusters and the streaming server caches.

The storage structure for streaming media content may thus provide a scalable and high performance storage system. Specifically it is designed as a single logical content repository implemented across multiple storage clusters . It may also be distributed across multiple POPs . While the storage structure may include many storage clusters the content naming scheme that may be managed by the media content management system along with storage structure may allow storage to be viewed as a single large data store. The storage structure may thus be easily scaled up by adding new disk clusters.

Additionally the storage structure may be configured to be a multi tenant repository partitioned across multiple media content provider e.g. customer accounts. Specifically when content from multiple media content providers is ingested into the present system content for each customer is kept separate from each other. Storage quotas may be applied on a per tenant basis.

The home storage cluster of a media file may be assigned based on rules set up in the media content management system e.g. a Video Management System VMS when a media content provider account is created. All of the media content for a single media content provider may have a home on the same cluster. Once content has been ingested into the storage structure its home storage cluster may not be altered as this could result in invalid media URLs that are distributed out in the Internet on media content provider websites . Even though the home cluster storage cluster may not be altered the physical location of the cluster itself may be moved anywhere within the media store e.g. across POPs .

The storage servers may be connected to streaming servers on a streaming tier via a switch . The streaming servers include server caches . The server caches may comprise large amounts of Random Access Memory. The server caches may also comprise local hard disk space. Frequently accessed data that may be more costly e.g. time consuming to retrieve from its original storage location is stored in the server caches . The server caches may thus allow faster access to the media file . The media file located on the storage tier can be distributed to one or more server caches . For example the media file may be distributed such that the media file is cached in the server caches . The client requests the media file via a network e.g. an intranet or the Internet . The media file is streamed from one or more streaming servers . If the media file is not located within the server caches then the media file may be sent to the client from one or more storage servers via one or more streaming servers . The storage structure may cache the media file on the streaming tier i.e. in one or more server caches in the process of fulfilling the request. The client may display the media file

At a logical level the storage structure may be viewed as single large repository. However at a physical level the storage structure may comprise multiple storage clusters . At a physical level storage may also be distributed over multiple POPs . In order to maintain streaming performance content may be available on a cluster at a POP from where it is being streamed. Furthermore if a system component needs to fetch specific media content that is not available in a local cache and storage cluster it may fetch the file from its home storage cluster on another POP 

In certain embodiments a media file received from a media content provider may be flagged as hot when the media file is first uploaded to the storage structure . This hot flag may indicate to the storage structure that the media file has already been selected for storage and caching in the streaming tier . Thus for example a media file that is anticipated to incur a large amount of demand such as a new episode of a popular series may be flagged as hot such that adequate resources are allocated to the media file in anticipation of a large number of requests for that media file from different clients . Additionally or alternatively a media file producer or originator may have the option to flag a media file as hot in exchange for a higher hosting fee even if it is not immediately anticipated that the media file will incur a large amount of demand. This arrangement may be desirable to the producer or originator of the media file due to the fact that the faster processors and network connections of the streaming servers in the streaming tier may provide a better viewing experience to a user than streaming the media file from only the storage tier particularly where the media file is large or in high definition.

The media content storage and streaming provider may determine whether the requested media content is currently cached or stored on the streaming tier . If the media content is currently cached or stored on the streaming tier the media content storage and streaming provider may stream the requested portion to the client . In other words the media content storage and streaming provider may stream the content to the client via one or more streaming servers . If the media content is not currently cached or stored on the streaming tier the media content storage and streaming provider may change the directory. For example the media content storage and streaming provider may change the directory that points to the streaming tier to a directory that points to content on the storage tier .

The media content storage and streaming provider may determine whether the requested media content is stored on the storage tier. If the media content is stored on the storage tier the media content storage and streaming provider may stream the requested portion of the media content to the client . If the media content is not stored on the storage tier the media content storage and streaming provider may send a response to the client indicating that the requested media file was not found. For example the media content storage and streaming provider may send an HTTP 404 e.g. not found response to the client .

For example a user may select a video for streaming. The multi tiered storage structure may store one or more JTV files for the visual portion of the video and a JTA file for the audio portion of the video. Additionally the multi tiered storage structure may store different versions of the same video as one or more MP4 files in addition to a GIF thumbnail file. One exemplary embodiment of this type of asset list is given as follows written in Java Script Object Notation JSON format 

Thus in the above example the files stored by the multi tiered storage structure corresponding to the video may include 

Of course in other embodiments any suitable combination of media files having any suitable format bitrate and size may be used as desired or needed.

The intelligent client may select an appropriate file from the asset list to begin streaming from the multi tiered storage architecture . In certain embodiments this selection may be determined based on the device on which the video is to be played. For example in the above exemplary asset file the larger higher definition H.264 MP4 file may be more suitable for playing on a personal computer screen or a tablet computer e.g. Apple Ipad whereas a smaller lower bitrate or lower definition H.264 MP4 file may be more suitable for playing on a personal media device e.g. Apple Ipod or Iphone . Additionally or alternatively the selection of which file to being streaming may be made based on the speed of a network connection.

In certain embodiments an intelligent client may give priority to file formats that can provide better quality and or compression than other file formats. For example the JTV format typically provides HD quality at a good compression ratio such that the bandwidth requirement to stream a JTV file is considerably lower than what would be required to obtain the same picture quality using other formats. Where a preferred format is not supported by the host system executing the intelligent client the intelligent client may resort to other formats provided in the asset list.

Once the intelligent client has received the asset list from the multi tiered storage structure the intelligent client selects an appropriate version of the media file from the asset list to begin streaming and requests individual portions of the selected version of the selected file from at least one server that stores that version of the file. For example the intelligent client may begin by requesting different portions of a lowest resolution version of the file in a preferred format and assemble those portions such that the web browser plugin can play the video from the assembled portions of the file. The intelligent client may dynamically change to a higher bitrate stream based on network throughput response time and the video processing capabilities e.g. CPU video card available RAM etc. of the host system executing the intelligent client.

As described above in certain embodiments the intelligent client may dynamically vary the number of bytes requested in each portion according to the speed of the network the server from which the portion is requested how urgently a requested portion is needed to provide an uninterrupted viewing experience and any other factor that may suit a particular embodiment of the principles described herein.

The intelligent client may have a built in list of all servers or server clusters within the hierarchy of the multi tiered storage structure . In certain embodiments most or all media files will be replicated at each server in the multi tiered storage structure . In such cases the intelligent client may identify one or more servers in the multi tiered storage structure that are physically the closest in location to the intelligent client and initiate streaming with those servers to reduce the network latencies and receive the content faster. Additionally or alternatively the intelligent client may prioritize streaming from streaming servers in the streaming tier of the multi tiered structure .

However in other embodiments it may be the case that not all of the servers in the multi tiered structure store files related to the video in all of the above formats or even at all. For instance servers or clusters of servers in the streaming tier may only store the video in the most popular format while servers or clusters of servers in the storage tier may collectively store the video in all of its supported formats. Thus the intelligent client may be configured to first identify which servers or clusters of servers in the multi tiered storage structure store the desired file for streaming and make requests only from those servers or clusters of servers. Alternatively the asset list received by the intelligent client may identify where all assets or files linked to the selected video may be found within the architecture of the multi tiered storage structure along with information about each of the different formats. In certain embodiments the asset list will be received from the home storage cluster in the storage tier for the desired video as the home storage cluster may store all available versions of files associated with the video.

In certain embodiments the intelligent client may request the same portions of the same file from redundant servers in the multi tiered storage structure to ensure the fastest delivery of the portions and allow for a faster streaming experience to the user. Additionally or alternatively the intelligent client may request analogous portions of a high resolution version of the video and a low resolution version of the video such that if the high resolution portion is received in time that portion of the video will be played in high resolution whereas if a high resolution portion of the video is not received in time a received corresponding low resolution version portion of the video will be played in its stead.

The intelligent client may dynamically update its requests for file portions as needed to provide an optimal streaming experience. For example as described in one embodiment above the intelligent client may dynamically switch between high and low resolution versions of a video file according to the speed at which the requested portions of the video are received over the network. Additionally the intelligent client may dynamically change the servers or clusters of servers from which portions of the selected video are requested according to a determined connection speed to each server or cluster of servers. Thus in some examples the intelligent client may request the same portion of the same file from different servers or clusters of servers in the multi tiered storage structure to determine which of the servers or clusters of servers in the multi tiered storage structure respond the fastest. The intelligent client may thereafter direct more requests to the servers or clusters of servers having the fastest response times.

By dynamically adjusting the number of connections between the intelligent client and servers or clusters of servers in the multi tiered structure the sources from which portions of the selected video are requested and the format and resolution of the files from which portions of the selected video are requested the intelligent client may continuously provide the best possible file streaming experience to the user irrespective of changing network conditions.

A media store as referred to herein includes storage on the storage clusters as well as the media caches on the streaming servers . Media store components are responsible for content ingestion and replication across the POPs . Media store components are also responsible for moving content between the storage clusters and the media caches on the streaming servers . The media store services may include a content replication module staging module media ingestor and a work queue . The content replication module may replicate content from a media content provider into the staging module . The staging module may store media content in staging storage . At that point the media ingestor creates an entry in the work queue . The work queue may be a database that includes a number of work items. For example the work queue includes a list of media content to be ingested into the storage clusters and or streaming servers . Other work items may also be included in the work queue e.g. a particular piece of media content needs to be replicated to another storage server to another POP etc. . The media ingestor moves media content from staging storage into the storage clusters and or the streaming servers of one or more POPs . It may also distribute the media content throughout the storage clusters and or the streaming servers based on rules specified by a media content provider . For example when a media content provider anticipates a particular piece of media content to be popular in certain regions the media content provider may dictate that the media content should be distributed on certain POPs . It may also be anticipated that a particular piece of media content will be heavily requested. According to media content provider rules the media content should be placed on one or more streaming servers .

The media ingestor may provide a playlist along with the media content. The playlist includes a listing of files associated with a piece of media content. For example the playlist may include a listing of different video audio format files e.g. different resolutions bitrates different file formats such as Windows Media Flash etc. audio files e.g. different language audio files associated with video content etc. subtitle files etc.

The storage clusters include storage modules for one or more POPs . Each storage module include a store and a cache . The streaming servers may include one or more media caches . The streaming servers may interact with one or more synchronization daemons i.e. Labeled syncd in for convenience . The synchronization daemons may be responsible for replicating popular media content into the media caches . This may provide an improvement in streaming performance. The synchronization daemons are software components that are configured to use traffic statistics obtained from the streaming servers and or a media content profile e.g. whether a video is expected to have a large number of streaming views or whether it is a long tail limited view content to determine what media content needs to be available in the streaming server media caches 

While the media caches may contain frequently accessed media content the media content will also be available at a storage cluster home location. This home location may be identified by a content ID or URL. During ingestion the media content is placed on a home storage cluster and other clusters . Content may or may not be placed into the media cache on streaming servers during ingestion. The media content storage and streaming provider may rely entirely on the media cache synchronization daemons to selectively move and synchronize high demand content to the streaming server media caches based on viewing statistics and demand for the content. Alternatively the system may rely on media content provider specific replication rules in addition to the media cache synchronization daemons in order to govern content ingestion and replication. That is content ingestion and replication may be based on media content provider specific replication rules that support replication of content directly across multiple storage clusters in different POPs . Furthermore content that is expected to be in heavy demand may be placed in the streaming server media caches according to the media content provider specific replication rules in order to improve performance. Accordingly a media content provider may set a profile of specific content as likely to have high demand. When this content is ingested the media ingestor may recognize the content as likely to have high demand and may place the content in a home storage cluster and directly replicate the content to a number of streaming servers .

Each media content provider directory may include one or more content directories . Each piece of media content is placed in a single content directory. That is each content directory includes only files associated with a single piece of media content. For example all of the files associated with a particular video e.g. different formats different resolutions subtitles audio tracks etc. might be placed in a content directory A for that particular video. Each of the content directories are named using a content ID assigned to the media content by the media content management system e.g. VMS during ingestion. A content directory may include a playlist file and one or more content asset files e.g. for video audio sub titles etc. . For example the playlist file may be named 1st and placed in the content directory A . Content assets may be files associated with a particular piece of media content. For example assets may be video files audio files subtitle files etc. Each content asset for a given piece of media content may have a unique content asset ID. Content asset files are placed in a content directory e.g. folder . Each content asset file may have an entry in the playlist file that specifies the type of asset bit rate and so on. This information is used by the media player for playback.

The streaming servers and storage servers are connected to the switch . The switch may be connected to a router . The router may be an electronic device used to route data between electronic devices on a network. The router may be connected to a network e.g. intranet the Internet . Although only five storage servers and five streaming servers are illustrated in many more storage servers and streaming servers may be included in a storage structure for streaming media content. Although only one switch and one router are illustrated in many more switches and routers may be included in a storage structure for streaming media content. Additionally although only one block is used to illustrate the archive disks in many collections or bricks of archive disks may be included in a storage structure for streaming media content.

The storage server streaming server and or client include a processor and memory . The memory may include instructions and data . The processor controls the operation of the storage server streaming server and or client and may be a general purpose single or multi chip processor a special purpose processor e.g. a digital signal processor DSP a microcontroller a programmable gate array etc. The processor may be referred to as a central processing unit CPU . Although just a single processor is shown in the storage server streaming server and or client of in an alternative configuration a combination of processors could be used. The processor typically performs logical and arithmetic operations based on program instructions and or data stored within the memory .

The storage server streaming server and or client also include memory in electronic communication with the processor i.e. the processor can read information from and or write information to the memory . The memory may be any electronic component capable of storing electronic information. The memory may be a random access memory RAM read only memory ROM magnetic disk storage media optical storage media flash memory devices in RAM on board memory included with the processor programmable read only memory PROM erasable programmable read only memory EPROM electrically erasable PROM EEPROM registers and so forth including combinations thereof.

Data and instructions may be stored in the memory . The instructions may include one or more programs routines sub routines functions procedures etc. The instructions may include a single computer readable statement or many computer readable statements. The instructions may be executable by the processor to implement the methods that are described herein. Executing the instructions may involve the use of the data that is stored in the memory . shows some instructions and data being loaded into the processor .

The storage server streaming server and or client typically may include one or more communication interfaces for communicating with other electronic devices. The communication interfaces may be based on wired communication technology wireless communication technology or both. Examples of different types of communication interfaces include a serial port a parallel port a Universal Serial Bus USB an Ethernet adapter an IEEE 1394 bus interface a small computer system interface SCSI bus interface an infrared IR communication port a Bluetooth wireless communication adapter and so forth.

The storage server streaming server and or client typically may include one or more input devices and one or more output devices . Examples of different kinds of input devices include a keyboard mouse microphone remote control device button joystick trackball touchpad lightpen etc. Examples of different kinds of output devices include a speaker printer etc. One specific type of output device which may be typically included in a computer system is a display device . Display devices used with the configurations disclosed herein may utilize any suitable image projection technology such as a cathode ray tube CRT liquid crystal display LCD light emitting diode LED gas plasma electroluminescence or the like. A display controller may also be provided for converting data stored in the memory into text graphics and or moving images as appropriate shown on the display device .

Of course illustrates only one possible configuration of a storage server streaming server and or client . Various other architectures and components may be utilized.

As with previously described embodiments storage servers and the streaming server are communicatively coupled through a network switch . In the present example of the storage servers and streaming server are interconnected through mutual 10 Gb Ethernet connections to the network switch .

The streaming server may have optimized hardware and software for fast streaming of content. For example the streaming server may run highly specialized server software designed for streaming performance. As such in certain embodiments the streaming server may have more local cache storage e.g. RAM and less disk based storage than the storage servers . Consequently where the streaming server may have a significantly greater capacity for streaming throughput than the storage servers the storage servers may have a much greater volume of capacity for storage.

Thus while a synchronization daemon of the media content management services implemented in the architecture may cause certain media content stored on the storage servers to be replicated on the streaming server the possibility remains that a client may request media content that is only available from the storage servers . In particular a streaming server may only replicate the most popular media content and or media content that has been specifically designated for replication by the streaming server . However by virtue of the fact that not all media content available from the architecture may be stored locally by the streaming server the streaming server may on occasion rely on media content stored by the storage servers to fulfill client requests. In such cases the streaming server may either return an error to the client redirect the client to one of the storage servers or forward a request for content received from the client to one or more of the storage servers by reverse proxy.

In certain embodiments the streaming server may be a lightweight asynchronous server designed to efficiently serve small static content i.e. 128K to 2M video file portions . To improve server performance certain embodiments of the streaming server may not support dynamic content applications such as Fast CGI PHP or any other CGI application. Rather the streaming server may be optimized to simply process client requests for portions of media content files and deliver the requested portions. As described above these client requests may be in the form of simple HTTP GET requests such that the streaming server relies on intelligent clients to perform load balancing flow control and maintain end to end QOS during video streaming. By shifting this processing functionality to the intelligent clients the requirements of the streaming server may be significantly simplified thereby improving the efficiency and throughput of the streaming server .

An additional benefit of the streaming server may be the use of co routines instead of separate processes or threads in the front end processing of the streaming server for server client connection control. Separate processes or threads in this context may incur significant overhead during setup and tear down operations. By contrast co routines are lightweight and non preemptive. Furthermore co routines incur negligible system overhead as they do not block or wait on I O events. Rather co routines become suspended yield to another co routine and eventually become rescheduled.

The use of co routines rather than separate threads or processes in the front end processing of the streaming server may further provide the advantage of preventing locking due to the fact that co routines do not execute concurrently.

In certain embodiments the size of the co routine stack in the streaming server may be fixed and therefore the operating system of the streaming server must configure the stack wisely to avoid any potential stack overflow issue. By reducing or eliminating the need to manipulate user space buffers the amount of co routine stack required by the streaming server may be kept low. For example in certain embodiments of streaming servers the co routine stack memory requirement may be as low as 64K on a Linux operating system and 1 MB or lower for a Sun Solaris operating system.

Additionally by implementing the functionality of the streaming server in compact code written in a programming language selected for speed the functionality of the streaming server may be further streamlined. For example in one embodiment the asynchronous server functionality may be implemented in around 6500 lines of code written in C for speed. Such embodiments have been shown to handle up to 50 000 concurrent client connections while consuming a rather small amount of memory i.e. less than 100 MB .

At the front end of the streaming server a listener co routine listens on the network socket and creates a new service co routine each time an incoming connection is handled. The co routine objects and stack objects are dynamically allocated and stored into a pool and are reused rather than destroyed to avoid any unnecessary dynamic allocation overhead. The co routine front end sub system is completely event driven and based on non blocking asynchronous I O. According to one exemplary embodiment the co routing front end sub system relies on the epoll system call for efficient I O event scheduling. Epoll is a variant of poll that can be used either as Edge or Level Triggered interface and scales well to large numbers of watched file descriptors.

In the present exemplary system front end service co routines are responsible for parsing the client requests locating the files referenced in the requests checking permissions associated with the requests and enqueuing write or sendfile jobs directly to a send queue . According to one embodiment a service co routine first looks for the requested media content file of a client request in the file system cache or storage of the local storage in the streaming server. Upon finding the requested media content file the service routine opens the file and saves the open state file descriptor in the connection object and sets up kernel read ahead if supported. Read ahead functionality is where the kernel preemptively prepares additional portions of requested file for sending in anticipation that those portions will also be requested by the same client. Additionally according to one embodiment the system is further optimized by keeping file descriptors open during the lifetime of a persistent connection i.e. HTTP 1.1. has been negotiated with the client .

The service co routine may also fully validate the request attributes and return a 400 or a 500 HTTP error code if the received request is invalid or not formatted properly. If the requested byte range in the 206 bytes request is greater than the end of file and or not able to be satisfied the service co routine will return a 416 HTTP error response.

Once the service co routine has fetched the meta data for a particular media content data file such as a video the service co routine then creates a Linux sendfile or equivalent job and en queues job on a send queue . Once queued up the submitted job is taken by one of a plurality of back end write worker threads which perform the sendfile job thereby sending the requested portion of the media content file to the client over TCP HTTP.

The sendfile command in Linux and equivalent commands in other operating system kernels are used to send requested data directly from a local storage location to a TCP socket. This sending of the data is implemented within the kernel and can therefore be performed without first copying the requested data to an intermediate location. As such by using sendfile and its equivalents in other operating systems a streaming server may implement a zero copy policy for streaming locally stored data from host memory into network card buffers. Locally stored data to be transferred may be taken directly from system buffers 4K pages without context switching and without trashing the cache. Because copying data to intermediate locations typically consumes significant resources the use of sendfile and its equivalents to implement zero copy policies greatly enhances the efficiency and speed of the streaming server. Furthermore as will be described in more detail below the present specification provides novel methods to implement sendfile and its equivalents when serving data from a separate server by reverse proxy such that the streaming server implements a one copy policy when serving remotely stored data to the client.

In certain embodiments TCP CORK in Linux may be used to prevent queued partial frames from being sent to the TCP socket while data for the frames is still being retrieved from local storage.

As described above it may be the case that a media content file requested by a client is not stored locally by a streaming server that receives the request. In certain embodiments the streaming server may be configured to act as a reverse proxy for one or more servers located on the storage tier to implement a more autonomous system and avoid sending the client an error message.

In proxy mode the listener co routine assigns an incoming client request to a new service co routine which first searches local storage for the requested media content file. If the file is not found locally the service co routine queries a name lookup service for the location of the file on the architecture of interconnected servers and initiates a proxy connection to a remote resource that stores the requested file. The name lookup service may maintain a map of all resources stored in the architecture and be able to map URLs received from clients to media storage server or cluster names or IP addresses. The name lookup service may work in conjunction with a management system of the architecture to maintain the resource map.

The remote resource may be a single server or a cluster of servers at for example a storage tier of the architecture. If the data has been replicated and several copies of the requested file exist across the architecture the service co routine may proxy to each resource storing the requested file in a round robin fashion to balance the load across multiple back end systems. The query to the remote resource s may be based on the data content URL received from the client or player.

Once the service routine has successfully established a connection to a remote resource by reverse proxy the service routine may enqueue a proxy job for that resource related to the client request on a proxy queue where the proxy job will be retrieved from the proxy queue by a back end thread that polls for available data on the proxy connection and copies the HTTP response header and payload from the remote resource s to a shared memory buffer pool . The shared memory buffer pool uses shared memory in the kernel which is faster than the standard file system implemented by the streaming server for locally stored media content. Locations in the shared memory buffer pool may be mapped to addresses within the local file storage system. In this way sendfile may be used to transmit the data from the remote resource s directly to the client through the TCP socket without requiring additional copying of the data.

Now that the requested portion of the specified media content file is in shared memory a new sendfile or equivalent job may be enqueued in a send queue for the data and a back end thread may perform the sendfile or equivalent job to transmit the requested portion of the specified media content file to the requesting client.

At present sendfile and its equivalents do not support socket to socket transmission of data. As such the example described incurs a one copy penalty when responding to a client request by reverse proxy to a remote resource . However it will be readily apparent that a direct socket to socket transmission of reverse proxy data further optimizes the performance of the streaming server. For example in certain embodiments TCP splicing may be used to splice a TCP connection between the streaming server and the remote resource with a TCP connection between the streaming server and the client to produce an implementation in which the requested file portion is transmitted by reverse proxy directly to the client with a zero copy penalty.

According to one exemplary embodiment a proxy enabled streaming server consistent with the above principles was able to achieve 9 Gbps of outbound throughput over a single 10 G physical interface and 14 Gbps over dual 10 G interfaces with response time delays in the 10 ms range. Measurements were collected on Sun Cool thread hardware running Solaris 10 with the streaming server rated at a 97 system efficiency level. Those figures apply to the case where most of the data comes out of memory. According to one exemplary embodiment the proxy enabled streaming server is configured to use the intrinsic least recently used LRU caching feature of the Linux Kernel. For this model to work well some higher entity must guarantee that popular or hot content is synced to the front tier while less popular data typically long pull stays on the origin back end server.

The streaming server may be configured to act as a reverse proxy via a flag in the httpd configuration. For example an httpd configuration file for a streaming server consistent with the above principles may have the option to set a SRV PROXY field to either 1 or 0 where 1 indicates that a proxy mode is enabled and 0 indicates that the proxy mode is disabled.

According to one exemplary embodiment the following format may be used for the Uniform Resource Identifier URI received by the streaming server to identify a requested portion of a specified media content file 

Conventionally to obtain a portion of a file from a server an HTTP partial GET request is utilized which the server responds to with an HTTP 206 response. However because partial GET requests and 206 responses are suspect in many network firewalls the use of partial GET requests in a streaming server to retrieve client specified portions of media content files may result in the certain client requests or the responses thereto being filtered by a firewall between the client and the streaming server. Thus specifying the byte range of the requested portion of the selected media content file directly in the URI provides the advantage of mitigating the risk that service to a client will be interrupted or prevented by a network firewall in addition to consolidating the entire request within the URI itself.

In the above description reference numbers have sometimes been used in connection with various terms. Where a term is used in connection with a reference number this is meant to refer to a specific element that is shown in one or more of the Figures. Where a term is used without a reference number this is meant to refer generally to the term without limitation to any particular Figure.

The term determining encompasses a wide variety of actions and therefore determining can include calculating computing processing deriving investigating looking up e.g. looking up in a table a database or another data structure ascertaining and the like. Also determining can include receiving e.g. receiving information accessing e.g. accessing data in a memory and the like. Also determining can include resolving selecting choosing establishing and the like.

The phrase based on does not mean based only on unless expressly specified otherwise. In other words the phrase based on describes both based only on and based at least on. 

The term processor should be interpreted broadly to encompass a general purpose processor a central processing unit CPU a microprocessor a digital signal processor DSP a controller a microcontroller a state machine and so forth. Under some circumstances a processor may refer to an application specific integrated circuit ASIC a programmable logic device PLD a field programmable gate array FPGA etc. The term processor may refer to a combination of processing devices e.g. a combination of a DSP and a microprocessor a plurality of microprocessors one or more microprocessors in conjunction with a DSP core or any other such configuration.

The term memory should be interpreted broadly to encompass any electronic component capable of storing electronic information. The term memory may refer to various types of processor readable media such as random access memory RAM read only memory ROM non volatile random access memory NVRAM programmable read only memory PROM erasable programmable read only memory EPROM electrically erasable PROM EEPROM flash memory magnetic or optical data storage registers etc. Memory is said to be in electronic communication with a processor if the processor can read information from and or write information to the memory. Memory that is integral to a processor is in electronic communication with the processor.

The terms instructions and code should be interpreted broadly to include any type of computer readable statement s . For example the terms instructions and code may refer to one or more programs routines sub routines functions procedures etc. Instructions and code may comprise a single computer readable statement or many computer readable statements.

The term computer readable storage medium refers to any available medium that can be accessed by a computer. By way of example and not limitation a computer readable medium may comprise RAM ROM EEPROM CD ROM or other optical disk storage magnetic disk storage or other magnetic storage devices or any other medium that can be used to carry or store desired program code in the form of instructions or data structures and that can be accessed by a computer. Disk and disc as used herein includes compact disc CD laser disc optical disc digital versatile disc DVD floppy disk and Blu ray disc where disks usually reproduce data magnetically while discs reproduce data optically with lasers. The term computer readable storage medium expressly does not encompass a signal per se or any nontangible article.

Software or instructions may also be transmitted over a transmission medium. For example if the software is transmitted from a website server or other remote source using a coaxial cable fiber optic cable twisted pair digital subscriber line DSL or wireless technologies such as infrared radio and microwave then the coaxial cable fiber optic cable twisted pair DSL or wireless technologies such as infrared radio and microwave are included in the definition of transmission medium.

The methods disclosed herein comprise one or more steps or actions for achieving the described method. The method steps and or actions may be interchanged with one another without departing from the scope of the claims. In other words unless a specific order of steps or actions is required for proper operation of the method that is being described the order and or use of specific steps and or actions may be modified without departing from the scope of the claims.

It is to be understood that the claims are not limited to the precise configuration and components illustrated above. Various modifications changes and variations may be made in the arrangement operation and details of the systems methods and apparatus described herein without departing from the scope of the claims.

