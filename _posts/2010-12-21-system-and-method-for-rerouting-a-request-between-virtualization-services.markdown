---

title: System and method for rerouting a request between virtualization services
abstract: A system is provided to reroute a request received within one virtualization service for processing within another virtualization service. The system comprises an offload manager, and a response service module. The offload manager may be configured to determine that an overflow request from a client computer system is suitable for being processed at a computer system provided within a second virtualization service and, in response, reroute the overflow request to a computer system provided within a second virtualization service. The response service module may be configured to receive a result of processing of the overflow request from the computer system provided within the second virtualization service and prepare the received result for communicating to the client computer system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08739175&OS=08739175&RS=08739175
owner: Adobe Systems Incorporated
number: 08739175
owner_city: San Jose
owner_country: US
publication_date: 20101221
---
This disclosure relates generally to the technical fields of software and or hardware technology and in one example embodiment to system and method to reroute a request received within one virtualization service for processing within another virtualization service.

The approaches described in this section could be pursued but are not necessarily approaches that have been previously conceived or pursued. Therefore unless otherwise indicated herein the approaches described in this section are not prior art to the claims in this application and are not admitted to be prior art by inclusion in this section.

The phrase cloud computing refers to an architectural paradigm in which computation is moved from local servers to a remote service that provides computation as a commodity or utility. A cloud is typically a large collection of shared commodity computation resources that can be interchangeably provisioned in response to clients computation requests. Cloud computing is frequently used in software as a service SaaS application architectures and may be viewed as an implementation choice for application deployment that leverages shared resources and improved cost structure of the cloud. A cloud computing approach may be used to implement a variety of computational paradigms such as virtual machines jobs remote procedure calls traditional servers etc.

In the following detailed description numerous specific details are set forth to provide a thorough understanding of claimed subject matter. However it will be understood by those skilled in the art that claimed subject matter may be practiced without these specific details. In other instances methods apparatuses or systems that would be known by one of ordinary skill have not been described in detail so as not to obscure claimed subject matter.

Some portions of the detailed description which follow are presented in terms of algorithms or symbolic representations of operations on binary digital signals stored within a memory of a specific apparatus or special purpose computing device or platform. In the context of this particular specification the term specific apparatus or the like includes a general purpose computer once it is programmed to perform particular functions pursuant to instructions from program software. Algorithmic descriptions or symbolic representations are examples of techniques used by those of ordinary skill in the signal processing or related arts to convey the substance of their work to others skilled in the art. An algorithm is here and generally considered to be a self consistent sequence of operations or similar signal processing leading to a desired result. In this context operations or processing involve physical manipulation of physical quantities. Typically although not necessarily such quantities may take the form of electrical or magnetic signals capable of being stored transferred combined compared or otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to such signals as bits data values elements symbols characters terms numbers numerals or the like. It should be understood however that all of these or similar terms are to be associated with appropriate physical quantities and are merely convenient labels. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout this specification discussions utilizing terms such as processing computing calculating determining or the like refer to actions or processes of a specific apparatus such as a special purpose computer or a similar special purpose electronic computing device. In the context of this specification therefore a special purpose computer or a similar special purpose electronic computing device is capable of manipulating or transforming signals typically represented as physical electronic or magnetic quantities within memories registers or other information storage devices transmission devices or display devices of the special purpose computer or similar special purpose electronic computing device.

A computing application also referred to as merely an application may be made available to users by deploying the application on one or more virtual instances of a machine running on a cloud i.e. within a public or a private virtualization space. A virtualization space also referred to as a cloud may be provided by different providers. As each virtualization space provider may utilize a proprietary set of APIs that need to be used by applications a virtualization space provided by a particular provider may require a specific set of accommodations that would need to be implemented with respect to a computing application in order to deploy that application on a cloud using that particular provider s virtualization space.

A computing application may be launched on a cloud by instructing the cloud provider to access one or more machine images containing the application description and load the one or more machine images onto the physical machines provided by the cloud provider and make it accessible to the user via a network. A machine image is a read only boot image that is used for launching an instance of a virtual machine running one or more components of the requested computing application. One or more machine images representing a computing application may be provided to a network storage system e.g. Amazon S3 by a control server also referred to as a controller .

A system that provisions and manages a computing application hosted on one or more virtual instances of a machine may be referred to as a hosted service system. A hosted service system may be configured to provide automated administration of a computing application replacing the administration tasks that would otherwise be performed by the customer when running in an on premise production deployment. The technology within an example hosted service system may hide the behavior of the underlying virtualization service and provide instances of a computing application that are substantially indistinguishable e.g. in terms of reliability security and performance from local on premise deployments of the computing application. For example a hosted service system may provision and manage computing applications such as a generic content server Adobe LiveCycle Enterprise Suite ES and Adobe ConnectPro offered by Adobe Systems Incorporated etc. While embodiments of the smart scheduler are described with reference to Amazon EC2 service other virtualization services may be utilized.

In operation a user can access a provider s web site and request to launch a computing application that can be deployed remotely on a plurality of virtual instances of a machine on a cloud such that the user no longer is required to deploy the computing application locally within their own data center on their own hardware. A request may be triggered by a user e.g. by activating a visual control such as a Start button presented on a web page. The control server forwards the request to the access interface of the network storage which causes the bootstrapping sequence to be started. The bootstrapping of the implementation object involves establishing a connection to the cloud provider s service and setting up initial databases and file buckets as required.

When a computing application a content server for example is executing in a cloud requests from a client computer system directed to the content server are queued in an input queue that is maintained by the virtualization service. Depending on the nature of an application provisioned by the hosted service for executing within a virtualization service in a cloud it may be beneficial to utilize more than one cloud infrastructure offered respectively by different virtualization service providers. For example where an input queue maintained by the virtualization service provider appears to be oversubscribed it may be desirable to offload some of the requests from the input queue to an input queue maintained by another virtualization service provider so that these requests are processed by one or more instances of a virtual machine also referred to as nodes provided by that other virtualization service provider. Such rerouting of a request received within one virtualization service for processing within another virtualization service may be termed cloud bursting. 

In one example embodiment cloud bursting may be implemented where a computing application is executing one or more stateless services that can be replicated across multiple clouds. A stateless service is a service that does not require state information to be maintained from one request to another such that each request is self contained. Examples of such services include document services e.g. services provided by Adobe LiveCycle . In one embodiment cloud bursting may be implemented with respect to a content server where a content service is invoked as follows a client passes request metadata and a request data stream the service in response returns response metadata and a response data stream. Cloud bursting may be applied to asynchronous requests as it may be difficult to predict with precision how long it would take to process a request in a different cloud.

A read only machine image comprising a cloud bursting service module may be stored at network storage locations accessible by respective virtualization service hosts that are expected to participate in cloud bursting. Upon a request from a hosted service system a virtual service host may access the machine image and load the cloud bursting service on an instance of a virtual machine. A diagrammatic representation of an environment within which cloud bursting is taking place is shown in .

As shown in the environment includes a client computer system that can be referred to as merely client and two clouds provided by two virtualization services a cloud and a cloud . The cloud maintains a queue service comprising an input queue and an output queue a local service node and a storage service . The local service node comprises one or more instances of a virtual machine executing a computing application e.g. a content server. The storage service stores content that is maintained by the content server and that can be accessed by and or manipulated by the client computer system . A cloud bursting service executing on the cloud is represented by an offload manager and a response service .

The cloud maintains a queue service comprising an input queue and a remote service node . The remote service node comprises one or more instances of a virtual machine executing the same computing application as the local service node . A cloud bursting service executing on the cloud is represented by a request service .

The client makes asynchronous requests to the content server executing on the local service node . These requests are stored in the input queue . The offload manager examines the queued requests and determines which requests can be cloud burst sent for processing in the cloud . The offload manager may be configured to make a determination of whether cloud bursting is appropriate by e.g. examining the size of the input queue the number of requests stored in the input queue the rate at which the input queue is being drained or filled the nature or type of the requests stored in the input queue etc. Monitoring of the input queue could also involve determining whether a particular request may be processed beneficially using specialized hardware that may be available only in another cloud or computing or determining whether performing an operation in another cloud may be more cost efficient.

For each request to be cloud burst the offload manage packages such request that may be termed an overflow request as a remote request and sends it to the request service provided in the cloud . When the request service returns an acknowledgement of receipt of the overflow request the offload manager removes the overflow request from the input queue so that it no longer needs to be processed by the local service node .

The remote request received by the request service from the offload manager is processed by the remote service node . In one embodiment remote requests received handled by the remote service node do not contain data stream. Instead the remote service node accesses the storage service maintained by the cloud when it needs to obtain input data for the remote request. Upon processing of the remote request the remote service node writes the result metadata and the associated data stream to the response service running in the cloud . The response service in turn formats the received result on the output queue so that it is indistinguishable from the perspective of the client whether the request was processed in the cloud or in the cloud . While as shown in a cloud bursting service executing on the cloud is represented by the offload manager and the response service and a cloud bursting service executing on the cloud is represented by a request service in some embodiments a cloud bursting service provided in a cloud may include all three components an offload manager a response service and a request service in order to permit cloud bursting in both directions.

An example architecture within which method and system to provision on a cloud a computing application and an associated service provider interface may be implemented is described with reference to an architecture diagram illustrated in . The architecture may include a client computer system corresponding to the client of and a hosted service system . In one example embodiment the hosted service system is to provision and manage an enterprise SaaS product utilizing a cloud based computing service as a virtualization infrastructure. Cloud based computing services as shown in are provided by a virtualization service host and a network storage service together corresponding to the cloud of . In one embodiment a hosted service system utilizes Amazon Elastic Compute Cloud EC2 service as a virtualization service and Amazon Simple Storage Service Amazon S3 as a network storage service. In some embodiments the hosted service system may utilize more than one virtualization service host e.g. one host being Amazon EC2 and another host provided by Adobe Systems Incorporated that may be viewed as corresponding to the clouds and of . The client computer system and the hosted service system may be in communication with each other via a communications network that may be a public network e.g. the Internet .

The virtualization service host accesses the storage of the network storage system to obtain one or more machine images in order to load the instance of a virtual machine executing a computing application and a cloud bursting service . In some embodiments however the computing application and the cloud bursting service may be executing on different instances of a virtual machine. Also while in some embodiments the computing application and the cloud bursting service may be loaded from the same machine image in other embodiments the computing application and the cloud bursting service are loaded from different machine images.

The computing application may be accessed by the client via a browser application . As mentioned above a user in control of the client computer system may send a request to the hosted service system to load the computing application . The request may be initiated via a user interface provided by the hosted service system to the client computer system via the browser application .

The user interface in one embodiment provides both an end user s and a system administrator s view of the computing application and also permits issuing control operations to the computing application and permits viewing the resulting changes in the state of the computing application . For example where a computing application provided by the computing application is a content server an end user may manipulate various electronic forms. The user interface may also serve as a source of information for the hosted service system including documentation downloads and support. The user interface in one embodiment uses Adobe Flex software offered by Adobe Systems Incorporated as the user interface technology for the implementation of the user interface. The user interface in one embodiment uses an XML Extensible Markup Language based representational state transfer REST style secure communications protocol to synchronize its operations with a control server . A request to access the user interface may be authenticated using one of a variety of authentication techniques.

The request from the client computer system to load the computing application is received at the control server which responds to the request by activating an access interface provided by the virtualization service host . The control server in one example embodiment provides coordination between the components of the architecture provides administration and monitoring of the virtualization service host and also may be configured to audit system usage and resource allocation with respect to the computing application . The control server includes a database to store information pertaining to various aspects of system usage. The control server in one embodiment runs within a standard Hypertext Transfer Protocol Secure HTTPS compliant web server and may be deployed as a publically accessible web application that is available outside a firewall.

The virtualization service host accesses the storage of the network storage system to obtain one or more machine images in order to load the associated computing application and the cloud bursting service . The machine images can be uploaded to the network storage system by the control server utilizing an access interface provided with the network storage system . The hosted service system further includes a secure networking client to provide a bidirectional encrypted compressed connection between a machine in the end user s secure network environment e.g. the client computer system and one or more instances of a virtual machine running within the virtualization infrastructure the computing application . The networking client manages various aspects of transmission control protocol TCP traffic forwarding encryption and network discovery such that the user can access the computing application as if it was running locally on the user s machine. In this mode the user s network security envelope may be extended to surround the computing application using comparable levels of encryption and protection against network security threats.

As explained above a cloud bursting service e.g. the cloud bursting service may be used to offload a request directed to a computing application executing in a cloud hosted by one virtualization provider to be processed in a cloud hosted by another virtualization provider not shown . In order to use cloud bursting from one cloud into another cloud the hosted service system may provide a machine image for launching the cloud bursting service and a machine image for launching the computing application to respective network storage locations accessible by the two virtualization service hosts that provide the two clouds. As mentioned above cloud bursting may also be beneficial for processing certain high priority requests that could be more quickly handled by another cloud that e.g. may have specialized hardware that can be leveraged or for achieving lower costy by sending certain requests to another cloud. Some components of a cloud bursting service are described with reference to .

The response service module may be configured to receive from a virtual instance of a machine provided within the second virtualization service the cloud of a result of processing of the overflow request. The response service module may also prepare the received result for communicating to the client computer system. The cloud bursting service may also include a rules engine configured to store rules for determining that the state of an input queue is indicative of overflow requests. The cloud bursting service may also include a request service module not shown that may correspond to the request service shown in in an embodiment where a cloud bursting service is intended to reroute requests to another cloud as well as to receive and process rerouted requests from another cloud. Example operations performed by the system are discussed below with reference to .

As shown in the method commences with operation where the offload manager of determines that an overflow request received at a virtual instance of a machine provided within a first virtualization service the cloud of from a client computer system of is suitable for being processed at a virtual instance of a machine provided within a second virtualization service the cloud of . At operation the offload manager reroutes the overflow request to a virtual instance of a machine provided within the second virtualization service. At operation the response service module of receives using the response service of executing within the first virtualization service the cloud from a virtual instance of a machine provided within the second virtualization service the cloud a result of processing of the overflow request. At operation the response service module prepares the received result for communicating to the client computer system .

The example computer system includes a processor e.g. a central processing unit CPU a graphics processing unit GPU or both a main memory and a static memory which communicate with each other via a bus . The computer system may further include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT . The computer system also includes an alphanumeric input device e.g. a keyboard a user interface UI cursor control device e.g. a mouse a disk drive unit a signal generation device e.g. a speaker and a network interface device .

The disk drive unit includes a computer readable or machine readable medium on which is stored one or more sets of instructions and data structures e.g. software embodying or utilized by any one or more of the methodologies or functions described herein. The software may also reside completely or at least partially within the main memory and or within the processor during execution thereof by the computer system the main memory and the processor also constituting machine readable media.

The software may further be transmitted or received over a network via the network interface device utilizing any one of a number of well known transfer protocols e.g. Hyper Text Transfer Protocol HTTP .

While the machine readable medium is shown in an example embodiment to be a single medium the term machine readable medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine readable medium shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention or that is capable of storing or encoding data structures utilized by or associated with such a set of instructions. The term machine readable medium shall accordingly be taken to include but not be limited to solid state memories optical and magnetic media. Such medium may also include without limitation hard disks floppy disks flash memory cards digital video disks random access memory RAMs read only memory ROMs and the like.

Thus method and system to reroute a request received within one virtualization service for processing within another virtualization service have been described. Example approaches described herein may be utilized beneficially with a variety of computing applications such as e.g. content servers and cloud management systems.

The embodiments described herein may be implemented in an operating environment comprising software installed on a computer in hardware or in a combination of software and hardware. Although embodiments have been described with reference to specific example embodiments it will be evident that various modifications and changes may be made to these embodiments without departing from the broader spirit and scope of the invention. Accordingly the specification and drawings are to be regarded in an illustrative rather than a restrictive sense.

