---

title: Client session based debugging
abstract: Debugging operations on individual client sessions for a remotely executed shared application are enabled to be performed as the client requests are processed on the executing server without disrupting execution of other client sessions. A remote debugging client may connect to a debugging engine executed on the server allowing the debugging client to view source code, set breakpoints, view client connections, and receive callbacks or notifications when a breakpoint is hit by the client session being debugged. The debugging client may also control execution by stepping through client code enabling debugging of multiple clients simultaneously.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08171346&OS=08171346&RS=08171346
owner: Microsoft Corporation
number: 08171346
owner_city: Redmond
owner_country: US
publication_date: 20100310
---
With the proliferation of network communications and bandwidth availability remote applications have become a common occurrence. Instead of installing maintaining debugging updating and performing similar operations on a large number of client devices for the same application the application may be executed in a single server with the client devices accessing it through individual sessions. The ability to serve multiple clients through a single application on a remote server reduces maintenance costs eases update and problem solving operations and reduces a need for requiring minimum system parameters from clients. For example modern application codes are relatively large compared to older versions requiring larger memory and processing power for the executing machines. On the other hand accessing a remotely executed application a client device may not need to have the same system resources as it would need if the application was executed on the same client device.

Debugging an application executed on a remote server or service may be a challenging task. If the service handles multiple concurrent requests from clients allowing the debugging to block other clients may degrade the user experience. Reliability and security are also concerns with concurrent debugging. When debugging of client processes are performed on a thread or process level debugging operations may affect servicing of requests by other clients.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This summary is not intended to exclusively identify key features or essential features of the claimed subject matter nor is it intended as an aid in determining the scope of the claimed subject matter.

Embodiments are directed to performing debugging operations on individual client sessions for a remotely executed shared application physically or process wise as the client requests are processed on the executing server without disrupting execution of other client sessions. According to some embodiments a remote debugging client may connect to a debugging engine executed on the server allowing the debugging client to view source code set breakpoints view client connections and receive callbacks or notifications when a breakpoint is hit by the client session being debugged. Multiple clients may be debugged separately and their execution controlled each by separate debugging clients.

These and other features and advantages will be apparent from a reading of the following detailed description and a review of the associated drawings. It is to be understood that both the foregoing general description and the following detailed description are explanatory and do not restrict aspects as claimed.

As briefly described above client session based debugging may be performed employing a debugging client executed on the server enabling debugging of individual client sessions without disrupting execution of other client sessions. A remotely executed application as mentioned herein refers to physically separate processes as well as logically separate processes. Thus a client session may be executed on the same machine as another but be part of a separate process and implement embodiments. In the following detailed description references are made to the accompanying drawings that form a part hereof and in which are shown by way of illustrations specific embodiments or examples. These aspects may be combined other aspects may be utilized and structural changes may be made without departing from the spirit or scope of the present disclosure. The following detailed description is therefore not to be taken in a limiting sense and the scope of the present invention is defined by the appended claims and their equivalents.

While the embodiments will be described in the general context of program modules that execute in conjunction with an application program that runs on an operating system on a personal computer those skilled in the art will recognize that aspects may also be implemented in combination with other program modules.

Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that embodiments may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and comparable computing devices. Embodiments may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

Embodiments may be implemented as a computer implemented process method a computing system or as an article of manufacture such as a computer program product or computer readable media. The computer program product may be a computer storage medium readable by a computer system and encoding a computer program that comprises instructions for causing a computer or computing system to perform example process es . The computer readable storage medium can for example be implemented via one or more of a volatile computer memory a non volatile memory a hard drive a flash drive a floppy disk or a compact disk and comparable media.

Throughout this specification the term platform may be a combination of software and hardware components for managing remote application services and related network communications. Examples of platforms include but are not limited to a hosted service executed over a plurality of servers an application executed on a single server and comparable systems. The term server generally refers to a computing device executing one or more software programs typically in a networked environment. However a server may also be implemented as a virtual server software programs executed on one or more computing devices viewed as a server on the network. More detail on these technologies and example operations is provided below.

Remotely executed application is executed within the framework of operating system of server . Client device may connect to server through network s and establish a session. Thus for a user of client device it may appear as if application is running on operating system as application indicated by the dashed lines without client device having to support the application with traditional system resources such as memory processing power registries etc.

In addition to the reduced need for system resources for executing the remote application application may be accessed by executed for multiple clients simultaneously. Similarly client device in conjunction with operating system may provide access to multiple remote applications at a fraction of system resources and without having to install maintain or update the individual applications.

In the example scenario of diagram server executes applications and . Clients and share application through their individual sessions. Application is shared by clients and through their respective sessions. A debugging engine executed on server may enable client codes codes executed on behalf of each client on the server to report their status and further enable one or more remote debugging clients to attach to and control individual sessions. Thus in a server with multiple client sessions execution of a particular session being debugged may be broken as opposed to conventional per thread or per process breaks. Multiple client sessions may be debugged simultaneously in a secure way remotely. Furthermore global break points may be set up enabling debugging clients to find which client session to break based on a predefined break point not client session .

In a system according to embodiments each session may be debugged individually allowing other sessions to continue execution without interruption. A debugging engine executed on the server may enable client codes to report their status to the debugging engine through a session object established by the client code. The status of the executing code e.g. break points and additional information may be provided to a remote debugging client such as debugging client or enabling the remote debugging clients to control the debugging process.

In the example scenario of diagram three clients and and two debugging clients and are connected to server . If debugging client A attaches to client A s session and debugging client B attaches to client B s session then debugging client A may control inspect and or analyze the execution of client session A on the server . Debugging client B may do so for client session B. Thus client C is not affected by either debugging client.

Server may execute server code and or client code server code being code not accessible to the client s or code that should not be debugged e.g. the debugger engine itself or other part of framework code . Client code is the code executed on the server on behalf of a particular client. Execution application programming interface API may be exposed by the server itself and called by client code executed on behalf of a client in the context of a client session. Debugging engine may expose debugging client API called by remote debugging client .

Client code may call a SessionStart method on the execution API once and establish a session object for keeping track of the session client and distinguishing it from other sessions clients. A session object may be returned to the client code as a result of this call. Subsequently client code may periodically invoke the StatementHit method on the execution API informing the debugging engine about the code s location and its associated client session through the session object. The StatementHit method may typically be called before each logical statement is executed and the call itself may be inserted or injected into the code by instrumentation.

The StatementHit method may then determine if a debugging client is attached to the given connection. The method may further determine if the execution should be a break i.e. if a break point has been set on the given statement and any associated conditions evaluate to true or the debugging client is stepping though individual statements. If the debugging engine determines that it should break the associated remote debugging client may be notified. According to some embodiments execution may not return to the calling code until the debugging client issues a continue command.

According to other embodiments the call stack variables execution history and comparable information may be computed in the implementation of StatementHit and made available to the debugging client on request. The debugging client API enables the external debugging client to connect to the debugging engine . This API may enable the debugging client to perform one or more of the following view a list of client sessions executing on the server select a client session to debug set breakpoints optionally attaching conditions receive notifications when a breakpoint is hit query the current location of the code relative to the original uninstrumented source code and query call stack variable values execution history and related metadata.

Although many of the above described actions are locked down into a single client session some may also be allowed to be global . Thus any client session that hits a particular breakpoint condition may trigger a given action according to further embodiments. This may be employed when a debugging client is expected to take an action but it is not known up front which client is to be debugged.

The example systems in and have been described with specific servers client devices software modules and interactions. Embodiments are not limited to systems according to these example configurations. Client session based debugging may be implemented in configurations employing fewer or additional components and performing other tasks. Furthermore specific protocols and interfaces have been discussed in conjunction with describing embodiments above. Embodiments are also not restricted to those examples. Other protocols exchanges and interfaces may be implemented in a similar manner using the principles described herein.

As discussed above users may access applications remotely executed on one or more of servers through client devices . A debugging engine executed on server may expose an execution API and a debugging client API enabling debugging of client code on the server at session level without interrupting execution of client codes for other clients. The remotely executed application may retrieve necessary data from data store s directly or through database server .

Network s may comprise any topology of servers clients Internet service providers and communication media. A system according to embodiments may have a static or dynamic topology. Network s may include secure networks such as an enterprise network an unsecure network such as a wireless open network or the Internet. Network s may also coordinate communication over other networks such as Public Switched Telephone Network PSTN or cellular networks. Furthermore network s may include short range wireless networks such as Bluetooth or similar ones. Network s provide communication between the nodes described herein. By way of example and not limitation network s may include wireless media such as acoustic RF infrared and other wireless media.

Many other configurations of computing devices applications data sources and data distribution systems may be employed to implement a framework for client session based debugging. Furthermore the networked environments discussed in are for illustration purposes only. Embodiments are not limited to the example applications modules or processes.

Application may be any application that is remotely executed on computing device and accessed by one or more client devices. Application may comprise server code which is not accessible by client devices or debuggable and client code s . Client code s may be debugged employing debugging engine as described previously. This basic configuration is illustrated in by those components within dashed line .

Computing device may have additional features or functionality. For example the computing device may also include additional data storage devices removable and or non removable such as for example magnetic disks optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage . Computer readable storage media may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. System memory removable storage and non removable storage are all examples of computer readable storage media. Computer readable storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computing device . Any such computer readable storage media may be part of computing device . Computing device may also have input device s such as keyboard mouse pen voice input device touch input device and comparable input devices. Output device s such as a display speakers printer and other types of output devices may also be included. These devices are well known in the art and need not be discussed at length here.

Computing device may also contain communication connections that allow the device to communicate with other devices such as over a wired or wireless network in a distributed computing environment a satellite link a cellular link a short range network and comparable mechanisms. Other devices may include computer device s that execute communication applications other web servers and comparable devices. Communication connection s is one example of communication media. Communication media can include therein computer readable instructions data structures program modules or other data. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media.

Example embodiments also include methods. These methods can be implemented in any number of ways including the structures described in this document. One such way is by machine operations of devices of the type described in this document.

Another optional way is for one or more of the individual operations of the methods to be performed in conjunction with one or more human operators performing some. These human operators need not be collocated with each other but each can be only with a machine that performs a portion of the program.

Process begins with operation where a session object may be established for a client upon receipt of a StatementHit method from the client code at the execution API exposed by the debugging engine. The session object may keep track of the session client and distinguish it from other sessions clients.

At operation the client code may inform the debugging engine of the code s location and its associated client session through the session object. The client code may accomplish this by invoking a StatementHit method typically before each logical statement is executed. The StatementHit method may determine if a debugging client is attached to the given connection at decision operation . If the debugging client is attached it may further determine whether the execution is a break point at operation . If the engine determines it should break the associated remote debugging client may be notified. The execution may wait returning to the calling client code until the debugging client issues a continue command. Information including call stack variables execution history etc. may be computed in the implementation of StatementHit and provided to the debugging client on request at operation .

The operations included in process are for illustration purposes. Client session based debugging may be implemented by similar processes with fewer or additional steps as well as in different order of operations using the principles described herein.

The above specification examples and data provide a complete description of the manufacture and use of the composition of the embodiments. Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims and embodiments.

