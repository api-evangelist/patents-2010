---

title: Static type checking against external data sources
abstract: Static type checking is performed against external data sources in an interacting editing environment. A rich editing experience can be provided to users for external data equivalent to that provided for internal static, typed data. An extensible compiler is provided so that a user or third party can extend type checking facilities to any external data source. An extensible language service is provided so that a user or third party can extend the language service to provide a consistent, current static view of external data. The extensible compiler and language service allow language extensions to plug into the type checking process. This enables the compiler and language service to provide an extension point that allows extensions of the compiler and allow the language service to render dynamic information statically.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08813027&OS=08813027&RS=08813027
owner: Microsoft Corporation
number: 08813027
owner_city: Redmond
owner_country: US
publication_date: 20100414
---
A data type in programming languages is an attribute of data which imparts information about what kind of data it is. Constraints such as what types of values the piece of data can take and what operations can be performed upon it can also be established by assigning a data type to the data. A type system associates one or more data types with each program value in a program. By examining what the instructions in the program do to the value of the data a type system attempts to prevent type errors . For example a particular programming language may consider assigning a string value to a variable of integer type to be a type error and will give an error message to the user who tries to do so. A type system also attempts to prevent illegal operations on data. For example some programming languages consider adding a string and an integer together to be an illegal operation and will give an error message to the user who tries to do so. Type checking can occur either at compile time a static check or static type checking or at runtime a dynamic check or dynamic type checking . If a language applies its typing rules vigorously for example only allowing automatic type conversions which do not lose information it is called a strongly typed language. If a language is relatively less restrictive it is called weakly typed.

A programming language is said to use static typing when type checking is performed during compile time. In static typing types are associated with variables. Statically typed languages include Ada C C C Java Fortran Haskell ML Pascal and Scala. Static typing allows many errors to be caught early in the development cycle. Because static type checkers evaluate type information during compilation and lack type information that is only available at runtime static type checkers are conservative. That is even if a particular execution of a program would run correctly the program will be rejected by a static type checker if the conditions evaluated do not hold for all possible executions of the program. Because static type checkers evaluate the type information that can be determined at compile time and verify that the checked conditions hold for all possible executions of the program there is no need to repeat static type checks every time the program is executed.

A programming language is said to be dynamically typed when most of the type checking is performed at runtime. In dynamic typing types are associated with values resulting from execution of the program. Dynamically typed languages include Clojure Groovy JavaScript Lisp Objective C PHP Prolog Python Ruby and Smalltalk. Dynamic typing is less rigid than static typing but can result in a greater potential for execution errors e.g. an error results because a value for a variable has an disallowed type . Dynamically typed language systems typically make fewer compile time checks on the source code. Runtime checks potentially can be more sophisticated because they can use dynamic runtime information in addition to information that was present during compilation and is still available at runtime. Runtime checks assert that conditions hold in a particular execution of the program and are repeated for each execution of the program.

Binding can occur either at compile time in which case it is called static binding or can occur dynamically at runtime which is called dynamic binding . Dynamic binding allows the postponement of the resolving of undefined variables until a program is run. Dynamic binding is fundamentally different from static binding because its result the meaning assigned to an operation for example depends on the runtime types of the actual values it operates on instead of on the compile time types of the variables in the source code. Typically statically typed programming languages perform static binding and dynamically typed programming languages perform dynamic binding.

Static type checking is performed against external data sources in an interacting editing environment such as in an integrated development environment IDE interactive editing or read evaluate print loop REPL environment. A rich editing experience can be provided to users for external data equivalent to that provided for internal static typed data. An extensible compiler is provided so that a user or third party can extend type checking facilities to any external data source. An extensible language service is provided so that a user or third party can extend the language service to provide a consistent current static view of external data. The extensible compiler and language service allow language extensions to plug into the type checking process. This enables the compiler and language service to provide an extension point that enables the compiler to be extended and to allow the language service to render dynamic information statically.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

Programmers often write code that targets a particular external typically but not necessarily dynamic data source including but not limited to a database a Microsoft Excel spread sheet a web service a file on disk a domain specific model and so on. A number of programming languages provide dynamic type access to these domains but do not provide IDE support. Traditionally external data sources are accessed dynamically by calling methods e.g. a call such as GET ROW is made on a SQL database and a string is passed in . At build time code generators may be run that inspect a data source and generate code typically large quantities of code . This approach involves ongoing maintenance and updating of the code generators and is not able to provide a good IDE experience for the developer. That is because information from the external data sources is not available until build time programmer features like auto completion parameter help and tooltips are not available at design time. Static type checking is similarly unavailable for external data sources.

Hence while design time code generation techniques may exist they are cumbersome to maintain and require the creation of language features pertaining to IDE interaction. An IDE may interactively generate code at design time to recover lost programmer features but not provide a good IDE experience. For example the IDE may not be able to support the generation of code for the language the programmer is using. Secondly the language the programmer is using may not have special features e.g. partial classes in C needed for full support in the IDE. Moreover each particular interactive code generator implementation has to be specially designed to work with a particular IDE thereby limiting the usefulness of the code generator. Finally because large quantities of code may be generated the size of the resulting executable is increased.

Static typing is typically available for objects that are inside the programming language s type system or that come from the programming language but is unavailable as soon as data comes from outside of the programming language. In accordance with aspects of the subject matter disclosed herein strong data typing is extended to user selected external data sources in a light weight way. At compile time a temporary static type is fabricated. The compiler uses the synthesized type to connect to whatever data source is specified. The synthesized type is not a permanent real type but is used to provide enough information to the compiler to allow the compiler to perform its compilation and to generate executables. The synthesized type may be removed at a later stage in the compilation or it may be realized or converted into a real type. The choice described is up to the extension provider. A particular compiler such as the F compiler for example can allow both. In a CLR Common Language Runtime environment the compiler can write IL intermediate language into the resulting assembly. The extended language service can provide programmer support inside the IDE so that for example features like auto completion parameter help function lists and so on are available to the programmer as he is writing code in the source code editor.

Compiler can be any statically typed compiler including but not limited to an F or C compiler. Compiler can be a background compiler. Extension point can be a extension point that is shared by the compiler and the language service so that a component module or extension such as extension etc. can be written or received to extend the typical compilation editing process. Alternatively extension point may plug into the compiler and information generated via the extension point may flow from the compiler into the language service to present a view of the external data. The extension point can be customized for the external data source e.g. data source etc. The extension point can be made accessible via an API application programming interface which can be published and made publicly visible so that users can plug into the extension point to extend the compiler in a controlled way. The compiler extension can be integrated throughout the entire pipeline of the build time experience from compile time to the tooling and IDE and also can influence the run time behavior of the application executable that is generated by the extended compiler.

An external data source can be a static or dynamic data source of any type. For example an external data source can be a live Microsoft Excel file containing data pertaining to a specific domain an XML file containing data pertaining to a specific domain an instance of a SQL database a web service or any dynamic or static external file. The extension point provides information to the compiler the information extracted by reading these external data sources. The compiler and language service receive the information provided by the extension point and from this information the compiler and language service can give the user an experience that is equivalent to that received when programming against static types.

An editor designed for editing source code of computer programs receives user input and typically includes features designed to simplify and speed up input of source code. These features include but are not limited to syntax highlighting auto completion bracket matching parameter help function list tooltips and so on. Editor may also perform syntax checking while the programmer types immediately detecting and notifying the user of syntax problems. An editor backed by the language service and or background compiler can also act as a discovery tool. For example in some known editors a programmer can type a function name e.g. input and in response to entering . dot a list of parameters may be displayed for the function. This feature available for members parameters functions and other program elements is typically only available for statically typed program elements. In accordance with aspects of the subject matter disclosed herein this discovery feature is also available for information available from external data sources.

For example in accordance with aspects of the subject matter disclosed herein when . is entered instead of exploring a .NET type or other type internal to the programming environment information from an external data source such as database a website etc. is provided. Hence the features described herein can provide a way to dynamically explore as well as to access data from external data sources. Within an integrated development environment developers often use dot to learn how an API works. Instead of referring to documentation which is not always current developers often prefer to learn about existing software by entering dot looking at the available choices selecting one of the choices entering dot and so on. In accordance with aspects of the subject matter disclosed herein this exploration and discovery feature is available for external data sources in addition to internal static types.

An example of a Microsoft Excel plug in that can render live Excel data to the compiler follows. This example is illustrative and not limiting.

In the example above programmer features such as auto completion or Intellisense can obtain information regarding the content of Excel cells e.g. 500 M directly from the Excel file.

The extended compiler can import types marked with a particular attribute such as for example ExtendCompiler and transform these elements into internal representations comprising synthetic types for the external data source. These transformations occur via the methods on a system type from which the types inherit. After converting the external entities into internal representations the objects flow through the compiler logic without affecting existing type inference analysis code generation and so on. When calls or methods are made on these types the compiler generates code that calls a method invocation such as InvokeMethod on the host type that was imported to perform the work at runtime.

At while the user is editing or writing his program in the editor the compiler and language service provide the same type of experience for the external data source as for internal static data types. A user perceives this data to be static when writing code in an IDE. The user experience with respect to programmer aids such as auto completion parameter help tooltips etc. is identical to that provided against a static type library. For example if the user adds a reference to a database extension such as an Oracle database extension into his project when he types Oracle database. in response to parsing the dot the language service will return a list of Oracle databases available on his machine. By entering . again the user may receive a list of the tables inside the selected Oracle database. Code can be written against the specified Oracle table and so on.

At during the code generation part of the compilation step synthetic types and synthetic method calls are removed and are replaced with a set of dynamic calls to the external data source. In the absence of the features described herein these generated dynamic calls would have had to be written in the code directly by the developer. When the executable is built and runs the executable accesses the database specified in the code and retrieves real data out of the database. During the code generation part of the compilation step the synthetic type can report back a real type that should be used instead of the synthetic type. The real type can be a database connection object a .NET system object an Excel application type and so on. The synthetic method calls are replaced by the compiler asking the extension for an expression tree that represents the method call. The expression tree may contain a method call to a real method that exists in the programming environment or it may contain any sort of program that can be written in the programming environment.

In order to provide context for various aspects of the subject matter disclosed herein and the following discussion are intended to provide a brief general description of a suitable computing environment in which various embodiments may be implemented. While the subject matter disclosed herein is described in the general context of computer executable instructions such as program modules executed by one or more computers or other computing devices those skilled in the art will recognize that portions of the subject matter disclosed herein can also be implemented in combination with other program modules and or a combination of hardware and software. Generally program modules include routines programs objects physical artifacts data structures etc. that perform particular tasks or implement particular data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments. The computing environment is only one example of a suitable operating environment and is not intended to limit the scope of use or functionality of the subject matter disclosed herein.

With reference to a computing device for efficient resumption of co routines on a linear stack in the form of a computer is described. Computer may include a processing unit a system memory and a system bus . The processing unit can be any of various available processors. Dual microprocessors and other multiprocessor architectures also can be employed as the processing unit . The system memory may include volatile memory and nonvolatile memory . Nonvolatile memory can include read only memory ROM programmable ROM PROM electrically programmable ROM EPROM or flash memory. Volatile memory may include random access memory RAM which may act as external cache memory. The system bus couples system physical artifacts including the system memory to the processing unit . The system bus can be any of several types including a memory bus memory controller peripheral bus external bus or local bus and may use any variety of available bus architectures.

Computer typically includes a variety of computer readable media such as volatile and nonvolatile media removable and non removable media. Computer storage media may be implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CDROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other transitory or non transitory medium which can be used to store the desired information and which can be accessed by computer .

It will be appreciated that describes software that can act as an intermediary between users and computer resources. This software may include an operating system which can be stored on disk storage and which can control and allocate resources of the computer system . Disk storage may be a hard disk drive connected to the system bus through a non removable memory interface such as interface . System applications take advantage of the management of resources by operating system through program modules and program data stored either in system memory or on disk storage . It will be appreciated that computers can be implemented with various operating systems or combinations of operating systems.

A user can enter commands or information into the computer through an input device s . Input devices include but are not limited to a pointing device such as a mouse trackball stylus touch pad keyboard microphone and the like. These and other input devices connect to the processing unit through the system bus via interface port s . An interface port s may represent a serial port parallel port universal serial bus USB and the like. Output devices s may use the same type of ports as do the input devices. Output adapter is provided to illustrate that there are some output devices like monitors speakers and printers that require particular adapters. Output adapters include but are not limited to video and sound cards that provide a connection between the output device and the system bus . Other devices and or systems or devices such as remote computer s may provide both input and output capabilities.

Computer can operate in a networked environment using logical connections to one or more remote computers such as a remote computer s . The remote computer can be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . Remote computer s can be logically connected via communication connection . Network interface encompasses communication networks such as local area networks LANs and wide area networks WANs but may also include other networks. Communication connection s refers to the hardware software employed to connect the network interface to the bus . Connection may be internal to or external to computer and include internal and external technologies such as modems telephone cable DSL and wireless and ISDN adapters Ethernet cards and so on.

It will be appreciated that the network connections shown are examples only and other means of establishing a communications link between the computers may be used. One of ordinary skill in the art can appreciate that a computer or other client device can be deployed as part of a computer network. In this regard the subject matter disclosed herein may pertain to any computer system having any number of memory or storage units and any number of applications and processes occurring across any number of storage units or volumes. Aspects of the subject matter disclosed herein may apply to an environment with server computers and client computers deployed in a network environment having remote or local storage. Aspects of the subject matter disclosed herein may also apply to a standalone computing device having programming language functionality interpretation and execution capabilities.

A user can create and or edit the source code component according to known software programming techniques and the specific logical and syntactical rules associated with a particular source language via a user interface and a source code editor in the IDE . Thereafter the source code component can be compiled via a source compiler whereby an intermediate language representation of the program may be created such as assembly . The assembly may comprise the intermediate language component and metadata . Application designs may be able to be validated before deployment.

The various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. Thus the methods and apparatus described herein or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing aspects of the subject matter disclosed herein. In the case of program code execution on programmable computers the computing device will generally include a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs that may utilize the creation and or implementation of domain specific programming models aspects e.g. through the use of a data processing API or the like may be implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined with hardware implementations.

While the subject matter disclosed herein has been described in connection with the figures it is to be understood that modifications may be made to perform the same functions in different ways.

