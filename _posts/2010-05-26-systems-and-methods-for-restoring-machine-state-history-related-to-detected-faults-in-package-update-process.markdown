---

title: Systems and methods for restoring machine state history related to detected faults in package update process
abstract: Embodiments relate to systems and methods for storing machine state history related to detected faults in a package update process. A classification tool can interface with a data store that can store machine state data on a client. The classification tool can record an initial machine state on the client and initiate a package update on the client. The classification tool can further record an updated machine state of the client subsequent to initiating the package update and detect a fault condition in the client subsequent to initiating the package update. The classification tool can examine the initial machine state and the updated machine state to categorize one or more causes of the fault condition as either related to the package update or to systemic conditions of the client. The classification tool can further notify a user of the client of the one or more causes of the fault condition.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08381036&OS=08381036&RS=08381036
owner: Red Hat, Inc.
number: 08381036
owner_city: Raleigh
owner_country: US
publication_date: 20100526
---
The present teachings relate to systems and methods for storing machine state history related to detected faults in a package update process and more particularly to platforms and techniques for conducting diagnostic inspections of client or target machines configured to receive a package update.

Users of physical or virtual machines commonly install software packages including package updates to physical or virtual machines. The software packages can contain a set of related files chosen to perform a given application or task such as for example a group of software applications drivers and or other resources used to install and use messaging or media applications. In instances a software package can contain application software operating system software drivers patches and or other software components grouped as a logical set. In implementations the package can be stored or encoded as a single file or data object.

Software package update managers exist to help a user initiate and perform software package updates such as for example the yum Yellowdog update manager package update manager available from Red Hat Inc. Raleigh N.C. and others. In general available software package managers are configured to interact with the set of installed packages on a client and with one or more software package repositories to directly connect to those databases and download available package updates.

The process of initiating software package updates can involve however the risk or possibility of software related faults instabilities bugs or other undesirable errors or conditions. A number of those potential faults or irregular conditions can have a tendency to occur during the window of time in which package updates are made. For example a user who repeatedly downloads and installs updates for a variety of unrelated packages may incur the risk of overwriting copies of files with inconsistent or undesired versions of those files. Further a user may choose to initiate a package update process without fully verifying or validating the source of the package update files and retrieve and install those files without any virus scans black list check or other security measures.

A user may also overlook an independent condition on the target machine or client that can cause a fault event during a package installation and therefore be unable to discriminate between machine faults or crashes caused by the installation itself versus those that may be caused by separate application faults or other independent events. This can be especially true on machines that are executing a large number of applications or services at the time of the package update. Because existing package update managers are not configured to monitor machine state data before during and after a package installation nor to differentiate between fault events induced by the package update event versus independent machine faults those faults occurring around the time of package installation or update events can be difficult to debug and may remain undiagnosed. It may be desirable to provide systems and methods for storing machine state history related to detected faults in the package update process in which diagnostic logic and user notification can be integrated into the package update process to detect diagnose and correct potentially problematic updates and or other system conditions associated with the package manager or the client during or after the update activity takes place.

Embodiments of the present teachings relate to systems and methods for storing a machine state history related to detected faults in a package update process. More particularly embodiments relate to platforms and techniques for monitoring system conditions before during and after the package update process detecting conflicts bugs faults and or other undesired conditions that may arise during or surrounding the update process and diagnosing one or more causes of the conflicts bugs faults and or other undesired conditions from the monitored system conditions. In embodiments a package manager can track and manage the installation of one or more software packages and or updates to those packages that may be referred to together as a software package update on a client host target and or other machine. The package manager can host or interact with a classification tool containing logic to trace the identities of the software package updates to monitor client state conditions and to communicate with a diagnostic database. The diagnostic database can contain information links and other data to flag or identify potential conflicts bugs faults and or other conditions based on the selected updates the state of client resources and or other variables.

The classification tool can inspect record or diagnose any potential conflicts bugs faults and or other conditions and causes thereof and generate a notification to the user of those potential client or package installation issues. In embodiments the notification can include an indication whether a machine fault was caused was likely to be caused or was not caused or was not likely to have been caused by the package installation activity of interest. In embodiments a user can then confirm discontinue change retry or otherwise process a package update activity. For example if the diagnostic result is that a package update failed due to a machine fault caused by conflicts in the file versions unpacked and installed from a package update the user may be presented with options to un install that package. Conversely if the diagnostic result is that the machine fault was caused by a poorly behaved application that is independent of the package update the user may be presented with options to retain that package update and proceed to debug the faulty application. These and other embodiments described herein address the various noted shortcomings in known package update technology and provide a user with enhanced package and system management capability for installing their software package resources with less potential for software conflicts errors or other undesirable results of updating activity.

Reference will now be made in detail to exemplary embodiments of the present teachings which are illustrated in the accompanying drawings. Where possible the same reference numbers will be used throughout the drawings to refer to the same or like parts.

In embodiments set of installed software packages can be or include packages comprising various types of applications such as for example messaging applications spreadsheet or modeling applications social networking applications word processing applications and or other applications or utilities and can in embodiments include an operating system drivers and or components. Set of installed packages can have an associated set of package attributes which can record file names versions dates software requirements and or other attributes related to the software package updates installed on client and reflected in set of installed software packages .

Package manager can communicate with a network interface configured to connect to one or more networks such as the public Internet or other public or private networks. Package manager can thereby connect to one or more package repositories hosting software packages including software package updates and or other software or resources.

Package manager can also interact and or communicate with set of installed packages and one or more package repositories to initiate configure test update and or otherwise manage set of installed packages operating on client . Package manager can for example provide a user with a set of package update options displayed via user interface such as a graphical user interface or others to select various test configuration and or other management activities on set of installed packages . For example a user can select to initiate an update on one or more of set of installed packages or install a new package update on client via user interface .

in embodiments package manager can communicate with a classification tool hosted on client to actively monitor package installation and client detect fault conditions or events on client associated with a package installation and determine one or more causes of the fault conditions based on the monitored history. In embodiments classification tool can isolate discriminate or otherwise categorize either the package installation or systemic conditions of client as the one or more causes of the fault conditions. Further classification tool can generate reports and notifications regarding a fault condition status one or more causes of the fault conditions and categories thereof or other conditions of package update activities conducted on client . By determining the one or more causes of the fault conditions a user can be notified of future potential faults or other conditions that might be caused by client system or software packages activity. Classification tool can record diagnostic information such as for example the one or more causes of the fault conditions origins of the one or more causes and other data. Classification tool can also contain or access diagnostic logic to examine data generated or hosted by various resources including set of installed packages operating system or one or more repositories to generate user notifications and other output to support and manage package updates and diagnostic activities and client system activities.

As illustrated for example more particularly in package manager can connect to one or more package repositories via one or more networks . Package manager can present and manage set of update options to initiate and conduct download activity for example to initiate the download of one or more package updates. According to embodiments classification tool and or other logic can record or monitor system activity of client before during or after the installation of the one or more package updates. Classification tool and or other logic can for example analyze resources on client such as for example a set of executing processes executing threads one or more open communication ports one or more dependencies one or more authorized users one or more termination events or any other conditions. In embodiments classification tool can maintain and or access a diagnostic database to store recorded or monitored system activity of client .

Classification tool and or other logic can monitor set of executing processes or other resources on client via operating system and or other resources to identify one or more fault conditions on client such as a conflict hang and or other condition. In other embodiments classification tool and or other logic can probe and identify fault conditions on client either caused by the package installation or caused by systemic conditions on client independent from the package installation either during or after the package is installed on client . For example classification tool and or other logic can detect a termination of one or more of the set of executing processes on client during a package installation. Classification tool and or other logic can create and or maintain an event log to store recorded fault conditions on client . For example event log or other records may indicate a termination of one or more processes caused during the installation of one or more package updates.

According to embodiments classification tool and or other logic can examine the recorded or monitored system activity of client such as data stored in diagnostic database to determine one or more causes of the fault conditions such as fault conditions recorded in event log . In embodiments classification tool and or other logic can determine the one or more causes of the fault conditions by comparing the recorded system activity of client before the installation of one or more package updates to the recorded system activity of client during or after the installation of one or more package updates. For example classification tool can determine the one or more causes by comparing recorded data associated with set of executing processes such as for example one or more executing threads one or more executing processes one or more open communication ports one or more dependencies one or more authorized users one or more termination events or conditions thereof.

Classification tool and or other logic can isolate discriminate or otherwise categorize either the package installation or systemic conditions of client as the one or more causes of the fault conditions. For example an application executing on client independent from the package installation can cause the fault conditions. Alternatively a process initiated on the client as a result of the package installation can cause the fault conditions. In embodiments the classification tool can examine dependencies as recorded and or stored in the diagnostic database to determine whether systemic conditions independent of the package installation caused the fault conditions or whether processes or threads resulting from a package initiation or installation caused the fault conditions.

Classification tool and or other logic can provide one or more notifications to users of client . For example notification can contain the one or more causes and or the categories of the one or more causes of the fault conditions monitored on the client determined by examining records in diagnostic database and or event log . Other types of conditions related to the state of client and its resources as well as set of installed packages and other resources can be identified and reported to the user via one or more notifications . According to other embodiments classification tool can identify and generate notifications automatically and or can generate notification repair and or other activity based on user configuration settings such as selections to display or suppress the display of selected notifications and or to automatically perform selected repair actions or other processes as described herein.

Classification tool can generate one or more notifications before during or after the installation of one or more package updates . When generating notifications classification tool can likewise access other data resources such as diagnostic database that can contain for example monitored or recorded system data. According to embodiments classification tool can utilize data stored in diagnostic database and or event log for use during future package installations. For example classification tool can detect a process executing on client that previously caused a fault condition during a package installation and terminate that process on client before a new package installation is initiated. It should be appreciated that other software repair actions are envisioned. For example classification tool and or other logic can perform one software repair or correction or can perform a series or sequences of repair actions or corrections. In embodiments where multiple corrections are performed classification tool and or other logic can re test client set of installed packages and or resources of client to determine the set of changes caused by the repair action and possibly modify any additional repair actions that may be required.

As an illustration if there is a fault condition at node for example if a process represented by node terminates decision logic and or a user can automatically or manually determine that the fault condition was not caused by the software package installation represented by node because the process represented by node does not depend from that of node . Further the decision logic and or the user can automatically or manually determine that the fault condition could have been caused by a systemic condition of client because the process represented by node depends from the process executing on client before installation of a software package update as represented by node . Similarly if there is a second fault condition at node for example if a process represented by node terminates decision logic and or a user can automatically or manually determine that the second fault condition was caused by the software package installation represented by node because the process represented by node depends from that of node .

In classification tool and or other logic can record an updated machine state of the client subsequent to the initiating of the package update. In embodiments classification tool and or other logic can record the updated machine state at one or more intervals over a set period of time and can store associated data in a data store event log or similar storage such as diagnostic database . In embodiments the updated machine state can be related to executing processes on the client a memory state of the client a processor state of the client a communications state of the client a storage state of the client and or similar conditions or states. In classification tool and or other logic can detect a fault condition in the client subsequent to initiating the package update. In embodiments the fault condition can be a crash or a termination of an application or other process executing on the client . In embodiments classification tool and or other logic can detect the fault condition before during or after the package update process and can store an indication of the fault condition in a data store event log or similar storage such as event log .

In classification tool and or other logic can identify one or more causes of the fault condition in the client by examining the initial machine state and the updated machine state. In embodiments classification tool and or other logic can identify the one or more causes of the fault condition by examining data stored in a data store event log or similar storage such as diagnostic database . In classification tool and or other logic can categorize the one or more causes of the fault condition as related to the package update or related to systemic conditions of client by examining dependencies associated with the initial and updated machine states. For example classification tool can analyze an event tree of the initial and updated machine states to decipher whether the fault condition was caused by the package update or by processes or applications on client independent from the package update. In classification tool and or other logic can notify a user of the client of the one or more causes of the fault condition. In embodiments classification tool and or other logic can notify the user via a user interface or over a network. In embodiments a notification can be transmitted to a remote package server and or stored locally on the client . In processing can return to a prior processing point jump to a further processing point or end.

The foregoing description is illustrative and variations in configuration and implementation may occur to persons skilled in the art. For example while embodiments have been described in which a unitary package manager is configured to control package update activity in embodiments multiple applications or software can interact to control the downloading installation testing and other management of software packages. While embodiments have been described in which package update activity is conducted on one client in other embodiments multiple local or remote targets clients and or other machines can register to package manager and or other logic or resources to receive or perform package update activity. Similarly while embodiments have been described in which one diagnostic database is accessed by classification tool package manager and or other logic to identify causes of potential faults or issues in other embodiments multiple diagnostic or debugging databases can be used. Other resources described as singular or integrated can in embodiments be plural or distributed and resources described as multiple or distributed can in embodiments be combined. The scope of the present teachings is accordingly intended to be limited only by the following claims.

