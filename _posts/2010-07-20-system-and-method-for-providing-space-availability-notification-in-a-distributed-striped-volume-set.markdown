---

title: System and method for providing space availability notification in a distributed striped volume set
abstract: A computer data storage system is described. A processor maintains a striped volume set by striping a data container over a plurality of storage nodes. A storage node determines whether space available on that node is below a predetermined threshold, the predetermined threshold indicating a low-in-space state. The storage node sends a message indicating that the storage node is in a low-in-space state. The processor accepts no further write messages to the data container as long as the storage node is in a low-in-space state.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08095730&OS=08095730&RS=08095730
owner: NetApp, Inc.
number: 08095730
owner_city: Sunnyvale
owner_country: US
publication_date: 20100720
---
The present application is a continuation of U.S. application Ser. No. 11 756 932 filed Jun. 1 2007 by Tianyu Jiang et al. entitled SYSTEM AND METHOD FOR PROVIDING SPACE AVAILABILITY NOTIFICATION IN A DISTRIBUTED STRIPED VOLUME SET which is now issued as U.S. Pat. No. 7 797 489 on Sep. 14 2010.

The present invention is directed to storage systems and in particular to managing space availability in a distributed striped volume set of a storage system cluster.

A storage system typically comprises one or more storage devices into which information may be entered and from which information may be obtained as desired. The storage system includes a storage operating system that functionally organizes the system by inter alia invoking storage operations in support of a storage service implemented by the system. The storage system may be implemented in accordance with a variety of storage architectures including but not limited to a network attached storage environment a storage area network and a disk assembly directly attached to a client or host computer. The storage devices are typically disk drives organized as a disk array wherein the term disk commonly describes a self contained rotating magnetic media storage device. The term disk in this context is synonymous with hard disk drive HDD or direct access storage device DASD .

A plurality of storage systems may be interconnected to provide a storage system environment configured to service many clients. Each storage system may be configured to service one or more volumes of the disks wherein each volume stores one or more data containers such as files and logical units. Alternatively the volumes serviced by the particular storage system may be distributed among all of the storage systems of the environment. This configuration distributes the data access requests along with the processing resources needed to service such requests among all of the storage systems thereby reducing the individual processing load on each storage system. In addition the storage system environment may be configured to stripe a data container across a plurality of is volumes configured as a striped volume set SVS where each volume is serviced by a different storage system of the environment e.g. a cluster. One technique for data container striping is described in U.S. Pat. No. 7 698 289 by Michael Kazar et al. issued on Apr. 13 2010 entitled STORAGE SYSTEM ARCHITECTURE FOR STRIPING DATA CONTAINER CONTENT ACROSS VOLUMES OF A CLUSTER. Broadly stated stripes of content data of a data container are allocated to each volume of the SVS in a manner that distributes data across the volumes of the SVS. Each stripe has a defined size width as specified by a set of striping rules associated with the SVS.

In order to stripe a data container across multiple storage systems or nodes in the cluster a write request directed to the data container is routed to different constituent volumes of the SVS. However these volumes may have differing storage space capacities and or differing amounts of available storage space at the time the write request is received. Consequently one constituent volume of the SVS may have the space to accommodate i.e. process and store a stripe of data associated with the request while another volume in the SVS may not have sufficient space to accommodate its intended stripe. Thus there is a need to notify the nodes hosting the volumes in the SVS as to the availability of storage space within each constituent volume of the SVS in order to verify whether there is enough space for an intended striping operation. Otherwise a write request will be rejected and forwarded elsewhere if all of the intended constituent volumes in that SVS cannot accommodate the request.

Thus there remains a need for managing cross stripe write operation in a SVS and notifying other nodes in the cluster whether enough space is available to allow such operations.

The disadvantages of prior techniques are overcome by the present invention which relates to a method and system for providing notification of storage space availability for data container striping among nodes in a storage system cluster. The present invention also provides a method and system for allowing cross striped write operations in reserved storage space of a striped volume set for a portion of a data container. A is master data volume node is configured to periodically send space availability detection messages to a plurality of data volume nodes hosting constituent volumes of the striped volume set. If the available storage space of one of the constituent volumes in the striped volume set reaches a predetermined low threshold the node hosting the constituent volume places the volume in a low in space state. The data volume node then reports its state using a low in space identifier to the master data volume node in response to the space availability detection message. The master data volume node then instructs all of the data volume nodes to place their constituent volumes into corresponding low in space required states such that no further write operations are accepted for the striped volume set. Once all of the constituent volumes in the striped volume set have sufficient available storage space their respective hosting nodes transition the volumes from the low in space states and report this state transition to the master data volume node using an appropriate identifier. When all of the constituent volumes have transitioned from the low in space state the master data volume node instructs the nodes hosting those volumes to transition from the low in space required states so that write operations are accepted. A procedure for utilizing reserved space to complete an accepted cross stripe write operation is also provided.

The present invention provides a method and system for managing storage space availability for data container striping among nodes in a storage system cluster that includes a novel process for notification of space requirements and availability as well as a process for permitting acceptance of cross stripe write operations where a constituent volume of a striped volume set has low space availability.

The constituent data volume DV has user data consumable storage space as illustrated by the reference character . The user data space contains storage space designated for a stripe to be written therein which represents a given offset of a data container being written to the SVS. That is this stripe is one stripe of the data container to be striped across the SVS of the cluster . In addition to user data space that is consumable by clients DV also has reserved storage space which is typically reserved for storage of administrative information or data regarding other housekeeping tasks for the volume. Similarly the data volume DV has user data space upon which a stripe of data may be written. In the illustrative example the length of the stripe of data does not comprise the entire user data space of DV. DV also contains reserved space .

The MDS issues messages such as message that notifies the constituent volumes of the SVS about space availability in each data volume. In the case of the data being striped across volumes of different D modules such messages are sent as remote procedure call RPC messages by the cluster interface module of the master data server across the cluster switching fabric which couples the nodes of the cluster and such messaging is described in further detail with reference to hereof. Illustratively the RPC is sent as a D module to D module message such as from MDS to a respective DS on another D module as shown in . Once the message arrives it is handled by the space availability process running on the DS. A response is then sent by the DS to the MDS across the cluster switching fabric.

In accordance with the invention each constituent volume has two states a LOW IN SPACE state and a LOW IN SPACE REQUIRED state. To that end each data server has memory space that is configured with a first data structure that is an identifier of a low in space state e.g. LOW IN SPACE flag and a second data structure that is an identifier of a low in space required state e.g. a LOW IN SPACE REQUIRED flag as illustrated in DS . As described further herein the LOW IN SPACE state flag indicates that a constituent volume such as DV has reached a space limitation threshold in its user data space as detected by its local file system executing in DS notably assertion of the flag does not indicate a space constraint in reserved space and the reasons for this will become apparent from the description herein. The LOW IN SPACE REQUIRED state flag indicates that the constituent volume has been advised by the MDS that one of the volumes in the SVS is in a LOW IN SPACE state. Thus in the example the constituent volume DV is advised by the MDS that no write request operation should be accepted for that constituent volume and more generally for the entire SVS. In accordance with the invention constituent volume DV transitions to a LOW IN SPACE REQUIRED state and sets respective flag . Note that the volume DV is not itself in a space constrained i.e. LOW IN SPACE state so its LOW IN SPACE flag is not set in the example.

The example described above may be better understood with reference to the flow chart of . The procedure begins with the start step and continues to step in which a write request is directed to the SVS. In response to the receipt of this write request or periodically as part of an ongoing space management availability process the MDS sends a space availability detection message to the constituent volumes of the SVS. This space availability detection message causes each constituent volume to check its space availability states as illustrated in step . In accordance with the invention each constituent volume performs a fictitious write request such that it simulates an attempt to accommodate an intended write to determine if it has space to store write data of a given amount determined by e.g. an appropriate algorithm. The algorithm can be configured to allow the constituent volume to check for a particular amount of space as desired in a particular application of the invention. Illustratively the amount of space may be for example one stripe width as specified in striping rules associated with the SVS plus the maximum size of a write request allowed by the protocol. As described herein a stripe width is stored in a VLDB SVS entry for the SVS. Thus the algorithm may be one stripe width plus the maximum size of a write request allowed by the protocol. In response to receiving the space availability detection message from the MDS the local file system of a server e.g. DS hosting the constituent volume e.g. DV checks whether the volume has the equivalent of one stripe width plus reserved space. If so the space availability process executing on DS will allow the LOW IN SPACE flag to remain unasserted. If on the other hand DS finds that the correct amount of space as specified is not available on the constituent volume DV then the LOW IN SPACE flag is asserted in the memory . Thus a message is returned from the DS which includes two states the LOW IN SPACE state and the LOW IN SPACE REQUIRED state of DV. That is DS returns a message to the MDS that shows that the LOW IN SPACE flag is asserted. Upon receiving the message the MDS examines the LOW IN SPACE state flag which if asserted causes the MDS to send a message to all servers hosting constituent data volumes of the SVS indicating that they should assert set their LOW IN SPACE REQUIRED flags. This message is illustrated as message in .

Specifically when the LOW IN SPACE decision step is reached and the MDS determines that one of the constituent volumes does have the LOW IN SPACE flag asserted then in step the MDS sends a set LOW IN SPACE REQUIRED message to all servers hosting the DV s in response to which each constituent volume sets its LOW IN SPACE REQUIRED flag . In the meantime as to this particular write request the process continues to step where the write request is rejected. The procedure then ends at step .

If on the other hand the LOW IN SPACE flag is not asserted in any of the constituent volumes the procedure continues to step where a determination is made as to whether a LOW IN SPACE REQUIRED flag is asserted. Assuming that the flag is not asserted the procedure continues to step where write request is allowed and the procedure ends at step .

However if on the other hand the LOW IN SPACE REQUIRED flag is asserted for one of the constituent volumes the procedure loops back to step and another space availability detection message is sent by the MDS to the servers hosting the constituent volumes. In response each server of each constituent volume performs the space availability check determination process described herein. In this instance if storage space has been freed up i.e. space is made available due to the deletion of data such as files each constituent volume transitions from its LOW IN SPACE state. In response to determining that no constituent volume is in a LOW IN SPACE state the MDS sends a message to each volume instructing it to unassert the LOW IN SPACE REQUIRED flag . In other words if the space state information responses received from the constituent volumes indicates that no volume is in a LOW IN SPACE state then the MDS sends a message to unassert the LOW IN SPACE REQUIRED flag for all the volumes. The servers DS DS hosting the constituent volumes DV and DV for example then transition the volumes from the LOW IN SPACE REQUIRED state so that write requests can continue to be allowed as in step . The procedure ends at step .

In an illustrative embodiment of the invention the MDS sends space availability detection messages periodically to the constituent volumes of the SVS and does not necessarily wait for a write request. On receiving the message the local file system of each server controlling each constituent volume checks to see whether the volume has space to hold the maximum size of the write request plus a reservation value as discussed. If so the file system transitions the volume from its LOW IN SPACE state and reports the two states to the MDS . The messaging can be summarized in the following chart 

An issue that arises with respect to such cross stripe writes occurs when the cross is stripe write operation is accommodated and acknowledged by a first constituent volume of the SVS but a second constituent volume does not have available storage space to accommodate its portion of the operation. In other words a portion of the data associated with the cross stripe write operation is stored on a first stripe of a first volume in the SVS but the remaining data associated with the operation cannot be stored on a second stripe of a second volume. In such a case an error or failure will occur because the cross stripe write operation has not completed successfully.

More specifically a problem arises if there is a space availability limitation on DV. Typically the VSM of DV acknowledges to the client that the write operation has been accepted prior to forwarding the excess data to the VSM serving the second data volume DV. Thus in the example the write operation has been accepted and acknowledged to the client after the first stripe of data associated with the operation has been written in space of DV. When the excess data portion is forwarded on to DV however it is found in the example that DV s space is already consumed. Thus the space is not available. The present invention provides for handling the cross stripe write operation in this instance. More specifically in accordance with the invention DV writes the excess data in its reserved space as indicated by the dotted line . Thus on DV when a cross stripe write request is received the local file system checks space availability. First the constituent volume is queried to determine if the volume can accept the write without using reserved space. If it can the write proceeds in accordance with the normal procedure as just described herein. Alternatively if DV cannot handle the write request using its non reserved space then DV checks the reserved space to see whether the volume can hold the cross stripe write request in its reserved space. If this can be done then in accordance with the invention the VSM of DV marks the volume as being in a LOW IN SPACE state. In such a LOW IN SPACE state as described herein DV can reject normal write requests but it does perform the instant cross stripe write request and writes the information at in space .

Furthermore if the reserved space is used to process the cross stripe write request on responding to DV for the cross stripe write request DV notifies DV of its LOW IN SPACE state. Upon receiving the response from DV with the LOW IN SPACE state information DV asserts its LOW IN SPACE state so that no further writes are accepted at DV even if DV happens to have sufficient user consumable space. This prevents DV from generating additional cross stripe writes targeting DV. Notably DV is now consuming reserved space. If DV does not have enough reserved space for the write request then the write is rejected and an error message is set.

This procedure may be further understood with reference to the flow chart of which sets forth a procedure for handling cross stripe write requests in accordance with the invention. The procedure begins at step and continues to step in which an N module redirects forwards a data access request such as a write request directed to a data container such as a file on a D module serving a volume e.g. DV which stores the first stripe affected by the request. This may be accomplished by for example the N module utilizing a Locate function to identify on which volume the initial offset of the file resides. For example if the write request begins at offset n within the file the Locate function returns the identity of the volume storing the stripe containing offset n. In the example discussed with reference to the first portion of the write was written at offset 2.0 MB 4 KB on the D module serving DV. Notably the entire write data associated with the write request is redirected to the VSM of the D module serving the data volume that stores the first stripe affected by the operation.

In step the VSM of DV obtains a range lock for the affected region of the file i.e. for the entire size length of the write data associated with the operation on that volume. In step the VSM of the D module DV determines whether the write data of the operation fits into a single stripe the first stripe by examining the length of data the stripe width and the location within the stripe which the write operation begins. If the write data fits within the stripe the procedure branches to step where a conventional write operation is performed. Thereafter in step the VSM of DV removes the range lock on that region of the file and proceeds to report the status of the write to the N module. The procedure completes at step .

If on the other hand the write does not fit into the single stripe then the procedure continues to step where the VSM of DV stores a persistent reminder of the inprogress cross stripe write operation. In step the VSM of DV writes all received write data for the first stripe to its data volume and in step forwards the request to the next data volume.

In step the next data volume DV checks its space availability in step . If DV is not low in space then the DV performs the write operation as shown in step in accordance with the normal procedure and in step notifies DV that the write request has completed successfully.

If on the other hand DV is low in space the procedure continues to step where reserved space is checked. If reserved space is available step the write request is allowed in step . The volume is then marked as LOW IN SPACE in step . In step DV notifies DV of its LOW IN SPACE state. DV no longer sends cross stripe write requests to DV and also transitions to a LOW IN SPACE state so that no further cross stripe requests will be permitted at DV as shown in step . The VSM of DV alerts the VSM of DV of the completion of the cross stripe write request using reserved space in step . The range lock persistent reminder and excess data is removed at DV as shown in step . DV returns the status of the cross stripe write as having been completed to the N module as shown in step and the procedure completes at step .

Returning to step if reserved space is not available the write request is denied at step and DV is notified. The status reported to the N module in step is that of an error message in order to notify the administrator that the write could not be successfully completed. The procedure ends at step .

By way of providing a further detailed description of an illustrative embodiment is of the invention the environment in which the illustrative embodiment can be employed is illustrated in . is a schematic block diagram of a plurality of nodes interconnected as a cluster and configured to provide storage service relating to the organization of information on storage devices. The nodes comprise various functional components that cooperate to provide a distributed storage system architecture of the cluster . To that end each node is generally organized as a network element N module and a disk element D module . The N module includes functionality that enables the node to connect to clients over a computer network while each D module connects to one or more storage devices such as disks of a disk array . The nodes are interconnected by a cluster switching fabric which in the illustrative embodiment may be embodied as a Gigabit Ethernet switch. An exemplary distributed file system architecture is generally described in U.S. Pat. No. 6 671 773 entitled METHOD AND SYSTEM FOR RESPONDING TO FILE SYSTEM REQUESTS by M. Kazar et al. issued Dec. 30 2003 which is incorporated herein by reference in its entirety. It should be noted that while there is shown an equal number of N and D modules in the illustrative cluster there may be differing numbers of N and or D modules in accordance with various embodiments of the present invention. For example there may be a plurality of N modules and or D modules interconnected in a cluster configuration that does not reflect a one to one correspondence between the N and D modules. As such the description of a node for example comprising one N module and one D module should be taken as illustrative only.

The clients may be general purpose computers configured to interact with the node in accordance with a client server model of information delivery. That is each client may request the services of the node and the node may return the results of the services requested by the client by exchanging packets over the network . The client may issue packets including file based access protocols such as the Common Internet File System CIFS protocol or Network File System NFS protocol over the Transmission Control Protocol Internet Protocol TCP IP when accessing information in the form is of files and directories. Alternatively the client may issue packets including block based access protocols such as the Small Computer Systems Interface SCSI protocol encapsulated over TCP iSCSI and SCSI encapsulated over Fibre Channel FCP when accessing information in the form of blocks.

The cluster access adapter comprises a plurality of ports adapted to couple the node to other nodes of the cluster . In the illustrative embodiment Ethernet is used as the clustering protocol and interconnect media although it will be apparent to those skilled in the art that other types of protocols and interconnects may be utilized within the cluster architecture described herein. In alternate embodiments where the Nmodules and D modules are implemented on separate storage systems or computers the cluster access adapter is utilized by the N D module for communicating with other N D modules in the cluster .

Each node is illustratively embodied as a dual processor storage system executing a storage operating system that preferably implements a high level module such as a file system to logically organize the information as a hierarchical structure of named directories files and special types of files called virtual disks hereinafter generis ally blocks on the disks. However it will be apparent to those of ordinary skill in the art that the node may alternatively comprise a single or more than two processor system. Illustratively one processor executes the functions of the N module on the node while the other processor executes the functions of the D module .

The memory illustratively comprises storage locations that are addressable by the processors and adapters for storing software program code and data structures associated with the present invention. The processor and adapters may in turn comprise processing elements and or logic circuitry configured to execute the software code and manipulate the data structures. The storage operating system portions of which is typically resident in memory and executed by the processing elements functionally organizes the node by inter alia invoking storage operations in support of the storage service implemented by the node. It will be apparent to those skilled in the art that other processing and memory means including various computer readable media may be used for storing and executing program instructions pertaining to the invention described herein.

The network adapter comprises a plurality of ports adapted to couple the node to one or more clients over point to point links wide area networks virtual private networks implemented over a public network Internet or a shared local area network. The network adapter thus may comprise the mechanical electrical and signaling circuitry needed to connect the node to the network. Illustratively the computer network may be embodied as an Ethernet network or a Fibre Channel FC network. Each client may communicate with the node over network by exchanging discrete frames or packets of data according to pre defined protocols such as TCP IP.

The storage adapter cooperates with the storage operating system executing on the node to access information requested by the clients. The information may be stored on any type of attached array of writable storage device media such as video tape optical DVD magnetic tape bubble memory electronic random access memory micro electro mechanical and any other similar media adapted to store information including data and parity information. However as illustratively described herein the information is preferably stored on the disks of array . The storage adapter comprises a plurality of ports having input output I O interface circuitry that couples to the disks over an I O interconnect arrangement such as a conventional high performance FC link topology.

Storage of information on each array is preferably implemented as one or more storage volumes that comprise a collection of physical storage disks cooperating to define an overall logical arrangement of volume block number vbn space on the volume s . Each logical volume is generally although not necessarily associated with its own file system. The disks within a logical volume file system are typically organized as one or more groups wherein each group may be operated as a Redundant Array of Independent or Inexpensive Disks RAID . Most RAID implementations such as a RAID 4 level implementation enhance the reliability integrity of data storage through the redundant writing of data stripes across a given number of physical disks in the RAID group and the appropriate storing of parity information with respect to the striped data. An illustrative example of a RAID implementation is a RAID 4 level implementation although it should be understood that other types and levels of RAID implementations may be used in accordance with the inventive principles described herein.

To facilitate access to the disks the storage operating system implements a write anywhere file system that cooperates with one or more virtualization modules to virtualize the storage space provided by disks . The file system logically organizes the information as a hierarchical structure of named data containers such as directories and files on the disks. Each on disk file may be implemented as set of disk blocks configured to store information such as data whereas the directory may be implemented as a specially formatted file in which names and links to other files and directories are stored. The virtualization module s allow the file system to further logically organize information as a hierarchical structure of data containers such as blocks on the disks that are exported as named logical unit numbers luns .

In the illustrative embodiment the storage operating system is preferably the NetApp Data ONTAP operating system available from Network Appliance Inc. Sunnyvale Calif. that implements a Write Anywhere File Layout WAFL file system. However it is expressly contemplated that any appropriate storage operating system may be enhanced for use in accordance with the inventive principles described herein. As such where the term WAFL is employed it should be taken broadly to refer to any storage operating system that is otherwise adaptable to the teachings of this invention.

In addition the storage operating system includes a series of software layers organized to form a storage server that provides data paths for accessing information stored on the disks of the node . To that end the storage server includes a file system module in cooperating relation with a volume striping module VSM and a storage subsystem which may include illustratively a RAID system module and a disk driver system module . In the illustrative embodiment the RAID system manages the storage and retrieval of information to and from the volumes disks in accordance with I O operations while the disk driver system implements a disk access protocol such as e.g. the SCSI protocol. The VSM illustratively implements a striped volume set SVS . As described further herein the VSM cooperates with the file system to enable storage server to service a volume of the SVS. In particular the VSM implements a Locate function to compute the location of data container content in the SVS volume to thereby ensure consistency of such content served by the cluster. The file system also incorporates a space availability notification process which in accordance with the present invention is used to manage space availability within a SVS. The space availability notification process running on an individual data volume node storage server interacts with a master volume node storage server to determine whether to accept or deny write access requests depending upon space availability within the constituent volumes comprising the SVS. More specifically the space availability notification process running on the master data server uses the messaging protocol defined herein with respect to to send space availability detection messages the other corresponding messages as described herein. In addition the process contains program instructions for performing the other operations described herein such as reading responses received from the nodes in response to such messages and determining for example whether write requests are to be allowed or denied depending upon the state identifiers sent by each node. Other operations are carried out such as for example if there is no longer a node that returns a low in space identifier then a message is sent to all volumes to clear a low in space required identifier.

The space availability notification process running on each DV contains one or more program instructions allowing it to read space availability detection messages received from the master data server and in response thereto to perform the fictitious write and to thereby determine whether a low in space identifier should be asserted. In addition in response to messages from the master data server to set or unset a low in is space required identifier then the individual node follows such commands and asserts unasserts the identifier accordingly.

The file system implements a virtualization system of the storage operating system through the interaction with one or more virtualization modules illustratively embodied as e.g. a virtual disk vdisk module not shown and a SCSI target module . The vdisk module enables access by administrative interfaces such as a user interface of a management framework see in response to a user system administrator issuing commands to the node . The SCSI target module is generally disposed between the FC and iSCSI drivers and the file system to provide a translation layer of the virtualization system between the block lun space and the file system space where luns are represented as blocks.

The file system is illustratively a message based system that provides logical volume management capabilities for use in access to the information stored on the storage devices such as disks. That is in addition to providing file system semantics the file system provides functions normally associated with a volume manager. These functions include i aggregation of the disks ii aggregation of storage bandwidth of the disks and iii reliability guarantees such as minoring and or parity RAID . The file system illustratively implements the WAFL file system hereinafter generally the write anywhere file system having an on disk format representation that is block based using e.g. 4 kilobyte kB blocks and using index nodes modes to identify files and file attributes such as creation time access permissions size and block location . The file system uses files to store meta data describing the layout of its file system these meta data files include among others an mode file. A file handle i.e. an identifier that includes an mode number is used to retrieve an mode from disk.

Broadly stated all modes of the write anywhere file system are organized into the mode file. A file system fs info block specifies the layout of information in the file system and includes an mode of a file that includes all other modes of the file system. Each logical volume file system has an fsinfo block that is preferably stored at a fixed location within e.g. a RAID group. The mode of the mode file may directly reference point to data blocks of the mode file or may reference indirect blocks of the mode file that in turn reference data blocks of the mode file. Within each data block of the mode file are embedded modes each of which may reference indirect blocks that in turn reference data blocks of a file.

Operationally a request from the client is forwarded as a packet over the computer network and onto the node where it is received at the network adapter . A network driver of layer or layer processes the packet and if appropriate passes it on to a network protocol and file access layer for additional processing prior to forwarding to the write anywhere file system . Here the file system generates operations to load retrieve the requested data from disk if it is not resident in core i.e. in memory . If the information is not in memory the file system indexes into the mode file using the mode number to access an appropriate entry and retrieve a logical vbn. The file system then passes a message structure including the logical vbn to the RAID system the logical vbn is mapped to a disk identifier and disk block number disk dbn and sent to an appropriate driver e.g. SCSI of the disk driver system . The disk driver accesses the dbn from the specified disk and loads the requested data block s in memory for processing by the node. Upon completion of the request the node and operating system returns a reply to the client over the network .

It should be noted that the software path through the storage operating system layers described above needed to perform data storage access for the client request received at the node may alternatively be implemented in hardware. That is in an alternate embodiment of the invention a storage access request data path may be implemented as logic circuitry embodied within a field programmable gate array FPGA or an application specific integrated circuit ASIC . This type of hardware implementation increases the performance of the storage service provided by node in response to a request issued by client . Moreover in another alternate embodiment of the invention the processing elements of adapters may be configured to offload some or all of the packet processing and storage access operations respectively from processor to thereby increase the performance of the storage service provided by the node. It is expressly contemplated that the various processes architectures and procedures described herein can be implemented in hardware firmware or software.

As used herein the term storage operating system generally refers to the computer executable code operable on a computer to perform a storage function that manages data access and may in the case of a node implement data access semantics of a general purpose operating system. The storage operating system can also be implemented as a microkernel an application program operating over a general purpose operating system such as UNIX or Windows NT or as a general purpose operating system with configurable functionality which is configured for storage applications as described herein.

In addition it will be understood to those skilled in the art that the invention described herein may apply to any type of special purpose e.g. file server filer or storage serving appliance or general purpose computer including a standalone computer or portion thereof embodied as or including a storage system. Moreover the teachings of this invention can be adapted to a variety of storage system architectures including but not limited to a network attached storage environment and a storage area network and disk assembly directly attached to a client or host computer. The term storage system should therefore be taken broadly to include such arrangements in addition to any subsystems configured to perform a storage function and associated with other equipment or systems. It should be noted that while this description is written in terms of a write any where file system the teachings of the present invention may be utilized with any suitable file system including a write in place file system.

In the illustrative embodiment the storage server is embodied as D module of the storage operating system to service one or more volumes of array . In addition the multi protocol engine is embodied as N module to i perform protocol termination with respect to a client issuing incoming data access request packets over the network as well as ii redirect those data access requests to any storage server of the cluster . Moreover the N module and D module cooperate is to provide a highly scalable distributed storage system architecture of the cluster . To that end each module includes a cluster fabric CF interface module adapted to implement intra cluster communication among the modules including D module toD module communication for data container striping operations described herein.

The protocol layers e.g. the NFS CIFS layers and the iSCSI FC layers of the N module function as protocol servers that translate file based and block based data access requests from clients into CF protocol messages used for communication with the D module . That is the N module servers convert the incoming data access requests into file system primitive operations commands that are embedded within CF messages by the CF interface module for transmission to the D modules of the cluster . Notably the CF interface modules cooperate to provide a single file system image across all D modules in the cluster . Thus any network port of an N module that receives a client request can access any data container within the single file system image located on any D module of the cluster.

Further to the illustrative embodiment the N module and D module are implemented as separately scheduled processes of storage operating system however in an alternate embodiment the modules may be implemented as pieces of code within a single operating system process. Communication between an N module and D module is thus illustratively effected through the use of message passing between the modules although in the case of remote communication between an N module and D module of different nodes such message passing occurs over the cluster switching fabric . A known message passing mechanism provided by the storage operating system to transfer information between modules processes is the Inter Process Communication IPC mechanism. The protocol used with the IPC mechanism is illustratively a generic file and or block based agnostic CF protocol that comprises a collection of methods functions constituting a CF application programming interface API . Examples of such an agnostic protocol are the SpinFS and SpinNP protocols available from Network Appliance Inc. The SpinFS protocol is described in the above referenced U.S. Pat. No. 6 671 773.

The CF interface module implements the CF protocol for communicating file system commands among the modules of cluster . Communication is illustratively effected by the D module exposing the CF API to which an N module or another D module issues calls. To that end the CF interface module is organized as a CF encoder and CF decoder. The CF encoder of e.g. CF interface on N module encapsulates a CF message as i a local procedure call LPC when communicating a file system command to a D module residing on the same node or ii a remote procedure call RPC when communicating the command to a D module residing on a remote node of the cluster . In either case the CF decoder of CF interface on D module de encapsulates the CF message and processes the file system command.

The VLDB is a database process that tracks the locations of various storage components e.g. SVSs volumes aggregates etc. within the cluster to thereby facilitate routing of requests throughout the cluster. In the illustrative embodiment the N module of each node accesses configuration table that maps the SVS identifier ID of a data container handle to a D module that owns services the data container within the cluster. The VLDB includes a plurality of entries which in turn provide the contents of entries in the configuration table among other things these VLDB entries keep track of the locations of the volumes and aggregates within the cluster. Examples of such VLDB entries include a VLDB volume entry a VLDB aggregate entry and a VLDB SVS entry as described herein with reference to .

More specifically the SVS is associated with a set of striping rules that define a stripe algorithm a stripe width and an ordered list of volumes within the SVS. The striping rules for each SVS are illustratively stored as an entry of VLDB and accessed by SVS ID. is a schematic block diagram of an exemplary VLDB SVS entry in accordance with an embodiment of the present invention. The VLDB entry includes a master set identifier MSID field for each volume in the set and one or more sets of striping rules . In alternate embodiments additional fields may be included. The MSID field contains the ID of a volume in the SVS. Thus there is illustratively an entry for each volume in the SVS alternatively a larger data is structure not shown may provide a single entry for the entire SVS which includes the MSIDs and data set identifiers DSIDs for each constituent volume in the SVS.

Each set of striping rules illustratively includes a striping epoch field and a type voltype field the latter of which indicates whether the striping rule record refers to the actual volume or instead refers to a snapshot of the volume. Illustratively the field contains a value which designates that the record relates to either a volume or a snapshot. Additionally the entry includes a set size field that specifies the number of volumes in the SVS. The striping rule set also illustratively includes a stripe width field a stripe algorithm ID field and a DSID field . The DSID field contains an identification of each instantiation of the volume or snapshot series as an ordered list of DSIDs.

The striping rules contain information for defining the organization of a SVS. For example the stripe algorithm ID field identifies a striping algorithm used with the SVS. In the illustrative embodiment multiple striping algorithms could be used with a SVS accordingly the stripe algorithm ID is needed to identify which particular algorithm is utilized. Each striping algorithm in turn specifies the manner in which file content is apportioned as stripes across the plurality of volumes of the SVS. The stripe width field specifies the size width of each stripe. The DSID field contains the IDs of the volumes or snapshots comprising the SVS. Moreover other fields may specify the function and implementation of the various volumes and striping rules of the SVS. For example one or more other fields may denote the MDV of the SVS and other fields may denote the manner of implementing a particular striping algorithm e.g. round robin.

As noted the Locate function enables the VSM and other modules such as those of N module to locate a D module and its associated volume of a SVS in order to service an access request to a file. The Locate function takes as arguments at least i a SVS ID ii an offset within the file iii the mode number for the file and iv a set of striping rules and returns the volume on which that file offset begins within the SVS. For example assume a data access request directed to a file isis sued by a client and received at the N module of a node where it is parsed through the multi protocol engine to the appropriate protocol server of N module . To determine the location of a D module to which to transmit a CF message the N module may first retrieve a SVS entry to acquire the striping rules and list of volumes associated with the SVS. The N module then executes the Locate function to identify the appropriate volume to which to direct an operation. Thereafter the N Module may retrieve the appropriate VLDB volume entry to identify the aggregate containing the volume and the appropriate VLDB aggregate entry to ultimately identify the appropriate D module . The protocol server of N module then transmits the CF message to the D module .

Thus it should be understood by those skilled in the art that the invention provides a method for managing space availability in a distributed environment. Specifically due to the distributed nature of the striped file system across multiple nodes in a cluster write requests can be routed to different constituent volumes which may have different capacities or different levels of space availability. Detecting and handling the space availability or shortage among the distributed constituent volumes of the present invention allows a smoother I O access to the striped volume because these requests can be routed to a different volume if another is low in space. The cross stripe write operation that has already been accepted is also accommodated in the present invention.

The foregoing description has been directed to particular embodiments of the invention. It will be apparent however that other variations and modifications may be made to the described embodiments with the attainment of some or all of their advantages. Specifically it should be noted that the principles of the invention may be implemented in a non distributed file system. Furthermore while this description has been written in terms of D and N modules the teachings of the present invention are equally suitable to systems in which the functionality of the N and D modules are implemented in a single system. Alternatively the functions of the N and D modules may be distributed among a number of separate systems wherein in each system performs one or more functions. Additionally the features of the present invention have been described with respect to a cluster containing two nodes however it is equally applicable to clusters including a plurality of nodes which allow for an n way failover. Additionally the procedures processes and or modules described herein may be implemented in hardware software embodied as a computer readable medium having program instructions for one or a combination thereof. Therefore it is the object of the appended claims to cover all such variations and modifications as come within the true spirit and scope of the invention.

