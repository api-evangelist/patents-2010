---

title: Integrated circuits design
abstract: This invention concerns an automated method of generating a design for an I/O fabric of a target integrated circuit having a core and pins. A process tool executes algorithms to generate a synthesizable representation of the I/O fabric ring in hardware description language. It imports integrated circuit design data, and from it captures I/O specification data for a circuit core, library of cells, pin, I/O control, BSR and I/O cell chaining, and die. The tool validates the specification data, and generates the I/O fabric design by configuring and inter-connecting a pin multiplexing and control matrix structures according to constraints for signal control, and timing. The structures includes on both the input and output paths of each pin a functional multiplexer matrix structure, a test multiplexer matrix structure, an override matrix structure, a multiplex select and control matrix structure, and an I/O Cell control logic. A required pin output circuit is configurable by modification of the I/O specification data, and/or, modification of a manner of wiring the algorithms, and/or by modification of the algorithms. The tool wires algorithms according to a wiring framework, and said wiring framework is modifiable.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08386980&OS=08386980&RS=08386980
owner: Duolog Research Limited
number: 08386980
owner_city: Dublin
owner_country: IE
publication_date: 20101118
---
This application has a priority of Irish no. 2009 0880 filed Nov. 19 2009 hereby incorporated by reference.

While integrated circuit functional complexity keeps growing the number of I O pins on a package hasn t been keeping pace and the complexity of the I O ring has had to compensate. Many chip manufacturers are resolving multiple application requirements into single chip solutions and are giving their customers a menu of chip interfaces to choose from. Increasing gate density allows more functionality to be implemented in these devices and the number of available pins imposes limitations.

Next generation I O requirements are leading us away from the traditional perspective of an I O ring with a few hundred silicon gates to a complex and interdependent I O fabric with requirements driven from many hardware design disciplines. Traditionally in integrated circuit chip design the I O ring was a top level component within which all I O related logic was instantiated. Typical components included I O cells boundary scan registers BSRs some minor pin multiplexing and other glue logic type of functionality. Indeed the I O integration task is on the critical path of many chip designs. With increasing I O layer complexity device pins are heavily bound within a pin limited package. There is extensive sharing of pins for functional and test purposes. With this growing complexity the I O ring is evolving into an I O fabric that needs to allow full utilization of pin resources and balance constraints from a multitude of sources including functional DFT timing power die and package constraints.

A device pin is a physically limited resource. While it really can only be one thing at one time in a chip with multiple applications it may have different functions. The pin may also need to be utilized by test equipment to gain access to the internal test infrastructure. The internal chip core functions may require two to four times the number of available device pins leading to complex many to many multiplexing scenarios. As a consequence a single device pin may have several functional modes as well as several test modes all with their own timing and power requirements. To overcome this limitation the I O fabric has to be highly configurable. The configuration scheme has to be balanced to ensure that the selection of one interface can co exist with several others and this leads to some interfaces having sets of I O pins in different configurations. This many to many I O mapping leads to I O pins having several system functions and several test functions. Some approaches exist in the industry which use time division multiplexing to reduce the number of pins between devices but where chips need to connect to specific devices this approach is not satisfactory. With pin sharing it may be that different pins have different timing requirements.

All device pins require I O circuitry typically known as an I O cell which drive signals out of the chip or inputs into the chip. I O cells typically have directional attributes so they can be input output or bidirectional. There may be other types of functionality e.g. open collector analog etc. I O cells themselves are becoming more complex and therefore require more fine grained control to account for process voltage and temperature variation in the manufacturing process and operating conditions of the device. The complexity of the I O cells are increasing in order to take into account specific control requirements such as pull up pull down PUPD Load Control Slew rate Input Enable Wakeup output current strength bus hold and signal termination control. Each of these I O cell control functions requires the insertion of specialized control logic per pin into the I O Fabric. Serial interface protocols also play a part in additional complexity such as Utopia IV SPI 4.2 SFI 4 and 10 Gigabit Ethernet. Different types of I O cells such as multi pad I O cells Analog I O low voltage differential signaling LVDS Double Data Rate DDR I O cells have emerged to handle these various interface protocol requirements. These requirements have increased the complexity of the I O cells significantly and thus the control logic needed for these I O Cells. shows a typical bidirectional I O cell with an output and an output enable which are used to drive the output onto the device pin . The value on the device pin can also be used as an input to the chip and driven as a core input . This I O cell also has pull up pull down control which can be used to enable pull up pull down resistors internal to the I O cell. There may be additional control signals to control such things as power and slew rate.

To comply with complex DFT Design for Test requirements additional logic needs to be added to chips in order to ensure that they can be properly tested. This results in additional logic being added to the I O fabric in the form of test multiplexing Boundary Scan BSR logic and test logic to implement testing. The boundary scan chain logic provides a mechanism to test interconnects between and within integrated circuits without using physical test probes. shows a typical BSR Cell. Essentially a BSR cell it inserted across a pin data path. On an output path a core pin destined for an I O cell is connected between the BSR s data in and data out . In normal mode of operation data out is equal to data in. However in test mode setting mode to 1 the data out can be driven from a hold register which can be set at a specific value by test circuitry using a BSR scan chain. By controlling BSR cells inserted on outputs and output enables the actual I O cell functionality or even circuitry external to the chip can be tested. A BSR cell can also be inserted on the input path and allow control and observability of input pins. BSRs may also be put on I O Cells control paths .

For functional requirements the multiplexer logic generated for a given device pin needs to take into account timing sensitive signals and logic.

For power requirements power sensitive devices are becoming much more prevalent. Power sensitive devices have increasingly granular power islands which can be turned off in order to conserve power. In a power sensitive device the physical view of the system is very different to the functional view and this can seriously impact the chip infrastructure as low power design techniques require rethinking of the entire IC design flow. Power reduction and I O cell power optimization is a key target within most SoC design methodologies. Power optimization can result in the transposing of another layer of logic and control within the I O cell and correspondingly the I O ring including the insertion of power isolation cells and voltage level shifters.

When considering that the granular multiplex and control circuitry for a single chip pin may be extensive the problem is exacerbated when there are hundreds or thousands of pins and where the requirements may change frequently. Prior approaches to integrated circuit design have involved manually coding the specific logic required for each pin and potentially sharing functional and test logic implementation between several teams. Manual coding of incrementally changing I O requirements leads to poorer design quality and high consumption of design resources to design and verify the I O ring. Also the turn around time between a requirements specification change and a resulting change in the I O ring implementation circuitry could be excessive.

Generally many prior pin sharing approaches focus on the switching mechanism that decides who gets control of the resource. The switching mechanism can either be done on time cycle TDM or by some level of handshaking between two chips but this would mean that both chips need to be designed with this mechanism in mind. This falls down however when a chip has to be connected to different devices that may not be aware of any pin sharing protocols.

The invention is directed towards achieving improved integrated circuit design and improved I O rings to address at least some of the above problems. Objectives include 

The invention achieves at least some of the above objectives by capturing in an automated tool an extensive range of I O requirements in a generic fashion and automating design of an I O layer.

The invention provides a method of generating a design for an I O fabric of a target integrated circuit having a core and pins the method being performed by a programmed computer operating as a process tool executing algorithms to generate a synthesizable representation of the I O fabric ring in hardware description language. The method comprises the steps of 

The latter is achieved in a preferred embodiment by synthesizing configuring and inter connecting multiplexers in a cascaded arrangement according to constraints for signal control and timing wherein a control matrix structure is realized for each pin on both the input and output paths for the following logic types 

In one embodiment a required pin input and output path logic is configured by modification of the I O specification data and or modification of a manner of wiring of the algorithms and or by modification of the algorithms.

In one embodiment the tool wires algorithms according to a wiring framework and said wiring framework is modified.

In one embodiment the output path for a chip pin is sourced during the method from any number 1 . . . n of functional or test core pins there being different pin functional or test modes for at least some different sources and comprising the step of dynamically selecting a functional or test core pin for an output pin wherein the selection for a given logic type controls an individual chip pin a group of related pins or globally all chip pins.

The output path of a chip pin may be dynamically controlled during the process from any number of pin 0 . . . n output overrides in which an override is enabled by a Boolean logical equation of signals existing within the chip.

In one embodiment the method applies control by setting values in the override matrix structures comprising any or all of 

In one embodiment the method comprises performing timing optimisation for functional or test output path multiplexer logic in which for each chip pin a priority ordering of input signals to the multiplexer is created to determine timing priority through said multiplexer.

In one embodiment the tool s default configuration is that overrides have precedence over test multiplexing which has precedence over functional multiplexing.

In one embodiment timing priority of a given logic type in the I O fabric is configurable and the tool s default configuration is that functional multiplexing has precedence over test multiplexing which has precedence over overrides.

In one embodiment the method comprises generating a behavioral description of a multiplexer and combining said multiplexer behavioral descriptions in a cascade of logic to provide the I O fabric design.

In another embodiment the method comprises the steps of automatically replacing the generated behavioral description with a structural multiplexer cell instance from a library extracting conditional statements from the behavioral multiplexer description and assigning them a numeric vector based on their priority and using said numeric vectors to select the input logic signal which will be driven on the output of the structural multiplexer cell.

In one embodiment the prioritization of the chip pins multiplexed on a core pin input path is determined based on logic type with the lowest mode number within the logic type taking precedence and if the input core pin is in the same mode for the logic type on different chip pins then the highest ordered chip pin will take precedence.

In one embodiment the logic of the I O fabric is tagged according to power domains and thus the inputs and outputs of the multiplexers have an associated power domain and multiplexers are fragmented on the basis of the power domains.

In one embodiment I O control override equations are used to control and configure the I O cell used by a chip pin equation definitions are re used by substitution of dynamic information and the resulting logic when equivalent is shared by multiple I O cell control ports.

In one embodiment the tool generates the behavioural description for test or functional output signal multiplexer logic by performing the steps of 

In one embodiment the tool generates the behavioural description for test or functional output enable signal multiplexer logic by performing the steps of 

In one embodiment the tool generates the behavioural description for an enable signal selection multiplexer by performing the steps of 

In one embodiment the tool generates the behavioural description for input override multiplexer logic by performing the steps of 

In one embodiment the tool generates the behavioural description for input multiplexer logic by performing the steps of 

In another aspect the invention provides a computer readable medium having a computer readable program code embodied thereon said code being adapted to implement when executing on a digital processor the steps of a method as defined above in any embodiment.

In a further aspect the invention provides a data processing system comprising a digital processor memory a storage device and input and output interfaces and the processor being adapted to perform a method as defined above in any embodiment

In a still further aspect the invention provides an integrated circuit having a core and pins and an I O fabric with multiplexers wherein there is different logic on pin output paths and pin input paths there is a cascaded multiplexer arrangement to achieve control priority and timing priority for functional test and override logic types wherein the multiplexer arrangement provides 

In one embodiment the multiplexer arrangement for each logic type in the overall cascaded multiplexer arrangement is implemented in first and second multiplexer stages wherein 

Referring to a tool spinner captures from imported documents and user input an I O specification including a core specification library of cells pin specification I O control specification BSR and I O cell chaining specifications and die and package specification. The I O specification can be captured directly by a user in the tool spinner or imported from external sources. There may be various sources of information e.g. HDL VHDL or Verilog files describing I O cells or Excel sheets having pin multiplexing information. The tool validates the specification for coherency and generates a design for an I O fabric of a chip . The tool not only generates the I O fabric or ring but also the chip top level design and hook up to the internals of the chip core .

The core specification involves describing the core pins which are available to be multiplexed in functional and test modes. A core pin is designated as being either a functional or test core pin. The signal paths supported by the core pin are described along with the type and polarity of any associated output enable. Each core pin is assigned a protection value a set of prioritized input overrides and a domain property. As part of the generation step the tool spinner will automatically infer all necessary control signals on the core interface however users can also capture these directly if desired.

The library of cells contains the interface description for I O BSR and Structural Mux cells used in the I O Fabric. The interface ports of the cells are annotated with a function property so that the tool spinner understands how they should be connected. Other cell specific properties can also be captured for example the Joint Test Action Groups JTAG Boundary Scan definition language BSDL cell type of a Boundary Scan Register BSR cell.

For a given pin a user defines the I O cell to use the core pins multiplexed in functional and test modes the priority of functional and test modes per pin the granularity of control needed for test and functional multiplexing and the prioritized set of output overrides. Users can define three domain properties per chip pin which determines which domain each type of logic created for a given chip pin is grouped in. Users and also specify whether a structural multiplexer cell should be utilized for a given logic type.

The I O control specification allows a user for all the ports into and out of the I O Cells for all the pins to define if a BSR cell should be instantiated and the I O control override equation to use on control ports . For the I O control override equation users can specify the location where the logic should be created and whether a structural multiplexer cell should be utilized.

The BSR and I O cell chaining specifications allow the user to decide how many chains of a given type should be created and the pins which will be a member of the chain. The chaining order of the pins which are a member of a chain is normally defined by the die pad ordering in the die specification. Each chain definition captures the type of chain the start pin for the chain the scan in port for the chain the scan out port for the chain. A BSR chain also requires that a chain select signal be defined and the JTAG control TDI TDO TMS TCK NTRST RTCK interface be specified.

For each die pad an associated pin must be assigned. The die pads are assigned geometrical coordinates so that their location on the chip s die can be determined. The die pad ordering used to construct BSR and I O cell chains needs a direction to be defined clockwise or anti clockwise so that the order of the pins can be determined. Additional backend flow related properties can be defined for die pads. Additional specialized die pads power filler spacer and corner pads which do not affect the generated I O Fabric can also be defined. The tool spinner supports the capturing of package related information but this does not affect the type of I O Fabric which will be generated.

The method performed by the tool generically specifies I O requirements and generates optimised multiplexing and control circuitry for each of the chip pins on a device. The I O logic can be fragmented into granular blocks of control logic and regrouped into a new hierarchy in order to facilitate the creation of power domain islands and thus the power partitioning of the chip s logic.

Referring to and a set of functional core and test core pins can be selected for multiplexing on a device pin. shows a generic output pin mux structure generated by the tool. It is represented in the tool as a set of matrices namely a multiplex select and control mux matrix a functional mux matrix a test mux matrix and an output override matrix .

The term core pin is an abstraction which refers to three types of signals on the core interface namely output output enable and input signals. These three signal paths are referred to as a core pin when they relate to the same functional or test logic inside the core. The table below shows some different types of core pins which are generated 

The polarity of the Output Enable signal can be either active high or active low. Multiplex select and control logic will automatically align to the polarity of an output enable required by the I O Cell.

As described in the table above it is optional as to whether a core pin is comprised of an output enable signal. If it is multiplexed onto a device pin whose I O Cell requires an output enable then the multiplex select and control logic will provide logic to turn the output enable ON when this core pin is selected in either the functional or test matrix.

Each device pin has an associated functional and test multiplex selection signal. Collectively these two signals can be referred to as the device pin configuration signals and are used to configure the multiplex mode of operation of the device pin. The functional mux selection signal determines which functional core pin is selected. Likewise the test selection signal determines which test core pin is selected. These selection signals can come from the core interface or can be generated from user specified logic inside the I O ring . The selection mechanism is configurable whereby the functional and test multiplex selection signals can either be global where signals which affect all device pins grouped which affect a subset of the device pins or individual which affects each device pin independently. The functional and test selection signals are optional in cases where the device pin is dedicated and only has a single functional or test core pin multiplexed.

The set of device pin configurations can be referred to as the overall chip configuration. By configuring each device pin using the mux selection signals one can determine the overall configuration of the device.

A key aspect of this invention is the configuration and generation of a flexible multiplexing and control structure which implements multiplexing of N N functional or test core pins. This results in multiplexing and control logic on pin output and input paths. shows such a structure for the output path for a given device pin. The multiplexing is N N because a single device pin can have multiple core pins multiplexed likewise a single core pin can be multiplexed onto multiple device pins. The output path for each device pin is made up of a pair of signals namely the output signal and an associated output enable signal. While the output enable signal is not mandatory the output enable signal going to the I O cells may be required so control logic is generated when necessary. An output enable signal can be shared by a group of core output pins. The polarity of the output enable signal can be different for each of the core output signals which are multiplexed. The multiplexer selection signals are used to determine which input into the multiplexer is selected. Separate control logic needs to be generated for the output and output enable paths for both functional and test paths.

In the functional test and override logic are all shown at the same level or order in relation to the multiplex select and control logic . It is described below how the multiplex select and control logic can be constructed such that the user can choose a priority of control and timing priority for the three logic types .

A further level of timing layout optimisation is provided for the functional and test multiplexer logic. For each device pin the user can select the priority ordering of the input signals to the multiplexer and therefore choose exactly the timing layout through this multiplexer.

The table below describes the effect of the different output override types on the logic values driven on a given device pin.

When a particular override is enabled for a device pin s output override matrix then the override selection will be ENABLED ON which ensures that the output signal output enable and PUPD control will be selected through the cascade of device output path logic shown in and therefore have priority of control over the output and output enable signals logical values as well as the PUPD control . The PUPD Control signal is a two bit vector that controls the desired pull value on the I O Cell output.

The process tool can define an override on chip pin X which has a bidirectional I O cell of type PUZ that is enabled when a hardware port called HIGH Z on a core interface is active high . The tool generates the logic such that when a signal called HIGH Z is active it will immediately force the output enable inactive and force the PU PD logic inactive thereby leaving the output of the buffer high impedance or as it is known in logical terms Z . This will remain in this condition until the HIGH Z goes inactive independent of the functional or test multiplexing.

A flexible multiplexing and control structure is generated for the core input path . This multiplexing structure is required because of the need to multiplex N N device pins because a single core input path can be sourced from multiple device pins multiplexed likewise a single device pin can be multiplexed onto multiple core input paths. The core input pin can be a functional or a test pin.

The input multiplex select and control logic has in this embodiment a multiplexer selection signal per device pin input path which is multiplexed onto this core input path . The actual number of mux selection signals is dependent on the granularity of the mux selection signal global grouped or individual as described above. In the case where multiple device pin mux selection signals are enabled at the same time then the pin with the lowest mode number takes precedence. If the input core pin is in the same mode on different chip pins and their pin mux selection signals are enabled at the same time then the highest ordered chip pin will take precedence.

The table below describes the effect of the different input override types on the logic values driven on a given device pin.

When a particular override is enabled for a core input path s override matrix then the override selection will be ENABLED ON which ensures that the override value will be selected through the cascade of core input path logic and therefore have priority of control over the core input .

A further level of logic is provided in the input multiplexing and control matrix called input protection logic. Because of N N multiplexing possibilities it would be possible that for a particular chip pin configuration a specific core input is not used. It is important that if the core input is not used that it is protected from toggling spuriously or given a non deterministic value as it could cause unknown side effects. The input path needs to be driven by a valid value to avoid undefined logic state when no input multiplex mode is selected and no input override is enabled. The process tool allows the user to define the protection value of a core input if it has not been selected. Input protection logic can be considered the lowest priority of control or default logic on the input path. It will be the default condition in the input multiplex select and control matrix and therefore does not require a selection signal. The table below describes the effect of the different input protection types on the logic values driven on a given input path .

Other aspects included in a designed I O fabric are a the specific priority of control and b timing layout of the pin multiplexer and control structures on the output path. The three different types of logic functional test and override each have different requirements in terms of priority of control and timing layout. Priority of control can be defined as the logic type which will take priority when more than one of the logic types are enabled active at a given instance in time. The logic with the highest priority of control will be the logic value driven out on the device pin or driven in the core input path . Timing layout refers to the number of gates on the logic path and hence the delay that the logic will experience whilst propagating through this part of the integrated circuit.

Referring to the different logic required on both the device pin output path and input paths results is the generation of a cascaded multiplexer arrangement of the output path multiplex select control matrix with multiplexers to achieve the desired control priority and timing priority for the different logic types functional test and override . In this diagram the output override box has not been broken out. This arrangement achieves 

The order of priority of control is described based on a default logic ordering override test and functional . Where override logic has the highest priority of control and functional logic has the lowest. Likewise for timing layout in the description of the invention is described in terms of the default timing layout functional test and override . In the case of both priority of control and timing layout other realisations of the invention might result in an alternative ordering of the cascaded multiplexer arrangement.

The I O control override equations are written in the form of one or more assignment condition statements which can form complex multiplexing structures tie off equations or direct connections between the I O cell control port and the core ports . condition assignment condition assignment assignment

The equation may be a single assignment statement which therefore allows direct connections and tie off values to be defined. The condition statements should always evaluate to a Boolean value. An equation language used to define the conditions and assignments is made up of 

A set of rules are enforced to ensure that the identifier will result in the creation of a legal HDL identifier. These identifiers declared in the assignment and condition statements are used to locate ports on the core interface . A slice or portion of the port can be selected using the slice notation left right . The equation language supports different number formats decimal 1921 binary 0b101 octal 0o36 hexadecimal 0xfA6 in order to declare constants within the assignment and condition statements. The I O control override equation s language supports a standard set of operators . Operator precedence can be explicitly defined using brackets.

The equations can contain substitution sites which are designed to allow flexibility in the port names and constants used by the equations. Through the use of substitution sites a single equation definition can be used across multiple I O Cell ports where the actual control logic that is generated will be unique to the I O cell port . On generation the substitution sites are replaced with dynamic information. The table below describes the available set of substitution sites and the dynamic information with which the substitution site can be replaced by 

Through the substitution sites the user has full access to the tool s application programming interface API . For example the equation below accesses the last character in a port name Id2 for a given chip pin pinY 

When dynamic information is substituted the resulting equation is pinY sel 2 . In other realisations other possible substitution sites could be provided such as iocell which might be replaced by the name of the I O cell used on the chip pin.

On generation the I O control override equations are translated into the required RTL representation and the connections to the core interface and the IO cell control interface are created. The user can choose where the logic should be located. By default it is placed in the chip pin s control component. By specifying a location for the equation logic the user can ensure that the same I O control override logic can be used to control multiple I O cell ports and thus helps reduce the amount of logic gates required by the I O fabric.

Another aspect of the invention is the fragmentation or partitioning of device pin multiplexer and control structures based on power domains which can be used to achieve considerable improvements in energy efficiency. The fact that the logic can be switched off dynamically results in better power efficiency. Unless the logic is fully fragmented it will not be possible to achieve the desired power saving using power design techniques.

This invention allows pin and input multiplex logic to be fragmented depending on the source domains for each of the possible sources. collectively show how the multiplexer logic can be fragmented by the process tool in order to segment the multiplexer logic into power domains. In there are six core pin output and output enable signals being multiplexed in a functional output multiplexer and functional output enable multiplexer which belong to two different power domains. The multiplexer logic is constructed as shown in with no regard to power domain fragmentation. In the dotted lines represent the original functional output multiplexer and functional output enable multiplexer which have been fragmented across power domain groups. The six core pins being multiplexed belong to two separate power domains. Thus the output multiplexer is fragmented into two multiplexers to account for the two power domains at the core level. A final multiplexer belongs to the device pin s power domain and is used to combine the selected output from the two core pin domains. Each multiplexer group corresponds to an individually switchable domain of the core. This one to one mapping allows disabling of the relevant multiplexer circuitry when a core domain is switched off. The device pin domain ensures that a valid value will be driven on the device pin s output path regardless of whether or not all the core pin domains have been switched off or not. The same technique can be applied to the test multiplexer logic and the override logic .

In order to achieve this fragmentation of the multiplexer logic each output core pin path which needs to be test or functionality multiplexed has a power domain associated with it. Core pins with a common power domain are first multiplexed so that all the multiplexer logic for this domain is in a single block.

This first level of multiplexing is then followed by a second level of multiplexing where this level of multiplexing is in the device pin s power domain. This second level of multiplexing is either the final functional or the final test multiplexer.

The table below shows the domain property which will be assigned to each of the different types of logic which are generated in the I O fabric.

The three separate power domain properties on a device pin are used to place different portions its I O logic into different domains. The values for these three domain properties can be the same.

The input path s multiplexer select and control logic and the input override logic is placed in the core pin s power domain. As all this logic belongs to the core pin input path s power domain and therefore it is not necessary to fragment the logic.

The logic fragmentation is designed to make it quite straightforward to create a logic hierarchy based on power domains from the fully fragmented logic. Logic from different device pins which are part of a common power domain can be combined into a logic hierarchy. The process tool allows the desired hierarchy to be generated by allowing logic to be selected depending on its domain or logic type and may be grouped at several different levels to achieve this hierarchy.

Power optimization can then be applied to the resulting power domain partitioned logic hierarchy. These power optimization techniques result in the transposing of another layer of logic and control within the I O fabric including the insertion of power isolation cells and voltage level shifters on the power domain logic hierarchy boundaries. In order to make it easier to apply these techniques it is necessary in certain cases to create feed through component instances so that they can be tagged with a domain property to allow the fore mentioned power optimization techniques to be applied.

Another aspect of the invention shown in is the ability to use hand crafted transistor level logic for timing critical or glitch free paths. RTL to describe the multiplexer logic is automatically generated from the I O specification . This RTL can then be synthesised into actual transistor level gates. For timing critical or glitch free paths it is possible to choose to utilise transistor level logic which has been hand crafted to guarantee a particular timing constraint is meet in place of the RTL multiplexer logic automatically generated by the spinner tool . This technique can be applied to any part of the multiplexing and I O cell control circuitry described in previous sections. In the I O specification users simply need to indicate that hand crafted logic should be utilised for a given logic type on a given device pin .

The interface of the hand crafted transistor level logic henceforth referred to as a structural multiplexer cell shown in is captured as part of the I O specification . The I O specification will contain a library of structural multiplexer cells whose interface contains a certain number of MuxIn ports of a particular width a single MuxOut port whose width matches the MuxIn ports and a single MuxSelection port . The ratio of the structural multiplexer cell is defined by the ratio of MuxIn to MuxOut ports. The width of the MuxSelection port is dependent on this ratio. On generation the automatically generated RTL multiplexer logic will be replaced by a structural multiplexer cell from the library which has the required multiplexer ratio and correct MuxIn MuxOut port width. The MuxIn ports are numerically ordered where the port with the lowest numeric value will have the highest timing priority through the hand crafted transistor logic. This ensures that the structural multiplexer when connected will maintain the desired timing priority for the different signals being multiplexed.

The RTL multiplexer logic which is automatically generated by spinner contains both the assignment and condition statements that collectively describe the multiplexer logic. In order to replace it with a structural multiplexer cell the conditional statements must be extracted and used to create a separate RTL multiplexer structure condition selection mux which is used to select the path through the hand craft transistor logic. Each condition statement is assigned a numeric vector based on its priority in the original RTL multiplexer logic. In the case of the OutputEnable path any polarity issues are automatically handled as part of the original assignment statements of the automatically generated RTL multiplexer logic. Any signals whose polarity is incorrect must be first inverted before entering the structural multiplexer cell.

The tool allows very flexible device pin multiplexing and control logic to be automatically generated which take into account the unique timing control priority and power design constraints on the device pins and any core signals which are multiplexed on it.

Thus far in the description the actual resulting output logic which is created has been described. The algorithms used to create the logic for the I O fabric are described in representative pseudo code below. This pseudo code covers the preferred embodiment described in for the functional and test output path. The pseudo code does not cover all the corner cases which have been realised in the spinner tool particularly scenarios where logic is omitted for example a dedicated core output pin connected directly to an I O cell output port .

In the case of an override of type TestEnableOff an additional mux in inserted on the test enable path in order to force the disabling of the test logic enable off . The values of the constants used in the table above are described here 

The test enable value forms a portion of test select logic . The test enable is ENABLE ON when ever a test mode is selected which has a valid output. The test enable logic is best described using the logic truth table below.

The pseudo code below describes how the functional output multiplexer logic is created. It should be clear that the pseudo code is very similar to that of the test output multiplexer logic described above.

The algorithm used to create functional output enable multiplexer logic is very similar to that of the test output enable multiplexer logic and therefore no pseudo code example has been provided.

The algorithm used to create the functional selection logic is very similar to the test selection logic and therefore no pseudo code example has been provided.

The pseudo code below describes how the input override logic is combined with the core pin s input multiplexing and protection logic.

Domain partitioning is an optional set of algorithms which can be applied to the I O fabric the spinner tool supports the generation of logic with or without these techniques being applied.

The algorithm used to fragment the functional and test output and output enable multiplexer logic has already been described in .

A table outlining the domain property which is applied to each logic type in the I O fabric has already been detailed. When partitioning the I O fabric it is necessary in certain circumstances to introduce feed through component instances in order to allow them to be tagged with a domain property. This then allows power isolation and level shifter logic to be easily inserted. A feed through component is one where the inputs to the component are simply feed through the component and appear as outputs with no additional logic being inserted. These types of components are normally undesirable as they lead to the creation of unnecessary logic buffers.

The pseudo code below describes when a feed through component should be created on the functional output or output enable paths.

The pseudo code below describes when a feed through component should be created on the test output or output enable paths.

The pseudo code below describes when a feed through component should be created on a core pin input path .

The pseudo code below describes how any of the automatically generated multiplexer logic generated by spinner can be replaced by a structural mux cell instantiation.

Thus far in the description the actual resulting logic which is created has been described as well the individual algorithms used to generate particular portion of the I O Fabric logic. In order to generate the full logic the complex dependency graph between the individual algorithms must be described and the actual run order of each of the algorithms defined. The spinner tool describes these dependencies using an XML wiring framework and has a wiring engine which uses this XML description too control the order in which individual algorithms are executed. The table below details the main elements of the wiring framework 

The wiring framework is a generic technology which can be used to generate any type of hardware logic which can be described via a set of interdependent algorithms. The wiring model XML is human readable and therefore can be modified to insert new contribution steps algorithms or change the generated logic E.g. the cascaded order of the multiplexer logic thus achieving an alternative priority of control and timing layout for the pin multiplexer and control structures on the output path .

The wiring model consists broadly of two types of elements structural elements and contribution specification elements.

The structural portion of the wiring defines a set of elements which can be bound to contributor slots and therefore forms a structural fabric which is used to communicate information messages between the various contributors during the synthesis. They are basically a tree of named elements. Block and hook wiring model elements can be bound too by a contribution declaration using a bind. Where two contributions bind to the same structural element Block or Hook then these contributors can pass information to each other. Therefore as stated above they form a structural fabric to allow contributors to pass information via slots mailboxes to each other.

The contribution specification portion of the wiring model essentially defines the set of contributors which will be involved in the generation of the logic and allows the dependencies between the different contributors to be defined so that their run order can be determined. A contribution declaration can contain zero or more required binds and zero or more provided binds. A bind creates a two way binding 

The required binds define which slots message boxes must be filled before the contributor associated with the contribution declaration can be run. The provided binds effectively specifies a contract that the contributor aims to fulfil by putting data into these slots when it is run.

The scope element is used to define the dimensions of the wiring model. The scope declaration should be considered a marker which associates a scope dimension to the elements that it the scope declaration contains. A scope declaration references a scope handler. The scope handler is an implementation which determines how often the contributors will be run via the wiring context. In the spinner wiring model some sample scopes include 

The table below shows a small portion of the wiring framework used by the spinner tool which is used to create the input override and input multiplexing and control matrix logic.

On the second pass the wiring engine will see if any further contributors have had their dependencies fulfilled. The only potential candidate is the input mux contrib . This is the contributor which implements the algorithm previously described to create input multiplexer and override logic. The input mux contrib contributor will potentially provide two slots PROTECTION CP and STRUCT MUX. Depending on whether the slots have been provided the wiring engine will determine if the following two contributors should be executed in the third pass.

The wiring engine moves onto the next core pin in the scope when a pass occurs where no new contributors have had their dependencies fulfilled. The same steps will be repeated for each core pin in the scope.

The invention is not limited to the embodiments described but may be varied in construction and detail.

