---

title: Providing support for multiple authentication chains
abstract: responding to the user login request based on execution results of the authentication modules.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09325500&OS=09325500&RS=09325500
owner: Red Hat, Inc.
number: 09325500
owner_city: Raleigh
owner_country: US
publication_date: 20100303
---
Embodiments of the present invention relate to user authentication. Specifically embodiments of the invention relate to a method and system for supporting multiple chains of authentication modules.

Programs which grant users access to a system verify each user s identity through a process called authentication. Historically each such program had its own way of performing the task of authentication. Pluggable authentication modules PAM is a mechanism to integrate multiple low level authentication schemes into a high level application programming interface API . It allows programs that rely on authentication to be written independent of the underlying authentication scheme.

Typically a PAM based authentication process consists of a serial stack of authentication modules that have to run one after another in a very specific order. This arrangement does not provide sufficient flexibility to support different authentication requirements of various systems.

Embodiments of a method and system to support multiple chains of authentication modules are described herein. In one embodiment a login manager residing on a client computer system receives a user login request and identifies multiple chains of authentication modules that should be performed in order to allow a user to login where each chain of authentication modules is associated with a chain manager that facilitates execution of respective authentication modules. The login manager determines dependencies between chain managers invokes the chain managers in the order defined by the dependencies and responds to the user login request based on execution results of the authentication modules.

Embodiments of the invention provide a flexible authentication mechanism that allows multiple chains of authentication modules to be executed in parallel with each chain of authentication modules being built dynamically using a modular approach. The order in which the authentication module chains are executed can be configured and new authentication module chains can be added as needed.

When users of clients attempt to login they are authenticated for access to different systems. For example a user may first be authenticated for access to his or her local machine client then the user may be authenticated for access to each of the servers and further the user may be authenticated for access to the KDC and so on. Each type of authentication may be performed using different authentication modules such as pluggable authentication modules PAM . For example a user may be authenticated for access to a local machine using several PAM Unix modules that may perform fingerprint authentication smart card authentication one time password OTP token authentication face recognition authentication password authentication or any combination of the above.

In one embodiment each client hosts an extended authentication system that provides support for multiple chains of authentication modules. In particular contrary to a conventional PAM system having a serial stack of authentication modules that run one after another in a very specific order the extended authentication system includes multiple stacks of authentication modules that can run in parallel. The order in which the stacks of authentication modules are executed is configurable e.g. by a system administrator and can be easily modified according to the authentication requirements of a certain system. Each stack of authentication modules can be built dynamically using a modular approach. In addition in some embodiments a combination of stacks can be built dynamically as well. Programs that use authentication mechanisms provided by the enhanced authentication system can continue utilizing a modified stack of authentication modules and or a modified combination of authentication module stacks without being recompiled or otherwise modified.

Each chain manger invokes respective PAM plugins based on a specified order. In one embodiment each chain manager has a configuration file e.g. a text file that identifies respective PAM plugins specifies the order in which these PAM plugins should be executed and defines the effect of the execution result of a PAM plugin e.g. whether or not the PAM plugin result must be successful for authentication to continue . A system administrator may modify the configuration file to add new PAM plugins to the chain remove existing PAM plugins from the chain change the order of execution or change the effect of the result of a PAM plugin on the authentication decision . Once the configuration file is modified this modification is reflected in the functionality provided by the corresponding chain of the PAM plugins without requiring any changes to its chain manager or other components of the system or to programs utilizing the system for authentication.

The chain managers and are controlled by a login manager . The login manager defines the dependencies between the chain managers. In particular the dependencies may identify the chains that should be executed in parallel and may provide conditions for executing a specific chain. For example the dependencies may specify that the first and second chains should be executed in parallel in response to a user login request and that the third and fourth chains should be executed in parallel after at least one of the first and second chains successfully completes its execution. The dependencies may also specify what execution results should cause a user login request to be allowed or rejected.

The dependencies between the chain managers may be configured by a system administrator using a user interface . The dependencies may be stored in a designated data structure such as a file a table etc. In some embodiments the chain managers are plugins that can be easily added or deleted based on input provided by a system administrator via the user interface . In addition the system administrator can specify the dependencies for the new chain manager via the user interface . The resulting configuration information can be immediately used by the login manager without requiring any changes to the login manager or other components of the system or to programs utilizing the system for authentication.

In response to a user login request the login manager identifies current chain managers and dependencies between the chain managers and determines the order in which the chain managers should be invoked based on the dependencies. The login manager then invokes the chain managers in this order and waits for execution results from the chain managers. Depending on the execution results the login manager may reject the user login request or allow the user to login.

Referring to method begins with an enhanced authentication system receiving a user login request block . At block a login manager of the enhanced authentication system identifies chain managers that control authentication modules to be performed for user login. The authentication modules may be PAM plugins that are intended for different types of user authentication.

At block the login manager determines dependencies between the chain managers. The dependencies specify which authentication module chains should be performed in parallel and conditions for invoking the chain managers.

At block the login manager identifies based on the dependencies the first chain manager s that should be invoked in response to the user login request. At block the login manager invokes the first chain manager s . Once the first chain managers are invoked they cause respective authentication modules to execute. Once the execution of the respective authentication modules is completed successfully or unsuccessfully the first chain managers report the execution results to the login manager.

At block the login manager determines whether a condition to invoke a next chain manager is satisfied. A condition may be for example a successful completion of authentication module chains controlled by the first chain managers or by one or more of the first chain managers a completion successful or unsuccessful of the authentication module chains controlled by the first chain managers or one or more of the first chain managers a successful completion of a specific module s in the chain s controlled by the first chain managers a completion successful or unsuccessful of a specific module s in the chain s controlled by the first chain managers etc.

If the condition is not satisfied the login manager determines whether the authentication can still be considered successful block . If so e.g. when the configuration information of the login manager specifies that the user should be allowed to login if the chains controlled by the first chain managers complete successfully the user is allowed to login block . If not the login manager rejects the user request to login block .

If the condition to invoke a next chain manager s is satisfied the login manager invokes the next chain manager s block and waits for execution results from the next chain manager s . Upon receiving the execution results the login manager determines whether there are any remaining chain managers to be invoked block . If so method returns to block . If not the login manager determines whether the authentication can be considered successful block .

If the authentication can be considered successful the user is allowed to login block . If not the login manager rejects the user request to login block .

Referring to method begins with receiving a system administrator request to configure a login manager block . At block the enhanced authentication system provides a user interface e.g. a graphical user interface GUI that allows the system administrator to create or update the configuration information of the login manager. At block the enhanced authentication system receives via the user interface system administrator input specifying dependencies between multiple chains of authentication modules. In one embodiment the system administrator input also indicates what execution results should constitute a successful authentication and what execution results should not constitute a successful authentication. At block the enhanced authentication system updates the configuration information of the login manager. The configuration information may be stored in a file a database or any other data structure.

Referring to method begins with receiving a system administrator request to add a new authentication module chain to a login manager block . At block the enhanced authentication system updates configuration information of the login manager to include a chain manager associated with the new authentication module chain. At block the enhanced authentication system receives via the user interface system administrator input specifying dependencies between the new chain manager and other chain managers. At block the enhanced authentication system updates the configuration information of the login manager with new dependencies.

The exemplary computer system includes one or more processing devices a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or Rambus DRAM RDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a secondary memory e.g. a data storage device in the form of a drive unit which may include fixed or removable computer readable storage medium which communicate with each other via a bus .

Processing devices represent one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processing device may be a complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor processor implementing other instruction sets or processors implementing a combination of instruction sets. Processing device may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. Processing device is configured to execute instructions for an enhanced authentication system for performing the operations and steps discussed herein.

The computer system may further include a network device e.g. NIC Ethernet network card etc. . The computer system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT connected to the computer system through a graphics port and graphics chipset an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The secondary memory may include a machine readable storage medium or more specifically a computer readable storage medium on which is stored one or more sets of instructions for an enhanced authentication system embodying any one or more of the methodologies or functions described herein. The instructions for an enhanced authentication system may also reside completely or at least partially within the main memory and or within the processing device during execution thereof by the computer system the main memory and the processing device also constituting machine readable storage media. The instructions for an enhanced authentication system may further be transmitted or received over a network via the network device .

The computer readable storage medium may also be used to store the instructions for an enhanced authentication system persistently. While the computer readable storage medium is shown in an exemplary embodiment to be a single medium the term computer readable storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The terms computer readable storage medium shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term computer readable storage medium shall accordingly be taken to include but not be limited to solid state memories and optical and magnetic media.

The components and other features described herein for example in relation to can be implemented as discrete hardware components or integrated in the functionality of hardware components such as ASICS FPGAs DSPs or similar devices. In addition these components can be implemented as firmware or functional circuitry within hardware devices. Further these components can be implemented in any combination of hardware devices and software components.

In the above description numerous details are set forth. It will be apparent however to one skilled in the art that the present invention may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present invention.

Some portions of the detailed descriptions above are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion it is appreciated that throughout the description discussions utilizing terms such as receiving determining identifying responding providing or the like refer to the actions and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories registers or other such information storage transmission or display devices.

The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards Flash memory devices including universal serial bus USB storage devices e.g. USB key devices or any type of media suitable for storing electronic instructions each of which may be coupled to a computer system bus.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.

A computer readable storage medium includes any mechanism for storing information in a form readable by a computer. For example a computer readable storage medium includes read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices or other type of machine accessible storage media.

Thus a method and apparatus for supporting multiple chains of authentication modules has been described. It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. The scope of the invention should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

