---

title: Method and system for providing an adaptive input user interface for data entry applications
abstract: Embodiments are described for a system and method for adapting an online user input form that provides user input to a web-based application. A method comprises defining one or more attributes related to one or more fields of the online user input form, obtaining historical data comprising past user input to related user input forms, calculating historical most common values for each attribute of the one or more attributes; and modifying the one or more fields of the online user input form in accordance with the calculated historical average values. The attributes may include at least one of the size, location, and datatype of each field of the form. The method may be implemented through an application programming interface for implementation through server-side and client-side processes that are written in a web-browser compatible markup language.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09405426&OS=09405426&RS=09405426
owner: salesforce.com, inc.
number: 09405426
owner_city: San Francisco
owner_country: US
publication_date: 20101228
---
This application claims the benefit of U.S. Provisional Patent Application 61 309 306 entitled METHOD FOR PROVIDING AN ADAPTIVE INPUT USER INTERFACE THROUGH SOFTWARE by Jamison M. Tanaka filed Mar. 1 2010 the entire contents of which are incorporated herein by reference.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

One or more implementations relate generally to graphical user interfaces in a networked computing environment.

The subject matter discussed in the background section should not be assumed to be prior art merely as a result of its mention in the background section. Similarly a problem mentioned in the background section or associated with the subject matter of the background section should not be assumed to have been previously recognized in the prior art. The subject matter in the background section merely represents different approaches which in and of themselves may also be inventions.

Entering data into a software application is a common process in many online computer applications and web sites. In web sites and web based browser rendered applications this is commonly done using HTML HyperText Markup Language forms. In this case specific tags or elements within the HTML standard such as and so on are used to define screen areas in which user input is to be received. Such input can be in the form of text typed into rectangular fields boxes that are selected or deselected and other graphical user input elements. The form elements are rendered in the client browser at a specific size normally determined by a combination of web browser CSS Cascading Style Sheets JavaScript and HTML attributes. To enhance the user experience and facilitate interactivity application designers and developers commonly attempt to provide input fields and other form elements in a size and arrangement that will best suit the expected data. For example a telephone number field in an application localized for the United States consumer market might appear on the form as . This format exactly fits the expected data of a three digit area code three digit prefix and a four digit suffix and allows the user to simply enter his or her phone number without guessing how the number is to be entered e.g. with or without the area code or dash .

Many items of input data however may not be as easily definable as U.S. phone numbers. In cases where the expected data is relatively unknown or open to various possible formats the application must employ a particular design approach to allow for consistent data processing. Examples of typical current design approaches include 1 making a best educated guess of input format based on similar forms used in the past if any exist 2 implementing a worst case scenario handler such as making a field large enough and unformatted so that any conceivable input string will fit 3 making the fields customizable through application level role level or user level preferences or 4 making the fields customizable on the rendered page through resize controls or drag and drop resizing and placement operations. There are significant disadvantages with each of these approaches. For example option 1 is not always viable especially in distributed enterprise software applications where customers are allowed to use a development toolkit to use build any application they wish and that may include a long list of available object and data types. Option 2 requires reserving large spaces in the page layout that may never even get used thus causing resource inefficiencies in the application and persistence layers which is not ideal for performance scalability readability and usability. Options 3 and 4 each add complexity to the code and the user experience thus increasing chances for bugs and the amount of required training maintenance and support costs.

Accordingly it is desirable to provide techniques enabling efficient and effective user interaction with electronic or online data entry forms through input fields that are optimized based on the type and format of the entered data and the application that is processing this data. Embodiments of currently described approach do not necessarily try to increase the likelihood of page interaction or form submission as it is assumed that the form will be viewed and filled out and submitted by the user. Instead the goal is to make the data entry process easier and more accurate.

In an embodiment and by way of example there are provided mechanisms and methods for providing an adaptive input user interface. These mechanisms and methods can enable embodiments to provide a software method for determining and presenting an adaptive user interface for the input of data as in a form of a web page or Internet intranet application so that the user interface adapts over time and becomes closer to an ideal configuration through programming algorithms that do not require manual runtime actions performed by the user developer or administrator.

The adaptive user interface displays or includes an online form that comprises one or more user input fields. The fields may be denoted by a graphical element such as a box or underlined area that receives user input through keyboard mouse stylus or other input devices. One or more attributes defining modifiable characteristics of the online form are defined such as the size location and datatype of the fields in the form. A method for providing an adaptive input user interface under an embodiment includes processing components that process electronic form input data in real time to obtain a statistical average size for each input data field a degree of importance for each field and an optimum datatype associated with each field. The average size data is used to define the size for each field the degree of importance data is used to determine an optimum location of each field relative to the other fields in the form and the average datatype input for each field is used to constrain user input to match the optimum datatype for each field. A graphical user interface component then displays the optimally sized fields in their defined locations on the electronic form that is presented to the user. In an embodiment the graphical user interface GUI is used as part of a large enterprise software suite of products such as a Customer Relationship Management CRM system in which several implementations of the software require user input or customer interaction with input data fields. Embodiments can also be directed to any and all applications that require user input into electronic or GUI forms that deal with data of different size and type.

While one or more implementations and techniques are described with reference to an embodiment in which and method for providing an adaptive input user interface is implemented in a system having an application server providing a front end for an on demand database service capable of supporting multiple tenants the one or more implementations and techniques are not limited to multi tenant databases nor deployment on application servers. Embodiments may be practiced using other database architectures i.e. ORACLE DB2 by IBM and the like without departing from the scope of the embodiments claimed.

Any of the above embodiments may be used alone or together with one another in any combination. The one or more implementations encompassed within this specification may also include embodiments that are only partially mentioned or alluded to or are not mentioned or alluded to at all in this brief summary or in the abstract. Although various embodiments may have been motivated by various deficiencies with the prior art which may be discussed or alluded to in one or more places in the specification the embodiments do not necessarily address any of these deficiencies. In other words different embodiments may address different deficiencies that may be discussed in the specification. Some embodiments may only partially address some deficiencies or just one deficiency that may be discussed in the specification and some embodiments may not address any of these deficiencies.

Systems and methods are described for methods for providing an adaptive input user interface. Mechanisms and methods for providing methods for providing an adaptive input user interface will be described with reference to example embodiments.

For the purpose of the following description a data object is any type of distinguishable data or information such as an image video sound text or other type of data. A data object may include multiple types of distinguishable data such as an image combined with descriptive text and it may also comprise a dynamic signal such as a time varying signal. A data object as used herein is to be interpreted broadly to include stored representations of data including for example digitally stored representations of source information. A data set is a collection of data objects and may comprise a collection of images or a plurality of text pages or documents. A user is utilized generically herein to refer to a human operator a software agent process or device that is capable of executing a process or control.

A form modification process according to embodiments analyzes data previously input by one or more users historical data into an online form to determine the presence of persistent characteristics or values associated with one or more attributes of the fields within the form. If certain fields are shown to exhibit these persistent attribute values the form is modified to present the fields in their optimum configuration. Under an embodiment the GUI and associated input data processing components of a system implementing the form modification process receive form input data and process this data to obtain a statistical average size for each input data field and the degree of importance of the various data fields. For input forms in which the data values are not easily known in advance the optimum size for each field and the optimum location of each field with an input page or pages are then determined and the fields are accordingly displayed on the input page s by the GUI. The data input to the user interface is dynamically analyzed on a per user or per view basis for the purpose of modifying user input presentations within software applications such as in web forms. The goal is to improve the ease of use and readability and to make development of optimally presented user input interfaces simpler. Field size and field location are two examples of modifiable form attributes that are defined and analyzed by the form modification process. Other attributes relating to the fields within a form include datatypes associated with each field default formatting definitions of the fields and other similar characteristics associated with the graphical objects of a field or the functional aspects of a field.

Online or web browser based applications that provide for some degree of user interaction typically include a plurality of user input fields in which users can type in text or numbers or make selections and so on. The fields in such a form are defined by the developer and are typically static for the life of the form and not necessarily optimized for user input. As such typical online forms are often cumbersome to use because the input fields are not optimally tailored for typical user input and they may be wasteful as they are designed to accommodate the maximum possible amount of user input as opposed to the normative amount of user input.

Embodiments of the adaptive user interface system described herein include a form modification process that analyzes historic input data and dynamically modifies the online form to present an optimum user input presentation based on this historic input data. is a GUI screen shot for an online form that utilizes embodiments of a process for providing adaptive input data fields under an embodiment. User interface screen includes an online or electronic user input page for the direct entry of user data. The example of shows a page for entering a sales lead into a customer relationship management database but this is only one example of a user input page that may be used with embodiment described herein. The input page for a new sales lead includes several different fields for the entry of relevant information. For the example form of input fields are provided for the potential customer s contact information including name phone address and e mail address . Other fields may also be presented such as for products the customer is interested in sales contact and date of lead generation. One or more selection boxes such as the prior contact question may also be included. As shown in each input field is denoted by a graphical data object such as a rectangle or square that is intended to define an input area and contain all of the user input. User input can be any appropriate text numeric alphanumeric or symbolic input depending upon the input field. In a typical form each of these fields requires input that is of different type and length. For example name and phone number are usually limited in data type either all numbers or all text and of a fixed maximum expected number of characters whereas addresses and product descriptions may be much longer and of mixed datatypes. Moreover the information input into a form may vary among different customers or global regions or even time periods. It should be noted that the arrangement and composition of the form in is for illustration only and any number of different online forms of various arrangements and for various purposes may be used in conjunction with embodiments of the present invention.

An embodiment of the adaptive input user interface system that generates the modifiable form defines certain attributes associated with the form. These attributes define certain characteristics associated with one or more of the fields e.g. fields of form . In an embodiment the attributes include the size of each modifiable field the location of each field in the form and the type of data datatype restricted by or associated with each field. Modification of the form involves changing the size and or location of the fields within the form along with any associated text or data such as the word Name in front of field . Such modifications comprise visual modifications that are visible to the user. Other attribute modifications such as restricting the datatype may be manifested through messages displayed to the user during user input such as an error message or alarm generated if an improper datatype is entered into a field. The form itself may be defined by the adaptive user interface system such that all of the fields displayed on a page are modifiable or only a select subset are modifiable.

In an embodiment and for a specific application such as a database system the input form of can be used to generate data records that are stored in a database. In this case data entered into each field represents a data object that is stored as an entry in the database and is a searchable object that can be used to locate the record or comprise datum within a report generated from the database. As shown in each field has a certain size and this size may be reflected in the size of the data entry box. For example the size of the phone number field may be smaller than the size of the address field because it is almost always certain that a phone number is shorter than an address. The size of the field corresponds to the space reserved for the data in the database and it is generally advantageous to reserve only the minimal amount of space required for each field to free up database storage space.

Each field is also located in a specific place within the form . The location of the field within the page generally indicates the importance of the field relative to the other field with more important fields placed higher or more prominently within the page. Other indicators such as asterisks or font styles may be used to denote required fields. Locating important fields in certain locations of a page enhances usability of a page as people may wish to ignore fields that do not need to be filled in or that are not particularly important and it is better to have these fields relegated to bottom or fringe regions of the page. Different fields may have different levels of importance for different users or applications however and thus the optimum location of a particular field may not be the same for all use scenarios.

In general use each field may also be practically limited to only a certain type of data such as letters only e.g. person s name numbers only e.g. phone number checkmarks only e.g. binary response mixed alphanumeric always e.g. strong passwords and so on. Defining specific data types for each field and constraining the input to the corresponding data type facilitates user entry by allowing the system to prompting corrections or auto correcting the user input. It also ensures that system resources can be efficiently allocated for each field within a form.

For the example data entry page of the input fields e.g. have several attributes that can be modified to enhance the usability of the form and the efficient processing of the input data. These include the size of each field the location of each field within the page and the data type associated with each field. In an embodiment the form is dynamically modified to provide a presentation that is optimized to an expected data format for each modifiable field. The expected data format is obtained through an analysis of historical input data as opposed to through other methods such as best guess approximations or application level customization. Thus an embodiment is directed to a computer implemented method that defines the size and location of user entry fields within an input page based on certain historical data regarding user input patterns. is an operational flow diagram illustrating a high level overview of a technique for providing an adaptive input user interface under an embodiment. As shown in flow diagram the process includes a data collection act in which the system receives input data from the user that is entered into the input fields of the form. Depending upon the system configuration all data input into a form can be collected and logged for analysis. Alternatively a set amount of data can be collected or data can be collected over a defined period of time as dictated by the system. The amount of data that is collected should be sufficient to obtain a measure of historic values of the input data. The historic data may be collected from the same form as it was used for a previous period of time such as in the case where a form has been deployed for a while. Alternatively the historic data can be collected from similar other forms that may have the same or similar modifiable fields.

In block the collected data is analyzed to obtain the most common entry value or type of value for the defined attributes of the modifiable fields. In an embodiment the attributes include the field size importance and data type for each modifiable field. The most common value represents the typical or optimal value that is entered into a particular field. For example if a form is used by a retail site for women s products such as makeup the most common or expected entry in the gender checkbox for the customer would be female . The most common value for a field is found by analyzing historical data entered for the field and determining the value or entry data for the majority of entries for that field. It can also be determined by calculating a historic average value of entries in a field. In this case the term historic average value does not necessarily imply a mean average value. Instead the average value is a calculated value based on a multi step algorithm. Such an algorithm is configured to discard empty values when considering length give outlier values less consideration and other rules suitable for the calculation of average values. In an embodiment a histogram or distribution of field entries can be used to determine the typical or average entry for each field and helps define the most common value entered into the field and therefore the entry that is expected when a new user fills out the field. The terms most common entry value or historic average value may be used interchangeably to refer to the data that is expected to be input into a form and that is used by the system to modify the display of the form to the user.

The most common entry values for the attributes of the fields are then used to modify the form block . For the attributes of size importance and data type the form modification act includes setting the optimum size of each field placing each field in a specific location in the form relative to the other fields and constraining the input data type. The method of is used to generate an optimized form based on historical most common entry values from a given form. The values are used to render new requests for the form in such a way that the form will hold the anticipated input data in an ideal manner.

With regard to the size attribute in an embodiment the data analysis function the process determines the importance of a field by determining the most common entry value for length of text entered into the field. In this case a default field length may be defined. If the default field width is longer than the average value of the length the field is lengthened or expanded in height and or width to accommodate the expected input text length. If the default field width is shorter than the average value of the length the field size is reduced so that it shrinks to fit the expected input text length. The lengthening or shrinking of the fields is performed by the form modification process .

With regard to the location attribute in an embodiment the data analysis function determines the importance of a field by determining how often a field is filled in or left blank. In general if a field is very commonly left blank its importance could be seen as lower and when a field is very commonly filled in its importance could be seen as higher. A field that is always filled in can be considered a very important or critical field. The form modification process then uses this information to place the fields in the appropriate relative location on a form. A critical or high importance field is typically placed at the top or relatively high position on the form and a lower importance field is typically placed lower in the form. Other locations are also possible depending upon the positioning of the most prominent locations in the form.

With regard to the data type attribute the data analysis function determines the type and format of the text entered into each field. In an embodiment the data analysis function distinguishes between pure alpha text pure numeric text and mixed alpha numeric text. Likewise certain fields may require only a check mark or blank such as binary field in . The analysis function determines the most commonly entered data type for a field and the form modification function sets a flag for validation of the user input. For example if a field is always filled with numbers only a flag is set marking it as a numeric datatype field. In this case validation can be performed upon user input that would send a warning if non numeric data was entered instead. Likewise if a field is always filled with letters only a flag is set marking it as an alpha datatype field. In this case validation can be performed upon user input that would send a warning if any numeric data was entered instead. The setting of the datatype attribute can also be used to validate other input. For example when a non required field is virtually always filled in a blank submitted value could be flagged as a validation warning. The form modification process can also use this information to modify future forms. For example when a non required field was virtually always filled with a value the field might be marked as required in future forms even in the case where the metadata for the object field did not specify this requirement.

The default settings of a form can also be modified based on the analysis performed for the datatype attribute. For example if a checkbox is presented as unchecked i.e. blank by default but it is determined that the checkbox was almost always checked when filling out the form the default setting for a blank form with that checkbox could be changed to the checked state. Similarly when a field is most commonly submitted with the same value that value could become the new default value for that field in subsequent renditions of the form.

For each of the defined attributes the form modification process can be configured to be dynamic with respect to other factors such as user identity time period location and other similar factors. For example the default sizes or datatypes might vary from one country to another and so these attributes could be modified differently depending on the location in which the form is used. In this case the historic data may reflect this difference to comprise derived data regarding optimal settings. In other cases pre obtained facts or customary practices can be used to help the form modification process. As another example the form modification process could key off other fields or known attributes such as users in this location usually supply this value or support request forms submitted on weekends usually have a higher priority .

The analysis and form modification processes can also be configured to modify user input forms on the basis of particular users. For example any of the attributes may be further adjusted depending on whether the most common answer is specific to a group of users users with a particular role within the application or an individual user. For example a member of the quality assurance QA department might have new ticket objects default to a type value of bug where the same ticket object created by a user of the customer services department might default to type customer issue. 

The form modification process can be modified to allow minimum and maximum thresholds to be set for adaptable attributes e.g. a minimum length for a text field . Certain forms can be excluded from adaptation either through an opt in or opt out methodology. This allows fields or forms that are meant to be static to be unaffected by any form modification process.

The form modification process also allows for thresholds to be defined to ensure that a sufficient data pool existed before any averages are taken or given weight in adapting the interface. Likewise the process can be configured to allow for manual overrides to calculate adjustments to any of the fields or forms when necessary. The process can also be configured to allow for updates to averages weights and adjustments to occur at a specified interval or minimum interval potentially via lazy background thread operations to avoid impacting performance of the application or website. This can be used when calculating the average length of a field on every page load to determine field size is likely to be prohibitively resource intensive.

In an embodiment the dynamic form modification functionality can be included in any application or website and made available through new application program interface API in the application building platform.

The business rules process applies defined business rules that dictate the operation of the form modification process. The business rules component can be configured to determine when modification of a form is desired or necessary. The form modification process can be programmed to analyze and modify forms on a strict periodic basis or when a defined and significant enough amount of historic data is available or when a system administrator instructs the system to update the forms. Business rules can include rules that govern the application of the form modification to particular forms within a set of forms or to only certain fields of a form. For example one or more forms within a set of forms may be blocked from modification. Likewise certain fields of a form may be blocked from modification or allowed to be modified only under certain conditions such as time user group and so on.

The calculation process analyzes the historic form data as provided by database or any other source of historic form data to determine the changes to make to the form based on the historic form data. The calculation process includes subcomponents that act on the different attributes that are applicable to the form modification process . For the embodiment illustrated in these attributes include the size of each field the location of each field within the form and the datatype associated with each field.

The validation process checks the modifications calculated by the calculation process against the historic data provided by database to validate the modification calculations. The validation process may be used to determine whether or not form modification is required or advantageous. The validation process may be configured to perform periodic checks of the field attributes against current field definitions to inform the business rules process as to whether a form modification session should be performed on the form.

As shown for the embodiment of the overall form modification system also includes a client side process client agent executed on the web browser client . One function of the client side agent is to act as a form monitoring process that adapts the form to the type of client device that is running the web browser. The client side agent modifies the display according to the overall size constraints of the client device as well as any other constraints such as display resolution screen orientation aspect ratio and the like.

As stated above the dynamic form modification functionality can be included in any application or website and made available through new application program interface API in the application building platform. In an embodiment the form modification process can be implemented through Java or JavaScript or other similar languages. In this case it can leverage web based markup languages such as HTML hypertext markup language and utilizes conventions and tools such as CSS cascading style sheets in the case of existing browser based user interfaces. A cascading style sheet consists of ASCII text instructions that control how the web browser formats a document that is being loaded. The use of CSS allows the formatting elements to be kept separate from functional elements within an HTML program. CSS uses style tag definitions that define certain formatting characteristics of HTML objects. Example CSS properties include border definitions that set border style width color height and width definitions that set the size of an object margin definitions padding definitions that set the space between the border and content and other similar definitions that set background color font classification and text properties.

In an embodiment the attributes to define and modify the fields in a form correspond to the HTML attributes of value and size. The size is defined by a height and width or row and column set of values. The location of a field can be defined by an integer value relative to other fields in the form. In this manner each field has an integer value that dictates its location on the field with the value 1 occupying the highest position in the form the value 2 occupying the next position and so on.

Once each field is defined such as for an initial instance of a form a data collection process collects data relating to how the form is populated. Upon a time or condition defined by the business rules component the form modification process may then validate the form or modify it depending on whether it is determined that such modification would be optimum for facilitating user input into the form. Once a form modification session is initiated an appropriate program will perform the modification An example Javascript routine to gather data regarding how a form is modified might be as follows 

In the above example script the whatChanged function is a tracking device that indicates which fields were changed in what order when the form was submitted to the system. The example script gathers data regarding changes while the actual modification of the form is performed by other program components. In this example the position of the fields name email and company may have been denoted by an integer number denoting relative position such as 2 6 and 10 respectively. The whatchanged function may indicate a reordering of these fields by the assignment of integer values 2 10 and 6 for the value definition. This would cause the reordering of the email and company fields to swap positions on the formThe relative position of the fields on a form can be modified from an original position to a different position relative to the other fields through a modification of the value definition. Other attributes can be similarly changed such through the size and datatype definitions. In an embodiment a client side or server side process uses the data provided by the whatchanged function to determine the best ordering or placement of the fields on the form. Other attributes such as field size and datatype can also be analyzed and modified in accordance with whatchanged type scripts and form modification processes.

In the above example the routine may change the order of fields on the form from listing name e mail address and company name to name company and e mail address. In an embodiment this modification would be based on the analysis of the most commonly entered values showing that users always or almost always entered a company name but did not always or at least less frequently entered their e mail address. This modification could have been initiated by a periodic trigger of the analysis function the aggregation of a large amount of data above a defined threshold or upon the initiative of the system administrator such as after customer complaints or suggestions.

The server side and client side form modification processes and of system implement an adaptive input user interface that is presented to the user through client web browser . is an operational flow diagram illustrating a high level overview of a technique for providing an adaptive user interface in an embodiment. As shown in flow diagram the overall adaptive user interface process begins with the definition of form attributes block . This involves defining the characteristics or parameters associated with each modifiable data objects in the form. As described above this typically comprises defining the size location and datatype attributes of the fields of the form. However other attributes for the fields or for other data objects in a form may also or alternatively be defined. The business rules dictating the modification of the form are also defined as shown in block . This involves setting the rules regarding how when and by whom a form or its data objects may be modified along with any other relevant rules regarding implementation of the form modification process in the system.

Once the relevant rules and attributes have been defined the system and process obtain historic data of user input in order to determine how best the defined attributes of the form should be modified block . As shown in block the calculation process then calculates the historical average or most common value for each value from this historic data. If validation is required by the system the validation process validates the calculated values against the historical data block . The results of the validation check are then obtained block . If the validation check is successful the form is modified in accordance with the calculated data block . In this case the fields or other data objects of the form may be modified in terms of one or more of the defined attributes e.g. size location datatype . If the validation does not check successfully the form may be left unmodified block or only certain data objects of the form may be modified. Alternatively the process may obtain more or different sets of historic data and or re perform the calculation of historical values in order to determine if a different degree of modification is required.

In an embodiment the form modification process of comprise part of an adaptive input user interface system that dynamically adapts and updates user input forms based on past and recurring user input. Thus user input information is constantly used to maintain the historical database and provide the basis for fine tuning the interface as continued use of the form provides an ever increasing body of historical data. is a block diagram illustrating the dynamic updating of online forms using an adaptive input user interface system under an embodiment. As shown in diagram past user input is provided into previous versions of a form . This user input data is stored in a historical database . The form modification process then uses this historical data to inform necessary or desired modifications to updated versions of the form . The form should then be optimized for new user input based on the defined attributes and the calculations performed by the form modification process . Over time the modified forms themselves become part of the body of previous forms . In this manner the new user input becomes part of the historical database and can help inform future iterations of the form modification process and the generation of ever more optimized forms.

Embodiments of the adaptive input user interface that employs the form modification process and system facilitate effective user interaction with electronic or online data entry forms through input fields that are optimized based on the type and format of the entered data and the application that is processing this data. Embodiments of currently described approach do not necessarily try to increase the likelihood of page interaction or form submission. According this approach is different from systems that deliver targeted data or advertisements or other read only content e.g. text video or Flash content to encourage more sales or better user retention or click through. These systems are used in targeted marketing or site optimization applications in which a given historical set of data program logic and configuration data is used to present different web page content to different users visiting the same page of a web site. This is usually marketing or sales driven such as on consumer web pages or shopping applications. For example a shopping web site may show suggested items to a visitor based on their buying history or user profile or a news site may use geolocation techniques to show local and regional news on a landing web page based on the visitor s location. In contrast embodiments of the present system are configured to adaptively and dynamically modify the user input fields of an online form based on historic input data in order to maximize ease of use of the form.

Embodiments of the adaptive user interface can be used in any number of network graphical user interface based systems and for any number of applications that require user input into online or GUI generated forms. One such environment is a distributed database application that is implemented over a local or wide area network. One example of such an application is a multi tenant database system. As used herein the term multi tenant database system refers to those systems in which various elements of hardware and software of the database system may be shared by one or more customers. For example a given application server may simultaneously process requests for a great number of customers and a given database table may store rows for a potentially much greater number of customers. As used herein the term query plan refers to a set of steps used to access information in a database system.

Environment is an environment in which an on demand database service exists. User system may be any machine or system that is used by a user to access a database user system. For example any of user systems can be a handheld computing device a mobile phone a laptop computer a work station and or a network of computing devices. As illustrated in user systems might interact via a network with an on demand database service which is system .

An on demand database service such as system is a database system that is made available to outside users that do not need to necessarily be concerned with building and or maintaining the database system but instead may be available for their use when the users need the database system e.g. on the demand of the users . Some on demand database services may store information from one or more tenants stored into tables of a common database image to form a multi tenant database system MTS . Accordingly the terms on demand database service and system may be used interchangeably herein. A database image may include one or more database objects. A relational database management system RDMS or the equivalent may execute storage and retrieval of information against the database object s . Application platform may be a framework that allows the applications of system to run such as the hardware and or software e.g. the operating system. In an embodiment on demand database service may include an application platform that enables creation managing and executing one or more applications developed by the provider of the on demand database service users accessing the on demand database service via user systems or third party application developers accessing the on demand database service via user systems .

The users of user systems may differ in their respective capacities and the capacity of a particular user system might be entirely determined by permissions permission levels for the current user. For example where a salesperson is using a particular user system to interact with system that user system has the capacities allotted to that salesperson. However while an administrator is using that user system to interact with system that user system has the capacities allotted to that administrator. In systems with a hierarchical role model users at one permission level may have access to applications data and database information accessible by a lower permission level user but may not have access to certain applications database information and data accessible by a user at a higher permission level. Thus different users will have different capabilities with regard to accessing and modifying application and database information depending on a user s security or permission level.

Network is any network or combination of networks of devices that communicate with one another. For example network can be any one or any combination of a LAN local area network WAN wide area network telephone network wireless network point to point network star network token ring network hub network or other appropriate configuration. As the most common type of computer network in current use is a TCP IP Transfer Control Protocol and Internet Protocol network such as the global internetwork of networks often referred to as the Internet with a capital I that network will be used in many of the examples herein. However it should be understood that the networks that the one or more implementations might use are not so limited although TCP IP is a frequently implemented protocol.

User systems might communicate with system using TCP IP and at a higher network level use other common Internet protocols to communicate such as HTTP FTP AFS WAP etc. In an example where HTTP is used user system might include an HTTP client commonly referred to as a browser for sending and receiving HTTP messages to and from an HTTP server at system . Such an HTTP server might be implemented as the sole network interface between system and network but other techniques might be used as well or instead. In some implementations the interface between system and network includes load sharing functionality such as round robin HTTP request distributors to balance loads and distribute incoming HTTP requests evenly over a plurality of servers. At least as for the users that are accessing that server each of the plurality of servers has access to the MTS data however other alternative configurations may be used instead.

In one embodiment system shown in implements a web based customer relationship management CRM system. For example in one embodiment system includes application servers configured to implement and execute CRM software applications as well as provide related data code web pages and other information to and from user systems and to store to and retrieve from a database system related data objects and Webpage content. With a multi tenant system data for multiple tenants may be stored in the same physical database object however tenant data typically is arranged so that data of one tenant is kept logically separate from that of other tenants so that one tenant does not have access to another tenant s data unless such data is expressly shared. In certain embodiments system implements applications other than or in addition to a CRM application. For example system may provide tenant access to multiple hosted standard and custom applications including a CRM application. User or third party developer applications which may or may not include CRM may be supported by the application platform which manages creation storage of the applications into one or more database objects and executing of the applications in a virtual machine in the process space of the system .

An embodiment of system also includes application servers such as Java application server of that is configured to implement and execute software applications that provide interactive forms for the transmission of information to and from user systems and to store to and retrieve from a database system related data objects and Webpage content. Such a displayed form is illustrated as block accessible through at least one user system . The user input form is displayed to the user of user system for entry of relevant user input data. A server side adaptive input user interface process within a Java application server of system in conjunction with an client agent running on user system dynamically updates the modifiable fields within form in accordance with historical data and certain calculation algorithms as described above. The user input provided through form is then passed on to the application running on platform or any appropriate application within system that processes the user input.

One arrangement for elements of system is shown in including a network interface application platform tenant data storage for tenant data system data storage for system data accessible to system and possibly multiple tenants program code for implementing various functions of system and a process space for executing MTS system processes and tenant specific processes such as running applications as part of an application hosting service. Additional processes that may execute on system include database indexing processes.

Several elements in the system shown in include conventional well known elements that are explained only briefly here. For example each user system could include a desktop personal computer workstation laptop PDA cell phone or any wireless access protocol WAP enabled device or any other computing device capable of interfacing directly or indirectly to the Internet or other network connection. User system typically runs an HTTP client e.g. a browsing program such as Microsoft s Internet Explorer browser Netscape s Navigator browser Opera s browser or a WAP enabled browser in the case of a cell phone PDA or other wireless device or the like allowing a user e.g. subscriber of the multi tenant database system of user system to access process and view information pages and applications available to it from system over network . Each user system also typically includes one or more user interface devices such as a keyboard a mouse trackball touch pad touch screen pen or the like for interacting with a graphical user interface GUI provided by the browser on a display e.g. a monitor screen LCD display etc. in conjunction with pages forms applications and other information provided by system or other systems or servers. For example the user interface device can be used to access data and applications hosted by system and to perform searches on stored data and otherwise allow a user to interact with various GUI pages that may be presented to a user. As discussed above embodiments are suitable for use with the Internet which refers to a specific global internetwork of networks. However it should be understood that other networks can be used instead of the Internet such as an intranet an extranet a virtual private network VPN a non TCP IP based network any LAN or WAN or the like.

According to one embodiment each user system and all of its components are operator configurable using applications such as a browser including computer code run using a central processing unit such as an x86 compatible microprocessor or the like. Similarly system and additional instances of an MTS where more than one is present and all of their components might be operator configurable using application s including computer code to run using a central processing unit such as processor system and or multiple processor units. A computer program product embodiment includes a machine readable storage medium media having instructions stored thereon in which can be used to program a computer to perform any of the processes of the embodiments described herein. Computer code for operating and configuring system to intercommunicate and to process web pages applications and other data and media content as described herein are preferably downloaded and stored on a hard disk but the entire program code or portions thereof may also be stored in any other volatile or non volatile memory medium or device as is well known such as a ROM or RAM or provided on any media capable of storing program code such as any type of rotating media including floppy disks optical discs digital versatile disk DVD compact disk CD microdrive and magneto optical disks and magnetic or optical cards nanosystems including molecular memory ICs or any type of media or device suitable for storing instructions and or data. Additionally the entire program code or portions thereof may be transmitted and downloaded from a software source over a transmission medium e.g. over the Internet or from another server as is well known or transmitted over any other conventional network connection as is well known e.g. extranet VPN LAN etc. using any communication medium and protocols e.g. TCP IP HTTP HTTPS Ethernet etc. as are well known. It will also be appreciated that computer code for implementing embodiments can be implemented in any programming language that can be executed on a client system and or server or server system such as for example C C HTML any other markup language Java JavaScript ActiveX any other scripting language such as VBScript and many other programming languages as are well known may be used. Java is a trademark of Sun Microsystems Inc. .

According to one embodiment each system is configured to provide web pages forms applications data and media content to user client systems to support the access by user systems as tenants of system . As such system provides security mechanisms to keep each tenant s data separate unless the data is shared. If more than one MTS is used they may be located in close proximity to one another e.g. in a server farm located in a single building or campus or they may be distributed at locations remote from one another e.g. one or more servers located in city A and one or more servers located in city B . As used herein each MTS could include one or more logically and or physically connected servers distributed locally or across one or more geographic locations. Additionally the term server is meant to include a computer system including processing hardware and process space s and an associated storage system and database application e.g. OODBMS or RDBMS as is well known in the art. It should also be understood that server system and server are often used interchangeably herein. Similarly the database object described herein can be implemented as single databases a distributed database a collection of distributed databases a database with redundant online or offline backups or other redundancies etc. and might include a distributed database or storage network and associated processing intelligence.

In certain embodiments user systems which may be client systems communicate with application servers to request and update system level and tenant level data from system that may require sending one or more queries to tenant data storage and or system data storage . System may automatically generate one or more SQL statements e.g. one or more SQL queries that are designed to access the desired information. System data storage may generate query plans to access the requested data from the database.

Each database can generally be viewed as a collection of objects such as a set of logical tables containing data fitted into predefined categories. A table is one representation of a data object and may be used herein to simplify the conceptual description of objects and custom objects. It should be understood that table and object may be used interchangeably herein. Each table generally contains one or more data categories logically arranged as columns or fields in a viewable schema. Each row or record of a table contains an instance of data for each category defined by the fields. For example a CRM database may include a table that describes a customer with fields for basic contact information such as name address phone number fax number etc. Another table might describe a purchase order including fields for information such as customer product sale price date etc. In some multi tenant database systems standard entity tables might be provided for use by all tenants. For CRM database applications such standard entities might include tables for Account Contact Lead and Opportunity data each containing pre defined fields. It should be understood that the word entity may also be used interchangeably herein with object and table .

It should also be noted that the various functions disclosed herein may be described using any number of combinations of hardware firmware and or as data and or instructions embodied in various machine readable or computer readable media in terms of their behavioral register transfer logic component and or other characteristics. Computer readable media in which such formatted data and or instructions may be embodied include but are not limited to physical non transitory non volatile storage media in various forms such as optical magnetic or semiconductor storage media.

Unless the context clearly requires otherwise throughout the description and the claims the words comprise comprising and the like are to be construed in an inclusive sense as opposed to an exclusive or exhaustive sense that is to say in a sense of including but not limited to. Words using the singular or plural number also include the plural or singular number respectively. Additionally the words herein hereunder above below and words of similar import refer to this application as a whole and not to any particular portions of this application. When the word or is used in reference to a list of two or more items that word covers all of the following interpretations of the word any of the items in the list all of the items in the list and any combination of the items in the list.

While one or more implementations have been described by way of example and in terms of the specific embodiments it is to be understood that one or more implementations are not limited to the disclosed embodiments. To the contrary it is intended to cover various modifications and similar arrangements as would be apparent to those skilled in the art. Therefore the scope of the appended claims should be accorded the broadest interpretation so as to encompass all such modifications and similar arrangements.

