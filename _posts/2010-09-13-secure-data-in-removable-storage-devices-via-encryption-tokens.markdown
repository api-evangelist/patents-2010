---

title: Secure data in removable storage devices via encryption token(s)
abstract: Systems, methods, and devices that secure data on removable storage devices are presented. A token component can interface with a communication port on a host device. One or more removable storage devices can interface with one or more other communication ports on the host device. The token component includes a security component that, when interfaced with the host device, is employed to automatically and simultaneously enable access, encrypt data being stored in, and decrypt data being retrieved from the removable storage devices. When the token component is not interfaced with the host device, the removable storage devices are secured so that they cannot be accessed and data stored thereon cannot be retrieved and decrypted. A user optionally can utilize a password, which can be entered when the token component is interfaced with the host device, to facilitate controlling access to the removable storage devices and data encryption/decryption.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09336402&OS=09336402&RS=09336402
owner: CITY UNIVERSITY OF HONG KONG
number: 09336402
owner_city: Kowloon
owner_country: HK
publication_date: 20100913
---
The subject application is a US national stage application of PCT Application Serial No. PCT CN2010 001397 filed Sep. 13 2010 and entitled SECURE DATA IN REMOVABLE STORAGE DEVICES VIA ENCRYPTION TOKEN S the disclosure of which is incorporated herein by reference in its entirety.

The subject disclosure relates generally to data communication and storage and in particular to systems methods and devices that employ an encryption token to secure data.

Data security is a paramount concern for many users of electronic devices such as computers. Many users store data not only in internal storage but also on removable storage devices e.g. removable or external flash drives due in part to the portability and convenience of the removable storage devices. Many users often store sensitive information including for example confidential and or valuable information e.g. personal information financial records intellectual property etc. on removable storage devices wherein such users can desire that their information be secured from undesired and or unauthorized access by other users. For instance a user s removable storage device may be lost or stolen and if the information is not desirably secured on the removable storage device an unauthorized entity may obtain possession of the removable storage device and access the user s information stored therein.

Conventionally there have been attempts to secure data on Universal Serial Bus USB flash drives wherein data being stored in the USB flash drive can be encrypted and secured and wherein a password is provided to the USB flash drive in order to access and decrypt the data stored on the USB flash drive. One drawback to securing data based on a password is that the password can be hacked at least eventually particularly when the entity attempting to access the data stored on the drive is able to possess the drive for a significant period of time. Other types of solutions include using smart card based or biometric based data encryption to secure data stored on a USB flash drive. One drawback of such solutions is that an undesirable amount e.g. heavy user intervention is required to operate the data security aspects of these types of solutions. Another drawback is that such solutions do not allow for simultaneously accessing of data stored on a USB flash device automatically converting a USB flash drive to a secured encryption removable storage device and automatically mounting the secured encryption removable storage device.

Accordingly today there is no way to reliably secure data stored on a removable storage device without requiring the user to provide a password in order to access and encrypt decrypt data on the removable storage device. Moreover conventional data security solutions e.g. solutions using smart card based or biometric based encryption that secure data in a removable storage device are inconvenient.

The above described deficiencies of today s data security systems for removable storage are merely intended to provide an overview of some of the problems of conventional systems and are not intended to be exhaustive. Other problems with the state of the art and corresponding benefits of some of the various non limiting embodiments may become further apparent upon review of the following detailed description.

The following presents a simplified summary of the various embodiments in order to provide a basic understanding of some aspects described herein. This summary is not an extensive overview of the disclosed subject matter. It is intended to neither identify key or critical elements of the disclosed subject matter nor delineate the scope of the subject embodiments. Its sole purpose is to present some concepts of the disclosed subject matter in a simplified form as a prelude to the more detailed description that is presented later.

The disclosed subject matter relates to systems methods and devices that can secure data associated with removable storage devices in accordance with various embodiments and aspects disclosed herein. In accordance with various aspects a token component can be employed to facilitate controlling access to and data encryption decryption associated with one or more storage devices e.g. removable or external storage devices associated with e.g. connected to or interfaced with a host device e.g. a computer a netbook an electronic reading device a personal digital assistant PDA a set top box a mobile phone an electronic gaming console etc. . When desired the token component can be interfaced with e.g. communicatively connected via a wired connection to a communication port e.g. USB port FireWire port on the host device to facilitate securing other electronic devices such as removable storage devices that can be associated with the host device. As desired one or more removable storage devices can be interfaced with e.g. communicatively connected via a wired or wireless connection to one or more other communication ports on the host device.

In another aspect the token component can include a security component that when the token component is interfaced with the host device can be employed to automatically and simultaneously control e.g. enable disable access encrypt data being stored in and decrypt data being retrieved from the one or more removable storage devices interfaced with the host device. When the token component is connected to the host device the token component can automatically and or simultaneously examine all drives or ports on the host device identify removable storage devices that are connected to the host device and are empty e.g. no files such as a master key file stored thereon generate or retrieve respective master key files and associated master keys of removable storage devices generate a list of empty removable storage devices create secure volume files for each of the removable storage devices generate a list of removable storage devices that have secure volume files and mount the removable storage devices as real disks on the host device. With the removable storage devices mounted as real disks on the host device data can be written to read from or erased from the removable storage devices wherein the token component can facilitate encrypting the data being written and decrypting data being read from the removable storage devices while the token component is connected to the host device. When the token component is not interfaced with the host device e.g. when the token component is disconnected from the host device the one or more removable storage devices can be secured so that they cannot be accessed by the host device or other host device and data stored in the one or more removable storage devices cannot be retrieved and decrypted. In an aspect as desired the token component can be utilized without requiring a password be input to the token component or the host device with which the token component is interfaced e.g. connected .

In still another aspect a user optionally can utilize a password which can be entered when the token component is interfaced with the host device to facilitate controlling access to the removable storage devices and data encryption decryption. Use of a password can provide additional security for the removable storage devices and data associated therewith in addition to the other security features provided by the token component as more fully disclosed herein.

The following description and the annexed drawings set forth in detail certain illustrative aspects of the disclosed subject matter. These aspects are indicative however of but a few of the various ways in which the principles of the various embodiments may be employed and the disclosed subject matter is intended to include all such aspects and their equivalents. Other advantages and distinctive features of the disclosed subject matter will become apparent from the following detailed description of the various embodiments when considered in conjunction with the drawings.

The disclosed subject matter is described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the various embodiments of the subject disclosure. It may be evident however that the disclosed subject matter may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to facilitate describing the various embodiments herein.

Conventionally there have been attempts to secure data on storage devices e.g. removable storage devices such as Universal Serial Bus USB flash drives wherein data being stored in the storage device can be encrypted and secured and wherein it is necessary to provide a password to the USB flash drive in order to access and decrypt the data stored on the USB flash drive. One drawback to securing data based on a password is that the password can be hacked. Other types of solutions include using smart card based or biometric based data encryption to secure data stored on a USB flash drive. However a drawback of such solutions is that an undesirable amount e.g. heavy user intervention is required to operate the data security aspects of these types of solutions. Another drawback is that such solutions do not allow for simultaneously accessing of data stored on the storage device automatically converting the storage device to a secured encryption removable storage device and automatically mounting the secured encryption removable storage device.

To that end systems methods and devices that can secure data associated with removable storage devices are presented. A token component can interface with a communication port on a host device wherein the token component can be connected to or disconnected from the communication port of the host device when desired. One or more removable storage devices can interface with one or more other communication ports on the host device wherein the one or more removable storage devices can be connected to or removed from the communication port s of the host device when desired. The token component can include a security component that when the token component is interfaced with e.g. connected to the host device is employed to automatically and simultaneously mount respective secured volume files for removable storage devices connected to the host device and control or enable access encrypt data being stored in and decrypt data being retrieved from the removable storage devices. When the token component is not interfaced with e.g. id disconnected from the host device the removable storage devices are secured such that they cannot be accessed and data stored thereon cannot be retrieved and decrypted. A user optionally can utilize a password which can be entered when the token component is interfaced with the host device to facilitate controlling access to the removable storage devices and data encryption decryption.

The host device can comprise an interface component I F Comp. that can include one or more communication ports e.g. wired communication port wireless communication port to which one or more storage devices e.g. removable storage devices or peripheral storage devices such as storage devices and or can be connected to the interface component via a wired or wireless connection and disconnected or removed when desired. The one or more storage devices e.g. can comprise removable storage devices such as for example flash drives e.g. USB flash memory drive FireWire flash memory drive etc. or other types of storage drives comprising nonvolatile memory. The one or more communication ports of the interface component can be for example a Universal Serial Bus USB port s an IEEE 1394 type port e.g. FireWire port or other desired type of communication port e.g. other type of serial or parallel communication port . As desired one or more storage devices e.g. can be connected e.g. indirectly connected to the interface component via a hub e.g. USB hub or multiple storage devices e.g. storage devices with a FireWire input connector and a FireWire output or throughput connector can be daisy chained together wherein one of the storage devices at the end of the daisy chain can be connected to the interface component . In an aspect a wireless communication connection can be established between a storage device e.g. and the host device using a Wi Fi Wi Max Bluetooth or cellular wireless technology for example.

The one or more storage devices e.g. can be employed to receive store and or provide data. For instance in accordance with security policies and protocols such as more fully disclosed herein a storage device e.g. can receive data from or provide data to the host device via the interface component when the storage device e.g. is connected to the host device via the interface component . In an aspect a storage device e.g. can comprise for example nonvolatile and or volatile memory. By way of illustration and not limitation nonvolatile memory can include read only memory ROM programmable ROM PROM electrically programmable ROM EPROM electrically erasable ROM EEPROM phase change memory PCM flash memory or nonvolatile RAM NVRAM e.g. ferroelectric RAM FeRAM . Volatile memory can include random access memory RAM which can act as external cache memory or buffer memory for example. By way of illustration and not limitation RAM is available in many forms such as synchronous RAM SRAM dynamic RAM DRAM synchronous DRAM SDRAM double data rate SDRAM DDR SDRAM enhanced SDRAM ESDRAM Synchlink DRAM SLDRAM and direct Rambus RAM DRRAM . Additionally the disclosed memory components of systems or methods herein are intended to comprise without being limited to comprising these and any other suitable types of memory.

In an aspect the system can include a token component that can control access to and can secure data associated with the one or more storage devices e.g. . When desired the token component can comprise a desired interface component not shown in and can interface with the interface component of the host device using a communication port e.g. USB port FireWire port or other desired type of port associated with the interface component . To facilitate controlling access to and securing data associated with the one or more storage devices e.g. when desired the token component can be associated with e.g. physically and communicatively connected to the interface component of the host device wherein the token component can essentially act or function as a key to control data access and data encryption decryption. In an aspect if the token component includes a first type of interface e.g. USB interface but desires to interface with a different type of interface e.g. FireWire interface an interface adapter not shown can be connected between the first type of interface and the different type of interface to facilitate interfacing e.g. connecting the token component to the interface component . In an embodiment the token component itself also can be a storage device that can be used to store desired user data in addition to providing the security functions to itself and other storage devices as more fully disclosed herein. In accordance with an aspect as desired the token component can be utilized without requiring a password be input to the token component or the host device with which the token component is interfaced e.g. connected .

In another aspect a user optionally can utilize authentication credentials e.g. password passphrase personal identification number PIN etc. with the token component . For instance the token component can employ desired authentication algorithm s and protocol s that can be used to authenticate a user attempting to access the token component and or removable storage devices e.g. being secured by the token component . The authentication credentials can be entered by a user into the host device or into token component directly when the token component has a suitable interface when the token component is interfaced with e.g. connected to the host device to facilitate controlling access to the removable storage devices e.g. and data encryption decryption. Use of authentication credentials and authentication algorithms and protocols can provide additional security for the removable storage devices and data associated therewith in addition to the other security features provided by the token component as more fully disclosed herein.

In another aspect the token component can include a security component that can facilitate controlling access to and securing data associated with the one or more storage devices e.g. . When desired a desired storage device s e.g. and the token component each can be connected to the host device via the interface component . The host device can recognize that the token component is connected to the interface component of the host device and the token component can recognize that the host device is connected to the token component . The host device and or security component can execute an application e.g. a software application which can be part of the security component and stored on the token component and or host device wherein the application can be used to facilitate controlling access by the host device to the desired storage device s e.g. and or encryption or decryption of data being stored in or retrieved from the desired storage device s by the host device in addition to other functions that can be facilitated by the application. In an aspect the application can be invoked automatically when the token component is connected to the communication port of the host device . In another aspect when desired the host device can access and update information e.g. software firmware user data e.g. when the token component is also a storage device for user data etc. stored on the token component .

In another aspect the security component can locate and or generate a master key file. For instance if it is the first time that the token component is being used e.g. with the host device the security component can generate e.g. automatically generate a master key file and the master key file can be stored on the token component and or host device and the path of the master key file can be stored as well for future use wherein the security component can retrieve information relating to the path to the stored master key file to locate and retrieve the master key file when desired. The master key file can be employed to facilitate securely performing processes associated with controlling access to and controlling data associated with desired removable storage devices e.g. when the token component and desired removable storage devices are connected to the host device .

The security component can scan e.g. automatically scan all or a desired portion of drives e.g. scan the first drive through the last drive such as for example Drive A to Drive Z connected to the interface component of the host device to obtain e.g. automatically obtain a list of empty removable storage devices e.g. storage devices such as storage device or storage device if empty wherein an empty removable storage device e.g. empty removable drive can be a removable storage device that contains no files for example. Empty removable storage devices can comprise separate removable storage devices e.g. connected to the host device to which the host device s operating system has assigned a distinct drive identifier e.g. Drive A Drive B Drive C etc. and or also can include memory partitions of an empty removable storage device s that has its memory partitioned into more than one memory partition that respectively have distinct drive identifiers assigned to them for example by the host device s operating system. That is for instance a removable storage device having two memory partitions that respectively have been assigned two distinct drive identifiers can be identified as two distinct removable storage devices by the token component with regard to controlling access to those memory partitions e.g. allowing or denying access to those memory partitions encrypting and writing data to those memory partitions reading and decrypting data read from those memory partitions . The security component can manage e.g. automatically manage each of the empty removable storage devices one by one wherein for each empty removable storage device the security component can retrieve the master key file and can create e.g. automatically create a secure volume file on the removable storage device e.g. . The size of the secure volume file can be equal to the maximum volume size for that removable storage device or a smaller volume size when desired. After creating the secure volume file for an empty removable storage device e.g. the security component can proceed to create a secure volume file for the next empty removable storage device e.g. and can proceed down through the list of empty removable storage devices until secure volume files have been created for all or a desired portion of the empty removable storage devices on the list of empty removable storage devices.

In still another aspect the security component can scan e.g. automatically scan or examine all or a desired portion of the storage devices connected to the interface component of the host device to obtain e.g. automatically obtain a list of removable storage devices that contain a secure volume file wherein the list of removable storage devices containing a secure volume file can comprise for example removable storage devices for which a secure volume file was just created and or removable drives that already had secure volume files prior to this session. In yet another aspect the security component can manage e.g. automatically manage the removable storage devices e.g. that contain the secure volume files one by one to mount e.g. automatically mount the secure volume file of each or a desired portion of the removable storage device until the desired secure volume files on the list have been mounted wherein the mounting of volume files can be facilitated by the respective master key files associated with the removable storage devices.

In an aspect the processes of obtaining the list of empty removable storage devices e.g. connected removable storage devices creating the secure volume files obtaining the list of removable storage devices containing secure volume files mounting the volume files and or other processes performed or facilitated by the security component can be performed automatically and or simultaneously or at least substantially simultaneously and transparent to users and without any user intervention being required e.g. unless the user desires to use an optional password . With the secure volume file mounted for a particular removable storage device e.g. as desired data can be written to and stored in the removable storage device by the host device and or data stored in the removable storage device can be retrieved or erased from the removable storage device and provided to the host device wherein data being written to and stored in the removable storage device can be encrypted e.g. automatically encrypted and data being retrieved e.g. read from the storage device can be decrypted for example in accordance with a desired cryptographic algorithm and protocol e.g. Advanced Encryption Standard AES 256 or other desired encryption algorithm . In yet another aspect while the token component is connected to the host device the security component can be operating to facilitate controlling access to the storage devices e.g. connected to the host device .

If a user desires to dismount one or more mounted volumes respectively associated with one or more removable storage devices e.g. the desired mounted volumes for dismounting is desired can be selected and the desired mounted volumes can be dismounted. For example the user can use a desired interface e.g. mouse keyboard touch screen etc. to select a desired mounted volume wherein a visual representation e.g. icon of the desired mounted volume can be displayed on a display screen of the host device . A dismount command can be received by the host device from the user e.g. dragging of the mounted volume icon to an exit or eject area or icon on the display screen a selected dismount command from a command menu etc. and the security component and or host device can dismount the mounted volume in response to the dismount command. If all of the mounted volumes of the connected removable storage devices e.g. have been dismounted e.g. if a dismount all volumes and exit command is received the application can be exited or ended by the security component and or host device as desired.

If and when the token component is disconnected from the host device access to a removable storage device e.g. that is being secured using the token component e.g. removable storage device that has data stored thereon which was encrypted using the token component can be denied to the host device or other host devices and data stored in the removable storage device can be secured from being accessed or retrieved by the host device or other host devices.

In accordance with an example embodiment of the disclosed subject matter initially a starting function of the token component can be called. For example the following starting function of the token component can be called.

This function can facilitate setting up an operating environment for the token component . It can preserve memory blocks for storing desired e.g. important or sensitive variables such as passwords master keys and volume file paths. This function can test the encryption functions and random number generator functions of the security component . This function also can attach the token component drivers to the host device . Moreover this function can create the main dialogue box for running the token component by calling a desired dialog box creation function such as for example uCDialogBox .

In an aspect the security component can search removable storage devices e.g. connected to the host device to determine whether a master key file exists or not. The security component can employ desired code to facilitate determining whether a master key file exists. For instance the desired code can be located in a desired location such as the int WINAPI WINMAIN in uCFormat.c in a data store associated with the token component . The master key file name can have a desired format which can include for example a prefix of the master key file name wherein every master key file can have the same prefix of a desired length and a respective unique suffix of a desired length. For example the master key file name format can be as follows uCrypt Pass xxxxxxxxxxxxxxxx wherein uCrypt Pass can be the prefix of the master key file name and xxxxxxxxxxxxxxxx can be the suffix of the master key file name wherein x is a variable and each x can be a desired e.g. random alpha numeric character. For instance the suffix can be a 64 bit random number which can be represented by 16 ASCII characters. This random number can be generated by a random number generator not shown in as shown in of the security component . One purpose of this random number can be to prevent volume file duplication.

In another aspect the security component can search for a file and its file name with the prefix uCrypt Pass for each of the removable storage devices e.g. removable drives connected to the host device . For instance if for a removable storage device e.g. the file is found and the file size is greater than 0 then the master key file can be found in the removable storage device and the file path can be stored in a desired location such as string PassPhrase and the security component can proceed to obtain a list of empty removable storage devices. However if the file for a removable storage device is found and the file size is equal to 0 that can mean it is the first time for running the token component for this removable storage device and the security component can proceed to generate a master key file for that removable storage device. If the security component has searched the detected storage devices and no file with the master key prefix is found the token component can enter a sleep mode for a predefined period of time e.g. 1 second 2 seconds 3 seconds . . . and can repeat the search process to try to locate or detect a file having the master key prefix. If the security component is unable to locate a file with the master key file prefix after a predefined number of searches e.g. 1 search 2 searches 3 searches . . . 6 searches 7 searches . . . for a given session or over a predefined period of time the security component can terminate the search and or can provide a message or indicator to the user via a display screen on the host device indicating that no file having the master key prefix has been located. One purpose for having the security component perform multiple searches before terminating is because a master key file may not be detected on a first search or potentially even a second or third search if the host device or removable storage device s is a relatively slower running device.

In an aspect the security component can employ a desired function to facilitate determining whether the master file exists or not. It can be assumed that there is only the master key file that will be found in the removable storage device. For instance the following search function can be employed for determinating whether the master key file exists or not.

If the function succeeds the return value can be a search handle used in a subsequent call to FindNextFile or FindClose and the lpFindFileData parameter can contain information regarding the first file or directory located. If the function fails or fails to locate files from the search string in the lpFileName parameter the return value can be INVALID HANDLE VALUE and the contents of lpFindFileData are indeterminate. If desired to obtain extended error information the security component can call a desired last error function to identify or obtain the least error such as the GetLastError function. If the search function fails because no matching files can be found the desired last error function can return an error indicating the file was not found such as for example the value ERROR FILE NOT FOUND.

The security component can create a master key file. In an aspect the security component can employ desired code to create the master key file wherein the desired code can be located for example in a desired location such as the int WINAPI WINMAIN in uCFormat.c in a data store associated with the token component . If the security component located an empty master key file the security component can generate a new master key file to replace the empty one. For instance to generate the new master key file the security component can call a desired random number generator function such as RanGetBytes in uCRandom.c to generate a 512 bit random number as the master key can call a desired random number generator function such as RanGetBytes to generate a 64 bit random number as the master key file suffix can construct the master key file name prefix suffix and store it in a desired location such as string PassPhrase can call a desired write function such as  lwrite to write the 512 bit master key to the master key file and can call a desired handler closing function such as CloseHandle to close the master key file handler.

In still another aspect the security component can form or generate a list of empty removable storage devices e.g. connected to the host device . The security component can examine each storage device connected to the host device to identify whether the storage device is empty and is removable media as opposed to internal or fixed storage devices . For instance the security component can employ desired code to determine whether the storage device e.g. drive is removable media or not for instance by employing a function in the operating system e.g. Windows for determining whether a disk drive is a removable fixed CD ROM RAM disk or network drive. For instance the security component can employ a desired function such as the following function UINT WINAPI GetDriveType  in opt LPCTSTR lpRootPathName wherein if the return value indicates that the storage device is removable e.g. if the return value is equal to DRIVE REMOVABLE the drive can be identified as a removable storage device e.g. removable media .

If the drive is identified as a removable storage device the security component can check to determine whether the volume size of the removable storage device is greater than 0 or not. A reason for performing this checking is that some empty communication ports e.g. USB ports may present as removable drives with volume size 0 on some host devices . Therefore the security component can check and distinguish between a removable storage device connected to a communication port of the host device and an empty communication port on the host device and can disregard an empty communication port s . If the storage device is removable media and the volume size is greater than 0 the security component can check to determine whether the removable storage device e.g. is empty or not. There can be a function in the operating system for retrieving the first file of a disk drive e.g. storage device . For instance the following function can be employed 

If the return value indicates that the removable storage device is empty e.g. if the return value is equal to INVALID HANDLE VALUE the removable storage device can be identified as empty by the security component .

In an aspect an array such as array char AvailableList can store information relating to all the available removable storage devices e.g. for creating a secure volume file on each of the removable storage device s wherein those storage devices can be removable media and empty.

In still another aspect the security component can manage each of the available empty removable storage devices e.g. connected to the host device on a one by one basis. The security component can be employed to create secure volume files on the empty removable storage devices for example using a for loop that can be used to facilitate retrieving a respective master key file and creating a respective secure volume file for all or a desired portion of the empty removable storage devices on the list of available empty removable storage devices connected to the host device .

The security component can retrieve the respective master key from the respective master key file for use in creating a respective secure volume file on a respective empty removable storage device for each empty removable storage device on the list of empty removable storage devices. The security component can call a desired handler creation function such as CreateFile to create a handler for the master key file associated with the empty removable storage device. If for any reason the security component cannot create the handler for the empty removable storage device the volume creation process can end. When a handler is created the security component can call a desired read or copy function such as  lread to copy the master key from the master key file to a desired location such as unsigned char ucryptPassword 81 . The security component can call a desired close handler function such as CloseHandle to close the master key file handler.

In another aspect the security component can create a secure volume file for the empty removable storage device e.g. . For instance for creating a secure volume file on an empty removable storage device a thread can be created by a desired function such as the following function static void  cdecl volTransformThreadFunction void hwndDlgArg . This thread can call the following file creation function to create a secure volume file for each empty storage device e.g. empty removable drive int uCFormatVolume FORMAT VOL PARAMETERS volParams . The security component can construct a secure volume file name wherein the volume file prefix can be for example uCrypt protected and the security component can call RanGetBytes to generate a 64 bit random number as the volume file suffix call CreateVolumeHeaderInMemory to create a secure volume header call CreateFile to create the secure volume file handler call a desired set file pointer function such as SetFilePointerEx and set end of file function such as SetEndOffile to set the size of the secure volume file for the empty storage device wherein the file size can be equal to the maximum size or a desired portion of the empty removable storage device call a desired set address pointer function such as SetFilePointer to set the address pointer to the beginning of the volume file and can call a desired write function such as  lwrite to write the volume header to the secure volume file call a desired get FAT parameters function such as GetFatParams to get the File Allocation Table FAT parameters for formatting the secure volume file call a desired file system format function such as FormatFat to format the file system of the secure volume file as FAT and call a desired handler close function such as CloseHandle to close the volume file handler. At this point the for loop can be at its end where if there are other empty removable storage devices on the list of empty removable storage devices for which secure volume files are to be created the security component can proceed back to the beginning of the for loop to start creating a secure volume file for the next empty removable storage device on the list if there are no other empty removable storage devices for which a secure volume file is to be created the security component can proceed to the next desired process.

In still another aspect the security component can form or generate a list of removable storage devices e.g. that contain a secure volume file and are connected to the host device . The security component can examine each storage device e.g. removable storage device associated with the host device for instance by examining e.g. checking and determining whether the particular storage device is a removable drive and whether it has a secure volume file. To facilitate generating the list of removable storage devices that contain a secure volume file the security component can employ desired code for example GetDriveType to check whether the particular storage device is removable media or not and if the return value indicates that the drive is removable e.g. if the return value is equal to DRIVE REMOVABLE the storage device e.g. can be identified as removable media by the security component if the storage device is identified as removable media the security component can examine and determine whether the volume size of the removable storage device is greater than 0 or not wherein one reason for performing such check is that some empty communication ports e.g. USB ports may present as removable drives with volume size 0 on some machines and therefore it is desirable for the security component to identify and bypass the empty communication ports if the storage device is a removable media and the volume size is greater than 0 the security component can determine that there is a removable storage device connected to that communication port of the host device and can examine and determine whether there exists a secure volume file for the removable storage device for example by using a file finder function such as FindFirstFile and the security component can create a desired array such as an array char MountVolList that can store information e.g. name or other identifier of all the removable storage devices that contain a respective secure volume file.

In yet another aspect the security component can manage the removable storage devices on a one by one basis to mount the respective secure volume files of the removable storage devices as real disks in relation to the host device . To facilitate mounting the secure volume files as real disks on the host device the security component can employ a desired for loop wherein at the beginning of the for loop the security component can retrieve a respective master key associated with the particular removable storage device for which the secure volume file is to be mounted wherein for example retrieving the master key can be facilitated as follows calling a desired create file function or create handler function e.g. CreateFile to create a handler for the master key file associated with the removable storage device wherein if for any reason the security component cannot create the handler for the removable storage device the mounting process can end when a handler is created calling a desired read or copy function such as  lread to copy the master key from the master key file to a desired location such as unsigned char ucryptPassword 81 and calling a desired handler close function such as CloseHandle to close the master key file handler.

After retrieving the master key associated with the particular removable storage device the security component can mount the secure volume file of the removable storage device as a real disk on the host device . The security component can employ desired mounting code to facilitate mounting the secure volume file wherein the desired mounting code for example GetFirstAvailableDrive to obtain an unused drive letter that can be used for mounting the secure volume file as a real disk call the following function to mount a secure volume file as a real disk

wherein if the return value is 1 this can mean the user aborted the function if the return value is 0 this can mean that the mounting function failed and if the return value is greater than 0 this can mean the secure volume file is mounted successfully and can maintain information of the respective mounted volumes of the respective removable storage devices wherein for example two arrays can be used for maintaining the information of the respective mounted volumes wherein the two arrays can be for example AutoMountedSource Storing the source path of the mounted volumes and AutoDriveNoList Storing the drive letters which used for mounting a volume. These arrays can facilitate preventing double mounting of a volume and support the taskbar icon functions.

At this point the for loop for mounting volumes as real disks on the host device can be at an end point where if there are other removable storage devices for which secure volume files are to be mounted the security component can proceed back to the beginning of the for loop for mounting volumes to start mounting a secure volume file for the next removable storage device on the list of removable storage device containing a secure volume file if there are no other removable storage devices for which a secure volume file is to be mounted e.g. no other devices on the list of removable storage devices containing a secure volume file the security component can end the for loop for mounting volumes and can proceed to the next desired process.

In still another aspect while the token component is connected to the host device and operating the security component can monitor operations associated with the mounted volumes and manage desired taskbar icon functions including for example refresh functions functions relating to opening a mounted volume functions relating to dismounting a mounted volume functions relating to dismounting all mounted volumes and exiting and or other desired functions such as more fully disclosed herein. For instance the security component can employ a desired function such as the MainDialogProc to facilitate responding to messages such as WM INITDIALOG and WM ENDSESSION messages wherein there can be a function in the security component to facilitate monitoring operations associated with the mounted volumes and manage desired taskbar icon functions. The security component can employ desired code to facilitate managing desired taskbar icon functions wherein the desired code can be located for example in a desired location such as the BOOL CALLBACK MainDialogProc in uCFormat.c in the token component .

In an aspect the security component can manage and facilitate execution of a refresh function for example in response to receiving a refresh command from a user via the taskbar menu displayed on the display screen of the host device e.g. in response to the user clicking the refresh button in the taskbar menu . In response to the refresh request the security component can scan the communication ports on the host device for a new removable storage device s e.g. new plug in removable storage device s that have been connected to the host device create a new secure volume file on a new removable storage device s and or mount the secure volume file of a new removable storage device s in a manner such as more fully disclosed herein.

In still another aspect the security component can monitor examine and detect whether the user selects to open a mounted volume of a removable storage device. If the security component detects that the user has selected to open a mounted volume e.g. by clicking open or open volume in the taskbar menu displayed on the host device the security component can open the desired mounted volume which was selected by the user. To facilitate opening the desired mounted volume the security component can employ desired code for example OpenVolumeExplorerWindow to open a windows explorer of the selected mounted volume.

In yet another aspect the security component can monitor examine and detect whether the user selects to dismount a mounted volume of a removable storage device e.g. detect whether the user has selected dismount or dismount volume in the taskbar menu displayed on the host device . In response to detecting that the user has selected a dismount command to dismount a mounted volume the security component can dismount a mounted volume which was selected to be dismounted by the user. The security component can employ desired dismount volume code that can be located for example in the BOOL CALLBACK MainDialogProc in uCFormat.c in a data store associated with the token component . Employing the desired dismount volume code the security component can set the Dismounting flag to a defined dismounting value e.g. TRUE . If the Dismounting flag is set to the defined dismounting value e.g. TRUE the taskbar menu will not be displayed until the dismount volume process is complete and the Dismounting flag is set to a defined dismount complete value e.g. FALSE by the security component . This can prevent duplicate dismounting of the same mounted volume which can cause an error. The security component also can call UnmountVolume to dismount the desired mounted volume. The security component can call a desired update drive information function such as UpdateDriveNoList to update the information regarding the mounted volumes wherein for example the list of mounted volumes can be updated to remove the volume that was dismounted.

In another aspect when desired the user can select to dismount all mounted volumes associated with the host device and exit from the token component . The security component can monitor check and detect whether the user selects to dismount all mounted volumes of removable storage devices and exit the token component e.g. detect whether the user has selected dismount all and exit in the taskbar menu displayed on the host device . If the security component does not detect that a command to dismount all mounted volumes and exit has been selected the security component can continue to monitor to detect whether any taskbar icon functions have been selected and manage performing desired taskbar icon functions. If the security component detects that a command to dismount all mounted volumes and exit has been selected the security component can dismount all the mounted volumes and exit the program executed by the security component wherein desired dismount exit code for example UnmountVolume can be invoked to dismount all mounted volumes one by one call a desired taskbar function such as TaskBarIconRemove to remove the taskbar icon and taskbar menu and call a desired exit function such as EndMainDlg to exit the program.

In an aspect a secure volume file can be a normal file which can be created on any desired removable storage device e.g. . In accordance with an embodiment a secure volume file can be created in accordance with the following example Secure Volume Format Specification shown in Table 1 

Referring briefly to along with depicts a diagram of an example master key file in accordance with an embodiment of the disclosed subject matter. In an aspect a master key file can be a normal file which can be created and stored on the token component . In an embodiment the master key file can be created in accordance with the following example Master Key File Format Specification 

As depicted in and Table 2 there can be a desired number of bytes e.g. 64 bytes that can be used for the passphrase a specified number of bytes e.g. 4 bytes that can be used for the ASCII string TRUE a desired number of bytes that can be set to 0 e.g. 12 bytes a desired number of bytes e.g. 1 byte that can be used for a flag and a desired number of bytes e.g. 64 bytes that can be used for salt .

In yet another aspect a user can have an option to protect the master key stored in the master key file. For instance a user can set a desired password to encrypt the master key. The code of this password option can be located for example in the BOOL CALLBACK MainDialogProc in uCFormat.c in a data store in the token component . If the user does not set a password to protect the master key the master key file can include a specified number of bytes e.g. the first 81 bytes . A desired subset of bytes e.g. the first 64 bytes of the specified number of bytes can be the master key without encryption. If the user does set a password to protect the master key the master key file can include a larger number of bytes e.g. 145 bytes than the specified number of bytes employed when no password is set. A desired number of bytes e.g. the first 64 bytes can be the encrypted master key an ASCII string having a desired word or value such as TRUE which can include a small number of bytes e.g. 4 bytes also can be encrypted wherein the desired word e.g. TRUE can be used for decryption validation and a desired number of bytes e.g. the last 64 bytes at the end of the larger set of bytes can be the salt used for master key decryption wherein the salt can be for example randomly generated data values that can be used as one of a desired number of inputs to a key derivation function and or used as a part of a key in a cipher or other cryptographic algorithm and a desired number of bytes e.g. 12 bytes between the word TRUE and the Flag can be set to a desired data value e.g. 0 .

As stated the security component can encrypt data being stored on or decrypt data being retrieved or read from a removable storage device e.g. secured or controlled by the token component . In an embodiment the security component can employ desired cryptographic algorithms and protocols. For example the security component can employ an AES 256 algorithm to encrypt and decrypt data. For example the security component can use AES with 14 rounds and a 256 bit key e.g. AES 256 operating in XTS mode. In another aspect the security component can use a desired hash algorithm such as SHA 512. When employing the SHA 512 algorithm the size of the output of this hashing algorithm can be 512 bits.

As stated a mode of operation used by the security component for encrypted partitions drives and virtual volumes can be XTS mode. XTS mode is a form of XEX mode with a modification e.g. XEX mode uses a single key for two different purposes whereas XTS mode uses two independent keys . XTS mode was approved as the IEEE 1619 standard for cryptographic protection of data on block oriented storage devices. For example the XTS mode can be described as follows C E P E n E n wherein denotes multiplication of two polynomials over the binary field GF 2 modulo x128 x7 x2 x 1 K1 is the encryption key 256 bit for each supported cipher e.g. AES K2 is the secondary key 256 bit for each supported cipher e.g. AES i is the cipher block index within a data unit for the first cipher block within a data unit i 0 n is the data unit index within the scope of K1 for the first data unit n 0 and is a primitive element of Galois Field 2128 that corresponds to polynomial x e.g. 2 . The size of each data unit can always be 512 bytes regardless of the sector size .

In yet another aspect a header key can be used to encrypt and decrypt the encrypted area of the secure volume header which can contain the master key and other desired data e.g. see the Secure Volume Format Specification . In volumes created by the token component the area can be encrypted in XTS mode. The method that the token component e.g. security component therein uses to generate the header key and the secondary header key XTS mode can be for example Password Based Key Derivation Function 2 PBKDF2 as specified in Public Key Cryptography Standards PKCS 5 v2.0.

In an embodiment a salt can be used having a predefined number of bits e.g. 512 bits . For example if a 512 bit salt is used there can be 2512 keys for each password. This can decrease vulnerability to off line dictionary attacks as pre computing all the keys for a dictionary of passwords can be very difficult when a salt is used. The salt can comprise random values generated by the random number generator of the security component during the volume creation process employed for a desired removable storage device e.g. . The header key derivation function can be based at least in part on Hash based Message Authentication Code HMAC Secure Hash Algorithm SHA 512 HMAC SHA 512 . The length of the derived key can be a desired number of bits long e.g. 256 bits long . Many iterations e.g. 1000 iterations of the key derivation function have to be performed to derive a header key which can increase the time necessary to perform an exhaustive search for passwords e.g. as part of brute force attack and the many iterations can facilitate decreasing the risk of an attack such as a brute force attack.

Header keys used by ciphers in a cascade can be mutually independent even though they are derived from a single password. Hence even when an attacker has one of the keys the attacker cannot use it to derive the other keys as typically it is not feasible to determine the password from which the key was derived except potentially for a brute force attack mounted on a weak password .

As stated the security component can employ a random number generator RNG that can be used to generate random numbers which can be used to generate for example the master encryption key the secondary key XTS mode salt and or keyfiles. For instance the random number generator can create a pool of random values that can be stored in memory e.g. RAM . The pool which can be a desired number of bytes long e.g. 640 bytes long can be filled with data from one or more of the following sources mouse movements keystrokes values generated by a built in RNG e.g. dev random and dev urandom in the host device e.g. Macintosh or Linux computers CryptoAPI which can be collected regularly at 500 ms intervals of a host device e.g. for Windows based computers network interface statistics e.g. NETAPI32 e.g. for Windows based computers and or various Win32 handles time variables and or counters e.g. collected regularly at 500 ms intervals e.g. for Windows based computers .

In an aspect before a value obtained from any of the above mentioned sources is written to the pool of random numbers it can be divided into individual bytes e.g. a 32 bit number can be divided into 4 bytes . These bytes can be individually written to the pool with for example a modulo 28 addition operation not by replacing the old values in the pool at the position of the pool cursor. After a byte is written the pool cursor position can be advanced by one byte. When the cursor reaches the end of the pool its position can be set to the beginning of the pool. In an embodiment after every predefined number of bytes e.g. 16 bytes is written to the pool the pool mixing function can be applied to the entire pool such as more fully disclosed herein.

With regard to the pool mixing function one purpose of this function is to perform diffusion. Diffusion can spread the influence of individual raw input bits over as much of the pool state as possible or desirable which also can hide statistical relationships to reduce risk of discovery of the numbers. After every predefined number of bytes e.g. 16 bytes is written to the pool this function can be applied to the entire pool. For example the security component can employ the pool mixing function as follows 

3. l byte size of the output of the hash function H e.g. if H is RIPEMD 160 then l 20 if H is SHA 512 l 64 

It is to be appreciated and understood that while system is shown with two storage devices e.g. the various embodiments described herein are not so limited as there can be any desired number of storage devices e.g. less than two storage devices two storage devices more than two storage devices . It is to be appreciated and understood that the system is disclosed as comprising the components specified herein however the subject specification is not so limited as the system can include other components which have not been shown here for reasons of brevity and clarity.

The token component also can include a communicator component that can be employed to facilitate transmitting or receiving information from another device e.g. host device with which the token component is interfaced. The communicator component can employ desired algorithms or protocols to facilitate communication of data between the token component and other devices.

In an aspect the token component can include a security component that can be utilized to control access to and encryption decryption of data associated with desired removable storage devices associated with a host device with which the token component is associated. The security component can contain a monitor component that can monitor or examine conditions associated with the token component associated host device and or associated storage devices to facilitate identifying or determining whether a command relating to a function of the token component has been received and or monitor other desired functions or components.

The security component also can comprise a search component that can perform desired searches such as search for and retrieve a file e.g. master key file and or file name search for empty removable storage devices connected to a host device with which the token component is connected search for removable storage devices that contain a secure volume file and or other desired searches. The security component also can include a detector component that can detect whether a master key file exists with respect to a removable storage device detect whether a storage device is connected to the host device and whether the drive is a removable storage device or not.

In an aspect the security component can comprise an identifier component that can identify removable storage device or assign drive names to removable storage devices e.g. drive A drive B drive C . . . to facilitate distinguishing between different removable storage devices connected to the host device. The security component also can include a key component that can generate a desired key such as a master key and or associated file e.g. master key file for example when no master key exists on the removable storage device s or when a new master key and master key file is desired to replace an empty master key file. In an aspect the security component also can employ a volume file generator component that can generate one or more desired secure volume files respectively associated with one or more removable storage devices associated with a host device with which the token component is associated.

The security component also can comprise a cryptographic component that can employ desired cryptographic algorithms and protocols to encrypt and decrypt data being stored on or retrieved from removable storage devices connected to the host device and or other desired information e.g. master key . For example the cryptographic component can employ an AES 256 encryption algorithm to encrypt or decrypt data. The security component can include an RNG component that can be employed to generate random numbers that can be used to encrypt or decrypt data create the suffixes of master key file names the master key a secondary key e.g. for XTS mode salt keyfiles etc. As desired the random numbers can be placed e.g. stored in a pool of random numbers. The security component also can include a mix component that can be employed to mix the pool of random numbers when predefined mix conditions have been met e.g. mix the pool after every 16byte is written to the pool . The mix component also can control other operations e.g. movement of the position of the pool cursor associated with mixing the pool of random numbers. The security component also can employ a hash component that can employ a desired hash algorithm to hash desired data and generate a desired hash value. For example the hash component can employ an SHA 512 hash algorithm to hash data.

In another aspect the security component can comprise a selector component that can receive detect and or identify selections of functions associated with the token component . For instance the selector component can receive selections of functions such as refresh mount volume dismount volume dismount all volumes and exit or other functions as provided in a taskbar menu and selected by a user who can manipulate e.g. click on a desired icon in the taskbar menu representative of the function desired by the user.

In still another aspect the security component can contain a refresh component that can be employed to perform a refresh function that can facilitate recognizing creating new secure volume files and mounting of the new secure volume files for removable storage devices that are newly connected to the host device. The security component can include an open volume component that can be employed to facilitate opening a desired mounted volume associated with a desired removable storage device for example when a user selects an open volume icon in the taskbar menu.

In an aspect the security component can include a mount component that can be employed to mount one or more secured volume files respectively associated with one or more removable storage devices which are connected to the host device as real disks on the host device as more fully disclosed herein.

The security component can comprise a dismount component that can perform a dismount function to dismount a desired mounted volume associated with a desired removable storage device. The dismounting of a mounted volume can be performed for example in response to a user selecting the dismount icon in the taskbar menu in relation to the mounted volume for which dismounting is desired. In another aspect the dismount component also can be used to dismount all mounted volumes associated with all removable storage devices connected to the host device. For example this can be performed in response to a user selecting the dismount all and exit function in the taskbar menu. The security component can comprise an exit component that can be employed to exit the process or program being executed by the token component for instance after all the mounted volumes are dismounted. This can be performed in response to a user selecting the dismount all and exit function in the taskbar menu for example.

In yet another aspect the security component can contain an authenticator component that can be used to facilitate authenticating a user who is attempting to use the token component for example to access e.g. access data stored on a removable storage device which is secured by the token component and connected to a host device. The user optionally can create authentication credentials such as a password or passphrase that can be stored by the token component . If the user has created authentication credentials when the user desires to use the token component the user can enter the authentication credentials into the host device or directly into the token component e.g. when the token component includes an interface for receiving input directly and the authenticator component can retrieve the stored authentication credentials and can compare it to the received authentication credentials and if there is a match the authenticator component can grant the user certain rights to access and use the token component but if there is no match the authenticator component can deny access to the token component to the user and or can request that the user re enter the authentication credentials again up to a predefined maximum number of access attempts. If the user unsuccessfully attempts to enter valid authentication credentials the maximum number of times the token component can lock the user and others out from further access attempts for at least a predefined amount of time or until a reset is performed e.g. re start the host device with the token component connected to the host device or other desired tasks to reset the token component .

The token component also can include a processor component that can work in conjunction with the other components e.g. interface component communicator component security component etc. to facilitate performing the various functions of the token component . The processor component can employ one or more processors microprocessors or controllers that can process data such as information relating to controlling access to a removable storage device secured by the token component information relating to encrypting or decrypting data information relating to operations of the token component and or other information etc. to facilitate operation of the token component as more fully disclosed herein and control data flow between the token component and other components e.g. host device removable storage devices etc. associated with the token component .

The token component can include a data store that can that can store data structures e.g. user data e.g. when the token component is itself also a removable storage device metadata code structure s e.g. modules objects hashes classes procedures or instructions information relating to cryptographic algorithms and protocols information relating to encrypting and decrypting data information relating to removable storage devices information relating to operations of the token component information relating to authentication authentication credentials etc. to facilitate controlling operations associated with the token component etc. In an aspect the processor component can be functionally coupled e.g. through a memory bus to the data store in order to store and retrieve information desired to operate and or confer functionality at least in part to the interface component communicator component security component and or substantially any other operational aspects of the token component . It is to be appreciated and understood that the token component is disclosed as comprising the components specified herein however the subject specification is not so limited as the token component can include other components which have not been shown here for reasons of brevity and clarity.

The host device also can comprise a communicator component that can be employed to facilitate transmitting or receiving information from another device e.g. token component removable storage device peripheral devices etc. with which the host component is interfaced. The communicator component can employ desired algorithms or protocols to facilitate communication of data between the host device and other devices with which the host device is communicatively connected.

The host device can include a presentation component that can present data associated with the processor . It is to be appreciated that the presentation component can be incorporated into the processor component and or can be a stand alone component as depicted . The presentation component can provide various types of user interfaces to facilitate interaction between a user and any component coupled to the processor component .

For instance the presentation component can provide one or more graphical user interfaces GUIs command line interfaces and the like. For example a GUI e.g. touch screen GUI can be rendered that provides a user with a region or means to load import read etc. data and can include a region to present the results of such. These regions can comprise known text and or graphic regions comprising dialogue boxes static controls drop down menus list boxes pop up menus as edit controls combo boxes radio buttons check boxes push buttons and graphic boxes. In addition utilities to facilitate the presentation such as vertical and or horizontal scroll bars for navigation and toolbar buttons to determine whether a region will be viewable can be employed. For example the user can interact with one or more of the components coupled to and or incorporated into the processor component .

The user can also interact with the regions to select and provide information via various devices such as a mouse a roller ball a keypad a keyboard a pen and or voice activation for example. Typically a mechanism such as a push button or the enter key on the keyboard can be employed subsequent entering the information in order to initiate the search. However it is to be appreciated that the claimed subject matter is not so limited. For example merely highlighting a check box can initiate information conveyance. In another example a command line interface can be employed. For example the command line interface can prompt e.g. via a text message on a display and an audio tone the user for information via providing a text message. The user can than provide suitable information such as alpha numeric input corresponding to an option provided in the interface prompt or an answer to a question posed in the prompt. It is to be appreciated that the command line interface can be employed in connection with a GUI and or an application programming interface API . In addition the command line interface can be employed in connection with hardware e.g. video cards and or displays e.g. black and white and enhanced graphics adaptor EGA etc. with limited graphic support and or low bandwidth communication channels.

In another aspect the host device can contain an operating system that can be executed on the host device and can manage the host device hardware and provide common services for efficient execution of various application software used by the host device and or other devices e.g. token component removable storage device other peripheral device connected to the host device .

In still another aspect the host device can contain a processor component that can work in conjunction with the other components e.g. interface component communicator component presentation component operating system etc. to facilitate performing the various functions of the host device . The processor component can employ one or more processors microprocessors or controllers that can process data such as information relating to interfacing with devices connected to the host device received information presentation of information operating system information application information information relating to encrypting or decrypting data information relating to operations of the host device and or other information etc. to facilitate operation of the host device as more fully disclosed herein and control data flow between the host device and other components e.g. token component removable storage devices other peripheral devices etc. associated with the host component .

The host device can include a data store that can that can store data structures e.g. user data metadata code structure s e.g. modules objects hashes classes procedures or instructions information relating to interfacing with devices connected to the host device received information presentation of information operating system information application information information relating to cryptographic algorithms and protocols information relating to encrypting and decrypting data information relating to an associated token component information relating to removable storage devices information relating to operations of the host device information relating to authentication passwords or passphrases etc. to facilitate controlling operations associated with the host device etc. In an aspect the processor component can be functionally coupled e.g. through a memory bus to the data store in order to store and retrieve information desired to operate and or confer functionality at least in part to the interface component communicator component presentation component operating system and or substantially any other operational aspects of the host device . It is to be appreciated and understood that the host device is depicted as comprising interface component communicator component presentation component operating system however the subject specification is not so limited as the host device can include other components which have not been shown here for reasons of brevity and clarity.

The aforementioned systems and or devices have been described with respect to interaction between several components. It should be appreciated that such systems and components can include those components or sub components specified therein some of the specified components or sub components and or additional components. Sub components could also be implemented as components communicatively coupled to other components rather than included within parent components. Further yet one or more components and or sub components may be combined into a single component providing aggregate functionality. The components may also interact with one or more other components not specifically described herein for the sake of brevity but known by those of skill in the art.

Referring to an example method that can control access to and encryption decryption of data associated with removable storage device s in accordance with various embodiments and aspects of the disclosed subject matter is illustrated. At a token component can be configured to be communicatively connectable to and removable from a host device. At access to one or more removable storage drives e.g. removable storage devices can be controlled based at least in part on a communicative connection state of the token component in relation to the host device. The token component can control access to one or more removable storage drives that are being secured using the token component. The token component also can facilitate encrypting data written to and decrypting data being read from the one or more removable storage drives. The one or more removable storage drives cannot be accessed by a host device unless the token component is connected to the host device e.g. unless the token component is in a connected state in relation to the host device . Access to the one or more removable storage drives connected to the host device can be denied when the token component is not connected to the host device e.g. when the token component is in an unconnected state in relation to the host device .

At a determination can be made regarding whether the token component is connected to the host device. If the token component is not connected to the host device at access to the removable storage device can be denied. If at it is determined that the token component is connected to the host device at a determination can be made as to whether a password has been set. If it is determined that a password has been set at authentication credentials e.g. password can be received. For instance the host device can receive authentication credentials from the user via a desired interface on the host device. At a determination can be made regarding whether the received authentication credentials are valid. For instance the token component and or host device can retrieve stored valid authentication credentials from a data store and can compare the received authentication credentials from the stored authentication credentials and if they match each other the received authentication credentials can deemed valid and if they do not match each other the received authentication credentials can deemed invalid. If it is determined that the received authentication credentials are invalid method can proceed to act wherein access to the removable storage device can be denied. Alternatively as desired the user can be prompted to enter new authentication credentials wherein the user can be permitted to attempt to enter the correct authentication credentials up to a predefined maximum number of access attempts and if valid authentication credentials are not received within the maximum number of access attempts the token component can lock the user out from accessing removable storage devices secured by the token component for at least a predefined period of time or until the token component has been reset. If at it is determined that the received authentication credentials are valid method can proceed to act . Referring again to act if it is determined that no password has been set method can proceed to act .

At a determination can be made as to whether the secure volume file for the removable storage device has been mounted. If it is determined that the secure volume file has not been mounted method can proceed to act wherein access to the removable storage device can be denied. Action can be taken to mount the secure volume file of the removable storage device and access to the removable storage device can again be attempted if desired. If at it is determined that the secure volume file has been mounted at access to the removable storage device can be granted. In an aspect as desired with access granted data can be written to the removable storage device using the host device wherein the data can be encrypted and stored in the removable storage device data can be read from the removable storage device wherein the data can be retrieved from the removable storage device decrypted and provided to the host device or data can be erased from the removable storage device.

Turning to illustrated is an example method that can facilitate operation of a token component in accordance with an aspect of the disclosed subject matter. illustrates a portion of an example method that can facilitate operation of a token component in accordance with an aspect of the disclosed subject matter. At a starting function associated with the token component can be called. Execution of the start function can facilitate setting up an operating environment for the token component such as more fully disclosed herein for example with regard to system . The starting function can be initiated automatically for instance when the security software program of the token component is automatically invoked in response to the token component being inserted into a communication port of the host device and connecting with the host device.

At a determination can be made regarding whether a master key file exists. The token component can examine one or more removable storage devices connected to the host device to determine or identify whether any of the removable storage devices have a master key file stored thereon. If no master key file is identified or located at a master key file can be generated. If at act a master key file is identified or located at the master key file can be retrieved. At this point method can proceed to act .

At a list of empty removable storage devices which are connected to the host device can be generated. The token component can manage each of the empty removable storage devices on the list one at a time. At for each empty removable storage device on the list starting with the first empty removable storage device on the list the master key file associated with the empty removable storage device can be retrieved. At for each empty removable storage device on the list starting with the first empty removable storage device on the list a secure volume file can be created. At a determination can be made regarding whether there are any other empty removable storage devices on the list. If there is another empty removable storage device on the list method can return to act and method can proceed from that point until secure volume files have been created for all or at least a desired portion of the empty removable storage devices on the list of empty removable storage devices. Method can proceed to reference point A wherein method can continue as more fully disclosed with regard to .

At for each removable storage device on the list of removable storage devices that have secure volume files starting with the first removable storage device on the list of removable storage devices that have secure volume files the master key file associated with the removable storage device can be retrieved. At for each removable storage device on the list of removable storage devices that have secure volume files starting with the first empty removable storage device on the list of removable storage devices that have secure volume files the secure volume file can be mounted as a real disk on the host device. At a determination can be made regarding whether there are any other removable storage devices on the list of removable storage devices that have secure volume files. If there is another removable storage device on the list of removable storage devices that have secure volume files method can return to act and method can proceed from that point until secure volume files have been mounted for all or at least a desired portion of the removable storage devices on the list of removable storage devices that have secure volume files. At this point method can proceed to reference point B wherein method can continue as more fully disclosed with regard to .

At a determination can be made regarding whether a refresh function has been requested. The token component can monitor and detect whether the refresh function has been selected in the taskbar menu by a user requesting a refresh be performed. A refresh can or may be requested for example when the user has connected a new removable storage device to the host device after the token component has already been set up and operating. If a refresh function has been requested method can proceed to reference point C wherein method can return to act as shown in and method can proceed from that point to generate a list of empty removable storage devices which are connected to the host device and continue from there.

If at it is determined that the refresh function has not been requested at a determination can be made regarding whether an open volume function has been requested. An open volume function can or may be requested for example when the user desires to open a mounted volume associated with a desired removable storage device. The user can make a request for the open volume function to be performed for example by selecting the open volume icon in the taskbar menu. The user can or may request that a desired mounted volume be opened for instance when the user desires to write data to read data from or erase data from the removable storage device. If an open volume function has been requested at the desired mounted volume can be opened wherein the opened mounted volume can be accessed. At this point method can return to act wherein operating conditions associated with the token component can continue to be monitored.

If at it is determined that an open volume function has not been requested at a determination can be made regarding whether a dismount volume function has been requested. A dismount volume function can or may be requested for example when the user desires to dismount a mounted volume associated with a desired removable storage device to remove or disconnect the removable storage device from the host device. The user can make a request for the dismount volume function to be performed for example by selecting the dismount volume icon in the taskbar menu. If a dismount volume function has been requested at the desired mounted volume can be dismounted. As desired the dismounted removable storage device can be disconnected or at least cannot be opened until it has been mounted again. At this point method can return to act wherein operating conditions associated with the token component can continue to be monitored.

If at it is determined that a dismount volume function has not been requested at a determination can be made regarding whether a dismount all volumes and exit function has been requested. A dismount all volumes and exit function can or may be requested for example when the user desires to dismount all mounted volumes associated with all removable storage devices connected to the host device to remove or disconnect the removable storage devices from the host device and the user desires to end operations of the token component e.g. end the software program being executed during operation of the token component . The user can make a request for the dismount all volumes and exit function to be performed for example by selecting the dismount all volumes and exit icon in the taskbar menu. If a dismount all volumes and exit function has been requested at all of the mounted volumes can be dismounted and the program can be exited. As desired the dismounted removable storage devices can be disconnected or at least cannot be opened until being mounted again. If at it is determined that a dismount all volumes and exit function has not been requested method can return to act wherein operating conditions associated with the token component can continue to be monitored.

If at a storage device is detected as being connected to the host device at for each storage device connected to the host device a determination can be made regarding whether the detected storage device is a removable storage device. If it is determined that the detected storage device is not a removable storage device at that storage device is not added to the list and method can return to act wherein method can proceed to determine whether there is another storage device detected as being connected to the host device.

If at it is determined that the detected storage device is a removable storage device at a determination can be made as to whether the removable storage device is an empty removable storage device. If it is determined that the removable storage device is not empty method can proceed to act wherein that removable storage device is not added to the list and method can return to act wherein method can proceed to determine whether there is another storage device detected as being connected to the host device.

If at it is determined that the removable storage device is empty at the empty removable storage device can be added to the list of empty removable storage devices. At this point method can return to act wherein method can proceed to determine whether there is another storage device detected as being connected to the host device.

At the address pointer can be set to the beginning of the secure volume file. For instance the token component can call a desired set address pointer function such as SetFilePointer to set the address pointer can be set to the beginning of the secure volume file. At the secure volume header can be written to the secure volume file. In an aspect the token component can call a desired write function such as  lwrite to write the secure volume header to the secure volume file.

At FAT parameters can be obtained for formatting the secure volume file. In an aspect the token component can call a desired get FAT parameters function such as GetFatParams to obtain the FAT parameters which can be employed to format the secure volume file. At the file system of the secure volume file can be formatted as FAT based at least in part on the FAT parameters. The token component can call a desired format file function such as FormatFat to format the secure volume file as FAT.

It is to be appreciated and understood that components e.g. storage device host device token component security component etc. as described with regard to a particular system or method can include the same or similar functionality as respective components e.g. respectively named components as described with regard to other systems or methods disclosed herein.

As utilized herein terms component system interface device and the like can refer to a computer related entity either hardware software e.g. in execution and or firmware. For example a component can be a process running on a processor a processor an object an executable a program and or a computer. By way of illustration both an application running on a server and the server can be a component. One or more components can reside within a process and a component can be localized on one computer and or distributed between two or more computers.

As it employed in the subject specification the term processor can refer to substantially any computing processing unit or device comprising but not limited to comprising single core processors single processors with software multithread execution capability multi core processors multi core processors with software multithread execution capability multi core processors with hardware multithread technology parallel platforms and parallel platforms with distributed shared memory. Additionally a processor can refer to an integrated circuit an application specific integrated circuit ASIC a digital signal processor DSP a field programmable gate array FPGA a programmable logic controller PLC a complex programmable logic device CPLD a discrete gate or transistor logic discrete hardware components or any combination thereof designed to perform the functions described herein. Processors can exploit nano scale architectures such as but not limited to molecular and quantum dot based transistors switches and gates in order to optimize space usage or enhance performance of user equipment. A processor may also be implemented as a combination of computing processing units.

In the subject specification terms such as data store data storage database and substantially any other information storage component relevant to operation and functionality of a component refer to memory components or entities embodied in a memory or components comprising the memory. For example information relevant to operation of various components described in the disclosed subject matter and that can be stored in a memory can comprise but is not limited to comprising subscriber information cell configuration e.g. devices served by an AP or service policies and specifications privacy policies and so forth. It will be appreciated that the memory components described herein can be either volatile memory or nonvolatile memory or can include both volatile and nonvolatile memory. By way of illustration and not limitation nonvolatile memory can include read only memory ROM programmable ROM PROM electrically programmable ROM EPROM electrically erasable ROM EEPROM phase change memory PCM flash memory or nonvolatile RAM NVRAM e.g. ferroelectric RAM FeRAM . Volatile memory can include random access memory RAM which acts as external cache memory. By way of illustration and not limitation RAM is available in many forms such as synchronous RAM SRAM dynamic RAM DRAM synchronous DRAM SDRAM double data rate SDRAM DDR SDRAM enhanced SDRAM ESDRAM Synchlink DRAM SLDRAM and direct Rambus RAM DRRAM . Additionally the disclosed memory components of systems or methods herein are intended to comprise without being limited to comprising these and any other suitable types of memory.

Furthermore the disclosed subject matter can be implemented as a method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer to implement the disclosed subject matter. The term article of manufacture as used herein can encompass a computer program accessible from any computer readable device carrier or media. For example computer readable media can include but is not limited to magnetic storage devices e.g. hard disk floppy disk magnetic strips . . . optical disks e.g. compact disk CD digital versatile disk DVD . . . smart cards and flash memory devices e.g. card stick key drive . . . . Additionally it should be appreciated that a carrier wave can be employed to carry computer readable electronic data such as those used in transmitting and receiving electronic mail or in accessing a network such as the Internet or a local area network LAN . Of course those skilled in the art will recognize many modifications can be made to this configuration without departing from the scope or spirit of the disclosed subject matter.

Some portions of the detailed description have been presented in terms of algorithms and or symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and or representations are the means employed by those cognizant in the art to most effectively convey the substance of their work to others equally skilled. An algorithm is here generally conceived to be a self consistent sequence of acts leading to a desired result. The acts are those requiring physical manipulations of physical quantities. Typically though not necessarily these quantities take the form of electrical and or magnetic signals capable of being stored transferred combined compared and or otherwise manipulated.

It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like. It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the foregoing discussion it is appreciated that throughout the disclosed subject matter discussions utilizing terms such as processing computing calculating determining and or displaying and the like refer to the action and processes of computer systems and or similar consumer and or industrial electronic devices and or machines that manipulate and or transform data represented as physical electrical and or electronic quantities within the computer s and or machine s registers and memories into other data similarly represented as physical quantities within the machine and or computer system memories or registers or other such information storage transmission and or display devices.

What has been described above includes examples of aspects of the disclosed subject matter. It is of course not possible to describe every conceivable combination of components or methods for purposes of describing the disclosed subject matter but one of ordinary skill in the art may recognize that many further combinations and permutations of the disclosed subject matter are possible. Accordingly the disclosed subject matter is intended to embrace all such alterations modifications and variations that fall within the spirit and scope of the appended claims. Furthermore to the extent that the terms includes has or having or variations thereof are used in either the detailed description or the claims such terms are intended to be inclusive in a manner similar to the term comprising as comprising is interpreted when employed as a transitional word in a claim.

