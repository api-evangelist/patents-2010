---

title: Decoy application servers
abstract: A computing device, executing a decoy application server that does not have access to real data, receives a service request from a client. The decoy application server protects a designated application server, wherein the decoy application server and the designated application server include instances of a single Java application server program. The decoy application server establishes a connection to a false database via a decoy Java Database Connectivity (JDBC) driver. The decoy application server retrieves false data from the false database, and provides the false data to the client.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08650215&OS=08650215&RS=08650215
owner: Red Hat, Inc.
number: 08650215
owner_city: Raleigh
owner_country: US
publication_date: 20100504
---
Embodiments of the present invention relate to distributed computing and more specifically to the use of decoy application servers to reduce an application server s vulnerability to hackers.

Any server that provides services or data over a network is vulnerable to attack by malicious software and individuals commonly known as hackers . There are numerous techniques that can be used to attack an application server for the purpose of disabling the application server or gaining access to information on the application server. Such attacks include for example denial of service attacks use of stolen credentials passwords to access the application server use of software security flaws to control or access the application server etc. Accordingly there is a continuing need to protect application servers from attacks.

Described herein is a method and apparatus for protecting application servers using decoy application servers. In one embodiment a decoy application server that does not have access to real data receives a service request from a client. The decoy application server protects a designated application server wherein the decoy application server and the designated application server include instances of a single Java application server program. The decoy application server establishes a connection to a false database via a decoy Java Database Connectivity JDBC driver. The false database may be a real database that includes false data or may be a component of the decoy JDBC driver that responds to database queries. The decoy application server retrieves false data from the false database and provides the false data to the client. In one embodiment the false data is generated by the JDBC driver in response to a request from the decoy application server for data.

In the following description numerous details are set forth. It will be apparent however to one skilled in the art that the present invention may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present invention.

Some portions of the detailed description which follows are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as receiving establishing retrieving providing loading or the like refer to the actions and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical e.g. electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage or display devices.

The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions.

A machine readable medium includes any mechanism for storing information in a form readable by a machine e.g. a computer . For example a machine readable medium includes a machine readable storage medium such as a read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices etc.

The distributed computing system may include legitimate clients illegitimate clients a designated application server or multiple designated application servers one or more decoy application servers and a service repository also known as a domain server connected via a network . The network may be a public network e.g. Internet a private network e.g. Ethernet or a local area Network LAN or a combination thereof. In one embodiment the network includes an enterprise service bus ESB . An ESB is an event driven and standards based messaging engine that provides services for more complex architectures. The ESB provides an infrastructure that links together services and clients to enable distributed applications and processes. The ESB may be implemented to facilitate an SOA. In one embodiment the ESB is a single bus that logically interconnects all available services and clients. Alternatively the ESB may include multiple busses each of which may logically interconnect different services and or clients.

Clients including legitimate clients and illegitimate clients are applications that run on client machines such as for example personal computers PC palm sized computing devices personal digital assistants PDA etc. In the SOA clients include applications that access services provided by application servers. Clients may be fat clients clients that perform local processing and data storage thin clients clients that perform minimal or no local processing and minimal to no data storage and or hybrid clients clients that perform local processing but little to no data storage .

Legitimate clients are clients that make legitimate use of services provided by the designated application server . Legitimate clients are authorized to use the services provided by the designated application server and may be associated with particular usernames and passwords which may be used to access the services of the designated application server . Legitimate clients may have purchased licensed or otherwise gained legal right to utilize those services and may include specialized software for interacting with the designated application server .

Illegitimate clients are clients that are not authorized to use services offered by the designated application server . Illegitimate clients may be hackers that are intent on crashing the designated application server stealing information from the designated application server or otherwise making illegal or unauthorized use of the designated application server . Illegitimate clients typically have no relationship with the designated application server and attempt to find avenues of attack such as by sniffing network traffic and or obtaining port and address information for the designated application server from the service registry .

Designated application servers provide one or more services to legitimate clients . The offered services may be discretely defined sets of contiguous and autonomous functionality e.g. business functionality technical functionality etc. . Each service may represent a process activity or other resource that can be accessed and used by other services or clients on network . Each of the services provided by the designated application server may be independent of other services and may be accessed without knowledge of its underlying platform implementation. Examples of provided services include banking services travel booking services electronic retail services and so on.

Decoy application servers appear to provide the same services to clients as the designated application server but provide only or primarily false data. In one embodiment designated application server and decoy application servers include instances of the same application server program. Thus the designated application server and decoy application servers may appear to be identical to clients. Therefore it may be difficult or impossible for an unauthorized client to determine which application servers are designated application servers and which are decoy application servers .

For an illegitimate client to gain access to real data provided by the designated application server the illegitimate client must first hack into the correct application server. If the illegitimate client successfully hacks into a decoy application server the illegitimate client will be unable to steal data. Moreover crashing the decoy application server using for example a denial of service attack has no effect on the designated application server s ability to provide services to legitimate clients .

In a preferred embodiment there are more decoy application servers than designated application servers . Accordingly the illegitimate client has a statistically lowered chance of accessing real data. Moreover denial of services attacks also have a statistically lowered chance of shutting down the designated application server .

Designated application server and decoy application servers may be resident on server machines which may be personal computers PC rackmount servers routers etc. Designated application server may run on the same machine as one or more decoy application servers or may run on a separate machine. Additionally one or more decoy application servers may run on the same machine or all decoy application servers may run on separate machines. Where multiple application servers e.g. designated application servers and or decoy application servers run on the same machine each application server may have its own address and may operate on independent ports. In one embodiment server machines are deployed into a cluster. This may reduce an illegitimate client s ability to distinguish between designated application servers and decoy application servers.

Service repository includes a list of all services in the distributed computing system including a list of all application servers including decoy application servers and designated application servers that provide those services. Service repository is hosted by a server machine which may be the same server machine hosting a real and or decoy application server. In addition to maintaining a list of services and application servers service repository also includes information about those services and application servers such as a service s business application e.g. bank travel agency etc. how to get messages to the service e.g. using JMS or HTTP quality of service requirements e.g. transactional secure etc. and all additional data necessary to communicate with those services and or application servers.

In one embodiment each entry for an application server in the service registry includes a unique signature value e.g. a hash value which identifies whether that application server is a decoy application server or a designated application server . Legitimate clients may include a signature checking module that can identify designated application servers based on their associated signature values.

When a legitimate client queries the service registry for a desired service multiple results are returned. Each result may include a unique signature value. The signature checking module processes each of the unique signature values. Those signature values that match predetermined criteria are determined to be associated with designated application servers. Those signature values that fail to match the predetermined criteria are determined to be associated with decoy application servers . For example signature values from designated application servers when processed by a key checking algorithm may be validated. In contrast signature values from decoy application servers when processed by a key checking algorithm may be identified as invalid. The legitimate client may then send a service request to an application server that has been identified as a designated application server . Since illegitimate clients lack the signature checking module they are unable to accurately distinguish between designated application servers and decoy application servers .

In some instances an illegitimate client may be able to make an educated guess as to which application server is a designated application server by using a packet sniffer to monitor network traffic e.g. to observe sources and destinations of network traffic . Those application servers that receive a bulk of network traffic may be identified by the illegitimate client as probable designated application servers . Accordingly in one embodiment decoy service requests and service responses are sent to and from the decoy application servers to further mask the identity of the designated application server .

Legitimate client generates a real service request and sends it to decoy dispatcher . Decoy dispatcher is a dispatcher a specialized service that receives a message as an input performs an operation and outputs the message that is configured to generate decoy copies of real service requests and propagate the decoy service requests to decoy application servers . In one embodiment the decoy dispatcher maintains a list of decoy application servers e.g. decoy application server and and generates decoy service requests for one or more of those decoy application servers upon receiving a real service request. Alternatively the legitimate client may identify which decoy application servers for decoy dispatcher to send decoy service requests to.

Decoy dispatcher forwards the real service request to the designated application server and sends decoy service requests to one or more decoy application servers e.g. decoy application server and . The designated application server performs one or more requested operations and provides real data in a real service response which it sends back to legitimate client . Each of the decoy application servers also perform one or more operations that were requested by the decoy service requests. The requested operations may be the same as the operation requested in the real service request or may be different operations. The decoy application servers then send decoy service responses back to the legitimate client . These decoy service responses typically do not contain any real data.

In one embodiment the decoy dispatcher intercepts the real service response and decoy service responses. The decoy dispatcher then determines which of the received service responses is a real service response and forwards that service response to legitimate client . In one embodiment each service response includes a unique signature value associated with the application server that generated the service response. Decoy dispatcher may include a signature checking module that processes the signature values included in the service responses to identify which of the service responses are real service responses. In an alternate embodiment the decoy service responses and real service responses are received by legitimate client which determines which responses are real responses and which responses are decoy responses. Alternatively decoy service responses may not be sent back to legitimate client or decoy dispatcher .

As illustrated an illegitimate client may be sniffing the network in an attempt to determine addresses and ports of application servers to attack. However illegitimate client collects the address and port information of decoy application servers as well as designated application server . Therefore the illegitimate client does not know which of the application servers to attack. The greater the ratio of decoy application servers to designated application servers the lower the probability that the illegitimate client will attack a designated application server .

In the designated application server software architecture the real java application server is connected to or includes a Java Database Connectivity JDBC layer . The JDBC layer is an application programming interface API that defines how the real Java application server may access a database. The JDBC layer provides methods for both querying and updating a database.

The JDBC layer includes a driver manager that creates JDBC connections to databases or other data stores. JDBC connections are established by searching for JDBC drivers that are registered with the driver manager for connecting to particular databases or other data stores or particular types of databases. For example the JDBC layer in designated application server includes a first JDBC driver for connecting to database and a second JDBC driver for connecting to database . Database and database may be the same or different database types such as Oracle databases DB2 databases PostgreSQL databases and so on.

Each JDBC driver is an adapter installed on the application server machine that hosts the designated application server . The JDBC drivers convert requests from Java programs to a protocol that a particular database can understand. Each JDBC driver may establish connections to an appropriate database and may then issue commands or queries to the database using for example structured query language SQL or another language. JDBC connections support update statements such as SQL s create insert update and delete statements and query statements such as SQL s select statement. Once the JDBC layer establishes a connection between a database and the real Java application server using an appropriate JDBC driver the real Java application server may then retrieve data from the database using a database query mechanism. For example when a business object e.g. a Java application needs data from a database the real Java application server requests a connection to the database . Once the connection is established the real Java application server can issue for example SQL statements to the database .

Similar to designated application server software architecture in decoy application server software architecture the decoy Java application server is connected to a JDBC layer which includes a driver manager . However unlike JDBC layer of the designated application server software architecture JDBC layer includes one or more decoy JDBC driver s and may not include any additional JDBC drivers e.g. for connecting to real databases . In one embodiment the decoy JDBC driver does not connect to any databases or other data stores. Instead when the decoy JDBC driver receives a request to connect to a database it connects to a fictitious or false database which it may generate. Thereafter whenever the decoy Java application server queries the false database e.g. issues an SQL query statement to the false database the decoy JDBC driver provides false data to the decoy Java application server . To the decoy Java application server it appears as though it is receiving data from a real database. For example the decoy JDBC driver provides false data that is formatted in a manner that the decoy Java application server expects. The false data may be stored in pre generated false database that is a component of the JDBC driver . Alternatively the decoy JDBC driver may generate the false data on the fly using a false data generator . In such an embodiment the false database may include merely a database name and or address.

In one embodiment JDBC layer includes a single decoy JDBC driver that can emulate connections to all types of databases and or other databases. Alternatively JDBC layer may include multiple decoy JDBC drivers each of which emulates a connection to one or more different types of data stores.

In one embodiment the decoy JDBC driver connects to a real database not shown that includes false data. In such an embodiment the decoy JDBC driver may not include a false database or a false data generator .

In addition to responding to database queries to a false database the decoy JDBC driver may also respond to update statements such as SQL s create insert update and delete statements. For insert create and update statements the decoy JDBC driver may temporarily store data received from the decoy Java application server . Therefore if the decoy Java application server later requests that data during a current session the decoy JDBC driver may retrieve the data from the temporary storage and return it to the decoy Java application server . Once the current session is terminated the decoy JDBC driver may delete the data from the temporary location.

Decoy Java application servers may be initiated simply by loading a Java application server program and connecting the Java application server program to a JDBC layer that includes a decoy JDBC driver . This enables decoy Java application servers to be easily initiated as needed. In one embodiment multiple decoy Java application servers are initiated automatically when a real Java application server is initiated using the same Java application server program code.

Referring to at block of method a designated application server is initiated on a computing device. At block processing logic establishes a connection between the designated application server and a database via a first JDBC driver that is loaded into a JDBC layer. The connection may be established when the application server is initiated or upon request by a business object e.g. a Java application . In one embodiment the connection is established via a JDBC driver that is configured to communicate with the database. Once the connection is established database query statements and update statements may be sent to the database and real data may be obtained from the database.

At block one or more decoy application servers are automatically initiated on the computing device and or on one or more additional computing devices. In one embodiment the decoy application server executes the same application server program code as the designated application server. Therefore the decoy application server may be automatically initiated using a modified server replication technique. With standard server replication techniques e.g. as used for high availability or load balancing additional designated application servers would be initiated. However the modified server replication initiates copies of the same server program but initiates them with the incorporation of a JDBC layer that includes a decoy JDBC driver. Other than the inclusion of the decoy JDBC driver the decoy application servers may be identical to the designated application server.

At block processing logic establishes a connection between the decoy application server and a false database via the decoy JDBC driver. The connection between the false database and the decoy application server may not be a connection to an actual database. Instead the decoy JDBC driver may itself mimic a database and may respond to database update and query statements for example without connecting to any database. Responses to such database statements may include false data generated dynamically on the fly by the decoy JDBC driver. Therefore it appears to business objects e.g. Java applications as though they are communicating with a real database even though no database exists.

Referring to at block of method decoy application server receives a service request. The service request may be received from a client of the decoy application server. The decoy application server may determine that in order to satisfy the service request the decoy application server needs to communicate with a particular database or a particular database type.

At block the decoy application server uses an API for a JDBC layer to establish a connection to a false database that appears to be a database of the particular type. In one embodiment a JDBC driver manager included in the JDBC layer loads a decoy JDBC driver that is configured to establish connections to databases of the particular database type. At block the JDBC layer establishes a connection between the decoy application server and a false database via the decoy JDBC driver. The JDBC layer then returns a connection object to the decoy application server that enables the decoy application server to communicate with the false database.

At block the decoy application server generates a database statement e.g. an update statement or query statement and sends it to the false database via the established connection. At block the decoy JDBC driver generates false data in response to receiving the database statement. At block the decoy application server receives the false data from the decoy JDBC driver via the established connection. The false data has contents and a format that the decoy application server is expecting. Therefore it appears to the decoy application server as though the data came from an actual database.

Methods and can be performed to mask the identity of a designated application server. This may reduce a likelihood that a hacker will gain access to the designated application server or shut down the designated application server.

Referring to at block of method a client queries a service registry for an application server that satisfies a criterion.

At block the client receives identification of multiple application servers that satisfy the criterion wherein a first subset of the application servers are decoy application servers and a second subset of the application servers are designated application servers.

At block the client determines which of the application servers are designated application servers based on a unique signature value associated with each received application server identification. Those signature values that meet designated application server criteria may be determined to be associated with designated application servers while those signature values that fail to meet the criteria may be determined to be associated with decoy application servers.

At block the client generates a real service request. At block the client generates one or more decoy service requests. At block the client sends the real service request to a designated application server. At block the client sends the decoy service requests to decoy application servers. The decoy service requests may be generated by a decoy dispatcher that intercepts outgoing service requests.

The exemplary computer system includes a processing device a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or Rambus DRAM RDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a secondary memory e.g. a data storage device such as a hard disk drive which communicate with each other via a bus .

Processing device represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processing device may be a complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor or a processor implementing other instruction sets or processors implementing a combination of instruction sets. The processing device may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. The processing device is configured to execute processing logic e.g. instructions for performing the operations and steps discussed herein.

The computer system may further include a network interface device . The computer system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The secondary memory may include a machine readable storage medium on which is stored one or more sets of instructions embodying any one or more of the methodologies or functions described herein. The instructions may also reside completely or at least partially within the main memory and or within the processing device during execution thereof by the computer system the main memory and the processing device also constituting machine accessible storage media.

The machine readable storage medium may also be used to store a decoy JDBC driver and or a software library containing methods that call a decoy JDBC driver . While the machine readable storage medium is shown in an exemplary embodiment to be a single medium the term machine readable storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine readable storage medium shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term machine readable storage medium shall accordingly be taken to include but not be limited to solid state memories and optical and magnetic media.

It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. The scope of the invention should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

