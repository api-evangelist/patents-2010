---

title: Cloud based file storage service
abstract: A server receives from a user's computer a request to store a file and a file hash value. The server determines whether a file with the same hash value is stored on the server. If so, the server grants access to the server's file copy. If not, the server requests the user to upload the file and stores it. The server grants access to the copy by sending the user a pointer to the copy's storage location and associating the user with the pointer in a database. The server can challenge the user's right to access the copy by requesting a file password or a portion of the file stored on the user's computer. The server can limit access to the server's copy to users who successfully respond to the challenge.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08620879&OS=08620879&RS=08620879
owner: Google Inc.
number: 08620879
owner_city: Mountain View
owner_country: US
publication_date: 20100818
---
This application claims the benefit of U.S. Provisional Application No. 61 251 286 filed Oct. 13 2009 and titled Power Management and Data Caching in a Computer Platform which is incorporated herein by reference in its entirety.

With the creation of the world wide web and high speed computer networks the paradigm for personal computer usage has dramatically shifted. In the past users would primarily use their personal computers to run programs and store and manipulate data that was located on their local hard drive. Only rarely would users store or manipulate data located on a networked drive or run a program that was provided as a network service and even then the programs and data were usually restricted to a local area network. Today more and more users are storing more and more data on remote data servers and using remotely provided web based applications e.g. SaaS or Software as a Service programs to manipulate and organize that data. For example many users today store their personal email and contact information and even pictures videos and music archives on remote servers and access that data using third party applications that are provided through and controlled by a web browser.

Cloud computing is a style of computing in which computing resources such as application programs and file storage are remotely provided over the Internet typically through a web browser. Many web browsers are capable of running applications e.g. Java applets which can themselves be application programming interfaces API s to more sophisticated applications running on remote servers. In the cloud computing paradigm a web browser interfaces with and controls an application program that is running on a remote server. Through the browser the user can create edit save and delete files on the remote server via the remote application program.

Due to this shift in computer usage today s computer users are unlikely to want or need many of the bells and whistles provided by modern operating systems. They do not need to worry about file structures or organizing or backing up their data because much of their data is stored organized and backed up for them on the cloud. They do however require a safe and reliable method to upload data and files to a network or cloud based server. Moreover the provider of that upload service needs an efficient and reliable way to receive store and grant access to uploaded files.

This document describes systems and techniques that may be used to upload and store documents and files from a cloud optimized client computer to a cloud based document storage server or service. The cloud optimized computing device may be a desktop notebook or netbook computer or a mobile device such as a personal digital assistant or smart phone.

In general in one aspect a computer implemented method for storing files on a cloud based server is disclosed. The cloud based server receives a request from a user to store a file on the server. The cloud based server also receives from the user a hash value for the file. The server then determines whether a file with a hash value that is identical to the received hash value is already stored on the server. If a file with a hash value that is identical to the received has value is already stored on the server the server grants the user access to the server s copy of the file. If a file with a hash value that is identical to the received hash value is not already stored on the server the server requests the user to send a copy of the file to the server. The server receives the copy of the file stores the copy on the server and grants the user the right to access the server s copy of the file.

Features and advantages of the invention include one or more of the following. The server can grant the user the right to access the copy of the file that is stored on the server by sending the user a pointer to the file s storage location on the server. The server can associate the username of the user with the pointer to the file s storage location on the server in a data repository such as a database. When the server already stores a file with a hash value that is identical to the received hash value the server can challenge the user s right to access the copy of the file that is stored on the server. The challenge can be a request for the user to send to the server a password for the copy of the file that is stored on the server. The challenge can also be a request for the user s computer to send to the server a portion of the copy of the file that is stored on the user s computer. The server receives the user s response to the challenge and determines based on the response whether the user has the right to access the copy of the file that is stored on the server. If the server determines the user successfully responded to the challenge the server grants the user the right to access the server s copy of the file.

In general in another aspect a computer implemented method for requesting the storage of files on a cloud based server is disclosed. The method involves a client computer determining a hash value for a file to be stored on a server. The client computer then sends a request to the server to store the file. The client computer also sends the hash value for the file. The client computer than receives from the server a response granting the user the right to access the server s copy of the file.

Features and advantages of the invention include one or more of the following. If the server does not currently store a copy of the file the client computer receives a request from the server to upload the file and sends a copy of the file to the server. If the server currently does store a copy of the file the client computer receives from the server a challenge to the right to access the file and prepares and sends a response to the challenge to the server. The challenge can be a request to send a password to access the server s copy of the file and the client computer can send a password for the file to the server in response to the server s challenge to access the server s copy of the file. The challenge can be a request to send a portion of the client computer s copy of the file and the client computer can send the requested portion of the file to the server in response to the server s challenge to access the server s copy of the file. The client computer can receive from the server a pointer to storage location of the server s copy of the file in order to access the server s copy of the file.

The details of one or more embodiments are set forth in the accompanying drawings and the description below. Other features and advantages will be apparent from the description and drawings and from the claims.

As user s transition from a conventional computing paradigm where the user s data and application programs are stored and executed on local computing resources to a cloud computing paradigm where the user s data and application programs are stored and executed on a remote server accessed over a network cloud large amounts of user data will be stored on remotely networked or cloud based servers. However much of the data that will be stored by different users will be identical. For example many users may wish to store their MP3 music files on the cloud based server and many users will undoubtedly store the same MP3 files corresponding to the same songs or albums. Though the cost of data storage has dramatically decreased in price over time it is still inefficient for the provider of a cloud based file storage service to store identical data in multiple independent copies particularly when the number of independent copies gets large as would be the case for the storage of popular music or movie files. Consequently cloud based service providers will find it convenient to store a single copy of uniquely identifiable data or files and allow multiple users to share that single copy provided they are authorized to access the data or files.

Server can search database for a file having a hash value that is identical to the hash value sent from computer . If no such file is found server can request computer to upload a copy of the file can store the file and can create a record for the file such as database record in database . If however server finds that it is storing a file having a hash value that is identical to the hash value received from computer the server can use the file s access control list to determine if the user is permitted to access the file and if so what permissions the user has to read edit and delete the file. In addition to identify particular users who are permitted to access file the access control list can also grant general file access to any user who wishes to access the file. The access control list can also specify particular access rights that are granted to users who are permitted to access file . For example access control list can specify that only the user that uploaded file can read edit and delete the file and that any other user has read only permission to access file . If a user is not permitted to access the server s copy of the file server can deny the user the right to access the file . If however the user is permitted to access the server s copy of the file server can use the access control list to determine any particular access right restrictions of the file such as password protection. If the file has access right restrictions the server can send computer a challenge to access file . For example server can request computer to send a password for file or a small snippet of data from the computer s own copy of the file to prove that the user of computer already has access to the file. Upon receiving computer s response to the access challenge server can verify whether the user of computer has the right to access file and either grant or deny access. If the user of computer has the right to access file server can send the pointer or storage location of file to the user of computer .

If however the server determines it is already storing a copy of the file the server may determine if the user is permitted to access that copy of the file based on the file s access control list and may challenge the user s right to access that copy of the file . For example if the user is requesting to upload an MP3 file the server may challenge the user to determine whether the user already has access to the file on the user s own computer or otherwise has the right to access the file . The challenge may consist of requesting the user to send a password or authorization code for the file or requesting the user s computer to send a snippet or small amount of data from the copy of the file that is stored on the user s computer . For example the server can request the user s computer to send a sequence of bits from a copy of the file that is stored on the user s computer . The sequence of bits can be the same sequence e.g. the first 1000 bytes of the file or a random sequence e.g. the first 1000 bytes after the Nth byte of the file where N is a randomly generated number . If the server requests a random sequence from the file the client computer would have to send the server the size of the file so that the server could request a random sequence that began at a number N that was less than or equal to the size of the file less the size of the requested sample.

If the server sends an access challenge the client computer receives the challenge and prepares and sends a response . The response can consist of a password for the file or of a small amount of data taken from the copy of the file that is stored on the user s computer at the requested location in the file . When the server receives the response to the challenge it determines whether the user is authorized to access the server s copy of the file as explained more fully below. If the user is authorized to access the server s copy of the file i.e. if the user s response to the access challenge is successful the user receives from the server the right to access the file . Access can be granted for example by receiving a pointer to the location of the server s copy of the file . Once access to the server s copy of the file is granted the user can delete the copy that is stored on the user s computer since the user will thereafter be able to access and download the copy that is stored on the server .

In some implementations the server s challenge of the user s right to access a copy of a file that is already stored on the server may only be selectively applied or may not be applied at all. For example if a user wishes to upload a public domain file that is already stored on the server such as an IRS publication the server may grant the user the right to access the file without challenging the user s authority to view the file . Information indicating a user s rights to access a file can be stored in the file s access control list . If the file is publically accessible the access control list can indicate that any user can access the file in read only mode and server can grant any user the right to access the file without challenging the user s credentials to do so. If however the access control list indicates that only specified users are permitted to access the file the server may limit access to only those users who are listed in the file s access control list . Moreover if the access control list indicates that users must verify their right to access the file the server can issue the user challenge outlined above to ensure that only authorized users gain access to the file . If server does not challenge the user s right to access a file that is already stored on the server the user receives a grant of access to the file .

If the server determines from the upload request however that a copy of the file is already stored on the server the server can determine whether the user has any right to access to the file . Access to a file stored on the server can be restricted for example if the file is a private file or is copyright protected. To determine if the user had the right to access the file the server can consult the file s access control list . The access control list can store information such as the names of users who are permitted to access the file and the access rights granted to such users e.g. read edit delete . The access control list can also store information indicating whether a user is required to verify his or her right to access the file and can store the verification information such as a password a small snippet of data taken from the file or the checksum for a small snippet of data taken from the file. If access to the file is not restricted the server can grant the user the right to access the file without challenging the user s credentials to view it . If however access to the file is restricted the server can issue the user a challenge to determine if the user is permitted to access the file . The challenge may consist of requesting the user to send a password for the file a small amount of data from the copy of the file that is stored on the user s computer or the checksum for that small amount of data.

When the server receives the user s response to the challenge it determines whether the user is authorized to access the file. For example if the server requested a password for the file the server determines whether the password received from the user is identical to the password that is associated with the server s copy of the file . Alternatively if the server requested a snippet of data from the file the server determines whether the snippet of data received from the user s computer is identical to the same snippet from the server s copy of the file . Likewise if the server requested the checksum for such a snippet of data the server determines whether the checksum received from the user s computer is identical to the checksum for the same snippet of data taken from the server s copy of the file . If the server receives a successful response to the access challenge it grants the user access to the file . If however the server receives an unsuccessful response to the challenge it denies the user the right to access the file .

One important aspect of the disclosed file upload and storage process is that the user requests the server to upload and store the file prior to actually sending the file. The networked or cloud based server then determines whether it already stores a copy of the file and only requests the upload of the file if it does not already store a copy of the file. This preserves not only networking resources by avoiding the transmission of files that are not needed because they are already stored on the server but also the computing resources of both the user s client computer and the network based server . This method of file upload and storage is particularly useful when the file to be uploaded is a large file such as a movie and is especially useful in the typical situation where the client computer interacts asymmetrically with the network or cloud based server . For example many users connect to the Internet using digital subscriber line DSL or Data Over Cable Service Interface Specification DOCSIS modems. These modems asymmetrically allocate bandwidth and provide much more bandwidth for the download of information from a network based server to a user s computer than for the upload of information from the user s computer to the network based server . Thus it is faster and more efficient for the user s computer to initially send a low bandwidth message such as an upload request and a document checksum or hash value to the network based server and to send the actual file only when the network based server is not already storing a local copy of the file.

The server can treat a request to save an edited version of a file as a request to store a new file and can process the request as explained above in reference to . In particular the server can request the computer to send the edited version of the file and can store the edited version as a new file on the server . In doing so the server can create a new database record for the edited version of the file in the database . As shown in the database record can include the name of the edited version of the file its hash value a pointer to its storage location on server and an access control list. The access control list for the edited version of the file can be copied from the access control list for the unedited version of the file . In this way users who had permission to access the unedited version of the file are granted the same permissions to access the edited version of the file. Alternatively an entirely new access control list can be created for the unedited version of the file. For example access rights to the edited version of the file can be created by the user who requested server to store the edited version of the file.

In addition to creating a database record for the edited version of the file server can edit and update the database record for the unedited version of the file . In particular the server can include in the database record a pointer to the storage location of the edited version of the file. A user s ability to read the pointer to the location of the edited version of the file can be controlled by a flag in the access control list for the unedited version of the file . In this way the ability of a given user to be pointed to and see edited versions of a file that is stored on server can be limited and controlled. Only those user s who are granted such permission in the access control list of the unedited version of the file can read the pointer for the storage location of the edited version of the file.

Of course in addition to storing a pointer to the most recently edited version of a stored file the server can include in the database record pointers to all of the edited versions of a file. In this way when a user requests to see any one of the edited versions of the file he or she can be presented with an option to view any other version of the file.

The methods described herein may be implemented in digital electronic circuitry or in computer hardware firmware software or in combinations of them. The methods may implemented as a computer program product i.e. as a computer program tangibly embodied in a machine readable storage device for execution by or to control the operation of a data processing apparatus such as a programmable processor a computer or multiple computers. A computer program can be written in any form of programming language including a compiled or interpreted language and can be deployed in any form including as a stand alone program or as a module component subroutine plug in or other unit suitable for use in a computing environment. A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communications network.

Processors suitable for the execution of a computer program include by way of example both general and special purpose microprocessors and any one or more processors of any kind of digital computer including digital signal processors. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. Elements of a computer may include at least one processor for executing instructions and one or more memory devices for storing instructions and data. Generally a computer may also include or be operatively coupled to receive data from and or transfer data to one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks.

Machine readable media suitable for embodying computer program instructions and data include all forms of non volatile memory including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory may be supplemented by or incorporated in special purpose logic circuitry such as a FPGA field programmable gate array or as an ASIC application specific integrated circuit .

To provide for user interaction the computer may include a display device e.g. a cathode ray tube CRT or liquid crystal display LCD monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse trackball or touch pad by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input.

The disclosed apparatus and methods may be implemented on a computing system that includes a back end component e.g. a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with any combination of such back end middleware or front end components. Components may be interconnected by any form or medium of digital data communication e.g. a communication network including a local area network LAN and a wide area network WAN such as the Internet.

A number of embodiments of the invention have been described above. Nevertheless it will be understood that various modifications may be made without departing from the spirit and scope of the invention. For example the logic flows depicted in the figures do not necessarily require the particular order shown or sequential order to achieve desirable results. In addition other steps may be provided or eliminated from the described flows and other components may be added to or removed from the described systems without departing from the scope of the invention. Accordingly other embodiments are within the scope of the following claims.

