---

title: Techniques for image duplication optimization
abstract: Techniques for image copying optimization are disclosed. In one particular exemplary embodiment, the techniques may be realized as a method for image copying optimization comprising receiving a request to copy a plurality of images, copying one or more of the plurality of images, deferring synchronization for each of the one or more of the plurality of images, receiving an indication to stop deferring synchronization, and synchronizing the one or more copied images of the plurality of images.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08941863&OS=08941863&RS=08941863
owner: Symantec Corporation
number: 08941863
owner_city: Mountain View
owner_country: US
publication_date: 20101129
---
The present disclosure relates generally to transferring image data and more particularly to techniques for image duplication optimization.

Transfer of data for backup archival or other purposes may require verification and or synchronization of units of data such as images. The verification and or synchronization may ensure that an error in the transfer of data to storage media has not occurred and that data has been successfully transferred to storage media e.g. written to tape . The verification and or synchronization may be a more significant factor in overall backup or archive times as other factors e.g. transfer time and write time improve.

In view of the foregoing it may be understood that there may be significant problems and shortcomings associated with current data transfer technologies.

Techniques for image copying optimization are disclosed. In one particular exemplary embodiment the techniques may be realized as a method for image copying optimization comprising receiving a request to copy a plurality of images copying one or more of the plurality of images deferring synchronization for each of the one or more of the plurality of images receiving an indication to stop deferring synchronization and synchronizing the one or more copied images of the plurality of images.

In accordance with other aspects of this particular exemplary embodiment the techniques may include determining whether synchronization has succeeded and failing all of the one or more copied images of the plurality of images in the event that synchronization has not succeeded.

In accordance with further aspects of this particular exemplary embodiment the techniques may include retrying copying of the one or more copied images of the plurality of images for which synchronization failed.

In accordance with additional aspects of this particular exemplary embodiment deferring synchronization may comprise writing an asynchronous filemark after each of the one or more copied images of the plurality of images.

In accordance with additional aspects of this particular exemplary embodiment the asynchronous filemark may be performed by setting an immediate bit of a SCSI Write Filemarks command.

In accordance with additional aspects of this particular exemplary embodiment synchronizing the one or more copied images of the plurality of images may comprise copying an image of the plurality of images and writing a synchronous filemark.

In accordance with additional aspects of this particular exemplary embodiment receiving an indication to stop deferring synchronization may comprise receiving an indication that a batch size has been exceeded.

In accordance with additional aspects of this particular exemplary embodiment receiving an indication to stop deferring synchronization may comprise receiving an indication that a specified number of images has been copied.

In accordance with additional aspects of this particular exemplary embodiment receiving an indication to stop deferring synchronization may comprise receiving an indication that a specified period of time has elapsed.

In accordance with additional aspects of this particular exemplary embodiment the techniques may include determining whether synchronization is deferrable for the plurality of images prior to copying one or more of the plurality of images.

In accordance with additional aspects of this particular exemplary embodiment the techniques may be realized as at least one non transitory processor readable storage medium for storing a computer program of instructions configured to be readable by at least one processor for instructing the at least one processor to execute a computer process for performing the method.

In another particular exemplary embodiment the techniques may be realized as an article of manufacture for image copying optimization the article of manufacture comprising at least one non transitory processor readable medium and instructions stored on the at least one medium. The instructions may be configured to be readable from the at least one medium by at least one processor and thereby cause the at least one processor to operate so as to receive a request to copy a plurality of images copy one or more of the plurality of images defer synchronization for each of the one or more of the plurality of images receive an indication to stop deferring synchronization and synchronize the one or more copied images of the plurality of images.

In yet another particular exemplary embodiment the techniques may be realized as a system for image copying optimization comprising one or more processors communicatively coupled to a network wherein the one or more processors are configured to receive a request to copy a plurality of images copy one or more of the plurality of images defer synchronization for each of the one or more of the plurality of images receive an indication to stop deferring synchronization and synchronize the one or more copied images of the plurality of images.

In accordance with additional aspects of this particular exemplary embodiment the processors may be further configured to determine whether synchronization has succeeded and fail all of the one or more copied images of the plurality of images in the event that synchronization has not succeeded.

In accordance with additional aspects of this particular exemplary embodiment the processors may further be configured to retry copying of the one or more copied images of the plurality of images for which synchronization failed.

In accordance with additional aspects of this particular exemplary embodiment deferring synchronization may comprise writing an asynchronous filemark after each of the one or more copied images of the plurality of images.

In accordance with additional aspects of this particular exemplary embodiment synchronizing the one or more copied images of the plurality of images may comprise copying an image of the plurality of images and writing a synchronous filemark.

In accordance with additional aspects of this particular exemplary embodiment receiving an indication to stop deferring synchronization may comprise receiving an indication that a batch size has been exceeded.

In accordance with additional aspects of this particular exemplary embodiment receiving an indication to stop deferring synchronization may comprise receiving an indication that a specified number of images has been copied.

In accordance with additional aspects of this particular exemplary embodiment receiving an indication to stop deferring synchronization may comprise receiving an indication that a specified period of time has elapsed.

The present disclosure will now be described in more detail with reference to exemplary embodiments thereof as shown in the accompanying drawings. While the present disclosure is described below with reference to exemplary embodiments it should be understood that the present disclosure is not limited thereto. Those of ordinary skill in the art having access to the teachings herein will recognize additional implementations modifications and embodiments as well as other fields of use which are within the scope of the present disclosure as described herein and with respect to which the present disclosure may be of significant utility.

The description below describes network elements computers and or components of a system and method for image duplication optimization that may include one or more modules. As used herein the term module may be understood to refer to computing software firmware hardware and or various combinations thereof. Modules however are not to be interpreted as software which is not implemented on hardware firmware or recorded on a processor readable recordable storage medium i.e. modules are not software per se . It is noted that the modules are exemplary. The modules may be combined integrated separated and or duplicated to support various applications. Also a function described herein as being performed at a particular module may be performed at one or more other modules and or by one or more other devices instead of or in addition to the function performed at the particular module. Further the modules may be implemented across multiple devices and or other components local or remote to one another. Additionally the modules may be moved from one device and added to another device and or may be included in both devices.

With reference to computer system of modem network interface or some other method may be used to provide connectivity from one or more of client system to network . Client system may be able to access information on server A or B using for example a web browser or other client software. Such a client may allow client system to access data hosted by server A or B or one of storage devices A N B N and or N .

Networks and may be local area networks LANs wide area networks WANs the Internet cellular networks satellite networks or other networks that permit communication between client servers and other devices communicatively coupled to networks and . Networks and may further include one or any number of the exemplary types of networks mentioned above operating as a stand alone network or in cooperation with each other. Networks and may utilize one or more protocols of one or more clients or servers to which they are communicatively coupled. Networks and may translate to or from other protocols to one or more protocols of network devices. Although networks and are each depicted as one network it should be appreciated that according to one or more embodiments networks and may each comprise a plurality of interconnected networks.

Storage devices A N B N and or N may be network accessible storage and may be local remote or a combination thereof to server A or B. Storage devices A N B N and or N may utilize a redundant array of inexpensive disks RAID magnetic tape disk a storage area network SAN an internet small computer systems interface iSCSI SAN a Fibre Channel SAN a common Internet File System CIFS network attached storage NAS a network file system NFS optical based storage or other computer accessible storage. Storage devices A N B N and or N may be used for backup or archival purposes.

According to some embodiments client may be a smartphone PDA desktop computer a laptop computer a server another computer or another device coupled via a wireless or wired connection to network . Client may receive data from user input a database a file a web service and or an application programming interface.

Servers A and B may be application servers archival platforms backup servers network storage devices media servers email servers document management platforms enterprise search servers or other devices communicatively coupled to network . Servers A and B may utilize one of storage devices A N B N and or N for the storage of application data backup data or other data. Servers A and B may be hosts such as an application server which may process data traveling between client and a backup platform a backup process and or storage. According to some embodiments servers A and B may be platforms used for backing up and or archiving data.

Image duplication optimization module may optimize one or more data duplications requests. Image duplication optimization module may receive a request to duplicate a plurality of units of data e.g. images . Image duplication optimization module may determine whether synchronization for one or more of the images may be deferred. Synchronization may take a significantly longer period of time than transitioning from a first image to a second image without Synchronization e.g. 2 milliseconds for an asynchronous write filemark which may not cause synchronization of an image versus 2 seconds for a synchronous filemark which may cause synchronization of an image . Deferring of synchronization of one or more of the images may allow multiple images to be written and may permit synchronization to occur after all of the images have been flushed to media e.g. written to tape . According to some embodiments however if synchronization of one of a plurality of images for which synchronization has been deferred fails all of the plurality of images may need to be duplicated again.

Image duplication optimization module may determine whether to defer synchronization for one or more images based on several factors. For example image duplication optimization module may determine whether or not to defer synchronization based on the size of an image. The amount of time to write data may be compared against the amount of time to synchronize or validate the data. For example if an image size is 1 GB and synchronizing the image takes two seconds and a storage device is capable of writing 1 GB with compression in two seconds the cost of re duplicating the image in case of error may be at least equal to that of synchronizing the image. The cost of synchronizing the image may be even greater if synchronization between writing of multiple images causes a storage device to switch modes e.g. from writing to verification and starting a second image after synchronizing a first requires additional work e.g. reposition writing mechanisms at a proper place on storage media locating a proper place on storage media for the beginning of a second image etc. . However if an image size is large enough such that synchronization may be a smaller percentage of time that it would take to write such an image image duplication optimization module may decide to synchronize the image immediately after writing it. Other factors may include but are not limited to an importance of an image a time window permitted for duplication a number of images for which synchronization was previously deferred and a historical error rate of one of more duplication components. Image duplication optimization module may use one or more configurable settings to determine whether or not to defer synchronization of an image. For example image duplication optimization module may contain or access a maximum image size setting which may indicate the maximum size of an image that is deferrable. Image duplication optimization module may contain or access other settings such as for example a maximum number of images to defer a maximum amount of time to go without synchronization a time window to complete duplication or error data associated with one or duplication components. According to some embodiments image duplication optimization module may receive an indication of a priority of one or more images and may use priority to determine whether or not synchronization is performed for a particular image. For example higher priority images may be synchronized before lower priority images. Image duplication optimization module may contain or receive information about one or more components of a duplication process and settings may be based on or adjusted according to this information e.g. a speed of a tape drive .

According to some embodiments image duplication optimization module may only defer synchronization for images already present on a media server backup server or other storage and not for data being streamed or backed up from a client. Thus failure of duplication of an image may be less significant than failure of a backup of data from a client. The point in time data may already be saved in a first copy of an image.

According to at least one embodiment image duplication optimization module may defer synchronization using an asynchronous filemark. For example image duplication optimization module may set an immediate bit of a SCSI Write Filemarks command. Image duplication optimization module may continue transferring images and deferring synchronization of the images. Image duplication optimization module may determine or receive an indicator to stop deferring images. For example a setting may be reached e.g. a maximum batch size value of 8 may be set and a seventh image has been transferred an image exceeding a maximum deferrable size may be received or a maximum period of time may have elapsed .

After deferring synchronization for one or more images image duplication optimization module may synchronize the images. According to some embodiments image duplication optimization module may synchronize the one or more copied images of the plurality of images by copying an image of the plurality of images using a synchronous filemark e.g. using a SCSI Write Filemark command without the immediate bit set . Transferring an image followed by a synchronous filemark may cause that image to be synchronized and as a result any preceding images which have not been synchronized may be synchronized. Image duplication optimization module may determine whether synchronization i.e. validation has succeeded. According to some embodiments if synchronization has not succeeded image duplication optimization module may fail all of the one or more copied images of the plurality of images. For example if a writing process or daemon e.g. bptm of Netbackup detects an error the writing process may raise share or propagate the error to a duplication process handling duplication for a plurality of images e.g. bpduplicate of Netbackup . Duplication jobs for the failed images to be retried e.g. automatically by duplication drivers . According to some embodiments image duplication optimization module may track one or more failed jobs and may use these as a factor when determining whether to defer synchronization e.g. a images of a job being retried may be synchronized after each image .

According to some embodiments image duplication optimization module may perform other optimization steps to increase image duplication optimization. For example during some image transfers e.g. an Multiplexed MPX write to tape media an Empty Header EH may be written when a final active image is completed. A check for another image or the TERMINATE message may have been done after the EH write. If a new image was received the EH may have had to been removed from the media.

Image duplication optimization module may check for a next message prior to writing the EH so that an EH doesn t have to be removed if another image is about to start. This may be significant e.g. some physical tape devices take 20 seconds to write and then remove an EH. 

Image duplication optimization module may prevent the creation of unnecessary empty fragments. For example traditionally during MPX write a five to ten second delay existed to allow the next image to start before a new fragment was created. Image duplication optimization module may now check for the presence of either a new image to start or available data to write before starting a new fragment. Thus once data is available a write operation can start. By verifying that data is available no empty fragments may be created that may have had to been removed. According to some embodiments while data is available image duplication optimization module may ignore any next image for the first four seconds after creating a new fragment balance minimum fragment size with time to write a FM 

According to some embodiments other optimizations may include increasing a polling rate for next image. For example the polling rate may be increased from once per second to ten times per second. While this may increase CPU usage it may recognize the fact that the impact of CPU usage has changed with the general increase in performance and the number of available CPU s in a server over time. This may achieve significant improvements. For example this may change an average response time from 0.5 seconds to 0.05 seconds.

According to some embodiments image duplication optimization module may use asynchronous Write Filemark commands whenever backup management software does not need to know immediately that data made it to media. For example fragments that are terminated due to data complete but metadata e.g. TIR to follow max f rag size next image start and single image failure MPX may use an asynchronous Write Filemark. Backup management software e.g. NBU may not need to know that this part of the data made it because more data may be written before the backup is complete. However data for which backup management software must be aware of completion e.g. fragments that are terminated due to an image completing or a checkpoint may use a synchronous Write Filemark.

Additionally other image duplication scenarios may use asynchronous filemarks e.g. creating multiple copies simultaneously with multiple tape drives may use the asynchronous filemark form followed by the synchronous filemark form so that data flush may be done in parallel across multiple tape drives .

According to some embodiments image duplication optimization module may provide other functionality. For example image duplication optimization module may provide a Tape Drive Append Only mode. Image duplication optimization module may use a SCSI Stream Commands SSC 4 data protection feature for tape drives called Append Only Mode . This may causes a tape drive to prevent the overwrite of data on a cartridge unless the writing application performs a pre authorization for the overwrite. Pre authorization for overwrite may be a done with a new SCSI command Allow Overwrite that may inform the drive that the data block at the current location is going to be overwritten. An attempt to overwrite a data block without pre authorization may return a write protect error.

Bus allows data communication between central processor and system memory which may include read only memory ROM or flash memory neither shown and random access memory RAM not shown as previously noted. The RAM may be the main memory into which the operating system and application programs may be loaded. The ROM or flash memory can contain among other code the Basic Input Output system BIOS which controls basic hardware operation such as the interaction with peripheral components. Applications resident with computer system may be stored on and accessed via a computer readable medium such as a hard disk drive e.g. fixed disk an optical drive e.g. optical drive a floppy disk unit or other storage medium. For example image duplication optimization module may be resident in system memory .

Storage interface as with the other storage interfaces of computer system can connect to a standard computer readable medium for storage and or retrieval of information such as a fixed disk drive . Fixed disk drive may be a part of computer system or may be separate and accessed through other interface systems. Modem may provide a direct connection to a remote server via a telephone link or to the Internet via an Internet service provider ISP . Network interface may provide a direct connection to a remote server via a direct network link to the Internet via a POP point of presence . Network interface may provide such connection using wireless techniques including digital cellular telephone connection Cellular Digital Packet Data CDPD connection digital satellite data connection or the like.

Many other devices or subsystems not shown may be connected in a similar manner e.g. document scanners digital cameras and so on . Conversely all of the devices shown in need not be present to practice the present disclosure. The devices and subsystems can be interconnected in different ways from that shown in . Code to implement the present disclosure may be stored in computer readable storage media such as one or more of system memory fixed disk optical disk or floppy disk . Code to implement the present disclosure may also be received via one or more interfaces and stored in memory. The operating system provided on computer system may be MS DOS MS WINDOWS OS 2 OS X UNIX Linux or another known operating system.

Power manager may monitor a power level of battery . Power manager may provide one or more APIs Application Programming Interfaces to allow determination of a power level of a time window remaining prior to shutdown of computer system a power consumption rate an indicator of whether computer system is on mains e.g. AC Power or battery power and other power related information. According to some embodiments APIs of power manager may be accessible remotely e.g. accessible to a remote backup management module via a network connection . According to some embodiments battery may be an Uninterruptable Power Supply UPS located either local to or remote from computer system . In such embodiments power manager may provide information about a power level of an UPS.

Referring to there is shown a transfer optimization management in accordance with an embodiment of the present disclosure. As illustrated the transfer optimization management may contain one or more components including synchronization deferral module image duplication module image synchronization module and error handling module .

Synchronization deferral module may determine whether or not to defer synchronization for one or more images. Synchronization deferral module may evaluate one or more factors including but not limited to a size of an image an importance of an image a time window permitted for duplication a number of images for which synchronization was previously deferred and a historical error rate of one of more duplication components. Synchronization deferral module may use one or more configurable settings to determine whether or not to defer synchronization of an image. For example synchronization deferral module may contain or access a maximum image size setting which may indicate the maximum size of an image that is deferrable. Synchronization deferral module may contain or access other settings such as for example a maximum number of images to defer a maximum amount of time to go without synchronization a time window to complete duplication or error data associated with one or duplication components. According to some embodiments synchronization deferral module may receive an indication of a priority of one or more images and may use priority to determine whether or not synchronization is performed for a particular image. For example higher priority images may be synchronized before lower priority images. Synchronization deferral module may contain or receive information about one or more components of a duplication process and settings may be based on or adjusted according to this information e.g. a speed of a tape drive .

Image duplication module may duplicate one or more images. Image duplication module may receive an indicator from synchronization deferral module indicating whether or not synchronization should be performed for each of the one or more images. If synchronization is not to be performed image duplication module may perform duplicate an image and then may defer synchronization using an asynchronous filemark. For example image duplication module may set an immediate bit of a SCSI Write Filemarks command.

Image synchronization module may synchronize i.e. validate one or more images. According to some embodiments Image synchronization module may synchronize the one or more copied images of a plurality of images by copying an image of the plurality of images using a synchronous filemark e.g. using a SCSI Write Filemark command without the immediate bit set . Transferring an image followed by a synchronous filemark may cause that image to be synchronized and as a result any preceding images which have not been synchronized may be synchronized.

Error handling module may determine whether synchronization i.e. validation has succeeded. According to some embodiments if synchronization has not succeeded Error handling module may fail all of the one or more copied images of the plurality of images. For example if a writing process or daemon e.g. bptm of Netbackup detects an error the writing process may raise share or propagate the error to a duplication process handling duplication for a plurality of images e.g. bpduplicate of Netbackup . Duplication jobs for the failed images to be retried e.g. automatically by duplication drivers .

Referring to there is depicted a method for image duplication optimization in accordance with an embodiment of the present disclosure. At block the method may begin.

At block it may be determined whether synchronization of an image should be deferred. If synchronization of an image is to be deferred the method may continue at block . If synchronization of an image is not to be deferred the method may continue at block .

At block an image copy may be performed followed by a synchronous filemark. This may cause synchronization e.g. validation of the image.

At block an image copy with deferred synchronization may be performed e.g. an image copy followed by an asynchronous filemark .

At block it may be determined whether another image is to be duplicated. If another image is to be duplicated the method may continue at block . If no further images are to be duplicated the method may continue at block .

At block it may be determined whether one or more synchronization criteria are met. For example a setting may be reached e.g. a maximum batch size value of 8 may be set and a seventh image has been transferred an image exceeding a maximum deferrable size may be received or a maximum period of time may have elapsed . If one or more synchronization criteria are met the method may continue at block . If synchronization criteria are not met the method may return to block .

At block after deferring synchronization for one or more images the images may be synchronized. According to some embodiments synchronization may be performed by copying an image of the plurality of images using a synchronous filemark e.g. using a SCSI Write Filemark command without the immediate bit set . Transferring an image followed by a synchronous filemark may cause that image to be synchronized and as a result any preceding images which have not been synchronized may be synchronized.

At block it may be determined whether synchronization e.g. validation has succeeded. If synchronization has not succeeded the method may continue at block . If synchronization has succeeded the method may continue at block .

At block if synchronization has not succeeded images copied without synchronization may fail. For example if a writing process or daemon e.g. bptm of Netbackup detects an error the writing process may raise share or propagate the error to a duplication process handling duplication for a plurality of images e.g. bpduplicate of Netbackup . Duplication jobs for the failed images to be retried e.g. automatically by duplication drivers .

At this point it should be noted that image duplication optimization in accordance with the present disclosure as described above typically involves the processing of input data and the generation of output data to some extent. This input data processing and output data generation may be implemented in hardware or software. For example specific electronic components may be employed in an image duplication optimization module or similar or related circuitry for implementing the functions associated with image duplication optimization in accordance with the present disclosure as described above. Alternatively one or more processors operating in accordance with instructions may implement the functions associated with image duplication optimization in accordance with the present disclosure as described above. If such is the case it is within the scope of the present disclosure that such instructions may be stored on one or more processor readable storage media e.g. a magnetic disk or other storage medium or transmitted to one or more processors via one or more signals embodied in one or more carrier waves.

The present disclosure is not to be limited in scope by the specific embodiments described herein. Indeed other various embodiments of and modifications to the present disclosure in addition to those described herein will be apparent to those of ordinary skill in the art from the foregoing description and accompanying drawings. Thus such other embodiments and modifications are intended to fall within the scope of the present disclosure. Further although the present disclosure has been described herein in the context of a particular implementation in a particular environment for a particular purpose those of ordinary skill in the art will recognize that its usefulness is not limited thereto and that the present disclosure may be beneficially implemented in any number of environments for any number of purposes. Accordingly the claims set forth below should be construed in view of the full breadth and spirit of the present disclosure as described herein.

