---

title: Issuing a publisher use license off-line in a digital rights management (DRM) system
abstract: A publishing user publishes digital content and issues to itself a corresponding digital publisher license to allow itself to render the published digital content. The publishing user is supplied with a publishing certificate from a digital rights management (DRM) server, where the publishing certificate allows the publishing user to so publish the digital content and to so issue the publisher license.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08719171&OS=08719171&RS=08719171
owner: Microsoft Corporation
number: 08719171
owner_city: Redmond
owner_country: US
publication_date: 20100708
---
This application is a continuation application and claims priority to U.S. patent application Ser. No. 12 053 090 filed Mar. 21 2008 entitled Issuing a Publisher Use License Off Line in a Digital Rights Management DRM System which application is a continuation application and claims priority to U.S. patent application Ser. No. 10 373 621 now U.S. Pat. No. 7 370 212 filed Feb. 25 2003 entitled Issuing a Publisher Use License Off Line in a Digital Rights Management DRM System which applications are incorporated herein by reference in their entirety.

The following U.S. patent applications disclose subject matter that is related to the subject matter of the present application and are hereby incorporated herein by reference in their entirety 

U.S. patent application Ser. No. 10 185 527 now U.S. Pat. No. 7 353 402 filed Jun. 28 2002 under and entitled Obtaining a Signed Rights Label SRL for Digital Content and Obtaining a Digital License Corresponding to the Content Based on the SRL in a Digital Rights Management System 

U.S. patent application Ser. No. 10 185 278 now U.S. Pat. No. 7 549 060 filed Jun. 28 2002 under and entitled Using a Rights Template to Obtain a Signed Rights Label SRL for Digital Content in a Digital Rights Management System 

U.S. patent application Ser. No. 10 185 511 now U.S. Pat. No. 7 891 007 filed Jun. 28 2002 under and entitled Systems And Methods For Issuing Usage Licenses For Digital Content And Services 

U.S. patent application Ser. No. 10 364 627 now U.S. Pat. No. 7 577 999 filed Feb. 11 2003 under and entitled Publishing Digital Content Within an Organization in Accordance with a Digital Rights Management DRM System 

U.S. patent application Ser. No. 10 364 115 now Abandoned filed Feb. 11 2003 under and entitled Publishing Digital Content Within an Organization in Accordance with a Digital Rights Management DRM System and

U.S. Pat. No. 7 308 573 issued Dec. 11 2007 and entitled Enrolling Sub Enrolling a Digital Rights Management DRM Server Into a DRM Architecture .

This invention relates to a digital rights management DRM system. More particularly the invention relates to employing a DRM system to publish digital content in an organization such as an office or corporation or the like such that rendering and use of the content within the organization may be constrained according to corresponding use or license terms. Even more particularly the present invention relates to publishing content without contacting a server for approval and issuing oneself a publisher use license to render the published content without contacting the server for approval.

Digital rights management and enforcement is highly desirable in connection with digital content such as digital audio digital video digital text digital data digital multimedia etc. where such digital content is to be distributed to one or more users. Digital content could be static such as a text document for example or it could be streamed such as the streamed audio video of a live event. Typical modes of distribution include tangible devices such as a magnetic floppy disk a magnetic tape an optical compact disk CD etc. and intangible media such as an electronic bulletin board an electronic network the Internet etc. Upon being received by the user such user renders or plays the digital content with the aid of an appropriate rendering device such as a media player on a personal computer or the like.

In one scenario a content owner or rights owner such as an author a publisher a broadcaster etc. wishes to distribute such digital content to each of many users or recipients in exchange for a license fee or some other consideration. In such scenario then the content may be a song an album of songs a movie etc. and the purpose of the distribution is to generate the license fees. Such content owner given the choice would likely wish to restrict what the user can do with such distributed digital content. For example the content owner would like to restrict the user from copying and re distributing such content to a second user at least in a manner that denies the content owner a license fee from such second user.

In addition the content owner may wish to provide the user with the flexibility to purchase different types of use licenses at different license fees while at the same time holding the user to the terms of whatever type of license is in fact purchased. For example the content owner may wish to allow distributed digital content to be played only a limited number of times only for a certain total time only on a certain type of machine only on a certain type of media player only by a certain type of user etc.

In another scenario a content developer such as an employee in or member of an organization wishes to distribute such digital content to one or more other employees or members in the organization or to other individuals outside the organization but would like to keep others from rendering the content. Here the distribution of the content is more akin to organization based content sharing in a confidential or restricted manner as opposed to broad based distribution in exchange for a license fee or some other consideration.

In such scenario then the content may be a document presentation spreadsheet database email or the like such as may be exchanged within an office setting and the content developer may wish to ensure that the content stays within the organization or office setting and is not rendered by non authorized individuals such as for example competitors or adversaries. Again such content developer wishes to restrict what a recipient can do with such distributed digital content. For example the content owner would like to restrict the user from copying and re distributing such content to a second user at least in a manner that exposes the content outside the bounds of individuals who should be allowed to render the content.

In addition the content developer may wish to provide various recipients with different levels of rendering rights. For example the content developer may wish to allow protected digital content to be viewable and not printable with respect to one class of individual and viewable and printable with respect to another class of individual.

However and in either scenario after distribution has occurred such content owner developer has very little if any control over the digital content. This is especially problematic in view of the fact that practically every personal computer includes the software and hardware necessary to make an exact digital copy of such digital content and to download such exact digital copy to a writeable magnetic or optical disk or to send such exact digital copy over a network such as the Internet to any destination.

Of course as part of a transaction wherein the content is distributed the content owner developer may require the user recipient of the digital content to promise not to re distribute such digital content in an unwelcome manner. However such a promise is easily made and easily broken. A content owner developer may attempt to prevent such re distribution through any of several known security devices usually involving encryption and decryption. However there is likely very little that prevents a mildly determined user from decrypting encrypted digital content saving such digital content in an un encrypted form and then re distributing same.

A need exists then for providing a digital rights management DRM and enforcement architecture and method that allows the controlled rendering or playing of arbitrary forms of digital content where such control is flexible and definable by the content owner developer of such digital content. More specifically a need exists for such an architecture that allows and facilitates such controlled rendering especially in an office or organization environment or the like where documents are to be shared amongst a defined group of individuals or classes of individuals. Even more specifically a need exists for such an architecture that allows content to be published without first gaining approval from a server and that allows the publishing individual to issue itself a use license to render the published content without contacting the server for approval.

The aforementioned needs are satisfied at least in part by the present invention in which a publishing user publishes digital content and issues to itself a corresponding digital publisher license to allow itself to render the published digital content. The publishing user is supplied with a publishing certificate from a digital rights management DRM server where the publishing certificate has a public key PU OLP and a corresponding private key PR OLP encrypted by a public key associated with the publishing user PU ENTITY to form PU ENTITY PR OLP .

The content is developed and encrypted according to a content key CK and a rights label is created for the encrypted content with CK encrypted by a public key of the DRM server PU DRM to form PU DRM CK . PU ENTITY PR OLP is retrieved from the publishing certificate a private key PR ENTITY corresponding to PU ENTITY is applied to PU ENTITY PR OLP to obtain PR OLP and the created rights label is signed with PR OLP to create a signed rights label SRL . The created SRL and the publishing certificate are then concatenated to the encrypted content to form a content package distributable to another user which has to contact the DRM server to obtain a corresponding license with CK to render the encrypted content therein. Significantly only such DRM server has a private key PR DRM corresponding to PU DRM and is able to apply PR DRM to PU DRM CK to obtain CK .

License data corresponding to the content package is also created and has CK encrypted by a PU ENTITY to form PU ENTITY CK the created license data is signed with PR OLP to create the publisher license and the publishing certificate is attached to the publisher license. Only the publishing user having PR ENTITY corresponding to PR ENTITY can apply such PR ENTITY to PU ENTITY CK from the publisher license to obtain CK and thereby decrypt the encrypted content therewith for rendering.

In particular the publishing user verifies the publishing certificate based on the chain of certificates obtains PU OLP from the publishing certificate and employs the obtained PU OLP to verify the signature of the publisher license. Thereafter the publishing user retrieves PU ENTITY CK from the verified publisher license applies to PU ENTITY CK a private key PR ENTITY corresponding to PU ENTITY to obtain CK and applies CK to CK content to result in the content. The content is then forwarded to a rendering application for actual rendering.

Although not required the invention can be implemented via an application programming interface API for use by a developer and or included within the network browsing software which will be described in the general context of computer executable instructions such as program modules being executed by one or more computers such as client workstations servers or other devices. Generally program modules include routines programs objects components data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover those skilled in the art will appreciate that the invention may be practiced with other computer system configurations. Other well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers PCs automated teller machines server computers hand held or laptop devices multi processor systems microprocessor based systems programmable consumer electronics network PCs minicomputers mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus .

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CDROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB .

A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . A graphics interface such as Northbridge may also be connected to the system bus . Northbridge is a chipset that communicates with the CPU or host processing unit and assumes responsibility for accelerated graphics port AGP communications. One or more graphics processing units GPUs may communicate with graphics interface . In this regard GPUs generally include on chip memory storage such as register storage and GPUs communicate with a video memory . GPUs however are but one example of a coprocessor and thus a variety of co processing devices may be included in computer . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface which may in turn communicate with video memory . In addition to monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

One of ordinary skill in the art can appreciate that a computer or other client device can be deployed as part of a computer network. In this regard the present invention pertains to any computer system having any number of memory or storage units and any number of applications and processes occurring across any number of storage units or volumes. The present invention may apply to an environment with server computers and client computers deployed in a network environment having remote or local storage. The present invention may also apply to a standalone computing device having programming language functionality interpretation and execution capabilities.

Distributed computing facilitates sharing of computer resources and services by direct exchange between computing devices and systems. These resources and services include the exchange of information cache storage and disk storage for files. Distributed computing takes advantage of network connectivity allowing clients to leverage their collective power to benefit the entire enterprise. In this regard a variety of devices may have applications objects or resources that may interact to implicate authentication techniques of the present invention for trusted graphics pipeline s .

It can also be appreciated that an object such as may be hosted on another computing device or . Thus although the physical environment depicted may show the connected devices as computers such illustration is merely exemplary and the physical environment may alternatively be depicted or described comprising various digital devices such as PDAs televisions MP3 players etc. software objects such as interfaces COM objects and the like.

There are a variety of systems components and network configurations that support distributed computing environments. For example computing systems may be connected together by wireline or wireless systems by local networks or widely distributed networks. Currently many of the networks are coupled to the Internet which provides the infrastructure for widely distributed computing and encompasses many different networks.

In home networking environments there are at least four disparate network transport media that may each support a unique protocol such as Power line data both wireless and wired voice e.g. telephone and entertainment media. Most home control devices such as light switches and appliances may use power line for connectivity. Data Services may enter the home as broadband e.g. either DSL or Cable modem and are accessible within the home using either wireless e.g. HomeRF or 802.11b or wired e.g. Home PNA Cat 5 even power line connectivity. Voice traffic may enter the home either as wired e.g. Cat 3 or wireless e.g. cell phones and may be distributed within the home using Cat 3 wiring. Entertainment media may enter the home either through satellite or cable and is typically distributed in the home using coaxial cable. IEEE 1394 and DVI are also emerging as digital interconnects for clusters of media devices. All of these network environments and others that may emerge as protocol standards may be interconnected to form an intranet that may be connected to the outside world by way of the Internet. In short a variety of disparate sources exist for the storage and transmission of data and consequently moving forward computing devices will require ways of protecting content at all portions of the data processing pipeline.

The Internet commonly refers to the collection of networks and gateways that utilize the TCP IP suite of protocols which are well known in the art of computer networking. TCP IP is an acronym for Transport Control Protocol Interface Program. The Internet can be described as a system of geographically distributed remote computer networks interconnected by computers executing networking protocols that allow users to interact and share information over the networks. Because of such wide spread information sharing remote networks such as the Internet have thus far generally evolved into an open system for which developers can design software applications for performing specialized operations or services essentially without restriction.

Thus the network infrastructure enables a host of network topologies such as client server peer to peer or hybrid architectures. The client is a member of a class or group that uses the services of another class or group to which it is not related. Thus in computing a client is a process i.e. roughly a set of instructions or tasks that requests a service provided by another program. The client process utilizes the requested service without having to know any working details about the other program or the service itself. In a client server architecture particularly a networked system a client is usually a computer that accesses shared network resources provided by another computer e.g. a server. In the example of computers etc. can be thought of as clients and computer etc. can be thought of as the server where server etc. maintains the data that is then replicated in the client computers etc.

A server is typically a remote computer system accessible over a remote network such as the Internet. The client process may be active in a first computer system and the server process may be active in a second computer system communicating with one another over a communications medium thus providing distributed functionality and allowing multiple clients to take advantage of the information gathering capabilities of the server.

Client and server communicate with one another utilizing the functionality provided by a protocol layer. For example Hypertext Transfer Protocol HTTP is a common protocol that is used in conjunction with the World Wide Web WWW . Typically a computer network address such as a Universal Resource Locator URL or an Internet Protocol IP address is used to identify the server or client computers to each other. The network address can be referred to as a Universal Resource Locator address. For example communication can be provided over a communications medium. In particular the client and server may be coupled to one another via TCP IP connections for high capacity communication.

Thus illustrates an exemplary networked or distributed environment with a server in communication with client computers via a network bus in which the present invention may be employed. In more detail a number of servers etc. are interconnected via a communications network bus which may be a LAN WAN intranet the Internet etc. with a number of client or remote computing devices etc. such as a portable computer handheld computer thin client networked appliance or other device such as a VCR TV oven light heater and the like in accordance with the present invention. It is thus contemplated that the present invention may apply to any computing device in connection with which it is desirable to process store or render secure content from a trusted source.

In a network environment in which the communications network bus is the Internet for example the servers can be Web servers with which the clients etc. communicate via any of a number of known protocols such as HTTP. Servers may also serve as clients as may be characteristic of a distributed computing environment. Communications may be wired or wireless where appropriate. Client devices may or may not communicate via communications network bus and may have independent communications associated therewith. For example in the case of a TV or VCR there may or may not be a networked aspect to the control thereof. Each client computer and server computer may be equipped with various application program modules or objects and with connections or access to various types of storage elements or objects across which files may be stored or to which portion s of files may be downloaded or migrated. Thus the present invention can be utilized in a computer network environment having client computers etc. that can access and interact with a computer network bus and server computers etc. that may interact with client computers etc. and other devices and databases .

As is known and referring now to digital rights management DRM and enforcement is highly desirable in connection with digital content such as digital audio digital video digital text digital data digital multimedia etc. where such digital content is to be distributed to users. Upon being received by the user such user renders or plays the digital content with the aid of an appropriate rendering device such as a media player on a personal computer or the like.

Typically a content owner or developer hereinafter owner distributing such digital content wishes to restrict what the user can do with such distributed digital content . For example the content owner may wish to restrict the user from copying and re distributing such content to a second user or may wish to allow distributed digital content to be played only a limited number of times only for a certain total time only on a certain type of machine only on a certain type of media player only by a certain type of user etc.

However after distribution has occurred such content owner has very little if any control over the digital content . A DRM system then allows the controlled rendering or playing of arbitrary forms of digital content where such control is flexible and definable by the content owner of such digital content. Typically content is distributed to the user in the form of a package by way of any appropriate distribution channel. The digital content package as distributed may include the digital content encrypted with a symmetric encryption decryption key KD i.e. KD CONTENT as well as other information identifying the content how to acquire a license for such content etc.

The trust based DRM system allows an owner of digital content to specify license rules that must be satisfied before such digital content is allowed to be rendered on a user s computing device . Such license rules can include the aforementioned temporal requirement and may be embodied within a digital license or use document hereinafter license that the user user s computing device hereinafter such terms are interchangeable unless circumstances require otherwise must obtain from the content owner or an agent thereof. Such license also includes the decryption key KD for decrypting the digital content perhaps encrypted according to a key decryptable by the user s computing device.

The content owner for a piece of digital content must trust that the user s computing device will abide by the rules and requirements specified by such content owner in the license i.e. that the digital content will not be rendered unless the rules and requirements within the license are satisfied. Preferably then the user s computing device is provided with a trusted component or mechanism that will not render the digital content except according to the license rules embodied in the license associated with the digital content and obtained by the user.

The trusted component typically has a license evaluator that determines whether the license is valid reviews the license rules and requirements in such valid license and determines based on the reviewed license rules and requirements whether the requesting user has the right to render the requested digital content in the manner sought among other things. As should be understood the license evaluator is trusted in the DRM system to carry out the wishes of the owner of the digital content according to the rules and requirements in the license and the user should not be able to easily alter such trusted element for any purpose nefarious or otherwise.

As should be understood the rules and requirements in the license can specify whether the user has rights to render the digital content based on any of several factors including who the user is where the user is located what type of computing device the user is using what rendering application is calling the DRM system the date the time etc. In addition the rules and requirements of the license may limit the license to a pre determined number of plays or pre determined play time for example.

The rules and requirements may be specified in the license according to any appropriate language and syntax. For example the language may simply specify attributes and values that must be satisfied DATE must be later than X e.g. or may require the performance of functions according to a specified script IF DATE greater than X THEN DO . . . e.g. .

Upon the license evaluator determining that the license is valid and that the user satisfies the rules and requirements therein the digital content can then be rendered. In particular to render the content the decryption key KD is obtained from the license and is applied to KD CONTENT from the content package to result in the actual content and the actual content is then in fact rendered.

Three entities in particular are employed to publish secure digital content a content preparation application that executes on the client and prepares the content for publishing a digital rights management DRM applications program interface API that also resides on the client device and a DRM server that is communicatively coupled to the client via a communication network such as the Internet a local or wide area network or a combination thereof.

The content preparation application can be any application that produces digital content. For example the application can be a word processor or other publisher that produces digital text files digital music video or other such content. The content could also include streamed content such as streamed audio video of a live or taped event or example. The application is provided with a cryptographic key to encrypt the digital content thus forming an encrypted digital content file and the user provides rights data to be tightly associated with the encrypted content in the digital content file . The rights data includes an identity for each entity that has rights in the digital content and a set of rights and conditions for each identified entity.

Such an entity can be for example an individual a class of individuals or a device. Such rights can include the right to read edit copy print etc the digital content. Conditions may include minimum system requirements date and time limitations play counts and the like.

The client API passes the encrypted digital content and the rights data to the DRM server . Using a process that is described in detail below the DRM server determines whether it can enforce the rights data and if so the DRM server signs the rights data to form a signed rights label SRL . In general however any trusted entity can sign the rights data preferably using a key trusted by the DRM server . For example a client can sign the rights data using a key provided to it by the DRM server .

The rights label can include data representing the rights description the encrypted content key and the digital signature over the rights description and the encrypted content key. If the DRM server is signing the right label it passes the signed rights label back to the client through the client API which stores the signed rights label on the client device . The content preparation application then associates the signed rights label with the encrypted digital content file such as for example by concatenation to form a rights managed content file . Note though that the SRL could be stored in a known location separate from the content file with a reference to the SRL concatenated to the content file to form the content file .

Referring now to one method for publishing rights managed digital content is shown. At step the application generates a content key CK that is used to encrypt the digital content. The content key CK is typically a symmetric key although any key can be used to encrypt the digital content. As is known a symmetric key is employed by a symmetric key algorithm both to encrypt and decrypt. Accordingly CK should be well hidden when shared between a sender and a receiver.

At step the application encrypts the digital content with CK to form encrypted digital content i.e. CK content . Additionally rights data corresponding to CK content is generated either by the publisher of the content or by another entity. Note that such rights data may be custom rights data or rights data as obtained from a pre defined template. As was discussed above the rights data can include a list of entities that will be entitled to consume the content the specific rights that each of the entities possesses with respect to the content and any conditions that may be imposed on those rights.

At step the API generates a second encryption key K which is used to encrypt the content key CK . Preferably K is also a symmetric key. At step the API encrypts CK with K to result in K CK . At step the API discards CK with the result being that CK can now be obtained only by decrypting K CK . To ensure that CK content is protected to a central DRM server and that all license requests for the content are done centrally in accordance with the rights data the API at step contacts the provided DRM server and retrieves the public key PU DRM thereof. At step the API encrypts K with PU DRM to result in PU DRM K . Thus CK can be protected to PU DRM to ensure that the DRM server is the only entity that will be able to get access to CK as is required to decrypt CK content . At step the API encrypts the rights data i.e. the list of authorized entities and the respective rights and conditions associated with each authorized entities in the list with K to result in K rightsdata .

In an alternative embodiment CK can be used to directly encrypt the rights data to result in CK rightsdata and PU DRM can be used to directly encrypt CK to result in PU DRM CK thereby foregoing the use of K completely. However using K to encrypt the rights data and CK allows such K to conform to any particular algorithm that might be amenable to the DRM server whereas CK might be specified by an entity independent from the DRM server and might not be as amenable thereto.

At step the content protection application submits PU DRM K and K rightsdata to the DRM server as a rights label for signing. Alternatively the client itself can sign the rights data in the manner set forth below. If the rights data is being submitted to the server for signing then at step the DRM server accesses the rights data and verifies that it can enforce the rights and conditions in the submitted rights label. To verify that it can enforce the rights data the DRM server applies the private key PR DRM corresponding to PU DRM to PU DRM K to result in K and then applies K to K rightsdata to result in the rights data in the clear. The server can then do any policy checks to verify that the users rights and conditions specified in the rights data are within any policy enforced by the server . The server signs the originally submitted rights label including PU DRM K and K rightsdata to result in the signed rights label SRL where the signature is based on the private key of the DRM server PR DRM and returns the SRL back to the API which then presents the returned SRL to the client application .

The SRL is a digitally signed document which makes it tamper resistant. Additionally the SRL is independent of the actual key type and algorithm used to encrypt the content but maintains the strong 1 1 relation to the content it is protecting. Referring now to in one embodiment of the present invention the SRL may include information on the content that is the basis of the SRL including perhaps an ID of the content information on the DRM server that signs the SRL including PU DRM K and referral information such as a URL for locating the DRM server on a network and fall back information if the URL fails information describing the SRL itself K rightsdata K CK and a digital signature S PR DRM among other things.

By ensuring that a trusted entity signs the rights data to create a signed rights label the DRM server is asserting that it will issue licenses for the content in accordance with the terms set forth by the publisher as described in the rights data of the rights label . As should be appreciated a user is required to obtain a license to render the content especially inasmuch as the license contains the content key CK . When a user wants to obtain a license for the encrypted content the user can present a license request including the SRL for the content and a certificate verifying the user s credentials to the DRM server or other license issuing entity. The license issuing entity can then decrypt PU DRM K and K rightsdata to produce the rights data list all the rights granted by the author if any to the license requesting entity and construct a license with only those specific rights.

As set forth above upon the application receiving the SRL such application concatenates the signed rights label with the corresponding CK content to form rights managed digital content. Alternatively the rights data is stored in a known location with a reference to that location provided with the encrypted digital content. Thus a rendering application that is DRM enabled can discover the signed rights label via the piece of content the rendering application is attempting to render. This discovery triggers the rendering application to initiate a license request against the DRM licensing server . Publishing application can store a URL to the DRM licensing server for example or the DRM licensing server can embed its own URL as a piece of metadata into the rights label before digitally signing it so that the DRM client API called by the rendering application can identify the correct DRM licensing server .

Referring now to a system and method for licensing rights managed digital content is shown. Licensing as that term is used herein refers to a process that an application or service follows to request and receive a license that will enable an entity named in the license to consume the content in accordance with the terms specified in the license. Inputs to the licensing process can include the signed rights label SRL associated with the content for which a license is being requested and the public key certificate s of the entity s for which the license is being requested. Note that the entity requesting a license need not necessarily be the entity for which the license is being requested. Typically a license includes the rights description from the SRL an encrypted key that can decrypt the encrypted content and a digital signature over the rights description and the encrypted key to assert legitimacy and prevent tampering.

Preliminarily the client API forwards the signed rights label of the rights managed content to the DRM server via the communication network . As described above the rights label contains the content key CK encrypted according to the public key of the DRM server PU DRM i.e. PU DRM CK . In the process of issuing a license then the DRM server applies PR DRM to PU DRM CK to obtain CK . It then uses the public key PU ENTITY in the public key certificate that is passed up in the license request to re encrypt CK i.e. PU ENTITY CK . The newly encrypted PU ENTITY CK is then placed into the license. Thus the license can be returned to the caller without risk of exposing CK since only the holder of the private key PR ENTITY corresponding to PU ENTITY can recover CK from PU ENTITY CK . The client API then uses CK to decrypt the encrypted content to form decrypted digital content . The client application can then use the decrypted digital content according to the rights that are provided in the license.

Alternatively and as set forth below in more detail a client such as the publishing client can for example issue a use license to itself to consume the content.

Turning now to a method for licensing rights managed digital content is shown. At step a license issuing entity such as a DRM server receives a license request including either a public key certificate or an identity for each of one or more requested licensees. Presumably if am identity is specified the DRM server can procure a corresponding public key certificate from a directory a database or the like. If a license is requested for only one licensee only one certificate or identity is named. If a license is requested for a plurality of licensees a certificate or an identity can be named for each potential licensee. At step the requesting entity i.e. the entity making the license request is authenticated if desired. At step it is determined whether the entity is allowed to request a license again if desired.

If at step the issuing entity determines that the public key certificate is not included in the license request then the issuing entity uses the specified identity to perform a lookup in a directory service or database for the appropriate public key certificate. If at step the issuing entity determines that the certificate is in the directory then at step the certificate is retrieved. If a certificate cannot be found for a given potential licensee either in the request or in the directory then the license server does not generate a license for that potential licensee and at step an error is returned to the requesting entity.

Assuming the DRM server has a public key certificate for at least one potential licensee then at step such DRM server validates the trust of each licensee certificate. If not validated the DRM server determines that the issuer of the licensee certificate is not in the list of trusted issuers then the request fails for that licensee and an error is generated at step . Thus any potential licensee whose certificate is not issued by a trusted issuer would not receive a license.

Additionally the DRM server preferably performs digital signature validation on all entities in the certificate chain going from the trusted issuer certificates to the individual licensee public key certificates. The process of validating the digital signatures in a chain is a well known algorithm. If the public key certificate for a given potential licensee does not validate or a certificate in the chain does not validate the potential licensee is not trusted and a license therefore is not issued to that potential licensee. Otherwise at step a license can issue. The process repeats at step until all entities for which a license has been requested have been processed.

As shown in the DRM server proceeds to validate the signed rights label that is received in the license request. In one embodiment the DRM server has a master copy of every rights label signed thereby. At license time at step then the DRM server may retrieve a copy of the master rights label. The master rights label could be more up to date than the copy of the rights label sent in the license request and therefore will be the rights label employed to produce the requested license. If no master rights label is found the DRM server at step determine according to pre defined policy whether to issue a license based on the rights label in the request. If the policy does not allow the license request fails at step and an error is returned to the API at step .

At step the DRM server validates the SRL and specifically the digital signature thereof. If the SRL does not validate the license request fails at step and an error is returned to the API at step .

After all the validations have occurred the DRM server constructs a license for each approved license based on the SRL . At step the DRM server generates a respective rights description for the license to be issued to each licensee. For each licensee the DRM server evaluates the identity named in the public key certificate of that licensee against the identities named in the rights description in the rights label. At step the DRM server obtains PU DRM K and K CK from the SRL and applies PR DRM to obtain CK . The issuing entity then re encrypts CK using PU ENTITY from the licensee s public key certificate to result in PU ENTITY CK . At step the DRM server concatenates the generated rights description with PU ENTITY CK and digitally signs the resulting data structure using PR DRM i.e. S PR DRM . The signed data structure is thus the license for this particular licensee.

At step the DRM server determines that there are no more licenses to generate for the particular request. The generated licenses are then returned to the requesting entity at step along with an appropriate certificate chain that ties the licenses back to a trusted authority.

In one embodiment of the present invention the SRL may be signed by the requesting publishing user itself. Accordingly such user need not contact the DRM server to obtain an SRL for an associated piece of content. As a result self publishing may also be referred to as off line publishing. In such embodiment the publishing user should also be able to issue itself a publisher license especially inasmuch as the self published content is now DRM protected and such a publisher license is required to allow the publishing user to render the now protected content. It should also be understood that a publishing user may be enabled to issue licenses to other users.

In particular and referring now to in the embodiment an off line publishing user is first provisioned to off line publish by receiving from a DRM server an off line publishing OLP certificate including a public key PU OLP and a corresponding private key PR OLP encrypted according to a public key directly or indirectly accessible to the trusted component of the user PU ENTITY to result in PU ENTITY PR CERT . Note that PU ENTITY may for example be the public key of the trusted component or may be a public key of the user which is accessible by way of the public key of the trusted component . The OLP certificate should be signed by the private key of the DRM server PR DRM so that such DRM server can verify such OLP certificate as will be discussed in more detail below.

In addition the OLP certificate should include a certificate chain from PU DRM back to a trusted authority that is trusted by the trusted component of the publishing user or of another user so that such trusted component can verify such OLP certificate and any other certificate or license that is associated with such OLP certificate as will be discussed below. Briefly and as should be understood a chain of certificates begins with a root certificate signed by the private key of a trusted authority and having the public key of the next certificate in the chain. Each intermediate certificate in the chain then is signed by the private key corresponding to the public key of the previous certificate in the chain and has the public key of the next certificate in the chain. Finally the certificate or license to which the chain is attached is signed by the private key corresponding to the public key of the last certificate in the chain.

Thus to verify the certificate or license to which the chain is attached knowledge of the public key corresponding to the private key of the trusted authority is gained and such public key of the trusted authority is employed to verify the signature of the root certificate in the chain. Presuming the root certificate signature verifies then the public key from the root certificate is obtained and employed to verify the signature of the first intermediate certificate in the chain. The process repeats serially through the chain until every signature thereof is verified and then the public key from the last intermediate certificate in the chain is obtained and employed to verify the signature of the certificate or license to which the chain is attached.

As should be appreciated the OLP certificate creates a link in the chain of trust between content that is to be published off line and the DRM server that will issue a license for the content . The OLP certificate may be created based on an XML XrML language or any other appropriate language.

As should also be appreciated the OLP certificate and attached certificate chain authorizes the publishing user to self publish. As may further be appreciated the key pair PU OLP PR OLP are separate from PU ENTITY PR ENTITY and are employed specifically for self publishing. Note that the key pair PU OLP PR OLP may be dispensed with in which case the DRM certificate includes only the public key of the user PU ENTITY and is signed by the private key of the DRM server PR DRM so that such DRM server can verify same.

Self publishing differs from publishing as shown in in that the user essentially takes the place of the DRM server with regard to steps performed thereby. Significantly the user signs the submitted rights label including PU DRM K and K rightsdata or including PU DRM CK and CK rightsdata the latter being shown in with PR OLP as obtained from the DRM certificate i.e. S PR OLP to result in the signed rights label SRL . The trusted component client in using the OLP certificate typically verifies same based on the attached certificate chain. As should be appreciated the trusted component of the user obtains PR OLP from the OLP certificate by obtaining PU ENTITY PR OLP from such OLP certificate and applying PR ENTITY thereto. Note though that the publishing user cannot verify that the DRM server can enforce the rights in a self published SRL . Accordingly the DRM server itself should perform the verification at the time a license is requested based on the self published SRL .

Once the publishing user self publishes the SRL the user concatenates such self published SRL and the OLP certificate employed to produce same to the content and such content with SRL and DRM certificate is distributed as the rights managed content to another user. Thereafter the other user requests and obtains a license for the content from the DRM server in substantially the same manner as shown in . Here though the license requesting user submits to the DRM server both the self published SRL and the OLP certificate as concatenated to the content . The DRM server then verifies S PR DRM in the OLP certificate based on the corresponding PU DRM and obtains PU OLP from the DRM certificate . The DRM server then verifies S PR OLP in the SRL based on the obtained PU CERT and continues as before. Note though that since the publishing user did not verify that the DRM server can enforce the rights in the SRL and as was set forth above the DRM server itself should perform the verification at this time.

Note too that the DRM server need only verify S PR DRM in the OLP certificate since presumably it trusts itself. Accordingly the associated certificate chain from the OLP certificate need not necessarily be sent to the DRM server along with such OLP certificate unless of course the chain is otherwise necessary such as for example if the chain itself is at least partially the basis for S PR DRM .

Importantly though the publishing user ought to be able to render the now protected content without having to go to the DRM server for a license. Put another way a publishing user that off line publishes content without going to the DRM server based on an OLP certificate ought to be able to also issue itself a license in an off line manner without going to the DRM server so that such user can render the off line published content . Accordingly a publishing user can continue to work with self published content without any connectivity to a DRM server .

In one embodiment of the present invention then and turning now to a publishing user issues itself an off line publisher license signed by PR OLP and based on the self published SRL and including the OLP certificate and certificate chain thereof. Presumably the publisher license grants the publishing user full access to the self published content although a lesser amount of access could also be granted. The publisher license may be written in an XML XrML language or another language as is the case with other DRM licenses. As should be appreciated the publisher license includes the content key CK encrypted according to PU ENTITY which may be obtained by the trusted component of the user s computing device to form PU ENTITY CK .

The chain for the publisher license thus goes from such license to the OLP certificate and then back to a root certificate from a trusted authority perhaps by way of one or more intermediate certificates. Since the trusted component of the user presumably can gain the public key corresponding to the private key of the trusted authority that was employed to sign the root certificate the trusted component can itself verify the publisher license by way of the certificate chain thereof and upon verification can then obtain PU ENTITY CK therefrom apply PR ENTITY thereto to obtain CK and apply CK to CK content to result in the content for purposes of rendering thereof. As a result the publishing user can continue to work with content off line published thereby while remaining offline.

In accordance with the above then and referring now to a publishing user off line publishes content and issues itself an off line publisher license for such content in the following manner.

Preliminarily and as should be appreciated the content is developed in an appropriate manner and encrypted according to a content key CK step and the publishing user creates a rights label for the content with appropriate information PU DRM CK and CK rightsdata e.g. step . Thereafter the publishing user which presumably is already in possession of an OLP certificate from the DRM server obtains such OLP certificate step and verifies same based on the signature thereof and the chain of certificates that lead back to the root authority step . As should be appreciated such verification is actually performed by a trusted component on a computing device of the publishing user. Assuming the verification is successful then the publishing user trusted component hereinafter the publishing user retrieves PU ENTITY PR OLP from the OLP certificate step applies PR ENTITY to PU ENTITY PR OLP to obtain PR OLP step and then signs the created rights label with such PR OLP to create an SRL step .

Thereafter the publishing user concatenates such SRL and the OLP certificate employed to produce same to the content to form the self published content step and such rights managed content is therefore able to be distributed to another user. For the publishing user to continue using or rendering the content however such publishing user must issue itself a corresponding off line publisher license .

Thus the publishing user creates a publisher license by defining appropriate rights data for itself and encrypting same according to the content key CK to result in CK rightsdata step . Note here that such rights data may be obtained from the SRL from the content may be some default set of rights data granting the publishing user partial or full access to the self published content or may be derived from another source. In addition the publishing user encrypts the content key CK according to PU ENTITY to form PU ENTITY CK step . Such CK rightsdata and PU ENTITY CK are then formatted into the publisher license step the OLP certificate and chain of certificates thereof is attached step and such publisher license is signed based on PR OLP as was obtained in step step . Note here that the content i.e. CK content the publishing license and the OLP certificate in combination form a chain of digital items back to the trusted authority.

For the publishing user to render the published content then and turning now to such publishing user need not contact the DRM server but instead gains the public key corresponding to the private key of the trusted authority that was employed to sign the root certificate step verifies the root certificate step and then verifies each intermediate certificate in the chain step by for each such intermediate certificate obtaining the public key from the previous certificate and employing same to verify the signature of such certificate. Thereafter PU DRM from the last certificate in the chain is employed to verify the signature of the OLP certificate i.e. S PR DRM step PU OLP is obtained from the OLP certificate step and such PU OLP is employed to verify the signature of the publisher license i.e. S PR OLP step .

Once the publisher license is verified then CK rightsdata and PU ENTITY CK are retrieved from same step PR ENTITY is applied to PU ENTITY CK to result in CK step and CK is applied to CK rightsdata to result in the rights data step . As should now be appreciated the rights data is reviewed by the trusted component of the computing device of the publishing user to determine that such rights data allows rendering in the manner sought step such trusted component thus applies CK to CK content from the content to result in the content step and such content is then forwarded to an appropriate rendering application for actual rendering step . Thus the steps of in effect traverse the chain of digital items from the trusted authority to the content .

Note that the trusted component could conceivably apply CK to CK content to result in the content without first reviewing the rights data and regardless of what the rights data may allow or disallow but is trusted and has been constructed to in fact produce the content only after reviewing the rights data and satisfying itself that the rights data allows the rendering of such content. Once again as a result of having the publisher license the publishing user can continue to work with content off line published thereby while remaining offline inasmuch as the DRM server need not be contacted.

In the architecture as seen in only a single DRM server is shown. However and as may be appreciated such architecture can and likely does include multiple DRM servers . In particular and in one embodiment of the present invention such architecture includes a distributed network of DRM servers . Each of such DRM servers may have any particular function and all of the DRM servers may be organized in any appropriate manner without departing from the spirit and scope of the present invention.

For example and turning now to a particular organization may have one or more user level DRM servers for the purpose of signing rights labels to produce SRLs issuing licenses granting publishing licenses issuing certificates to users issuing certificates to computing devices and the like. Each such user level DRM server may be geographically assigned or may be assigned based on function or load for example. Likewise to oversee multiple user level DRM servers an organization may have one or more management DRM servers . Such organization based DRM servers may be located behind an organization firewall if so desired.

In addition to organization based DRM servers there may also be trans organization DRM servers that facilitate inter organization DRM functionality. For example such trans organization DRM servers may allow a pair of organizations to share certain DRM content . Also there may be a network of overseer DRM servers that enable all other DRM servers . For example such overseer DRM servers may oversee and maintain all other DRM servers and provide appropriate linkage for all other DRM servers back to the root or trusted authority that is the basis for the chain of certificates set forth previously. Such non organization based DRM servers are likely not located behind any organization firewall.

Critically each DRM server in the architecture of must be able to prove that it is to be trusted. Thus and as should now be appreciated from the above chain of certificates discussion each DRM server upon entering the architecture is provided with an enrollment certificate as is seen from . Significantly and in one embodiment of the present invention the enrollment certificate is provided to the entering DRM server hereinafter the DRM E server by another enrolling DRM server already in the architecture hereinafter the DRM R server . Also significantly attached to the provided enrollment certificate from the enrolling DRM R server is a chain of certificates including the enrollment certificate of the enrolling DRM server the enrollment certificate of the DRM server that enrolled the enrolling DRM R server and so on all the way back to a root DRM server . Such root DRM server may represent the root or trusted authority or the chain of certificates may extend beyond to reach the root or trusted authority. As should now be appreciated such enrollment certificate and the chain of certificates in combination form the chain of certificates that are attached to an OLP certificate provided by an enrolled or entered DRM E server to a publishing user such as that shown in .

In one embodiment of the present invention the enrollment certificate provided to a DRM E server by a DRM R server is in a form such as an XrML 1.2 based certificate. As may be appreciated such type of certificate is not independently proffered by any third party and thus such type of certificate does not represent any sort of independent vouching by a third party for the holder of such certificate .

In one embodiment of the present invention the method with which a particular DRM E server is enrolled into the architecture depends on whether the enrolling DRM R server knows or has reason to trust the entering DRM E server . If not the DRM E server should be required to prove to the DRM R server that it is trustworthy and will enforce the DRM architecture. If so the DRM E server should not be required to prove to the DRM R server that it is trustworthy at least not to the same degree. Thus a non trusting non knowing DRM R server enrolls a DRM E server while a knowing trusting DRM R server sub enrolls a DRM E server .

Typically a DRM R server knows trusts a DRM E server if both are operated by or for the benefit of the same organization although knowledge trust may also arise from other situations without departing from the spirit and scope of the present invention. Thus the method with which a particular DRM E server is enrolled into the architecture typically depends on whether the enrolling DRM R server is organizationally based or non organizationally based. As a result a non organizationally based DRM R server enrolls a DRM E server while an organizationally based DRM R server sub enrolls a DRM E server .

In one embodiment of the present invention and turning now to a non knowing non trusting DRM R server enrolls a DRM E server in the following manner.

Preliminary it is to be appreciated that the DRM E server wishing to be enrolled by the non knowing non trusting DRM R server is likely not known to such DRM R server . Accordingly and in one embodiment of the present invention the DRM E server must procure a vouching certificate from a third party willing to vouch for such DRM E server step . Typically such third party is an independent certificate issuing agent that is trusted by the DRM R server to perform such vouching such as for example VERISIGN Corporation of Mountain view Calif. Such vouching certificate may for example be in a form such as an X.509 certificate. Note that in the DRM R server relying on the trusted third party to vouch for the DRM E server the liability of such DRM R server for any bad acts of the DRM E server is mitigated.

As should be appreciated and as is typical and as is also seen in the vouching certificate incorporates therein a public key PU V and a corresponding private key PR V is signed by the trusted third party and may be accompanied by a chain of certificates leading to a known root for purposes of validation. As is also typical PR V within the vouching certificate is protected in a manner accessible to the vouched for DRM E server that is the basis of the vouching certificate . For example and as seen in PR V could be encrypted according to an appropriate public key.

Within the DRM architecture the entering DRM E server must have a unique identity. Here it is to be understood that the DRM identity is likely apart from PU V PR V although the DRM identity may also coincide with such PU V PR V without departing from the spirit and scope of the present invention. Accordingly to establish such identity such DRM E server generates or obtains a new public private key pair PU E PR E step . Also within the DRM architecture the enrolling DRM E server should decide which entities can revoke the authority thereof to participate. Accordingly such DRM E server identifies each such revoking entity in a list perhaps by way of a public key thereof step .

The DRM E server should be able to establish to the enrolling DRM R server that such DRM E server in fact owns the vouching certificate that was obtained at step . Accordingly the DRM E server either employs PR V from the vouching certificate to encrypt PU E to result in PR V PU E as an ownership indicia or signs PU E with PR V to result in PU E S PR V as the ownership indicia step . In either instance applying PU V to decrypt PU E or verify the signature establishes possession of PR V and therefore the vouching certificate .

Thus far the DRM E server has the vouching certificate PU E and PR E the revocation authority list and PR V PU E or PU E S PR V as the ownership indicia. To request enrollment then such DRM E server sends the vouching certificate PU E the revocation authority list and PR V PU E or PU E S PR V as the ownership indicia to the DRM R server step and the DRM R server proceeds to enroll such requesting DRM E server . Note that the request or a part thereof may be in the form of a certificate signed by PR E .

In particular the DRM R server validates the vouching certificate based on the signature thereof by the trusted third party and the chain of certificates leading to the known root step . Thus the DRM R server establishes that the DRM E server has been vouched for. Also the DRM R server verifies the ownership indicia by applying PU V from the request to either decrypt PU E or verify the signature and thus establish possession of PR V and therefore the vouching certificate in the request step . In addition and significantly the DRM R server performs any custom logic necessary to decide whether to honor the request step . Such custom logic may be any appropriate logic without departing from the spirit and scope of the present invention and may for example include a background check on the DRM E server and or its operator a determination of whether the DRM E server has a current trusted component and or operating system or the like a determination of whether the DRM E server is on a revocation list or other watch list and the like.

Assuming the custom logic permits the request to be honored then and in one embodiment of the present invention the DRM R server generates the enrollment certificate for the DRM E server step . In particular and as seen in . the DRM R server incorporates within the enrollment certificate 

Such other appropriate information may include but is not limited to the time the certificate was issued an indication of what sort of DRM activities an enrolled server is allowed to perform such as for example all activities account activation only sign rights labels only issue content licenses only and combinations thereof and an allowed time range for performing DRM activities. Note that the allowed time range is different from the validity range in that the current time must lie within the validity range to honor any certificate that includes the enrollment certificate in the certificate chain. In contrast the issued time of child certificates must fall within allowed time range of the parent certificate to perform DRM activities.

As should be appreciated in generating the enrollment certificate the DRM R server may initially generate certificate information and then allow custom logic to generate additional information or modify existing information. Such custom logic may for example ensure that the DRM R server includes appropriate information or may enforce pre defined DRM architecture policy. Of course the signature of the enrollment certificate is created after any such custom logic is performed. As should also be appreciated the DRM R server attaches the chain of certificates that leads back to the trusted root authority to the generated enrollment certificate so that the generated enrollment certificate may be validated based on such chain of certificates .

Note in particular that the identifying indicia from the vouching certificate as placed within the enrollment certificate will always travel with such enrollment certificate and acts as a bridge to the vouching certificate . Thus and again such identifying indicia shows to the world that the DRM R server is relying on the trusted third party issuer of the vouching certificate to vouch for the DRM E server and the liability of such DRM R server for any bad acts of the DRM E server is mitigated.

Once the DRM R server has successfully generated the enrollment certificate with the attached chain of certificates the DRM R server then returns same to the requesting DRM E server step and the now enrolled DRM E server stores same in an appropriate location for future use step . As was alluded to above PU E in the enrollment certificate and the corresponding PR E are the public I private key pair that the DRM E server will use as PU DRM and PR DRM when signing a rights label to produce an SRL issuing an OLP certificate and otherwise participating within the DRM architecture. Accordingly such enrollment certificate and the chain of certificates in combination form the chain of certificates that are attached to such OLP certificate and the like.

In one embodiment of the present invention and turning now to a knowing trusting DRM R server sub enrolls a DRM E server in the following manner.

Preliminary it is to be appreciated that the DRM E server wishing to be sub enrolled by the knowing trusting DRM R server should still be required to identify itself to such DRM R server inasmuch as such knowledge or trust may not be complete. However such identification requirement need not rise to the level of a proffer by a trusted third party inasmuch as the DRM R server does have some knowledge trust of the DRM E server. Accordingly and in one embodiment of the present invention the DRM E server obtains or is provided with some sort of credentials that are recognizable by and expected to be honored by the DRM R server and that identify the DRM E server to the satisfaction of the DRM R server step .

If both the DRM R and DRM E servers are within the same organization such credentials may be organization based credentials such as for example a network ID if both servers are on a common network a domain ID if both servers share a common domain or the like. If both the DRM R and DRM E servers are not within the same organization such credentials may still be a network ID if both servers are on a common network a domain ID if both servers share a common domain or the like or may be other credentials such as for example credentials issued by a third party and recognized by the DRM R server .

Note that in the present situation the DRM R server is not relying on a trusted third party to vouch for the DRM E server and therefore the liability of such DRM R server for any bad acts of the DRM E server is not as mitigated. Nevertheless the DRM R server is willing to take such a risk based on knowledge of or trust in the DRM E server to not in fact perform such bad acts.

As before within the DRM architecture the entering DRM E server must have a unique identity. Here it is to be understood that the DRM identity is likely apart from the credentials although the DRM identity may also coincide with the credentials without departing from the spirit and scope of the present invention. Accordingly to establish such identity such DRM E server generates or obtains a new public private key pair PU E PR E step . Also as before within the DRM architecture the sub enrolling DRM E server should decide which entities can revoke the authority thereof to participate. Accordingly such DRM E server identifies each such revoking entity in a list perhaps by way of a public key thereof step .

Thus far the DRM E server has the credentials PU E and PR E and the revocation authority list. To request sub enrollment then such DRM E server sends the credentials PU E and the revocation authority list to the DRM R server step and the DRM R server proceeds to sub enroll such requesting DRM E server . Note that as before the request or a part thereof may be in the form of a certificate signed by PR E .

In particular the DRM R server validates the credentials based on whatever logic or resources are necessary and available to so validate step . Thus the DRM R server establishes based on the validated credentials that the DRM E server is to be trusted to honor and obey the DRM architecture. In addition and as before the DRM R server performs any custom logic necessary to decide whether to honor the request step .

Assuming the custom logic permits the request to be honored then and in one embodiment of the present invention the DRM R server generates a sub enrollment certificate for the DRM E server step . In particular and as seen in . the DRM R server incorporates within the sub enrollment certificate 

As before in generating the sub enrollment certificate the DRM R server may initially generate certificate information and then allow custom logic to generate additional information or modify existing information. Again the signature of the sub enrollment certificate is created after any such custom logic is performed. As before the DRM R server attaches the chain of certificates that leads back to the trusted root authority to the generated sub enrollment certificate so that the generated sub enrollment certificate may be validated based on such chain of certificates .

Note here that the credentials or reference thereto are not believed to be especially necessary but may nevertheless be included for completeness. Note too that the sub enrollment certificate contains no identifying indicia from a vouching certificate inasmuch as no vouching certificate was required in the present sub enrollment scenario.

Once the DRM R server has successfully generated the sub enrollment certificate with the attached chain of certificates the DRM R server then returns same to the requesting DRM E server step and the now sub enrolled DRM E server stores same in an appropriate location for future use step . As before PU E in the sub enrollment certificate and the corresponding PR E are the public private key pair that the DRM E server will use as PU DRM and PR DRM when signing a rights label to produce an SRL issuing an OLP certificate and otherwise participating within the DRM architecture. Accordingly such sub enrollment certificate and the chain of certificates in combination form the chain of certificates that are attached to such OLP certificate and the like.

The programming necessary to effectuate the processes performed in connection with the present invention is relatively straight forward and should be apparent to the relevant programming public. Accordingly such programming is not attached hereto. Any particular programming then may be employed to effectuate the present invention without departing from the spirit and scope thereof.

In the present invention a digital rights management DRM and enforcement architecture and method allow the controlled rendering or playing of arbitrary forms of digital content where such control is flexible and definable by the content owner developer of such digital content. The architecture allows and facilitates such controlled rendering especially in an office or organization environment or the like where documents are to be shared amongst a defined group of individuals or classes of individuals. Such architecture allows content to be published without first gaining approval from a server and allows the publishing individual to issue itself a use license to render the published content without contacting the server for approval.

It should be appreciated that changes could be made to the embodiments described above without departing from the inventive concepts thereof. For example if a license or rights label is signed based on rights data therein such rights data need not necessarily be encrypted. Likewise in requesting and constructing an enrollment or sub enrollment certificate the revocation authority list and other similar information need not necessarily be employed. It should be understood therefore that this invention is not limited to the particular embodiments disclosed but it is intended to cover modifications within the spirit and scope of the present invention as defined by the appended claims.

