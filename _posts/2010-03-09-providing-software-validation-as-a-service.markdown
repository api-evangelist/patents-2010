---

title: Providing software validation as a service
abstract: In one embodiment, a method includes accessing an event-driven application input by a user, the event-driven application comprising source code, one or more use cases input by the user for the event-driven application, and one or more functional requirements input by the user for the event-driven application; parsing the use cases and the functional requirements according to the predefined syntax to construct one or more validation modules for validating the event-driven application without any modification to the source code of the event-driven application for validation purposes; formally validating the event-driven application using the validation modules without relying on assertions inserted into the source code of the event-driven application for validation purposes; and if the formal validation finds one or more defects in the event-driven application, generating output for communication to the user identifying the defects.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08453117&OS=08453117&RS=08453117
owner: Fujitsu Limited
number: 08453117
owner_city: Kawasaki-shi
owner_country: JP
publication_date: 20100309
---
To validate a software application such as for example a web application or a desktop application a user may manually write test cases for the application execute the application under the test cases and check for violations of properties that should hold true under the test cases. To check for violations the user may use external monitors that automatically check whether the properties are true at predetermined times during execution of the application or use inline assertions added to the source code of the application that return results at predetermined times during execution of the application indicating whether the properties are true. Such validation is substantially ad hoc manual and resource intensive and provides relatively limited coverage of potential bugs especially corner case bugs.

Particular embodiments provide software validation as a service VaaS . In particular embodiments a user may select a software application to be formally validated and specify one or more use cases and one or more functional requirements in connection with the software application to be validated. In particular embodiments the software application to be validated may be a web based application or a desktop application. In particular embodiments the software application to be validated may be an event driven application where the flow of the programming logic is determined by events. There may be various types of events that may drive an event driven application such as for example and without limitation user actions or inputs to the application messages received from other applications or threads or outputs from sensors.

In particular embodiments each use case may specify a particular event that may cause the event driven application to proceed from a first stage to a second stage following some programming logic. In particular embodiments each functional requirement may describe a requirement in connection with a particular use case that the event driven application needs to satisfy when that particular use case occurs. That is each functional requirement may describe the correct i.e. valid behavior of the event driven application in response to the occurrence of a particular event. In particular embodiments each use case may be associated with one or more functional requirements. That is sometimes the event driven application may need to satisfy multiple requirements when a particular use case occurs. In particular embodiments the use cases and the functional requirements may be specified using certain predefined syntax. In particular embodiments the use cases and the functional requirements may be specified using the same predefined syntax. Alternatively in particular embodiments the use cases may be specified using a first predefined syntax and the functional requirements may be specified using a second predefined syntax. Particular embodiments may provide a user interface that enables users to select the software applications to be validated and specify the use cases and the functional requirements in connection with the software applications to be validated.

For a particular software application particular embodiments may parse the use cases and the functional requirements specified in connection with the software application according to the predefined syntax to construct one or more validation modules for validating the software application without any modification to the source code of the software application. More specifically in particular embodiments the validation modules may be constructed without any assertion inserted into the source code of the software application for the purpose of validating the software application. Particular embodiments may then formally validate the software application using the validation modules and without replying on any assertion inserted into the source code of the software application for the purpose of validating the software application. If any defect is detected in the software application during the validation process particular embodiments may report the defects to the user.

Particular embodiments validate an event driven application without making any modification to the source code of the event driven application such as for example and without limitation inserting any assertion to the source code of the event driven application for validation purposes. The validation modules used for validating the event driven application are constructed using only the event driven application the use cases and the functional requirements. The validation of the event driven application is performed using only the event driven application and the validation modules.

One or more links couple a server or a client to network . In particular embodiments one or more links each includes one or more wireline wireless or optical links . In particular embodiments one or more links each includes an intranet an extranet a VPN a LAN a WLAN a WAN a MAN a portion of the Internet or another link or a combination of two or more such links . The present disclosure contemplates any suitable links coupling servers and clients to network .

In particular embodiments each server may be a unitary server or may be a distributed server spanning multiple computers or multiple datacenters. Servers may be of various types such as for example and without limitation web server news server mail server message server advertising server file server application server exchange server database server or proxy server. In particular embodiments each server may include hardware software or embedded logic components or a combination of two or more such components for carrying out the appropriate functionalities implemented or supported by server . For example a web server is generally capable of hosting websites containing web pages or particular elements of web pages. More specifically a web server may host HTML files or other file types or may dynamically create or constitute files upon a request and communicate them to clients in response to HTTP or other requests from clients . A mail server is generally capable of providing electronic mail services to various clients . A database server is generally capable of providing an interface for managing data stored in one or more data stores.

In particular embodiments a software application validation environment AVE may be implemented on a server . In particular embodiments AVE may include hardware software or embedded logic components or a combination of two or more such components for carrying out the appropriate functionalities implemented or supported by AVE . In particular embodiments a software validation service as described in more detail in connection with may be provided within AVE .

In particular embodiments one or more data storages may be communicatively linked to one or more severs via one or more links . In particular embodiments data storages may be used to store various types of information. In particular embodiments the information stored in data storages may be organized according to specific data structures. In particular embodiment each data storage may be a relational database. Particular embodiments may provide interfaces that enable servers or clients to manage e.g. retrieve modify add or delete the information stored in data storage .

In particular embodiments each client may be an electronic device including hardware software or embedded logic components or a combination of two or more such components and capable of carrying out the appropriate functionalities implemented or supported by client . For example and without limitation a client may be a desktop computer system a notebook computer system a netbook computer system a handheld electronic device or a mobile telephone. The present disclosure contemplates any suitable clients . A client may enable a network user at client to access network . A client may enable its user to communicate with other users at other clients .

A client may have a web browser such as MICROSOFT INTERNET EXPLORER GOOGLE CHROME or MOZILLA FIREFOX and may have one or more add ons plug ins or other extensions such as TOOLBAR or YAHOO TOOLBAR. A user at client may enter a Uniform Resource Locator URL or other address directing the web browser to a server and the web browser may generate a Hyper Text Transfer Protocol HTTP request and communicate the HTTP request to server . Server may accept the HTTP request and communicate to client one or more Hyper Text Markup Language HTML files responsive to the HTTP request. Client may render a web page based on the HTML files from server for presentation to the user. The present disclosure contemplates any suitable web page files. As an example and not by way of limitation web pages may render from HTML files Extensible HyperText Markup Language XHTML files or Extensible Markup Language XML files according to particular needs. Such pages may also execute scripts such as for example and without limitation those written in JAVASCRIPT JAVA MICROSOFT SILVERLIGHT combinations of markup language and scripts such as AJAX Asynchronous JAVASCRIPT and XML and the like. Herein reference to a web page encompasses one or more corresponding web page files which a browser may use to render the web page and vice versa where appropriate.

In particular embodiments a client enables a user at client to access services such as software validation services provided by servers . In particular embodiments an event driven application may reside on a client . A user at client may submit event driven application to AVE along with one or more use cases and functional requirements so that event driven application may be formally validated. In particular embodiments AVE may provide a user interface that enables the user at client to submit event driven application and the use cases and functional requirements for validation. In particular embodiments the user interface may be web based user interface provided through web browser . The user at client may interact with AVE via the web base user interface to use the software validation service provided within AVE .

In particular embodiments each use case describes an event that drives event driven application to proceed from one stage to another stage following some programming logic of event driven application . In particular embodiments each functional requirement is connected with a particular use case and describes a behavioral or programming requirement that event driven application needs to satisfy when that particular use case occurs in order to be considered valid. Each use case may be associated with one or more functional requirements . If a particular use case is associated with multiple functional requirements then in particular embodiments when that particular use occurs event driven application needs to satisfy each and every one of the associated functional requirements in order to be considered valid.

For example suppose event driven application is a web based electronic mail email application that allows a user to access his email account at a web based email service e.g. YAHOO MAIL or GMAIL via a web browser. To sign into his web based email account the user typically is required to provide a login identifier ID and a password. In this case a use case may be that the user enters his login ID and password and clicks a sign in or submit button via the web based email application. This may also be referred to as an event. Upon the occurrence of this particular event i.e. the user entering his login ID and password and clicking the sign in button the web based email application typically transmits the login ID and password to a remote email server to validate the user s login ID and password against the user information stored in association with the web based email service. If the user has provided the correction combination of login ID and password the web based email application allows the user access to his email account. On the other hand if the user has provided the wrong combination of login ID and password the web based email application denies the user access to any email account and may provide an error message notifying the user of his mistake. In this case the functional requirements associated with the sign in use case may include 1 validating the login ID and password 2 allowing the user access to his email account if the combination of login ID and password is correct and 3 denying the user access to any email account if the combination of login ID and password is in correct. For the web based email application to be valid upon occurrence of the sing in use case all three functional requirements need to be satisfied independently.

In particular embodiments use cases and functional requirements may be specified using a predefined syntax. The concept is similar to that of a computer programming language having a predefined syntax. An example syntax for specifying an event may be event Boolean type timed expression where timed expression may be an arithmetical logical expression over fields or objects in the event driven application and each field or object may be annotated with a time point relative to the execution of the event driven application which specifies the time point at which the value of the field or object should be sampled in order to evaluate the timed expression e.g. a b m1 c m2 d

In particular embodiments AVE may include requirements validation middleware that capture global requirements and validation for event driven application . In particular embodiments a template based formalism is employed to capture the requirements or properties. A small set of relevant temporal patterns may be provided from which to choose in capturing the global requirements or properties. In particular embodiments a set of light weight pre coded automatically configurable checkers are employed to capture the global requirements or properties. A Java like syntax may be used to specify expressions. A library of atomic entities or events is automatically generated. Such embodiments may be used with both formal and semi formal techniques. Particular embodiments use a requirements entry interface that includes a requirements language and a library of requirement templates. In particular embodiments the requirements validation middleware may be coupled to a software validation tool and a library of templatized property monitors.

In particular embodiments AVE may include a model generation component and a symbolic execution and model checking component . In particular embodiments to formally validate event driven application selected by the user based on use cases and functional requirements specified in connection with event driven application by the user model generation component may access event driven application use cases and functional requirements as illustrated in step of and parse use cases and functional requirements according to the predefined syntax with which use cases and functional requirements are specified to construct one or more validation modules as illustrated in step of . The predefined syntax enables model generation component to essentially understand use cases and functional requirements similar to that of a parser of a compiler being able to understand source code written using the predefined syntax of a programming language.

In particular embodiments the validation modules may include various test input to event driven application determined based on use cases and valid output against which the actual output from event driven application is compared to determine whether event driven application behaves correctly according to functional requirements . With the above example of the web based email application and the sign in use case the test input may include a correct combination of login ID and password and one or more incorrect combinations of login ID and password. The valid output for the correct combination of login ID and password may be access to the user s email account. The valid output for each incorrect combination of login ID and password may be an error message without access to any email account. When the web based email application receives the correct combination of login ID and password if the web based email application allows the user access to his email account then the web based email application satisfies one of the functional requirements associated with the sign in use case on the other hand if the web based email application denies the user access to his email account then the web based email application does not satisfy one of the functional requirements associated with the sign in use case and therefore has a defect. Conversely when the web based email application receives an incorrect combination of login ID and password if the web based email application denies the user access to any email account and displays an error message then the web based email application satisfies one of the functional requirements associated with the sign in use case on the other hand if the web based email application allows the user access to any email account then the web based email application does not satisfy one of the functional requirements associated with the sign in use case and therefore has a defect.

In particular embodiments the validation modules may then be forwarded to symbolic execution and modeling checking component together with event driven application . In particular embodiments symbolic execution and modeling checking component may formally validate event driven application using the validation modules as illustrated in step of . In particular embodiments validation result of the validation performed on event driven application may then be reported to the user as illustrated in step of .

In order for an AVE to parse the use cases and the functional requirements specified for an event driven application the use cases and the functional requirements need to be specified in certain predefined syntax. However it may be inconvenient to the users using the software validation service having to learn one or more new syntax for the purpose of specifying the use cases and the functional requirements. Thus particular embodiments may provide a user interface that helps a user select the event driven application to be validated and specify the use cases and the functional requirements in connection with the selected event driven application. In particular embodiments the user interface may be web based and may be accessed by a user through a web browser. For example when the user wishes to use the software validation service the user may enter a URL associated with the AVE in his web browser which causes the initial web page of the user interface to be displayed in his web browser. The user may then interact with the AVE from that web page e.g. entering information to be transmitted to the AVE . In particular embodiments the user interface may include one or more windows screens or web pages.

In particular embodiments the user interface enables a user to specify the use cases and the functional requirements associated with the individual use cases using a human readable or an intuitive language so that the user does not have to spend much effort learning to use the user interface or the predefined syntax used for specifying the use cases and the functional requirements. The user interface may provide predefined components that the user may select in order to specify a use case and its associated functional requirements. Particular embodiments may convert the use cases and the functional requirements specified by the user via the user interface into use cases and functional requirements formally specified using the predefined syntax.

In particular embodiments when reporting the validation result of an event driven application to the user requesting the validation defects detected in the event driven application if any may be represented using graphical visualization so that it is convenient for the user to review the defects. illustrates an example visualization of defects detected during validation of an event driven application. Again the graphical components included in the graphical visualization are for illustration only. Different embodiments may utilize different graphical components to represent the specific defects detected during a validation process. For example for each defect detected the result may include the use case and the functional requirement associated with the defect the specific input or event that causes the event driven application to fail the reason the event driven application fails to satisfy the associated functional requirement or any relationship the defect has with other defects.

This disclosure contemplates any suitable number of computer systems . This disclosure contemplates computer system taking any suitable physical form. As example and not by way of limitation computer system may be an embedded computer system a system on chip SOC a single board computer system SBC such as for example a computer on module COM or system on module SOM a desktop computer system a laptop or notebook computer system an interactive kiosk a mainframe a mesh of computer systems a mobile telephone a personal digital assistant PDA a server or a combination of two or more of these. Where appropriate computer system may include one or more computer systems be unitary or distributed span multiple locations span multiple machines or reside in a cloud which may include one or more cloud components in one or more networks. Where appropriate one or more computer systems may perform without substantial spatial or temporal limitation one or more steps of one or more methods described or illustrated herein. As an example and not by way of limitation one or more computer systems may perform in real time or in batch mode one or more steps of one or more methods described or illustrated herein. One or more computer systems may perform at different times or at different locations one or more steps of one or more methods described or illustrated herein where appropriate.

In particular embodiments computer system includes a processor memory storage an input output I O interface a communication interface and a bus . Although this disclosure describes and illustrates a particular computer system having a particular number of particular components in a particular arrangement this disclosure contemplates any suitable computer system having any suitable number of any suitable components in any suitable arrangement.

In particular embodiments processor includes hardware for executing instructions such as those making up a computer program. As an example and not by way of limitation to execute instructions processor may retrieve or fetch the instructions from an internal register an internal cache memory or storage decode and execute them and then write one or more results to an internal register an internal cache memory or storage . In particular embodiments processor may include one or more internal caches for data instructions or addresses. The present disclosure contemplates processor including any suitable number of any suitable internal caches where appropriate. As an example and not by way of limitation processor may include one or more instruction caches one or more data caches and one or more translation lookaside buffers TLBs . Instructions in the instruction caches may be copies of instructions in memory or storage and the instruction caches may speed up retrieval of those instructions by processor . Data in the data caches may be copies of data in memory or storage for instructions executing at processor to operate on the results of previous instructions executed at processor for access by subsequent instructions executing at processor or for writing to memory or storage or other suitable data. The data caches may speed up read or write operations by processor . The TLBs may speed up virtual address translation for processor . In particular embodiments processor may include one or more internal registers for data instructions or addresses. The present disclosure contemplates processor including any suitable number of any suitable internal registers where appropriate. Where appropriate processor may include one or more arithmetic logic units ALUs be a multi core processor or include one or more processors . Although this disclosure describes and illustrates a particular processor this disclosure contemplates any suitable processor.

In particular embodiments memory includes main memory for storing instructions for processor to execute or data for processor to operate on. As an example and not by way of limitation computer system may load instructions from storage or another source such as for example another computer system to memory . Processor may then load the instructions from memory to an internal register or internal cache. To execute the instructions processor may retrieve the instructions from the internal register or internal cache and decode them. During or after execution of the instructions processor may write one or more results which may be intermediate or final results to the internal register or internal cache. Processor may then write one or more of those results to memory . In particular embodiments processor executes only instructions in one or more internal registers or internal caches or in memory as opposed to storage or elsewhere and operates only on data in one or more internal registers or internal caches or in memory as opposed to storage or elsewhere . One or more memory buses which may each include an address bus and a data bus may couple processor to memory . Bus may include one or more memory buses as described below. In particular embodiments one or more memory management units MMUs reside between processor and memory and facilitate accesses to memory requested by processor . In particular embodiments memory includes random access memory RAM . This RAM may be volatile memory where appropriate Where appropriate this RAM may be dynamic RAM DRAM or static RAM SRAM . Moreover where appropriate this RAM may be single ported or multi ported RAM. The present disclosure contemplates any suitable RAM. Memory may include one or more memories where appropriate. Although this disclosure describes and illustrates particular memory this disclosure contemplates any suitable memory.

In particular embodiments storage includes mass storage for data or instructions. As an example and not by way of limitation storage may include an HDD a floppy disk drive flash memory an optical disc a magneto optical disc magnetic tape or a Universal Serial Bus USB drive or a combination of two or more of these. Storage may include removable or non removable or fixed media where appropriate. Storage may be internal or external to computer system where appropriate. In particular embodiments storage is non volatile solid state memory. In particular embodiments storage includes read only memory ROM . Where appropriate this ROM may be mask programmed ROM programmable ROM PROM erasable PROM EPROM electrically erasable PROM EEPROM electrically alterable ROM EAROM or flash memory or a combination of two or more of these. This disclosure contemplates mass storage taking any suitable physical form. Storage may include one or more storage control units facilitating communication between processor and storage where appropriate. Where appropriate storage may include one or more storages . Although this disclosure describes and illustrates particular storage this disclosure contemplates any suitable storage.

In particular embodiments I O interface includes hardware software or both providing one or more interfaces for communication between computer system and one or more I O devices. Computer system may include one or more of these I O devices where appropriate. One or more of these I O devices may enable communication between a person and computer system . As an example and not by way of limitation an I O device may include a keyboard keypad microphone monitor mouse printer scanner speaker still camera stylus tablet touch screen trackball video camera another suitable I O device or a combination of two or more of these. An I O device may include one or more sensors. This disclosure contemplates any suitable I O devices and any suitable I O interfaces for them. Where appropriate I O interface may include one or more device or software drivers enabling processor to drive one or more of these I O devices. I O interface may include one or more I O interfaces where appropriate. Although this disclosure describes and illustrates a particular I O interface this disclosure contemplates any suitable I O interface.

In particular embodiments communication interface includes hardware software or both providing one or more interfaces for communication such as for example packet based communication between computer system and one or more other computer systems or one or more networks. As an example and not by way of limitation communication interface may include a network interface controller NIC or network adapter for communicating with an Ethernet or other wire based network or a wireless NIC WNIC or wireless adapter for communicating with a wireless network such as a WI FI network. This disclosure contemplates any suitable network and any suitable communication interface for it. As an example and not by way of limitation computer system may communicate with an ad hoc network a personal area network PAN a local area network LAN a wide area network WAN a metropolitan area network MAN or one or more portions of the Internet or a combination of two or more of these. One or more portions of one or more of these networks may be wired or wireless. As an example computer system may communicate with a wireless PAN WPAN such as for example a BLUETOOTH WPAN a WI FI network a WI MAX network a cellular telephone network such as for example a Global System for Mobile Communications GSM network or other suitable wireless network or a combination of two or more of these. Computer system may include any suitable communication interface for any of these networks where appropriate. Communication interface may include one or more communication interfaces where appropriate. Although this disclosure describes and illustrates a particular communication interface this disclosure contemplates any suitable communication interface.

In particular embodiments bus includes hardware software or both coupling components of computer system to each other. As an example and not by way of limitation bus may include an Accelerated Graphics Port AGP or other graphics bus an Enhanced Industry Standard Architecture EISA bus a front side bus FSB a HYPERTRANSPORT HT interconnect an Industry Standard Architecture ISA bus an INFINIBAND interconnect a low pin count LPC bus a memory bus a Micro Channel Architecture MCA bus a Peripheral Component Interconnect PCI bus a PCI Express PCI X bus a serial advanced technology attachment SATA bus a Video Electronics Standards Association local VLB bus or another suitable bus or a combination of two or more of these. Bus may include one or more buses where appropriate. Although this disclosure describes and illustrates a particular bus this disclosure contemplates any suitable bus or interconnect.

Herein reference to a computer readable storage medium encompasses one or more non transitory tangible computer readable storage media possessing structure. As an example and not by way of limitation a computer readable storage medium may include a semiconductor based or other integrated circuit IC such as for example a field programmable gate array FPGA or an application specific IC ASIC a hard disk an HDD a hybrid hard drive HHD an optical disc an optical disc drive ODD a magneto optical disc a magneto optical drive a floppy disk a floppy disk drive FDD magnetic tape a holographic storage medium a solid state drive SSD a RAM drive a SECURE DIGITAL card a SECURE DIGITAL drive or another suitable computer readable storage medium or a combination of two or more of these where appropriate. Herein reference to a computer readable storage medium excludes any medium that is not eligible for patent protection under 95 U.S.C. 101. Herein reference to a computer readable storage medium excludes transitory forms of signal transmission such as a propagating electrical or electromagnetic signal per se to the extent that they are not eligible for patent protection under 95 U.S.C. 101.

This disclosure contemplates one or more computer readable storage media implementing any suitable storage. In particular embodiments a computer readable storage medium implements one or more portions of processor such as for example one or more internal registers or caches one or more portions of memory one or more portions of storage or a combination of these where appropriate. In particular embodiments a computer readable storage medium implements RAM or ROM. In particular embodiments a computer readable storage medium implements volatile or persistent memory. In particular embodiments one or more computer readable storage media embody software. Herein reference to software may encompass one or more applications bytecode one or more computer programs one or more executables one or more instructions logic machine code one or more scripts or source code and vice versa where appropriate. In particular embodiments software includes one or more application programming interfaces APIs . This disclosure contemplates any suitable software written or otherwise expressed in any suitable programming language or combination of programming languages. In particular embodiments software is expressed as source code or object code. In particular embodiments software is expressed in a higher level programming language such as for example C Perl or a suitable extension thereof. In particular embodiments software is expressed in a lower level programming language such as assembly language or machine code . In particular embodiments software is expressed in JAVA. In particular embodiments software is expressed in Hyper Text Markup Language HTML Extensible Markup Language XML or other suitable markup language.

The present disclosure encompasses all changes substitutions variations alterations and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend. Similarly where appropriate the appended claims encompass all changes substitutions variations alterations and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend.

