---

title: Records management of database tables
abstract: Systems, methods, and other embodiments associated with records management are described. One example method includes managing a relational database for compliance with record retention rules, where the relational database includes a table organized with rows and columns. The relational database provides options for designating rows for records management.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08386533&OS=08386533&RS=08386533
owner: Oracle International Corporation
number: 08386533
owner_city: Redwood Shores
owner_country: US
publication_date: 20101130
---
Many business organizations have found that the importance and volume of business critical records is rapidly increasing. Because of this many companies are reevaluating their unstructured data strategy and are turning towards more reliable records management policies.

 Records management is the systematic and comprehensive control of the creation capture maintenance filing use and disposition of records. It aims to ensure that records contained in a database are authentic and reliable can be retrieved when needed as quickly and efficiently as possible and are not destroyed prematurely or kept longer than required. A record in the compliance industry is any data item recorded information that is under records management control and subject to a life cycle. A record s life cycle is the life span of a record from its creation or receipt to its final disposition. It is usually described in three stages creation maintenance and use and final disposition. A set of retention rules policies are applied to the record over a defined time period.

Different user applications e.g. email accounting personnel etc. operate with different types of data that use different databases. To control access to its associated database each user application must implement policies rules that apply to its data. For example an email application can implement a retention policy that emails will be maintained in the database for 7 years. However someone with direct access to the database e.g. a database administrator can by pass the email application policy and delete emails directly from the database intentionally or unintentionally .

Another example is a background job that periodically updates deletes data from the database tables. The background job does not operate through the email application and thus by passes the retention policies. To ensure compliance the background job must be programmed to be aware of the email retention policies and to comply with the email application s logic to prevent updates deletions. Other background jobs must also be individually reprogrammed which can be time intensive. Of course if a policy changes then all applications and background jobs that are affected must be identified and reprogrammed. This type of records management does not ensure compliance with implemented policies.

Systems methods and other embodiments are described herein that provide records management techniques. In one embodiment records management features are pushed down and implemented into a database table itself rather than at a user application level. In one embodiment the database is configured to be aware of and determine a life cycle of a record. Physical access to the database is protected even when someone or something e.g. computer process by passes the user application that operates on the database and tries to access the physical database directly. In this manner the database is configured to provide the infrastructure for compliance solutions.

With reference to one embodiment of a method is illustrated that is associated with records management. The method is computer implemented and in one embodiment may be implemented as executable instructions stored in a non transitory computer readable medium. At the method provides for managing a relational database for compliance with record retention rules. The relational database includes one or more tables. A table is organized in rows and columns where each row represents a single implicitly structured data item and each column defines a field in the row. To implement a compliance policy for data in the table the table is designated to be records managed. The designation may be performed by a programming instruction a selection via a graphical user interface or other selection mechanism. This will be described in more detail below.

At a virtual column is added to the table that has been designated to be records managed. illustrates an example of an accounts payable table as originally created. is a before image of the table since it does not include a virtual column. shows the table after a virtual column is added to the pre existing table .

In one embodiment the virtual column is not included in a visible structure of the table and is not accessible from a user query application. For example the virtual column is a pseudo column or hidden column. It can be selected through a records management interface but not updated or deleted by a user. This prevents tampering with the virtual column and its data.

With continued reference to at the method provides an interface to allow a user to select rows to be records managed. Since records management is an administrative task the user in this case is most likely an authorized database administrator. When selecting one or more rows the selected rows are marked or designated to be a record. As stated a record is recorded information that is under records management control. Retention rules policies then apply to the data within the selected rows. At in response to a row in the table being designated as a managed record a unique identifier is generated for the row and the unique identifier is stored in the virtual column associated with the row.

For example in suppose row payment ID 1 is selected to be a record. A unique identifier e.g. 1515515 is generated and stored in the virtual column for row . Other unique identifiers are generated for other selected rows. The row with Payment ID 2 does not include a unique identifier in the virtual column and thus is not subject to records management control. The virtual column is labeled as REC ID record identifier but other labels may be used.

Once a unique identifier is stored and assigned to the row access to data in the row is controlled at least in part by the unique identifier. In one embodiment the existence of the unique identifier is an indicator that the data in the row cannot be updated or deleted. Thus regardless of how the access is made or from which application the database will not permit a row with a unique identifier to be modified or deleted.

In another embodiment pre defined rules can be applied to a row during its life cycle. For example the unique identifier links the row to retention rules that apply to the row. The retention rules may be defined in a life cycle table that defines actions that can or cannot be performed along with time durations and or dates. Particular retention rules in the life cycle table are linked to a row in the table by assigning the same unique identifier as in the corresponding row. shows a life cycle table and shows rows in the table of linked to actions in the life cycle table . Thus the marked row and its data are subject to pre defined rules actions that are maintained in the life cycle table . For example the row with payment ID 1 is linked to actions in the life cycle table where the action is Retain and the duration is 3 years. Thus the record must be retained and not deleted updated for 3 years.

In another embodiment if a row is designated as being a managed record and the unique identifier is assigned to the row then access from a database level interface or access from an application level interface to the row is controlled based at least in part on the unique identifier. For example since the records management features are implemented on the database itself external applications such as a user application e.g. email application cannot by pass the management features.

As stated previously even though the email application may have record retention rules implemented internally a person or process may have ways to access the database directly and thus not go through the email application. Similarly a database administrator can by pass the user application and can access the physical database directly due to appropriate authorization . Data can be deleted intentionally or unintentionally. However with the implemented features these types of accesses are still subjected to control based on the unique identifier. If the unique identifier exists for a row that the database administrator attempts to update delete the operation is prohibited.

In another embodiment illustrates an example log table that may be generated and maintained for marked records. When an operation is attempted on a marked record from the table an event is stored in the log table and is associated with the corresponding unique identifier e.g. REC ID . For example REC ID 2552525 shows that an illegal access was attempted on the corresponding record e.g. an illegal delete action . Access may have been denied for various reasons such as the user did not have appropriate authorization to delete the record or the retention period has not yet expired. Retention periods determine the length of time that a record must be kept unless there is a legal or regulatory action requiring that certain records be held or frozen from possible destruction.

In another embodiment method may include a soft delete feature. A soft delete is where data is deleted from a user s application but is not deleted from the main database. The soft delete may also delete a record from the relational database but then move the record to a read only tablespace where it is retained.

For example a user may wish to clean out his her email in box and delete old emails to make it more manageable e.g. user has a large volume of emails . However suppose retention rules have been applied that prohibit the deletion of the emails. Rather than prohibit the user from cleaning out the in box the emails can be deleted from the user s in box and from his her view . But the emails are then stored in a separate storage device location to comply with the retention rules. Thus although the user believes the emails are deleted they still exist in a different location.

The following example is one embodiment for defining a database table using the CREATE TABLE syntax of SQL Oracle Database. Of course other syntax can be used based on the database application programming language that is used. For example an additional option is provided to organize the table as Records Managed as part of the CREATE TABLE command that defines a new table or as part of an ALTER TABLE command that alters an existing table.

In this CREATE TABLE construct the table created is classified to be RECORDS MANAGED in an ORGANIZATION parameter. This classification causes a virtual column to be added to the table. It should be appreciated that other parameters that may appear as part of the CREATE TABLE instructions are not shown here. For example other parameters may include defining fields field types key fields and so on. Thus when a table is created a number of fields are defined for each row where each field is a column in the table. However the virtual column is not defined as a field.

Various options may be provided under the RECORDS MANAGED classification. As seen above in the CREATE TABLE construct the first line designates a RETENTION option that designates the table to be a record non record or custom type. As a RECORD the data is retained for applicable compliance policies. A NON RECORD can be used for data that is not necessarily subject to compliance policies but other desired rules can be applied. For example it can be used for personal information that should be purged after a period of time e.g. after 3 years . Thus a non record can be used for data that does not require retention but does require destruction after a certain period. The CUSTOM option can be used to specify custom retention destruction rules. One or more options can also have a default setting if not specified. Sample default settings appear after the DEFAULT term in each command line.

The RMA ROLE option designates the records management administrator RMA role. The AUTO PURGE option may be on or off. The LC TABLE option identifies the Life Cycle Table that is linked with the table. As explained previously the life cycle table defines retention and or disposition rules that apply to associated records e.g. preserve for 5 years then move to location B then destroy record . The SOFT DELETE option as explained above allows for records to be removed from the user application but not from the main database. The STORAGE option can be set as in place or read only tablespace. The in place setting is mutually exclusive with the soft delete option. The read only tablespace means that once the data is written it can only be read and cannot be deleted or modified.

A similar process can be performed to an existing database table using for example an ALTER TABLE command 

With this command the pre existing table named AC PAYABLES is reorganized to be Records Managed and thus under the control of records management. In one embodiment when a database administrator creates or alters a table as shown above the database 

In one embodiment application program interfaces API are provided to perform operations related specifically to records management. The following APIs can be implemented as commands that are applicable to a specified table that has been classified as records managed and are available to an administrator after the classification is made 

The example commands are labeled as DBMS RM which stands for Database Management System Records Management. Of course other names can be used. The first command is used to mark specified rows as a record and includes parameters to identify the rows e.g. identify by row ID . The command is one example of an interface that may be provided for selecting rows as records with respect to block in . Other desired options can be included. The second command is used to purge specified rows. As stated previously after a row is designated or marked as a record a record ID is generated and stored in the virtual column for that row. In another embodiment a graphical user interface can be provided to allow for selection of rows instead of or in combination with the command level instructions. The database system can be configured where these interfaces provide the only access to the virtual column so as to reduce data tampering.

In one embodiment changing the organization of an existing table to be records managed using the ALTER TABLE command does not alter the logical structure of the table. The virtual column is added or associated with the table but is hidden from view and cannot be accessed by users. This also means that a table can be switched back and forth between being Records Managed or not. Once a table is classified as Records Managed the method and system then allows the database administrator to use the Records Management APIs specified above to manage the records in the database.

When data is marked as a record based on the options defined in the CREATE ALTER table command the database can automatically save a copy of this record in a WORM storage write once read many that would be available for restoration of the record if needed. Also given that the record is stored in a database the typical features of data replication and disaster recovery are additional benefits to an application that uses the records management approach. In another embodiment the records are given an inherent expiration date and associated life cycle. Hence replicated copies of the database may also purge the data at the same time as the original record that is intended to be destroyed.

With reference to one embodiment of a method is illustrated that is associated with controlling access to a database in view of compliance policies. Method is described from the view point that a request is made to modify or delete data from the database and a controller e.g. a physical access manager is responsible for processing requests to the database. Presume that the database has been created and selected rows have been marked as records managed as described with reference to . Thus the database includes a virtual column and marked records have a unique identifier assigned in the virtual column. Unmarked rows do not have an assigned unique identifier.

Method initiates in response to receiving a request to modify or delete data from the database. In some embodiments the request may be part of a query. Before processing the request the method performs compliance operations to determine if the request is permitted. At the method identifies the row s that store the data associated with the request. This may involve a query parser that parses the query to extract terms and determines which rows are requested. At once the row is identified the method determines if the row contains a unique identifier in the virtual column. At if the unique identifier exists then the request to modify or delete is prohibited at . If the unique identifier does not exist in the virtual column the request is allowed to perform on the data within the row because the row is not subject to records management. The method repeats for as many rows that are involved in the request.

Thus whenever a record row is being updated the database checks if the row is marked as a record based on the presence of the ID in the virtual column. This process prevents updates to data that needs to be retained. However an administrator that is granted records management administrator privileges can delete marked rows using the records management commands interfaces identified above as DBMS RM commands.

The database system includes a records management module and records management application program interfaces APIs . The records management module is configured to create and implement records management features that are applied to a selected table as described above. For example suppose the table is selected to be records managed. The records management module causes a virtual column to be added to the table as shown by column . The virtual column is labeled as REC ID and is used to store a unique identifier for marked rows. The virtual column and the marked rows are linked to applicable rules in a life cycle table as previously described.

The records management APIs allow for the selection of rows to be marked as a record that are subject to compliance rules. The physical access manager is configured to control access to the table by checking the virtual column to determine whether or not a modification or deletion request is permitted. In one embodiment the physical access manager is configured to perform the method of .

In one embodiment the database system is part of a computing system that includes one or more processors memories storage devices and other computer components that operate with the database system . In one embodiment the physical access manager and the records management module are implemented with logic as defined herein. This may include hardware components firmware a non transitory computer readable medium with stored instructions or combinations of these elements.

In another embodiment the described methods and or their equivalents may be implemented with computer executable instructions. Thus in one embodiment a non transitory computer readable medium is configured with stored computer executable instructions that when executed by a machine e.g. processor computer and so on cause the machine and or associated components to perform the method.

In another embodiment the database system is configured to automatically partition the database table into two tablespaces based on whether the record identifier in the virtual column is present or null. One tablespace includes all rows that have a record identifier assigned to them e.g. rows that are marked as records . The other tablespace includes all rows that have a null record identifier in the virtual column e.g. rows not marked as records . Once a row is marked as a record and has a non null record identifier the record is moved to a read only tablespace and thus cannot be modified.

While for purposes of simplicity of explanation the illustrated methodologies in the figures are shown and described as a series of blocks it is to be appreciated that the methodologies are not limited by the order of the blocks as some blocks can occur in different orders and or concurrently with other blocks from that shown and described. Moreover less than all the illustrated blocks may be used to implement an example methodology. Blocks may be combined or separated into multiple components. Furthermore additional and or alternative methodologies can employ additional blocks that are not illustrated.

Disposition The set of rules which specify what to do with records as part of their lifecycle. This may include retaining moving or deleting records.

Freeze Unfreeze The ability to stop the final disposition instruction delete in the lifecycle of a record from being executed. Other disposition instructions e.g. retain and move are executed. In one embodiment the system is implemented to support legal holds which allows the records management module used by an administrator to suspend the lifecycles of records in a record category or folder indefinitely by using a freeze unfreeze command.

Hardware immutability The ability of the hardware to prevent anyone from accessing altering or deleting any content stored on a disk. In one embodiment the physical access manager of is configured with this feature.

Lifecycle The life span of a record from its creation or receipt to its final disposition. It is usually described in three stages creation maintenance and use and final disposition.

The following includes definitions of selected terms employed herein. The definitions include various examples and or forms of components that fall within the scope of a term and that may be used for implementation. The examples are not intended to be limiting. Both singular and plural forms of terms may be within the definitions.

References to one embodiment an embodiment one example an example and so on indicate that the embodiment s or example s so described may include a particular feature structure characteristic property element or limitation but that not every embodiment or example necessarily includes that particular feature structure characteristic property element or limitation. Furthermore repeated use of the phrase in one embodiment does not necessarily refer to the same embodiment though it may.

 Computer readable medium as used herein refers to a non transitory medium that stores instructions and or data. A computer readable medium may take forms including but not limited to non volatile media and volatile media. Non volatile media may include for example optical disks magnetic disks and so on. Volatile media may include for example semiconductor memories dynamic memory and so on. Forms of a computer readable medium may include but are not limited to a floppy disk a flexible disk a hard disk a magnetic tape other magnetic medium an ASIC application specific integrated circuit a compact disk other optical medium a RAM a ROM programmable memories a memory chip or card a memory stick and other media from which a computer a processor or other electronic device can read.

In some examples database is used to refer to a table. In other examples database may be used to refer to a set of tables. In still other examples database may refer to a set of data tables and methods for accessing and or manipulating those data tables.

 Logic as used herein includes but is not limited to hardware firmware a non transitory computer readable medium that stores instructions instructions in execution on a machine and or combinations of each to perform a function s or an action s and or to cause a function or action from another logic method and or system. Logic may include a microprocessor a discrete logic e.g. ASIC an analog circuit a digital circuit a programmed logic device a memory device containing instructions and so on. Logic may include one or more gates combinations of gates or other circuit components. Where multiple logics are described it may be possible to incorporate the multiple logics into one physical logic. Similarly where a single logic is described it may be possible to distribute that single logic between multiple physical logics.

While example systems methods and so on have been illustrated by describing examples and while the examples have been described in considerable detail it is not the intention of the applicants to restrict or in any way limit the scope of the appended claims to such detail. It is of course not possible to describe every conceivable combination of components or methodologies for purposes of describing the systems methods and so on described herein. Therefore the disclosure is not limited to the specific details the representative apparatus and illustrative examples shown and described. Thus this application is intended to embrace alterations modifications and variations that fall within the scope of the appended claims.

To the extent that the term includes or including is employed in the detailed description or the claims it is intended to be inclusive in a manner similar to the term comprising as that term is interpreted when employed as a transitional word in a claim.

To the extent that the term or is used in the detailed description or claims e.g. A or B it is intended to mean A or B or both . When the applicants intend to indicate only A or B but not both then the phrase only A or B but not both will be used. Thus use of the term or herein is the inclusive and not the exclusive use. See Bryan A. Garner A Dictionary of Modern Legal Usage 624 2d. Ed. 1995 .

