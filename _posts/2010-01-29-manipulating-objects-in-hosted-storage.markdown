---

title: Manipulating objects in hosted storage
abstract: In aspect an application may be configured to issue a request to store an object, with the request including an object reference. A delegate may be configured to receive the request to store the object, determine a hosted storage service, from among multiple hosted storage services, and a corresponding access protocol based on the object reference, and store the object in the hosted storage service using the corresponding protocol.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08892677&OS=08892677&RS=08892677
owner: Google Inc.
number: 08892677
owner_city: Mountain View
owner_country: US
publication_date: 20100129
---
Hosted or cloud based storage refers to off site or remote data storage that is typically provided by a third party. The third party may implement the hosted storage in a data center and provide access to the hosted storage over a network such as the Internet.

In one aspect a request to store an object is received from an application implemented by one or more processing devices. The request includes an object reference. A hosted storage service may be determined from among multiple hosted storage services as well as a corresponding access protocol based on the object reference. The object is stored in the hosted storage service using the corresponding protocol.

Implementations may include one or more of the following features. Storing the object in the hosted storage service using the corresponding access protocol may include generating an object identifier for the object with the object identifier conforming to an object namespace of the hosted storage service and storing the object in the determined hosted storage service using the object identifier and the corresponding access protocol. The object reference may include a storage group name such that determining the hosted storage service and the corresponding access protocol based on the object reference includes determining a hosted storage service and corresponding access protocol associated with the storage group name. The object reference may include an object name and the object identifier may be associated with the object name.

A request to retrieve the object may be received from the application. The request to retrieve the object may include the object reference. The hosted storage service may be determined from among multiple hosted storage services as well as the corresponding access protocol based on the object reference. The object may be retrieved from the hosted storage service using the corresponding access protocol and provided to the application. Retrieving the object from the hosted storage service using the corresponding access protocol may include determining an object identifier based on the object reference with the object identifier conforming to an object namespace of the hosted storage service and retrieving the object from the hosted storage service using the corresponding access protocol and determined object identifier.

The object reference may include a storage group name and an object name such that determining the hosted storage service and corresponding access protocol based on the object reference includes determining the hosted storage service and corresponding access protocol associated with the storage group name and determining the object identifier based on the object reference includes determining the object identifier based on the object name. A request to associate the hosted storage service with the storage group name may be received and the hosted storage service may be associated with the storage group name such that determining the hosted storage service based on the association between the object reference and the hosted storage service includes determining the hosted storage service based on the association between the hosted storage service and the storage group name.

A request to select a hosted storage service from among multiple hosted storage services may be received with the request including one or more storage parameters. The hosted storage service may be selected based on the storage parameters and in response to selecting the hosted storage service an identifier of the hosted storage service may be provided to the application. The request to associate the hosted storage service with the storage group name may include the identifier of the hosted storage service such that receiving the request to associate the hosted storage service with the storage group name comprises receiving the identifier of the hosted storage service. The storage parameters may include one or more of a size of the object a minimum level of security whether queries should be supported a minimum latency a maximum cost metric or a minimum privacy protection. Selecting the hosted storage service based on the storage parameters may include selecting the hosted storage service and one or multiple datastores in the hosted storage service based on the storage parameters.

The request to store the object may be received at a delegate and the delegate may be implemented by the client device or the delegate may be implemented as a web service by one or more server devices.

In another aspect a system includes one or more processing devices and a storage medium storing instructions that when executed by the one or more processing devices cause the one or more processing devices to implement an application and a delegate. The application is configured to issue a request to store an object with the request including an object reference. The delegate is configured to receive the request to store the object determine a hosted storage service from among multiple hosted storage services and a corresponding access protocol based on the object reference and store the object in the hosted storage service using the corresponding protocol.

Implementations may include one or more of the following features. To store the object in the hosted storage service using the corresponding access protocol the delegate may be configured to generate an object identifier for the object with the object identifier conforming to an object namespace of the hosted storage service and store the object in the determined hosted storage service using the object identifier and the corresponding access protocol. The object reference may include a storage group name such that to determine the hosted storage service and the corresponding access protocol based on the object reference the delegate is configured to determine the hosted storage service and corresponding access protocol based on the storage group name. The object reference may include an object name and the delegate may be configured to associate the object identifier with the object name.

The application may be configured to issue a request to retrieve the object with the request to retrieve the object including the reference name and the delegate may be configured to receive the request to retrieve the object determine the hosted storage service from among multiple hosted storage services and the corresponding access protocol based on the object reference retrieve the object from the hosted storage service using the corresponding access protocol and provide the retrieved object to the application. To retrieve the object from the hosted storage service using the corresponding access protocol the delegate may be configured to determine an object identifier based on the object reference with the object identifier conforming to an object namespace of the hosted storage service and retrieve the object from the hosted storage service using the corresponding access protocol and determined object identifier.

The object reference may include a storage group name and an object name such that to determine the hosted storage service and corresponding access protocol based on the object reference the delegate is configured to determine the hosted storage service and corresponding access protocol based on the storage group name and to determine the object identifier based on the object reference the delegate is configured to determine the object identifier based on the object name. The delegate may be configured to receive a request to associate the hosted storage service with the storage group name and associate the hosted storage service with the storage group name such that to determine the hosted storage service based on the association between the object reference and the hosted storage service the delegate is configured to determine the hosted storage service based on the association between the hosted storage service and the storage group name. The delegate may be configured to receive a request to select a hosted storage service from among multiple hosted storage services the request including one or more storage parameters select the hosted storage service based on the storage parameters and in response to selecting the hosted storage service provide an identifier of the hosted storage service to the application.

In another aspect a request to associate a hosted storage service with a storage group name may be received from an application implemented by one or more processing devices. In response to receiving the request to associate the hosted storage service with the storage group name the hosted storage service is associated with the storage group name. A request to store an object is received from the application. The request includes the storage group name and an object name. In response to receiving the request to store the object the hosted storage service is determined from among multiple hosted storage services as well as a corresponding access protocol based on the association between the storage group name and the hosted storage service an object identifier for the object is generated and associated with the object name and the object is stored in the hosted storage service using the object identifier and the corresponding access protocol. The object identifier conforms to an object namespace of the hosted storage service. A request to retrieve the object is received from the application. The request includes the storage group name and the object name. In response to receiving the request to retrieve the object the hosted storage service is determined from among multiple hosted storage services as well as the corresponding access protocol based on the association between the storage group name and the hosted storage service the object identifier is determined based on the association between the object name and the object identifier and the object is retrieved from the hosted storage service using the object identifier and the corresponding access protocol. The retrieved object is provided to the application.

The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features and advantages will be apparent from the description and drawings and from the claims.

The client device can be implemented using a computing device such as the computing device or the mobile device described with respect to . The client device can communicate with the hosted storage services and via a network such as the Internet . The client device can communicate across the network using communication protocols such as for example one or more of Transmission Control Protocol Internet Protocol TCP IP Hypertext Transfer Protocol HTTP Secure Shell Remote Protocol SSH or Application Program Interfaces API . While only a single client device is shown there can be multiple client devices communicating across the network with the hosted storage services and or other services or devices.

The client device implements a client application by executing instructions on one or more processing devices. In some implementations the client application may be implemented by more than one client device. In some implementations the client application may be implemented as a web application running in a web browser. The client application can include functionality to store retrieve or otherwise access data on the client device as well as to store retrieve or otherwise access data in an off site hosted or cloud based data storage system such as the first hosted storage service and or the second hosted storage service .

The first and second hosted storage services and can be implemented such that client applications such as client application can store retrieve or otherwise manipulate data objects in the hosted storage services or . The hosted storage services and may be implemented by one or more server devices which can be implemented using a computing device such as the computing device or mobile device described with respect to . For example the hosted storage services and can be implemented by multiple server devices operating in the same or different data centers. The hosted storage service and the hosted storage service may be separate services provided by different entities or the same entity.

Each of the hosted storage services and can be accessed through an access protocol. For instance the hosted storage service or the hosted storage service can be implemented as a Web Service with a corresponding set of Web Service Application Programming Interfaces APIs . The Web Service APIs may be implemented for example as a Representational State Transfer REST based HTTP interface or a Simple Object Access Protocol SOAP based interface. The access protocol e.g. API for accessing the hosted storage service may be different than the access protocol for accessing hosted storage service . This may be the case both when the services are implemented by different entities and when the services are implemented by the same entity. In some implementations the access protocol may be the same for both of storage services and .

In general objects stored in the hosted storage service or the hosted storage service may be referenced by object identifiers. The hosted storage service and the hosted storage service may define namespaces to which a valid object identifier must conform. For example the namespace may require that object identifiers be a sequence of Unicode characters whose UTF 8 encoding is at most 1024 bytes long. As another example the namespace may require that object identifiers be globally unique identifiers GUIDs which may be 128 bit integers. As with the access protocols the namespace for objects implemented by the hosted storage service may be different than the namespace for objects implemented by the hosted storage service . This may be the case for example when these services are implemented by different entities but also may be the case when the services are implemented by the same entity.

In some implementations the hosted storage services and can provide access to stored data by applications running on computing devices geographically separate from each other provide offsite data backup and restore functionality provide data storage to a computing device with limited storage capabilities and or provide storage functionality not implemented on a computing device. Although two hosted storage services are shown there can be more or fewer hosted storage services. For instance in some implementations there may be only a single hosted storage service.

Hosted storage services may include a single type of datastore or multiple types of datastores. For example hosted storage service includes a single type of datastore that is referred to as datastore 1 . In such hosted storage services data that is stored by the hosted storage services can be received managed and stored in the same way. For example all data in datastore 1 may be stored as a Binary Large Objects BLOBs .

On the other hand hosted storage service includes two types of datastores that are referred to as datastore 1 and datastore 2 . In such hosted storage services the datastores can have different requirements limits available functions and performance profiles for example. For instance the datastore 1 can provide fast access to small data objects and can automatically build multiple search indexes to support different access methods e.g. datastore 1 may store data in a database format . By comparison the datastore 2 can accept much larger data objects store those objects more efficiently on disk e.g. by including less fragmentation of objects for faster disk reading but can not ensure speedy searching e.g. datastore 2 stores data as BLOBs . In this example a destination datastore for data sent from the client application can be selected based on the type size and expected use of the data.

A hosted storage service that has multiple types of datastores may provide a single access protocol for accessing the service and the service may determine which datastore is used. For instance the hosted storage service may provide a single access protocol to store retrieve or otherwise manipulate a data object with the hosted storage service selecting which of datastore 1 or datastore 2 is to be used to store a data object or components of a data object . Alternatively such a hosted storage service may have different access protocols for the different types of datastores. For example there may be one access protocol for datastore 1 and a different access protocol for datastore 2 .

Generally the storage delegate handles the storing and accessing of data objects in hosted storage for the client application . The storage delegate can provide an abstraction layer so that a developer of the client application does not have to worry about the specifics of accessing and storing data objects in the hosted storage services and . Rather the storage delegate may implement an API that allows a developer to generally reference an object while the delegate determines the hosted storage service in which the object is or should be stored and the appropriate actions needed to store retrieve or otherwise manipulate that object in the hosted storage service.

The client application can store data in local storage and or hosted storage. The client application can store some or all of the client application s data locally in a local file storage and a local structured datastore . In some implementations the local file storage can be a native file system directly accessible by the client application and the local structured datastore can be a datastore such as a relational database or software module that offers functionally not provided by the local file storage . Depending on the type of data the client application can be configured to store data in these two repositories according to the characteristics of the data and the way that the data is to be used and or accessed. For example the client application may store data that is required to be accessed with minimal latency in the local file storage or local structured store .

The client application can also store data in hosted storage such as hosted storage service and or hosted storage service . To do so the client application can for example use an API to send storage related requests to the storage delegate . To implement the requests the storage delegate can dynamically reference hosted storage services and associated datastores in the hosted storage services. For example the storage delegate may be able to receive data or commands that contain data objects from the client application and route the data to a hosted storage service and or datastore. In some implementations the storage delegate can for instance receive storage parameters from the client application for example for use in determining a hosted storage service and or datastore in which to store data.

From time to time additional hosted storage services and or datastores can become available. In these cases the storage delegate can reference the new hosted storage services and or datastores. In this way the client application can have access to the data storage functionality of the new systems.

Similarly hosted storage services and or datastores can become unavailable from time to time e.g. as a result of experiencing downtime or termination of a business contract providing access . In these cases the storage delegate can remove those hosted storage services and or datastores from consideration for storing data.

In some implementations the storage delegate can execute on the same computing device that executes the client application as for example a subsystem of the client application a dynamic linked library or an operating system daemon or service. If the delegate is implemented as a dynamic linked library for example the library may be updated from time to time to make new hosted storage services available or to remove hosted storage services that are no longer available.

In some implementations the storage delegate can execute on a different computing device than that which executes the client application . For example the delegate may be implemented as part of a hosted storage service e.g. in a front end or as a middleware layer in an enterprise software system. As another example the storage delegate may be implemented as a Web Service either as part of a hosted storage service or as a stand alone service.

As described above the hosted storage services and can have different access protocols. Similarly even when a single hosted storage service is accessed access to different types of datastores may use different access protocols e.g. there may be a different access protocols to access datastore 1 and datastore 2 .

In some implementations the storage delegate can hide this complexity from a developer of the client application by providing an abstraction layer. For instance the storage delegate may implement an API that allows a developer to generally reference an object while the delegate determines the hosted storage service in which the object is or should be stored and the appropriate actions needed to store retrieve or otherwise manipulate that object in the hosted storage service. The following are examples of API functions that can be provided by the storage delegate to the client application 

In the Put function the client application can specify a bucket name the name of a data object and a data object to be stored. The BucketName can represent a logical bucket or data container that can hold one or more data objects. The ObjectName can specify the name of the data object that can be stored in the bucket. In some implementations each data object within a bucket can be given a unique ObjectName. As an example the BucketName and ObjectName can be specified as being string data starting with a z A Z or 0 9 followed by an arbitrary number of additional characters including a z A Z or 0 9. The Object can be the data object to be stored in a hosted storage service and may be in a binary format. In some implementations the Object is cast in a particular format e.g. a serialized string before being passed to the Put function.

In the Get function the client application can request a stored data object by specifying a BucketName and ObjectName. In some examples the Get function can return a byte array e.g. Byte an untyped object or a protyped object and reflection techniques can be used to determine the class or type of object returned.

In the AssociateBucket function the client application can associate a bucket with a particular hosted storage service. The Storage parameter can represent the name or reference of a hosted storage service and or datastore and may be specified as a string. The name of the hosted storage service can be selected for example using the SelectService function or may be directly designated by the developer if the developer knows which service he or she wants to be used. The functionality provided by the Put Get and AssociateBucket functions can provide a system which organizes all data stored in hosted storage according to a single namespace defined by the combination of BucketName and ObjectName accessible by the client application .

In some implementations buckets may contain other buckets. In this case ObjectName may be simply ObjectName or it may be BucketName ObjectName such that the namespace may be defined by the combination of BucketName BucketName ObjectName with the BucketName in parenthesis being null when recursive buckets are not used. Recursive buckets may be used for example when implementing the multi tier delegates in system described below with respect to .

In the SelectService function the client can request the name or reference of a hosted storage service and or datastore that meets the specifications of the StorageParameters. The StorageParameters can be a collection of parameters such as for example an object s size a minimum level of security if the service should support queries a minimum performance metric a maximum cost metric and or a minimum privacy protection.

Thus for example a developer of the client application can use the SelectService function to select a particular hosted storage service and then associate that hosted storage service with a particular bucket name. When that bucket name is passed with a Put or Get function the delegate uses the particular hosted storage service for storing and retrieving the data object.

The following describes an example in which the client application is a photo library application running on a personal computer. The client application can import a collection of photos from a digital camera and store the photo files in the local file storage . The client application can also collect and create metadata about the photos e.g. exif data date and time of import or tags identifying people in the photos . The metadata can be stored in the local structured datastore which may be for example a database controlled by the client application .

The user can select a collection of photos to be stored in a hosted storage service. The client application can create a list of specifications for hosting the image files and a list of specifications for hosting the metadata files. In this example some or all of the features of the local file storage and the local structured datastore can be used to create the lists. The client application can request references to hosted storage destinations that meet the storage requirements from the storage delegate .

The storage delegate can identify that the hosted storage 1 contains a datastore 1 that offers query services supports undo and has a file size limit large enough to hold the metadata. The storage delegate can identify that the hosted storage 2 contains a datastore 2 that freely hosts large files. The storage delegate can return references to these two datastores and to the client . The client can create a bucket associated with the datastore 1 for photo metadata and a bucket associated with the datastore 2 for photo files.

The client application can send commands to store data to the storage delegate . These commands can specify a bucket and a data object to store in the bucket. The storage delegate can generate commands to send to the datastores and to store the data objects. The addresses or references to the data in the datastores and can be recorded in the storage delegate and associated with the buckets specified by the client application .

A request is received by the storage delegate from the client application to store an object . The request includes an object reference. For example the client application can call the Put function of the storage delegate specifying a BucketName ObjectName and Object. The combination of the BucketName and ObjectName can act as an object reference and may uniquely identify the object. In implementations that employ recursive buckets as described above the object reference may include BucketName ObjectName BucketName and Object.

The storage delegate determines a hosted storage service from among multiple hosted storage services and a corresponding access protocol based on the object reference . For example the BucketName can be mapped to a hosted storage service by the storage delegate . The storage delegate can determine the access protocol from a list of access protocols available for accessing the particular hosted storage service mapped to the BucketName. In some implementations if no hosted storage service is associated with the BucketName the storage delegate can determine from a list of known storage services and their associated access protocols a hosted storage service and corresponding access protocol capable of storing the object. The storage delegate then can associate the selected hosted storage service with the BucketName.

The storage delegate stores the object in the determined hosted storage service using the corresponding access protocol . For example a function call to store a data object can be identified in the access protocol and that function can be called using the object as a parameter. In some implementations the protocol specifies an address an identification variable or another reference to the object stored in the hosted storage service. This storage value or object identifier can be associated with the object reference by the storage delegate .

The storage delegate receives a request from the client application to retrieve the object . The request includes the object reference. For example the client application can call the Get function with the same BucketName and ObjectName as used in action .

The storage delegate determines the hosted storage service and corresponding access protocol based on the object reference . For example similarly to action the BucketName can be mapped to a hosted storage service by the storage delegate . Additionally the storage value associated with the object reference can be identified by the storage delegate .

The storage delegate retrieves the object from the hosted storage service using the corresponding access protocol . For example a function call to retrieve a stored data object can be identified in the access protocol and that function can be called to retrieve a copy of the object.

The storage delegate provides the retrieved object to the client application . For example the copy of the object can be passed from the storage delegate to the client application as the return value of the Get function.

The storage delegate receives a request from the client application to select a hosted storage service . This request includes storage parameters. For example the client application can identify the storage parameters associated with a data object to be stored in a hosted storage system. These parameters can include but are not limited to the object s size a minimum level of security if the service should support queries a minimum performance metric for example a minimum latency a maximum cost metric or a minimum privacy protection. These parameters can be formatted into for example a compound data type variable for example an array and received by the storage delegate .

For example a class of objects such as e mails may be relatively small but may need frequent and quick access. In this case a request to select a hosted storage service may designate a relatively small minimum object size and a minimum latency which are used to select the appropriate hosted storage service. As another example another class of objects for example medical records may be relatively large need to be queried and require stringent security and privacy protections. In this case the request to select a hosted storage service may designate a relatively large minimum object size supported that queries should be supported and high levels of minimum security and privacy protections which would be used to select an appropriate hosted storage service.

In response to receiving the request the storage delegate selects a hosted storage service from among multiple hosted storage services based on the storage parameters. For example multiple hosted storage services with associated service profiles may be known for example hosted storage services and . One or more hosted storage services can contain multiple datastores which each can have associated service profiles. One or more hosted storage services can be identified that meet the storage parameters including a hosted storage service that includes one or more datastores that do not meet the storage parameters. If multiple hosted storage services are selected one of these hosted storage services can be selected for example based on surpassing minimum criteria least network traffic or least cost. If a hosted storage service with multiple datastores is selected one of the datastores that meets the storage parameters can be selected.

Once the hosted storage service is selected the storage delegate returns an identifier of the selected storage service to the client application . For example a name or reference can be associated with the selected hosted storage service and or selected datastore by the storage delegate . This name or reference can be returned to the client application and any future communication from the client application that uses this identifier can be assumed to be in reference to the selected hosted storage service and or selected datastore.

The storage delegate receives a request from the client application to associate a hosted storage service with a storage group name . For example the storage group name received by a storage delegate can be a storage grouping for example a bucket created by the client application . The storage group can hold multiple data objects that can be related or organized together by the client application .

In response to receiving the request the storage delegate associates the hosted storage service with the storage group name . For example the hosted storage service and the storage group name can be entered into a database hash table bipartite graph and or a data structure associated with the hosted storage service.

The storage delegate receives a request from the client application to store an object . The request includes a storage group name and an object name where the object named is to be stored in the storage group.

In response to receiving the request the storage delegate determines a hosted storage service and corresponding access protocol associated with the storage group name . For example the storage group can be used to determine a hosted storage service and or datastore that was associated with the storage group name using the process . The hosted storage service and or datastore can be used to determine the access protocol for accessing the hosted storage service.

The storage delegate generates an object identifier for the object that conforms to the object namespace of the determined hosted storage service . As described above some hosted storage services may define a namespace that places requirements on the object identifiers used for the hosted storage service. The storage delegate can generate an object identifier that meets these requirements. In some implementations the hosted storage service may provide a function to request a new object identifier and in such a situation the storage delegate may generate an object identifier by requesting one from the hosted storage service. In some implementations the client application can provide to the storage delegate an object identifier that is compatible with the selected service. In such implementations the generation of the object identifier involves receiving the object identifier from the client application for example as part of the function call e.g. the object identifier may be passed through the function call to the delegate . The object name supplied by the client application can be associated with the object identifier for example by entering both in a row of a database entry into a hash table or by use of another data structure.

The storage delegate stores the object in the determined hosted storage service using the object identifier and corresponding access protocol . For example the particular access protocol may provide a storage function call in which the object and object identifier are passed to the hosted storage service for storage. In some implementations the functionality provided by the hosted storage service can cause the step and to be processed as a single step. For example if the hosted storage service does not return an object identifier until after or as part of the step of storing a data object the object identifier and the object name may be associated after storage.

The storage delegate receives a request from the client application to retrieve an object . The request includes a storage group name and an object name. For example the object can be an object that was previously stored on a hosted storage service such as by the Put function.

In response to receiving the request the storage delegate determines a hosted storage service and corresponding access protocol associated with the storage group name . For example the storage group name can be used to determine a hosted storage service and or datastore that was associated with the storage group name using the process . The hosted storage service and or datastore can be used to determine the access protocol for accessing the hosted storage service.

The storage delegate determines an object identifier associated with the object name . The object identifier for example may have been generated previously by the storage delegate and used to store the object in the hosted storage service for example using process . The object identifier therefore may generally conform to the namespace of the hosted storage service and correspond to the object identifier for the object in the hosted storage service.

The storage delegate retrieves the object from the determined hosted storage service using the object identifier and the corresponding access protocol of the determined hosted storage service . For example the particular access protocol may provide a retrieval function call in which the object identifier is passed to the hosted storage service and in response the hosted storage service returns the object to the storage delegate .

The storage delegate returns the retrieved object to the client application . For example the object can be returned to the client application as a function return.

The client application can store data in a local file storage and a local structured datastore . The client application can also store data in a datastore in a hosted storage service using the service delegate and one or both of the datastore delegates and . For example the service delegate and datastore delegates and may support API functions similar to those described with respect to storage delegate except that the service delegate is responsible for selecting a particular hosted storage service and communicating with that service s datastore delegate or while the datastore delegate or is responsible for selecting and communicating with a particular datastore in the selected hosted storage service.

For example the service delegate may implement the SelectService AssociateBucket Put and Get functions described above except that the service delegate only selects a particular hosted storage service for example based on some or all of the storage parameters and does not select a particular datastore. In this case the datastore delegates and may implement a service API which is accessible by the service delegate . The datastore delegates or then may for instance implement functions such as 1 SelectDatastore StorageParameters which selects a Datastore based on some or all of the storage parameters 2 AssociateBucket BucketName Datastore which associates BucketName with a particular Datastore 3 Put BucketName ObjectName Object which stores the object in the datastore associated with the BucketName and associates an object identifier of the object in the datastore with ObjectName and 4 a Get BucketName ObjectName which retrieves the object from the datastore associated with the BucketName using the object identifier associated with ObjectName. The BucketName and ObjectName passed to the datastore delegate or from the service delegate may be the same or different than the BucketName and ObjectName passed to the service delegate by the client application .

For example to store data in a datastore in a hosted storage system the client application can use the SelectService function to send a request to the service delegate to select a storage with the request including the storage parameters related to the capabilities of the storage and characteristics of the data object to be stored. The service delegate can receive the request and determine a particular hosted storage service or based on some or all of the storage parameters.

The service delegate can then use the SelectDatastore function to send to the datastore delegate or of the selected service a request to select a particular datastore with the request including some or all of the storage parameters. The selected storage delegate or can select a datastore or based on some or all of the storage parameters received. A reference to the selected datastore or can be returned to the service delegate which returns a reference to both the selected service and datastore to the client application.

The client application can then call the service delegate s AssociateBucket function passing the reference to the selected service and datastore to the function along with a bucket name. In some implementations the service delegate then associates the selected service with the bucket name and calls the selected datastore delegate s AssociateBucket function passing the reference to the selected datastore and the bucket name to the function. As a result the selected datastore delegate or associates the bucket name with the selected datastore. In some implementations the service delegate associates both the selected service and datastore with the bucket name.

The client application can store or retrieve an object by then calling the service delegate s Put or Get functions respectively. This results in the service delegate calling the Put or Get functions respectively of the selected datastore delegate or .

The computing device includes a processor a memory a storage device a high speed interface connecting to the memory and multiple high speed expansion ports and a low speed interface connecting to a low speed expansion port and the storage device . Each of the processor the memory the storage device the high speed interface the high speed expansion ports and the low speed interface are interconnected using various busses and may be mounted on a common motherboard or in other manners as appropriate. The processor can process instructions for execution within the computing device including instructions stored in the memory or on the storage device to display graphical information for a GUI on an external input output device such as a display coupled to the high speed interface . In other implementations multiple processors and or multiple buses may be used as appropriate along with multiple memories and types of memory. Also multiple computing devices may be connected with each device providing portions of the necessary operations e.g. as a server bank a group of blade servers or a multi processor system .

The memory stores information within the computing device . In some implementations the memory is a volatile memory unit or units. In some implementations the memory is a non volatile memory unit or units. The memory may also be another form of computer readable medium such as a magnetic or optical disk.

The storage device is capable of providing mass storage for the computing device . In some implementations the storage device may be or contain a computer readable medium such as a floppy disk device a hard disk device an optical disk device or a tape device a flash memory or other similar solid state memory device or an array of devices including devices in a storage area network or other configurations. Instructions can be stored in an information carrier. The instructions when executed by one or more processing devices for example processor perform one or more methods such as those described above. The instructions can also be stored by one or more storage devices such as computer or machine readable mediums for example the memory the storage device or memory on the processor .

The high speed interface manages bandwidth intensive operations for the computing device while the low speed interface manages lower bandwidth intensive operations. Such allocation of functions is an example only. In some implementations the high speed interface is coupled to the memory the display e.g. through a graphics processor or accelerator and to the high speed expansion ports which may accept various expansion cards not shown . In the implementation the low speed interface is coupled to the storage device and the low speed expansion port . The low speed expansion port which may include various communication ports e.g. USB Bluetooth Ethernet wireless Ethernet may be coupled to one or more input output devices such as a keyboard a pointing device a scanner or a networking device such as a switch or router e.g. through a network adapter.

The computing device may be implemented in a number of different forms as shown in the figure. For example it may be implemented as a standard server or multiple times in a group of such servers. In addition it may be implemented in a personal computer such as a laptop computer . It may also be implemented as part of a rack server system . Alternatively components from the computing device may be combined with other components in a mobile device not shown such as a mobile computing device . Each of such devices may contain one or more of the computing device and the mobile computing device and an entire system may be made up of multiple computing devices communicating with each other.

The mobile computing device includes a processor a memory an input output device such as a display a communication interface and a transceiver among other components. The mobile computing device may also be provided with a storage device such as a micro drive or other device to provide additional storage. Each of the processor the memory the display the communication interface and the transceiver are interconnected using various buses and several of the components may be mounted on a common motherboard or in other manners as appropriate.

The processor can execute instructions within the mobile computing device including instructions stored in the memory . The processor may be implemented as a chipset of chips that include separate and multiple analog and digital processors. The processor may provide for example for coordination of the other components of the mobile computing device such as control of user interfaces applications run by the mobile computing device and wireless communication by the mobile computing device .

The processor may communicate with a user through a control interface and a display interface coupled to the display . The display may be for example a TFT Thin Film Transistor Liquid Crystal Display display or an OLED Organic Light Emitting Diode display or other appropriate display technology. The display interface may comprise appropriate circuitry for driving the display to present graphical and other information to a user. The control interface may receive commands from a user and convert them for submission to the processor . In addition an external interface may provide communication with the processor so as to enable near area communication of the mobile computing device with other devices. The external interface may provide for example for wired communication in some implementations or for wireless communication in other implementations and multiple interfaces may also be used.

The memory stores information within the mobile computing device . The memory can be implemented as one or more of a computer readable medium or media a volatile memory unit or units or a non volatile memory unit or units. An expansion memory may also be provided and connected to the mobile computing device through an expansion interface which may include for example a SIMM Single In Line Memory Module card interface. The expansion memory may provide extra storage space for the mobile computing device or may also store applications or other information for the mobile computing device . Specifically the expansion memory may include instructions to carry out or supplement the processes described above and may include secure information also. Thus for example the expansion memory may be provide as a security module for the mobile computing device and may be programmed with instructions that permit secure use of the mobile computing device . In addition secure applications may be provided via the SIMM cards along with additional information such as placing identifying information on the SIMM card in a non hackable manner.

The memory may include for example flash memory and or NVRAM memory non volatile random access memory as discussed below. In some implementations instructions are stored in an information carrier. that the instructions when executed by one or more processing devices for example processor perform one or more methods such as those described above. The instructions can also be stored by one or more storage devices such as one or more computer or machine readable mediums for example the memory the expansion memory or memory on the processor . In some implementations the instructions can be received in a propagated signal for example over the transceiver or the external interface .

The mobile computing device may communicate wirelessly through the communication interface which may include digital signal processing circuitry where necessary. The communication interface may provide for communications under various modes or protocols such as GSM voice calls Global System for Mobile communications SMS Short Message Service EMS Enhanced Messaging Service or MMS messaging Multimedia Messaging Service CDMA code division multiple access TDMA time division multiple access PDC Personal Digital Cellular WCDMA Wideband Code Division Multiple Access CDMA2000 or GPRS General Packet Radio Service among others. Such communication may occur for example through the transceiver using a radio frequency. In addition short range communication may occur such as using a Bluetooth WiFi or other such transceiver not shown . In addition a GPS Global Positioning System receiver module may provide additional navigation and location related wireless data to the mobile computing device which may be used as appropriate by applications running on the mobile computing device .

The mobile computing device may also communicate audibly using an audio codec which may receive spoken information from a user and convert it to usable digital information. The audio codec may likewise generate audible sound for a user such as through a speaker e.g. in a handset of the mobile computing device . Such sound may include sound from voice telephone calls may include recorded sound e.g. voice messages music files etc. and may also include sound generated by applications operating on the mobile computing device .

The mobile computing device may be implemented in a number of different forms as shown in the figure. For example it may be implemented as a cellular telephone . It may also be implemented as part of a smart phone personal digital assistant or other similar mobile device.

Various implementations of the systems and techniques described here can be realized in digital electronic circuitry integrated circuitry specially designed ASICs application specific integrated circuits computer hardware firmware software and or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and or interpretable on a programmable system including at least one programmable processor which may be special or general purpose coupled to receive data and instructions from and to transmit data and instructions to a storage system at least one input device and at least one output device.

These computer programs also known as programs software software applications or code include machine instructions for a programmable processor and can be implemented in a high level procedural and or object oriented programming language and or in assembly machine language. As used herein the terms machine readable medium and computer readable medium refer to any computer program product apparatus and or device e.g. magnetic discs optical disks memory Programmable Logic Devices PLDs used to provide machine instructions and or data to a programmable processor including a machine readable medium that receives machine instructions as a machine readable signal. The term machine readable signal refers to any signal used to provide machine instructions and or data to a programmable processor.

To provide for interaction with a user the systems and techniques described here can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input.

The systems and techniques described here can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here or any combination of such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network . Examples of communication networks include a local area network LAN a wide area network WAN and the Internet.

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

Although a few implementations have been described in detail above other modifications are possible. For example while a client application is described as accessing the delegate s in other implementations the delegate s may be employed by other applications implemented by one or more processors such as an application executing on one or more servers. In addition the logic flows depicted in the figures do not require the particular order shown or sequential order to achieve desirable results. In addition other actions may be provided or actions may be eliminated from the described flows and other components may be added to or removed from the described systems. Accordingly other implementations are within the scope of the following claims.

