---

title: Automatic suspend atomic hardware transactional memory in response to detecting an implicit suspend condition and resume thereof
abstract: An apparatus and method is disclosed for a computer processor configured to access a memory shared by a plurality of processing cores and to execute a plurality of memory access operations in a transactional mode as a single atomic transaction and to suspend the transactional mode in response to determining an implicit suspend condition, such as a program control transfer. As part of executing the transaction, the processor marks data accessed by the speculative memory access operations as being speculative data. In response to determining a suspend condition (including by detecting a control transfer in an executing thread) the processor suspends the transactional mode of execution, which includes setting a suspend flag and suspending marking speculative data. If the processor later detects a resumption condition (e.g., a return control transfer corresponding to a return from the control transfer), the processor is configured to resume the marking of speculative data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08739164&OS=08739164&RS=08739164
owner: Advanced Micro Devices, Inc.
number: 08739164
owner_city: Sunnyvale
owner_country: US
publication_date: 20100224
---
Hardware Transactional Memory HTM is a mechanism in computer architecture for supporting parallel programming. With HTM programmers may simply declare a group of instructions as a transaction and the HTM system guarantees that the instructions in the transaction are executed in an atomic and isolated way. Atomicity means that all the instructions of the transaction are executed as a single atomic block with respect to all other concurrent threads of execution. Isolation means that no intermediate result of the transaction is exposed to the rest of the system until the transaction completes. HTM systems may allow transactions to run in parallel as long as they do not conflict. Two transactions may conflict when they both access the same memory area and either of the two transactions writes to that memory area.

Many existing HTM designs present correctness and or security issues in the presence of program control transfers such as transfers to an operating system in response to a system call exception interrupt signal or other event. Traditionally such program control transfers may occur transparently to the HTM system. If such a transfer occurs during transactional execution operating system code may be executed as part of a transaction. This may cause problems with correctness and or security. In some traditional systems if the transaction is aborted while executing in the operating system unexpected side effects may occur.

In one example consider a TCP IP network device driver. When receiving a packet from the network an interrupt is triggered to execute the device driver code. Suppose that the processor receives the interrupt while running an application transaction. The program control would be transferred to the device driver and under a traditional HTM system the driver would run as part of the transaction since the traditional HTM design simply considers all the instructions between the start and end of the transaction to be part of the transaction.

This behavior may cause at least two problems. First a system failure may occur if the transaction is aborted while the device driver code executes. For example if the device driver is configured to write memory mapped registers to manage the network interface hardware and is aborted in the middle of changing the register values the interface hardware may be left in an inconsistent state breaking the integrity of the network system. Additionally in the example given above aborting the transaction during or after the device driver executes as part of the transaction may cause the network connection to lose packets. For example after the driver code processes a packet the driver sends an acknowledge message to the packet sender. At this point the sender may delete the packet since there is no need for retransmission. However if the transaction is later aborted the memory write operations that were used to store the packet on the receiver may be rolled back and the packet may be permanently lost thereby violating the reliable communication guarantee of the TCP IP system.

Second security issues are another side effect of transparently jumping to operating system code as part of a transaction. Many modern processors support security features to separate operating system and application code execution. For example the x86 architecture allows an operating system and applications to use different code segments and privilege levels e.g. user level vs. kernel level privilege by switching the code segment selector at the boundary of system calls. However traditional HTM systems often do not checkpoint and manage some parts of processor state such as the code segment selector. When a transaction that originates in user level code executes a system call to the operating system the privilege level is increased. If the transaction aborts a traditional HTM may not be configured to restore the privilege level to the lower level. Accordingly a security leak may result. Malicious programs may be able to take advantage of this security hole to acquire an operating system privilege level after a transactional abort.

An apparatus and method is disclosed for a computer processor configured to access a memory shared by a multiple processing cores and to execute memory access operations in a transactional mode as a single atomic transaction. The apparatus is configured to suspend the transactional mode in response to determining an implicit suspend condition. As part of executing the transaction the processor marks data accessed by the speculative memory access operations as being speculative data. In response to determining an implicit suspend condition including by detecting a control transfer in a thread being executed such as to an operating system the processor suspends the transactional mode of execution which includes setting a suspend flag and suspending the marking of speculative data. Later if the processor detects a resumption condition e.g. by detecting a return control transfer corresponding to a return from the control transfer the processor resumes the transactional mode of execution by resuming the marking of speculative data.

In some embodiments the processor may be further configured to detect that the atomic transaction has failed while the transaction is suspended. In some embodiments the processor may be responsive to detecting that a suspended transaction failed by setting an abort flag and checking the abort flag when an attempt is made to resume the transaction. If the check determines the abort flag to be set then the processor aborts the transaction. In some embodiments the processor may be configured to save restore values of the abort flag and or the suspend flag as part of the execution context.

Any headings used herein are for organizational purposes only and are not meant to limit the scope of the description or the claims. As used herein the word may is used in a permissive sense i.e. meaning having the potential to rather than the mandatory sense i.e. meaning must . Similarly the words include including and includes mean including but not limited to.

Traditional HTM designs present correctness and or security issues in the presence of program control transfers. As used herein the term control transfer refers to an instruction or event that signals causes or indicates a change in program flow e.g. from some executing software program to some supervisory program or error or interrupt handler and vice versa. In some embodiments the supervisory program may be an operating system. In various embodiments different operating systems may be used e.g. Linux Windows etc. each of which may be implemented as software that supports a computer s basic functions such as scheduling tasks executing applications and controlling peripherals. In some embodiments the operating system may include a kernel for implementing basic functionality. In various embodiments the kernel of the operating system may be monolithic or may be a micro kernel.

In some embodiments one or more operating systems may be virtual e.g. the operating system may be a guest OS within a virtual machine . In such embodiments a control transfer may transfer program control between a program and a virtual operating system to a hypervisor used to deploy the virtual operating system or to another runtime system. While the embodiments described herein refer to transfer controls to from an operating system it should be understood that embodiments may be adapted to include transfers to from virtual operating systems hypervisors and or any other runtime system. As such unless otherwise indicated a control transfer is not limited to a change in program flow between some executing code and the operating system on which it is running.

In different circumstances a control transfer may be performed in response to detecting different events such as a program executing a system call to an operating system a software and or hardware exception a hardware interrupt a software signal or other event. Each control transfer from an application to an operating system may have a corresponding return control transfer such that the return control transfer returns control to the program from which the original suspending control transfer occurred. For example if a program invokes a system call to control transfer to the operating system the operating system may respond by executing some functionality and then returning control to the point in the invoking program immediately following the system call invocation.

In various embodiments a hardware transactional memory system HTM may provide functionality for executing a plurality of memory access operations as a single atomic transaction. In some embodiments a program may execute an initiating instruction to initiate a transactional mode of execution and a subsequent terminating instruction to end the transactional mode of execution. The HTM may be configured to ensure that some or all of the memory operations executed by the application in the transactional mode i.e. between the initiating and terminating instructions are performed atomically with respect to the execution of other threads processors in the system.

To ensure atomic execution the HTM may be configured to treat memory access operations of the transaction as speculative until the transaction is successfully committed and to monitor for an abort condition. For example the HTM may mark data written or read by the speculative instructions during the transactional mode of execution as speculative and if the transaction completes successfully i.e. no abort condition was detected the HTM may mark the data as non speculative and or otherwise incorporate it into the shared memory. On the other hand if an abort condition is detected then the HTM may be configured to drop invalidate the speculative data and or to roll back effects of speculative data writes to shared memory.

According to various embodiments hardware mechanisms e.g. on the processor may be configured to automatically detect a suspension condition including by detecting a program control transfer within an active transaction and to respond by suspending the transactional execution mode. In some embodiments the HTM may be configured to subsequently detect the corresponding return control transfer and if appropriate resume the transactional mode of execution.

In some embodiments while the transactional execution mode is suspended the processor does not mark data accessed by memory operations as speculative. Thus in such embodiments if a transaction is aborted memory access operations that were executed while transactional mode was suspended would not be rolled back.

In some embodiments if an abort condition is detected while transactional execution is suspended the HTM may be configured to delay aborting the transaction until after the transactional mode resumes. For example in response to detecting an abort condition caused by e.g. a data conflict the HTM may set an abort flag and continue to execute in suspended transactional mode. Upon resuming transactional execution mode the HTM may check the abort flag and perform the abort if the flag is set.

In various embodiments suspension resumption of transactional execution mode may be performed by the HTM in a manner that is transparent to the executing software. That is since the HTM is configured to automatically detect suspend resume conditions and to suspend resume transactional execution mode software e.g. program and or operating system need not be modified to execute specialized instructions to instruct the HTM to suspend or resume the transactional execution mode at appropriate times.

According to the illustrated embodiment computer processor includes HTM for implementing hardware transactional memory functionality with suspend resume capabilities as described above. In various embodiments HTM may mark speculative data in different ways. For example HTM may use a cache based speculative data buffer including by storing and marking speculative data in a data cache such as data cache . In other embodiments speculative data buffers may be implemented in other structures such as in a load store or load store queue. In different embodiments each processor may implement multiple cooperating speculative data buffers e.g. in data cache and in a load store queue 

In system HTM includes various hardware units including control transfer detection unit transaction suspension unit conflict detection unit and overflow detection unit . In various embodiments different ones of these components may be combined in whole or part or broken into further subcomponents.

In some embodiments control transfer detection unit may be configured to determine a suspend condition. In certain embodiments this suspend condition may be an implicit suspend condition meaning that the suspend condition is determined based on some set of criteria other than the existence of an explicit instruction e.g. pause or suspend . In some embodiments unit may be configured to determine that a suspend condition exists based in part on detecting a control transfer in a thread that is being executed by processor . For example control transfer detection unit may detect a control transfer caused by a system call invocation or a hardware interrupt e.g. I O interrupt .

In various embodiments determining a suspend condition may also include confirming that processor is currently in transactional execution mode and or that the processor is executing in a lower level e.g. application level of privilege rather than at a higher level e.g. kernel level of privilege. For example in some systems a current privilege level CPL is stored in a register e.g. of registers and may hold values indicating various levels of privilege. In such systems at higher levels of privilege the system grants an executing thread access to protected resources such as various memory regions I O ports and or special instructions. On the x86 architecture for example there are 4 privilege levels ranging from 0 which is the most privileged to 3 which is least privileged. On such systems level 0 is used for the kernel executive and level 3 for application programs. In some systems when software needs to execute instructions at an elevated privilege level such as when executing operating system code the software may execute one or more instructions to raise the level of privilege e.g. from 3 to 0 and execute one or more instructions to lower the level of privilege e.g. from 0 to 3 when the elevated privilege is no longer needed. In some systems operating system code may raise and lower privilege levels on entry and exit respectively.

In some embodiments control transfer detection unit may be configured to detect a suspension condition in response to detecting a a control transfer to the operating system b that the processor is executing in transactional mode and c that the current level of privilege is not elevated e.g. is 3 . In response to detecting the suspend condition control transfer detection unit may notify transaction suspension unit of the suspend condition. In response the transaction suspension unit may be configured to respond by suspending the transactional mode of execution such as by setting suspend flag in registers . As described above while transactional mode is suspended the processor is configured in some embodiments to suspend the marking of data accessed by memory operations as speculative. However data that was marked as speculative before the transactional mode was suspended is retained along with the speculative marks. Thus in certain embodiments if an abort occurs modifications to memory values that occurred during the suspension would not be rolled back while those that occurred before or after the transactional mode was suspended would be rolled back.

In some embodiments control transfer detection unit may be further configured to determine a resumption condition including by detecting a return control transfer corresponding to the control transfer that was detected to determine the suspend condition. For example if the control transfer that was detected to determine the suspend condition was a system call to the operating system the return transfer call may be the return from the system call.

In some circumstances a control transfer that originally causes a suspend condition referred to herein as the suspending transfer may be followed by one or more subsequent control transfers before a return from the suspending control transfer is executed. In this case although multiple return control transfers may be executed the transactional mode would not be resumed until the return control transfer corresponding to the suspending control transfer is executed.

In some embodiments the control transfer detection unit may be configured to respond to detecting the resumption condition by notifying the transaction suspension unit to resume the transactional mode of execution. In some embodiments resuming the transactional mode may include unsetting suspend flag and or checking abort flag as described below.

According to the illustrated embodiment HTM may include various other mechanisms and or units such as conflict detection unit . In various embodiments the conflict detection unit may be configured to detect different kinds of abort conditions. For example the conflict detection unit may be configured to monitor cache coherency messages probes received from other processors as part of a cache coherency protocol such as MESI or MOESI. If one or more such probes indicate a data conflict then the conflict detection unit determines that an abort condition exists and the transaction attempt may be aborted.

As described above in some embodiments the HTM may be configured to delay aborting a transaction attempt that is executing in suspended transactional mode until the transactional execution mode is resumed. In such embodiments in response to detecting an abort condition during suspended transactional mode the conflict detection unit may be configured to set an abort flag i.e. store a predetermined value in a suitable storage location such as rather than aborting and or rolling back the transaction right away. When the transactional mode of execution is resumed e.g. upon returning from the operating system kernel the HTM may detect that abort flag is set and respond by aborting the transaction attempt.

Various other hardware units may detect other abort conditions. For example overflow detection unit may be configured to detect an abort condition in the form of a speculative buffer overflow condition. A buffer overflow condition may be detected when executing the transaction requires that a given portion of data be buffered in a speculative buffer e.g. one implemented in data cache that has insufficient capacity to buffer the new speculative data. As used herein a speculative buffer overflow refers to an overflow condition being detected and not to a situation where speculative data is actually evicted from the buffer.

As with data conflicts if overflow detection unit detects an overflow condition while the processor is executing in suspended transactional mode then it may set abort flag which may cause HTM to abort rollback the transaction attempt when transactional execution mode is resumed.

According to the illustrated embodiment method begins when the processor begins executing in transactional mode as in . In some embodiments this may be performed in response to a software program executing one or more architected instructions to initiate transactional execution. Initiating transactional execution mode as in may include setting one or more flags such as in registers of system .

Once the processor is executing in transactional mode it may be configured to mark data accessed by speculative memory access operations as speculative as in . In some embodiments every memory access operation executed in transactional mode may be considered speculative and thus data accessed by each such memory access operation may be marked as speculative. In other embodiments a subset of the memory access operations within a transaction may be explicitly designated as speculative. In some such embodiments only the data accessed by each of these explicitly speculative instructions may be marked as speculative in .

In various embodiments the process of marking the data as speculative may be dependent on the type of speculative buffer being used by the HTM. For example for HTMs that buffer speculative data in a data cache marking the data as speculative may include storing a copy of the data in the data cache and marking the cache block of the cache containing the speculative data using one or more speculative bits. Marking a speculative bit may also be used for marking speculative data in buffers implemented by other structures such as a load store queue.

According to the illustrated embodiment at some point during transactional execution the HTM or some component thereof such as control transfer detection unit determines a suspend condition including by detecting a control transfer as in . In some embodiments a suspend condition may be one that indicates that program control is about to be transferred to the operating system kernel. For example in some embodiments a suspend condition may be detected in response to a system call being made and the current privilege level of the processor corresponding to some given application level e.g. this given privilege level may be 3 user or application level in some embodiments . In another example the suspend condition may be detected in response to detecting a hardware interrupt and that the CPL indicates an application level privilege such as level 3. Thus in such embodiments if a control transfer is detected during transactional execution the HTM may check the CPL to determine if the control transfer is one from an application to an operating system kernel. If so a suspend condition may be determined to exist.

As in method in response to detecting a suspend condition the HTM may suspend transactional execution as in . Suspending transactional execution may include setting a suspend flag e.g. suspend flag which refers to a value stored in some storage location which may signal to the HTM that transactional execution mode is suspended.

Once the transactional execution mode is suspended the processor may execute memory operations without marking accessed data as speculative as in . That is once control is transferred to the operating system the transactional execution mode is suspended and memory operations executed by the operating system are not treated as speculative and thereby not subject to rollback in the event of an abort. As described above in some embodiments a processor may not abort a transaction attempt while in suspended mode even if an abort condition is detected. In such embodiments the processor may respond to detecting an abort condition by setting an abort flag a value stored in some storage location and aborting including rolling back the transaction once transactional execution mode is resumed.

In method if the HTM detects a suspend condition as indicated by the affirmative exit from then the HTM may suspend the transactional mode such as by setting a suspend flag in . Detecting a suspend condition in may be analogous to detecting the suspend condition in of and may include detecting a control transfer into the operating system during an active not suspended transactional mode. In response to detecting a control transfer into the operating system the HTM may also record the type of control transfer used such that the appropriate return control transfer may later be identified. If no suspend condition is detected as indicated by the negative exit from then the transaction is not suspended.

According to method the processor then executes the next memory access instruction as in . If the transactional mode of execution is not suspended as indicated by the negative exit from then the HTM marks any speculative data accessed by the memory operation as speculative as in . For example if the operation is a read operation then the HTM may note that the memory location from which the value was read is part of the transaction s read set. Thus if an invalidating probe is received indicating that another processor has modified the value stored at the speculative memory location the processor detects an abort condition.

As described above in some embodiments every memory operation in an active transaction may be considered speculative while in other embodiments some data and or memory operations may be explicitly identified as speculative while others are not. In such embodiments a memory operation that accesses only non speculative data would not cause any data to be marked as speculative. For example in one such embodiment method may be augmented such that the negative exit from is further contingent on the memory operation and or data accessed by the memory operation having been explicitly marked as speculative.

In embodiments wherein a cache is used to implement the speculative data buffer the cache block corresponding to the read data may be marked using a speculative flag indicating that it was read in transactional execution mode. In some embodiments each cache block may comprise or be otherwise associated with a read speculative flag and a write speculative flag indicating the type of speculative memory access operation that was performed on the memory area if any . In various embodiments these flags may be combined or separate and may be used in different speculative buffers such as those implemented by a data cache a load store queue and or others.

According to the illustrated embodiment if the transaction is suspended as indicated by the affirmative exit from then no marking of speculative data as in is performed by the HTM. Instead the HTM may determine whether a resume condition exists as in . In some embodiments a resume condition may be detected in response to detecting a return control transfer from the operating system to the application. In some embodiments detecting such a return control transfer may include determining that a control transfer being executed or about to be executed is a return corresponding to the original suspending control transfer into the operating system. Additionally detecting a resume condition may be further dependent on the CPL indicating that the processor is executing in a privileged e.g. kernel level mode such as level 0.

In method if a resume condition is detected as indicated by the affirmative exit from then the transactional mode of execution may be resumed as in . Resuming the transactional mode of execution may include unsetting the suspend flag thereby indicating to the HTM that the marking of speculative data should resume as appropriate. As discussed below in reference to resuming the transactional mode may also include determining whether an abort condition was detected during the suspension e.g. by checking an abort flag .

In the illustrated embodiment of if the transaction includes more instructions as indicated by the affirmative exit from then the processor may repeat method as indicated by the feedback loop from to . Otherwise as indicated by the negative exit from the transaction may be committed as in . In various embodiments committing the transaction may include different steps. For example as part of committing the transaction the marked speculative data may be marked as non speculative. In some embodiments committing the transaction may include writing speculatively written data to shared memory or otherwise sharing the speculatively written values with the other processors in the system. The reader will note that although method includes executing at least one a memory access instruction between detecting a suspend condition in and detecting a resume condition in those skilled in the art will appreciate that this is not necessarily the case for all instances of suspended transactions.

According to method the HTM may detect an abort condition indicating that the transaction attempt failed as in . In various embodiments different circumstances may cause an abort condition including a data conflict with another processor or a speculative buffer overflow condition being detected as described above. For example a data conflict may occur if another processor accesses a memory area marked by the processor as speculative and either of the processors modified the data stored in the memory area. In another example of an abort condition may be detected in response to a speculative buffer overflow condition being detected such as when a speculative data buffer e.g. data cache has insufficient capacity to buffer all the speculative data accessed during the transaction. The buffer may have insufficient capacity because too much speculative and or non speculative data is being buffered simultaneously.

In traditional systems an HTM would abort a transaction immediately upon detecting the abort condition. However this may leave various structures of the operating system software in an inconsistent state. Instead HTMs in various embodiments may delay aborting a suspended transaction until after it resumes. For example in method of in response to detecting the abort condition in the HTM sets an abort flag as in and continues to execute in suspended transactional mode as in .

While execution continues in the operating system in suspended transactional mode various additional control transfers may be performed. At a later point the HTM may detect a resume condition as in in response to detecting a return control transfer matching the suspending control transfer and returning control to the application code.

According to the illustrated embodiment after returning to the application code and resuming transactional execution the HTM may determine whether the abort flag is set as in . If the abort flag is not set then the transaction did not fail during the suspended execution mode and so the HTM may clear the suspended flag and continue to execute in transactional mode. However in method the abort flag was set in so the HTM will determine in that the abort flag is set and in response abort the transaction as in .

As discussed above aborting the transaction in may include marking the speculative data as invalid. This may be referred to herein as dropping the speculative data. Once speculative data is dropped it is not stored to shared memory for access by other processors. For example if speculative data in a speculative buffer is marked as invalid the processor does not rely on this data for future instruction execution nor forwards it to shared memory. Furthermore no future transactional aborts or cache coherency actions need be taken to coordinate invalidated data with other processors in the system.

According to the illustrated embodiment if the processor is not in suspended transactional mode negative exit from and the current privilege level CPL is at a lower level of privilege e.g. application level 3 as indicated by the affirmative exit from then the HTM may record an indication of the control transfer event as in and suspend transactional execution mode as in .

In method after the transactional execution mode is suspended in the HTM may detect another control transfer as in . If this subsequent control transfer detected in is a return control transfer corresponding to the suspending control transfer of as indicated by the affirmative exit from then the processor may return execution to the application mode and the HTM may resume i.e. un suspend the transactional execution mode as in . However if the control transfer is not a return control transfer corresponding to the suspending control transfer of then the HTM may continue in transactional execution mode until the corresponding return control transfer is found as indicated by the feedback loop from to . In some instances a given transaction may suspend and or resume multiple times e.g. as indicated by the optional feedback loop from to before finally being committed.

In various embodiments any number of control transfers may be executed between the suspending transfer and its corresponding return control transfer. However in some embodiments only when the return control transfer corresponding to the suspending transfer is detected affirmative exit from will the HTM resume transactional mode.

Computer system may include one or more processors each of which may include multiple cores any of which may be single or multi threaded. As described herein an in each processor may comprise registers usable to store various flags and operands. Processor may further comprise data cache configured to cache accessed data and or to implement a speculative data buffer. For example data cache may include one or more bits associated with each cache block and usable to denote speculatively read and or written data. Processor may further include control transfer detection unit for detecting suspend resume conditions including by detecting control transfers. According to processor may also include transaction suspension unit for suspending resuming transactional execution mode as described herein.

In the illustrated embodiment the computer system may also include one or more off chip caches such as an off chip L2 or L3 cache. In some embodiments L2 and or L3 caches may be implemented on chip. Computer system may also include persistent storage devices e.g. optical storage magnetic storage hard drive tape drive solid state memory etc which may store data organized by a file system such as . Computer system may also include one or more network interfaces such as for transmitting and receiving data over any number of networks. Computer system may also include one or more memories e.g. one or more of cache SRAM DRAM RDRAM EDO RAM DDR 7 RAM SDRAM Rambus RAM EEPROM etc. . Various embodiments may include fewer or additional components not illustrated in e.g. video cards audio cards additional network interfaces peripheral devices a network interface such as an ATM interface an Ethernet interface a Frame Relay interface etc. 

The one or more processors storage device s off chip caches persistent storage devices network interface and system memories may be coupled through system interconnect . One or more of the system memories may contain program instructions and various data structures and variables . Program instructions may be encoded in platform native binary any interpreted language such as Java byte code or in any other language such as C C Fortran etc or in any combination thereof.

Program instructions may include program instructions executable to implement one or more single and or multi threaded programs which may utilize atomic memory transactions such as by executing initiating and commit instructions as described herein.

According to the illustrated embodiment memory may comprise program instructions executable to implement an operating system such as Windows and or Linux. In some embodiments operating system may include a kernel configured to execute various functions at an elevated level of privilege. For example operating system may expose an application programming interface API defining system calls that applications may invoke. In response to invoking such system calls processor may suspend an active transaction being executed by the application in a manner substantially transparent to applications and operating system as described herein.

The software programs such as applications may be provided as a computer program product or software that may include a computer readable storage medium having stored thereon instructions which may be used to program a computer system or other electronic devices to perform a process according to various embodiments. A computer readable storage medium may include any mechanism for storing information in a form e.g. software processing application readable by a machine e.g. a computer . The non transitory machine readable storage medium may include but is not limited to magnetic storage medium e.g. floppy diskette optical storage medium e.g. CD ROM magneto optical storage medium read only memory ROM random access memory RAM erasable programmable memory e.g. EPROM and EEPROM flash memory electrical or other types of medium suitable for storing program instructions. In addition program instructions may be communicated using optical acoustical or other form of propagated signal e.g. carrier waves infrared signals digital signals etc. .

A computer readable storage medium as described above can be used in one embodiment to store instructions read by a program and used directly or indirectly to fabricate the hardware comprising system processor . For example the instructions may describe one or more data structures describing a behavioral level or register transfer level RTL description of the hardware functionality in a high level design language HDL such as Verilog or VHDL. The description may be read by a synthesis tool which may synthesize the description to produce a netlist. The netlist may comprise a set of gates e.g. defined in a synthesis library which represent the functionality of processor . The netlist may then be placed and routed to produce a data set describing geometric shapes to be applied to masks. The masks may then be used in various semiconductor fabrication steps to produce a semiconductor circuit or circuits corresponding to processor . Alternatively the database on carrier medium may be the netlist with or without the synthesis library or the data set as desired.

The scope of the present disclosure includes any feature or combination of features disclosed herein either explicitly or implicitly or any generalization thereof whether or not it mitigates any or all of the problems addressed herein. Accordingly new claims may be formulated during prosecution of this application or an application claiming priority thereto to any such combination of features. In particular with reference to the appended claims features from dependent claims may be combined with those of the independent claims and features from respective independent claims may be combined in any appropriate manner and not merely in the specific combinations enumerated in the appended claims.

Although the embodiments above have been described in considerable detail numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications.

