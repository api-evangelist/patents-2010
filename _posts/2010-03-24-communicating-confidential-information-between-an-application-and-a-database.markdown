---

title: Communicating confidential information between an application and a database
abstract: Disclosed is a system and method for communicating confidential information in a resource friendly manner between an application and a database using an application programming interface, API. The method establishes first and second socket connections between the application and the database in an API connection between the application and the database. The first socket connection is arranged to be secure and the second socket connection is arranged to be non-secure. Information is then communicated through the first or second socket connection based on whether the information is identified as being confidential information or not. The evaluation of confidentiality may be undertaken at the client side of a JDBC or ODBC layer without putting any extra pressure on the database server side.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08924707&OS=08924707&RS=08924707
owner: Hewlett-Packard Development Company, L.P.
number: 08924707
owner_city: Houston
owner_country: US
publication_date: 20100324
---
When communicating information the security of confidential information or data is an important consideration. Secured socket layer SSL is an industry standard protocol for securing data communication across a communication link. SSL uses a key based encryption algorithm to provide for authentication confidentiality and data integrity. However SSL connections impose higher computational and resource requirements than non secure communications.

Java Database Connectivity JDBC is an Application Programming Interface API for the Java programming language that defines how a client application may access a database of information. Known JDBC drivers support SSL communication. A drawback associated with these JDBC drivers is that when they operate in the secure mode all communications with the database occur through SSL even if the information in the database is a mixture of confidential and non confidential data. Hence applications operating in secure mode suffer from reduced performance even when exchanging non confidential data with the database.

Database vendors typically implement interfaces in a proprietary manner and provide a Java API which client applications are required to use in order to communicate with the database. For database vendors which support SSL communication over JDBC there is generally provided a configuration file with which it is required to enable SSL for a secure connection to be established for example by setting a variable named ssl to the value true i.e. ssl true in the database configuration file database.conf . After enabling SSL all database communications will be via SSL meaning they will be encrypted so as to be securely transmitted.

It has been proposed that if an application requires dynamic security one can arrange the application to perform the following steps create one pool of JDBC connections over non secure sockets create another pool of JDBC connections over secure sockets decides before each database communication which JDBC pool to use in order to communicate with database. This known method has serious drawbacks because the application needs to be re compiled when any security related requirements are modified. Furthermore the application needs to maintain the connection pools and routing logic which can be error prone.

It should be understood that the Figures are merely schematic and are not drawn to scale. It should also be understood that the same reference numerals are used throughout the Figures to indicate the same or similar parts.

According to the invention there is provided a method that can be adopted to achieve context based network level security while communicating between an application and a database which caters for a mixture of confidential and non confidential information. Embodiments may enable dynamic security without needing any code re compilation for new or modified security requirements. Embodiments may also be easily integrated with legacy or conventional applications.

By employing an embodiment applications may therefore gain security on a need only basis without using any application level logic.

Embodiments may use eXtensible Markup Language XML files to represent the security requirements of a database. The security requirements can be evaluated for every Structured Query Language SQL query issued by the application against a pre defined requirement in an XML file and accordingly information may then be routed using either a secure or non secure mode of communication. Further the evaluation of confidentiality may be undertaken at the client side of a JDBC or ODBC layer without putting any extra pressure on the database server side.

Embodiments enable a user to define security requirements of a database. Security requirements or rules can be defined at the time of development by a developer using source code annotations at the time of the deployment by a field engineer or by an end user using XML files. These XML files are referred as Security Context Files SCFs . While developing a database centric application developers architects can identify information such as tables or columns of a table which needs to be treated as confidential and can annotate JDBC queries so that a SSL layer is used if this confidential information is communicated. Similarly an end user of the database centric application may define their own confidential data stores by using SCF files.

Embodiments present a new kind of JDBC driver which will evaluate source code annotations and SCF files to understand the security requirements of a particular database instance. The driver maintains two socket connections to the database for each connection at the JDBC layer. One socket connection is over SSL in other words secure and another is a normal non secure socket connection.

The driver parses each SQL query issued against the database and if it is established that a query is against confidential information it automatically routes the information packets through secured sockets and receives information from the database over these secured sockets. For queries which do not involve confidential information the information flows through non secure sockets. The logic is handled by the JDBC drivers and the application is unaware of a security model which is requirement or context sensitive.

By parsing queries at the client side embodiments may enable different clients to have their own definition of a confidential data store. For example client A which is outside an enterprise network can mark one sales table T as containing confidential date whereas client B which is inside the enterprise network might treat is as non confidential information because it is connecting to the database via the intranet.

During deployment of the application a user can create and or modify security rules or requirements thus enabling dynamic security .

In the first step step the JDBC driver determines whether or not the value of the SSL Dynamic variable equals dynamic i.e. whether or not dynamic security is to be implemented .

If the SSL variable does not equal dynamic the method proceeds to step in which it is determined whether or not a SSL connection is required for communication of information by determining whether the boolean variable SSL in the database configuration file database.conf is true or false . If the value of SSL equals true the method proceeds to step in which all database communications are securely made via a SSL connection. Otherwise if the value of SSL equals false the method proceeds to step in which all database communications are made via a normal non secure socket connection.

Returning now to step if the SSL Dynamic variable is equal to dynamic the method proceeds to step in which the JDBC driver checks for security annotations in source code of the application and then proceeds to step in which the JDBC driver checks for SCF files. Here the security requirements defined in the SCF file s supersedes those defined by the source code annotations and so the SCF files are used to overwrite the source code annotations.

Next in step the JDBC driver establishes first and second socket connections with the database at the JDBC layer connection. The first socket connection is arranged to be secure for example by using an SSL encryption protocol. The second socket connection is a normal non secure socket connection that does not employ an encryption method to secure information transmitted through it.

The method then proceeds to step . In step the JDBC driver parses SQL query statements that are passed to it using the statement interface. Proceeding to step the JDBC determines whether or not the query is trying to access update or insert confidential information. Based on the result of this determination the JDBC communicates the information through either the first secure socket connection or the second non secure socket connection. More specifically if in step the query is determined to relate to confidential information the JDBC driver communicates the required information via the secure socket connection step . On the other hand if in step the query is determined not to relate to confidential information the JDBC driver communicates the required information via the non secure socket connection step .

It will be appreciated that during designing and development of an application developers can identify information stores such as tables or columns of the database that contain confidential information or data. While querying confidential information developers can use annotations in the code to instruct the driver to send and receive data through SSL. For example when developers are querying user id and password from a user table of the database it needs to be secure by default. A sample client code with annotations may for example be as follows.

In the above exemplary source code snippet the developer has marked all the columns of the table user as a confidential data store. Thus as explained above in the case where the variable SSL Dynamic is set to dynamic in the configuration file of the JDBC driver the JDBC driver will route the database communication through a secure socket if any query involves accessing updating inserting the table user . Following this rule the query fired in the method AuthenticateUser will have to go through a secured communication channel.

As mentioned above another way to mention whether to use a secure socket communication or not is to use an XML based Security Context File SCF . In a SCF one can specify the name of the database table name column name which needs to be treated as a confidential data store. If the value of the variable SSL Dynamic is set to dynamic in the configuration file of the JDBC driver the JDBC driver will parse each SQL query to find out any of the SQL is trying to work on confidential data stores as explained in conjunction with in step of . If it is determined that the query relates to a confidential data store the JDBC driver will route the information traffic through a secure socket connection using a SSL based protocol for example.

According to this SCF file any query trying to access user id or password from the table user of myDB database needs to be routed to secured sockets using SSL since it is identified as containing confidential information.

It has been shown that embodiments can provide context sensitive security in applications to provide improved performance and reduced hardware requirements. This is also in line with attribute oriented programming AOP concepts.

Performance can be improved by not using secure communication method such as SSL for the communication of non confidential information.

Embodiments enable the design of a security module either at the development time or during the deployment time. This provides more power to the end user who can modify the security requirements according to changing needs.

Embodiments may also be seamlessly integrated with existing applications that use JDBC to connect to a database.

Although embodiments have been described above with respect to the use of JDBC it will be understood that embodiments can be implemented using other known Application Programming Interfaces APIs such as the Open Database Connectivity ODBC API.

It should be noted that the above mentioned embodiments illustrate rather than limit the invention and that those skilled in the art will be able to design many alternative embodiments without departing from the scope of the appended claims. In the claims any reference signs placed between parentheses shall not be construed as limiting the claim. The word comprising does not exclude the presence of elements or steps other than those listed in a claim. The word a or an preceding an element does not exclude the presence of a plurality of such elements. The invention can be implemented by means of hardware comprising several distinct elements. In the device claim enumerating several means several of these means can be embodied by one and the same item of hardware. The mere fact that certain measures are recited in mutually different dependent claims does not indicate that a combination of these measures cannot be used to advantage.

