---

title: System and method of performing dynamic voltage and frequency scaling operations on a mobile device
abstract: A mobile device, a method for managing and exposing a set of performance scaling algorithms on the device, and a computer program product are disclosed. The mobile device includes a multiple-core processor communicatively coupled to a non-volatile memory. The non-volatile memory includes a set of programs defined by a respective combination of a performance scaling algorithm and a set of parameters, a startup program that when executed by the multiple-core processor identifies at least one member of the set of programs suitable for monitoring operation of the mobile device and scaling the performance of an identified processor core and an application programming interface that exposes the set of programs.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08510740&OS=08510740&RS=08510740
owner: QUALCOMM Incorporated
number: 08510740
owner_city: San Diego
owner_country: US
publication_date: 20100916
---
Technological advances in wireless communication protocols energy storage density processor performance and efficiency and an increase in the density of cellular transmitters enabled the introduction of wireless digital networks in the 1990s. As use of second generation mobile devices became more widespread it became clear that the demand for data services which include access to the Internet was growing. The introduction of packet switching rather than circuit switching for data transmission with third generation wireless communication systems enabled the increases in data transmission rates required to deliver streaming media to a mobile device.

Today s data network capable mobile devices include high performance processors to provide a plethora of applications to the end user. However the demand for performance results in a corresponding increase in power consumption. The power dissipation in modern processors is rapidly increasing as both clock frequency and the number of transistors required for a given implementation increase. Unfortunately battery technology has not kept pace with the energy requirements of these data network capable wireless devices which leads to a design trade off between application performance and battery life. Even when it is determined that battery life can be sacrificed for full performance heat management may become problematic for both the battery and the electronic circuits within the often hand sized housings.

The demand for processors that provide high performance and low power consumption has led to the use of dynamic voltage and frequency scaling DVFS into processor designs. DVFS enables trade offs between power consumption and performance. Processors designed to take advantage of DVFS allow the clock frequency of the processor to be adjusted with a corresponding adjustment in voltage. Reducing clock frequency alone is not useful since any power savings is offset by an increase in execution time resulting in no net reduction in the total energy consumed. However a reduction in operating voltage results in a proportional savings in power consumed.

The central issue for DVFS enabled processors is how to control the balance between performance and power savings. A conventional DVFS control algorithm uses a measure of idle time to identify a modified performance level that permits a projected workload to be stretched in time to a deadline. That is idle time is reduced by operating the processor at a lower voltage and slower clock frequency. While this approach may be appropriate for a continuous and known workload many mobile device applications are interactive and or place irregular or unpredictable demands on the processor. Thus it is apparent that no one algorithm is optimal for all mobile device applications application combinations and uses.

A method for managing and exposing a set of performance scaling algorithms on a mobile device includes the steps of providing a set of performance scaling algorithms to a non volatile memory within the mobile device identifying a set of parameters appropriate for each of the respective members of the set of performance scaling algorithms associating the set of parameters with the respective member of the set of performance scaling algorithms in a non volatile memory to define a set of programs identifying at least one member of the set of programs suitable for scaling the performance of an identified processor core associating the at least one member of the set of programs with the identified processor core in the non volatile memory and creating an interface that exposes the set of programs.

An alternative embodiment of the method for managing and exposing a set of performance scaling algorithms on a mobile device includes the steps of providing a set of performance scaling algorithms to a non volatile memory within the mobile device wherein providing a set of performance scaling algorithms comprises providing power saving algorithms while minimizing performance impact on the mobile device identifying a set of parameters appropriate for each of the respective members of the set of performance scaling algorithms associating the set of parameters with the respective member of the set of performance scaling algorithms in a non volatile memory to define a set of programs identifying at least one member of the set of programs suitable for scaling the performance of an identified processor core associating the at least one member of the set of programs with the identified processor core in the non volatile memory and creating an interface that exposes the set of programs.

Still another alternative embodiment of a method for managing and exposing a set of performance scaling algorithms on a mobile device includes the steps of providing a set of performance scaling algorithms to a non volatile memory within the mobile device identifying a set of parameters appropriate for each of the respective members of the set of performance scaling algorithms associating the set of parameters with the respective member of the set of performance scaling algorithms in a non volatile memory to define a set of programs identifying at least one member of the set of programs suitable for scaling the performance of an identified processor core associating the at least one member of the set of programs with the identified processor core in the non volatile memory creating an interface that exposes the set of programs and selecting a first program from the set of programs to execute at startup.

Still another alternative embodiment of a method for managing and exposing a set of performance scaling algorithms on a mobile device includes the steps of providing a set of performance scaling algorithms to a non volatile memory within the mobile device identifying a set of parameters appropriate for each of the respective members of the set of performance scaling algorithms associating the set of parameters with the respective member of the set of performance scaling algorithms in a non volatile memory to define a set of programs identifying at least one member of the set of programs suitable for scaling the performance of an identified processor core associating the at least one member of the set of programs with the identified processor core in the non volatile memory creating an interface that exposes the set of programs selecting a first program from the set of programs to execute at startup and replacing the first program with a second program upon the identification of a defined event.

According to another aspect of the method for managing and exposing a set of performance scaling algorithms on a mobile device the method further includes the step of arranging the set of programs in a hierarchical order. In some embodiments the hierarchical order is structured from the most detailed members to the least detailed members.

According to an aspect of the various methods for managing and exposing a set of performance scaling algorithms on a mobile device the interface is accessible by one or more of a manufacturer and an operator of the mobile device.

According to another aspect a mobile device is disclosed. The mobile device includes a multiple core processor communicatively coupled to a non volatile memory. The non volatile memory has stored therein a set of programs defined by a respective combination of a performance scaling algorithm and a set of parameters a startup program that when executed by the multiple core processor identifies at least one member of the set of programs suitable for monitoring operation of the mobile device and scaling the performance of an identified processor core and an application programming interface that exposes the set of programs.

In some example embodiments the mobile device is one of a cellular telephone a pager a personal digital assistant a reader a satellite phone a navigation device or a computing device with a wireless connection.

In an example embodiment the mobile device includes a performance scaling algorithm that balances a load across multiple processor cores.

In an alternative embodiment the mobile device further includes a management application that when executed by a processor detects the occurrence of an event identifies a second member of the set of programs to replace the at least one member of the set of programs responsive to the event loads the second member for execution in the identified processor core and directs the identified processor core to execute the second member of the set of programs.

According to another aspect of the mobile device the application programming interface is accessible by one or more of a manufacturer and an operator of the mobile device.

According to still another aspect of the mobile device the non volatile memory stores the set of programs in a hierarchical order. In some embodiments the hierarchical order is structured from the most detailed members to the least detailed members.

Moreover a mobile device that manages a set of performance scaling algorithms operative on the mobile device includes mechanisms for associating and storing a set of performance scaling algorithms with a respective set of parameters to define a set of programs at least one member of the set of programs suitable for scaling the performance of an identified processor core the mechanisms for associating and storing including a respective indicator for identifying members of the set of programs suitable for execution on processor cores available on the mobile device and mechanisms for exposing the set of programs.

According to another aspect of the mobile device that manages a set of performance scaling algorithms one or more of the performance scaling algorithms includes a load balancing algorithm.

According to still another aspect of the mobile device that manages a set of performance scaling algorithms the mobile device further includes one or more mechanisms for detecting the occurrence of an event one or more mechanisms for identifying a second member of the set of programs to replace the at least one member of the set of programs responsive to the event and one or more mechanisms for loading and executing the second member.

According to still another aspect of the mobile device that manages a set of performance scaling algorithms one or more mechanisms for exposing exposes the set of programs to one or more of a manufacturer and an operator of the mobile device.

According to still another aspect of the mobile device that manages a set of performance scaling algorithms the one or more mechanisms for associating and storing arranges the set of programs in a hierarchical order. In some embodiments the hierarchical order is structured from the most detailed members to the least detailed members.

In still another aspect a computer program product is disclosed that includes a computer usable medium having a computer readable program code embodied therein. The computer readable program code is adapted to execute and to implement a method for managing a set of performance scaling algorithms on a mobile device. The method includes the steps of selecting a member from a set of programs suitable for scaling the performance of a processor core operable on the mobile device to define a select program the set of programs defined by a respective combination of a performance scaling algorithm and a respective set of parameters loading the select program in a processor operable on the mobile device in response to a startup sequence monitoring use of the mobile device to identify a condition indicative that a replacement program from the set of programs is to replace the select program and replacing the select program with the replacement program during run time.

According to another aspect of the computer program product the method for managing a set of performance scaling algorithms on a mobile device and specifically selecting a member includes searching a hierarchically arranged file system.

According to still another aspect of the computer program product the method for managing a set of performance scaling algorithms on a mobile device and specifically the step of monitoring use of the mobile device includes maintaining a list of active processes.

According to still another aspect of the computer program product the method for managing a set of performance scaling algorithms on a mobile device and specifically the step of monitoring use of the mobile device includes maintaining a list of active resources.

According to still another aspect of the computer program product the method for managing a set of performance scaling algorithms on a mobile device and specifically the step of monitoring use of the mobile device includes receiving an input from an operator interface.

The word exemplary is used herein to mean serving as an example instance or illustration. Any aspect described herein as exemplary is not necessarily to be construed as preferred or advantageous over other aspects.

In this description the term application may also include files having executable content such as object code scripts byte code markup language files and patches. In addition an application referred to herein may also include files that are not executable in nature such as documents that may need to be opened or other data files that need to be accessed.

In this description the term mobile device is used to describe any device operating on a limited capacity power supply such as a battery. Although battery operated mobile devices have been in use for decades technological advances in rechargeable batteries coupled with the advent of third generation 3G wireless technology have enabled numerous mobile devices with multiple capabilities. Therefore a mobile device could be a cellular telephone a satellite telephone a pager a PDA a smartphone a navigation device a smartbook or reader a media player a combination of the aforementioned devices a laptop computer with a wireless connection among others.

The introduction of multiple core processors and dedicated hardware resources for implementing various functions on a mobile device and a continuing desire for improvement in battery life has further complicated the task of dynamically adjusting a mobile device to reduce power consumption while providing an acceptable end user experience. In response an improved mobile device and methods for managing and exposing multiple performance scaling algorithms are disclosed. The number of different mobile devices available the various communication protocols or standards used to communicate with the devices the different types of applications available the different ways that the devices are used etc. make it clear that no single approach or solution can be adjusted or optimized for all possible operational combinations.

In response it is proposed to provide and implement a set of performance scaling algorithms on a mobile device. The availability of the set of performance scaling algorithms provides power saving opportunities while minimizing performance impact when select performance scaling algorithms are correctly applied. It is further proposed to expose the set of performance scaling algorithms to the manufacturers of the various mobile devices. It is believed that the manufacturers will be interested in providing select or optimized performance scaling solutions on mobile devices based on desired performance for various use conditions. These manufacturer selected or optimized solutions can be applied at startup. In some situations manufacturers may be willing to expose performance scaling alternatives to their customers via the respective mobile devices. In these situations the manufacturer can provide or modify an application programming interface that would enable an end user to fine tune their desired performance vs. battery life tradeoff that can be applied at startup or can provide for a run time selection and replacement of a performance scaling solution in real time. These alternative run time solutions could include a complete disabling of all performance scaling solutions on the mobile device.

The methods for managing and exposing performance scaling algorithms on a mobile device are generally implemented via a combination of software or firmware and hardware. The software and firmware can be stored in a non volatile memory element coupled to one or more processors operable on the mobile device. The software stored in the non volatile memory element is communicated to and executed by a suitable instruction execution system microprocessor . A hardware implementation on a mobile device can include any or a combination of the following technologies which are all well known in the art discrete electronic components a discrete logic circuit s having logic gates for implementing logic functions upon data signals an application specific integrated circuit having appropriate logic gates a programmable gate array s PGA a field programmable gate array FPGA etc.

Referring to this figure is a diagram of an exemplary non limiting aspect of a mobile device in the form of a wireless telephone. As shown the mobile device includes an on chip system that includes a digital signal processor and an analog signal processor that are coupled together. As illustrated in a display controller and a touchscreen controller are coupled to the digital signal processor . A touchscreen display external to the on chip system is coupled to the display controller and the touchscreen controller .

As further illustrated in a stereo audio CODEC may be coupled to the analog signal processor . Moreover an audio amplifier may be coupled to the stereo audio CODEC . In an exemplary aspect a first stereo speaker and a second stereo speaker are coupled to the audio amplifier . shows that a microphone amplifier may be also coupled to the stereo audio CODEC . Additionally a microphone may be coupled to the microphone amplifier . In a particular aspect a frequency modulation FM radio tuner may be coupled to the stereo audio CODEC . Also an FM antenna is coupled to the FM radio tuner . Further stereo headphones may be coupled to the stereo audio CODEC .

In a particular aspect one or more of the method steps described herein may implemented by executable instructions and parameters stored in the memory . These instructions may be executed by the digital signal processor the analog signal processor or another processor to perform the methods described herein. Further the processors the memory the instructions stored therein or a combination thereof may serve as a means for performing one or more of the method steps described herein.

The first core the second core through to the Nth core can be integrated on a single integrated circuit die or they may be integrated or coupled on separate dies in a multiple circuit package. Designers may couple the first core the second core through to the Ncore via one or more shared caches and they may implement message or instruction passing via network topologies such as bus ring mesh and crossbar topologies.

In the illustrated embodiment the RF transceiver is implemented via digital circuit elements and includes at least one processor such as the core processor labeled Core . In this digital implementation the RF transceiver is coupled to the memory via bus .

Each of the bus and the bus may include multiple communication paths via one or more wired or wireless connections as is known in the art. The bus and the bus may have additional elements which are omitted for simplicity such as controllers buffers caches drivers repeaters and receivers to enable communications. Further the bus and the bus may include address control and or data connections to enable appropriate communications among the aforementioned components.

When the logic used by the mobile device is implemented in software as is shown in it should be noted that one or more of startup logic management logic DVFS interface logic applications in application store and portions of the file system may be stored on any non transitory computer readable medium for use by or in connection with any computer related system or method.

In the context of this document a computer readable medium is an electronic magnetic optical or other physical device or means that can contain or store a computer program and data for use by or in connection with a computer related system or method. The various logic elements and data stores may be embodied in any non transitory computer readable medium for use by or in connection with an instruction execution system apparatus or device such as a computer based system processor containing system or other system that can fetch the instructions from the instruction execution system apparatus or device and execute the instructions. In the context of this document a non transitory computer readable medium can be any tangible storage media that may be accessed by a computer or a processor but excludes communication signals transmissions and all non tangible or transitory means that can communicate propagate or transport the program.

The non transitory computer readable medium can be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor memory system apparatus or device. More specific examples a non exhaustive list of the non transitory computer readable medium would include the following a portable computer diskette magnetic a random access memory RAM electronic a read only memory ROM electronic an erasable programmable read only memory EPROM EEPROM or Flash memory electronic and a portable compact disc read only memory CDROM optical .

In an alternative embodiment where one or more of the startup logic management logic and perhaps the DVFS interface logic are implemented in hardware the various logic may be implemented with any or a combination of the following technologies which are each well known in the art a discrete logic circuit s having logic gates for implementing logic functions upon data signals an application specific integrated circuit ASIC having appropriate combinational logic gates a programmable gate array s PGA a field programmable gate array FPGA etc.

The memory is a non volatile data storage device such as a flash memory or a solid state memory device. Although depicted as a single device the memory may be a distributed memory device with separate data stores coupled to the digital signal processor and or the core or additional processor cores in the RF transceiver .

The startup logic includes one or more executable instructions for selectively identifying loading and executing a select program for managing or controlling the performance of one or more of the available cores such as the first core the second core through to the Ncore . A select program can be found in the program store of the embedded file system and is defined by a specific combination of a performance scaling algorithm and a set of parameters . The select program when executed by one or more of the core processors in the digital signal processor and the core in the RF transceiver may operate in accordance with one or more signals provided by the monitor module to scale the performance of the respective processor core. In this regard the monitor module may provide one or more indicators of events processes applications resource status conditions elapsed time temperature etc.

The management logic includes one or more executable instructions for terminating an operative performance scaling program on one or more of the respective processor cores as well as selectively identifying loading and executing a more suitable replacement program for managing or controlling the performance of one or more of the available cores. The management logic is arranged to perform these functions at run time or while the mobile device is powered and in use by an operator of the device. A replacement program can be found in the program store of the embedded file system and is defined by a specific combination of a performance scaling algorithm and a set of parameters . The replacement program when executed by one or more of the core processors in the digital signal processor or the core in the RF transceiver may operate in accordance with one or more signals provided by the monitor module or one or more signals provided on the respective control inputs of the various processor cores to scale the performance of the respective processor core. In this regard the monitor module may provide one or more indicators of events processes applications resource status conditions elapsed time temperature etc.

The DVFS interface logic or interface logic includes one or more executable instructions for presenting managing and interacting with external inputs to observe configure or otherwise update information stored in the embedded file system . In one embodiment the interface logic may operate in conjunction with manufacturer inputs received via the USB port . These inputs may include one or more programs to be deleted from or added to the program store . Alternatively the inputs may include edits or changes to one or more of the programs in the program store . Moreover the inputs may identify one or more changes to or entire replacements of one or both of the startup logic and the management logic . By way of example the inputs may include a change to the management logic that instructs the mobile device to suspend all performance scaling in the RF transceiver when the received signal power falls below an identified threshold. By way of further example the inputs may include a change to the management logic that instructs the mobile device to apply a desired program when the video codec is active.

The interface logic enables a manufacturer to controllably configure and adjust an end user s experience under defined operating conditions on the mobile device . When the memory is a flash memory one or more of the startup logic the management logic the interface logic the application programs in the application store or information in the embedded file system can be edited replaced or otherwise modified. In some embodiments the interface logic may permit an end user or operator of the mobile device to search locate modify or replace the startup logic the management logic applications in the application store and information in the embedded file system . The operator may use the resulting interface to make changes that will be implemented upon the next startup of the mobile device . Alternatively the operator may use the resulting interface to make changes that are implemented during run time.

The embedded file system includes a hierarchically arranged DVFS store . In this regard the file system may include a reserved section of its total file system capacity for the storage of information for the configuration and management of the various parameters and performance scaling algorithms used by the mobile device . As shown in the DVFS store includes a core store which includes a program store which includes one or more DVFS programs. Each program is defined as a combination of a respective performance scaling algorithm and a set of parameters associated with the specific algorithm. As a further example of the hierarchical nature of the DVFS store a particular member of a set of files may be located and identified by the path of startup core0 algorithm parameterset. In this example a program is identified by the algorithm in combination with the contents of information stored in the parameter set. For example a conventional DVFS algorithm known as classic may be identified to manage performance scaling on core0 in accordance with the parameters sample rate samples to increase listed as up and samples to decrease listed as down as follows startup core0 classic samplerate contents where the sample rate is in MHz startup core0 classic up contents where the samples to increase is an integer and startup core0 classic down contents where the samples to decrease is an integer. That is the respective file names define a parameter and the value of the parameter is identified by the contents of the file. The algorithm is defined by a periodic sampling of the CPU idle percentage and operates in accordance with a low threshold idle and a high threshold idle . If a samples to increase threshold comparator indicates for 2 consecutive samples that performance should be increased the DVFS algorithm increases performance in accordance with a predetermined clock level adjustment. Conversely if a samples to decrease threshold comparator indicates for 1 consecutive sample that performance should be decreased the DVFS algorithm decreases performance in accordance with the predetermined clock level i.e. frequency adjustment. As explained above processor or core operating voltage may be changed together with changes in the clock frequency.

Alternatively or additionally the DVFS store may be arranged such that the operating system encounters the information stored therein in a sequence such that the first information encountered is the most detailed and wherein the last information encountered will be applied as a default should no other program be identified during the search as suitable for scaling performance of the respective processor core on the mobile device . For example parameters could be defined in the directories core0 coreall and default. The paths would be searched in that order for each parameter. The first parameter found will be the one used. The default location will always have a valid parameter file. The architecture of the individual cores the architecture of the one or more shared caches and the mechanism s used to pass instructions between the cores as well as the desired use cases for the mobile device are expected to dictate the nature of the various performance scaling algorithms stored in the memory .

Next as shown in block at least one member of the set of programs is identified for scaling the performance of an identified processor core. In block the identified processor core and the member of the set of programs identified in block are associated with one another. As indicated above this can be accomplished in a file system such as the file system by storing or otherwise arranging algorithms and parameters hierarchically under a specified core identifier. In block an interface that exposes the set of programs and the core associations is created. In optional block a first program is selected for execution to implement performance scaling on the available processor cores at startup. This can be accomplished by a search routine that traverses the DVFS store in an attempt to identify an appropriate DVFS program i.e. a combination of a performance scaling algorithm and a set of parameters for managing the operation of the respective processor core. Thereafter as shown in optional block the first program can be replaced during runtime with a second program upon identification of one or more of a defined event an operating condition a request for particular hardware resources application s etc.

As illustrated in example functionality of the computer program product is illustrated in the form of a flow diagram or method . The method begins with block where a member from a set of programs suitable for scaling the performance of a processor core operable on the mobile device is selected to define a program. As further illustrated in block the set of programs is defined by a respective combination of a performance scaling algorithm and a respective set of parameters that are applied with the algorithm. In block the select program is loaded or otherwise communicated to a processor core on the mobile device . As indicated in block this is accomplished in accordance with a startup sequence. One skilled in the art will understand that the startup sequence can be enabled in firmware software or even the operating system itself. Once the select program is communicated to the respective processor core the select program can be executed to scale the performance of the processor core or other processor cores operative on the mobile device as may be desired.

Thereafter as indicated in block use of the mobile device is monitored to identify a condition indicative that a replacement program from the set of programs is to replace the select program. In block the select program is replaced by the replacement program during run time. As indicated above the replacement of a select program with a replacement program can be accompanied with a managed termination of the select program before the replacement program is loaded and executed.

Certain steps in the processes or process flows described in this specification naturally precede others for the invention to function as described. However the invention is not limited to the order of the steps described if such order or sequence does not alter the functionality of the invention. That is it is recognized that some steps may be performed before after or in parallel substantially simultaneously with other steps without departing from the scope and spirit of the invention. In some instances certain steps may be omitted or not performed without departing from the invention. Further words such as thereafter then next etc. are not intended to limit the order of the steps. These words are simply used to guide the reader through the description of the exemplary method.

One of ordinary skill in the art of programming is able to write computer code or identify appropriate hardware to implement the disclosed processes without undue difficulty or experimentation. Therefore disclosure of a particular set of executable instructions or detailed hardware devices is not considered necessary for an adequate understanding of how to make and use the invention. The inventive functionality of the claimed mobile device and processes is explained in more detail in the above description and in conjunction with the Figures which may illustrate various process flows.

Additionally one of ordinary skill in programming is able to write computer code or identify appropriate hardware and or circuits to implement the disclosed invention without difficulty based on the flow charts and associated description in this specification for example.

Therefore disclosure of a particular set of program code instructions or detailed hardware devices is not considered necessary for an adequate understanding of how to make and use the invention. The inventive functionality of the claimed computer implemented processes is explained in more detail in the above description and in conjunction with the FIGs. which may illustrate various process flows.

In one or more exemplary aspects the functions described may be implemented in hardware software firmware or any combination thereof. If implemented in software the functions may be stored as one or more instructions or code on a non transitory computer readable medium. Non transitory computer readable media include computer storage media including any medium that facilitates transfer of a computer program from one place to another. A storage media may be any available media that may be accessed by a computer. By way of example and not limitation such non transitory computer readable media may comprise RAM ROM EEPROM CD ROM or other optical disk storage magnetic disk storage or other magnetic storage devices or any other medium that may be used to carry or store desired program code in the form of instructions or data structures and that may be accessed by a computer.

Disk and disc as used herein includes compact disc CD laser disc optical disc digital versatile disc DVD floppy disk and blu ray disc where disks usually reproduce data magnetically while discs reproduce data optically with lasers. Combinations of the above should also be included within the scope of non transitory computer readable media.

Although selected aspects have been illustrated and described in detail it will be understood that various substitutions and alterations may be made therein without departing from the scope of the present invention as defined by the following claims.

