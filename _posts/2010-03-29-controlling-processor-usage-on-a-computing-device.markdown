---

title: Controlling processor usage on a computing device
abstract: A method for controlling processor usage on a computing device is described. The method includes identifying targeted processes and obtaining a total processor usage for a processor on the computing device. The method also includes determining an amount of time to suspend threads within the targeted processes and suspending the threads for the determined amount of time.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08869154&OS=08869154&RS=08869154
owner: Crimson Corporation
number: 08869154
owner_city: Dover
owner_country: US
publication_date: 20100329
---
The present disclosure relates generally to computers and computer related technology. More specifically the present disclosure relates to controlling processor usage on a computing device.

Computer and communication technologies continue to advance at a rapid pace. Indeed computer and communication technologies are involved in many aspects of a person s day. Computers commonly used include everything from hand held computing devices to large multi processor computer systems.

Computers are used in almost all aspects of business industry and academic endeavors. More and more homes are using computers as well. The pervasiveness of computers has been accelerated by the increased use of computer networks including the Internet. One or more servers may provide data services and or may be responsible for managing other computers on a network. The managed computers are often referred to as nodes. A computer network may have hundreds or even thousands of managed nodes.

Most companies have one or more computer networks and also make extensive use of the Internet. The productivity of employees often requires human and computer interaction. Improvements in computers and software have been a force for bringing about great increases in business and industrial productivity.

Maintaining and supporting computer systems is important to anyone who relies on computers. Whether a computer or computing device is in a home or at a business at least some maintenance and or support is often needed. For example sometimes there are problems with computer hardware. This computer hardware is often upgraded and replaced with new components. Computer software is also frequently upgraded or replaced. Furthermore computer systems may need to be scanned in order to detect and mitigate security threats.

A computing device may need to accomplish a maintenance task concurrently with other tasks. Thus computing resources may be divided to accomplish the maintenance task along with the other tasks. Processing of the other tasks may be slowed as a result thereby possibly degrading the end user experience.

As shown from the above discussion there is a need for systems and methods that will improve the ability to control processor usage on a computing device. Improved systems and methods may enable a computing device to accomplish concurrent tasks while mitigating or avoiding a negative end user experience.

Frequently during login or shortly after the startup of a computing device background applications may be initiated by a local scheduler. For example vulnerability or security threat scanners inventory e.g. applications files etc. scanners and other processes may begin to run. These tasks may have been waiting to run until certain desktop criteria are met which criteria might include the requirement that a user be logged in. Thus a burst of process activity may occur at login time. At the same time other operating system processes may also be launched which may cause other processes to appear sluggish or slow. Perceived or actual sluggish or slow performance may cause a poor usability experience for the user. The poor usability experience may be even worse for the user of a laptop computer since its processor may run at a slower clock rate when unplugged. This performance issue may even prompt a user to contact computer support personnel in an attempt to resolve the issue.

Typical solutions in the past may have included lowering process thread priority or adding sleeps to certain code paths during scanning. This technique may be inaccurate since not all threads in an application may be controlled by the application developer. More specifically some threads may be created by third party software components used by the developer and may not be controlled with sleeps or thread priority adjustments. Furthermore arbitrary sleep intervals may be effective for some performance categories of computing devices but less effective for others. Also lowering the thread priority may not remove an appearance of guilt for a busy thread if no other processes are currently using the processor. In other words even a low priority thread that is running may cause the owning process to appear to be a processor hog in a task manager. This may also prompt a user to contact computer support personnel or even to terminate the process.

Systems and methods for controlling processor usage on a computing device are disclosed. A dynamic processor usage limiting component may allow targeted software components to operate only within the amount of a total processor use percentage that an administrator e.g. user or computer support personnel deems appropriate. This may ensure that a user s experience regarding computing device performance is not degraded by the operation of administrative background or other processes running on the computing device. That is by carefully controlling the amount of computing device resources that particular applications or processes may use and especially restricting access in times of high processor utilization the performance issues experienced by the user may be mitigated. Thus the perception that a particular application is a processor hog may also be alleviated.

A method for controlling processor usage on a computing device is disclosed. The method includes identifying targeted processes and obtaining a total processor usage for the processor on the computing device. The method also includes determining an amount of time to suspend threads within the targeted processes and suspending the threads for the determined amount of time.

The method may also include disregarding threads based on priority and or threads that are associated with a user interface. The amount of time to suspend the threads may be based on a regular processor usage limit if the total processor usage is not greater than the threshold. The amount of time to suspend the threads may be based on a high processor usage limit if the total processor usage is greater than a threshold.

The method may also include obtaining a processor usage of the targeted processes. The amount of time to suspend the threads may be based on a processor usage limit and the processor usage of the targeted processes if the total processor usage is not greater than the threshold.

The method may also include determining whether the computing device is in a low use state. Determining the amount of time to suspend the threads may be based on a processor usage limit whether the computing device is in a low use state and whether the total processor usage is greater than the threshold.

The method may also include obtaining a process identification of a foreground user interface. Determining the amount of time to suspend the threads may be based on a processor usage limit whether the threads are associated with the foreground user interface and whether the total processor usage is greater than the threshold.

The targeted processes may not be associated with a foreground user interface. Determining the amount of time to suspend the threads may be based on a processor usage limit and whether the total processor usage is greater than a threshold. The threads may include third party threads.

A computing device that is configured for controlling processor usage is also disclosed. The computing device includes a processor and instructions stored in memory. The computing device identifies targeted processes and obtains a total processor usage for the processor. The computing device also determines an amount of time to suspend threads within the targeted processes and suspends the threads for the determined amount of time.

A non transitory tangible computer readable medium for controlling processor usage on a computing device is also disclosed. The computer readable medium includes executable instructions for identifying targeted processes and obtaining a total processor usage for the processor. Instructions for determining an amount of time to suspend threads within the targeted processes and suspending the threads for the determined amount of time are also included on the computer readable medium.

Various configurations of the systems and methods are now described with reference to the Figures where like reference numbers may indicate identical or functionally similar elements. The configurations of the present systems and methods as generally described and illustrated in the Figures herein could be arranged and designed in a wide variety of different configurations. Thus the following more detailed description of several configurations as represented in the Figures is not intended to limit the scope of the invention as claimed but is merely representative of the various configurations of the systems and methods.

The administrative system may include a management application . The management application may include a User Interface UI . The management application may be used to manage the managed node s via a network . The user interface may provide an interface whereby an end user may control the behavior of the managed node s via the management application and or administrative system . The user interface may include a threshold input . The threshold input will be discussed in more detail below. The managed node s may include a management agent and other software components shown as other process es for convenience . As referred to herein software components may refer to software running on the managed node . For example the term software components may refer to process es and or thread s but is not limited to process es and or thread s . The management agent may include a node user interface . The management agent may also include targeted software components shown as targeted process es for convenience . The term process as used herein is the execution or instance of a running computer program. The targeted process es may include a processor usage controller . The management agent may receive instructions and or data e.g. settings from the management application and or administrative system including a threshold from the threshold input . The processor usage controller may determine whether a particular process is a targeted or other process . The processor usage controller may further determine whether a particular process has a specific or default threshold associated with it. If a particular process has neither a specific nor a default threshold it may be deemed either a process that is not controlled or it may be deemed a targeted process and allowed to run at a 100 threshold e.g. effectively no threshold . The management agent may be used to perform maintenance and other tasks on the managed node . For example the management agent may perform software updates install software uninstall unwanted or unauthorized software scan for security threats e.g. viruses worms Trojans malware spyware etc. scan for other unwanted or unauthorized software e.g. adware unauthorized software installed by employees etc. or otherwise perform maintenance or other tasks.

The node user interface may indicate to a user the maintenance or other tasks being performed on the managed node . The node user interface may or may not provide some control of the maintenance or other tasks being performed on the managed node . The targeted process es are process es that have processor usage control. The processor usage controller may be a module that is capable of regulating software component e.g. process or thread processor usage. That is the processor usage controller may control the total amount of processor resources e.g. cycles that a particular i.e. targeted process is allowed to use by periodically suspending and resuming individual threads in the targeted process. The processor usage controller may control the processor usage of targeted process es while not controlling the processor usage of other process es .

The threshold input may be a software control. For example the threshold input may be a slider a text box a drop down list radio button s pushbutton s etc. in the user interface . By using the user interface users or computer support personnel may modify the activities of the management agent and or processor usage controller . The threshold input may be used to modify the activity of the processor usage controller . For example the threshold input may represent a range of values from 1 to 100. These values may represent percentages of processor resources that a targeted process may be allowed to use or consume. For instance the managed node may run process es . By changing the threshold input value users or computer support personnel may limit the amount of processor resources that the targeted process es are allowed to use e.g. the targeted process may be allowed to use 30 of processor resources on the managed node . The user interface may also include other options in order to configure the processor usage controller . For example users or computer support personnel may designate i.e. target a particular process or processes to regulate. The user interface may be only one part of a user interface that includes other configuration settings for the management agent .

The targeted process es may be processes used by or associated with the management agent to perform maintenance or other tasks. The targeted process es may alternatively be processes that are not used by nor associated with the management agent . In this case it may be convenient to control the targeted process thread processor usage from another process e.g. from the processor usage controller when it is separate from the targeted process es . However it is possible to inject a dynamic link library i.e. DLL containing the processor usage controller into the targeted process address space.

Examples of targeted process es include software programs e.g. video rendering compiling document editing or presentation software etc. that a user desires to control the programs processor usage. The processor usage controller may control the processor usage of targeted process es by periodically suspending and resuming e.g. allowing to run threads within the targeted process es . The suspension and resumption of the targeted process es may occur at intervals that are small enough to not be noticed by an end user. The managed node may also include other process es which are not targeted by the processor usage controller for processor usage control.

In some configurations the node user interface may be used to configure the behavior of the processor usage controller . For example a user may use the node user interface to designate a particular process as one to be controlled by the processor usage controller. Typically a user would designate a process that is consuming a lot of processor resources. The user may further use the node user interface to designate a threshold for the processor usage controller in a manner similar to the threshold input .

As discussed above a process may include one or more threads. Threads may operate in the same address space at the same time e.g. within the process in which they were created whereas processes each have a unique address space and unique resources. The targeted process es may include thread s high priority thread s and or user interface e.g. window thread s . Any of these threads may be application developer code or may alternatively be third party code e.g. third party thread s used during the development of an application. The processor usage controller may be configured to periodically suspend certain thread s in order to control the processor usage of the targeted process es . The processor usage controller may typically avoid suspending certain types of thread s such as the high or critical priority thread s and the user interface thread s . The processor usage controller also avoids suspending itself. The high or critical priority thread s may be threads that are associated with important tasks such as network input output I O . The high priority thread s may have their own priority set to a maximum priority for example. The user interface thread s may be threads that are associated with user interfaces or windows appearing on the display of a managed node . Third party thread s may be threads started as a result of a call from a targeted process to a third party DLL dynamically linked library or to a third party API application programming interface . For example when a targeted process calls third party software to perform some task that third party software may start several threads that are separate from the regular process thread s but are nonetheless associated with the targeted process that called them.

The processor usage controller may avoid controlling or suspending high priority thread s and or user interface thread s . For example the processor usage controller may avoid suspending high priority thread s since suspending them may result in delays that may be important to managed node functionality. Furthermore the processor usage controller may avoid suspending user interface thread s since suspending them may result in a user interface appearing hung or crashed i.e. non responsive to a user. Since third party thread s may be started by the targeted process es it may be beneficial for the processor usage controller to detect and periodically suspend them in order to regulate targeted process processor usage. The processor usage controller may not suspend other thread s included in other process es in order to control processor usage. However the processor usage controller may obtain e.g. sample the amount of total processor usage by both the targeted process es and other process es in order to determine when and how much to limit targeted process processor usage.

Thus some benefits of the systems and methods disclosed herein may include an ability to dig into a process identify threads that may be suspended and resumed e.g. frozen and unfrozen and do it according to some plan to reduce the processor usage of a particular application particularly when the typical usage of setting thread priority may not seem to affect the user s perceived processor usage of the application when overall processor usage is low.

The processor usage controller may determine an amount of time to suspend software component s . For example if the percentage of processor usage on the managed node is above a threshold the processor usage controller may determine a relatively longer amount of time to periodically suspend particular processes or threads. On the other hand if the percentage of processor usage on the managed node is below the threshold the processor usage controller may determine a shorter amount of time to periodically suspend particular processes or threads. For example particular processes or threads may be limited to a particular percentage of available processor resources. For instance targeted software components may be limited to 30 of available processor resources. However if total processor usage on the managed node goes above a threshold e.g. 30 then the targeted software components may be limited to 3 of available processor resources for example. This may continue until total processor usage drops below the threshold at which point the targeted software components may be allowed to use 30 of available processor resources.

The processor usage controller may then periodically suspend particular software components for the amount of time determined. On some operating systems e.g. Microsoft Windows a debugger or other administrative privilege may need to be enabled to suspend certain software components. It may be noted however that this method may be generally applied to any preemptive operating system.

The processor usage controller may control processor usage based on other parameters such as computing device state and foreground user interface process identification . For example if the managed node enters a low use state e.g. locked logged off or in screen saver then the processor usage controller may allow particular software components to consume more processing resources. This low use state may indicate that a user is not currently using the computing device. The processor usage controller may also control particular software components processor usage depending on the foreground user interface process identification . For example the processor usage controller may allow the software components e.g. process es associated with the foreground user interface displayed on a managed node to consume more processing resources. Optionally the processor usage controller may limit the amount of processing resources that may be consumed by other particular software components which are not associated with the foreground user interface displayed on a managed node .

The processor usage controller may obtain a total processor usage on a computing device. That is the processor usage controller may sample a current percentage of total processor usage. The processor usage controller may determine whether the total processor usage is greater than a specified threshold . If the total processor usage is greater than the threshold the processor usage controller may set a suspension percent high e.g. according to a high processor usage limit . This may be true even if the targeted process alone is not consuming enough processor resources for the total processor usage to be greater than the specified threshold. For example if the threshold is set at 30 the targeted process processor usage is 10 and the total processor usage is 33 then the processor usage controller may set the suspension percent to 99 . The processor usage controller may then suspend the selected threads i.e. high priority thread s and user interface associated thread s excluded for an amount of time equal to the suspension percent of a time interval and then allow the selected threads to run e.g. resume for the remainder of the time interval.

It should be noted that the time interval may be selected for example to be as small as possible without noticeably affecting the performance of the targeted processes. In other words if an application is set to run a 50 it may take twice as long to perform a task. As the interval gets smaller however the managed node may thrash more i.e. with the overhead of constantly suspending and resuming threads . Thus the application may take more than twice as long to perform a task. In one configuration the time interval may be set to 1 second. For example if the time interval is 1 second and the suspension percent is 99 then the processor usage controller may suspend the selected threads for 0.99 seconds and allow the threads to run for 0.01 seconds.

If the processor usage controller determines that the total processor usage is not greater than the threshold then the processor usage controller may set the suspension percent according to a regular processor usage limit e.g. of available processing resources . For example if the processor usage limit is set at 30 of available processing resources then the processor usage controller may set the suspension percent to allow the selected threads to use 30 of available processing resources. The processor usage controller may then suspend the selected threads and allow them to run according to the suspension percent. On a multi core processor or in the case of an I O intensive target application the process may not approach an actual 30 in this example usage of the processor. However I O operations may make a computing device appear to be unresponsive similar to when the processor is busy.

For example if a processor is busy then the selected threads may take longer to perform their tasks. For instance the selected threads may be allowed to use 30 of the available processor. Without adjustments for how busy the processor currently is the processor usage controller would suspend all of the suspendable threads for 70 of a time interval and allow them to run for 30 of the time interval. On a fast processor or a processor that is not as busy the selected threads may run faster e.g. and use more total processor capacity . On a busy processor the selected threads may run slower getting fewer instructions processed during the 30 work time per interval. Additionally however the total processor usage may be compared to a threshold. When the total processor usage exceeds this value the amount of run time allowed for the selected threads per interval may be reduced. For example the amount of run time per interval may be reduced to a low value until processor usage recovers.

In this way the processor usage controller may be configured to allow selected processes and or threads to use a percent of remaining available processing resources. Thus the busier the processor becomes the smaller fraction of processing resources will be taken by the selected processes and or threads. In other words this may not simply be a linear reduction based on the slower running of all applications. Rather it uses a smaller percentage of remaining processing resources if the processor is already busy. Hence the processor usage controller controls the selected processes and or threads to jump to a low processor utilization e.g. high suspension value if the total processor usage has exceeded a processor usage threshold . Thus if the selected processes and or threads have a processor usage limit of 30 of available processing resources but the total processor usage is already above 30 the selected processes and or threads drop to a low use e.g. high suspension percent 3 or 1 10of the processor usage limit etc. until total usage returns below 30 for example.

Once the processor usage controller has suspended the selected threads for the suspension time and allowed the selected threads to run for the remainder of the time interval the processor usage controller may determine whether its configuration thread detection interval has elapsed. For example the processor usage controller may pop up at the beginning of each time interval and then again after the suspend period has passed e.g. so all threads can be re enabled . Then the threads may be suspended until the next interval when the processor usage controller may recalculate usage etc. and or search for any new threads that may have cropped up. That is when the processor usage controller determines that the its configuration thread detection interval has elapsed it may return to identify targeted process threads otherwise it may return to suspend and resume the selected threads for another time interval.

If the processor usage controller determines that the total processor usage is not greater than the threshold then the processor usage controller may set the suspension percent according to a regular processor usage limit . The processor usage controller may then suspend threads and allow threads to run according to the suspension percent and then allow the selected threads to run for the remainder of the time interval. Once the processor usage controller has suspended the selected threads and allowed the selected threads to run for the time interval the processor usage controller may determine whether its configuration thread detection interval has elapsed. When the processor usage controller determines that the its configuration thread detection interval has elapsed it may return to identify targeted process threads otherwise it may return to suspend and resume the selected threads for another time interval.

The processor usage controller may determine whether the computing device is in a low use state. For example if the managed node is running a screen saver is locked or the user is logged off then the processor usage controller may set the suspension percent low or according to a low processor usage limit . For example the processor usage controller may set the suspension percent to 0 in effect allowing the selected threads to run without limitation. If the processor usage controller is not in a low use state e.g. the user is logged in the managed node is not in a screen saver and is not locked then the processor usage controller may determine whether the targeted process is associated with the foreground user interface. If the targeted process is associated with the foreground user interface then the processor usage controller may set the suspension percent low or according to a low processor usage limit . For example the processor usage controller may set the suspension percent to 0 in effect allowing the selected threads to run without limitation. This determination may allow an application that has two modes e.g. a silent mode and a user interface mode to use more processing resources when the application is in user interface mode and has its user interface in the foreground. However if the application is running in a silent mode then its processor usage may be more controlled. It should be noted that module and module may set different suspension percentages.

If the processor usage controller determines that the targeted process is not associated with the foreground user interface then it may determine whether the total processor usage is greater than the threshold. If the total processor usage is greater than the threshold the processor usage controller may set a suspension percent high e.g. according to a high processor usage limit . The processor usage controller may then suspend the selected threads and allow threads to run according to the suspension percent. If the processor usage controller determines that the total processor usage is not greater than the threshold then the processor usage controller may set the suspension according to a regular processor usage limit . The processor usage controller may then suspend the selected threads and allow threads to run according to the suspension percent. Once the processor usage controller has suspended the selected threads and allowed the selected threads to run the processor usage controller may determine whether its configuration thread detection interval has elapsed. When the processor usage controller determines that its configuration thread detection interval has elapsed it may return to identify targeted process threads.

Alternatively the processor usage controller may determine whether the processor usage for each process is greater than an average process processor usage. For example the processor usage controller may determine an average processor usage based on all of the selected processes currently running. If an individual process processor usage is greater than the average process processor usage then the processor usage controller may set the suspension percent for that individual process high e.g. 99 according to a high processor usage limit optionally according to a regular processor usage limit or optionally based on the average. However if an individual process processor usage is not greater than the average the processor usage controller may set the suspension percent for that individual process low e.g. 0 according to a low processor usage limit optionally based on the threshold or optionally based on the average. Once the processor usage controller has set the suspension percent for each process then the processor usage controller may suspend threads for the suspension percent associated with the thread s process. Once the processor usage controller has suspended the selected threads and or allowed the selected threads to run for the time interval the processor usage controller may determine whether its configuration thread detection interval has elapsed. When the processor usage controller determines that its configuration thread detection interval has elapsed it may return to identify process threads not associated with the foreground user interface.

The administrative system and or managed node may include a processor and memory . The memory may include instructions and data . The processor controls the operation of the administrative system and or managed node and may be for example a microprocessor a microcontroller a digital signal processor DSP or other device known in the art. The processor typically performs logical and arithmetic operations based on program instructions and or data stored from the memory .

The administrative system and or managed node typically may include one or more communication interfaces for communicating with other electronic devices. The communication interfaces may be based on wired communication technology wireless communication technology or both. Examples of different types of communication interfaces include a serial port a parallel port a Universal Serial Bus USB an Ethernet adapter an IEEE bus interface a small computer system interface SCSI bus interface an infrared IR communication port a Bluetooth wireless communication adapter and so forth.

The administrative system and or managed node typically may include one or more input devices and one or more output devices . Examples of different kinds of input devices include a keyboard mouse microphone remote control device button joystick trackball touchpad lightpen etc. Examples of different kinds of output devices include a speaker printer etc. One specific type of output device which may be typically included in a computer system is a display device . Display devices used with configurations disclosed herein may utilize any suitable image projection technology such as a cathode ray tube CRT liquid crystal display LCD light emitting diode LED gas plasma electroluminescence or the like. A display controller may also be provided for converting data stored in the memory into text graphics and or moving images as appropriate shown on the display device .

Of course illustrates only one possible configuration of an administrative system and or managed node . Various other architectures and components may be utilized.

In the above description reference numbers have sometimes been used in connection with various terms. Where a term is used in connection with a reference number this is meant to refer to a specific element that is shown in one or more of the Figures. Where a term is used without a reference number this is meant to refer generally to the term without limitation to any particular Figure.

The term determining encompasses a wide variety of actions and therefore determining can include calculating computing processing deriving investigating looking up e.g. looking up in a table a database or another data structure ascertaining and the like. Also determining can include receiving e.g. receiving information accessing e.g. accessing data in a memory and the like. Also determining can include resolving selecting choosing establishing and the like.

The phrase based on does not mean based only on unless expressly specified otherwise. In other words the phrase based on describes both based only on and based at least on. 

The term processor should be interpreted broadly to encompass a general purpose processor a central processing unit CPU a microprocessor a digital signal processor DSP a controller a microcontroller a state machine and so forth. Under some circumstances a processor may refer to an application specific integrated circuit ASIC a programmable logic device PLD a field programmable gate array FPGA etc. The term processor may refer to a combination of processing devices e.g. a combination of a DSP and a microprocessor a plurality of microprocessors one or more microprocessors in conjunction with a DSP core or any other such configuration.

The term memory should be interpreted broadly to encompass any electronic component capable of storing electronic information. The term memory may refer to various types of processor readable media such as random access memory RAM read only memory ROM non volatile random access memory NVRAM programmable read only memory PROM erasable programmable read only memory EPROM electrically erasable PROM EEPROM flash memory magnetic or optical data storage registers etc. Memory is said to be in electronic communication with a processor if the processor can read information from and or write information to the memory. Memory that is integral to a processor is in electronic communication with the processor.

The terms instructions and code should be interpreted broadly to include any type of computer readable statement s . For example the terms instructions and code may refer to one or more programs routines sub routines functions procedures etc. Instructions and code may comprise a single computer readable statement or many computer readable statements.

The term computer readable medium refers to any available non transitory tangible medium that can be accessed by a computer or processor. By way of example and not limitation a computer readable medium may comprise RAM ROM EEPROM CD ROM or other optical disk storage magnetic disk storage or other magnetic storage devices or any other medium that can be used to carry or store desired program code in the form of instructions or data structures and that can be accessed by a computer. Disk and disc as used herein includes compact disc CD laser disc optical disc digital versatile disc DVD floppy disk and Blu ray disc where disks usually reproduce data magnetically while discs reproduce data optically with lasers.

Software or instructions may also be transmitted over a transmission medium. For example if the software is transmitted from a website server or other remote source using a coaxial cable fiber optic cable twisted pair digital subscriber line DSL or wireless technologies such as infrared radio and microwave then the coaxial cable fiber optic cable twisted pair DSL or wireless technologies such as infrared radio and microwave are included in the definition of transmission medium.

The methods disclosed herein comprise one or more steps or actions for achieving the described method. The method steps and or actions may be interchanged with one another without departing from the scope of the claims. In other words unless a specific order of steps or actions is required for proper operation of the method that is being described the order and or use of specific steps and or actions may be modified without departing from the scope of the claims.

It is to be understood that the claims are not limited to the precise configuration and components illustrated above. Various modifications changes and variations may be made in the arrangement operation and details of the systems methods and apparatus described herein without departing from the scope of the claims.

