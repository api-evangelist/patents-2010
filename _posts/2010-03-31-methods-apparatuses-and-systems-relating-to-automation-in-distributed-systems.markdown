---

title: Methods, apparatuses, and systems relating to automation in distributed systems
abstract: Apparatuses, systems and methods are presented. In one embodiment, the method includes receiving a graphical user interface part of a deployment file on a first computer, the deployment file configured to cause a second computer to perform a computer-implemented job. The method may also include loading the graphical user interface part of the deployment file on the first computer. Additionally, the method may include displaying an interactive graphical user interface on a display device in data communication with the first computer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09424016&OS=09424016&RS=09424016
owner: Automic Software GmbH
number: 09424016
owner_city: Wolfsgraben
owner_country: AT
publication_date: 20100331
---
This disclosure relates to rapid automation in distributed systems and to methods and arrangements for execution and controlling of jobs in such systems.

Software agents are commonly used in distributed software environments. For example network administrators often deploy device monitoring agents to network servers and routing devices. The deployed agents typically collect a specified set of data and return results directly to a master server via e.g. an SNMP connection.

In a typical system a system administrator must manually deploy a set of agents to each remote network device. This process is both time consuming and expensive. Additionally configuration of the agents and scheduling of jobs to be performed by the agents may be cumbersome and time consuming often requiring a system administrator to physically interact with the devices at remote locations.

Another common issue in agent based computing systems involves software development. Typically a separate agent is required for every task to be performed on the remote systems. Development becomes difficult because programming of agents generally requires intensive programming and testing to ensure that the agent is capable of accurately interacting with system and application interfaces.

Additionally configuration of jobs to be performed by the agents is also problematic. For example common systems require either a dedicated application interface for configuring jobs or the entire agent must be loaded for the purpose of configuration. This often requires the system administrator to physically interact with a device on which the job is to be performed.

Apparatuses systems and methods are presented. In one embodiment the method includes receiving a graphical user interface part of a deployment file on a first computer the deployment file configured to cause a second computer to perform a computer implemented job. The method may also include loading the graphical user interface part of the deployment file on the first computer. Additionally the method may include displaying an interactive graphical user interface on a display device in data communication with the first computer.

In a further embodiment the method includes receiving a job configuration parameter from the interactive graphical user interface and storing the job configuration parameter in a database configured to be accessible by the first computer and the second computer. In such an embodiment the database may be accessible by the first computer and the second computer through data communications with a server coupled to the database.

In one embodiment the method may include obtaining a result of the computer implemented job from the second computer and displaying results of the computer implemented job in the interactive graphical user interface. The method may include synchronously obtaining the result of the computer implemented job from the second computer. In one embodiment the method may include asynchronously obtaining the result of the computer implemented job from a database.

In another embodiment the method may include receiving an agent part of a deployment file on a second computer the deployment file configured to cause the second computer to perform a computer implemented job. Such an embodiment may also include loading the agent part of the deployment file on the second computer and performing the computer implemented job on the second computer according to a job configuration parameter provided by a first computer configured to run a graphical user interface part of the deployment file.

In one particular embodiment the method includes accessing a database managed by a server. In a further embodiment the method may include obtaining the agent part of the deployment file from the database. The method may also include obtaining the job configuration parameter from the database. In particular the agent part may be configured to obtain the job configuration parameter asynchronously from the database.

As the computer implemented job is completed the method may include storing a result of the computer implemented job in the database. In one embodiment the method includes synchronously communicating the result of the computer implemented job to the first computer. Alternatively the method may include asynchronously communicating the result of the computer implemented job to the first computer through the database.

Another embodiment of a method is presented. In such an embodiment the method may include receiving a request from a first computer for a graphical user interface part of a deployment file the deployment file configured to cause a second computer to perform a computer implemented job. The method may also include obtaining the graphical user interface part of the deployment file from a database configured to be accessible by the first computer and the second computer. The method may additionally include communicating the graphical user interface part of the deployment file to the first computer.

In a further embodiment the method may include receiving a job configuration parameter from the first computer and storing the job configuration parameter in the database. The method may also include communicating a result of the computer implemented job to the first computer for display with the graphical user interface part of the deployment file.

Another embodiment of a method is presented. In one embodiment the method includes sending an agent part of a deployment file to a second computer the deployment file configured to cause the second computer to perform a computer implemented job. The method may also include sending a job configuration parameter to the second computer a job configuration parameter provided by a first computer configured to run a graphical user interface part of the deployment file. In a further embodiment the agent part of the deployment file and the job configuration parameter are stored in a database.

The method may also include receiving a result of the computer implemented job from the second computer and storing the result of the computer implemented job in the database configured to be accessible by the first computer and the second computer.

Tangible computer program products comprising computer readable instructions that when executed by a computer cause the computer to perform the operations described above are also presented. In one embodiment the computer program product may comprise data storage device comprising computer readable instructions for configuring a first computer a second computer and a server as described below. In one embodiment the computer readable instructions may be platform independent.

Apparatuses are also presented. In one embodiment the apparatus comprises a first computer. The first computer may include an input adapter a processor and a display adapter. In one embodiment the input adapter is configured to receive a graphical user interface part of a deployment file the deployment file configured to cause a second computer to perform a computer implemented job. The processor may load the graphical user interface part of the deployment file on the first computer. Additionally the display adapter may display an interactive graphical user interface on a display device in data communication with the first computer.

In a further embodiment the first computer may include user interface controls configured to receive a job configuration parameter from the interactive graphical user interface. The first computer may also include an output adapter coupled to the user interface controls the output adapter configured to communicate the job configuration parameter to a database configured to be accessible by the first computer and the second computer.

In one embodiment the database is accessible by the first computer and the second computer through data communications with a server coupled to the database. The input adapter may obtain a result of the computer implemented job from the second computer. The display adapter may then display the results of the computer implemented job in the interactive graphical user interface on the display device. In particular the input adapter may be configured to synchronously obtain the result of the computer implemented job from the second computer. Alternatively the input adapter may be configured to asynchronously obtain the result of the computer implemented job from a database.

In another embodiment the apparatus may be a second computer. The second computer may include an input adapter and a processor. In one embodiment the input adapter may receive an agent part of a deployment file on a second computer the deployment file configured to cause the second computer to perform a computer implemented job. The processor may load the agent part of the deployment file on the second computer and perform the computer implemented job on the second computer according to job configuration parameter provided by a first computer configured to run a graphical user interface part of the deployment file.

In one embodiment the input adapter may access a database managed by a server. Further the input adapter may obtain the agent part of the deployment file from the database. The input adapter may also obtain the job configuration parameter from the database. In one embodiment the input adapter is configured to obtain the job configuration parameter asynchronously from the database.

The second computer may also include an output adapter configured to store a result of the computer implemented job in the database configured to be accessible by the first computer. The output adapter may also synchronously communicate the result of the computer implemented job to the first computer.

In another embodiment the apparatus may be a server. The server may include an input adapter a data adapter and an output adapter. For example the input adapter may receive a request from a first computer for a graphical user interface part of a deployment file the deployment file configured to cause a second computer to perform a computer implemented job. In such an embodiment the data adapter may obtain the graphical user interface part of the deployment file from a database configured to be accessible by the first computer and the second computer. Additionally the output adapter may communicate the graphical user interface part of the deployment file to the first computer.

In further embodiments of the server the input adapter may receive a job configuration parameter from the first computer and the data adapter configured to store the job configuration parameter in the database and the output adapter may communicate a result of the computer implemented job to the first computer for display with the graphical user interface part of the deployment file.

Another embodiment of a server is presented. In this embodiment the server may include an output adapter configured to send an agent part of a deployment file to a second computer the deployment file configured to cause the second computer to perform a computer implemented job and send a job configuration parameter to the second computer the job configuration parameter provided by a first computer configured to run a graphical user interface part of the deployment file. The agent part of the deployment file and the job configuration parameter may be stored in a database.

In a further embodiment the server may include an input adapter configured to receive a result of the computer implemented job from the second computer and a data adapter coupled to the input adapter and configured to store the result of the computer implemented job in the database configured to be accessible by the first computer and the second computer.

Systems are also presented. In one embodiment the system includes a first computer a second computer and a server as described above. For example the first computer may be configured to receive a graphical user interface part of a deployment file from a server the deployment file configured to cause a second computer to perform a computer implemented job load the graphical user interface part of the deployment file on the first computer display an interactive graphical user interface on a display device in data communication with the first computer and send job configuration parameter to the server. The second computer may be configured to receive an agent part of the deployment file from the server load the agent part of the deployment file and perform the computer implemented job according to a job configuration parameter provided by the first computer. The server may be coupled to the first computer and to the second computer. In such an embodiment the server may be configured to send the graphical user interface part of the deployment file to the first computer send an agent part of a deployment file to the second computer and send the job configuration parameter to the second computer.

In another embodiment the system includes a first computer and a second computer. For example the first computer may be configured to receive a graphical user interface part of a deployment file from a server the deployment file configured to cause a second computer to perform a computer implemented job load the graphical user interface part of the deployment file on the first computer display an interactive graphical user interface on a display device in data communication with the first computer and send job configuration parameter to the server. The second computer may be configured to receive an agent part of the deployment file from the server load the agent part of the deployment file and perform the computer implemented job according to a job configuration parameter provided by the first computer.

Another embodiment of a computer program product is presented. In one embodiment the computer program product may include computer executable code configured to cause a computer system to include a database configured to manage at least one deployment file a GUI client loading the GUI part of the deployment file a framework loading the agent part of the deployment file the deployment file comprising modules the modules grouped in a GUI part and an agent part the agent part being platform independent and being started and loaded by the framework the GUI part comprising the GUI description of the agent the agent comprising of jobs the jobs can be started from the GUI part the GUI part querying information from the agent part wherein both the framework and the GUI can run on different machines.

The term coupled is defined as connected although not necessarily directly and not necessarily mechanically.

The term substantially and its variations are defined as being largely but not necessarily wholly what is specified as understood by one of ordinary skill in the art and in one non limiting embodiment substantially refers to ranges within 10 preferably within 5 more preferably within 1 and most preferably within 0.5 of what is specified.

The terms comprise and any form of comprise such as comprises and comprising have and any form of have such as has and having include and any form of include such as includes and including and contain and any form of contain such as contains and containing are open ended linking verbs. As a result a method or device that comprises has includes or contains one or more steps or elements possesses those one or more steps or elements but is not limited to possessing only those one or more elements. Likewise a step of a method or an element of a device that comprises has includes or contains one or more features possesses those one or more features but is not limited to possessing only those one or more features. Furthermore a device or structure that is configured in a certain way is configured in at least that way but may also be configured in ways that are not listed.

Other features and associated advantages will become apparent with reference to the following detailed description of specific embodiments in connection with the accompanying drawings.

The following is a detailed description of embodiments of the disclosure depicted in the accompanying drawings. The embodiments are in such detail as to clearly communicate the disclosure. However the amount of detail offered is not intended to limit the anticipated variations of embodiments on the contrary the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the present disclosure as defined by the appended claims.

While specific embodiments are described below with reference to particular configurations of hardware and or software those of skill in the art will realize that embodiments of the present disclosure may advantageously be implemented with other equivalent hardware and or software systems. Aspects of the disclosure described herein may be stored or distributed on computer readable media including magnetic and optically readable and removable computer disks as well as distributed electronically over the Internet or over other networks including wireless networks. Data structures and transmission of data including wireless transmission particular to aspects of the disclosure are also encompassed within the scope of the disclosure.

In one embodiment methods apparatuses and arrangements for processing controlling and executing of jobs on distributed systems are disclosed. The distributed system can support processing controlling and executing of jobs controlling or interfacing applications running on hosts located in a complex computer network under control of an automation engine and or GUI clients.

An agent can provide functionality to another system such as a GUI client which can query data of the agent or can use functionality of the agent. This functionality can comprise functions of the host functions of its operating system or special functions provided by the agent or all of them. A command can be an elementary function provided by the host its operating system or agent . A job can be a sequence or series of commands or a statement to execute or call other job in a given order. A job can comprise thousands or just one step whereas a step can be a definition control statement command or a statement to execute or call another job.

A scheduling system is a system comprising at least an agent to execute functionality on a dedicated system wherein another system such as a GUI client of can start or query functions of the agent. A job scheduling system is a scheduling system wherein at least one agent can execute jobs. An application scheduling system is a scheduling system wherein at least one of the agents can start query or call functionality of an application running on a host .

A distributed system is a system comprising several software components which can run on different hosts. Today a variety of different approaches exist to enable communication between such components. Such communication techniques can be packet oriented or connection oriented messages or stream based or can use any network architecture to enable transport of information.

All agents of are connected to a GUI client which enables the user to access the functionality made available by the agents. In other examples the GUI clients can have additional functionality which can be to allow scheduling of jobs or execution on the agents. In another example the agent can offer scheduling functionality to schedule jobs to be run at a certain time on a certain host .

As shown in the agents can be connected to a communication server which can comprise of a series of communication processes. Each communication process can act as a router. The GUI client can be connected to the communication server and can communicate with the agents and with the scheduling engine through this communication server . The scheduling server can have access to a database which can be used to store scheduling information or information on jobs which can be sent and executed by the agents . The scheduling server can have functionality to schedule task which have to be performed on agents at a certain time. The GUI client can be used to modify scheduling information such as start times assignment of destination hosts job configuration parameters or development and editing of jobs.

When the scheduling engine determines that a certain task has to be performed it can load all necessary information for that task from the database . An example of a task that can have to be performed at a certain time is a job to be executed on a certain host. The scheduling engine can load the job definition from the database and can send the job to that agent of the host the job is associated with. The agent can receive the job then start execute and monitor it. The agent can collect output data and information of the job. Once the job is executed on the host the agent can send the gathered information e.g. return status back to the scheduling engine through the communication server and over a network infrastructure . The communication server can have the role of a distributor or an internal router for the scheduling engine .

Many different operating systems are used today. These operating systems can differ widely in user handling look and feel execution maintenance user definitions or even user permissions. As a result a job which runs on Unix can be quite different from a job that runs on on z OS or Microsoft Windows.

Jobs depend on the host platform the agents and applications they interface. For example a job that runs on host the host having an operating system may be completely different form a job which runs on a host the host having an operating system .

Applications can be developed for one or more operating systems and hosts. Applications which are ported to another host typically have different properties behavior features and functions and interfaces. Therefore an application running on host the host having operating system which has been ported to application running on host having operating system has different properties.

Agents normally are very specialized and system dependent agents can be developed for one operating system and may need to be completely redeveloped to serve the same purpose on another operating system or another host system. The executables can depend on the processor type the host configurations and the operating system. Agents that interface with a certain application need to interface with dedicated programming interfaces of the applications. This application interfaces can differ from operating system to operating system.

As a result if agents have to be developed for O operating systems H host types and A applications running on the hosts O times H times A agents must be developed the agents serving A applications.

Embodiments for execution in a distributed network are described in the following figures. Agents can be started and run by an RA framework running on a host. RA is the abbreviation of the term Rapid Automation. The agents can interface the operating system of the host and applications running on the host via application programming interfaces APIs . The agents can communicate with a graphical user interface GUI which can query information from the agents. The agent can comprise job definitions whereas these jobs can be started from a scheduling engine. Configurations of the agent and the jobs can be edited in the GUI and stored in the database. The RA framework can load the newest agents from the database. Once the agent is loaded the newest configurations for the agents and their job definitions can be loaded from the database.

The RA agent definition can comprise all code and executables necessary to run an agent on a certain host in an RA framework see . The RA Job definitions can comprise all code and executables to perform a specific task or job. This task or job can be special for a certain host or can be a certain application running on a host. Therefore a RA Job definition can also be a job that can call a certain function of the application programming interface of a certain application.

The RA agent GUI definition can comprise all graphical controls to control an RA agent and to define all settings the agent needs to run. The RA agent GUI definitions can comprise all graphical controls to define all settings RA jobs needs to run. Each RA job can have a RA job GUI definition. The definitions can even have controls to start the corresponding RA job and to control RA job execution.

In an embodiment the RA solution deployment file can also comprise RA class definitions and a translation file . The RA classes definition can comprise classes which the RA agent and the RA jobs can use. The translation file can contain all messages and texts which are output or displayed in several languages.

The definitions within block can be called RA solution agent part. The definitions within block can be called RA solution GUI part. The main component of block is the RA agent definition . The RA solution GUI part can contain the panels and user interface descriptions for the programs and contained in block .

The definition blocks shown in as part of the RA solution deployment file contain the description and implementation of the respective component. The definition blocks of the deployment file do not refer to running instances.

An RA solution contains in some embodiments an agent part and a graphical user interface part. In the following the graphical user interface part is referred to as GUI part. The GUI part can contain but is not limited to controls such as check boxes menus buttons drop down field. The GUI part is designed to provide all control panels to the user for human interaction and can contain in some embodiments program code to process a certain flow. In some embodiments the RA solution GUI part enables the user so set modify reset or amend parameters of the components contained in the RA solution agent part. In such an embodiment the RA solution GUI part can represent the user interface of the RA solution agent part.

Application can provide an application programming interface to allow control by other applications. Such an application programming interface can be of any complexity and can allow other applications to access control start change or monitor processes or states of the application .

Host can host an RA framework . The framework can interface with the operating system and can have an RA framework agent interface which will be explained and used in the next figures. The framework can also have an RA framework interface to allow communication to an automation engine over connection or an RA runtime module of a GUI client over connection .

The GUI client can comprise a dialog factory an RA runtime module and a dialog server interface . The RA runtime module can have a RA runtime dialog interface to communicate with RA panels which will be shown in the following figures. It can also have a dialog agent interface to allow communication to the RA framework. The dialog factory can have a dialog server interface to communicate with an automation engine over connection .

The automation engine can interface the dialog server interface and the RA framework and can have connection to a database which can store RA solution deployment files .

The RA framework can be an execution framework of agents and can be a virtual machine. It can be implemented for a specific host running with an operating system . The RA framework can retrieve the RA solution host part from a database or storage .

In one embodiment the dialog client of can be a core component of the GUI client . The dialog client can be able to retrieve GUI descriptions from an external database and can render and visualize windows or frames according to the descriptions received. The dialog client may in some embodiments act as a rendering engine and may in other embodiments act as an interpreter which displays graphical and textual components for user interaction on a display. The dialog client can display graphical user interfaces to a human user and to receive input from the user. As the dialog client can have a complete description of graphical components to be displayed it can manage all data which is contained in the description. Such data can comprise default parameters for graphical components settings lists or even graphical images. Examples of such data can be descriptions of graphical menus information of checkboxes which are set or which radio buttons are set. The dialog factory can be responsible to display data to the user and to assist the user in amending it.

The process of user interaction can be as follows The dialog factory can receive the description of a user interface from a database or a server over a dialog server interface . The description can contain the description of all graphical elements windows or frames to be displayed as well as the data to be presented to the user. The dialog factory can render and display the user interface according to the description and can display the data to the user. The user can view amend and complete the data. Once the user or the user interfaces initiates saving the data the data can be written back over the dialog server interface to the database or a server .

The user interface can comprise an RA runtime module which can comprise runtime libraries to enable the user interface to run GUI parts of RA solutions. The runtime module can have an RA runtime dialog interface to communicate with GUI parts of RA solutions and a dialog agent interface to communicate with RA frameworks which run the host part of RA solutions the GUI parts of RA solutions correspond to. is a block diagram of such a running instance of the GUI part of an RA solution.

As the dialog factory can handle graphical components the dialog factory can also handle graphical components such as RA solution GUI parts and can integrate them in the graphical user interface.

The framework has loaded and activated several RA solutions host parts each RA solution having an RA agent . RA solutions host part can also comprise a variety of RA jobs associated to an RA agent . The jobs can communicate with applications .

The first computer may include an input adapter a processor and a display adapter. In one embodiment the input adapter is configured to receive a graphical user interface part of a deployment file the deployment file configured to cause a second computer to perform a computer implemented job. The processor may load the graphical user interface part of the deployment file on the first computer. Additionally the display adapter may display an interactive graphical user interface on a display device in data communication with the first computer.

In a further embodiment the first computer may include user interface controls configured to receive a job configuration parameter from the interactive graphical user interface. The first computer may also include an output adapter coupled to the user interface controls the output adapter configured to communicate the job configuration parameter to a database configured to be accessible by the first computer and the second computer.

In one embodiment the database is accessible by the first computer and the second computer through data communications with a server coupled to the database . The input adapter may obtain a result of the computer implemented job from the second computer. The display adapter may then display the results of the computer implemented job in the interactive graphical user interface on the display device . In particular the input adapter may be configured to synchronously obtain the result of the computer implemented job from the second computer. Alternatively the input adapter may be configured to asynchronously obtain the result of the computer implemented job from a database .

For example the dialog factory can load RA solutions GUI part from a database over a dialog server interface and can integrate and activate them to form running instances . The dialog factory can integrate the RA solutions host part in frames or windows and can display and render them.

The RA solutions host part can comprise a variety of RA panels for each RA solution. As an example an RA solution GUI part can have panels for parameters to be provided for the agent of the same solution and the jobs associated to it.

The second computer may include an input adapter and a processor. In one embodiment the input adapter may receive an agent part of a deployment file on a second computer the deployment file configured to cause the second computer to perform a computer implemented job. The processor may load the agent part of the deployment file on the second computer and perform the computer implemented job on the second computer according to job configuration parameter provided by a first computer configured to run a graphical user interface part of the deployment file .

In one embodiment the input adapter may access a database managed by a server. Further the input adapter may obtain the agent part of the deployment file from the database . The input adapter may also obtain the job configuration parameter from the database . In one embodiment the input adapter is configured to obtain the job configuration parameter asynchronously from the database .

The second computer may also include an output adapter configured to store a result of the computer implemented job in the database configured to be accessible by the first computer. The output adapter may also synchronously communicate the result of the computer implemented job to the first computer.

The RA panels can display information from RA components running on host . This information can be static or stored with the panels. Information can also be queried directly from the RA components. Therefore the panels which can use the RA runtime module can send a query through the dialog agent interface to the framework . The framework can route the query to the corresponding RA solution host part where an agent can take the query. The agent can query information from the host the operating system or applications to answer the query received from the panel. Subsequently the agent can return the requested information to the panel over the RA framework which can route the message back to the RA runtime module which can forward the queried information to the corresponding panel. As an example when the user clicks on an RA panel having a drop down field the drop down field shall be filled with all programs registered as a service on host . The RA panel sends a query to the framework over the dialog agent interface of the RA runtime module . The framework forwards the query to the corresponding agent which can query the operating system to create a list of names of the programs which are registered as a service. Once the agent has created the list it can return the list to the framework which can forward the list to the panel over the RA runtime module.

RA panels can belong to the same RA solution as the corresponding RA agent with its RA jobs and can have functionality to query information from the RA agent. In another embodiment of the disclosure the panels can offer the user to start any of the RA jobs. In another embodiment the panels can show parameters of the RA solution the RA agent or RA jobs to the user and can allow the user to change or set it. Such parameters can be stored with the solution by the dialog factory in the database .

The server may include an input adapter a data adapter and an output adapter. For example the input adapter may receive a request from a first computer for a graphical user interface part of a deployment file the deployment file configured to cause a second computer to perform a computer implemented job. In such an embodiment the data adapter may obtain the graphical user interface part of the deployment file from a database configured to be accessible by the first computer and the second computer. Additionally the output adapter may communicate the graphical user interface part of the deployment file to the first computer.

In further embodiments of the server the input adapter may receive a job configuration parameter from the first computer and the data adapter configured to store the job configuration parameter in the database and the output adapter may communicate a result of the computer implemented job to the first computer for display with the graphical user interface part of the deployment file .

Another embodiment of a server is presented. In this embodiment the server may include an output adapter configured to send an agent part of a deployment file to a second computer the deployment file configured to cause the second computer to perform a computer implemented job and send a job configuration parameter to the second computer the job configuration parameter provided by a first computer configured to run a graphical user interface part of the deployment file . The agent part of the deployment file and the job configuration parameter may be stored in a database .

In a further embodiment the server may include an input adapter configured to receive a result of the computer implemented job from the second computer and a data adapter coupled to the input adapter and configured to store the result of the computer implemented job in the database configured to be accessible by the first computer and the second computer.

For example and also show an automation engine which can in one embodiment act as a server to access the database. In another embodiment the automation engine can be a scheduling engine which can start RA jobs on the RA agent at a certain time. The RA agent can then receive a job start request from the scheduling engine over the RA framework and can start monitor and control the job and can return job information as well as job return state of the RA jobs to the scheduling server .

In one embodiment the system includes a first computer a second computer and a server as described above. For example the first computer may be configured to receive a graphical user interface part of a deployment file from a server the deployment file configured to cause a second computer to perform a computer implemented job load the graphical user interface part of the deployment file on the first computer display an interactive graphical user interface on a display device in data communication with the first computer and send job configuration parameter to the server. The second computer may be configured to receive an agent part of the deployment file from the server load the agent part of the deployment file and perform the computer implemented job according to a job configuration parameter provided by the first computer. The server may be coupled to the first computer and to the second computer. In such an embodiment the server may be configured to send the graphical user interface part of the deployment file to the first computer send an agent part of a deployment file to the second computer and send the job configuration parameter to the second computer.

In one embodiment of the system of the GUI client may comprise a first computer the host may comprise a second computer and the automation engine may comprise a server. For example the first computer may be configured to receive a graphical user interface part of a deployment file from a server the deployment file may be configured to cause a second computer to perform a computer implemented job . The first computer may also load the graphical user interface part of the deployment file on the first computer and display an interactive graphical user interface on a display device in data communication with the first computer and send job configuration parameter to the server. The second computer may be configured to receive an agent part of the deployment file from the server load the agent part of the deployment file and perform the computer implemented job according to a job configuration parameter provided by the first computer. The server may be coupled to the first computer and to the second computer. In such an embodiment the server may be configured to send the graphical user interface part of the deployment file to the first computer send an agent part of a deployment file to the second computer and send the job configuration parameter to the second computer.

In another embodiment the method may include receiving an agent part of a deployment file on a second computer the deployment file configured to cause the second computer to perform a computer implemented job. Such an embodiment may also include loading the agent part of the deployment file on the second computer and performing the computer implemented job on the second computer according to a job configuration parameter provided by a first computer configured to run a graphical user interface part of the deployment file .

In one particular embodiment the method includes accessing a database managed by a server. In a further embodiment the method may include obtaining the agent part of the deployment file from the database. The method may also include obtaining the job configuration parameter from the database. In particular the agent part may be configured to obtain the job configuration parameter asynchronously from the database.

As the computer implemented job is completed the method may include storing a result of the computer implemented job in the database. In one embodiment the method includes synchronously communicating the result of the computer implemented job to the first computer. Alternatively the method may include asynchronously communicating the result of the computer implemented job to the first computer through the database.

Another embodiment of a method is presented. In such an embodiment the method may include receiving a request from a first computer for a graphical user interface part of a deployment file the deployment file configured to cause a second computer to perform a computer implemented job. The method may also include obtaining the graphical user interface part of the deployment file from a database configured to be accessible by the first computer and the second computer. The method may additionally include communicating the graphical user interface part of the deployment file to the first computer.

In a further embodiment the method may include receiving a job configuration parameter from the first computer and storing the job configuration parameter in the database. The method may also include communicating a result of the computer implemented job to the first computer for display with the graphical user interface part of the deployment file .

Another embodiment of a method is presented. In one embodiment the method includes sending an agent part of a deployment file to a second computer the deployment file configured to cause the second computer to perform a computer implemented job. The method may also include sending a job configuration parameter to the second computer a job configuration parameter provided by a first computer configured to run a graphical user interface part of the deployment file . In a further embodiment the agent part of the deployment file and the job configuration parameter are stored in a database.

The method may also include receiving a result of the computer implemented job from the second computer and storing the result of the computer implemented job in the database configured to be accessible by the first computer and the second computer.

For example and show example embodiments for the purpose of demonstration of some of the powerful capabilities of the present disclosure whereas the GUI Client uses has loaded only one Solution A the RA Framework has loaded only one RA Host Part A . Solution A is a RA Solution for connecting to an SAP installation. SAP is an ERP program that can comprise of a couple of modules such as Human Resources Modules or Storage Modules . In this example of the application can be a running instance of SAP whereas the module and its example job modules are connected to it. Therefore the purpose of the module according to this example can be to connect to an SAP system and to provide a working environment for the job modules in it. In these four figures there are three job modules named RA Job A A and A. Imagine in this example the RA Job A provides the functionality to extract a list of employees of the company from the application the SAP System the RA Job A provides functionality to extract from SAP a list of cars available in the storage of the company and the RA Job A provides functionality to sell a car which is available in the storage of the SAP system.

In the example embodiment of the user can use the stand alone GUI client to connect to the Automation Engine . The can use the GUI to see that an RA Solution A a jar file is loaded in the database and that the agent part has already been transferred to the host and loaded and activated by the running framework to be an activated instance . Therefore the user knows he can define job data JD for the jobs activated on the host . To define data the user advises to Automation Engine that he wants to create a new data object for the RA Solution A with number . The Automation Engine loads the GUI part of the RA Solution A from the jar file stored in the database and sends it forth to the GUI client . The interface retrieves the GUI part from the Automation Engine and the Dialog Factory renders and displays the GUI definition stored in the GUI part . The user sees that the GUI part of Solution A enables him to see three panels in this example. The three panels correspond to the job definitions loaded and activated in the activated module .

As a next step the user wants to define job data for the RA Job A which is a job to extract a list of employees from SAP. The panel is the GUI panel for the job A of solution A and in this example it might simply contain GUI elements such as a drop down box to allow the user to specify a time period. Therefore the user uses the panel to enter data for the job and he selects or enters for example 3 years as the user wants to extract the list of employees which have been with the company during the past three years. By entering data in the GUI the user creates Job Data which can simply contain the information 3 years and the identifier of the solution A SA and the number of the job A JA . Now the user wants to store that job data JD SA JA and he clicks on save in the GUI. This causes the GUI to be precise the dialog factory to transfer the job data to the Automation Engine which stores the job data in the database .

Job data can be processed at any time. As the Automation Engine is a scheduling engine it can use scheduling processes that needs to have that job data being processed at certain times. As an alternative the user can decide to have this job data e.g. being processed immediately and he can click Run for a job data in the GUI to start the job. When a RA job is run the job data can be loaded from the database by the Automation Engine and can be transferred over the line to the host . The framework can receive that data and can forward it to the corresponding host solution module . The module can receive the data and can forward it to the corresponding job in this case the job module . The job module can use the data provided in to retrieve a list of employees from SAP which are within the company for the past three years. The job module can send the information which is the result of the job back to the framework while the framework can send this result back to the Application Engine for further processing. The Application Engine can than store the result in the database . The result basically then is new data in the database which can be used as input for subsequent jobs.

The methods described herein can be accomplished using products commercially available from UC4 Software GmbH.

Each process disclosed herein can be implemented with a software program. The software programs described herein may be operated on any type of computer such as personal computer server etc. Any programs may be contained on a variety of tangible computer program products. Illustrative computer program products include but are not limited to information permanently stored on non writable storage media e.g. read only memory devices within a computer such as CD ROM disks readable by a CD ROM drive and alterable information stored on writable storage media e.g. floppy disks within a diskette drive or hard disk drive.

The disclosed embodiments can take the form of an entirely hardware embodiment or an embodiment containing both hardware and software elements. In one embodiment the arrangements can be implemented in software which includes but is not limited to firmware resident software microcode etc. Furthermore the disclosure can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

Tangible computer program products comprising computer readable instructions that when executed by a computer cause the computer to perform the operations described above are also presented. In one embodiment the computer program product may comprise data storage device comprising computer readable instructions for configuring a first computer a second computer and a server as described below.

Another embodiment of a computer program product is presented. In one embodiment the computer program product may include computer executable code configured to cause a computer system to include a database configured to manage at least one deployment file comprising modules the modules grouped in a GUI part and an agent part . The computer program product may also include code for a GUI client configured to load the GUI part of the deployment file. Additionally the computer program product may include code for a framework configured to load the agent part of the deployment file the agent part being platform independent and being startable and loadable by the framework. The GUI part may include a GUI description of the agent part. In one embodiment the agent part may include jobs the jobs being startable from the GUI part the GUI part being configured to query information from the agent part and where both the framework and the GUI can be run on different machines.

For example the GUI client and the RA framework can be configured to retrieve instructions from a data storage medium. The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD. A data processing system suitable for storing and or executing program code can include at least one processor logic or a state machine coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers. Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters. The term processor means a physical processor such as a microprocessor.

The computer system also may include Random Access Memory RAM which may be SRAM DRAM SDRAM or the like. The computer system may utilize RAM to store the various data structures used by a software application configured to automation in distributed systems. The computer system may also include Read Only Memory ROM which may be PROM EPROM EEPROM optical storage or the like. The ROM may store configuration information for booting the computer system . The RAM and the ROM hold user and system data.

The computer system may also include an input output I O adapter a communications adapter a user interface adapter and a display adapter . The I O adapter and or user the interface adapter may in certain embodiments enable a user to interact with the computer system in order to input information for the job parameters. These various adapters may include hardware devices such as circuit cards comprising communications connectors and the like. In a further embodiment the display adapter may display a graphical user interface associated with a software or web based application for automation in distributed systems.

The I O adapter may connect to one or more storage devices such as one or more of a hard drive a Compact Disk CD drive a floppy disk drive a tape drive to the computer system . The communications adapter may be adapted to couple the computer system to the network which may be one or more of a LAN and or WAN and or the Internet. The user interface adapter couples user input devices such as a keyboard and a pointing device to the computer system . The display adapter may be driven by the CPU to control the display on the display device .

The present embodiments are not limited to the architecture of system . Rather the computer system is provided as an example of one type of computing device that may be adapted to perform the functions of a server and or the user interface device . For example any suitable processor based device may be utilized including without limitation including personal data assistants PDAs computer game consoles and multi processor servers. Moreover the present embodiments may be implemented on application specific integrated circuits ASIC or very large scale integrated VLSI circuits. In fact persons of ordinary skill in the art may utilize any number of suitable structures capable of executing logical operations according to the described embodiments.

It will be apparent to those skilled in the art having the benefit of this disclosure that the present disclosure contemplates methods systems and media that can efficient handle processes in distributed systems. It is understood that the form of the arrangements shown and described in the detailed description and the drawings are to be taken merely as examples. It is intended that the following claims be interpreted broadly to embrace all the variations of the example embodiments disclosed.

