---

title: Scalable and extensible framework for data-driven web services
abstract: A layered architecture for a web service is provided with a data tier, object representation, data transformation, and a service tier. Scalability is achieved by relying on relatively high degree of decoupling, lightweight data interaction, and reducing overhead of transaction demands. Custom web services can be built on top and leverage the capabilities of the flexible framework including lightweight transaction support, event-based business logic extensibility, and efficient data contract binding.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08375009&OS=08375009&RS=08375009
owner: Microsoft Corporation
number: 08375009
owner_city: Redmond
owner_country: US
publication_date: 20100812
---
Web services provide computing operations executed on remote systems through application programming interfaces API or web APIs typically accessed via Hypertext Transfer Protocol HTTP to local computing devices without the burden of users having to install update and manage local applications for the same operations. Standardized protocols may be utilized in facilitating interactions between remote systems providing a web service of local computing devices of users such as Simple Object Access Protocol SOAP relying on extensible markup language XML for messaging format and application layer protocols e.g. HTTP .

Web services include a wide range of computer applications from audio video exchanges to complicated business applications. Thus the architecture and functionality of various web service types tend to be distinct. Especially in a business application environment multiple parties may be involved in development management and consumption of the services. It is a common occurrence for comprehensive business services to have a number of modules prepared by third parties to operate alongside the core service.

In a complex business application environment the nature of the web service s architecture may determine success of the web service affecting user experience ease and variety of provided services quality of service e.g. problems efficiency etc. and other characteristics. For example conventional systems typically coordinate multiple connections into a single homogeneous connection which may result in increased use of resources computation time overhead etc.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This summary is not intended to exclusively identify key features or essential features of the claimed subject matter nor is it intended as an aid in determining the scope of the claimed subject matter.

Embodiments are directed to layered architecture for a web service including data tier object representation data transformation and a service tier. Scalability may be achieved in such an architecture by relying on relatively high degree of decoupling lightweight data interaction and reducing overhead of transaction demands. Furthermore through a flexible framework custom web services may be built on top and leverage the capabilities of the framework including lightweight transaction support event based business logic extensibility and efficient data contract binding.

These and other features and advantages will be apparent from a reading of the following detailed description and a review of the associated drawings. It is to be understood that both the foregoing general description and the following detailed description are explanatory and do not restrict aspects as claimed.

As briefly described above a layered architecture may be provided for a web service with a data tier object representation data transformation and a service tier. Through a relatively high degree of decoupling lightweight data interaction and reducing overhead of transaction demands scalability may be achieved. Custom web services may be built on top and leverage the capabilities of the flexible framework including lightweight transaction support event based business logic extensibility and efficient data contract binding. In the following detailed description references are made to the accompanying drawings that form a part hereof and in which are shown by way of illustrations specific embodiments or examples. These aspects may be combined other aspects may be utilized and structural changes may be made without departing from the spirit or scope of the present disclosure. The following detailed description is therefore not to be taken in a limiting sense and the scope of the present invention is defined by the appended claims and their equivalents.

While the embodiments will be described in the general context of program modules that execute in conjunction with an application program that runs on an operating system on a personal computer those skilled in the art will recognize that aspects may also be implemented in combination with other program modules.

Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that embodiments may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and comparable computing devices. Embodiments may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

Embodiments may be implemented as a computer implemented process method a computing system or as an article of manufacture such as a computer program product. The computer program product may be a computer storage medium readable by a computer system and encoding a computer program that comprises instructions for causing a computer or computing system to perform example process es . The computer readable storage medium can for example be implemented via one or more of a volatile computer memory a non volatile memory a hard drive a flash drive a floppy disk or a compact disk and comparable media.

Throughout this specification the term platform may be a combination of software and hardware components for providing business applications through web services. Examples of platforms include but are not limited to a hosted service executed over a plurality of servers an application executed on a single server and comparable systems. The term server refers to a computing device executing one or more software programs typically in a networked environment. The term client refers to a computing device or software application that provides a user access to data and other software applications through a network connection with other clients and or servers. More detail on these technologies and example operations is provided below.

According to the first scenario where the consumer calls with an operating system login to a login web service the login web service impersonates an application pool e.g. application pool authenticates the domain user consumer and creates login records with the user s name providing connectivity to database .

According to the second scenario where the web service client calls third party web service as domain user with a GUID login the third party web service may connect to database as another application pool e.g. application pool retrieve login record from GUID and authorize the retrieved user . According to the same scenario third party web service may also connect to web service with the GUID login calling the web service as application pool . Web service which is part of application pool may connect to database as application pool retrieve login records from GUID and authorize the retrieved user in response to the call from third party web service .

A system according to embodiments may utilize a security object to support the above described models. The security object may expose the different login methods. One method may create sessions for the operating system user model while another method creates sessions for the web service user model.

The sequence of events may begin with web service consumer calling login web service as domain user event . In response loginservice.login may call security.login event which may create a new web service session by inserting a web service access row in database s event . Then security.login may retrieve the new session s identifier event from database s and return to loginservice.login event . Loginservice.login returns the session identifier to the consumer at event .

Web service consumer may then call service.method of third party web service as domain user event . Service.method may call security.authorize method at event which retrieves the session from database s at events and and return the session to service.method at event . Service.method calls service.method of web service domain service as domain service on behalf of domain user event .

Service.method calls security.authorize method of web service at event which follows the authorization process retrieving the session from database s at events and . Service.authorize method returns the session to service.method at event which processes the session and returns to service.method of third party web service at event . Service.method processes the received session and returns to the consumer .

A domain object DO and is a strongly typed representation of a database record. DOs may be organized into a hierarchy containing conceptually related domain objects. DOs may also expose methods that apply the business logic in business logic layer . DOs are the lowest level objects which reflect a hierarchy. Thus they define the hierarchy. Higher layer objects may omit parts of the Domain Object hierarchy but do not add to it.

Data Access Objects DAOs and are adapters that encapsulate exactly one database table or view providing interfaces to perform Create Read Update Delete CRUD operations on records from the table or Read from the view . Each Data Access Object type may populate one corresponding Domain Object type e.g. DAO populates DO DAO populates DO etc. . For each DO type there exists one DAO type e.g. DAO for DO .

Data Transfer Objects DTOs and are the consumer facing representations of Domain Objects. They are intended to provide consumers with easily consumed strongly typed object hierarchies whose schema is decoupled from that of the underlying Domain Object. DTOs represent the data contracts of a web service. Like DOs DTOs are arranged in hierarchies .

A web service session is an abstract conversation between a web service consumer and one or more web services. A web service session begins when the consumer is authenticated by the login web service and may end when the consumer calls the login web service s logout method or when a timeout period elapses. Any user may begin a web service session and may have multiple sessions concurrently.

The session user is the identity presented by a web service consumer to initiate a web service session and may be either an authenticated operating system account or a web service user account. Each session user may have multiple concurrent web service sessions. If the session user is a web service user then the consumer s operating system user identity needs to have permission to log in as that web service user. The session user s access rights may be evaluated when a web service method is called the user receives the union of all associated web service users access rights when executing web methods .

A service account is the least privileged non interactive operating system account under which a web service executes. The service account needs to have rights to connect to database s to perform CRUD on the database tables and views and to execute stored procedures. These rights may be granted by assigning the service account to the database roles. To prevent rogue processes from gaining database access the service account credentials may be well protected such as through a password protection process.

A web services framework according to embodiments includes several parts. The primary part is a framework assembly which exposes the base classes upon which web services can be built. The assembly may also include two login web services and a lookup web service built on the framework. In addition the framework may include new system manager applications changes to existing system manager applications and changes to a system manager report. The framework may even deliver a command line utility.

The SQL context is a singleton per service instance class that manages database server connections and executes database commands. It is consumed by the base class DAO the lookup class derived DOs and web services . Each SQL context and thus each instance of a web service may have up multiple open connections to an application database at any given time e.g. one enlisted to a transaction and one not . DTO is transferred between consumer and backend of the system.

SQL context may use non public synchronous methods to manage database connections and to execute database commands. Its constructor may not be exposed outside the framework assembly. Web services may access its underlying connection objects indirectly. Methods of the SQL context class may indicate errors by throwing an exception.

Each web service may perform database related functionality CRUD lookups security filters etc. in a Try Finally or Try Catch Finally block. To support system database I O needs application programming interfaces APIs may be added to expose appropriate connection objects. As mentioned above Data Access Objects are adapters that map a Domain Object to its underlying database table or view. DAO methods are called by DOs to perform CRUD after business logic is applied. DAOs may not have knowledge of object hierarchies. As such relationships are not defined at the database level. The DAO class may be exposed outside the framework assembly. Each type of DAO consumes one type of DO and is consumed by the same type of DO.

In addition the DAO class may use private members to consume SQL context for all database I O. Derived DAO classes may not consume SQL context except to expose additional I O methods beyond typical CRUD. When a CRUD method is called the base class may get the appropriate database command from a property open the database connection if not already opened execute the database command and close the database connection if the database connection was closed before step the database connection is opened. A system according to embodiments may interact with any data source such as a relational database an OLAP database tabular list etc.

While the example systems in through have been described with specific elements and interactions embodiments are not limited to these configurations and can be implemented with other components and configurations. Furthermore embodiments are not limited to illustrated hierarchies or specific data sources. Any form of data and data sources may be used for a scalable and extensible web service architecture using the principles described herein.

Client devices are capable of communicating with a web service providing a business application for example. Implementing a scalable and extensible layered framework the web service may store and retrieve data associated with the business application in from individual data sources such as data store or data sources managed by a database server such as data store managed by database server .

Network s may comprise any topology of servers clients Internet service providers and communication media. A system according to embodiments may have a static or dynamic topology. Network s may include a secure network such as an enterprise network an unsecure network such as a wireless open network or the Internet. Network s may also comprise a plurality of distinct networks. Network s provides communication between the nodes described herein. By way of example and not limitation network s may include wireless media such as acoustic RF infrared and other wireless media.

Many other configurations of computing devices applications data sources and data distribution systems may be employed to implement a layered framework for a scalable and extensible web service architecture. Furthermore the networked environments discussed in are for illustration purposes only. Embodiments are not limited to the example applications modules or processes.

Business application may be a separate module or an integrated part of a web service providing data retrieval analysis and or similar services. Business application may provide remote users requested services through a layered architecture as discussed in more detail above. This basic configuration is illustrated in by those components within dashed line .

Computer may have additional features or functionality. For example the computer may also include additional data storage devices removable and or non removable such as for example magnetic disks optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage . Computer readable storage media may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. System memory removable storage and non removable storage are all examples of computer readable storage media. Computer readable storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Any such computer readable storage media may be part of computer . Computer may also have input device s such as keyboard mouse pen voice input device touch input device and comparable input devices. Output device s such as a display speakers printer and other types of output devices may also be included. These devices are well known in the art and need not be discussed at length here.

Computer may also contain communication connections that allow the device to communicate with other devices such as over a wireless network in a distributed computing environment a satellite link a cellular link and comparable mechanisms. Other devices may include computer device s that execute communication applications provide data for data processing application and so on. Communication connection s is one example of communication media. Communication media can include therein computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media.

Example embodiments also include methods. These methods can be implemented in any number of ways including the structures described in this document. One such way is by machine operations of devices of the type described in this document.

Another optional way is for one or more of the individual operations of the methods to be performed in conjunction with one or more human operators performing some. These human operators need not be collocated with each other but each can be only with a machine that performs a portion of the program.

Process begins with optional operation where a web service request is received. The requesting user may be authenticates and or authorized through one or more login services at operation as discussed previously. In case of third party services within the framework one may call the other performing authorization based on user account types. Register events and register handlers corresponding to the register events are loaded once when an event fires.

At operation data associated with the requested service may be accessed e.g. for CRUD operations through a Data Access Object. The interaction is facilitated through a session. Each user may have multiple concurrent web service sessions. Once the DAO retrieves data from the database a corresponding Domain Object may execute business logic by calling one or more methods and return the results to the consumer through a corresponding Data Transfer Object.

The operations included in process are for illustration purposes. A layered web service framework according to embodiments may be implemented by similar processes with fewer or additional steps as well as in different order of operations using the principles described herein.

The above specification examples and data provide a complete description of the manufacture and use of the composition of the embodiments. Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims and embodiments.

