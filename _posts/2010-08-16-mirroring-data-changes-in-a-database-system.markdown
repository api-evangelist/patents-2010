---

title: Mirroring data changes in a database system
abstract: A method for mirroring one or more data changes from a first database server to one or more second database servers. The method includes intercepting one or more operations that make one or more changes to one or more data on the first database server. After intercepting these operations, the method merges the operations into one or more chunks, adds one or more log records having the chunks into a database log. The database log includes one or more database log blocks. The method then writes the database log blocks.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08655847&OS=08655847&RS=08655847
owner: Microsoft Corporation
number: 08655847
owner_city: Redmond
owner_country: US
publication_date: 20100816
---
Currently database systems are equipped with High Availability and Disaster Recovery HADRON features such that data and metadata stored on a primary database server are still accessible even if the primary database server becomes temporarily or permanently unavailable. In these database systems the primary database server typically includes the original version of the data and the metadata that is accessed and modified by a user. A secondary database server is then used to mirror all of the activity that occurs on the data and metadata stored on the primary database server such that a copy of the altered data and metadata is stored on the secondary database server. As a result if the primary database server becomes temporarily unavailable the secondary database server which includes data and metadata that closely resembles the primary database server will be made available to the user. This feature is referred to as high availability.

In certain cases the primary database server and the secondary database server may be located at different geographical locations such that the secondary database server will be preserved in the event that the primary database server is destroyed by a natural disaster or the like. In the case of such a disaster since the primary database server may no longer be available the secondary database server may be provided to take over the tasks of the primary database server. This feature is referred to as disaster recovery. For both features high availability and disaster recovery the database system mirrors the changes performed on the primary database server onto the secondary database server to ensure that the data and metadata stored in the primary database server is available to those requesting it.

The changes performed on the primary server may be made on the metadata of a database file and or the data of a filesystem file. The metadata are stored in rows of the database file that is stored in a filesystem. The filesystem file is located in the same filesystem or a different filesystem as the database file. Currently changes made to the metadata are logged in a database log file but the changes made to the data in a filesystem file are not logged anywhere. In order to mirror the changes made to the metadata on the primary database server a computer application sends the database log file to the secondary database server such that the secondary database server mirrors the changes indicated in the database log file. However since the database log file does not include any information pertaining to the changes made to the data in the filesystem file on the primary database server the secondary database server cannot mirror the changes made to the data on the primary database server because it does not know what data has changed. As such the secondary database server copies the entire filesystem file to ensure that the changed data has been mirrored onto the secondary database. This method for updating the changes to the data in the file on the secondary server is an inefficient method for updating changes to data.

Described herein are implementations of various technologies for mirroring data in a database system. In one implementation a computer application stored on the primary database server may use a filesystem filter driver to intercept all operations that make changes to the data in a filesystem file on the primary database server. The filesystem filter driver may keep track of where the data changes in the filesystem file occur in a list that may include offset locations and lengths. The offset location may indicate the starting location of the data change in the filesystem file and the length of the data change in the filesystem file. The computer application may then receive the lists of offset locations and lengths from the filesystem filter driver such that it may output an efficient sequence of sending blocks of the data to the secondary database server.

After receiving the lists of offset locations and lengths the computer application may merge information related to data changes that have nearby offset locations and lengths into a chunk. The computer application may then add the chunk as a log record into a database log block in a database log. After adding the chunks into the database log blocks the computer application may read each database log block in the database log to determine whether any chunks are present in the corresponding database log block. For each identified chunk the computer application may open the filesystem file associated with the chunk read the data from the filesystem file that corresponds to the data of the chunk starting at the offset location for the length of the of data change. After reading the data that corresponds to the chunk the computer application may send the read data and the database log block to the secondary database server.

A second computer application stored on the secondary database server may then receive the data and the database log block from the primary database server. The second computer application may replace the data stored on the secondary database s server with the received data such that the data on the secondary database server is identical to the data on the primary database server. The second computer application may then receive the database log block which may indicate the changes made to the metadata on the primary server. The second computer application may then make the same changes to the corresponding metadata on the secondary database server.

The above referenced summary section is provided to introduce a selection of concepts in a simplified form that are further described below in the detailed description section. The summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.

In general one or more implementations described herein are directed to mirroring data changes in a database system. By mirroring the data changes and the metadata changes in a primary database system onto a secondary database system the data and the metadata stored on the primary database system may be available for High Availability and Disaster Recovery HADRON purposes. Various techniques for mirroring data changes in a database system will be described in more detail with reference to .

Implementations of various technologies described herein may be operational with numerous general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with the various technologies described herein include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The various technologies described herein may be implemented in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures etc. that performs particular tasks or implement particular abstract data types. The various technologies described herein may also be implemented in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network e.g. by hardwired links wireless links or combinations thereof. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

The computing system may include a central processing unit CPU a system memory and a system bus that couples various system components including the system memory to the CPU . Although only one CPU is illustrated in it should be understood that in some implementations the computing system may include more than one CPU. The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus. The system memory may include a read only memory ROM and a random access memory RAM . A basic input output system BIOS containing the basic routines that help transfer information between elements within the computing system such as during start up may be stored in the ROM .

The computing system may further include a hard disk drive for reading from and writing to a hard disk a magnetic disk drive for reading from and writing to a removable magnetic disk and an optical disk drive for reading from and writing to a removable optical disk such as a CD ROM or other optical media. The hard disk drive the magnetic disk drive and the optical disk drive may be connected to the system bus by a hard disk drive interface a magnetic disk drive interface and an optical drive interface respectively. The drives and their associated computer readable media may provide nonvolatile storage of computer readable instructions data structures program modules and other data for the computing system .

Although the computing system is described herein as having a hard disk a removable magnetic disk and a removable optical disk it should be appreciated by those skilled in the art that the computing system may also include other types of computer readable media that may be accessed by a computer. For example such computer readable media may include computer storage media and communication media. Computer storage media may include volatile and non volatile and removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media may further include RAM ROM erasable programmable read only memory EPROM electrically erasable programmable read only memory EEPROM flash memory or other solid state memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computing system . Communication media may embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and may include any information delivery media. The term modulated data signal may mean a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media may include wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above may also be included within the scope of computer readable media.

A number of program modules may be stored on the hard disk magnetic disk optical disk ROM or RAM including an operating system one or more application programs a HADRON application HADRON application log reader program data and a database system . The operating system may be any suitable operating system that may control the operation of a networked personal or server computer such as Windows XP Mac OS X Unix variants e.g. Linux and BSD and the like. HADRON application HADRON application and log reader may be configured to manage the method for mirroring data changes on a primary database server and a secondary database server respectively. HADRON application HADRON application and log reader will be described in more detail with reference to in the paragraphs below.

A user may enter commands and information into the computing system through input devices such as a keyboard and pointing device . Other input devices may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices may be connected to the CPU through a serial port interface coupled to system bus but may be connected by other interfaces such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device may also be connected to system bus via an interface such as a video adapter . In addition to the monitor the computing system may further include other peripheral output devices such as speakers and printers.

Further the computing system may operate in a networked environment using logical connections to one or more remote computers . The logical connections may be any connection that is commonplace in offices enterprise wide computer networks intranets and the Internet such as local area network LAN and a wide area network WAN . The remote computers may each include application programs similar to that of the computer action function .

When using a LAN networking environment the computing system may be connected to the local network through a network interface or adapter . When used in a WAN networking environment the computing system may include a modem wireless router or other means for establishing communication over a wide area network such as the Internet. The modem which may be internal or external may be connected to the system bus via the serial port interface . In a networked environment program modules depicted relative to the computing system or portions thereof may be stored in a remote memory storage device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

It should be understood that the various technologies described herein may be implemented in connection with hardware software or a combination of both. Thus various technologies or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the various technologies. In the case of program code execution on programmable computers the computing device may include a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs that may implement or utilize the various technologies described herein may use an application programming interface API reusable controls and the like. Such programs may be implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s may be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined with hardware implementations.

Database system also includes various modules for performing parts of the process related to mirroring the data changes in a database system. The modules may include filestream manager filesystem filter driver filestream name space owner NSO filetable name space owner NSO chunker and log reader . In one implementation all of the modules may be part of HADRON application as shown in computer system .

In one implementation filestream manager may intercept database commands from a database stack. Database commands may insert or update the data stored in the filesystem file. Similarly filesystem filter driver may intercept filesystem commands from a filesystem stack. Filesystem commands may write to data stored in the filesystem file. Filesystem filter driver may be a kernel mode driver that may be used to detect changes made to the data. In addition to detecting whether changes were made to the data filestream manager and filesystem filter driver may detect an offset location and length of each data change in the filesystem file. Although filestream manager and filesystem filter driver have been described as being used to detect information related to when data has been changed it should be noted that filestream manager and filesystem filter driver may also be configured to perform other database and file system functions.

Filestream NSO and filetable NSO may be database system components such as SQL server components that may interact with filesystem filter driver . Filestream NSO and filetable NSO may also provide filesystem functionalities via filesystem filter driver . In one implementation filestream NSO may be used to store data outside database system and filetable NSO may be used to provide extended filesystem functionalities. If filesystem commands include data changes that were accessed via a filestream or transactional access filesystem filter driver may send a notification about its intercepted data change to filestream NSO . Alternatively if filesystem commands include data changes that were accessed via a filesystem application e.g. Win32 application filesystem filter driver may send a notification about the data change to filetable NSO .

Filestream manager filestream NSO and filetable NSO may send information related to the data changes to chunker . Chunker may analyze all of the data changes and coalesce or merge the data changes into a single chunk. After merging the data changes into a single chunk chunker may insert a log record into database log to indicate that an update has occurred to the data in a particular filesystem file. The log record may include the offset location of the update in the filesystem file and the length that corresponds to the update. In this manner all data changes and updates that occur in the filesystem file may be represented in database log . In one implementation database log may also include information related to any metadata changes that occurred on a database file in database system .

After the log records have been added to database log log reader may read each log block in database log to determine whether the log block may contain a log record that has a chunk. For each identified chunk log reader may open the filesystem file associated with the identified chunk. Log reader may then read the data in the filesystem file from the offset location and for the length defined in the log record. After reading the data log reader may send the read data to one or more secondary database servers . Secondary database servers may then replace the data that corresponds to the data sent from log reader in its corresponding filesystem file. In this manner secondary database servers may be used to mirror database system to provide data for high availability and disaster recovery purposes.

In one implementation database system may correspond to computer system . Database system may be referred to as a primary database server. In this manner the data changes made to the filesystem file stored on the primary database server may be mirrored on the secondary database servers . Although not shown in database system the filesystem file may be stored in database system . Similarly a corresponding filesystem file may be stored in secondary database server .

At step HADRON application may intercept all operations that change data to a filesystem file. In one implementation HADRON application may use filestream manager to intercept the database commands such as T SQL inserts and updates that change data in the filesystem file. Similarly HADRON application may use filesystem filter driver to intercept filesystem commands that open write and close data in the filesystem file.

In one implementation when HADRON application intercepts an operation that makes a change to data in the filesystem file HADRON application may keep track of the change by maintaining a list of the offset location and length of each data change. For instance a data change in a filesystem file may occur at offset for length .

At step HADRON application may merge the offset locations and lengths for each operation that makes a change to the data into a chunk. By merging the offset locations and the lengths HADRON application may combine data changes that occurred on nearby or overlapping data into a single data change. For instance if a first data change occurs at offset for length and a second data change occurs at offset for length HADRON application may merge these two data changes into a single data change represented by offset for length . Similarly HADRON application may merge nearby data changes that have been received out of order. For instance a first data change may be represented by offset for length a second data change may be represented by offset for length and a third data change may be represented by offset for length . HADRON application may merge these three disjoint data change operations into a single data change at offset for length . In another example HADRON application may merge overlapping data changes. For instance a first data change may be represented by offset for length and a second data change may be represented by offset for length . HADRON application may merge these three disjoint data change operations into a single data change at offset for length . By merging the data changes into a single data change HADRON application may minimize the number of times data may be sent to a secondary database server.

In one implementation HADRON application may wait for a predetermined amount of time or for a predetermined amount of data before merging the data changes. In this manner HADRON application may merge all of the data changes that occur during the predetermined amount of time or for the predetermined amount of data together. Steps described above may be performed by filestream NSO filetable NSO and filestream manager as described in .

At step HADRON application may add the chunk containing the merged offset locations and lengths into a database log as a log record. At step HADRON application may write the database log by writing database log blocks. A database log block may include a group of consecutively added log records. In one implementation after writing the database log block HADRON application send the database log blocks to log reader . Steps may be performed by chunker as described in .

At step log reader may read a database log block from HADRON application . In one implementation HADRON application may receive the database log block from the chunker . After reading a database log block at step log reader may determine whether a log record related to a chunk exists in the database log block. If the database log block includes a chunk log record log reader may proceed to step . If however the database log block does not include a chunk log record log reader may proceed to step .

At step log reader may read the data in the filesystem file that corresponds to the data described in the chunk log record. For instance if the chunk log record indicated that data at offset and length was changed log reader may read the data in the filesystem file that corresponds to the chunk log record at offset and length .

At step log reader may send the read data to secondary database server . At step log reader may determine whether another chunk log record exists in the database log block. If another chunk log record exists in the database log block log reader may return to step . If however another chunk log record does not exist in the database log block log reader may proceed to step . At step log reader may send the database log block to secondary database server .

At step HADRON application may receive data sent from log reader as described in step . At step HADRON application may search for the data that corresponds to the received data and replace the data on the secondary database server with the received data. In this manner the data associated with the chunk log record i.e. offset location and length may replace the corresponding data in the secondary database server .

At step HADRON application may receive the database log block sent from log reader . At step HADRON application may interpret the database log block to determine whether any changes were made to metadata stored on the primary database server. If changes to the metadata were made the database log block may indicate what those changes were and HADRON application may make those same changes to the corresponding metadata in the secondary database server .

In one implementation methods and may be performed in a synchronous mode such that the data change operation may be complete when all appropriate secondary database servers have updated its data to mirror the data change operation. In this manner there may be a strong guaranty of little or no data loss during a disaster recover event.

Alternatively methods and may be performed in an asynchronous mode such that there may be a delay between when the data change operation commits on the primary database server and when the corresponding data change commits on the secondary database servers. An asynchronous mode of operation may provide for better performance which may result in data being more highly available during normal operations.

In any case methods and allow data changes to be mirrored on secondary database servers more efficiently because only the data being changed in the filesystem file stored on the primary database server is sent to secondary database servers as opposed to sending the entire filesystem file. By only sending the relevant data database systems may be better equipped to provide data for high availability and disaster recovery purposes.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

