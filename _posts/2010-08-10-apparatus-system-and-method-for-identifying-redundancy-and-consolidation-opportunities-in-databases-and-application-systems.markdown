---

title: Apparatus, system, and method for identifying redundancy and consolidation opportunities in databases and application systems
abstract: Apparatuses, computer program products, and methods for identifying redundancy and consolidation opportunities in databases and application systems are disclosed. In one embodiment, the apparatus may include at least one meta data scanner. The apparatus may also include an enterprise meta data source. The apparatus may further include a meta data repository. The meta data repository receives system-specific meta data from the at least one meta data scanner. The meta data repository may also receive enterprise canonical data model meta data from the enterprise meta data source. The meta data repository may be configured to generate at least one individual system CRUD matrix that may then used to produce an enterprise canonical model CRUD matrix. The enterprise canonical model CRUD matrix may be analyzed by a data mining clustering algorithm. The clustering algorithm may group together modules and database elements that may be redundant and may indicate opportunities for consolidation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08364651&OS=08364651&RS=08364651
owner: OptumInsight, Inc.
number: 08364651
owner_city: Eden Prairie
owner_country: US
publication_date: 20100810
---
This application claims priority to U.S. Provisional Application No. 61 237 937 filed Aug. 28 2009 the entire contents of which is specifically incorporated herein by reference without disclaimer.

This invention relates to databases and more particularly relates to an apparatus system and method for identifying database and application system redundancy.

Redundancy in an enterprise s databases and application systems increases with the number of databases and application systems in the enterprise. That is some information may be represented more than once in a database. Additionally similar data may be represented multiple ways in several databases throughout the enterprise. Having information stored as multiple representations and or multiple times in an enterprise reduces operating efficiency when executing queries for data. Multiple application systems may access and process the information in the enterprise databases. These application systems provide similar or redundant functionality which is expensive to maintain. Additionally demand on storage systems increases with the amount of redundant data. Further design of software for accessing the databases and training of employees for operating the software becomes more challenging as data and application system redundancy increases.

Database and application system redundancy often results after merging two companies. For example when a company merges with a second company both companies may have separate databases that include information about clients employees orders and or other information. After the first company and the second company merge a search request to find a client queries both the first company s databases and the second company s databases. These queries may use different application systems that were separately implemented by the two companies. The same occurs when executing queries for employees orders and other information. As the number of databases grows for example through mergers the complexity of operating the databases increases. Increasing complexity results in added costs from hosting and storing multiple databases modifying software for accessing the databases and training of employees in operating the modified software.

Previously identifying redundancy involved comparing databases and application systems two at a time against each other. The databases and application systems are manually compared to identify redundancy and opportunities for consolidation. With this approach as the number of databases and application systems grows the number of possible pairs of databases and application systems for comparison increases exponentially. For example for N databases N N 2 pairs are compared to identify redundancy between each of the databases. One technique for implementing this approach may be placing all of the data elements of each database in a spreadsheet and manually comparing each line of the spreadsheet. For large numbers of databases this approach becomes difficult to implement.

The referenced shortcomings are not intended to be exhaustive but rather are among many that tend to impair the effectiveness of previously known techniques in database and application system management however those mentioned here are sufficient to demonstrate that the methodologies appearing in the art have not been satisfactory and that a significant need exists for the techniques described and claimed in this disclosure.

From the foregoing discussion it should be apparent that a need exists for an apparatus system and method for identifying redundancy and opportunities for consolidation in database and application systems.

An apparatus for identifying redundancy is presented. In one embodiment the apparatus includes at least one meta data scanner. The apparatus also includes an enterprise meta data source. The apparatus yet also includes a meta data repository. The meta data repository receives system specific meta data representative of the databases and application systems from the at least one meta data scanner. The meta data repository also receives enterprise canonical data model meta data from the enterprise meta data source. The meta data repository is configured to generate at least one individual system CRUD Create Read Update Delete matrix and an enterprise canonical model CRUD matrix.

A computer program product comprising a computer readable medium having computer usable program code executable to perform operations for identifying redundancy in application modules is also presented. The computer program product includes computer usable program code for loading enterprise canonical data model meta data representative of an enterprise canonical data model into a meta data repository. The computer program product also includes computer usable program code for loading system specific meta data representative of the databases and application systems into the meta data repository. The computer program further includes populating an individual system CRUD matrix from the system specific meta data. The computer program product further includes computer usable program code for mapping data elements of the system specific meta data with data elements of the enterprise canonical data model meta data. The computer program product also includes computer usable program code for populating an enterprise canonical model CRUD matrix from the individual system CRUD matrix and the mapping. The computer program product yet also includes computer usable program code for analyzing the enterprise canonical model CRUD matrix to identify redundancy in the databases and application systems.

A method is also presented for identifying redundancy. The method in the disclosed embodiments substantially includes the steps necessary to carry out the functions presented above with respect to the operation of the described apparatus and system. In one embodiment the method includes loading enterprise canonical data model meta data representative of an enterprise canonical data model into a meta data repository. The method also includes loading system specific meta data representative of the databases and application systems into the meta data repository. The method further includes populating at least one individual system CRUD matrix from the system specific meta data. The method also includes mapping the system specific meta data to the enterprise canonical data model meta data. The method further includes populating an enterprise canonical model CRUD matrix from the at least one individual system CRUD matrix and the mapping. The method yet also includes analyzing the enterprise canonical model CRUD matrix to identify redundancy in the databases and application systems.

The term canonical is defined as describing a data model having at least one of entity relationship or attribute that is independent of any specific system implementation.

The term CRUD matrix is defined as a matrix that defines what program elements create C read R update U and or delete D data elements

The term coupled is defined as connected although not necessarily directly and not necessarily mechanically.

The term substantially and its variations are defined as being largely but not necessarily wholly what is specified as understood by one of ordinary skill in the art and in one non limiting embodiment substantially refers to ranges within 10 preferably within 5 more preferably within 1 and most preferably within 0.5 of what is specified.

The terms comprise and any form of comprise such as comprises and comprising have and any form of have such as has and having include and any form of include such as includes and including and contain and any form of contain such as contains and containing are open ended linking verbs. As a result a method or device that comprises has includes or contains one or more steps or elements possesses those one or more steps or elements but is not limited to possessing only those one or more elements. Likewise a step of a method or an element of a device that comprises has includes or contains one or more features possesses those one or more features but is not limited to possessing only those one or more features. Furthermore a device or structure that is configured in a certain way is configured in at least that way but may also be configured in ways that are not listed.

Other features and associated advantages will become apparent with reference to the following detailed description of specific embodiments in connection with the accompanying drawings.

Various features and advantageous details are explained more fully with reference to the nonlimiting embodiments that are illustrated in the accompanying drawings and detailed in the following description. Descriptions of well known starting materials processing techniques components and equipment are omitted so as not to unnecessarily obscure the invention in detail. It should be understood however that the detailed description and the specific examples while indicating embodiments of the invention are given by way of illustration only and not by way of limitation. Various substitutions modifications additions and or rearrangements within the spirit and or scope of the underlying inventive concept will become apparent to those skilled in the art from this disclosure.

Certain units described in this specification have been labeled as modules in order to more particularly emphasize their implementation independence. A module is a self contained hardware or software component that interacts with a larger system. Alan Freedman The Computer Glossary 268 8th ed. 1998 . A module comprises a machine or machines executable instructions. For example a module may be implemented as a hardware circuit comprising custom VLSI circuits or gate arrays off the shelf semiconductors such as logic chips transistors or other discrete components. A module may also be implemented in programmable hardware devices such as field programmable gate arrays programmable array logic programmable logic devices or the like.

Modules may also include software defined units or instructions that when executed by a processing machine or device transform data stored on a data storage device from a first state to a second state. An identified module of executable code may for instance comprise one or more physical or logical blocks of computer instructions which may be organized as an object procedure or function. Nevertheless the executables of an identified module need not be physically located together but may comprise disparate instructions stored in different locations which when joined logically together comprise the module and when executed by the processor achieve the stated data transformation.

Indeed a module of executable code may be a single instruction or many instructions and may even be distributed over several different code segments among different programs and across several memory devices. Similarly operational data may be identified and illustrated herein within modules and may be embodied in any suitable form and organized within any suitable type of data structure. The operational data may be collected as a single data set or may be distributed over different locations including over different storage devices.

In the following description numerous specific details are provided such as examples of programming software modules user selections network transactions database queries database structures hardware modules hardware circuits hardware chips etc. to provide a thorough understanding of the present embodiments. One skilled in the relevant art will recognize however that the invention may be practiced without one or more of the specific details or with other methods components materials and so forth. In other instances well known structures materials or operations are not shown or described in detail to avoid obscuring aspects of the invention.

A structured method for identifying redundant elements in large numbers of databases and redundancy in applications so that the redundancy may be reduced reduces overall operating cost and complexity of accessing data in the databases and maintaining the applications.

In one embodiment the user interface device is referred to broadly and is intended to encompass a suitable processor based device such as a desktop computer a laptop computer a Personal Digital Assistant PDA a mobile communication device or organizer device having access to the network . In a further embodiment the user interface device may access the Internet to access a web application or web service hosted by the server and provide a user interface for enabling a user to enter or receive information. For example the user may enter locations of databases and application systems enterprise canonical data models and or mappings of individual elements in the databases and application systems to the enterprise canonical data models. A canonical data model is a representation of common data elements independent of any specific application.

The network may facilitate communications of data between the server and the user interface device . The network may include any type of communications network including but not limited to a direct PC to PC connection a local area network LAN a wide area network WAN a modem to modem connection the Internet a combination of the above or any other communications network now known or later developed within the networking arts which permits two or more computers to communicate one with another.

In one embodiment the server is configured to load enterprise canonical data model meta data representative of the enterprise canonical data models into a meta data repository load system specific meta data representative of databases and application systems into the meta data repository build an individual system CRUD matrix map data elements of the databases to the enterprise canonical data models build an enterprise canonical model CRUD matrix and identify redundancy in the databases and application systems from the enterprise canonical model CRUD matrix. Additionally the server may access data stored in the data storage device via a Storage Area Network SAN connection a LAN a data bus or the like.

The data storage device may include a hard disk including hard disks arranged in an Redundant Array of Independent Disks RAID array a tape storage drive comprising a magnetic tape data storage device an optical storage device or the like. In one embodiment the data storage device may store health related data such as insurance claims data consumer data or the like. The data may be arranged in a database and accessible through Structured Query Language SQL queries or other data base query languages or operations.

In one embodiment the server may submit a query to selected data storage devices to collect a consolidated set of data elements associated with an individual or group of individuals. The server may store the consolidated data set in a consolidated data storage device . In such an embodiment the server may refer back to the consolidated data storage device to obtain a set of data elements associated with a specified individual. Alternatively the server may query each of the data storage devices independently or in a distributed query to obtain the set of data elements associated with a specified individual. In another alternative embodiment multiple databases may be stored on a single consolidated data storage device .

In various embodiments the server may communicate with the data storage devices over the data bus . The data bus may comprise a SAN a LAN or the like. The communication infrastructure may include Ethernet Fibre Chanel Arbitrated Loop FC AL Small Computer System Interface SCSI and or other similar data communication schemes associated with data storage and communication. For example the server may communicate indirectly with the data storage devices the server first communicating with a storage server or the storage controller .

In one example of the data management system the first data storage device may store data associated with insurance claims made by one or more individuals. The insurance claims data may include data associated with medical services procedures and prescriptions utilized by the individual. In one particular embodiment the first data storage device included insurance claims data for over 56 million customers of a health insurance company. The database included claims data spanning over 14 years. Of those 56 million members 26 million had a five year history or more. In one embodiment individuals suffering from a common illness may be aggregated to identify many if not all of the possible decisions points and their resulting outcomes related to the progression of the disease.

In one embodiment the second data storage device may store summary data associated with the individual. The summary data may include one or more diagnoses of conditions from which the individual suffers and or actuarial data associated with an estimated cost in medical services that the individual is likely to incur. The third data storage device may store customer service and program service usage data associated with the individual. For example the third data storage device may include data associated with the individual s interaction or transactions on a website calls to a customer service line or utilization of a preventative medicine health program. A fourth data storage device not shown may store marketing data. For example the marketing data may include information relating to the individual s income race or ethnicity credit ratings etc. In one embodiment the marketing database may include marketing information available from a commercial direct marketing data provider.

The server may host a software application configured for identifying redundancy and consolidation opportunities. The software application may further include modules for interfacing with the data storage devices interfacing a network interfacing with a user through the user interface device and the like. In a further embodiment the server may host an engine application plug in or application programming interface API . In another embodiment the server may host a web service or web accessible software application.

The computer system also may include Random Access Memory RAM which may be SRAM DRAM SDRAM or the like. The computer system may utilize RAM to store the various data structures used by a software application configured to identifying system redundancy and consolidation opportunities. The computer system may also include Read Only Memory ROM which may be PROM EPROM EEPROM optical storage or the like. The ROM may store configuration information for booting the computer system . The RAM and the ROM hold user and system data.

The computer system may also include an input output I O adapter a communications adapter a user interface adapter and a display adapter . The I O adapter and or the user interface adapter may in certain embodiments enable a user to interact with the computer system in order to input information for obtaining enterprise canonical data models obtaining descriptions of databases and application systems and or obtaining mappings of data elements of the databases and application systems to the enterprise canonical data models. In a further embodiment the display adapter may display a graphical user interface associated with a software or web based application for identifying redundancy and or consolidation opportunities in databases and application systems.

The I O adapter may connect one or more storage devices such as one or more of a hard drive a Compact Disk CD drive a floppy disk drive a tape drive to the computer system . The communications adapter may be adapted to couple the computer system to the network which may be one or more of a LAN WAN and or the Internet. The user interface adapter couples user input devices such as a keyboard and a pointing device to the computer system . The display adapter may be driven by the CPU to control the display on the display device .

The present embodiments are not limited to the architecture of computer system . Rather the computer system is provided as an example of one type of computing device that may be adapted to perform the functions of a server and or the user interface device . For example any suitable processor based device may be utilized including without limitation including personal data assistants PDAs computer game consoles and multi processor servers. Moreover the present embodiments may be implemented on application specific integrated circuits ASIC very large scale integrated VLSI circuits or other circuitry. In fact persons of ordinary skill in the art may utilize any number of suitable structures capable of executing logical operations according to the described embodiments.

The enterprise meta data sources may include enterprise canonical data models . A data modeling tool scanner receives data from the enterprise meta data sources and outputs enterprise canonical data model meta data representative of the enterprise canonical data models . An enterprise canonical model CRUD matrix in the meta data repository is created from the system specific meta data and the enterprise canonical data model meta data . A data mining algorithm may create a report using for example clustering techniques on the enterprise canonical model CRUD matrix identifying redundancy in the databases and application systems and or opportunities for consolidating databases and application systems . which illustrates an embodiment of data mining algorithm . As shown in the depicted embodiment data minding algorithm create clusters in response to enterprise canonical CRUD matrix . The number of clusters each identifying potential redundancy within the databases and applications will vary based on the size of the enterprise canonical model CRUD matrix. Certain embodiments of a CRUD matrix may have thousands of rows. Automated data mining techniques may make it easier to analyze particularly large CRUD matrices.

The schematic flow chart diagrams that follow are generally set forth as logical flow chart diagrams. As such the depicted order and labeled steps are indicative of one embodiment of the presented method. Other steps and methods may be conceived that are equivalent in function logic or effect to one or more steps or portions thereof of the illustrated method. Additionally the format and symbols employed are provided to explain the logical steps of the method and are understood not to limit the scope of the method. Although various arrow types and line types may be employed in the flow chart diagrams they are understood not to limit the scope of the corresponding method. Indeed some arrows or other connectors may be used to indicate only the logical flow of the method. For instance an arrow may indicate a waiting or monitoring period of unspecified duration between enumerated steps of the depicted method. Additionally the order in which a particular method occurs may or may not strictly adhere to the order of the corresponding steps shown.

According to one embodiment enterprise canonical data models for the major subject areas of an enterprise are loaded into the meta data repository. For example in a health care organization the subject areas may include claims members customers health care encounters providers and or other subject areas. The enterprise canonical data model serves to provide a reference for describing data assets of the enterprise in a common language. An enterprise canonical data model for a customer may include for example a first name last name social security number date of birth and or other elements.

The method continues at block to obtain system specific meta data from one database and application system and load the system specific meta data into the meta data repository. According to one embodiment the system specific meta data is obtained by scanners. The system specific meta data includes information on operations performed by application modules of application systems to create read update and delete each data element of an individual system database. For example the system specific meta data may include meta data describing a data asset such as a catalog for a database of the COBOL copybooks used by a COBOL program logical and or physical data models of databases results of profiling a database using a data profiling tool source code describing how an application processes data extract transform load ETL tool meta data indication of data created read updated deleted in ETL jobs business intelligence tool meta data indicating what data is read from databases and what data is computed or created and published in reports and or data dictionaries that give English language definitions of data. According to one embodiment additional meta data may be added to the system specific meta data to allow the databases and application systems to be understood by a human.

At block an individual system CRUD matrix is created. An example of an individual CRUD matrix is shown in . A matrix has columns representing data element . data element . and data element . respectively. The matrix also includes rows representing application module . application module . and application module . respectively. Cells in the matrix indicate the operations the application modules perform on the data elements . For example a cell indicates that the application module performs create C and read R operations on the data element . As another example a cell indicates that the application module performs create C read R update U and delete D operations on the data element .

An additional example of an individual CRUD matrix is shown in . A matrix has columns representing data element . data element . and data element . respectively. The matrix also includes rows and representing application module . and application module . respectively. Cells in the matrix also indicate the operations the application modules and perform on the data elements and respectively. For example cell indicated that the application module performs the delete D operating on the data element .

The meta data scanners and meta data repository may be provided by commercially available metadata tools such as ASG Rochade and ASG Becubic provided by Allen Systems Group ASG software solutions and i.Sight from Micro Focus. The CRUD matrices may also be created with similarly commercially available meta data tools.

Turning back to the method continues at block to validate system specific meta data from the individual database and application system in the meta data repository. Validation is performed to ensure correctness of the individual CRUD matrix generated at block According to one embodiment the blocks may be executed in parallel with block .

After validation at block the method continues to block . At block a mapping is generated for data elements in the individual system CRUD matrix generated at block to the enterprise canonical data model loaded in the meta data repository at block . For example at block a data element in one individual system CRUD matrix named LName may be mapped to last name in the enterprise canonical data model. In another example a data element in the individual system CRUD matrix named SSN may be mapped to social security number in the enterprise canonical data model. According to one embodiment analysts may generate the mapping. According to another embodiment the mapping may be generated automatically. For example an analyst may map the data element of to an enterprise canonical data element the data element of to an enterprise canonical data element and the data element of to an enterprise canonical data element .

After data element mapping at block a decision block is reached. At the decision block additional databases and application systems for identifying redundancy and or consolidation opportunities are identified. If additional databases and application systems are identified the method continues to block for the next individual system. The method continues through blocks and to obtain system specific meta data from the additional databases and application systems validate the meta data from the additional systems and map data elements of the individual system CRUD matrix to data elements of the enterprise canonical data model for the additional systems. The additional individual system CRUD matrix may include a data element named NameLast mapped to last name in the enterprise canonical data models. Thus data elements with different names in individual system CRUD matrices may correspond to the same data element in the enterprise canonical data model. Blocks and are repeated for each additional database and application system. When no additional databases and application systems are identified for identifying redundancy and or consolidation opportunities the method proceeds to block .

For example an analyst may map multiple data elements to an enterprise canonical data element. Table 1 provides one embodiment mapping data elements and from two individual system CRUD matrices to enterprise canonical data elements.

At block an enterprise canonical model CRUD matrix is generated. For example the CRUD matrix may be generated by combining individual system CRUD matrices from block according to the mapping of block . An example of an enterprise canonical model CRUD matrix is shown in .

The CRUD matrix also includes rows referring to application module . application module . application module . application module . and application module . respectively. Although five application modules from two application systems are illustrated on the CRUD matrix more or less application modules may be placed in rows on the CRUD matrix . Each of the rows are obtained from individual system CRUD matrices such as the one shown in . According to one embodiment the application modules may be application modules acquired during a company acquisition.

Each cell in the CRUD matrix indicates operations performed by the application modules to create read update and or delete one of the canonical data elements . For example a cell indicates operations performed by the application module include creating C reading R updating U and deleting D the enterprise canonical data element . As another example a cell indicates operations performed by the application module include updating U enterprise canonical data element .

Turning back to after the enterprise canonical model CRUD matrix is constructed at block the method continues to block . At block an algorithm operates on the canonical model CRUD matrix generated at block to identify redundancy and or opportunities for consolidation. According to one embodiment the algorithm may be a clustering algorithm. A clustering algorithm groups sets of application modules based on similarities in which enterprise canonical data elements the applications modules operate on to create read update and delete. The application modules grouped together are likely to be redundant. For example SAS or IBM Intelligent Mining software packages may be employed to identify redundancy and or opportunities for consolidation in application modules. These consolidations may be grouped together to form a cluster representing application modules that perform similar operations on the same enterprise canonical data elements. These clustered application modules may be candidates for consolidation. Moreover application modules that are not clustered with other modules may be unique and may be retained.

Turning back to according to one embodiment the application module and the application module may be grouped by an algorithm based upon similarities in the CRUD matrix . As shown in the CRUD matrix the application module and the application module may perform identical operations on the enterprise canonical data elements . Application module . and application module . may form a cluster and may provide an opportunity for consolidation. Since both application modules perform similar tasks on the same canonical data elements they may be redundant. However application modules may not be identical but still grouped and identified as likely to be redundant.

All of the methods disclosed and claimed herein can be made and executed without undue experimentation in light of the present disclosure. While the apparatus and methods of this invention have been described in terms of preferred embodiments it will be apparent to those of skill in the art that variations may be applied to the methods and in the steps or in the sequence of steps of the method described herein without departing from the concept spirit and scope of the invention. In addition modifications may be made to the disclosed apparatus and components may be eliminated or substituted for the components described herein where the same or similar results would be achieved. All such similar substitutes and modifications apparent to those skilled in the art are deemed to be within the spirit scope and concept of the invention as defined by the appended claims.

