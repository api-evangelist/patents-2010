---

title: Information processing apparatus, printing system, and control method therefor
abstract: The present invention realizes a network printing system capable of accumulating and chasing printed data. Further, by providing a job chasing function on the printer driver side, detailed setting can be done to extract history information of the job chasing function. The detailed setting to extract history information to chase a job can be done only by a specific administrator or user so that the job can be reliably chased, whereas the administrator or user can obtain desired history information. Accordingly, a precise jog chasing system can be established.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07990553&OS=07990553&RS=07990553
owner: Canon Kabushiki Kaisha
number: 07990553
owner_city: Tokyo
owner_country: JP
publication_date: 20100712
---
This application is a continuation of U.S. patent application Ser. No. 11 287 537 filed Nov. 23 2005 which claims the benefit of Japanese Application No. 2004 338928 filed Nov. 24 2004 both of which are hereby incorporated by reference herein in their entirety.

The present invention relates to an information processing apparatus and an information processing method. More specifically the present invention relates to a system including an information processing apparatus such as a personal computer and a printing device such as a printer and to devices a method and a control program constituting the system.

Owing to a recent progress in digitalization of information and diffusion of network and mobile systems users can access a large amount of information at one time and portability of the information has dramatically improved. This trend will inevitably accelerate.

Hitherto various methods for preventing leakage of information have been widely used. In one of them for example an access right is set in confidential information or a storage server storing the information so as to limit users who can access the confidential information.

In recent years however leakage of information has often been caused by a user who is permitted to access the confidential information. Therefore leakage of information cannot be sufficiently prevented by only setting an access right.

An example of the countermeasures is a method of setting print permission information in a document to be printed or print data and referring to the print permission information before performing printing e.g. see Japanese Patent Laid Open No. 2004 252784 .

Another example is a method of storing print data in a print server such that the print data can be reprinted and storing the print data as a print log by adding a time stamp by obtaining a job name a client name and a user name and by generating bitmap data based on the print data e.g. see Japanese Patent Laid Open No. 2002 149371 .

Still another example is a method of obtaining a print log also on the printer side and storing the print log in a server e.g. see Japanese Patent Laid Open No. 2003 330677 .

Yet another example is a method in which a spooler in a print server transmits intermediate data to be printed to a printer driver and to a database of a print log or in which the printer driver receives the intermediate data to be printed from the spooler and transmits a PDL page description language to a printer and also transmits the intermediate data to the database for a print log e.g. see Japanese Patent Laid Open No. 2004 118243 .

However in these known arts detailed settings or management of a print log cannot be done in an information processing apparatus provided with a printer driver.

The present invention is directed to realizing a network printing system capable of storing and chasing printed data. Further by providing a job chasing function on the printer driver side detailed setting can be done to extract history information of the job chasing function. The detailed setting to extract history information to chase a job can be done only by a specific administrator or user so that the job can be reliably chased whereas the administrator or user can obtain desired history information. Accordingly a precise jog chasing system can be established.

According to a first aspect of the present invention an information processing apparatus includes an image processing unit for performing image processing including generating print data an extracting unit for extracting from the print data generated by the image processing unit history information with which the content of the print data can be identified an input unit for inputting control information to control the extracting unit and a determining unit for determining whether a user has a right to input the control information to the input unit by using identification information associated with the user. If the determining unit determines that the user has a right to input the control information the input unit permits input of the control information.

According to a second aspect of the present invention an information processing method includes an image processing step of performing image processing including generating print data an extracting step of extracting from the print data generated in the image processing step history information with which the content of the print data can be identified an input step of inputting control information to control the extracting step and a determining step of determining whether a user has a right to input the control information in the input step by using identification information associated with the user. If the determining step determines that the user has a right to input the control information the input step permits input of the control information.

According to a third aspect of the present invention a printing system includes an image processing unit configured to perform image processing including generating print data an extracting unit configured to extract from the print data generated by the image processing unit history information with which the content of the print data can be identified an input unit configured to input control information to control the extracting unit and a determining unit configured to determine whether a user has a right to input the control information to the input unit by using identification information associated with the user. If the determining unit determines that the user has a right to input the control information the input unit permits input of the control information.

According to a fourth aspect of the present invention a method for controlling a printing system includes an image processing step of performing image processing including generating print data an extracting step of extracting from the print data generated in the image processing step history information with which the content of the print data can be identified an input step of inputting control information to control the extracting step and a determining step of determining whether a user has a right to input the control information in the input step by using identification information associated with the user. If the determining step determines that the user has a right to input the control information the input step permits input of the control information.

According to a fifth aspect of the present invention a printer driver mounted on an information processing apparatus connecting to a printing device through a communication medium is provided. The printer driver includes a print data generating unit configured to generate print data a chasing data generating unit configured to generate chasing data based on the print data and a chasing data setting unit configured to perform setting about generation of the chasing data to the chasing data generating unit.

According to a sixth aspect of the present invention a method for controlling a printer driver mounted on an information processing apparatus connecting to a printing device through a communication medium is provided. The method includes a print data generating step of generating print data a chasing data generating step of generating chasing data based on the print data and a chasing data setting step of performing setting about generation of the chasing data to the chasing data generating step.

Other features of the present invention will be apparent from the following description taken in conjunction with the accompanying drawings in which like reference characters designate the same or similar parts throughout the figures thereof.

An embodiment of the present invention will now be described in detail in accordance with the accompanying drawings.

The configuration of a chasing system is described. is a block diagram showing an example of the configuration of a printing system according to the embodiment of the present invention. The printing system includes a host computer connecting to a network a printer a chasing information storage server and an administrator client .

The host computer receives a print request from a user generates print data in accordance with the print request and transmits the print data to the printer . Also the host computer extracts generates chasing data that matches the print request and transmits the chasing data to the chasing information storage server .

The chasing information storage server registers and stores the chasing data received from the host computer in a storage area constructed in the chasing information storage server or another information apparatus so as to establish a database.

The administrator client is used by a system administrator to search for and browse chasing data that is registered in the database as necessary.

The administrator client can be the same information apparatus as the chasing information storage server .

In the host computer includes a central processing unit CPU . The CPU controls execution of processes described below according to the embodiment of the present invention e.g. a document process of a document including figures images characters and tables including table calculation and the like and a printing process based on the document process in accordance with a document processing program stored in a program ROM read only memory in a ROM or an external memory . The CPU also controls each device connecting to a system bus . The program ROM in the ROM or the external memory stores an operating system program OS functioning as a control program for the CPU . Further a font ROM in the ROM or the external memory stores font data and the like used in the above described document process. Still further a data ROM in the ROM or the external memory stores various data used in the above described document process. A random access memory RAM functions as a main memory or a work area of the CPU .

A keyboard controller KBC controls key input from a keyboard KB or a pointing device not shown . A cathode ray tube controller CRTC controls display in a CRT display CRT . A disk controller DKC controls an access to the external memory such as a hard disk HD or a floppy disk FD storing a boot program various applications font data a user file an edit file a printer control command generating program hereinafter referred to as a printer driver and so on. A printer controller PRTC connects to the printer through a bidirectional interface interface and controls communication with the printer .

The CPU opens various windows that are registered in advance based on commands indicated by a mouse cursor not shown on the CRT so as to execute various data processes. When a user wants to perform printing the user opens a print setting window and sets the printer and a printing method such as a printing mode on the printer driver.

The printer is controlled by a CPU provided therein. The printer CPU outputs image signals as print output information to a printing unit printer engine connected to a system bus based on a control program stored in a ROM or a control program stored in an external memory .

A program ROM in the ROM stores a control program for the CPU and so on. A font ROM in the ROM stores font data and so on used to generate the above mentioned print output information. A data ROM in the ROM stores information and so on used in the computer when the printer does not have the external memory such as a hard disk.

The CPU can communicate with the host computer through an input unit and thus information in the printer can be transmitted to the host computer . A RAM functions as a main memory or a work area of the CPU and the memory capacity thereof can be expanded by connecting an optional RAM to an expansion port not shown . The RAM is used as an output information expanding area an environment data storing area a nonvolatile RAM NVRAM and the like.

An access to the above described external memory such as an HD or an IC card is controlled by a memory controller MC . The external memory is optionally connected and stores font data an emulation program form data and so on. An operating unit includes a key switch used for an operation and a light emitting diode LED display device.

The printer can also include an NVRAM not shown to store printer mode setting information input through the operating unit .

In this embodiment the printing unit functions as a printer engine using an electrophotographic method. Therefore print data is eventually recorded on a medium such as paper by dots of toner. Of course the printing method used in the present invention is not limited to the electrophotographic method. The present invention can be applied to printing devices using any printing method that performs printing by creating dots e.g. an inkjet method.

Hereinafter the configuration of a printing processing device and an information chasing device in the host computer is described with reference to .

The application and the printer driver can be added into the HD of the external memory through the FD in the external memory a CD ROM not shown or a network not shown . The application stored in the external memory is loaded into the RAM and is then executed. However when the application requests a printing process to the printer print data is output rendered by using the graphic engine that has also been loaded into the RAM and can be executed.

The graphic engine loads the printer driver which is provided for each printing device such as a printer from the external memory to the RAM and sets an output from the application to the printer driver . Also the graphic engine converts a graphic device interface GDI function received from the application to a device driver interface DDI function and outputs the DDI function to the printer driver . The printer driver converts the output from the application into a control command that can be recognized by the printer e.g. into a page description language PDL based on the DDI function received from the graphic engine . The printer control command generated in this way is output as print data to the printer via the system spooler loaded into the RAM by the OS and through the interface .

Herein the GDI function is rendering code data that can be interpreted on an OS operating system provided in the computer and is an API application programming interface . The GDI function can be interpreted also by the application . The DDI function is generated by conversion by the OS in the graphic engine for the printer driver. As the OS Windows of Microsoft Corporation or the like can be used.

Further in the printing system according to this embodiment a job chasing function unit is provided in the printer driver . Either a built in module of the printer driver or a library module added by individual installation can be used as the job chasing function unit .

The printer driver extracts generates chasing data by executing the job chasing function unit and transmits the chasing data to a job chasing management unit .

The job chasing management unit receives the chasing data and transfers it to the chasing information storage server . Incidentally the job chasing management unit can process or select the received chasing data as necessary. Further the job chasing management unit can transmit the chasing data to the chasing information storage server upon receiving the chasing data. Alternatively the job chasing management unit can temporarily store the chasing data in a storage area of the HD or the like and then transmit the chasing data to the chasing information storage server in accordance with a specified transmission schedule.

For these purposes the system shown in is expanded so that print data can be spooled in the form of intermediate code data as shown in . In order to process the print data setting is done through a UI control unit B provided in the printer driver and the setting is stored in the RAM or the external memory .

Hereinafter the configuration shown in is described in detail. As shown in the figure in this expanded processing system a DDI function as a print command from the graphic engine is received by a dispatcher . When the print command DDI function received by the dispatcher from the graphic engine is based on the print command GDI function that has been issued by the application to the graphic engine the dispatcher loads the spooler that is stored in the external memory into the RAM and transmits the print command DDI function to the spooler .

The spooler analyzes the received print command DDI function converts the print command to intermediate code in units of pages and outputs the intermediate code to the spool file . Also the spooler obtains process settings e.g. Nup duplex staple color monochrome about the print data from the UI control unit B and stores the settings in the spool file in the form of a file of each job. The spool file is generated in the external memory in the form of a file. Alternatively the spool file can be generated in the RAM . Further the spooler loads a spool file manager stored in the external memory into the RAM and notifies the spool file manager of a generating state of the spool file . Then the spool file manager determines whether a printing process can be performed in accordance with the process settings of the print data stored in the spool file . The intermediate code stored in the spool file is used only in the printer driver .

When the spool file manager determines that the printing process can be performed by using the graphic engine the spool file manager loads a despooler stored in the external memory into the RAM and instructs the despooler to perform a process of printing a page rendering file of the intermediate code described in the spool file .

The despooler processes the page rendering file of the intermediate code contained in the spool file in accordance with a job setting file including process setting information included in the spool file . Specifically the despooler reads the page rendering command of the intermediate code so as to regenerate the GDI function and outputs the GDI function through the graphic engine .

First the despooler ensures an area device context for bitmap expansion in the RAM and performs rendering in order to transmit a rendering result based on the output GDI function to a job chasing function processing unit . The generated chasing information is converted to a format that can be read by the job chasing management unit by the job chasing function processing unit and is transferred thereto. The converting method used here can be a highly compatible method such as an XML Extensible Markup Language method or can be a method according to a unique specification.

When the print command DDI function received from the graphic engine is based on the print command GDI function that was issued by the despooler to the graphic engine the dispatcher transmits the print command to a rendering unit C not to the spooler .

The rendering unit C generates a printer control command described in a page description language or the like based on the DDI function obtained from the graphic engine and outputs the printer control command to the printer through the system spooler .

The configuration of the printing processing device and the information chasing device in the host computer has been described above.

Hereinafter examples of the system configuration are described. Since the placement of a system setting operating unit is independent from its authority a network printing system in which a connection path has a high degree of freedom can be provided. illustrates various operation forms of this invention. At the same time shows an example of the simplest operation of this invention. That is the job chasing management unit is provided in the host computer print data is directly transmitted from the printer driver to the printer and chasing data is transmitted from the job chasing function unit to the chasing information storage server through the job chasing management unit in the host computer . This configuration is the minimum to realize the present invention. In the following description this configuration is adopted unless otherwise specified.

In unlike in the job chasing management unit is provided in a chasing management computer that is separated from the host computer . In this configuration print data is directly transmitted from the printer driver to the printer as in and chasing data is transmitted from the job chasing function unit to the chasing information storage server through the job chasing management unit in the chasing management computer . With this configuration the chasing information storage server for storing chasing data can be scheduled on a day or in a time slot when the network load becomes light so that the load on the chasing information storage server can be controlled.

The configuration shown in is different from that in in that a print server is provided between the host computer and the printer . In this configuration print data is transmitted from the printer driver to the printer through a corresponding printer queue print spooler of the print server and chasing data is transmitted from the job chasing function unit to the chasing information storage server through the job chasing management unit in the host computer as in . With this configuration an operation method using the print server can be realized. Further by providing the printer driver in the print server the printer driver can be distributed to the host computer synchronization can be performed and setting information can be shared. Further various settings relating to a job chasing function can be collectively managed in the print server so as to prevent a user who does not have a right to perform various settings of the job chasing function from changing the settings.

The configuration shown in is a combination of the configurations shown in . That is the print server is provided between the host computer and the printer and the job chasing management unit is provided in the chasing management computer separated from the host computer . In this configuration print data is transferred from the printer driver to the printer through a corresponding printer queue print spooler of the print server as in . On the other hand chasing data is transmitted from the job chasing function unit to the chasing information storage server through the job chasing management unit in the chasing management computer as in . With this configuration advantages of the configurations shown in can be obtained at the same time.

Referring to the chasing management computer and the print server shown in are combined into a print server chasing management computer . In this configuration print data is transferred from the printer driver to the printer through a corresponding printer queue print spooler of the print server chasing management computer and chasing data is transmitted from the job chasing function unit to the chasing information storage server through the job chasing management unit in the print server chasing management computer . With this configuration the chasing management computer and the print server which are separated in can be combined into the print server chasing management computer . Accordingly the installation space and cost can be reduced.

After a print job has started the printer driver receives a rendering command DDI command from the GDI in step S. Then in step S the printer driver and the job chasing function unit collect or generate chasing data corresponding to the received rendering command and transfer the chasing data to the job chasing management unit .

According to the above description about the GDI function is converted to the DDI function and is temporarily stored as intermediate code in the spool file . Then the graphic engine regenerates the GDI function based on the intermediate code and transmits the GDI function to the jog chasing management unit .

More specifically chasing data is collected or generated by executing a process depending on a received rendering command or various settings set on the job chasing function unit and then the chasing data is transferred to the job chasing management unit . For example when the received rendering command is a print start command attribute information about the job or information about an environment where the printing is performed is collected or generated as chasing data. When the received rendering command is a page start command attribute information about the page is collected or generated as chasing data. Further when the job chasing function unit is instructed to extract text information character string information is extracted from a text rendering command so as to collect or generate chasing data. When instructions to extract image information have been provided the image information is rendered as a bitmap image in a memory area where each rendering command is ensured.

After the chasing data has been collected generated and transferred in the above described manner the process proceeds to step S where print data control command that can be recognized by the printer corresponding to the rendering command received in step S is generated. The generated print data is written into the system spooler and is then transferred to the printer .

According to the above description about the intermediate code that is temporarily stored in the spool file is converted to a GDI function by the graphic engine . Then the GDI function is transmitted to the rendering unit C through the dispatcher .

In this way the steps of receiving a rendering command S generating and transferring chasing data S and generating and transferring print data S are repeated until a job end command is issued S .

A job chasing function UI is described next. show examples of a user interface to perform settings about job chasing. shows an example of an initial screen of the user interface for chasing the screen being placed in an add in UI control unit of the printer driver . In this example setting about chasing can be done in a property sheet Job chasing function in a dialog . shows a screen on which an administrator performs setting through a UI of a job chasing management unit see . Additionally screens shown in B and C are displayed when they are called by a UI of a job chasing function unit see .

Considering the operation purpose of this system the dialog should be displayed to only a user who is permitted to change the setting of a target printer. Control of displaying this dialog and limiting a user s right of execution will be described later.

Referring to a check box Perform job chasing is used to select enable or disable of the job chasing function. The user can control ON and OFF of this function by operating this check box. When the check box in is clicked a command indicating ON or OFF is input to the job chasing function UI control unit shown in and the job chasing function processing unit is controlled according to the input command. When a command OFF is input the job chasing function processing unit does not start the job chasing function and keeps the job chasing function stopped.

A dialog shown in used for performing detailed settings of the job chasing function opens when a setting button shown in is selected. In this job chasing setting dialog information about the destination of chasing data and the content of the chasing data generated by the job chasing function processing unit are mainly set.

An identification name of a computer in which the job chasing management unit operates is input to a box Name of management client in this embodiment Server A which is the name of a computer including the job chasing management unit . A key for distinguishing from another connection in the job chasing management unit is input to a box Identification name . Further a timeout value used in communication with the job chasing management unit is set in advance in a box Timeout value . The above three items are information used to transmit chasing data. By setting an OK button after performing the setting on this screen the setting is stored in a setting that is managed by the job chasing management unit. The job chasing management unit controls the job chasing function unit by using the setting so as to perform a process for chasing recording of a print history and print data generated by the driver.

When the job chasing management unit operates in the computer that displays this user interface the identification name of the computer is input in the box Name of management client . When the job chasing management unit operates in another computer the identification name of the computer in which the job chasing management unit operates is input to the box .

A check box Extract text is used to specify whether text character string information should be included in chasing data. By checking this check box the printer driver extracts text character string information as chasing data by cooperating with the job chasing function unit. By adding the text character string information to the chasing data text search can be easily performed after the chasing data has been stored in the chasing information storage server .

A check box Extract image is used to specify whether page bitmap information should be included in chasing data. By checking this check box the printer driver generates page bitmap information in addition to print data by cooperating with the job chasing function unit. Then by using a file server on a network as the chasing information storage server the chasing data can be registered through a network interface. By adding the page bitmap information to the chasing data images can be browsed after being stored in the chasing information storage server .

Further by using a box Number of bits color a box Number of bits monochrome a box Resolution a box Compression method and a box Encoding method the attribute and format of a page image to be generated can be specifically set.

The job chasing function UI and right control are described next. is a conceptual view of controlling a right of a setting operation. Considering the operation purpose of this system the operating unit of this network printing system should be displayed to only a user who is permitted to change settings. In a system setting an administrator can access data and its operating unit. However a user cannot access the system setting and cannot operate the operating unit.

In order to realize this external specification the following method is adopted. Firstly the job chasing function unit and the job chasing management unit are separated from each other. Secondly the job chasing function unit and the job chasing management unit can be placed in different PCs or can be placed in the same PC . Thirdly when a right to access the job chasing management unit is given setting and operation can be done and a UI is displayed. Fourthly when the access right is not given neither setting nor operation can be done and a UI is not displayed an unoperatable state can be indicated by graying out the job chasing UI . Fifthly an access right control function of the OS or an authenticating function of the network printing system is used to determine the right.

Hereinafter the above described method is described in detail. shows a first example of the configuration to control the right. Herein in an environment where each computer is managed by an existing access control list ACL which is a function of an OS an administrator performs system setting so as to change the function of each client.

The ACL is a data listing of access rights of respective network users and accessible resources including servers and files. The ACL is installed in order to collectively manage devices on the network and rights to use information.

The OS determines an access right of a user to use various network resources by referring to the ACL. This function is provided in a typical OS for example Windows 2000 XP of Microsoft Corporation.

In the configuration shown in there is provided a storage server serving as a database for storing an extraction result of the network system and its front end that is a chasing information management server . Between the chasing information management server and a job chasing function unit serving as an extracting unit the job chasing management unit having the setting and the operation UI is placed. Basically the storage server and the management server should be mounted on different apparatuses. Also the job chasing management unit and the job chasing function unit should be mounted on different apparatuses. However those respective functions can be combined together so as to be mounted on a single apparatus e.g. a PC or a work station having the same configuration as that of the host computer in . A setting of the chasing information management server is transmitted to the job chasing management unit . This setting is managed as the setting together with settings and of the job chasing management unit and the job chasing function unit . When an administrator A wants to change the setting through the job chasing management unit the job chasing management unit refers to the ACL. When the administrator A has a setting right the operating unit UI is displayed where the administrator A can change the setting . The screens shown in are displayed in the operating unit in which the user can perform settings. Then each set value is stored as the setting .

This setting includes an operation setting of the job chasing function unit and the driver . The job chasing management unit operates the job chasing function unit and the driver in accordance with the setting . The stored setting is as described above with reference to . Based on the stored setting the job chasing management unit controls the driver through the job chasing function unit.

When an ACL determines that a user using the client where the job chasing function unit and the driver operate does not have a setting right the user cannot access an operating unit UI .

First the job chasing management unit starts to obtain setting from an upper layer in step S. The job chasing management unit obtains the setting in step S.

Then the job chasing management unit starts a setting operation in step S. Specifically in step S the job chasing management unit checks the ACL access control list access right of a user who changes the setting. If the user has an access right the process proceeds to step S where the job chasing management unit determines whether the setting should be changed. When the setting should be changed the process proceeds to step S where the setting UI is opened. Then the setting is changed in step S and the changed setting is stored in step S.

After that change in setting of the driver is started in step S. The setting items required to the driver are merged in step S and the setting of the driver is changed in step S.

When an administrator A wants to change a setting from the client side the administrator is authenticated by a job chasing management unit . The job chasing management unit checks an ACL and if the administrator A has an access right the job chasing management unit provides a certificate of the administrator A to the client side. When this certificate is issued an operating unit UI is displayed so that the setting in the job chasing management unit can be changed.

The job chasing management unit starts authentication in step S in accordance with the name of an administrator and a password transmitted from the client. In step S it is determined whether an administrator A corresponding to the user name and password transmitted from the client has a right to set the job chasing management unit . If the administrator A has a setting right the process proceeds to step S where authentication is performed. Then in step S a certificate of the administrator A is transmitted from the job chasing management unit to the client machine.

Then in step S the job chasing management unit starts a setting operation. In step S the job chasing management unit determines whether the administrator A has a certificate. When it is determined that the administrator A has a certificate the process proceeds to step S where a setting UI is opened. The setting is changed in step S and the changed setting is stored in step S. Then change in setting of the driver starts in step S. Setting items required to the driver are merged in step S and the setting of the driver is changed in step S.

Accordingly the authentication information is transferred to the job chasing management unit. If authentication has been successfully done a setting UI can be opened from the client side. The operating specification of the user interface is the same as that in . In this UI the name of a remote server can be specified. When the server determines that a transmitter of a display request is a chasing information management server the server locally displays the screen shown in on the chasing information management server side. When the server determines that the transmitter of the display request is a client having a job chasing function unit the server controls the client apparatus so as to display the screens shown in B and C.

After an OK button on the screen has been pressed values input through the screen displayed on the UI settings that can be input are the same as those in are transferred through the job chasing function unit to the job chasing management unit .

The job chasing management unit stores the transferred settings. At this time if the settings include an already stored setting the settings are merged. Based on this information the job chasing management unit controls the job chasing function unit so as to chase data generated by the driver as described above.

As described above the host computer includes the printer driver for generating print data such as PDL data or image data the job chasing function unit for extracting text data or thumbnail data serving as history information based on which the content of print data can be identified from the generated print data and the job chasing management unit for inputting control information to control the job chasing function unit .

The job chasing management unit determines whether a user has a right to input control information e.g. information to be input from the UI displayed on the screen shown in or the screen shown in to the job chasing management unit by using identification information associated with the user who provides instructions to control the function of the job chasing function unit. When the job chasing management unit determines that the user has a right to input the control information the job chasing management unit permits the user to input the control information.

By using the control information the job chasing management unit controls the job chasing function unit .

Alternatively the control information can include input instructions to switch whether or not the extracting unit extracts the history information.

Also the control information can include an input of instructing the extracting unit to extract at least one of image data and text data so that the content of the print data can be identified. Further the control information can include a command to specify at least one of the quality of an image extracted by the job chasing function unit resolution and a compression method used to store extracted data.

The job chasing management unit determines whether a user performing an operation has a right to input control information by using a user name obtained through the operating system or the printer driver. Additionally the control information can include information indicating a place to store history information e.g. the host name or IP address of the chasing information storage server or timeout information indicating the time to give up storage of history information after a storage destination does not respond for a predetermined time period. The job chasing function unit can extract text data or thumbnail data with which a user can identify the content to be printed from the PDL data or image data generated by the printer driver. Then the job chasing function unit can store the extracted data as history information in a memory in the information processing apparatus a memory ensured by the job chasing function unit in the host computer or the chasing information storage server that can be accessed through the host computer and the network.

Now the chasing data is described in detail. Herein the chasing data extracted by the job chasing function unit according to the embodiment of the present invention is described. The chasing data is generated in step S in . The chasing data is extracted while being classified into the following four categories 1 information about a printer to output data and its attribute 2 information about an information apparatus such as a computer that performed printing and its user 3 various attribute information and statistical information about a print job and 4 information about respective pages in a print job. Hereinafter each type of information is described.

First information about a printer to output print data and its attribute is described. shows an example of information printer information about a printer to output print data and its attribute. This information depends on a printer to output print data and thus can be generated at timing of processing a command that occurs at least once in each job in step S in for example when a job start command is issued.

 ServerName is used when a printer to output print data performs printing via a print server and indicates the name of the print server.

 ShareName indicates a share name that is set by an administrator so that another client PC can refer to it in the print server. This item is not used when the print server is not used.

 PortName indicates the name of a port to which the target printer is connected. For example when an LPR connection is used a standard name is based on an IP address and thus a device at an output destination can be specified.

 DriverName indicates the name of a printer driver used to output data to the target printer. This name is unique to the driver and cannot be changed by a user unlike the PrinterName . Therefore an output target device can be specified.

 Comment and Location are character string information that can be applied from an administrator of a client and a server to the printer driver. When printing is performed through the print server chasing thereafter can be easily performed if the administrator inputs information for easily specifying a printer in this field.

Next information about an information apparatus such as a computer that performed printing and about the user is described. The lower part of shows an example of information about an information apparatus such as a computer that performed printing and about the user environment and user information . This information depends on an environment where printing is performed and the user and thus can be generated at a command processing timing that occurs at least once during a print job as the above described printer information .

 ComputerName indicates the name of a computer that output a print instruction. IPAddress indicates a network address included in the computer that output the print instruction. MACAddress is an identification symbol unique to a network adaptor included in the computer. Based on these pieces of information an information apparatus that has output a print instruction can be specified.

 UserName indicates an identification name of a user who uses the computer that output the print instruction. Based on this information the user who provided the print instruction is specified.

Next various attribute information and statistical information about a print job are described. shows an example of the various attribute information and statistical information about a print job job information . This information is unique to a print job and thus can be generated at a command processing timing that occurs at least once during a print job as the above described printer information and the environment and user information .

 PrintModuleName indicates the name of a module executing an application executing a printing process. Since the job chasing function unit operates as a part of the printer driver the name of a module executing a printing execution application can be obtained. This information specifies an application in which the printing was performed.

 JobName indicates the name of a print job that is applied from a printing application to the print job.

 Output indicates an output destination that is individually specified by the printing application. This information is not used when the printing application does not specify an output destination of a job.

 LocalStartTime and UTCStartTime indicate date and time when printing starts. LocalStartTime indicates date and time in a local computer whereas UTCStartTime indicates the start time represented by a coordinated universal time incorporating a locale set on the local computer. By indicating the date and time in two ways the date and time of printing can be uniformly obtained regardless of the locale set in the target computer.

The above described pieces of information to are fixed at start of printing and thus can be processed when a print starting command is executed.

 LogicalPageNum indicates the number of logical pages. The logical page means each page that is laid out in one physical page when an N inOne printing is performed. This information can be obtained by counting the number of switching commands or switching controls of logical pages during a job.

 PhysicalPageNum indicates the number of physical pages. The physical page means for example each side of sheet of paper in duplex printing. This information can be obtained by counting the number of page end commands during a job.

 PaperNum indicates the number of physical sheets of paper used in printing. By monitoring the count of the PhysicalPageNum and transition between duplex and one sided printing modes during a print job the number of physical sheets to be output can be obtained.

 Copies indicates the number of copies to be printed specified in a print job and can be obtained by monitoring a number of copies specifying command included in the print job. When the driver replays each page to support printing of multiple copies in order to reduce the size of chasing data only part of data can be extracted.

 EndState indicates a job end state. This information indicates that the job was normally ended or a user requested a pause of printing. When the user requested a pause of printing the number of pages generated by the driver does not necessarily match the number of pages that were actually output. Therefore when the EndState indicates a pause that indicates a possibility that the above described phenomenon occurred.

The above described pieces of information to include statistical information that is fixed when a print job ends and thus are processed when a print job end command is issued.

Next information about the content of each page in a print job is described. shows an example of information page information about the content of each page in a print job. In this example the page information is roughly classified into page attribute information text information and image information . The page attribute information is information describing attributes of a target page the text information is text information included in the page and the image information is extracted page image information. Hereinafter each of them is described.

 PageName is information indicating the name of paper of a target page. Orientation indicates the orientation of the page that is either portrait or landscape.

 ColorMode indicates whether the page is printed in a color mode or a monochrome mode. Layout indicates the layout mode of the page such as Nup printing or poster printing.

 OverlayMode indicates an overlay operation mode such as a normal printing mode an overlay printing mode or an overlay registration mode. In the overlay printing mode a target job added with an overlay is actually printed. In the registration mode printing is not performed only by the target job. This information is collected to indicate these conditions.

 CodePage indicates code page information of character code described in Text . The code page information is used to for example convert a unicode of two bytes to a double byte character set DBCS .

 Text stores character code information supplied by a text rendering command included in the page. The Text is extracted every time a text rendering command is issued.

The text information is chasing information that is extracted when the check box Extract text shown in is checked.

 ImageResolution indicates the resolution of an extracted page image and corresponds to the value indicated in the resolution shown in .

 BitsPerComponent indicates the gradation of an extracted page image and corresponds to the value specified in the number of bits color and the number of bits monochrome shown in .

 ImageBits indicates the substance of an actually extracted page image and is generated by writing a rendering image into a bitmap area of the page image every time a rendering command is processed.

The pieces of information to relating to an extracted page image are extracted when the check box Extract image shown in is checked.

The display format of the above described information that is extracted or generated as chasing data can be described in an extensible markup language XML .

The chasing data including image thumbnails and text data extracted from data generated in accordance with a printing process can be obtained by the job chasing function processing unit through the despooler shown in and the chasing data can be transferred to the chasing information storage server through the job chasing management unit and the network so that an administrator or a specific user can browse the chasing information from another client not shown through a viewer or a browser.

The present invention can be applied to a system composed of a plurality of apparatuses e.g. a computer an interface apparatus a reader and a printer or a single apparatus e.g. a copying machine a printer or a facsimile . The present invention can be carried out when a computer or CPU or MPU of the system or apparatus reads and executes program code that realizes the procedure of the flowchart described in the above described embodiment and that is stored in the storage medium.

In this case the program code read from the storage medium realizes the functions of the above described embodiment. Therefore the storage medium storing the program code is included in the present invention.

Examples of the storage medium to supply the program code include a floppy disk a hard disk an optical disk a magneto optical disk a compact disk read only memory CD ROM a compact disk recordable CD R a magnetic tape a nonvolatile memory card and a read only memory ROM .

The functions of the above described embodiment are realized when the computer reads and executes the program code. Alternatively the functions of the above described embodiment can be realized when an operating system OS operating in the computer executes part or all of actual processing in accordance with the instructions of the program code.

Further after the program code read from the storage medium has been written into a memory of a function expanding board inserted to the computer or a function expanding unit connected to the computer a CPU or the like provided in the function expanding board or the function expanding unit can execute part or all of actual processing in accordance with the instructions of the program code.

While the present invention has been described with reference to an exemplary embodiment it is to be understood that the invention is not limited to the disclosed exemplary embodiment. The scope of the following claims is to be accorded the broadest interpretation so as to encompass all modifications equivalent structures and functions.

