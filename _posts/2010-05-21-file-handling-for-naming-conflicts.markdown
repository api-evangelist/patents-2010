---

title: File handling for naming conflicts
abstract: A file operations engine is provided that manages many user interactions with their files via a computer system. The operation engine may provide a user with the option to keep both files that have a file name conflict. It may further permit the user to rename a file involved with a file name conflict. The operations engine may also automatically rename one of the files of a file name conflict by appending a character to a root of the filename. The character may include the lowest integer available for the root in a destination for the files. The operations engine may provide the option to keep both files as part of a pre-calculation of potential errors for a requested operation. The operations engine may place file name conflicts in an error queue and permit the user to select an option to keep both files after the conflict is encountered.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07844645&OS=07844645&RS=07844645
owner: Microsoft Corporation
number: 07844645
owner_city: Redmond
owner_country: US
publication_date: 20100521
---
The invention relates generally to error handling for computer systems. More specifically the invention relates to error handling during file handling operations to user interfaces related to the same and to related methods and software.

Computer users interact with computer files through a copy engine which is part of the operating system shell of the computer. The shell copy engine generates user interface UI dialogs such as a progress UI dialog that illustrates progress of a copy operation and error dialogs that indicate conflict or permission errors. As used herein a dialog includes a window a message box or another portion of a graphical computer display which appears in order to communicate information from a computer program and or to obtain information from the user. Familiar examples are progress dialogs and error dialogs used in various versions of the WINDOWS operating system available from Microsoft Corporation of Redmond Wash. . A dialog often contains a brief message e.g. The folder already contains a file named examplefile or Would you like to replace the existing file with this one and one or more graphical buttons for possible user responses e.g. yes no etc. .

Conventional copy engines manage the copying moving and deleting of individual files or collections of files. These engines delete files by flagging them for removal such as by placing them in a recycle bin trash can or other temporary folder. They operate in a serial manner to perform a given operation in sequential order. When conventional copy engines encounter an error during an operation they stop processing the operation and display a dialog for the error that requires user input. Processing continues after the user provides instructions for handling the error. This can be frustrating for a user. For instance in a multi hour copy operation the error can occur 10 minutes into the operation after the user has already left the machine the user will return several hours later expecting the process to be done e.g. copying large files to a laptop for a trip and find that only 10 minutes of processing has been completed.

Conventional copy engines typically begin processing a requested operation such as a copy operation without verifying sufficient storage space for the requested operation or evaluating potential. For instance they may not check for sufficient disk space on a hard drive to which files will be copied prior to beginning the copy process. If insufficient disk space is encountered the operation stops and the user is then notified. This may occur after the operation is largely complete.

When a user cancels a requested operation while it is in progress e.g. the user selects a cancel button on a progress dialog conventional copy engines stop the operation at that point in its progression. However they do not cancel the operation to undo the moving or copying of files that occurred in the operation up to the point of interruption. Thus selected files are left in an indeterminate state and users must figure out how to clean this up themselves.

Conventional copy engines process file name conflicts by prompting the user to select one of the conflicting files for storage at a selected destination. For instance if a user attempts to copy a file to a destination in which a file of the same name resides conventional copy engines will ask the user whether they want to keep the older file or the newer file. Subsequently only the user selected file is kept at the destination.

It is also known for computer systems to employ error handling systems to detect and correct data errors. These error handling systems operate at the data link layer of the known open systems interconnection reference model OSI Model to ensure correct data transmission and to verify that data has been written to or read from a memory location. For instance conventional computer systems add a parity bit or a cyclic redundancy check CRC field to data to ensure the data is correctly transmitted between two devices or to ensure words are written to or read from memory. These error handling mechanisms are employed for computer operations at the data link layer of the OSI Model for detecting data errors rather than for detecting or monitoring errors associated with moving or copying files.

The following presents a simplified summary of the invention in order to provide a basic understanding of some aspects of the invention. This summary is not an extensive overview of the invention. It is not intended to identify key or critical elements of the invention or to delineate the scope of the invention. The following summary merely presents some concepts of the invention in a simplified form as a prelude to the more detailed description provided below.

Aspects of the present invention provide methods user interface displays computer executable instructions and data structures for handling and or avoiding file operations errors. A file operations engine is provided according to an embodiment of the invention that manages many user interactions with their files via a computer system. In one aspect of the invention the operations engine may provide the user with options for keeping two or more files that have conflicts for a requested operation such as files having the same name. One option may include keeping both files when two files have the same name. Another option may include allowing the user to rename a conflicting file.

In addition aspects of the present invention provide dialogs and user interface mechanisms for handling and or avoiding conflicts and other errors. Further aspects of the invention provide methods for handling and or avoiding file operations errors. In other aspects computer executable instructions for implementing the disclosed methods are stored on computer readable media. These and other aspects are addressed in relation to the figures and related description.

In the following description of the various embodiments reference is made to the accompanying drawings which form a part hereof and in which is shown by way of illustration various embodiments in which the invention may be practiced. It is to be understood that other embodiments may be utilized and structural and functional modifications may be made without departing from the scope of the present invention.

In accordance with aspects of the present invention a graphical user interface GUI is provided on a computer for displaying output on the system s monitor and for managing user input. Although not required the invention will be described in the general context of computer executable instructions such as program modules being executed by a personal computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the invention may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics network PCs minicomputers mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

As an example for illustrating aspects of the present invention a system GUI is discussed which may include an operating system GUI such as the GUI of a MICROSOFT WINDOWS operating system that may include the Win 32 subsystem Win32 . In these examples the Win32 subsystem may have exclusive responsibility for displaying output on the system s monitor and for managing user input. Architecturally this means that the other modules may need to call Win32 subsystem functions to produce output on the display. It also means that the Win32 subsystem may need to pass user input actions to the other modules when the user interacts with their folders. In addition it means that system commands such as commands to copy files may initially be captured by the Win32 subsystem. It is understood that with other operating systems and other types of system level user interfaces may be responsible for monitoring and managing user input.

Exemplary computer system environment for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise tangible computer storage media. Computer storage media includes both volatile and nonvolatile and removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory OT other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate logical differences.

A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printers which may be connected through an output peripheral interface.

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

In general operations engine is a file operations system that permits users to interact with files such as to move recycle i.e. delete files by moving them to a recycle bin and copy files. It may also permit users to expunge files i.e. permanently remove the files rename set access control lists ACLs encrypt compress and or set properties for files. The operations engine provides user interface dialogs and receives user commands related to file operation commands and manages file operations. For instance the operations engine receives and manages a user s request to move certain files from one location to another. In another example the operations engine manages and interacts with the user during installation of a new program. The operations engine runs as part of the shell process. However in other embodiments the operations engine may be extensible and or portions of it may be extensible to allow for the creation and expression of new file operation rules methods and or dialogs as needed. The operations engine may also include a data structure for an error queue that stores information about errors encountered during file operations. In other embodiments the error queue may be stored in other locations.

As further shown in application programs are programs running or that may run within operating system . For example the programs may be application programs such as word processing programs spreadsheets web browsers etc. In operation when any of the programs GUI operations engine or other program modules needs to host a folder within GUI it calls a function defined within WIN32 API as is known within the art. WIN32 API returns a handle or identifier referencing the folder that it created within GUI provided by operating system . Those of ordinary skill within the art will appreciate that while computer has been described in relation to the MICROSOFT WINDOWS operating system folders of the MICROSOFT WINDOWS operating system and the WIN32 API the invention is not so limited.

In the previous section an overview of the operation of an example computer was described. In this section embodiments illustrating aspects of the present invention will be discussed using computer for illustration purposes. It is understood that the invention as well as the following embodiments may be used with a variety of other computer systems.

Referring now to computerized methods data structures user interfaces and computer readable instructions according to embodiments of the invention are generally shown. shows a graphical user interface display on the monitor of the computer of according to an embodiment of the invention which is generated by GUI . For the embodiments discussed hereafter GUI provides the user interface displays and monitors the system for user inputs. Operations engine cooperates with and or may be a co extensive with the GUI. Thus the program instructions of operations engine may be a part of GUI or may be partially or completely extensible from the GUI. Alternatively operations engine may include program instructions outside of operating system that provide some of the functionality discussed hereafter. In addition operations engine and GUI may be protected subsystem code operating within a user mode portion of operating system .

As shown in user interface display is an example display that is provided after a user has requested a file copy operation. In the example shown the user has requested that folder and file in the folder My Documents on the user s C drive be copied to the F drive. The requested copy operation may be requested by various mechanisms such as by the user selecting folder and file via a remote control device a mouse or another input hardware device. The display includes a dialog that informs the user that there is insufficient disk space on the F drive to perform the requested operation. As shown dialog notifies the user of the error and provides various options for the user to select Try Again and Cancel . The dialog also includes an actionable link to a disk cleanup utility that may increase free space on the F drive. Dialog is an example dialog provided after operations engine performs preliminary calculations to identify errors that may be generated when the requested operation is processed. Dialog and various dialogs discussed hereafter are provided to the user via operations engine .

In conventional copy engine systems when encountering an error while processing more than a single file the error is thrown and all processing stops until the user responds to the particular error. This is particularly problematic when copying or moving large numbers of files. For example in conventional copy engine systems if there is a folder name conflict the conflict is shown in an error dialog and processing of the entire operation stops until the user responds to the error dialog. When the user responds processing starts up again. However the user isn t any closer to the operation being done and there are a variety of unambiguous things that the copy engine could have processed without waiting for this particular response.

In general operation engine attempts to provide as much processing as possible of a requested operation without encountering errors without showing error dialogs to the user and or without waiting for user responses to error dialog. Although referred to as operations engine based on the exemplary computer system it is understood that various embodiments of operations engine discussed hereafter may include only some or all features functionality and aspects of the various operations engine configurations discussed herein. In other words operations engine is a portion of an embodiment of exemplary computer system but does not necessarily represent a single embodiment of the operations engine. Various operations engine embodiments are discussed hereafter in the context of computer system along with figures herein.

As shown in in a first step operations engine receives a request to perform a file operation. Although the requested operation in this example is requested by a user it is understood that requested file operations that take advantage of operations engine functionality according to the present invention may originate from other sources such as other software via automatic updates to a program system maintenance installation of a new program etc. Assume as an example that a user requests that the entire Music tree of containing Ray Charles folder is copied to another folding containing another Ray Charles folder not shown . In a subsequent step operations engine pre calculates potential errors for the full operation. The pre calculation considers potential errors that may be encountered while processing the requested operation such as lack of sufficient disk space for the operation file conflicts e.g. same name conflicts older file replacing a newer file etc. recycling or expunging a system file or an executable file traversing permissions on subdirectories etc. Pre calculating potential errors for the requested operation front loads as many error dialogs as possible which places these dialogs on the user s screen when the user is most likely at the PC particularly if the user tends to leave their computer during long operations and also places the error dialogs on screen before a large time investment in the operation has begun or before files have begun being processed.

In the embodiment of operations engine traverses appropriate file systems in depth first for the pre calculations step and for the processing of the requested operation. This is to say if a folder has sub folders it processes these sub folders in order and if the first one has its own sub folders it processes these before moving on. In the example of operations engine begins processing Music tree and starts with Ray Charles folder it processes Anthology before moving on to start Rolling Stones and processes all four of the sub folders before continuing to Rush . The entire Music tree is thus processed before the operations engine moves on to timmck s Documents. 

For step if potential errors are not found then step occurs to begin the requested operation. If potential errors are found then for step the user is provided with options to correct the potential errors. In the example of based on the folder name conflict for the Ray Charles folders and or if files in the Ray Charles folder have the same name as files in the Ray Charles folder at the copy destination the operations engine will discover these potential conflict errors and will provide one or more conflict dialogs to the user prior to processing the operation. The operation can then proceed more smoothly without encountering these errors during the requested operation.

According to step operations engine may evaluate whether the potential errors are catastrophic and if so whether they are satisfied e.g. via user interaction to correct the error . One of the most obvious errors that operations engine can front load is insufficient disk space at the destination e.g. fixed drive removable media or a network location which is a catastrophic error in that it prevents the requested operation from being completed. Thus at the start up of a requested copy process operations engine can calculate the required space. If the destination does not have sufficient space an error dialog such as dialog of can be shown to the user.

As shown for step the operations engine may wait for the user to satisfy all potential errors shown to the user before proceeding with the requested operation. However the operations engine may also proceed with the requested operation to the extent it is able without waiting for user input which may occur after a time out period to permit the user to respond to error dialog s . If the operations engine proceeds even though potential errors are not satisfied and or if errors are encountered during processing of the operation per step then the errors are placed in an error queue .

The error queue is preferably established for several classes of errors which may include all non catastrophic errors specific types of errors etc. When errors within the error queue classes are encountered the affected file folder errors are added to the error queue or rather an identification of the affected file folders and their errors are listed in the error queue. The error queue itself is simply a record of errors encountered during the processing of a requested file operation which may be located in temporary and or long term memory such as in system memory on a hard drive etc. Processing will continue on other files folders that are unaffected by the errors with other errors being placed into the error queue when encountered. When all processing that can be completed is finished the operation engine can re try the operation on the first item in the error queue. If this succeeds the operations engine proceeds to the next error item if it fails an error dialog is shown to the user. In addition the user may be able to view a list of errors in the error queue while the requested operation is being processed and may be able to satisfy those errors during processing via error queues.

The error queue permits as much processing as possible to be performed before errors are thrown. In other words the operations engine will pre throw as many errors as possible and then hold as many errors as possible until the end of the processing. In the example case of operations engine can place the Ray Charles sub tree in an error queue and continue processing the folders that are peers to Ray Charles folder . Once the rest of the tree Music tree is finished copying of Ray Charles sub tree is attempted again and if there is still an error a Confirm Folder Replace error can be shown to the user.

Not every error can be handled this way some are so catastrophic that the requested operation cannot continue without throwing an error immediately. For example if a network connection required for performing the operation is disconnected the operations engine will immediately throw a network error. Likewise if the destination location runs out of storage space during processing an error will immediately be thrown. Most catastrophic errors will be caught up front during the pre calculation step but there are numerous shared disk scenarios where multiple processes are consuming disk space that may continue and cause an out of disc space error to be thrown. In any event before and or during processing of the requested operation the operations engine can perform the step of evaluating whether an encountered error is catastrophic. If the error is catastrophic then the operations engine performs the step of of halting the operation until corrected. Once the catastrophic error is corrected processing continues.

Non catastrophic errors identified in the pre calculation step can be placed in the error queue per step prior to processing the operation. Further according to step non catastrophic errors that occur during processing of the requested operation are placed in the error queue which permits processing of unaffected files and folders to continue. When all processing is completed with the exception of error queue items then the step occurs to re evaluate error queue items and to provide error dialogs to the user for remaining errors. Once the errors are satisfied then step of completing the operation occurs.

Dialog shown in confirms that the user wants to recycle the identified file which will occur as part of a requested operation. Preferably this is an error that would have been identified during the pre calculation step of method . As shown dialog includes a warning of consequences associated with removing the file. Dialog also includes an informational link which when selected provides the user with additional information related to the error dialog.

Dialog shown in confirms that the user wants to recycle the identified application or other executable file which will occur as part of the requested operation. Preferably this is an error that would have been identified during the pre calculation step of method . As shown dialog includes a warning of consequences associated with removing the executable file.

The dialogs of are only examples of error dialogs that are preferably shown as a result of pre calculation step of method . Dialog shown in is another example. Various other dialogs may be presented as a result of pre calculation step or at other times for a wide variety of errors and potential errors. For instance operations engine preferably presents error dialogs in the event a requested operation will result in the recycling or expungement of system files or folders or of other folders designated as special by the operating system such as a recycle bin folder. Although possible operations engine preferably does not provide error notifications based on the user requesting an operation that would recycle or expunge a read only file or folder or that would recycle a file or folder that has hidden attributes e.g. hidden files and folders .

Preferably status identifier provides an indication to the user that errors have been encountered that are listed in the error queue. For example status identifier may be a green colored progress bar when no errors have been encountered. If an error is encountered and placed in the error queue the progress bar may change to red. Other indications may also be used such as causing the status identifier to blink adding an error alert to the dialog presenting an error list in a separate dialog or as part of dialog etc. Dialog also includes a selection for more options which may include an error list various options commands etc. In addition dialog includes command options such as pause button and cancel button . User selection of the pause button will cause the requested operation to pause and to change the indication on button to state resume while in the paused state. User selection of the cancel button will cause the requested operation to stop and to undo as much of the requested operation that had been performed. Thus selection of the cancel button will put the user s machine back into the state that it was in before the requested process began.

Dialog shown in is generally the same as dialog except that it includes additional options . Dialog may be shown in response to the user selecting the more options selection on dialog to view additional options. As shown dialog includes a first option to skip all errors and a second option to copy only files that are newer into a merged destination folder. If the user selects the merge option the operations engine compares the date and time on files with conflicting names in the source and destination trees and then it only copies a particular file to the destination folder if the incoming file is newer. Thus only updated files are copies to a destination folder which can be useful for periodically backing up a file tree or updating certain folders. Dialog further includes a third option to open a destination folder for the requested operation when the operation is complete and a fourth option to conserve network bandwidth. User selection of the fourth option permits the operation to proceed at various rates based on network bandwidth required for the operation. Dialog also includes a fifth option to show an error list identifying errors placed in the error queue. It is understood that many other options and combinations of options may be presented to the user. Dialog also includes a selection to hide options .

Dialog shown in is generally the same as dialog except that it also includes an error list . Dialog along with error list may be shown in response to the user selecting the show error list fifth option on dialog to view the error list. Error list includes links that summarize errors identified during processing of the requested operation that have been placed in the error queue . If the user selects one of the links an error dialog associated with the selected link is shown such as one of the dialogs of .

Dialog shown in is generally the same as dialog except that it includes an error list button instead of a show error list option . If the user selects error list button as shown in error list dialog is displayed which is preferably displayed along with dialog . As with error list of error list dialog includes links that summarize errors identified during processing of the requested operation that were placed in error queue . If the user selects one of the links an error dialog associated with the selected link is shown such as one of the dialogs of .

In addition dialog includes an option to keep both the newer file and the older file . It further includes the option to apply the user s choice to similar errors found in the requested operation. As such if the user chooses to keep the newer file and applies option then all newer files would be kept for the similar conflicts. Similarly if the user chooses to keep the older file and applies option then all older files would be kept for similar conflicts. The same applies if the user chooses to keep both files.

If the user chooses the keep both files then operations engine may automatically rename one of the files to include additional information such as an integer added to a root of the filename. In one embodiment the lowest available integer for the particular filename at the destination may be added to the incoming file. For instance file would be changed from I1 to I1 1 . If a file named I1 1 already existed in tree then it would be renamed I1 2 . In an alternative embodiment the newer file could always be the file that is renamed. In other embodiments the user could select preferences for which file should automatically be renamed such as with an integer or with other characters. The renamed file may be renamed in a variety of ways such as from I1 to copy of I1 or copy 2 of I1. However adding an integer is preferable for its simplicity and ease of understanding for the user.

As shown method includes the step of receiving a request for a file operation and the step of encountering a file name conflict associated with the request. The file name conflict may be identified during processing of the operation or at an earlier time such as during pre calculation of potential errors. The method further includes the step of receiving user instructions to keep both conflicting files. This may occur in response to identification of the conflict during pre calculation while the operation is being processed or as the user reviews errors in error queue . If the user does not rename one of the files the operations engine may perform the step of renaming one of the files such as the incoming file to include the lowest integer available for the conflicting filename. In an alternative embodiment the user may establish preferences for all file name conflicts such as to always rename the file being copied to include the lowest available integer for the root filename.

Aspects of the present invention have been described in terms of illustrative embodiments thereof. Numerous other embodiments modifications and variations within the scope and spirit of the appended claims will occur to persons of ordinary skill in the art from a review of this disclosure. In particular it is understood that aspects of the invention may practiced with a large variety of computing devices including personal computers mobile devices PDAs and mobile terminals.

