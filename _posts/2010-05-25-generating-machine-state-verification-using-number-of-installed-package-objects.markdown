---

title: Generating machine state verification using number of installed package objects
abstract: Embodiments relate to systems and methods for generating a machine state verification using a number of installed package objects. A physical or virtual client machine can host a set of installed software packages, including operating system, application, and/or other software. A package manager installed on the client machine can track the installed package complement, and updates available for those packages. To verify that a target of a package update is prepared and in the correct state to receive the update, the package manager inventory the set of package objects installed on the client machine. The resulting sum can be reported to a remote management platform, such as a package server. The counted package objects can be the packages themselves, and/or their set of component files. Machines having a package sum that does not match an expected target number can have a package re-installation performed, and/or other diagnostics carried out.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09189357&OS=09189357&RS=09189357
owner: Red Hat, Inc.
number: 09189357
owner_city: Raleigh
owner_country: US
publication_date: 20100525
---
The present teachings relate to systems and methods for generating a machine state verification using a number of installed package objects and more particularly to platforms and techniques for interrogating or retrieving a number of total package objects installed on one or more client machines including packages themselves and or component files of packages comparing the package object sum to a target or expected number and generating a machine state verification to indicate the readiness of those machines receive package updates and or to undergo other management or configuration activity based on whether the package object sum matches or deviates from the target or expected total.

Users of physical or virtual machines commonly install software packages including package updates to those machines. The software packages can contain a set of related files chosen to perform a given application or task such as for example a group of software applications drivers and or other resources used to install and use messaging or media applications. In instances a software package can contain application software operating system software drivers patches and or other software components grouped as a logical set.

Software package managers exist to help a user initiate and perform software package updates such as for example the yum Yellowdog update manager package update manager available from Red Hat Inc. Raleigh N.C. and others. In general available software package managers are configured to interact with the set of installed packages on a client and with one or more software package repositories and associated package servers to directly connect to those databases and download available package updates.

The process of initiating software package updates can involve however the risk or possibility of software related faults instabilities bugs or other errors or irregular conditions. Some of those potential faults or irregular conditions can be the result of a target machine that was not in the correct or expected machine state to receive a package update or updates. For instance a client machine scheduled to receive a package update may not contain the correct version or correct number of previous packages needed to support that update. Irregularities in the package complement can in one regard be caused for example by users in the managed network performing unauthorized package updates to client machines resulting in an unexpected total package sum on those machines. The client machine in addition or instead might be missing one or more component files that are necessary to the operation of the existing package complement. Missing files from a package complement can for instance can be due to further causes hard drive corruption malicious software intrusions or other issues. Beyond issues of that nature an administrator in a managed network may also not have an up to date or complete inventory of the machines on the network that represent identical images of desired configurations and therefore be ready to receive a collective package update or other collective maintenance.

Existing package update managers may contain facilities to interrogate the state of client machines in a network but typically need to extract package name version and or other attributes from client machines to attempt to identify the installed package complements on managed machines and reconcile package sets group related machines together and or perform other package related maintenance and administration. It may be desirable to provide systems and methods for generating a machine state verification using a number of installed package objects in which a package server or other management platform can interrogate client machines using a comparatively lightweight census or reporting mechanism but which is nevertheless sensitive to changes in target machine state.

Embodiments of the present teachings relate to systems and methods for generating a machine state verification using a number of installed package objects. More particularly embodiments related to platforms and techniques for capturing a package sum representing the total number of packages and or constituent files of those packages installed on one or more clients in a managed network. A package server and or other remote management platform can verify the value of the package sum against a target number of installed packages to determine whether the one or more clients acting as a target for package updates or other management activity is in the correct or expected machine state with the expected number and or types of package complement. In aspects a local package manager can track and manage the installation of one or more software packages and or updates to those packages which may be referred to together as a software package update on those client machines and or other host target and or other machines acting as recipient of package updates. These and other embodiments described herein address the various noted shortcomings in known package update technology and provide a user with enhanced package and system management capability for taking an inventory of updating and managing their software package resources with less potential for installation conflicts errors or other undesirable results of updating activity as well as providing an ability to perform additional management and configuration functions with enhanced package tracking capabilities.

Reference will now be made in detail to exemplary embodiments of the present teachings which are illustrated in the accompanying drawings. Where possible the same reference numbers will be used throughout the drawings to refer to the same or like parts.

In aspects the set of installed packages can contain executable files for or otherwise support or be associated with the set of applications installed on one or more clients . In aspects the set of applications can be or include types of applications or other software such as for example messaging applications media application database applications spreadsheet or modeling applications social networking applications word processing applications and or other applications or utilities. In aspects the set of installed packages can contain any one or more of the set of applications and can in aspects also include the operating system drivers and or related components also installed on the one or more clients . The set of installed packages and or the set of component files of those packages can each have an associated set of package attributes which record or reflect the file names versions dates epochs storage sizes software requirements an or other attributes related to those of software packages including their updates installed on the one or more clients .

In aspects the package manager can communicate with a network interface such as an Ethernet or other network port configured to connect to one or more networks such as the public Internet or other public or private networks. The package manager can thereby connect to a remote set of one or more package servers and associated one or more package repositories . The one or more package servers and associated one or more package repositories can host a set of software packages for distribution and installed in the managed network including original application package installations original operating system installations operating system and or application package updates and or other software or resources related to packages and their associated resources.

In aspects the package manager can interact with the set of installed packages along with the one or more package servers and associated one or more package repositories to inspect inventory configure test update and or otherwise manage the set of installed packages operating on the one or more clients . The package manager can for example provide a user with a set of package update options displayed via user interface such as a graphical user interface or others to select various test configuration and or other management activities on the locally hosted set of installed packages . The set of package update options can include options such as one or more selections for inventorying installing and or updating selecting storage options and or selecting other options or parameters for the downloading of package updates from the one or more package servers and associated one or more package repositories to add to or update the set of installed packages .

In aspects the package manager can access the set of installed packages and or the set of component files of those packages to determine and capture a package sum . In aspects the package sum can represent a total number of the package objects contained in the set of installed packages such as a total number of actual packages reflected in that set. In aspects the package sum can in addition or instead represent the total number of files in the set of component files contained in the set of installed packages . In aspects the package sum can contain more than one field or component such as for instance both the total number of packages and the total number of files in those packages. For example for a given machine the package manager can inventory the set of installed packages on the one or more clients and determine that 46 packages are locally installed on that machine and that those 46 packages together contain 14 340 files for that subject machine. The package manager of the one or more clients can then report data including packages 46 files 14 340 and or packages 46 files 14 340 as part or all of the information captured and encoded in the package sum . Other data fields formats or information can be captured and encoded in the package sum . For instance in aspects the total number of directories libraries and or other file or storage structures associated with the set of installed packages can be incorporated in the package sum . Other attributes or data can be encoded in the package sum .

As illustrated for example more particularly in package manager on one or more clients can connect to the one or more package servers and associated one or more package repositories via one or more network . The package manager on one or more clients can transmit the captured package sum data to the one or more package servers and associated one or more repositories via the one or more networks . It may be noted that the capturing and reporting of the package sum from the one or more clients or other machines can be initiated at different times and or using different triggers. For example the package sum can be captured by the package manager of one or more clients at times selected or generated by the package manager itself. For instance the package manager of one or more clients can capture and report the package sum on a periodic basis such as once a day week month and or other period. In aspects the package manager of the one or more clients or other machines can capture the package sum on an event triggered or other non periodic basis such as based on an end user selection or request. Conversely in embodiments rather than being pushed from the one or more clients the delivery of package sum to the one or more package servers can be initiated on a pull basis such as by a command issued by an administrator operating the one or more package servers and or by automatic or periodic commands initiated by the one or more package servers or other remote management platforms. In embodiments the capture and reporting of the package sum from the one or more clients and or other machines can also be triggered or initiated at other times and or based on other conditions.

In aspects as shown in some or all of the client machines in the set of one or more clients can in embodiments be arranged configured or grouped as a set of targets . In aspects the one or more clients which may be grouped as set of targets can be configured to perform package operations on a collective basis including to extract information such as the package sum and to receive one or more package updates and or other installations configuration commands and or other data.

In aspects the one or more one or more package servers communicating with the set of targets and or the one or more clients can maintain a package object record encoding the package sum a data record representing a target number of package objects expected or required for each machine and or other information to identify and analyze the state of any one or more machines in managed network . In aspects the one or more package servers can determine by inspection of the package object record whether any one or more machines in one or more clients the set of targets and or other machine or machines contains or currently hosts the correct expected compliant or otherwise functionally appropriate number of packages in set of installed packages and or hosts the correct number of constituent files in set of component files . In aspects the one or more package servers communicating with the package manager of any one or more clients and or the set of targets and or other machines can determine that the subject machine or machines are in a compliant state when package sum for that machine equals or matches the target number of installed package objects for that machine or machines. Upon verifying that the subject machine s are in compliant state or otherwise acceptable state the one or more package servers can initiate package update activities such as transmitting one or more package updates to those identified machines.

In aspects the one or more package servers can perform other network management operations in the one or more clients the set of targets and or other machines based on the verification of those client or target machine states. For instance in aspects the administrator or other user of the managed network may wish to inventory and identify all client machines having a precisely equal package sum . This may permit for instance the identification and or grouping of identical machine images containing an identical set of package and or file images since the likelihood of any two machines randomly containing the same number of packages and or files without representing the same instance or image of a machine whether physical or virtual is low. The one or more package servers can thereby perform a discovery process on the managed network and can in embodiments locate the one or more clients to group or configure into the set of targets or other arrangement for instance to define a class of clients or workstations grouped for a specific engineering financial and or other technical or other project task or user group.

Conversely in cases where the package sum derived for a given one or more clients or other machines does not match or equal the target number of installed package objects for that machine or machines the one or more package servers can perform further management operations on that machine or machines. For instance the one or more package servers and or other remote management platforms can execute diagnostic or debugging routines examine event logs or other usage history or machine state data and or perform other diagnostic or corrective actions on those non compliant machines. In aspects non compliant machines in the one or more clients and or set of targets can be interrogated or inventoried for instance to examine the machine history and identify potential causes of an incorrect or non compliant package sum . Those causes or potential causes can include events such as unauthorized package updates security breaches intrusions by viruses or other malicious software and or other events what may have resulted in the set of installed packages the set of component files and or other resources deviating from the desired complement and package sum and thereby producing a package sum which differs from the target number of installed package updates . Other variables factors histories and or data can be analyzed in determining the machine state of one or more clients the set of targets and or other machines identified as being in a non compliant state.

In addition to fields reflecting the package sum and the target number of installed package objects package object record can likewise store other information related to the package complement and machine state for the one or more clients including for instance an indication whether each client in the one or more clients is in a compliant or expected state. In aspects a machine can be identified to be in a compliant or expected state when the package sum equals or matches the target number of installed package objects indicating that all packages and or files that should be installed on a client machine are in fact installed and present on that machine. In cases where the package sum and target number of installed package objects do not equal or match the record for that machine can be flagged to reflect a fault state or other non compliant or unexpected state. In embodiments the package object record can also contain a field or fields as shown indicating whether a package update operation should proceed on a given client machine and if so when that update process is scheduled to take place. Fields can also be incorporated in package object record to indicate whether diagnostic actions should be performed as when for instance the machine state is found to be non compliant and a package inventory or other diagnostic check or routine needs to be run on that machine to identify the cause of the incorrect package sum. Other data fields identifiers attributes commands and or other information can be encoded in the package object record .

In the package manager on one or more clients can identify and capture the total number of package objects present in set of installed software packages hosted in one or more clients . In aspects as noted the package sum can be or include a total number of the packages in set of installed packages such as for example 10 150 100 2 000 or other total numbers of packages installed in the subject machine or machines in the one or more clients . In aspects the package sum can in addition or instead be or include a total number of files present in the set of component files such as for example 100 1 000 15 000 or other total numbers of files contained in the set of installed packages of the subject machine or machines. In aspects the package manager can generate or extract the package sum and or related data for instance by invoking or calling an application programming interface API of operating system of the one or more clients to enumerate the set of installed software packages the set of component files and or related resources and generate the package sum including a total number of those packages files and or other objects. In aspects other objects encoded in the package sum can include storage structures such as the number of directories libraries and or other resources. In the package manager and or other logic can transmit the package sum to the one or more package servers and or other remote management platform or site.

In the one or more package servers can access a target number of installed package objects for each client machine or machines reporting a total number of package objects . In aspects the target number of installed package objects can be or include the total number of packages and or the total number of component files for those packages that the one or more package servers and or other management platform s has on record as the desired or correct number of packages files that should be installed on one or more clients . In aspects the target number of installed package objects can be stored in the one or more package servers in the associated one or more repositories and or in other local or remote storage maintained by or accessible to the one or more package servers . In aspects the target number of installed package objects can be determined from records of package updates performed on the one or more clients by the one or more package servers and or other records or logic.

In the one or more package servers and or other logic can generate a determination or verification of the machine state of the one or more clients by comparing the package sum as reported by that machine or machines to the target number of installed package objects . In cases where the package sum matches or equals the target number of installed package objects the one or more package servers and or other logic can verify or determine that the one or more clients are in a compliant state having a correct package complement whose package sum equals the number of installed package objects and or is otherwise configured in a correct or appropriate fashion. In cases where the package sum does not match or equal the target number of installed package objects the one or more package servers and or other logic can verify or determine that the one or more clients are in a non compliant or other irregular state. In embodiments the one or more package servers can flag or record the identity of all those machines in the one or more clients whose package sum does not match or equal the expected target number of installed package objects . In aspects a mismatch between the target number of installed package objects and the package sum can be caused by a variety of causes including for example intervening downloads or installations of software packages which may for instance be done by a user on an unauthorized basis. Other causes of a mismatch between the package sum and the target number of installed package objects can include machine crashes hard drive or other storage corruption and or viruses or other malicious software.

In the one or more package servers and or other logic can initiation package re installation and or other corrective or responsive action the on one or more clients having a reported package sum that does not match or equal the target number of installed package objects . For instance the one or more package servers can also or instead interrogate the machines in one or more machines whose package verification failed or was non compliant to initiate remote diagnostic routines on that machine or machines. In the one or more package servers can initiate a package update process and or other management action s on those machines in the one or more clients having a verified compliant state with the reported package sum matching or equaling target number of installed package objects . For instance the one or more package servers can identify all machines in managed network being in a compliant state or otherwise appropriate configuration with respect to their package complement and all constituent installed files and group those machines together in a set of targets for a group update or perform other actions on those identified client or other machines. In as understood by persons skilled in the art processing can return to a prior processing point jump to a further processing point or end.

The foregoing description is illustrative and variations in configuration and implementation may occur to persons skilled in the art. For example while embodiments have been described in which a unitary package manager locally installed on each machine in the one or more clients is configured to control package update activity in embodiments multiple applications or software can interact to control the downloading installation testing and other management of software packages. For further example while embodiments have been described in which package update activity is conducted on one client of one or more clients in embodiments multiple local or remote targets clients and or other machines can register to one package manager and or other logic or resources to receive or perform package inventory update and or management activity. Other resources described as singular or integrated can in embodiments be plural or distributed and resources described as multiple or distributed can in embodiments be combined. The scope of the present teachings is accordingly intended to be limited only by the following claims.

