---

title: Methods and apparatus for optimized pausing of an embedded application to render pop-up window
abstract: Methods and systems executing an embedded application within the context of a first client application are provided. One method includes executing application logic to adjust states of one or more display objects and rendering one or more of the one or more display objects that are associated with a stage definition in a display region of the first client application. In response to a trigger event, the method causes the first application to generate a interface component, such as a pop-up, in the display region and pausing the rendering of the embedded application. The pausing includes generating a static image based on the states of the one or more display objects associated with the stage definition, associating the static image with the stage definition and disassociating the one or more display objects from the stage definition.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09021390&OS=09021390&RS=09021390
owner: Zynga Inc.
number: 09021390
owner_city: San Francisco
owner_country: US
publication_date: 20100505
---
The present disclosure generally relates to optimizing pop up windows in a web browser environment having a Flash or other plug in rendered media object embedded in an underlying structured document for display.

A web browser is a software application which may be executed on a network device for retrieving presenting and traversing information or network resources on a computer network such as the World Wide Web the Internet or an Intranet. Examples of web browsers include Microsoft Internet Explorer Mozilla Firefox and Google Chrome. Typically an information or network resource is identified by a unique Uniform Resource Identifier URI and may be in a variety of formats such as web page image video audio and executable. A web browser may retrieve specific information or network resources using their corresponding URIs.

Web browsers have become increasingly sophisticated as time passes and are able to support more and more functionalities. Initially web pages were static and encoded using Hyper Text Markup Language HTML . Later various programming languages such as Java JavaScript VBScript and PHP have been developed that enable dynamic web pages to be implemented and significantly improve the interactive experiences for network users. Additionally various objects or references to objected embedded in an underlying web page can be consumed and rendered by a plug in to a browser. Presently network users may perform various activities on a computer network such as the Internet through their web browsers. For example a network user may conduct business e.g. Internet banking socialize with families and friends e.g. Facebook MySpace and Twitter and seek recreation and entertainment e.g. YouTube and Zynga all on his computer.

The present disclosure generally relates to optimizing pop up windows in a web browser environment having a Flash or other plug in rendered media object embedded in an underlying structured document for display.

Particular embodiments execute an embedded application within the context of a first client application. To execute the embedded application particular embodiments execute application logic to adjust states of one or more display objects render one or more of the one or more display objects that are associated with a stage definition in a display region of the first client application and in response to a trigger event cause the first application to generate a interface component in the display region and pausing the rendering of the embedded application by generating a static image based on the states of the one or more display objects associated with the stage definition associating the static image with the stage definition and disassociating the one or more display objects from the stage definition.

These and other features aspects and advantages of the disclosure are described in more detail below in the detailed description and in conjunction with the following figures.

The present disclosure is now described in detail with reference to a few embodiments thereof as illustrated in the accompanying drawings. In the following description numerous specific details are set forth in order to provide a thorough understanding of the present disclosure. It is apparent however to one skilled in the art that the present disclosure may be practiced without some or all of these specific details. In other instances well known process steps and or structures have not been described in detail in order not to unnecessarily obscure the present disclosure. In addition while the disclosure is described in conjunction with the particular embodiments it should be understood that this description is not intended to limit the disclosure to the described embodiments. To the contrary the description is intended to cover alternatives modifications and equivalents as may be included within the spirit and scope of the disclosure as defined by the appended claims.

A web page is a structured document or resource of information that is suitable for a computer network such as the World Wide Web the Internet or an Intranet. A web page is identified by a unique Uniform Resource Locator URL and may be accessed through a web browser and displayed on the screen of a network device. Sophisticated web pages are dynamic such that a dynamic web page is constructed at the time it is requested by a network user via his web browser. As a result the actual content included in a dynamic web page may vary from time to time. Moreover sophisticated web pages may include multimedia content e.g. image video or audio or embedded references thereto as well as text content. For example a network user may watch video listen to audio or play games embedded in web pages.

Adobe Flash formerly known as Macromedia Flash is a multimedia platform for adding animation and interactivity to web pages. A Flash component e.g. Flash component may be embedded in a web page e.g. web page to create animation advertisements or games and to integrate video into the web page. Flash may also be used to develop rich Internet applications. Flash can manipulate vector and raster graphics and support bidirectional streaming of audio and video. It contains a scripting language called ActionScript. ActionScript is an object oriented programming language having a syntax similar as that of JavaScript but with a different associated set of class libraries. ActionScript may be used to create almost all of the interactivity seen in Flash applications. Flash in the SWF format traditionally called ShockWave Flash movies Flash movies or Flash games usually have a .swf file extension and may be an embedded object of a web page. Flash video files have a .flv extension and are either used from within the .swf files or played through a fly aware player or web browser. More recently the Flash libraries are used with the Extensible Markup Language XML capabilities of the web browsers to render rich content in the browsers. This technology is known as Asynchronous Flash and XML. To interoperate with browser client applications the Flash client application can be installed as a so called browser plug in. The browser plug in can be activated or initialized when an objected embedded in a given web page or other structured document is encountered. For example when a browser client encounters a .swf object the Flash client plug in can be activated to process the object and render an output.

In particular embodiments a game application may include several components. For example a game may include game logic and definitions of multiple objects to be rendered. The game logic can receive inputs such as key strokes and mouse clicks and process the inputs to adjust the state of one or more of the graphical objects to be rendered. A rendering component of the Flash plug in may iteratively process the graphical objects at some frame rate to render the resulting graphical output. There may be multiple objects involved in a game including the characters and other types of objects. For example with a war game the characters may be the soldiers fighting on both sides of the war. In addition there may be weapons used by the soldiers and the objects around the battlefield e.g. buildings trees animals mountains rivers and so on . Each game object may be defined according to a predetermined syntax. For example the definition of a game object may include its shape texture physical capabilities its connection or relationship with other game objects and so on. Second there may be a set of game logic that controls the development and progression of the game. The game logic indicates what should happen in response to an event occurring in the game. For example with the war game if one solider shoots another solider the game logic may indicate that the other solider should be wounded or even die as a result of the shooting event.

In particular embodiments a game application may be embedded in a web page e.g. web page so that the game players may play the game via their web browsers. In particular embodiments a Flash component e.g. Flash component may be included in the web page and a Flash plug in may be used to render the game scenes within the context of the browser client window. In particular embodiments the display of a game may be referred to as the stage of the game. Thus the stage of the game may be implemented as the Flash component embedded in the web page. For example the stage is essentially a data structure that defines some of the basic elements of the game such as aspect ration and display size. Data objects attached to or associated with the stage are rendered by the Flash plug in. At any given time a game scene may be rendered and displayed on the stage by attaching one or more game objects to the stage. Each game scene may include a set of game objects. In particular embodiments the game objects of a game scene may be arranged in a hierarchical structure under the stage. illustrates an example stage associated with a set of game objects arranged in a hierarchy. Each circular node in the hierarchy represents a particular game object. Of course different game scenes may include different game objects and similarly the same game object may have different appearances in different game scenes. Consequently in particular embodiments to render and display each game scene on the stage a Flash plug in module may process the definition of the game objects under the stage according to the game logic to determine the current game scene that should be displayed on the stage and then render and display the current game scene within the context of the browser client window.

Rendering a game scene for display may require a great amount of computer resources e.g. processor time or cache due to the large number of operations that need to be performed some of which being very computational intensive. For example in connection with a single game scene the application may need to determine which objects are in the game scene each object s position in the game scene each object s appearance including shape texture orientation and lighting resolve possible conflicts and errors among the objects and so on. In addition a game can be displayed at least at 28 or 30 frames per second and often at 45 50 or 60 frames per second which means 30 45 or 60 renderings per second. This may result in a network device devoting most if not all of its available resources to the continuous rendering of the game scenes embedded in a web page.

If while a game is being played via a web page i.e. while the game scenes are continuously rendered and displayed any other action occurs within the context of the web page or within the context of the web browser displaying the web page but outside of the context of the game application itself there may not be sufficient computer resources to respond to this other action quickly. For example a pop up window is a user interface component that is often used to communicate a message to the game player. Typically a pop up window appears i.e. pops up on top of another window e.g. the web browser temporarily to display the message and goes away after the message has been received by the game player. The pop up window may also enable the game player to provide a response to the message. illustrates example web page now with a pop up window on top of it. In particular embodiments pop up window may be triggered by any event including an event occurring within the context of the game application embedded in web page or within the context of web page but outside of the context of the embedded game application. In this example pop up window asks the game player whether he wants to send a message to his friend and the game player may respond either Yes or No by clicking on the appropriate button. Once the game player clicks on one of the buttons pop up window disappears. The message is either send or not send to the friend of the game player depending on the game player s response. In particular embodiments pop up window may be implemented using a suitable scripting language such as JavaScript and therefore is not handled by Flash which is responsible for rendering the game scenes for display in Flash component . The Flash plug in supports external interfaces that allow for interactivity between a Flash component and an external module such as a JavaScript module executing within the context of a structured document. Accordingly the game logic of the Flash based game application for example may make calls to a JavaScript library embedded in the same underlying webpage to display a pop up window. The JavaScript module executing within the context of the web page can also make calls to the Flash based game application.

Suppose pop up window appears while a game player is playing the game embedded in web page . Because the rendering of the game scenes may require a large amount of computer resources it may take some time e.g. up to 30 seconds for pop up window to appear on web page as the handling of pop up window competes for the available computer resources with the rendering of the game scenes. illustrates an example method for optimizing pop up windows under such circumstances in order to improve the interactive experiences for the game player. The process illustrated in is executed within the context of the Flash client plug in and in some implementation may be implemented using ActionScript or any other suitable programming language.

In particular embodiments suppose a game application is embedded in a web page. The game scenes are rendered and displayed within a Flash component included in the web page and the display is referred to as the stage of the game application. The game application includes the definitions of the game objects and game logic. The game scenes are continuously rendered and displayed by the browser client plug in. The display rate may be constant or varying. Each game scene is rendered on the stage by the client plug in based on the game object definitions as modified by the game logic. In particular embodiments to render a game scene client plug in processes the set of game objects under the stage e.g. stage based on their respective current states as modified by game logic and renders the game scene using the definitions of the game objects under the stage. While the game is being played suppose an event occurs that triggers a user interface component e.g. a pop up window outside of the context of the game application embedded in the web page to be displayed step of . In particular embodiments the triggering event may be an event within the context of the embedded game application or within the context of the web page but outside the context of the embedded game application. In particular embodiments the pop up window is handled outside the context of the embedded game application e.g. implemented by JavaScript and therefore is not a part of the rendering done by Flash.

In response to the triggering event a code module executing within the context of the client plug in clears currently existing rendering conflicts if any step of . Rendering conflicts may result from some type of error occurring within the game itself including the game logic or the game object definitions. Alternatively rendering conflicts may result from how different web browsers handle web pages and programming code differently. Once all rendering conflicts have been cleared the code module may pause the continuous rendering of the game scenes step of as described below. In particular embodiments only the rendering of the game scene is paused the game itself and the game logic continue to develop and progress. In particular embodiments the game application logic keeps a record of the game logic progression and continues to execute according to its timeline and adjust the state of any game objects so that when the rendering of the game scenes are resumed later the most current game object state is rendered.

In particular embodiments the code module causes the client plug in to render the current game scene as a static image e.g. a bitmap image using the game object definitions step of . This rendering may be performed in the same way as rendering any other game scenes and may be done using Flash. Particular embodiments then replace the game object definitions of the stage with the bitmap of the statically rendered image step of . The game object definitions continue to be maintained in memory but for a period of time are not associated with or attached to the stage and therefore are not processed by the client plug in. illustrates an example representation of a stage having a static image bitmap under it. The static image in may replace the set of game objects in . Since the Flash plug in processes the set of game objects under the stage to render the game scene replacing the game object definitions with the static image the Flash plug in no longer needs the same level of computing resources required to process the complex game object definitions. In one embodiment the Flash client plug in Flash may take the already rendered static image under the stage and display it without much further processing. As a result merely displaying the static image requires much less computer resources than to render and display game scenes one at a time.

Particular embodiments may display the static image step of in the Flash component included in the web page while processing and displaying the pop up window step of . Because computer resources have been freed up from rendering the game scenes there are more computer resources to execute the JavaScript code that implements the pop up window. As a result the pop up window may be processed and displayed in a shorter time as its processing no longer needs to compete with the resource intensive processes associated with rendering of the game scenes.

Once the pop up window has been handled e.g. the game player has responded to the message included in the pop up window the pop up window may go away and the rendering of the game scenes may resume. In one implementation the JavaScript code module may make a call to the embedded game signaling that it should resume rendering of the game application. The JavaScript module may be configured to signal the game application after a user has completed or responded to the pop up window or after a threshold period of time after the pop up window was presented to the user. Particular embodiments may replace the static image associated with the stage with the original set of game objects under the stage step of . Programmatically this can be accomplished by re attaching the game object definitions to the stage and disassociating the static bitmap image. By replacing the static image with the game object definitions when any subsequent game scenes need to be displayed in the Flash component included in the web page Flash may resume rendering of the game scenes based on the game object definitions and the game logic as before since Flash processes the objects associated with the stage step of . In this manner a pop up window can be implemented more quickly by reducing resource contention while the rendered static bit map preserves some aspect of visual continuity for the user as the pop up window is rendered over a portion of the game display window.

Of course pop up windows are just one type of user interface component that may be implemented to interact with game players and the present disclosure contemplates any suitable user interface components. The same concept described in may be applied when any other type of user interface components outside of the context of an embedded game application is triggered. In addition games represent only one type of application in connection with which the present application can be used. The present disclosure contemplates any situation where one application is embedded in another application. In addition while the embodiments described above operate in connection with Flash the present invention can be used in connection with other types of plug in clients such as Microsoft s Silverlight rendering technologies.

Particular embodiments may be implemented in a network environment. illustrates an example network environment suitable for providing software validation as a service. Network environment includes a network coupling one or more servers and one or more clients to each other. In particular embodiments network is an intranet an extranet a virtual private network VPN a local area network LAN a wireless LAN WLAN a wide area network WAN a metropolitan area network MAN a portion of the Internet or another network or a combination of two or more such networks . The present disclosure contemplates any suitable network .

One or more links couple a server or a client to network . In particular embodiments one or more links each includes one or more wireline wireless or optical links . In particular embodiments one or more links each includes an intranet an extranet a VPN a LAN a WLAN a WAN a MAN a portion of the Internet or another link or a combination of two or more such links . The present disclosure contemplates any suitable links coupling servers and clients to network .

In particular embodiments each server may be a unitary server or may be a distributed server spanning multiple computers or multiple datacenters. Servers may be of various types such as for example and without limitation web server news server mail server message server advertising server file server application server exchange server database server or proxy server. In particular embodiments each server may include hardware software or embedded logic components or a combination of two or more such components for carrying out the appropriate functionalities implemented or supported by server . For example a web server is generally capable of hosting websites containing web pages or particular elements of web pages. More specifically a web server may host HTML files or other file types or may dynamically create or constitute files upon a request and communicate them to clients in response to HTTP or other requests from clients . A mail server is generally capable of providing electronic mail services to various clients . A database server is generally capable of providing an interface for managing data stored in one or more data stores.

In particular embodiments one or more data storages may be communicatively linked to one or more severs via one or more links . In particular embodiments data storages may be used to store various types of information. In particular embodiments the information stored in data storages may be organized according to specific data structures. In particular embodiment each data storage may be a relational database. Particular embodiments may provide interfaces that enable servers or clients to manage e.g. retrieve modify add or delete the information stored in data storage .

In particular embodiments each client may be an electronic device including hardware software or embedded logic components or a combination of two or more such components and capable of carrying out the appropriate functionalities implemented or supported by client . For example and without limitation a client may be a desktop computer system a notebook computer system a netbook computer system a handheld electronic device or a mobile telephone. The present disclosure contemplates any suitable clients . A client may enable a network user at client to access network . A client may enable its user to communicate with other users at other clients .

A client may have a web browser such as MICROSOFT INTERNET EXPLORER GOOGLE CHROME or MOZILLA FIREFOX and may have one or more add ons plug ins or other extensions such as TOOLBAR or YAHOO TOOLBAR. A user at client may enter a Uniform Resource Locator URL or other address directing the web browser to a server and the web browser may generate a Hyper Text Transfer Protocol HTTP request and communicate the HTTP request to server . Server may accept the HTTP request and communicate to client one or more Hyper Text Markup Language HTML files responsive to the HTTP request. Client may render a web page based on the HTML files from server for presentation to the user. The present disclosure contemplates any suitable web page files. As an example and not by way of limitation web pages may render from HTML files Extensible HyperText Markup Language XHTML files or Extensible Markup Language XML files according to particular needs. Such pages may also execute scripts such as for example and without limitation those written in JAVASCRIPT JAVA MICROSOFT SILVERLIGHT combinations of markup language and scripts such as AJAX Asynchronous JAVASCRIPT and XML and the like. Herein reference to a web page encompasses one or more corresponding web page files which a browser may use to render the web page and vice versa where appropriate.

Particular embodiments may be implemented on one or more computer systems. illustrates an example computer system . In particular embodiments one or more computer systems perform one or more steps of one or more methods described or illustrated herein. In particular embodiments one or more computer systems provide functionality described or illustrated herein. In particular embodiments software running on one or more computer systems performs one or more steps of one or more methods described or illustrated herein or provides functionality described or illustrated herein. Particular embodiments include one or more portions of one or more computer systems .

This disclosure contemplates any suitable number of computer systems . This disclosure contemplates computer system taking any suitable physical form. As example and not by way of limitation computer system may be an embedded computer system a system on chip SOC a single board computer system SBC such as for example a computer on module COM or system on module SOM a desktop computer system a laptop or notebook computer system an interactive kiosk a mainframe a mesh of computer systems a mobile telephone a personal digital assistant PDA a server or a combination of two or more of these. Where appropriate computer system may include one or more computer systems be unitary or distributed span multiple locations span multiple machines or reside in a cloud which may include one or more cloud components in one or more networks. Where appropriate one or more computer systems may perform without substantial spatial or temporal limitation one or more steps of one or more methods described or illustrated herein. As an example and not by way of limitation one or more computer systems may perform in real time or in batch mode one or more steps of one or more methods described or illustrated herein. One or more computer systems may perform at different times or at different locations one or more steps of one or more methods described or illustrated herein where appropriate.

In particular embodiments computer system includes a processor memory storage an input output I O interface a communication interface and a bus . Although this disclosure describes and illustrates a particular computer system having a particular number of particular components in a particular arrangement this disclosure contemplates any suitable computer system having any suitable number of any suitable components in any suitable arrangement.

In particular embodiments processor includes hardware for executing instructions such as those making up a computer program. As an example and not by way of limitation to execute instructions processor may retrieve or fetch the instructions from an internal register an internal cache memory or storage decode and execute them and then write one or more results to an internal register an internal cache memory or storage . In particular embodiments processor may include one or more internal caches for data instructions or addresses. The present disclosure contemplates processor including any suitable number of any suitable internal caches where appropriate. As an example and not by way of limitation processor may include one or more instruction caches one or more data caches and one or more translation look aside buffers TLBs . Instructions in the instruction caches may be copies of instructions in memory or storage and the instruction caches may speed up retrieval of those instructions by processor . Data in the data caches may be copies of data in memory or storage for instructions executing at processor to operate on the results of previous instructions executed at processor for access by subsequent instructions executing at processor or for writing to memory or storage or other suitable data. The data caches may speed up read or write operations by processor . The TLBs may speed up virtual address translation for processor . In particular embodiments processor may include one or more internal registers for data instructions or addresses. The present disclosure contemplates processor including any suitable number of any suitable internal registers where appropriate. Where appropriate processor may include one or more arithmetic logic units ALUs be a multi core processor or include one or more processors . Although this disclosure describes and illustrates a particular processor this disclosure contemplates any suitable processor.

In particular embodiments memory includes main memory for storing instructions for processor to execute or data for processor to operate on. As an example and not by way of limitation computer system may load instructions from storage or another source such as for example another computer system to memory . Processor may then load the instructions from memory to an internal register or internal cache. To execute the instructions processor may retrieve the instructions from the internal register or internal cache and decode them. During or after execution of the instructions processor may write one or more results which may be intermediate or final results to the internal register or internal cache. Processor may then write one or more of those results to memory . In particular embodiments processor executes only instructions in one or more internal registers or internal caches or in memory as opposed to storage or elsewhere and operates only on data in one or more internal registers or internal caches or in memory as opposed to storage or elsewhere . One or more memory buses which may each include an address bus and a data bus may couple processor to memory . Bus may include one or more memory buses as described below. In particular embodiments one or more memory management units MMUs reside between processor and memory and facilitate accesses to memory requested by processor . In particular embodiments memory includes random access memory RAM . This RAM may be volatile memory where appropriate Where appropriate this RAM may be dynamic RAM DRAM or static RAM SRAM . Moreover where appropriate this RAM may be single ported or multi ported RAM. The present disclosure contemplates any suitable RAM. Memory may include one or more memories where appropriate. Although this disclosure describes and illustrates particular memory this disclosure contemplates any suitable memory.

In particular embodiments storage includes mass storage for data or instructions. As an example and not by way of limitation storage may include an HDD a floppy disk drive flash memory an optical disc a magneto optical disc magnetic tape or a Universal Serial Bus USB drive or a combination of two or more of these. Storage may include removable or non removable or fixed media where appropriate. Storage may be internal or external to computer system where appropriate. In particular embodiments storage is non volatile solid state memory. In particular embodiments storage includes read only memory ROM . Where appropriate this ROM may be mask programmed ROM programmable ROM PROM erasable PROM EPROM electrically erasable PROM EEPROM electrically alterable ROM EAROM or flash memory or a combination of two or more of these. This disclosure contemplates mass storage taking any suitable physical form. Storage may include one or more storage control units facilitating communication between processor and storage where appropriate. Where appropriate storage may include one or more storages . Although this disclosure describes and illustrates particular storage this disclosure contemplates any suitable storage.

In particular embodiments I O interface includes hardware software or both providing one or more interfaces for communication between computer system and one or more I O devices. Computer system may include one or more of these I O devices where appropriate. One or more of these I O devices may enable communication between a person and computer system . As an example and not by way of limitation an I O device may include a keyboard keypad microphone monitor mouse printer scanner speaker still camera stylus tablet touch screen trackball video camera another suitable I O device or a combination of two or more of these. An I O device may include one or more sensors. This disclosure contemplates any suitable I O devices and any suitable I O interfaces for them. Where appropriate I O interface may include one or more device or software drivers enabling processor to drive one or more of these I O devices. I O interface may include one or more I O interfaces where appropriate. Although this disclosure describes and illustrates a particular I O interface this disclosure contemplates any suitable I O interface.

In particular embodiments communication interface includes hardware software or both providing one or more interfaces for communication such as for example packet based communication between computer system and one or more other computer systems or one or more networks. As an example and not by way of limitation communication interface may include a network interface controller NIC or network adapter for communicating with an Ethernet or other wire based network or a wireless NIC WNIC or wireless adapter for communicating with a wireless network such as a WI FI network. This disclosure contemplates any suitable network and any suitable communication interface for it. As an example and not by way of limitation computer system may communicate with an ad hoc network a personal area network PAN a local area network LAN a wide area network WAN a metropolitan area network MAN or one or more portions of the Internet or a combination of two or more of these. One or more portions of one or more of these networks may be wired or wireless. As an example computer system may communicate with a wireless PAN WPAN such as for example a BLUETOOTH WPAN a WI FI network a WI MAX network a cellular telephone network such as for example a Global System for Mobile Communications GSM network or other suitable wireless network or a combination of two or more of these. Computer system may include any suitable communication interface for any of these networks where appropriate. Communication interface may include one or more communication interfaces where appropriate. Although this disclosure describes and illustrates a particular communication interface this disclosure contemplates any suitable communication interface.

In particular embodiments bus includes hardware software or both coupling components of computer system to each other. As an example and not by way of limitation bus may include an Accelerated Graphics Port AGP or other graphics bus an Enhanced Industry Standard Architecture EISA bus a front side bus FSB a HYPERTRANSPORT HT interconnect an Industry Standard Architecture ISA bus an INFINIBAND interconnect a low pin count LPC bus a memory bus a Micro Channel Architecture MCA bus a Peripheral Component Interconnect PCI bus a PCI Express PCI X bus a serial advanced technology attachment SATA bus a Video Electronics Standards Association local VLB bus or another suitable bus or a combination of two or more of these. Bus may include one or more buses where appropriate. Although this disclosure describes and illustrates a particular bus this disclosure contemplates any suitable bus or interconnect.

Herein reference to a computer readable storage medium encompasses one or more non transitory tangible computer readable storage media possessing structure. As an example and not by way of limitation a computer readable storage medium may include a semiconductor based or other integrated circuit IC such as for example a field programmable gate array FPGA or an application specific IC ASIC a hard disk an HDD a hybrid hard drive HHD an optical disc an optical disc drive ODD a magneto optical disc a magneto optical drive a floppy disk a floppy disk drive FDD magnetic tape a holographic storage medium a solid state drive SSD a RAM drive a SECURE DIGITAL card a SECURE DIGITAL drive or another suitable computer readable storage medium or a combination of two or more of these where appropriate. Herein reference to a computer readable storage medium excludes any medium that is not eligible for patent protection under 35 U.S.C. 101. Herein reference to a computer readable storage medium excludes transitory forms of signal transmission such as a propagating electrical or electromagnetic signal per se to the extent that they are not eligible for patent protection under 35 U.S.C. 101.

This disclosure contemplates one or more computer readable storage media implementing any suitable storage. In particular embodiments a computer readable storage medium implements one or more portions of processor such as for example one or more internal registers or caches one or more portions of memory one or more portions of storage or a combination of these where appropriate. In particular embodiments a computer readable storage medium implements RAM or ROM. In particular embodiments a computer readable storage medium implements volatile or persistent memory. In particular embodiments one or more computer readable storage media embody software. Herein reference to software may encompass one or more applications bytecode one or more computer programs one or more executables one or more instructions logic machine code one or more scripts or source code and vice versa where appropriate. In particular embodiments software includes one or more application programming interfaces APIs . This disclosure contemplates any suitable software written or otherwise expressed in any suitable programming language or combination of programming languages. In particular embodiments software is expressed as source code or object code. In particular embodiments software is expressed in a higher level programming language such as for example C Perl or a suitable extension thereof. In particular embodiments software is expressed in a lower level programming language such as assembly language or machine code . In particular embodiments software is expressed in JAVA. In particular embodiments software is expressed in Hyper Text Markup Language HTML Extensible Markup Language XML or other suitable markup language.

The present disclosure encompasses all changes substitutions variations alterations and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend. Similarly where appropriate the appended claims encompass all changes substitutions variations alterations and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend.

