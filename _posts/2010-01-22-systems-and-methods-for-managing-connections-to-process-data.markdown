---

title: Systems and methods for managing connections to process data
abstract: A computer-implemented method for managing connections to process data is described. A connection with an access server is established to determine a connection point associated with one or more targets. The one or more targets are arranged according to the connection points associated with each of the one or more targets. A connection with a first connection point is established. Data from one or more targets associated with the first connection point are processed. The connection with the first connection point is terminated.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08856189&OS=08856189&RS=08856189
owner: Symantec Corporation
number: 08856189
owner_city: Mountain View
owner_country: US
publication_date: 20100122
---
The use of computer systems and computer related technologies continues to increase at a rapid pace. This increased use of computer systems has influenced the advances made to computer related technologies. Indeed computer systems have increasingly become an integral part of the business world and the activities of individual consumers. Computer systems may be used to carry out several business industry and academic endeavors. The wide spread use of computers has been accelerated by the increased use of computer networks including the Internet. Many businesses use one or more computer networks to communicate and share data between the various computers connected to the networks. The productivity and efficiency of employees often requires human and computer interaction.

Users of computer technologies continue to demand that the efficiency of these technologies increase. These demands include demands to improve the functionality of computing devices. For example computing devices may perform various functions on data. These functions may include archiving copies of data. Archived copies of data may be used to restore the data in the event the data become lost or corrupted.

In some instances original data may be stored across various servers in an Exchange Server system. The Exchange system may include various interconnected servers that host numerous databases. A computing device that desires to perform various functions on data stored in the databases may connect to one or more of the servers that are part of the Exchange system. As a result benefits may be realized by providing systems and methods for managing connections to process data from one or more locations in an Exchange system.

According to at least one embodiment a computer implemented method for managing connections to process data is described. A connection with an access server is established to determine a connection point associated with one or more targets. The one or more targets are arranged according to the connection points associated with each of the one or more targets. A connection with a first connection point is established. Data from one or more targets associated with the first connection point are processed. The connection with the first connection point is terminated.

In one configuration a connection with a second connection point may be established. Data from one or more targets associated with the second connection point may be processed. In one embodiment the connection with the second connection point may be terminated.

In one example the one or more targets may be an electronic mail mailbox. In addition the one or more targets may be stored in one or more databases.

In one embodiment the one or more databases may be organized into one or more groups of databases. One or more databases that have not been assigned to a group of databases may be identified. The one or more databases that have not been assigned to a group of databases may be assigned to a default group of databases.

A computer system configured to manage connections to process data is also described. The computer system may include a processor and memory in electronic communication with the processor. The computer system may also include an archiving application configured to establish a connection with an access server to determine a connection point associated with one or more targets. In addition the application may be configured to arrange the one or more targets according to the connection points associated with each of the one or more targets and establish a connection with a first connection point. The application may also be configured to process data from one or more targets associated with the first connection point and terminate the connection with the first connection point.

A computer program product for managing connections to process data is also described. The computer program product may include a computer readable medium having instructions thereon. The instructions may include code programmed to establish a connection with an access server to determine a connection point associated with one or more targets and code programmed to arrange the one or more targets according to the connection points associated with each of the one or more targets. The instructions may also include code programmed to establish a connection with a first connection point and code programmed to process data from one or more targets associated with the first connection point. The instructions may further include code programmed to terminate the connection with the first connection point.

Features from any of the above mentioned embodiments may be used in combination with one another in accordance with the general principles described herein. These and other embodiments features and advantages will be more fully understood upon reading the following detailed description in conjunction with the accompanying drawings and claims.

While the embodiments described herein are susceptible to various modifications and alternative forms specific embodiments have been shown by way of example in the drawings and will be described in detail herein. However the exemplary embodiments described herein are not intended to be limited to the particular forms disclosed. Rather the instant disclosure covers all modifications equivalents and alternatives falling within the scope of the appended claims.

Enterprises may use specific servers to provide electronic mail functions calendaring functions contacts and tasks support for mobile and web based access to information support for data storage etc. An example of a specific server that an enterprise might use to provide these functions is an Exchange Server also referred to herein as an Exchange system . In addition enterprises may use an archiving application that connects to an Exchange server. The application may discover content held within an email mailbox a file system etc. An archiving application may also reduce the amount of storage required for emails on file systems. In one embodiment an archiving application may manage the content of emails and file systems using automated policy controlled archiving to online stores for active retention and seamless retrieval of information.

In one configuration the present systems and methods may optimize the number of connections that an archiving application establishes while processing mailboxes spread across different mailbox databases in a distributed Exchange system such as the Exchange 2010 System . The present systems and methods may also minimize the number of Exchange application programming interfaces API context switches between connection points and may also optimize network traffic in a geographically distributed system. The present systems and methods may further configure an archiving application that processes mailboxes across multiple mailbox databases in an Exchange system. In one example this may be achieved by grouping mailbox databases and applying application settings to various groups.

In one embodiment the connection point for connections between an archiving application and a mailbox database in an Exchange system may be at a client access server CAS level. In other words access to a mailbox database may be made through a CAS and access to different mailbox databases may be made through the same CAS. Each mailbox database may include one or more mailboxes. In addition each database may be configured to be assigned a default CAS that is the preferred connection point for the mailboxes within that database. In one example an Exchange system such as the Exchange 2010 System may include a database availability group DAG . A DAG may be a group of Exchange servers that host one or more mailbox databases. These mailbox databases may be hosted by a home server but the databases may also be replicated across other servers in the DAG. In other words when the home server of a mailbox database fails a copy of that database hosted by another server within the DAG may become available without any intervention by an administrator. This may be referred to as a failover . For example a mailbox database may failover from server A to server B if when server A fails.

In one configuration the Exchange servers in a DAG may be in the same geographical location or spread around the world at various locations. In an Exchange system API connection points may be dynamic and may change as mailbox databases failover from one server to another server in the DAG. In an application that is targeting individual mailboxes in an Exchange system there may be a large amount of context switching between connection points in order to process all of the mailboxes on different servers that are being targeted by the application. Large numbers of context switches may have a performance impact on the application. The number of context switches may also have a negative impact on the performance of an Exchange server. For example if an Exchange system is set up so that several databases use the same connection point performance issues may arise if the application is tied to processing only a certain connection point rather than certain mailboxes. In one configuration agents or worker processes of the application may be tied up processing a large mailbox database through a connection point and may not be able to process the other mailboxes through that same connection point. In addition as previously explained a mailbox database may failover from a first server at a first location to a second server at a second location i.e. a remote site . The application may process mailboxes located at the second location and transmit information across a network. The network traffic between the application and the remote site may become large and unworkable.

In one embodiment the use of the term maintenance below may describe an allocated period of time when an archiving application processes data within one or more targeted mailboxes. In one configuration an administrator may desire to specify different maintenance periods for different applications to process the data. Examples of processing the data may include for example archiving the data backing up the data etc.

In one configuration a first server hosting a mailbox database may fail and the database with the targeted mailboxes may failover to a second server. The second server may be in a different time zone than the first server. The application may still be required to process the data within a certain maintenance period regardless of where the data are currently active. For example the end user whose mailbox is being processed may be at a first location while the database that holds the mailbox has been moved across the world to a second location as a result of a failover. The end user may still expect for example an Outlook session to be responsive during their working hours regardless of where the database containing the mailbox is located. An archiving application may be targeting hundreds of thousands of mailboxes across thousands of mailbox databases which may require the use of time and resources to configure the application.

In one embodiment an archiving application that targets an Exchange system may connect to a CAS rather than connect directly to a server that hosts a mailbox database that includes the targeted mailboxes. In one example the CAS may channel the request from the application to the appropriate mailbox server. The present systems and methods may minimize the creating and discarding of connections that may be required to process individual mailboxes that are spread across a number of mailbox databases. This may be achieved by intelligently sorting a list of mailboxes that need to be processed so that all of the mailboxes with the same connection point may be processed one after the other. The current connection may be discarded when the application has processed all of the mailboxes that can be processed through the same connection point. Each mailbox database and therefore each mailbox may have a preferred connection point determined by the Exchange system. This may be determined by making a connection to the Exchange system to determine the preferred connection point for a particular mailbox database.

In one embodiment an application may include a list of all the targets i.e. mailboxes to process. The application may make a single connection to an Exchange system to determine a connection point to use for each target. This may occur immediately before an application processes the mailboxes periodically e.g. once per day etc. In addition the query to determine the connection points to use for a target may occur when a particular event is executed. For example the query may take place when a connection failure occurs during the processing of a target when a slower than expected processing rate occurs during an event log frenzy when a specific event log entry occurs when the system is otherwise idle etc.

In one configuration the targets may be ordered based on their connection point and a connection may be established for the first target on the list. After the first target is processed the remaining targets associated with the same connection point may also be processed. After all the targets of that connection point have been processed the connection may be discarded. A new connection may then be established for one or more targets. This connection may be maintained until all targets assigned to that connection point have been processed. This sequence may be repeated until all the target mailboxes have been processed.

The system may also include one or more databases . Each of these databases may include one or more mailboxes . For example the first database may include mailbox A and mailbox D . The second database may include mailbox B and mailbox E . The third database may include mailbox C and mailbox F .

As previously explained each mailbox database and therefore each mailbox may be associated with a connection point. One example of a connection point may be a client access server CAS . The connection point may be used by the application to access the data within each mailbox. In one embodiment a first CAS may be the connection point for the first database and the mailboxes within the first database . A second CAS may serve as the connection point between the application and the second database and the third database .

In one configuration the client device may connect to the first CAS through a first network connection . The client device may connect to the second CAS through a second network connection . The first CAS may then connect to the first database through a third network connection . Similarly the second CAS may connect to the second database through a fourth network connection . The second CAS may connect to the third database through a fifth network connection .

As previously described above the present systems and methods may minimize the number of connections that the application must make in order to process data within the various mailboxes that the application is targeting. For example the application may target mailbox A mailbox B mailbox C and mailbox D in order to process the data within these mailboxes. When the application is initiated it may make a first connection to either the first CAS or the second CAS in order to determine the connection points assigned to each of the mailboxes to be processed. The first connection may then be discarded. The targets or mailboxes may be sorted based on the determined connection points. For example the application may determine from the first connection that mailbox A and mailbox D are associated with the first CAS as their connection point. The application may further determine from the first connection that mailbox B and mailbox C are associated with the second CAS for their connection point. In one configuration mailbox A and mailbox D may be included in a first list that identifies mailboxes that are associated with the first CAS . Similarly mailbox B and mailbox C may be included in a second list to indicate that both mailboxes are associated with the second CAS .

In one configuration a second connection may be established between the application and the first CAS in order to process mailbox A and mailbox D . The application may process first either mailbox A or mailbox D . The application may then process the other mailbox. Once all the mailboxes associated with the first CAS are processed the second connection may be discarded.

In one example a third connection may be established between the application and the second CAS in order to process the mailboxes associated with the second CAS . Once all the mailboxes associated with the second CAS are processed the third connection may be discarded. As a result using the above example a total of three connections may be required in order for the application to process the targeted mailboxes .

Without using the present systems and methods eight connections between the application and the various databases may be required in order to process mailbox A mailbox B mailbox C and mailbox D . As an example for each mailbox a connection may be established to determine the connection point for that particular mailbox i.e. four connections . Each of these connections may then be discarded. Another connection may be established with a preferred connection point in order to process a mailbox associated with that connection point i.e. another four connections . As a result eight connections may be required in order to process the four mailboxes referenced above.

Using the above examples the connection count with the present systems and methods may be the number of preferred connection points plus one e.g. Number of preferred connection points 1 . The connection count however without using the present systems and methods may be two times the number of mailboxes the application is targeting e.g. 2 Number of targeted mailboxes .

In one example the first database may be live i.e. running in the first region while the second database is dormant in the first region. The second database may be live i.e. running in the second region while the first database is dormant in the second region. A first CAS may serve as the connection point for the first database and a second CAS may serve as the connection point for the second database . The first CAS may be located at the first region and the second CAS may be located at the second region. The first database may be assigned to the first CAS connection point. The second database may be assigned to the second CAS connection point.

An application that processes the mailboxes on the Exchange system may have a first agent and a second agent . The agents may perform the processing of data within the targeted mailboxes . In one configuration the first agent may be located at the first region and the second agent may be located at the second region. In addition the application may include a data processor that is located at the first region.

The first agent may process any mailbox using the first CAS as a connection point. If while processing a mailbox the first agent finds data to process the data may then be passed to the data processor . The second agent may process mailboxes that use the second CAS as a connection point. If while processing a mailbox the second agent finds data to process the data may be passed over a wide area network WAN to the data processor . In one embodiment the data that are of interest to the application may be passed over the WAN. The majority of the work scanning the mailbox for interesting data may be executed locally at the connection points .

In one embodiment the application may target and process various mailboxes located within mailbox databases . The application may include a first agent located at the first region and a second agent located at the second region. In one configuration the first agent may connect to the first database hosted by the second server via the first CAS . In addition the second agent may connect to the second CAS in order to process mailboxes B and mailbox D within the second database .

When the first agent connects to the first CAS at the first region the connection may be redirected across a WAN B to the first database hosted by the second server at the second region. As a result increased traffic over the WAN B may exist because the mailbox processing for mailbox A and mailbox D is occurring over the WAN B. In other words when the first CAS connects to the first database hosted by the second server and data within the first database are identified to be processed the data may be transmitted across the WAN B to the first CAS and then to the first agent . The first agent may transmit the data to the data processor . The traffic across the WAN B may increase significantly as data are transmitted from the first database at the second region to the first CAS at the first region.

In one embodiment an application may update a cache of connection points when the connection point for the first database is switched to the second CAS . In addition traffic across a WAN may be reduced when the connection point is switched. The connection point cache of the application may be updated automatically when the application become aware that processing performances are below a certain threshold. Alternatively the connection point cache may be updated when a certain event occurs.

In one configuration a first agent may connect to a local connection point at a first region. For example the first agent may connect to the first CAS however in this example there are no mailboxes to process because there are no mailboxes using the first CAS as a connection point. In one embodiment a second agent may connect to mailboxes using the local connection point at a second region. For example the second agent may connect to the second CAS . In this example the second agent may process all mailboxes locally on the second server . If the second agent locates interesting data in one of the mailboxes the second agent may pass this information over the WAN to a data processor located at the first region.

As described above the present systems and methods allow an application to use agents to process targets such as mailboxes that are at the same geographical region as the agents. Immediately after a database move or failover the application may continue to process all targets however network traffic may be increased. After the database move or failover the connection points for the targets may be updated. The application may automatically recognize the updates and only use an agent within the same geographical region to process the target. In one embodiment the agents of the application may be generic and may be able to process any target using all connection points across the Exchange system.

In one configuration some of the jobs to be processed by the first agent may be associated with the first CAS and some other jobs may be associated with the second CAS . The jobs may be arranged so that the first agent changes connection points between the first CAS and the second CAS as few times as possible. For example if the first agent is connected to the first CAS all jobs requiring the first CAS may be processed before the jobs requiring the second CAS .

In one example the application may include a job queue . The queue may include a list of various jobs to be performed by an agent such as the first agent . Each job within the job queue may be associated with a preferred connection point. For example job A and job C may prefer or require the first CAS as their connection point. Job B may prefer or require the second CAS as the connection point.

The application may also include a manager module to manage jobs for the first agent . The manager module may access an agent connection point cache . The agent connection point cache may identify the most recent connection point used by the first agent . In other words the agent connection point cache may indicate to the manager module what the current connection point is for the first agent . In addition the management module may access a target connection point cache . The target connection point cache may include a list of preferred connection points for various targets or mailboxes.

In one embodiment the first agent and a second agent may connect to a connection point such as a first CAS or a second CAS in order to perform the various jobs. The first CAS and the second CAS may be located at a first active directory site . In one configuration the agents may not be tied to a particular connection point . The jobs may be assigned to the agents by the manager module so that each agent may change connection points as few times as possible. In other words if the first agent is using the first CAS and the second agent is using the second CAS jobs such as job A and job C requiring the first CAS may be assigned to the first agent . Jobs such as job B requiring the second CAS may be assigned to the second agent .

In one example if there are no more jobs requiring the second CAS but there are still jobs requiring the first CAS the second agent may be assigned a job by the manager module that requires the first CAS . Similarly if there are no more jobs requiring the first CAS but there are still jobs requiring the second CAS the first agent may be assigned a job by the manager module requiring the second CAS .

In one embodiment a first agent and a second agent may be tied to a first CAS connection point and a second CAS connection point. A third agent may be tied to a third CAS connection point. In one configuration the third agent may be assigned the jobs requiring the third CAS connection point. The first agent and a second agent may be assigned jobs requiring the first CAS and the second CAS . The third CAS may reside at a second active directory site which may be different than a first active directory site . The first CAS and the second CAS may reside at the first active directory site . The third CAS may be at a different active directory site than the other connection points in order to minimize network traffic.

In one example special mailboxes such as mailboxes belonging to a group of company executives may have a dedicated connection point. The application may be configured such that one agent such as the third agent may be reserved purely for processing the data of a special mailbox. In other words the third agent may be reserved to connect only to the third CAS which may be the preferred connection point for a special mailbox.

In one configuration a connection with an access server may be established in order to determine the connection points for one or more targets or mailboxes to process. The access server may be a client access server CAS . The one or more targets may be arranged in a certain order based on the connection points for each target. In other words targets associated with a first connection point may be grouped together and targets associated with a second connection point may be grouped together.

In one embodiment a connection may be established with a connection point such as a first connection point. A target assigned or associated with the first connection point may be processed . A determination may be made as to whether an additional target exists that is also assigned to the first connection point. If it is determined that an additional target exists that is also assigned to the first connection point the method may return to process the additional target associated or assigned to the first connection point. If however it is determined that an additional target does not exist that is assigned to the first connection point the connection with the first connection point may be terminated .

A determination may be made as to whether any additional targets exist to process. If it is determined that there are additional targets to process the method may return to establish a connection with a connection point such as a second connection point that is associated with the additional target. The second connection point may be different than the first connection point previously used. The method may continue as outlined above. If however it is determined that there are no additional targets to process the method may end.

In one embodiment a work request may be received from an agent. An agent connection point cache may be read in order to determine whether a current connection point exists for the agent requesting work. If it is determined that a current connection point does not exist a list of allowed connection points for the agent may be read . If however it is determined that a current connection point does exist for the agent a determination may be raised as to whether a job exists for the current connection point. If it is determined that a job does exist for the current connection point the job may be assigned to the agent. In one embodiment the agent connection point cache may then be updated . If however it is determined that a job does not exist for the current connection point the list of allowed connection points for the agent may be read as previously described.

In addition the agent connection point cache for all entries may also be read and a determination may be made as to whether an allowed connection point is available. If it is determined that an allowed connection point is not available the highest priority job for any allowed connection points may be determined . The job may then be assigned to the agent. The agent connection point cache may then be updated as previously described. If however it is determined that an allowed connection point is available a determination may be made as to whether a job exists for the connection point. If it is determined that a job does not exist for the connection point the highest priority job for any allowed connection point may again be determined . If however it is determined that a job does exist for the connection point the job may be assigned to the agent and the agent connection point cache may be updated .

In other words an agent requesting work may use a different connection point than another agent if possible. For example if a first agent is already connected to a first connection point and a second agent is able to use either the first connection point and a second connection point when the second agent requests work the second agent may be given work associated with the second connection point if work exists for that connection point.

As previously stated the present systems and methods may configure an application that processes mailboxes in an Exchange system. Applications processing data in Exchange mailboxes may be required to efficiently manage the configuration of application settings. For example in an Exchange 2010 system in particular with DAGs the data may no longer be tied to a specific mailbox server. As a result a mailbox server may not be an effective configuration point for the application. Instead as the application is targeting the Exchange data a mailbox database may be a more efficient configuration point for the application.

In a large organization or a hosting company however there may be a large number of mailbox databases. This may require an extensive amount of time and resources to manage the system. As a result the present systems and methods may use a group of databases as a configuration point for the application instead of individual mailbox databases. A group of databases may include any number of databases. In one embodiment the databases within a group may be hosted on different servers in different DAGs etc.

In one embodiment groups of databases may allow application settings and resources such as maintenance worker processors etc. to be set against the data rather than the physical server and may ensure that the data are processed at the appropriate time regardless if the data are active and to finely tune the performance of the application. By grouping databases the present systems and methods may reduce the number of places an administrator may be required to configure settings of the application.

In one embodiment the application may define a default all other databases group such that any database not defined in a group may be part of the default group. The application may determine if there are any mailboxes that will not be processed by the existing groups. The databases that include these mailboxes may be added to the all other databases group .

The application may also include group 1 settings which may indicate the configuration of the application in order to indicate which databases are to be processed or accessed and which agents are to carry out the processes. For example the group 1 settings may indicate that the application is configured to target mailbox A mailbox D mailbox B and mailbox C . However the group 1 settings may only include the first database and the second database . As a result the first agent the second agent and the third agent may only access the data within the first database and the second database . As a result mailbox C may not be processed with the current group 1 settings .

As previously described in the application may include group 1 settings that may indicate the configurations of the application . For example the group 1 settings may indicate that each agent may complete or process various jobs assigned by the application . The group 1 settings may also indicate which databases are members of a group 1 of databases. For example the settings may indicate that the first database and the second database are a part of group 1. As a result the third database may not be included in the group 1 settings . In other words mailbox C may not be processed by any of the agents because the third database is not included as a member of group 1. In one embodiment default group settings may also be included on the application . The default group settings may identify databases that have not been assigned to a particular group. As a result the third database may be a member of a default group indicated by the default group settings . The default group settings may also indicate that each agent is authorized to process mailboxes within databases that belong to the default group. This may allow processing of mailbox C by any of the agents . As shown in any of the agents may process mailboxes that belong to either the group 1 of databases or the default group of databases.

In one example various users may desire to access mailboxes within mailbox databases hosted by the first server and the second server . For example user A user B and user C may desire to access the mailboxes within the first database and the second database . The users may be located at the first region. An application may include group 1 settings . In one embodiment the group 1 settings may include a database list and a time schedule . The database list may indicate which databases are members of a group 1 of databases. The time schedule may indicate a maintenance period or window for when agents not shown are allowed to process the various mailboxes being targeted. For example the first database and the second database may be included on the database list i.e. the first database and the second database are members of group 1 . The time schedule may indicate a GMT zone. In other words mailboxes within databases that belong to the group 1 of databases may only be processed during a specific time window according to the GMT zone.

In one example user A and user C may access the first database at the first region. User B may access the second database located at the second region. Because the first database and the second database are both included in the group 1 settings the application may process or access the first database and the second database according to the GMT zone. In other words even though the application is accessing the second database at the second region the second database at the second region may only be accessed by the application during the same maintenance period as the first database at the first region. Group 1 may have its own maintenance period indicating that mailboxes within each mailbox database of group 1 may only be processed for example between midnight and 5 00 a.m. Even if the mailbox databases failover to a different server such as the second database failing over to the second server the same maintenance window may still be applied. As a result the mailboxes may not be processed by the application when the end users also want access to the mailboxes.

In one configuration users desiring to access the first database and the second database may be located at the first region while the active copies of the first database and the second database are now located at the second region on the second server . An application may also be located at the first region and may include group 1 settings . As previously described the group 1 settings may include a database list that may include a list of databases that are a part of group 1. The group 1 settings may also include a time schedule which may indicate which time zone to use when the application wishes to perform maintenance or processes on mailboxes hosted by the first database and the second database . In one example the first region may be in the GMT zone while the second region may be in a GMT 5 zone. The time schedule may indicate a maintenance period for the mailboxes according to the GMT zone. The maintenance period indicated by the time schedule may be a period of time when the users are not accessing the mailboxes. For example the maintenance period may be from 12 00 am to 5 00 am according to the GMT zone.

In one embodiment when the first database failsover to the second server the group 1 settings indicate that mailboxes within the first database may still be processed by the application during the period indicated by the time schedule . In other words the application may process the mailboxes during a time when the users are not accessing the mailboxes.

In one configuration each database may include one or more mailboxes. For example the first database may include mailbox A mailbox C and mailbox D . The second database may include mailbox B . In other words the first database may be significantly larger than the second database . An application may include one or more agents to complete jobs or process the various mailboxes. For example a first agent a second agent and a third agent may connect with the first database on the first server in order to process mailbox A mailbox C and mailbox D . A fourth agent may connect with the second database on the second server in order to process mailbox B . The application may include settings for various database groups. For example group 1 settings may indicate that the first database is a member of group 1. Group 2 settings may indicate that the second database is a member of group 2. The group 1 settings may also indicate that the first agent the second agent and the third agent are dedicated agents for the first database . The group 2 settings may indicate that only the fourth agent is the dedicated agent for the second database . In other words based on the group settings different numbers of agents may be dedicated to a particular database.

In one embodiment an application may include various agents to process mailboxes within the first database and the second database . Group 1 settings may indicate that the first database is a member of group 1 and the first agent the second agent and the third agent are dedicated agents for the first database . Group 2 settings may indicate that the second database is a member of group 2 and only the fourth agent may be dedicated for the second database . The group 1 settings may include more agents dedicated for the first database because the first database may include mailbox A mailbox C and mailbox D while the second database only contains mailbox B .

As explained above if a mailbox database is particularly large such as the first database the database may be the sole member of a database group. The group may have a number of agents dedicated to processing the targets or mailboxes in the large database in order to ensure that the work is done inside a particular maintenance window. Other mailbox databases may be processed by different agents and the work load may be distributed.

In one embodiment customer A and customer B may be associated with a particular server and mailbox database hosted by a server. For example customer A may be associated with a first server which hosts a first database . Customer B may be associated with a second server which hosts a second database . Each customer may be associated with mailboxes in a mailbox database . Each database may have its own administrator credential. For example customer A may be associated with mailbox A mailbox B and mailbox C . Customer B may be associated with mailbox D mailbox E and mailbox F . The application may include settings for two different groups of databases. For example group 1 settings may include a database list A that lists the databases that are a member of group 1. Group 2 settings may also include a database list B that lists databases that are a member of group 2. These two mailbox database groups may be created to target the mailboxes of the two customers . Each mailbox database group may include its own login credentials A B to ensure that agents not shown may only process mailboxes from a particular customer s mailbox database.

From the above description it may be possible to end up in a situation where a number of mailboxes may not be processed by any agents. For example if the application includes settings for a single database group and no default group settings exist mailboxes may exist in a mailbox database that is not a member of the database group. In one configuration these mailboxes may not be processed. In one example an administrator may either add an all other databases group or place the mailbox database in an existing group. To notify an administrator if this situation has occurred the application may analyze the target mailboxes and groups and determine if there are any target mailboxes that will not be processed. An alert may be generated if there are targeted mailboxes that will not be processed. The alert may be an event in an event log an e mail or some other notification. The administrator may then create an all other databases group. The databases that are not a member of a group may become members of the all other databases group. Targeted mailboxes associated with these databases may be processed.

In one embodiment the application may be able to scan an Exchange system that is being targeted and automatically create a number of database groups based on the current system resources and configurations. For example the application may scan the system and create groups based on the geographical regions data centers where the Exchange servers exist etc. In another embodiment a group may be created for each Exchange server that includes the mailbox databases included in that Exchange server. Each group may also be assigned sufficient agents based on the amount of target mailboxes in the mailbox databases. In the case of a failover the application resources may still be evenly spread so that the performance is not degraded.

In another embodiment the application may also assist with automatic group generation by examining the Exchange environment and determining the optimal way of grouping the databases for application configuration settings. For example if the Exchange servers are distributed across active directory sites the databases may be grouped such that each site has its own group. This may allow the application to then configure agents in each site in order to process the data and reduce traffic on the WAN. If the Exchange system is being backed up by a third party application the application may clear a third party application for its back up window and ensure groups are created so that the application only processes databases outside the back up windows. These groups may then have schedules automatically applied based on the available window. For example if the back up application is processing a first mailbox database and a second mailbox database from 1 00 a.m. to 3 00 a.m. and a third mailbox database and a fourth mailbox database from 3 00 a.m. to 5 00 a.m. then the application may automatically configure a first group including the first and second mailbox databases and schedule those to be processed from 4 00 a.m. to 7 00 a.m. The application may create a second group including the third and fourth databases and schedule those to be processed from 5 00 a.m. to 6 00 a.m. The length of the schedules may be determined by examining either the number of mailboxes in the databases or the current size of the databases.

In one embodiment an application user interface may allow the administrator to manually create groups by selecting mailbox databases to be added to a group by using a wizard. This may allow the selection of mailbox databases by name by the mailbox server currently hosting the active copy of the database or by specifying an active directory query to search for databases on other active directory attributes. The user interface may also include the option of analyzing the target data and assigning mailbox databases to groups based on the resources available to that group. For example if a first group includes databases containing a total of 5 000 mailboxes and a second group consists of databases containing 1 000 mailboxes and both groups are assigned the same number of resources to process the data then the application user interface may suggest or automatically configure a newly added database to be added to the second group.

After all of the mailbox databases belonging to a static group such as the first static group a determination made be made as to whether all the static groups have been processed. If it is determined that not all of the static groups have been processed the method may return to remove a first mailbox database belonging to for example a second static group from the master list. The method may then continue to process and remove all the mailbox databases belonging to the second static group until it is determined that all the mailbox databases belonging to the second static group have been processed. The above mentioned steps may continue for each static group and for each mailbox database belonging to a static group.

Once each static group and the mailbox databases belonging to a static group have been processed an active directory query of a dynamic group such as a first dynamic group may be queried for databases. The databases discovered from the query may be added to a group list for the first dynamic group. A first database added to the group list may be processed in order to determine whether the first database is included in the master list. If the first database is included in the master list the first database may be removed from the master list. If however the first database is not included in the master list the first database may be removed from the group list. A determination may then be made as to whether there are additional databases to process. If there are additional databases to process from the first dynamic group a second database for example may be processed to determine whether the second database is included in the master list. The steps described above may then repeat until each database belonging to the first dynamic group have been processed.

When each database belonging to the first dynamic group has been processed a determination may be made as to whether there are additional dynamic groups to process. If it is determined that there are additional dynamic groups such as a second dynamic group to process the method may return to process execute an active directory query of the second dynamic group for databases. Databases discovered from the query of the active directory of the second dynamic group may be added to a group list and the steps previously described may be repeated for each database belonging to the second dynamic group. These steps may repeat for each dynamic group and each database belonging to a dynamic group until each dynamic group has been processed.

After each dynamic group has been processed a determination may be made as to whether any databases remain on the master list. If additional databases remain on the master list a warning may be generated . If however there are no databases remaining on the master list the method may end.

Bus allows data communication between central processor and system memory which may include read only memory ROM or flash memory neither shown and random access memory RAM not shown as previously noted. The RAM is generally the main memory into which the operating system and application programs are loaded. The ROM or flash memory can contain among other code the Basic Input Output system BIOS which controls basic hardware operation such as the interaction with peripheral components. For example the application to implement the present systems and methods may be stored within the system memory . Applications resident with computer system are generally stored on and accessed via a computer readable medium such as a hard disk drive e.g. fixed disk an optical drive e.g. optical drive a floppy disk unit or other storage medium. Additionally applications can be in the form of electronic signals modulated in accordance with the application and data communication technology when accessed via network modem or interface .

Storage interface as with the other storage interfaces of computer system can connect to a standard computer readable medium for storage and or retrieval of information such as a fixed disk drive . Fixed disk drive may be a part of computer system or may be separate and accessed through other interface systems. Modem may provide a direct connection to a remote server via a telephone link or to the Internet via an internet service provider ISP . Network interface may provide a direct connection to a remote server via a direct network link to the Internet via a POP point of presence . Network interface may provide such connection using wireless techniques including digital cellular telephone connection Cellular Digital Packet Data CDPD connection digital satellite data connection or the like.

Many other devices or subsystems not shown may be connected in a similar manner e.g. document scanners digital cameras and so on . Conversely all of the devices shown in need not be present to practice the present disclosure. The devices and subsystems can be interconnected in different ways from that shown in . The operation of a computer system such as that shown in is readily known in the art and is not discussed in detail in this application. Code to implement the present disclosure can be stored in computer readable storage media such as one or more of system memory fixed disk optical disk or floppy disk . The operating system provided on computer system may be MS DOS MS WINDOWS OS 2 UNIX Linux or another known operating system.

Moreover regarding the signals described herein those skilled in the art will recognize that a signal can be directly transmitted from a first block to a second block or a signal can be modified e.g. amplified attenuated delayed latched buffered inverted filtered or otherwise modified between the blocks. Although the signals of the above described embodiment are characterized as transmitted from one block to the next other embodiments of the present disclosure may include modified signals in place of such directly transmitted signals as long as the informational and or functional aspect of the signal is transmitted between blocks. To some extent a signal input at a second block can be conceptualized as a second signal derived from a first signal output from a first block due to physical limitations of the circuitry involved e.g. there will inevitably be some attenuation and delay . Therefore as used herein a second signal derived from a first signal includes the first signal or any modifications to the first signal whether due to circuit limitations or due to passage through other circuit elements which do not change the informational and or final functional aspect of the first signal.

With reference to computer system modem network interface or some other method can be used to provide connectivity from each of client computer systems and to network . Client systems and are able to access information on storage server A or B using for example a web browser or other client software not shown . Such a client allows client systems and to access data hosted by storage server A or B or one of storage devices A N B N N or intelligent storage array . depicts the use of a network such as the Internet for exchanging data but the present disclosure is not limited to the Internet or any particular network based environment.

While the foregoing disclosure sets forth various embodiments using specific block diagrams flowcharts and examples each block diagram component flowchart step operation and or component described and or illustrated herein may be implemented individually and or collectively using a wide range of hardware software or firmware or any combination thereof configurations. In addition any disclosure of components contained within other components should be considered exemplary in nature since many other architectures can be implemented to achieve the same functionality.

The process parameters and sequence of steps described and or illustrated herein are given by way of example only and can be varied as desired. For example while the steps illustrated and or described herein may be shown or discussed in a particular order these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.

Furthermore while various embodiments have been described and or illustrated herein in the context of fully functional computing systems one or more of these exemplary embodiments may be distributed as a program product in a variety of forms regardless of the particular type of computer readable media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script batch or other executable files that may be stored on a computer readable storage medium or in a computing system. In some embodiments these software modules may configure a computing system to perform one or more of the exemplary embodiments disclosed herein.

The foregoing description for purpose of explanation has been described with reference to specific embodiments. However the illustrative discussions above are not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations are possible in view of the above teachings. The embodiments were chosen and described in order to best explain the principles of the present systems and methods and their practical applications to thereby enable others skilled in the art to best utilize the present systems and methods and various embodiments with various modifications as may be suited to the particular use contemplated.

Unless otherwise noted the terms a or an as used in the specification and claims are to be construed as meaning at least one of In addition for ease of use the words including and having as used in the specification and claims are interchangeable with and have the same meaning as the word comprising. 

