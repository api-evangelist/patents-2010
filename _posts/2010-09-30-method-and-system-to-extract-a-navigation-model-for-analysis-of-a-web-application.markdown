---

title: Method and system to extract a navigation model for analysis of a web application
abstract: In one embodiment, a method includes automated extraction of the Page Transition Graph (PTG) model for model-based analysis of web applications. Specifically, the method includes accessing one or more JAVASERVER PAGES (JSP) files, one or more Extensible Markup Language (XML) configuration files, and one or more class files of a web application; parsing the JSP files and extracting data in the JSP files that encode user or server events supported by the event-driven application; parsing the XML configuration files and extracting data in the XML configuration files that encode definitions used by the event-driven application when deployed; parsing the class files and extracting data in the class files that encode one or more actions or one or more forms used by the event-driven application when deployed; storing the extracted data as an abstract syntax tree (AST); populating a page transition graph (PTG) of the event-driven application based on the AST; and checking the extracted PTG for navigation errors such as unreachable pages, ghost pages and undefined transitions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08402319&OS=08402319&RS=08402319
owner: Fujitsu Limited
number: 08402319
owner_city: Kawasaki-shi
owner_country: JP
publication_date: 20100930
---
Quality assurance for applications particularly applications with graphical user interfaces GUIs or ones designed for use in connection with the World Wide Web is increasingly important. These applications are often difficult to test because they have large sets of possible user inputs. Current approaches to testing these applications include live subject testing capture replay unit testing crawling and model based testing. Live subject testing and capture replay approaches involve considerable manual work and require a tester to step through a set of use case scenarios while clicking on buttons and links and entering data into forms displayed through an interface such as a web browser supporting a web application. While these applications are often designed to constrain and guide a user through a set of scenarios the set of all possible user inputs may be too large for manual testing. Unit test cases are generally designed to validate or analyze one user event at a time and do not adequately address the validation or analysis of sequences of user events. Crawling techniques are typically designed to visit web pages automatically. However without user guidance such as for example the specification of user inputs crawlers may be unable to visit all possible pages of a web or other event driven application. Model based approaches generally rely on user specifications.

To analyze a web application it may be necessary to create 1 a driver to exercise the behavior of the web application and 2 stubs to simulate components that the web application may use but are out of the scope of the analysis. For example a driver may simulate user actions with respect to the web application and stubs may simulate a database used by the web application. Particular embodiments may generate a driver for a web application by employing a technique that involves 1 specifying an application specific Page Transition Graph PTG model with nodes corresponding to possible pages of the web application transitions corresponding to possible user and server events such as for example the selection of links or buttons on those pages event handlers and user data and 2 using an application independent driver to traverse the application specific PTG and generate sequences of user or server events allowed by the application specific PTG. This technique may facilitate the validation or analysis of navigation and business logic requirements of a web application. As an example and not by way of limitation U.S. patent application Ser. No. 12 751 982 filed 31 Mar. 2010 entitled GENERATING A DRIVER FOR ANALYSIS OF AN EVENT DRIVEN APPLICATION which is incorporated herein by reference for example purposes only and not by way of limitation discloses a method that includes specifying an application specific navigation model of an event driven application analyzing the navigation model with respect to one or more navigation requirements of the event driven application to determine whether the event driven application satisfies the navigation requirements generating one or more drivers for the event driven application based on the navigation model and traversing the navigation model with the application independent event drivers to analyze the event driven application with respect to one or more business logic requirements of the event driven application to determine whether the event driven application satisfies the business logic requirements.

Particular embodiments substantially automate the process of generating a driver by extracting the PTG specification from the implementation of the web application using static analysis. Particular embodiments automate PTG extraction for JAVA based web applications that encode their page transitions using JAVA SERVERPAGES JSP and Extensible Markup Language XML files. APACHE STRUTS or STRUTS based applications are an example of applications in this domain. There are two editions of STRUTS STRUTS1 and STRUTS2. Herein reference to STRUTS encompasses STRUTS1 STRUTS2 or both and vice versa where appropriate. Although this disclosure describes and illustrates STRUTS based applications this disclosure contemplates any suitable web applications. Herein reference to a web application encompasses any suitable event driven application where applicable.

STRUTS is an open source framework based on a Model View Controller MVC design pattern. The view portion is commonly represented by JSP which combine static information e.g. HTML XML with dynamic information e.g. JAVA as part of one or more JSP scriptlets . In particular embodiments the controller is represented by the STRUTS servlet controller which intercepts incoming user requests and sends them to appropriate event handlers according to action mappings information specified in the XML descriptor file usually called struts config.xml. In STRUTS the request handling classes are subclassed from the Action class in the org.apache.struts.action package. Their event handling method is called execute . Actions encapsulate calls to business logic classes interpret the outcome and dispatch control to the appropriate view component to create the response. Form population is supported by the ActionForm class which facilitates storing and validating user data.

To demonstrate this consider the following example called Registration. Registration allows users to register and login to their accounts followed by a logout. Registration encodes its page transitions using two XML files web.xml and struts congif.xml and six JSP pages index.jsp the initial page marked in the web.xml configuration file welcome.jsp userlogin.jsp loginsuccess.jsp userRegister.jsp and registerSuccess.jsp. The event handling part of Registration contains four Action classes and two ActionForm objects.

In particular embodiments PTG extraction has two steps 1 parsing JSP XML and JAVA files mining relevant information from them and storing the information in a convenient form such as an Abstract Syntax Tree AST and 2 building a PTG based on the mined information. In particular embodiments the parsing step mines information from 1 JSP files 2 XML configuration files and 3 class files that encode Action classes and ActionForm objects. These steps may occur in any suitable order as each step may take an empty or partially populated AST and update it based on the information available at that step. In particular embodiments the JSP mining step parses all JSP files of the web application. Each JSP page corresponds to a Page node in the AST. Each JSP file is scanned for information about possible user and server events encoded statically in JSP. shows encodings of example user or server events on the pages of Registration. In Registration index.jsp redirects to welcome the welcome.jsp page contains links back to itself to userRegister.jsp and to userlogin.jsp the userlogin.jsp page contains a reference to the userlogin action and loginsuccess.jsp contains a redirect to another page.

In particular embodiments to find references to possible user and server events the parsers need to know the types of encoding to track. illustrates example references or encodings to example user or server events in an example web application. They include link and form JSP HTML tags and attributes redirect tags and scriptlet keywords to track redirect and inclusion relationships e.g. one JSP page can include another and display forms and links available on the included page . These encodings allow the parsers to find references to possible user and server events and store them as part of AST Event nodes. Each AST Event stores information about its path which may be a reference to a next JSP page or an action defined in the XML configuration files. When the path refers to a URL or a file not related to a PTG e.g. an image the parsers may filter out such events based on the naming conventions.

In particular embodiments XML configuration files contain various definitions needed at deployment time. For example web.xml may contain information about naming conventions and initial pages whereas struts config.xml may contain action definitions. illustrates example snippets of files containing example definitions used by Registration when deployed. The web. xml file specifies that index.jsp is the initial page. Under url pattern definitions .do is used as a suffix when referencing some actions. This information is used to match the reference to Welcome.do with its definition Welcome available in struts config.xml. In particular embodiments the following describes at least in part the definition of the userlogin action referenced on the userlogin.jsp page 1 this is the form submission event taking UserLoginForm 2 an event handler of type UserLoginAction handles it and 3 the outcome of this event depends on whether the event handling code returns success or failure. In the case of success the next page is loginsuccess.jsp. In the case of failure the next page is userlogin.jsp. In this particular case the path of each outcome references a JSP page. In general it may reference another definition available in this or another XML configuration file.

In particular embodiments the XML parsers parse and store all the XML information as part of AST Definitions. Definitions describing form submission events require additional data used to populate ActionForm objects. This information can be mined from several sources including ActionForm classes themselves.

In particular embodiments a next step finds and loads all ActionForm classes of the web application. For each application form e.g. UserLoginForm it loads its class file and using reflection APIs finds all its fields e.g. userid and password. Using naming conventions each field can be set through a field specific setter method. For example setUserid String sets the userid field and setPassword String sets the password field. Thus after discovering field names particular embodiments can generate code that sets these fields to values that represent user values entered into the corresponding text fields. To generate user values this step may rely on values specified in a file e.g. based on symbolic execution that supports strings. In the absence of specifications in particular embodiments this step may generate default values e.g. common corner cases such as empty or non empty strings.

After the parsing step the PTG construction step takes the AST containing information about all JSP pages their possible user and server events and available XML definitions and populates the PTG. illustrates an example algorithm for constructing an example PTG. For each AST Page the algorithm creates a PTG Page Lines . Then for each reference to the user or server event available on each AST page Line the algorithm resolves the reference based on the encoded path of the event. If the path references a JSP page Line then a lookup mechanism is invoked to find that page Line . If the page is not found a new ghost page a page that is referenced but does not exist is created and set as a destination page of the event Lines . If the path does not reference a JSP page then it is looked up under the definitions Line . If the definition is not found the next page of the event is set to the special Undefined ghost page Line and the transition corresponding to this event is marked as an undefined transition. Otherwise the definition is used to resolve the possible destination pages of the event Line . Each definition updates the event according to its domain specific encoding e.g. the Action definitions from struts config.xml generate EventHandler objects according to the type information and calculate destination pages according to the information encoded in forwards. This part of the algorithm is recursive since a definition may reference other definitions. After the event construction is finished the event is added to its source page Line .

In particular embodiments by construction the approach extracts an overapproximation of the page transitions with respect to static JSP and XML encodings specified to the PTG generator. illustrates an example visualization of an example page transition portion of an example PTG extracted for Registration. The initial node is index. The node pages userlogin is a ghost node. In particular embodiments this node would be calculated when processing the response.sendRedirect event available on the loginsuccess.jsp page. This event refers to the . . . userlogin.jsp page which does not exist the correct path is userlogin.jsp. When accessing the loginsuccess.jsp page directly the server throws an exception with the requested resource not available message. In particular embodiments such errors may appear after refactoring or due to typos and are difficult to find using traditional testing techniques.

Particular embodiments may be implemented on one or more computer systems. illustrates an example computer system . In particular embodiments one or more computer systems perform one or more steps of one or more methods described or illustrated herein. In particular embodiments one or more computer systems provide functionality described or illustrated herein. In particular embodiments software running on one or more computer systems performs one or more steps of one or more methods described or illustrated herein or provides functionality described or illustrated herein. Particular embodiments include one or more portions of one or more computer systems .

This disclosure contemplates any suitable number of computer systems . This disclosure contemplates computer system taking any suitable physical form. As example and not by way of limitation computer system may be an embedded computer system a system on chip SOC a single board computer system SBC such as for example a computer on module COM or system on module SOM a desktop computer system a laptop or notebook computer system an interactive kiosk a mainframe a mesh of computer systems a mobile telephone a personal digital assistant PDA a server or a combination of two or more of these. Where appropriate computer system may include one or more computer systems be unitary or distributed span multiple locations span multiple machines or reside in a cloud which may include one or more cloud components in one or more networks. Where appropriate one or more computer systems may perform without substantial spatial or temporal limitation one or more steps of one or more methods described or illustrated herein. As an example and not by way of limitation one or more computer systems may perform in real time or in batch mode one or more steps of one or more methods described or illustrated herein. One or more computer systems may perform at different times or at different locations one or more steps of one or more methods described or illustrated herein where appropriate.

In particular embodiments computer system includes a processor memory storage an input output I O interface a communication interface and a bus . Although this disclosure describes and illustrates a particular computer system having a particular number of particular components in a particular arrangement this disclosure contemplates any suitable computer system having any suitable number of any suitable components in any suitable arrangement.

In particular embodiments processor includes hardware for executing instructions such as those making up a computer program. As an example and not by way of limitation to execute instructions processor may retrieve or fetch the instructions from an internal register an internal cache memory or storage decode and execute them and then write one or more results to an internal register an internal cache memory or storage . In particular embodiments processor may include one or more internal caches for data instructions or addresses. This disclosure contemplates processor including any suitable number of any suitable internal caches where appropriate. As an example and not by way of limitation processor may include one or more instruction caches one or more data caches and one or more translation lookaside buffers TLBs . Instructions in the instruction caches may be copies of instructions in memory or storage and the instruction caches may speed up retrieval of those instructions by processor . Data in the data caches may be copies of data in memory or storage for instructions executing at processor to operate on the results of previous instructions executed at processor for access by subsequent instructions executing at processor or for writing to memory or storage or other suitable data. The data caches may speed up read or write operations by processor . The TLBs may speed up virtual address translation for processor . In particular embodiments processor may include one or more internal registers for data instructions or addresses. This disclosure contemplates processor including any suitable number of any suitable internal registers where appropriate. Where appropriate processor may include one or more arithmetic logic units ALUs be a multi core processor or include one or more processors . Although this disclosure describes and illustrates a particular processor this disclosure contemplates any suitable processor.

In particular embodiments memory includes main memory for storing instructions for processor to execute or data for processor to operate on. As an example and not by way of limitation computer system may load instructions from storage or another source such as for example another computer system to memory . Processor may then load the instructions from memory to an internal register or internal cache. To execute the instructions processor may retrieve the instructions from the internal register or internal cache and decode them. During or after execution of the instructions processor may write one or more results which may be intermediate or final results to the internal register or internal cache. Processor may then write one or more of those results to memory . In particular embodiments processor executes only instructions in one or more internal registers or internal caches or in memory as opposed to storage or elsewhere and operates only on data in one or more internal registers or internal caches or in memory as opposed to storage or elsewhere . One or more memory buses which may each include an address bus and a data bus may couple processor to memory . Bus may include one or more memory buses as described below. In particular embodiments one or more memory management units MMUs reside between processor and memory and facilitate accesses to memory requested by processor . In particular embodiments memory includes random access memory RAM . This RAM may be volatile memory where appropriate Where appropriate this RAM may be dynamic RAM DRAM or static RAM SRAM . Moreover where appropriate this RAM may be single ported or multi ported RAM. This disclosure contemplates any suitable RAM. Memory may include one or more memories where appropriate. Although this disclosure describes and illustrates particular memory this disclosure contemplates any suitable memory.

In particular embodiments storage includes mass storage for data or instructions. As an example and not by way of limitation storage may include an HDD a floppy disk drive flash memory an optical disc a magneto optical disc magnetic tape or a Universal Serial Bus USB drive or a combination of two or more of these. Storage may include removable or non removable or fixed media where appropriate. Storage may be internal or external to computer system where appropriate. In particular embodiments storage is non volatile solid state memory. In particular embodiments storage includes read only memory ROM . Where appropriate this ROM may be mask programmed ROM programmable ROM PROM erasable PROM EPROM electrically erasable PROM EEPROM electrically alterable ROM EAROM or flash memory or a combination of two or more of these. This disclosure contemplates mass storage taking any suitable physical form. Storage may include one or more storage control units facilitating communication between processor and storage where appropriate. Where appropriate storage may include one or more storages . Although this disclosure describes and illustrates particular storage this disclosure contemplates any suitable storage.

In particular embodiments I O interface includes hardware software or both providing one or more interfaces for communication between computer system and one or more I O devices. Computer system may include one or more of these I O devices where appropriate. One or more of these I O devices may enable communication between a person and computer system . As an example and not by way of limitation an I O device may include a keyboard keypad microphone monitor mouse printer scanner speaker still camera stylus tablet touch screen trackball video camera another suitable I O device or a combination of two or more of these. An I O device may include one or more sensors. This disclosure contemplates any suitable I O devices and any suitable I O interfaces for them. Where appropriate I O interface may include one or more device or software drivers enabling processor to drive one or more of these I O devices. I O interface may include one or more I O interfaces where appropriate. Although this disclosure describes and illustrates a particular I O interface this disclosure contemplates any suitable I O interface.

In particular embodiments communication interface includes hardware software or both providing one or more interfaces for communication such as for example packet based communication between computer system and one or more other computer systems or one or more networks. As an example and not by way of limitation communication interface may include a network interface controller NIC or network adapter for communicating with an Ethernet or other wire based network or a wireless NIC WNIC or wireless adapter for communicating with a wireless network such as a WI FI network. This disclosure contemplates any suitable network and any suitable communication interface for it. As an example and not by way of limitation computer system may communicate with an ad hoc network a personal area network PAN a local area network LAN a wide area network WAN a metropolitan area network MAN or one or more portions of the Internet or a combination of two or more of these. One or more portions of one or more of these networks may be wired or wireless. As an example computer system may communicate with a wireless PAN WPAN such as for example a BLUETOOTH WPAN a WI FI network a WI MAX network a cellular telephone network such as for example a Global System for Mobile Communications GSM network or other suitable wireless network or a combination of two or more of these. Computer system may include any suitable communication interface for any of these networks where appropriate. Communication interface may include one or more communication interfaces where appropriate. Although this disclosure describes and illustrates a particular communication interface this disclosure contemplates any suitable communication interface.

In particular embodiments bus includes hardware software or both coupling components of computer system to each other. As an example and not by way of limitation bus may include an Accelerated Graphics Port AGP or other graphics bus an Enhanced Industry Standard Architecture EISA bus a front side bus FSB a HYPERTRANSPORT HT interconnect an Industry Standard Architecture ISA bus an INFINIBAND interconnect a low pin count LPC bus a memory bus a Micro Channel Architecture MCA bus a Peripheral Component Interconnect PCI bus a PCI Express PCI X bus a serial advanced technology attachment SATA bus a Video Electronics Standards Association local VLB bus or another suitable bus or a combination of two or more of these. Bus may include one or more buses where appropriate. Although this disclosure describes and illustrates a particular bus this disclosure contemplates any suitable bus or interconnect.

Herein reference to a computer readable storage medium encompasses one or more non transitory tangible computer readable storage media possessing structure. As an example and not by way of limitation a computer readable storage medium may include a semiconductor based or other integrated circuit IC such as for example a field programmable gate array FPGA or an application specific IC ASIC a hard disk an HDD a hybrid hard drive HHD an optical disc an optical disc drive ODD a magneto optical disc a magneto optical drive a floppy disk a floppy disk drive FDD magnetic tape a holographic storage medium a solid state drive SSD a RAM drive a SECURE DIGITAL card a SECURE DIGITAL drive or another suitable computer readable storage medium or a combination of two or more of these where appropriate. Herein reference to a computer readable storage medium excludes any medium that is not eligible for patent protection under 35 U.S.C. 101. Herein reference to a computer readable storage medium excludes transitory forms of signal transmission such as a propagating electrical or electromagnetic signal per se to the extent that they are not eligible for patent protection under 35 U.S.C. 101. A computer readable non transitory storage medium may be volatile non volatile or a combination of volatile and non volatile where appropriate.

This disclosure contemplates one or more computer readable storage media implementing any suitable storage. In particular embodiments a computer readable storage medium implements one or more portions of processor such as for example one or more internal registers or caches one or more portions of memory one or more portions of storage or a combination of these where appropriate. In particular embodiments a computer readable storage medium implements RAM or ROM. In particular embodiments a computer readable storage medium implements volatile or persistent memory. In particular embodiments one or more computer readable storage media embody software. Herein reference to software may encompass one or more applications bytecode one or more computer programs one or more executables one or more instructions logic machine code one or more scripts or source code and vice versa where appropriate. In particular embodiments software includes one or more application programming interfaces APIs . This disclosure contemplates any suitable software written or otherwise expressed in any suitable programming language or combination of programming languages. In particular embodiments software is expressed as source code or object code. In particular embodiments software is expressed in a higher level programming language such as for example C Perl or a suitable extension thereof. In particular embodiments software is expressed in a lower level programming language such as assembly language or machine code . In particular embodiments software is expressed in JAVA. In particular embodiments software is expressed in Hyper Text Markup Language HTML Extensible Markup Language XML or other suitable markup language.

Network environment includes a network coupling one or more servers and one or more clients to each other. In particular embodiments network is an intranet an extranet a virtual private network VPN a LAN a wireless LAN WLAN a WAN a MAN a communications network a satellite network a portion of the Internet or another network or a combination of two or more such networks . This disclosure contemplates any suitable network .

One or more links couple servers or clients to network . In particular embodiments one or more links each includes one or more wired wireless or optical links . In particular embodiments one or more links each includes an intranet an extranet a VPN a LAN a WLAN a WAN a MAN a communications network a satellite network a portion of the Internet or another link or a combination of two or more such links . This disclosure contemplates any suitable links coupling servers and clients to network .

In particular embodiments each server may be a unitary server or may be a distributed server spanning multiple computers or multiple datacenters. Servers may be of various types such as for example and without limitation web server news server mail server message server advertising server file server application server exchange server database server or proxy server. In particular embodiments each server may include hardware software or embedded logic components or a combination of two or more such components for carrying out the appropriate functionalities implemented or supported by server . For example a web server is generally capable of hosting websites containing web pages or particular elements of web pages. More specifically a web server may host HTML files or other file types or may dynamically create or constitute files upon a request and communicate them to clients in response to HTTP or other requests from clients . A mail server is generally capable of providing electronic mail services to various clients . A database server is generally capable of providing an interface for managing data stored in one or more data stores.

In particular embodiments each client may be an electronic device including hardware software or embedded logic components or a combination of two or more such components and capable of carrying out the appropriate functionalities implemented or supported by client . For example and without limitation a client may be a desktop computer system a notebook computer system a netbook computer system a handheld electronic device or a mobile telephone. A client may enable a network user at client to access network . A client may have a web browser such as Microsoft Internet Explorer or Mozilla Firefox and may have one or more add ons plug ins or other extensions such as Google Toolbar or Yahoo Toolbar. A client may enable its user to communicate with other users at other clients . This disclosure contemplates any suitable clients .

In particular embodiments one or more data storages may be communicatively linked to one or more servers via one or more links . In particular embodiments data storages may be used to store various types of information. In particular embodiments the information stored in data storages may be organized according to specific data structures. Particular embodiments may provide interfaces that enable servers or clients to manage e.g. retrieve modify add or delete the information stored in data storage .

In particular embodiments a server may include a search engine . Search engine may include hardware software or embedded logic components or a combination of two or more such components for carrying out the appropriate functionalities implemented or supported by search engine . For example and without limitation search engine may implement one or more search algorithms that may be used to identify network resources in response to the search queries received at search engine one or more ranking algorithms that may be used to rank the identified network resources one or more summarization algorithms that may be used to summarize the identified network resources and so on. The ranking algorithms implemented by search engine may be trained using the set of the training data constructed from pairs of search query and clicked URL.

In particular embodiments a server may also include a data monitor collector . Data monitor collection may include hardware software or embedded logic components or a combination of two or more such components for carrying out the appropriate functionalities implemented or supported by data collector collector . For example and without limitation data monitor collector may monitor and collect network traffic data at server and store the collected network traffic data in one or more data storage . The pairs of search query and clicked URL may then be extracted from the network traffic data.

Herein or is inclusive and not exclusive unless expressly indicated otherwise or indicated otherwise by context. Therefore herein A or B means A B or both unless expressly indicated otherwise or indicated otherwise by context. Moreover and is both joint and several unless expressly indicated otherwise or indicated otherwise by context. Therefore herein A and B means A and B jointly or severally unless expressly indicated otherwise or indicated otherwise by context.

This disclosure encompasses all changes substitutions variations alterations and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend. Similarly where appropriate the appended claims encompass all changes substitutions variations alterations and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend. Moreover reference in the appended claims to an apparatus or system or a component of an apparatus or system being adapted to arranged to capable of configured to enabled to operable to or operative to perform a particular function encompasses that apparatus system component whether or not it or that particular function is activated turned on or unlocked as long as that apparatus system or component is so adapted arranged capable configured enabled operable or operative.

