---

title: Opportunistic page caching for virtualized servers
abstract: A system described herein includes a receiver component that receives an indication that at least one page in virtual memory is free and the at least one page in virtual memory is classified as short-lived memory, wherein the virtual memory is accessible to at least one virtual machine executing on a computing device. The system also includes a cache updater component that dynamically updates a cache to include the at least one page, wherein the cache is accessible to the at least one virtual machine.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09110806&OS=09110806&RS=09110806
owner: Microsoft Technology Licensing, LLC
number: 09110806
owner_city: Redmond
owner_country: US
publication_date: 20100310
---
Virtualization refers to the hiding of physical characteristics of a computing platform from users and instead showing the users another computing platform that is abstracted from the physical characteristics. Generally platform virtualization is performed on a given hardware platform by host software which is often referred to as a root virtual machine. This root virtual machine can create a simulated computer environment for guest programs which are often referred to as child virtual machines. These child virtual machines may be applications complete operating systems etc.

Virtualization is quickly emerging as a critical technology for enterprise and cloud computing systems. Deploying workloads into virtual machines provides multiple benefits including fault isolation between consolidated workloads and improved manageability through features such as live migration.

Generally it is desirable to consolidate numerous virtual machines onto physical servers for improved resource utilization and power efficiency. To accomplish consolidation of virtual machines onto a server for example memory and processing capabilities must be allocated amongst virtual machines on the server. With respect to memory management one method for allocating memory to virtual machines is to provide static memory allotments to each virtual machine where memory is allocated to each virtual machine conservatively based upon worst case usage of memory of the virtual machines. It can be ascertained however that this can severely limit the ability to consolidate virtual machines on the server. For example resource requirements of virtual machines may fluctuate significantly over time.

Another mechanism for allocating memory is referred to as memory balancing. In memory balancing a dynamic memory manager is utilized to cause memory to be dynamically allocated between virtual machines such that when one virtual machine is experiencing low resource requirements another can be provisioned with resources that meet high demand phases. Memory balancing can allow for improved consolidation of virtual machines by removing the need for conservatively allocating memory based on worst case scenarios. In conventional memory balancing techniques however second level paging is sometimes required when memory is overcommitted to virtual machines. That is the virtual machines must write data to disk rather than writing data to memory which may cause virtual machines to generate numerous faults thereby negatively affecting performance of the server.

The following is a brief summary of subject matter that is described in greater detail herein. This summary is not intended to be limiting as to the scope of the claims.

Described herein are various technologies pertaining to provisioning caches in virtualized servers wherein such caches are opportunistic and include pages from virtual memories that are categorized as short lived pages. Short lived pages can be defined as pages that can unpredictably be re allocated across virtual machines over a relatively small time frame. In contrast long lived memory can be defined as pages where availability of the memory is only affected by infrequent events such as hardware failures. Thus an example of short lived memory may be memory made available by way of content based page sharing. With page sharing identical pages utilized by child virtual machines can be backed by a single physical memory page thereby providing additional free memory that can be allocated to other virtual machines. Another example of short lived memory may be memory that is zeroed out by one or more virtual machines e.g. a virtual machine indicates that it is not currently using such memory . In still yet another example in disaggregated memory systems a server may temporarily expose idle memory to remote servers across the network. This temporarily exposed memory can be classified as short lived memory since it may be desirably utilized by a virtual machine with relatively little notice.

Therefore memory can be categorized as being short lived or long lived and an opportunistic cache can be provisioned that comprises short lived memory. In an example the cache is opportunistic in that when short lived memory is available such short lived memory can be exploited to cache data for virtual machines executing on a server to reduce input output overhead that corresponds to reading to and from disk. If no pages are available in the cache the virtual machines can revert to conventional behavior. The cache described herein may be a lossy cache since data in a cache is destroyed when a short lived page dies. For example if content based page sharing is occurring between virtual machines and one of the virtual machines makes a write to such page then a copy of the page must be generated and provided to the virtual machine. In this case data in short lived memory dies as the memory created through utilization of content based page sharing is being requested by the virtual machine. Accordingly the cache described herein can be used by virtual machines in a write through manner so that for instance data can be retrieved from other storage locations such data is unable to be retrieved from the cache.

Pursuant to an example the opportunistic cache can be based in a hypervisor executing on the server. Of course other implementations are also contemplated. For example a cache described herein may be managed at least in part by a root virtual machine through separate control software in a child guest virtual machine etc.

Other aspects will be appreciated upon reading and understanding the attached figures and description.

Various technologies pertaining to provisioning an opportunistic cache on a virtualized server will now be described with reference to the drawings where like reference numerals represent like elements throughout. In addition several functional block diagrams of example systems are illustrated and described herein for purposes of explanation however it is to be understood that functionality that is described as being carried out by certain system components may be performed by multiple components. Similarly for instance a component may be configured to perform functionality that is described as being carried out by multiple components.

With reference to an example system that facilitates provisioning an opportunistic cache through classification of virtual memory as being short lived or long lived is illustrated. The system includes a plurality of virtual machines that are executing on a computing device. As will be understood by one of ordinary skill in the art a virtual machine is a software implementation of a computer that can execute instructions such as a real machine. Numerous virtual machines can execute on a single computing device wherein including numerous virtual machines on a computing device can be referred to as consolidation. The virtual machines may include for example a root virtual machine that is configured to manage execution of numerous child virtual machines guests on the computing device. Thus the plurality of virtual machines may also include one or more child virtual machines. In an embodiment a server or data center may comprise the virtual machines . In another embodiment a personal computing device such as a desktop computer a laptop computer a mobile telephone etc. may comprise the plurality of virtual machines .

The system further comprises a virtual memory that is accessible to the plurality of virtual machines . The virtual memory comprises a plurality of pages wherein a page is a block of virtual memory of a certain size. The virtual memory is backed by physical memory not shown . As indicated above it is often desirable to allow multiple virtual machines to execute on a computing device. When multiple virtual machines are executing on a computing device resources such as the virtual memory are selectively allocated to the virtual machines to allow for consolidation of such virtual machines . Because there are a finite number of pages in the virtual memory the pages in the virtual memory are desirably allocated in such a manner that one or more of the virtual machines executing on the computing device are not associated with second level paging. As described in detail below pages in the virtual memory can be classified as short lived pages or long lived pages and pages classified as being short lived can be utilized in a cache that is accessible to the virtual machines . As used herein long lived memory can refer to pages in the virtual memory whose availability is affected by infrequent events such as hardware failures. Short lived memory can refer to pages in the virtual memory that can disappear from the system unpredictably across a relatively small time scale.

An example of short lived memory is memory made available by way of content based page sharing. In content based page sharing two or more virtual machines can share pages that comprise identical content. Thus rather than dedicating one page that includes content to a first virtual machine and a second page with the same content to a second virtual machine the pages with the identical content are shared amongst the virtual machines. If however one of the virtual machines writes to a page that is being shared with at least one other virtual machine then the free memory previously made available needs to be provided to one of the virtual machines. Another example of short lived memory may be idle memory in a disaggregated memory system. In still yet another example of short lived memory a virtual machine can zero out a page that has been allocated to such virtual machine. That is the virtual machine can indicate that for the time being the virtual machine does not need such page the virtual machine does not need the resources of the virtual memory allocated to such virtual machine . If however demand on the virtual machine increased such virtual machine may need to quickly reacquire a zeroed out page.

The system further comprises a classifier component that can monitor the virtual memory and or activities of the virtual machines to classify pages in the virtual memory as being short lived or long lived. The classifier component may use any suitable technique for identifying pages in the virtual memory that are short lived. For instance the classifier component can scan threads output by one or more of the virtual machines to detect shareable pages. In another example the classifier component can analyze contents of the virtual memory to locate zeroed out pages. Thus the classifier component can use any suitable technique in connection with classifying pages of the virtual memory as being short lived or long lived.

A receiver component can be in communication with the classifier component and can receive an indication that at least one page in the virtual memory is free and that the at least one page in the virtual memory is classified as short lived memory.

The system further comprises a cache updater component that is in communication with the receiver component . The cache updater component dynamically updates an opportunistic cache to include one or more pages that have been classified by the classifier component as being short lived wherein the cache is accessible to the virtual machines . With more detail pertaining to the cache such cache can be a lossy cache since data in pages in the cache can be destroyed when a short lived page dies. Therefore the virtual machines can employ the cache in a write through manner such that for example data can be retrieved from another storage location if such data cannot be retrieved from the cache .

As will be described in greater detail below the virtual machines can be configured with functionality that allows such virtual machines to write data to pages in the cache read data from pages in the cache and or evict data from pages in the cache by way of the cache updater component . Furthermore the cache updater component can remove virtual memory from the cache if and when short lived memory dies. In an embodiment the cache can be a write through cache and pages from such cache can be repurposed in relatively short amounts of time without having to request return of such pages from the virtual machines that are utilizing the cache . Thus the cache may be restricted to including pages whose contents can be recreated by the virtual machine that submitted one or more pages to the cache. In an example clean pages from a file system can be stored in the cache pages written to a pagefile can be stored in the cache or data that can be computationally regenerated can be stored in the cache . Therefore the cache can appear to operating systems in child virtual machines utilizing the cache as a write through cache of indeterminate size. Techniques pertaining to utilizing the cache reading to the cache writing to the cache evicting data from the cache will be described in greater detail below.

The system may further optionally include a compressor component that can compress data written to the cache by one or more of the virtual machines by way of the cache updater component for additional savings in memory. The compressor component may utilize any suitable compression technique when compressing data to be placed in the cache . Additionally the compressor component can comprise decompression algorithms to decompress data read from the cache by one or more virtual machines . Pursuant to an example the compressor component can selectively compress data written to the cache based upon a predicted frequency of access of the data in the cache . Therefore data that is predicted to be accessed frequently may be placed in the cache in an uncompressed manner while data in the cache that is predicted to be accessed less frequently can be compressed by the compressor component .

With reference now to an example system that facilitates provisioning of an opportunistic cache based at least in part upon classification of pages of virtual memory as being short lived is illustrated. The system comprises the plurality of virtual machines that access the cache by way of the cache updater component . In an embodiment the cache updater component may be included in a hypervisor executing on the computing device. In another example the cache updater component may be included in a root virtual machine that is in communication with the hypervisor. In yet another embodiment portions of the cache updater component may be distributed between the hypervisor the root virtual machine and or one or more child virtual machines.

The cache updater component can comprise a plurality of components that facilitate utilization of such cache by the virtual machines . Components described as being in the cache updater component may be configured to ensure that there are no data persistency issues with respect to the cache such that a thread from one virtual machine is not submitting an update to a certain portion of the cache while another thread is reading from the certain portion of the cache . Thus the cache updater component can be configured to handle race conditions and other suitable issues.

While the components are shown as being included in the cache updater component it is to be understood that callers to the cache may be expected to handle certain error conditions. Specifically the virtual machines may be configured with components that correspond to the components shown in the cache updater component . Pursuant to an example these components may be application programming interfaces APIs that are configured to add retrieve and evict pages from the cache . Specifically the virtual machines can be configured with APIs that allow such virtual machines to request that data be written to read from and or evicted from the cache. Furthermore the virtual machines can be configured with functionality for handling errors. For instance in some cases the cache updater component may fail to add a page to the cache as requested by one of the virtual machines . In another example the cache updater component may fail to obtain a page from the cache even though the page was previously added successfully to the cache . The virtual machines can be equipped with interfaces APIs to handle such failures. Through such interfaces the cache can be utilized to cache any data that can be recreated if a retrieve operation fails. Thus for example the cache updater component can be employed to cache data written to a pagefile by one of the virtual machines . For instance when a server is under memory pressure a dynamic memory manager may have little flexibility to manage resources and guests may be likely to page out data to a page file. To handle the error cases outlined above failure to add data to a cache or failure to obtain data from the cache the virtual machines can be configured to write contents of a page to the pagefile prior to adding the contents of the page to the cache . Similarly when a page is desirably read in from the pagefile the virtual machines can issue an input output request to the pagefile only if the page was not previously added to the cache or could not be retrieved from the cache . Further the virtual machines can be configured to evict pages from the cache if desired.

The cache updater component may be configured to handle calls to add data to retrieve data from or evict data from the cache from the virtual machines . Specifically the cache updater component may comprise an add page component . If the cache updater component receives a request to add a page to the cache from one of the virtual machines the add page component can cause such data to be placed in the cache . Specifically in an example the cache updater component retrieve data that is desirably added to the cache by the virtual machine that generated the request to add the data to the cache . In a particular example a virtual machine may output a page write request that includes data that can be utilized to allow an API to complete a request asynchronously or synchronously and identifies a page or pages that are to be copied and placed in the cache . This data can also be utilized in page read requests and or evict page requests to identify a page or plurality of pages to be read from the cache or evicted from the cache synchronously or asynchronously.

The cache updater component may further comprise a retrieve page component that can be utilized to retrieve data from the cache and provide such data to a virtual machine that is requesting the data. Specifically a virtual machine can generate a request to read data from the cache wherein the request comprises a key and a completion context. The retrieve page component may then access the cache and provide the calling virtual machine with the requested data.

The cache updater component may also include an evict page component that is configured to receive a request to evict data from the cache from one or more of the virtual machines and cause such data to be evicted from the cache . For example a virtual machine may initiate a page evict command wherein such command includes a key and a number of pages to be evicted from the cache . The evict page component may access the cache and evict pages that correspond to the key submitted by the virtual machine.

Using the add page component the retrieve page component and the evict page component and corresponding components in the virtual machines a virtual machine can utilize the cache to cache data that can be recreated if a retrieve data request fails. With the components described above an operating system executing in one of the virtual machines can use the cache to cache page file data. The cache updater component further comprises a fault handler component that can handle faults caused by for instance a virtual machine attempting to write to a shared page in virtual memory. When the virtual machine attempts to write to the shared page a fault is generated and received by the fault handler component . The fault may be generated for instance by a root virtual machine or a child virtual machine. The fault handler component can access the cache and repurpose a page in the cache generate a copy of contents of such page that was attempted to be written to by the virtual machine and provide such copy to the faulting virtual machine. While handling the fault the fault handler component need not request memory from a guest virtual machine but can instead simply repurpose one or more pages in the cache .

The cache updater component may additionally include an add memory component that can add pages to the cache if pages in virtual memory are identified as short lived by the classifier component . In other words when additional short lived memory is added to the system the add memory component can increase the size of the cache by adding the short lived memory to such cache . Conversely the cache updater component can include a remove memory component that can be configured to remove memory from the cache if short lived memory dies in the system. That is if short lived memory disappears from the system the removed memory component can reduce the size of the cache by removing pages therefrom. Since the cache can operate as a write through cache no data is permanently lost.

The cache updater component can further include cache management policies . Such policies can include details pertaining to how the cache is to be shared between multiple virtual machines and how portions of the cache pertaining to a certain virtual machine are to be managed. The cache management policies can include priority data that indicates which virtual machine has priority to certain portions of the cache amongst other virtual machines.

Referring now to an example system that facilitates provisioning an opportunistic cache through classification of memory as being short lived or long lived is illustrated. The system comprises a root virtual machine executing on a computing device such as a server. The root virtual machine can act as a manager or a control program with respect to child virtual machines. The system further comprises a plurality of child virtual machines that are executing on the computing device and are managed by the root virtual machine . A hypervisor acts as a module that allows virtualization to occur on the computing device. In this example embodiment the cache updater component is included in the hypervisor . As indicated above the cache updater component can be utilized in connection with controlling access to the cache .

In this example embodiment the root virtual machine comprises the classifier component . Thus the root virtual machine can be configured to move short lived memory to and from the cache by way of the hypervisor . Specifically the classifier component can detect that page sharing is occurring between the child virtual machines and can output an indication that memory can be added to the cache . The hypervisor can receive such indication and the cache updater component can add memory to the cache .

Each of the child virtual machines can comprise a command component . Pursuant to an example the command component can be or include an interface API that allows the child virtual machines to output requests to write to a page in the cache read from a page in the cache or evict pages from the cache . For example the command component can be configured with APIs that allow the child virtual machines to generate such commands.

Each of the child virtual machines may also comprise a caller component . The caller component can be configured to generate hypercalls that are to be transmitted to the hypervisor wherein such hypercalls are initiated upon the command component offering an indication that the child virtual machines wish to write to read from or evict data from the cache .

As indicated above the hypervisor can comprise the cache updater component . The hypervisor can be configured to support hypercalls to add and remove memory from the cache and to support read write and evict operations on the data cached in the cache . In an example when memory freed from page sharing is submitted to the cache updater component the hypervisor can be configured to handle a fault incurred by a guest operating system executing in a virtual machine by repurposing a page from the cache to provide a copy to the faulting child virtual machine.

It is to be understood that the embodiment shown in is an exemplary embodiment and other configurations are contemplated by the inventors and are intended to fall under the scope of the hereto appended claims. For example portions of the cache updater component may be included in the root virtual machine and or in the child virtual machines . In another example the classifier component may be included in the hypervisor and or distributed across child virtual machines .

With reference now to various example methodologies are illustrated and described. While the methodologies are described as being a series of acts that are performed in a sequence it is to be understood that the methodologies are not limited by the order of the sequence. For instance some acts may occur in a different order than what is described herein. In addition an act may occur concurrently with another act. Furthermore in some instances not all acts may be required to implement a methodology described herein.

Moreover the acts described herein may be computer executable instructions that can be implemented by one or more processors and or stored on a computer readable medium or media. The computer executable instructions may include a routine a sub routine programs a thread of execution and or the like. Still further results of acts of the methodologies may be stored in a computer readable medium displayed on a display device and or the like.

Referring now to a methodology that facilitates updating an opportunistic cache based at least in part upon a characterization of virtual memory as being short lived is illustrated. The methodology begins at and at at least one page in virtual memory is classified as being short lived. For example the virtual memory may be resident on a computing device that executes at least one virtual machine wherein the virtual memory is accessible to the virtual machine.

At a cache is dynamically updated based at least in part upon the characterization of the at least one page in the virtual memory as being short lived memory. The virtual machine may then utilize the cache by writing data to the cache reading data from the cache and or evicting data from the cache. The methodology completes at .

Turning now to the example methodology that facilitates causing data to be read from written to or evicted from a cache is illustrated. The methodology starts at and at an opportunistic cache is provided in a virtual server. As described above the opportunistic cache comprises pages that are deemed to be short lived pages e.g. pages that are freed due to page sharing by virtual machines that are executing on a computing device .

At a request to read data from write data to or evict data from at least one page in the cache is received from a child virtual machine that desirably utilizes the cache. At data is caused to be read from written to or evicted from the at least one page in the cache in accordance with the request generated by the child virtual machine a guest operating system executing in the child virtual machine . The methodology completes at .

Now referring to a high level illustration of an example computing device that can be used in accordance with the systems and methodologies disclosed herein is illustrated. For instance the computing device may be used in a system that supports provisioning an opportunistic cache in a server that includes a plurality of virtual machines wherein the opportunistic cache is made up of short lived memory. In another example at least a portion of the computing device may be used in a system that supports writing data to reading data from or evicting data from the aforementioned cache. The computing device includes at least one processor that executes instructions that are stored in a memory . The memory may be or include RAM ROM EEPROM Flash memory or other suitable memory. The instructions may be for instance instructions for implementing functionality described as being carried out by one or more components discussed above or instructions for implementing one or more of the methods described above. The processor may access the memory by way of a system bus . In addition to storing executable instructions the memory may also store page file data for example.

The computing device additionally includes a data store that is accessible by the processor by way of the system bus . The data store may be or include any suitable computer readable storage including a hard disk memory DVD CD etc. The data store may include executable instructions page files that are to be copied to the cache etc. The computing device also includes an input interface that allows external devices to communicate with the computing device . For instance the input interface may be used to receive instructions from an external computer device from an individual etc. The computing device also includes an output interface that interfaces the computing device with one or more external devices. For example the computing device may display text images etc. by way of the output interface .

Additionally while illustrated as a single system it is to be understood that the computing device may be a distributed system. Thus for instance several devices may be in communication by way of a network connection and may collectively perform tasks described as being performed by the computing device .

As used herein the terms component and system are intended to encompass hardware software or a combination of hardware and software. Thus for example a system or component may be a process a process executing on a processor or a processor. Additionally a component or system may be localized on a single device or distributed across several devices. Furthermore a component or system may refer to a portion of memory and or a series of transistors.

It is noted that several examples have been provided for purposes of explanation. These examples are not to be construed as limiting the hereto appended claims. Additionally it may be recognized that the examples provided herein may be permutated while still falling under the scope of the claims.

