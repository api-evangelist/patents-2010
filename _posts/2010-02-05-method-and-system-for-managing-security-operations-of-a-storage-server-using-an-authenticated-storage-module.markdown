---

title: Method and system for managing security operations of a storage server using an authenticated storage module
abstract: The present invention provides a technique, in a network storage system, for a key management module (KMM) managing security operations within the storage server using an authenticated storage module (ASM) such as a smart card of the storage server. The KMM may process encryption key information (key information) generated by an encryption engine of the storage server to associate a key with a storage object of the storage server. The processed key information may then be stored by the KMM to a key map of the ASM, for which the ASM performs security services prior to storing information to the key map. The KMM may then request key information stored in the key map from the ASM, and forward the key information to the encryption engine for performing cryptographic operations on data of the storage object.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08719923&OS=08719923&RS=08719923
owner: NetApp, Inc.
number: 08719923
owner_city: Sunnyvale
owner_country: US
publication_date: 20100205
---
The present invention relates to storage systems and more particularly to a key management module managing security operations within the storage server using an authenticated storage module of the storage server.

A storage server is a computer that provides access to information data that is stored on one or more storage devices connected to the storage server such as disk drives disks flash devices or storage arrays. Each storage device may constitute a physical storage object of the storage server on which information is stored. The storage server also includes an operating system that may implement a storage abstraction layer to logically organize the information as logical storage objects on the physical storage objects e.g. disks . With certain logical organizations the storage abstraction layer may involve a file system which organizes information as a hierarchical structure of directories and data containers such as files. Each file may be implemented as set of data structures e.g. disk blocks configured to store information such as the actual data for the file. The file system typically organizes such data blocks as a logical volume whereby each directory file and logical volume may constitute a logical storage object. With certain logical organizations a file system may also constitute a logical storage object.

A storage server may be configured to operate according to a client server model of information delivery to allow one or more clients access to data in logical storage objects e.g. logical volumes stored on the storage server. In this model the client may comprise an application executing on a computer that connects to the storage server over a computer network such as a point to point link shared local area network wide area network or virtual private network implemented over a public network such as the Internet. A client may access the logical volumes by submitting access requests to the storage server for example a write request to store client data included in a request to disk or a read request to retrieve client data from disk.

Multiple storage servers may be networked or otherwise connected together as a storage system whereby data are securely stored by the storage servers to protect against possible unauthorized access to such data. To that end data may be secured by a storage server transforming unencrypted data cleartext into encrypted data ciphertext destined for storage on the storage system. The transformation may be performed using an encryption key also referred to as a key which is a code or number that when taken together with an encryption algorithm defines a unique transformation used to encrypt or decrypt data. Storage containing encrypted data may thus be referred to as secure storage since data is not stored in its native form but rather in encrypted form. Secure storage may be implemented by encrypting data prior to being written to storage and decrypting data upon being read from storage.

To provide further security against unauthorized access each of the storage objects constituting secure storage e.g. logical volumes disks may be associated with its own encryption key for securing data of the storage object. As a result logical access to data of the storage objects may be limited in the event one of the keys is subject to unauthorized access. An encryption key may also be associated with yet another encryption key referred to as a passphrase which may be used to encrypt or decrypt the encryption key for added security when the encryption key itself is being stored. In order to track the associations mappings between the various keys and storage objects a technique for managing key information may be implemented to coordinate the use of the keys with data of the storage objects or with other encrypted keys.

With conventional storage systems security operations involving cryptographic and key management tasks may be performed by and coordinated between dedicated processing systems networked or otherwise connected to the storage server. This configuration avoids the need for critical security operations to compete for resources of a single processing system when securing data of the storage server. One such exemplary configuration may involve a storage server connected to a cryptographic processing system such as a DataFort appliance offered by NetApp Inc. of Sunnyvale Calif. which receives cleartext and encrypted data from the storage server and returns encrypted and cleartext data to the storage server. In contrast a key manager such as a Lifetime Key Management appliance also offered by NetApp Inc. may be operative to store the keys and respond to key requests from the cryptographic processing system.

A primary concern with the conventional configuration involves however the overhead associated with providing and managing the various processing systems to secure data of the storage server. Establishing a secure connection to avoid unintended exposure of information across the network or connection port between the dedicated processing systems may also require special expertise or skills by an administrator of the storage server. For instance a secure connection may typically be achieved by carrying out a complex exchange of information between the various systems to ensure an authorized user is interfacing with each of the systems. In addition it may be cumbersome to access the dedicated and possibly remote system each time a cryptographic operation is performed or key information is otherwise requested by the storage server. This may involve tying up limited system resources such as network bandwidth and slowing down storage system performance to delay servicing of access requests from a client.

Finally in certain cases the administrator may need to implement additional security measures to further ensure the security of data stored by the storage server. When security measures are carried out by a system configuration involving separate processing systems the administrator must manually invoke the operations at the various systems which may be a burdensome task on the part of the administrator. Manual invocation of such tasks may further involve delay in implementing potentially critical security measures.

Embodiments of the present invention provide a technique in a network storage system for a key management module KMM managing security operations within the storage server using an authenticated storage module ASM implemented as a smart card for example of the storage server. The KMM may process encryption key information key information generated by an encryption engine of the storage server to associate a key with a storage object of the storage server. The processed key information may then be stored by the KMM to a data structure such as a key map of the ASM for which the ASM performs security services prior to storing information to the key map. The KMM may then request key information stored in the key map from the ASM and forward the key information to the encryption engine for performing cryptographic operations on data of the storage object.

Advantageously the KMM may be operative to further secure data of the storage server by invoking a security operation based on a state of the ASM. The administrator may request the security operation by engaging a switch disposed on the external housing of the storage server. The security operation may for instance involve a shredding operation which overwrites data of the storage object or generates a new key for the storage object. A state of the ASM may include a connected state for instance constituting successful authentication of identities of the storage server and administrator. Based on successful authentication the KMM may retrieve key information from the ASM for use in invoking the security operation on the storage object.

In accordance with the novel techniques of the present invention data stored by the storage server may be secure while avoiding the need for an administrator to maintain and manage separate processing systems in support of secure storage. Rather execution of security operations within the storage server may be coordinated by the KMM between the encryption engine and ASM to provide dedicated storage locations and processing resources for carrying out various security related tasks. Additional measures for securing data may also be promptly carried out by the KMM based on a state of the ASM to avoid the unwieldy manual coordination of tasks between various processing systems otherwise apparent with conventional system configurations.

Additional aspects of the invention will become apparent from the following detailed description taken in conjunction with the accompanying drawings which illustrate the principles of the invention by way of example.

A method and system for a key management module KMM managing security operations within the storage server using an authenticated storage module ASM of the storage server is provided herein. References in this specification to an embodiment one embodiment or the like mean that the particular feature structure or characteristic being described is included in at least one embodiment of the present invention. Occurrences of such phrases in this specification do not necessarily all refer to the same embodiment nor are they necessarily mutually exclusive.

Storage servers provide storage services to one or more clients through a network by receiving and responding to various read and write requests from client directed to storage units . Network may be for example a local area network LAN wide area network WAN metropolitan area network MAN global area network such as the Internet a Fibre Channel fabric or any combination of such interconnects. Client may be for example a conventional personal computer PC server class computer workstation handheld computing or communication device or other special or general purpose computer.

In addition storage servers may each provide a file level service such as used in a network attached storage NAS environment a block level service such as used in a storage area network SAN environment a service which is capable of providing both file level and block level service or any other data access service capable of providing access to information stored on storage units . Although storage servers are each illustrated as single units in a storage server can in other embodiments be implemented as one or more physically separate network modules an N module and data modules a D module . To that end each D module may include storage access components for accessing data on storage units whereas each N Module includes functionality for providing client access to components of the D module. An exemplary distributed or clustered storage system architecture is described further with respect to . Moreover certain embodiments of system may include more than two storage servers so it will be appreciated that the invention is not so limited to the description provided herein.

In some embodiments each of storage servers may be referred to as a network storage subsystem. A network storage subsystem may provide networked storage services for a specific application or purpose. Examples of such applications include database applications web applications Enterprise Resource Planning ERP applications etc. Examples of such purposes include file archiving backup mirroring etc. A network storage subsystem can also be implemented with a collection of networked resources provided across multiple storage servers and or storage units.

Illustratively storage units implement secure storage by storing data in encrypted form. In one embodiment secure storage may involve encrypting data stored on physical storage objects implemented by the mass storage devices e.g. disks constituting storage units . To that end each disk may be associated with a different encryption key and in certain cases a key may further be associated with a passphrase for secure storage of the key i.e. storing the key in encrypted form . Key information including an encryption key and corresponding unique key identifier key ID may be generated by an encryption engine of the storage server during initialization of each disk for instance.

In general novel key management modules KMM KMM A B may coordinate the overall security operations of storage servers by processing the key information generated by the encryption engine to associate a key with a disk of the storage server. KMM may generate the association using a data structure such as a key entry described in further detail with reference to . The processed key information may then be stored by KMM to an authenticated storage module ASM of the storage server which performs security services prior to storing the processed key information as requested by KMM . The ASM discussed in detail with reference to B may then be accessed by KMM to retrieve key information from the ASM when a cryptographic operation is performed on data of the disk. Advantageously an additional security operation may also be invoked by KMM to further secure data stored on the disk based on a state of the ASM.

In one embodiment a storage operating system operative in the D module implements a storage abstraction layer to logically organize information within storage units as logical storage objects e.g. logical volumes . In certain cases storage provided by each disk of storage units may further be logically organized by the storage abstraction layer as one or more virtual volumes. Client requests received by the node via the N module may include a unique identifier such as an object ID to indicate a particular logical or virtual volume each a volume on which to carry out the request. Preferably only one of the D modules owns services the volume whereby the volume may be stored on storage unit A and serviced by D module A for example. A client request targeted for the volume may then be received by any of N modules and forwarded to D module A e.g. via cluster switching fabric for servicing.

M host operative in the nodes provides cluster services for the node by managing a data structure such as a replicated database RDB not shown containing cluster wide configuration information used by the node for forwarding access requests to the appropriate D module. The various instances of the RDB in each of the nodes may be updated periodically by M host to bring the RDBs into synchronization with each other. Synchronization may be facilitated by M host updating the RDB of the node on which it operates local node and providing the updated information to the M hosts of other nodes remote nodes . In one embodiment the RDB may include mappings between volumes and D modules for indicating where requests may be forwarded.

It should be noted that while shows an equal number of N and D modules constituting a node in the illustrative system there may be different number of such modules constituting a node in accordance with various embodiments of the present invention. For example there may be a number of N modules and D modules of node A that does not reflect a one to one correspondence between the N and D modules of node B. As such the description of a node comprising only one N and D module for each of the node in cluster should be taken as illustrative only.

Preferably novel KMM KMM A B may be operative in each D module for managing security operations in support of secure storage. Each D module may include an authenticated storage module ASM as shown in B which may be accessed by KMM to store key information generated by an encryption engine of the D module. Security operations managed by KMM also include requesting key information from the ASM and providing the information to the encryption engine upon retrieving data from or storing data to storage units . In the event a security operation is requested by the administrator e.g. interfacing with D module to further secure data KMM may invoke a security operation based on a state of the ASM.

Memory comprises storage locations addressable by processor and adapters for storing program instructions and data structures associated with the present invention. Processor and adapters may in turn comprise processing elements and or logic circuitry configured to execute program instructions and manipulate data structures. A storage operating system portions of which are typically resident in memory and executed by the processing elements e.g. processor functionally organizes the storage server by invoking operations in support of the storage services provided by the storage server. It will be apparent to those skilled in the art that other processing and memory means including various computer readable media may be used for storing and executing program instructions pertaining to the invention described herein.

Network adapter comprises one or more ports adapted to couple the storage server to one or more clients e.g. client over point to point links wide area networks virtual private networks implemented over a public network Internet or a shared local area network for example. Network adapter may thus comprise the mechanical electrical and signaling circuitry needed to connect the storage server to network for instance. Each client may communicate with the storage server over the network by exchanging discrete frames or packets of data according to pre defined protocols such as TCP IP.

Storage adapter cooperates with storage operating system executing on the storage server to access information stored on the storage units e.g. storage units implementing secure storage. The storage units may be embodied as a storage device controller and one or more mass storage devices constituting tape disks flash memory or any other similar media adapted to store information. Preferably storage adapter comprises a plurality of ports having input output I O interface circuitry to couple the storage devices e.g. disks to bus over an I O interconnect arrangement such as a conventional high performance FC or SAS link topology. In certain embodiments the storage units may be configured as a storage subsystem providing a shared storage pool between multiple storage servers. To that end the storage server may access the storage units directly using storage adapter or indirectly using cluster access adapter e.g. via storage switching fabric .

Device controller may further include a processor and a memory for controlling the overall operation of the storage units. Instructions stored in memory may be executed by processor for writing data to storage device in accordance with a write command received from storage operating system and for reading data in accordance with a read command received from storage operating system . As used herein data written by device controller in response to a write command is thus referred to as write data whereas data read by device controller responsive to a read command is referred to as read data. 

In one embodiment an encryption engine resident in memory and executed by processor may automatically encrypt write data upon writing to storage device and automatically decrypt data read from storage device . To that end each write or read command issued by storage operating system may include key information indicating the appropriate key for encrypting and decrypting data. For example such key information may include the key identifier for a key associated with one of the storage devices e.g. disk being accessed. Encryption engine may then retrieve the key from memory based on the supplied key information and automatically encrypt or decrypt data of the disk. Illustratively a conventional encryption algorithm e.g. the Advanced Encryption Standard AES or other appropriate algorithm may be implemented by encryption engine to transform unencrypted data into encrypted data and vice versa. In this way processor may be dedicated to perform security tasks in support of secure storage independent from the operations performed by processor .

Advantageously a key management module KMM implemented in storage operating system may manage the overall security operations of the storage server by storing and retrieving key information used by encryption engine . Preferably key information may be generated by encryption engine during initialization of the disk for example using a high quality pseudo random number generation technique to generate keys. In certain embodiments encryption engine may further generate a passphrase for a key to secure the key while resident in memory . In this instance the passphrase and passphrase ID also constitute key information to be processed by KMM . KMM may then process the key information generated by encryption engine using a key entry to associate the key with the storage device such as a disk .

In the exemplary embodiment key information processed by KMM may be stored to an authenticated storage module ASM which may provide dedicated storage for processed key information. ASM may be implemented by a portable storage device providing security services for information stored therein such as a smart card in one example. KMM may access ASM across bus via an authenticated storage module adapter ASM adapter which comprises a port having input output I O interface circuitry for coupling to ASM over a serial I O interconnect arrangement for instance. In other embodiments the ASM may be accessed by KMM over storage switching fabric via storage adapter .

Illustratively ASM includes a processor and memory for providing security services for information stored therein such as processed key information. Security services may in one embodiment include authenticating the identities of the administrator and storage server prior to responding to access requests from KMM targeted for memory as described in further detail below. Once authentication is complete KMM may store key information to and request key information from memory of ASM in accordance with aspects of the present invention. In this way ASM may provide dedicated storage for storing key information processed by KMM .

A user console enables a user e.g. administrator to interface with the storage server for invoking operations and providing inputs to the storage server. Illustratively user console may be implemented by a monitor and keyboard in one embodiment. Operations may be invoked and inputs provided by the administrator via command line interfaces or graphical user interfaces in certain instances. In one embodiment console may be used by the administrator to supply a passphrases for a key which may be processed by KMM and also stored in ASM .

In addition a security interface may implement a special purpose interface for the administrator requesting a security operation in accordance with embodiments of the present invention. For instance security interface may be embodied as a switch e.g. button disposed on the external housing of the storage server that when engaged by the administrator requests operations by KMM to secure data of the storage server. Based on a state of ASM as determined by KMM the security operation may be invoked by KMM to further secure data on storage device by requesting key information from ASM and providing the key information to other modules in storage operating system for implementing additional security measures. In one embodiment the security operation may involve a shredding operation to overwrite data on the disk or generate a new key associated with the disk.

In this way security operations may automatically be coordinated by KMM between encryption engine and ASM to provide dedicated resources in support of secure storage. In particular security operations may be performed by separate processors of the storage server e.g. processors to avoid the need for shared resources amongst such critical security tasks. Moreover unauthorized access to memory for instance by other application programs of storage operating system may advantageously be isolated from information stored in memory and memory thereby securely storing key information of the storage server.

In yet another embodiment cryptographic operations may be performed in a component of the storage server other than device controller . illustrates an exemplary embodiment in which the storage server may include additional components constituting a crypto system performing cryptographic operations within the storage server. Crypto system may be embodied as a PCI Express PCIe card for example and may connect to KMM via an adapter which comprises a port having input output I O interface circuitry that couples to crypto system over a serial I O interconnect arrangement for example.

An encryption engine resident in a memory of crypto system may be executed by a processor of crypto system for performing security operations in accordance with the present invention. For example write data and read data may be forwarded to crypto system for encrypting and decrypting data respectively. In this configuration key information may further be supplied by KMM to crypto system in support of such tasks. Advantageously operations of device controller may be dedicated to responding to read and write commands from storage operation system whereas encryption engine of crypto system may be dedicated to perform cryptographic operations within the storage server.

Multi protocol engine includes a media access layer of network drivers e.g. gigabit Ethernet drivers that interface with network protocol layers such as the IP layer and its supporting transport mechanisms the TCP layer and the User Datagram Protocol UDP layer . A file system protocol layer provides multi protocol file access and to that end includes support for the Direct Access File System DAFS protocol the NFS protocol the CIFS protocol and the Hypertext Transfer Protocol HTTP protocol . A VI layer implements the VI architecture to provide direct access transport DAT capabilities such as RDMA as required by the DAFS protocol . An iSCSI driver layer provides block protocol access over the TCP IP network protocol layers while a FC driver layer receives and transmits block access requests and responses to and from the storage server. In certain cases a Fibre Channel over Ethernet FCoE layer not shown may also be operative in multi protocol engine to receive and transmit requests and responses to and from the storage server. The FC and iSCSI drivers provide respective FC and iSCSI specific access control to the blocks and thus manage exports of luns to either iSCSI or FCP or alternatively to both iSCSI and FCP when accessing blocks on the storage server.

The storage operating system also includes a series of software layers organized to form a storage server that provides data paths for accessing information stored on storage devices implementing secure storage e.g. storage devices . Information may include data received from a client e.g. client in addition to data accessed by the storage operating system in support of storage server operations such as program application data or other system data. Preferably client data may be organized as one or more logical storage objects e.g. volumes that comprise a collection of storage devices cooperating to define an overall logical arrangement. In one embodiment the logical arrangement may involve logical volume block number vbn spaces wherein each volume is associated with a unique vbn.

File system implements a virtualization system of the storage operating system through the interaction with one or more virtualization modules illustratively embodied as e.g. a SCSI target module . SCSI target module is generally disposed between drivers and file system to provide a translation layer between the block lun space and the file system space where luns are represented as blocks. File system illustratively implements the WAFL file system having an on disk format representation that is block based using e.g. 4 kilobyte KB blocks and using a data structure such as index nodes inodes to identify files and file attributes such as creation time access permissions size and block location . File system uses files to store metadata describing the layout of its file system including an inode file which directly or indirectly references points to the underlying data blocks of a file.

Operationally a request from a client is forwarded as a packet over the network and onto the storage server where it is received at a network adapter e.g. adapter . A network driver such as layer or layer processes the packet and if appropriate passes it on to a network protocol and file access layer for additional processing prior to forwarding to file system . There file system generates operations to load retrieve the requested data from the disks if it is not resident in core i.e. in memory . If the information is not in memory file system accesses the inode file to retrieve a logical vbn and passes a message structure including the logical vbn to the RAID system . There the logical vbn is mapped to a disk identifier and device block number e.g. disk dbn and sent to an appropriate driver e.g. SCSI of disk driver system . The disk driver accesses the dbn from the specified disk and loads the requested data block s in memory for processing by the storage server. Upon completion of the request the node and operating system returns a reply to the client over the network.

It should be noted that the software path through the storage operating system layers described above needed to perform data storage access for the client request received at the storage server adaptable to the teachings of the invention may alternatively be implemented in hardware. That is in an alternate embodiment of the invention a storage access request data path may be implemented as logic circuitry embodied within a field programmable gate array FPGA or an application specific integrated circuit ASIC . This type of hardware implementation increases the performance of the storage service provided by the storage server in response to a request issued by a client. Moreover in another alternate embodiment of the invention the processing elements of adapters may be configured to offload some or all of the packet processing and storage access operations respectively from processor to thereby increase the performance of the storage service provided by the storage server. It is expressly contemplated that the various processes architectures and procedures described herein can be implemented in hardware firmware or software.

When implemented in a cluster data access components of the storage operating system may be embodied as D module for accessing data stored on disk. In contrast multi protocol engine may be embodied as N module to perform protocol termination with respect to a client issuing incoming access over the network as well as to redirect the access requests to any other N module in the cluster. A cluster services system may further implement an M host e.g. M host to provide cluster services for generating information sharing operations to present a distributed file system image for the cluster. For instance media access layer may send and receive information packets between the various cluster services systems of the nodes to synchronize the replicated databases in each of the nodes.

In addition a cluster fabric CF interface module CF interface modules A may facilitate intra cluster communication between N module and D module . For instance D module may expose a CF application programming interface API to which N module or another D module not shown issues calls. To that end CF interface module can be organized as a CF encoder decoder using local procedure calls LPCs and remote procedure calls RPCs to communicate a file system command to between D modules residing on the same node and remote nodes respectively.

Illustratively the storage operating system issues a read or write command to a storage device controller e.g. device controller through disk driver system for accessing a physical storage object e.g. disk using the disk identifier mapped from the logical vbn by RAID system . In one embodiment the resultant read data and write data may automatically be processed by an encryption engine of the storage server e.g. encryption engine to encrypt and decrypt data of a disk. To that end the storage operating system may implement a key management module e.g. KMM to manage security operations of the storage server using an authenticated storage module ASM of the storage server e.g. ASM . For instance KMM may process key information generated by the encryption engine and store such information in dedicated storage of the ASM e.g. memory . Upon the storage operating system generating a read or write command KMM may request key information from the ASM based on the disk being accessed or to be accessed and provide such information to the encryption engine for processing read data and write data.

In the event a security operation is requested by an administrator e.g. interfacing at security interface KMM may also invoke the requested security operation on data stored on the disk based on a state of the ASM. For instance the state of the ASM may involve a connected state whereby the ASM is physically connected to the storage server and authentication by the ASM has been complete. Upon determining the connected state KMM may retrieve key information from the ASM and interface with various modules of the storage operating system such as disk driver system in one instance for carrying out the requested security operation using the retrieved key information. An example of a security operation may include executing a write command to overwrite data on the disk whereas another example may include the encryption engine generating a new key for the disk. Additional details of the security operation are described further in reference to .

Although the present invention is shown herein to implement KMM in the storage operating system it will be appreciated that KMM may be implemented in other modules or components of the storage server in other embodiments. In addition KMM may be implemented as one or a combination of a software executing processor hardware or firmware within the storage server. As such KMM may directly or indirectly interface with modules of the storage operating system in accordance with teachings of the present invention.

As used herein the term storage operating system generally refers to the computer executable code operable on a computer to perform a storage function that manages data access and may implement data access semantics of a general purpose operating system. The storage operating system can also be implemented as a microkernel an application program operating over a general purpose operating system such as UNIX or Windows XP or as a general purpose operating system with configurable functionality which is configured for storage applications as described herein.

In addition it will be understood to those skilled in the art that the invention described herein may apply to any type of special purpose e.g. file server or storage serving appliance or general purpose computer including a standalone computer or portion thereof embodied as or including a storage system. Moreover the teachings of this invention can be adapted to a variety of storage system architectures including but not limited to a network attached storage environment a storage area network and disk assembly directly attached to a client or host computer. The term storage system should therefore be taken broadly to include such arrangements in addition to any subsystems configured to perform a storage function and associated with other equipment or systems. It should be noted that while this description is written in terms of a write anywhere file system the teachings of the present invention may be utilized with any suitable file system including conventional write in place file systems.

Illustratively components of the KMM include a storing engine a retrieving engine and a security engine . During initialization of a storage device e.g. storage device embodied as a disk for instance an object ID e.g. disk ID may be forwarded to storing engine for storage in a data structure such as key entry . Key entry may be generated by storing engine and stored in memory for example. In addition the encryption engine may generate a new key including a unique key identifier key ID associated with the key for storage in memory assessable by the encryption engine e.g. memory . For ease of explanation memory may be referred to as storage server memory whereas memory accessed by the encryption engine may be referred to as encryption engine memory. The key ID may thereafter be forwarded by the encryption engine to storing engine which stores the key ID in conjunction with the disk ID in key entry thereby result in a mapping between the key and disk. The contents of key entry in this way constitute the key information processed by storing engine .

In certain embodiments a passphrase may also be associated with a key for further securing the key while resident in encryption engine memory. In general implementing a passphrase involves another layer of encryption to protect against unauthorized access to locations where the actual keys are stored. In one example upon generating the key the encryption engine may automatically generate another key and key ID constituting the passphrase and encrypt the key using passphrase. The encryption engine may also generate an indicator for the encrypted key to indicate its encrypted form as stored in encryption engine memory. A key ID as well as a passphrase ID may then be forwarded by the encryption engine to storing engine for storage in key entry . In this instance key entry may also include a passphrase ID associated with the key ID resulting in a mapping between the passphrase key and disk.

In other embodiments the passphrase may be supplied by the administrator e.g. interfacing at console and inputting a disk ID and a passphrase. The disk ID may be forwarded to retrieving engine operative to retrieve the key ID associated with the disk ID as discussed further below. Once received the key ID and passphrase may be forwarded to the encryption engine where a key ID is generated for the passphrase and the key is accordingly encrypted using the passphrase and indicated as such in encryption engine memory. The encryption engine may then forward both the key ID and passphrase ID to storing engine for storage in key entry .

To securely store the key information processed by storing engine the key information may be forwarded by storing engine to the ASM which provides security services for information stored therein. Security services may include for example the ASM authenticating the identity of the administrator and storage server prior to responding to read and write requests from storing engine . In one embodiment during initialization of the ASM the storage operating system may supply a system ID to the ASM for storage in memory of the ASM e.g. memory . In addition the administrator may also interface at console to supply the ASM with a user ID for storage in memory . For ease of explanation memory may be referred to as ASM memory. 

If the ASM is later detached and re connected to the storage server authentication may be performed by the ASM requesting a system ID from the storage operating system and a user ID from the administrator. Upon receipt of the requested information the ASM may compare the received IDs with those stored in ASM memory obtained during initialization. If a match exists the ASM may be operative to respond to read and write requests from storing engine . If a match does not exist or the ASM is not otherwise physically connected to the storage server a request by storing engine to write key information to ASM memory may result in an error. It will be appreciated that other embodiments of the present techniques may include additional or other operations performed by the ASM to provide security services for information stored in ASM memory so the present description of security services are for exemplary purposes only.

Illustratively the ASM may implement a data structure in ASM memory for storing the key information provided by storing engine as shown in an exemplary key map of . Key map may include multiple fields for tracking key information of multiple disks as processed by storing engine . To that end key map may include an object ID field constituting a disk ID. An encryption key ID field and passphrase ID field may also be included in key map for indicating the particular key and passphrase associated with the disk. In some embodiments key map may further include one or more additional fields for storing other information associated with the storage object key or passphrase.

Returning to retrieving engine of the KMM may be operative to request key information from the ASM in support of the various operations performed by the KMM. For instance the storage operating system may receive an access request from a client or otherwise need to access system data and thus generate a read or write command. The disk ID of the disk for which access is requested may also be included in the command and upon generation of the command retrieving engine may request key information from the ASM based on the disk ID in the command. When connected to the storage server and authentication has been successful the ASM may retrieve the key ID and passphrase ID from key map based on the disk ID and provide the key and passphrase IDs to retrieving engine in response to the request. Retrieving engine may then forward such information to the encryption engine of the storage server.

With read commands data may first be retrieved by a storage device controller e.g. device controller controlling operations of the disk. The read data may then be forwarded to the encryption engine in a request to decrypt the data. In contrast write commands may first be processed by the encryption engine in a request to encrypt the data with the encrypted data forwarded to the storage device controller for storage to disk. Illustratively the encryption engine may perform the requested cryptographic operation using the key information from retrieving engine by retrieving the key corresponding to the key ID from encryption engine memory. If the key is indicated to be encrypted the encryption engine may also retrieve the key associated with the passphrase ID and decrypt the encrypted key prior to using the key to encrypt or decrypt data of secure storage.

Advantageously a security operation to further secure data on disk may be invoked by security engine of the KMM in certain embodiments of the present invention. Additional security measures may be desirable when the administrator determines that locations on disk or in memory may be exposed to unauthorized access. Under conventional techniques the administrator must manually coordinate such operations between multiple processing systems such as the storage server and a remote key manager to implement the added security. In contrast the administrator may now simply engage a switch at the storage server e.g. security interface to request the added security measures which may automatically be invoked by security engine based on a state of the ASM.

In detail security engine may first determine a state of the ASM in response to the request from the administrator. In one embodiment the state of the ASM may involve a connected state or disconnected state. A connected state may indicate that the ASM is physically connected to the storage server and authentication of the identities of the administrator and storage server has been successful. Alternatively a disconnected state may indicate that the ASM is not functioning properly is physically disconnected from the storage server has performed an unsuccessful authentication attempt or involves any other operating condition which would prevent access to ASM memory. It will be appreciated that certain embodiments of the present invention may involve different or other states of the ASM so the invention is not limited to the states described herein.

Illustratively security engine determines a connected state of the ASM by automatically receiving key information from the ASM in response to a request. In other cases security engine may send a request to the ASM to confirm a connected state of the ASM. For example the ASM may retrieve a state indicator from ASM memory indicating that authentication has been completed and therefore a connected state exists. The ASM may then send a response indicating the connected state. In contrast a negative response including instances where no response is received by the KMM may indicate a failure with the ASM such as failed authentication attempt a physical disconnection of the ASM or any other ASM operating condition which would prevent the ASM from properly responding to requests from retrieving engine .

In one embodiment the security operation may involve a shredding operation such as a data shred or crypto shred. A data shred involves overwriting bits on disk constituting the underlying data to effectively delete the data. This may be preferable in situations where it is desirable to thwart any potential hardware or software recovery of data. In contrast a crypto shred may implement new keys for securing data on disk so unauthorized access to encryption engine memory or ASM memory does not facilitate further access to the native data in secure storage. To that end security engine may carry out a shredding operation by invoking retrieving engine to request key information from the ASM so operations may be performed on the disks indicated in the key information.

In detail data shredding may involve the storage operating system overwriting data of the disks by e.g. writing zero bits to data blocks of the disk. In certain embodiments an overwriting operation may involve writing a pre configured or administrator selected bit pattern to locations on disk and or writing the bit pattern multiple times to disk each write iteration referred to as a pass . The bit pattern for instance may be implemented as a data structure such as a data array which may be repeated to conform to a particular amount of data e.g. size of a disk . The bit pattern as well as the number of passes may be pre configured by a manufacturer of the storage server and stored in storage server memory e.g. memory for example.

Security engine may then invoke operations of retrieving engine to request key information from the ASM including the disk IDs stored in key map . Based on the received disk IDs security engine may request a data shred operation on the disks associated with the disk IDs. The data shred operation may then involve for each disk the storage operating system processing the bit pattern to correspond to the size of the disk generating a request to overwrite data on the disk using the processed bit pattern and in accordance with a number of passes and the storage device controller writing the bit pattern to disk accordingly.

A crypto shred in contrast may involve security engine invoking the encryption engine to generate new keys for the disks so data remains accessible. Here key information received by retrieving engine from the ASM includes the disk ID and corresponding key and passphrase IDs. A request may then be generated by security engine to perform a crypto shred on the indicated disk and be forwarded to the storage device controller. Upon receipt of a request the storage device controller may retrieve data from the indicated disk and the encryption engine may decrypt the retrieved data using the key associated with the key ID supplied by security engine . A new key may also be generated by the encryption engine for the disk and used to re encrypt the data. The new keys information including the new key ID may be forwarded to storing engine for mapping or otherwise associating the new key with the disk and for storing the new key information in the ASM. In addition the storage device controller may store the re encrypted data back to locations on disk so data may remain available yet secure despite potential unauthorized access to the ASM and encryption engine.

Advantageously operations of the KMM may be carried out to secure data of the storage server without the manual coordination of operations between dedicated processing systems. Dedicated components within the storage server may be operative to perform the security tasks of the storage server by the KMM coordinating operations between the encryption engine and the ASM. In addition such tasks may be carried out securely within the storage server since locations where keys are stored e.g. encryption engine memory are separate from locations where the key maps are stored e.g. ASM memory . Moreover the KMM may perform operations in support of providing additional security measures for further ensuring the security of data within the storage server by invoking security operations based on a state of the ASM.

A storing engine of the KMM e.g. storing engine may then process passphrase information in addition to other key information generated by the encryption engine using data structures such as key entries key entry A key entry B for each of the disks. Each key entry may include at least a disk ID object id A B and key ID key id A B for indicating an association between a disk and key. Where the key itself is stored in encrypted form in encryption engine memory key entry may also include a passphrase ID passphrase id A B for storing passphrase information corresponding to an encrypted key. Illustratively the encryption engine may forward key information to the storing engine each time key information is generated such as during initialization of a disk or when a crypto shred is performed.

Contents of key entries constituting key information may then be provided to the ASM of the storage server where such information may be stored in a data structure such as key map . Thereafter when a cryptographic operation is requested of the encryption engine a retrieving engine of the KMM e.g. retrieving engine may request key information from the ASM for a particular disk. The ASM may then retrieve the appropriate key ID including a passphrase ID if any by traversing key map based on a disk ID supplied by the retrieving engine. Upon receipt of the appropriate key ID from the ASM the retrieving engine may forward the key and passphrase ID to the encryption engine for carrying out the requested cryptographic operation.

In instances where a security operation is requested by the administrator a security engine of the KMM e.g. security engine may request key information stored in key map for invoking the security operation on the disks indicated therein. When a data shredding operation is involved the security engine may forward the disk IDs to the storage operating system for generating an overwrite request. When a crypto shredding operation is involved the security engine may forward the disk IDs as well as the key ID and passphrase ID to the encryption engine for decrypting data using the indicated keys prior to generating new keys and re encrypting data using the new keys. The new key information may similarly be processed as a key entry and forwarded to the ASM for dedicated storage in key map .

At step a disk ID may be received by a storing engine of the KMM e.g. storing engine upon initialization of a disk. Initialization of the disk may further invoke operations of the encryption engine e.g. encryption engine generating new key information e.g. a key and key ID to be stored in encryption engine memory e.g. memory . In one embodiment a passphrase may also be generated or processed by the encryption engine for securing the newly generated key. Here the encryption engine may encrypt the newly generated key before storing the encrypted key to encryption engine memory. The key and passphrase IDs from the key information may then be provided by the encryption engine to the KMM where the IDs may be received by the storing engine of the KMM step .

At step the storing engine may generate a key entry data structure e.g. key entry for processing the key information e.g. key and passphrase IDs received from the encryption engine. The storing engine may then store the disk ID as well as the key and passphrase IDs to the key entry to generate an association between the disk key and passphrase in support of secure storage step . Advantageously the key entry may be stored in storage server memory e.g. memory separate from the encryption engine memory to await further processing.

Proceeding with process the storing engine may generate a write request including the processed key information of the key entry step . The write request may then be forwarded by the storing engine to the ASM at step where the key information is stored in a key map e.g. key map resident in ASM memory e.g. memory . The process may end at step such that keys may be stored in one location e.g. encryption engine memory whereas a key map indicating the associations between keys and disks may be stored in another location e.g. ASM memory . Due to the coordination of tasks by the storing engine between the encryption engine and ASM data of the storage server may be managed in a secure manner by distributing such data throughout various storage locations within the storage server to defend against unauthorized access to any one of such storage locations.

Process starts at step where a storage device e.g. disk access request is received by the retrieving engine. The request may be generated by the storage operating system e.g. storage operating system to include the disk ID by which data will be read from or written to and then forwarded to the retrieving engine. At step a request for key information is sent by the retrieving engine to the ASM. The request may include the disk ID corresponding to an entry within a key map e.g. key map of the ASM. In response to the request the ASM may traverse the key map to determine the key ID and passphrase ID if any associated with the disk ID. The associated key ID and passphrase ID may then be received by the retrieving engine from the ASM in response to the request step .

At step the key ID and passphrase ID may be forwarded by the retrieving engine to the encryption engine for performing the necessary cryptographic operation. The encryption engine may then traverse the keys stored in encryption engine memory e.g. memory based on the key ID supplied by the retrieving engine. In one embodiment the key may be associated with an indicator for indicating the key is resident in encrypted form. In those instances the encrypting engine may retrieve the key associated with passphrase ID for first decrypting the encrypted key. The decrypted key may then be used to decrypt read data or encrypt write data step thereby providing secure storage within the storage server.

Process ends at step whereby security operations within the storage server may be carried out by the retrieving engine of the KMM to avoid the inefficient coordination of such tasks between dedicated processing systems. Since key information may now reside locally in close physical proximity to the encryption engine system resources including network bandwidth may be optimized to respond to client requests while still providing secure storage of data. Accordingly the coordination of dedicated processing resources by the KMM facilitates the execution of cryptographic and key management operations in a secure manner within an integrated system. Invoking a Security Operation

Process may start at step where a security operation request is received by a security engine of the KMM e.g. security engine . Preferably the request is generated when the administrator interfaces at security interface e.g. security interface however such a request may alternatively be requested by the administrator interfacing at a general purpose console e.g. console in other embodiments. At step the security engine determines a state of the ASM prior to invoking the security operation. In one embodiment a state of the ASM may be a connected state whereby the ASM is physically connected to the storage server and successful authentication of the storage server and administrator has been performed by the ASM. The connected state may be determined for example by the security engine requesting a current state of the ASM and receiving a connected state response. In the event the connected state cannot be determined by the security engine process ends at step and the requested security operation cannot be invoked.

Alternatively when the state is determined to be connected the security engine may invoke operations of a retrieving engine e.g. retrieving engine to request key information from the ASM step . Here the retrieving engine may request key information stored in ASM memory such as the disk IDs corresponding to secure storage for performing the security operation on the indicated disks. In one embodiment a data shred operation may be performed at step based on the disk IDs retrieved from the ASM. The data shred may involve the storage operating system writing a bit pattern to locations on disk associated with the disk ID to effectively delete data on disk. When completed data remains secure by virtue of being unrecoverable by any hardware or software means and process ends at step .

In other embodiments a crypto shred implementing the security operation may be invoked at step . Here encrypted data may be retrieved from secure storage and decrypted using the key information supplied by the security engine. The security engine may further invoke the generating of new keys by the encryption engine for use in re encrypting the data with the new key information being forwarded by the encryption engine to a storing engine of the KMM e.g. storing engine at step . At step the storing engine of the KMM may process the new key information e.g. using key entries and send the key information to the ASM for updating the key map stored therein. Upon completing the security operation process ends at step to provide additional safeguards to further secure data of the storage server.

Using the techniques described herein the present invention overcomes the deficiencies of the conventional approaches by using a key management module KMM to coordinate operations between an encryption engine and authenticated storage module ASM of the storage server in support of secure storage. Security operations may be coordinated automatically by the KMM in a secure manner to maintain separate storage locations for the keys and key maps. Since the KMM encryption engine and ASM may be implemented in different components of the storage server critical operations in support of secure storage need not compete for resources in carrying out respective tasks. Overhead may also be minimized to reduce the manual effort otherwise required by the administrator in managing more conventional configurations. Efficiencies in secure storage processing may thus be realized to provide a performance improvement over the conventional methods and systems.

It will be appreciated that the variations and examples discussed herein are not intended to be exhaustive or to limit the invention. These variations and examples intend to provide further understanding of embodiments of the present invention.

Although the present invention for purpose of explanation has been described with reference to specific exemplary embodiments it will be understood that the invention is not limited to the embodiments described. A person of ordinary skill in the art would understand that the present invention can be practiced with modifications and alternations to those embodiments or can be practiced in other embodiments within the spirit and scope of the appended claims.

Moreover non dependent acts may be performed in parallel. The embodiments were chosen and described in order to best explain the principles of the invention and its practical applications to thereby enable others skilled in the art to best utilize the invention and various embodiments with various modifications as are suited to the particular use contemplated.

Furthermore the use of the phrase one embodiment throughout does not necessarily mean the same embodiment. Although these particular embodiments of the invention have been described the invention should not be limited to these particular embodiments. Accordingly the specification and drawings are to be regarded in an illustrative sense rather than a restrictive sense.

Unless specifically stated otherwise it is to be appreciated that throughout the discussions utilizing terms such as processing or computing or calculating or determining or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical e.g. electronic quantities within the computer systems registers and memories into other data similarly represented as physical quantities within the computer system.

The present invention can be implemented by an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a machine such as a general purpose computer selectively activated or reconfigured by a computer program such as a collection of instructions for execution by a machine or processor for example stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but not limited to any type of disk including floppy disks optical disks magnetic optical disks read only memories random access memories EPROMS EEPROMS magnetic or optical cards or any type of media suitable for storing physical e.g. electronic data structures and each coupled directly or indirectly to a computer system bus or the like for access. Each of these media may be coupled to a computer system bus through use of an appropriate device for reading and or for writing the media.

