---

title: Managed channel for asynchronous requests
abstract: Apparatus and method for use with a data processing system, wherein the data processing system comprises a client and a server, comprising: a receive component for receiving a call from a client application to a first method of an object, and for receiving a reply on the channel; an interceptor component, for wrapping the object to provide a wrapped call to a second method of the wrapped object, and for invoking a response handler; a client encoder component for converting the wrapped call into a message; a client channel manager component for establishing a channel to the server; a sender component, for sending the message on the channel; a reply decoder component for decoding the reply to provide a response; and the sender component further for sending the response to the client application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09176793&OS=09176793&RS=09176793
owner: International Business Machines Corporation
number: 09176793
owner_city: Armonk
owner_country: US
publication_date: 20101123
---
The subject application is a U.S. National Stage Application of International Application No. PCT EP2010 068407 filed on 23 Nov. 2010 which claims the priority of European Patent Application No. 09179596.3 filed on 17 Dec. 2009 the contents of which are herein incorporated by reference in its entirety.

The invention relates to web applications. In particular the invention relates to an apparatus method and computer program for managing asynchronous requests from a web application.

Web applications performed by web clients typically use asynchronous requests to access resources from web servers. Asynchronous requests are used so that web applications can access resources in the background without interfering with the existing webpage.

The number of concurrent asynchronous requests that can be performed by a web application may be limited by web browsers. The limit may be set to two concurrent requests in the Hypertext Transfer Protocol HTTP version 1.1 specification. An example of a technology used to implement asynchronous requests is Ajax asynchronous JavaScript Extensible Markup Language . Ajax requests from a client can retrieve data asynchronously in the background from a server without affecting an existing webpage.

The limit may result in important performance impacts and bottlenecks in the context of web applications made of widgets a widget is any piece of dynamic content that can be placed into a web page . Widgets can use the native interface provided by the browsers for example an XMLHttpRequest object in JavaScript to fetch content over asynchronous requests. The web application embedding a widget has no direct control on the logic executed by the widget and in particular whether an asynchronous request has been triggered by the widget.

Other examples of performance impacts resulting from a limit may include a long response time for a request that is queued by a browser and an overflow of the number of requests when a webpage is loaded. The limit also results in an inability to set a level of priority to the requests. Further optimizations may not be possible because two or more requests to the same resource sent by different widgets or different instances of the same widget at roughly the same time may be handled in the same way as independent requests when it would be possible to fetch the resource only once.

Another example of a performance impact resulting from the limit may be the difficulty for the web application to have control over the web browser queue. The web browser request queue is ordered which means that a long response time for a request currently processed by the web browser can cause the subsequent requests to be queued by the web browser until the response for the currently processed request is received even if the subsequent requests could potentially return much faster than the currently processed request.

Viewed from a first aspect an embodiment of the present invention provides a client apparatus operable for use with a data processing system wherein the data processing system comprises a client and a server the apparatus comprising a receive component for receiving a call from a client application to a first method of an object wherein the first method comprises a first request to the server and wherein the first request comprises a first plurality of attributes an interceptor component responsive to the receive component receiving the call for wrapping the object to provide a wrapped call to a second method of the wrapped object wherein the second method comprises a second request to the server a client encoder component responsive to the interceptor component wrapping the object for converting the wrapped call into a message wherein the message comprises the first plurality of attributes a client channel manager component responsive to the client encoder component converting the request operable for establishing a channel to the server and a sender component responsive to the client channel manager establishing the channel for sending the message on the channel.

In an embodiment the client apparatus further comprises the receive component further operable for receiving a reply on the channel wherein the reply comprises a second plurality of attributes a reply decoder component responsive to the receive component receiving the reply for decoding the reply to provide a response wherein the response comprises the second plurality of attributes the interceptor component responsive to the reply decoder component decoding the reply further operable for invoking a response handler and the sender component responsive to the response handler being invoked further operable for sending the response to the client application.

In an embodiment the client apparatus is operable in the client application. In an embodiment the client apparatus is operable in a web browser.

Viewed from a second aspect an embodiment of the present invention provides a server apparatus operable for use with a data processing system wherein the data processing system comprises a client and a server the apparatus comprising a server channel manager component for receiving a message on a channel from a client the message comprising a first plurality of attributes a server decoder component responsive to the server channel manager component receiving the message for decoding the message to provide a request wherein the request comprises the first plurality of attributes and a response fetcher component responsive to the server decoder component providing the request for fetching a response for sending the request to a resource.

In an embodiment the server apparatus further comprises the response fetcher component further operable for receiving a response from the resource wherein the response comprises a second plurality of attributes a response encoder component responsive to the response fetcher component receiving the response for encoding the response to provide a reply wherein the reply comprises the second plurality of attributes and the server channel manager component responsive to the response encoder component providing a reply further operable for sending the reply on the channel.

Viewed from a third aspect an embodiment of the present invention provides a client method operable for use with a data processing system wherein the data processing system comprises a client and a server the method comprising the steps of receiving a call from a client application to a first method of a first object wherein the first method comprises a first request to the server and wherein the first request comprises a first plurality of attributes in response to receiving the call wrapping the object to provide a wrapped call to a second method of the wrapped object wherein the second method comprises a second request to the server in response to wrapping the object converting the wrapped call into a message wherein the message comprises the first plurality of attributes in response to converting the request establishing a channel to the server and in response to establishing the channel sending the message on the channel.

In an embodiment the client method further comprises the steps of receiving a reply on the channel wherein the reply comprises a second plurality of attributes in response to receiving the reply decoding the reply to provide a response wherein the response comprises the second plurality of attributes in response to decoding the reply invoking a response handler and in response to the response handler being invoked sending the response to the client application.

In an embodiment the client method is operable in the client application. In an embodiment the client method is operable in a web browser.

Viewed from a fourth aspect an embodiment of the present invention provides server method operable for use with a data processing system wherein the data processing system comprises a client and a server the method comprising the steps of receiving a message on a channel from a client the message comprising a first plurality of attributes in response to receiving the message decoding the message to provide a request wherein the request comprises the first plurality of attributes and in response to providing the request for fetching a response sending the request to a resource.

In an embodiment the method further comprises the steps of receiving a response from the resource wherein the response comprises a second plurality of attributes in response to receiving the response encoding the response to provide a reply wherein the reply comprises the second plurality of attributes and in response to providing a reply sending the reply on the channel.

Viewed from a fifth aspect an embodiment of the present invention provides a computer program product comprising a non transitory computer readable medium having a plurality of instructions stored on it. When executed by a processor the instructions cause the processor to perform operations comprising receiving a call from a client application to a first method of a first object wherein the first method comprises a first request to a server and wherein the first request comprises a first plurality of attributes in response to receiving the call wrapping the object to provide a wrapped call to a second method of the wrapped object wherein the second method comprises a second request to the server in response to wrapping the object converting the wrapped call into a message wherein the message comprises the first plurality of attributes in response to converting the request establishing a channel to the server and in response to establishing the channel sending the message on the channel.

In an embodiment the computer program product further comprises instructions for receiving a reply on the channel wherein the reply comprises a second plurality of attributes in response to receiving the reply decoding the reply to provide a response wherein the response comprises the second plurality of attributes in response to decoding the reply invoking a response handler and in response to the response handler being invoked sending the response to the client application.

Viewed from a sixth aspect an embodiment of the present invention provides a computer program product comprising a non transitory computer readable medium having a plurality of instructions stored on it. When executed by a processor the instructions cause to processor to perform operations comprising receiving a message on a channel from a client the message comprising a first plurality of attributes in response to receiving the message decoding the message to provide a request wherein the request comprises the first plurality of attributes and in response to providing the request for fetching a response sending the request to a resource.

In an embodiment the computer program product further includes instructions for receiving a response from the resource wherein the response comprises a second plurality of attributes in response to receiving the response encoding the response to provide a reply wherein the reply comprises the second plurality of attributes and in response to providing a reply sending the reply on the channel.

Typically a name server is also connectable to the network . A name server translates a uniform resource locator URL into an Internet Protocol IP address. The user accesses the Internet by interacting with the web browser operable on a workstation . A client side web application is also operable on the workstation in communication with a server side application operable on the server . The client side web application may be visible to the user through the web browser . The client side web application also interacts with the web browser . The web browser communicates with a web server operable on the server . The web server interacts with the server side web application . Therefore the client side web application interacts with the server side web application .

The application code and the 3rd party widget code may comprise JavaScript JS code. To interact with the server side web application the code may use the Document Object Model DOM application programming interface API with a method call to an XmlHttpRequest XHR object for example a send or an open method to send requests to a web server . A call from the code to send may be an order to send a request to the web server there are more than a certain number of requests currently handled by the web browser the web browser may place a new request in an ordered queue . The web browser may send the request when a response for an earlier request is received back from the web server . The limitations of the ordered queue may create bottlenecks and performance problems. The order on the queue may be based on a first served basis. Web applications may not have any control over the queue and also may not receive any information concerning the contents of the queue . When a response is received it may be passed back to the calling code via the XMLHttpRequest object originally used to send the request.

The transaction between the browser and the web server may be managed by the XHR object. The XHR object may be the native object provided by the web browser that may be used to send asynchronous JavaScript and XML Ajax requests in JavaScript to the server.

The method may begin at step . A client side web application may include application code and 3rd party widget code . At step an interceptor component of the client apparatus may receive a call to an XHR object to send a request to a server side web application from the code . The XHR object call may include attributes for example a URL headers and content .

At step an interceptor component may create a wrapper around the native XHR object prior to a first call to the native XHR object by the code . The wrapped XHR object may have the same methods as the native XHR object. Wrapping the native XHR object may allow the interceptor component to intercept any calls to one of the native XHR object s methods. All methods of the native XHR object may be wrapped to record the request attributes set by the calling code . The calling code may call the wrapped XHR object as if the native XHR object is being called. When the code calls one of the methods of the native XHR object the interceptor component may intercept the call and may instead call one of the methods of the wrapped XHR object. The code may not have an awareness of the mechanism that the client apparatus and server apparatus use to re mute the request.

At step the interceptor component of the client apparatus may receive a call to the native XHR object to send a request to a server side web application from the code . The XHR object call may include attributes for example a URL headers and content .

At step when the code calls one of the methods of the native XHR object the interceptor component may invoke a client request encoder component . The term a request may generally refer to a call to one of the methods of XHR to send an HTTP to a web server and load a web server response directly back into the calling application code.

At step the client request encoder component may encode the request attributes in a specific format enabling it to be sent over a permanent channel or semi persistent channel . Encoding the request attributes may create a message in the specific format so that the message may be sent over the channel . The message may include all of the attributes of the request.

At step a client channel manager component may set up a channel to a server channel manager component in a server. The channel may be based on existing protocols such as Bayeux. Bayeux is a protocol for transporting asynchronous messages mainly over HTTP with low latency between a web server. An example of a Bayeux protocol implementation is CometD. The channel may include a single connection over which information of multiple requests or responses are exchanged in a specific format. In an example embodiment the channel may be created the first time a request is sent. For all the subsequent requests the same channel may be reused. At step the server channel manager component may receive the message. At step a server request decoder component may decode the request attributes in the message that have been sent over the channel . At step a response fetcher component may send real HTTP requests to either a local resource of the server side web application or to an external source based on the decoded attributes. At step the response fetcher component may receive a response back from the local resource or the external resource . At step the response encoder component may encode the response attributes in a specific format into a reply. At step the reply may be sent by the server channel manager component over the channel to the client channel manager component . A resource may refer to anything that can be fetched using an HTTP request. For example a resource may be a static resource or a call to a Representational State Transfer REST API.

At step the client channel manager component may receive the reply over the channel and at step may invoke a reply decoder component . At step a response decoder component may decode the reply into a response. At step the interceptor component may invoke a response handier on the calling code . The response handler may be located in the wrapped XHR object. The response handler may provide the response to the calling code in the same way that the native XHR object would have such that the method may be transparent to the calling code .

The client request encoder component may set a unique message identification code ID for the message sent over the channel . The server apparatus may keep track of the message ID and sets a correlation reply ID in the reply that matches the message request ID so that the client apparatus may correlate which reply corresponds to which message sent over the channel .

The method may end at step . In an example embodiment the interceptor component may wrap the native XHR Object by dynamically overriding the properties methods of this object on page load. The methods and apparatus may also be appropriate for scripting language for example JS libraries that abstract the way that the Ajax requests are sent because the XHR object may be used as a foundation to send asynchronous requests. Bayeux techniques focus on the concept of application specific data sent by the protocol between a browser and a server whereas the methods and apparatus of an example embodiment of the present invention may relate to general asynchronous requests. Client side code for example client applications widgets may explicitly use the Bayeux protocols whereas an embodiment of the present invention may describe a transparent way to channel the request of code . However the Bayeux protocol can be used for an implementation of the underlying structure of an embodiment of the present disclosure.

In an example embodiment the client apparatus may be implemented as JavaScript code in the client web application . In an alternative embodiment the client apparatus may be implemented as plug in code to the web browser . In an alternative embodiment the client apparatus may be implemented as a modification to the core source code of the web browser .

In an alternative embodiment an example method may be applied to the interception of other native objects that trigger client requests to a server Examples from JavaScript include script to load a script file iframe to load a page img to load an image and link to load a stylesheet from a remote server . It will be clear to one of ordinary skill in the art that although JavaScript has been used to illustrate an example embodiment of the invention the apparatus and methods apply also to other scripting languages for client server interactions. It will be clear to one of ordinary skill in the art that all or part of the method of the example embodiments of the present invention may suitably and usefully be embodied in a logic apparatus or a plurality of logic apparatus comprising logic elements arranged to perform the steps of the method and that such logic elements may comprise hardware components firmware components or a combination thereof.

In some embodiments the present invention may provide improvements to the performances of web applications including third party extensions widgets that embed their own client side logic such as widgets.

In some embodiments the present invention may allow for re routing in a transparent manner to callers all and or a portion of asynchronous requests made by different components widgets on a page through a managed channel that may be maintained by a web application between a client and a server. In some embodiments the present disclosure may relate to client side and server side mechanisms to create maintain and manage and use such channel between the client and the server in order to route the asynchronous requests in a transparent way. The channel may be either maintained permanently via a Comet connection or virtually via a series of sequential controlled Ajax requests.

In some embodiments a mechanism for re routing asynchronous requests may be hidden to any component making an asynchronous request so that the same results may be delivered as if native JavaScript Objects are used for sending the Ajax requests. Therefore in some embodiments no changes may be necessary to the web application code or to any third party widgets that are incorporated in it. A web application may bypass the web browser queue and immediately send requests to a web server through a permanent channel.

Advantageously a mechanism for re routing asynchronous requests may be applicable to any client application containing 3rd party scripting code for example JavaScript code not only to graphical widgets. For example a widget collecting metrics and sending the data to a remote server.

In some embodiments the invention may be generalizable to any application containing a web component able to execute logic via scripting code to trigger asynchronous requests.

It will be appreciated that the method and arrangement described above may also suitably be performed fully or partially in software running on one or more processors not depicted in the Figures and that the software may be provided in the form of one or more computer program elements and or computer readable instructions carried on any suitable data carrier e.g. a non transitory computer readable medium also not depicted in the Figures such as a solid state a magnetic or optical storage device or the like. For the avoidance of doubt the term comprising as used herein throughout the description and claims is not to be construed as meaning consisting only of. Also for the avoidance of doubt copying one location to another as used herein throughout the description and claims is to be construed as meaning copy the data contents of one location to the other location.

