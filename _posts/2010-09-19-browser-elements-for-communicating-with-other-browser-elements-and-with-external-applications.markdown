---

title: Browser elements for communicating with other browser elements and with external applications
abstract: A method includes executing a web script by a browser element to access a web service executing on a web server and providing access to a web application, subscribing to the web service by the browser element so that data will be sent from the web service without requiring the browser element to initiate a request for the data, receiving the data from the web service by a communicator module executing on the client computing device, and sending the data to the browser element by the communicator module. A system includes a browser having at least one browser element configured to subscribe to data from an external web service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08205214&OS=08205214&RS=08205214
owner: Microsoft Corporation
number: 08205214
owner_city: Redmond
owner_country: US
publication_date: 20100919
---
The present application is a continuation of and claims the benefit of priority to U.S. patent application Ser. No. 11 687 429 filed Mar. 16 2007 entitled Browser Elements for Communicating With Other Browser Elements and With External Applications and issued as U.S. Pat. No. 7 805 728 on Sep. 28 2010 which is incorporated herein by reference for all purposes.

Web browsers have evolved over the years from web browsers that were typically used to view static web pages to dynamic web pages and web applications that have browser elements that can be configured for animation audio video high resolution images web scripts applications etc. However one problem that exists with current browsers is that browser elements running in web browsers are unable to directly communicate with each other and this can hinder browser functionality. Further external applications are unable to initiate direct communication with browser elements running in web browsers. As a result development of web applications utilizing communication with browser elements is limited.

The following presents a simplified summary of the disclosure to provide a basic understanding to the reader. This summary is not an extensive overview of the disclosure and it does not identify key critical elements of the invention or delineate the scope of the invention. Its sole purpose is to present some concepts disclosed herein in a simplified form as a prelude to the more detailed description that is presented later.

Described herein are various techniques for configuring browser elements running in browsers to communicate with each other and or external applications. A browser element is configured as a web service and application programming interfaces associated with the browser element can be accessed by other browser elements or by external applications. In at least one implementation such configuring includes providing each browser element with a communicator module and assigning each browser element a unique identifier that is directly addressable by other browser elements and or external applications. A browser element that has a communicator module may initiate communication with another browser element having a communicator module by referencing the unique identifier associated with the other browser element. Similarly an external application may initiate communication with a browser element having a communicator module by referencing the unique identifier of the other browser element.

Many of the attendant features will be more readily appreciated as the same becomes better understood by reference to the following detailed description considered in connection with the accompanying drawings.

The detailed description provided below describes techniques for communicating between browser elements and between a browser element and an external application. One or more browser elements are executed in a browser and may be displayed by a user interface of the browser. A browser element is configured as a web service so that it can receive data from a local web service running on a local client computing device running the browser as well as receive data from a an external web service running on one or more external web servers.

The web service contains one or more application programming interfaces that can be accessed by a web script via a web scripting module included in the browser. The web scripting module supports one or more web scripting languages capable of accessing the application programming interface through a web script.

The browser element is also configured to include a communicator module which supports one or more communication architectures and one or more communication protocols.

The browser element is assigned a unique identifier. The unique identifier is directly addressable by other browser elements and or external applications. Accordingly a different browser element or an external application can initiate communication with the browser element by referencing the corresponding unique identifier.

The first browser element includes a user interface component . The user interface component is configurable to determine how the first browser element is displayed in the user interface . It is noted that the user interface component may also be configured for additional purposes for web design using one or more programming languages supported by the browser .

The first browser element is configured as a web service . The web service includes an API Application Programming Interface set . The API set includes one or more application programming interfaces . The API set is extensible and may include a variety of functions and or methods for execution. The first browser element also includes a unique identifier . The unique identifier may be an internet protocol address a combination of numbers and letters a uniform resource identifier and the like.

The first browser element also includes a communicator module which can be a dynamic link library a runtime library and the like. The communicator module supports one or more communication architectures and one or more communication protocols. It is noted that although the communicator module is shown as being separate from the web service the communicator module may be included in the web service .

The second browser element includes a user interface component . The user interface component is configurable to determine how the second browser element is displayed in the user interface . It is noted that the user interface component may also be configured for additional purposes for web design using one or more programming languages supported by the browser .

The second browser element is configured as a web service . The web service includes an API Application Programming Interface set . The API set is extensible and may include a variety of functions and or methods for execution. The second browser element also includes a unique identifier . The unique identifier may be an internet protocol address a combination of numbers and letters and the like. It is noted that the unique identifier and the unique identifier are different.

The second browser element also includes a communicator module which can be a dynamic link library a runtime library and the like. The communicator module supports one or more communication architectures and one or more communication protocols. It is noted that although the communicator module is shown as being separate from the web service the communicator module may be included in the web service .

It is noted that the communicator modules support at least one common communication architecture and at least one common communication protocol if direct communication between browser elements is desired. For example one communication architecture supported by the communicator modules is a client server architecture. One example of a communication protocol supported by the communicator modules is TCP IP.

In at least one implementation the second browser element is configured to initiate communication with the first browser element . The second browser element initiates the communication by referencing the unique identifier of the first browser element in a request to communicate. The first browser element receives the request to communicate from the second browser element and thereafter may respond to the request immediately respond to the request at a later time process the request or ignore the request.

The communicator modules are configurable to determine how the respective browser elements initiate communication requests. The communicator modules are also configurable to determine how the respective browser elements initiate communication requests.

In the presently described example the communication architecture supported is client server and the communication protocol is TCP IP. The second browser element acts as a client and the first browser element acts as a server. The communicator modules of the respective browser elements communicate using TCP IP. The unique identifier of each browser element is a unique IP address.

It is noted that the communicator module may be a component of the web service . It is also noted that communication between the first browser element and the second browser element can be initiated by either browser element and that each browser element may act as a client or as a server. Various communication protocols may be implemented to enable communication between the first browser element and the second browser element . It is also noted that such communication is not limited to two browser elements and may support a plurality of browser elements.

In at least one implementation a user of the web browser is able to initiate communication to the first browser element from the second browser element as described above. For example the user interface component of the second browser element may include a command prompt interface not shown into which the user types commands corresponding to instructions for the first browser element . The command prompt interface executes the web script to access the API set of the second browser element that communicates the commands to the second browser element . The second browser element receives the commands and operates accordingly.

The client computing device executes a local web service that includes at least one application programming interface . Either of the browser elements may access the local web service . The local web service monitors at least one internal parameter of an internal device which can be a computer processor random access memory computer thermometer computer clock a configurable device and the like. The internal device may be configured through the local web service .

The internal parameter is measurable or quantifiable data associated with the internal device . For example if the internal device is a computer processor of a computing device an internal parameter associated with the computer processor may be usage of the computer processor in real time. The local web service is able to monitor record and provide access to the internal parameter .

The local web service also monitors at least one external parameter of an external device which can be a coffee maker a television a garage door opener a robot a separate computing device and the like. The external device may be connected to the client computing device wirelessly or wired. For example a robot may be connected to the client computing device wirelessly using a Bluetooth wireless connection mechanism not shown .

The external parameter is measurable or quantifiable data associated with the external device . For example if the external device is a television that is connected to the client computing device using Bluetooth then an external parameter associated with the television may be an indication of whether or not the television is powered on. The local web service is able to monitor record and provide access to the external parameter. The external device may be configured through the local web service .

The web server executes an external web application that provides a web service . Either of the browser elements may access the web service and thereby provide access from the web service or the web service respectively to the external web application . It is also noted that either the first browser element or the second browser element may also be configured as the web service .

In at least one implementation the first browser element is configured to subscribe to the web service . It is noted that the first browser element the second browser element or both may subscribe to the web service . By subscribing to the web service the first browser element will receive information from the web service in the future without requesting the information from the web service .

For example the first browser element may be a map application that displays traffic incidents and the web service may provide traffic incident data. The first browser element can then receive traffic incident data without initiating a request for traffic incident data. It is noted that how often traffic incident data is sent to the first browser element is configurable. The web service may provide traffic incident data at regular intervals when incidents occur or the like. For example the first browser element may be configured to have traffic incident data sent by the web service as traffic incidents occur. Alternatively the browser element may be configured to have the traffic incident data sent by the web service in fifteen minute intervals.

It is noted that communication between the browser element and the web service is similar to the communication between the browser element and the local web service .

The computing device can be implemented with numerous other general purpose or special purpose computing system configurations. Examples of well known computing systems may include but are not limited to personal computers hand held or laptop devices microprocessor based systems multiprocessor systems set top boxes gaming consoles consumer electronics cellular telephones PDAs and the like.

Components of computing device can include one or more processors including CPUs GPUs microprocessors and the like a system memory a system bus that couples the various system components and the method described above. Processor processes various computer executable instructions including those to execute and run the method for configuring a browser element to communicate with other browser elements and with external applications to control the operation of computing device and to communicate with other electronic and computing devices not shown . The system bus represents any number of several types of bus structures including a memory bus or memory controller a peripheral bus an accelerated graphics port and a processor or local bus using any of a variety of bus architectures.

The system memory may include computer readable media in the form of volatile memory such as random access memory RAM and or non volatile memory such as read only memory ROM . A basic input output system BIOS is stored in ROM. RAM typically contains data and or program modules that are immediately accessible to and or presently operated on by one or more of the processors . The method for configuring a browser element to communicate with other browser elements and with external applications may be stored in RAM and may be accessible to and or presently operated on by one or more of the processors .

Mass storage devices may be coupled to the computing device or incorporated into the computing device by coupling to the buss. Such mass storage devices may include a magnetic disk drive which reads from and writes to a removable non volatile magnetic disk e.g. a floppy disk or an optical disk drive that reads from and or writes to a removable non volatile optical disk such as a CD ROM or the like . Computer readable media such as typically embody computer readable instructions data structures program modules and the like supplied on floppy disks CDs portable memory sticks and the like. The method for configuring a browser element to communicate with other browser elements and with external applications may be provided to the CPU by the peripheral device .

Any number of program modules can be stored on the hard disk Mass storage devices ROM and or RAM including by way of example an operating system one or more application programs other program modules and program data. The method for configuring a browser element to communicate with other browser elements and with external applications may be stored on the hard disk or made available through a peripheral drive . Each of such operating system application programs other program modules and program data or some combination thereof may include an embodiment of the systems and methods described herein.

A display device can be connected to the system bus via an interface such as a video adapter . The display device displays the method for configuring a browser element to communicate with other browser elements and with external applications. A user can interface with computing device via any number of different input devices such as a keyboard pointing device joystick game pad serial port and or the like. These and other input devices are connected to the processors via input output interfaces that are coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port and or a universal serial bus USB .

Computing device can operate in a networked environment using connections to one or more remote computers through one or more local area networks LANs wide area networks WANs and the like. The computing device is connected to a network via a network adapter or alternatively by a modem DSL ISDN interface or the like.

The storage devices utilized to store program instructions can be distributed across a network. For example a remote computer may store an example of the process described as software. A local or terminal computer may access the remote computer and download a part or all of the software to run the program. Alternatively the local computer may download pieces of the software as needed or distributively process by executing some software instructions at the local terminal and some at the remote computer or computer network . It is noted that by utilizing conventional techniques all or a portion of the software instructions may be carried out by a dedicated circuit such as a DSP programmable logic array or the like.

