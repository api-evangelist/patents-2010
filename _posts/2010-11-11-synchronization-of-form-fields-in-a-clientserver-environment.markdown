---

title: Synchronization of form fields in a client-server environment
abstract: A database tier maintains and provides access to a database. An application tier receives and responds to requests for a form. The form includes data defining a first UI control for displaying a first value from the database and a second UI control for displaying a second value from the database that is dependent upon the first value. A client tier renders the form to show the first value in the first UI control and to show the second value in the second UI control. The client tier also detects a modification to the first value and causes an updated second value to be generated in response to detecting the modification to the first value. The updated second value is displayed by way of the second UI control. The updated second value is generated at the client tier, the application tier, the database tier, or at a combined application/database tier.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09449063&OS=09449063&RS=09449063
owner: Microsoft Technology Licensing, LLC
number: 09449063
owner_city: Redmond
owner_country: US
publication_date: 20101111
---
This application is a continuation of co pending U.S. patent application Ser. No. 12 910 875 entitled Synchronization of Form Fields in a Client Server Environment filed Oct. 25 2010 which is expressly incorporated herein by reference in its entirety.

Database applications commonly utilize forms to display database information and for data entry. These forms utilize fields to display information retrieved from a database and to collect data for storage in the database. In certain database systems it is possible to define a field on a form that is dependent upon another field on the form. For instance a form may be defined for displaying information from a database regarding a customer order. The form might include a first field for showing a customer name and a second field dependent upon the first field for showing the street address of the customer selected in the first field.

When a user modifies the value shown by a form field the user expects any other fields that are dependent upon the modified field to be updated to reflect the modified value. For instance if a user modifies the customer shown in the first field in the example given above the user will expect the second field to be updated to reflect the correct street address of the newly selected customer. If dependent fields are not updated in this manner the user might be presented with stale information and may become confused.

Certain client side database applications provide functionality for synchronizing form fields in the manner described above. However in client server environments such as database applications implemented via the World Wide Web Web it can be very expensive in time and performance to synchronize dependent form fields in this way.

Technologies are described herein for the synchronization of form fields in a client server environment. Through an implementation of the concepts and technologies presented herein database forms can be defined for use in a client server environment that include one or more form fields that are dependent upon other form fields. Values shown by dependent form fields can be updated in an automated fashion in response to the modification of the fields upon which they depend. This can be accomplished utilizing the concepts and technologies presented herein in a client server environment in a performant manner.

According to one aspect presented herein functionality is disclosed for defining a database form usable in a client server environment. Through the use of the design time functionality disclosed herein a form can be defined that includes a first user interface UI control configured to display a first value from a database. The form can also be defined to include a second UI control configured to display a second value from the database the second value being dependent upon the first value. When a client renders the form a modification to the first value by way of the first UI control will cause the second UI control to display an updated second value. In this manner a value displayed by the second UI control is synchronized to the value displayed by the first UI control. This can occur without modifying the contents of the database.

According to another aspect one or more user interfaces may also be provided for specifying at design time whether the updated second value should be generated at a client tier such as a Web browser application program or at a server computer. An application tier a database tier or a combined application database tier executing at the server computer may be utilized to generate the updated second value. Based upon information provided at design time the updated second value will be generated at either the client tier or at the server computer.

According to another aspect a system is provided for synchronizing database form fields in a client server environment. In one embodiment the system includes a database tier an application tier and a client tier. The database tier is configured to maintain and provide access to a database. The application tier is configured to receive and respond to requests for a form the form including data defining a first UI control for displaying a first value from the database and a second UI control for displaying a second value from the database that is dependent upon the first value. The application and database tiers may be combined into a single application database tier.

The client tier is configured to render the form to show the first value in the first UI control and to show the second value in the second UI control. The client tier is further configured to detect a modification to the first value and to cause an updated second value to be generated in response to detecting the modification to the first value. The updated second value is displayed by way of the second UI control. As discussed above the updated second value may be generated at the client tier at the application tier at the database tier or at a combined application database tier. The updated second value may also be generated without modifying the contents of the database.

In one embodiment the client tier is further configured to remove the display of the second value following receiving the modification to the first value and prior to displaying the updated second value. In this manner a user is not presented with stale information while the updated second value is being generated.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended that this Summary be used to limit the scope of the claimed subject matter. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.

The following detailed description is directed to technologies for synchronization of form fields in a client server environment. As discussed briefly above a database tier is disclosed herein that maintains and provides access to a database. An application tier is also provided that receives and responds to requests for a form. The form includes data defining a first UI control for displaying a first value from the database and a second UI control for displaying a second value from the database that is dependent upon the first value. A client tier is also disclosed that renders the form to show the first value in the first UI control and to show the second value in the second UI control. The client tier also detects a modification to the first value and causes an updated second value to be generated in response to detecting the modification to the first value. The updated second value is displayed by way of the second UI control. The updated second value is generated at the client tier the application tier the database tier or at a combined application database tier

While the subject matter described herein is presented in the general context of program modules that execute in conjunction with the execution of an operating system and application programs on a computer system those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the subject matter described herein may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like.

In the following detailed description references are made to the accompanying drawings that form a part hereof and which are shown by way of illustration specific embodiments or examples. Referring now to the drawings in which like numerals represent like elements through the several figures aspects of a computing system and methodology for synchronizing form fields in a client server environment will be described.

Turning now to details will be provided regarding one embodiment presented herein for synchronization of form fields in a client server environment. In particular is a software architecture diagram showing one illustrative architecture presented herein for synchronizing form fields in a client server environment. As shown in an illustrative architecture for implementing the embodiments presented herein includes a client tier an application tier and a database tier . Each of these components will be described in detail below.

The database tier illustrated in represents one or more software components executing on a computer system that are configured to maintain and provide access to a database . In one implementation the database is a relational database. It should be appreciated however that other types of database technologies might be utilized.

The architecture shown in also includes an application tier . The application tier is one or more software components executing on a computer system that are configured to receive and respond to requests for a form . For instance as described in greater detail below the application tier might include a Web server component executing a Web application that is configured to provide forms such as the form in a client server environment.

The form is configured for use in a client server environment and includes data defining a first UI control for displaying a first value from the database and data defining a second UI control for displaying a second value from the database . The second value may be dependent upon the first value. The form also includes display code and form logic in one embodiment.

The display code is program code that may be rendered or executed on the client tier and that is configured for receiving data values from the database and displaying the data values. The form logic is executable code configured to execute on the client tier that manages interaction with the form and that communicates with the application tier and or the database tier to retrieve the values from the database that are displayed by the form . Additional details regarding the functionality provided by the display code and the form logic will be provided below.

As also illustrated in the architecture includes a client tier that is configured to render the form . In particular a form display is generated when the client tier renders the form . For instance the form display may be displayed on a display screen connected to a computer executing a Web browser program capable of rendering the form . As described briefly above the form defines one or more UI controls A C which may be referred to collectively as UI controls or individually as UI control that are displayed in the form display . As also discussed above certain UI controls such as the dependent UI control C may be dependent upon values displayed by other UI controls. For instance in the example shown in the dependent control C may be configured to display a value from the database that is dependent upon a value displayed by the UI controls A and or B.

According to embodiments presented herein the client tier is further configured to detect a modification to a value generated by a UI control and in response to detecting such a modification to cause an updated value to be displayed by any UI controls that are dependent upon the modified UI control. For instance in the example shown in if the dependent control C is dependent upon the UI control A a modification to the value shown by the control A will cause an updated value to be generated and displayed by the dependent control C.

According to embodiments presented herein the updated value displayed by the dependent control C may be generated at the client tier the application tier or the database tier . In another implementation the application tier and the database tier are combined. In this embodiment the updated value displayed by the dependent control C may be generated by the combined application database tier. Additionally as will be described in greater detail below the updated value displayed by the dependent control C may be displayed by the client tier without modifying the database .

As will also be described in greater detail below a graphical user interface may be provided for use at the client tier that allows a designer of the form to specify whether updated values are generated at the client tier or at a server computer such as a server computer executing at the application tier the database tier or a combined application database tier. This information is used at runtime i.e. the time at which the form is rendered by the client tier to determine whether the updated value shown by a dependent UI control should be calculated at the client tier or at a server computer executing the application tier or the database tier . Additional details regarding one design time process for specifying the location at which updated values should be calculated will be provided below with respect to .

According to one implementation the application tier provides control dependency data to the client tier . The control dependency data is data that indicates when a UI control such as the UI control C is dependent upon another UI control such as UI controls A and or B. As will be discussed in greater detail below the client tier utilizes the control dependency data at the time a value displayed by a UI control is modified to determine whether any other UI controls depend upon the modified value. If using the control dependency data the client tier determines that another UI control depends upon the modified value the client tier will cause an updated value to be generated for display by the dependent control. As discussed above the updated value may be generated at the client tier the application tier the database tier or a combined application database tier. Additional details regarding this process will be provided below.

Referring now to a network and computer system architecture diagram will be described that shows an architecture utilized in one embodiment disclosed herein for synchronizing form fields in a client server environment. In the embodiment shown in the client tier is implemented at a client computer . In this example the application tier and database tier are implemented at a server computer . It should be appreciated that while a single client computer and a single server computer have been illustrated in many such computing systems might be utilized in other embodiments. Additionally it should be appreciated that although the application tier and database tier are illustrated in as being implemented at a single server computer these components may be executed at multiple or different server computers . For instance a server farm utilizing many such server computers might be utilized to implement the application tier and the database tier in other embodiments.

As also shown in the client computer and the server computer are interconnected by way of a data communications network . According to one implementation the network is the Internet. It should be appreciated however that other types of networks might be utilized including local area networks wide area networks wireless networks and others.

In the example shown in the application tier is implemented by a Web server component . The Web server component is an executable software component configured for execution on the server computer that among other things is configured to receive and respond to requests from a Web browser application for the form . The Web server component might also provide other functionality. For instance the Web server component may be implemented as Web application for providing for particular functionality. For instance a Web application may be created for customer relationship management performing accounting functions and providing other types of functionality.

The Web server component may utilize a database tier that is implemented by a database component in the example shown in . The database component provides functionality for maintaining and providing access to the database . As discussed above the database component may be a software component configured to provide relational database services or another type of database component configured to provide access to another type of database. In one implementation the database component is configured to expose a database application programming interface API for providing access to services provided by the database component . Details regarding the functionality provided by the database API will be provided below.

In the example shown in the client tier is implemented by Web browser application . As known to those skilled in the art a Web browser application is an application configured to receive and render Web pages. In the example presented herein the Web browser application is also configured to request the form from the Web server component to receive the form and to render the form to generate a form display . As discussed above the form display may be displayed on a display device connected to the client computer . In the example shown in the form display includes three UI controls A C. The UI control C is dependent upon one or more of the UI controls A B.

As also described briefly above in order to render the form the display code is rendered and or executed by the Web browser application . The display code communicates with the server computer to retrieve values from the database that are displayed by the UI controls A C. The Web browser application is also configured to execute the form logic . As discussed above the form logic manages client side interaction and communicates with the database API to retrieve data from the database . Additional details regarding the operation of the display code and the form logic will be provided below.

As also described briefly above the Web server component is configured in one implementation to generate control dependency data at the time the form is provided to the Web browser application . The form logic executing in the Web browser application is configured to utilize the control dependency data to determine whether an updated value for a dependent control C should be generated at the client computer or at the server computer . Additional details regarding the process will be provided below.

As also discussed briefly above with respect to the client computer also provides functionality for allowing a designer of the form to specify whether updated values for dependent UI controls C should be generated at the client computer or at the server computer . In particular according to one implementation the client computer is configured to execute a database client application .

In one embodiment the database client application is configured to provide a graphical user interface for defining the form . As part of the functionality provided by the graphical user interface a user may be able to specify that an updated value for a dependent UI control C should be generated at the client computer or at the server computer . In one embodiment if the user specifies that an updated value for a dependent UI control C should be generated at the client computer then a form designer user interface is provided for allowing the user to specify the manner in which the updated value should be generated at the client computer . If the user specifies that an updated value for a dependent UI control C should be generated at the server computer a query designer user interface may be provided for allowing the user to specify the manner in which the updated value for the dependent UI control C should be generated at the server computer .

As discussed briefly above when the Web browser application detects a modification to one of the UI controls A C the Web browser application is configured to determine whether an updated value for dependent controls should be generated at the client computer or the server computer . The Web browser application is then configured to cause the updated value for the dependent control C to be generated in the appropriate location and to display the updated value in the dependent UI control C. Additional details regarding this process will be provided below.

According to one implementation the form designer UI may allow a user of the client computer to specify a form expression to be utilized for computing the value displayed by a dependent UI control C at the Web browser application . The form expression may specify one or more operations to be performed on values retrieved from the database . The operations are executed at the Web browser application . For instance a form expression may specify that two or more values retrieved from the database should be concatenated and displayed in a dependent UI control C. Other types of operations may be defined in a similar manner. By specifying a form expression a designer of the form makes an implicit request that the value for a dependent UI control C utilizing the form expression be generated at the client computer .

According to implementations a user of the client computer may utilize the query designer UI to specify that a value to be generated by dependent control C be generated at the server computer in a number of different ways. For instance a user of the query designer UI may define a calculated field for display by the dependent control C that is generated by an underlying query. For example a query may be defined that is performed by the database component that performs a concatenation operation on two or more values from the database . Another way in which a user of the query designer UI may specify that the server computer generate a value for dependent control C is through the use of calculated columns and base tables maintained by the database component . In this example calculated columns containing values displayed by dependent control C are stored as part of a base table maintained by the database component .

Another mechanism that a user of the query designer UI may utilize to specify that values displayed by dependent controls C are to be generated at the server computer are join dependencies. As known to those skilled in the art a join dependency exists in a query that joins two or more tables in a database . A user may also specify UI controls A C that display values from duplicate fields. For instance a form may be defined that has two fields on the form that utilize the same value from the database . If a user of the form changes one of the values then the other value should also change. By specifying duplicate fields in this manner a user of the client computer may implicitly request that the server computer generate an updated value for the duplicate controls.

According to one implementation the query designer UI may also be utilized to specify UI controls A C on a form that include default values. For instance a form may be defined such that when a new row is created default values are displayed in the UI controls A C. As an example a form may be defined for creating an order. When a user of the form clicks a button for creating a new order the form is configured to show default values such as a customer name address and other details for the new order. In this example the values for the controls C showing the default values are also generated at the server computer . It should be appreciated therefore that by specifying default values at design time a user of the client computer may implicitly request that the default values be computed at the server computer . Additional details regarding the design time process for creating the form will be provided below with respect to .

Turning now to additional details will be provided regarding the embodiments presented herein for synchronizing form fields in a client server environment. In particular shows a routine that illustrates aspects of a method provided in one embodiment disclosed herein for creating a form having fields that can be synchronized in a client server environment.

It should be appreciated that the logical operations described herein with respect to and the other FIGURES are implemented 1 as a sequence of computer implemented acts or program modules running on a computing system and or 2 as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance and other requirements of the computing system. Accordingly the logical operations described herein are referred to variously as operations structural devices acts or modules. These operations structural devices acts and modules may be implemented in software in firmware in special purpose digital logic and any combination thereof. It should also be appreciated that more or fewer operations may be performed than shown in the figures and described herein. These operations may also be performed in a different order than those described herein.

The routine begins at operation where the client computer executes the database client application . As discussed above the database client application is configured to provide a graphical user interface GUI for defining the form . It should be appreciated that other types of applications might also provide functionality for designing the form including applications executing on the server computer . From operation the routine proceeds to operation .

At operation the database client application provides a GUI for defining the layout of the form . For instance the databases client application might provide a GUI for specifying the location of the UI controls A C and other elements to be displayed on the form . From operation the routine proceeds to operation .

At operation the database client application receives input placing a dependent UI control C on the form . As described above a dependent UI control C is a user interface control that displays a value that is dependent upon a value displayed by another UI control such as the UI controls A B. In response to receiving input placing a dependent UI control C on the form the routine proceeds to operation .

At operation the database client application receives input indicating whether the dependent control C should be resynchronized on the client computer or on the server computer . The term resynchronization as utilized herein refers to the process of generating an updated value for the dependent control C in response to detecting a modification to a value displayed by a UI control upon which the dependent control C depends.

As also described above the input indicating whether the dependent control should be resynchronized on the client computer or the on the server computer may be made implicitly. For instance if a user specifies that a form expression should be utilized to calculate the updated value for the dependent control C the user is implicitly requesting that the updated value be computed at the client computer . If on the other hand the user specifies a calculated field in an underlying query a calculated column in a base table a join dependency duplicate fields or default values the user is implicitly requesting that the updated value for the dependent UI control C be calculated at the server computer . The request to resynchronize a control at the client computer or at the server computer might also be made explicitly.

From operation the routine proceeds to operation where the database client application provides the form designer UI for defining the properties of the dependent control C if the user requests that the dependent control be resynchronized at the client computer . The form designer UI may include particular UI components for specifying the manner in which the dependent control C is updated at the client computer . For instance the form designer UI may provide functionality for defining properties of a form expression.

From operation the routine proceeds to operation where the database client application provides the query designer UI if the user specifies that the value for the dependent control C is to be updated at the server computer . The query designer UI provides UI elements for allowing a user to specify the manner in which a dependent control C is updated at the server computer . For instance the query designer UI might provide a graphical user interface for specifying a database query. Once the user has completed defining the layout and other aspects of the form the routine proceeds to operation where the completed form is stored at the server computer . The routine then proceeds from operation to operation where it ends.

Turning now to several routines A B will be described illustrating aspects of the operation of the client computer and the server computer respectively for synchronizing form fields in a client server environment. The routine A begins at operation where the Web browser application transmits a request to the Web server component for the form . The Web server component receives the request at operation of the routine B. In response to receiving a request the Web server component generates the control dependency data for the form . As discussed above the control dependency data identifies dependent UI controls C for which updated values may need to be computed at the server computer . Once the control dependency data has been generated the routine B proceeds to operation where the Web server component transmits the form and the control dependency data to the Web browser application in response to the original request.

At operation of the routine A the Web browser application receives the form and the control dependency data from the Web server component . The routine A then proceeds to operation where the Web browser application executes the form logic . At operation of the routine A the form logic communicates with the database component to request values for use in populating the controls A C.

At operation of the routine B the database component receives the request for the form data. In response to receiving the request the routine B proceeds to operation where the database component retrieves the requested form data. For instance the database component may execute queries against the database read from base tables in the database and or perform other processing. Once the database component has retrieved the requested values these values are returned to the form logic at operation of the routine B.

At operation of the routine A the form logic receives the requested values from the database component . The display code is then executed in order to generate the form display including the UI controls A C and any values that are to be displayed by the UI controls A C. From operation the routine A then proceeds to operation where the Web browser application detects a modification of a value displayed by one of the UI controls A C on the form . If no values have been modified the routine A proceeds from operation to operation where another such determination is made. If a value has been modified however the routine A proceeds from operation to operation . At operation the Web browser application determines whether the modified value is associated with a dependent UI control C. If not the routine A returns to operation described above. If the modified value is dependent upon another UI control the routine A proceeds from operation to operation .

At operation the Web browser application determines whether the value to be displayed by the dependent control C can be updated at the client computer . For instance according to one implementation the control dependency data may be consulted to make this determination. Other data contained within the form might be consulted as well. For instance data indicating that a form expression should be utilized to generate the updated value may indicate to the Web browser application that the updated value can be generated at the client computer .

If the value to be displayed by the dependent UI control C can be generated at the client computer the routine A proceeds to operation . At operation the updated value for the dependent UI control C is generated at the client computer . For instance the value of a form expression may be computed by the form logic in one implementation. The routine A then proceeds from operation to operation where additional modifications to values displayed by UI controls A C on the form may be processed.

If at operation the Web browser application determines that an updated value for the dependent UI control C cannot be generated at the client computer the routine A proceeds to operation . At operation the Web browser application removes the display of any dependent UI controls on the form . The Web browser application might also disable editing of the values shown by dependent UI controls on the form . By removing the display of the value shown by a dependent UI control C following the detection of a modification to another UI control and prior to displaying the updated value in the dependent control C the Web browser application ensures that a user will not be presented with stale information or permitted to edit stale information.

From operation the routine A proceeds to operation where the Web browser application transmits the value that was modified by way of the form display to the Web server component executing on the server computer . The Web server component receives the changes to the form values from the client computer at operation of the routine B. The routine B then continues to operation where the query utilized to generate the form values originally utilized to populate the form display is re executed in view of the modified value identified by the Web browser application .

According to one implementation the Web server component utilizes the detected modifications to values shown in the form display and inserts the modifications between a base table maintained by the database component and the original query. The Web server component then causes the original query to be executed in view of the modified value or values. In this manner a query is performed that is essentially a simulation of the contents of the database that includes the modification made by way of the form display . In this way a new value for the dependent control C can be generated in view of the modifications made to the form without modifying the contents of the database . Once the results of the re executed query have been generated these results are returned to the Web browser application at operation of the routine B. The routine B then proceeds from operation to operation where it ends.

At operation of the routine A the form logic executing within the Web browser receives the results of the re executed query from the Web server component . The form logic then causes the updated value to be displayed by the dependent control C at operation of the routine A. In the example shown in and described above only a single dependent UI control C has been illustrated. It should be appreciated however that many such dependent UI controls C may be present on a form display and updated in a manner similar to that described above. Once each dependent control C has been updated appropriately the routine A proceeds from operation to operation where it ends.

It should be appreciated that according to embodiments the database API mentioned briefly above with respect to may be utilized by the Web server component for obtaining an updated value for a dependent control C. In particular the database API may expose a mechanism by which the Web server component can request the re execution of an original query in view of one or more modified values. In response to such a request the database API causes the database component to generate the simulated query described above and returns results of the query to the Web server component . It should be appreciated that other mechanisms for re executing a query in view of changes made to a form might also be utilized.

Referring now to an illustrative user interface showing the synchronization of several form fields in a client server environment according to one embodiment disclosed herein will be described. In particular shows a user interface generated by the Web browser application in the manner described above. The UI is a form display that includes a number of UI controls A I for displaying values relating to a customer order. In particular the UI control A displays a value representing a order number the UI control B displays a value representing a customer number the UI control C displays a value representing a customer name the UI control D displays a value representing a customer phone number and the UI control E displays a value representing a tax rate for the customer selected utilizing the UI control B. Other UI controls E I show values for a shipper a ship rate an order item count and a total order price respectively.

As shown in an appropriate user input device such as a mouse may be utilized to select a customer utilizing the UI control B. In this example the customer name displayed by the UI control C the customer phone number displayed by the UI control D and the tax rate displayed by the UI control E are to be updated in response to the modification of the value displayed by the UI control B. Additionally the total price for an order shown by the UI control I is also to be updated if the tax rate for the selected customer changes.

In the example shown in a mouse cursor is utilized to select a new customer number. In response thereto the values displayed by the UI controls C D E and I are removed while updated values are being generated either at the client computer or at the server computer . This is illustrated in .

As described above in order to generate updated values to be displayed by the UI controls C D E and I the Web browser application may transmit the modified value to the Web sever component . For instance in this example the Web browser application may indicate to the Web server component that the customer number in the example shown in has been changed from one to two. As also described above in response thereto the Web server component causes a new query to be generated over the database in view of the updated customer number. In response thereto the customer name customer phone number tax rate and total price values may be generated and returned to the Web browser application .

In response to receiving the values the web browser application updates the values for the UI controls C D E and I and causes the updated values to be displayed as shown in . It should be appreciated that these updated values can be generated and displayed without a user committing a change to the database such as by selecting the save button . A user may select the save button in order to commit the modifications to the order to the database .

It should be appreciated that the user interfaces shown in are merely illustrative and many other types of form layouts may be generated and utilized. It should also be appreciated that other types of dependencies may be created between form fields as known to those skilled in the art. It should also be appreciated that the database client application including the form designer UI and the query designer UI may be utilized to design the UI illustrated in and to save data defining such a UI in the form .

The computer architecture shown in includes a central processing unit CPU a system memory including a random access memory RAM and a read only memory ROM and a system bus that couples the memory to the CPU . A basic input output system BIOS containing the basic routines that help to transfer information between elements within the computer such as during startup is stored in the ROM . The computer further includes a mass storage device for storing an operating system application programs and other program modules which will be described in greater detail below.

The mass storage device is connected to the CPU through a mass storage controller not shown connected to the bus . The mass storage device and its associated computer readable media provide non volatile storage for the computer . Although the description of computer readable media contained herein refers to a mass storage device such as a hard disk or CD ROM drive it should be appreciated by those skilled in the art that computer readable storage media can be any available computer storage media that can be accessed by the computer .

By way of example and not limitation computer readable storage media may include volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. For example computer readable storage media includes but is not limited to RAM ROM EPROM EEPROM flash memory or other solid state memory technology CD ROM digital versatile disks DVD HD DVD BLU RAY or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other non transitory medium which can be used to store the desired information and which can be accessed by the computer .

According to various embodiments the computer may operate in a networked environment using logical connections to remote computers through a network such as the network . The computer may connect to the network through a network interface unit connected to the bus . It should be appreciated that the network interface unit may also be utilized to connect to other types of networks and remote computer systems. The computer may also include an input output controller for receiving and processing input from a number of other devices including a keyboard mouse or electronic stylus not shown in . Similarly an input output controller may provide output to a display screen a printer or other type of output device also not shown in .

As mentioned briefly above a number of program modules and data files may be stored in the mass storage device and RAM of the computer including an operating system suitable for controlling the operation of a networked desktop laptop or server computer. The mass storage device and RAM may also store one or more program modules. In particular the mass storage device and the RAM may store the Web browser application the Web server component and the other software components described above. The mass storage device and RAM may also store other program modules and data such as the form .

In general software applications or modules may when loaded into the CPU and executed transform the CPU and the overall computer from a general purpose computing system into a special purpose computing system customized to perform the functionality presented herein. The CPU may be constructed from any number of transistors or other discrete circuit elements which may individually or collectively assume any number of states. More specifically the CPU may operate as one or more finite state machines in response to executable instructions contained within the software or modules. These computer executable instructions may transform the CPU by specifying how the CPU transitions between states thereby physically transforming the transistors or other discrete hardware elements constituting the CPU .

Encoding the software or modules onto a mass storage device may also transform the physical structure of the mass storage device or associated computer readable storage media. The specific transformation of physical structure may depend on various factors in different implementations of this description. Examples of such factors may include but are not limited to the technology used to implement the computer readable storage media whether the computer readable storage media are characterized as primary or secondary storage and the like. For example if the computer readable storage media is implemented as semiconductor based memory the software or modules may transform the physical state of the semiconductor memory when the software is encoded therein. For example the software may transform the states of transistors capacitors or other discrete circuit elements constituting the semiconductor memory.

As another example the computer readable storage media may be implemented using magnetic or optical technology. In such implementations the software or modules may transform the physical state of magnetic or optical media when the software is encoded therein. These transformations may include altering the magnetic characteristics of particular locations within given magnetic media. These transformations may also include altering the physical features or characteristics of particular locations within given optical media to change the optical characteristics of those locations. Other transformations of physical media are possible without departing from the scope and spirit of the present description with the foregoing examples provided only to facilitate this discussion.

Based on the foregoing it should be appreciated that technologies for synchronizing form fields in a client server environment have been presented herein. Although the subject matter presented herein has been described in language specific to computer structural features methodological acts and computer readable media it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features acts or media described herein. Rather the specific features acts and mediums are disclosed as example forms of implementing the claims.

The subject matter described above is provided by way of illustration only and should not be construed as limiting. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described and without departing from the true spirit and scope of the present invention which is set forth in the following claims.

