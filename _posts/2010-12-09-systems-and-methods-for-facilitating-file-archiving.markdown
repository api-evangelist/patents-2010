---

title: Systems and methods for facilitating file archiving
abstract: A computer-implemented method may include establishing a proxy file system that facilitates file archiving for a primary file system that does not support file archiving. The computer-implemented method may also include identifying a request to archive a file stored in a primary file system and copying the file to an archive file system such that a reference to the file is created in the proxy file system. The computer-implemented method may further include replacing the file in the primary file system with a symbolic link that identifies the reference in the proxy file system. Various other methods, systems, and computer-readable media are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09020992&OS=09020992&RS=09020992
owner: Symantec Corporation
number: 09020992
owner_city: Mountain View
owner_country: US
publication_date: 20101209
---
File archiving is a data storage technique that generally involves migrating data from a primary storage device to a secondary storage device often in an attempt to reduce storage costs . For example a business may implement file archiving by migrating large amounts of data from disk drives located on employee operated computers to a more cost effective mass storage device such as a backup server . In UNIX or UNIX like systems file archiving is typically accomplished by generating transparent placeholders that reference files stored in an archive.

Unfortunately existing technologies for generating such transparent placeholders in UNIX or UNIX like systems may suffer from one or more shortcomings. In one example while a Data Management Application Programming Interface DMAPI protocol may generate transparent placeholders in some types of UNIX systems DMAPI may be unavailable in other types of UNIX systems. In another example while a stackable file system may generate transparent placeholders in various types of UNIX systems the stackable file system must be specially ported to a particular type of UNIX system within the operating system kernel.

What is needed therefore is a mechanism that facilitates file archiving for any type of UNIX or UNIX like system in an efficient effective manner.

As will be described in greater detail below the instant disclosure generally relates to systems and methods for facilitating file archiving for any type of UNIX or UNIX like system in an efficient effective manner. More specifically the systems and methods described herein may facilitate access to archived files by using a proxy file system to provide archiving capabilities to a primary file system that does not support file archiving or by exposing the archived files directly to such a primary file system.

In one embodiment a method for facilitating file archiving may include establishing a proxy file system such as a DMAPI enabled UNIX like file system that facilitates file archiving for a primary file system such as a UNIX like file system that does not support file archiving. For example a proxy module may enable DMAPI for the proxy file system to facilitate generating or implementing references such as transparent placeholders that reference files stored in an archive file system. After the proxy file system has been established to facilitate file archiving for the primary file system an identification module may identify a request to archive a file stored in the primary file system.

In response to the request to archive the file an archiving module may copy the file to an archive file system such that a reference to the file is created in the proxy file system. For example upon copying the file to the archive file system the archiving module may cause the proxy file system to generate and store a reference such as a transparent placeholder that identifies the location where the file was copied in the archive file system. The archiving module may then replace the file stored in the primary file system with a symbolic link that identifies the reference stored in the proxy file system. By causing the proxy file system to generate the reference to the archived file and replacing the file stored in the primary file system with the symbolic link that identifies the reference the archiving module may facilitate file archiving for the primary file system even though the primary file system does not support file archiving on its own.

After the file has been archived in the archive file system the primary file system may identify a request initiated by an application to access a file. The request to access the file may identify a particular location where the file is expected to be stored in the primary file system. However instead of finding the file at the location identified by the request the primary file system may find a symbolic link that directs the request to a reference generated by and stored in the proxy file system.

In certain embodiments the primary file system may forward the request to the reference stored in the proxy file system as directed by the symbolic link. The proxy file system may receive the request and locate the reference identified by the symbolic link stored in the primary file system. As described above the reference stored in the proxy file system may identify the location where the file was copied in the archive file system. The proxy file system may then use the reference to locate the file in the archive file system.

In some embodiments upon locating the file in the archive file system the proxy file system may retrieve the file from the archive file system and cache the file. By caching the file the proxy file system may enable the archiving module to provide the cached file to the application that initiated the request to access the file. In one example the archiving module may provide the cached file to the application by copying the cached file to the primary file system. For example once the application has closed the symbolic link stored in the primary file system the archiving module may replace the symbolic link with the cached file. In this example after the archiving module has replaced the symbolic link with the cached file the application may access the file in the primary file system.

In another example the archiving module may provide the cached file directly to the application from the proxy file system without copying the cached file to the primary file system. For example the archiving module may stream the cached file to the application to facilitate access to the file without copying the file to the primary file system.

In one embodiment a management module may determine that the amount of free storage space in the proxy file system is below a predetermined threshold. For example as a result of caching various files in the proxy file system the amount of free storage space in the proxy file system may fall below a predetermined threshold that represents a minimum amount of free storage space required by the proxy file system. In response to the determination that the amount of free storage space in the proxy file system is below the predetermined threshold the management module may delete one or more cached files from the proxy file system to free up additional storage space.

In certain embodiments another method for facilitating file archiving may include mounting an archive file system to facilitate file archiving for a primary file system that does not support file archiving. For example a mounting module may use a Distributed Authoring and Versioning File System DAVFS driver to mount the archive file system. In this example the mounting module may then obtain access to the archive file system via a communication protocol such as a Web based Distributed Authoring and Versioning WEBDAV protocol that exposes the archive file system to the primary file system through the use of symbolic links.

After the archive file system has been exposed to the primary file system an identification module may identify a request to archive a file stored in the primary file system. In response to the request to archive the file an archiving module may copy the file to the archive file system. Upon copying the file to the archive file system the archiving module may replace the file in the primary file system with a symbolic link that identifies the location where the file was copied in the archive file system.

By mounting the archive file system and replacing the file stored in the primary file system with the symbolic link that identifies the archived file the mounting and archiving modules may facilitate file archiving for the primary file system even though the primary file system does not support file archiving on its own. For example the primary file system may identify a request initiated by an application to access the file. The request to access the file may identify a particular location where the file is expected to be stored in the primary file system. However in this example instead of finding the file at the location identified by the request the primary file system may find a symbolic link that directs the request to the file stored in the archive file system.

In various embodiments the primary file system may forward the request to the archive file system as directed by the symbolic link. Upon receiving the request the archive file system may locate the file identified by the symbolic link and then provide the archived file to an archiving module. The archiving module may receive the archived file from the archive file system to enable the application to access the file.

In one example the archiving module may copy the archived file to the primary file system. For example once the application has closed the symbolic link in the primary file system the archiving module may replace the symbolic link with the archived file. In this example upon replacing the symbolic link with the archived file the application may access the file in the primary file system. In another example the archiving module may stream the archived file from the archive file system to the application without copying the archived file to the primary file system.

Features from any of the above mentioned embodiments may be used in combination with one another in accordance with the general principles described herein. These and other embodiments features and advantages will be more fully understood upon reading the following detailed description in conjunction with the accompanying drawings and claims.

Throughout the drawings identical reference characters and descriptions indicate similar but not necessarily identical elements. While the exemplary embodiments described herein are susceptible to various modifications and alternative forms specific embodiments have been shown by way of example in the drawings and will be described in detail herein. However the exemplary embodiments described herein are not intended to be limited to the particular forms disclosed. Rather the instant disclosure covers all modifications equivalents and alternatives falling within the scope of the appended claims.

As will be described in greater detail below the instant disclosure generally relates to systems and methods for facilitating file archiving. In particular the systems and methods described herein may enable a UNIX file system that does not generally support file archiving on its own to achieve archiving capabilities through additional means. For example a UNIX file system may be unable to support conventional file archiving techniques due to its inability to generate transparent placeholders that reference archived files.

In one embodiment the UNIX file system may achieve such file archiving capabilities by taking advantage of the archiving capabilities of a UNIX proxy file system that supports file archiving. For example the UNIX file system may provide a file to the UNIX proxy file system and the UNIX proxy file system may copy the file to an archive. The UNIX proxy file system may then generate and store a reference that identifies the location where the file was copied in the archive.

In addition the UNIX file system may replace the file that was copied to the archive with a symbolic link that identifies the reference stored in the UNIX proxy file system. By replacing the file stored in the UNIX file system with the symbolic link that identifies the reference stored in the UNIX proxy file system the UNIX file system may enable an application to access the archived file even though the UNIX file system does not support file archiving on its own.

In another embodiment the UNIX file system may achieve such file archiving capabilities by being exposed to an archive that has been mounted on the same computing device as the UNIX file system. As part of mounting the archive a communication protocol such as WEBDAV may expose the archive to the UNIX file system through the use of symbolic links. After the archive has been exposed to the UNIX file system the UNIX file system may copy the file to the archive.

The UNIX file system may then replace the file that was copied to the archive with a symbolic link that identifies the location where the file was copied in archive. By replacing the file stored in the UNIX file system with the symbolic link after the archive has been exposed to the UNIX file system via the WEBDAV communication protocol the UNIX file system may enable an application to access the archived file even though the UNIX file system does not support file archiving on its own.

The following will provide with reference to detailed descriptions of exemplary systems for facilitating file archiving. Detailed descriptions of corresponding computer implemented methods will also be provided in connection with . In addition detailed descriptions of an exemplary computing system and network architecture capable of implementing one or more of the embodiments described herein will be provided in connection with respectively.

As will be described in greater detail below exemplary system may also include an identification module programmed to identify a request to archive a file stored in a primary file system. In addition exemplary system may include an archiving module programmed to copy the file to an archive file system such that a reference to the file is created in the proxy file system. In some embodiments archiving module may also be programmed to replace the file in the primary file system with a symbolic link that identifies the reference in the proxy file system.

In various embodiments one or more of modules may also perform one or more tasks that facilitate accessing files that have been archived. For example identification module may be programmed to identify a request initiated by an application to access the file that was copied to the archive file system. In addition identification module may be programmed to find at the location where the file was stored in the primary file system prior to being archived the symbolic link that directs the request to the reference created in the proxy file system.

In some embodiments archiving module may also be programmed to use the reference stored in the proxy file system to locate the file stored in the archive. Archiving module may be further programmed to retrieve the file from the archive to cache the file in the proxy file system. In addition archiving module may be programmed to provide the cached file to the application that initiated the request to access the file.

In some embodiments exemplary system may include a management module programmed to determine that the amount of free space in the proxy file system is below a predetermined threshold. Management module may also be programmed to delete one or more cached files from the proxy file system in response to the determination that the amount of free storage space in the proxy file system is below the predetermined threshold.

In certain embodiments as will be described in greater detail below exemplary system may also include a mounting module programmed to mount an archive file system to facilitate file archiving for a primary file system that does not support file archiving. Mounting module may be further programmed to obtain access to the archive file system via a communication protocol such as WEBDAV that exposes the archive file system to the primary file system through the use of symbolic links. Although illustrated as separate elements one or more of modules in may represent portions of a single module or application.

In certain embodiments one or more of modules in may represent one or more software applications or programs that when executed by a computing device may cause the computing device to perform one or more tasks. For example as will be described in greater detail below one or more of modules may represent software modules stored and configured to run on one or more computing devices such as the devices illustrated in e.g. computing device and or archive server the devices illustrated in e.g. computing device and or archive server computing system in and or portions of exemplary network architecture in . One or more of modules in may also represent all or portions of one or more special purpose computers configured to perform one or more tasks.

In addition one or more of modules in may operate in conjunction with one or more of databases in e.g. archive file system primary file system and or proxy file system . Although not illustrated in one or more of modules may represent a portion of one or more of databases . One or more of modules may also cause one or more of databases to perform various functions or tasks. For example identification module may be programmed to cause primary file system to identify a request to access a file.

As illustrated in and indicated above exemplary system may also include one or more databases . Databases may represent portions of a single database computing device or file system or a plurality of databases computing devices or file systems. In one embodiment exemplary system may include an archive file system configured to store and manage archived files referenced by symbolic links stored in a primary file system such as primary file system in and or by references stored in a proxy file system such as proxy file system in .

In addition exemplary system may include a primary file system configured to store and manage files and symbolic links that identify archived files stored in archive file system and or references stored in a proxy file system such as proxy file system . Exemplary system may also include a proxy file system configured to store and manage cached files and references that identify archived files stored in archive file system . As discussed above references stored in proxy file system may also be identified by symbolic links stored in primary file system .

Databases in may represent a portion of one or more computing devices. For example databases may represent a portion of archive server in computing system in and or portions of exemplary network architecture in . Alternatively databases in may represent one or more physically separate devices capable of being accessed by a computing device such as computing device in archive server in computing device in archive server in computing system in and or portions of exemplary network architecture in .

Exemplary system in may be deployed in a variety of ways. For example all or a portion of exemplary system may represent portions of exemplary system in . As shown in system may include a computing device in communication with an archive server via a network . In some embodiments and as will be described in greater detail below computing device may be programmed by proxy module to establish a proxy file system such as proxy file system in that facilitates file archiving for a primary file system such as primary file system in that does not support file archiving.

In certain embodiments computing device may be programmed by identification module to identify a request to archive a file stored in primary file system . In one or more embodiments computing device may be programmed by archiving module to copy the file to archive file system such that a reference to the file is created in proxy file system . Computing device may also be programmed by archiving module to replace the file stored in primary file system with a symbolic link that identifies reference created in proxy file system . Computing device may be further programmed by identification module to identify a request initiated by an application to access a file.

In addition computing device may be programmed by identification module to find in primary file system symbolic link that directs the request to reference stored in proxy file system . In some embodiments computing device may be programmed by archiving module to use reference stored in proxy file system to locate an archived file stored in archive file system . Computing device may be further programmed by archiving module to retrieve archived file from archive file system to cache the file in proxy file system . In addition computing device may be programmed by archiving module to provide the cached file to the application that initiated the request to access the file.

Similarly all or a portion of exemplary system may represent portions of exemplary system in . As shown in exemplary system may include a computing device in communication with an archive server via a network . In certain embodiments computing device may be programmed by mounting module to mount an archive file system such as archive file system in to facilitate file archiving for a primary file system such as primary file system in that does not support file archiving. Computing device may also be programmed by mounting module to obtain access to archive file system via a communication protocol such as WEBDAV that exposes archive file system to primary file system through the use of symbolic links.

In such embodiments computing device may be programmed by identification module to identify a request initiated by an application to access a file and then to find a symbolic link in place of the file at a location in primary file system . Computing device may be programmed by archiving module to forward the request to archive file system as directed by symbolic link found in place of the file at the location in primary file system . In addition computing device may be programmed by archiving module to receive an archived file from archive file system to enable the application to access the file.

Computing devices and generally represent any type or form of computing device capable of reading computer executable instructions. Examples of computing devices and include without limitation laptops desktops servers cellular phones personal digital assistants PDAs multimedia players embedded systems combinations of one or more of the same exemplary computing system in or any other suitable computing device.

Archive servers and generally represent any type or form of computing device capable of facilitating file archiving and providing database services to an additional computing device such as computing device or via a network such as network or . Such database services may include storage and distribution of archived files requested by the additional computing device. Examples of archive servers and include without limitation application servers and database servers configured to provide various database services and or run certain software applications.

Networks and generally represent any medium or architecture capable of facilitating communication or data transfer. Examples of networks and include without limitation an intranet a wide area network WAN a local area network LAN a personal area network PAN the Internet power line communications PLC a cellular network e.g. a GSM Network exemplary network architecture in or the like. Networks and may facilitate communication or data transfer using wireless or wired connections. In one embodiment networks and may facilitate communication between a computing device such as computing device or and an archive server such as archive server or .

As illustrated at step in the various systems described herein may establish a proxy file system such as a UNIX or UNIX like file system that facilitates file archiving for a primary file system such as a UNIX or UNIX like file system that does not support file archiving. For example proxy module may as part of computing device in establish proxy file system that facilitates file archiving for primary file system which does not support file archiving on its own. In this example primary file system may be unable to support file archiving on its own because primary file system lacks the DMAPI functionality for implementing references such as transparent placeholders that reference archived files.

The term file archiving as used herein generally refers to any type of data transfer or data storage technique that involves migrating data from at least one computing or storage device to at least one additional computing or storage device and replacing the migrated data with a placeholder e.g. a reference a file stub etc . In addition the term DMAPI as used herein generally refers to the interface described in the X Open document Systems Management Data Storage Management XDSM API dated February 1997. DMAPI may be enabled or disabled on various file systems including for example XFS IBM s Journaling File System JFS VERITAS File System VXFS ADVFS and General Parallel File System GPFS .

The systems described herein may perform step in a variety of ways. In one example proxy module may set up proxy file system on computing device to generate or implement reference which identifies a file e.g. any type of executable data or compressed file stored in archive file system located on archive server . For example proxy module may enable DMAPI for proxy file system to generate or implement a transparent placeholder that references archived file stored in archive file system located on archive server . In other examples proxy module may support manage control or otherwise maintain proxy file system as needed to facilitate file archiving for primary file system .

As will be described in greater detail below reference stored in proxy file system may be referenced by symbolic link stored in primary file system . The term symbolic link as used herein generally refers to any type of file and or other data structure whose data may be an absolute or relative path that identifies an additional file reference or directory.

In some embodiments archive file system primary file system and or proxy file system may be a UNIX file system. The terms UNIX and UNIX like may be used interchangeably throughout the instant disclosure. As such the terms UNIX file system and UNIX like file system as used herein generally refer to any type of file system whose source code derives at least in part from the original UNIX design or UNIX source code developed by AT T any type of file system that satisfies the Single UNIX Specification SUS any type of file system implemented by a UNIX or UNIX like operating system or any type of file system that behaves similar to a UNIX file system.

Although not illustrated in proxy module may in some embodiments establish the proxy file system on a computing device that is separate from the computing device on which the primary file system is located. In one example the primary file system the proxy file system and the archive file system may each be located on a separate computing device. In another example proxy module may establish the proxy file system on the same computing device as the archive file system.

As illustrated at step in the various systems described herein may identify a request to archive a file stored in the primary file system. For example identification module may as part of computing device identify a request to archive a file stored in primary file system . In this example the request may identify a location where the file to be archived is currently stored in primary file system .

The systems described herein may perform step in a variety of ways. For example identification module may monitor computing device to identify the request to archive the file as the request is initiated. In one embodiment a user of computing device may initiate the request to archive the file stored in primary file system . In another embodiment an application being executed by computing device may initiate the request to archive the file stored in primary file system . The term application as used herein may refer to any executable program operating system or any other type of software capable of initiating a request to archive a file or a request to access a file.

As illustrated at step in the various systems described herein may copy the file to an archive file system such that a reference to the file is created in the proxy file system. For example archiving module may as part of computing device copy the file stored in primary file system to archive file system such that reference is created in proxy file system . In this example reference may be a transparent placeholder that identifies the location where the file was copied in proxy file system .

The systems described herein may perform step in a variety of ways. In one example archiving module may locate the file stored in primary file system and then archive the file in archive file system . Upon archiving the file in proxy file system the file may become archived file . Examples of archived file include without limitation an executable file a data file a compressed file or any other type of file capable of being archived.

In certain embodiments archiving module may copy the file to proxy file system prior to archiving the file in archive file system . In such embodiments archiving module may cause proxy file system to initiate an archiving procedure that archives the file in archive file system . In such examples as described above reference may be a transparent placeholder stored in proxy file system and referenced by symbolic link stored in primary file system .

As illustrated at step in the various systems described herein may replace the file in the primary file system with a symbolic link that identifies the reference in the proxy file system. For example archiving module may as part of computing device replace the file in primary file system with symbolic link that identifies reference stored in proxy file system . In this example symbolic link may identify reference by indicating the location where reference is stored in proxy file system .

The systems described herein may perform step in a variety of ways. In one example once the file has been archived in archive file system archiving module may delete the file from primary file system and create symbolic link in the location where the file was previously stored in primary file system . In another example archiving module may cause the primary file system to delete the file and create symbolic link in place of the file.

As detailed above steps of exemplary method describe how system may be configured to enable primary file system to harness the file archiving capabilities of proxy file system . In particular steps describe how system may facilitate file archiving for primary file system such that when an application initiates a request to access a file that has been archived the archived file may be transparently accessed by the application. As will be detailed below steps of exemplary method describe how a file that has been archived such as archived file may be transparently accessed when an application initiates a request to access the file.

As illustrated at step in the various systems described herein may identify a request initiated by an application to access a file. For example identification module may as part of primary file system located on computing device identify a request initiated by an application to access a file stored at a particular location in primary file system . In this example the request initiated by the application may identify a location where the file is expected to be stored in primary file system . In several embodiments the application that initiated the request may be executed by computing device .

The systems described herein may perform step in a variety of ways. In one example identification module may identify the request as primary file system receives the request from the application. For example after the application has initiated the request identification module may identify the request as primary file system is prompted to provide access to the location identified by the request.

In some embodiments the request identified by identification module may contain a reference that indicates the location in primary file system where the file is expected to be stored. Examples of this reference contained within the request include without limitation an absolute path a relative path a Uniform Resource Locator URL or any other reference capable of indicating a location in a file system.

In some embodiments a user of computing device may direct the application to initiate the request to access the file. For example a user of computing device may attempt to open a file displayed in a dialog box on a monitor of computing device . In this example the user s attempt to open the file may cause the application to initiate the request to access the file. In other embodiments the application may initiate the request on its own as part of a scheduled task and or other process.

As illustrated at step in the various systems described herein may find a symbolic link in place of the file at the location in the primary file system. For example identification module may as part of primary file system located on computing device find symbolic link at the location where the requested file was previously stored in primary file system prior to being archived in archive file system . In this example symbolic link found at the location in primary file system may direct the request to reference stored in proxy file system . As explained above reference may be a transparent placeholder implemented by the DMAPI functionality enabled for proxy file system .

The systems described herein may perform step in a variety of ways. In one example upon identifying the location indicated by the request identification module may access the location in primary file system in an attempt to service the request. In this example identification module may determine that symbolic link rather than the requested file is stored at the location indicated by the request.

As illustrated at step in the various systems described herein may use the reference stored in the proxy file system to locate the file stored in the archive file system. For example archiving module may as part of proxy file system located on computing device use reference stored in proxy file system to locate archived file stored in archive file system located on archive server .

The systems described herein may perform step in a variety of ways. In one example archiving module may locate reference identified by symbolic link found in place of the requested file in primary file system . In this example archiving module may then cause proxy file system to relay the request to archived file stored in archive file system as directed by reference stored in proxy file system .

As illustrated at step in the various systems described herein may retrieve the archived file from the archive file system to cache the file in the proxy file system. For example archiving module may as part of proxy file system located on computing device retrieve archived file from archive file system located on archive server . In this example upon retrieving archived file from archive file system archiving module may cache the file in proxy file system .

The systems described herein may perform step in a variety of ways. In one example archive server may allow archiving module to access archive file system to retrieve archived file . In another example archiving module may send the request to archive server and upon locating archived file in archive file system archive server may send the file to computing device in response to the request.

Archiving module may store or cache the file in proxy file system to facilitate providing the file to the application that initiated the request to access the file. As such proxy file system may serve as a cache that stores one or more files retrieved from archive file system . In some embodiments archiving module may associate the cached file with the reference used to identify the file in archive file system .

As illustrated at step in the various systems described herein may provide the cached file to the application that initiated the request to access the file. For example archiving module may as part of proxy file system located on computing device provide the cached file retrieved from archive file system to the application that initiated the request to access the file. In some embodiments archiving module may delete the cached file from proxy file system immediately upon providing the cached file to the application. In other embodiments proxy file system may continue to store the cached file even after archiving module has provided the cached file to the application.

The systems described herein may perform step in a variety of ways. In one example archiving module may copy the cached file to primary file system to enable the application to access the file in primary file system . For example archiving module may determine that the application has closed the symbolic link stored in primary file system . In this example upon determining that the application has closed the symbolic link archiving module may replace the symbolic link with the cached file.

In another example archiving module may provide the cached file directly to the application from proxy file system without copying the cached file to primary file system . For example archiving module may stream the cached file to the application to facilitate access to the file without copying the file to primary file system . Upon completion of step exemplary method in may terminate.

Although not illustrated in method may also include one or more additional steps for facilitating file archiving. In one example management module may as part of computing device determine that the amount of free storage space in proxy file system is below a predetermined threshold. For example as a result of caching various files in primary file system the amount of free storage space in primary file system may fall below a predetermined threshold that represents a minimum amount of free storage space required by proxy file system . In this example management module may delete one or more cached files from proxy file system to free up additional storage space in response to the determination that the amount of free storage space on proxy file system is below the predetermined threshold.

As illustrated at step in the various systems described herein may mount an archive file system such as a UNIX or UNIX like file system to facilitate file archiving for a primary file system such as a UNIX or UNIX like file system that does not support file archiving. For example mounting module may as part of computing device mount archive file system to facilitate file archiving for primary file system which does not support file archiving on its own. In this example as described above primary file system may be unable to support file archiving on its own because primary file system lacks the DMAPI functionality for implementing references such as transparent placeholders that reference archived files.

The systems described herein may perform step in a variety of ways. In one example mounting module may program an operating system located on computing device to present archive file system within a particular directory. For example the operating system may show archive file system in directory root users archive. In this example the mounting module may use a Distributed Authoring and Versioning File System DAVFS driver such as the file system driver DAVFS2 to mount archive file system located on archive server . The term DAVFS as used herein generally refers to the file system driver DAVFS2 or any other file system driver capable of mounting a remote file system such as archive file system located on archive server on a local computing device such as computing device to enable standard applications without WEBDAV support to edit files and or other resources stored in the remote file system located on a WEBDAV server e.g. archive server .

As illustrated at step in the various systems described herein may obtain access to the archive file system via a communication protocol that exposes the archive file system to the primary file system. This communication protocol may use symbolic links that reference files stored in the archive file system to provide access to the archive file system. For example mounting module may as part of computing device obtain access to archive file system via the WEBDAV communication protocol. The term WEBDAV as used herein generally refers to the communication protocol described in RFC 4918 HTTP Extensions for Web Distributed Authoring and Versioning WebDAV dated June 2007.

The systems described herein may perform step in a variety of ways. For example the WEBDAV communication protocol may provide access to files stored in archive file system through the use of symbolic links such as symbolic link stored in primary file system . In this example as described above each symbolic link stored in primary file system may contain a reference that identifies a file such as archived file stored in archive file system .

As illustrated at step in the various systems described herein may identify a request initiated by an application to access a file. For example identification module may as part of primary file system located on computing device identify a request initiated by an application to access a file expected to be stored in primary file system . In this example the request initiated by the application may identify a location where the file is expected to be stored in primary file system . In various embodiments the application that initiated the request may be executed by computing device .

The systems described herein may perform step in a variety of ways. In one example identification module may identify the request as primary file system receives the request from the application. For example after the application has initiated the request identification module may identify the request as primary file system is prompted to provide access to the location identified by the request.

In some embodiments the request identified by identification module may contain a reference that indicates the location in primary file system where the file is expected to be stored. Examples of this reference contained within the request include without limitation an absolute path a relative path a Uniform Resource Locator URL or any other reference capable of indicating a location in a file system.

As illustrated at step in the various systems described herein may find a symbolic link in place of the file at the location in the primary file system. For example identification module may as part of primary file system located on computing device find symbolic link at the location where the requested file was previously stored in primary file system prior to being archived in archive file system . In this example symbolic link found at the location in primary file system may direct the request to archived file stored in archive file system located on archive server .

The systems described herein may perform step in a variety of ways. In one example upon identifying the location indicated by the request identification module may access the location in primary file system in an attempt to service the request. In this example identification module may determine that symbolic link rather than the requested file is stored at the location indicated by the request.

Although not detailed in archived file may have been archived in archive file system in a variety of ways including any of those described above in connection with step . In addition symbolic link may have been created by primary file system in a variety of ways including any of those described above in connection with step .

As illustrated at step in the various systems described herein may forward the request to the archive file system as directed by the symbolic link found in place of the file at the location in the primary file system. For example archiving module may as part of computing device forward the request to archived file stored in archive file system as directed by symbolic link found in place of the file at the location identified by the request. In this example archive server may receive the request and locate archived file in archive file system .

The systems described herein may perform step in a variety of ways. In one example archiving module may use symbolic link to direct the request to archived file stored in archive file system . In this example archive server may retrieve archived file from archive file system and then provide the file to the application that initiated the request to access the file.

As illustrated at step in the various systems described herein may receive the archived file from the archive file system to enable the application to access the file. For example archiving module may as part of computing device receive archived file from archive file system to enable the application to access the file.

The systems described herein may perform step in a variety of ways. In some examples archiving module may copy archived file to primary file system to enable the application to access the file in primary file system . For example archiving module may determine that the application has closed symbolic link stored in primary file system . In this example upon determining that the application has closed symbolic link archiving module may replace symbolic link with archived file .

In other examples archiving module may stream archived file directly to the application from archive file system without copying archived file to primary file system . For example archiving module may stream archived file to the application to facilitate access to the file without copying the file to primary file system . Upon completion of step exemplary method in may terminate.

Processor generally represents any type or form of processing unit capable of processing data or interpreting and executing instructions. In certain embodiments processor may receive instructions from a software application or module. These instructions may cause processor to perform the functions of one or more of the exemplary embodiments described and or illustrated herein. For example processor may perform and or be a means for performing either alone or in combination with other elements one or more of the establishing identifying finding using directing retrieving providing copying replacing determining deleting enabling mounting obtaining forwarding receiving steps described herein. Processor may also perform and or be a means for performing any other steps methods or processes described and or illustrated herein.

System memory generally represents any type or form of volatile or non volatile storage device or medium capable of storing data and or other computer readable instructions. Examples of system memory include without limitation random access memory RAM read only memory ROM flash memory or any other suitable memory device. Although not required in certain embodiments computing system may include both a volatile memory unit such as for example system memory and a non volatile storage device such as for example primary storage device as described in detail below . In one example one or more of modules from may be loaded into system memory .

In certain embodiments exemplary computing system may also include one or more components or elements in addition to processor and system memory . For example as illustrated in computing system may include a memory controller an Input Output I O controller and a communication interface each of which may be interconnected via a communication infrastructure . Communication infrastructure generally represents any type or form of infrastructure capable of facilitating communication between one or more components of a computing device. Examples of communication infrastructure include without limitation a communication bus such as an ISA PCI PCIe or similar bus and a network.

Memory controller generally represents any type or form of device capable of handling memory or data or controlling communication between one or more components of computing system . For example in certain embodiments memory controller may control communication between processor system memory and I O controller via communication infrastructure . In certain embodiments memory controller may perform and or be a means for performing either alone or in combination with other elements one or more of the steps or features described and or illustrated herein such as establishing identifying finding using directing retrieving providing copying replacing determining deleting enabling mounting obtaining forwarding receiving.

I O controller generally represents any type or form of module capable of coordinating and or controlling the input and output functions of a computing device. For example in certain embodiments I O controller may control or facilitate transfer of data between one or more elements of computing system such as processor system memory communication interface display adapter input interface and storage interface . I O controller may be used for example to perform and or be a means for performing either alone or in combination with other elements one or more of the establishing identifying finding using directing retrieving providing copying replacing determining deleting enabling mounting obtaining forwarding receiving steps described herein. I O controller may also be used to perform and or be a means for performing other steps and features set forth in the instant disclosure.

Communication interface broadly represents any type or form of communication device or adapter capable of facilitating communication between exemplary computing system and one or more additional devices. For example in certain embodiments communication interface may facilitate communication between computing system and a private or public network including additional computing systems. Examples of communication interface include without limitation a wired network interface such as a network interface card a wireless network interface such as a wireless network interface card a modem and any other suitable interface. In at least one embodiment communication interface may provide a direct connection to a remote server via a direct link to a network such as the Internet. Communication interface may also indirectly provide such a connection through for example a local area network such as an Ethernet network a personal area network a telephone or cable network a cellular telephone connection a satellite data connection or any other suitable connection.

In certain embodiments communication interface may also represent a host adapter configured to facilitate communication between computing system and one or more additional network or storage devices via an external bus or communications channel. Examples of host adapters include without limitation SCSI host adapters USB host adapters IEEE 1394 host adapters SATA and eSATA host adapters ATA and PATA host adapters Fibre Channel interface adapters Ethernet adapters or the like. Communication interface may also allow computing system to engage in distributed or remote computing. For example communication interface may receive instructions from a remote device or send instructions to a remote device for execution. In certain embodiments communication interface may perform and or be a means for performing either alone or in combination with other elements one or more of the establishing identifying finding using directing retrieving providing copying replacing determining deleting enabling mounting obtaining forwarding receiving steps disclosed herein. Communication interface may also be used to perform and or be a means for performing other steps and features set forth in the instant disclosure.

As illustrated in computing system may also include at least one display device coupled to communication infrastructure via a display adapter . Display device generally represents any type or form of device capable of visually displaying information forwarded by display adapter . Similarly display adapter generally represents any type or form of device configured to forward graphics text and other data from communication infrastructure or from a frame buffer as known in the art for display on display device .

As illustrated in exemplary computing system may also include at least one input device coupled to communication infrastructure via an input interface . Input device generally represents any type or form of input device capable of providing input either computer or human generated to exemplary computing system . Examples of input device include without limitation a keyboard a pointing device a speech recognition device or any other input device. In at least one embodiment input device may perform and or be a means for performing either alone or in combination with other elements one or more of the establishing identifying finding using directing retrieving providing copying replacing determining deleting enabling mounting obtaining forwarding receiving steps disclosed herein. Input device may also be used to perform and or be a means for performing other steps and features set forth in the instant disclosure.

As illustrated in exemplary computing system may also include a primary storage device and a backup storage device coupled to communication infrastructure via a storage interface . Storage devices and generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. For example storage devices and may be a magnetic disk drive e.g. a so called hard drive a floppy disk drive a magnetic tape drive an optical disk drive a flash drive or the like. Storage interface generally represents any type or form of interface or device for transferring data between storage devices and and other components of computing system . In one example databases from may be stored in primary storage device .

In certain embodiments storage devices and may be configured to read from and or write to a removable storage unit configured to store computer software data or other computer readable information. Examples of suitable removable storage units include without limitation a floppy disk a magnetic tape an optical disk a flash memory device or the like. Storage devices and may also include other similar structures or devices for allowing computer software data or other computer readable instructions to be loaded into computing system . For example storage devices and may be configured to read and write software data or other computer readable information. Storage devices and may also be a part of computing system or may be a separate device accessed through other interface systems.

In certain embodiments storage devices and may be used for example to perform and or be a means for performing either alone or in combination with other elements one or more of the establishing identifying finding using directing retrieving providing copying replacing determining deleting enabling mounting obtaining forwarding receiving steps disclosed herein. Storage devices and may also be used to perform and or be a means for performing other steps and features set forth in the instant disclosure.

Many other devices or subsystems may be connected to computing system . Conversely all of the components and devices illustrated in need not be present to practice the embodiments described and or illustrated herein. The devices and subsystems referenced above may also be interconnected in different ways from that shown in . Computing system may also employ any number of software firmware and or hardware configurations. For example one or more of the exemplary embodiments disclosed herein may be encoded as a computer program also referred to as computer software software applications computer readable instructions or computer control logic on a computer readable medium. The phrase computer readable medium generally refers to any form of device carrier or medium capable of storing or carrying computer readable instructions. Examples of computer readable media include without limitation transmission type media such as carrier waves and physical media such as magnetic storage media e.g. hard disk drives and floppy disks optical storage media e.g. CD or DVD ROMs electronic storage media e.g. solid state drives and flash media and other distribution systems.

The computer readable medium containing the computer program may be loaded into computing system . All or a portion of the computer program stored on the computer readable medium may then be stored in system memory and or various portions of storage devices and . When executed by processor a computer program loaded into computing system may cause processor to perform and or be a means for performing the functions of one or more of the exemplary embodiments described and or illustrated herein. Additionally or alternatively one or more of the exemplary embodiments described and or illustrated herein may be implemented in firmware and or hardware. For example computing system may be configured as an application specific integrated circuit ASIC adapted to implement one or more of the exemplary embodiments disclosed herein.

Similarly servers and generally represent computing devices or systems such as application servers or database servers configured to provide various database services and or run certain software applications. Network generally represents any telecommunication or computer network including for example an intranet a wide area network WAN a local area network LAN a personal area network PAN or the Internet. In one example client systems and or and or servers and or may include system from .

As illustrated in one or more storage devices N may be directly attached to server . Similarly one or more storage devices N may be directly attached to server . Storage devices N and storage devices N generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. In certain embodiments storage devices N and storage devices N may represent network attached storage NAS devices configured to communicate with servers and using various protocols such as NFS SMB or CIFS.

Servers and may also be connected to a storage area network SAN fabric . SAN fabric generally represents any type or form of computer network or architecture capable of facilitating communication between a plurality of storage devices. SAN fabric may facilitate communication between servers and and a plurality of storage devices N and or an intelligent storage array . SAN fabric may also facilitate via network and servers and communication between client systems and and storage devices N and or intelligent storage array in such a manner that devices N and array appear as locally attached devices to client systems and . As with storage devices N and storage devices N storage devices N and intelligent storage array generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions.

In certain embodiments and with reference to exemplary computing system of a communication interface such as communication interface in may be used to provide connectivity between each client system and and network . Client systems and may be able to access information on server or using for example a web browser or other client software. Such software may allow client systems and to access data hosted by server server storage devices N storage devices N storage devices N or intelligent storage array . Although depicts the use of a network such as the Internet for exchanging data the embodiments described and or illustrated herein are not limited to the Internet or any particular network based environment.

In at least one embodiment all or a portion of one or more of the exemplary embodiments disclosed herein may be encoded as a computer program and loaded onto and executed by server server storage devices N storage devices N storage devices N intelligent storage array or any combination thereof. All or a portion of one or more of the exemplary embodiments disclosed herein may also be encoded as a computer program stored in server run by server and distributed to client systems and over network . Accordingly network architecture may perform and or be a means for performing either alone or in combination with other elements one or more of the establishing identifying finding using directing retrieving providing copying replacing determining deleting enabling mounting obtaining forwarding receiving steps disclosed herein. Network architecture may also be used to perform and or be a means for performing other steps and features set forth in the instant disclosure.

As detailed above computing system and or one or more components of network architecture may perform and or be a means for performing either alone or in combination with other elements one or more steps of an exemplary method for facilitating file archiving.

While the foregoing disclosure sets forth various embodiments using specific block diagrams flowcharts and examples each block diagram component flowchart step operation and or component described and or illustrated herein may be implemented individually and or collectively using a wide range of hardware software or firmware or any combination thereof configurations. In addition any disclosure of components contained within other components should be considered exemplary in nature since many other architectures can be implemented to achieve the same functionality.

In some examples all or a portion of exemplary system in may represent portions of a cloud computing or network based environment. Cloud computing environments may provide various services and applications via the Internet. These cloud based services e.g. software as a service platform as a service infrastructure as a service etc. may be accessible through a web browser or other remote interface. Various functions described herein may be provided through a remote desktop environment or any other cloud based computing environment.

The process parameters and sequence of steps described and or illustrated herein are given by way of example only and can be varied as desired. For example while the steps illustrated and or described herein may be shown or discussed in a particular order these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.

While various embodiments have been described and or illustrated herein in the context of fully functional computing systems one or more of these exemplary embodiments may be distributed as a program product in a variety of forms regardless of the particular type of computer readable media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script batch or other executable files that may be stored on a computer readable storage medium or in a computing system. In some embodiments these software modules may configure a computing system to perform one or more of the exemplary embodiments disclosed herein.

In addition one or more of the modules described herein may transform data physical devices and or representations of physical devices from one form to another. For example archiving module in may enable a computing device to transform a file stored in a primary file system into a symbolic link that directly or indirectly references an archived file.

The preceding description has been provided to enable others skilled in the art to best utilize various aspects of the exemplary embodiments disclosed herein. This exemplary description is not intended to be exhaustive or to be limited to any precise form disclosed. Many modifications and variations are possible without departing from the spirit and scope of the instant disclosure. The embodiments disclosed herein should be considered in all respects illustrative and not restrictive. Reference should be made to the appended claims and their equivalents in determining the scope of the instant disclosure.

Unless otherwise noted the terms a or an as used in the specification and claims are to be construed as meaning at least one of. In addition for ease of use the words including and having as used in the specification and claims are interchangeable with and have the same meaning as the word comprising. 

