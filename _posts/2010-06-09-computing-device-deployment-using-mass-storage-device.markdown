---

title: Computing device deployment using mass storage device
abstract: Computing device deployment and configuration using a mass storage device is provided. A generic computing device is provided to a customer or end user. A mass storage device is used to distribute configuration information to the generic computing device. The configuration information includes customer-specified or ordered software applications or other features. The configuration information can also include updates to the computing device system software. The customer or end user couples the mass storage device to the generic computing device in order to load the configuration information into the computing device. After the configuration information is loaded, the computing device is configured for the customer's use. Further features, such as creating customized images, are also provided.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08452951&OS=08452951&RS=08452951
owner: Wyse Technology Inc.
number: 08452951
owner_city: San Jose
owner_country: US
publication_date: 20100609
---
The present application is a divisional application of U.S. patent application Ser. No. 11 798 984 issued as U.S. Pat. No. 7 797 527 entitled COMPUTING DEVICE DEPLOYMENT USING MASS STORAGE DEVICE filed on May 18 2007 which is a divisional application of U.S. patent application Ser. No. 10 779 647 filed on Feb. 18 2004 and issued as U.S. Pat. No. 7 237 103 all of which are hereby incorporated by reference in their entirety for all purposes.

The present disclosure relates generally to computing device deployment and more particularly to using a portable mass storage device to image the memory of a computing device for customization or upgrading.

Computing devices are often designed to perform a variety of tasks in a variety of configurations. Because of this flexibility computing devices commonly require some customer specific configuration in order to meet the customer s needs. A configured computing device includes customer specific application loads or other configuration information. One problem in the distribution of computing devices is the difficulty of maintaining an inventory of configured computing devices. That is storing configured computing devices can be a difficult and costly endeavor because of the multitude of customer needs.

One conventional way of addressing this problem is to load the computing device with a standard configuration at the time of manufacture. A standard configuration includes applications or customizations that the customer can specify at the time of ordering. A limitation of this approach however is the degree to which standard configurations can encompass the needs of enterprise customers. Although many home users may have similar configuration requirements enterprise users often require more specific configurations. Further a standard configuration can become outdated or in need of software updates while the computing device is stored in a warehouse or waiting for deployment at the customer s premises.

To address these challenges system installers and enterprises are increasingly using images in the deployment of computing devices to customers or end users. An image represents a software configuration that can be loaded onto a computing device in order to configure the computing device with customer specific information such as applications or operating systems. Conventionally images are used to replicate an established system configuration to a number of similar computing devices. In a personal computer for example an image typically replicates the hard drive contents of the established system. Images can be used to reduce the amount of time required to install and to configure individually each of a number of computing devices.

The use of images enables the computing device manufacturer to store generic computing devices that can be easily configured at the time of deployment. In some computing environments such as server based computing using thin clients images can be distributed from a networked server. Thin clients typically write an image into a memory device such as flash memory because they lack hard drives or other secondary storage devices. One problem with distributing images from a server however is that network configuration is often required for the computing device to communicate with the server. For an initial customer installation the computing device may fail to connect with the server because it does not have the proper network configuration information for the customer s network.

Further the customer s premises may lack a high speed connection to a server from which an image can be downloaded. While the computing device may be connected to the server via a slow data rate connection such as a modem over an analog telephone network downloading an image via such a connection may be challenging. Although the slow data rate connection may be suitable for operating the computing device it may take significant time for the computing device to download the image during which time the computing device cannot be used for other workloads. In a thin client for example an image may require 16 megabytes or more of data to be transferred from the server.

In another conventional technique for deploying thin clients a compact disc read only memory CD ROM media is shipped to customer s premises. Thin clients typically do not have CD ROM devices so a CD ROM drive is typically shipped as well in order to read the media. The CD ROM drive can be locally connected to the thin clients. A drawback of this approach however is that shipping the CD ROM media and drive to the customer can be expensive. Another disadvantage is that user intervention is typically needed for the computing device to boot off the CD ROM or to update its configuration from a CD ROM image. Further CD ROMs may have slow data throughput and high seek latencies. Thus it may take significant time for the computing device to read the image from the CD ROM.

What is needed is a technique for providing configured computing devices that does not require network delivery of images or costly delivery of hardware to the customer s premises. What is further needed is a technique for creating images that can be used to configure generic computing devices with customer specified or ordered features.

The present disclosure includes systems and methods for deploying computing devices such as thin clients and personal computers to customers or end users. In one aspect a data processing system includes a computing device and a storage device. The storage device can be an electronic memory such as a flash memory based universal serial bus USB mass storage device. The electronic memory includes a system image or other configuration information for the computing device. The electronic memory can be coupled to an expansion port of the computing device. The contents of the electronic memory are used to configure the operation of the computing device or the software applications loaded thereon.

In another aspect a method for imaging a computing device from an attached storage device is provided. A generic computing device is distributed to the customer s premises. The generic computing device includes a minimal set of functionally in order to access the attached storage device. The generic computing device executes boot code to acquire a system image from the attached storage device. The system image is then written to an internal flash memory or other component of the computing device. The image can provide additional or customer specific functionality. The storage device may then be detached from the computing device. In another aspect the image is executed from the attached storage device. In this case the storage device remains attached to the computing device during normal operations.

In a further aspect a method for creating a customized software image is provided. The method includes receiving a customer order and parsing the customer order for configuration data. The configuration data indicates which software components or modules the customer wants loaded onto the computing device. The configuration data can also indicate other aspects of how the customer wants the computing device configured. An image is built based on the configuration data and written to the storage device. The storage device can then be distributed to the customer or end user.

In a further aspect a method for imaging a computing device from an attached storage device is provided. The method comprises the steps of determining whether to boot the computing device from the attached storage device responsive to the determining executing boot code on the computing device to acquire an image from the attached storage device and booting the computing device using the acquired image.

In a further aspect a method for providing customized software for a computing device is provided. The method comprises the steps of receiving a customer order for the computing device parsing the customer order to determine configuration data building an image using the configuration data and writing the image to a storage device. The storage device is distributable to the customer.

In a further aspect a system for imaging a computing device from an attached storage device is provided. The system comprises means for determining whether to boot the computing device from the attached storage device responsive to the determining means means for executing boot code on the computing device to acquire an image from the storage device and means for booting the computing device using the acquired image.

Further features of the invention its nature and various advantages will be more apparent from the accompanying drawings and the following detailed description.

The present invention is now described more fully with reference to the accompanying figures in which several embodiments of the invention are shown. The present invention may be embodied in many different forms and should not be construed as limited to the embodiments set forth herein. Rather these embodiments are provided so that this disclosure will be thorough and complete and will fully convey the invention to those skilled in the art.

One skilled in the art will recognize that methods apparatus systems data structures and computer readable media implement the features functionalities or modes of usage described herein. For instance an apparatus embodiment can perform the corresponding steps or acts of a method embodiment.

The computing device includes an expansion port . In one embodiment the expansion port is a universal serial bus USB port. The expansion port enables accessory devices such as the storage device to be coupled to the computing device . In addition to data signal coupling the expansion port may provide electrical power for an accessory device coupled thereto.

The storage device can be coupled to the expansion port to communicate data with the computing device . The storage device can be a conventional flash memory mass storage device a compact flash storage device a universal serial bus flash drive an IEEE 1394 flash drive a removable mass storage device an electrically erasable programmable read only memory EEPROM and the like. As one skilled in the art will appreciate the storage device physical and functional interfaces correspond with the physical and functional interfaces of the expansion port . In one embodiment the storage device is a USB mass storage device such as a JumpDrive 2.0 Pro which is commercially available from Lexar Media Inc. Fremont Calif. . Although any suitable storage device may be used in accordance with the present disclosure advantages of the USB mass storage device include fast read write speeds high capacity and compact lightweight and rugged packaging.

As one skilled in the art will appreciate the storage device can be coupled to the expansion port directly or indirectly via another device such as a hub or network element. For example the storage device may be coupled to the hub device which is further coupled to the expansion port .

In an embodiment of the present invention the storage device includes data that provides configuration information for the computing device . This configuration information can be used to modify a generic computing device into a configured system. For example the storage device may include an image that can be written to flash memory to provide customer specific applications or system configuration for the computing device . In a thin client configuration the image typically includes the operating system as well as application software. More specifically the image may include program code for booting the computing device for loading an operating system and for executing software applications.

Of course the storage device may include configuration information in a variety of data structures or formats. More specifically the data on the storage device may be arranged as a monolithic image that represents most or all of the program code that is executable by the computing device or the data may be arranged in a component or structured format such as an extensible markup language XML file.

One advantageous aspect of the present invention is that the computing device can be delivered to a customer s premises in a generic or non configured state. At the customer s premises the storage device can be inserted into the expansion port to provide configuration information. This configuration information can include customer specific information such as network parameters or customized software application loads. In one embodiment the configuration of the computing device does not require user intervention beyond insertion or coupling of the storage device . The storage device provides a portable inexpensive and reliable approach for configuring the computing device with customized or updated software. The configuration process is described below in further detail.

The network represents a conventional local or wide area data network. The network may use one or more suitable connection oriented or connectionless communications protocols such as Internet protocol IP . The network the computing devices A N and the servers may use circuit switched or packet based data transport.

In the illustrated system configuration the computing devices A N characterize thin client devices that are coupled to servers . Servers may provide a variety of application or operating system services such as file storage services print services or application services. In a server centric computing embodiment the servers execute software applications and export the display or interface to the computing devices A N.

The servers may also provide configuration information to the computing devices A N. This configuration information includes software updates in the form of images or other data files. For example the computing devices A N may include software applications that execute standalone or that interact with the servers . Updates to these software applications can be made by receiving an image or data file from the servers . The computing devices A N can write the received image to a memory or storage device. One advantage of this configuration is that it enables a system administrator to update remotely a plurality of deployed computing devices A N.

Further the storage device can be coupled to the servers to provide configuration information. The servers can read configuration information from the storage device for configuring the servers as well as for distributing configuration information to the computing devices A N via the network . More specifically the storage device can be distributed to the customer s premises with firmware images for the computing devices A N. The storage device can be coupled individually to each of the computing devices A N in order to provide an update or configuration information. Also the storage device can be coupled to the server . The server can then distribute the update or configuration information to each of the computing devices A N as appropriate.

The connection network operatively couples each of the processor the memory the flash memory the input output device controller the storage device controller and the communications interface . The connection network can be an electrical bus switch fabric or other suitable interconnection system.

The processor is a conventional microprocessor. In one embodiment the computing device is portable and powered by a battery. In this instance the processor or other circuitry may be designed for low power operation in order to provide satisfactory runtime before requiring recharging or replacement of the battery.

The processor executes instructions or program code modules from the memory or the flash memory . The operation of the computing device is programmable and configured by the program code modules. Such instructions may be read into memory or the flash memory from a computer readable medium such as a device coupled to the storage device controller . In addition instructions may be read into the memory or the flash memory from the storage device . In the illustrated embodiment the storage device is shown coupled to the input output device controller . One skilled in the art will appreciate however that the storage device may be coupled to any suitable interface of the computing device that corresponds to the interface on the storage device .

Execution of the sequences of instructions contained in the memory or the flash memory cause the processor to perform the method or functions described herein. In alternative embodiments hardwired circuitry may be used in place of or in combination with software instructions to implement aspects of the disclosure. Thus embodiments of the disclosure are not limited to any specific combination of hardware circuitry and software. The memory can be for example one or more conventional random access memory RAM devices. The flash memory can be one or more conventional flash RAM or electronically erasable programmable read only memory EEPROM devices. The memory may also be used for storing temporary variables or other intermediate information during execution of instructions by processor .

In one embodiment the flash memory includes an image of program code modules and user data. The program instructions associated with the program code modules are communicated to the processor via the connection network . Program instructions may be executed directly from the flash memory or communicated to the memory before execution by the processor . For example the flash memory can include program instructions for booting the computing device off the storage device that is attached to the expansion port of the input output device controller .

The input output device controller provides an interface to the input device and the output device . The output device can be for example a conventional display screen. The display screen can include associated hardware software or other devices that are needed to generate a screen display. In one embodiment the output device is a conventional liquid crystal display LCD . The display screen may also include touch screen capabilities. The illustrated embodiment also includes an input device operatively coupled to the input output device controller . The input device can be for example an external or integrated keyboard or cursor control pad.

The storage device controller can be used to interface the processor to various memory or storage devices. In the illustrated embodiment an optional internal storage device is shown for storing software applications network parameters user data system configuration and the like. In a typical thin client computing environment the computing device communicates with the servers for data storage functions. As one skilled in the art will appreciate the internal storage device can be any suitable storage medium such as magnetic optical or electrical storage. Additionally the internal storage device the memory or the flash memory may store and retrieve information that is used by one or more of the functional modules described below and with reference to .

The communications interface provides bidirectional data communication coupling for the computing device . The communications interface can be functionally coupled to the network . In one embodiment the communications interface provides one or more input output ports for receiving electrical radio frequency or optical signals and converts signals received on the port s to a format suitable for transmission on the connection network . The communications interface can include a radio frequency modem and other logic associated with sending and receiving wireless or wireline communications. For example the communications interface can provide an Ethernet interface Bluetooth and or 802.11 wireless capability for the computing device .

The modules include program instructions that can be executed on for example the processor to implement the features or functions of the present disclosure. The modules are typically stored in a memory such as the memory or the flash memory . As described above the program instructions can be distributed on a computer readable medium storage volume or the storage device . The computer readable storage volume can be available via a public network a private network e.g. the network or the Internet. Program instructions can be in any appropriate form such as source code object code or scripting code. One skilled in the art will recognize that arrangement of the modules represents one example of how the features or functionality of the present disclosure can be implemented.

The boot code module includes program instructions that are used to boot the computing device . This may include basic input output system BIOS code preboot execution environment PXE code and the like. As described below the boot code module can determine an appropriate device from which to boot the computing device . For example the boot code module can include functionality for loading a universal serial bus USB driver to enable the computing device to access the storage device during the boot process. Additional details on the boot process are described below and with reference to .

The application module includes program instructions for software applications. The application module may include a customized software application load. The storage device can be distributed with customizations that are loaded into the application module .

The update module includes program instructions for updating the configuration of the computing device . The update module may operate in conjunction with the other modules in order to overwrite or to change selectable portions of the program instructions. For example the update module may be responsible for applying service packs or adding additional functionality to the operating system module .

The configuration module may operate in conjunction with the application module in order to provide configuration information to the software applications that execute on the computing device . The configuration module may also be used to adjust system settings for the computing device . As one skilled in the art will appreciate the computing device may include numerous user selectable settings that require configuration for efficient standalone or networked operation. In one embodiment the configuration module reads instructions from an attached storage device . These instructions may be program instructions configuration scripts and the like.

The authentication module provides services to validate authenticate or authorize the storage device or the data stored therein. In one embodiment the authentication module can receive an authentication credential that is used to decrypt the image. The storage device may contain encrypted data in order to protect sensitive contents during distribution to the customer s premises. An access protection password or other credential that is used to unlock the storage device may be used instead of or in addition to encrypting the contents. For example a USB mass storage device may include a password based authentication process that unlocks the contents of the device. The user can provide the password in an interactive user interface or the password can be obtained from the flash memory or other component of the computing device .

The operating system module represents a conventional operating system for a computing device such as a personal computer handheld or embedded device. Example operating systems include Microsoft Windows XP and Windows Mobile which are commercially available from Microsoft Corp. Redmond Wash. . The operating system module provides an application programming interface API through which the modules or other application programs interact with the computing device . For example the application module calls a function of the operating system module in order to display an element on the display screen.

The computing device configured with the boot code may be referred to as a generic computing device because the computing device is not configured for any particular user. The boot code represents a minimal set of functionality that the computing device uses to access the storage device . The storage device typically provides an image that contains customized software applications or other functionality. As described in further detail below the boot code instructs the computing device to read the image and to store the image for future use.

Once configured in the generic state the computing device is distributed to a warehouse or to the customer s premises. One advantage of the present invention is that the system firmware or other software that the computing device needs for proper operation can be conveniently distributed with the storage device . Therefore the generic computing device can be shipped to the customer and be configured on site with the storage device .

If the computing device is generic then the method executes the boot code. As described in further detail below and with reference to the boot code accesses configuration information from the storage device and applies the configuration information to the computing device . After the configuration information is applied e.g. an image is written to flash memory the computing device boots using the written image.

If an image is available it is read into memory . Of course the image may also be read into another suitable storage device such as the flash memory . The method then determines if the image is encrypted. If the image is encrypted the method prompts the user for authentication data such as a password or other credential. The image is decrypted using the authentication data. If the image is not encrypted or after decryption the image is written into the memory or the flash memory and the method returns to the calling process.

One skilled in the art will recognize that writing the image to flash memory is advantageous because the flash memory is nonvolatile. As described above the computing device can then boot or reboot using the written image.

One feature of the present invention is the ability to generate a custom image for deploying the computing device . That is the computing device may be stored in a generic state and then loaded with a custom software configuration at the customer s premises. As noted above an image can be generated that includes a custom software application load as well as operating system software and system firmware. The use of the storage device to distribute an easily loadable image avoids the drawbacks associated with storing preconfigured computing devices that are awaiting shipment to customers. The computing device and the storage device may be packaged separately or together for distribution to the customer.

In another embodiment the component database can provide complete system images for certain predefined system option packages. For example if the customer order indicates system type a corresponding predefined image can be retrieved from the component database .

After the image is built the image is written to the storage device . As described above access protection or encryption features may also be added to the image. The storage device is then distributed to the customer or user. One advantage of the present invention is that the storage device is compact and lightweight which contributes to easy packaging and to inexpensive shipping costs.

The image is then written to the storage device . As described above access protection or encryption features may also be added to the image. The storage device is then distributed to the customer or user. To update the computing device the customer or user can insert the storage device into the expansion port . The update module can access the update image and make the necessary changes to the computing device .

The illustrated method generally iterates though a list of boot devices until a boot event occurs or the list is exhausted. At step the bootdevice is set to bootdevice . At step the next bootdevice is selected. Using an interrupt call sector of the selected bootdevice is read . The method then determines whether sector contains a valid boot signature. If the boot signature does not exist the method repeats by issuing an interrupt interrupt call on the next bootdevice.

If the boot signature exists then the selected bootdevice s sector data is placed into memory and executed . The sector code in turn loads the first sector of the active partition and executes this code. If the first sector of the active partition does not contain a valid boot signature then the method repeats by issuing an interrupt interrupt call on the next bootdevice.

In the illustrated embodiment the method overlays interrupt geometry data. Depending on the boot environment the storage device may be limited to 1.44 Mbytes of addressing capability which corresponds to the capacity of legacy floppy disk drives. However the method may read the BIOS parameter block BPB to obtain the parameters needed to address additional areas of the storage device e.g. the number of heads sectors and cylinders .

The information from the BPB may be communicated to the runtime application or loader by intercepting interrupt commands that identify the selected bootdevice s geometry values and by replacing the limited values with the actual ones. The overlay need only intercept a handful of functions and permit the others to operate in the standard fashion. Again this can be accomplished by an interrupt interception layer that permits read write operations but reports drive information from another source e.g. the BPB or other data area . This enables the boot loaders to read an entire device rather than restricting read operations to a limited region generally 1.44 Mbytes in size . The method then boots with a normal interrupt loader and to load the kernel files. The kernel can then boot the operating system.

One advantage of the illustrated method is that it can enable the computing device to access the storage device using a legacy or preexisting boot interface. That is the computing device may be able to access a flash memory based USB mass storage device using USB HDD hard disk drive or USB FDD floppy disk drive BIOS settings or bootdevices. In another embodiment a USB ZIP bootdevice may provide the ability to obtain data from the storage device from sectors outside the standard BIOS s restricted access region without the interrupt overlay described above.

Having described embodiments of computing device deployment using mass storage device which are intended to be illustrative and not limiting it is noted that modifications and variations can be made by persons skilled in the art in light of the above teachings. It is therefore to be understood that changes may be made in the particular embodiments of the invention disclosed that are within the scope and spirit of the invention as defined by the appended claims and equivalents.

