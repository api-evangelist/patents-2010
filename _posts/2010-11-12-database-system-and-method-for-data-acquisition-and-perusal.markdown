---

title: Database system and method for data acquisition and perusal
abstract: A data acquisition and perusal system and method including a database selection module, a database index generator module and a search module. The database selection module enables selection of a plurality of files for inclusion into at least one selectable database. The database index generator module enables generation of a searchable index of the data contained in the selectable database. The search module enables a search to be performed of the searchable index according to search criteria. The system allows for the capture of HTML data which is automatically indexed without human intervention and has the ability to automatically and accurately locate or “pinpoint,” and highlight specific text or groups of text designated by the user within the resulting database.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08396856&OS=08396856&RS=08396856
owner: 
number: 08396856
owner_city: 
owner_country: 
publication_date: 20101112
---
This application is a continuation of application Ser. No. 10 887 670 filed Jul. 8 2004 now issued U.S. Pat. No. 7 836 043 which is a continuation of parent application Ser. No. 09 257 714 filed Feb. 25 1999 now issued U.S. Pat. No. 6 834 276 B1 both of which are herein incorporated by reference.

The present invention relates generally to a data acquisition and perusal system and method for locating indexing and accessing information and more particularly to a data acquisition and perusal system and method for acquiring creating manipulating indexing and perusing data and to a method and system for locating and retrieving known or unknown data for the same purposes.

Computers were intended to provide an effective and efficient way for humans to manage locate peruse and manipulate data or objects. For example a first basic system and method is that demonstrated by modern word processor applications which have some search and text access capabilities however as far as is known they are limited to the current file that is open. Employing this method the user can request the location of a word in the text. Within an individual file the computer will then take the user sequentially to each location of that text. Only string searches are allowed. By repeatedly running the search the user can sequentially move from result to result. While it might be possible to open many files simultaneously the available resources and memory make this impractical.

A second improved system and method enabled by some computer operating systems include applications that allow users to search all available files accessible by certain software applications for words or simple phrases. They still require the user to open each of the files of interest in a word processor viewer or other application referred to in the first system and method to access the data. The search time required is relatively great because the data available has to be sequentially read and compared with the query.

A third system and method used by software applications provides improved search capabilities and is commonly known as a search retrieval engine . Among other things search retrieval engines can essentially search and access many thousands of files simultaneously and very quickly by using pre generated indexes of the data. For example a user can query an encyclopedia converted to an indexed database and by the use of highlighted text quickly determine every place a word or phrase occurs in the text and have the ability to instantly view those occurrences as desired. These products even take the user sequentially to each incident of highlighted text or hit. The computer can then take the user from hit to hit.

Converting a database like an encyclopedia into a format useable by a search retrieval engine is not simply a matter of converting its volumes into electronic files accessible by the user s computer. For efficient search performance the contents of the files are logically indexed as to location frequency etc. The search functions of the engine actually search the index to determine if the query criteria are met and then the locations of valid results are passed to the retrieval functions to display them. Without a well designed index a computer could take a long time to perform a search for a simple phrase that can otherwise be performed in a fraction of a second. Some search retrieval engine application vendors allow users to generate indexes for their own files through an indexing utility and others intend for indexing to be done only by electronic database publishers by use of a separate application designed for that purpose.

Currently a user desiring to employ the speed of a computer to search for and retrieve data from multiple disparate source files generally has three choices 1 use 10 the basic first system and method above to open each file in a word processor application and search them individually 2 use the second system and method above search each file using an operating system application and then open each file in the list of results in a word processor application and 3 obtain an indexed database of the sources along with a search retrieval engine from an electronic publisher or create a database usable by a search retrieval engine.

As far as is known no application has been devised however to adequately deal with the internet and yield the results described in the third system and method above. The internet is a vast and burgeoning source of information concerning nearly ever subject. But the internet is comprised of files available in SGML and its derivatives including HTML and XML and other hypertext type formats. A hypertext markup language such as HTML is a structured yet ambiguous language. In this application reference is generally made to HTML files and documents which is the most common format. However it is understood that this includes the SGML format and its other derivatives including XML and future modifications implementations and standards for use in data files databases and the internet. As far as is known having a computer automatically and accurately determine the exact location of text within an HTML type formatted document object or file is not accomplished in the prior art.

Consequently there is no known practical method or system whereby a user can efficiently and effectively use a computer s speed to search for and retrieve data from a set of files accessible by the computer and get pinpoint highlighted display of the designated text. It should be noted that the information desired may be in files objects or files that are unknown and available to the user. In addition to the internet many enterprises have extensive repositories of information stored in electronic form that may contain information an authorized user may desire and want to locate and access. Even at the lowest level an individual computer generally contains unknown or forgotten data that the user would find valuable. All of these repositories of information cannot be as efficiently accessed by the current art as is desired.

Using the current art in the third system and method above users can add electronic bookmarks to enable them to quickly return to any part of any volume of an encyclopedia referred to in the example above and they can copy portions for insertion into other documents of their own creation. By use of hypertext links appearing within the database a user is able to instantly view related data for which he had not searched. The links are generated according to a rationale applied when the database index was prepared. Adding hypertext links usable within a database is generally a more complex process. The links are intended to appear to the user in a color or format distinguishable from other data and when activated the computer is directed to display another highlighted portion of the database. By naming the instructions to the computer within links as pointers and what they link to as targets the process will be facilitated. A database can theoretically have an unlimited number of identical pointers even though what the user sees can be different for some or all of them but any pointer can generally only have one target a specific area of the database to display 

and targets are invisible to the user. Links must be sensitive to the context of the document and context sensitivity requires intelligence. Thus adding links to a database requires human intervention because current computers inherently lack any intelligence. Although simple linking based upon discernible patterns within text and targeted toward files matching those patterns can easily be done programmatically human intervention is still required to design and initiate the process. Further such favorable linking circumstances rarely exist within typical disparate data and even greater human intervention is required. Consequently search retrieval engine vendors essentially leave linking up to the creator of the search engine software or electronic publisher to do manually and the links are generally not customizable by the user.

Thus the vendors commonly provide technical specifications on how to craft pointer and target codes for the software and how to write programs to link their unique databases. However some word processing and other applications permit users to craft links among compatible files using manual processes.

If a user desires to have the searchable data include context sensitive links the choices are generally reduced to 1 obtaining a pre linked database from an electronic publisher or 2 creating a custom database and manually inserting links individually or by use of a custom program written for the unique situation. Beyond the problems of availability and lack of customization a fundamental problem with the first choice is that a publisher may not consider the same links to be important as a user does. Thus the publisher may include links that are not important to the user and may not include links that would have been important. A fundamental problem with the second choice is that manually inserting links requires a substantial amount of time and trouble that quickly outweighs any potential benefit to manually inserting links as the quantity of data increases. As far as is known the current art does not include a system to create links by designating pointers and targets and having the program automatically create links that are all valid.

It would be highly beneficial to have the results from computer searches of various sources of information that locate information from the various sources to be quickly and easily saved locally for accessing at a later time without having to redo the search and re access the sources of information. This saves search time and repeating the search which may not locate the previous information. The locally saved information can also be quickly accessed without having to relocate the information. An object of the invention is to allow someone to create his or her own custom organized database that can be utilized effectively. Each time relevant information and files are located they can be put into a database indexed and made available for use.

The limitations of prior systems are overcome by the present invention which is an improved method and system for acquiring creating manipulating indexing and perusing data and for locating and retrieving known or unknown data for the same purposes. In a preferred embodiment the system is a stand alone application residing on a user s personal computer that enables the user to create fully searchable databases or local sources of any size from any electronic documents accessible by the computer and selected by the user. It also enables the user to accurately and methodically locate undiscovered documents that may be of interest. By use of a word processing means integrated into the application it enables the user to create and include new documents into the database or to create retrievable documents within the application. Any databases or documents that the user creates can be password

The invention provides a user with the ability to train a search engine to automatically and methodically search the internet or other data sources according to derived or evolved limitation criteria. Each set of such criteria is stored for reuse or modification as the user desires. Without limiting the criteria the system could be directed to retrieve and completely index every file that existed on its available data sources. While that would guarantee that all data in those files would be searched for data that the user wants there are practical limitations.

If the data source is vast like the Internet the system would attempt to index all of its files objects or documents but it would quickly encounter storage limitations on the user s computer if default limitations were not automatically imposed. By artfully estimating the time and storage requirements and matching them to available resources the system guides the user to impose limitations to produce the desired results. This method allows users to completely index all of some data sources to filter and sort smaller percentages of greater data sources or to survey large data sources such as the internet. In the latter case the user can refine the resultant survey to identify smaller but more relevant parts of the data sources. After sufficiently iterating the refinement process the user will be able to index and search all selected and relevant data. Thus this system and method enable a user to predictably and efficiently solve the problem of selecting and comprehensively searching relevant data from sources with unknown content by combining human intelligence with the indexing and search retrieval capabilities of a computer. Since the system can be trained to repeat all or parts of previous actions the user s instructions can be perfectly carried out while repeatedly using different search criteria.

Uses of the system include those identified herein as well as many others. For example a vendor could prepare a database kept on a remote server that contains continually updated information to be accessed by a computer running this system. Among other things the database could contain information authorizing the user to continue to use the system and query the database. Independent of the server the user could then employ all or part of the system s capabilities for other purposes as desired.

In one embodiment commercial electronic database publishers could use a system according to the present invention as a publishing system to create databases with more or less homogeneous content. For example one publisher may produce a monthly searchable linked database containing issued United States patents another might produce a linked database containing decisions of appellate courts and another might produce a linked database containing documents required to be filed by various regulatory agencies etc. Using prior systems to produce such databases requires substantial programming skills to incorporate reference links within the database but in practice many such links are invalid because a referenced document does not exist. Using the system according to the present invention does not require such skills because it automatically creates only valid and verified links. The graphical user interface is easily modified to comport with a particular look and feel desired by the publisher.

In another embodiment a data provider could maintain a continually updated database of information e.g. statistical or a glossary on a remote server that the user accesses via a network such as the internet. Upon being started by the user an application automatically connects to the remote database when information from the database is needed and disconnects once it is obtained. If the remote database has changed the user will be notified and the user s database index can be regenerated to accommodate the changes. By storing user authorization codes on the remote server in a database or table for that purpose the provider can verify that the user is still entitled to access the service provided. The application on the user s computer can automatically be rendered dysfunctional by the passage of time unless it successfully renews its operating status by connecting to the provider s authorization code database. This embodiment provides advantages to both the data provider and the network service provider 1 the system application can essentially be provided on a subscription or rental basis without the necessity of distribution media or elaborate license or copyright protection schemes and 2 the network service provider s effective bandwidth is greatly increased because the system only connects to the remote server on an as needed when needed basis instead of requiring an active modem connection continuously.

Another object of the invention is to provide a method and system for storing search results from various sources including the internet with internet format files objects or documents. The locally stored results can be automatically indexed for fast searching and hyper linked by the user to make subsequent finding of the previously located information quick and simple.

of the prior art and can be used for general purpose data acquisition creation manipulation indexing and perusal while connecting to remote data sources only as needed.

A data acquisition and perusal system and method according to the present invention includes a database selection module a link module a database index generator module and a search module. The database selection module enables selection of a plurality of files objects or documents for inclusion into at least one selectable database. The link module enables custom links to be defined between selected terms of selected files of the selectable database. The database index generator module enables generation of a searchable index of the data contained in the selectable database including the custom links so that the searchable index includes only valid links. The search module enables a search to be performed of the searchable index according to a search criterion.

The plurality of different files may include a plurality of different file types such as internet formatted files objects or documents including HTML type formats and word processor formats text formats RTF formats etc. Generally each database includes one or more files of a particular type. The database selection module may be configured to enable selection of the plurality of files both locally and remotely via a network. For example the data acquisition and perusal system and method may be implemented on a computer coupled to a network where the network may further be connected to the internet. The data acquisition and perusal system and method may be configured to copy internet files to a local storage disk or to simply maintain a link to the internet files of interest.

The link module enables association of any selected link term with any of the plurality of files in the selectable database. The link module may further enable at least one alias term to be defined for any selected link term to enable a link to be established between each alias term and any of the files in the database. Each of the files may further include one or more fields. The link module further enables field links to be defined between any two or more of the plurality of files. Such field links may be defined according to patterns where the patterns may further be defined using wildcard characters that each replace one or more digits or characters.

The search module may further enable sorting of any files of the selectable database that meet the search criterion. In one embodiment such sorting may be according to the respective fields of the files. For example the files may be sorted by date by name or by any other field types or descriptions.

The data acquisition and perusal system and method may further include at least one input device and a display utility including a graphic user interface GUI . The input device and display utility enables graphic interaction with the database selection the link and the search modules via the input device. The display utility displays at least portions of files in the selectable database that meet the search criterion. The portion of a displayed file typically includes any text that meets the search criterion. Such text is usually graphically indicated such as via color style highlighting etc. Also any selected link terms defined via the link module are also indicated in a similar manner. Further the display utility enables interaction with any indicated selected link terms via the input device to enable perusal of linked files in the selectable database. For example a user may double click on highlighted text indicating a link term in a displayed file where the data acquisition and perusal system and method jumps to and displays the linked file. Operation is similar for alias link terms if defined.

The system and method may automatically unambiguously and accurately place reference links among documents within a database it creates according to a schema controlled by the user. These links enable the user to instantly view a file object or document referenced by another file object or document currently being viewed and to backtrack to any point of origin in the database. The system and method does not modify or make extraneous copies of the contents of the original database files objects or documents. If a file object or document is modified or deleted the integrity of the database is not affected with respect to the other files objects or documents because either the database i.e. the index will be regenerated or an error message will be presented telling the user that the file object or document has been

modified or deleted. The application also may give the user the option to create compressed password protected databases for secure dissemination to other users or simply to secure the files objects or documents and database indexes for personal use.

Embodiments of a system and method in accordance with the principles of the present invention provide methods and systems for acquiring creating manipulating indexing and perusing data for locating and retrieving known or unknown data for the same purposes for automatically connecting to remote network computers on an as needed when needed basis for validating a user s rights to use the system and for securing pertinent data from unauthorized use.

Referring to the drawings is a block diagram an exemplary computer system that could be used to illustrate various aspects of a data acquisition and perusal system implemented according to the present invention. The computer system is preferably a conventional IBM brand compatible personal computer PC system or the like and includes a motherboard and bus system coupled to at least one central processing unit CPU and a memory system . The motherboard and bus system include any kind of bus system configuration such as any combination of a host bus one or more peripheral component interconnect PCI buses an industry standard architecture ISA bus an extended ISA EISA bus micro channel architecture MCA bus an AGP bus a universal serial bus USB etc. along with corresponding bus driver circuitry and bridge interfaces etc. as known to those skilled in the art. The CPU preferably incorporates anyone of several microprocessors such as the 80486 Pentium Pentium II Pentium III etc. microprocessors from Intel Corp. or other similar type microprocessors such as the K6 microprocessor by Advanced Micro Devices and supporting external circuitry typically used in PCs. The external circuitry preferably includes an external or level two L2 cache or the like not shown . The memory system may include a memory controller or the like and be implemented with one or more memory boards not shown plugged into compatible memory slots on the motherboard although any memory configuration is contemplated. The invention is also applicable to other microprocessors other architectures and other operating systems.

The computer system may include one or more output devices such as speakers coupled to the motherboard and bus system via an appropriate sound card and a monitor or display coupled to the motherboard and bus system via an appropriate video card . One or more input devices may also be provided such as a mouse and a keyboard each coupled to the motherboard and bus system via appropriate controllers respectively as known to those skilled in the art. A storage system is coupled to the motherboard and bus system and may include anyone or more data storage devices such as one or more disk drives including floppy and hard disk drives one or more CD ROMs one or more tape drives etc. Other input and output devices may also be included as well as other types of input devices including a microphone joystick pointing device voice recognition etc. The input and output devices enable a user to interact with the computer system for purposes of data acquisition and perusal as further described below.

The motherboard and bus system may be implemented with at least one expansion slot which is configured to receive compatible adapter or controller cards configured for the particular slot and bus type. Typical devices configured as adapter cards include network interface cards NICs disk controllers such as an IDE or a SCSI Small Computer System Interface disk controller video controllers sound cards etc. The computer system may include one or more of several different types of buses and slots such as PCI ISA EISA MCA AGP USB etc. Each slot is configured to receive an expansion card such as a sound card a modem card a network interface controller NIC or adapter etc.

Other components devices and circuitry are normally included in the computer system but are conventional and are not part of the present invention and are not shown. Such other components devices and circuitry are coupled to the motherboard and bus system such as for example an integrated system peripheral ISP an interrupt controller such as an advanced programmable interrupt controller APIC or the like bus arbiter s one or more system ROMs read only memory comprising one or more ROM modules a keyboard controller a real time clock RTC and timers communication ports non volatile static random access memory NVSRAM a direct memory access OMA system diagnostics ports command status registers battery backed CMOS memory etc. Although the present invention is illustrated with an IBM compatible type PC system it is understood that the present invention is applicable to other types of computer systems and processors as known to those skilled in the art.

A data acquisition and perusal system or application program according to the present invention may be stored in the storage system . The database application program is retrieved into the memory system and executed by the CPU . As described more fully below the database application program retrieves local files such as stored in the storage system and remote files such as accessed via a network and generates a searchable database index. Although reference is made in the specification and claims to computer files it is understood that the term filed encompasses documents and any other digital object that contains machine or individual readable or searchable information. The searchable index may be generated in the memory system or the storage system for longer term storage. The

database application program further includes search and retrieval functions that enable a user to search the searchable index as more fully described below. The computer system is included to illustrate that a data acquisition and perusal system and method according to the present invention may be realized on a modern computing machine with a CPU random access memory RAM and external storage such as the storage system . The computer system enables a user friendly graphic user interface GUI implementation with display and input capabilities. There are no explicit restrictions on CPU architecture or display technology.

Referring now to a block diagram is shown of a network system that communicatively couples a plurality of computer systems or computing devices etc. together via a communication medium . Any one or more of the computing devices may be implemented in the same or a similar manner as the computer system . The network system may include anyone or more network devices not shown such as hubs switches repeaters bridges routers brouters etc. The network system may operate according to any network architecture such as Ethernet Token Ring Token Bus ATM etc. or combinations of such architectures at any available speed such as 10 Megabits per second Mbps 100 Mbps 1 Gigabits per second 1 Gbps etc. The network may form any type of Local Area Network LAN or Wide Area Network WAN and may comprise an intranet and be connected to the internet.

The computer system can operate a data acquisition and perusal system and method according to the present invention in a standalone mode. If coupled to a network such as the network system the computer system can also access and retrieve remote files located on the networked computers . Of note the communication medium may be configured for an internet connection an intranet connection or other network connection. If the computer system is coupled to the internet to an intranet or to another network via the connection medium the computer system can likewise access and retrieve files located through those connections. A system according to the present invention does not require that either original database source files or generated index files be located on the computer system .

Database source files or documents are typically divided into fields or areas when they are created. These fields may result from word processing application that is used to create the documents. For example WordPerfect formatted files documents contain both hidden and visible fields in almost every document that is created. Likewise Microsoft Word hereinafter MS Word formatted files documents contain certain fields. In addition internet or HTM or HTML HyperText Markup Language type format files objects or documents contain many hidden and unhidden fields. Thus the files documents objects referred to herein should be understood to contain fields.

Further a system according to the present invention includes special features for handling composite file types such as HTML format files used over the internet. Composite files can include display codes for arrangement graphics fonts hyperlinks and other characteristics that allow assembly of what appears to be a single document presented on the computer monitor but which actually may be a compilation of multiple text and graphic elements stored in separate files. Unlike integral files composite files are more efficient from a disk storage space standpoint than integral files because their reusable components such as graphics can be used many times by different files without having to be replicated for each file. Composite files can also include small integral programs called scripts e.g. Java applets or Java scripts that instruct the computer to perform other tasks while the HTML page is displayed. Regardless of the visual complexity of an HTML composite file from a searchable database perspective the crucial parts of the HTML composite file are those parts that contain text.

The file database includes one or more files of type A shown as files AF AF . . . AFn where n is any positive integer. The file database may further include one or more files of type B shown as files BF BF . . . BFn one or more files of type C not shown etc. Examples of file types include Internet or HTML format or simply HTM word processor format including DOC files generated by MS Word or similar word processing files generated by WordPerfect text format RTF Rich Text Format files drawing files database files etc. The incompatibilities and between various formats has become less since several type of formats may be included in a single file object or document. In this manner the present invention contemplates any number of files or documents of any type. It is noted that anyone or more of the files may be copied into local storage or may be simply accessed via an existing link to that

file. For example in a default mode internet files are copied locally. However the user may choose to simply access the file via a valid link or address.

The system shown in includes a database selection module that enables a user to select any number of any type of files from the file database for inclusion into a selectable database . Of note the term module represents any combination of hardware and software implemented to achieve the desired functions. For example one or more modules described herein may be incorporated into a database application which is stored on the storage system and retrieved into the memory system for execution by the CPU . The selectable database comprises one or more databases shown as D D D etc. where each database includes one or more files selected by the user from the file database . The selectable database may include a single database with a single file or multiple files or a plurality of databases each including a single file or multiple files. The

database selection module enables the user to select and define the selectable database . For example the selectable database may include a database including files of a first type AF AF etc. . a database including files of a second type BF BF etc. and so on.

The system may further include a link module that enables a user to define one or more custom links between selected files of the selected database . Such links are typically referred to as hypertext links. For example the user may choose one or more link terms that should be linked to at least one file either in the same database or a different database in the selectable database . The link module allows an essentially unlimited number of such link term file pairs to be created. As further described below when a link term is encountered in a file or document the link term is indicated or otherwise highlighted so that the user can select the indicated link term to jump to the linked file. The link module may further enable the user to define one or more aliases for each link term. For example the user

may define the terms grape tomato raspberry etc. as aliases of a link term vine fruit . Each alias is treated in a similar manner as its corresponding link term. Each of the files in the selected database may further include one or more fields. The link module enables the user to define field links to link similar fields between two or more files. Such field links may be generated according to patterns where such patterns may further be defined using wildcard characters that each substitute for one or more digits or characters depending upon the function of the respective wildcards as further described below.

The system further includes a database index generator that generates a searchable index based at least on the selectable database . The database index generator may further include the link information from the link module so that the searchable index includes valid user defined links. In this manner the database index generator is capable of processing the user defined links in view of the selectable database and incorporate only valid links into the searchable index . The system further includes a search module that enables the user to perform any number of searches of the searchable index according to any desired search criterion. The search criterion may be according to any desired function or defined expression s such as a single term literal phrases or terms comprising text in quotes multiple words and Boolean operators e.g. AND OR. XOR. etc. etc.

The system may further include a display input utility that interfaces one or more of the modules of the system such as the database selection module the link module and the search module . For the computer system the display input utility may be implemented using the display devices such as the video card and corresponding display and input devices including the mouse and mouse interface and the keyboard and the keyboard interface . Further the display input utility includes one or more software programs or drivers executed from the memory system by the CPU to interface the respective modules. Such programs or drivers may be separate or integrated into a single application including the modules.

The display input utility preferably includes a GUI Graphic User Interface that enables the user to select and display one or more of the files of the file database such as by pathname including directories and filenames or URL Uniform Resource Locator addresses as well as one or more of the databases of the selectable database . The display input utility enables the user to interactively define link information via the link module . The display input utility enables the user to launch the database index generator to generate the searchable index . The display input utility enables the user to define search criterion via the search module and to view the results of a search. As described further below the results may be viewed as a list of files that match the search criterion and the user may select and view the contents any of the listed files. The display input utility displays portions of the files that match the search criterion as well as any predefined links

The system shown in is exemplary only and may include other modules and functionality. For example the system may include an integrated word processor dialog one or more link generator dialogs a search retrieval dialog a display options dialog an integrate browser dialog etc.

The system provides several advantages over other types of search retrieval applications or database programs. The system enables a searchable index to be generated that includes valid customized links. The searchable index provides a static and enables a snapshot of files or databases to be taken at a given time for perusal by a user at any time even if the originating files change or are no longer valid. The searchable index is also dynamic in that the user may update the selected files and links and generate an updated index. The system also enables pinpoint searches of multiple files at the same time including multiple HTML files retrieved or accessed locally or via the internet.

In operation the search module first compares each term of the search query against words contained in a stop word list of the database index . The stop word list is a file containing a list of noise words or words that frequently occur In a file document that do not contain distinguishable characteristics. For 5 example stop words are words such as and as the a I for certain punctuation etc. Although a default stop word list is provided for each database index that is to be generated a user may edit the stop word list for a particular database index that is to be generated and include additional stop words or remove unwanted stop words from the default stop word list. If a stop word is found among the terms of a search query the search for that term is terminated because the search module considers that term to be a noise word and does not allocate further resources toward searching the files for that term. However the length of the term is stored in the search engine s dynamic buffers for future phrase analysis. For example if the search query contains the terms big for till the word for is considered a stop word and a length of the stop word i.e. five three letters plus two white space delimiters is stored in place of the spaces and the word for . Thus as described in greater detail herein the search query becomes a search for files documents that include the words big and tall with five spaces characters between the words. If the search had been the search query big as tall where the word as is considered a noise word the search query becomes a search for the words big and tall with four spaces characters there between.

If a stop word is not found that corresponds to a term of a search query the search module then searches a master word index for the term of the search query. The master word index like the stop word list is generated at the time the database index is generated and is typically a binary file that includes a reference to each word other than stop words that appears in each of the files documents of the database that is to be searched using the search module . Each word of the master word index is associated with information regarding the word s length and regarding the files documents in which the word appears.

The master word index is best conceived as being a file made up of three parts which are referred to herein as Part Part and Part . Conceptually Part of the master word index file is a list of segments each segment corresponding to a file document number. For example segment number one corresponds with file document number one segment number two corresponds with file document number two etc. Further each segment is actually a smaller list whose beginning and end points are known by Part of the master word index file. Of note Part of the master word index file is written only if it is needed and thus only if there is more than one file in the database. In the case of a one file database Part is not written because it is not needed to distinguish one file from another.

Part of the master word index file like Part is a list of segments however each segment corresponds to each of the words in the database and is combined with information needed to find files documents in which a given word appears in the database. Of course if the database contains a single file Part becomes the first part of the master word index file. In one embodiment the standard segment of Part is broken down thusly 

The information contained in Part of the master word index enables the search module to expedite searching procedures for any search query that may be entered into the search module .

Part is a sequence of three indices herein referred to as a first index a second index and a third index for eliminating search terms that do not appear in Part of the master word index file. Essentially once a database index has been generated the search module uses Part as a negative search index i.e. an index to quickly eliminate search terms that do not appear in the database. In one embodiment before the first of these three indices there is a two byte ASCII 5 ASCII NULL pair that serves as a dividing point between Parts and .

The first ten long integers are indices into the Part information for words starting with 0 9 . Thus when the database index is generated offsets for the words starting with 0 9 in the Part data are recorded in each of the first ten long integers. If no word in Part starts with the given single digit four ASCII 255 s are written into the corresponding long integer of the first ten long integers. Following these ten long integers are 100 long integers for words starting with the pairs 00 99 . Similar to the first ten long integers offsets for words in the Part data are recorded but if no word starts with the given pair four ASCII 255 s are written to that long integer of the first index.

The second index is an index for odd leading characters. This index is a list of 255 long integers corresponding to ANSI characters 1 255. Like the first index offsets for words in the Part data are recorded but if no word in Part starts with a given character four ASCII 255 s are written to the corresponding long integer of the second index. Also if the given character is a letter a numeric digit or any other character that a user is not intended to find with the search module four ASCII 255 s are written to the long integer that represents that character.

The third index is a list of long integers that index words with alphabetical leading characters. The third index is of variable length depending on whether the index is a two or a three dimensional index to be described herein . The first 26 long integers in the third index are offsets for words in the Part data that begin with the single letters a through z . If no words in Part begin with a given letter four ASCII 255 s are written to the corresponding long integer. The next 676 26 squared long integers of the third index are offsets for words that begin with the pairs aa ab ac etc. through zz thus creating a two dimensional index from the third index. Offsets for these words in the Part data are recorded in the 676 long integers but if no word begins with a given pair four ASCII 255 s are written to the corresponding long integer. If desired the third index can be a three dimensional index i.e. an index including references to single alpha characters 26 pairs of alpha characters 676 and three alpha characters. If the index is three dimensional then 26 cubed 17576 long integers follow zz . These long integers index words beginning with the triplets aaa aab aac etc. through zzz . Again if no word begins with a given triplet four ASCII 255 s are written to the corresponding long integer for that triplet.

Following these three indices is a nine byte string. The string begins with a single character that is ASCII 2 if the third index is two dimensional and ASCII 3 if the 5 third index is three dimensional. Following this character is a long integer corresponding to the offset at which the Part data begins i.e. the first character following the Part data if there is any Part data. The last four bytes are a long integer corresponding to the first byte that follows the last byte of the Part data. This is the offset for the ASCII 5 in the ASCII 5 ASCII NULL pair that tags the beginning of the three indices of Part . Because the size of the three indices of Part can be computed exactly based on the known dimensions of the alpha locator string as coded in byte of this 9 byte string this filial four byte long integer is not strictly necessary.

After the search module determines which files contain the search terms a word number index is accessed to find the exact location of the search terms in each file of the database. The word number index is included in the database index and can be described by two files a OSI file and a OSF file . The terms OSI and OSF are somewhat arbitrary character strings and are commonly used as file extensions for the respective files in the word number index . Broadly speaking the terms represent a file OSF and an index OSI to that file but for purposes of understanding each term is referred to as a file from a portion of the database index . It should be noted that in a similar manner the remaining portions of the database index are also designated with similar character strings to designate files included in the respective portions of the database index .

The word number index is used by the search module to find the character and slot positions of words in database files. A character position is defined as the number of the logical byte or character in a file at which a word starts. For text files this is straightforward. For RTF DOC MS Word and HTM files a translation from the actual binary file as stored on the disk to the logical file is necessary. A slot position is defined as the numeric position of the word in the file a word being defined as any contiguous unit of text including stop words that appears between white space. Hence for a file whose sole contents is the string Have a nice day the word nice has a character position of 7 because the count starts at 0 where H is at position . In addition the word nice has a slot position of 3 because the count starts at 1 where Have is at position .

As stated the DSI file is an index into the DSF file and contains a list of indices. This list contains a sequence of long integer pairs encoded as eight bytes for each file in the database. For a file which contains searchable words and has an entry in the DSF file the first long integer in a DSI long integer pair is a start position in the DSF file of information relating to that file and the second long integer in the pair is an end position of the information in the DSF file . For a file which contains no searchable words such as an HTM file that is simply a frame container or a nonsense file that is filled with stop words only each long integer of the long integer pair has a value less than 0 indicating that no DSF entry exists for the particular file.

With reference to the DSF file for a database index contains a sequence of word position tables for each file in the database that contains searchable terms. Of note some files of the database may be without searchable terms and thus not included in the DSF file . As stated examples of files without searchable terms might include HTM pages that describe frame containers only and thus have no searchable data of their own or nonsense files which contain only stop words. The beginning and end of each word position table in the DSF file is coded in the companion DSI file . For each file which has a word position table the table is laid out in columns as shown by a single row view.

The first column of the word position table includes character positions . The character positions comprise variable length binary strings containing a sequence of long integers indicating character positions at which a given word appears in the file for which the word position table was generated. In the second column of the word position table a word slots list is provided which is another variable length binary string containing another sequence of long integers each indicating a slot position at which given words in the file appear. The correspondence between the character positions the word slots and their associated words is recorded in a locator string . the third column of the file s word position table .

In this embodiment the locator string is a variable length binary string containing a sequence of twelve byte sub segments each sub segment coding three long integers. As illustrated in each twelve byte sub segment of the locator string begins with a word number . The word number is followed by a character position index which is an index into the first column of the word position table and indicates the location of the long integer that represents the position of the first character of the word in the file. This character position index is followed by a slot position index which is an index into the second column of the word position table the word slots list and indicates the location of the long integer that represents the position of the word in the file.

Referring to a number of elements in locator string comprises the fourth and last column in the word position table . The number of elements in locator string is a long integer and stores the number of sub segments in the locator string .

Referring back to a WDN file is shown that represents a streamlined master word index and contains data that is loaded into WDN maps which are used for word searches on primary databases. These searches are typically faster than direct searches of the master word index because the WDN file is commonly loaded directly into the memory of the computer system . Of course compared to accessing the hard disk storage system of the computer system the memory provides faster access for the search module . However the memory is limited in size and thus the size of the WDN file may be limited.

In this embodiment the data in the WDN file consists of segments one segment per each word in the database where each segment consists of 52 bytes. The first 40 bytes contain the string representation of a given search word e.g. apple . This string is padded on the right with spaces so that it is always 40 bytes long thus allowing easier loading into the word map. The next twelve bytes precisely duplicate the data in the three long integers stored in Part of the master word index . In other words the first long integer of the twelve bytes encode the word s word number. The next eight bytes encode two long integers whose interpretations depend upon one another. Refer to Table I for possible interpretations.

For file document organization the database index also includes a contents table to assist the search module to organize files documents for display when a search has completed. In this embodiment the contents table includes two files a COI file and a COF file . The contents table operates in conjunction with fields list files . The COI file is an index into the COF file . The COA file contains a sequence of four byte binary encoded long integers one long integer for 20 each file in the database. These long integers encode a start position in the COF file at which information for the given file begins. For example to find the field information for the thirteenth file in a twenty file database the software of the computer system retrieves the thirteenth long integer encoded in the COI file . The system retrieves the fourteenth long integer encoded in the COI file to determine where the fourteenth file s information begins and the thirteenth file s information ends in the COF file . Using these two values the system then extracts the characters from the COF file and thus obtains all the field information for file thirteen of the database. Of course for file twenty in this example the system simply reads the twentieth long integer in the COI file to find the start position for the information in the COF file . Since no file follows the last file the end position for the information is simply the end of the COF file .

The COF file contains the field information for each file in the database. Although each file in a given database has the same number of fields though a particular file may have several blank fields it should be noted that different databases may have different numbers of fields for the files in their databases. For example HTM databases typically have fewer fields per file than databases containing MS Word documents. Field information for a particular file is tab delimited. In the embodiment shown characters are not used to delimit the field information for one file from the field information for another file. Instead the last text character of field information for one file is immediately followed by the first character of field information for the next file.

When performing a search of a database search results for a database may be ordered based on a number of different file fields taken from the fields list files including title and date fields. The fields list files aid in determining a proper sort order for files based on different fields. These different files are designated C C . . . CO Files . Each of these files is a list of four byte binary encoded long integers. The long integers correspond to the numbers of each file in the database. The file numbers are presented in the order in which those files should be presented so that the files are sorted according to the given field order. For example in a four file database where field is a title field and the files in the database are as follows 

Referring to the WDN file is part of a word lists structure . The word lists structure includes files that contain different organizations of information associated with tile words from the selected databases the files being available to expedite the search of the database index for the terms of a search phrase. In this embodiment the word lists structure includes a word length WDL file that comprises an index of words according to their length a reverse word order WDR file that comprises an index of words spelled in reverse order i.e. right to left order and that are alphabetized according to the reverse spelling of the words and the WDN file . Thus the word lists structure is useful when a search query includes terms such as leading conflation searches i.e. searches that call for all words meeting a search criteria in which only the last few letters of the search term are required to be met in the search query. For example a search for ample creates a hit for the words sample example ample etc.

In this embodiment if the search term is not found in the WDN file the search for that term is terminated because the files documents of the selected databases do not contain the term of the search query. If the search term is found in the WDN file the exact location of additional information about the term stored in the master word index is provided to the search module . If the computer does not have enough memory to store the WDN file in a memory map the master word index is searched directly for all information about the word thus bypassing the WDN file of the database index . In one embodiment WDN files of three databases are stored in memory if possible because users frequently select three or less databases to search and typically three or less WDN files do not overly burden the memory of a computer system operating the search module .

Of note the search module must still perform more tasks before displaying the documents that fit the search conditions and these tasks are not necessarily related to any specific search. Any document displayed also exhibits any hypertext jump links tying it to other files in the database to which it belongs. When the database is indexed to generate the index files a jump link list is also generated. It contains 10 an OAI file comprising an index into an OAF file which contains expansive data about hypertext links that exist in the database files.

To assist in the understanding of the database index the following narrative of a search for the word unique from the perspective of is offered. In this example a database index is created for each of three databases. One database includes three HTM files a second database includes three RTF files and a third database includes four DOC files. In each of the databases the word unique appears twice in one document and once in another document. Therefore upon a search for the word unique each database has two files with at least one hit one file with two hits and one file with one hit. The user selects the three databases and generates database indexes. The user presses Enter in the search dialog requesting a search of the selected databases for the word unique . The search module determines that there are three databases selected and all are primary databases. Because they are primary databases the corresponding WON files are loaded into memory .

Starting with database the HTM database the search module searches the HTM WDN file for the word unique . The return value indicates that unique exists in this database has a given word number e.g. 138 and has two associated numeric values. In this case the two values might be 4 and 68. The interpretation of the numeric values is carried out according to the interpretations described in Table I where x 4 and y 68.

Because the HTM database is a three file database and x is 4 then row of Table I applies i.e. x or 4 minus the number of files equals one. Thus one file does NOT contain the word unique but the other files do. The file number of the single file that does not contain the word unique maybe found at position y 68 in the master word index . The search module next looks in the master word index at position and reads one four byte binary encoded long integer whose value is 1. This is interpreted to mean that files and in this database contain the word unique . Thus all the files in the first database that contain the word unique are known. The search module next performs a search on the second RTF database with similar results perhaps finding that unique was word number and files and contain the word unique .

This is followed by a check of the third database i.e. the four file MS Word DOC database where the word number is 190 and the numeric values are x 6 and y 156. Again according to Table I the return values indicate that two 6 4 2 of the four files in the database do not contain the word unique and those two files are recorded at position of the master word index file . Reading the two four byte binary encoded long integers at position in the master word index indicates that files and do not contain the word unique and thus files and do contain the word unique . Thus at this point the user knows that each of the three databases has two files that contain the word unique . These files include Files and of Database Files and of Database and Files and of Database .

With this information in hand the next step of the search module is to display the titles and other appropriate fields of the found files in the dialog in the sort order specified by the user. In this example assume that the user is sorting by document title and that the document title corresponds to field number four.

final display selected by the user. Initially the file number order may be represented as the following ordered pairs database number file number and . The search module begins by loading the full contents of tile first database s C file member of since ordering is by field number four. A comparison of the ordered contents of the C file to the two hit file numbers for database indicates that file should be displayed before file . This process is repeated for databases and resulting in a final sorted list of .

Now that the search module has sorted the complete hits list the numeric pairs are translated to field list strings . The search module begins by looking in the COI file of Database s contents table . In this example the COI file indicates that the field information for file begins at position . Further because is the third and final number stored in the COI file and the total file length for the COF file is 172 the field information for file ends at position . Reading the data in the COF file from position to the search module gives the fields for the file including a file name field one of 1uniq.htm a title field field four of Unique appears only once and a closing date field with blank fields in between. The search module sorts these fields and composes a string in which field four is presented first followed by the database name followed by a number of other mostly blank fields excluding the file name and concluding with the file date. This string is output to the display. A similar process is carried out for each file hit allowing a total of six field strings to be output to the dialog display .

At this point it is up to the user to select a file to view. If the user selects the third file in the list which would be the first file of database the dialog is closed and file of database starts to open. During the opening process OAI and OAF files and for database are checked to see if any string ranges in the RTF file need to be highlighted and treated as jump links. In this case no jump links exist in the file. Also during the opening process the word number index for database is used to determine the character ranges in file of database that are to be highlighted and treated as search terms located in the file.

The first step in using the word number index occurs when the search module opens the DSI and DSF files and for database . The DSI file is a binary file listing pairs of long integers each long integer coded as a four byte binary number. Every file in a database has a corresponding pair of long integers in the DSI file listed in file number order. Hence file corresponds to the first pair of long integers in the DSI file and the last file in the database corresponds to the last pair of long integers in the DSI file . If both long integers are positive in value then they are interpreted as beginning and ending indices into the DSF file indicating the start and end of a word position table describing a database file. If both long integers are less than 0 then the DSF file contains no entry for this file.

In the case of file a DSF entry exists so the first two long integers in the DSI file indicate the beginning and ending ranges for this entry in the DSF file . The search module temporarily extracts this segment into main memory and examines it. The layout of information in this segment is determined by first examining the last four bytes of this segment and translating it into a number. The number is the number of elements in the segment s locator string which immediately precedes the last four bytes of the segment. The search module knows that each locator string entry is twelve bytes long and thus the locator string is 1200 bytes long if the number of elements is 100. The search module then examines the first entry in the locator string . This entry as is true of all the entries codes three long integers in its twelve bytes. The first four bytes code the word number for the first indexed word in the file. For example the file may begin with the word zebra and end with the word aardvark but since aardvark lexically precedes zebra aardvark is considered the first indexed word in the file. The second four bytes indicate the character position index information for this first word which should be 0 indicating the beginning of this DSF segment. The third set of four bytes indicates the start of the slot position index information for this first word which will thus be the position in this DSF segment at which the word slots list information begins. Thus the DSF segment has been divided into four parts including the character positions addressed by the second byte of each locator string the word slots list addressed by the third byte of each locator string the locator string in this case containing 100 twelve byte segments and the number of elements in locator string in this case .

As stated earlier if the word number for unique in database is 122 the 20 locator string is searched for an entry whose word number portion is 122. Once this locator string entry is found the second long integer in the locator string is read and interpreted for example a value of 68. Following this the next locator string entry is read and interpreted for example a value of 76. Thus the eight bytes starting at 68 and ending at 76 in this segment indicate the starting positions for the word unique in file . Since these bytes are interpreted as four byte long integers this indicates that unique occurs twice in file . For example the first long integer could indicate that unique begins at character position and the second long integer could indicate another instance beginning at character position .

With this information plus the knowledge that unique is six characters long the search module is able to identify character positions to and to of 10 file in database as the location of the two instances of the search term in this file. These text ranges are indicated through operations such as highlighting and the file is finally displayed for the user. Of course the search module treats the character positions in the remaining files in a similar fashion for indicating or highlighting the terms for a user.

Each database has an initialization file that the software of the system uses to generate the database index . Once all selected databases have been validated or deselected and success is achieved at block the validated databases initialization files are loaded at next block and then operation proceeds to next block where a start screen is displayed and the program waits for user instructions.

When logged in to the program a user may generate a database index. is a flow diagram of an index generator processing sequence of the database application of . When the user starts the database application a database generator initializes and loads previous settings at block . The database generator then generates a table of files to process at block based on the generator settings when the user begins the index generation process. The database generator then extracts field information or data from the top file in the processing table at block and proceeds to the next file in the processing table as indicated at block until all of the files have had their field data extracted for later compilation into the contents table as determined at decision block .

The next series of steps corresponds to producing data for creating the master word index and the word lists . For each file that is processed valid words are extracted from the file and inserted into a word table at next block an index of the word locations in the file is generated at next block and a table of link patterns and field matches among the files that have been processed up to that point is then generated at next block as described in conjunction with the jump link list . Each file in the table of files is sequentially processed in like manner as indicated by block until the last file has been processed as determined at block . In particular operation loops between blocks until the last file is processed as determined at block .

Block s functions regarding HTML format files are more fully illustrated by . The format is first determined to be an HTML file or a non HTML file at block . If the file is not an HTML file a fast and straightforward string analysis method is used to determine the locations of words within the displayable text string of the file. For example if a file consists solely of the string hello world the first word occupies file positions and the second word occupies file positions . Once the search engine reports that world is in the file it determines its file positions so the word can be set off with different color text or by some other means. If the file position information for the word is not accurate then the retrieved word will not be highlighted accurately.

The string analysis method first requires obtaining an index string wherein all visible characters occupy positions absolutely relative to each other. The index string is then parsed into words entered into an index along with the numeric word location in the string. In the hello world example the search engine can then go to the absolute position of as the beginning of world instead of the relative position of the end of hello plus 3 to get the display data for the word.

A string analysis method can be adapted to handle embedded control characters provided their behavior and characteristics are consistent. For example an image in a RTF file may consist of thousands of bytes but the beginning and end of the sequence is consistently identified and the entire sequence always affects the file position the same way. Thus the string analysis method can simply discard all image byte sequences without affecting the absolute position determination of visible characters in words.

HTML files involve major complications for using a string analysis method to determine file positions. HTML control tags are placed in line with visible characters. Some of the tags cause the file position to increase and some do not. Furthermore the parameters and tag content can be of unlimited and indeterminate length. A simple HTML file that only displays hello world can have thousands of invisible control characters before the first word thousands between it and the second word and thousands after that. Furthermore whether those control characters cause the file position of a visible character to increase or not depends on the type of HTML tag and the interaction of other HTML tags. Consequently obtaining an accurate index string to parse is immensely difficult when HTML files are involved. Other mark up language file types such as SGML etc. present similar but less egregious problems in obtaining accurate index strings. The method described herein for HTML files can also be used for other types of mark up language files.

The problem is that there is no known accurate way to determine what the effect of present and future HTML control tags will be relative to the file positions of visible words displayed by an HTML viewer when using a string analysis method. HTML viewer technology includes a text ranging method to determine where visible characters are displayed. Essentially this method assigns a null value to non incrementing control tags including their parameters and a byte value to tags that cause the display to advance the file position pointer when they are encountered. The technology also includes rules for determining whether the interaction of tags changes their behavior with respect to advancing the file position pointer. An accurate index string representing not only the relative file positions of words within an HTML file but also the starting position can be generated using a text ranging method. However the method is slow compared to a string analysis method because each byte in the file has to be analyzed individually and single byte analysis using the text range method requires beginning at the first byte of the html string. Thus the time required for analysis increases exponentially with increasing lengths of files to be analyzed. The present invention overcomes the inaccuracy of the string analysis method used on HTML files and the slowness of the text ranging method.

The entire HTML file is a string of bytes which will be referred to as the html string. From it a second string consisting of only visible characters and single byte representations of all adjacent control characters combined will be derived and referred to as the visible character string. The objective is to generate an index string for parsing that will contain visible characters positioned absolutely relative to one another numerically. The index string is analogous to a plain text file string or structured file strings such as RTF etc. and can be unambiguously parsed to determine word locations absolutely relative to one another.

At block all HTML control tags and their contents are converted to single characters in the non displayable range typically ASCII 1 through ASCII 31. In the same block adjacent strings of these control characters are then combined into just one control character. Thus the example of hello world would be reduced at most to 15 characters regardless of the length and complexity of embedded HTML tags. This is the visible character string.

The HTML viewer starting position of the first visible character must next be determined relative to the html string which is done at block by using the text ranging method. From that point the objective is to maintain synchronization between the html string and the visible character string. String analysis is used for adjacent visible characters and the method involves designating a sub string with its start being the character following a control character and the end of the sub string being the character preceding a subsequent control character. Such a sub string segment is then added to the building index string in one step whether it is one or thousands of characters in length as depicted by block .

At this point the effect of the encountered control character must be determined and that first involves synchronizing the entry point for the text range method into the html string. Depicted by block the length of the sub string added to the index string in block is added to an html string processing variable and that is where the text range method is applied to the html string. One by one each byte is analyzed as depicted by block . If it advances the file position pointer it is added to the index string. If the next character is not visible block a test for the end of the html string is performed at block . If so the index string is completed and processing is transferred to block for string parsing and subsequent word location index generation block .

If the next character is visible resynchronization of the HTML string processing variable is performed at block so that the next entry point will land on the next 5 control character after the length of the next sub string is added when block is next encountered. Before leaving block the next byte is analyzed at block to determine if the end of the string has been encountered. If so processing is transferred to block as previously described. If not the processing is transferred to block again and the process continues until the entire index string is accreted.

The process of block on is straightforward. Link patterns and field matches are designated by the user through the Linking Control Panel depicted by and the Options for Field Links dialog depicted by . When a user designates a custom link word by entering it in text box associates it with a specific file such as a glossary by entering its path into text box and then clicks the Add New Link button instructions for that link have been programmed into the index generator. Likewise when a user specifies a link pattern by entering it with or without optional wildcard characters in text box associates it with a particular field number by selecting one in the options box and then clicks the Add New Link button instructions for that link pattern have been programmed into the index generator. The user selectable options depicted on allow refinement of the link pattern choices. For example a user may want to use aliases or synonyms so that equine is also linked when horse is the primary pattern.

Functionally generating valid links automatically as depicted by block of the database index generation process of is a two step process. First the virtual list of link pointers words and patterns is checked each time a word is extracted in block If the word is on the list the virtual list of all the files that will be in the final database that is a virtual table of contents is checked to determine if a link target exists for the link pointer. For example a pattern of S.W.2d might match a potential link pointer of 877 S.W.2d 200 that designates a file with a field likewise containing 877 S.W.2d 200 as the target. However if the target file is not in the virtual table of contents the pattern will not be designated as a link pointer. This avoids having link pointers that have no target being created.

Generating valid links from patterns requires knowing the potential link pointers associated with specific target files. If a target file exists in the virtual table of contents the link pointer can be inserted during the first pass through the files.

The process is simpler in the case of words becoming link pointers. The virtual table of contents is examined to determine if the target file for a word is included. If so a link pointer is created when the specified word is encountered. As with link patterns the validity of all links is assured because no link is created before the existence of its target is established.

At block the master word index is then compiled with the index of word locations. Block entails assigning unique numbers to every unique word in the database which produces the word number index having its two parts the DSI and DSF . Based on the data collected the generator program s jump 5 link index is compiled at block resulting in the jump link list having its two parts the OAI and the OAF . At next block the word lists are generated resulting in the WOL the WDN file and the WDR . The fields list is then generated at next block to include the individual presorted lists C C CO . The contents tables then are generated at next block to include the COI and the COF . The generator program returns to the start dialog allowing a user to generate another database s index or to exit.

A graphic user interface GUI embodiment of a database application program according to the present invention will now be described which provides utilities for database index generation and database selection and searching. The following are exemplary screen shots at various stages of the database application program in order to demonstrate the principles of the present invention. The database application program may be executed on the computer system where each of the screen shots or displays are displayed on the display and viewable by a user of the computer system . The GUI database application program may comprise a more specific embodiment of the system shown in and may further incorporate the principles described in relation to the flow diagrams shown in .

Database indexes are made from documents or files located at a path to a directory or folder indicated in the source file location edit box and according to the file type indicated in the generator type selection box . If the documents of the database index are located remotely e.g. on the World Wide Web WWW of the internet the source file location edit box contains a hypertext transfer protocol address i.e. an http HyperText Translation Protocol address to the location. Of course other types of addresses designations are available for remotely accessible files and these various types of addresses designations are entered into the source file location edit box in a similar manner. A database index is placed in the location shown in the database index output directory edit box when generated from the selected files. Before pressing the Run button the user can press the Linking button in order to cause the documents of a database to have custom links to one another automatically generated at the same time the database index is generated see and related discussion . However in order to understand searching operations of the software of the invention at this point it is assumed that links have already been set and a database index has already been generated.

In addition the search retrieval dialog includes default Boolean operator controls to determine how the system interprets multiple words entered in the search expression edit box . For example if only two terms are entered without being surrounded by double quotation marks and the default Boolean operator is AND the system finds all occurrences of both terms in documents that contain both terms. If the default Boolean operator is set to OR using the same example the system finds all occurrences of either term in all documents with either term. If the default Boolean operator is set to XOR the system finds all occurrences of either term only in documents that contain one term but not the other. Further when checked a search within current results box causes the system to perform the search called for in the search expression edit box only for those documents found by the previous search.

Once search terms are entered into the search expression edit box a search of the database indexes for each of the selected databases is performed by the search module when an Execute button is pressed. Further the Execute button causes all selected databases to have instructions applied such as where to position a document when viewing it on the display how to order search results etc. For example some instructions are set with a Document Position control that designates whether the document when a View button is pressed is displayed from its first line at the top of the document or from the location of the first search term that was found. Further an Order Search Results By control determines the sort order for the list of documents found that are to be displayed in a documents found window . If a Display first document found checkbox is checked the system displays the first document found that satisfies the search expression without the intermediate display of the completed search results.

After the Execute button is pressed the system records and displays its progress in a Search terms found window and includes the number of documents found that match the search criterion. After all documents satisfying the expression are found a document number is displayed in a document counter and the documents found window is populated in the order indicated by the order search results by controls . The View button causes a highlighted document to be displayed according to the Document Position control setting. Should the number of documents found exceed the number that can be displayed in the documents found window a scroll bar the down arrow and the Page Down keys are available so that the user can see the other documents found.

Since a database application program in one embodiment is configured to simultaneously search over two billion databases each with over two billion files and each file with over two billion characters the user may want to stop a search after it has started. For that reason a Stop button is provided. Further a Clear button allows all data to be cleared from the search expression edit box the search terms found window and the documents found window . If the Enable Word Lists control is enabled a Word List button is enabled. When pressed the Word List button causes a list of all words that appear in all selected databases arranged in alphabetical order to be displayed. Words can be placed directly into the search expression edit box from the word list. A Close button closes the search retrieval dialog and returns the user to the previous screen without taking any further actions that may be available. Finally a Sort Again button is used to repeat the above procedure after changing the terms in the search expression edit box .

A field link is illustrated in the text in in which the underlying text is shown highlighted with selectable color and font different from the surrounding text to indicate the link where the highlight selections are made in a Search Terms display control . When the user double clicks on the field link the system displays the document that the field link targets. To return to the text displayed the user need only press a jump backward button . The document display window then shows the text of the document . A found terms display shows that two terms were found in the highlighted document of the documents found window . The same information about the document is accessible through activation of a title bar . The Document Position controls were set to display the document at the first search term and the order search results by controls were set to sort the results by database name . A database named RTF12231 is the first one shown in the selected databases and the system assumes that the user prefers that order.

The search expression edit box shows that the phrase second amended petition was searched for and the document display window shows two instances of the phrase appearing near the center of the screen display for user convenience in determining the context of a term. The terms of the phrase are shown in font attributes determined by the Search Terms display control . The previous search term button is not available because the first search term in the document is displayed and current as indicated by a text cursor . The next search term button is available because there is one more instance in the document. Both the next document with search terms button and the previous document with search terms button are shown as available because the document displayed is the thirteenth of forty documents found as shown in the document counter .

Also shown in the document display window is a phrase Texas Rules of Appellate Procedure . The phrase is shown in bold italics to indicate that it has a legal pad note attached to it where the bold italics is determined by a LegalPad Notes display control . Legal pad notes allow a user to create reference notes that are accessible from a document in a manner similar to document access through the field link . The LegalPad Notes display control shows that bold italics is used when the system displays text where legal pad notes are attached. As discussed in relation to a legal pad button is used to create new legal pads from highlighted text.

A SmartScreen button causes the system to display the same screen shown when the database application program is started initialized as in the example embodiment of . The first document in universe button the universe including all files documents in all selected databases is not available and thus not highlighted because the document shown in the document display window just happens to be the first document in all of the documents in the selected databases.

The same situation applies to a previous document in universe button which is also not highlighted. However a next document in universe button is available as indicated by being highlighted. When the button is pressed the document following the one currently displayed is displayed. When pressed a last document in universe button causes the system to immediately display the last document in the list of all of the selected databases . Further when pressed a table of contents button displays a dialog with collapsible table of contents to allow a user to quickly determine and view any file in any of the selected databases . The find document in entire universe button displays a dialog allowing a user to type fragments of a sought document in order to find it and quickly view it.

A find button allows a user to search within the document currently displayed. A direct from text button causes a phrase search to immediately be executed for all text that is selected by a user and highlighted. It is not available unless some text is selected. A bookmark button allows a user to place an electronic bookmark at any point in any document through a dialog that allows the user to name and manage bookmarks. A copy button allows the user to copy any highlighted text to the computer s memory for insertion elsewhere. A print button displays a print dialog which provides full print utilities to the user. A font change button allows the user to toggle from a proportional pitch font to a fixed pitch font for ease of viewing text formatted with spaces and tabs for columnar alignment or back to the original font. A help button displays information about the system. An exit button causes the system to terminate and asks the user whether data about the session should be saved or not.

In summary the document display window illustrates examples of field links legal pad phrases and instance of search phrases. The appearance of these portions of the document display window is controlled by a display options dialog that is discussed in relation to .

The link generator dialog of also allows a user to instruct the database index generator to insert field links that are based on link field patterns. A field link based on a link field pattern is a pattern sequence found in a file that exactly matches the same pattern sequence that is found in the appropriate field in another file in the database source files. To create these types of field links a pattern is entered into a New Link Pattern edit box . When the pattern of the New Link Pattern edit box matches another pattern located in a certain field of another file a field link can be created between the files. The certain field of a file that is linked to corresponds to a link field number that is selected in a Link Field Number edit box . After the pattern is entered into the New Link Pattern edit box and the link field number is entered into the Link Field Number edit box in this case 1 an Add New Link button is pressed and the database index is updated with the new information. The resultant field link pattern corresponding to the link field number then appears in the link field pattern window .

Advantageously a pattern entered into the New Link Pattern edit box can use wildcard characters. Wildcard characters are characters such as and where each of the characters has a special meaning. In the embodiment shown the character substitutes for any digit the character substitutes for any integer greater than zero the character substitutes for any number of characters or digits between delimiters and the 7 character substitutes for any single character. For example a pattern s d matches 9 sand 977 843 S.W.2d 955 etc. An essentially unlimited number of field link pairs can be created. Of course any number of wildcard characters may be defined depending on a particular embodiment.

Also of note files documents have many different file formats for their respective fields e.g. WordPerfect format . These formats provide for normally hidden fields to contain data about the file such as title subject author etc. A system according to the present invention provides for placing visible fields in the first line of the file with each field separated by a delimiter such as a tab character.

After the database index has been generated and when the user encounters a field link in any document displayed in the document view window it is set off from surrounding text according to the display view options set by the Colors and Styles controls . When the user double clicks such a field link the system immediately displays the linked file. To return to the previous document at the previous position the user need only press the jump backward button .

If the database index generator has previously generated an index for a particular source file location database Output Path and the New Database Name the linking control panel settings used previously are automatically loaded. If the user wants to migrate linking control panel settings from any previous instance pressing a Retrieve Settings button causes display of a list of all such instances and the desired one may then be selected and used. An Options button causes a optional field links dialog see and related discussion to be displayed and makes additional options available to the user for creating a custom field link. Finally pressing an OK button indicates that the user has completed customizing the field links and instructs the database generator to use the settings in the link generator dialog when creating the database index. Of course the database index is not created until the Run button is pressed.

A Locate button when pressed displays the document at the position where the note is attached. The original text that was highlighted when the legal pad button was pressed to create the note is displayed with the font and color attributes set by the legal pad notes section as shown by the example phrase . A Delete button allows the user to delete a note. A Rename button allows the user to change the name of a saved note. An Export button allows the user to save the note to an external file on any drive available to the computer. A Save button allows the user to save changes to the note without changing the current display. A Print button causes a print utility dialog box to appear enabling the user to print the current note. A Close Save Changes button allows the user to save changes to the note and return to the document being viewed. A Close Cancel Changes button causes any changes to the current note to be discarded and the system returns to the display as it was before the legal pad button was pressed.

In addition to the above described example embodiment is an example screen display of a Browser Mode Window showing an HTM document retrieved from the internet using the GUI database application program introduced in . The Browser Mode works in a similar manner as commonly used browsers such as Netscape Navigator or Microsoft Explorer. The internet address of the document is shown in an Address bar . If the user puts the cursor or focus on the Address bar and presses the Return or Enter keyboard key or presses a Refresh button the document would again be retrieved from its internet source. By pressing a Back button the Browser Mode Window displays the previous document that was viewed. By pressing a Forward button the Browser Mode Window displays the document that was previously viewed before the Back button was pressed to display the document shown.

Pressing a Stop button terminates any internet retrieval action currently underway. Pressing a Home button causes the Browser Mode Window to retrieve and display the document at the specific internet address designated as the Home Page for the Browser Mode Window. Pressing a Search button causes the Browser Mode Window to retrieve and display the internet search engine page designated by a user option in an Options dropdown menu . A Print button allows the user to print the document displayed and to set printing options in a dialog box that is displayed. A DB Name button displays a dialog box and list of previous database names that have been used. The current database selected is shown in a database name label . A more extensive dialog box that allows the user to change other database particulars is also available as a user option in an Options dropdown menu .

A SpeedSave button immediately saves the displayed document along with all of its pictures graphics images hypertext links and layout into the database named in the database name label . The first time the SpeedSave button is pressed in a session of the software the same dialog displayed by pressing the DB Name button is displayed to safeguard against the user inadvertently saving a file into a forgotten about database. Double clicking the database name label also displays the same dialog. Depending upon the settings for the database particulars accessible under the Options dropdown menu the file can be saved as a normal Text file an HTM file without images an HTM file with images linked to their internet source or an HTM file with all images retrieved and saved on the local computer s hard drive. Pressing an Exit Browser button causes the software of the system to create a fully indexed and searchable database of all files saved into the database name shown in the database name label according to the default behavior. The database is automatically registered and shown on the database display window . The default behavior can be changed to accommodate a variety of user preferences through the appropriate selection on the Options dropdown menu . A document location label indicates to the user whether the source of the document being viewed is remote or local and the label changes automatically when the viewed document changes its source. A status bar message changes as appropriate to give the user information about the status of the Browser Mode Window. A Browse Mode label indicates to the user whether the software is functioning in its Browser Mode or its Viewer Mode.

The document depicted in has several elements referenced in order to illustrate the capability of a system according to the present invention for allowing the user to easily edit content and arrangement of documents saved in the Browser Mode. For example illustrates a Contact Information graphic a What s New graphic a Services graphic a Footer Text and a Body Text which have all been manipulated deleted or changed as shown in .

In accordance with the present invention the disadvantages of the prior art have been overcome through the implementation of a system and method for creating at least one customizable database index for assisting in navigation of at least one database. The system includes a database index generation module that enables a user to specify at least one database for access by the user. The at least one database includes at least one document. Also included is a database index generator module that enables the user to generate a customizable database index associated with the at least one database. Further an integration tool is included that enables the user to add references of additional databases to the customizable database index and to modify references of existing databases in the customizable database index. Also commonly included is interconnection logic that enables the user to place links within the customizable database index such that the user can cross reference one of the at least one documents from the at least one database with another of the at least one documents of the at least one database.

Another implementation of the invention uses multiple external search engines during the same search. Each search engine typically requires a different syntax to do a search. When activated each search engine responds with different search results. The results may have different contents and formats and priorities. The results may include graphics and text that are not relevant to the information sought by the search and are therefore extraneous. The invention rejects discernable extraneous information by taking advantage of the communication method by signaling the search engine that the unwanted results are already received so they are in fact never sent. Non discernible extraneous information is filtered out and discarded. The remaining results which are received often include duplicates which are initially compiled into lists of all results. The lists are then compiled into a single list without duplicates. The list is prioritized and presented to the user as a single prioritized list for viewing. The list contains checkboxes that the user can check to select documents which the invention will retrieve and put through the storing and indexing processing for search and retrieval. When the user positions a mouse pointer over a URL on the list a popup window is generated that displays the text so the information can be screened to ascertain if it contains relevant information to the search inquiry. If the text contains relevant information the user can then check the box for selection for downloading and insertion in the database.

The above listed sections and included information are not exhaustive and are only exemplary or the invention. The particular sections and included information in a particular embodiment may depend upon the particular implementation and the included devices and resources. Although a system and method according to the present invention have been described in connection with the preferred embodiments it is not intended to be limited to the specific form set forth herein but on the contrary it is intended to cover such alternatives modifications and equivalents as can be reasonably included within the spirit and scope of the invention as defined by the appended claims.

