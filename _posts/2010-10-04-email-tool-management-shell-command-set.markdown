---

title: E-mail tool management shell command set
abstract: A method to execute verb-noun cmdlets to retrieve mailbox information or receive connector information from an e-mail server includes opening an e-mail management tool and receiving and parsing at least one cmdlet having a verb-noun syntax. A get-mailbox cmdlet may retrieve mailbox information from an e-mail server and a get-receiveconnector cmdlet may retrieve receive connector information from the e-mail server. Both cmdlets may have parameters that allow the retrieval of all, one or many mailboxes or receive connectors associated with the e-mail server. One implementation of the e-mail management tool is in a WINDOWS™ computing environment where the management host executes in a POWERSHELL™ scripting environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08244819&OS=08244819&RS=08244819
owner: Microsoft Corporation
number: 08244819
owner_city: Redmond
owner_country: US
publication_date: 20101004
---
This application is a divisional of U.S. patent application Ser. No. 11 690 467 filed Mar. 23 2007 entitled E MAIL TOOL MANAGEMENT SHELL COMMAND SET now U.S. Pat. No. 7 836 137 issued Nov. 16 2010 the contents of which is incorporated by reference herein in its entirety.

E mail servers continue to evolve to better serve the needs of e mail service subscribers. The overhead in terms of management time and effort time and effort of such servers increases as subscription rates rise. This places a ever growing burden on system administrators to maintain e mail servers in an operational state. Scripting standard maintenance operations is a method whereby some administrators control the time investment for maintenance. Well written scripts are advantageously re used to perform maintenance tasks which are unique to the administration of any given e mail server system.

A need arises to develop an intuitive scripting language specifically designed for IT administration use that targets e mail servers. The present invention addresses this and other aspects of the administration of e mail servers with an e mail specific scripting language.

In one aspect of the invention administrators can operate an e mail management tool such as MICROSOFT EXCHANGE using a management shell that supports an intuitive verb noun scripting language. One such management shell is the EXCHANGE MANAGEMENT SHELL which uses WINDOWS POWERSHELL . In such a system the e mail server may be maintained by executing objects called cmdlets. E mail server specific cmdlets include the get mailbox and get receiveconnector functions. The get mailbox cmdlet retrieves mailbox information from the e mail server and the get receiveconnector cmdlet retrieves receive connector information from the e mail server. Both cmdlets may operate with arguments or specified parameters to assist in the identification of mailboxes and connectors. Both cmdlets may operate with pipeline extensions allowing retrieved results to be used by subsequent cmdlets.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

One method to address the need for a scripting language for e mail servers is to start from existing developments and generate an improvement targeted to the e mail server application. WINDOWS POWERSHELL available from MICROSOFT of Redmond Wash. is a command line shell and task based scripting technology that provides information technology IT administrators comprehensive control and automation of system administration tasks which can increase administrator productivity. WINDOWS POWERSHELL includes numerous system administration utilities consistent syntax and naming conventions and improved navigation of common management data. POWERSHELL also includes an intuitive scripting language specifically designed for IT administration and thus can be used as a basis for the administration of an e mail server. One version of e mail server is the EXCHANGE e mail server also available from MICROSOFT . The administration of the EXCHANGE e mail server can be performed using an extension of POWERSHELL scripting environment.

The EXCHANGE MANAGEMENT SHELL is an extension of WINDOWS POWERSHELL that gives EXCHANGE administrators the ability to manage various features of the email server interactively from the command line or by editing and running scripts. This is achieved by providing an EXCHANGE specific command set that integrates with WINDOWS POWERSHELL 

The EXCHANGE MANAGEMENT SHELL is a collection of about 350 commands that constitute the public application programming interface API for managing MICROSOFT EXCHANGE and its future versions. This public API can be interactively used from the WINDOWS POWERSHELL command line shell from WINDOWS POWERSHELL scripts or can be invoked from managed code e.g. C programs .

EXCHANGE MANAGEMENT SHELL represents an improvement in the administration of e mail servers via a scripting language because the POWERSHELL building block like cmdlets verb noun commands contain logic to validate user inputs deal with system errors can provide progress reporting where appropriate and can output verbose information on demand. Cmdlets are designed to interoperate seamlessly and intuitively with other cmdlets of the same family removing the need for explicit interface programming. The cmdlets can be interactively invoked from the command line or can be called from scripts and as stated above the cmdlets are compatible with WINDOWS POWERSHELL 

The EXCHANGE MANAGEMENT SHELL provides a consistent and intuitive way for executing EXCHANGE management operations from the command line. It consists of a set of commands implemented according to the WINDOWS POWERSHELL rules. Thus one can use WINDOWS POWERSHELL and the EXCHANGE MANAGEMENT SHELL extension to create EXCHANGE mailboxes enumerate EXCHANGE servers delete databases and other maintenance and administrative tasks. By abiding by the WINDOWS POWERSHELL rules the EXCHANGE MANAGEMENT SHELL automatically inherits the command line and scripting support provided by POWERSHELL as well as interoperability with the WINDOWS POWERSHELL built in commands and the .NET Framework.

Of the 350 or so cmdlets developed for EXCHANGE MANAGEMENT SHELL two cmdlets stand out as often used and noteworthy in their utility. The two cmdlets are get mailbox and get receive connector. These two e mail specific cmdlets can be executed in the WINDOWS POWERSHELL engine which is described briefly below.

Cmdlets are the basic units of execution of a management engine such as the MICROSOFT POWERSHELL . A cmdlet is named by two parts a verb and a noun. The standard format for a cmdlet is with the noun following the verb with a dash in between. An example is get mailbox which is a cmdlet that acquires information concerning mailboxes. Verb noun is the naming convention used that specifies with clarity what cmdlets do. This naming convention is enforced programmatically in the construction of cmdlets. Cmdlets are .NET classes designed to use the features of the cmdlet management engine environment.

Cmdlets contain the business logic and are separate and independent from the GUI command interface or any other user interface. These user interfaces are absent business logic programming because such programming is located solely in the cmdlets. Cmdlets may be treated like objects in terms of maintaining them but they exhibit special behavior and thus are quite different from standard objects such as application files pictures and the like. Unlike most objects cmdlets can be executed to perform a task. Cmdlets are created using a specific set of rules. Those rules include but are not limited to how cmdlets receive input from the user how parameters are declared as mandatory or optional and how progress warnings and errors are reported back to the user. Cmdlets are not equivalent to objects because cmdlets must follow strict rules and APIs that are defined by the management shell and the data provider. Objects have no requirements to be executable and to follow APIs defined by the management shell.

Cmdlets for an e mail server such as EXCHANGE are made available to a management engine which performs tasks based on the execution of cmdlets. An example of the management engine is the MICROSOFT WINDOWS POWERSHELL engine. The POWERSHELL engine can pass data between various mail tool cmdlets as objects which are structured data. POWERSHELL can be used by many different host e mail applications each host providing input and consuming output of cmdlets in whatever way necessary. In particular a command line host can let the user type text and use that as input then convert objects to their string representation and provide that as the output. GUI applications can use complex user interfaces to obtain input from the end user and can draw complex lists property pages and other graphic elements with the results of cmdlets. Cmdlets are specially constructed .NET classes that encompass all the business logic for a particular operation. For example moving a mailbox is represented by the cmdlet move mailbox . This code can be called directly from the command line interface or a script using the command line. The cmdlets may call into internal libraries that help them do some work such as connecting to a data source such as the WINDOWS ACTIVE DIRECTORY also available through MICROSOFT .

When using e mail server cmdlets the management engine may have access to configuration data access so that the actions of executed cmdlets can access data from various data stores . This basic capability to use cmdlets via the management engine permits the construction of user interfaces which can operate in such a way as to render the same user experience while the user is using a command line interface a graphical user interface or some other host such as a web service interface.

When using a command line interface the user would invoke a cmdlet via the management engine . A specific cmdlet may execute which has configuration data access to various data stores to assist in the execution of a user command from the command line interface . Similarly the user at a graphical user interface may request a function that essentially performs the same task using the same cmdlets as the command line interface .

The graphical user interface communicates with a WinForms function that provides the graphical user interface application programming interface API included as a part of MICROSOFT s .NET Framework providing access to the native MICROSOFT WINDOWS interface elements by wrapping the existing Win32 API in managed code. GUI framework is designed to execute cmdlets rather than call business logic directly. This separates this GUI from others previously conceived because the business logic is removed from the GUI programming. As mentioned above the business logic is contained in the cmdlets for uniformity of user experience and machine performance. The GUI works through the WinForms functional block which communicates with the .NET version of Active Data Objects ADO . The POWERSHELL data connector supports collecting and formatting data that can be returned by using cmdlets.

One e mail server scripting element is the get mailbox cmdlet which can execute in the environment of . The get mailbox cmdlet enumerates some or all existing email mailboxes in an EXCHANGE deployment. In doing so it outputs structured data i.e. objects for each mailbox requested. The output objects have properties representing the various configuration aspects of a mailbox such as a name address quota limits and other aspects. Some properties and configuration aspects can include information concerning an alias the name of a mailbox store e mail delivery restrictions such as sending message size receiving message size message restrictions delivery options such as send on behalf of forwarding address recipient limits storage limits such as mailbox storage limits and deleted item retention protocol settings such as enable disable OWA POP3 IMAP4 OMA Sync Up to date modify settings of POP3 and IMAP message encoding and character set. Other configuration aspects include options to hide from EXCHANGE address lists custom attributes Internet locator service settings mailbox rights such as permissions for mailbox access and EXCHANGE e mail addresses manipulations such as new edit remove set as primary and use recipient policies. Additional information can include mailbox user first name last name display name office address home address telephone numbers and organization information such as title department company manager and direct reports.

The mailbox related output objects and the values of their properties can be displayed to the user or can be used in further processing. Further processing can include the addition of a pipeline type command. Pipelining in the EXCHANGE MANAGEMENT SHELL is the act of down level cmdlet using the output of another previous cmdlet when it performs an operation. Pipelining is accomplished by using the pipe symbol. All verbs in the same cmdlet set can use piped information from another cmdlet. Some verb noun cmdlet sets also let you pass data through the pipeline to another verb noun cmdlet set. As an example pipelining can be used with the get mailbox cmdlet to perform an action using the get mailbox returned objects to another cmdlet such as set mailbox. Thus the get mailbox command can be used to inspect the configuration of one or more mailboxes or can be aggregated in larger pipelines or scripts. For example one can change the quota of all users to 1 GB with names starting with a by running the following pipeline 

The get mailbox cmdlet has three modes of operation to retrieve all existing mailboxes to retrieve just one mailbox or to retrieve multiple mailboxes. In retrieving all mailboxes the get mailbox cmdlet is executed with no filtering parameters i.e. get mailbox . To retrieve one mailbox the get mailbox cmdlet is constructed and executed while specifying the identity of the mailbox as an argument or parameter to the get mailbox cmdlet such as in get mailbox name MICROSOFT.com . The parameter or argument that specifies identity can take multiple forms. For example the identity parameter can be expressed as a globally unique identifier GUID a distinguished name DN a Domain Account name a user principal name UPN LegacyEXCHANGEDN a simple mail tool protocol SMTP address and an alias. To retrieve multiple mailboxes an argument or parameter is appended to the get mailbox cmdlet that is based on some common criteria. For example in the example get mailbox organizational unit Users the cmdlet would act to return all mailboxes in the organizational unit container called Users. In another example the cmdlet expression get mailbox abc would act return all mailboxes with names starting with abc .

At step the GetMailbox method then defaults the other search options which can be specified in the command line such as DomainController search scope number of results and others to their default values. The method then opens an ACTIVE DIRECTORY session and returns. At step the process checks for the existence of pipeline arguments to the get mailbox cmdlet and collects the appropriate parameters. The execution engine binds the parameters that match the pipeline input if any. The execution engine then invokes the ProcessRecord method of GetMailbox to collect records pertaining to the cmdlet request. At step the process GetMailbox uses the specified parameters to create a search filter. In the example case the search filter is based on the value of Identity.

At step an API is initiated to write any retrieved information to a display device for user observance. In the implementation involving POWERSHELL the GetMailbox method calls the WriteVerbose API to output localized logging information back to the user. This call can occur multiple times throughout the execution. Step also issues a search to retrieve the information matching mailboxes which meet the search filter parameters. In the implementation of a WINDOWS operating system ACTIVE DIRECTORY may be used as the searching engine. For each search result the GetMailbox method creates an instance of the Mailbox type and sets it up based on the properties retrieved from ACTIVE DIRECTORY .

At step the search results are further processed by any additional pipeline instruction associated with the get mailbox cmdlet input. In the POWERSHELL implementation the method GetMailbox calls the WriteObject POWERSHELL API to send the Mailbox instance back to the POWERSHELL pipeline. If there is a pipeline command associated with the get mailbox cmdlet POWERSHELL would run the down level cmdlet. If the get mailbox cmdlet on the command line input is not a pipeline POWERSHELL outputs the property names and values of the Mailbox object to the console at step . Thus cmdlets need not have a pipeline parameter.

In one implementation the GetMailbox method loops until all the search results have been processed. In case of an error the GetMailbox method calls the WriteError POWERSHELL API passing a localized string describing the error condition. Eventually the call to ProcessRecord returns and the process repeats from step as long as there are any more objects in the pipeline for get mailbox to process. If there are no additional objects in the pipeline then POWERSHELL calls the EndProcessing method of GetMailbox to end processing.

Another significant e mail server scripting element is the get receiveconnector cmdlet which can execute in the environment of . In general this cmdlet executes similarly to the get mailbox cmdlet but performs a different function. The get receiveconnector cmdlet enumerates one or more of the receive connectors for a particular e mail server such as the EXCHANGE server that has the Hub Transport or the Edge Transport role installed. The Hub Transport role also known as a bridgehead handles internal transport and routing and may be tightly integrated with some directory services such as ACTIVE DIRECTORY in a WINDOWS operating system. The Hub Transport role can also apply policies to messages to enforce compliance requirements. The Edge Transport role provides antivirus and anti spam protection for e mails servers such as the EXCHANGE e mail server and protection for organizations at the perimeter of a network. Receive connectors represent a logical gateway through which all inbound messages are received by an e mail server. Thus receive connectors are basic configuration elements for e mail flow.

The get receiveconnector cmdlet outputs objects one per receive connector. These objects have associated properties representing various configuration aspects such as name IP address port number authentication mechanism and the like. The output objects and the values of their properties can be displayed to the user or can be used in further processing. As above the pipeline method of parameter expression can be used to transfer retrieved objects to another cmdlet like remove receiveconnector cmdlet. Thus the get receiveconnector cmdlet can be used to inspect the configuration of one or more connectors or can be aggregated in larger pipelines or scripts. For example one can change the connection timeout of all receive connectors for the server Foo to 150000 time units by running the following pipeline 

The get receiveconnector cmdlet has three modes of operation to retrieve all receive connectors on the local e mail server retrieve just one receive connector or to retrieve multiple receive connectors. In retrieving all receive connectors the get receiveconnector cmdlet is executed with no filtering parameters i.e. get receiveconnector . To retrieve one receive connector the get receiveconnector cmdlet is constructed and executed while specifying the identity of the connector as an argument or parameter to the get receiveconnector cmdlet such as in get receiveconnector MyConnector . The parameter or argument that specifies the identity of the receive connector can take multiple forms. For example the receive connector identity parameter can be expressed as a globally unique identifier GUID a connector name that represents a specific receive connector and a server name using the format ServerName ConnectorName. To retrieve multiple receive connectors an argument or parameter is appended to the get receive connector cmdlet that is based on some common criteria. For example in the example get receiveconnector abc the cmdlet would act to return all receive connectors on the local e mail server with names starting with abc .

At step the GetReceiveConnector method then defaults to the other search options which can be specified in the command line such as DomainController search scope number of results and others to their default values. The method then opens an ACTIVE DIRECTORY session and returns. At step the process checks for the existence of pipeline arguments to the get receiveconnector cmdlet and collects the appropriate parameters. The execution engine binds the parameters that match the pipeline input if any. The execution engine then invokes the ProcessRecord method of GetReceiveConnector to collect records pertaining to the cmdlet request. At step the process GetReceiveConnector uses the specified parameters to create a search filter. In the example case the search filter is based on the value of Server.

At step an API is initiated to write any retrieved information to a display device for user observance. In the implementation involving POWERSHELL the GetReceiveConnector method calls the WriteVerbose API to output localized logging information back to the user. This call can occur multiple times throughout the execution. Step also issues a search to retrieve the information matching connectors corresponding to the search filter parameters. In the implementation of a WINDOWS operating system ACTIVE DIRECTORY may be used as the searching engine. For each search result the GetReceiveConnector method creates an instance of the ReceiveConnector type and sets it up based on the properties retrieved from ACTIVE DIRECTORY .

At step the search results are further processed by any additional pipeline instruction associated with the get receiveconnector cmdlet input. In the POWERSHELL implementation the method GetReceiveConnector calls the WriteObject POWERSHELL API to send the ReceiveConnector instance back to the POWERSHELL pipeline. If there is a pipeline command associated with the get receiveconnector cmdlet POWERSHELL would run the down level cmdlet. If the get receiveconnector cmdlet on the command line input is not a pipeline POWERSHELL outputs the property names and values of the Server object to the console at step . Thus a pipeline is not strictly necessary in the flow of and may be considered optional.

In one implementation the GetReceiveConnector method loops until all the search results have been processed. In case of an error the GetReceiveConnector method calls the WriteError POWERSHELL API passing a localized string describing the error condition. Eventually the call to ProcessRecord returns and the process repeats from step as long as there are any more objects in the pipeline for get receiveconnector to process. If there are no additional objects in the pipeline then POWERSHELL calls the EndProcessing method of GetReceiveConnector to end processing.

As an aspect of the invention a computer readable medium such as but not limited to magnetic storage devices optical devices such as CD and DVD media may be used to store computer program instructions which can implement methods discussed or suggested herein. Such computer media are envisioned to retain executable instructions for use on a general purpose computer to enable it to practice aspects of the invention.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

Although not required embodiments of the invention can also be implemented via an operating system for use by a developer of services for a device or object and or included within application software. Software may be described in the general context of computer executable instructions such as program modules being executed by one or more computers such as client workstations servers or other devices. Generally program modules include routines programs objects components data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover those skilled in the art will appreciate that various embodiments of the invention may be practiced with other computer configurations. Other well known computing systems environments and or configurations that may be suitable for use include but are not limited to personal computers PCs automated teller machines server computers hand held or laptop devices multi processor systems microprocessor based systems programmable consumer electronics network PCs appliances lights environmental control elements minicomputers mainframe computers and the like. Embodiments of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network bus or other data transmission medium. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices and client nodes may in turn behave as server nodes.

With reference to an exemplary system for implementing an example host computer includes a general purpose computing device in the form of a computer system . Components of computer system may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures.

Computer system typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer system and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to Random Access Memory RAM Read Only Memory ROM Electrically Erasable Programmable Read Only Memory EEPROM flash memory or other memory technology Compact Disk Read Only Memory CDROM compact disc rewritable CDRW digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by computer system .

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer system such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer system may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM CDRW DVD or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer system . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies.

A user may enter commands and information into the computer system through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface which may in turn communicate with video memory not shown . In addition to monitor computer systems may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer system may operate in a networked or distributed environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer system although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks buses. Such networking environments are commonplace in homes offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer system is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer system typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer system or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Various distributed computing frameworks have been and are being developed in light of the convergence of personal computing and the Internet. Individuals and business users alike are provided with a seamlessly interoperable and Web enabled interface for applications and computing devices making computing activities increasingly Web browser or network oriented.

For example MICROSOFT s .NET platform available from MICROSOFT Corporation includes servers building block services such as Web based data storage and downloadable device software. While exemplary embodiments herein are described in connection with software residing on a computing device one or more portions of an embodiment of the invention may also be implemented via an operating system application programming interface API or a middle man object between any of a coprocessor a display device and a requesting object such that operation may be performed by supported in or accessed via all of .NET s languages and services and in other distributed computing frameworks as well.

As mentioned above while exemplary embodiments of the invention have been described in connection with various computing devices and network architectures the underlying concepts may be applied to any computing device or system in which it is desirable to implement a method for performing tasks on an e mail server. Thus the methods and systems described in connection with embodiments of the present invention may be applied to a variety of applications and devices. While exemplary programming languages names and examples are chosen herein as representative of various choices these languages names and examples are not intended to be limiting. One of ordinary skill in the art will appreciate that there are numerous ways of providing object code that achieves the same similar or equivalent systems and methods achieved by embodiments of the invention.

The various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. Thus the methods and apparatus of the invention or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the invention.

While aspects of the present invention has been described in connection with the preferred embodiments of the various figures it is to be understood that other similar embodiments may be used or modifications and additions may be made to the described embodiment for performing the same function of the present invention without deviating therefrom. Furthermore it should be emphasized that a variety of computer platforms including handheld device operating systems and other application specific operating systems are contemplated especially as the number of wireless networked devices continues to proliferate. Therefore the claimed invention should not be limited to any single embodiment but rather should be construed in breadth and scope in accordance with the appended claims.

