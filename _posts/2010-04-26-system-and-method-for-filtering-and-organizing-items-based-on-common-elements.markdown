---

title: System and method for filtering and organizing items based on common elements
abstract: A system and method for filtering and organizing items from computer memories based on common elements is provided. Filters can be provided for manipulating the items, which serve as tools for narrowing down a set of items. The filters can be dynamically generated based on the properties of the separate items. The system can utilize virtual folders. The virtual folders can expose regular files and folders to users in different views based on their metadata instead of the actual physical underlying file system structure on the disk. Quick links can be provided, which serve as a set of predefined links (e.g., located on the left side of the display) that can be clicked on to generate useful views of the sets of items. Libraries, which can provide large groups of usable types of items that can be associated together, may also be used.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09361313&OS=09361313&RS=09361313
owner: Microsoft Technology Licensing, LLC
number: 09361313
owner_city: Redmond
owner_country: US
publication_date: 20100426
---
This application is a continuation of U.S. patent application Ser. No. 11 548 508 now U.S. Pat. No. 7 707 197 filed Oct. 11 2006 which is a continuation of prior U.S. patent application Ser. No. 11 213 840 now U.S. Pat. No. 7 149 729 filed Aug. 30 2005 which is a divisional application of prior U.S. patent application Ser. No. 10 440 035 now U.S. Pat. No. 7 162 466 filed May 16 2003 which is a continuation in part of U.S. patent application Ser. No. 10 403 341 now U.S. Pat. No. 7 627 552 filed Mar. 27 2003 priority from the filing date of which is hereby claimed under 35 U.S.C. 120. The entire contents of the prior applications are incorporated herein by their reference.

The present invention relates to systems and methods for viewing items that are stored in a computer memory and more particularly to a system and method for filtering and organizing items based on common elements.

Present computer file systems have a number of undesirable limitations. One limitation is that users are generally unable to control the structure that they are shown. In other words when folders are organized a user must choose a structure and that structure is then difficult to change. As a specific example for a music folder a user may choose to organize the music files in an artist album format wherein all of the album folders for each artist are grouped into that particular artist s folder and all of the songs on a particular album are grouped into that album s folder. The artist album format is not conducive to playing a type of music e.g. playing two jazz songs from two different artists or for playing a selection of albums from different artists.

As another issue a user may have a large number of files which are difficult to organize. Some users implement a rigid sense of placement for the files and thus create strict hierarchies for them. The management of such files become increasingly complex and difficult as the number of available documents grows making search and retrieval also difficult. This problem is further exacerbated when additional files are utilized from other locations such as shared files etc.

Users also have to deal with files being in different locations such as on different devices on other PCs or online. For example users can select to listen to their music on the computer as may be accessible to a music program or can go online and listen to music from Web sites however there is a strict division between these two sources. Music coming from different locations is organized differently and not kept in the same fashion or place. As another example files stored on a corporate network may inherently be separated from files a user has on a current machine.

Users also have to keep track not only of what file data is stored but where it is stored. For example for music files users are forced to keep copies on various systems and to try to track which music files are located where. This can make files difficult to locate even when they are locally stored.

It is also sometimes difficult to find and return to files that a user has. A user may find it difficult to recall where and how they stored certain files. Given a set of folders and even a group of similar files users often find it difficult to quickly find the one that they are looking for. For files stored in a difficult place to find it is that much more complex to locate. In addition once users have enough files in a folder it becomes more difficult to parse the folder quickly especially if the contents are similar.

It is also sometimes difficult for users to find or return to files on a network. Sharing and publishing files is often hard to do and it may often be even more difficult to retrieve such a file from someone who makes it available. Users typically have to memorize or map the various sites and names that they need for finding files on a network.

Name spaces may vary which can cause confusion to the user as to what is correct. This is particularly true on a network where there are different naming conventions limitations and so on. For example certain operating systems may require short names with no spaces in order for them to be visible.

Programs also often save files to their own directory or other name spaces which can make it difficult for users to find their way back to the files. Programs often have default directories and places they save documents. A user often has to search through their hard disk and make guesses about where a file is stored.

Related items are also often stored in separate places. Related files that a user has may be stored on different parts of the hard disk etc. This problem becomes more common with the developments of digital media services that have multiple content types e.g. pictures music video .

The present invention is directed to providing a system and method that overcome the foregoing and other disadvantages. More specifically the present invention is directed to a system and method for filtering and organizing items based on common elements.

A system and method for filtering and organizing items from computer memories based on common elements is provided. In accordance with one aspect of the invention filters are provided for manipulating the items. The filters are essentially tools for narrowing down a set of items. In one embodiment the filters are dynamically generated based on the properties of the separate items. For example for a set of items the filter mechanism may review the properties and if the items generally have authors as a property the filter can provide a list of the authors. Then by clicking on a particular author the items that don t have the author disappear. This allows the user to narrow the contents.

In accordance with another aspect of the invention a method for filtering items is provided in a computer system having a display and a memory for storing items with metadata properties. Display objects are provided on the display that each represent one or more items. The metadata properties of the items that are represented by the display objects are evaluated. A filter term is provided on the display that corresponds to a metadata property that is shared by a plurality of the items wherein the selection of the filter term causes the items that are represented on the display to be reduced to those items that share the specified metadata property.

In accordance with another aspect of the invention a plurality of items is represented on the display and a filter term is dynamically generated based on the metadata properties of the items. When the filter term is selected it reduces the items that are represented on the display to those that have the metadata property that corresponds to the filter term.

In accordance with another aspect of the invention a plurality of items is represented on the display and a filter area is provided in which a user can enter a filter term. When a filter term is entered by the user the items that are represented on the display are reduced to those that contain the filter term. As the user types the filter term additional items may be filtered as each new character is added to the filter term.

In accordance with another aspect of the invention a back button is provided which may be used to back through a filtering process. For example after a user has entered a filter term the user may wish to return to the set of items that were represented on the display before the filter term was applied. The back button allows the user to back up to the desired point in the filter navigation.

In accordance with another aspect of the invention quick links are provided. In one embodiment quick links are a set of predefined links e.g. located on the left side of the display that can be clicked on to generate useful views of the sets of items. These can be predefined by the program or set by a user. For example clicking on all authors could return a view stacked by authors. All documents may return a flat view of all the documents across all of the storage areas. Users can also create their own quick links. For example a user might filter down to all of the documents that they modified in January 2003 and then could save that as a quick link.

In accordance with another aspect of the invention a method for providing quick links is implemented in a computer system having a display and a memory for storing items. In accordance with the method a user first navigates to a view of a desired collection of items. A quick link that corresponds to the desired collection of items is saved and is provided with a name. The name of the quick link is presented on the display such that by clicking on the quick link a user can return to the view of the desired collection of items.

In accordance with another aspect of the invention libraries are provided. Libraries consist of large groups of usable types of items that can be associated together. For example photos may be one library music may be another and documents may be another. The libraries provide tools and activities that are related to the particular types of items. For example in the photo library there are tools and filters that relate to manipulating photos such as for creating slide shows or sharing pictures.

In accordance with another aspect of the invention a method for creating libraries is provided in a computer system with a display and a memory for storing items. The method begins by creating a library to contain items with one or more specified metadata properties. Then items with the one or more specified metadata properties are automatically grouped into the library. Tools are also provided for manipulating the items of the library.

In accordance with another aspect of the invention the items are presented to a user in virtual folders. The virtual folders expose items to users in different views based on their metadata instead of the actual physical underlying file system structure on the disk. Thus the system is able to take a property that is stored in the database and represent it as a container that is like a folder. Since users are already familiar with working with folders by presenting the virtual folders in a similar manner users can adapt to the new system more quickly.

In accordance with another aspect of the invention users are able to work with the virtual folders through direct manipulation. In other words the mechanisms that are provided for manipulating the virtual folders are similar to those that are currently used for manipulating conventional physical folders e.g. clicking and dragging copying pasting etc. .

In accordance with another aspect of the invention a wide scope of items may be available. In other words the system is able to represent items from multiple physical locations e.g. different hard drives different computers different network locations etc. so that to a user all the items appear to be from one location. For example a user can be presented with all of their music files on a single screen and manipulate the files all from one view even though the files may be physically stored on different hard drives different computers or different network locations.

In accordance with another aspect of the invention non file items may be represented in the virtual folders. In other words files that are stored in memory are located in a physical store. The virtual folders can be made to include items that are not currently represented in the physical store. Examples of non file items are e mails and contacts.

The present invention is directed to virtual folders. Virtual folders utilize the same or similar user interfaces that are currently used for file systems. The virtual folders expose regular files and folders also known as directories to users in different views based on their metadata instead of the actual physical underlying file system structure on the disk. Location independent views are created which allow users to manipulate their files and folders utilizing similar controls as those presently used for managing file systems. In general this means that users can organize and rearrange their files based on inherent properties in the files themselves instead of the managing and organization being done as a separate part of the system. The virtual folders may represent files or items from different physical locations such as from multiple disk drives within the same computer between multiple computers or different network locations such that one view of files or items can expose files or items sitting at different physical locations. In one embodiment the different items or files need only be connected via an IP network in order to be included.

The virtual folder modeling is also able to be used for traditionally non file entities. An application of this is to have a set of user interfaces similar to files and folders that is objects and containers to show traditionally non file entities. One example of such non file entities would be e mails while another would be contact information from a contact database. In this manner virtual folders provide for a location independent metadata based view system that works regardless of whether the data being shown is from files or non file entities. In general these aspects allow more flexibility in terms of letting users manipulate their files and data using both common user interface techniques drag and drop double click etc. as well as leveraging the rich integration of various data types.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a conventional personal computer including a processing unit system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. The system memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within the personal computer such as during start up is stored in ROM . The personal computer further includes a hard disk drive for reading from or writing to a hard disk a magnetic disk drive for reading from or writing to a removable magnetic disk and an optical disk drive for reading from or writing to a removable optical disk such as a CD ROM or other optical media. The hard disk drive magnetic disk drive and optical disk drive are connected to the system bus by a hard disk drive interface a magnetic disk drive interface and an optical drive interface respectively. The drives and their associated computer readable media provide non volatile storage of computer readable instructions data structures program modules and other data for the personal computer . Although the exemplary environment described herein employs a hard disk a removable magnetic disk and a removable optical disk it should be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer such as magnetic cassettes flash memory cards digital video disks Bernoulli cartridges random access memories RAMs read only memories ROMs and the like may also be used in the exemplary operating environment.

A number of program modules may be stored on the hard disk magnetic disk optical disk ROM or RAM including an operating system one or more application programs other program modules and program data . A user may enter commands and information into the personal computer through input devices such as a keyboard and pointing device . Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a serial port interface that is coupled to the system bus but may also be connected by other interfaces such as a parallel port game port or a universal serial bus USB . A display in the form of a monitor is also connected to the system bus via an interface such as a video card or adapter . One or more speakers may also be connected to the system bus via an interface such as an audio adapter . In addition to the display and speakers personal computers typically include other peripheral output devices not shown such as printers.

The personal computer may operate in a networked environment using logical connections to one or more personal computers such as a remote computer . The remote computer may be another personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the personal computer . The logical connections depicted in include a local area network LAN and a wide area network WAN . Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the personal computer is connected to the local area network through a network interface or adapter . When used in a WAN networking environment the personal computer typically includes a modem or other means for establishing communications over the wide area network such as the Internet. The modem which may be internal or external is connected to the system bus via the serial port interface . In a networked environment program modules depicted relative to the personal computer or portions thereof may be stored in the remote memory storage device. It will be appreciated that the network connections shown are illustrative and other means of establishing a communications link between the computers may be used.

As implemented on a system of the type illustrated in the present invention utilizes virtual folders which make it easier for users to perform basic tasks around file manipulation and folder navigation browsing and to provide higher level storage capabilities which can be leveraged in new features. The virtual folders expose files and items to users in different views based on their metadata instead of the actual physical underlying file system structure on the disk.

As illustrated in the virtual folder system includes a folder processor a relational database a virtual folder descriptions database an other shell folders component a folder handler s component and a shell browser and view component . The folder processor includes a native handling code component a handler factory component a property writer component a rowset parser component a query builder component an enumerator component and a property factory component .

The relational database stores properties about all files in the system. It also stores some items like contacts i.e. non file items entirely. In general it stores metadata about the types of files and items that it contains. The relational database receives SQL queries from the query builder . The relational database also sends SQL rowsets to the rowset parser component with one row per item column columns being the item properties.

The virtual folder descriptions database includes the virtual folder descriptions. The virtual folder descriptions database sends data to the query builder component including a list of types to display in the folder the initial filter and the physical locations to show results from the scopes .

With regard to the other shell folders component the folder processor delegates to existing shell folders from many types of items including all files for handlers or properties. The other shell folders component sends properties from other folders to the property factory . The other shell folders component also sends handlers to the handler factory .

The folder handlers component provides code behavior for the items that exist only in the database like contacts. This is what allows non file items to behave akin to files. The folder handlers component sends handlers to the handler factory .

For the native handling code component the folder processor directly implements certain handlers based on the properties of the items. The native handling code component sends handlers to the handler factory . For the native handling code component and the folder handlers component like all namespaces virtual folders have to provide a set of handlers context menu icon thumbnail infotip . . . for their items. For most of these infotip data object drag drop handler background context menu . . . the virtual folder provides a common native handler for all the types it holds. However there are others which the author of the type has to provide context menu on the item itself writable property store . . . . The default handler can also be overridden. Virtual folders reuse this for files and allow non file items do the same.

The handler factory takes ID lists and produces code behaviors that provide context menus icons etc. In general the folder processor may use native handlers external handlers or delegate to other shell folders to get handlers as described above with respect to the native handling code component the other shell folders component and the folder handlers component . The handler factory component sends handlers to the shell browser in view as requested by the view. The handler factory component sends a property handler to the property writer .

The property writer converts user intentions such as cut copy and paste into property rights to the file or item. A shell browser and view component sends data to the property writer including direct manipulation cut copy paste or editing of metadata. In general since virtual folders present an organization based on the properties of an item operations such as move and copy drag drop become an edit on those properties. For example moving a document in a view stacked by author from Author to Author means changing the author. The property writer component implements this function.

The rowset parser takes database rowsets and stores all item properties into a shell ID list structure. A rowset takes the piecewise definition of the virtual folder and builds a SQL string which can then be issued to the database. The rowset parser component sends ID lists to the enumerator component . As described above the rowset parser component also receives data from the relational database including SQL rowsets with one row per item the columns being item properties.

The query builder component builds SQL queries. The query builder component receives data from the enumerator component including new filters from the navigation. The query builder component also receives data from the virtual folder descriptions database including a list of the types to display in the folder the initial filter and the physical location to show results from the scopes . The query builder component sends the SQL queries to the relational database .

In general the query builder component includes a set of rows in other words a table . This is what running the query yields. The rowset parser component takes each row and using the column names transforms the row into an ID list. An ID list is a well known shell structure which is used to reference items in a namespace. Doing this allows virtual folders to be just like any other namespace to the rest of the shell. Also caching this data helps keep database access which can be costly to a minimum.

The enumerator component operates in response to navigation to a virtual folder. As described above the enumerator component receives ID lists from the rowset parser component and sends new filters from the navigation to the query builder component . The enumerator also sends data to the shell browser and view component including ID lists that are returned to be inserted into the view after a navigation.

The property factory component takes ID lists and property identifiers and returns values for those properties. The property factory component receives data from the handler factory component including the property handler. As described above the property factory component also receives data from the other shell folders component including properties from other folders. The property factory component also sends data to the shell browser and view component including item properties as requested by the view.

The shell browser and view component displays the contents of a folder in a window and handles all the user interaction with the displayed files or items such as clicking dragging and navigating. Thus the shell browser and view component receives the user actions. The shell browser and view component also gets the data regarding the code behaviors that it needs from the folder in this case the folder processor .

As described above the virtual folders expose regular files and folders also known as directories to users in different views based on their metadata instead of the actual physical underlying file system structure on the disk. Thus the system is able to take a property that is stored in the database and represent it as a container that is like a folder. Since users are already familiar with working with folders by presenting the virtual folders in a similar manner users can adapt to the new system more quickly.

At a block the folder processor takes these results and converts them from the rows and columns of data into an enumerator structure which is used by the folder view to populate the screen with the resulting virtual folders and items for the user to interact upon. At a decision block a user decides whether to change the view by issuing a different query or pivot . For example a user could issue a show all artists pivot. If the user does want to change the view then the routine returns to block where the folder processor passes this new query to the relational database and receives back new rows and columns of results and constructs a new enumerator structure. The process then continues as described above as the folder view clears and updates using the enumerator to draw the artist objects to the screen.

In one example album objects are provided which represent containers that users can navigate into. For example double clicking the Beatles albums will navigate the view to see all of the Beatles songs. The folder processor issues the show all Beatles songs query to the relational database which hands back the rows and columns of data for those songs. The folder processor creates an enumerator of all these songs which then get drawn to the screen.

The user can also choose the view at any point while browsing virtual folders. From the above example after narrowing down to just show Beatles songs a user can change the view to only show the songs as albums. The process of changing the view of items into another representation is called stacking . This is because the items are conceptually arranged into stacks based on that representation. In this case the songs are rearranged into stacks for each of the various albums. Users can then navigate into one of these stacks only seeing the songs from that particular album. Again the user can rearrange the view of these remaining songs into stacks based on a property e.g. a rating for example . If the rating property were selected the songs from that Beatles album would be shown in stacks for a one two or a three star rating.

The results of each query depend on which physical locations are included in the scope. For example the scope may be made to include only the folders in the user s my documents folder. Alternatively the scope could include all folders on the computer or even all folders on multiple network connected computers. The user is able to view and change the scope through a scope property sheet. In one example the scope property sheet could be exposed by right clicking on the virtual folder and choosing properties. The user could add new folders to the scope or remove folders that were previously added.

One group of users for which virtual folders will provide particular utility is knowledge workers. Virtual folders allow knowledge workers to easily switch between viewing documents by file type project case number author etc. Since knowledge workers each tend to have a different method for organizing documents virtual folders can be used to accommodate these different preferences.

As illustrated in a folder is a my documents folder. At a first level the folder includes folders and corresponding to Clients and respectively. At a second level each of the folders and contain a folder and respectively which each correspond to the contracts for the selected client. At a third level each of the folders and contains a folder and respectively each corresponding to the year 2001. At the third level each of the folders and also contains a folder and respectively each corresponding to the year 2002.

It will be appreciated that a number of obstacles are presented to a user who wishes to navigate a physical folder file structure such as that illustrated in . For example if the user wishes to work with all of the contracts that the user has produced the user will first need to navigate to the folder to work with the contracts for Client and then will have to renavigate to the folder to reach the contracts for Client and will again have to renavigate to the folder for the contracts for Client . This arrangement makes it difficult for the user to access all of the contracts and in general prevents simultaneous viewing and manipulation of all of the contracts. Similarly if the user wishes to view all of the contracts produced in the year 2001 the user will have to navigate and renavigate to the folders and respectively. As will be described in more detail below the virtual folders of the present invention provide an improved file system structure.

The quick link elements include an all categories quick link on all authors quick link a January work quick link and a selection for displaying additional quick links . As will be described in more detail below quick links can be selected by a user to perform desired navigations of the virtual folders. Quick links may be provided by the system and some quick links may be created and saved by a user.

The filter elements include a filter by indicator an entry blank a by date indicator a year selector a pick an author selector a pick a category selector and a more filters selector . The filter by indicator directs a user to the fact that the items below can be used to filter the virtual folders or items. The entry blank provides an area in which a user can type a desired new filter term. The by date indicator directs a user to the fact that by selecting a date from the year selector the virtual folders or items can be filtered by the selected year. The pick an author selector allows a user to filter according to a specific author. The pick a category selector allows a user to filter according to a selected category. The more filters selector allows a user to pull up additional filters on the display.

The activity selectors include a create a new category selector activity selectors and and a more activities selector . As will be described in more detail below the activities that are presented may be for generally desirable functions or may more specifically be directed to activities useful for the type of virtual folders that are currently being displayed. For example the create a new category selector can be selected by the user to create a new category which will be represented by a new stack.

As noted above the activity selectors and may be more specifically directed to the type of folders or items that are being displayed. For example the present display is of a document library for which the activity selectors and may be directed to activities specifically tailored for documents such as editing or creating attachments. If the present library had been a photo library the activity selector and could be for activities specifically directed to photos such as forming photo albums or sharing photos with other users.

The information and control elements include information lines and a control line a backspace control and information lines and . The information lines and provide information as to the current navigation of the virtual folders or items. In the present example the information line indicates that the current navigation is to a document library while the information line indicates the more complete navigation showing that the document library is within the storage area. The control line provides a number of standard controls and the backspace button allows a user to back up through navigation. The information line provides numerical information about the contents of the present navigation. In the present example the information line indicates that there are 41 items which take up 100 MB in the stacks of the document library. The information line is available to provide additional information such as additional information about a file that is selected.

The stacks of the document library include an ABC Corp. stack a backups stack a business plans stack an XYZ Corp. stack and a marketing reports stack . The numbers on top of each of the stacks indicate how many items are in each stack. For example the ABC Corp. stack is shown to include 8 items. The total number of items of the stacks adds up to the number of items indicated in the information line which as described above is 41 in the present example. A selection box SB is provided which can be utilized by a user to select a desired item. The selection of the ABC Corp. stack yields a view of the items of that stack as will be described below with respect to .

As shown in a user is able to switch from the virtual files representation of to the physical file representation of . This allows a user to toggle between virtual file representations and physical file representations depending on which is desired for a current task. The different locations of the physical folders also illustrate that the scope of the virtual file system may be relatively broad as will be described in more detail below.

Another example of direct manipulation is right clicking an item and selecting delete. In one embodiment when a deleting function is selected by a user the user is queried whether the item should be deleted all together or simply removed from the present virtual folder. If the item is just to be removed from a present virtual folder category stack as noted above this can be accomplished by removing the desired category from the metadata for the item. In other words if one of the items that had been copied from the ABC Corp. stack to the West Coast stack was then to be removed from the West Coast stack this could be accomplished by modifying the category data for the particular file to no longer include the West Coast category.

The back button may be utilized by a user to back through the filtering process. As described above with respect to the back button allows a user to back up through navigation. With regard to the examples of after filtering by the term ABC in a user could select the back button so as to back up one step of the filtering process which would return to the state of . Alternatively in another embodiment the back button may clear out the entire filter term and may thus return to the state before that filtering occurred. In this case by pressing the back button in a user would return to the state of .

In one embodiment in addition to the back button an additional means is provided for a user to back up in or otherwise modify the filtering navigation. This additional means involves allowing the user to directly access and modify the information line which correspondingly changes the filter navigation. In other words by directly accessing and modifying the information line the user can remove one or more of the applied filters or modify the values for any of the applied filters. This feature is described in greater detail in U.S. patent application Ser. No. 10 420 040 filed Apr. 17 2003 which is commonly assigned and hereby incorporated by reference in its entirety.

A timer may also be utilized in conjunction with a user typing in filter terms such as those shown in . The timer is used to monitor for a pause in the typing by the user. After a selected interval of no typing the filter is applied. For example in the state of a user has typed the filter term AB with no significant time lag between the A and the B. After typing the term AB the user pauses thus producing the state shown in where the filter term AB is applied. Sometime later the user adds the letter C to complete the filter term ABC and then pauses again at which point the filter term ABC is applied as illustrated in .

In one embodiment after a user has typed a filter term in the filter area and then chooses another filter or navigation the navigation state is updated and the filter term in the filter area is made to be empty again. In addition as will be described in more detail below with reference to other filter controls may be updated based on the selection of certain filter terms.

As described above with respect to filter terms may be presented by the system or typed by a user. Once a filter term is selected the remaining filter terms that are presented may be updated e.g. after the year 2002 is selected in in the options for selecting a year are no longer presented and instead a pick a month option is provided . As noted above the back button may be selected by a user to back through the filtering process. For example after the month of January has been selected in the user may select the back button to back up the filtering process to the year 2002 as illustrated in . The filter menu may also include a stack by function which would work similarly to the stack by function described above with respect to . For example a file type filter could have choices for Excel PowerPoint Word and also Stack by file type . Choosing the stack by function changes the view to show stacks for the various file types.

In general the filters may be configured to apply to different properties of the files or items. In one embodiment the filters may be classified according to different types such as alphabet index discrete values dates and numerical ranges. Example properties for the alphabet index may include file name author artist contact friendly name owner document author document title document subject and description. Example properties for the discrete values may include location file type application name genre track decade for music rating for music bit rate protected document category document page count document comments camera model dimensions product name product version image X image Y and document created time. Example properties for the dates may include last accessed last modified created on taken on for pictures . An example property for the numerical range may be file size.

It will be appreciated that the filters described above with respect to allow users to reduce a list of items to find a particular item that is of interest. As a specific example according to the processes described above a user could narrow a current list of documents to only show Microsoft Word files authored by a particular person and edited in the last week. This functionality allows a user to find a particular item in a list of many and helps the user avoid having to manually scan each item in the list.

As shown in at a block a user makes a selection on the display to indicate that a new quick link should be formed from the present filter term or navigation. At a block the user provides a new name for the new quick link. At a block the new quick link is saved and the new quick link name is provided in the quick link section on the display.

As shown in at a block a scope is defined for the physical locations from which items are to be drawn. At a block in response to a query the items are drawn from the physical locations as defined in the scope. At a block all of the items drawn by the query are presented on a single display.

While the preferred embodiment of the invention has been illustrated and described it will be appreciated that various changes can be made therein without departing from the spirit and scope of the invention.

