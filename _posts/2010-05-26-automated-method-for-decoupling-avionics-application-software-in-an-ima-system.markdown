---

title: Automated method for decoupling avionics application software in an IMA system
abstract: A method to decouple software in an integrated modular system that employs message-based data exchange is provided. The method includes generating at least one configuration table for use by core software in at least one module in the integrated modular system. The at least one module hosts at least one of a consuming application. The method also includes gathering parameter data from producer messages at the core software in the at least one module based on the generated configuration table, and creating target messages at the core software based on the gathered parameter data. The target messages have a format specific to the consuming application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09063800&OS=09063800&RS=09063800
owner: Honeywell International Inc.
number: 09063800
owner_city: Morristown
owner_country: US
publication_date: 20100526
---
Application messages sent according to standardized application programming interfaces API such as Aeronautical Radio Inc. ARINC 653 standards are typically either a stream of bytes sent through queuing ports or a fixed set of parameters in a static arrangement sent through sampling ports. The application messages are sent between applications in different partitions through communications ports. A source application assembles multiple parameter values into a message structure and then outputs the message to a port. Then the platform software and hardware move the message perhaps through an aircraft network to one or more destination ports from which destination applications read the message. Each destination application is programmed to extract data parameters it needs from specific positions within specific messages.

The system must adjust as the application developers change the applications. For example when the producer of an application changes the location of a parameter in the message format all applications that read that parameter must be changed. Also if a parameter is moved to a different message which is common when sensor signals are moved to a different I O module all the consuming software must change to consume the parameter from the different message.

Each change requires a rebuild of the application and a re test of both the application and the modules that include the application. Thus as the software implemented by a system evolves it is necessary to coordinate changes in message content and message format between all software development organizations as part of the software release planning Currently available systems commonly have 50 000 100 000 parameters that are sent in 2000 4000 application messages so the task is extremely difficult and prone to errors often leading to project delays and expensive rework.

The present application relates to a method to decouple software in an integrated modular system that employs message based data exchange. The method includes generating at least one configuration table for use by core software in at least one module in the integrated modular system. The at least one module hosts at least one of a consuming application. The method also includes gathering parameter data from producer messages at the core software in the at least one module based on the generated configuration table and creating target messages at the core software based on the gathered parameter data. The target messages have a format specific to the consuming application.

In accordance with common practice the various described features are not drawn to scale but are drawn to emphasize features relevant to the present invention. Like reference characters denote like elements throughout figures and text.

In an integrated modular system that employs message based data exchange such as an integrated avionics system many different software applications are allocated to the various units and modules to provide the capabilities of the various system functions e.g. avionics and utility functions . These applications input data from other applications or from external sensors or data sources perform computations and output data to other applications display devices or to external effectors actuators or communications devices.

An application is software and or application specific hardware with a defined set of interfaces that when integrated with a platform s performs a function. The messages described herein are application messages sent between applications and not necessarily the network messages sent over a communication system. The messages described herein contain static arrangements of parameters sampled data not data streams. Network messages unlike application messages include information in the header and the footer and may contain fragments of an application message. An application message includes a group of parameter values. Typically in ARINC 653 based systems application messages are either a stream of bytes sent through queuing ports or values for a fixed set of parameters in a static arrangement that are sent through sampling ports. However queued messaging may be used for static arrangements especially if the arrangement is large. In environments not based on ARINC 653 standards the port entity may not specifically exist but comparable means of sending and receiving streams or static structures may be available.

Application messages may be exchanged between applications in the same execution environment or may be produced by an application in one execution environment and then transmitted to one or more consuming applications in different execution environments through some aircraft system bus or network e.g. ARINC 664 Part 7 Avionics Full DupleX AFDX Military Standard MIL STD 1553B Avionics Standard Communications Bus ASCB and Time Triggered Gigabit Ethernet TT GbE . In one implementation of this embodiment a message conforms to the definition of application messages used in the ARINC 664 Part 7 and ARINC 653 Part 2 industry standards. If ARINC 653 Part 2 industry standards are being implemented the at least one consuming application is implemented as a partition. If a standard other than the ARINC 653 Part 2 industry standard is being implemented the partitions are applications. Thus as defined herein a consuming application is a consuming partition when the module in which the consuming application is deployed is based on the ARINC 653 industry standards.

Applications sending data are producer applications or producing applications. A source message is an application message produced by a producing application. Source group messages also referred to herein as producer messages are generated by a source producer which specifies a source group structure. The source group structure specifies a composition of the message generated by the producer application.

Applications receiving data are consumer applications or consuming applications. A target message is an application message consumed at a consuming application. Traditionally the content and format of a target message exactly matched its corresponding source message and this functionality is still available. However as described herein target messages of the desired format are created at core software in the module based on the information indicative of the structure of one or more producer messages e.g. a source group structures . The consume group is a grouping of selected parameter values extracted from the source messages and moved into the consume group in the target message. The target messages are available in the destination sampling ports on the consuming partitions. Then the consuming application reads the target message from the sampling port using standard ARINC 653 calls or comparable calls in a non ARINC 653 environment.

A platform is a module or group of modules including core software that manages resources in a manner sufficient to support at least one application. A partition is a way of packaging an application that is specific to ARINC 653 compatible operating systems. The partition is an allocation of resources whose properties are guaranteed and protected by the platform from adverse interaction or influences from outside the partition. This feature provides a way to insure that applications in different partitions do not affect each other in unexpected or non deterministic ways. Other operating systems for example Deos provide time and space partitioning without a specific partition entity. Core software includes the operating system and the support software to manage platform resources in order to provide an environment in which an application can execute i.e. an execution environment. An execution environment represents the domain of a single instance of an operating system and may span one or more processors or processor cores.

Functions as defined herein represent the application and include software hardware and or firmware used by the product developers and software developers. To implement the functions requires one or more applications. A vehicle such as an aircraft spacecraft water borne vehicle or an automotive vehicle often has multiple instances of the same function. So for example a braking system includes an instance of the function for the brake on each wheel of an automobile e.g. a front left braking function a front right breaking function a rear left braking function a rear right breaking function since each function is running a different brake. The instances are identical but have different sets of inputs and outputs. For another example there are separate instances of software which are run on the same computer for the separate displays used by a pilot a copilot and a navigator on an aircraft.

As defined herein an aircraft network includes the integrated modular avionics IMA system and other devices communicatively coupled to the IMA system as required for functioning of the aircraft communications and or aircraft software hardware. In one implementation of this embodiment vehicle is not an aircraft and the IMA system is an integrated modular system.

The coupling of the consuming applications to the producing applications and or to the system network e.g. aircraft network used to transport a message through the system network is a critical aspect of system integration. The coupling occurs when the consuming application is dependent on 1 the particular structure of the message produced by formatting or by the source application or 2 timing characteristics of the system network.

It is typically the responsibility of a system integrator to manage the interfaces between the producing applications and consuming applications to insure that they are consistent. The system integrator is also responsible for managing the allocation of applications to execution environments in the modules of the integrated modular system managing the interface from each module to the rest of aircraft network and configuring the integrated modular system to ensure that each application in the integrated modular system receives the messages it requires within a specified time interval. Systems integration is becoming more difficult as the number and complexity of functions and applications to be integrated increases and is a common cause of cost overruns and schedule delays in integrated systems.

ARINC 653 is becoming increasingly popular as an execution environment to host safety critical applications because 1 it provides both space and time partitioning of multiple applications running in a single execution environment and 2 it is an industry standard allowing skills tools and to some degree software to be used on multiple programs. With ARINC 653 messages are sent between applications in different partitions through communications ports. A source application assembles data values into a message structure and then outputs the message to a port. Then the platform software and hardware move the message to one or more destination applications which read the message from a port. In an IMA system with multiple modules connected by a communications network source ports are communicatively coupled to destination ports in the receiving modules. In an ARINC 653 based system each destination application is programmed to extract the data parameters it needs from specific positions within specific messages.

The system and methods described herein are used to decouple the consuming applications from the producing applications and or to the system network. When the consuming applications are decoupled from the producing applications the system integrator does not need to rebuild or re test consuming applications when one of the producing applications is changed by an application developer. The systems and methods described herein provide decoupling between the communication port and the network interface e.g. a port in the execution environment on the consuming side while using an application programming interface API such as that specified in ARINC 653 in which the user reads an entire message rather than just plucking out individual parameters from the message.

The integrated modular system in a vehicle includes modules N that are communicatively coupled to each other. In one implementation of this embodiment the modules are communicatively coupled by one or more switches in a switched network such as AFDX ARINC 664 Part 7 or Time Triggered Ethernet. In another implementation of this embodiment the modules are part of a switchless network having a bus ring mesh or point to point topology. The modules N use operating systems or environments that employ message based rather than parameter based data exchange. In one implementation of this embodiment the modules N use ARINC 653 operating systems. The modules N are decoupled by the core software firmware N also referred to herein as core software N and core software function N that is loaded into the decoupled modules N from system . System is in a storage medium in a non transitory computer also referred to herein as a tooling computer .

The software systems in system include the software systems in system and the core software function CSW in each decoupled module N . The software systems in system include an integrated module avionics IMA Configuration Tool a configuration file generation tool and a configuration table verification tool which are software tooling components used during design and a configuration table generated by configuration file generation tool . The generated configuration table is loaded into at least one of the modules N and is used by the respective at least one core software N . The core software N perform the gathering and grouping operations of a consume group e.g. the grouping of selected parameter values within the consume group message . The software in system is executable by the processor . The core software function in each decoupled module N is executable by an associated processor N . In one implementation of this embodiment the modules are part of a computer not shown in the vehicle . In another implementation of this embodiment the core software function in each decoupled module N is executable by a processor in a computer not shown in the vehicle that is communicatively coupled to the modules N .

The software tooling components are also referred to herein as a first software design tool such as the IMA configuration tool second software design tool such as configuration file generating tool and a third software tool such as configuration table verification tool to build at least one configuration table . The first software design tool provides a user interface to a user . The user is enabled to specify based on the user interface 1 a composition and a format of a message produced by at least one producing application in at least one module in an integrated modular system and 2 a composition and a format of consume groups for a consuming application.

The second software design tool reads source group specifications and the consumer group specifications and generates the configuration table for at least one execution environment where is indicative of a mone of the execution environments in at least one module The third software tool validates the generated configuration table . The validated configuration table is loaded into the at least one module 

As shown in the software in the module of the integrated modular system is being decoupled from changes in the application interface specifications by a download of the configuration table . When the download of the configuration table to the module is completed the module is insulated from decoupled from a change that alters which producing application provides data of interest for the consuming applications in the integrated modular system . Likewise the module is insulated from decoupled from a change in position of the data item of interest within the data structure produced by the producing application. This process can occur for the N modules N . A module where is indicative of a jone of the modules N can be communicatively coupled to system when that module is receiving new and upgraded software. The configuration table loaded into the module can be different from the configuration table loaded into another one of the N modules N .

System is described for an aircraft or spacecraft with avionics. It is to be understood that system can be implemented on other vehicles such as automotive vehicles water borne vehicles or trains. In these latter embodiments the standards are those developed for the appropriate vehicle. If the vehicle is not an aircraft the integrated module avionics IMA Configuration Tool is an integrated module Configuration Tool and the IMA system is an integrated module system .

The integrated module avionics IMA Configuration Tool specifies the data interface i.e. input and output application messages including messages data structures and the rates at which the target messages and the produced messages are consumed and produced respectively of every application partition in the IMA system and specifies the allocation of applications partitions to execution environments and modules. The IMA Configuration Tool provides a user interface represented generally at with which an application developer user can specify the composition and format of the consume groups the consuming application is to consume. The user interface is configured to receive a composition of at least one consume group and the format of the at least one consume group. The IMA configuration tool of system permits application developers to define groups of parameters that their application wants to read or consume and to define the exact structure of the data groups. The groups of parameters and the exact structure of the data groups are defined herein as a consume group. The consume group is provided within a consume group message.

The configuration file generation tool reads the consume group structures and group parameters and generates a configuration table for each module N or execution environment that can be loaded into the modules N and subsequently to the core software N on the respective module N which performs the gathering and grouping operations of the module . The configuration file generation tool of system gathers data into the groups at run time to form new messages to be sent to the receiving application s communication ports so that the consuming application can read the group data using a message reading API like the standard ARINC 653 API routines.

The configuration table verification tool is qualified to validate the configuration table in order to ensure the configuration table is correct and complete. In one implementation of this embodiment the configuration table verification tool is qualified per DO 178B.

Application software and certification is simplified since consuming applications require no modification if the producer message structure changes or if parameters move to entirely different messages. Applications no longer need to read many different messages and extract the pertinent data from them. The infrastructure provided by system performs this function. The software and hardware can be tested for credit once and then reused on multiple modules in multiple vehicles. The functionality is specified by data tables which can be validated in minutes using automated techniques. Thus module and system integration labor is significantly reduced.

The module includes at least one execution environment and communications coprocessors and network interface hardware NIC . In the exemplary module shown in there are three execution environments and each including a respective operating system OS and communicatively coupled to a respective one of the communications coprocessors . The execution environments include partitions . The partitions include I O sampling and queuing ports . The exemplary module shown in is based on the ARINC 653 industry standards and illustrates partitions by the labels P P . . . P in the execution environments . If the module shown in is based on other than the ARINC 653 industry standards the labels P P . . . P are changed to labels A A . . . A representative of applications .

The execution environments run applications and are hence general purpose in nature. In one implementation of this embodiment execution environments host a flexible time and space partitioned operating system like Deos or ARINC 653 implementations. The execution environment has a specific purpose of running the core software and of managing the data flow between the execution environments . Hence execution environment does not need to be time or space partitioned and has a simple operating system to run core software internal to the execution environment . In one implementation of this embodiment the operating system is a scheduler and collection of interrupt handlers.

The core software EE includes execution environment input outputs EE I O network input output I O the operating system and a stored configuration table that was generated verified and loaded from system during a software upgrade and or installation process. The execution environment input outputs are associated with a respective one of the execution environments . The execution environment input outputs each include a plurality of communication ports that are communicatively coupled to an associated one of the I O sampling and queuing ports in the execution environments . The core software performs data movements specified by the configuration table stored in the core software firmware . The core software core software N in the at least one module hosts at least one of the consuming application or a partition e.g. partition where is indicative of a kone of the consuming partitions shown in .

The configuration table generated by the second software tool is also included in the software tooling components. The configuration table generated by the second software design tool is loaded into the at least one module The specific mechanism for data loading is known in the art and may differ from system to system.

The core software i e.g. the core software in the imodule is implemented by reading input messages from input sampling ports extracting data parameters and status values from the input messages as specified by the configuration table placing the data parameters and status values into data structures as specified by the configuration table and writing said data structures to output sampling ports . The operating system copies data to a destination sampling port of the nconsuming application 

In one implementation of this embodiment the core software performs the gathering and grouping operation as data is moved to the destination sampling port of the partition prior to a scheduled execution of said partition. In this embodiment a communications coprocessor handles the movement of sampling port messages between network interfaces and execution environments on the module.

Core software can be implemented in several ways. The easiest and least efficient way is to implement the function of the core software in an I O partition approach. The I O partition approach is used to 1 read all the input messages from sampling and queuing ports 2 extract the desired data parameter and status values and place them into data structures as specified by the configuration table and 3 write the structures to sampling and queuing ports so that the operating system copies the data to the destination sampling port of the consuming application. In the I O partition approach the core software is implemented as a standard application which requires scheduling to run at the correct times. Thus the I O partition approach uses more memory and processor time than if the consumer just reads the produced messages. But the I O partition approach advantageously provides the desired decoupling and can work in any ARINC 653 environment. Thus such an embodiment includes one execution environment with one or more input outputs I O and the application partitions e.g. are communicatively coupled to the network interface .

Another way to implement the function of the core software is to augment the standard communication port drivers not shown as part of the operating system instead of being a partition of the execution environment to perform the gathering and grouping operation as the operating system moves data to the destination sampling port prior to the scheduled execution of the partition This implementation requires somewhat less memory and processor time than the I O partition approach. This implementation increases the time required between partition executions but is simpler for the module integrator. This augmentation of the standard communication port drivers as part of the operating system requires modification of operating system components and the associated certification but these are components that often require modification for each platform.

The operations are inherently synchronized with these two implementations. In all cases the core software does not change based on the data movement specifications. In these implementations binary reuse is possible if the operating system supports it.

A third implementation of the core software function as is shown in permits gathering and grouping operations using the communications coprocessor that also handles that movement of sampling port messages between network interfaces and execution environments on the module This approach is advantageous because no additional processing resources or memory are required in the execution environment and it does not depend on which operating system runs in the execution environment It isolates the execution environment from message changes because execution timing in the execution environment is not affected when parameter changes are made. It also supports multiple execution environments on the module potentially with different operating systems in the various execution environments and . This approach requires the module design to include a sufficiently powerful communications co processor . This approach also requires additional computations in the software tooling and to precisely schedule when to perform each gathering and grouping operation so that the data gets moved to the communication port storage of the execution environment before the consuming partition is scheduled to run.

The processors processors N and co processors execute software and or firmware that causes the processors and N and co processors to perform at least some of the processing described herein as being performed by the tooling computer and the integrated modular system . In one implementation the processors and N include microprocessors and or microcontrollers. Moreover the processors processors N and co processors can be implemented with a memory not shown which is a separate element or which is integrated with one of the processors processors N and co processors for implementation as a single device for example a single integrated circuit device . The memories can include any suitable memory now known or later developed such as for example random access memory RAM read only memory ROM and or registers within the processors and N . In one implementation one or more of the processors and N and co processors include processor support chips and or system support chips such as application specific integrated circuits ASICs .

While it is possible to implement this scheme using an I O partition doing so does not allow you to reap the benefits of reduced CPU and memory. It is preferable to implement the functionality with platform hardware and middleware including software running in soft cores or hard cores embedded in field programmable gate arrays FPGAs or ASICs. The intention is to offload the application level processor s . The middleware is not application specific. Rather it is generic and table driven so that one set of software is useful for many different modules with configuration tables specifying the processing to be performed for each distinct module instance.

Each consume group is configured to identify the rules and constraints to which it must adhere. For example a group may be required to adhere to certain formatting conventions or standards such as for ARINC 664 Part 7 sampling ports ARINC 653 Part 2 sampling ports or an aircraft manufacturer s interoperability specification.

Data to drive movements for the source group specification include but are not limited to port or source structure address dataset number or FSB offset parameter identifier data type may not need parameter offset parameter size and or count for arrays .

Data to drive movements for the target group specification include but are not limited to port or target structure address dataset number or FSB offset parameter identifier data type parameter offset parameter size and count for arrays .

In the exemplary gathering of parameter values from a source group for a consumer specified target group that is shown in dataset in the target group includes two short integers and eight discretes from source group dataset of the source group . As defined herein a short integer includes two bytes and a discrete is a single bit. Dataset in the target group includes four short integers from source group dataset of the source group . Dataset in the target group includes twenty one discretes from source group dataset of the source group . As shown in the dataset of the target group the order of the discretes is changed from the order in the source group .

The system embodiments described herein are implemented using a produce consume model. It is to be understood that the systems can be implemented using a publish subscribe model as is understandable one to one skilled in the art.

At block the tooling software and in the system generates at least one configuration table for use by core software on at least one module in the integrated modular system . A portion of the program instructions are executed by at least one processor included in the non transitory tooling computer to cause the tooling computer to generate at least one configuration table for use by core software in at least one module in the integrated modular system .

The module hosts at least one of a consuming application. If the module includes an execution environment that is based on ARINC 653 standards the consuming application is partitioned as shown in into partitions Typically there is a one to one correspondence between application instances and partitions. If an execution environment is not based on ARINC 653 there is no partition there is only the application but the resulting functionality is the same. In one implementation of this embodiment the at least one module hosts at least one consuming application and at least one partition . In another implementation of this embodiment the consuming application is in one of the modules N within the integrated modular system that is communicatively coupled to the module . In yet another implementation of this embodiment the consuming application is in a module not shown external to the integrated modular system .

The integrated module avionics IMA configuration tool receives information indicative of a composition and a format of consume groups that the at least one application is to consume from an application developer shown as user in FIG. . The integrated module avionics IMA configuration tool also receives information indicative of a composition and a format of produced groups containing the parameters the at least one application is to consume. In order to create the consume group the format of the source groups from which the parameters are to be extracted must be known. The IMA configuration tool generates at least one consume group for the at least one consuming application based on the received information. The at least one consume group specifies the following data parameters and associated functional status parameters for the at least one consuming application a grouping of said data parameters for messages to be consumed at least one of a format and a structure of the messages to be consumed and a read rate of the messages to be consumed. The IMA configuration tool specifies a data interface for the at least one consuming application and the at least one partition in the integrated modular system. The associated functional status parameters are required to indicate whether the parameter values are valid or not. The functional status parameter values are the elements labeled as FS n for the nFS in the group structures shown in . The IMA configuration tool specifies the allocation of the at least one consuming application and the at least one partition to execution environments in the at least one module in the integrated modular system. In one implementation of this embodiment specifying the data interface is specifying the target messages and the produced messages including message data structures and the rates at which the target messages and the produced messages are consumed and produced respectively.

The IMA configuration tool reads the structure of said messages in the at least one consume group. The configuration file generation tool generates the configuration file for the execution environments in the at least one module 

Before the generated configuration file is loaded into the core software of a module in the integrated modular system the generated configuration table is validated by the configuration table verification tool . The configuration table verification tool reads the requirements to perform the validating. In one implementation of this embodiment the configuration table verification tool reads requirements that are based on a standard that is associated with the message based data exchange.

At block the configuration table is loaded into the associated module . The rest of the method describes how the generated configuration table is implemented to decouple the core software in the module from any upgrades that may be required at a later time. A portion of the program instructions are executed by at least one processor included in the module in the integrated modular system to cause the integrated modular system to perform the steps of blocks and .

At block the producing application creates a producer message and transmits the producer message to the consuming module. At block the core software gathers parameter data from producer messages in the module into the consumer specified data structure based on the generated configuration table . The generated configuration table is stored in the core software In one implementation of this embodiment the parameter data is gathered from one or more input output units sampled at more than one data rate.

At block the core software creates target messages based on the consumer specified data structure. The target messages have a format that is specific to the consuming application. In this manner the format of the target message is specifically designed to meet the needs of the consuming application and only the consuming application. Each consuming application obtains messages specifically designed to meet its needs. The consuming application in programmed to use the data structure of the target group containing the parameters it needs to consume. Any additional changes desired by the producer of an application can be incorporated by generating a new configuration table as in block and loading it into the associated module as in block .

Although specific embodiments have been illustrated and described herein it will be appreciated by those skilled in the art that any arrangement which is calculated to achieve the same purpose may be substituted for the specific embodiment shown. This application is intended to cover any adaptations or variations of the present invention. Therefore it is manifestly intended that this invention be limited only by the claims and the equivalents thereof.

