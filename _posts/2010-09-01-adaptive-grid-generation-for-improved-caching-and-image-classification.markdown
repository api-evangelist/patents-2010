---

title: Adaptive grid generation for improved caching and image classification
abstract: Example embodiments of the present disclosure provide mechanisms for generating an improved grid for use in caching and classification when transmitting graphics data to a client computer. Such a grid may have the property that it is aligned to captured screen content such as user interface elements and borders between images and text. In some embodiments, an algorithm may be used that analyzes a screen and generates a subdivision grid of the screen that is likely to partition the screen into areas that substantially separate image and text content. This subdivision grid can also be further sub-divided (i.e., tiled) into regions that may be better suited for caching. In further embodiments, the algorithm may produce the grid using information from a window manager regarding window hierarchies and user interface element placement.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08760453&OS=08760453&RS=08760453
owner: Microsoft Corporation
number: 08760453
owner_city: Redmond
owner_country: US
publication_date: 20100901
---
One increasingly popular form of networking may generally be referred to as remote presentation systems which can use protocols such as Remote Desktop Protocol RDP and Independent Computing Architecture ICA to share a desktop and other applications executing on a server with a remote client. Such computing systems typically transmit the keyboard presses and mouse clicks or selections from the client to the server relaying the screen updates back in the other direction over a network connection e.g. the Internet . As such the user has the experience as if his or her machine is operating entirely locally when in reality the client device is only sent screenshots of the desktop or applications as they appear on the server side.

In such systems the user graphics and video may be rendered at a server for each user. The resulting bitmaps may then be sent to the client for display and interaction. To reduce the bandwidth requirements on the network bitmaps may be compressed and encoded before sending to the client. The encoding system may include a tiling system that initially divides source image data into data tiles. A frame differencing module may then output only altered data tiles to various processing modules that convert the altered data tiles into corresponding tile components.

One problem with remote presentation systems that employs such a tiling scheme is the scenario where the changed areas of a screen are not fully aligned on a tile when the tiles are a predetermined size and generated using a fixed origin. For example a tile may comprise both video and text portions or sub regions. Treating the entire tile as a slow changing text portion may result in the system being unable to provide updates fast enough to keep up with the faster changing video portion. Treating the entire tile as fast changing may result in the text portion being rendered with a lesser quality image. When an algorithm for scalable encoding is performed the higher fidelity image may appear to be fuzzy because only the high frequency components may be sent as a result of the video being repeatedly updated. Furthermore when using bit map caching tiles are stored in a cache and when a tile in a subsequent frame is identical to a previously cached tile then the cached tile can be used referred to as a cache hit . However if a user screen is scrolled or otherwise moved in reference to the screen origin then it is possible that cache hits will not be identified even if the screen is substantially unchanged.

Accordingly disclosed herein is a mechanism for generating a more suitable grid for both caching and classification. Such a grid may have the property that it is aligned to screen content such as user interface elements and borders between images and text. In some embodiments an algorithm may be used that analyzes a screen and generates a subdivision grid of the screen that is likely to partition the screen into areas that substantially separate image and text content. This subdivision grid can also be further sub divided i.e. tiled into regions that may be better suited for caching. In further embodiments the algorithm may produce the grid using information from a window manager regarding window hierarchies and user interface element placement.

For example methods and systems are disclosed for processing graphics data for transmission to a remote computing device. An example method may comprise receiving graphics data representative of a client screen to be transmitted to the remote computing device determining anchor points in the graphics data wherein the anchor points are indicative of transitions between visual elements of the client screen based on the anchor points determining a grid for subdividing the client screen wherein the grid is substantially aligned to user interface elements and border between images and text of said client screen and based on the grid dividing the graphics data into data tiles and processing said data tiles for transmission to the remote computing device.

Certain specific details are set forth in the following description and figures to provide a thorough understanding of various embodiments of the disclosure. Certain well known details often associated with computing and software technology are not set forth in the following disclosure to avoid unnecessarily obscuring the various embodiments of the disclosure. Further those of ordinary skill in the relevant art will understand that they can practice other embodiments of the disclosure without one or more of the details described below. Finally while various methods are described with reference to steps and sequences in the following disclosure the description as such is for providing a clear implementation of embodiments of the disclosure and the steps and sequences of steps should not be taken as required to practice this disclosure.

It should be understood that the various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. Thus the methods and apparatus of the disclosure or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the disclosure. In the case of program code execution on programmable computers the computing device generally includes a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs that may implement or utilize the processes described in connection with the disclosure e.g. through the use of an application programming interface API reusable controls or the like. Such programs are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined with hardware implementations.

A remote desktop system is a computer system that maintains applications that can be remotely executed by client computer systems. Input is entered at a client computer system and transferred over a network e.g. using protocols based on the International Telecommunications Union ITU T.120 family of protocols such as Remote Desktop Protocol RDP to an application on a terminal server. The application processes the input as if the input were entered at the terminal server. The application generates output in response to the received input and the output is transferred over the network to the client.

Embodiments may execute on one or more computers. and the following discussion are intended to provide a brief general description of a suitable computing environment in which the disclosure may be implemented. One skilled in the art can appreciate that computer systems can have some or all of the components described with respect to computer of .

The term circuitry used throughout the disclosure can include hardware components such as hardware interrupt controllers hard drives network adaptors graphics processors hardware based video audio codecs and the firmware software used to operate such hardware. The term circuitry can also include microprocessors configured to perform function s by firmware or by switches set in a certain way or one or more logical processors e.g. one or more cores of a multi core general processing unit. The logical processor s in this example can be configured by software instructions embodying logic operable to perform function s that are loaded from memory e.g. RAM ROM firmware and or virtual memory. In example embodiments where circuitry includes a combination of hardware and software an implementer may write source code embodying logic that is subsequently compiled into machine readable code that can be executed by a logical processor. Since one skilled in the art can appreciate that the state of the art has evolved to a point where there is little difference between hardware software or a combination of hardware software the selection of hardware versus software to effectuate functions is merely a design choice. Thus since one of skill in the art can appreciate that a software process can be transformed into an equivalent hardware structure and a hardware structure can itself be transformed into an equivalent software process the selection of a hardware implementation versus a software implementation is trivial and left to an implementer.

A number of program modules may be stored on the hard disk magnetic disk optical disk ROM or RAM including an operating system one or more application programs other program modules and program data . A user may enter commands and information into the computer through input devices such as a keyboard and pointing device . Other input devices not shown may include a microphone joystick game pad satellite disk scanner or the like. These and other input devices are often connected to the processing unit through a serial port interface that is coupled to the system bus but may be connected by other interfaces such as a parallel port game port or universal serial bus USB . A display or other type of display device can also be connected to the system bus via an interface such as a video adapter . In addition to the display computers typically include other peripheral output devices not shown such as speakers and printers. The system of also includes a host adapter Small Computer System Interface SCSI bus and an external storage device connected to the SCSI bus .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be another computer a server a router a network PC a peer device or other common network node a virtual machine and typically can include many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in can include a local area network LAN and a wide area network WAN . Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer can be connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer can typically include a modem or other means for establishing communications over the wide area network such as the Internet. The modem which may be internal or external can be connected to the system bus via the serial port interface . In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. It will be appreciated that the network connections shown are examples and other means of establishing a communications link between the computers may be used. Moreover while it is envisioned that numerous embodiments of the disclosure are particularly well suited for computer systems nothing in this document is intended to limit the disclosure to such embodiments.

Referring now to another embodiment of an exemplary computing system is depicted. Computer system can include a logical processor e.g. an execution core. While one logical processor is illustrated in other embodiments computer system may have multiple logical processors e.g. multiple execution cores per processor substrate and or multiple processor substrates that could each have multiple execution cores. As shown by the figure various computer readable storage media can be interconnected by one or more system busses which couples various system components to the logical processor . The system buses may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. In example embodiments the computer readable storage media can include for example random access memory RAM storage device e.g. electromechanical hard drive solid state hard drive etc. firmware e.g. FLASH RAM or ROM and removable storage devices such as for example CD ROMs floppy disks DVDs FLASH drives external storage devices etc. It should be appreciated by those skilled in the art that other types of computer readable storage media can be used such as magnetic cassettes flash memory cards digital video disks Bernoulli cartridges.

The computer readable storage media provide non volatile storage of processor executable instructions data structures program modules and other data for the computer . A basic input output system BIOS containing the basic routines that help to transfer information between elements within the computer system such as during start up can be stored in firmware . A number of programs may be stored on firmware storage device RAM and or removable storage devices and executed by logical processor including an operating system and or application programs.

Commands and information may be received by computer through input devices which can include but are not limited to a keyboard and pointing device. Other input devices may include a microphone joystick game pad scanner or the like. These and other input devices are often connected to the logical processor through a serial port interface that is coupled to the system bus but may be connected by other interfaces such as a parallel port game port or universal serial bus USB . A display or other type of display device can also be connected to the system bus via an interface such as a video adapter which can be part of or connected to a graphics processor . In addition to the display computers typically include other peripheral output devices not shown such as speakers and printers. The exemplary system of can also include a host adapter Small Computer System Interface SCSI bus and an external storage device connected to the SCSI bus.

Computer system may operate in a networked environment using logical connections to one or more remote computers such as a remote computer. The remote computer may be another computer a server a router a network PC a peer device or other common network node and typically can include many or all of the elements described above relative to computer system .

When used in a LAN or WAN networking environment computer system can be connected to the LAN or WAN through a network interface card . The NIC which may be internal or external can be connected to the system bus. In a networked environment program modules depicted relative to the computer system or portions thereof may be stored in the remote memory storage device. It will be appreciated that the network connections described here are exemplary and other means of establishing a communications link between the computers may be used. Moreover while it is envisioned that numerous embodiments of the present disclosure are particularly well suited for computerized systems nothing in this document is intended to limit the disclosure to such embodiments.

A remote desktop system is a computer system that maintains applications that can be remotely executed by client computer systems. Input is entered at a client computer system and transferred over a network e.g. using protocols based on the International Telecommunications Union ITU T.120 family of protocols such as Remote Desktop Protocol RDP to an application on a terminal server. The application processes the input as if the input were entered at the terminal server. The application generates output in response to the received input and the output is transferred over the network to the client computer system. The client computer system presents the output data. Thus input is received and output presented at the client computer system while processing actually occurs at the terminal server. A session can include a shell and a user interface such as a desktop the subsystems that track mouse movement within the desktop the subsystems that translate a mouse click on an icon into commands that effectuate an instance of a program etc. In another example embodiment the session can include an application. In this example while an application is rendered a desktop environment may still be generated and hidden from the user. It should be understood that the foregoing discussion is exemplary and that the presently disclosed subject matter may be implemented in various client server environments and not limited to a particular terminal services product.

In most if not all remote desktop environments input data entered at a client computer system typically includes mouse and keyboard data representing commands to an application and output data generated by an application at the terminal server typically includes video data for display on a video output device. Many remote desktop environments also include functionality that extend to transfer other types of data.

Communications channels can be used to extend the RDP protocol by allowing plug ins to transfer data over an RDP connection. Many such extensions exist. Features such as printer redirection clipboard redirection port redirection etc. use communications channel technology. Thus in addition to input and output data there may be many communications channels that need to transfer data. Accordingly there may be occasional requests to transfer output data and one or more channel requests to transfer other data contending for available network bandwidth.

Referring now to depicted are high level block diagrams of computer systems configured to effectuate virtual machines. As shown in the figures computer system can include elements described in and components operable to effectuate virtual machines. One such component is a hypervisor that may also be referred to in the art as a virtual machine monitor. The hypervisor in the depicted embodiment can be configured to control and arbitrate access to the hardware of computer system . Broadly stated the hypervisor can generate execution environments called partitions such as child partition through child partition N where N is an integer greater than or equal to 1 . In embodiments a child partition can be considered the basic unit of isolation supported by the hypervisor that is each child partition can be mapped to a set of hardware resources e.g. memory devices logical processor cycles etc. that is under control of the hypervisor and or the parent partition and hypervisor can isolate one partition from accessing another partition s resources. In embodiments the hypervisor can be a stand alone software product a part of an operating system embedded within firmware of the motherboard specialized integrated circuits or a combination thereof.

In the above example computer system includes a parent partition that can also be thought of as domain 0 in the open source community. Parent partition can be configured to provide resources to guest operating systems executing in child partitions N by using virtualization service providers VSPs that are also known as back end drivers in the open source community. In this example architecture the parent partition can gate access to the underlying hardware. The VSPs can be used to multiplex the interfaces to the hardware resources by way of virtualization service clients VSCs that are also known as front end drivers in the open source community. Each child partition can include one or more virtual processors such as virtual processors through that guest operating systems through can manage and schedule threads to execute thereon. Generally the virtual processors through are executable instructions and associated state information that provide a representation of a physical processor with a specific architecture. For example one virtual machine may have a virtual processor having characteristics of an Intel x86 processor whereas another virtual processor may have the characteristics of a PowerPC processor. The virtual processors in this example can be mapped to logical processors of the computer system such that the instructions that effectuate the virtual processors will be backed by logical processors. Thus in these example embodiments multiple virtual processors can be simultaneously executing while for example another logical processor is executing hypervisor instructions. Generally speaking and as illustrated by the figures the combination of virtual processors various VSCs and memory in a partition can be considered a virtual machine such as virtual machine or .

Generally guest operating systems through can include any operating system such as for example operating systems from Microsoft Apple the open source community etc. The guest operating systems can include user kernel modes of operation and can have kernels that can include schedulers memory managers etc. A kernel mode can include an execution mode in a logical processor that grants access to at least privileged processor instructions. Each guest operating system through can have associated file systems that can have applications stored thereon such as terminal servers e commerce servers email servers etc. and the guest operating systems themselves. The guest operating systems can schedule threads to execute on the virtual processors and instances of such applications can be effectuated.

Referring now to illustrated is an alternative architecture that can be used to effectuate virtual machines. depicts similar components to those of however in this example embodiment the hypervisor can include the virtualization service providers and device drivers and parent partition may contain configuration utilities . In this architecture hypervisor can perform the same or similar functions as the hypervisor of . The hypervisor of can be a stand alone software product a part of an operating system embedded within firmware of the motherboard or a portion of hypervisor can be effectuated by specialized integrated circuits. In this example parent partition may have instructions that can be used to configure hypervisor however hardware access requests may be handled by hypervisor instead of being passed to parent partition .

Referring now to computer may include circuitry configured to provide remote desktop services to connecting clients. In an example embodiment the depicted operating system may execute directly on the hardware or a guest operating system or may be effectuated by a virtual machine such as VM or VM . The underlying hardware and is indicated in the illustrated type of dashed lines to identify that the hardware can be virtualized.

Remote services can be provided to at least one client such as client while one client is depicted remote services can be provided to more clients. The example client can include a computer terminal that is effectuated by hardware configured to direct user input to a remote server session and display user interface information generated by the session. In another embodiment client can be effectuated by a computer that includes similar elements as those of computer . In this embodiment client can include circuitry configured to effect operating systems and circuitry configured to emulate the functionality of terminals e.g. a remote desktop client application that can be executed by one or more logical processors . One skilled in the art can appreciate that the circuitry configured to effectuate the operating system can also include circuitry configured to emulate a terminal.

Each connecting client can have a session such as session which allows the client to access data and applications stored on computer . Generally applications and certain operating system components can be loaded into a region of memory assigned to a session. Thus in certain instances some OS components can be spawned N times where N represents the number of current sessions . These various OS components can request services from the operating system kernel which can for example manage memory facilitate disk reads writes and configure threads from each session to execute on the logical processor . Some example subsystems that can be loaded into session space can include the subsystems that generates desktop environments the subsystems that track mouse movement within the desktop the subsystems that translate mouse clicks on icons into commands that effectuate an instance of a program etc. The processes that effectuate these services e.g. tracking mouse movement are tagged with an identifier associated with the session and are loaded into a region of memory that is allocated to the session.

A session can be generated by a session manager e.g. a process. For example the session manager can initialize and manage each remote session by generating a session identifier for a session space assigning memory to the session space and generating system environment variables and instances of subsystem processes in memory assigned to the session space. The session manager can be invoked when a request for a remote desktop session is received by the operating system .

A connection request can first be handled by a transport stack e.g. a remote desktop protocol RDP stack. The transport stack instructions can configure logical processor to listen for connection messages on a certain port and forward them to the session manager . When sessions are generated the transport stack can instantiate a remote desktop protocol stack instance for each session. Stack instance is an example stack instance that can be generated for session . Generally each remote desktop protocol stack instance can be configured to route output to an associated client and route client input to an environment subsystem for the appropriate remote session.

As shown by the figure in an embodiment an application while one is shown others can also execute can execute and generate an array of bits. The array can be processed by a graphics interface which in turn can render bitmaps e.g. arrays of pixel values that can be stored in memory. As shown by the figure a remote display subsystem can be instantiated which can capture rendering calls and send the calls over the network to client via the stack instance for the session.

In addition to remoting graphics and audio a plug and play redirector can also be instantiated in order to remote diverse devices such as printers mp3 players client file systems CD ROM drives etc. The plug and play redirector can receive information from a client side component which identifies the peripheral devices coupled to the client . The plug and play redirector can then configure the operating system to load redirecting device drivers for the peripheral devices of the client . The redirecting device drivers can receive calls from the operating system to access the peripherals and send the calls over the network to the client .

As discussed above clients may use a protocol for providing remote presentation services such as Remote Desktop Protocol RDP to connect to a resource using terminal services. When a remote desktop client connects to a terminal server via a terminal server gateway the gateway may open a socket connection with the terminal server and redirect client traffic on the remote presentation port or a port dedicated to remote access services. The gateway may also perform certain gateway specific exchanges with the client using a terminal server gateway protocol transmitted over HTTPS.

Turning to depicted is a computer system including circuitry for effectuating remote services and for incorporating aspects of the present disclosure. As shown by the figure in an embodiment a computer system can include components similar to those described in and and can effectuate a remote presentation session. In an embodiment of the present disclosure a remote presentation session can include aspects of a console session e.g. a session spawned for a user using the computer system and a remote session. Similar to that described above the session manager can initialize and manage the remote presentation session by enabling disabling components in order to effectuate a remote presentation session.

One set of components that can be loaded in a remote presentation session are the console components that enable high fidelity remoting namely the components that take advantage of 3D graphics and 2D graphics rendered by 3D hardware.

3D 2D graphics rendered by 3D hardware can be accessed using a driver model that includes a user mode driver an API a graphics kernel and a kernel mode driver . An application or any other process such as a user interface that generates 3D graphics can generate API constructs and send them to an application programming interface API such as Direct3D from Microsoft . The API in turn can communicate with a user mode driver which can generates primitives e.g. the fundamental geometric shapes used in computer graphics represented as vertices and constants which are used as building blocks for other shapes and stores them in buffers e.g. pages of memory. In one embodiment the application can declare how it is going to use the buffer e.g. what type of data it is going to store in the buffer. An application such as a videogame may use a dynamic buffer to store primitives for an avatar and a static buffer for storing data that will not change often such as data that represents a building or a forest.

Continuing with the description of the driver model the application can fill the buffers with primitives and issue execute commands. When the application issues an execute command the buffer can be appended to a run list by the kernel mode driver and scheduled by the graphics kernel scheduler . Each graphics source e.g. application or user interface can have a context and its own run list. The graphics kernel can be configured to schedule various contexts to execute on the graphics processing unit . The GPU scheduler can be executed by logical processor and the scheduler can issue a command to the kernel mode driver to render the contents of the buffer. The stack instance can be configured to receive the command and send the contents of the buffer over the network to the client where the buffer can be processed by the GPU of the client.

Illustrated now is an example of the operation of a virtualized GPU as used in conjunction with an application that calls for remote presentation services. Referring to in an embodiment a virtual machine session can be generated by a computer . For example a session manager can be executed by a logical processor and a remote session that includes certain remote components can be initialized. In this example the spawned session can include a kernel a graphics kernel a user mode display driver and a kernel mode display driver . The user mode driver can generate graphics primitives that can be stored in memory. For example the API can include interfaces that can be exposed to processes such as a user interface for the operating system or an application . The process can send high level API commands such as such as Point Lists Line Lists Line Strips Triangle Lists Triangle Strips or Triangle Fans to the API . The API can receive these commands and translate them into commands for the user mode driver which can then generate vertices and store them in one or more buffers. The GPU scheduler can run and determine to render the contents of the buffer. In this example the command to the graphics processing unit of the server can be captured and the content of the buffer primitives can be sent to client via network interface card . In an embodiment an API can be exposed by the session manager that components can interface with in order to determine whether a virtual GPU is available.

In an embodiment a virtual machine such as virtual machine of or can be instantiated and the virtual machine can serve as a platform for execution for the operating system . Guest operating system can embody operating system in this example. A virtual machine may be instantiated when a connection request is received over the network. For example the parent partition may include an instance of the transport stack and may be configured to receive connection requests. The parent partition may initialize a virtual machine in response to a connection request along with a guest operating system including the capabilities to effectuate remote sessions. The connection request can then be passed to the transport stack of the guest operating system . In this example each remote session may be instantiated on an operating system that is executed by its own virtual machine.

In one embodiment a virtual machine can be instantiated and a guest operating system embodying operating system can be executed. Similar to that described above a virtual machine may be instantiated when a connection request is received over the network. Remote sessions may be generated by an operating system. The session manager can be configured to determine that the request is for a session that supports 3D graphics rendering and the session manager can load a console session. In addition to loading the console session the session manager can load a stack instance for the session and configure system to capture primitives generated by a user mode display driver .

The user mode driver may generate graphics primitives that can be captured and stored in buffers accessible to the transport stack . A kernel mode driver can append the buffers to a run list for the application and a GPU scheduler can run and determine when to issue render commands for the buffers. When the scheduler issues a render command the command can be captured by for example the kernel mode driver and sent to the client via the stack instance .

The GPU scheduler may execute and determine to issue an instruction to render the content of the buffer. In this example the graphics primitives associated with the instruction to render can be sent to client via network interface card .

In an embodiment at least one kernel mode process can be executed by at least one logical processor and the at least one logical processor can synchronize rendering vertices stored in different buffers. For example a graphics processing scheduler which can operate similarly to an operating system scheduler can schedule GPU operations. The GPU scheduler can merge separate buffers of vertices into the correct execution order such that the graphics processing unit of the client executes the commands in an order that allows them to be rendered correctly.

One or more threads of a process such as a videogame may map multiple buffers and each thread may issue a draw command. Identification information for the vertices e.g. information generated per buffer per vertex or per batch of vertices in a buffer can be sent to the GPU scheduler . The information may be stored in a table along with identification information associated with vertices from the same or other processes and used to synchronize rendering of the various buffers.

An application such as a word processing program may execute and declare for example two buffers one for storing vertices for generating 3D menus and the other one storing commands for generating letters that will populate the menus. The application may map the buffer and issue draw commands. The GPU scheduler may determine the order for executing the two buffers such that the menus are rendered along with the letters in a way that it would be pleasing to look at. For example other processes may issue draw commands at the same or a substantially similar time and if the vertices were not synchronized vertices from different threads of different processes could be rendered asynchronously on the client thereby making the final image displayed seem chaotic or jumbled.

A bulk compressor can be used to compress the graphics primitives prior to sending the stream of data to the client . In an embodiment the bulk compressor can be a user mode not shown or kernel mode component of the stack instance and can be configured to look for similar patterns within the stream of data that is being sent to the client . In this embodiment since the bulk compressor receives a stream of vertices instead of receiving multiple API constructs from multiple applications the bulk compressor has a larger data set of vertices to sift through in order to find opportunities to compress. That is since the vertices for a plurality of processes are being remoted instead of diverse API calls there is a larger chance that the bulk compressor will be able to find similar patterns in a given stream.

In an embodiment the graphics processing unit may be configured to use virtual addressing instead of physical addresses for memory. Thus the pages of memory used as buffers can be paged to system RAM or to disk from video memory. The stack instance can be configured to obtain the virtual addresses of the buffers and send the contents from the virtual addresses when a render command from the graphics kernel is captured.

An operating system may be configured e.g. various subsystems and drivers can be loaded to capture primitives and send them to a remote computer such as client . Similar to that described above a session manager can be executed by a logical processor and a session that includes certain remote components can be initialized. In this example the spawned session can include a kernel a graphics kernel a user mode display driver and a kernel mode display driver .

A graphics kernel may schedule GPU operations. The GPU scheduler can merge separate buffers of vertices into the correct execution order such that the graphics processing unit of the client executes the commands in an order that allows them to be rendered correctly.

All of these variations for implementing the above mentioned partitions are just exemplary implementations and nothing herein should be interpreted as limiting the disclosure to any particular virtualization aspect.

In a virtual desktop or remote presentation session the user graphics and video may be rendered at the server for each user. The resulting bitmaps may then be sent to the client for display and interaction. To reduce the bandwidth requirements on the network bitmaps may be compressed before sending to the client. It is desirable that the compression technique be efficient with low latency.

A remote presentation system may be configured to encode and decode bitmaps and other graphics data. The encoding system may include a tiling system with a tiling module that initially divides source image data into data tiles. A frame differencing module may then output only altered data tiles to various processing modules that convert the altered data tiles into corresponding tile components. A quantizer may perform a compression procedure upon the tile components to generate compressed data according to an adjustable quantization parameter. An adaptive entropy encoder selector may then select one of a plurality of entropy encoders to perform an entropy encoding procedure to thereby produce encoded data. The entropy encoder may also utilize a feedback loop to adjust the quantization parameter in light of current transmission bandwidth characteristics. The process of compressing encoding and decoding graphics data as referred to herein may generally use one or more methods and systems described in commonly assigned U.S. Pat. No. 7 460 725 entitled System And Method For Effectively Encoding And Decoding Electronic Information and U.S. application Ser. No. 12 399 302 entitled Frame Capture Encoding And Transmission Management filed on Mar. 6 2009 hereby incorporated by reference in their entirety.

In various methods and systems disclosed herein improvements to the processing and handling of the various processes described above may be used to provide more efficient processing and thus a more timely and rich user experience. The embodiments disclosed herein for rendering encoding and transmitting graphics data may be implemented using various combinations of hardware and software processes. In various embodiments functions may be executed entirely in hardware entirely in software or using a combination of hardware and software processes. Such processes may further be implemented using one or more CPUs and or one or more specialized processors such as a graphics processing unit GPU or other dedicated graphics rendering devices.

Furthermore while the following descriptions are provided in the context of remote presentation systems it should be understood that the disclosed embodiments may be implemented in any type of system in which graphics data is encoded and compressed for delivery over a network.

Various embodiments may incorporate the use of the discrete wavelet transform DWT function for transforming individual YUV components of the tiles into corresponding YUV the subbands. A quantizer function may perform a quantization procedure by utilizing appropriate quantization techniques to compress the tile subbands. The quantizer function may produce compressed image data by reducing the bit rate of the tiles according to a particular compression ratio that may be specified by an adaptive quantization parameter received via a feedback loop from an entropy encoder.

In one embodiment a GPU may be provided a bitmap with changed rectangles that need to be compressed. The bitmap may be further split into logical tiles and only tiles that change within the changed rectangle are encoded and compressed. In this manner the process effectively implements a caching scheme in concert with the client where the resulting decoded image is maintained and displayed.

Remote presentation compression algorithms may be employed to reduce the bandwidth of the display stream to levels that are acceptable for transmission over local area networks wide area networks and low bandwidth networks. Such algorithms typically trade off CPU time on the server side for a lower desired bandwidth.

Image compressors may be used that may employ a phase called an entropy coder. An entropy encoder function may perform an entropy encoding procedure to generate encoded data. In certain embodiments the entropy encoding procedure further reduces the bit rate of the compressed image data by substituting appropriate codes for corresponding bit patterns in the compressed image data received from the quantizer.

One issue that may arise is providing efficient bandwidth usage when parts of the screen are updated often such as for example when playing back video or animation. Another issue is the tracking of areas of the screen that have different update speeds. It is desirable in such situations to support staged encoding and thus reduce the bandwidth usage. For example video or animation playback may be embedded in a window that contains high resolution content surrounding the video e.g. text . If staged encoding is performed on the part of the window that contains both contents worse quality may result for the high quality image because the algorithm will treat both areas in the same manner even though the high quality part does not update as often as the video playback sub portion.

When performing bit mapped encoding effective bit map caching and content classification can greatly improve the performance of remote presentation systems. Many remote presentation protocols use techniques such as classification of image regions as text or images and caching tiles to optimize network performance. Typically such techniques are applied to the screen on a fixed tile grid which may result in disadvantages for 

In some of the tile based schemes described above a fixed grid that starts at the screen origin is typically used. In bit map caching tiles are stored in cache and when a tile in a subsequent frame is identical to a previously cached tile then the cached tile can be used which is referred to as a cache hit. However if a user screen is scrolled or otherwise moved in reference to the screen origin then it is possible that cache hits will not be identified even if the screen is substantially unchanged.

For example referring to the letter A is shown as being rendered on a screen frame with 64 64 tiles. A fixed grid with fixed origin 0 0 is used. In a first frame a hash key may be computed for each tile for example tiles and that encompass the letter A. A hash key may be computed for each tile including tiles and tile . If in the next frame a tile with the same hash as tile is used then you have a cache hit situation and the cached tile for tile may be used rather than a newly encoded tile. However if in a second frame the screen has been scrolled up by only one pixel and the same fixed grid scheme is used with fixed origin 0 0 then the hash keys for the tiles may change and you would not get the cache hits even when the frame is substantially similar to the previous frame. For example in frame the letter A is still encompassed by tiles and but the hash keys for tiles and in frame no longer match those of tiles and in frame .

Another problem that may arise in remote presentation systems is that classifiers may be used to analyze a screen frame to determine an appropriate codec to encode a tile depending on the content of the tile. When using a fixed grid without regard to the actual contents of the frame the result may be that some tiles contain both text and image. The classifier may as a result select a less optimal encoder at least for portions of the tile when the tile has mixed content.

In various embodiments methods and systems are disclosed for generating a more suitable grid for use in both caching and classification. Such a grid may have the property that it is aligned to screen content such as user interface elements and borders between images and text. In some embodiments an algorithm may be used that analyzes a screen and generates a subdivision grid of the screen that is likely to partition the screen into areas that substantially separate image and text content. This subdivision grid can also be further sub divided i.e. tiled into regions that may be better suited for caching. In further embodiments the algorithm may produce the grid using information from a window manager regarding window hierarchies and user interface element placement. Accordingly a more adaptable grid may be provided that is aligned to the major user interface elements of a screen frame. By using such an adaptive grid rather than a general fixed grid an adaptable grid fixed to the windows of a screen may provide more origins that are aligned to allow for tiles that are aligned to the dominant screen areas.

In an embodiment an adaptable grid algorithm may be a heuristic algorithm for providing a grid that is substantially matched to the content. In an illustrative embodiment a method for implemented an adaptable grid algorithm may include receiving a screen frame and computing an edge map. For example a frame such as that shown in may be received for encoding and transmitting to a client. A number of techniques for determining an edge map is known to those skilled in the art and may be used in conjunction with the present disclosure. Such a technique may be used to determine the location of sharp edges in the image such as edges of windows images and user interface elements. An edge map may comprise a binary image wherein 1 s represent the edges. For example depicts one possible edge map based on the screen frame depicted in . Such an edge map may then be used to compute the grid.

In one embodiment an adaptable grid may be determined as follows. First the edge map may be searched for long edges. A predetermined threshold may be used as a criterion for a long edge. The algorithm may then search for corners or intersections between long horizontal edges and long vertical edges. In an embodiment the algorithm may account for visual corners that may not actually intersect by using a predetermined constraint or tolerance. For example a horizontal edge and a vertical edge may create a corner with a small gap such as a rounded corner or a gapped corner. Nevertheless such intersections are not ignored in this algorithm.

After the corners are determined the result is that the screen is now divided into a number of rectangular areas using the horizontal edges and the vertical edges and the determined corners. The areas defined by the corners may be used to further subdivide the screen first split horizontally then vertically so that one space becomes four spaces. For example referring to screen may determine anchor points and based on an edge map discovery process. A horizontal division and vertical division may be used to subdivide the screen. A further anchor point within one of the four created subdivisions may be used to further subdivide the subdivision. In an embodiment a tree structure may be used to subdivide the spaces. For example binary space partitioning BSP may be used to recursively subdivide the screen into convex sets. This subdivision results in a representation of the screen using a tree data structure referred to as a BSP tree. However other methods of partitioning may be used within the scope of the present disclosure. Continuing with the algorithm if there is another corner then the algorithm may define the space that the corner is in and subdivide only some spaces.

By using the above described procedure a grid may be determined that is aligned to the outside windows and the images inside the windows. illustrates an example grid determined using the above algorithm using the screen frame depicted in .

The choice of the first corner may affect the outcome of the algorithm. Accordingly the algorithm may prioritize the corners based on the length of the edges. For example if a long edge intersects to create a corner then that corner is weighted accordingly.

In addition to using the corners additional edges may be used to provide for further subdivisions. For example the N longest edges longer than a predetermined value may be used. For example a horizontal non intersecting edge that is longer than N may be selected and used as a subdivision point. In an embodiment the two endpoints may be used as vertical splits and the center point of the edge may be used as a horizontal split. By using this scheme a more effective grid may be computed that corresponds to typical windows used in many remote presentation scenarios. As an example referring to in screen a long horizontal and non intersecting edge may be included in the edge map that is longer than a threshold N. Vertical splits may be formed based on the endpoints of non intersecting edge and vertical split may be determined from the center point of non intersecting edge .

Starting points for subdividing a screen using intersections and longest edges may be referred to as anchors. In other embodiments other screen elements may be used as anchors. For example as an alternative or in addition to an algorithmic approach specific knowledge of the structure of the windows of the screen may be used. For example the underlying operating system may be able to provide specific information regarding the geometry of the objects on the screen. Such information may be provided in response to queries from the remote presentation system. This information may be used to augment the algorithmic method described above or used in lieu of the algorithm.

The following provides an illustrative example of one algorithm incorporating some of the aspects described above 

g. Select the KTop longest horizontal edges and further add subdivisions of the screen based on these edge points and the center points

Any of the above mentioned aspects can be implemented in methods systems computer readable media or any type of manufacture. For example a computer readable medium can store thereon computer executable instructions for processing graphics data for transmission to a client computer. Such media can comprise a first subset of instructions for receiving graphics data representative of a client screen to be transmitted to the remote computing device a second subset of instructions for determining anchor points in the graphics data wherein the anchor points are indicative of transitions between visual elements of the client screen a third set of instructions for based on the anchor points determining a grid for subdividing the client screen wherein the grid is substantially aligned to user interface elements and border between images and text of said client screen and a fourth set of instructions for based on the grid dividing the graphics data into data tiles and processing said data tiles for transmission to the remote computing device. It will be appreciated by those skilled in the art that additional sets of instructions can be used to capture the various other aspects disclosed herein and that the four presently disclosed subsets of instructions can vary in detail per the present disclosure.

The foregoing detailed description has set forth various embodiments of the systems and or processes via examples and or operational diagrams. Insofar as such block diagrams and or examples contain one or more functions and or operations it will be understood by those within the art that each function and or operation within such block diagrams or examples can be implemented individually and or collectively by a wide range of hardware software firmware or virtually any combination thereof.

It should be understood that the various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. Thus the methods and apparatus of the disclosure or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the disclosure. In the case of program code execution on programmable computers the computing device generally includes a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs that may implement or utilize the processes described in connection with the disclosure e.g. through the use of an application programming interface API reusable controls or the like. Such programs are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined with hardware implementations.

While the invention has been particularly shown and described with reference to a preferred embodiment thereof it will be understood by those skilled in the art that various changes in form and detail may be made without departing from the scope of the present invention as set forth in the following claims. Furthermore although elements of the invention may be described or claimed in the singular the plural is contemplated unless limitation to the singular is explicitly stated.

