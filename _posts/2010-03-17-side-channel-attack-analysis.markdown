---

title: Side channel attack analysis
abstract: A method described herein includes acts of executing a cryptographic function over input data utilizing a processor on a computing device and generating a data packet that indicates how the cryptographic function interacts with hardware of the computing device, wherein the hardware of the computing device comprises the processor. The method also includes acts of analyzing the data packet, and generating an indication of security of the cryptographic function with respect to at least one side channel attack based at least in part upon the analyzing of the data packet.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08661536&OS=08661536&RS=08661536
owner: Microsoft Corporation
number: 08661536
owner_city: Redmond
owner_country: US
publication_date: 20100317
---
The term cryptography is used to refer to techniques for taking legible readable data and transforming such data into unreadable data for the purpose of secure transmission. Upon the unreadable data reaching an intended destination a key known only to the sender and legitimate recipients of the data can be utilized to transform the unreadable data back to a legible form. Modern cryptography systems are extremely complex such that for many computer implemented cryptography systems it is provably difficult to break such systems without knowledge of the key.

In the relatively recent past hackers discovered that some knowledge pertaining to a cryptography system a key or data desirably kept secret can be gleaned by monitoring physical implementation of the cryptography system with hardware of a computer. Thus physical parameters pertaining to the hardware of a computing device can be monitored such as an amount of time required to execute an instruction an amount of power utilized to execute an instruction etc. and these physical parameters can be utilized to break a cryptographic system. Obtaining information by monitoring physical implementation of a cryptography system and attempting to use such information to break the cryptography system is referred to as a side channel attack.

Types or classes of side channel attacks include timing attacks power monitoring attacks and acoustic attacks amongst other attacks. A timing attack is configured to measure an amount of time required to perform certain computations on a computer and utilizing such time to ascertain some knowledge about a cryptography system and or underlying data and or a private key. A power monitoring attack monitors power consumption by hardware during computation of a cryptographic function and utilizing this varying power to learn something about the cryptography system. An acoustic attack refers to monitoring of sound produced by hardware of a computer during certain execution of certain instructions computations to infer knowledge about a cryptographic system. These are but a few of the many currently implemented side channel attacks.

Conventional techniques for mitigating side channel attacks include developing cryptographic programs with constant memory access patterns. That is the program must be implemented such that it accesses memory in a consistent pattern regardless of the underlying data. Another technique is to develop a cryptographic program such that there is constant program flow there is no data dependent branching in the cryptographic program . Still further some side channel attacks can be mitigated by utilizing top of the line hardware. Generally these methods for mitigating side channel attacks are not feasible because oftentimes individuals cannot choose the hardware that comes on the machine and developing a program with constant memory access or with constant program flow can drastically negatively impact performance of an executing cryptographic function.

The following is a brief summary of subject matter that is described in greater detail herein. This summary is not intended to be limiting as to the scope of the claims.

Described herein are various technologies pertaining to analyzing security of a cryptographic system executing on a computing device with respect to side channel attacks without executing an actual side channel attack on the cryptographic system. Specifically systems and methods are described herein that can be utilized by developers of cryptographic systems to test such cryptographic systems for security with respect to one or more side channel attacks. Pursuant to an example a program that calls a cryptographic function can be selected by a user. When the cryptographic function is called execution of such function by a processor on a computing device can be monitored and data pertaining to such execution can be output. For instance a software trace can be undertaken with respect to the cryptographic function executing on the computing device. This software trace can be generated for example through utilization of a tracing utility such as a debugger or program that is customized to monitor execution of cryptographic functions by a processor. Data output through monitoring the execution of the cryptographic function can include processor data for each instruction executed by the processor time needed to execute an instruction power needed to execute an instruction memory locations accessed by the processor data indicating whether the processor accessed a cache amongst other information.

The developer may further select an analysis module that is configured to analyze the aforementioned output data. For instance the developer may select an analysis module from amongst a plurality of analysis modules wherein an analysis module can be configured to output data that is indicative of the security of cryptographic function executing on the computing device with respect to one or more side channel attacks. There can be at least two different classes of analysis modules 1 a first class of analysis modules that can be employed to simulate the behavior of actual hardware including processors memory cache etc. with respect to the cryptographic function being executed on such hardware and 2 a second class of analysis modules that is configured to analyze the output data with respect to a theoretical model.

An analysis module of the first class can be configured to simulate one specific component parameter of hardware. For example by observing a record of memory accesses during execution of the cryptographic function cache hits and misses can be simulated so as to evaluate leakage from a side channel pertaining to the cache. In another example an analysis module of the first class can be configured to simulate state of a branch predictor which can be simulated by recording a stream of instructions and branches in the cryptographic program. In yet another example an analysis module of the first class can be configured to simulate power usage with respect to instructions executed during execution of the cryptographic function.

Analysis modules of the second class may be desirably selected for instance if the hardware used to execute the cryptographic function is overly complicated or unknown or the developer wishes to have some general guidance on structuring the cryptographic program. In an example an analysis module of the second class can be configured to analyze the cryptographic function with respect to compliance with the program counter model which asserts that the program counter should advance in a substantially similar manner while executing a cryptographic function regardless of input to such function. Thus such an analysis module can determine whether program flow of the cryptographic program is constant across different inputs. In another example an analysis component of the second class can be utilized to analyze the cryptographic program in connection with a model that indicates that memory access is not to be conditional upon input data.

Analysis undertaken by an analysis module can be presented to a developer or a tester in any suitable form. For example the analysis may be displayed in a graphical manner as data in the form of a message e.g. your cryptographic program is secure against a timing side channel attack or some other form. Accordingly a cryptographic program can be tested for security with respect to side channel attacks without having to actually implement a side channel attack which can be prohibitively expensive and time consuming.

Other aspects will be appreciated upon reading and understanding the attached figures and description.

Various technologies pertaining to performing side channel attack analysis on cryptographic functions will now be described with reference to the drawings where like reference numerals represent like elements throughout. In addition several functional block diagrams of example systems are illustrated and described herein for purposes of explanation however it is to be understood that functionality that is described as being carried out by certain system components may be performed by multiple components. Similarly for instance a component may be configured to perform functionality that is described as being carried out by multiple components.

With reference to an example system that facilitates performing side channel attack analysis on one or more cryptographic functions is illustrated. The system comprises a processor that can be configured to execute machine executable instructions. A memory can be accessible to the processor by way of any suitable communications medium such as a system bus. The memory may be RAM ROM EEPROM or any other suitable type of memory that can be accessed by the processor . In an example the processor and the memory may reside on any suitable computing device including but not limited to a mobile computing device such as a mobile telephone a desktop computing device a laptop computing device a mobile media player etc.

The memory comprises a program that can be executed by the processor . The program may be any suitable program such as a program that facilitates transferring data from a source to a recipient a word processing program a spreadsheet application or any other suitable program. In a particular example the program may utilize any suitable communications protocol such as Secure Sockets Layer SSL Transport Layer Security TLS Kerberos Local Security Authority LSA or the like. A cryptographic component can be called by the program when the program is executed by the processor . The cryptographic component is intended to encompass a cryptographic system a crypto system a cryptographic function program etc. For instance the cryptographic component may be a public key cryptographic system. The memory further comprises data that is accessed by the cryptographic component and operated on by such cryptographic component to generate encrypted data. Specifically the data may be data that is desirably encrypted or kept secret from a third party.

A monitor component is in communication with the processor and can monitor execution of the program by the processor and thus can monitor execution of the cryptographic component over the data . For instance the monitor component can be a program that is retained in the memory . In an example an application programming interface API corresponding to a tracing utility such as a debugger can be utilized to implement the monitor component thereby allowing the monitor component to hook into the program as it is executed by the processor . The monitor component can be configured to record each processor instruction during execution of the program by the processor wherein the processor instructions can include type of instruction a time corresponding to execution of an instruction memory accesses pertaining to an executed instruction whether memory was accessed locations in memory that were accessed whether the access was to a cache etc. . In an example the monitor component can be configured to output processor state by processor state for each instruction executed by the processor . In another example the monitor component can be configured to output a data packet that comprises a plurality of processor states recorded during execution of the cryptographic component with respect to the data . While the monitor component has been described in the context of a debugger it is to be understood that the monitor component may be implemented in any suitable manner including as a standalone program that is configured to monitor execution of cryptographic functions over data by the processor .

An analysis component can be in communication with the monitor component and can receive data packets output by the monitor component pertaining to states of the processor when executing the cryptographic component over the data . The analysis component can be configured to perform side channel attack analysis with respect to the execution of the cryptographic component by the processor on a computing device. The analysis component can be configured to perform one of at least two types of side channel attack analysis 1 the analysis component can be configured to simulate a particular type of side channel attack with respect to the cryptographic component being executed by the processor or 2 the analysis component can be configured to analyze the data output by the monitor component with respect to some theoretical model.

Accordingly the analysis component can have access to a model of at least one physical parameter of the processor and or the memory . The analysis component can receive the recorded data output by the monitor component and can simulate a side channel attack by applying the model of the at least one physical parameter of the processor and or the memory to the output data. For instance such model may be a model of the power consumed by the processor for different types of instructions executed by the processor . The analysis component can apply such model to the instructions recorded by the monitor component and can thus simulate a side channel attack with respect to power consumption of the processor when executing the cryptographic component over the data . Of course the analysis component may have access to any suitable model of a physical parameter of the processor and or the memory . Such parameters that can be modeled may be or include audible sounds output by the processor when executing instructions power consumed by the processor when executing instructions time required to execute certain instructions cache hits and misses etc.

Alternatively the analysis component can be configured to analyze execution of the cryptographic component by the processor with respect to some theoretical model. This type of analysis can be useful if the underlying hardware processor and memory is overly complicated or unknown. Thus the analysis component can be configured in an example to analyze execution of the cryptographic component by the processor in comparison to the program counter model which asserts that the program counter should advance consistently while executing a cryptographic function regardless of data input to such function. This analysis can capture the idea that the program flow should be constant across inputs. It is to be understood that in some instances the program counter may vary depending upon length of data operated upon by the cryptographic function and or length of a cryptographic key and timing may vary depending upon other processes being executed and system interrupt codes. In another example the analysis component can analyze execution of the cryptographic component on the processor with respect to a model that holds that memory access is desirably not conditional upon the data input to the cryptographic component . Therefore the analysis component can be configured to analyze memory accesses corresponding to execution of the cryptographic component over different input data. The analysis component can then compare execution of the cryptographic component over different input data to determine if program flow or memory access is dependent upon data that is desirably kept secret from third parties.

In an example embodiment a programming API can be developed that can be utilized in connection with allowing the system to be programmatically controlled by another program. For example the programming API can be implemented to cause the system to be controllable in a testing framework.

Now referring to an example system that facilitates performing a side channel attack analysis with respect to a cryptographic function executing on a processor is illustrated. The system comprises the analysis component that receives the data packet generated by the monitor component not shown . In an example the analysis component can include or have access to a hardware model which can model a physical parameter of computer hardware that is utilized to execute a cryptographic function. This hardware model may thus be a model for instance of power consumed during execution of certain instructions by a processor sound emitted during execution of certain instructions by the processor timing required to execute particular instructions heat emitted by a processor when executing certain instructions or other suitable physical parameters. In other examples the hardware model may be a model of a cache in memory such that the analysis module can analyze instructions executed by a processor with respect to hits or misses to a cache. Furthermore the hardware model may be a model of memory on a computing device such that the analysis component could be configured to analyze memory accesses made by a processor when executing a cryptographic function etc.

In another example the analysis component may comprise or have access to a cryptographic model wherein the cryptographic model can be a theoretical model of how a cryptographic function desirably executes on a computing device with respect to data. For instance a theoretical model may be the program counter model which was described above. The analysis component may then be configured to analyze a program counter to ensure that the program counter advances in a substantially similar manner when the cryptographic function is executed over different input data. Another theoretical cryptographic model can be a model that indicates that memory access when executing the cryptographic function is to be predictable patterned regardless of the data being encrypted through utilization of such cryptographic function. It is to be understood that the cryptographic model may be any suitable theoretical model that can be indicative of how a cryptographic function interacts with hardware of a computing device when utilized to encrypt data.

An interface component can be in communication with the analysis component and can be utilized by a tester of a cryptographic function to indicate which type of analysis is desirably performed on the cryptographic function. For example the interface component may be or include a mouse a keyboard a display screen a microphone or other suitable component that can be configured to interact with the analysis component .

A message generator component can receive data output by the analysis component and can format such data for display to the tester on a computer display screen . The computer display screen may be any suitable display including but not limited to a flat panel display a CRT display a plasma display a LCD display or the like. In an example the message generator component can receive side channel attack analysis from the analysis component that comprises a data packet which is a simulation of a side channel attack with respect to a cryptographic function executing on a processor. The message generator component can comprise a formatter component that formats such data in a manner that is desirable to the tester of the cryptographic function. For instance the formatter component can display the side channel in a graphical manner on the computer display screen . Thus a tester can receive a quick visual indication of how the cryptographic function executes on the computer device. Of course data output by the analysis component can be caused to be stored in a non transitory computer readable medium such as a hard drive memory disk etc.

In another example the formatter component may be configured to intelligently format data to the tester. For instance the formatter component can perform some analysis on the data output by the analysis component to provide the tester with detailed results of the testing of the cryptographic function. Accordingly the formatter component can be configured to analyze data output by the analysis component and indicate to the tester that the cryptographic function has some sort of design flaw e.g. your cryptographic function is subject to a side channel timing attack . Furthermore the formatter component may be equipped with intelligence to provide suggestions to the tester of how to alter the cryptographic function to reduce the probability of success of a side channel attack e.g. remove X number of conditional branches in the cryptographic function . Of course other types of detailed analysis can be undertaken by the formatter component and are contemplated by the inventors and are intended to fall under the scope of the hereto appended claims.

Referring now to an example system that facilitates performing a side channel attack analysis on a cryptographic function executing on a processor in a computing device is illustrated. The system comprises the monitor component which operates as described above. The system further comprises a library that includes a plurality of analysis components . The analysis components may be configured to simulate different side channel attacks with respect to the cryptographic component and or analyze data output by the monitor component with respect to different theoretical models as described above. Furthermore new analysis components can be added to the library as new theoretical models are proposed as new models of physical parameters of hardware of the computing device are generated and or as new side channel attacks are mounted on cryptographic functions. Thus a programming framework is contemplated such that new and different analysis modules can be plugged into the framework such that the analysis modules are accessible to testers by way of the library .

The system can further include a selector component that allows a tester to select one or more of the analysis components from the library in order to test the cryptographic component with respect to one or more side channel attacks or determine if implementation of the cryptographic component on a computing device sufficiently conforms to a theoretical model. Thus for instance if the tester wishes to test the cryptographic component with respect to a timing attack the tester could utilize the selector component to select an analysis component from the library that simulates timing attacks on hardware used to execute the cryptographic function the cryptographic component . In another example the tester may wish to understand how the implementation of the cryptographic component stacks up with a particular theoretical model and the tester could utilize the selector component to select an analysis component that analyzes the implementation of the cryptographic component with respect to the theoretical model.

Referring now to an example graphical user interface is illustrated wherein the graphical user interface can be utilized in connection with performing side channel analysis with respect to a cryptographic program function executing on a computing device. The graphical user interface includes a first field that comprises graphics or text that indicates to a tester that the tester is to select a particular cryptographic program. A second field can comprise a plurality of selectable cryptographic programs wherein the tester can utilize a pointing and clicking mechanism for instance to select a particular cryptographic program that is desirably analyzed.

The graphical user interface further includes a third field that comprises text or graphics that indicate that the tester is to select a particular analysis component from a plurality of selectable analysis components. A fourth field includes a selectable list of analysis components wherein each of the analysis components can be configured to perform a different type of side channel attack analysis. A fifth field can display output of the analysis which may be data a message graphical outputs pertaining to the side channel attack analysis etc. Furthermore the graphical user interface can include a start button wherein the user can initiate testing of the cryptographic function by selecting the start button after the tester has selected a program from the list of programs in the second field and at least one analysis module in the list of analysis modules in the fourth field .

With reference now to various example methodologies are illustrated and described. While the methodologies are described as being a series of acts that are performed in a sequence it is to be understood that the methodologies are not limited by the order of the sequence. For instance some acts may occur in a different order than what is described herein. In addition an act may occur concurrently with another act. Furthermore in some instances not all acts may be required to implement a methodology described herein.

Moreover the acts described herein may be computer executable instructions that can be implemented by one or more processors and or stored on a computer readable medium or media. The computer executable instructions may include a routine a sub routine programs a thread of execution and or the like. Still further results of acts of the methodologies may be stored in a computer readable medium displayed on a display device and or the like. The computer readable medium may be a non transitory medium such as memory disk or the like. Still further the methods may be configured for implementation on a mobile computing device such as a mobile telephone a desktop computing device a server or the like.

Referring now solely to a methodology that facilitates performing a side channel attack analysis with respect to a cryptographic function is illustrated. The methodology begins at and at data is received pertaining to how a processor implements a cryptographic function with respect to input data. The data can be received from a program that monitors processor states as the cryptographic function is executed by the processor. For instance such program may be implemented through utilization of a tracing utility API such as a debugger API.

At the data received at is analyzed with respect to a theoretical model pertaining to side channel attacks. Such theoretical model may pertain to an idealized manner in which a cryptographic function is implemented on hardware. At data is output that is indicative of whether or not the cryptographic function sufficiently conforms to the theoretical model. For instance the data may be in a form of a graph that indicates whether or not the cryptographic function implemented on certain hardware sufficiently accords to the theoretical model. In another example the data that is indicative of whether or not the cryptographic function accords to the theoretical model may be in the form of text that indicates e.g. by percentage match how well the implementation of the cryptographic function of a computing system accords to the theoretical model etc. In another example embodiment a command line tool can be utilized to receive input from a tester wherein such input can be a specification of a cryptographic function to test an analysis module to utilize to test the cryptographic function and a type of output e.g. file text . . . . The methodology completes at .

Turning now to an example methodology that facilitates analyzing a cryptographic function with respect to one or more side channel attacks is illustrated. The methodology starts at and at data is received pertaining to how a processor implements a cryptographic function. This data can include memory accesses by a processor timing information corresponding to instructions executed by the processor identity of instructions executed by the processor etc. At a model of a physical parameter of a computing device that includes the processor is accessed. For instance this model may describe timing information corresponding to how long it takes the processor to execute certain instructions power data indicating an amount of power utilized by the processor to execute certain instructions amongst other data.

At a side channel attack is simulated based at least in part upon the received data and the model of the physical parameter of the computing device. At data is output that is indicative of results of the simulated side channel attack. For example the data may be the simulated side channel attack an estimated amount of power utilized when executing certain instructions . In another example the data that is indicative of results of the simulated side channel attack may be in the form of a graph a message desirably transmitted to a tester of the cryptographic function etc. The methodology completes at .

Referring now to an example methodology that facilitates performing a side channel attack analysis on a cryptographic function is illustrated. The methodology starts at and at a selection of a cryptographic function is received wherein such selection indicates that the cryptographic function is desirably tested with respect to one or more side channel attacks or theoretical models that are designed to mitigate side channel attacks.

At a selection of an analysis module from amongst a plurality of analysis modules is received from the tester. For instance the tester may select an analysis module that is configured to simulate a side channel attack. In another example the selection from the tester may be for an analysis module that is configured to analyze implementation of a cryptographic function on a particular computing device with respect to a theoretical model that is configured to mitigate side channel attacks.

At execution of a cryptographic function with respect to hardware on a computing device is monitored. As described above this monitoring of the execution of the cryptographic function can include outputting each state of a processor as the processor executes instructions pertaining to the cryptographic function. At an indication of security of a cryptographic function with respect to one or more side channel attacks is output. This indication of security may be in the form of raw data e.g. a simulated side channel attack an indication of how well the implementation of the cryptographic function accords to a theoretical idealized model a graphical indication of how well the cryptographic function is secure against one or more side channel attacks etc. The methodology completes at .

Now referring to a high level illustration of an example computing device that can be used in accordance with the systems and methodologies disclosed herein is illustrated. For instance the computing device may be used in a system that supports simulating a side channel attack with respect to a cryptographic function. In another example at least a portion of the computing device may be used in a system that supports analyzing a cryptographic function implemented on a computing device with respect to an idealized theoretical model. The computing device includes the processor that executes instructions that are stored in the memory . The memory may be or include RAM ROM EEPROM Flash memory or other suitable memory. The instructions may be for instance instructions for implementing functionality described as being carried out by one or more components discussed above or instructions for implementing one or more of the methods described above. The processor may access the memory by way of a system bus . In addition to storing executable instructions the memory may also store theoretical models models of physical parameters of a computing device etc.

The computing device additionally includes a data store that is accessible by the processor by way of the system bus . The data store may be or include any suitable computer readable storage including a hard disk memory etc. The data store may include executable instructions theoretical models models of physical parameters of computing devices etc. The computing device also includes an input interface that allows external devices to communicate with the computing device . For instance the input interface may be used to receive instructions from an external computer device from an individual etc. The computing device also includes an output interface that interfaces the computing device with one or more external devices. For example the computing device may display text images etc. by way of the output interface .

Additionally while illustrated as a single system it is to be understood that the computing device may be a distributed system. Thus for instance several devices may be in communication by way of a network connection and may collectively perform tasks described as being performed by the computing device .

As used herein the terms component and system are intended to encompass hardware software or a combination of hardware and software. Thus for example a system or component may be a process a process executing on a processor or a processor. Additionally a component or system may be localized on a single device or distributed across several devices. Furthermore a component or system may refer to a portion of memory and or a series of transistors.

It is noted that several examples have been provided for purposes of explanation. These examples are not to be construed as limiting the hereto appended claims. Additionally it may be recognized that the examples provided herein may be permutated while still falling under the scope of the claims.

