---

title: Direct memory access memory management
abstract: A method, computer program product, and apparatus for managing data packets are presented. A data packet in the data packets is stored in a first portion of a memory in response to receiving the data packet at a device. The first portion of the memory is allocated to the device. A determination is made whether a size of the data packet is less than a threshold size. The data packet is copied from the first portion of the memory allocated to the device to a second portion of the memory in response to a determination that the size of the data packet stored in the memory is less than the threshold size.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08700873&OS=08700873&RS=08700873
owner: International Business Machines Corporation
number: 08700873
owner_city: Armonk
owner_country: US
publication_date: 20101014
---
The present disclosure relates to managing data and in particular to managing data packets received at a network adapter. Still more particularly the present disclosure relates to a method and apparatus for managing data packets received in a direct memory access memory for a network adapter.

In a network computers send and receive data in the form of data packets. The data packets are commonly received using a network adapter. A network adapter is a hardware device that allows computers to communicate over a network. In a network adapter data packets received are stored in buffers. A buffer is a portion of memory used to temporarily hold data while the data is being moved from one place to another.

Generally speaking a processor unit in a computer stores data in a memory. The data may be stored in buffers in the memory. However using the processor unit to store data packets received in a buffer may increase a number of operations performed by the processor unit. The total number of operations performed by a processor unit is generally referred to as processor overhead. This increase in the processor overhead may decrease the performance of the processor unit. For example the processor unit may not be able to process as many instructions while storing data packets received.

To reduce the overhead of the processor unit devices that receive data packets may have portions of memory allocated to the device. A device that has memory allocated to the device can store data in that memory independently of the processor unit. This memory allocation to the device reduces the overhead or number of operations to be performed by the processor unit. For example a network adapter can store data packets received in a buffer without the data packet being written to the buffer by the processor unit. The allocation of memory to a device is generally referred to as direct memory access DMA . In other words the device has direct or independent of the processor memory access.

However the amount of memory allocated to the device may be limited. For example certain devices may have memory within the devices. In other examples a portion of a memory may be shared among multiple devices. In either situation the amount of memory that may be allocated to one device has limits.

For example in a network a network adapter may receive multiple data packets for a certain period of time. The network adapter may receive data packets faster than the data packets are processed. In this situation demand for storage at the network adapter may exceed a capacity of the memory allocated to the network adapter. When the capacity is exceeded data packets may be dropped by the network adapter or not stored in the memory. When data packets are dropped the network adapter that dropped the data packets may have to request retransmission of the data packet. Retransmission of the data packets increases an amount of traffic in a network and may decrease the speed of connections in the network.

Accordingly it would be advantageous to have a method and apparatus which takes into account one or more of the issues discussed above as well as possibly other issues.

The different illustrative embodiments provide a method computer program product and apparatus for managing data packets. In an illustrative embodiment a data packet in the data packets is stored in a first portion of a memory in response to receiving the data packet at a device. The first portion of the memory is allocated to the device. A determination is made whether a size of the data packet is less than a threshold size. The data packet is copied from the first portion of the memory allocated to the device to a second portion of the memory in response to a determination that the size of the data packet stored in the memory is less than the threshold size.

As will be appreciated by one skilled in the art the present invention may be embodied as a system method or computer program product. Accordingly the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore the present invention may take the form of a computer program product embodied in any tangible medium of expression having computer usable program code embodied in the medium.

Any combination of one or more computer usable or computer readable medium s may be utilized. The computer usable or computer readable medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or propagation medium. More specific examples a non exhaustive list of the computer readable medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CDROM an optical storage device a transmission media such as those supporting the Internet or an intranet or a magnetic storage device.

Note that the computer usable or computer readable medium could even be paper or another suitable medium upon which the program is printed as the program can be electronically captured via for instance optical scanning of the paper or other medium then compiled interpreted or otherwise processed in a suitable manner if necessary and then stored in a computer memory. In the context of this document a computer usable or computer readable medium may be any medium that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The computer usable medium may include a propagated data signal with the computer usable program code embodied therewith either in baseband or as part of a carrier wave. The computer usable program code may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc.

Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

The present invention is described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions.

These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer program instructions may also be stored in a computer readable medium that can direct a computer or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instruction means which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

With reference now to the figures and in particular with reference to an illustrative diagram of a data processing environment is provided in which illustrative embodiments may be implemented. It should be appreciated that is only provided as an illustration of one implementation and is not intended to imply any limitation with regard to the environments in which different embodiments may be implemented. Many modifications to the depicted environments may be made.

In the depicted example server computer and server computer connect to network along with storage unit . In addition client computers and connect to network . Client computers and may be for example personal computers or network computers. In the depicted example server computer provides information such as boot files operating system images and applications to client computers and . Client computers and are clients to server computer in this example. Network data processing system may include additional server computers client computers and other devices not shown.

Program code located in network data processing system may be stored on a computer recordable storage medium and downloaded to a data processing system or other device for use. For example program code may be stored on a computer recordable storage medium on server computer and downloaded to client computer over network for use on client computer .

In the depicted example network data processing system is the Internet with network representing a worldwide collection of networks and gateways that use the Transmission Control Protocol Internet Protocol TCP IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high speed data communication lines between major nodes or host computers consisting of thousands of commercial governmental educational and other computer systems that route data and messages.

In these illustrative examples data may be exchanged between any one of server computer and client computers and in the form of data packets. The data packets may be sent and received using network . The quantity and speed with which data packets are sent and received may vary. For example the types of connections in network and hardware within server computer and client computers and may increase or decrease the speed that data packets are sent and received in network . Additionally the amount of traffic in network may increase the quantity of data packets that are sent and received. In one example data packets received by computer may be managed based on the quantity of data packets received to increase the speed that data packets are sent and received in network .

Of course network data processing system also may be implemented as a number of different types of networks such as for example an intranet a local area network LAN or a wide area network WAN . is intended as an example and not as an architectural limitation for the different illustrative embodiments.

Turning now to a block diagram of a data processing system is depicted in accordance with an illustrative embodiment. Data processing system is an example of a data processing system that may be used to implement servers and clients such as server and client in .

In this illustrative example data processing system includes communications fabric which provides communications between processor unit memory persistent storage communications unit input output I O unit and display .

Processor unit serves to execute instructions for software that may be loaded into memory . Processor unit may be a number of processors a multi processor core or some other type of processor depending on the particular implementation. A number as used herein with reference to an item means one or more items. Further processor unit may be implemented using a number of heterogeneous processor systems in which a main processor is present with secondary processors on a single chip. As another illustrative example processor unit may be a symmetric multi processor system containing multiple processors of the same type.

Memory and persistent storage are examples of storage devices . A storage device is any piece of hardware that is capable of storing information such as for example without limitation data program code in functional form and or other suitable information either on a temporary basis and or a permanent basis. Memory in these examples may be for example a random access memory or any other suitable volatile or non volatile storage device. Persistent storage may take various forms depending on the particular implementation.

For example persistent storage may contain one or more components or devices. For example persistent storage may be a hard drive a flash memory a rewritable optical disk a rewritable magnetic tape or some combination of the above. The media used by persistent storage also may be removable. For example a removable hard drive may be used for persistent storage .

Communications unit in these examples provides for communications with other data processing systems or devices. In these examples communications unit is a network interface card. Communications unit may provide communications through the use of either or both physical and wireless communications links.

Input output unit allows for input and output of data with other devices that may be connected to data processing system . For example input output unit may provide a connection for user input through a keyboard a mouse and or some other suitable input device. Further input output unit may send output to a printer. Display provides a mechanism to display information to a user.

Instructions for the operating system applications and or programs may be located in storage devices which are in communication with processor unit through communications fabric . In these illustrative examples the instructions are in a functional form on persistent storage . These instructions may be loaded into memory for execution by processor unit . The processes of the different embodiments may be performed by processor unit using computer implemented instructions which may be located in a memory such as memory .

These instructions are referred to as program code computer usable program code or computer readable program code that may be read and executed by a processor in processor unit . The program code in the different embodiments may be embodied on different physical or tangible computer readable media such as memory or persistent storage .

Program code is located in a functional form on computer readable media that is selectively removable and may be loaded onto or transferred to data processing system for execution by processor unit . Program code and computer readable media form computer program product in these examples. In one example computer readable media may be computer readable storage media or computer readable signal media . Computer readable storage media may include for example an optical or magnetic disk that is inserted or placed into a drive or other device that is part of persistent storage for transfer onto a storage device such as a hard drive that is part of persistent storage . Computer readable storage media also may take the form of a persistent storage such as a hard drive a thumb drive or a flash memory that is connected to data processing system . In some instances computer readable storage media may not be removable from data processing system . In these illustrative examples computer readable storage media is a non transitory computer readable storage medium.

Alternatively program code may be transferred to data processing system using computer readable signal media . Computer readable signal media may be for example a propagated data signal containing program code . For example computer readable signal media may be an electromagnetic signal an optical signal and or any other suitable type of signal. These signals may be transmitted over communications links such as wireless communications links optical fiber cable coaxial cable a wire and or any other suitable type of communications link. In other words the communications link and or the connection may be physical or wireless in the illustrative examples.

In some illustrative embodiments program code may be downloaded over a network to persistent storage from another device or data processing system through computer readable signal media for use within data processing system . For instance program code stored in a computer readable storage medium in a server data processing system may be downloaded over a network from the server to data processing system . The data processing system providing program code may be a server computer a client computer or some other device capable of storing and transmitting program code .

The different components illustrated for data processing system are not meant to provide architectural limitations to the manner in which different embodiments may be implemented. The different illustrative embodiments may be implemented in a data processing system including components in addition to or in place of those illustrated for data processing system . Other components shown in can be varied from the illustrative examples shown. The different embodiments may be implemented using any hardware device or system capable of running program code. As one example the data processing system may include organic components integrated with inorganic components and or may be comprised entirely of organic components excluding a human being. For example a storage device may be comprised of an organic semiconductor.

As another example a storage device in data processing system is any hardware apparatus that may store data. Memory persistent storage and computer readable media are examples of storage devices in a tangible form.

In another example a bus system may be used to implement communications fabric and may be comprised of one or more buses such as a system bus or an input output bus. Of course the bus system may be implemented using any suitable type of architecture that provides for a transfer of data between different components or devices attached to the bus system. Additionally a communications unit may include one or more devices used to transmit and receive data such as a modem or a network adapter. Further a memory may be for example memory or a cache such as found in an interface and memory controller hub that may be present in communications fabric .

The different illustrative embodiments recognize and take into account a number of different considerations. For example the different illustrative embodiments recognize that memory allocated to a device may be limited. Data packets received by the device may exceed a capacity of the memory allocated to the device. More specifically data packets may be received faster than the data packets can be processed. Depending on the capacity of the memory and the rate at which data packets are received at a certain point storage space for the data packet will be unavailable. Data packets may then be dropped. Dropped data packets may have to be retransmitted. Retransmission of data packets can increase congestion in a network and decrease a speed of communication in the network.

The different illustrative embodiments recognize and take into account that one solution may involve storing data packets in memory not allocated to the device when the memory allocated to the device is near capacity. However the different illustrative embodiments recognize that storing data packets in memory not allocated to the device may decrease performance. For example data packets stored in memory not allocated to the device may need to be written to the memory using a processor unit. The processor unit writing data packets to the memory increases the overhead for the processor unit. An increased overhead may cause applications using the processor unit to run slower. Additionally data packets stored in memory not allocated to the device may become lost or fragmented.

The different illustrative embodiments further recognize that data packets received by a device may vary in size. A buffer in the memory allocated to the device may be able to store one data packet. A smaller data packet may require a shorter period of time to be written to a memory by a processor unit than would a larger data packet.

Thus the different illustrative embodiments provide a method computer program product and apparatus for managing data packets. In an illustrative embodiment a data packet in the data packets is stored in a first portion of a memory in response to receiving the data packet at a device. The first portion of the memory is allocated to the device. A determination is made whether a size of the data packet is less than a threshold size. The data packet is copied from the first portion of the memory allocated to the device to a second portion of the memory in response to a determination that the size of the data packet stored in the memory is less than the threshold size.

With reference now to an illustration of a block diagram of a data packet management environment is depicted in accordance with an illustrative embodiment. Data packet management environment is an example of a data packet management environment in which illustrative embodiments may be implemented. In an illustrative embodiment data packet management environment is implemented in computer system . Computer system is an example implementation of data processing system in .

Data packet management environment includes computer system . Computer system receives data packets such as data packet from network . For example computer system may receive data packet from other computer systems in network such as server computer and client computers and in .

In these illustrative examples computer system includes data packet management process device memory and processor unit . Data packet management process manages data packet received by computer system . Device may be any device that receives data in computer system . For example device may be network adapter . In other examples device may be a disk drive controller a graphics card a network card a network interface controller a local area network adapter a sound card and or any other device suitable for receiving data in a computing system.

In this example device receives data packet from network . Device stores data packet in first portion of memory . First portion of memory may be allocated to device .

As used herein allocated when referring to memory or storage means that a device is free to access the memory or storage. As used herein access includes writing data to a memory or storage device and reading data from a memory or storage device. The device may read data from the memory or storage device and write data to the memory or storage device independently of a processor unit such as for example processor unit .

In these illustrative examples first portion of memory may include a set of buffers such as for example buffer . As used herein a set when referring to items means one or more items. Device may store data packet in buffer . Buffer may be a direct memory access buffer because first portion of memory is allocated to device .

Data packet has size . Depending on size data packet may be copied to second portion of memory . For example data packet management process may compare size of data packet with threshold size . If size is smaller than threshold size data packet management process copies data packet to second portion of memory . Thus buffers within first portion of memory are not wasted on data packets that are smaller than threshold size .

In these illustrative examples second portion of memory is not allocated to device . Rather second portion of memory is associated with processor unit .

As used herein a first component may be considered to be associated with a second component by being secured to the second component bonded to the second component fastened to the second component and or connected to the second component in some other suitable manner. The first component also may be connected to the second component through using a third component. The first component may also be considered to be associated with the second component by being formed as part of and or an extension of the second component.

For example data written to second portion of memory requires involvement of processor unit . In other words second portion of memory may be a set of non direct memory access buffers. For example device may have to register second portion of memory with processor unit to store data packet in second portion . In another example device may send data packet to processor unit . Then processor unit will write data packet to second portion of memory .

If data packet is copied to second portion then device may be able to reuse buffer . For example device can overwrite data packet previously stored in buffer because data packet was copied to second portion . Thus device may store new data packets received at device in buffer . In another example data packet management process may delete data packet from buffer once data packet is copied to second portion of memory .

Once data packet is stored data packet management process places identifier of data packet in queue . Data packet management process places identifier in queue for processing of data packet . In these examples identifier represents data packet . Identifier may contain metadata that identifies data packet . The metadata may include information found in a header of the data packet. For example without limitation identifier may include an internet protocol address of associated with the sender an internet protocol address of associated with a recipient a size of the data packet the content of the data packet a time the packet was requested a time the packet was sent a time the packet was received and or any other suitable information for identifying data packet .

In these illustrative examples application may have requested data packet . Once identifier is placed in queue application may recognize that data packet has been received. Application may then use the data contained in data packet while data packet is stored in one of first portion and second portion of memory .

While application is using the data contained in data packet application will hold reference to data packet . Reference notifies data packet management process that data packet is being used. Thus data packet management process will not overwrite the memory location where data packet is stored. Reference may be any form of indication that is recognizable in computer system that a resource is being referenced or used by an application. For example without limitation reference may be a reference count a pointer a handle and or any other suitable indicator that indicates that a resource is being referenced.

If application no longer needs the data within data packet application may remove reference from data packet . Additionally application may have data packet copied to another location such as another portion of memory a hard disk or other type of storage device. Once reference has been removed from data packet data packet management process removes identifier from queue . Also when data packet is copied to the other location data packet management process removes identifier from queue .

Once identifier has been removed from queue or data packet has been copied to the other location device may store new data packets received in buffer . In another example data packet management process may delete data packet from buffer once identifier is removed from queue or data packet has been copied to the other location.

In these illustrative examples data packet management process maintains count . Count is a number used to keep track of data packets. For example count may be a number of data packets that are stored in second portion of memory . Count may also include metadata for identifying which data packets are stored in second portion of memory . For example without limitation count may be a number of references pointers or handles that refer to a resource.

Each time a data packet such as data packet is copied into second portion of memory data packet management process increases count . Whenever an identifier such as identifier for a data packet stored in second portion of memory is removed from queue data packet management process decreases count . In this manner data packet management process tracks the number of data packets that are stored in second portion of memory using count .

This tracking may prevent fragmentation of data packets that are stored in second portion of memory . For example data packet management process may allocate a buffer within second portion of memory . The buffer within second portion may be the size of a page of memory and configured to hold multiple data packets. Count may keep track of the number of data packets in the buffer in second portion of memory . As long as count for the buffer is greater than zero data management process will not de allocate the buffer. De allocating the buffer while there are data packets within the buffer may cause fragmentation of data packets that are stored in second portion of memory . Thus data management process maintains count to know when to de allocate the buffer in second portion of memory .

In some embodiments data packet management process may determine when it is advantageous to copy data packets from first portion of memory allocated to device to second portion of memory not allocated to device . As discussed storing data packets within second portion of memory increases the overhead of processor unit . In situations where capacity of first portion of memory is sufficient to store all data packets received data packet management process may determine that there is no need to store data packets in second portion of memory .

In this example data packet management process may determine whether amount of first portion of memory being used is greater than threshold capacity . For example amount is the amount of storage capacity of first portion of memory presently storing data packets such as data packet . Data packet management process may select threshold capacity . Threshold capacity is a percentage of capacity of first portion of memory . Threshold capacity may be selected based on capacity of first portion of memory . For example threshold capacity may be selected at a point where first portion of memory may run out of storage capacity.

In one illustrative example once threshold capacity has been reached data packet management process may begin to copy data packets smaller than threshold size to second portion of memory . In another example threshold size may be a first threshold size. Data packet management process copies data packets smaller than the first threshold size to second portion of memory . Thus buffer is not wasted on data packets smaller than the first threshold size. Next as discussed above data packet management process may consider threshold capacity . If threshold capacity has been reached then data packet management process may compare data packets received with a second threshold size larger than the first.

Data packet management process may adjust threshold size and threshold capacity . For example data packet management process may monitor network traffic to determine the size and frequency of data packets transmitted.

Data packet management process may also know capacity of first portion of memory and maximum transmission unit of device . Maximum transmission unit is a physical property of device . Device can only receive data packets as large as maximum transmission unit . A data packet larger than maximum transmission unit will either be reduced in size or requested to be retransmitted so that device can receive the data packet.

In these illustrative examples data packet management process may select threshold size and threshold capacity based on network traffic capacity of first portion of memory and maximum transmission unit of device . For example if an average size of data packets received at device increases data packet management process may select threshold size to be above an average size of the data packets received. However threshold size would be selected to be less than maximum transmission unit . Maximum transmission unit represents the largest data packets that can be received at device based on the physical characteristics of device . Data packet management process selects threshold size to be smaller than maximum transmission unit because maximum transmission unit is the largest size of a data packet received at device .

In another example if the frequency of data packets received at device increases data packet management process may increase threshold size while decreasing threshold capacity . An increase in frequency of data packets received increases the likeliness that capacity of first portion of memory may be exceeded. Selecting a larger value for threshold size decreases the number of data packets that would be larger than threshold size . A lower number of data packets that are larger than threshold size results in a lower number of data packets stored in first portion of memory . Thus data packet management process is more selective with data packets stored in first portion of memory .

On the other hand selecting a smaller value for threshold capacity means that data packet management process determines whether data packets are larger than threshold size sooner. A sooner determination whether data packets are larger than threshold size results in a smaller percentage of first portion of memory storing data packets smaller than threshold size . In one illustrative embodiment threshold capacity is zero. Thus none of the data packets stored in first portion of memory are smaller than threshold capacity .

In yet another example threshold size may be selected based on how quickly data packets are processed. As data packets are processed more slowly less buffers are available to receive new data packets. With a lower number of number of buffers being available data packet management process may increase threshold size . Increasing threshold size will preserve buffers in first portion of memory for larger data packets. On the other hand as data packets are processed more quickly buffers within first portion of memory are available sooner. Data packet management process may decrease threshold size . A decrease in threshold size decreases the number of data packets that are copied to second portion of memory . Thus the buffers within first portion of memory are used rather than second portion of memory .

In still another example threshold size and threshold capacity may vary by time. For example data packet management process may obtain historical data about network traffic . Data packet management process may determine that certain times of day days of the week or any other times of the year may experience more or less frequency of network traffic . As a result data packet management process may adjust threshold size and threshold capacity to match network traffic .

By storing data packets smaller than threshold size in second portion of memory data packet management process improves the performance of device . For example in general processor unit can access data packets smaller than threshold size faster than data packets larger than threshold size . Storing data packets smaller than threshold size in second portion of memory saves space in first portion of memory for data packets larger than threshold size . Thus in situations where data packets are received faster than they can be processed buffers within first portion of memory are preserved for larger data packets.

Preservation of buffers within first portion of memory decreases the chance that data packets will be dropped. Additionally the preference for larger data packets decreases an amount of overhead on processor unit . The buffers within first portion of memory are used more efficiently than without preferences for larger data packets. Thus the management of data packets received in computer system may decrease data packet retransmissions and increase the speed of connections within network .

The illustration of computer system in data packet management environment is not meant to imply physical or architectural limitations to the manner in which different features may be implemented. Other components in addition to and or in place of the ones illustrated may be used. Some components may be unnecessary in some illustrative embodiments. Also the blocks are presented to illustrate some functional components. One or more of these blocks may be combined and or divided into different blocks when implemented in different illustrative embodiments.

For example without limitation in some illustrative embodiments first portion may be physically separate from second portion . For example network adapter may have memory that is physically part of network adapter . Second portion may be a random access memory for computer system . Processor unit may be a central processing unit for computer system that controls access to the random access memory. In other illustrative embodiments device may be a disk drive controller a graphics card a network card a network interface controller a local area network adapter or a sound card.

Still in other illustrative embodiments multiple threshold capacities of first portion and multiple threshold sizes for data packet may be used. As an amount of available storage capacity in first portion of memory approaches capacity data packet management process may become increasingly selective. For example once a first threshold capacity in first portion is reached a first threshold size may be established. After a larger threshold capacity is reached a larger threshold size may be established. Data packet management process may use any number of threshold sizes and threshold capacities. In yet another example threshold size may be a function of amount of storage capacity available in first portion of memory .

With reference now to a block diagram of a data packet management environment is depicted in accordance with an illustrative embodiment. As depicted data packet management environment includes network computer system and administrator . Data packet management environment is an example of one implementation of data packet management environment in . As depicted computer system includes network adapter operating system processor unit and hard drive .

In this illustrative example functions of data packet management process in may be implemented in operating system and carried out by kernel . For example kernel may implement a networking stack. A networking stack is an implementation of a network protocols. Network protocols include a description of data packet formats and rules for exchanging data packets in a network such as network . Examples of network protocols may include internet protocol IP and transmission control protocol TCP . Kernel directs data packets received at computer system according to the network protocols.

For example kernel may direct data packets received at network adapter to at least one of set of direct memory access buffers and set of non direct memory access buffers . In another example kernel may track data packets stored in at one of set of direct memory access buffers and set of non direct memory access buffers . As used herein the phrase at least one of when used with a list of items means that different combinations of one or more of the listed items may be used and only one of each item in the list may be needed. For example at least one of item A item B and item C may include for example without limitation item A or item A and item B. This example also may include item A item B and item C or item B and item C.

When application requests a data packet application opens socket . Socket is an endpoint for communication in a network. Socket may also be an interface to another program that is implemented by application such as for example an application programming interface API . Kernel detects when socket is opened. Kernel then maps the data packet stored in one of set of direct memory access buffers and set of non direct memory access buffers to application . Kernel can then direct data packets to application using socket . For example application may access data in the data packets using socket .

In these illustrative examples kernel may also track references such as reference in to data packets held by an application such as application . Kernel can also maintain a count such as count in of data packets stored in set of non direct memory access buffers .

Administrator in data packet management environment may implement functions of data packet management process in . For example administrator may establish thresholds for computer system . Administrator may establish threshold size for whether data packets are stored in set of direct memory access buffers or copied to set of non direct memory access buffers . Administrator may also establish a threshold capacity such as threshold capacity in for set of direct memory access buffers .

In these illustrative examples administrator is an entity that establishes values and controls for computer system . For example administrator may be a server computer that provides updates to computer system . In another example administrator may be a program on computer system that adjusts threshold size based on conditions within computer system . In yet another example administrator may be a person that establishes threshold size based on data obtained about data packet management environment .

With reference now to a block diagram of a storage system is depicted in accordance with an illustrative embodiment. In these examples storage system may be an example of one implementation of memory in . As depicted storage system includes set of direct memory access buffers in direct memory access memory and set of non direct memory access buffers in non direct memory access memory . Storage system receives plurality of data packets on network adapter . Data packet storage process controls the storage of plurality of data packets in storage system .

In this illustrative example when network adapter receives data packet in plurality of data packets network adapter stores data packet in buffer in set of direct memory access buffers . Data packet storage process determines whether threshold capacity of direct memory access memory has been exceeded. As depicted threshold capacity has been exceeded. Then data packet storage process determines whether data packet is smaller than threshold size . As depicted data packet is smaller than threshold size .

In some illustrative examples data packet storage process may not consider threshold capacity . Data packet storage process may copy all data packets smaller than threshold size into non direct memory access memory . Thus buffers within set of direct memory access buffers are not wasted on data packets smaller than threshold size .

At this point network adapter requests that data packet be copied to non direct memory access memory . The buffer is created in non direct memory access memory . Buffer is in non direct memory access memory . With this type of memory data packet is copied to buffer using a processor unit. This processor unit may be processor unit in . Data packet storage process tracks the storage of data packet in buffer . Data packet storage process increases count for each data packet stored in buffer in non direct memory access memory .

The illustrations of data packet management environment in and storage system in are not meant to imply physical or architectural limitations to the manner in which different features may be implemented. Other components in addition to and or in place of the ones illustrated may be used. Some components may be unnecessary in some illustrative embodiments. Also the blocks are presented to illustrate some functional components. One or more of these blocks may be combined and or divided into different blocks when implemented in different illustrative embodiments.

For example without limitation in some illustrative embodiments data packet management environment may not include administrator in . Threshold size may be a function of conditions within computer networking environment in . In other examples functions of data packet storage process may be implemented in a kernel of an operating system such as kernel and operating system in .

With reference now to a flowchart of a process for managing data packets is depicted in accordance with an illustrative embodiment. The process may be performed by data packet management process running on computer system in .

The process begins by receiving a data packet at a device step . In step the data packet may be received by a network adapter such as network adapter in .

The process then stores the data packet in a first portion of a memory allocated to the device step . In step the data packet may be stored in a direct memory access buffer in a set of direct memory access buffers such as set of direct memory access buffers in . Thereafter the process determines whether a size of the data packet is less than a threshold size step .

The process then copies the data packet from the first portion of the memory allocated to the device to a second portion of the memory step with the process terminating thereafter. In step the data packet may be copied to a non direct memory access buffer in a set of non direct memory access buffers such as set of non direct memory access buffers in . The data packet stored in the first portion of the memory may be overwritten and or deleted.

With reference now to a flowchart of a process for storing data packets in a memory is depicted in accordance with an illustrative embodiment. The process may be performed by data packet management process running on computer system in .

The process begins by receiving a data packet step . The process then stores the data packet in a direct memory access buffer step .

Thereafter the process determines whether direct memory access memory has reached a threshold capacity step . If the process determines that direct memory access memory has not reached the threshold capacity the process places an identifier for the data packet in a queue step . If the process determines that direct memory access memory has reached the threshold capacity the process determines a size of the data packet step .

The process then determines whether the size of the data packet is less than a threshold size step . If the process determines that the size of the data packet is greater than the threshold size the process places an identifier for the data packet in a queue step . If the process determines that the size of the data packet is less than a threshold size the process copies the data packet to a non direct memory access memory step . The process then increases a count associated with the non direct memory access memory step .

Thereafter the process places an identifier for the data packet in a queue step . The process then determines whether an application has a reference to the data packet step . If the process determines that an application does not have the reference to the data packet the process removes the identifier for the data packet from the queue step with the process terminating thereafter. In step the storage space occupied by the data packet may be made available for new data packets received.

If the process determines that an application does have the reference to the data packet the process determines whether the data packet has been copied while the identifier for the data packet is in the queue step . If the process determines that the data packet has not been copied while the identifier for the data packet is in the queue the process returns to step . If the process determines that the data packet has been copied while the identifier for the data packet is in the queue the process removes the identifier for the data packet from the queue step with the process terminating thereafter.

The flowchart and block diagrams in the different depicted embodiments illustrate the architecture functionality and operation of some possible implementations of apparatus and methods in different illustrative embodiments. In this regard each block in the flowchart or block diagrams may represent a module segment function and or a portion of an operation or step.

In some alternative implementations the function or functions noted in the block may occur out of the order noted in the figures. For example in some cases two blocks shown in succession may be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. Also other blocks may be added in addition to the illustrated blocks in a flowchart or block diagram.

For example in some illustrative examples step may be removed. The process may copy all data packets having a size that is less than the threshold size to the non direct memory access memory in step .

It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

Thus the different illustrative embodiments allow for data packets to be received while managing where the data packets are stored based on the amount of direct memory access memory available. By storing data packets smaller than a threshold size in non direct memory access memory direct access memory buffers are not wasted. In situations where data packets are received faster than they can be processed direct access memory buffers are preserved for data packets larger than the threshold size. The preservation of direct access memory decreases the chance that data packets will be dropped.

Additionally in the different illustrative embodiments the preference for larger data packets decreases an amount of overhead on a processor unit because smaller data packets require less processing by the processor unit to store in the non direct memory access memory. The direct access memory buffers are used more efficiently than without preferences for larger data packets in the illustrative embodiments. The management of data packets received by the network adapter may also decrease data packet retransmissions and increase the speed of connections within the network in the illustrative embodiments.

Thus the different illustrative embodiments provide a method computer program product and apparatus for managing data packets. In an illustrative embodiment a data packet in the data packets is stored in a first portion of a memory in response to receiving the data packet at a device. The first portion of the memory is allocated to the device. A determination is made as to whether a size of the data packet is less than a threshold size. The data packet is copied from the first portion of the memory allocated to the device to a second portion of the memory in response to a determination that the size of the data packet stored in the memory is less than the threshold size.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

The invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any tangible apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

The description of the present invention has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

