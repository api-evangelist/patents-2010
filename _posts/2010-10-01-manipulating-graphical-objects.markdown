---

title: Manipulating graphical objects
abstract: In one example, a method for rendering graphical objects on a display includes rendering each of a plurality of graphical objects within respective layers. The plurality of graphical objects includes first, second and third graphical objects. The second graphical object is directly linked to the first graphical object and the third graphical object is directly linked to the second graphical object. The method additionally includes receiving user input manipulating one of the graphical objects in a manner that affects a directly linked graphical object. The method additionally includes re-rendering the manipulated graphical object and the directly linked graphical object without re-rendering graphical objects that are not directly linked to the manipulated graphical object.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09019275&OS=09019275&RS=09019275
owner: Lucid Software, Inc.
number: 09019275
owner_city: South Jordan
owner_country: US
publication_date: 20101001
---
The present invention relates generally to graphical objects. More particularly some example embodiments relate to rendering and manipulating complex graphical objects.

Existing techniques for drawing displaying and or manipulating graphical objects in web applications using native browser functionality are slow. This is seen when objects move on across the screen or when users interact with graphical objects.

Typically the entire working area that the user sees is redrawn every time an object moves. This is due to the existing implementations of native browser drawing capabilities. In the case of the HTML5 canvas element the entire drawing area is a single raster device and must be redrawn from scratch on most changes. In the case of SVG scalable vector graphics even the simplest changes to the markup representing the final object display can require the browser to re flow and re render the entire scene.

Hence the responsiveness of graphical applications delivered in a browser is often poor frequently resulting in a visual latency or lag that causes a poor user experience. Alternatively instead of giving users a real time dynamic view of what changes will look like many web based applications only provide a limited representation of tentative changes being made before the change is committed. For example when a user clicks on an object and drags it with a mouse to move it many applications will only show an outline or shadow of the object move along with the user s mouse cursor it is only when the user releases the click to confirm the move that the object and the page is redrawn with the object in its new location and the rest of the page updated accordingly.

As a result many rich internet applications delivered over the web make use of non native browser technologies such as browser plugins e.g. Flash Java or Silverlight that make use of precompiled code running on virtual machines to allow rendering of and interaction with graphic elements. With plugins such as Flash however each time a change is made in code the code must be re compiled into a .swf Small Web Format or ShockWave Flash file and uploaded to the server. The end user must consequently re download the entire application binary. These technologies also limit the deployment of the application to those platforms that support the required plugin.

Building on a proprietary plugin like Flash also restricts applications from using standard form controls that are common in web sites and web applications. This makes the whole user experience of Flash applications significantly different from that of other web applications which can cause frustration and confusion for users.

Allowing other developers to create extensions for an application is difficult with Flash and similar technologies due to their closed compiled nature. In addition generating graphical output that is consistent across different browsers or different file types is difficult. For example different browsers use different rendering techniques for graphics Internet Explorer uses VML whereas many other browsers support Canvas so that building applications that present a consistent output across different browsers is difficult. The main challenge is that different output devices such as different browsers file formats or image generation libraries implement different subsets of common rendering functionality. Furthermore outputting what the user sees in the browser to different file formats such as vector PDF for printing or image formats such as PNG in a consistent manner so that what is seen in the browser is the same as the PDF PNG is also challenging.

The subject matter claimed herein is not limited to embodiments that solve any disadvantages or that operate only in environments such as those described above. Rather this background is only provided to illustrate one exemplary technology area where some embodiments described herein may be practiced

In one example embodiment a method for rendering graphical objects on a display includes rendering each of a plurality of graphical objects within respective layers. The plurality of graphical objects includes first second and third graphical objects. The second graphical object is directly linked to the first graphical object and the third graphical object is directly linked to the second graphical object. The method additionally includes receiving user input manipulating one of the graphical objects in a manner that affects a directly linked graphical object. The method additionally includes re rendering the manipulated graphical object and the directly linked graphical object without re rendering graphical objects that are not directly linked to the manipulated graphical object.

In another example embodiment a method of representing and rendering graphical objects includes separating information for rendering a graphical object into a plurality of sets defining attributes of the graphical object the graphical object configured to render within a local graphics context of a layer. The method additionally includes creating the layer at a particular position of a viewport having a global graphics context defining a global coordinate frame. The method additionally includes translating and scaling the local graphics context to match the global graphics context. The method additionally includes rendering the graphical object at the particular position of the viewport within the layer using the global coordinate frame.

In yet another example embodiment a method of demonstrating the operation of an application includes receiving from one or more input devices connected to a computing device user input effective to initiate a demonstration of an application the application being executable by the computing device. The method additionally includes initiating the demonstrating by generating input for the application based on simulated user actions. The method additionally includes executing the application using the generated input. Executing the application using the generated input includes creating and rendering a plurality of graphical objects on a display connected to the computing device in response to first generated input. Executing the application using the generated input additionally includes in response to second generated input effective to manipulate one or more of the plurality of graphical objects updating and re rendering on the display one or more of the plurality of graphical objects affected by the manipulation substantially in real time as the manipulation occurs while continuously displaying all of the plurality of graphical objects unaffected by the manipulation.

In yet another example embodiment a method for rendering graphical objects on a display includes receiving user input causing a first graphical object to be drawn on a display the first graphical object being rendered in a first layer. The method additionally includes receiving user input causing a second graphical object to be drawn on the display the second graphical object being rendered in a second layer different from the first layer the first and second graphical objects being rendered simultaneously visible on the display. The method additionally includes receiving user input causing a connector to be drawn on the display the connector connecting the first and second graphical objects and being rendered in a third layer different from the first and second layers. The method additionally includes receiving user input manipulating the first graphical object connected by the connector to the second graphical object. The method additionally includes continuously updating and rendering the first graphical object second graphical object and connector in response to and during the manipulating substantially in real time. During the continuous updating and rendering the first graphical object in the first layer is redrawn and the connector in the third layer is redrawn without redrawing the second graphical object in the second layer.

In yet another example embodiment a method for rendering graphical information on a display includes storing data for rendering a graphical object in an intermediate data structure including a plurality of information items defining attributes of the graphical object. The method additionally includes rendering the attributes of the graphical object based on the plurality of information items. The method additionally includes displaying the graphical object on a display based on the rendered attributes. The method additionally includes receiving user input that causes at least some of the plurality of information items to change. The method additionally includes re rendering some but not all of the attributes of the graphical object based on the changed information items.

Additional features and advantages of the invention will be set forth in the description which follows and in part will be obvious from the description or may be learned by the practice of the invention. The features and advantages of the invention may be realized and obtained by means of the instruments and combinations particularly pointed out in the appended claims. These and other features of the present invention will become more fully apparent from the following description and appended claims or may be learned by the practice of the invention as set forth hereinafter.

Embodiments of the invention generally relate to rendering and manipulating graphical objects hereinafter objects in a web browser or other application. As used herein manipulating an object includes moving resizing or changing some other attribute of the object. In some embodiments each object is rendered in a different layer than other objects. Accordingly when an object is manipulated some embodiments permit the manipulated object to be re rendered in its respective layer without re rendering other unaffected objects in different layers.

Alternately or additionally information to render an object is separated into different sets defining different attributes of the object. When one attribute of the object is changed the changed attribute can be re rendered without re rendering unaffected attributes of the object.

Reference will now be made to the drawings to describe various aspects of example embodiments of the invention. It is to be understood that the drawings are diagrammatic and schematic representations of such example embodiments and are not limiting of the present invention nor are they necessarily drawn to scale.

With reference first to one example embodiment is disclosed. illustrates a viewport of a user interface UI according to some embodiments. The viewport is hereinafter referred to as the UI viewport . The UI viewport includes first second and third objects . In the illustrated embodiment the first and second objects are directly linked together and the second and third objects are directly linked together. As used herein two objects are directly linked together if they are linked together without any intervening objects.

Additionally the first object is a process block. The second object is a connector. The third object is a decision block. More generally the objects can be any object.

Some embodiments may alternately or additionally include various other types of objects that are not shown in . By way of example and not limitation these other objects may include objects related to family trees genograms genographs timelines educational uses e.g. Venn diagrams math and grammar instruction storyboards for writing instruction or the like business process models timelines room layout interior design floorplans landscaping landscape design apparel fashion or the like.

Alternately or additionally some embodiments may include images and or other objects selected by a user or associated with a user or group of users. By way of example and not limitation a user may select images or other objects stored locally on a client device and or images or other objects stored or available elsewhere e.g. on a network including but not limited to the public Internet and organize these user selected objects in a library or libraries. According to some embodiments these objects may be selected by dragging and dropping such objects to the viewport from any one of a variety of source locations such as for example a client desktop or local file system or from a web page displayed on the client device. Similarly objects and or libraries may be selected by or associated with a group such as a work group for example company logos images templates etc. a group of friends or inferred friends a group with common or similar interests known or inferred according to any method now known or later developed. In these and other embodiments the organization of objects into libraries may serve to help users more easily locate desired objects. In other embodiments the objects are not organized into libraries.

One or more of the libraries may be provided in a toolbar in the same UI as the UI viewport of . In these and other embodiments a user can create an object at a particular location in the UI viewport by dragging an object from the toolbar and dropping it at the particular location in the UI viewport . Alternately or additionally in response to the user creating a particular object a set of objects that are likely to follow the particular object are presented to the user in the UI viewport . In response to the user selecting one of the objects from the set the selected object is created in the UI viewport following the particular object without the user performing a drag and drop operation.

Returning to each of the objects is rendered within a corresponding first layer second layer or third layer denoted in by the dashed line surrounding each object. Each layer includes a single object in the example of . Alternately or additionally each layer includes more than one object. In some embodiments each layer is an HTML5 canvas element or other layer suitable for providing the functionality described herein. Additionally in the example of each of the layers is slightly larger than the corresponding object rendered therein.

The UI viewport is displayed on a display of a client device. The client device has one or more input devices such as a keyboard mouse or the like and or the display may be a touchscreen display capable of receiving user input. In the illustrated embodiment the client device on which the UI viewport is displayed includes a mouse represented by a mouse cursor in the UI viewport . The mouse or other input device permits a user to manipulate the objects in the present example. Briefly for instance the user may operate the mouse or use a touchscreen interface to move or resize one of the objects connect two objects together or change some other attribute of an object.

According to some embodiments rendering objects within different layers minimizes processing overhead for re rendering the UI viewport when one of the objects is manipulated such as when one of the objects is moved. In this and other embodiments the moved object and one or more objects directly linked to the moved object are re rendered in their respective layers while other objects not directly linked to the moved object are not re rendered.

For instance when the first object is moved the first object is continuously re rendered in the first layer . Because the second object is directly linked to the first object the second object is affected in some embodiments by the movement of the first object . Accordingly the second object is continuously re rendered in the second layer while the first object is being moved in this example. Moreover because the third object is not directly linked to the first object the third object is not re rendered.

Turning next to an example hardware configuration for a client device or other computing device is disclosed in which some embodiments can be implemented. The client device may be configured for example to communicate over a network with a server . The client device includes a central processing unit such as a microprocessor and a number of other units interconnected via a system bus . The other units include Read Only Memory ROM Random Access Memory RAM an input output I O adapter for connecting peripheral devices such as disk storage units to the system bus a user interface adapter for connecting a keyboard a mouse a speaker a microphone a touchscreen interface and or other user interface devices to the bus a communication adapter for communicating over the network and a display adapter for connecting the bus to a display device .

The client device typically has resident thereon a suitable operating system OS such as a Microsoft Windows OS e.g. Vista XP a MAC OS a Unix OS a Linux OS a mobile OS e.g. iPhone OS Windows Mobile Symbian Android OS Blackberry OS etc. or other suitable OS. Those skilled in the art will appreciate that the embodiments disclosed herein may alternately be implemented on platforms and operating systems other than those explicitly mentioned herein.

In some embodiments the client device executes a web browser to download and interact with web pages hosted by the server . The web browser may be loaded to RAM or stored in some other computer storage and executed by the CPU for instance. One or more of the web pages provided by the server to the client device may include a runtime script. The runtime script is JavaScript in some examples. Alternately or additionally the runtime script includes instructions executable by the client device to perform one or more of the methods described herein.

As described above with respect to some embodiments minimize processing overhead by rendering objects within different layers . Alternately or additionally processing overhead may be minimized by separating information for rendering an object into multiple information sets defining different attributes of the object. By separating the rendering information into information sets defining different attributes a change to a single attribute can be effectuated by re rendering the single attribute without re rendering other attributes defined by other information sets.

In this and other examples each object to be rendered is represented in an intermediate data structure describing how the object is to be rendered. For instance illustrates an example intermediate data structure used to represent and describe how an object may be rendered. The intermediate data structure includes a plurality of information sets and defining attributes of the object. In this example the first information set generally defines an outline of the object and the second information set generally defines a rich text area of the object.

In more detail the first information set defines one or more of a color of a line making up the outline of the object a weight of the line making up the outline a gradient e.g. solid dashed dotted of the line making up the outline a shape of an area bounded by the outline a fill color of the area bounded by the outline a fill gradient of the fill color and a transparency level of the fill color.

The shape information may include one or more commands defining the shape of the object s outline. Move line quadratic Bezier curve and close shape commands are examples of commands that can be included in the shape information to define the shape of the object s outline.

The first information set may omit some or all of the foregoing rendering information depending on the object represented by the intermediate data structure . For instance fill color fill gradient and transparency may be omitted from the first information set for an object such as the connector of in some examples. Other embodiments of the invention may including additional or different rendering information not represented in such as without limitation rendering information defining a number of buttons to include in toolbar object or other object rendering information defining corner effects e.g. how soft or round to make corners rendering information defining a geometric transformation of an object e.g. rotation angle stretch skew rendering information defining one or more other effects e.g. a drop shadow under an object the size projection angle or thickness of the drop shadow 3 D effects such as extrusion effects rendering information defining Boolean combinations of different objects to create a single object or the like or any combination thereof. More generally the rendering information included in the intermediate data structure can include any type of information that could be used in determining how to render an object.

The second information set defines one or more of a bounding box in relation to the object outline and within which rich text is rendered and a canonical representation of the rich text. In some embodiments the canonical representation of the rich text is an extensible markup language XML representation of the rich text specifying one or more of color font bold italics underline size or other aspects of the rich text. In these and certain other embodiments the XML somewhat resembles hypertext markup language HTML and can be derived from any valid HTML. Text is edited by translating the canonical representation into rich text such as HTML receiving user input effective to edit the text through a browser or other application based rich text editor and then translating the result back into the canonical representation.

Decomposing complex rendering information for each object in a file into the limited information included in the intermediate data structure of ensures in some examples a consistent output irrespective of the file type of the output file or the browser or other application used to view the file. For instance while some web browsers support drawing circles the portable document format PDF does not. By approximating circles using quadratic Bezier curves the intermediate data structure permits circles to be rendered consistently by web browsers in PDF format and by other applications or in other formats.

Alternately or additionally decomposing the rendering information into limited information included in an intermediate data structure can result in less processing and faster rendering of an object when attributes of the object are changed. For example when only an outline of an object is changed the outline can be re rendered without re rendering text of the object. As another example when only text of an object is changed the text can be re rendered without re rendering the outline of the object. By re rendering only those attributes of an object that are affected by changes it takes relatively less processing power and time to re render an object compared to re rendering every attribute of the object whether or not every attribute is affected by a given change.

The information sets and rendering information are provided by way of example only and should not be construed to limit the invention. For instance intermediate data structure according to embodiments of the invention may include more than two information sets and or different information sets than information sets such as by way of example and not limitation an information set generally defining semantic attributes of the object or other information sets. Similarly rendering information according to various embodiments of the invention may include different and or additional rendering information such as by way of example and not limitation rendering information defining whether an object represents an interface rendering information defining whether an object is to be included in one but not both of a displayed and printed version of a document rendering information defining a number of drop down items associated with an object rendering information defining a uniform resource identifier URI or other rendering information.

One or more of the object libraries of are provided in a scrollable toolbar along the left edge of the UI . Optionally each object library can be collapsed or expanded by clicking the header containing the name e.g. FLOWCHART CONTAINERS SHAPES etc. of the object library . Alternately or additionally a button provided at the bottom of the toolbar can be used to completely remove an object library from the toolbar or add a new object library to the toolbar .

According to some embodiments another toolbar is provided above the UI viewport . Optionally the buttons available in the toolbar vary depending on whether an object is selected and or the type of the object. For instance in the example of none of the objects displayed in the UI is selected. In this example various buttons provided in the toolbar permit a user to configure default settings for new objects created in the UI . The settings of each object created in the UI whether default settings or otherwise determine the attributes defined by the information sets etc. of the intermediate data structure representing the object.

In the illustrated embodiment of the user can use the buttons provided in the toolbar to set default text settings default block settings default line settings and or default theme settings. In more detail the buttons are used to set default text settings such as color font emphasis e.g. bold italic underline or size of the text included in new objects. The buttons are used to set default block settings such as fill color outline color or outline thickness of new block objects. The buttons are used to set default line settings such as line color line thickness line gradient or line style e.g. curved elbow direct of new connectors. The buttons are used to set default theme settings such as corner style e.g. square soft rounded and fill gradient style e.g. no gradient soft gradient strong gradient of new objects. The particular default settings of and the settings of are described by way of example only and should not be construed to limit the invention.

Alternately in the example of the third object has been selected indicated by highlighting surrounding the third object . Accordingly the toolbar in provides buttons that permit a user to configure settings of the selected third object without affecting the settings of the first or second objects . Some of the buttons are analogous to some of the buttons of and can be used to set text settings such as color font emphasis or size and can additionally be used to set alignment e.g. left center right of the text included in the selected third object . The buttons are analogous to the buttons of and can be used to set block settings such as outline color outline thickness or fill color of the selected third object .

Alternately in the example of the second object has been selected indicated by highlighting surrounding the second object . Accordingly the toolbar in provides buttons that permit a user to configure settings of the selected second object without affecting settings of the first or third objects . Some of the buttons are analogous to the buttons of and can be used to set text settings such as font emphasis or size of text included in the selected second object . Some of the buttons are analogous to some of the buttons of and can be used to set line settings such as line color line thickness line gradient or line style and can additionally be used to set beginning end styles e.g. none arrow hollow arrow open arrow of the selected second object or to edit the shape of the selected second object as discussed with respect to below.

Referring to the third layer within which the third object is rendered is denoted by the dashed line surrounding the third object . Although dashed lines are provided in B and other Figures herein for use in identifying some or all of the layers in certain embodiments of the invention layers are not generally visible in the UI to a user and are merely provided in the Figures for convenience in describing aspects of the invention.

In some embodiments objects such as the third object are rendered on the UI with reference to the corresponding layer such as the third layer . For instance the size and position of the layer may correspond to the size and position of the object. In these and other embodiments for example as a user manipulates the third object the third layer may also change accordingly. In this regard the layer containing the object may include one or more controls that can be used to manipulate the layer and the object. Further according to some embodiments the controls are positioned in certain areas of the layer and may be highlighted in response to certain user input. For instance the controls may be highlighted in response to a user selecting the object in response to the mouse cursor hovering over an area corresponding to the control or both.

In the illustrated embodiment of for example the third layer includes resizing controls A D collectively resizing controls disposed at the four corners of the third layer and certain connection controls A D collectively connection controls disposed in the third layer near the four corners of the third object . In this example the resizing controls and connection controls are highlighted in response to a user selecting the third object .

The resizing controls can be used to resize the third layer and the third object by e.g. a user moving the mouse cursor to one of the resizing controls depressing the left mouse button while the mouse cursor is hovering over the resizing control dragging the mouse cursor and resizing control in a direction effective to resize the third layer and releasing the left mouse button when the third layer is a desired size. For example clicking and dragging resizing control A to the left and or upwards increases the size of the third layer and third object while clicking and dragging resizing control A to the right and or downwards decreases the size of the third layer and third object .

The action of a user depressing a mouse button dragging the mouse cursor to a different location and releasing the mouse button may be referred to herein as clicking and dragging. Depending on the input device involved and or the configuration of the input device other actions of a user may similarly result in a click and drag action.

The connection controls can be used to attach a connector to the third layer and thus the third object by e.g. a user positioning the mouse cursor over one of the connection controls and clicking and dragging the mouse cursor to a terminal location where the resulting connector terminates. In some embodiments the resulting connector is rendered in the UI after the mouse cursor has been dragged a predetermined distance from the connection control the resulting connector beginning at the connection control and terminating at the mouse cursor . Alternately or additionally until the left mouse button is released and while the user is dragging the mouse cursor about the UI the resulting connector is continuously re rendered in the UI and terminates at a location near the moving mouse cursor each time it is re rendered.

In the example of the resizing controls and certain connection controls are highlighted in response to a user selecting the third object . Alternately or additionally resizing controls connection controls and or a translation control are highlighted in response to the mouse cursor hovering over an area corresponding to the control whether or not the object has been selected.

In for instance resizing controls at the four corners of the first layer only one resizing control is labeled in and connection controls on the first layer at the four sides of the first object only one connection control is labeled in may appear in response to the mouse cursor hovering over any portion of the first layer even though the first object has not been selected. In some embodiments the display of the resizing controls and connection controls in response to the mouse cursor hovering over any portion of the first layer visually indicates where the mouse cursor can be moved to enable corresponding control of the first layer and first object .

The display of the resizing controls and connection controls in the UI viewport serves to highlight some of the controls available for the first layer and first object . Alternately or additionally a specific control that can be activated in a particular area may be highlighted by altering the appearance of the mouse cursor when the mouse cursor is hovering over the particular area to thereby indicate that the corresponding control can be activated while the mouse cursor is in the particular area.

For instance in response to the mouse cursor hovering over an area of the first layer near one of the resizing controls the mouse cursor may be altered to appear as a resizing cursor A that visually indicates to a user that the first layer and first object can be resized by clicking and dragging anywhere in the area in which the mouse cursor appears as a resizing cursor A.

Alternately or additionally in response to the mouse cursor hovering over an area of the first layer near one of the connection controls the mouse cursor may be altered to appear as a connection cursor B that visually indicates to a user that a connector can be connected to and or initiated from the first layer and first object by clicking anywhere in the area in which the mouse cursor appears as the connection cursor B. In response to dragging the connection cursor B which may continue to appear as the connection cursor B or return to appear as the mouse cursor during the drag to a terminal location a connector may be created that is connected to the first layer and first object at a connection point in the area where the click occurred and that terminates at the terminal location.

It should be noted that although connection controls are shown as discrete points on the corners of the third layer and third object in and connection controls are shown as discrete points on the four sides of the first layer and first object in in some embodiments of the invention connection controls may be provided in one or more additional locations and or different locations than are shown in . For example connection controls may be provided at additional discrete points located along one or more edges of an object or corresponding layer. Alternately or additionally connection controls may be provided continuously along one or more edges of an object or corresponding layer. Additional detail regarding this and other aspects of some example embodiments are provided below with respect to .

Alternately or additionally in response to the mouse cursor hovering over an area of the first layer that is more than a predetermined distance from the nearest resizing control connection control or text field of the first object the mouse cursor may be altered to appear as a translation cursor C. The translation cursor C visually indicates to a user that the first layer and first object can be moved to a different location in the UI viewport by clicking anywhere in the area in which the mouse cursor appears as the translation cursor C. In response to dragging the translation cursor C which may continue to appear as the translation cursor C or return to appear as the mouse cursor during the drag the first layer and first object are moved about the UI viewport wherever the cursor C or is dragged.

While simultaneously illustrates four different cursors e.g. mouse cursor resizing cursor A connection cursor B and translation cursor C generally only a single a cursor A B or C appears in the UI at any given time according to some embodiments. The cursors A B and C are simultaneously illustrated in as a matter of convenience to avoid the need for additional drawings and to illustrate that the appearance of the mouse cursor may vary depending on whether the mouse cursor is hovering over a layer and or the particular area of the layer over which the mouse cursor is hovering.

Optionally first predetermined text is automatically populated in the connector based on the object to which the connector is connected and or whether any other connectors have already been created that are connected to the third object . In this case whereas the third object is a decision block in a flowchart and decision blocks are often followed by a Yes path and a No path the first connector may be automatically populated with the text Yes while the next connector that is connected to the third object may be automatically populated with the text No. Alternately the first connector can be automatically populated with the text No while the next connector can be automatically populated with the text Yes. Alternately or additionally a user can configure connectors that are connected to decision blocks or other objects to automatically populate with some other predetermined text besides Yes or No. 

Alternately or additionally in response to the user releasing the mouse cursor at a desired terminal location for terminating the connector a set of objects are presented in the UI viewport to the user near the terminal location or elsewhere in the UI viewport . In certain embodiments the set of objects is presented to the user in a new pop up or context menu. The set of objects may include objects that are likely to be added to the document and connected to the connector based on the objects and or already included in the document the type of diagram or document being drawn user history or preferences settings object libraries that are open or have been recently or frequently used etc. For instance in the example illustrated by because all of the objects and are flowchart objects indicating that the user is creating a flowchart the set of objects presented in the UI viewport near the terminal location may include flowchart objects.

After the set of objects is presented in the UI viewport the user can select a particular object from the set . In response to the user selection the selected object is created connected to the connector near the terminal location and rendered in the UI viewport . For instance the object presented at the upper left corner of the set of objects represents a process block. If the user selects the representation of the process block the process block of is created connected to the connector near the terminal location and rendered in the UI viewport . According to certain embodiments of the invention the ordering and appearance of objects within the set of objects may be automatically adjusted based on detecting a user s history or preferences using techniques now known or later developed or based on selections by users. For example if a user frequently uses a certain type of object with a certain type of border color fill color and or text style size color the user may add an object with these properties to the set of objects or such an object may be added automatically.

Vertical alignment hint lines are alternately or additionally displayed when the decision block is being moved above or below the first object and the vertical axis of the decision block comes within a predetermined distance from the vertical axis of the first object . More generally vertical horizontal and or other alignment hint lines are displayed in some examples when a first object is being moved about and a vertical horizontal or other axis of the first objects comes within a predetermined distance of a corresponding vertical horizontal or other axis of a second object.

In the illustrated embodiment of an indicator including a circle centered on and highlighting the upper connection control is displayed when the mouse cursor comes within a predetermined area surrounding the upper connection control while the connector is being dragged about the UI viewport . The indicator provides a visual indication of an ability to link the connector to the decision block at a connection point corresponding to the upper connection control . Releasing the connector while the indicator is displayed may serve as confirmation by the user that the user desires to link the connector to the decision block at the upper connection control . As discussed previously according to some embodiments of the invention connection controls may be located continuously along the edges of objects e.g. decision block and therefore the connection controls illustrated in are a representative set and not an exhaustive set of connection controls.

Optionally and as seen in while the connector is being dragged about the UI viewport some connection controls on some or all of the objects in the UI viewport are displayed to provide a preliminary indication to the user of at least some potential terminal locations for the connector .

According to certain embodiments when the connector is first created it has two control points one each at the beginning and end of the connector . In response to the user selecting a line editing mode a control bar passing through each control point is displayed in the UI viewport . The angle of each control bar in some embodiments generally determines the angle of the connector as it approaches the corresponding control point . The length of each control bar may generally determine the amount of length of the connector that approaches the corresponding control point at about the determined angle.

By clicking on and rotating the control bar about the corresponding control point the user can change the angle of the control bar and thus the angle of the connector as it approaches the corresponding control point . Alternately or additionally by clicking on and resizing the ends of the control bar the user can change the amount of length of the connector that approaches the corresponding control point at about the determined angle. For instance illustrates an example in which the angles and lengths of both control bars have been modified and further illustrates the corresponding changes to the connector .

Alternately or additionally the user can add new control points such as the user added control point by e.g. clicking at a desired location on the connector for the control point . The user added control point may generally define a point in the UI viewport through which the connector passes. Optionally the user added control point can be repositioned by clicking and dragging on the user added control point . Additionally a control bar associated with the user added control point may provide the same functions as the control bars associated with control points .

In some examples a jump feature such as the jump feature is added to a particular connector such as the second object when a different connector such as the connector is created that crosses over the particular connector or is repositioned such that it crosses over the particular connector. Thus even though none of the attributes of the particular connector have been changed by the creation or repositioning of the different connector the creation or repositioning of the different connector may nevertheless affect how the final rendered existing connector appears. Accordingly some embodiments track which connectors have changed since a previous rendering and additionally run a preprocessing routine that identifies any other connectors that may have been affected by the changes.

The preprocessing routine may include one or more tests to determine whether two connectors actually intersect such that a jump feature should be added to one or the other. For instance the preprocessing routine can include a computationally heavy connector intersection test to determine whether two connectors actually intersect. Alternately or additionally the preprocessing routine includes a computationally simple axis aligned bounding box AABB test to determine if two connectors potentially overlap followed by the actual connector intersection test on positives of the AABB test. Alternately or additionally the AABB test can be followed up with a second AABB test in a rotated coordinate frame to eliminate false positives from the first AABB test followed by the actual connector intersection test on only the positives from the second AABB test.

All connectors that are found to overlap may be marked as changed and at render time some amount of reprocessing is done on the marked connectors to determine if an update of the connector is needed. While the preprocessing routine has been described in the context of overlapping connectors the preprocessing routine is more generally applicable to any set of objects that potentially overlap one another.

Connection controls have previously been disclosed with respect to e.g. showing four discrete connection controls at specific locations on each of objects respectively. As noted above however connection controls in certain embodiments may alternately or additionally be provided discretely or continuously at other locations along the edges of an object.

For example illustrates an object including connection controls A D collectively connection controls located at about the midpoint along each edge of the object . According to certain embodiments the object may further include one or more additional connection controls located at other discrete locations along the edges of the object or that are continuously available at about any point along the edges of the object .

One such additional connection control located on a lower edge of the object is illustrated in . According to some embodiments the location of connection control is identified by an indicator centered about connection control . The indicator may appear when a terminal end A of a connector is dragged to within a predetermined distance of the connection control . Although identifies the location of a single additional connection control beyond connection controls in certain embodiments the object has multiple additional connection controls that may be identified by an indicator such as the indicator when the terminal end of a connector is dragged to within a predetermined distance of the additional connection control. Accordingly embodiments of the invention permit objects such as connectors to be connected to virtually any location of an object and not solely to one of four discrete connection controls such as the connection controls and of .

According to some embodiments text included in an object such as text included in connector can be moved along the object and continuously updated rendered in real time as the text is moved around. For example as shown in the text of connector is located to the right of the second object . However the text may be moved along the connector to any location along the connector such as to a new location to the left of the second object as depicted in .

While illustrate the text being located inline with the connector in other embodiments the text may be located near but not inline with the connector . For instance the text may be moved immediately above below to the left or to the right of any portion of the connector .

As depicted in and J K some connectors such as the connectors can include a text field such as text fields . Alternately or additionally connectors can include multiple text fields. For example as illustrated in the connector includes two text fields . More generally each connector can include as few as zero text fields or one or more text fields as desired.

Various embodiments of the invention have been described in relation to actions performed by a user with an input device such as a mouse. Alternately or additionally the embodiments disclosed herein can be described in relation to the user input received by the client device via any input device such as a mouse or a touchscreen interface including those with multi touch capability or the like. Generally the user input includes data and or signals indicative of the actions performed by the user. Those skilled in the art will appreciate with the benefit of the present disclosure the relation between the actions performed by a user with an input device and the user input received by the client device.

Turning next to various example methods of operation are described according to some embodiments of the invention. One skilled in the art will appreciate that for the processes and methods disclosed herein the acts performed in the processes and methods may be implemented in differing order than disclosed herein. Furthermore the outlined acts and operations are only provided as examples and some of the acts and operations may be optional combined into fewer acts and operations or expanded into additional acts and operations without detracting from the essence of the disclosed embodiments.

The method begins by rendering a plurality of objects within respective layers . The second object is directly linked to the first object and the third object is directly linked to the second object . According to some embodiments each of objects is rendered within respective layers based on corresponding intermediate data structures for each object . Alternately or additionally each of the objects is rendered by reference to the respective layer within which the object contained.

The method continues by receiving user input manipulating one of the objects in a manner that affects a directly linked object . In the present example the user input is effective to move the first object from the position shown in to a new position not shown . Alternately or additionally the user input manipulating the first object includes user input manipulating the first layer .

The method proceeds by re rendering the manipulated first object and the second object that is directly linked to the first object without re rendering the third object that is not directly linked to the first object . In some embodiments the manipulated first object and directly linked second object are re rendered substantially in real time while the first object is being manipulated.

Although not shown in various other acts and operations may be included in variations of the method . For example as already indicated above the layers may be slightly larger than the objects contained therein and each layer may include at least one of a resizing control translation control and connection control. In this example the method may further include receiving user input causing a mouse cursor displayed on a display to hover over an area of a layer corresponding to a particular control and highlighting the particular control as described with respect to for instance.

As another example each of the first layer and third layer may include connection points corresponding to connection controls of the first and third layer . Further the first and third objects may be created prior to creating the second object analogous to the manner in which the first object and decision block of were created prior to creating the connector of . In this example the method may further include prior to creating and rendering the second object receiving user input initiating creation of the second object beginning from a connection point of the first object and receiving user input terminating the second object at a connection point of the third object where the second object is a connector linked to the first object and third object at corresponding connection points. In some embodiments the user input initiating creation of the second object from the connection point of the first object represents a user action of selecting the connection point without previously manually selecting a connector drawing mode to draw the second object .

Alternately or additionally and continuing with the example of the previous paragraph the method may further include prior to receiving user input terminating the second object providing a visual indication such as the indicator of of an ability to link the second object to the third object at a connection point of the third object . The method may additionally include receiving user input such as data representing the release of a mouse button indicating confirmation that the user desires to link the second object to the third object at a connection point of the third object and then linking the second object to the third object at a connection point of the third object .

As another example the method may include acts described in relation to and the set of objects displayed in . For instance considering some of the acts associated with in the context of the method may include prior to rendering the second and third objects receiving user input initiating creation of the second object beginning from a connection point of the first object the second object having a first end connected to the connection point of the first object and a second end opposite the first end receiving user input identifying a terminal location of the second end of the second object in response to receiving the user input identifying the terminal location presenting on the display a set of representations of objects such as the set for use as the third object and receiving user input including a selection of a representation of the third object .

Alternately or additionally instructions that are executable by a computing device such as the client device of to perform the method or any of the variations described hereinabove can be stored on a physical computer readable storage medium for execution by the computing device.

At user input is receiving causing a first object to be rendered within a first layer and displayed on a display.

At user input is received causing a second object to be rendered within a second layer and displayed on the display. In some embodiments both of the first and second objects are simultaneously visible to a user after both objects have been rendered.

At user input is received causing a connector to be rendered within a third layer and displayed on the display the connector connecting the first and second objects. Note that in some embodiments the connector may be a line that corresponds to a line drawn on the display between the first and second objects but that in other embodiments of the invention the connector may be of another nature and or may take other shapes or forms.

At user input is received manipulating the first object connected by the connector to the second object.

At the first object second object and connector are continuously updated and displayed substantially in real time during the manipulating of the first object. In some embodiments act includes continuously re rendering the first object within the first layer and the third object within the third layer without re rendering the second object within the second layer.

The method begins by separating information for rendering an object into a plurality of sets defining attributes of the object such as the information sets of . In some embodiments the object is configured to render within a particular graphics context of the layer. The graphics context of the layer may define for instance a local coordinate frame and or a scale that may be the same as or different from a global coordinate frame and or scale defined by a UI viewport in which the object is ultimately rendered.

At the layer is created at a particular position of the UI viewport. The particular position of the UI viewport may correspond to a position of the UI viewport to where the user drags an object from a toolbar such as the toolbar of or a position of the UI viewport where the user terminates a connector thereby prompting the user through a set of representations of objects to select and create an object near the terminal location or the like.

At the graphics context of the layer is translated and scaled to match the graphics context of the UI viewport.

At the object is rendered at the particular position of the UI viewport within the layer using the global coordinate frame. Rendering the object within the layer may include separately rendering the attributes of the object defined by the plurality of sets of information.

Although not shown in variations of the method may additionally include other acts or operations. For instance the method may further include caching separately rendered attributes of the object defined by the plurality of sets of information and in response to receiving user input modifying a particular attributed defined by a particular set re rendering the particular attribute defined by the particular set of information without re rendering other attributes defined by other sets included in the plurality of sets of information.

Alternately or additionally instructions that are executable by a computing device such as the client device of to perform the method or any of the variations described hereinabove can be stored on a physical computer readable storage medium for execution by the computing device.

At user input effective to edit the rich text is received through a rich text editor. The rich text editor is a web browser based editor according to some embodiments.

In some embodiments the canonical representation of the text is an XML representation of the text. Alternately or additionally the rich text is an HTML representation of the text.

The method begins by storing data for rendering a graphical object in an intermediate data structure including a plurality of information items defining attributes of the graphical object. One example of an intermediate data structure is provided in at . Various example information items are also provided in at .

At based on the changed information items some but not all of the attributes of the graphical object are re rendered. The act may include for example determining whether each of the attributes of the graphical object is affected by the changed information items and re rendering only those attributes that are determined to be affected by the changed information items. Alternately or additionally act may include re rending an outline of the graphical object without re rendering a rich text are of the graphical object. Alternately or additionally act may include re rendering a rich text area of the graphical object without re rendering an outline of the graphical object.

Alternately or additionally instructions that are executable by a computing device such as the client device of to perform the method or any of the variations described hereinabove can be stored on a physical computer readable storage medium for execution by the computing device.

In view of the disclosure provided above those skilled in the art will appreciate that some embodiments disclosed herein enable objects to be re rendered virtually instantly in response to user commands without the processing delays associated with re rendering objects in some applications. The ability to re render objects virtually instantly can be leveraged to enable live demonstrations of products that implement some of the methods disclosed herein.

In this regard it is noted that many websites and applications offer video demonstrations of how a particular application or service works. Many of these demonstrations include pre recorded video that is a video screen capture showing the application interface how the application responds and how to use the application to accomplish certain desired actions or results.

According to some embodiments however an actual live demonstration can be provided on a client device for a user to see an application in action. In other words rather than the demonstration being a mere video screen capture the demonstration is an actual execution of the application using simulated user actions to show the application in action.

At user input effective to initiate the demonstration of the application is received e.g. by the client device. At the demonstration is initiated by generating input for the application based on simulated user actions.

The generated input is provided to the application which is executed using the generated input to provide a demonstration of the application in action. In some embodiments executing the application using the generated input includes creating and rendering a plurality of graphical objects on a display connected to the computing device in response to first generated input and in response to second generated input effective to manipulate one or more of the plurality of graphical objects updating and re rendering on the display one or more of the plurality of graphical objects affected by the manipulation substantially in real time as the manipulation occurs.

Although not shown in the method may further include presenting an indication on the display that the demonstration is finished and allowing a user to edit the plurality of graphical objects created during the demonstration.

The user actions simulated in the method of may include for instance mouse clicks and movements key presses for typing text from a keyboard finger swipes for touchscreen interfaces including multiple concurrent swipes for multi touch interfaces etc. Additionally the input generated from the simulated user actions is the same as the user input that would result from the user actually performing the simulated user actions.

In some embodiments simulating a user action includes displaying output corresponding to the user action on a display. For example if the user action being simulated is a mouse click the appearance of a mouse cursor displayed on the display may change to indicate that a mouse click occurred. Alternately or additionally if the user action being simulated is a mouse movement the mouse cursor displayed on the display may move across the display. Similarly if the user action being simulated is a finger swipe an indication of a swiping action may appear on the display. Alternately or additionally if the user action being simulated is typing on a keyboard text may appear on the display.

Accordingly the user viewing the demonstration experiences an actual execution of the application where all the steps that are required to perform certain actions in the application necessarily happen right in front of the user since the application is actually being executed. In contrast a video representation of an execution of an application may be edited and or may omit certain steps such that it does not accurately represent the application.

Additionally when an application is updated a video demonstration of an earlier version of the application may become outdated and should also be updated to accurately reflect the newer version of the application. According to embodiments of the live demonstration disclosed herein however there is no video demonstration to update. Instead when the application is updated the live demonstration is also necessarily updated since the live demonstration includes execution of the application.

Further from the point of view of a user viewing a video demonstration the video demonstration may show a user how to use an application to create application output such as a document but the video demonstration itself does not produce the application output. For instance while the video demonstration may show the user how to use an application to produce or edit a document the video demonstration does not create an actual document that can be edited or otherwise used by the user. In contrast because embodiments of the live demonstration described herein actually execute the application during the demonstration any document or object created or edited during the demonstration becomes available to be edited or used by the user when the demonstration terminates.

Returning to in some embodiments the live demonstration occurs within a web browser that downloads a web page including the application. Because the user can control some aspects of the browser window such as the size of the browser window some embodiments of the method may further include detecting the size of the browser window and prior to the application outputting any visual output during the demonstration scaling the visual output based on the detected size of the window.

Alternately or additionally some embodiments of a UI presented to the user in response to execution of the application present different object libraries that can be collapsed and or hidden by the user as discussed above with respect to and the button . In some cases a live demonstration may involve objects from particular object libraries. As such the method of may further include determining whether one or more object libraries including objects used in the live demonstration are available in the UI and updating the UI to display the one or more object libraries if necessary.

Those skilled in the art will appreciate with the benefit of the present disclosure that the invention disclosed herein can be implemented in many different scenarios. For instance an example website may allow users to drag and drop images of products into a electronic collage or other document. The products may be for instance apparel and accessories or other products. The principals disclosed herein can easily be applied to improve the rendering speed of such a website when a user drags new images into a collage makes changes to existing images already in the collage connects images together views a demonstration of how the website works or the like or any combination thereof. The foregoing is only one specific example of a specific application of some of the principles of the present invention and those skilled in the art will appreciate how to apply the principals of the present invention in other situations.

Those skilled in the art will appreciate with the benefit of the present disclosure that the embodiments described herein can be adapted for alternative implementations beyond those explicitly disclosed herein. For example while some embodiments have been described as methods implemented by instructions of a runtime script provided in a web page executed in a web browser the methods or variations thereof can alternately be implemented in a proprietary plugin to obtain similar benefits to those described herein.

As another example some of the methods described herein are optimized for a raster based canvas implementation. However the methods or variations thereof can be adapted for tag based vector representations in a web browser such as the Scalable Vector Graphics SVG representation through careful use of container elements for instance.

The embodiments described herein may include the use of a special purpose or general purpose computer including various computer hardware or software modules as discussed in greater detail below.

Embodiments within the scope of the present invention also include computer readable media for carrying or having computer executable instructions or data structures stored thereon. Such computer readable media can be any available media that can be accessed by a general purpose or special purpose computer. By way of example and not limitation such computer readable media include physical computer readable storage media such as RAM ROM EEPROM CD ROM or other optical disk storage magnetic disk storage or other magnetic storage devices or any other physical medium which can be used to carry or store desired program code means in the form of computer executable instructions or data structures and which can be accessed by a general purpose or special purpose computer. When information is transferred or provided over a network or another communications connection either hardwired wireless or a combination of hardwired or wireless to a computer the computer properly views the connection as a computer readable medium. Thus any such connection is properly termed a computer readable medium. Combinations of the above should also be included within the scope of computer readable media.

Computer executable instructions include for example instructions and data which cause a general purpose computer special purpose computer or special purpose processing device to perform a certain function or group of functions. Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

As used herein the term module or component can refer to software objects or routines that execute on the computing system. The different components modules engines and services described herein may be implemented as objects or processes that execute on the computing system e.g. as separate threads . While the system and methods described herein are preferably implemented in software implementations in hardware or a combination of software and hardware are also possible and contemplated. In this description a computing entity may be any computing system as previously defined herein or any module or combination of modulates running on a computing system.

The present invention may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the invention is therefore indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.

