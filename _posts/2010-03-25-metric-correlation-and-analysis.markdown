---

title: Metric correlation and analysis
abstract: Techniques for improved metric correlation and analysis include, during a modeling phase, a user familiar with the types of system components deployed in an enterprise network and the metrics available for those types of system components specifying dependencies between metrics in a metric dependency model. During a binding phase, the metric dependency model is provided to a modified enterprise management (MEM) system which binds the model to particular enterprise system environment. During a metric correlation and analysis phase, the MEM system provides a user-interface through which a user visually compares metric data for metrics collected from system components deployed in an enterprise system environment bound to the model. The improved metric correlation analysis techniques allow users to more easily identify whether degradation in the performance of one metric is caused by performance degradation of underlying information technology system components as measured by related metrics specified in the metric dependency model.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08229953&OS=08229953&RS=08229953
owner: Oracle International Corporation
number: 08229953
owner_city: Redwood Shores
owner_country: US
publication_date: 20100325
---
A portion of the disclosure of this patent document contains material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

The present invention relates generally to enterprise management systems and more particularly to techniques for improved metric correlation and analysis.

Enterprise management systems EM systems are being used to centrally manage heterogeneous devices and applications deployed in enterprise networks. illustrates the basic architecture of an EM system . At a high level the system includes a management server connected over a network to various managed devices on which various software applications are deployed. More specifically the system includes one or more managed devices connected over a network to least one server for managing devices . Management agents installed and executing on the managed devices perform monitoring of the managed devices. The agents collect monitoring data which is provided to management server for aggregation. Management server stores monitoring data collected from the managed devices in management repository . Management server also provides a user interface for viewing data in the management repository to enable a system administrator to check the status of managed devices . In addition the management server communicates with agents on the managed devices for the purpose of affecting changes in configuration of software applications installed and executing on devices . Such changes are initiated by the system administrator through the user interface of management server

EM systems may provide the ability for a system administrator to view many individual metrics for various hardware and software system components deployed in an enterprise network. For example a typical EM system provides the ability for a system administrator to determine the utilization of a central processing unit CPU of a particular managed device. As another example a typical enterprise management system provides the ability to determine the average amount of time taken by a particular software application to authenticate users logging on to the application.

In addition to providing the ability to view metrics EM systems may provide the ability to generate alerts when a metric exceeds or falls below a pre defined threshold. For example an EM system may generate an alert in the form an electronic message e mail or offline report to a system administrator when the amount of available non volatile storage space on a particular managed device falls below a pre defined amount. Thus EM systems may provide low level monitoring and management capabilities geared toward system administrators. These systems allow administrators to manage and monitor the information technology infrastructure of an enterprise at the level of individual system components. For example if the system administrator receives an alert that available non volatile storage space on a particular managed device is running low the administrator can take appropriate remedial action such as replacing the storage device with a larger capacity storage device or removing unwanted data from the existing storage device to free up available storage space.

While some EM systems are useful for troubleshooting individual system components in an enterprise network such systems provide limited to no ability to determine how the performance of any individual system component is related to or dependent on the performance of other system components. More generally such systems provided limited to no ability to determine how the performance of a key organizational process of the enterprise is related to or dependent on the performance of individual system components in the enterprise network. For example in response to receiving an alert that a particular storage device is running out of available storage space some EM systems do not provide an integrated way for the system administrator to determine what deployed software applications depend on the particular storage device. If there are mission critical software applications that depend on the particular storage device then it may not be appropriate for the system administrator to remedy the low storage space alert by taking the storage device off line in order to replace the storage device. Instead another remedy which minimizes the downtime of the dependent software applications is more appropriate. With some EM systems the system administrator may be required to perform a lengthy investigation to determine what software applications depend on a particular system component before taking any remedial action. This is inefficient for the enterprise.

Another deficiency of some EM systems is that they provide limited to no ability to determine what information technology system components support a particular organizational process. For example a company that manufactures and sells widgets may use an order processing software application to enter orders for widgets received over the telephone by customer service representatives. The order processing application may provide for example an average order processing time metric that measures the average amount of time between initiating entry of a new order and the completing entry of the order. Such a metric may depend on a variety of factors including human resource factors and information technology factors. Often it is a front line organizational manager and not a system administrator that is first to notice when an organizational metric trends or moves in an undesirable direction e.g. average order processing time suddenly increases . However some EM systems provide limited to no ability to determine what system components in the enterprise network support the organizational process. Thus with some EM systems the front line manager cannot easily determine whether the undesirable trend in the organizational metric is caused by a problem with system components on which the organizational process depends. For example the increase in average order processing time may be caused by the order database being overloaded with order entry requests. With some EM systems the front line manager may be required perhaps in cooperation with information technology specialists to perform an extensive investigation to determine which system components support the organizational process and whether those system components are the cause of the degradation in the organizational metric. This is undesirable not only because it is time consuming but also because the front line manager may not be able to diagnose the problem herself and instead may require the help of typically over burdened information technology system administrators.

Given the ever increasing reliance by organizations on information technology to support their organizational processes there is much interest in improving the visibility of organizational dependencies on information technology system components deployed in enterprise networks. Accordingly there is a need for an enterprise management system that provides improved visibility of the relationships between system components deployed in enterprise networks and that provides improved visibility of the relationships between organizational metrics and system components. Embodiments of the present invention fulfill these and other needs.

The approaches described in this section are approaches that could be pursued but not necessarily approaches that have been previously conceived or pursued. Therefore unless otherwise indicated it should not be assumed that any of the approaches described in this section qualify as prior art merely by virtue of their inclusion in this section.

The following description will focus on an exemplary embodiment of the present invention which is implemented in software operating in a network connected environment running under an operating system such as Microsoft Windows NT running on a computer system such as system of . However the present invention is not limited to any particular application or any particular environment. Instead those skilled in the art will find that the system and methods of the present invention may be advantageously embodied on a variety of different platforms including Mac OS Linux Solaris Unix etc. Additionally in the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however to one skilled in the art that the system and methods of the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention. Thus the description of exemplary embodiments that follows should be regarded in an illustrative sense and not a restrictive sense.

In accordance with an embodiment of the present invention operation of an enterprise management system is modified to provide improved metric correlation and analysis. A user of the modified enterprise management system MEM system conceptually views the metric correlation and analysis process as three phases a modeling phase a binding phase and an analysis phase.

During the modeling phase a user familiar with the types of system components deployed in an enterprise network and the metrics available for those types of system components specifies dependencies between metrics in a metric dependency model. The term system component shall be used hereafter to refer generally to any computing device any hardware component any software component or any cluster of devices hardware components or software components deployed in an enterprise network. Non limiting examples of types of hardware system components deployed include workstation server and desktop computer systems and the types of hardware components that comprise those computer systems such as CPU devices memory devices storage devices peripherals and the like. Non limiting examples of types of software components include web server applications database applications order processing applications enterprise resource planning ERP applications financial applications and any other type of software applications that support the operation of the enterprise. Non limiting examples of types of clusters deployed in an enterprise network include web server clusters database clusters software application clusters storage clusters load balancing clusters etc.

During the modeling phase the user specifies in the metric dependency model a source metric and one or more related metrics on which the source metric depends. Typically the source metric will be a high level organizational metric that measures a fundamental organizational process of the enterprise and the one or more related metrics will be relatively lower level metrics that measure the health usage or performance of system components that support the organizational process. Since the metric dependency model allows the user to flexibly model a dependency between any available metric and any other available metric knowledge within an organization about the dependencies between organizational processes and supporting system components that were previously only captured informally or residing only in the minds of organizational personnel can now be captured formally in a form understandable by a computer. In one embodiment the metric dependency model is represented in a form understandable by a computer as an eXtensible Markup Language XML document. As described in greater detail herein the MEM system uses the metric dependency model to provide greater visibility into the relationship correlation between a change in trend or tendency of an organizational metric and the health usage and performance of the system components on which the organizational process measured by the organizational metric depends.

In addition to specifying dependencies between metrics in the metric dependency model the user also specifies types of system components for which the source metrics and the one or more related metrics are available and optionally deployment relationships between instances of the types of system components. Non limiting examples of a deployment relationship include deployed on runs on connects and uses as in for example a financial software application is deployed on a Java 2 Platform Enterprise Edition J2EE container which in turn runs on a host. As described in greater detail herein such information about the types of system components and deployment relationships are used by the MEM system during a binding phase to bind the metric dependency model to a particular enterprise system environment. More specifically the MEM system identifies instances of the types of system components specified in the model that are related to one another as indicated by the deployment relationships. This binding performed by the MEM system allows metric dependencies to be modeled more generically in terms of types of system components and deployment relationships without reference to a particular enterprise environment or particular system component instances. For example if an enterprise has more than one branch office each executing the same organizational process using the same type of database application only one metric dependency model need be defined. A MEM system is capable of using that single model to bind to each instance of the database application deployed at each branch office.

For the metric correlation and analysis phase the MEM system provides a user interface through which a user visually compares metric data collected for the source metric with metric data collected for the one or more related metrics. For example the system can display a graph for the source metric and the one or more related metrics that charts each metric over the same interval of time. In this way if a user notices a change in trend or tendency of the source metric for example by receiving an alert the MEM system allows the user to easily determine which system components the source metric depends on and whether there is a correlation between a change in performance of a related system component and the change in trend or tendency of the source metric that is indicative of a cause of the change.

The improved metric correlation analysis capabilities provided by the MEM system allow front line or high level managers or other non technical personnel in an organization to more easily identify whether degradation in the performance of organizational processes is caused by performance degradation of underlying information technology system components without having to perform a lengthy investigation into the cause of the degradation and without having to involve technical personnel within the organization.

Upon receiving the model MEM system searches system component data stored in management repository to identify system component instances that satisfy the metric dependency model . This process performed by MEM system is generally referred to herein as binding system component instances to the model . Once system component instances are bound to model MEM system is capable of providing to a user of MEM system metric correlation and analysis functionality for the bound system component instances. Such functionality includes presenting to user a user interface that allows the user to visually compare metric data for the source metric obtained from a source system component instance with metric data for the related metric s obtained from related system component instance s . By virtue of the metric dependency model the MEM system facilitates problem correlation by flexibly allowing any available metric to be compared with any other available metric even where such metrics were otherwise previously unrelated. For example a high level metric that measures the performance of an organizational process can be compared to a relatively lower level metric such as utilization of CPUs of the managed devices that support the organizational process. Since knowledge within an organization of dependencies between metrics can be captured in the model the improved metric correlation and analysis techniques describe herein can be used to not only capture such organizational knowledge but also allows users of MEM system to act on such captured knowledge to troubleshoot and diagnose undesirable trends or tendencies in fundamental organizational metrics.

As shown in environment comprises one or more managed hosts . Managed hosts represent servers network devices workstations virtual machines etc. deployed in an enterprise network. Such enterprise network can include many sub networks such one or more Local Area Networks LANs Wide Area Networks WANs Virtual Private Networks VPNs etc. The enterprise network can be distributed geographically across one or more offices one or more data centers etc. In one embodiment managed hosts are connected over the enterprise network to one or more MEM systems . However as will be clear from the description below managed hosts need not be connected via a network to a MEM system in order for MEM system to provide metric correlation and analysis functionality.

Conceptually each managed host which is a system component instance itself comprises a plurality of hardware and software system components. Generally hardware system components of a managed host include CPU devices memory devices storage devices network devices I O devices etc. However in some cases where managed host is a virtual machine hardware system components of a managed host can include virtual CPU devices virtual memory devices virtual storage devices virtual network devices virtual I O devices etc. provided by the virtual machine. Generally software system components of a managed host include any software executing or installed on the managed host .

One or more software applications software system components can execute on host in cooperation with OS to perform various software application tasks. For instance when host is a server computer system software system component includes server applications such as database servers web servers enterprise resource planning applications application servers and the like. When host is a client computer system on the other hand software system component includes client applications such as browser applications word processing applications client e mail software applications and the like.

In one embodiment system component data stored in management repository is based on data provided to MEM system by management agents installed and executing on managed hosts . Whether host is a server computer system or a client computer system deployed in an enterprise one of the software system components installed and executing on host can include a management agent shown in as software system component . Agent is a software service that executes on host performing various management agent tasks. In particular agent primarily performs two tasks that are not exclusive of other tasks agent might perform.

First agent discovers software and hardware system components and that comprise host and the configuration of those components and periodically reports inventory and configuration information to MEM System to be stored as part of system component data in management repository . Any number of a variety of techniques can be used by management agent to determine hardware system components and software system components that comprise a host and embodiments of the invention are not limited to any particular technique. For instance agent can obtain inventory data and configuration data using an interface provided to it by operating system that hosts the management agent . The interface can take the form of an application programming interface API or a command line interface shell or other type of interface provided by operating system . For example the management agent can examine its host s file system for the presence of tell tale files that indicate that a particular software application is installed. Further the techniques employed can vary depending on the type of operating system that hosts the management agent

Second agent collects metric data related to the health usage and performance of hardware and software system components and and periodically provides collected metric data to MEM system to be stored as part of system component data in management repository . As with inventory and configuration information any number of a variety of techniques can be used by management agent to collect metric data for hardware components and software system components that comprise a host and embodiments of the invention are not limited to any particular technique.

In one embodiment Agent communicates with MEM system to report inventory configuration and metric data using the Hyper Text Transfer Protocol HTTP or the Secure Hyper Text Transfer Protocol HTTPS . However communication between agent and MEM system is not limited to HTTP or HTTPS and other suitable protocols can be used such as for example the Simple Network Management Protocol SNMP .

Each instance of system component class stored as system component data represents a system component deployed in an enterprise network such as managed hosts and system components and of managed hosts . As shown in each instance of system component class comprises a type attribute. The type attribute of a system component class instance indicates the type of the represented system component. The value of the type attribute can take many forms including for example string data indicating the type. For instance instance of managed host can be designated as type host . As another example instances of database applications can be designated as type database . As mentioned previously and as discussed in greater detail elsewhere in this document information about the types of deployed system components stored in management repository is used by the MEM system during the binding phase to bind system components deployed in an enterprise network to a metric dependency model .

A system component class instance is associated with zero or more instances of metric data class and each metric data class instance is associated with one instance of a system component class . Each metric data class instance represents metric data collected for a metric that is available for the system component represented by the associated system component class instance. Each metric data class instance has a name attribute that identifies the available metric by the metric s name.

Generally a metric is a unit of measurement used to determine the health usage or performance of a system component. The metrics available for a particular system component can vary depending on the type of the particular system component. For instance the metrics available for a database type of system component can include SQL Response Time ms or Buffer Cache Hit . Metric data for a metric available for a system component can be collected from the system component at regular time intervals. For example every 15 minutes once a day once a week etc. Accordingly metric data of a metric data class instance can comprise one or more data samples representing measurements of a property of the system component over a period of time. Each data sample can measure the property using any suitable unit of measurement. For example each data sample can be expressed as percentage an average a median a scalar value such as time e.g. milliseconds or size e.g. kilobytes etc.

Also as shown in a system component class instance can be related to another system component class instance through an instance of a deployment relationship class . A deployment relationship class instance represents an association between two system components deployed in an enterprise network. The type of the deployment relationship is indicated by an association attribute of the deployment relationship class instance. Examples of types of deployment relationships include deployed on runs on connects and uses as in for example an instance of a financial software application is deployed on an instance of a Java 2 Platform Enterprise Edition J2EE container which in turn runs on a particular host. As mentioned previously and as discussed in greater detail elsewhere in this document information about deployment relationships between deployed system components is used by the MEM system during the binding phase to bind system components to a metric dependency model .

As discussed previously system component data stored in management repository can be based on data received from management agents installed on managed hosts . In addition to or instead of data received from management agents installed on managed hosts system component data can be based on data obtained from other systems such as other monitoring systems or other management systems. Therefore the basis for system component data is not limited to only data provided by management agents installed hosts as discussed above with respect to .

Data model of can be implemented using any suitable data modeling technique such as relational data modeling techniques object oriented data modeling techniques hierarchical data modeling techniques etc. Further strict adherence to data model is not necessary to practice embodiments of the invention and variations to model can be made within the spirit and scope of the invention.

As mentioned above the MEM system references a metric dependency model for determining which metrics and system components are to be analyzed. In one embodiment the model describes administrator defined metric dependencies with each dependency being defined by a source metric and one or more metrics that are deemed by the administrator to be related to the source metric related metrics . In addition the source metric is defined by a type of system component for which the source metric is available source system component type and each of the related metrics are defined by a type of a system for which the related metric is available related system component type . Each instance of the source system component type for which the source metric is available is referred to hereinafter as a source system component instance . Each instance of the related system component type for which the related metric is available is referred to hereinafter as a related system component instance .

In one embodiment metric dependency model is provided to MEM system in eXtensible Markup Language XML format such as for example as an XML document. However in other embodiments model can be provided to MEM system in other formats and model is not limited to being formatted as XML. At a high level when model is formatted as XML a MetricDependency element identifies for each unique source metric related metric pair specified within the metric dependency element one or more sets of system component instances each comprising a source system component instance and a related system component instance that fits the source metric related metric pair. More particularly within each metric dependency element a SourceMetric element is specified. Each metric dependency element has a TargetType attribute that specifies the source system component type. Within each source metric element one or more RelatedMetric elements are used to specify the metrics that the source metric depends on. If a related metric is available from a related system component instance that is different from the source system component instance then a related metric element can be nested within an AssocTarget element. Each associated target element has a TargetType attribute that specifies the related system component type. Associated target elements can be nested within other associated target elements to create a chain of dependency relationships between the source system component instance and a related system component instance. The source metric and related metric elements each include a MetricName attribute specifying the name of the metric and a MetricColumn attribute specifying a unit of measurement for displaying metric data for the metric to a user of MEM system .

Any number of metric dependencies can be defined in model . According to one embodiment to specify a metric dependency model includes one SourceMetric element as a child element of a MetricDependency element and includes one RelatedMetric element as a child element of the SourceMetric element. The TargetType attribute of the metric dependency element is string that is used by MEM system to identify instances of the system component class in system component data by the type attribute of the system component class . The MetricName element attribute is a string that is used by MEM system to identify instances of the metric data class in system component data by the name attribute of the metric data class . In one embodiment the MetricColumn element attribute is a string that specifies a unit or a sub classification for displaying metric data for the associated metric.

According to one embodiment the supported elements their permitted attributes and their permitted child elements are as follows 

The following example metric dependency definitions which can be created by a user in a text editor or through an computer automated process illustrates the specification of metric dependencies 

A simple type of metric dependency is a no nesting metric dependency in which the dependency between the source metric and the related metric s are contained within one system component instance. For example consider the following no nesting metric dependency 

The above metric dependency definition specifies that the ReportsProcessing metric depends on two related metrics available from the same system component in particular the same instance of a fusion app financials type of system component as indicated by the TargetType attribute of the MetricDependency element. In the above example metric dependency the target type fusion app financials refers to financial management software part of a portfolio of software products available from Oracle Corporation of Redwood Shores Calif.

According to one embodiment to bind system components to a no nesting metric dependency definition MEM system searches system component data for all instances of the system component class that have a type attribute value that matches the source system component type specified in the definition. For example upon obtaining a metric dependency model containing the above no nesting metric dependency definition MEM system searches system component data for system component class instances having a type attribute value that matches the value of the TargetType attribute of the MetricDependency element. MEM system binds all matching system component class instances to the model . Once bound MEM system facilitates comparison by a user of the source metric to the related metrics for each of the bound system components. In particular for each bound system component MEM system is capable of presenting a user interface displaying metric data for the source metric and the related metrics that is associated with the bound system component. The associated metric data for the bound system component is obtained by MEM system from the instances of the metric data class that are stored in association with the system component class instance corresponding to the bound system component.

In one embodiment charts displayed by MEM system are updated as metric data for the displayed metrics becomes available in management repository . For example as metric data for a displayed metric becomes available it is charted on the right side of the corresponding chart while old metric data moves off the left side of the chart. In this way the charts on the user interface provided by MEM system allow a user to analyze metric dependencies in real time and not just for historical snapshot windows of time.

The user interface of and in particular the concurrent display of the charts of the source metric and the two related metrics allows a user of MEM system to readily determine that the source metric Reports Processing Time is strongly dependent on the Data Access Time metric and weakly dependent on the Request Processing Time metric. More generally the metric dependency model can be used to model a dependency between any available metric and any other available metric. By virtue of MEM system s capability to chart modeled metric dependencies as shown by example in the MEM system allows a user to readily determine the strength of dependencies between any available metric and any other available metric. This capability greatly aids the user in determining the probable cause of an undesirable trend or tendency in the source metric.

The foregoing example metric dependency definition is an example of a no nesting metric dependency definition in which the dependency between the source metric and related metrics is contained within a single system component instance. However in some circumstances it is desirable to establish a metric dependency between metrics that span more than one system component instance. For example consider the following example of a one level nesting metric dependency definition 

By use of the associated target element as a child element of the source metric element a user can indicate to MEM system that the dependency between the source metric and related metrics spans more than one system component. For example the above example metric dependency definition specifies that the ReportsProcessing source metric available for the fusion app financials type of system component depends on the RequestThroughput and the BeanAccessTime related metrics available from a different system component in particular the weblogic j2eeserver type of system component as indicated by the TargetType attribute of the AssocTarget element. In the above example metric dependency the target type weblogic j2eeserver refers to Java 2 Enterprise Edition J2EE Enterprise Java Bean EJB container software part of the WebLogic Software Suite available from Oracle Corporation of Redwood Shores Calif.

According to one embodiment to bind system component instances to a one level nesting metric dependency definition MEM system searches system component data for source system component instances that have a deployment relationship with the related system component instance. This search produces one or more sets of system component instances comprising a source system component instance and a related system component instance. MEM system binds each set to the one level nesting metric dependency definition such that metric correlation and analysis capabilities are provided by MEM system for each bound set. For example upon obtaining a metric dependency model containing the above example one level nesting metric dependency definition MEM system searches system component data for system component instances of type fusion app financials that have a deployment relationship with a system component instance of type weblogic j2eeserver . MEM system binds all such pairs of system component instances to model and provides the ability to compare source metrics and related metrics for each pair.

In addition to establishing a metric dependency between metrics that span more than one system component in some circumstances it is desirable to specify a particular deployment relationship between the source system component instance and the related system component instance. For example consider the following example of a one level nesting metric dependency definition that specifies a Deployed On deployment relationship 

By specification of a deployment relationship in a one level nesting metric dependency definition a user can indicate to MEM system that the specified source metric available for a source system component instance depends on one or more related metrics available for a related system component instance only if the source system component instance has the specified deployment relationship with the related system component instance. For example the above metric dependency definition specifies to MEM system that the source metric ReportsProcessing available for a system component instance of type fusion app financials depends on related metrics RequestThroughput and BeanAccessTime available for a system component instance of type weblogic j2eeserver only if the instance of the fusion app financials is Deployed On on the instance of the weblogic j2eeserver . In one embodiment MEM system determines whether the source system component instance has the specified deployment relationship with the related system component instance by checking management repository for the existence of a matching deployment relationship class instance between the corresponding system component class instances.

A deployment relationship refers broadly to any detectable relationship between two system components deployed in an enterprise network. The Deployed On deployment relationship is but one example of a deployment relationship and other deployment relationships may be specified in a metric dependency model such as for example Uses Runs On JDBC Connects Redirects etc. In one embodiment information about deployment relationships in an enterprise network is stored as instances of the deployment relationship class in management repository . Information about deployment relationships in an enterprise network between system components can be obtained by any number of a variety of means including but not limited to from management agents installed on managed hosts as discussed above with respect to .

The one level nesting metric dependency definition can be generalized as a multi level nesting metric dependency definition for cases where the metric dependency spans more than one system component. For example consider the following example of a multi level nesting metric dependency definition that includes various deployment associations 

In a multi level metric dependency a source metric can depend on multiple related metrics where each metric dependency traverses a different chain of deployment relationships between system components. For example in the above multi level metric dependency definition the source metric HTTP Authentication available for the http server type of system component depends on two related metrics through two different chains of deployment relationships. In one chain the definition specifies that the HTTP Authentication metric available for a source system component instance of type http server depends on the AuthenticationTime metric available for a related system component instance of type fusion app financials only if the source system component instance has a Redirects deployment relationship with the related system component instance. In the other chain the definition specifies that the HTTP Authentication metric available for a source system component instance of type http server depends on the SQLResponse metric available for a related system component instance of type database only if the source system component instance has a Redirects deployment relationship with a system component instance of type fusion app financials which in turn has a Uses deployment relationship with a system component instance of type OID which in turn has a JDBC deployment relationship with a system component instance of type listener which in turn has a Connects deployment relationship with the related system component instance.

According to one embodiment MEM system binds a set of system component instances comprising a source system component instance and a related system component instance if the set of system component instances satisfies any of the dependency chains specified in multi level metric dependency definition. For example given the above example multi level metric dependency definition a set of system component instances comprising a source system component instance of type http server that has a Redirects deployment relationship with a related system component instance of type fusion app financials will be bound by MEM system to the dependency chain for the AuthenticationTime related metric. A set of system component instances comprising a source system component instance of type http server and a related system component instance of type database will be bound by MEM system to the above example metric dependency definition if the dependency chain for the SQLResponse related metric is satisfied. Where one satisfied dependency chain is contain completely within another satisfied dependency chain the separate sets of system component instances that satisfy the separate chains may be combined by MEM system into a single set of system component instances. For example as shown in the HTTP server instance for which the HTTP Authentication Time metric is available the Fusion Financials App instance for the Authentication Time metric is available and the SQL Response Time metric is available satisfy both dependency chains specified in the above example multi level metric dependency definition in which the chain for the Authentication Time metric is contained entirely within the SQL Response Time metric. Accordingly in this case MEM system presents a single user interface for all three metrics as shown in as opposed to a separate user interfaces for the Authentication Time metric and the SQL Response Time metric respectively.

In one embodiment the TargetType attribute of the Metric Dependency element or the AssocTarget element refers to a cluster of system components. For example the environment of shows a cluster of HTTP servers a cluster of database servers labeled RAC Database and a cluster Fusion Financials Applications. MEM system treats system component clusters like other system components. Therefore MEM system is capable of binding system component clusters to a model and capable of providing analysis of metrics available for a cluster of system components.

In one embodiment a related metric specified in a metric dependency model refers to a configuration metric. A configuration metric measures the setting of a particular configuration parameter of a system component. In one embodiment a configuration metric comprises one or more data samples representing the state of the particular configuration parameter at various points of time. An administrator can create a metric dependency model to track a dependency between a source metric and a related configuration metric. When such a model is provided to MEM system MEM system provides to the administrator the ability to analyze the strength of the dependency between the source metric and the related configuration metric. For example MEM system can present a user interface charting the source metric against the related configuration metric for historical snapshot period of time or alternatively for an ongoing period of time. Such charting can aid the administrator in determining whether a change in the performance of the source metric is related to a change to the configuration parameter represented by the related configuration metric.

In one embodiment MEM system provides a user interface allowing a user to search for configuration changes made to system components of managed hosts . For example is a screen shot of an example user interface for searching for configuration changes. In area one or more configuration change records are displayed as results of a search for configuration changes. Search results are displayed in a tabular format. Each row in the results table corresponds to a configuration change made to a particular system component instance. In one column of the table a user can access detailed information about a corresponding configuration change. Area allows a user to select the search criteria for searching for configuration changes. When providing search results in response to a configuration changes search request MEM system searches system component data for configuration change records that satisfy criteria specified in the search request. As mentioned previously system component data may be populated with information about configuration changes made to system components of managed hosts based on configuration data reported to MEM system by management agents installed managed hosts or based on data provided by other management systems.

According to one embodiment the techniques described herein are implemented by one or more special purpose computing devices. The special purpose computing devices may be hard wired to perform the techniques or may include digital electronic devices such as one or more application specific integrated circuits ASICs or field programmable gate arrays FPGAs that are persistently programmed to perform the techniques or may include one or more general purpose hardware processors programmed to perform the techniques pursuant to program instructions in firmware memory other storage or a combination. Such special purpose computing devices may also combine custom hard wired logic ASICs or FPGAs with custom programming to accomplish the techniques. The special purpose computing devices may be desktop computer systems portable computer systems handheld devices networking devices or any other device that incorporates hard wired and or program logic to implement the techniques.

For example is a block diagram that illustrates a computer system upon which an embodiment of the invention may be implemented. Computer system includes a bus or other communication mechanism for communicating information and a hardware processor coupled with bus for processing information. Hardware processor may be for example a general purpose microprocessor.

Computer system also includes a main memory such as a random access memory RAM or other dynamic storage device coupled to bus for storing information and instructions to be executed by processor . Main memory also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor . Such instructions when stored in storage media accessible to processor render computer system into a special purpose machine that is customized to perform the operations specified in the instructions.

Computer system further includes a read only memory ROM or other static storage device coupled to bus for storing static information and instructions for processor . A storage device such as a magnetic disk or optical disk is provided and coupled to bus for storing information and instructions.

Computer system may be coupled via bus to a display such as a cathode ray tube CRT for displaying information to a computer user. An input device including alphanumeric and other keys is coupled to bus for communicating information and command selections to processor . Another type of user input device is cursor control such as a mouse a trackball or cursor direction keys for communicating direction information and command selections to processor and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes a first axis e.g. x and a second axis e.g. y that allows the device to specify positions in a plane.

Computer system may implement the techniques described herein using customized hard wired logic one or more ASICs or FPGAs firmware and or program logic which in combination with the computer system causes or programs computer system to be a special purpose machine. According to one embodiment the techniques herein are performed by computer system in response to processor executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory from another storage medium such as storage device . Execution of the sequences of instructions contained in main memory causes processor to perform the process steps described herein. In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions.

The term storage media as used herein refers to any media that store data and or instructions that cause a machine to operation in a specific fashion. Such storage media may comprise non volatile media and or volatile media. Non volatile media includes for example optical or magnetic disks such as storage device . Volatile media includes dynamic memory such as main memory . Common forms of storage media include for example a floppy disk a flexible disk hard disk solid state drive magnetic tape or any other magnetic data storage medium a CD ROM any other optical data storage medium any physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM NVRAM any other memory chip or cartridge.

Storage media is distinct from but may be used in conjunction with transmission media. Transmission media participates in transferring information between storage media. For example transmission media includes coaxial cables copper wire and fiber optics including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio wave and infra red data communications.

Various forms of media may be involved in carrying one or more sequences of one or more instructions to processor for execution. For example the instructions may initially be carried on a magnetic disk or solid state drive of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system can receive the data on the telephone line and use an infra red transmitter to convert the data to an infra red signal. An infra red detector can receive the data carried in the infra red signal and appropriate circuitry can place the data on bus . Bus carries the data to main memory from which processor retrieves and executes the instructions. The instructions received by main memory may optionally be stored on storage device either before or after execution by processor .

Computer system also includes a communication interface coupled to bus . Communication interface provides a two way data communication coupling to a network link that is connected to a local network . For example communication interface may be an integrated services digital network ISDN card cable modem satellite modem or a modem to provide a data communication connection to a corresponding type of telephone line. As another example communication interface may be a local area network LAN card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information.

Network link typically provides data communication through one or more networks to other data devices. For example network link may provide a connection through local network to a host computer or to data equipment operated by an Internet Service Provider ISP . ISP in turn provides data communication services through the world wide packet data communication network now commonly referred to as the Internet . Local network and Internet both use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link and through communication interface which carry the digital data to and from computer system are example forms of transmission media.

Computer system can send messages and receive data including program code through the network s network link and communication interface . In the Internet example a server might transmit a requested code for an application program through Internet ISP local network and communication interface .

The received code may be executed by processor as it is received and or stored in storage device or other non volatile storage for later execution.

In the foregoing specification embodiments of the invention have been described with reference to numerous specific details that may vary from implementation to implementation. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense.

