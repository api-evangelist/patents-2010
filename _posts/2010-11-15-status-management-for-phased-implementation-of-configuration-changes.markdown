---

title: Status management for phased implementation of configuration changes
abstract: The present disclosure involves systems, software, and computer implemented methods for providing status management for phased implementation of configuration changes. One process includes operations for receiving a selection for a modular software solution and identifying a partial implementation of the modular software solution comprising a subset of the plurality of model entities included in the modular software solution. After the model entities in the subset are activated, a particular model entity is identified to add to the partial implementation. A temporary phase-in state is assigned to the particular model entity, the temporary phase-in state providing an indication to at least one configuration service to perform at least one pre-activation task for the particular model entity. The particular model entity is activated after the pre-activation task is completed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08850390&OS=08850390&RS=08850390
owner: SAP AG
number: 08850390
owner_city: Walldorf
owner_country: DE
publication_date: 20101115
---
The present disclosure relates to software computer systems and computer implemented methods for providing status management for phased implementation of configuration changes.

Business applications such as Enterprise Resource Planning software can consist of modular application components that are combinable to meet the needs of a specific business scenario. The application components and the process interactions between the application components can be modeled with the information required for implementation of the model. In some instances certain application components may initially be combined in a particular configuration but the configuration may need to be modified later by for example adding additional application components or replacing current application components. For example a business scenario may require only a partial configuration with only a portion of all available application components but may later require a transition into a full configuration with additional application components.

In order to extend the functionality of a software system with application components however several tasks must be completed before introducing new application components or replacing application components. For example configuration settings of the new application components and the master data required within the new application component must be maintained and associated software processes must be reconfigured to include the new application component. Further in order to maintain master data the configuration settings and user interface of the new application component must already be available. Business documents are generally not sent to the new component for processing however because the component will not be fully functional unless the preparation steps have been completed. Thus the addition of application components or the switch to a new process integration is delayed. In some instances a business downtime may be applied to prepare new application components and to activate new process integrations. During the business downtime however the software system may be available for preparation tasks but locked for other business related activities. Accordingly many tasks must be delayed to implement a configuration change.

In order to decrease business downtimes some implementations may move certain preparation tasks to a clone copy of the productive system. The productive system may then continue with normal business activity while the clone system prepares activation of application components and process integration. At the end of the preparation a downtime is incurred to merge the new data and configuration back to the productive system and to switch to the new process integration. Migrating preparation tasks to a clone system however increases the costs of operation and requires extensive additional resources such as master data replication mechanisms and additional maintenance of master data.

Still further predefined change scenarios may be created and relevant process integration models are explicitly defined for each of the predefined change scenarios. At configuration time process integration models belonging to a change scenario are only activated after the preparation phase of the change project is finished. In these implementations however business changes to a particular configuration of application components are required to follow the predefined change scenarios.

The present disclosure describes techniques for providing status management for phased implementation of configuration changes. A computer program product is encoded on a tangible storage medium where the product comprises computer readable instructions for causing one or more processors to perform operations. These operations can include receiving a selection for a modular software solution and identifying a partial implementation of the modular software solution comprising a subset of the plurality of model entities included in the modular software solution. After the model entities in the subset are activated a particular model entity is identified to add to the partial implementation. A temporary phase in state is assigned to the particular model entity the temporary phase in state providing an indication to at least one configuration service to perform at least one pre activation task for the particular model entity. The particular model entity is activated after the pre activation task is completed.

While generally described as computer implemented software embodied on tangible media that processes and transforms the respective data some or all of the aspects may be computer implemented methods or further included in respective systems or other devices for performing this described functionality. The details of these and other aspects and embodiments of the present disclosure are set forth in the accompanying drawings and the description below. Other features objects and advantages of the disclosure will be apparent from the description and drawings and from the claims.

This disclosure generally describes computer systems software and computer implemented methods for providing status management for phased implementation of configuration changes. Modular application components and the process interactions between application components can be configured using model based configurations for particular business scenarios. Some business scenarios may be associated with a modeled solution requiring a certain combination of application components in a full scope solution. A user may implement only some of the application components in the configuration however in a partial scope solution and may optionally include the remaining application components at a later time. For example the user may begin with a partial scope solution with only a portion of the available application components before transitioning into a full scope solution with the entire combination of application components. While the partial scope solution is implemented the user may in some instances implement the remaining application components using legacy components or generic components external to the present system. The user may then choose to add additional components to the partial scope solution which may require transitioning the additional components and current components to accommodate the new additions to the partial scope solution. In some instances all remaining application components from the full scope solution can be added to the partial scope solution while in other instances the partial scope solution is expanded with some but not all of the remaining application components from the full scope solution.

A runtime lifecycle state can be offered for certain business content such as the process components and process interactions between process components to support and facilitate the transition from one configuration of application components to a different configuration. The runtime lifecycle state can include multiple intermediate states or sub states that are assigned to certain components instead of merely a binary assignment of states active or inactive states . The use of intermediate states as opposed to a typical binary state scheme allows the tasks associated with activation or deactivation of the components to be performed with a minimal effect on other components in the system.

One potential benefit of the runtime lifecycle state is that changes can be efficiently applied to business applications while reducing business downtimes. Business applications may include application components modeled in software and certain application components may be configured for a particular business scenario. The configuration of application components may be changed to include additional application components or current application components may be replaced with other components. The new application components and interfaces can require substantial preparation times before they are fully activated and integrated into an existing configuration of application components. In certain instances lengthy business downtimes can be significantly reduced by implementing a runtime lifecycle state for certain application components. The runtime lifecycle state can allow new application components to be prepared and activated for smooth integration into a business solution.

Further although the preparation of application components may be migrated to duplicate systems before integration into a business solution to reduce downtimes providing for the duplicate system increases the costs of operation. The runtime lifecycle state may allow efficient integration of application components with minimal impact on the current productive system and without requiring extra resources such as additional processing for duplicate systems. Still further changes can be made to a business solution in a generic manner without following a predefined change scenario.

The runtime lifecycle state provides flexibility to users of a modular business solution. For example although a full business solution may involve a standard configuration of application components the user may wish to employ a phased approach to implementation of the business solution in which the application components are incrementally activated. A phased implementation mitigates the risks associated with a full scale business solution implementation limits initial investment of resources and utilizes legacy systems that may fulfill current requirements. In some instances the phased implementation is a first step in moving toward a full scope solution. Accordingly the runtime lifecycle state allows users to begin with a partial scope implementation and efficiently transition to a full scope solution or a more complete partial scope implementation than previously existed .

Turning to the illustrated example illustrates an example environment for providing a runtime lifecycle state for activation and phased implementation of application components. The illustrated environment includes or is communicably coupled with server and one or more clients at least some of which communicate across network . In general environment depicts an example configuration of a system capable of providing a runtime lifecycle state for activation of application components. The environment supports one or more clients operable to access the server or other servers for hosted or on demand services through a network. The on demand services can be based on a hosted configuration in which the one or more servers and server can be logically grouped and accessible within a cloud computing network. Accordingly the context service for providing status management for phased implementation of configuration changes may be provided to a client as an on demand solution through the cloud computing network or as a traditional server client system.

In general server is any server that stores one or more hosted applications where at least a portion of the hosted applications are executed via requests and responses sent to users or clients within and communicably coupled to the illustrated environment of . For example server may be a Java 2 Platform Enterprise Edition J2EE compliant application server that includes Java technologies such as Enterprise JavaBeans EJB J2EE Connector Architecture JCA Java Messaging Service JMS Java Naming and Directory Interface JNDI and Java Database Connectivity JDBC . In some instances the server may store a plurality of various hosted applications while in other instances the server may be a dedicated server meant to store and execute only a single hosted application . In some instances the server may comprise a web server or be communicably coupled with a web server where the hosted applications represent one or more web based applications accessed and executed via network by the clients of the system to perform the programmed tasks or operations of the hosted application .

At a high level the server comprises an electronic computing device operable to receive transmit process store or manage data and information associated with the environment . The server illustrated in can be responsible for receiving application requests from one or more client applications or business applications associated with the clients of environment and responding to the received requests by processing said requests in the associated hosted application and sending the appropriate response from the hosted application back to the requesting client application . The server may also receive requests and respond to requests from other components on network such as other clients in a cloud network implementation. Alternatively the hosted application at server can be capable of processing and responding to local requests from a user accessing server locally. Accordingly in addition to requests from the external clients illustrated in requests associated with the hosted applications may also be sent from internal users external or third party customers other automated applications as well as any other appropriate entities individuals systems or computers. Further the terms client application and business application may be used interchangeably as appropriate without departing from the scope of this disclosure.

As used in the present disclosure the term computer is intended to encompass any suitable processing device. For example although illustrates a single server environment can be implemented using one or more servers as well as computers other than servers including a server pool. Indeed server may be any computer or processing device such as for example a blade server general purpose personal computer PC Macintosh workstation UNIX based workstation or any other suitable device. In other words the present disclosure contemplates computers other than general purpose computers as well as computers without conventional operating systems. Further illustrated server may be adapted to execute any operating system including Linux UNIX Windows Mac OS or any other suitable operating system. According to one embodiment server may also include or be communicably coupled with a mail server.

In the present implementation and as shown in the server includes a processor an interface a memory one or more hosted applications and a runtime lifecycle module . The interface is used by the server for communicating with other systems in a client server or other distributed environment including within environment connected to the network e.g. client as well as other systems communicably coupled to the network . Generally the interface comprises logic encoded in software and or hardware in a suitable combination and operable to communicate with the network . More specifically the interface may comprise software supporting one or more communication protocols associated with communications such that the network or interface s hardware is operable to communicate physical signals within and outside of the illustrated environment .

The server may also include a user interface such as a graphical user interface GUI . The GUI comprises a graphical user interface operable to for example allow the user of the server to interface with at least a portion of the platform for any suitable purpose such as creating preparing requesting or analyzing data as well as viewing and accessing source documents associated with business transactions. Generally the GUI provides the particular user with an efficient and user friendly presentation of business data provided by or communicated within the system. The GUI may comprise a plurality of customizable frames or views having interactive fields pull down lists and buttons operated by the user. For example GUI may provide interactive elements that allow a user to select from a list of suggested entries for input into a data field displayed in GUI . More generally GUI may also provide general interactive elements that allow a user to access and utilize various services and functions of application . The GUI is often configurable supports a combination of tables and graphs bar line pie status dials etc. and is able to build real time portals where tabs are delineated by key characteristics e.g. site or micro site . Therefore the GUI contemplates any suitable graphical user interface such as a combination of a generic web browser intelligent engine and command line interface CLI that processes information in the platform and efficiently presents the results to the user visually.

Generally example server may be communicably coupled with a network that facilitates wireless or wireline communications between the components of the environment i.e. between the servers and client as well as with any other local or remote computer such as additional clients servers or other devices communicably coupled to network but not illustrated in . In the illustrated environment the network is depicted as a single network in but may be a continuous or discontinuous network without departing from the scope of this disclosure so long as at least a portion of the network may facilitate communications between senders and recipients. The network may be all or a portion of an enterprise or secured network while in another instance at least a portion of the network may represent a connection to the Internet. In some instances a portion of the network may be a virtual private network VPN such as for example the connection between the client and the server . Further all or a portion of the network can comprise either a wireline or wireless link. Example wireless links may include 802.11a b g n 802.20 WiMax and or any other appropriate wireless link. In other words the network encompasses any internal or external network networks sub network or combination thereof operable to facilitate communications between various computing components inside and outside the illustrated environment . The network may communicate for example Internet Protocol IP packets Frame Relay frames Asynchronous Transfer Mode ATM cells voice video data and other suitable information between network addresses. The network may also include one or more local area networks LANs radio access networks RANs metropolitan area networks MANs wide area networks WANs all or a portion of the Internet and or any other communication system or systems at one or more locations.

Clients may have access to resources such as servers and server within network . In certain implementations the servers within the network including server in some instances may comprise a cloud computing platform for providing cloud based services. The terms cloud cloud computing and cloud based may be used interchangeably as appropriate without departing from the scope of this disclosure. Cloud based services can be hosted services that are provided by servers and delivered across a network to a client platform to enhance supplement or replace applications executed locally on a client computer. Clients can use cloud based services to quickly receive software upgrades applications and other resources that would otherwise require a lengthy period of time before the resources can be delivered to the client . Servers within the network may also utilize the on demand functionality of cloud based services such as sharing data in a context provided at a server such as server . Additionally other devices such as mobile device may also have access to cloud based services such as on demand services provided by servers accessible through network .

As described in the present disclosure on demand services can include multiple types of services such as products actionable analytics enterprise portals managed web content composite applications or capabilities for creating integrating and presenting business applications. For example a cloud based implementation can allow clients to transparently upgrade from an older user interface platform to newer releases of the platform without loss of functionality. In certain implementations an Enterprise Resource Planning ERP system or solution can provide an on demand software solution for management of resources of an organization including facilitating the flow of information between business functions associated with the organization. The ERP service can be hosted across servers or modular hardware units or reside on a centralized server and provided to clients in a client server implementation. Architectural elements of the ERP service can include process components . Process components are reusable software packages independent of a specific application. The process components realize business processes and expose the functionality of business processes as services. Each process component contains one or more semantically related business objects which typically have interfaces for exchanging messages with other business objects or process components . Further each process component generally is associated with one or more operations which are separately callable functions described by a set of data types used as input output and fault parameters serving as a signature.

Other architectural elements of the ERP system include the deployment unit. A deployment unit includes one or more process components that are deployed together on a single computer system platform. Conversely separate deployment units can be deployed on separate physical computing systems. For this reason a deployment unit boundary defines the limits of an application defined transaction i.e. a set of actions that have properties of atomicity consistency isolation and durability. To make use of database manager facilities the architecture requires that all operations of such a transaction be performed on one physical database as a consequence the processes of such a transaction must be performed by the process components of one instance of one deployment unit.

The process components of one deployment unit interact with those of another deployment unit using messages passed through one or more data communication networks or other suitable communication channels. Thus a deployment unit deployed on a platform belonging to one business can interact with a deployment unit software entity deployed on a separate platform belonging to a different and unrelated business allowing for business to business communication. More than one instance of a given deployment unit can execute at the same time on the same computing system or on separate physical computing systems. This arrangement allows the functionality offered by a deployment unit to be scaled to meet demand by creating as many instances as needed.

Since interaction between deployment units is through service operations a deployment unit can be replaced by other another deployment unit as long as the new deployment unit supports the operations depended upon by other deployment units. Thus while deployment units can depend on the external interfaces of process components in other deployment units deployment units are not dependent on process component interaction within other deployment units. Similarly process components that interact with other process components or external systems only through messages for example as sent and received by operations can also be replaced as long as the replacement supports the operations of the original.

In some instances the ERP service can be implemented using a model driven approach and accordingly business content process components business objects and other elements can be modeled as individual entities in the ERP service. The individuals entities may be referred to as model entities. The process components can embody one or more business objects and declare on a model base the process variants that can be arranged with other process components. The process components are the main units of the engineering model in the ERP system and are of different types including application third party or external process components. In particular application process components specify Business Process Variant Types BPVT representing types of process flows through the process component. Each BPVT entity can specify a set of interaction roles that the BPVT entity should use when executed. The process components offer service interfaces which in turn support interaction roles i.e. logical services . Typically there is one interaction role per service interface. Process component interactions define interactions between a pair of specific process components by specifying the exact service interfaces operations connections and message choreography that are used in the interaction. The process component interactions also refer to a consumed interaction role which typically identifies the party triggering the interaction and a provided interaction role which typically identifies the party reacting to the request.

A user may select certain process components and business objects for a particular business solution. The available process components may be contained in a business adaptation catalog that exposes the capabilities of the ERP system in business language. The business adaptation catalog can be designed to reflect the structure and dependencies in the underlying platform for the model entities. For example the catalog may in some instances incorporate constraints and pre delivered configuration settings to guide a user in the selection and activation of process components and business objects. Some example constraints applied by the business adaptation catalog can include mandatory activation of certain process components for a particular business scenario certain process components that cannot be included in a business scope or other parameters dictating when a process component is included or excluded from a particular business solution. The business adaptation catalog may identify certain configurations of process components for a particular business scenario using any appropriate means. In some implementations available configurations can be presented to a user through general questions that help identify relevant business topics. The business topics represent business scenarios which are used as conditions in business scope constraints applied throughout the business activation catalog. In other words the ERP service can include services for performing the tasks required to identify deploy and activate process components and business objects for a particular business solution.

As illustrated in server includes a processor . Although illustrated as a single processor in two or more processors may be used according to particular needs desires or particular embodiments of environment . Each processor may be a central processing unit CPU a blade an application specific integrated circuit ASIC a field programmable gate array FPGA or another suitable component. Generally the processor executes instructions and manipulates data to perform the operations of server and specifically the one or more plurality of hosted applications . Specifically the server s processor executes the functionality required to receive and respond to requests from the clients and their respective client applications as well as the functionality required to perform the other operations of the hosted application .

Regardless of the particular implementation software may include computer readable instructions firmware wired or programmed hardware or any combination thereof on a tangible medium operable when executed to perform at least the processes and operations described herein. Indeed each software component may be fully or partially written or described in any appropriate computer language including C C Java Visual Basic assembler Perl any suitable version of 4GL as well as others. It will be understood that while portions of the software illustrated in are shown as individual modules that implement the various features and functionality through various objects methods or other processes the software may instead include a number of sub modules third party services components libraries and such as appropriate. Conversely the features and functionality of various components can be combined into single components as appropriate. In the illustrated environment processor executes one or more hosted applications on the server .

At a high level each of the one or more hosted applications is any application program module process or other software that may execute change delete generate or otherwise manage information according to the present disclosure particularly in response to and in connection with one or more requests received from the illustrated clients and their associated client applications or from other servers or components through a network . In certain cases only one hosted application may be located at a particular server . In others a plurality of related and or unrelated hosted applications may be stored at a single server or located across a plurality of other servers as well. In certain cases environment may implement a composite hosted application . For example portions of the composite application may be implemented as Enterprise Java Beans EJBs or design time components may have the ability to generate run time implementations into different platforms such as J2EE Java 2 Platform Enterprise Edition ABAP Advanced Business Application Programming objects or Microsoft s .NET among others. Additionally the hosted applications may represent web based applications accessed and executed by remote clients or client applications via the network e.g. through the Internet . Further while illustrated as internal to server one or more processes associated with a particular hosted application may be stored referenced or executed remotely. For example a portion of a particular hosted application may be a web service associated with the application that is remotely called while another portion of the hosted application may be an interface object or agent bundled for processing at a remote client . Moreover any or all of the hosted applications may be a child or sub module of another software module or enterprise application not illustrated without departing from the scope of this disclosure. Still further portions of the hosted application may be executed by a user working directly at server as well as remotely at client .

As illustrated processor can also execute a runtime lifecycle module that provides services for applications such as hosted application client application or servers within network . In some implementations the runtime lifecycle module can be executed by a different processor or server external to server such as by a server communicably coupled to server through network . For example the runtime lifecycle module may be provided as an on demand service through a cloud computing network as a web service accessible via network or as a service provided on a dedicated server. The runtime lifecycle module can provide interfaces modules services or metadata definitions that enable hosted application to identify and assign temporary states to model entities in order to effectively activate or deactivate the model entities with minimal business downtime. A new application component may need to be added to a current configuration of application components during for example a transition from a partial scope implementation to a full scope implementation. The current application components may be modeled using model entities with the modeled relations between application elements providing the required information for system configuration. A runtime lifecycle state may be used for the model entities to support the inclusion of additional application components. The modeled relations within the application engineering model with the runtime lifecycle state information may be used by application services to configure the runtime portion of the application components. In some implementations the runtime lifecycle state consists of four state variables off phase in productive and phase out. The runtime lifecycle state variables support the activation of business content for scenario changes such as transitioning from partial scope solutions to full scope solutions. The business content used in connection with the runtime lifecycle state can include process components business process variant types business objections business features country context or other content types.

The runtime lifecycle module may be separate from hosted application while in other instances the context module may be embedded within or part of a particular one or more hosted applications. In some instances hosted application may be communicably coupled to the runtime lifecycle module allowing hosted application to access and take advantage of the functionality provided by the runtime lifecycle module . Further runtime lifecycle module may be implemented in connection with a servlet and a servlet container in server or a different server communicably coupled with server . The servlet may be used to provide dynamic content to server for receiving requests for model entities such as process components and generating appropriate responses to the requests.

In general the server also includes memory for storing data and program instructions. Memory may include any memory or database module and may take the form of volatile or non volatile memory including without limitation magnetic media optical media random access memory RAM read only memory ROM removable media or any other suitable local or remote memory component. Memory may store various objects or data including classes frameworks applications backup data business objects jobs web pages web page templates database tables repositories storing business and or dynamic information and any other appropriate information including any parameters variables algorithms instructions rules constraints or references thereto associated with the purposes of the server and its one or more hosted applications .

Memory may also store data objects such as data objects associated with elements of an ERP system or information related to different states assigned to entities being activated or deactivated in a particular ERP solution. For example the architectural elements of an ERP system may include process components business objects deployment units and other modeled entities. The content used to generate user interfaces for these model entities is stored in memory so that the runtime lifecycle module can access the content to present the model entities to a user. Further state information such as information concerning relationships between model entities required configuration tasks for each model entity historical data for the model entities including previous state information or master data associated with the model entities may also be stored in memory . In other words any data used by runtime lifecycle module to determine an appropriate state to assign to each model entity to facilitate activation or deactivation of the model entities may be stored in memory . Still further memory may include any other appropriate data such as VPN applications firmware logs and policies HTML files data classes or object interfaces additional software applications or sub systems not illustrated in firewall policies a security or access log print or other reporting files as well as others.

The illustrated environment of also includes one or more clients . Each client may be any computing device operable to connect to or communicate with at least the server and or via the network using a wireline or wireless connection. Further as illustrated in client includes a processor an interface a graphical user interface GUI a client application and a memory . In general client comprises an electronic computer device operable to receive transmit process and store any appropriate data associated with the environment of . It will be understood that there may be any number of clients associated with or external to environment . For example while illustrated environment includes client alternative implementations of environment may include multiple clients communicably coupled to the server or any other number of clients suitable to the purposes of the environment . Additionally there may also be one or more additional clients external to the illustrated portion of environment that are capable of interacting with the environment via the network . Further the term client and user may be used interchangeably as appropriate without departing from the scope of this disclosure. The term client may also refer to any computer application or device that is communicably coupled to one or more servers through a network . Moreover while each client is described in terms of being used by a single user this disclosure contemplates that many users may use one computer or that one user may use multiple computers.

The GUI associated with client comprises a graphical user interface operable to for example allow the user of client to interface with at least a portion of the platform for any suitable purpose such as creating preparing requesting or analyzing data as well as viewing and accessing source documents associated with business transactions. Generally the GUI provides the particular user with an efficient and user friendly presentation of business data provided by or communicated within the system. The GUI may comprise a plurality of customizable frames or views having interactive fields pull down lists and buttons operated by the user. More generally GUI may also provide general interactive elements that allow a user to access and utilize various services and functions of application . The GUI is often configurable supports a combination of tables and graphs bar line pie status dials etc. and is able to build real time portals where tabs are delineated by key characteristics e.g. site or micro site . Therefore the GUI contemplates any suitable graphical user interface such as a combination of a generic web browser intelligent engine and command line interface CLI that processes information in the platform and efficiently presents the results to the user visually.

As used in this disclosure client is intended to encompass a personal computer touch screen terminal workstation network computer kiosk wireless data port smart phone personal data assistant PDA one or more processors within these or other devices or any other suitable processing device. For example each client may comprise a computer that includes an input device such as a keypad touch screen mouse or other device that can accept user information and an output device that conveys information associated with the operation of the server and hosted application or the client itself including digital data visual information the client application or the GUI . Both the input and output device may include fixed or removable storage media such as a magnetic storage media CD ROM or other suitable media to both receive input from and provide output to users of client through the display namely the GUI

While is described as containing or being associated with a plurality of elements not all elements illustrated within environment of may be utilized in each alternative implementation of the present disclosure. For example although depicts a server client environment implementing a hosted application at server that can be accessed by client computer in some implementations server executes a local application that features an application UI accessible to a user directly utilizing GUI . Further although depicts a server external to network while other servers are within the network server may be included within the network as part of an on demand context solution for example. Additionally one or more of the elements described herein may be located external to environment while in other instances certain elements may be included within or as a portion of one or more of the other described elements as well as other elements not described in the illustrated implementation. Further certain elements illustrated in may be combined with other components as well as used for alternative or additional purposes in addition to those purposes described herein.

Generally as depicted in the model entities can be associated in the software model and represented with user interface components . The user interface components presented to a user depend on the model entities deployed in accordance with relevant scoping rules. For example user interface components corresponding to each of a BPVT process component business object feature or context are in some implementations visible when their respective model entities are deployed. Conversely in some instances when one of the BPVT process component business object feature or context are unavailable the corresponding user interface component s may not be visible. Accordingly users can manage the flow of information between model entities through an appropriate user interface. Additional entities or business options may be available in the business adaptation catalog. In some instances the business options include additional components associated with each of the model entities available for selection by a user for inclusion in and further modification of the software model.

In certain implementations a runtime lifecycle state can be assigned to the model entities depicted in such as to the context features business objects process components or BPVT entity . Users employing a business solution can change extend or add to the model entities used in a business solution which may require lengthy preparation times before full activation of certain components. As additional components are included in a business solution the additional components typically transition directly from an off state to an on state during activation after the preparation tasks are completed. The runtime lifecycle state can introduce one or more states to a typical implementation that previously only included on off states to facilitate the required preparation tasks without extensive business downtime.

For example a user of an ERP system may use a package of model entities provided by the ERP system for a particular business scenario. The user may choose however not to use certain model entities. As an example the user may select a set of model entities for implementation while excluding a financial services model entity. In some instances the user may choose to perform the financial services using other methods such as applications external to the ERP system or using a legacy system. In other words the user may not use all the software model entities provided by an ERP system for various reasons. In particular the user may select a specific business scope for the solution provided by the ERP system and based on the business scope some model entities are included in the solution while others are not. The business scope selected by the user may be based on a predefined configuration for particular business scenarios or the business scope may be determined for the user based on a context of the user which may include for example a country or industry associated with the user. The business scope applied to the user may be associated with certain constraints that define the types of model entities included in the business solution. For example the business scope for a particular scenario may determine what constraints apply to the model entities in a business activation catalog and thus what model entities or business options are available to a user. During determination of the business scope a set of active process components and BPVT entities is determined and passed to an activation engine which activates all interaction roles that are used by the active BPVT entities.

In certain instances the user starts with a partial scope implementation of the business solution in which one or more model entities in a particular configuration are not included in the user s implementation. The modules included in the partial scope implementation may have interfaces to access external applications or processes for the functions missing in the partial scope implementation or alternatively may not implement or use functionality supplied by the missing functions. In the present example the functionality provided in the financial services module may be substituted with external applications and the modules used in the partial scope implementation can for example send financial documents or interactive forms to the external applications through the modules interfaces.

The user may then at some point decide to switch from a partial scope implementation to a full scope use of the complete ERP system or alternatively an expanded partial scope implementation with more functionality than previously provided by the partial scope implementation . The switch to the full scope implementation may require numerous preliminary tasks before all modules and processes of the system can be activated. For example before the modules in a full scope implementation can become fully functional additional accounts associated with the new modules may need to be set up in the ERP system master data may need to be maintained or pre processed the processes in the partial scope implementation may still need to be maintained or the functionality of the external systems may need to be phased out. A runtime lifecycle state may allow the ERP system to transition from partial scope to full scope with minimal downtimes. In some instances a runtime lifecycle state can be integrated into the business scoping process and into configuration services for process integration and user interface or access management.

The selection of the process component for inclusion in a particular business scope results in transitioning of the process component into the in scope region in i.e. to the left of line . That is from the perspective of the business adaptation catalog the process component to be activated is now considered in scope as it transitions to the left of line and the former entity used to perform the functionality of and being replaced by the process component is now out of scope as illustrated to the right of line . Further the business adaptation catalog can include constraints on which model entities need to be activated or identified as in scope depending on the status of other model entities. For example if a particular process component is not in scope the constraints may specify that none of the process component s provided interaction roles are active and each corresponding process component interaction and process agent is also inactive.

If the process component is part of an initialization process involving activation of all model entities in a business solution before any of the model entities are active the process component is transitioned directly to the Productive state after initial tests and preparation have been performed. If however some model entities are currently active and the process component is being activated to extend the current solution intervening states provided by the runtime lifecycle module may be needed to effectively transition the process component from an off state to a productive state. Accordingly if the new process component is part of the extension from a partial scope implementation to a full scope implementation the new process component s state may be transitioned from an Off state to a Phase in state . Phase in state can be a state that indicates that the process component is a newly introduced process component in a change scenario. The Phase in state or status can be interpreted in different ways by various configuration services. For example the configuration service can apply all configuration settings and privileges to the newly introduced component that are required for preparation of master data for the new process component. A user interface configuration service can enable user interface components that are required in the preparation phase while an access management service can grant limited access to the new process component. Accordingly from the perspective of the configuration and user interface services the process component is considered to be deployed as illustrated above line as the configuration services prepare the process component to be activated as illustrated in .

After the new process component has been prepared to be activated it can be connected as illustrated to the right of line with other process components that are already in the Productive state or that are concurrently being phased in. The new process component can then transition into a fully Productive state after it is phased in. After the Productive state is triggered configuration services can apply any remaining configuration settings to the new process component as well as to other connected process components. For example user interface components that were hidden during the preparation phase can be enabled and the process integration for the new process component can be switched on.

In some instances the new process component is activated in order to replace an existing process component for example. Accordingly a Phase out state or status can also be assigned to model entities as depicted in . The process component to be replaced begins in a Productive state but after a change project is initiated to replace the process component the process component is considered out of scope when located to the right of line . After successful completion of the change project the process component is assigned a Phase out state . The Phase out state or status can be interpreted in different ways by various configuration services. In the preparation phase it will typically have no influence on existing configuration services because business documents may still be processed by the process component being replaced. After the new process component has been assigned a Productive state and has fully replaced the existing process component the Off state is then triggered for the existing process component that is now obsolete.

The transition of model entities to different states can be based on completion of steps or milestones during preparation of the model entities for activation. For example a milestone may be the completion of a task such as maintaining all master data. Once the milestone has been reached certain model entities that are presently in a Phase in state are switched to the Productive state while model entities that are in a Phase out state can be transitioned to an Off state. As illustrated in relevant milestones can include a go live milestone. Before the go live milestone has been reached business documents such as invoices and quotations are created for test purposes. After the go live milestone is reached legal or actual business documents are created and previous test documents can be discarded. Once the go live milestone is reached change projects or change scenarios can be required to significantly extend the system scope. Here the Phase in state and Phase out state are used to concurrently allow creation of legal documents and changing of the communication channels for processing these documents. Accordingly certain milestones or completed tasks can act as trigger points to move a model entity to a different state.

The scoping engine can be connected to a business configuration framework BCF which provides the necessary services and information necessary to orchestrate service providers that perform configuration tasks such as creating web service connections for application to application communication. For example a particular process component may be identified for activation by the scoping engine based on selection of a business scope by a user. The business configuration framework BCF triggers configuration service providers that need to react on the newly activated process component and may use the Runtime Lifecycle API to access scoping information needed to perform necessary configuration tasks in connection with the activated process component. The service providers may react differently based on the runtime lifecycle state associated with the process component.

In certain implementations additional components such as the In Scope Service depicted in can provide a service for determining which associated software model entities have a new runtime state based on the scoping decision in the catalog. The In Scope Service can obtain the appropriate state for a particular model entity given a particular scoping decision to allow other modules such as Wiring Module to perform required configuration tasks. Additional model information can be requested from a metadata repository API . Specifically the In Scope Service can obtain a list of content objects and set a state for the objects based on various constraints in the engineering model associated with the ERP system and on the present system state. For example the In Scope Service can receive a list of BPVT entities or process components to be activated. In some implementations the parent process component for each BPVT entity can also be determined and added to the list of in scope process components. Based on the current state of the system the runtime lifecycle state for the BPVT entities or process components is determined. A similar process may be performed by the In Scope Service for deactivation of model entities. In certain instances the runtime lifecycle state can also be affected by whether a particular process component contains BPVT entities.

The Wiring Module in can be used during application to application activation to create or remove required web service shortcuts for cross deployment unit processes. Application to application connections web service or direct connections are configured by the Wiring Module in . In particular the Wiring Module can call the Repository API to retrieve process component interactions that are to be created and agents that are to be activated from the metadata repository . The Wiring Module can be configured to create or delete connections activate or deactive agents as required or indicated or to call the runtime lifecycle API to set the runtime lifecycle state for agents and interactions to a productive state or an off state. Further the Wiring Module also checks whether all connections needed for a given BPVT entity and the current process component settings are correctly configured and if all required agents are active.

The In Scope Service and Wiring Module can be called in connection with a Change Scenario Activity . Change scenarios can include a guided activity list that leads a user through the steps required for scope extension or scope reduction after a go live milestone. In some instances the runtime lifecycle API can be coupled to additional tools or modules. For example a deployment monitor can be used to monitor the model entities or modules associated with the runtime lifecycle API such as to determine the model entities that are in scope and out of scope or to monitor any deviations in tasks performed by various modules. A Partial Use API can be included to resolve potential inconsistencies that may arise when transitioning from a partial scope implementation to a full scope implementation. For example in a partial scope implementation some of the functionality usually provided by a model entity within an ERP system may be outsourced to external sources. In certain instances an external application may generate a business document which may not be visible to modules within the ERP system. If the partial scope implementation is later expanded to a full scope implementation in which the external functionality is now provided by a module within the ERP system the business document created by the external application may need to be identified or adapted for use within the ERP system. Accordingly a Partial Use API software module can be used to track the history of documents created during partial use implementations and monitor whether a particular document was created in a partial scope or full scope implementation.

Other configurations with different components can be used with the runtime lifecycle API . For example as illustrated in a second example configuration of the runtime lifecycle API can also be used in a configuration for user interface activation. A user interface activation service evaluates the scoping rules associated with the user interface components expressed as model entities having the states Phase in Productive or Phase out. Various user interfaces may be stored in a repository which may be accessed through a repository API . The repository can in some implementations store user interface models and provide features such as layering and versioning. For example a layer can be provided by the repository for scoping which contains logical deletions of elements that are not in the present scope. The user interfaces can be associated with the model entities in a particular ERP solution. A scoping layer is generated from a user interface activation service to provide a filtered view on all available user interfaces. The user interface activation service can select the user interface components associated with certain entities calculate the visibility of the entities with respect to user interface elements such as tabs views and buttons and generate the content for the scoping layer in the repository. In addition the authorization to use individual user interfaces can also be generated by the user interface activation service . Alternatively individual user interface controllers can read the runtime lifecycle state to set dynamic UI attributes.

Further depicts a general configuration for content activation using the runtime lifecycle API . A consumer or deployment monitor can request data from the Runtime Lifecycle State and History Repository through a Runtime Lifecycle API . A Change Scenario Activity can call the In Scope Service or Content Activation Service . The information related to the current state of the model entities is obtained and used during configuration time to perform content activation using the content activation service .

The model entities in the partial scope implementation are activated at . Activation of model entities can include performing configuration tasks associated with the model entities. During initial startup of a partial scope implementation or full scope implementation model entities can transition directly from an off state to a productive state without the need for a transition state because the model entities are collectively activated without the need to account for previously activated model entities. After the model entities in the partial scope implementation have been activated an indication that a go live milestone has been achieved is received at . A go live milestone can be an indication that an initial stage of a software solution is being transitioned into an active stage such as when previous test documents are discarded and legal business documents are created. After the go live milestone a new model entity is identified to include in the software solution at . In some instances the new model entity is a model entity that was originally included in the standard configuration full scope implementation of the software solution but was omitted from the partial scope implementation. Moreover multiple model entities can be identified for inclusion in the software solution at . For example all remaining model entities or a subset of the remaining model entities of the standard configuration can be included in the software. The new model entity is assigned a phase in state at . As described in connection with the phase in state allows configuration tasks to be performed on the new model entity before the model entity is fully activated while currently activated model entities in the partial scope implementation continue in a productive state or are configured in response to inclusion of the new model entity.

The phase in state is interpreted differently by different configuration services. If there are related model entities in the partial scope implementation affected by the assignment of the phase in state to the new model entity at then the related model entities can also be designated for configuration after an appropriate state is assigned to the related model entities at . The related model entities can also be assigned a phase in state for required configuration tasks similar to the configuration of the new model entity. For example in some instances a parent process component of a BPVT entity may need to be activated if the BPVT entity is identified as in scope in the partial scope implementation. Next or if there are no related model entities affected it is determined whether there are model entities to be deactivated at . During a change project scenario new model entities can be added to the partial scope implementation and current model entities can be removed such as when a new model entity replaces a current model entity. If there are model entities to be deactivated a phase out state can be assigned to those model entities at . If there are no model entities to be deactivated and once the appropriate states are assigned to the respective model entities configuration services can perform configuration tasks for model entities having a phase in state at and deactivation tasks with respect to model entities that are being phased out at . After the model entities are configured the model entities having a phase in state can be activated and the model entities having a phase out state can be deactivated at .

The preceding figures and accompanying description illustrate example processes and computer implementable techniques. But environment or its software or other components contemplates using implementing or executing any suitable technique for performing these and other tasks. It will be understood that these processes are for illustration purposes only and that the described or similar techniques may be performed at any appropriate time including concurrently individually or in combination. In addition many of the steps in these processes may take place simultaneously and or in different orders than as shown. Moreover environment may use processes with additional steps fewer steps and or different steps so long as the methods remain appropriate. For example although the transition from a partial scope implementation to a full scope implementation can be performed in one step a transition comprising multiple stages in which additional model entities are incorporated into a business solution at each stage is also within the scope of the present disclosure.

In other words although this disclosure has been described in terms of certain embodiments and generally associated methods alterations and permutations of these embodiments and methods will be apparent to those skilled in the art. Accordingly the above description of example embodiments does not define or constrain this disclosure. Other changes substitutions and alterations are also possible without departing from the spirit and scope of this disclosure.

