---

title: Aligning hierarchial and sequential document trees to identify parallel data
abstract: A set of candidate parallel pages is identified based on trigger words in one or more pages downloaded from a given network location (such as a website). A set of document trees representing each of the candidate pages are aligned to identify translationally parallel content and hyperlinks. The parallel content is further fed into conventional sentence aligner for parallel sentences. And the parallel hyperlinks usually refer to other parallel documents, and lead to a recursive mining of parallel documents.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08073679&OS=08073679&RS=08073679
owner: Microsoft Corporation
number: 08073679
owner_city: Redmond
owner_country: US
publication_date: 20100723
---
The present application is a continuation of and claims priority of U.S. patent application Ser. No. 11 483 941 filed Jul. 10 2006 the content of which is hereby incorporated by reference in its entirety.

Parallel bilingual corpora as used herein refers to textual data in a first language that is identified as a translation of textual data in a second language. For the sake of example the textual data discussed herein is documents but other textual data can be used as well.

When one document is a translation of another document the two documents are referred to as parallel bilingual documents. Therefore a parallel bilingual corpora refers to a corpus of data in a first language that is a translation of a corpus of data in a second language.

Within a set of parallel documents sentences in those documents which are translations of one another are often identified. These are referred to as aligned sentences. Therefore if a document in a first language coincides with a parallel document in a second language and the sentences in the two documents are aligned with one another in that a sentence in the first language is aligned with its translation in the second language then the two documents are referred to as parallel sentence aligned bilingual documents.

There is currently a wide need for parallel bilingual corpora. For instance such corpora are often critical resources for training statistical machine translation systems and for performing cross lingual information retrieval. Additionally some such corpora have even been exploited for various monolingual natural language processing tasks such as word sense disambiguation and paraphrase acquisition.

However large scale parallel corpora are currently not readily available for most language pairs. Even in those languages where some such corpora are available the data in those corpora are usually restricted to government documents or news wire texts. Because of the particular writing styles or domain specific language used in these types of documents these corpora cannot be easily used in training data driven machine translation systems or information retrieval systems or even the monolingual natural language processors discussed above for a range of domains in different language pairs.

There has recently been a sharp increase in the number of bilingual pages available on wide area networks such as websites . Therefore some web mining systems have been developed to automatically obtain parallel bilingual corpora from the worldwide web. These systems use uniform resource locators URLs and assume that parallel web pages are named with predefined patterns to facilitate website maintenance. Therefore when these systems are given bilingual website URLs they use the predefined URL patterns in an attempt to discover candidate parallel documents within that website. Content based features are then used to verify the translational equivalents of the candidate pairs.

These types of systems have met with limited success. For instance there is a wide diversity of web page styles and website maintenance mechanisms. Therefore bilingual websites often use varied naming schemes for parallel documents which do not conform to predefined patterns.

In addition these URL pattern based mining systems can be problematic with respect to bandwidth. These types of mining processes require a full host crawling to collect URLs before using predefined URL patterns to discover possible parallel documents. Therefore these URL pattern based systems often require high bandwidth and high cost and result in slow download speeds. Since even many bilingual websites have only a very limited number of parallel documents a significant portion of the network bandwidth is wasted on downloading web pages that do not have translational counterparts.

In addition due to the noisy nature of web documents parallel web pages may include non translational content and many out of vocabulary words. Both of these reduce the sentence alignment accuracy even after two parallel documents have been identified. Further conventional sentence aligners only operate on conventional text without considering other factors such as layout similarity.

The discussion above is merely provided for general background information and is not intended to be used as an aid in determining the scope of the claimed subject matter.

A set of candidate parallel pages is identified based on trigger words in one or more pages downloaded from a given network location such as a website . A set of document trees representing each of the candidate pages are aligned to identify translationally parallel content.

In one embodiment the document trees are generated following Document Object Model DOM which is a known application programming interface for navigating valid HTML documents. To facilitate the tree alignment computation in one embodiment minor modification is performed on the DOM tree. In another embodiment once the trees are aligned parallel hyperlinks are identified. The pages corresponding to those hyperlinks are then downloaded as a new set of candidate parallel pages.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter. The claimed subject matter is not limited to implementations that solve any or all disadvantages noted in the background.

In one embodiment system retrieves data from documents over network and generates parallel aligned sentences that are output for one of a variety of different reasons such as for storage for use in a machine translation system for use in a monolingual natural language processing system for use in an information retrieval system etc. These various systems are indicated by block in .

The embodiment shown in illustrates that system includes navigation component download component and page verification and tree alignment system . Tree alignment system itself illustratively includes parallelism checking component parallelism verifier component tree alignment component and sentence alignment component .

In any case navigation component is illustratively a conventional network navigation component such as a web browser that can navigate system to a given web page. Once an initial website address is provided to navigation component navigation component navigates to the website corresponding to that address. This is indicated by block in . In one illustrative embodiment the given website is given by a user or an automated website location mechanism such as a crawler or by any other desired input device.

Once at the given website download component illustratively downloads the root page and the first level pages from the website. The first level pages are those pages directly linked by the root page. This is indicated by block in . The downloaded pages are referred to as candidate pages in . The candidate pages are used to check if the web site is bilingual. If so the candidate pages are processed for parallel pair identification verification and tree alignment by system .

There are several methods to check if the web site is bilingual and further identify possibly parallel pairs of pages from the candidates. In the illustrative embodiment the anchor texts are compared against predefined trigger words for this task. If a candidate page is linked to other pages it will illustratively be linked through a hyperlink. The text corresponding to the hyperlinks is referred to herein as anchor text. Parallelism checking component then checks the anchor text for all of the downloaded pages for trigger words. This is indicated by block in .

Trigger words are words that reflect translational equivalence among web pages. Some examples of predefined trigger words or trigger strings include trigger words for English translation such as English or English version . In other words if a French language web page is downloaded and one of the hyperlinks is labeled English or English version that trigger text likely indicates that a translational equivalent of the French web page exists and can be accessed through that hyperlink. Similar trigger words exist for other languages but may be slightly different. For instance trigger words for the Chinese language may be Chinese Chinese version simplified Chinese traditional Chinese etc.

In one embodiment parallelism checking component checks the anchor text for trigger words by comparing the anchor text with a list of predefined strings that are known to reflect translational equivalence among web pages. If no trigger words are found in the anchor text as indicated by block in then the current web site is not a bilingual web site and processing ends for the given website. However if at block the trigger words are located then the two pages associated with the trigger words the English version and the Chinese version for example are identified as possibly parallel pages in . The possibly parallel pages are then downloaded by download component . This is indicated by block in .

At this point in the processing the pages are regarded as candidate parallel pairs or possibly parallel pairs which have not been verified yet. Therefore the possibly parallel pages are provided to parallelism verifier component . Component verifies that the possibly parallel pages are sufficiently parallel to be considered translationally equivalent such that aligned bilingual data can be obtained from them.

In one embodiment parallelism verifier component is illustratively a binary maximum entropy based classifier. However other classifiers or verification components rules based or statistical can be used as well. In the illustrative embodiment however the classifier uses three features in determining whether the pages are sufficiently parallel. is a flow diagram illustrating one illustrative embodiment in which these features are used in parallelism verifier component . The three features include the file length ratio HTML tag similarity and a sentence alignment score. Thus in order to determine whether the pages are sufficiently parallel component first receives the possibly parallel pages . This is indicated by block in .

Component then calculates the file length ratio for the two pages. This is indicated by block . The file length ratio is relatively straight forward and is simply the ratio of the lengths of the files that represent each of the web pages under consideration.

Component then calculates the HTML tag similarity. This is indicated by block in . The HTML tag similarity can be calculated using any of a wide variety of methods. However one illustrative and exemplary method is indicated by blocks and in . In accordance with that illustrative embodiment HTML tag similarity is determined by first extracting all of the HTML tags for each page. This is indicated by block . The HTML tags for each page are then concatenated into a string such that one concatenated string is formed for each of the two pages. Then a minimum edit distance is calculated between the two tag strings associated with the pages. In one embodiment the HTML tag similarity score is defined as the ratio of the number of matching tags in the concatenated strings relative to the total number of strings. Other techniques for determining similarity can be used as well.

In any case component also calculates the sentence alignment score as indicated by block in . The sentence alignment score can be calculated using a wide variety of different methods as well. However in one exemplary embodiment the sentence alignment score is the ratio of the number of aligned sentences on the two pages to the total number of sentences in both files corresponding to the two pages. One embodiment for determining whether sentences are aligned is by aligning document object model trees for the two pages. This is described in greater detail below.

Once the three features file length ratio HTML tag similarity and sentence alignment score have been computed for the two pages component determines whether the pages are sufficiently parallel and outputs an indication as to that determination. This is indicated by block in . In the exemplary embodiment being discussed component is a binary maximum entropy classifier and simply classifies the two pages as either being sufficiently parallel or not sufficiently parallel based on the three features discussed above. The classifier can be trained using any desired training mechanism and one such mechanism is referred to as the iterative scaling algorithm which is known.

Referring again to component verifies the possibly parallel pages as being sufficiently parallel. This is indicated by block in .

If the pages are not sufficiently parallel as indicated by component at block in then processing of the two candidate pages has concluded. However if at block component determines that the two pages are sufficiently parallel then the component has determined that the pages are verified parallel pages and are for the sake of the current processing truly translationally equivalent such that they can be used in generating parallel sentences and referring to more parallel web pages. Thus component submits verified parallel pages to tree alignment component for alignment.

Tree alignment component first obtains a document tree for each of the verified parallel pages . Each node of the document tree illustratively includes two fields the first being an HTML tag field and the second being text associated with the node. In one illustrative example the document tree structure follows the document object model DOM with minor modifications. DOM is published through the World Wide Web consortium and is a known application programming interface for valid HTML documents. For the sake of the present example the discussion will proceed with respect to the document tree structure associated with each web page being a DOM tree although it will be understood that other such tree structures can be used as well.

Once the DOM tree is obtained for each of the verified parallel pages tree alignment component can illustratively perform any desired preprocessing on the DOM trees to place them in a desired form for further processing. This is indicated by block in . One embodiment of preprocessing is described below with respect to .

Once the DOM trees are in the desired form tree alignment component illustratively performs tree alignment to align the DOM trees that represent the web pages. This is indicated by block in . In the illustrative embodiment tree alignment component is a stochastic DOM tree alignment model that is used to align translationally equivalent content including both textual chunks and hyperlinks in the DOM trees for the pair of verified parallel pages . The tree alignment step is described in greater detail below with respect to . Once the DOM trees are aligned and the parallel text chunks and hyperlinks are identified the parallel text chunks are provided to sentence alignment component .

Sentence alignment component then aligns the sentences within the parallel text chunks and outputs them for storage or for use in another system as parallel aligned sentences . Aligning these sentences from the parallel text chunks can be done in any desired way and is illustrated by block in . In one exemplary embodiment the HTML structural similarities between parallel web pages is exploited and a cascaded approach is used to align the sentences. First in the exemplary embodiment text chunks associated with the DOM tree nodes are aligned as discussed above. Then for each pair of parallel text chunks a known sentence aligner can be used to align the sentences. One such sentence aligner models word for word translation from one language to another language without considering word order and combines the word for word translation model with another model that represents the length of the two sentences in the different languages under a maximum likelihood criterion. Of course other types of sentence alignment can be used as well. Outputting the aligned sentences is indicated by block in .

Tree alignment component also illustratively determines whether there are any parallel hyperlinks after the two DOM trees have been aligned with one another. This is indicated by block in . If there are no aligned hyperlinks in the two DOM trees then processing of the two parallel pages is complete. However if there are parallel hyperlinks in the aligned DOM trees then this can be regarded as an anchor to new parallel data. It has been found that using parallel hyperlinks in the two aligned DOM trees to refer to parallel web pages is a general and stable pattern for identifying parallel bilingual data. Therefore if there are parallel hyperlinks to follow at block in then those parallel hyperlinks are provided to navigation component and processing reverts back to block in . Navigation component navigates system to the web pages associated with the parallel hyperlinks and download component downloads the pages associated with the parallel hyperlinks as possibly parallel pages . Those pages are then submitted to parallelism verifier component for verification and so forth.

In one illustrative example of preprocessing DOM tree the alignment component eliminates all nodes except the element nodes and the text nodes from the document model tree. In addition the alt attribute which represents a textual alternative when an image cannot be displayed is represented by a text node. Finally the text which must be a leaf node in the tree is combined with its parent element node into a single node in order to make the representation of the alignment model more concise.

The operation of tree alignment component in performing tree alignment as in step in is now described in more detail. In accordance with one embodiment tree alignment component includes a tree alignment model that defines the alignment as both a hierarchical invariance process and as a sequential order invariance process. In other words the hierarchical invariance process means that if node A is aligned with node B then the children of node A are either deleted or aligned with children of node B. The sequential order invariance process means that if node A is aligned with node B then the sibling nodes following node A must either be deleted or aligned with the sibling nodes following node B. Thus the hierarchical and sequential order of the nodes in the trees is not changed although nodes can be deleted.

In one embodiment a bottom up approach can be used. Therefore in component starts from the subtrees at the bottom of the trees and first finds the best alignment for the subtrees that represent the two web pages. This is indicated by block . Next component finds the best alignment of forests of the sequential subtrees given the subtree alignments found in block . This is indicated by block . Based on any desired goodness criteria or optimization criteria component then determines whether more iterations are required in steps and . This is indicated by block . The iteration continues aligning subtrees and forests containing those subtrees until a desired goodness of alignment is achieved. That desired overall alignment will identify parallel text chunks and hyperlinks as discussed above. Component thus outputs the parallel text chunks and hyperlinks as indicated by block .

To facilitate a more detailed presentation of the tree alignment model the following symbols are introduced given a HTML document D Trefers to the corresponding DOM tree Nrefers to the inode of T here the index of the node is in the breadth first order and Trefers to the sub tree rooted at N so Nrefers to the root of T and T T Trefers to the forest consisting of the sub trees rooted at nodes from Tto T. N.t refers to the text of node N N.l refers to the HTML tag of the node N N.Crefers to the jchild of the node N N.C refers to the consecutive sequence of N s children nodes from N.Cto N.C the sub tree rooted at N.Cis represented as N.TCand the forest rooted at N.C is represented at N.TC. Finally NULL refers to an empty node introduced for node deletion.

To accommodate the hierarchical structure of the DOM tree two different translation probabilities are defined the example deals with English and French languages so E means the English language and F means the French language 

Also Pr T T A represents the probability of translating the forest Tinto Tbased on the alignment A. The tree alignment A is defined as a mapping from target nodes onto source nodes or the null node. Accordingly A or A refers to the mapping scheme for sub tree T or forest T onto a French subtree or forest .

Given two HTML documents F in French and E in English the tree alignment task is defined as searching for A which maximizes the following probabilities Eq. 1 where Pr A T represents the prior knowledge of the alignment configurations given T.

By introducing pwhich refers to the probability of a source or target node deletion occurring in an alignment configuration the alignment prior Pr A T can be assumed as the following binominal distribution 1 Eq. 2 where L is the count of non empty alignments in A and M is the count of Tnode deletions in A.

Pr T T A can be represented as follows Pr T T A Pr T T A and Pr T T A can be calculated recursively depending on the alignment configuration of A as follows 

If Nis aligned with N and the children of Nare aligned with children of N then Eq. 3 where K and K are degree of Nand N respectively.

To complete the alignment model Pr T T A needs to be estimated. As mentioned above only the alignment configurations with unchanged node sequential order are considered as valid. So Pr T T A can be estimated recursively corresponding to the following three alignment configurations of A 

If Nis deleted and N s children N.C is combined with Tto aligned with T then Eq. 8 where K is the degree of N.

Finally the node translation probability is illustratively modeled as Pr N N Pr N.l N.l Pr N.t N.t and the text translation probability Pr t t is modeled by modeling word for word translation from English to French without considering word order. Of course other models can be used as well.

Having thus described the model the parameters for the model must be estimated. In one exemplary embodiment the tree alignment model involves three categories of parameters including a text translation probability Pr t t which is the probability of translating an English text fragment tas a French text fragment t the tag mapping probability Pr l l which is the probability of two tags being mapped to one another and a node deletion probability p which is described above. Any desired and conventional parameter estimation techniques can be used.

It will also be noted that in order to accomplish the iterative alignment process described with respect to above a bottom up approach can be used. It will be appreciated that if two trees are optimally aligned the alignment of their subtrees must be optimal as well. Thus in the decoding process dynamic programming techniques can be applied to find the optimal tree alignment using that of subtrees in a bottom up manner. Table 1 sets out pseudo code for such a decoding algorithm.

It can thus be seen that conventional methods of attempting to identify parallel web content that remove all layout information such as HTML tags and only rely on conventional sentence alignment can be improved. By first applying tree alignment to align parallel text chunks and then using more fine alignment such as sentence alignment to extract parallel sentences from the aligned text chunks better performance is obtained.

Embodiments are operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with various embodiments include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers telephony systems distributed computing environments that include any of the above systems or devices and the like.

Embodiments may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. Some embodiments are designed to be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules are located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing some embodiments includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies.

A user may enter commands and information into the computer through input devices such as a keyboard a microphone and a pointing device such as a mouse trackball or touch pad. Other input devices not shown may include a joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer is operated in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a hand held device a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on remote computer . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

