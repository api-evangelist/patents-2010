---

title: Methods for handling a file associated with a program in a restricted program environment
abstract: Techniques for handling a file associated with a program are described herein. According to an aspect of the invention, in response to a request for accessing a file received through a first program, the file is stored in a first sandboxed storage area, where the file is to be accessed by a second program. An atomic move operation is then performed on the file that atomically moves the file from the first sandboxed storage area to a second sandboxed storage area, where the first sandboxed storage area is not accessible to the first program and second program. The second program is launched to access the file stored in the second sandboxed storage area, where the second sandboxed storage area is a part of a sandbox associated with the second program.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08850572&OS=08850572&RS=08850572
owner: Apple Inc.
number: 08850572
owner_city: Cupertino
owner_country: US
publication_date: 20100115
---
Embodiments of the invention relate generally to the field of secure computing including handling a file associated with a program in a restricted program environment.

Security concerns for all types of processor based electronic devices and particularly for computing devices have become a significant concern. While some concerns may relate to detrimental actions which may be undertaken by defective code implemented by such devices the greater concerns relate to the ramifications of various types of attacks made upon such devices through malicious code including code conventionally known in the field by a number of names including viruses worms Trojan horses spyware adware and others. Such malicious code can have effects ranging from relatively benign such as displaying messages on a screen or taking control of limited functions of a device to highly destructive such as taking complete control of a device running processes transmitting and or deleting files etc. Virtually any type of imaginable action on a processor based device has been the subject of attacks by malicious code.

Many of these attacks are directed at computing devices such as workstations servers desktop computers notebook and handheld computers and other similar devices. Many of these computing devices can run one or more application programs which a user may operate to perform a set of desired functions. However such attacks are not limited to such computing devices. A broader group of various types of devices such as cell phones personal digital assistants PDA s music and video players network routers switches or bridges and other devices utilizing a microprocessor microcontroller or a digital signal processor to execute coded instructions have been the subjects of attacks by malicious code.

In one particular situation one application such as a mail client may handle an electronic mail having an attachment therein. When a user attempts to open the attachment another application is invoked to open the attachment. If the attachment contains malicious code the execution of the attachment by the second application may cause damages to either or both applications which in turn may cause damages to the entire system.

A number of methodologies have been used in an attempt to reduce or eliminate both the attacks and influence of malicious or defective code. Generally these methodologies include detection prevention and mitigation. Specifically these methodologies range from attempts to scan identify isolate and possibly delete malicious code before it is introduced to the system or before it does harm such as is the objective of anti virus software and the like to restricting or containing the actions which may be taken by processes affected by malicious or defective code. However there has been a lack of efficient ways for handling a file associated with an application that invokes another application in a secured manner.

Techniques for handling a file associated with a program are described herein. For example in response to a request for accessing a file received stored or created through a first program the file can be stored in a first sandboxed storage area where the file is opened by a second program. An atomic move operation can then be performed on the file that atomically moves the file from the first sandboxed storage area to a second sandboxed storage area where the first sandboxed storage area is not accessible to the first and second programs. The second program can be launched or invoked to access the file stored in the second sandboxed storage area where the second sandboxed storage area is a part of a sandbox associated with the second program.

In another embodiment a file can also be received through a first program running within a data processing system where the file can be accessed by a second program of the data processing system. In response to a request from a user for accessing the file the first program can store the file in a first sandboxed storage area associated with the first program. The first sandboxed storage area is a part of a first sandbox associated with the first program and the first sandboxed storage area is not accessible to the second program. The first program can cause the file to be copied from the first sandboxed storage area to an intermediate sandboxed storage area that is not accessible from the first and second program. The file can be atomically moved from the intermediate sandboxed storage area to a second sandboxed storage area that is a part of a second sandbox associated with the second program. Thereafter the second program can be invoked to access the file from the second sandboxed storage area which is not accessible from the first program.

According to another embodiment a first program executed within a data processing system can receive a filename and a directory path referenced to a file stored in a first sandboxed storage area where the first sandboxed storage area can be part of a first sandbox associated with the first program. The file can be provided from a second program executed within the data processing system where in response to a user request to access the file from the second program the file can be stored in a second sandboxed storage area that is a part of a second sandbox associated with the second program which is not necessarily accessible by the first program. The file may be copied from the second sandboxed storage area to an intermediate sandboxed storage area that is not accessible by the first and second programs. The file can be atomically moved from the intermediate sandboxed storage area to the first sandboxed storage area. Thereafter the first program can access the file from the first sandboxed storage area.

Other features of the present invention will be apparent from the accompanying drawings and from the detailed description which follows.

Techniques for handling a file associated with a program are described herein. In the following description numerous details are set forth to provide a more thorough explanation of embodiments of the present invention. It will be apparent however to one skilled in the art that embodiments of the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring embodiments of the present invention.

Reference in the specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the invention. The appearances of the phrase in one embodiment in various places in the specification do not necessarily all refer to the same embodiment.

According to some embodiments a sandboxing technique or mechanism is utilized to provide isolations e.g. sandboxed among application programs such that one application or program cannot directly access resources e.g. a memory and or a storage area of another application or program. When a user attempts to access an attachment of a first application e.g. an electronic mail client or download a file from a network e.g. from a web site via a web browser or from a remote server via a remote access application the attachment or downloaded file is stored as a file in a first dedicated storage area of the first application. The attachment is intended to be accessed by a second application e.g. a word processor or editor . The file is then copied from the first dedicated storage area of the first application to an intermediate dedicated storage area. Within the intermediate dedicated storage area one or more content analysis operations such as virus detection and removal operations may be performed. In addition any filename conflict may be resolved within the intermediate dedicated storage area. The filename conflict resolution may occur by examining the destination application s sandbox or application container which is referred to herein as the second application. An atomic move operation is then performed that moves the file from the intermediate dedicated storage area to a second dedicated storage area associated with the second application. Thereafter the second application is launched or invoked to access and access the file from the second dedicated storage area. Alternatively the file may be moved or copied from the first dedicated storage area directly to the second dedicated storage area without using the intermediate dedicated storage area.

As a result the first application cannot access the second dedicated storage area of the second application or vice versa. In addition since the file has been sandboxed during the transactions and the execution of accessing the file by the second application is sandboxed within a sandbox of the second application any damage caused by the execution of the file is limited within the sandbox of the second application. Similarly any damage caused by downloading the attachment from the first application is limited within the sandbox of the first application. Therefore the security of the attachment handling has been greatly improved. One of the main motivations for having the sandbox is to prevent a malicious compromised or malfunctioning application from modifying data that is owned by or associated with another application or the OS. Embodiments of the invention described throughout this application allow such a security feature to be maintained while also allowing documents or files opened or accessed explicitly by the user to be transported for accessing in another application. For the purposes of illustration an application and a program are interchangeable terms throughout this application.

In one embodiment applications may be executed as a sandboxed process where each sandboxed process is associated with a set of dedicated system resources such as for example a dedicated memory space a dedicated storage area or a virtual machine etc. One of the purposes of sandboxing an application is to isolate the application from accessing other unnecessary or unrelated system resources of another application or a system component such that any damage caused by the application would not spill over to other areas of system . For example among other resources application is associated with a dedicated storage area while application is associated with a dedicated storage area . Application and dedicated storage area as well as other associated resources logically as a whole is referred to as a sandbox or an application container that contains any related data resources and or activities of application . Similarly application and dedicated storage area as well as other associated data and resources logically as a whole is referred to as another sandbox or application container.

To provide security an application may be contained by restricting its functionality to a subset of user operations and only allowing operations that are necessary for the proper operation i.e. operation according to its intended functionality. One method to implement a limited set of policies for each application is to contain or sandbox the applications. Sandboxing of an application or process can be achieved using operating system level protection to provide containment and to enforce security policies such as policies that restrict the ability of the application to take actions beyond those functions needed for it to provide its intended functionalities.

When an application has been sandboxed during execution the application is executed as a sandboxed process or thread within the system that is contained within a sandbox or application container in which it cannot access certain system resources or another territory e.g. sandbox of another application subject to a security profile associated with the sandboxed application which is referred to as a sandboxed process or a sandboxed application.

A sandboxed process is the application or other program for which security containment will be implemented. In many cases a sandboxed process is a user application but it could be another program implemented on the computing device such as a daemon or a service. To increase security and provide an efficient mechanism portions of the security system are implemented or executed in a kernel space. In addition a monitor process module not shown is executed in a separate memory space from the sandboxed processes to further insulate them from each other. In particular a sandboxed process is restricted from accessing memory outside of its process space and is further prohibited from spawning a non sandboxed process. For example a security profile of a sandboxed process may include a rule or policy that denies the sandboxed process from using certain system calls which may be a mechanism that allows processes to alter each others address spaces.

A security profile also simply referred to as a profile can include one or more policies where a policy is a logical expression of a permissive or restrictive action that a sandboxed process may or may not take. For example one policy may expressly allow a mail application to access an email database. In such an example all other actions may be impliedly denied. In some situations a default policy is available in a security profile such that if none of the expressed permissive policies are applicable then the default policy typically denial of the operation is applied. A security profile may be associated with a sandboxed process. Alternatively a security policy is associated with more than one sandboxed process such as when a system wide or global security policy is implemented. Individual profiles may be associated with distinct instances or instantiations of applications or daemons. For example if a user executes more than one image of an application each image may have a corresponding security profile.

In some embodiments a policy may prevent a program from performing certain actions based on the state of an external accessory connected to the computing device e.g. if an accessory of a specific type or identity is connected is disconnected or is connected and is in or is not in a specific mode. For example an application may only be allowed to communicate over an externally accessible data bus if an accessory that meets certain criteria is connected to the data bus and is in a receptive mode. Further detailed information concerning sandboxing techniques can be found in co pending U.S. patent application Ser. No. 11 462 680 filed Aug. 4 2006 which has been assigned to a common assignee of the present application and is incorporated by reference herein in its entirety.

Referring back to it is assumed that applications have been sandboxed and executed as sandboxed processes using some sandboxing techniques described above. In this example in addition to other limited resources application is associated with a dedicated storage area e.g. dedicated directory while application is associated with a dedicated storage area e.g. dedicated directory of one or more storage devices . These dedicated storage areas can be located in the same or different physical or logical disks which may be located locally or remotely over a network. These dedicated storage areas are also referred to as sandboxed storage areas. For example application is limited to accessing e.g. via file system content of the associated sandboxed storage area and it cannot access content of sandboxed storage area of application . Similarly application is limited to accessing e.g. via file system content of the associated sandboxed storage area and it cannot access content of sandboxed storage area of application .

For the purpose of illustration it is assumed that application is an electronic mail application while application is an editing application. However it will be appreciated that other types of applications may also be applied herein. For example application may be a web browser network file browser or other program for accessing files on a network and application may be a spreadsheet program image viewing program video display program e book viewer among others. When application includes a file as an attachment a user can attempt to access the file from application by activating e.g. clicking or using a touch based or other gesture a graphical representation such as an icon of file . It is assumed that in order to open or access file application is required. In response to such a user input according to one embodiment a launch service module is invoked from application . Launch service module may be invoked from application via an application programming interface API not shown which may include an inter process call IPC such as the Mach IPC communications of Mac OS of Apple Inc. In one embodiment file may be stored in sandboxed storage area by application for example via file system . Application than invokes the launch service module with a path of file A. For example in response to a user s request for accessing an attachment an email client application downloads the attachment from the network e.g. mail server and saves it on to the disk e.g. sandboxed storage area then points the launch service module at that path e.g. a file directory of file A .

In one embodiment launch service module obtains a file descriptor e.g. a file handle or file identifier of file A via file system or alternatively from application via an API. In addition launch service module examines file or file A to determine which application is required or able to access the file. Typically launch service module accesses a database not shown that maintains mapping information concerning which type or types of files or documents can be accessed by which application or applications in order to determine whether application is capable of accessing file . There may be multiple applications or programs that can access the file and a user can be given the option of which application can access it e.g. a Joint Photographic Experts Group or JPEG file can be opened by Photoshop Preview or Gimp application etc . In addition launch service module may generate a new icon e.g. graphical representation for file and associate the new icon with file A. In one embodiment launch service module may generate the new icon based on an icon associated with application . For example launch service module may combine a default icon of file and the icon of application to generate a new icon for file A.

Once file has been stored in sandboxed storage area as file A a transport service module can be invoked from launch service module . In one embodiment transport service module receives a file descriptor of file A from launch service module . Using the file descriptor received from launch service module and via file system transport service module is configured to copy or move file A from sandboxed storage area into sandboxed storage area as file B where sandboxed storage area is associated with transport service module e.g. a part of a sandbox associated with transport service module and is not accessible from either application or application . Here although sandboxed storage area is a part of a sandbox associated with application transport service module as a part of a system component of OS is configured to have an access privilege to access sandboxed storage area . One of the main features of transport service module is that it is external to both applications and therefore is privileged. Transport service module can read from the sandbox of application and can write to the sandbox of application . Neither application nor application can do both of those actions and thus the external privileged service is required herein.

In addition while file B is stored in sandboxed storage area transport service module may perform additional operations e.g. content analysis on file B. For example transport service module may perform or may invoke another module or application to perform a content analysis on file B such as for example anti virus operations. In one embodiment transport service module may resolve any file naming conflicts among files stored in sandboxed storage area as there may be multiple files stored in sandboxed storage area that have the same filename. For example a file named foo.txt may be obtained by downloading from a mail as an attachment. Another file also named foo.txt may also be downloaded from the Web through a Web browser e.g. another application . When a user detaches the file from the mail application and the Web both the mail application and the Web browser may end up causing the files to be stored in sandboxed storage area as sandboxed storage area may serve intermediate storage area for multiple source applications e.g. application as senders and destination applications e.g. application as recipients . As a result there is a filename conflict or collision here.

According to one embodiment transport service module is configured to resolve the filename conflicts by renaming a filename to one that uniquely identifies the corresponding file and maintains the mapping information of a renamed file and the original filename. In addition according to one embodiment when file is extracted from a mail and saved to sandboxed storage area application generates a unique key for file based on mail metadata e.g. mail identifier or ID and the unique key is saved as a part of metadata of file A. Therefore in combination of the unique key modified filename and its extension transport service module can uniquely identify the file.

Furthermore while file B is stored in sandboxed storage area if the user attempts to access file from first application again launch service module is triggered to notify transport service module . Transport service module may scan each file stored in sandboxed storage area to determine whether file has already been copied into sandboxed storage area . Based on the key as well as other information associated with file B transport service module is able to determine that file B is associated with file of application . As a result there is no need to copy the file again if it is determined that file B exists in sandboxed storage area . According to another embodiment each time there is a new request to access file a new intermediate sandboxed storage area such as sandboxed storage area is created. Once the file is transferred to the receiving application e.g. sandboxed storage area or processed by application or the operation fails the intermediate sandboxed storage area may be destroyed. In this embodiment transport service module can determine whether a file already exists by examining the receiving application s sandbox e.g. sandboxed storage area of application based on the file information from the sending application e.g. application . Alternatively if the intermediate sandboxed storage area has been already created transport service module may examine whether file B already exists in sandboxed storage area based on the file information from the sending application e.g. application before copying file A from sandboxed storage area . According to a further embodiment the file A may be moved or copied from sandboxed storage area directly to sandboxed storage area without using the intermediate sandboxed storage area .

After transport service module performs any necessary operations on file B transport service module causes e.g. via file system an atomic move operation to atomically move file B from sandboxed storage area to sandboxed storage area as file C where sandboxed storage area is a part of a sandbox associated with application . That is the file B is atomically moved from sandboxed storage area to sandboxed storage area such that application can only see either the entire file C or nothing. An atomic move operation is typically provided by a standard file system call or API in which a file is prevented from being accessed while being moved. By using an atomic move operation instead of a copy operation it would avoid the situation in which application may see and try to access a portion of file C while file C is being copied. In addition an atomic move operation is relatively less expensive compared to a copy operation in terms of a processing bandwidth of a data processing system. In one embodiment if the file system does not support the atomic move operation a copy operation may be utilized.

Once the file C has been successfully stored in sandboxed storage area transport service module can return a filename or file identifier as well as any other information such as a directory path associated with file C to launch service module . Launch service module may then pass the filename of file C to application launch module where application launch module is responsible for launching application if application has not been launched. If application is running application launch module may invoke application for example via an IPC call or alternatively application launch module may launch another instance of application . For example application launch module may be implemented as a part of the Springboard component of iPhone OS from Apple Inc. The filename or file identifier of file C as well as the directory path may also be passed as a parameter to application during launching and or invocation of application . Alternatively transport service module may directly invoke application launch module for launching and or invoking application . Application can then access file C from sandboxed storage area based on the filename and the directory path information provided by application launch module .

According to one embodiment sandboxed storage area includes an inbox area and a regular storage directory not shown . File C is stored in the inbox area in which application can only read or delete file C. After accessing file C if application modifies and attempts to store the modified file in sandboxed storage area the modified file is stored as a new file in a regular storage directory. In this way the original file is not modified in the inbox area.

Thus file C is accessed by application in a sandboxed storage area associated with application where sandboxed storage area cannot be accessed by application as a source that provides the file C. As a result any damage caused by accessing file C can be limited within a sandbox associated with application . Similarly any damage caused by downloading file A can be limited to a sandbox associated with application . In addition by using sandboxed storage area associated with transport service area as an intermediate sandboxed storage area additional security processes such as anti virus operations can be performed prior to transporting the file to sandboxed storage area to be accessed by application .

Note that storage areas may be implemented as local storage areas or remote storage areas. For example application may be Web browser accessing file stored remotely for example using a variety of Internet based services such as MobileMe available from Apple Inc. When a user downloads file file may be downloaded from a remote storage location and stored in sandboxed storage area and atomically moved to another dedicated storage area located remotely. Thereafter application may access the remote storage location to access the file. In this situation it is assumed that certain authentication and or authorization mechanisms may be in placed. In addition the techniques described throughout this application may also be applied to a situation in which file A is created or stored by first application where the file A can be accessed by second application . For example first application may be a word processor that creates or stores file A in sandboxed storage area . A user of application may desire to send file A through an email to a remote recipient. In this situation second application which may be an email client application is invoked from first application to attach the file into an outgoing email. As a result file A is processed using the techniques set forth above and becomes file C stored in sandboxed storage area to be processed by application . Thus instead of attaching file A from sandboxed storage area application attaches file C from its own sandboxed storage area . Also note that some or all of the components as shown in may be implemented in software firmware hardware or a combination thereof.

At block processing logic may optionally generate an icon for the file for example by combining an icon of the file and an icon of the identified application that is capable of accessing the file. At block the file as well as the icon is stored in a first dedicated storage area of the first application where the dedicated storage area is a sandboxed storage area which is a part of a sandbox associated with the first application. At block processing logic causes the file to be copied from the first dedicated storage area to a second dedicated storage area associated with the second application for the purpose of accessing for one or more of reading writing executing and or reading metadata of the file where the second dedicated storage area is a sandboxed storage area associated with the second application.

A display controller and display device can provide a visual user interface for the user this digital interface may for example include a graphical user interface that is similar to that shown on an iPhone phone device or on a Macintosh computer when running operating system software. Alternatively the graphical user interface may be similar to any other interface used on alternative hardware platforms. System can also include one or more wireless transceivers to communicate with another data processing system. A wireless transceiver may be a WiFi transceiver an infrared transceiver a Bluetooth transceiver and or a wireless cellular telephony transceiver. It will be appreciated that additional components not shown may also be part of system in certain embodiments and in certain embodiments fewer components than shown in may also be used in a data processing system.

Data processing system can also include one or more input devices which are provided to allow a user to provide input to the system. These input devices may be a keypad a keyboard a touch pad a touch panel or a multi touch panel. The data processing system also includes an optional input output device which may be a connector for a dock. It will be appreciated that one or more buses not shown may be used to interconnect the various components as is well known in the art. The data processing system shown in may be a handheld computer or a personal digital assistant PDA or a cellular telephone with PDA like functionality or a handheld computer which includes a cellular telephone or a media player such as an iPod or devices which combine aspects or functions of these devices such as a media player combined with a PDA and a cellular telephone in one device. In other embodiments the data processing system may be a network computer or an embedded processing device within another device or other types of data processing systems which have fewer components or perhaps more components than that shown in .

At least certain embodiments of the inventions may be part of a digital media player such as a portable music and or video media player which may include a media processing system to present the media a storage device to store the media and may further include a radio frequency RF transceiver e.g. an RF transceiver for a cellular telephone coupled with an antenna system and the media processing system. In certain embodiments media stored on a remote storage device may be transmitted to the media player through the RF transceiver. The media may be for example one or more of music or other audio still pictures or motion pictures.

The portable media player may include a media selection device such as a click wheel input device on an iPod or iPod Nano media player from Apple Inc. of Cupertino Calif. a touch screen or multi touch input device pushbutton device movable pointing input device or other input device. The media selection device may be used to select the media stored on the storage device and or a remote storage device. The portable media player may in at least certain embodiments include a display device which is coupled to the media processing system to display titles or other indicators of media being selected through the input device and being presented either through a speaker or earphone s or on the display device or on both display device and a speaker or earphone s .

Some portions of the preceding detailed descriptions have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the ways used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion it is appreciated that throughout the description discussions utilizing terms such as those set forth in the claims below refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

Embodiments of the invention also relate to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable medium. A machine readable medium includes any mechanism for storing information in a form readable by a machine e.g. a computer . For example a machine readable e.g. computer readable medium includes a machine e.g. a computer readable storage medium e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices etc. etc.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method operations. The required structure for a variety of these systems will appear from the description above. In addition embodiments of the present invention are not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of embodiments of the invention as described herein.

In the foregoing specification embodiments of the invention have been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of the invention as set forth in the following claims. The specification and drawings are accordingly to be regarded in an illustrative sense rather than a restrictive sense.

