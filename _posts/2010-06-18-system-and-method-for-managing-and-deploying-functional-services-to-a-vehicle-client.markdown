---

title: System and method for managing and deploying functional services to a vehicle client
abstract: An invention is provided for a system for managing and deploying software functionality to a vehicle client including a server including a user preference list, a communication tier, applications for receiving a request from the vehicle client, the request identifying the particular user preference and applications for deploying the selected plurality of services and the plurality of service directories in the particular user's preference list to the vehicle client in response to a request from the vehicle client. The user preference list includes a selected plurality of services subscribed by a corresponding particular user's preference list, each one of the plurality of services including a plurality of software components and information for use of a corresponding service, wherein the selected plurality of services are downloadable service implementation components and a plurality of service directories, each service directory including a list of service objects. The communication tier couples the server and a plurality of devices via one or more networks, wherein the plurality of devices includes at least one vehicle client.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08352282&OS=08352282&RS=08352282
owner: Oracle International Corporation
number: 08352282
owner_city: Redwood City
owner_country: US
publication_date: 20100618
---
This application is a continuation of and claims priority from U.S. patent application Ser. No. 10 104 298 filed on Mar. 22 2002 now abandoned and entitled Business Model Agnostic Service Deployment Management Service which is incorporated herein by reference in its entirety. This application is related to 1 U.S. patent application Ser. No. 10 104 267 now issued as U.S. Pat. No. 7 389 319 filed Mar. 22 2002 and entitled Adaptive Connection Routing Over Multiple Communication Channels 2 U.S. patent application Ser. No. 10 105 121 now issued as U.S. Pat. No. 7 277 454 filed Mar. 22 2002 and entitled Arbitration of Communication Channel Bandwidth 3 U.S. patent application Ser. No. 10 104 351 filed Mar. 22 2002 and entitled System and Method for Distributed Preference Data Services 4 U.S. patent application Ser. No. 10 104 297 now issued as U.S. Pat. No. 6 925 466 filed Mar. 22 2002 and entitled Asynchronous Protocol Framework 5 U.S. patent application Ser. No. 10 104 295 now issued as U.S. Pat. No. 7 313 547 filed Mar. 22 2002 and entitled Manager Level Device Service Arbitrator 6 U.S. patent application Ser. No. 10 104 246 filed Mar. 22 2002 and entitled Java Telematics System Preferences 7 U.S. patent application Ser. No. 10 104 243 now issued as U.S. Pat. No. 7 146 307 filed Mar. 22 2002 and entitled System and Method for Testing Telematics Software 8 U.S. patent application Ser. No. 10 104 860 now issued as U.S. Pat. No. 7 171 345 filed Mar. 22 2002 and entitled System and Method for Simulating an Input to a Telematics System 9 U.S. patent application Ser. No. 10 104 294 now issued as U.S. Pat. No. 7 127 386 filed Mar. 22 2002 and entitled Java Telematics Emulator and 10 U.S. patent application Ser. No. 10 104 245 now issued as U.S. Pat. No. 7 058 898 filed Mar. 22 2002 and entitled Abstract User Interface Manager with Prioritization which are incorporated herein be reference.

This invention relates generally to telematic computer devices and more particularly abstract communication using an asynchronous protocol framework for telematic systems.

Telematics refers to systems used for communications instrumentation control and information technology in the field of transportation. Over the years manufacturers of on road vehicles such as automobiles vans trucks buses and so on have utilized computer technology to enhance the operations of existing features and functions in the vehicles as well as to provide new features and functions. For example programmed controllers custom designed processors embedded systems and or computer modules have been developed that support or even control various kinds of mechanical equipment in vehicles. For example programmed controllers or computer modules have been developed that control or support various engine functions such as fuel injection timing and so on. Programmed controllers or computer modules have been developed to enhance or support operation of transmission systems suspension systems braking systems and so on. The sophistication of these enhancements has advanced as the processing power available for these purposes has increased. It is expected that in the future more aspects of the mechanical equipment in vehicles will be controlled or supported by processors or controllers in order to enhance performance reliability and safety to reduce emissions and so on.

Aside from using computer technology to support various mechanical functions in vehicles processors controllers or other programmed computer based technologies are used in vehicles in other ways. Car phones entertainment equipment such as CD players in vehicle navigation systems and emergency roadside assistance systems are examples. In addition new kinds of equipment that provide entirely new features may become available in vehicles. For example vehicles may include radar systems that detect obstacles on the road ahead and then automatically brake the vehicle to prevent accidents. Another example is an in vehicle email system that automatically downloads and reads the driver s email. These new kinds of equipment are likely to include one or more processors and appropriate programming.

These new kinds of equipment hold the promise of making the operation of a vehicle safer more reliable less polluting and more enjoyable. However there are several considerations related to providing these kinds of features that constrain implementation. One consideration relates to maintaining information concerning the services or content available to the remote vehicle devices. Information concerning client devices and various relationships between client devices and data services that can be used to implement provisioning should be stored.

In view of the foregoing there is a need for a mechanism for maintaining information relevant to managing the deployment of software services to vehicle client devices. The mechanism should further include information concerning software services client devices and relations between these entities.

Broadly speaking the present invention fills these needs by providing a system for managing and deploying software functionality to a vehicle client including a server including a user preference list a communication tier applications for receiving a request from the vehicle client the request identifying the particular user preference and applications for deploying the selected plurality of services and the plurality of service directories in the particular user s preference list to the vehicle client in response to a request from the vehicle client. The user preference list includes a selected plurality of services subscribed by a corresponding particular user s preference list each one of the plurality of services including a plurality of software components and information for use of a corresponding service wherein the selected plurality of services are downloadable service implementation components and a plurality of service directories each service directory including a list of service objects. The communication tier couples the server and a plurality of devices via one or more networks wherein the plurality of devices includes at least one vehicle client.

Each of the plurality of service directories can include a set of related services the set of related services capable of being deployed on the vehicle client. At least one of the plurality of deployed services can be a user entry object. The request from the vehicle client can include a change to the particular user preferences.

The system can also include an application for managing a subscription of a service. The application for managing the subscription of a service can include an application for billing the particular user for the subscribed service. The server can also include a list of the plurality of selected services downloaded to the vehicle client.

Another embodiment provides a method for managing and deploying software functionality to a vehicle client. The method includes storing a user preference list in a server. The user preference list includes a selected plurality of services subscribed by a corresponding particular user s preference list each one of the plurality of services including a plurality of software components and information for use of a corresponding service wherein the selected plurality of services are downloadable service implementation components and a plurality of service directories each service directory including a list of service objects. The method further includes coupling the server and a plurality of devices via one or more networks wherein the plurality of devices includes at least one vehicle client. A request is received from the vehicle client the request identifying the particular user preference and the selected plurality of services and the plurality of service directories the particular user s preference list are deployed to the vehicle client in response to a request from the vehicle client.

Another embodiment provides a system for managing and deploying software functionality to a vehicle client. The system includes server and the server includes a user preference list a communication tier applications for receiving a request from the vehicle client the request identifying the particular user preference and applications for deploying the selected plurality of services and the plurality of service directories in the particular user s preference list to the vehicle client in response to a request from the vehicle client. The user preference list includes a selected plurality of services subscribed by a corresponding particular user s preference list each one of the plurality of services including a plurality of software components and information for use of a corresponding service wherein the selected plurality of services are downloadable service implementation components and a plurality of service directories each service directory including a list of service objects. The communication tier couples the server and a plurality of devices via one or more networks wherein the plurality of devices includes at least one vehicle client. The server also includes a list of the plurality of selected services downloaded to the vehicle client and an application for managing a subscription of a service including an application for billing the particular user for the subscribed service.

Other aspects and advantages of the invention will become apparent from the following detailed description taken in conjunction with the accompanying drawings illustrating by way of example the principles of the invention.

An invention is disclosed for a business model agnostic service deployment management service. Embodiments of the present invention maintain information relevant to managing the deployment of software services to vehicle client devices. This information includes data concerning software services client devices and relations between these entities. In the following description numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however to one skilled in the art that the present invention may be practiced without some or all of these specific details. In other instances well known process steps have not been described in detail in order not to unnecessarily obscure the present invention.

The vehicle client can be executed on a vehicle computing platform which may include an interactive screen global positioning satellite GPS system hardware audio speakers and microphone. In addition the vehicle computing platform may include voice recognition software and speech generation capability. Further the vehicle computing platform may be in communication with a vehicle bus which allows communication with vehicle sensors to provide vehicle diagnostic information. As mentioned above the vehicle client can communicate wirelessly with the telematics server .

The telematics server receives wireless communications using a communications application programming interface API framework . The communications API framework provides a standardized framework for processing wireless communications independent of the actual physical networking hardware used for the wireless communications. In addition the communications API framework allows communications with multiple networks both wireless and non wireless such as the Internet.

Broadly speaking the telematics server includes provisioning service preference storage and remote management . The provisioning service manages and provides the provisioning and downloading of carlets to individual vehicle clients . In this manner the provisioning service allows dynamic updating of the software functionality i.e. carlets . For example a user can subscribe to a particular service using a web page that is in communication with the telematics server . In response the telematics server can utilize the provisioning service to deploy to the user s vehicle client the carlets associated with the particular service subscribed to by the user. When deploying carlets to vehicle clients embodiments of the present invention store user preferences using the preference storage .

Broadly speaking the preference storage is a storage of user preferences that can be made available to the computing platform executing the vehicle client . In addition the vehicle client can cache a portion of or the entire contents of the user s preference data stored in the preference storage . As above a user may access the telematics server via a web application to update their user preferences. Thereafter the vehicle client may request the updated user preferences from the preference storage . In this manner a user can update their user preferences without having to utilize a limited vehicle computing platform interface.

The remote management allows the telematics server to manage the software and preferences on individual vehicle clients . For example the remote management can contact a vehicle client and query information as to which carlets are installed on the vehicle client . Further the remote management can control the installing and uninstalling of applications and request vehicle status. In this manner the telematics server can remotely manage the vehicle clients .

The components depicted in show the general model of how end to end applications or services are implemented in the telematic server . The client side of the typical service is implemented by a service bundle which can be deployed to and executed on a vehicle client device. A service bundle is an archive containing executable code e.g. carlets resources e.g. images and error messages in appropriate languages configuration and descriptive information. The vehicle client device communicates with the telematic server through a deployment specific network abstracted by communication APIs in the communication tier . On the server side an adaptor handles the application level communication management e.g. open accept and close connections send and receive data etc. . Through the adaptor framework the adaptor is bound to an application component implementing the server side business logic. The adaptor framework allows adaptors and applications to be developed and deployed independently. Application components are typically implemented using one or more generic services provided by the data access tier .

In addition to any user interfaces provided by the client device an end to end service may be accessible through other user interfaces implemented in the presentation tier . This may include both applications for use by the service provider s employees or agents e.g. client device administration call centers etc. and customers e.g. subscription management and other web services .

The communication tier includes components implementing network protocols and interfaces. By using the APIs offered by communication tier components in other tiers can communicate with remote vehicle client devices as well as other types of clients such as web browsers. The communication tier is connected to the front end network through which external networks e.g. internet wireless client network etc. are accessible. In addition the communication tier is connected to the middle tier network thus making the various communication APIs available to the other logical tiers.

In one embodiment the communication tier provides Intranet and Internet APIs and telematic server communication APIs. The Intranet and Internet APIs can be provided by a general J2EE platform. Depending on the deployment these APIs may or may not be available for communication with client devices. The telematic server communication APIs can be used to communicate with client devices supporting a compatible interoperable implementation of the corresponding client side communication APIs such as vehicle clients.

In order to abstract away from the specific communication mechanisms and application level protocols employed by different types of client devices the telematic server defines a protocol API. The protocol API abstracts the generic application level protocol that the telematic server supports. In one embodiment the protocol API includes a collection of request and reply handler interfaces. Handlers for incoming communications requests and replies are implemented by applications while handlers for outgoing communications requests and replies are implemented by adaptors . For example an application may provide an interface that allows the application to handle a client s request for a list of available services while an adaptor may provide an interface for sending such a list to a client.

Adaptors provide client specific application level protocol management and communication. An adaptor uses the communication APIs offered by the communication tier to communicate with individual vehicle client devices. In a simple case there is a one to one correspondence between the application level protocol supported by the vehicle client and by the generic protocol reflected by the telematic server protocol API. That is any communication received by an adaptor will result in the invocation of a method on the interface of an appropriated application and any invocation of a method on an adaptor API will result in a message being sent to a client device.

However if the application level protocol supported by the client doesn t match the telematic server protocol API then the adaptor is also responsible for mapping the client specific protocol to the telematic server protocol API. For example a single request from a vehicle client device may require multiple requests to one or more applications .

The business logic tier includes components called applications . Applications include the deployment specific business logic required to implement particular services. For example a service discovery application may be responsible for calculating a reply when a client requests a list of available services. How to format the reply and how to send it is defined by a client specific protocol definition and implemented by an adaptor . However determining the content of the service list depends on the deployment s business rules. For example the list could be pre defined by the customer s service agreement or the list might be calculated dynamically based on the vehicle client device s capabilities or on other factors such as location.

In addition to the interface for handling incoming communications an application may provide a second interface providing access to business functions. For example a continuously running remote client management application may provide an interface for scheduling management activities use an adaptor to send directives to vehicle client devices at the scheduled time and implement a reply handler interface allowing the adaptor to deliver asynchronous replies.

The adaptor framework supports registration of adaptors and applications lookup of adaptors and applications binding between adaptors and applications and allowing adaptors to pass strongly typed messages to appropriated applications by invoking methods defined in the application interface and vice versa.

The adaptor framework allows an adaptor to specify the appropriated application or vice versa based on type implementation and session. For example a vehicle client specific service discovery adaptor may receive a request for a list of available services. After parsing and validating the request the adaptor tries to lookup a reference to a vehicle client implementation service discovery type application to handle the request.

If any vehicle client service discovery applications are registered with the adaptor framework then the reference is bound to one of them if there is more than one the choice is implementation specific . If there are none the adaptor framework will attempt to bind to a default client type neutral service discovery application. Assuming a suitable application is found the adaptor forwards the request to the application passing along a reply address. If the client server protocol uses asynchronous messaging then the return address supplied by the adaptor may simply specify that the reply should go to any vehicle client service discovery adaptor. But if instead the client server protocol is based on synchronous communication the adaptor creates a session and includes the session identifier in the return address thus allowing the application to reply to the same adaptor. When the application is ready it uses the reply address in the request to lookup a reference to an adaptor and sends the reply.

The data access tier includes generic services for storing managing and accessing deployment data. In general a given service may be used by multiple applications just as an application may make use of multiple services. On one side the data access tier is connected to the middle tier network making services available to applications in the business logic tier and to the presentation tier . On the other side the data access tier connects to the back end network through which data storage systems e.g. RDBMS LDAP file servers etc are accessed using existing J2EE APIs e.g. JDBC JNDI .

The presentation tier includes various end user interfaces available to the service provider s employees agents or customers through Internet or Intranet connectivity as appropriated. In addition to graphical user interfaces the presentation tier may include command line utilities scripts and programs more appropriated for batch mode of operation e.g. convert a existing customer database . Besides using various Internet and Intranet communication APIs the components in the presentation tier generally use the APIs of components in the data access and business logic tiers.

The connection server establishes accepts maintains and terminates connections over the wireless network. In addition the connection server interacts with a security server to maintain secure end to end sessions. Further the connection server is responsible for both incoming and outgoing connections. The API for the telematic server includes functions for making connections to vehicles. This includes support for both synchronous and asynchronous communication. Communication can be subject to prioritization allowing the implementation to arbitrate limited network resources. Further the telematic API masks the developer from the details of the actual network and carrier infrastructure.

Generic security can also be provided by the telematic server architecture . For example security features can include authentication authorization encryption and session management. For example the communication system can be required to mutually authenticate the server and client devices and only accept communication from authorized sources.

In addition the communication system of the telematic server architecture ensures data integrity and privacy. In addition the system may provide application level security features to allow a common notion of users inside the server e.g. a customer logging into a web portal and on client devices e.g. the driver of a vehicle identified by their ignition key or otherwise .

The telematics server manages a database in which all deployed or deployable services are stored. This database may also store information about client devices. The service repository supports dynamic characterization and categorization of services for different purposes e.g. the service available to a particular device the category of games the set of services a given customer has subscribed to etc. .

The telematics server provides service APIs for controlling deployment of services to vehicles. More specifically the telematics server supports service discovery service subscription and service delivery. Using service discovery vehicle clients can query the telematics server for lists of services based on service categories and matching criteria to determine the set of services available to a given device. Using service subscription telematics server can support management of individual service categories e.g. the set of services a given customer has subscribed to . Using service delivery telematics server allows vehicle client devices to download services subject to authorization . This can involve downloading service implementation components or other resources from 3rd party service providers to a local cache. In addition the telematics server performs service version management and provides APIs to remotely manage deployed services e.g. start stop uninstall upgrade change configuration etc. .

The profile server manages a database containing users preferences data. Thus the profile server allows clients to read and write user and service specific preferences subject to authorization . In addition the profile server provides an API allowing server side access to preferences as well. For example a user can log into a web portal and modify their personal radio station preferences using a convenient web interface and later find the updated preferences installed in their vehicle.

As mentioned above embodiments of the present invention provide services to vehicle clients. To maintain information concerning the services and content the telematic server can deliver to remote vehicle clients embodiments of the present invention utilize a business model agnostic service deployment management service.

The vehicle client object represents a physical vehicle client device. In addition the vehicle client object can represent a logical vehicle client device to allow for example a user to keep their same vehicle client object even though the user has a new car with a new vehicle client device. In such a case a vehicle client object can be applied to the new vehicle client device without reentering the user s preference data into the system. The vehicle client object includes information concerning the vehicle device type and capabilities the vehicle device owner and or the responsible customer e.g. for billing purposes and other information as desired by the developer.

The service object represents information about a service as perceived by the user of the service. For example a service object can store a list of software components and other content required to use a service the price of the service any required client capabilities and the types of supported clients. As implied above the service object does not need to correspond to a particular software artifact. That is each service may utilize multiple software artifacts to provide the service to the user. In such cases the service object corresponds to the entire service including all the software artifacts required to use the service.

The service directory object represents sets of services and other service directories defined for different business model specific purposes. For example a service directory object can include a list of services available to gold customers a list of services to deploy to a given vehicle client device and or a list of services currently deployed on a particular vehicle client device. It should be noted that there is a many to many relationship between the service directory objects and the service objects . That is a service object can be referenced by multiple service directory objects and multiple service directory objects can include the same service object .

To represent the relationship between a service directory object and a service object embodiments of the present invention utilize service entry objects . Service entry objects indicate that a particular service object is part of a particular directory. For example a service entry object can store information concerning membership conditions and expirations times. By having the service entry objects embodiments of the present invention can store information about the relationship itself.

For example a service entry object can indicate that when a particular service object is part of a first service directory the particular service object has a price of for example 5.00. In addition another service entry object can indicate that when the particular service object is part of a second service directory the particular service object has a price of for example 10.00. Thus the service entry objects allow the embodiments of the present invention to quantify the relationship between the service objects and the service directories .

The directory entry object represents a relationship between a vehicle client object and a service directory object . For example a particular service directory can be associated with a vehicle client object as the set of services available to the vehicle client object as shown by relation arrow . Similarly a service directory can be associated with a vehicle client object as the set of services subscribed to by the user as shown by relation arrow or as the set of services deployed onto the vehicle device represented by the vehicle client object as shown by relation arrow . Further to organize the services into hierarchies the directory entry objects can be used to indicate that a particular service directory is the parent of another service directory .

Client association objects can generically indicate the relationships between the vehicle client objects and the service directory objects . In this manner the client association objects can be used to quantify the relationships between each service directory and the vehicle client objects . Thus using the client association objects the service entry objects and the directory entry objects the system can be queried based on object relationship. For example the system can be queried for all services in a particular service directory associated with a particular client. In addition the system can be queried using search filters which perform pattern matching on the data content of an object. For example the system can be queried for all services that require a speech engine to operate. Furthermore the above mentioned query types can be combined. For example the system can be queried for all services in a gold package which is a specific service directory that require a speech engine.

The user object represents a particular user of a particular vehicle client . The user object is related to a particular vehicle client object via an authorization object . The authorization object defines the kinds of authorization a particular user has related to the vehicle client device represented by the vehicle client object . Thus the authorization object defines the role the user can play when using the vehicle client . For example when a vehicle client devices requests preference data for a particular service the authorization object can be checked to determine if the user is authorized to use the client device and whether the user is authorized to receive the preference data.

In one embodiment the telematics system of the embodiments of the present invention can be implemented using the Java programming language. In general developers design Java applications as hardware independent software modules which are executed Java virtual machines. The Java virtual machine layer is developed to operate in conjunction with the native operating system of the particular hardware on which the vehicle clients and telematic server are to run. In this manner Java applications can be ported from one hardware device to another without requiring updating of the application code.

Unlike most programming languages in which a program is compiled into machine dependent executable program code Java classes are compiled into machine independent byte code class files which are executed by a machine dependent virtual machine. The virtual machine provides a level of abstraction between the machine independence of the byte code classes and the machine dependent instruction set of the underlying computer hardware. A class loader is responsible for loading the byte code class files as needed and an interpreter or just in time compiler provides for the transformation of byte codes into machine code.

More specifically Java is a programming language designed to generate applications that can run on all hardware platforms small medium and large without modification. Developed by Sun Java has been promoted and geared heavily for the Web both for public Web sites and intranets. Generally Java programs can be called from within HTML documents or launched standalone. When a Java program runs from a Web page it is called a Java applet and when run on a Web server the application is called a servlet. 

Java is an interpreted language. The source code of a Java program is compiled into an intermediate language called bytecode . The bytecode is then converted interpreted into machine code at runtime. Upon finding a Java applet the Web browser invokes a Java interpreter Java Virtual Machine which translates the bytecode into machine code and runs it. Thus Java programs are not dependent on any specific hardware and will run in any computer with the Java Virtual Machine software. On the server side Java programs can also be compiled into machine language for faster performance. However a compiled Java program loses hardware independence as a result.

Although the present invention is described based on the Java programming language other programming languages may be used to implement the embodiments of the present invention such as other object oriented programming languages. Object oriented programming is a method of creating computer programs by combining certain fundamental building blocks and creating relationships among and between the building blocks. The building blocks in object oriented programming systems are called objects. An object is a programming unit that groups together a data structure instance variables and the operations methods that can use or affect that data. Thus an object consists of data and one or more operations or procedures that can be performed on that data. The joining of data and operations into a unitary building block is called encapsulation. 

An object can be instructed to perform one of its methods when it receives a message. A message is a command or instruction to the object to execute a certain method. It consists of a method selection name and a plurality of arguments that are sent to an object. A message tells the receiving object what operations to perform.

One advantage of object oriented programming is the way in which methods are invoked. When a message is sent to an object it is not necessary for the message to instruct the object how to perform a certain method. It is only necessary to request that the object execute the method. This greatly simplifies program development.

Object oriented programming languages are predominantly based on a class scheme. A class defines a type of object that typically includes both instance variables and methods for the class. An object class is used to create a particular instance of an object. An instance of an object class includes the variables and methods defined for the class. Multiple instances of the same class can be created from an object class. Each instance that is created from the object class is said to be of the same type or class.

A hierarchy of classes can be defined such that an object class definition has one or more subclasses. A subclass inherits its parent s and grandparent s etc. definition. Each subclass in the hierarchy may add to or modify the behavior specified by its parent class.

To illustrate an employee object class can include name and salary instance variables and a set salary method. Instances of the employee object class can be created or instantiated for each employee in an organization. Each object instance is said to be of type employee. Each employee object instance includes the name and salary instance variables and the set salary method. The values associated with the name and salary variables in each employee object instance contain the name and salary of an employee in the organization. A message can be sent to an employee s employee object instance to invoke the set salary method to modify the employee s salary i.e. the value associated with the salary variable in the employee s employee object .

An object is a generic term that is used in the object oriented programming environment to refer to a module that contains related code and variables. A software application can be written using an object oriented programming language whereby the program s functionality is implemented using objects. Examples of object oriented programming languages include C as well as Java.

Although the foregoing invention has been described in some detail for purposes of clarity of understanding it will be apparent that certain changes and modifications may be practiced within the scope of the appended claims. Accordingly the present embodiments are to be considered as illustrative and not restrictive and the invention is not to be limited to the details given herein but may be modified within the scope and equivalents of the appended claims.

