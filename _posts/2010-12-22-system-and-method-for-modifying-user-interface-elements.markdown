---

title: System and method for modifying user interface elements
abstract: The present disclosure involves systems, products, and methods for modifying elements within a user interface (UI). One method includes operations for identifying an instance of a UI text element for modification within a UI associated with a software application, wherein the UI is displayed to at least one user; retrieving a set of metadata associated with the identified instance of the UI text element, where each instance of the UI text element is associated with the retrieved set of metadata; receiving at least one modification to the retrieved set of metadata associated with the identified instance of the UI text element; and persisting the modified set of metadata associated with the UI text element.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09423920&OS=09423920&RS=09423920
owner: SAP SE
number: 09423920
owner_city: Walldorf
owner_country: DE
publication_date: 20101222
---
The present disclosure relates to software computer systems and computer implemented methods for modifying elements within a user interface.

User interfaces UIs can provide users or clients of a computer or software system with the ability to provide input to the system thus allowing users to manipulate the system. UIs can also provide users or clients with information defining or associated with the output of the computer or software system sometimes in response to input provided by the users within the same or a related UI. Typically UIs consist of elements including entry fields push buttons tables tabs and other UI components. The layout of the elements within a particular UI their operations and associated backend operations and their connections to one or more other elements within the UI may be defined by metadata models and other information. The metadata models and other information associated with the UI and its UI components can be used by an application or web page to render and generate the UI appropriately as well as to receive and output data and other information as appropriate for the actions occurring within or associated with the UI.

The present disclosure involves systems products and methods for modifying elements within a user interface UI . One method includes operations for identifying an instance of a UI text element for modification within a UI associated with a software application wherein the UI is displayed to at least one user retrieving a set of metadata associated with the identified instance of the UI text element where each instance of the UI text element is associated with the retrieved set of metadata receiving at least one modification to the retrieved set of metadata associated with the identified instance of the UI text element and persisting the modified set of metadata associated with the UI text element.

While generally described as computer implemented software embodied on tangible media that processes and transforms the respective data some or all of the aspects may be computer implemented methods or further included in respective systems or other devices for performing this described functionality. The details of these and other aspects and embodiments of the present disclosure are set forth in the accompanying drawings and the description below. Other features objects and advantages of the disclosure will be apparent from the description and drawings and from the claims.

This disclosure generally describes software computer implemented methods and systems related to the modification of user interface UI elements presented to a user or client by a software application. UIs may include various UI elements including text boxes dropdown boxes tables and text fields some or all of which include a label or other identifier to provide understanding to users working the UI and its associated application. In some instances one or more of those UI elements may be incorrect such as a particular UI element s label or identifier. Generally modification to a UI may require a helpdesk ticket to be submitted a notification sent to an entity or person managing a particular UI and or application or another method of notifying the appropriate persons about the error within the UI. The present application describes systems and methods for a straight forward process that allows any user having the appropriate credentials including a support employee a software developer a translator a customer or other end user to correct errors and modify UIs immediately.

The present disclosure can be used as a benefit in many situations. In a first instance a particular UI may simply have an error in a UI element s label due to an error during data entry or other incorrect backend data. In another instance a UI may be used in a multi national business or in a set of multi language UIs where certain UI elements may be associated and presented with different and language dependent texts within the UI e.g. field labels titles identifiers etc. . In still another instance context related errors may be included with particular UI elements such as when the conversion from one language to another provides an accurate technical translation but where the translated word s are incorrect in the context of the UI and its associated application.

In these and other instances UI related errors may not be detected in the standard software quality assurance processes and may be included in the production version of the application. Where previously a user identifying the issue may be required to report the error back to a support employee or other individual with access to the backend data and metadata defining the UI and its UI elements the present disclosure provides a system and associated methods for allowing the user identifying the issue to immediately identify and correct the error without needing to notify other users or administrators.

Turning to the illustrated example illustrates an example environment for presenting UIs to users on different client systems and if an error is identified for allowing the users with appropriate permissions or credentials to modify the UI immediately. The illustrated environment includes or is communicably coupled with an application server a database server a first client and a second client at least some of which communicate across a network . In general environment depicts an example configuration of a system capable of allowing a client or any other local or external user to identify an error or modification to be made within a UI associated with a particular application and using the metadata and backend information defining a particular UI element identified within the UI immediately modify and or correct the UI and or the particular UI element.

In general the application server can be any server that stores at least one business application where at least a portion of the business application is executed via requests received from and responses sent to users or clients e.g. client within and or communicably coupled to the illustrated environment of . In some instances requests and responses may also be received and or sent between one or more clients users or entities not illustrated in . In general the application server may be a part of a larger development or production environment and may in fact be represented as more than one server or system with each portion performing a portion of the functionality described herein. In some instances the application server may be a Java 2 Platform Enterprise Edition J2EE compliant application server that includes Java technologies such as Enterprise JavaBeans EJB J2EE Connector Architecture JCA Java Messaging Service JMS Java Naming and Directory Interface JNDI and Java Database Connectivity JDBC . In some instances the application server may store a plurality of business applications while in other instances the application server may be a dedicated server meant to store and execute only a single business application . In some instances the application server may comprise a web server or be communicably coupled with a web server where the business application represents at least in part one or more web based applications accessed and executed via network by the clients to perform the programmed tasks or operations of the business application . Additionally the application server may perform the operations associated with modifying one or more UIs or UI elements associated with the business application using information defining a particular UI element its uses within an application and access to the metadata associated with each instance of the particular UI element.

At a high level the application server comprises an electronic computing device operable to receive transmit process store or manage data and information associated with the environment . The application server illustrated in can be responsible for receiving application requests from one or more client applications or business applications associated with the clients of environment responding to the received requests by processing said requests in the associated business application and sending the appropriate response from the business application back to the requesting client application . Alternatively requests from one or more of the clients may initiate a UI modification process causing the application server to perform operations to retrieve information on one or more business objects or other meta objects associated with a particular UI and or UI element in the business application identify the locations within the business application where the identified UI element is used and modify the UI element s metadata in a backend system i.e. database server so that all users viewing the business application will receive the modified and corrected UI element during their next call to the business application where the UI element is included or to be presented. Additionally the business application at the application server can process and respond to local requests from users accessing the application server locally such as local system administrators. Accordingly in addition to requests from the clients illustrated in requests associated with the business application may also be sent from internal users external or third party customers and other automated applications as well as any other appropriate entities individuals systems or computers. Further the terms client application and business application may be used interchangeably as appropriate without departing from the scope of this disclosure.

As used in the present disclosure the term computer is intended to encompass any suitable processing device. For example although illustrates the application server as a single server environment can be implemented using two or more servers to perform the operations of the application server as well as computers other than servers including a server pool. Indeed the application server may be any computer or processing device such as for example a blade server general purpose personal computer PC Macintosh workstation UNIX based workstation or any other suitable device. In other words the present disclosure contemplates computers other than general purpose computers as well as computers without conventional operating systems. Further the illustrated application server may be adapted to execute any operating system including Linux UNIX Windows Mac OS or any other suitable operating system. According to one embodiment the application server may also include or be communicably coupled with a mail server. In some instances the application server may be executed in association with and or part of a set of networked systems in an on demand or cloud computing solution.

In the present implementation the application server includes an interface a processor a memory and a business application . The interface is used by the application server for communicating with other systems in a client server or other distributed environment including within environment connected to the network e.g. one or more of clients as well as other systems communicably coupled to the network not illustrated herein . Generally the interface comprises logic encoded in software and or hardware in a suitable combination and operable to communicate with the network . More specifically the interface may comprise software supporting one or more communication protocols associated with communications such that the network or interface s hardware is operable to communicate physical signals within and outside the illustrated environment .

Although not illustrated in the application server may also include a local user interface such as a graphical user interface GUI . The local GUI can comprise a graphical user interface operable to for example allow a local user of the application server to interface with at least a portion of the platform for any suitable purpose such as managing the application server and or performing operations associated with the business application e.g. modifying one or more UIs associated with the business application or other data associated with the application server . Generally the local GUI provides the particular user with an efficient and user friendly presentation of business data provided by or communicated within the system. The local GUI may comprise a plurality of customizable frames or views having interactive fields pull down lists and buttons operated by the user. For example the local GUI may provide interactive elements that allow a user to enter select create or modify elements of business process instances or business object instances in the local GUI. More generally the local GUI may also provide general interactive elements that allow a user to access and utilize various services and functions of the business application including any modifications that may be made to new or modified implementations of business objects and other information associated with the business application . The local GUI is often configurable supports a combination of tables and graphs bar line pie status dials etc. and is able to build real time portals where tabs are delineated by key characteristics e.g. site or micro site . Therefore the local GUI contemplates any suitable graphical user interface such as a combination of a generic web browser intelligent engine and command line interface CLI that processes information in the platform and efficiently presents the results to the user visually.

As illustrated the application server is communicably coupled with a network that facilitates wireless or wireline communications between the components of the environment i.e. between the application server and the database server between the clients and the application server etc. as well as with any other local or remote computer such as additional clients servers or other devices communicably coupled to network but not illustrated in . In the illustrated environment the network is depicted as a single network but may be a continuous or discontinuous network without departing from the scope of this disclosure so long as at least a portion of the network may facilitate communications between senders and recipients. The network may be all or a portion of an enterprise or secured network while in another instance at least a portion of the network may represent a connection to the Internet. In some instances a portion of the network may be a virtual private network VPN such as for example the connection between at least one of the clients and the application server . Further all or a portion of the network can comprise either a wireline or wireless link. Example wireless links may include 802.11a b g n 802.20 WiMax and or any other appropriate wireless link. In other words the network encompasses any internal or external network networks sub network or combination thereof operable to facilitate communications between various computing components inside and outside the illustrated environment . The network may communicate for example Internet Protocol IP packets Frame Relay frames Asynchronous Transfer Mode ATM cells voice video data and other suitable information between network addresses. The network may also include one or more local area networks LANs radio access networks RANs metropolitan area networks MANs wide area networks WANs all or a portion of the Internet and or any other communication system or systems at one or more locations. The network however is not a required component of the present disclosure such that some or all of the functionality may be performed locally at the application server .

As illustrated in the application server includes a processor . Although illustrated as a single processor in two or more processors may be used according to particular needs desires or particular embodiments of environment . Each processor may be a central processing unit CPU a blade an application specific integrated circuit ASIC a field programmable gate array FPGA or another suitable component. Generally the processor executes instructions and manipulates data to perform the operations of the application server and specifically the business application included on or within the application server . Specifically the application server s processor executes the functionality required to receive and respond to requests from the clients as well as the functionality required to perform the operations of the business application including accessing data from the memory of the application server as well as from the database server where appropriate. The processor can also be used to execute any other modules and components of the application system as needed.

At a high level the business application is any application program module process or other software that may execute change delete generate or otherwise manage information according to the present disclosure particularly in response to and in connection with one or more requests received from the illustrated clients and one or more client applications . In certain cases only one business application may be located within or associated with the application server . In others a plurality of related and or unrelated business applications may be stored at the application server or located across a plurality of other systems and or servers comprising the application server as well. In certain cases environment may implement a composite business application. For example portions of the composite application may be implemented as Enterprise Java Beans EJBs or design time components and may have the ability to generate run time implementations into different platforms such as J2EE Java 2 Platform Enterprise Edition ABAP Advanced Business Application Programming objects or Microsoft s .NET among others. Additionally the business application may represent web based applications accessed and executed by remote clients or client applications via the network e.g. through the Internet . Further while illustrated as internal to the application server one or more processes associated with a particular business application may be stored referenced or executed remotely. For example a portion of a particular business application may be a web service associated with the application that is remotely called while another portion of the business application may be an interface object or agent bundled for processing at a remote client such as client application . Moreover any or all of the business applications may be a child sub module or portion of another software module or enterprise application not illustrated without departing from the scope of this disclosure. Still further portions of the business application may be executed by a user or operator working directly or locally at the application server as well as remotely at clients .

The operations of the business application may be associated with one or more UIs used to present and receive information from users interacting with the business application . In the illustrated example users can access the business application at clients and the business application can execute to generate one or more defined UIs for presenting or receiving information responsive or related to the requests and information provided or requested by the users. As illustrated the business application includes a dispatcher a UI request handler a UI controller a repository request handler and a meta object instance . In some instances some or all of the these additional modules and components may be combined into a single module operable to perform the operations associated with each of the described components as well as various combinations of modules. In other instances one or more of the modules components may not be included in the system including some or all of the functionality performed by those removed modules components. The set of components illustrated in are meant to represent a single implementation and can be modified for any number of alternative or additional instances. Additionally some or all of the components may be used in associated with embedded in or modules of the business application as well as an enterprise software system not illustrated . In some implementations one or more of the components including the business application can be executed by a different processor or system external to the application server such as by a server or other system communicably coupled to the application server through network . For example the business application may be provided as an on demand service via a cloud computing network or platform such as a web service accessible via network or as a service provided on a dedicated server or computer other than the application server .

The dispatcher receives and processes requests sent to the business application or to the application server as a whole and determines which entities and instances should receive and or handle a particular request. The dispatcher may be a process associated with the business application to determine whether to instantiate a new instance of a business application process or to provide information to an existing business application process instance. Additionally the dispatcher may parse requests to determine which business application processes are to be executed in response to a request. For outgoing data and information the dispatcher can route information to an appropriate entity such as one of the clients associated with an initial request or submission.

The UI request handler receives requests forwarded by the dispatcher and along with the UI controller determines the appropriate actions to take in association with the business application . Specifically the UI request handler may receive and interpret a request for a particular UI or portion of the business application and may then determine the appropriate UI to present with the UI controller assisting in presenting and managing the operations performed by the selected UI. Specifically the UI controller can interpret input from the requestor and initiate a response by calling one or more operations associated with the objects and UI elements presented in the present UI such as operations associated with at least one object e.g. a meta object a business object etc. associated with the presented UI. For example the UI controller may direct or identify one or more meta object instances associated with the UI to perform the operations initiated or associated with the received request.

In some instances in handling the request the UI controller can convert the request into an understandable format for one or more meta objects and or models associated with the UI to perform the processing of the associated information such as items stored within the memory cache of the application server i.e. a UI model a UI text model or a business object BO model among others as well as items stored within the database server including a set of business object data a set of UI models a set of BO models or a set of UI text models . The UI controller can notify the appropriate model of the meta object of the request possibly causing a change in the model or meta object s state. The UI controller or an associated view controller can be used to determine the changed state of the model or meta object and generate an appropriate responsive UI. The data for populating the responsive UI may be retrieved from information defining the modified state of the model or meta object.

A repository request handler can handle and interpret requests received through the UI i.e. from a particular client or from a user to determine if additional information from one or more repositories including a local or remote metadata repository is needed. If the request requires additional information or metadata associated with a particular meta object or model the repository request handler can identify the UI element associated with the request determine the appropriate repository to access and retrieve and return a set of information associated with that UI element and its associated meta object. The repository request handler in some instances with the assistance of the UI controller can generate a new UI associated with the identified UI element for presenting the appropriate information requested. In some instances this may include information from the UI model the UI text model or the BO model illustrated within memory cache .

The illustrated meta object instance may include any number of meta objects used in conjunction with a particular business application and its business application processes. In some instances two or more meta object instances may be used in the application server to operate within a single UI associated with the business application as well as two or more UIs associated with different processes operating in the business application . In general each meta object instance is an instance of a particular meta object located within the metadata repository . The metadata repository may store a set of meta objects as well as a Where Used meta object . The set of meta objects can include various objects used or associated with the business application including business objects representing business processes and metadata that can be used to perform actions associated with the business application as well as particular UIs and other objects.

The metadata repository may also include a Where Used Meta Object providing a description of where particular meta objects are used within the business application . In some instances the Where Used Meta Object may be a cached or instantiated version of a Where Used Index included in the database server . The Where Used Meta Object and the Where Used index can store or reference information defining where particular meta objects such as those in the set of meta objects are used including their usage in particular UIs and models. Using the Where Used Meta Object or the Where Used Index the locations of where a particular meta object is associated can be identified the dependencies with one or more other meta objects can be defined and the current or previous instantiated versions of particular meta objects can be determined. In some instances the users or clients who have recently or are currently using the particular meta object can be identified. If information associated with the particular meta object is modified by one user reference to the Where Used Meta Object or the Where Used Index can be used to determine one or more users memory caches to be invalidated allowing changes to be propagated across users to provide the most up to date information for the particular meta object and its related items. In some instances the Where Used Meta Object or the Where Used Index can be used by the business application to identify a path from a particular UI element such as a label within the UI down to a particular repository of information associated with the UI element type or its related entity and further to the exact repository entity or entry associated with the UI element.

As illustrated in the metadata repository is stored within the memory of the application server . Memory can store data and program instructions including the objects their consistency status and other data and information associated with the application server one or more instances of the business application as well as other information relevant to the application server and the processes or operations associated therewith. Memory may include any memory or database module and may take the form of volatile or non volatile memory including without limitation magnetic media optical media random access memory RAM read only memory ROM removable media or any other suitable local or remote memory component. Memory may store various objects or data including classes frameworks applications backup data business objects meta objects indexes jobs web pages web page templates database tables repositories storing business and or dynamic information and any other appropriate information including any parameters variables algorithms instructions rules constraints or references thereto associated with the purposes of the application server and its business application . While memory is illustrated entirely within the application server in some or all of the components illustrated in memory may be stored external to the application server and or to the illustrated environment in some implementations.

Memory also includes a memory cache . In some instances multiple users or clients may access the application server . To increase the speed of responses the application server can use the memory cache to store local cached versions of data associated with the business application and other processes and operations associated with the application server . In the illustrated example of the memory cache stores cached versions of one or more UI models one or more UI text models and one or more business object models . Additional and or alternative sets of information associated with the application server and the business application can be stored in the memory cache as appropriate. In some instances the data and items stored in the memory cache may be populated at run time using information retrieved from the database server . That information may then be stored in the memory cache as it is used by the application server to respond to requests received from one or more clients and other users. To retrieve the information from the database server the application server is illustrated as including a database interface which may include an application programming interface API and associated methods for accessing retrieving and sending information to and from the database server and its associated repositories.

Returning to the items illustrated in the memory cache the set of UI models can define or describe the layout and structure of different UIs as well as those UIs particular binding to one or more business object services and or operations. The set of BO models can describe the underlying business services associated with the system. The set of UI Text models can describe the portions of text included in a particular UI. For example one UI may be used to create a sales order. The UI model for this purpose may be entitled Create Sales Order and may be in a structure providing one or more fields text boxes buttons and other UI elements. Certain UI elements can be bound to or associated with particular business objects which describe the actions to be performed when information associated with the UI element is received or is to be presented. UI elements within a particular UI model can also be linked to various UI text models where the UI text models can describe the text labels and other information to be presented in conjunction with the UI. In one example a particular UI text model can include a set of UI labels and other information to present in a particular UI for several different languages. For example a particular UI text model may define labels for various UI elements in English German Chinese and French. The particular text from the UI model used within a UI can be determined based on the preferences of the user the settings of the business application or other appropriate determining factors.

For each model type used with the business application a corresponding meta object may exist within the metadata repository . The content of the meta objects may comprise the development entities associated with the business application . As described above each model type can have associations to or with other model types. For example an element within a BO model having a node structure may have an association to a related UI text. By using the BO node element in the UI the corresponding UI text can be found by reading and processing the association with the association to the UI text model.

In the illustrated example of the database server represents a back end system in which information associated with the application server as well as one or more other servers or systems is stored. As illustrated the database server includes a processor an interface a set of business object data a set of UI models a set of UI text models and a set of BO models . In the illustrated example the database server stores the back end or persistent versions of the various models and metadata information used in different application servers . The set of business object data stores information associated with particular business objects including metadata defining the business objects as well as information associated with specific instances and versions of different business objects. For example if a business object is instantiated two or more times by different business applications the set of business object data can store information specific to each particular instance. Although only one application server is illustrated in the database server may be associated with a plurality of application servers and business applications allowing the information stored in the database server to be shared or accessed by multiple applications and processes. Additionally although only a single database server is illustrated two or more database servers may be used in the environment .

The database server s processor and interface may be similar to or different than the processor and interface of the application server . In general the interface allows the database server to communicate with components communicably coupled to the network . In some instances the database server and the application server may be directly connected to one another while in other instances the database server and the application server may be combined into a single server or system. The processor can be any suitable type or number of processors and can execute requests for data from one of the repositories within the database server as well as to store data in the appropriate repository sent by one or more clients the application server or other entities or components associated with the illustrated environment .

The illustrated environment of also includes one or more clients . Each client may be any computing device operable to connect to or communicate with the application server and or the database server either directly or via the network using a wireline or wireless connection. Each client includes an interface a processor a memory a client application and a graphical user interface GUI or in client . In general each client comprises an electronic computer device operable to receive transmit process and store any appropriate data associated with the environment of . It will be understood that there may be any number of clients associated with or external to environment . For example while illustrated environment includes two clients alternative implementations of environment may include a single client or multiple clients communicably coupled to the application server and or the database server or any other number of clients suitable to the purposes of the environment . Additionally there may also be one or more additional clients external to the illustrated portion of environment that are capable of interacting with the environment via the network . Further the term client and user may be used interchangeably as appropriate without departing from the scope of this disclosure. Moreover while each client is described in terms of being used by a single user this disclosure contemplates that many users may use one computer or that one user may use multiple computers. In some instances client may represent a general user of the first system while client may represent an administrator or other support entity associated with the application server .

The GUI associated with clients comprises a graphical user interface operable to for example allow the user of the clients to interface with at least a portion of the platform for any suitable purpose such as creating preparing requesting modifying or analyzing data and UIs as well as viewing and accessing documents and files associated with various business transactions. Generally the GUI provides the particular user with an efficient and user friendly presentation of business data provided by or communicated within the system. The GUI may comprise a plurality of customizable frames or views having interactive fields pull down lists and buttons operated by the user. For example the GUI may provide interactive elements that allow a user to enter or select elements of business process instances and business objects associated with the business application in the GUI . Portions of the business application associated with the application server may be presented and accessible to the user through the GUI such as through a web browser or client application for example. More generally the GUI may also provide general interactive elements that allow a user to access and utilize various services and functions of client application . The GUI is often configurable supports a combination of tables and graphs bar line pie status dials etc. and is able to build real time portals where tabs are delineated by key characteristics e.g. site or micro site . Therefore the GUI contemplates any suitable graphical user interface such as a combination of a generic web browser intelligent engine and command line interface CLI that processes information in the platform and efficiently presents the results to the user visually. In some instances the client application may be a remote module agent or portion of the business application allowing users to access and modify UIs data and other information associated with the application server and its business application . In some instances the client application may be a web based application or even a web browser that can perform tasks other than those associated with the application system . In some instances the client application may be used by a remote administrator to manage portions of the business application the application server or the database server .

As used in this disclosure the clients are intended to encompass personal computers touch screen terminals workstations network computers kiosks wireless data ports smart phones personal data assistants PDAs one or more processors within these or other devices or any other suitable processing devices. For example each client may comprise a computer that includes an input device such as a keypad touch screen mouse or other device that can accept user information and an output device that conveys information associated with the operation of the application server the business application or the client itself including digital data visual information the client application or the GUI . Both the input and output device may include fixed or removable storage media such as a magnetic storage media CD ROM or other suitable media to both receive input from and provide output to users of client through the display namely the GUI .

While is described as containing or being associated with a plurality of elements not all elements illustrated within environment of may be utilized in each alternative implementation of the present disclosure. For example although depicts an application server external to network the application server or a portion of the structure systems and functionality associated therewith may be included within network as part of a cloud computing network solution for example. In some additional instances the application server may be a set of servers or other systems that combine to perform the operations associated with the business application . Additionally the database server or portions thereof as well as one or more modules within the application server may be offered as a cloud based solution or distributed across one or more systems including clients . Still further one or more of the elements described herein may be located external to environment while in other instances certain elements may be included within or as a portion of one or more of the other described elements as well as other elements not described in the illustrated implementation. Further certain elements illustrated in may be combined with other components as well as used for alternative or additional purposes in addition to those purposes described herein.

As illustrated in multiple clients are connected to one or more application servers using a single database server or database instance . The clients can be executing a particular client application such as a user interface based client application such as a web application or other web based application. The client application may be running in a native execution environment or using a particular program such as Microsoft Internet Explorer or another suitable browser using a rendering framework such as the Silverlight rending framework.

In a first application server process possibly associated with the business application of is executed. The first application server process is associated with a particular business object or set of business objects . In the current example the business object allows for the creation of content by associated users such as a Sales Order business object. A UI text meta object may be associated with the particular business object such that particular UI text may be associated with one or more fields within a UI associated with the business object Further the application server process can identify a particular UI model or defining the structure of the UI to be presented along with connections and bindings to one or more business objects through a BO model . The BO model may then connect one or more portions attributes or elements to a UI text model . These connections allow the application server process and the business application to process the models and generate an appropriate user interface associated with the application server process UI texts such as the UI label of Status can be associated with the status attribute of one or more BOs. In other words the status attribute of the business object refers to the UI text of Status. Using the meta model schema described herein the same UI text instance e.g. the UI label Status can be used or associated with multiple entities of different business objects as well as in many different UI models . The different usages of a particular UI text instance as well as business object or UI can be stored and persisted within the central Where Used Index of the database server which can be accessible by one of the application server processes or the business application as well as available tools or other applications through the Where Used meta object illustrated as and in the different application server processes and .

As illustrated at the circle labeled the client application is executing a specific instance of a user interface application using the UI request handler the UI controller and one or more business objects associated with the user interface application . The specific meta model content i.e. meta object for the UI application is stored in the metadata repository or associated with the application server process performing the operations and processes associated with the UI application . In some instances the application server process may store and access information on and instances of the business objects and meta models in a local storage location such as the memory cache or alternatively by accessing the appropriate data information and models at the database server using the database interface illustrated as database interface in application server process and in application server process .

The illustrated example of the UI application is entitled Neuer Kundenauftrag in German or New Sales Order in English. The title of the UI application is retrieved from the UI text model associated with the UI model used to generate the visual representation of the UI application . The language specific version of the UI text model can determine the appropriate UI text information to include within the UI application . As previously described portions of the UI application can be associated with specific business objects. As the case in the Sales Order business object is associated with the UI application allowing users to create a new instance of the Sales Order business object. As such various elements attributes and information associated with the Sales Order business object are included in the UI application . Turning to the attribute Status is included under the set of entries entitled Allgemein or General in English . However as illustrated in the UI text label reads as Statu as opposed to the correct German term of Status. The error may have been generated due to a typographical error a translation error or any number of other types of errors that may occur.

Returning to the UI application may be associated with or the application server process may recognize and process one or more triggering user operations or actions. In some instances specific user supplied button combinations may cause the UI application to enter a UI text correction mode generate a new window associated with the UI application or provide additional information on the UI text model associated with the identified error or item to be modified. The triggering operation may include a keyboard combination such as a shortcut key combination a mouse gesture a keyboard mouse combination such as a mouse over action plus a keyboard entry an option selected after a right button mouse click on the UI text or any other suitable triggering actions. Additionally placing the focus of the UI on the element and using a menu action to select the element or label is a possible triggering action. In some instances a user may cause the UI application to enter an editing mode then allowing the user to select a particular element or UI text item to be modified. As illustrated in and by circle the triggering operation or action can be entered at the UI application within the client application in turn causing the repository request handler to retrieve a set of information associated with the identified UI element or text label. Specifically the repository request handler can determine the UI text or element from the UI selected or associated with the trigger and request a corresponding UI text key. The UI text key can be identified through the use of the Where Used meta object to determine the UI text element selected and its unique key to determine the UIs and other locations in which the UI text element is located and or used. The repository request handler can return for instance an object based navigation OBN key for the UI text factsheet associated with the identified or selected UI element the key also represented as the title of the UI text factsheet .

As illustrated by the circles labeled an instance of the UI text factsheet can be generated by a second application sever process once the OBN key for the UI text factsheet associated with the UI element is returned. The UI application s UI text factsheet may be a new window within the client application or the UI text factsheet may take the place of the previous window for the UI application . illustrates an example of the generated UI factsheet associated with the Statu UI text identified in . The OBN key becomes the label of the UI text factsheet presented where the OBN key for the Statu UI text label is GEN BYD 009826. As illustrated a set of information defining the UI text element is presented including information regarding the creation of the UI text element the technical details of the UI text element such as a package category original language and the current language in which the UI text element is presented . Additionally a table illustrating the available languages in which the UI text element is associated is presented as well as the text that is presented to users in each instance. When the UI text factsheet is generated the UI text meta object acts similar to a regular business object with the UI text meta object being used by the UI controller in the second application server process to present the UI text factsheet . As illustrated the UI text factsheet may include an edit button allowing a user to select the edit button to modify information within the UI text factsheet and therefore for the UI text element in the entire system.

Returning to once the modifications are made and saved within the UI text object instance floorplan the UI request handler and UI controller can modify the UI text meta object as well as the UI text model and associated with the UI text meta object In some instances the modification can be stored in the database server s version of the associated UI text model by sending the change through the database interface so that other users and instances of the application server process can use the updated information to reflect the modifications in all other instances of the UI text element within other UI applications . In some instances the change may require the memory cache or the cached UI text model s to be invalidated so that currently running processes retrieve the updated information from the database server as opposed to using the outdated information located in the memory cache . In the illustrated example users working with the German version of the UI text element Status can now see the correct label associated with the UI text element. In doing so the architecture allows for immediate and straight forward modifications to be made to UI text elements and information.

At a UI is presented to a client application where the UI includes one or more fields associated with at least one business object and can be defined by a particular UI model. The elements of the UI model can be bound to the at least one business object through connections to the at least one business object s business object BO model. The BO model and the UI model can further be connected to a UI text model defining the UI text to be associated with the various UI elements included within the UI model and associated with particular portions of and information related to the at least one business object and the presented UI. The client application can be a client side portion of an overall business application a web browser a web based application or an application executed locally at an application server.

At a particular UI text element within the UI is identified for current modification. In some instances the identification of a particular UI text element can be performed by processing received user input such as a predefined keyboard shortcut mouse gesture or menu selection among others The user input can reflect a triggering action or event that identifies the particular UI text element as a candidate for modification.

At a unique identifier associated with the identified UI text element is identified or determined. Because the presented UI is based on a UI model associated with at least one BO model and at least one UI text model the particular UI text element identified can be located based on its position within the presented UI as well as its relation to a particular UI element such as a text field or other element. The unique identifier associated with the identified UI text element can be used to identify one UI text element used in multiple locations and instances within a particular business or enterprise application. In some instances a where used index can be used to document and locate the various places UIs and business objects to which a particular UI text element is used and or associated. By modifying the information associated with the unique identifier the information associated with each instance of the UI text element can be modified in one step as opposed to requiring modifications to each instance of the UI text element within the associated application.

At a set of metadata defining the UI text model associated with the uniquely identified UI text element is retrieved. In some instances the metadata associated with the uniquely identified UI text element can be retrieved from a local memory cache storing a runtime instance of the UI text model. In other instances the metadata can be retrieved from a database server or instance in which a persistent copy of the metadata is stored. In some of those instances the metadata can be stored within a memory cache until any changes associated with the metadata are finalized and or accepted in order to avoid causing data access issues with other application instances attempting to retrieve the metadata.

At a UI text factsheet for displaying the metadata associated with the uniquely identified UI text element can be generated and presented i.e. via the client application . In some instances the UI text factsheet can contain information on the uniquely identified UI text element including the UI text element s status the labels and information presented when the UI text element is provided in a UI the location of the UI text element object as well as the labels of the UI text element in one or more languages such as in a multi language system.

At a determination is made as to whether a request to modify a portion of the metadata for the uniquely identified UI text factsheet and thus the associated UI text element is received. If no request to modify the metadata is received method skips to where the UI is presented again. In some instances a window presenting the UI text factsheet may be closed with the original UI again presented to the client application as in . Alternatively the original UI may be regenerated and presented to the client application. If however a request to modify the metadata is received method continues at . The request to modify the metadata associated with the UI text element may be received through the user at the client application selecting an edit button or otherwise providing an indication that edits to the UI text factsheet are to be made.

At an editable version of the UI text factsheet for the metadata associated with the uniquely identifiable UI text element is presented. In some instances the initial UI text factsheet presented at may be editable as originally presented. The editable UI text factsheet may allow users to modify change or add to the metadata describing the particular UI text element. In some instances the editable version of the UI text factsheet may be a UI text object instance floorplan or a predefined editable user interface template. Updates to the metadata received through user submissions via the client application are received and can be reflected in the metadata describing and associated with the UI text element and its UI text factsheet at .

At a determination is made as to whether an indication that the edits to the UI text factsheet and related metadata are complete is received. If no indication is received method returns to as updates to the metadata are received. If however an indication that the edits are complete is received method continues at . The indication that the edits are complete may include for example the activation of a Save button within the editable UI text factsheet the closing of a window containing the editable UI text factsheet or any other suitable indication received from the client application.

At the modified metadata is persisted in the backend persistent database. In some instances this may include modifying a local memory cache storing a set of information defining the metadata associated with the UI text element and its factsheet. The persistent database may be separate from the runtime environment performing the operations associated with the presentation and modification of the UI. At the local memory cache associated with the modified UI text element can be invalidated causing the updated information to be retrieved by other users and client applications when accessing a UI including the modified UI text element. In some instances the memory caches for multiple application servers including those other than where the UI text element was modified may be invalidated as well to ensure that the newest version of the modified UI text element is used. At the updated UI can be presented to the client application reflecting the modifications made to the UI text element within the UI. In some implementations one or more other currently executing instances of the UI may be refreshed to provide the most up to date version of the UI.

The preceding figures and accompanying description illustrate example processes and computer implementable techniques. But environment or its software or other components contemplates using implementing or executing any suitable technique for performing these and other tasks. It will be understood that these processes are for illustration purposes only and that the described or similar techniques may be performed at any appropriate time including concurrently individually or in combination. In addition many of the steps in these processes may take place simultaneously concurrently and or in different orders than as shown. Moreover environment may use processes with additional steps fewer steps and or different steps so long as the methods remain appropriate.

In other words although this disclosure has been described in terms of certain embodiments and generally associated methods alterations and permutations of these embodiments and methods will be apparent to those skilled in the art. Accordingly the above description of example embodiments does not define or constrain this disclosure. Other changes substitutions and alterations are also possible without departing from the spirit and scope of this disclosure.

