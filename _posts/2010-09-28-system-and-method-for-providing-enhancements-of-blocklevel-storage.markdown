---

title: System and method for providing enhancements of block-level storage
abstract: A block storage service provides block-level storage to a plurality of distinct computing instances for a plurality of distinct users. For each of one or more of the plurality of distinct computing instances, information about data being stored in the block storage service is determined. Based on the information about the data being stored in the block storage service, a block storage transaction enhancement for the data being stored in the block storage service is determined. The block storage service performs the selected block storage transaction enhancement with respect to the data being stored in the block storage service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08688660&OS=08688660&RS=08688660
owner: Amazon Technologies, Inc.
number: 08688660
owner_city: Reno
owner_country: US
publication_date: 20100928
---
The recent revolution in technologies for dynamically sharing virtualizations of hardware resources software and information storage across networks has increased the reliability scalability and cost efficiency of computing. More specifically the ability to provide on demand virtual computing resources and storage through the advent of virtualization has enabled consumers of processing resources and storage to flexibly structure their computing and storage costs in response to immediately perceived computing and storage needs. Virtualization allows customers to purchase processor cycles and storage at the time of demand rather than buying or leasing fixed hardware in provisioning cycles that are dictated by the delays and costs of manufacture and deployment of hardware. Rather than depending on the accuracy of predictions of future demand to determine the availability of computing and storage users are able to purchase the use of computing and storage resources on a relatively instantaneous as needed basis.

Virtualized computing environments are frequently supported by block level storage. Such block level storage provides a storage system that is able to interact with various computing virtualizations through a series of standardized storage calls that render the block level storage functionally agnostic to the structural and functional details of the volumes that it supports and the operating systems executing on the virtualizations to which it provides storage availability.

Unfortunately the paradigm of block level storage that is functionally agnostic to the structural and functional details of various virtualizations forces enhancements of the storage to be performed if at all at the level of the virtualization rather than at the level of the storage. Performance of storage enhancements at the virtualization frequently involves prohibitive inefficiencies such as transmission and retransmission of data across a network which increase the cost and delay associated with some enhancements and result in the decision not to undertake others. The user is left with overall storage performance that lacking enhancements at the level of the storage itself produces a negative impact on the efficiency of the virtualized computing supported by the storage.

While the technology described herein is susceptible to various modifications and alternative forms specific embodiments thereof are shown by way of example in the drawings and will herein be described in detail. It should be understood however that the drawings and detailed description thereto are not intended to limit the disclosure to the particular form disclosed but on the contrary the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the present disclosure as defined by the appended claims.

In an environment providing on demand storage associated with a cloud computing service or other virtualized computing a block storage service provides block level storage to a set of distinct computing instances for a set of distinct users.

Embodiments provide a block storage transaction enhancement function for selecting block storage transaction enhancements applicable by the block storage service to data stored by the block storage service as blocks in the block level storage. Block storage transaction enhancements are selected based on information about the data stored by the block storage service. The information can in some embodiments include or be based on volume formats of the volumes or formats of other data structures such as database tables stored in the block storage service. The information can in some embodiments also include or be based on content of block data transaction instructions received by the block storage service. The block storage transaction enhancement function also performs the block storage transaction enhancements with respect to the data stored by the block storage service. As used herein the term block storage enhancement or block storage transaction enhancement includes both optimizations and features that improve the execution or operation of data storage or retrieval.

Embodiments thus help to alleviate the difficulties previously associated with the inability to provide various storage enhancements with respect to data stored as blocks in block level storage. In some embodiments the block storage service receives a configuration request from a user indicating a format or a purpose of a volume or other grouping of data stored as blocks in the block storage service that is associated with a virtualized computing instance. The configuration request may be received at the time of creation of the data structure in the block level storage or at a subsequent time. The configuration requests may be received through a user interface such as a web services interface. The configuration requests may be modified.

The block storage service receives block data transaction instructions from the virtualized computing instance. The block data transaction instructions are directed to volumes or other groupings of data stored as blocks in the block storage service that are associated with the virtualized computing instances.

A block storage transaction enhancement for the data in the block storage service that is associated with the virtualized computing instance is selected by analyzing the information about the data. The block storage transaction is performed with respect to the data stored as blocks in the block storage service. Embodiments thereby provide storage enhancements on the block storage service that could not be otherwise provided at an equivalent cost efficiency. Examples of such enhancements include optimizations such as object placement replication and caching. Examples of such enhancements also include features such as defragmentation for contiguous read transactions encryption and compression among others. While certain examples of block storage transaction enhancements are explained through the following text and accompanying drawings one skilled in the art will realize in light of the present disclosure that other enhancements not discussed herein are likewise included within the scope of certain embodiments.

Generally speaking virtualized computing which may also be referred to as virtual computing or virtualization may refer to techniques for configuring a physical computer system so that it appears from a software perspective to behave like multiple independent virtual computer systems. Virtualized computing may be distinguished from a conventional multitasking operating system OS . A typical OS may provide a number of protected memory spaces in which different processes may execute without interfering with one another as well as a common set of privileged routines to manage execution of those processes and coordinate access to system resources. By contrast virtualized computing techniques may be employed to configure multiple virtual machines each of which may execute its own operating system which may be different for different virtual machines. Access to these machines may then be distributed to different users over a network.

By decoupling the configuration and operation of a virtual machine from the underlying physical hardware on which the virtual machine executes virtualized computing may enable a user to configure a virtual machine according to a defined set of specifications and to recreate the previously configured virtual machine at a later time all without altering the configuration of the underlying physical hardware or the storage to which the virtual machine attaches.

An example of a system that may be configured to implement virtualized computing is illustrated in . In the illustrated embodiment physical system includes a processor coupled to a system memory . For example processor may correspond to any type of microprocessor configured to execute instructions defined by a particular instruction set architecture ISA such as the x86 x64 ISA the PowerPC ISA the SPARC ISA the ARM ISA or any other suitable ISA. System memory may correspond to any type of storage device configured to store data and instructions executable by processor . For example system memory may include any of various types of random access memory RAM read only memory ROM non volatile memory e.g. flash memory magnetic memory or any other suitable type of memory.

System memory may be configured to store instructions and data that when executed by processor or another processor are configured to implement an operating system and virtualization module . Generally speaking operating system may correspond to any suitable type of operating system such as a version of Microsoft Windows Apple MacOS Unix Linux or another operating system. Typically operating system may be configured to serve as an interface between applications and the resources provided by the computer system such as memory mass storage devices communications devices system services and the like.

Virtualization module may be configured to implement an environment within which multiple different virtual machines may operate. Virtualization module may also be referred to as a hypervisor or a virtual machine monitor. In the illustrated embodiment virtualization module may be implemented as a distinct layer of software from operating system a configuration that may be referred to as a hosted hypervisor. In other embodiments rather than running in a distinct layer virtualization module may be integrated with operating system in a configuration that may be referred to as a native hypervisor. Some examples of hosted hypervisor implementations of virtualization module may include VMware ESX ESXi VMware Fusion Microsoft Virtual PC VirtualBox and Parallels Desktop Some examples of native hypervisor implementations may include Xen VMware Infrastructure Logical Domains Hypervisor and Parallels Server . Other examples are possible and contemplated.

In the illustrated embodiment virtualization module is configured to implement a number of virtual machines as well as a virtual network virtual storage and a web services interface . Examples of each of these elements will be discussed in turn it being noted that numerous variations and alternative configurations are possible. In various embodiments various elements may be referred to using alternative terminology. For example individual virtual machines are referred to herein as instances such as distinct computing instances and the state of various virtual machines e.g. their applications data and configuration may correspond to Machine Images or MIs. These distinct computing instances can support distinct users.

It is noted that processes that implement various virtualized elements such as virtual machines virtual network and virtual storage may be configured to execute on different physical hardware than virtualization module itself. For example virtualization module may be configured to employ remote procedure calls or other techniques to cause a process or thread corresponding to a particular virtual machine or any other virtualized element to be executed on a different physical system that possibly may have a different configuration than physical system .

Any number of virtual machines may be deployed depending on the resource capabilities of the underlying physical system as well as virtualization module . Generally speaking each of virtual machines may be configured to host its own copy of an operating system and applications which may execute independently of the other virtual machines . For example illustrates virtual machine as including a virtual operating system as well as one or more applications . Virtual operating system may correspond to any suitable operating system which may include any of the types of operating systems mentioned above with respect to operating system . Virtual operating system may also be distinct from the underlying operating system that executes on physical computer system . For example virtual operating system and operating system may be completely different operating systems. Alternatively they may correspond to the same type of operating system but may each have distinct copies of data structures and or executable code and may be configured to execute separately from one another. Virtualized operating system may contain a monitoring module for tracking operations virtualized operating system such as through remote metadata monitoring using injectable code.

Each virtual machine may be configured to operate as though it were an independent physical machine possessing those resources of physical system that have been allocated to the virtual machine . For example virtual machine may be configured to execute a version of Microsoft Windows and one or more Windows applications while virtual machine may be configured to execute a version of Linux and one or more Linux applications. In some embodiments the operating systems and applications executing on a given virtual machine may be incapable of discerning that they are running in a virtual rather than a physical system. Thus virtualization may be performed transparently with respect to each virtual machine .

In various embodiments virtualization module may be configured to cause virtual machines to be instantiated modified and destroyed in response to configuration requests received by virtualization module e.g. from clients that may be external to physical system . The client may correspond to a process executing on behalf of a user either on physical system or on a different system configured to communicate with physical system e.g. via a network.

In various embodiments the client s configuration request may include configuration parameters for the requested given virtual machine . For example the client may specify particular resources for the given virtual machine such as an amount of memory a particular level of processor performance or the like. Alternatively the client may specify a particular type or class of virtual machine from among a set of available configurations. For example virtualization module may present generic small medium large and or other types of virtual machine configurations for selection by the client each having defined memory performance and or other characteristics. In some embodiments these characteristics included in the configuration request may include storage parameters such as a volume format and destination location or destination locations for storing portions of virtual storage or other data structures associated with a virtual machine . In some embodiments these characteristics may include a source location retrieving portions of virtual storage or other data structures associated with a virtual machine . Such source and destination locations can be locally hosted within physical system or accessed remotely e.g. via a network. Such source and destination locations can include a block storage service in which volumes within virtual storage are stored as groups of blocks in block level storage.

In some embodiments the client s configuration request may also include information regarding how the state of the given virtual machine should be initialized. For example the request may specify the operating system that should be booted the application s that should be available and or any data libraries or other inputs that may be needed to perform the client s computation. In various embodiments the client may select an initialization state from a number of options e.g. may select from a list of available operating systems may provide a detailed memory image reflecting the desired initial state of the given virtual machine e.g. reflecting executable code and or data or a combination of these or other techniques.

In response to a configuration request to create or initialize a given virtual machine virtualization module may be configured to allocate resources of physical system to the given virtual machine such as by setting aside a certain amount of system memory to be used by the given virtual machine as its own virtual system memory. Virtualization module may also initialize the given virtual machine . For example the given virtual machine may be initialized according to the client s specification or to a default state.

Once configured and initialized which may occur concurrently or as part of the same operation given virtual machine may then begin operating. For example operating system may boot or resume from a previously defined state. Application s may execute either in an interactive fashion i.e. receiving input from the client during operation or autonomously. In various embodiments as described below virtualization module may provide a given virtual machine with access to storage as well as a virtual network that may allow given virtual machine to communicate with other virtual machines .

At some point a request to modify or terminate given virtual machine may occur. For example a client may initiate such a request when the task for which given virtual machine was configured has completed or for some other reason. Alternatively virtualization module may initiate such a request for example in the event that the machine becomes unstable or violates some aspect of the client s terms of use. In response a given virtual machine may be modified or terminated and its resources freed for use by other virtual machines. For example virtualization module may attempt to perform an orderly shutdown of given virtual machine if possible. Virtualization module may archive or otherwise preserve the state of given virtual machine information about its configuration within the virtual computing environment and or any other salient information. Once these or any other housekeeping tasks have completed given virtual machine may cease to exist as an entity.

In addition to providing for the configuration and operation of virtual machines virtualization module may be configured to provide for virtualized network connectivity among virtual machines via virtual network . For example virtual network may be configured to emulate a local area network LAN or any other suitable type or topology of network. Through virtual network virtual machines may be configured to communicate with one another as though they were physical machines connected to a physical network.

In some embodiments virtualization module may be configured to bridge virtual networks implemented on different physical systems in order to implement virtual networks of large scale. For example virtual machines implemented on distinct physical systems may nonetheless be able to communicate with one another as part of the same general virtual network . In such embodiments different instances of virtualization module may be configured to communicate information with one another via a physical network connecting their respective physical systems in order to implement virtual network communication among their virtual machines .

Virtualization module may also be configured to provide virtual machines with access to mass storage shown as virtual storage . For example virtual storage may be configured as a block storage device e.g. a logical storage volume composed of blocks stored on a block storage service a file system a database or any other suitable type of mass storage that may be presented to a computer system. Embodiments of virtual storage may also be referred to generically as mass storage resources. In some embodiments virtual storage may be implemented as a virtual network connected device accessible to virtual machines via virtual network . For example virtual storage may be configured as a virtualized network attached storage NAS device as a virtualized storage area network SAN as a storage service accessible through Internet protocols e.g. as a web services based storage service or in any other suitable fashion. In some embodiments virtual storage may be implemented via a service either locally implemented or remotely accessible across a network.

In some embodiments management of virtual storage may be handled by virtualization module directly. For example virtualization module may include the functionality necessary to implement a virtualized volume server file server or other type of mass storage architecture and communicate directly with storage devices such as by sending block data transaction instructions to a block storage service. In other embodiments virtualization module may instead provide interfaces through which virtual machines may access storage that exists and is managed externally to virtualization module . For example some other software component executing on physical system or another system may be configured to provide mass storage as well as an application programming interface API through which to access storage. Virtualization module may then be configured to pass storage access requests such as block data transaction instructions from virtual machines to this external API.

Virtualization module may be configured to support a number of different types of interfaces through which a client may interact with a particular virtual machine . For example virtualization module may be configured to perform basic terminal emulation to allow a client to provide textual input to virtual machines and to return textual output for display to the client. In cases where a given virtual machine supports more sophisticated user interfaces such as windowing systems or other types of graphical user interfaces GUIs that may be hosted by software executing within given virtual machine virtualization module may be configured to pass input from the client s input devices e.g. keyboard pointing device etc. to given virtual machine and to pass graphical output to the client.

In some embodiments virtualized computing may be offered as an on demand paid service to clients. For example an enterprise may assemble and maintain the various hardware and software components used to implement virtualized computing and may offer clients access to these resources according to various pricing models e.g. usage based pricing subscription pricing etc. . Thus clients may have access to a range of virtual computing resources without having to incur the costs of provisioning and maintaining the infrastructure needed to implement those resources. Generally speaking to provide virtualized computing services to clients virtualization module may be configured to present a virtualized computing service API to clients through which the clients may submit various types of requests for virtualized computing services. For example as described in greater detail below clients may submit requests via the virtualized computing service API for virtualized computing resources to be instantiated initialized and or deleted. Clients may also submit requests for various computations to be performed by virtualized computing resources.

In the embodiment illustrated in virtualization module may be configured to present virtualized computing resources such as virtual machines to clients as part of a web service via web services interface . Generally speaking a web service may refer to computing functionality that is made available to clients through calls made by clients to one or more web services endpoints where the web services endpoints are addressable by the clients according to an application level Internet based transport protocol such as the Hypertext Transfer Protocol HTTP . For example a web services endpoint may implement a particular API that defines the web services operations that clients may request. In some embodiments web services interface may be configured to implement the addressable web services endpoint s and may include functionality configured to receive and send web services request and response information with respect to clients.

To request that the web service perform a particular operation clients may format the request in the manner specified by the API and convey the request to the addressable endpoint. For example the endpoint may be addressable according to a Uniform Resource Indicator URI of the form endpoint.domainname.toplevel such as e.g. virtualcomputing.company.com. Alternatively the endpoint may be addressable according to a numeric form address such as e.g. an IP address.

In various embodiments web services interface may be configured to be invoked by clients in any of a number of suitable ways. For example web services interface may be configured to implement a Representational State Transfer REST style web services architecture. Generally speaking in a REST architecture the requested web services operation and its various parameters may be appended to the web services call that is made to the web services endpoint according to the transport protocol. For example the details of the requested operation such as a configuration request may be included as parameters of an HTTP request method such as GET PUT or POST. Alternatively web services interface may be configured to implement a document or message oriented architecture. For example the details of the requested operation may be formatted by the client as an eXtensible Markup Language XML document and encapsulated using a version of the Simple Object Access Protocol SOAP . Upon receiving such a document web services interface may be configured to extract the details of the requested web services operation and attempt to perform the operation.

In the context of virtualized computing as a web service it is contemplated that the API implemented by web services interface may support any or all of the types of operations made available to clients by virtualization module including storage operations such as the execution of requests to store data on a volume in block level storage. Such storage requests are in one embodiment block data transaction instructions. For example an API may support the transmission receipt and execution of block data transaction instructions. The API may further support the configuration initialization modification and termination of storage arrangements through configuration requests as discussed above. Additionally in some embodiments the API may support the exchange of input and output textual graphical audio or otherwise between the client and virtual machines or other virtualized resources.

Referring now to a network diagram for an example embodiment in which multiple computing systems execute programs and access storage is depicted. A program execution service manages the execution of programs on various host computing systems located within a data center and a block storage service works in conjunction with multiple other storage systems at the data center to provide block level storage to those executing programs. Enhancements to the block level storage as described below are executed.

In this example embodiment data center includes a number of racks and each rack includes a number of host computing systems as well as an optional rack support computer system . Host computing systems on the illustrated rack each host one or more virtual machines as well as a distinct node manager associated with the virtual machines on that host computing system. Node manager manages the virtual machines associated with the host computing system on which node manager resides. One or more other host computing systems also each host one or more virtual machines in this example. Each virtual machine may act as an independent computing instance for executing one or more program copies not shown for a user not shown such as a customer of a program execution service accessed through a web services interface such as the web services interface discussed with respect to .

In addition the example data center of includes host computing systems that do not include distinct virtual machines but may nonetheless each act as a computing node for one or more programs not shown being executed for a user. A node manager module executing on a computing system not shown distinct from host computing systems and is associated with host computing systems and to manage computing nodes provided by those host computing systems in a manner similar to the node manager modules for host computing systems . Rack support computer system may provide various utility services for other computing systems local to its rack e.g. long term storage metering and other monitoring of program execution and or non local block data storage access performed by other computing systems to the local rack etc. as well as possibly to other computer systems located in the data center. Each of computing systems and may also have one or more local attached storage devices not shown such as to store local copies of programs and or data created by or otherwise used by the executing programs a well as various other components.

An optional program execution service PES system manager is also illustrated. PES system manager is a computing system executing a PES system manager module to provide assistance in managing the execution of programs on the computing nodes provided by host computing systems and or optionally on computing systems not shown located within one or more other data centers or other remote computing systems available over a network . PES system manager may provide a variety of services in addition to managing execution of programs including the management of user accounts e.g. creation deletion billing collection of payment etc. . PES system manager may further provide the registration storage and distribution of programs to be executed as well as the collection and processing of performance and auditing data related to the execution of programs. In some embodiments PES system manager may coordinate with node manager modules and to manage program execution on computing nodes associated with node manager modules and . Data center also includes a block storage service which is discussed in greater detail below with respect to for providing block level data storage to programs executing on computing nodes provided by host computing systems and located within data center or optionally computing systems not shown located within one or more other data centers or other remote computing systems available over a network .

Block storage service executes a block level storage manager to assist in the operation of block storage service . Specifically and with reference again to block level storage manager assists in managing the availability of block data storage to programs executing on computing nodes provided by host computing systems and located within data center or optionally computing systems not shown located within one or more other data centers or other remote computing systems available over a network .

In the embodiment portrayed in and access to volumes is provided over an internal network to programs executing on nodes and in response to block data transaction instructions. Block level storage manager may provide a variety of services related to providing block level storage functionality including the management of user accounts e.g. creation deletion billing collection of payment etc. . Block level storage manager may further provide services related to the creation usage and deletion of volumes in response to configuration requests. Block level storage manager may also provide services related to the collection and processing of performance and auditing data related to the use of volumes . Such performance and auditing data may include measurements of the effectiveness of storage enhancements executed with respect to data stored in storage units 

Block level storage manager may also provide services related to the creation usage and deletion of snapshots of data on block storage service through a snapshot manager . Such snapshots are fixed point in time representation of the state of corresponding portions or ones of volumes . In some embodiments snapshots are used for the purpose of executing certain block storage transaction enhancements such as defragmentation and object placement while expediting the release of system resources for the performance of concurrent operations. In some embodiments snapshots may be stored locally. Alternatively snapshots may be stored at a location remote from block storage service .

Returning to block level storage manager includes a transaction enhancement function . In one embodiment working in conjunction with other components of block level storage manager transaction enhancement function determines block storage transaction enhancements applicable by block storage service to data such as data in volumes or in other data structures not shown based on information about the data stored by block storage service . Working in conjunction with other components of block level storage manager transaction enhancement function also performs the block storage transaction enhancements with respect to the data.

Block level storage manager additionally includes a configuration request interface for receiving information from users about the configuration and characteristics of data structures indicating among other parameters volume formats of volumes or other data structures stored in storage units . Such configuration requests can be received at the time of volume creation or after a volume is created. Similarly such configuration requests may be applicable to other data groupings such as database tables. Such configuration requests can also be modified after creation of a data grouping to change the information about the data that is provided to block storage service . In one embodiment block level storage manager further includes a transaction enhancement API for extracting from block data transaction instructions information about the data being stored by the block storage service. The information is useful in determining block storage enhancements and in some embodiments includes characterizations of instruction content embedded in block data transaction instructions by applications or operating systems of the distinct computing instances sending the block data transaction instructions.

Block level storage manager further includes a read prediction function for determining which blocks within storage units are likely to be read from storage units within a given interval. Listings of blocks within storage units that are likely to be read from storage units in such an interval may be recorded as read prediction patterns not shown . Read prediction patterns are discussed below with respect to . In one embodiment when blocks already stored within storage units are predicted to have a suitably high likelihood of being read from storage units those blocks can be read from storage units to read ahead entries in cache . Similarly when content of one or more block data transaction instructions received by block storage service for storage units includes blocks predicted to have a relatively high likelihood of being read in a suitably short period of time such blocks can be written to the appropriate one of storage units and also stored as write retain entries in cache . Examples of an embodiment of use of are cache is discussed below with respect to .

In one embodiment cache will be implemented using storage structures e.g. memory that have a faster response time than that of storage units which may be embodied as magnetic disks. Retention of a block in one of write retain entries in cache and read ahead entries in cache results in the ability to respond to a request for the cached block from the relatively faster memory of cache rather than incurring the delay required to fetch the block from one of storage units . In one embodiment the storage enhancement achieved through retention of a block cache thereby results in faster performance of read requests routed to block storage service .

Block level storage manager also includes an encryption function for encrypting data contained in one or more block data transaction instructions received by block storage service prior to storage of the content as encrypted blocks within storage units . One example of an embodiment of use of an encryption function is discussed below with respect to . In one embodiment the storage enhancement achieved through storage of encrypted blocks on storage units results in enhanced security of sensitive data within volumes on storage units 

Further block level storage manager also includes a compression function for compressing data contained in one or more block data transaction instructions received by block storage service prior to storage on storage units as compressed blocks within storage units . One example of an embodiment of use of a compression function is discussed below with respect to . In one embodiment the storage enhancement achieved through storage of compressed blocks within storage units results in enhanced efficiency with respect to the use of storage capacity on storage units 

Additionally block level storage manager includes a replication function for replicating blocks within storage units that are predicted to be read repeatedly or frequently from storage units . One example of an embodiment of use of a replication function is discussed below with respect to . In one embodiment replication to others of storage units of blocks within a first of storage units that are predicted to be read repeatedly or frequently from storage units enables routing of frequent or repeated requests for a particular set of blocks to multiple ones of storage units . Routing of frequent or repeated requests for a particular set of blocks to multiple ones of storage units rather than concentration of those same requests on a single one of storage units allows for parallel execution of the requests rather than queuing and serial execution of the requests. As a result of the parallel execution the storage enhancement achieved through replication of blocks on storage units results in faster response times and more even loading of storage units with respect to requests for blocks within storage units . Such an enhancement may be particularly useful for blocks containing items with a tendency to be read frequently and on which other results depend such as the index of a database.

Block level storage manager further includes a metadata monitoring function for extracting metadata from content of one or more block data transaction instructions received by block storage service . In one embodiment block data transaction instructions are composed of commands and arguments on which the commands operate. For example one embodiment of a block data transaction instruction to store a block of data includes a store command and as arguments includes one or more blocks of data for storage metadata associated with the blocks and one or more block identifiers associated with a location on which the blocks of data for storage are intended to be stored.

Metadata monitoring function monitors and extracts the metadata for subsequent use in determining information used for selecting enhancements to be performed by block storage service . In some embodiments metadata monitoring function may pass extracted metadata to an operating system simulator or to other functions within block level storage manager such as transaction enhancement function . In one embodiment metadata monitoring function provides information that enhances the degree to which block storage service is able to accurately determine the type of storage enhancements appropriate for data stored in storage units and is able to measure the effectiveness of enhancements executed with respect to data stored in storage units . In one embodiment metadata monitoring function interprets the metadata to determine the information about the data being stored in the block storage service. The information about the data being stored in the block storage service can include characteristics of a block transaction instructions of the volumes or other data structures in which the data is being stored or of the data being stored by the block storage service.

Block level storage manager includes an operating system simulator to simulate the functions of an operating system or portions of an operating system such as a file system or other components sending a block data transaction instruction for the purpose of discerning the content and structure of data stored on storage units by monitoring and interpreting metadata from content of block data transaction instructions received by block storage service for storage units . In one embodiment operating system simulator uses metadata from content of block data transaction instructions received by block storage service for volumes to identify the structure content and organization of logical data structures such as files and directories within volumes . Using this information regarding the structure content and organization of logical data structures operating system simulator can in some embodiments determine enhancements measure the effectiveness of enhancements executed with respect to storage units and generate intermediate products such as expected read patterns and data structure maps for use in enhancements executed with respect to storage units 

Additionally block level storage manager includes an object placement function for arranging content of block data transaction instructions received by block storage service in a manner calculated to increase the likelihood of consecutive reads for example as anticipated in a predicted read pattern or for arranging content of one or more block data transaction instructions received by block storage service in contiguous block arrangements representing data structures within volumes . In one embodiment object placement function performs defragmentation on the basis of data structure maps. In an alternative embodiment object placement function places blocks on one of storage units in an order reflecting an expected read pattern. By arranging content of block data transaction instructions received by block storage service for consecutive reads as anticipated in a predicted read pattern or arranging content of block data transaction instructions received by block storage service in contiguous block arrangements representing data structures within volumes embodiments provide storage transaction enhancements that reduce delays in fulfilling read requests by storing blocks in spatial patterns reflecting the order in which the blocks are expected to be read.

As discussed above and further discussed below the functions and components of block storage service support selecting block storage transaction enhancements applicable by block storage service to data stored in storage units of the block storage service based on information about the data and performing the block storage transaction enhancements with respect to the data in the block storage service.

The processes described below with respect to illustrate various actions performed by an embodiment of a system for providing block storage enhancement functions within a system that provides block level storage to distinct computing instances for distinct users. An embodiment of such a system for providing block storage enhancement functions selects block storage transaction enhancements applicable to data being stored in the block storage service. The block storage transaction enhancements are selected based on information about the data being stored by the block storage service. The information includes in some embodiments items of information such as volume formats of volumes or other data structures in the block storage service and information derived from content of block data transaction instructions and metadata received by the block storage service. Embodiments then perform the block storage transaction enhancements. Some embodiments are capable of monitoring the effectiveness of enhancements cancelling ineffective enhancements and providing different enhancements as replacements for the cancelled enhancements.

A block storage transaction enhancement is selected such as the block storage transaction enhancements discussed above with respect to . The selection is based on the information about the data being stored in the block storage service. The block storage transaction enhancement is then performed . The process then ends.

The block storage transaction enhancement is evaluated . In one embodiment evaluating a block storage transaction enhancement includes measuring an effectiveness of the selected block storage transaction enhancement for the data stored in the block storage service. An example of such an evaluation includes determining the number of times that an item of data stored in a read ahead entry of a cache was actually read from the cache.

A determination is made as to whether the block storage transaction enhancement is effective . In one embodiment such a determination includes comparing a measure of effectiveness to a threshold value. For example continuing with the discussion of the example described above with respect to block a number of times that an item of data stored in a read ahead entry of a cache was actually read from the cache can be measured and compared to a threshold value expected for a successful selection of an item of data for storage in a read ahead entry of a cache. If the number of actual reads is above the threshold value then the block storage transaction enhancement is determined to be effective and the process ends. If the measured value falls below the threshold value the block storage transaction enhancement is determined to be ineffective and the enhancement is cancelled . The process returns to step which is described above.

In an alternative embodiment determining whether a block storage transaction enhancement is effective may include comparison of results measured before and after execution of the block storage transaction enhancement. For example a comparison can be made between read response times associated with read requests before and after the replication of a set of blocks on multiple storage units. If response times for read requests decline as a result of the replication the block storage transaction enhancement is determined to be effective and the process ends. If response times for read requests do not decline as a result of the replication the block storage transaction enhancement is determined to be ineffective and the enhancement is cancelled .

In one embodiment block level storage receives blocks for example as part of a set of block data transaction instructions . Blocks arrive at block level storage manager for storage on one or more of storage units as part of one or more of volumes for example as blocks of volume on storage unit . Storage units are in one embodiment typically magnetic disks with response times that are generally longer than those of the memory embodying cache .

If on the basis of expected read pattern block level storage manager determines that there is a high likelihood that blocks will be read from volume on storage unit within a sufficiently short time frame block level storage manager may optimize the storage of blocks by additionally storing blocks in cache as blocks . In response to a subsequent request for access to blocks block level storage manager responds to the request for access to blocks by sending blocks . As a result of the degree to which cache will tend to exhibit faster response than storage unit to a read request responding to the request for access to blocks by sending blocks will result in faster execution of the request for access to blocks than would be possible by responding to the request for access to blocks by reading blocks from storage unit

Similarly in one embodiment if on the basis of expected read pattern block level storage manager determines that there is a high likelihood that blocks will be read from volume on storage unit within a sufficiently short time frame block level storage manager may optimize the storage of blocks by additionally storing a copy of blocks in cache as blocks . In response to a subsequent request for access to blocks block level storage manager responds to the request for access to blocks by sending blocks . As a result of the degree to which cache will tend to exhibit faster response than storage unit to a read request responding to the request for access to blocks by sending blocks will result in faster execution of the request for access to blocks than would be possible by responding to the request for access to blocks by reading blocks from storage unit

If block level storage manager determines that the content of blocks is of a nature such that blocks are likely to be frequently read e.g. with multiple simultaneous requests for some or all of the content of blocks block level storage manager can cause blocks to be written as blocks of volume on storage unit as well as replicating blocks by writing copies of blocks to volume of storage unit as blocks and to volume of storage unit as blocks . The advantage of such a replication optimization becomes apparent if block level storage manager receives multiple simultaneous requests for some or all of the content of blocks . Such multiple simultaneous requests are common with respect to some data structures such as the index of a database and with respect to certain types of data. Rather than queuing those multiple simultaneous requests for serial fulfillment by storage unit and thereby delaying the fulfillment of some of the requests block level storage manager can reroute requests for some or all of the content of blocks to storage units and . Such rerouting allows storage units to fulfill the multiple simultaneous requests for some or all of the content of blocks in parallel and thereby reduce the delay associated with the requests.

In one embodiment block level storage receives blocks for example as part of a set of block data transaction instructions . Blocks arrive at block level storage manager for storage on one or more of storage units as part of one or more of volumes for example as blocks of volume on storage unit . If block level storage manager determines that the content of blocks is of a sensitive nature such that more secure storage is desired block level storage manager may encrypt the content of blocks and store encrypted blocks as part of volume on storage unit . In some embodiments block level storage manager may determine in one of several ways that the content of blocks is of a sensitive nature such that more secure storage through an encryption feature is desired. For example an operating system simulator within block level storage manager may discern the logical structure of directories within volume and may ascertain by interpreting metadata within the block storage transaction instructions associated with blocks that blocks are part of a directory typically containing sensitive information.

Alternatively an operating system of virtual machine may communicate through an API an indication of the sensitive nature of blocks by embedding an indication of the need for secure handling in the block storage transaction instructions associated with blocks . Such an embedded indication of the nature of data which in some embodiments will be used to trigger application of a feature such as encryption can be processed in one embodiment by an embedded enhancement request API . Encrypted storage of the content of blocks provides increased security to users of block storage service .

In one embodiment block level storage receives blocks for example as part of a set of block data transaction instructions . Blocks arrive at block level storage for storage on one or more of storage units as part of one or more of volumes for example as blocks of volume on storage unit . If block level storage manager determines that the content of blocks is of a nature such that compression is desirable e.g. content that is unlikely to be read in the future and is highly compressible such as text based log files block level storage manager may compress the content of blocks and store compressed blocks as part of volume on storage unit . In some embodiments block level storage manager may determine in one of several ways that the content of blocks is of a nature such that compression of the content of blocks is desirable. For example an operating system simulator within block level storage manager may discern the logical structure of directories within volume and may ascertain by interpreting metadata within the block storage transaction instructions associated with blocks that blocks are part of a directory typically containing information that is not frequently read from volume for example a log directory . Alternatively an operating system of virtual machine may communicate through an API an indication of the nature of blocks such as by indicating that the data is a log file that is unlikely to be read. Compressed storage of the content of blocks provides more space efficient storage to users of block storage service .

In volume a series of blocks has been stored contiguously in order of receipt. A data structure map may indicate that the order in which blocks have been stored is unrelated to the organization of logical data structures present in the content of blocks . Such a data structure map may be generated by a metadata monitor such as metadata monitoring function or an operating system simulator both of . Returning to in such a situation block level storage manager may be used to re organize the storage of blocks such that physically contiguous groups of blocks contain individual data structures e.g. files or logically related groups of data structures e.g. directories .

The result of such a reorganization is shown in . illustrates a state of a block storage service after an object placement or defragmentation enhancement. Block storage service includes a block level storage manager . Block storage service includes storage units for storing volumes . In volume a series of blocks has been stored contiguously in an order such that contiguous groups of blocks contain individual data structures e.g. files or logically related groups of data structures e.g. directories or database tables . For example blocks and blocks contain data of a first file. Similarly blocks and blocks contain data of files of a single directory. With blocks thus stored such that data from individual logical data structures is contiguously grouped read requests associated with a particular logical data structure can be performed on contiguous data. Reads from a data structure that is stored as blocks in a contiguous arrangement typically provide a faster read time than can be provided from discontiguous reads that would be associated with blocks that have been stored contiguously in order of receipt without regard to logical data structures.

Alternatively an expected read pattern may indicate that the order in which blocks have been stored is unrelated to the order in which blocks are expected to be read. In such a situation blocks may be re organized to provide object placement of blocks in an order in which they are expected to be read. An arrangement similar to that shown in may result such that blocks may placed in a physically contiguous arrangement allowing blocks to be read consecutively in a single pass. Reads from blocks stored in expected read order and therefore consecutively read typically provide a faster read time than can be provided from discontiguous reads that would be associated with blocks that have been stored contiguously in order of receipt without regard to expected read order.

It is contemplated that in some embodiments any of the methods techniques or components described above may be implemented as instructions and data capable of being stored or conveyed via a computer accessible medium. Such methods or techniques may include for example and without limitation the various methods of a block storage service providing block level storage to a set of distinct computing instances for a set of distinct users in which embodiments provide a block storage transaction enhancement function for selecting and implementing block storage transaction enhancements applicable to data in a block storage service based information with respect to the data being stored in the block storage service. Examples which are not intended to be limiting include those performed by the elements and methods described above and shown in or suitable variations of such elements and methods. Such instructions may be executed to perform specific computational functions tailored to specific purposes e.g. processing web services traffic performing high precision numerical arithmetic etc. as well as higher order functions such as operating system functionality virtualization functionality network communications functionality application functionality and or any other suitable functions.

One example embodiment of a computer system including computer accessible media is illustrated in . Computer system may correspond to an example configuration of physical computer system shown in . Correspondingly in various embodiments the functionality of any of the various modules or methods described above e.g. as provided by operating system virtualization module virtual machines and or other elements described above may be implemented by one or several instances of computer system . Similarly the various elements of data center such as nodes computing systems block storage service local storage systems and other functional units of data center may be implemented by one or several instances of computer system .

In particular it is noted that different elements of the system shown in may be implemented by different computer systems . For example virtualization module may be implemented on one computer system while virtual machines may execute on a different computer system under the control of virtualization module . Similarly each of several nodes and several computing systems may be implemented by different computer systems while each of block storage service and computing systems may also be implemented by different computer systems . In varying computing system embodiments individual computing systems will be constructed that will omit various of the parts show in and include others omitted in .

In the illustrated embodiment computer system includes one or more processors coupled to a system memory via an input output I O interface . Computer system further includes a network interface coupled to I O interface . In various embodiments computer system may be a uniprocessor system including one processor or a multiprocessor system including several processors e.g. two four eight or another suitable number . Processors may be any suitable processor capable of executing instructions. For example in various embodiments processors may be a general purpose or embedded processor implementing any of a variety of instruction set architectures ISAs such as the x86 PowerPC SPARC or MIPS ISAs or any other suitable ISA. In multiprocessor systems each of processors may commonly but not necessarily implement the same ISA.

System memory may be configured to store instructions and data accessible by processor . In various embodiments system memory may be implemented using any suitable memory technology such as static random access memory SRAM synchronous dynamic RAM SDRAM nonvolatile Flash type memory or any other type of memory. In the illustrated embodiment instructions and data implementing desired functions methods or techniques such as those described above are shown stored within system memory as code . It is noted that in some embodiments code may include instructions and data implementing desired functions that are not directly executable by processor but are represented or encoded in an abstract form that is translatable to instructions that are directly executable by processor . For example code may include instructions specified in an ISA that may be emulated by processor or by other code executable on processor . Alternatively code may include instructions procedures or statements implemented in an abstract programming language that may be compiled or interpreted in the course of execution. As non limiting examples code may include code specified in a procedural or object oriented programming language such as C or C a scripting language such as perl a markup language such as HTML or XML or any other suitable language.

In one embodiment I O interface may be configured to coordinate I O traffic between processor system memory and any peripheral devices in the device including network interface or other peripheral interfaces. In some embodiments I O interface may perform any necessary protocol timing or other data transformations to convert data signals from one component e.g. system memory into a format suitable for use by another component e.g. processor . In some embodiments I O interface may include support for devices attached through various types of peripheral buses such as a variant of the Peripheral Component Interconnect PCI bus standard or the Universal Serial Bus USB standard for example. In some embodiments the function of I O interface may be split into two or more separate components such as a north bridge and a south bridge for example. Also in some embodiments some or all of the functionality of I O interface such as an interface to system memory may be incorporated directly into processor .

Network interface may be configured to allow data to be exchanged between computer system and other devices attached to network such as other computer systems for example. In various embodiments network interface may support communication via wired or wireless general data networks such as any suitable type of Ethernet network for example via telecommunications telephony networks such as analog voice networks or digital fiber communications networks via storage area networks such as Fibre Channel SANs or via any other suitable type of network and or protocol.

In some embodiments system memory may be one embodiment of a computer accessible storage medium configured to store instructions and data as described above. However in other embodiments instructions and or data may be received sent or stored upon different types of computer accessible storage media. Generally speaking a computer accessible storage medium may include storage media or memory media such as magnetic or optical media e.g. disk or CD DVD ROM coupled to computer system via I O interface . A computer accessible storage medium may also include any volatile or non volatile storage media such as RAM e.g. SDRAM DDR SDRAM RDRAM SRAM etc. ROM etc that may be included in some embodiments of computer system as system memory or another type of memory. A computer accessible storage medium may generally be accessible via transmission media or signals such as electrical electromagnetic or digital signals conveyed via a communication medium such as a network and or a wireless link such as may be implemented via network interface .

Although the embodiments above have been described in considerable detail numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications.

