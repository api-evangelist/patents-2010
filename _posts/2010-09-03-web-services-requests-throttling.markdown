---

title: Web services requests throttling
abstract: A method of web services throttling in a web application server environment, where a number of web services servers communicate with web services clients over a network. A request is received from a web services client which contains an account ID related to the web services client. An ID reader resident on one of the web services servers reads the account ID; and a value related to the account ID in a counter, resident on the one of the services servers, is incremented. The method also involves communicating with the remaining web services servers to increment the value in a plurality of counters, each of which is resident on one of the remaining web services servers. The web services servers compare the count value related to the account ID to a throttling limit value.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08959237&OS=08959237&RS=08959237
owner: Cellco Partnership
number: 08959237
owner_city: Basking Ridge
owner_country: US
publication_date: 20100903
---
The present subject matter relates to techniques and equipment to restrict number of requests from web services clients to prevent overloading a web services system with a high volume of requests that the system cannot process in time due to the capacity of the web services system or backend systems that the services depend on.

In recent years Web Services is a popular technology for companies to provide services APIs application programming interfaces to integrators and developers to develop products using a company s services APIs over the Internet. This allows the company to open up opportunities for outside developers to innovate with and within the company s services. This provides benefits to both the customers and the company. For example a wireless carrier can provide messaging web services for developers. The developers can then develop messages related products which encourages more message usage among the subscribers. The customers benefit from a new product and the company benefits from the increased usage and updated features it did not have to spend the time and resources to develop.

A web services client is typically a software program that makes API calls to the web services servers. Unlike the regular World Wide Web where users interact with web servers via manual clicks in the web browsers a web service client can submit multiple requests to web services servers simultaneously and continuously. Because the capacity of web services servers is limited too many simultaneous requests from the client may overload the system. System overload causes the system to return slow responses to requests or even stop functioning. This imposes a challenge to the web services servers how to ensure quality of service to majority of the clients when a few clients are sending too many requests One method is throttling.

Throttling is a mechanism used to limit the number of requests to the web service either by refusing or delaying requests in a specified time interval to provide better quality of service. A few examples of throttling policy include concurrent idle request and volume. Concurrent throttling policy imposes a limit on the number of concurrent requests at any one time. Idle throttling policy imposes a minimum idle time between requests. Request throttling policy imposes a limit on the number of requests per period. Volume throttling policy imposes a limit on the volume such as kilobytes sent per period. However these mechanisms are typically implemented on a server by server basis within a single group of servers or farm . Thus each server in the farm can reach the throttling limit when inundated with many requests from the same client. This will affect the farm as a whole and slow the responses from all servers involved.

Hence a need exists for the web services servers to communicate with one another to learn about the total number of requests among all the servers in order to enforce the limit of requests for each client to reduce or prevent all servers in a farm from being adversely impacted by a large amount of requests.

The teachings herein alleviate one or more of the above noted problems with a new approach to throttling in a web application server environment. In the environment a mobile station communicates with a plurality of web services servers over a network. The method includes the steps of receiving from a web services client a request containing an account identifier ID related to the web services client. A step of reading by an ID reader resident on one of the plurality of web services servers the account ID and incrementing a value in a counter which is resident on the one of the plurality of web services servers. The value is related to the account ID. The method includes communicating with the remaining plurality of the web services servers to increment the value in counters resident on the remaining web services severs and comparing on the plurality of web services servers the value to a throttling limit value.

Another example is that to process the request on the one of the web services servers if the count value related to the account ID is less than or equal to the throttling limit value. However of a request is not immediately processed on the one of the web services servers if the count value related to the account ID is greater than the throttling limit value when the request is received. In this later example processing may be denied for example by sending an error message to the web services client. Alternatively the server receiving the request when the count value exceeds the throttling limit value may delay processing the request until the count value is less than or equal to the throttling limit value.

Other concepts relate to unique software for implementing the web services throttling in a web application server environment. Such software product in the form of an article of manufacture includes at least one machine readable storage medium and programming instructions embodied in the at least one medium for execution by one or more computers. The programming configures one or more computers to be capable of performing web server throttling functions and the programming includes an initial script which each time it is periodically started implements certain functions.

The functions include setting a throttling limit value in a plurality of counters resident on a plurality of web services servers wherein the throttling limit is a number of requests per time period. Receiving at one of the web services servers a request from a web services client wherein the request comprises an account ID related to the web services client. Then incrementing a value in a counter resident on the one of the web services servers. The count value is related to the account ID. Then instructing a remainder of the web services servers to increment a plurality of counters each resident on the remainder of the web services servers. Next compare on the web services servers the count value to the throttling limit value. If the value is less than or equal to the throttling limit value process the request on the one of the plurality of web services servers. If the value is greater than the throttling limit value the request is not immediately processed by one of the plurality of web services servers. Further implementing the not immediately processing the request can include sending an error message to the web services client or delaying processing the request until the count value is less than or equal to the throttling limit value. Additional steps include setting the count value to zero in the plurality of counters resident on the plurality of web services servers once the time period is exceeded.

As a result a throttling limit can be strictly enforced since all of the servers in a farm will know the total amount of requests associated with a given account ID so that each individual server is not overwhelmed by a large number of requests.

Additional advantages and novel features will be set forth in part in the description which follows and in part will become apparent to those skilled in the art upon examination of the following and the accompanying drawings or may be learned by production or operation of the examples. The advantages of the present teachings may be realized and attained by practice or use of various aspects of the methodologies instrumentalities and combinations set forth in the detailed examples discussed below.

In the following detailed description numerous specific details are set forth by way of examples in order to provide a thorough understanding of the relevant teachings. However it should be apparent to those skilled in the art that the present teachings may be practiced without such details. In other instances well known methods procedures components and or circuitry have been described at a relatively high level without detail in order to avoid unnecessarily obscuring aspects of the present teachings.

The exemplary solution allows the individual web services servers to have a unified throttling limit for requests from particular web services clients.

Reference now is made in detail to the examples illustrated in the accompanying drawings and discussed below. illustrates the high level functional block diagram of the architecture of a distributed web services system which implements request throttling. A web services client a software program that makes API calls to the web services servers. The web services client can be running on any computer or mobile station. The web services client communicates with two or more web services servers . . . over a network .

In one context a web browser can be running on a mobile station and the web services client is activated from inside the browser. The mobile station not illustrated is connected to a wireless network to allow the web service client to communicate with the web services servers . . .

The web services client sends one or more requests over the network to the web services servers . The requests can be typically first handled by a load balancer which forwards each request to the web services server depending on a particular load balancing rule. Load balancing for this invention is a technique to distribute workload evenly across the two or more web services servers . Load balancing rules include simple round robin rules and complicated scheduling and analysis functions.

The load balancer is used order to get optimal resource utilization maximize throughput minimize response time and avoid overload. The load balancer can be a dedicated program or hardware device such as a multilayer switch or a DNS server . When the load balancer is a software program it can listen on the port where web services client connect to the web services server .

The load balancer forwards the requests to one of the web services servers . Once processed the web services server usually replies to the load balancer . This allows the load balancer to reply to the web services client without the web services client ever knowing about the internal separation of functions. The load balancer also prevents the web services client from contacting web services servers directly. This has security benefits.

Each web services server has the same logic to process requests including connecting to backend servers to complete the services requests and return responses to the web services client . Under a round robin balancing rule the load balancer distributes the requests in an order across the web services servers for example first to web services server then to web services server etc.

As an example mobile wireless communications carriers such as Verizon Wireless have customer communication systems to provide notifications to their customers for example as SMS messages to account holders mobile stations as emails etc. Because of the large number of customers served by a major carrier and the level of account activities the volume of notification message traffic is quite large. To effectively provide such notifications Verizon Wireless implemented a web server layer and an application layer.

The architecture allows web services client to send a request for example for a notification to the web services servers . The web services server then forwards the client request to one of the number of backend application servers . Each application server has multiple applications running on it. The application server determines the proper application to process the client request based on the data context root see of the client request . The application server processes the client request and then a reply is sent back to the web services server which will then forward the reply back to the web services clients .

The throttling analyzer also has a counter that counts and stores the number of requests from each web services client as identified by the account ID over a specified period of time. In an example the counter counts and stores the number of requests per web services client for each second.

The throttling analyzer in addition to keeping track of the requests made to its particular web services server can then instruct the web services server to communicate with the remaining web services servers . . . . The communication informs the other throttling analyzers . . . to increment their count for that particular web services client as well. By having each web services server increase its counter with the requests from other web services servers ensures each web services server has the up to date total number of requests for a particular web services client among all the web services servers to enforce the throttling limits.

The throttling limits can be set such that each web services client has a limit of requests per time period. For example each web services client can be limited to 5 requests per second. If the web services client submits more than the limit of requests for a period of time e.g. client submits a 6th request in the same second sec. 1 the web services server can perform a number of tasks.

The throttling analyzer can inform the web services server that a particular web services client exceed the preset limit. Then in response to the 6th request the web services server can either reject the 6th request with an error response or not return response of the 6th request until the next second sec. 2 .

At the end of each preset time period the counter is reset to zero 0 for every account ID . The process of counting and communicating to enforce the throttling limits is then repeated for this new cycle. Once the time period ends the counter is reset and the process begins again.

In an example the throttling limits are set at 4 requests per second. Web services client sends 5 requests in one second. The requests reach the load balancer which then distributes the requests round robin to web services servers . In this example web services server receives the 1st request web services server receives the 2nd request web services server receives the 3rd request web services server receives the 4th request and web services server receives the 5th request .

The throttling analyzer of the web services server using ID reader reads the account ID and identifies the web service client. The counter stores 1 request and the communication is sent to the remaining throttling analyzers . . . to also increment their counters by 1. The throttling analyzer then determines that the count is less than the throttling limit and instructs web services server to process the request . The throttling analyzer of the web services server receives the communication and increments its counter by 1. The throttling analyzer identifies the 2nd request increments its counter by 1 and determines that the number of requests now 2 is less than the throttling limit. The throttling analyzer instructs web services server to process the request and communicate the 1 message to the other throttling analyzers . This process is repeated by throttling analyzers and on web services servers and respectively. These web services servers process the 3rd and 4th requests since they are still within the throttling limits.

Web services server receives the 5th request from web services client . Previous to receiving the 5th request the throttling analyzer s counter has received three 1 communications from web services servers . . . . Counter is now set to 4 which in inclusive of its own count plus the three other request processed on the other web services servers . The throttling analyzer reads the account ID and increments counter to 5. The throttling analyzer then determine that the 5th request exceeds the throttling limit and informs the web services server to not process the 5th request by either sending an error message or delaying servicing the request. Once the second ends the counters are reset to zero and begin the process again.

In an example web services servers communicate with one another with a TCP socket to communicate each request it receives from a client. A format of the 1 communication message can be accountID xxxx which indicates it has just received a request from web services client with an account ID of xxxx. 

An example of the particular steps of above method is illustrated in wherein web services server receives the request step . The throttling analyzer then reads the account ID for the particular web services client who sent the request step . The counter is then incremented by 1 step and the 1 communication to the remaining web services servers is sent step . The throttling analyzer then compares the value of the counter to the throttling limit and if the counter is less than or equal to the throttling limit step the request can be processed step . If the counter exceeds the throttling limit the request is not processed step .

Further steps in the method as illustrated in include receiving one or more 1 communications step and incrementing the counter by 1 for each communication step . Other steps include resetting the counter to 0 step and setting the throttling limit step . illustrates further steps to not process the request step at least one of an error message is returned to the web services client step or the processing of the request is delayed until next cycle step . When a request is delayed to the next cycle it becomes the first request in the queue. Thus it the previously over the limit request becomes the first request in the next cycle.

Another example of how a request that is not processed can be handed is that the web services servers have a delayed processing limit on number of requests that can be in the delayed processing state for each account ID . In one example the delayed processing limit is particular to each web services server e.g. and not shared or communicated through the farm of web services servers . Once the delayed processing limit is reached the web services server returns an error message for any additional requests . The analyzer can count the delayed requests using a delayed requests counter and compare them to the delayed processing limit.

Examples of this method are implemented in software that is running on the web services servers . In this example the load balancer does not have the capability of accessing the account ID in the request . Thus the load balancer cannot count the number of incoming requests from any particular web services client . This is the example regardless if the load balancer is implemented in software or hardware.

A web services server for example includes a data communication interface for packet data communication. The server also includes a central processing unit CPU in the form of one or more processors for executing program instructions. The server platform typically includes an internal communication bus program storage and data storage for various data files to be processed and or communicated by the server although the server often receives programming and data via network communications. The hardware elements operating systems and programming languages of such servers and terminal device computers are conventional in nature and it is presumed that those skilled in the art are adequately familiar therewith. Of course the server functions may be implemented in a distributed fashion on a number of similar platforms to distribute the processing load

Hence aspects of the methods to provide request throttling as outlined above may be embodied in programming. Program aspects of the technology may be thought of as products or articles of manufacture typically in the form of executable code and or associated data that is carried on or embodied in a type of machine readable medium. Storage type media include any or all of the tangible memory of the computers processors or the like or associated modules thereof such as various semiconductor memories tape drives disk drives and the like which may provide non transitory storage at any time for the software programming. All or portions of the software may at times be communicated through the Internet or various other telecommunication networks. Such communications for example may enable loading of the software from one computer or processor into another for example from a management server or host computer of the network operator into the computer platform of a web server and platforms of the associated application servers that will implement the monitoring etc. of the thread count analyzer. Thus another type of media that may bear the software elements includes optical electrical and electromagnetic waves such as used across physical interfaces between local devices through wired and optical landline networks and over various air links. The physical elements that carry such waves such as wired or wireless links optical links or the like also may be considered as media bearing the software. As used herein unless restricted to tangible non transitory storage media terms such as computer or machine readable medium refer to any medium that participates in providing instructions to a processor for execution.

While the foregoing has described what are considered to be the best mode and or other examples it is understood that various modifications may be made therein and that the subject matter disclosed herein may be implemented in various forms and examples and that the teachings may be applied in numerous applications only some of which have been described herein. It is intended by the following claims to claim any and all applications modifications and variations that fall within the true scope of the present teachings.

