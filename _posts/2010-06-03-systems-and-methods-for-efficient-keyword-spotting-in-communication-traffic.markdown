---

title: Systems and methods for efficient keyword spotting in communication traffic
abstract: Methods and systems related to keyword searching processes. A list of keywords may be first represented by a set of short substrings. The substrings are selected such that an occurrence of a substring indicates a possible occurrence of one or more of the keywords. Input data may be initially pre-processed, so as to identify locations in the input data in which the substrings occur. Then, the identified locations are searched for occurrences of the actual keywords. The pre-processing scheme enables the keyword search process to search only in the identified locations of the substrings instead of over the entire input data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09053211&OS=09053211&RS=09053211
owner: VERINT SYSTEMS LTD.
number: 09053211
owner_city: Herzelia, Pituach
owner_country: IL
publication_date: 20100603
---
The present disclosure relates generally to data processing and particularly to methods and systems for detecting strings in data.

Keyword searching techniques are used in a wide variety of applications. For example in some applications communication traffic is analyzed in an attempt to detect keywords that indicate traffic of interest. Some data security systems attempt to detect information that leaks from an organization network by detecting keywords in outgoing traffic. Intrusion detection systems sometimes identify illegitimate intrusion attempts by detecting keywords in traffic.

Various keyword searching techniques are known in the art. For example Aho and Corasick describe an algorithm for locating occurrences of a finite number of keywords in a string of text in Efficient String Matching An Aid to Bibliographic Search Communications of the ACM volume 18 no. 6 June 1975 pages 333 340 which is incorporated herein by reference. This technique is commonly known as the Aho Corasick algorithm. As another example Yu et al. describe a multiple pattern matching scheme which uses Ternary Content Addressable Memory TCAM in Gigabit Rate Packet Pattern Matching using TCAM Proceedings of the 12IEEE International Conference on Network Protocols ICNP Berlin Germany Oct. 5 8 2004 pages 174 183 which is incorporated herein by reference.

caching a set of flags each flag indicating whether a respective substring occurs in one or more of the keywords in an internal cache memory of a processor device 

identifying using the processor device locations in input data in which the substrings occur by comparing the input data with the cached flags and

searching at the identified locations for occurrences of the keywords so as to find at least one of the keywords in the input data.

In some embodiments the internal cache memory includes a Level 2 L2 cache memory of the processor device. In an embodiment caching the flags and identifying the locations include executing software code by the processor device. In another embodiment the processor device includes hardware implemented logic and caching the flags and identifying the locations are performed by the hardware implemented logic. In yet another embodiment the substrings include n bit prefixes of the keywords. In a disclosed embodiment each flag indicates whether the respective substring occurs in at least one of multiple predefined offsets within the one or more keywords. In some embodiments the method includes receiving communication traffic from a communication network and extracting the input data from the communication traffic.

In an embodiment the input data includes multiple data packets identifying the locations includes identifying a subset of the data packets in which the substrings occur and searching at the identified locations includes searching in the identified subset of the data packets. In another embodiment the method includes storing at least a part of the input data that includes the identified locations in a memory and searching for the occurrences includes searching for the occurrences in at least the part of the input data stored in the memory. In yet another embodiment responsively to finding one or more of the keywords in the input data the method includes issuing an alert presenting a part of the input data in which the keywords were found and or blocking a communication flow in which the keywords were found. In still another embodiment some of the input data is discarded according to a pre filtering criterion prior to identifying the locations.

There is additionally provided in accordance with an embodiment that is described herein apparatus including 

a processor which includes an internal cache memory and is configured to cache in the internal cache memory a set of flags which represents a list of substrings drawn from a plurality of keywords such that each flag indicates whether a respective substring occurs in one or more of the keywords to identify locations in the input data in which the substrings occur by comparing the input data with the cached flags and to search at the identified locations for occurrences of the keywords so as to find at least one of the keywords in the input data.

There is also provided in accordance with an embodiment that is described herein apparatus including 

a pre processing unit which includes a cache memory and is configured to cache in the cache memory a set of flags which represents a list of substrings drawn from a plurality of keywords such that each flag indicates whether a respective substring occurs in one or more of the keywords to receive input data and to identify locations in the input data in which the substrings occur by comparing the input data with the cached flags and

a post processing unit which is configured to search for occurrences of the keywords at the locations identified by the pre processing unit so as to find at least one of the keywords in the input data.

The present disclosure will be more fully understood from the following detailed description of the embodiments thereof taken together with the drawings in which 

Many keyword searching applications involve searching for a large number of keywords in a large volume of data. For example it is not uncommon for an intrusion detection or leakage detection application to search high bandwidth Internet traffic for a list of many thousands of keywords in real time. In many cases the computational resources needed for such a task using known methods are prohibitive and may limit the number of keywords and or the traffic bandwidth that can be searched.

Embodiments that are described herein provide improved methods and systems which reduce the computational complexity of keyword searching processes. In some embodiments in order to search given input data for occurrences of a list of keywords the list of keywords is first represented by a set of short substrings. The substrings are selected such that an occurrence of a substring indicates a possible occurrence of one or more of the keywords. For example the set of substrings may comprise the prefixes of the keywords i.e. the first n bits of each keyword. The input data is initially pre processed so as to identify locations in the input data in which the substrings occur. Then the identified locations are searched for occurrences of the actual keywords.

In general an occurrence of a substring e.g. n bit prefix does not necessarily indicate an occurrence of a keyword. Nevertheless the pre processing scheme enables the keyword search process to search only in the identified locations of the substrings instead of over the entire input data. When using this sort of pre processing the volume of data to be searched can often be reduced by several orders of magnitude. Although the description that follows refers to n bit substrings string matching is most commonly carried out using byte comparison operations since bit manipulation is typically computationally costly. 

In some embodiments the set of substrings is represented in a format that is compact enough to fit in an internal cache memory of a processor device. For example a set of n bit prefixes can be represented by a set of 2Boolean flags such that each flag indicates whether one or more of the keywords begins with the respective n bit prefix. When using three byte 24 bit prefixes the set of 2flags occupies only 2 M bytes of memory a size that readily fits in the internal cache of many processor devices. In these embodiments the pre processing scheme is carried out internally to the processor device using the internal cache. Such a scheme is fast and efficient since it does not need to fetch information related to the keywords from external memory.

The methods and systems described herein regard the input data as a stream of bytes and identify substrings and keywords at the level of bytes. As such the disclosed techniques can be applied to input data of any kind regardless of the character set encoding type or communication protocol used.

System can be used for example in an application that detects data leakage from a communication network. In applications of this sort the presence of one or more keywords in a data item indicates that this data item should not be allowed to exit the network. As another example system can be used in a communication interception intelligence application which intercepts traffic of interest. In this sort of application the presence of one or more of the keywords in a data item e.g. a communication packet indicates that the packet may be of interest. Additionally or alternatively system can be used in any other suitable application in which input data is searched for occurrences of keywords such as in intrusion detection and prevention systems detection of spam in electronic mail e mail systems or detection of inappropriate content using a dictionary of inappropriate words or phrases. Although the embodiments described herein refer mainly to processing of communication traffic the disclosed techniques can also be used in other domains. For example system can be used for locating data of interest on storage devices such as in forensic disk scanning applications.

Network may comprise any suitable public or private wireless or wire line communication network e.g. a Wide Area network WAN such as the Internet a Local Area Network LAN a Metropolitan Area Network MAN or a combination of network types. The communication traffic to be used as input data by system may be provided to the system using any suitable means. For example the traffic may be forwarded to the system from a network element e.g. router in network such as by port tapping or port mirroring. In alternative embodiments system may be placed in line in the traffic path. These embodiments suitable for example for data leakage prevention applications but can also be used in other applications.

Typically network comprises an Internet Protocol IP network and the communication traffic comprises IP packets. The description that follows focuses on Transmission Control Protocol Internet Protocol TCP IP networks and TCP packets. Alternatively however the methods and systems described herein can be used with other packet types such as User Datagram Protocol UDP packets. In the example of system comprises a Network Interface Card NIC which receives TCP packets from network . NIC stores the incoming TCP packets in a memory typically comprising a Random Access Memory RAM . A processor device searches the TCP packets stored in memory and attempts to identify occurrences of predefined keywords in the packets.

Processor pre processes the packets stored in memory so as to identify locations in memory in which the keywords possibly occur. The pre processing scheme uses a list of short substrings that are drawn from the keywords and a list of flags that represent the substrings in compact form. The pre processing scheme as well as the substrings and flags are described in detail below.

In the present example processor device comprises an internal cache memory . In some embodiments processor caches in cache a list of the flags representing the substrings. Caching the flags in the internal cache enables processor to pre process the input data using internal memory access operations i.e. without fetching information related to the keywords from conventional RAM. As such the pre processing scheme is fast and efficient. In some embodiments processor comprises multi level cache circuitry and cache comprises a Level 2 L2 cache of the processor. Access to the L2 cache is typically faster than access to conventional RAM.

Following the pre processing stage processor searches the identified locations in memory for occurrences of the actual keywords. When the processor detects a given keyword in a given packet it reports the detection to user using an output device of terminal such as a display . For example the processor may issue an alert to the user and or present the data item e.g. packet or session in which the keyword or keywords were detected. In some embodiments processor may take various kinds of actions in response to detecting keywords. For example in a data leakage or intrusion prevention application processor may block some or all of the traffic upon detecting a keyword. User may interact with system using an input device of terminal e.g. a keyboard . For example the user may enter or modify the list of keywords.

The system configuration shown in is an example configuration which is chosen purely for the sake of conceptual clarity. An alternative configuration in which the input data is pre processed by a hardware based pre processor is shown in below. Further alternatively any other suitable configuration can be used. Generally the different elements of system may be carried out using software hardware or a combination of hardware and software elements.

In many practical applications the number of keywords to be detected by system is extremely large sometimes on the order of tens of thousands or more. A given keyword may appear in the data in a variety of character sets e.g. Latin Russian or various Asian character sets and encoding types e.g. ASCII or Unicode . Moreover the system is often requested to perform the search in real time over large volumes of data such as over a high bandwidth Internet traffic flow. The computational resources involved in keyword detection under such conditions are sometimes all but prohibitive and may limit the maximum number of keywords keyword size or searchable traffic bandwidth.

In some embodiments processor pre processes the input data in order to focus on a relatively small number of locations in the data which may contain keywords. Then the processor searches for the keywords only in these locations. As a result the keyword search can be performed over only a fraction of the input data and the computational complexity involved is reduced accordingly.

In the pre processing stage processor identifies occurrences of short substrings rather than occurrences of entire keywords. The list of substrings is selected such that an occurrence of a substring indicates a possible although not guaranteed occurrence of a keyword. In the description that follows the substrings comprise three byte prefixes of the keywords. In some embodiments the list of substrings is represented in a compact format which enables processor to store it in cache memory .

Using this representation a list of 2Boolean flags uniquely defines the list of three byte prefixes that appear in the keywords. Only the Boolean flags and not the actual prefixes are cached in cache . In other words by querying this list of 2flags processor can determine whether a given combination of twenty four bits matches the first three bytes of any of Boolean flags occupies only 2 M bytes of memory a size that readily fits in cache . When larger cache size is available longer prefixes can also be used. In an example implementation a 2 MB L2 cache can be used to cache a Boolean flags representing three byte prefixes. A 16 MB L2 cache for example can be used to cache a list of 2Boolean flags representing four byte prefixes.

Consider the present example in which the input data is first searched for occurrences of three byte 24 bit prefixes. For a set of N keywords only approximately N 2 of the flags in list will be 1 . Thus the flag list is extremely sparse even for large numbers of keywords. As a result the memory locations that will be identified in the pre processing stage are only a small fraction of the total number of memory locations. This example demonstrates that the disclosed pre processing scheme provides a significant reduction in the amount of data to be searched.

In the embodiments described herein the substrings comprise three byte prefixes of the keywords. In alternative embodiments however the substrings may refer to bit sequences in any other position in the keyword. For example the substrings may comprise suffixes of the keywords i.e. the last n bits of each keyword. In these embodiments a given flag in list is 1 if one or more keywords end with the corresponding bit sequence.

In some embodiments a given flag in list may be 1 if the corresponding substring bit sequence appears in at least one of two predefined keyword positions usually at consecutive offsets. For example a given flag may be set to 1 if the corresponding substring appears in the 1 2and 3bytes of at least one keyword or in the 2 3and 4bytes of at least one keyword. Even with this technique the flag list is still sufficiently sparse to provide considerable reduction in data volume. Repeating the comparison with two or more offset positions reduces the probability of randomly hitting a three byte substring that appears in the list but is not really the beginning of a keyword.

Flag list is typically produced from the list of keywords in advance. The flag list can be prepared for example by user terminal by processor or by any other suitable processor. The flag list is loaded into cache memory of processor at a caching step . The list is typically provided to processor via terminal and loaded into the cache memory. In some embodiments the flag list can be updated in response to changes in the list of keywords e.g. when keywords are added or deleted.

System receives communication traffic from network at an input step . NIC receives incoming IP packets and stores them in memory . Each IP packet is typically on the order of tens of bytes to several thousand bytes in size. The average packet size may be approximately 612 bytes. Alternatively any other suitable packet sizes can also be used.

Processor scans the IP packets stored in memory and attempts to identify occurrences of the substrings at a substring matching step . Typically processor scans a given packet byte by byte and compares each three byte sequence in the packet to flag list . Since the flag list is cached in internal cache memory these comparison operations are fast and efficient.

Processor identifies the locations in the input data i.e. the locations in memory in which the substrings occur at a location marking step . In the present example if a given three byte sequence in the packet matches one of the substrings i.e. the flag corresponding to this three byte sequence is 1 the processor regards the memory location of this three byte sequence as a possible occurrence of a keyword. As noted above processor may repeat the substring matching process for additional offset positions in the keyword so as to reduce the probability of false matches substring matches that do not correspond to actual keyword locations .

Processor searches for occurrences of keywords in the memory locations identified at step above at a keyword search step . Processor may search the identified locations using any suitable keyword searching method such as using the above cited Aho Corasick algorithm. Other examples of keyword searching methods that can be used by processor to implement step comprise the Boyer Moore or Set Wise Boyer Moore algorithms. Several such keyword searching schemes are described by Fisk and Verghese in Applying Fast String Matching to Intrusion Detection Los Alamos National Laboratory and the University of California San Diego 1009 which is incorporated herein by reference. Since this search is performed only at the memory locations in which substrings occurrences were found rather than over the entire input data the computational complexity of the search is reduced considerably.

Processor may invoke the keyword search process in various ways. In some embodiments the processor filters the incoming IP packets according to the pre processing results. For example the processor may apply keyword searching to packets in which substring occurrences were identified and discard the other packets. Additionally or alternatively the processor may report the actual locations of the substring occurrences within the packet to the keyword search process. In some embodiments processor searches within a given packet starting from an identified substring location and searching for several tens of bytes a length that typically depends on the longest anticipated keyword . This sort of searching further reduces the volume of text being searched for keywords.

A processor performs keyword searching in the memory locations indicated by the pre processor. Processor can thus be regarded as a post processing unit which operates on the output of pre processor . Both pre processor and processor access memory . In still another embodiment the functionality of pre processor can be embodied in the circuitry of NIC .

In some embodiments processors and and pre processor may comprise general purpose processors which are programmed in software to carry out the various functions described herein. The software may be downloaded to the processors in electronic form over a network for example or it may alternatively or additionally be provided and or stored on tangible media such as magnetic optical or electronic memory. Processors and and or pre processor may comprise a multi processor device which comprises multiple processing cores that operate in parallel such as a multi core Central Processing Unit CPU A Very Long Instruction Word VLIW processor or a Digital Signal Processor DSP . Writing into memory and into cache causes a transformation in the states of the memory cells into which the data is written.

Although the embodiments described herein mainly address representing the substrings using Boolean flags the substrings can be represented using any other compact representation that enables processor to store them in cache .

In the embodiments described herein the input data e.g. TCP packets is stored in a memory before it is pre processed. In alternative embodiments however the input data may be pre processed on the fly as it is received by system such as by suitable hardware logic. In these embodiments nevertheless the input data is stored temporarily in devices such as buffers or registers. In the present context these components are also regarded as a sort of memory.

In some embodiments the pre processing techniques described herein can be combined with other kinds of pre processing in order to further reduce the volume of data to be analyzed. For example incoming communication traffic can be initially filtered using various criteria in order to discard data that is unlikely to contain text of interest or any text for that matter . Filtering may be based on the type of protocol or application associated with the traffic. For example system or may discard incoming Real Time Protocol RTP traffic traffic that is identified as being encrypted or traffic associated with any other suitable application or protocol. Additionally or alternatively traffic can be filtered according to any other suitable criteria such as based on IP addresses associated with the traffic port numbers associated with the traffic or specific combinations of the above mentioned criteria. After the initial filtering step the system pre processes the remaining data and identifies keywords using the disclosed techniques.

In some practical cases incoming traffic may be compressed e.g. using GZIP or other compression scheme. In some embodiments system or identifies compressed traffic and decompresses it before applying pre processing.

It will thus be appreciated that the embodiments described above are cited by way of example and that the present disclosure is not limited to what has been particularly shown and described hereinabove. Rather the scope of the present disclosure includes both combinations and sub combinations of the various features described hereinabove as well as variations and modifications thereof which would occur to persons skilled in the art upon reading the foregoing description and which are not disclosed in the prior art.

