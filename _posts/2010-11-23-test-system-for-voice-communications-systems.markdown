---

title: Test system for voice communications systems
abstract: Systems, methods, and computer program products are provided for testing a voice communication system. A job instruction is transmitted from an application server to a turret via a communications network. The application server causes the turret to execute at least one diagnostic test based on the job instruction. The application server receives, from the turret via the communications network, a message including a result of the at least one diagnostic test.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08594278&OS=08594278&RS=08594278
owner: IPC Systems, Inc.
number: 08594278
owner_city: Jersey City
owner_country: US
publication_date: 20101123
---
Example aspects of the present invention generally relate to telecommunication systems and more particularly to systems methods and computer program products for remote testing of a voice communication system.

A turret system is a specialized key telephony switching system that allows a relatively small number of users to access a large number of external lines and provides enhanced communication features such as hoot n holler push to talk intercom video and large scale conferencing. These features are often utilized in the financial industry such as trading floor environments as well as security law enforcement public safety utilities healthcare and customer support e.g. contact centers environments.

Users interface with a turret system via a turret device which is a telephone like desktop device with multiple handsets and speakers and multiple buttons. A turret is either implemented in dedicated hardware sometimes referred to as a hard turret or a general purpose computer sometimes referred to as a soft turret . With the advent of Voice over Internet Protocol VoIP VoIP turret devices have moved from a fixed environment of dedicated voice communications trading resources to a more virtualized trading environment across multiple sites. This virtual environment allows resources to be shared dynamically when and where required across a global corporate enterprise.

Turrets are installed in one or more premises of a company and in some cases are periodically replaced and or updated in some way. Typically in order to verify that the installations replacements or updates were successful technicians walk throughout one or more premises in which equipment is installed manually testing various functions of each of the turrets. Having technicians perform testing manually is costly and time consuming.

Problems can be more quickly solved by remotely conducting tests from a common test location. The need to test turrets and related communications infrastructure to determine the physical location where a problem exists and the type of failure is technically challenging. Typically test boards are located within the device to be tested sometimes referred to as a device under test or DUT . The test boards include circuits that are manually connected to other circuits or test equipment via plugs and jacks. This technique has the shortcoming of requiring a large space where the test jacks and the hard wiring from the circuits can be maintained. Another shortcoming of this testing mechanism is that it requires extensive training of personnel to properly operate the DUT and test equipment. Moreover such testing is disruptive to end users. There is the need therefore for an improved remote test system particularly tailored for testing communications infrastructure and equipment.

The example embodiments described herein meet the above identified needs by providing systems methods and computer program products for testing a voice communication system.

In one embodiment a job instruction is transmitted from an application server to a turret via a communications network. The application server causes the turret to execute at least one diagnostic test based on the job instruction. The application server receives from the turret via the communications network a message including a result of the at least one diagnostic test is provided.

Further features and advantages as well as the structure and operation of various example embodiments of the present invention are described in detail below with reference to the accompanying drawings.

The example embodiments of the invention presented herein are directed to systems methods and computer program products for testing a voice communication system which are now described herein in terms of an example turret communication system in a trading environment. This is for convenience only and is not intended to limit the application of the present invention. In fact after reading the following description it will be apparent to one skilled in the relevant art s how to implement the following invention in alternative environments such as other installations of voice communication systems e.g. corporate financial security law enforcement utility healthcare customer support contact center environments and the like .

The management system client communicates with an application server which may also be referred to herein as A S by using a communication protocol such as Hypertext Transfer Protocol Secure HTTPS . In general application server is responsible for coordinating and controlling various tests on the components in system . The application server includes a diagnostics service a data service an inventory database a diagnostics data database a diagnostics agent a desktop application service and a management system service .

Included within the diagnostics service is a diagnostics controller that communicates with the plugin by using interprocess communications such as remote procedure calls or Java calls. Test metadata e.g. a test name input parameter s component type s supported a flag indicating whether a test would interrupt a user using a device to be tested etc. received from the management system client is used by the diagnostics controller to validate test input parameters to translate external parameters into internal parameters and to format any test responses to be received from a component to be tested. Table 1 illustrates an exemplary set of test metadata.

The plugin maintains compatibility of communication between components that use different communication protocols. In particular the plugin maintains lists of plugin classes or communication protocols implemented by each component with which the plugin interfaces. Plugin classes can be installed into or uninstalled from the plugin via the management system client . The plugin is used to format communication messages based on the protocol implemented by the component for which the message is intended.

Diagnostics controller also communicates with the data service by using an application programming interface API such as a web service API.

The data service serves as an interface between the diagnostics controller and the inventory and diagnostics data databases and . Although the inventory database and the diagnostics data database are described as being separate embodiments in which the databases are combined are contemplated. The data service communicates with the inventory database and the diagnostics data database via an API such as Java Database Connectivity JDBC . As tests are executed on devices the devices periodically transmit messages to the databases and or to store any updated test results.

The plugin is communicatively coupled to a Network Time Protocol NTP server which maintains system clock timing and communicates with NTP server via the NTP communication protocol.

The plugin communicates with the diagnostics agent by using a communication protocol such as HTTPS. The diagnostics agent in turn communicates with the management system service by using interprocess communications such as remote procedure calls or Java calls. The diagnostics agent provides a common communications interface between the diagnostics service and the implementation of a diagnostic in the management system service .

Diagnostic tests on a desktop application such as desktop application are executed via the desktop application service . The desktop application service communicates with the plugin by using a communication protocol such as HTTPS.

By using a secure communication protocol such as HTTPS a secure communication line is maintained between various components of system including the management system client the diagnostics controller the plugin the diagnostics agent the desktop application service the server and the user PC .

In general the application server is used for testing various devices such as a media gateway a server a user PC and a turret .

The media gateway connects the system to other networks such as a Public Switched Telephone Network PSTN . The media gateway also communicates with the plugin by using a communication protocol such as Simple Network Management Protocol SNMP .

Server runs applications such as voice logging recording replay voice buffering etc. The server includes a recording or reporting application that records voice data. The server is communicatively coupled to the plugin via the recording or reporting application . The plugin communicates with the server via a communication protocol such as HTTPS SNMP or Secure Shell SSH .

User PC communicates with the plugin by using a communication protocol such as HTTPS. In one embodiment the plugin communicates with the user PC via two communication channels a command channel for transmitting command messages and an event channel for receiving event messages. In addition the user PC includes a desktop application or soft turret .

Turret includes a processor which executes an SSH daemon a diagnostics execution agent . Generally a target component is any subsystem of the turret . For example the target component can be an analog to digital converter an audio service application or a telephony application which are each discussed in further detail below with respect to . Turret communicates with the plugin by using SSH daemon and the SSH communication protocol. The SSH daemon is communicatively coupled to the diagnostics execution agent which in turn is communicatively coupled to the target component . The SSH daemon controls the diagnostics execution agent for example by transmitting instructions for executing diagnostic tests. The diagnostics execution agent executes tests by communicating with the target component using system calls.

The handsets and speakerphones are communicatively coupled to the A D converter which is a codec that converts analog electrical signals that represent signals received from the handsets and speakerphones into digital signals. The A D converter also converts digital electrical signals received from the audio processor into analog signals. The A D converter has analog to digital loopback capability. The transmit and receive volume for handsets are controlled by amplifiers in the analog section of the A D converter .

The audio processor processes audio signals on the turret . Example audio processing functions executed by the audio processor include performing sidetone generation Fast Fourier Transforms FFTs de jittering of audio signals acoustic echo cancellation frequency response control etc.

The audio processor includes active and passive audio diagnostics modules not shown that enable remote diagnostic testing audio test automation and audio testing. Example audio diagnostics modules included within the audio processor include a single frequency tone generating module a white noise generating module an audio file playback module and an impulse generating module.

The single frequency tone generating module generates a single frequency tone and transmits the tone via a particular channel of the turret to either a mouthpiece or an earpiece of a handset or speakerphone of either the local turret or a distant turret not shown e.g. a turret at a different location on the network . Passive audio measurement functions are used to verify the tone level and frequency on the local or distant end turret .

The white noise generating module generates stationary white noise and transmits the white noise via a particular channel of the turret to either a mouthpiece or an earpiece of a handset or speakerphone of either the local turret or a distant turret not shown e.g. a turret at a different location on the network . Passive audio measurement functions are used to verify the white noise level on the local or distant end turret . The white noise is used by the audio processor for performing power tests and an echo return loss test which are discussed below in further detail.

The audio file playback module includes pre recorded reference audio files stored in a standard format such as an 8 kHz or 16 kHz Pulse Code Modulation PCM format. The audio file playback module transmits a reference audio signal via an RTP stream to a distant turret not shown for use in Perceptual Evaluation of Speech Quality PESQ tests.

The impulse generating module generates impulses and transmits the impulses via a particular channel of the turret to either a mouthpiece or an earpiece of a handset or speakerphone of the local turret or a distant turret not shown . The impulse generating module is used by the audio processor for performing a round trip delay test which is discussed below in further detail.

Example audio tests executed by the audio diagnostic modules include a speech power test a noise power test an anomaly detection test a loopback test a peak frequency test an echo return loss test and a round trip delay test. Audio tests are discussed in further detail below with respect to .

The audio processor also transmits and receives voice packets to and from other endpoints via the network by using a communication protocol such as Realtime Transport Protocol RTP . In particular the audio processor receives and decodes RTP voice packets from the network and encodes and transmits RTP voice packets to the network .

The audio service application receives messages from the communication bus and routes the messages to different devices such as the audio processor via a driver not shown . The audio services application also broadcasts voice messages to the network via the audio processor .

The telephony application performs call control functions for example by handling user data configurations for setting up a call setting up RTP streams ports etc. When a button is pressed on the turret hardware a message is sent to the telephony application which in turn validates the message and processes the message to carry out a task associated with the pressed button e.g. connect a call .

The communication bus communicatively couples the audio service application the telephony application the button LED daemon and the automation daemon .

The button LED daemon detects signals from the button LED driver regarding the status of physical buttons and LEDs on the turret. When the status of a button or LED changes the button LED driver transmits an interrupt message to the button LED daemon which then transmits a message via the message bus to one or more endpoints via the communication bus .

The automation daemon receives Extensible Markup Language XML commands from the plugin of via a communication protocol such as SSH. The commands received from the plugin are instructions to execute one or more tests such as testing the pressing of a button testing the loopback audio performing audio measurements etc. The automation daemon forwards the commands to an appropriate destination via the communication bus .

As shown in three loopback locations are provided two digital loopback locations and one analog loopback location. The diagnostics service can isolate detected errors or failures to a particular part of the system by executing loopback tests using one or more of the three loopback locations. While the audio processor is executing any of the three types of loopback tests the audio processor automatically bypasses audio functions that would interfere with loopback testing such as side tone generation and acoustic echo cancellation.

An early digital loopback location is indicated by block . The early digital loopback location enables loopback testing of RTP packets prior to the packets having undergone de jittering and audio processing.

A late digital loopback location is indicated by block . The late digital loopback location enables loopback testing of data that has undergone audio processing.

An analog loopback location is indicated by the A D converter . The analog loopback location enables loopback testing of analog signals just prior to the signal being transmitted to or received from the handset or speakerphone . Loopback tests are discussed in further detail below.

In general job management includes any diagnostic job related procedure that is executed by the administrator PC in conjunction with the management system client . For example job management includes generating and configuring a new job opening and or configuring an existing job executing a job and scheduling a job.

A GUI of the administrator PC displays GUI elements such as icons buttons and or checkboxes corresponding to various tests which can be performed as well as test criteria configurations and thresholds. Selections available to be entered via the GUI include generating opening executing and scheduling a job. When selections are made via the GUI a corresponding message is transmitted from the management system client to the diagnostics service . At block the diagnostics service receives from the management system client a selection of a job management option entered via the GUI of the administrator PC together with any associated job parameters. At block the diagnostics service determines a type of the selection received at block .

If at block the diagnostics service determines that the type of the selection received at block corresponds to generating a new job then at block the diagnostics service causes the management system client to display a GUI element such as a window enabling the generation of a new job.

At block a job s is configured via the management system client . In particular jobs are configured by selecting specific tests to be executed and selecting specific components for which the tests are to be executed as well as specifying any test parameters that are to be used in connection with the execution of the tests.

At block the diagnostics service stores in the diagnostics data database a job entry corresponding to the job s generated and configured at blocks and respectively. As discussed above each job entry stored in the diagnostics data database includes a job identifier one or more test identifiers one or more component identifiers and corresponding parameters if any to be used for the job.

If at block the diagnostics service determines that the type of the selection received at block corresponds to opening an existing job then at block the diagnostics service causes the management system client to display a GUI element such as a window enabling the opening of an existing job.

At block a job s is viewed and or modified via the management system client . The procedures used for modifying job s are similar to those for configuring jobs as discussed above with respect to block .

At block the diagnostics service stores in the diagnostics data database the job s opened and modified at blocks and respectively as discussed above with respect to block .

If at block the diagnostics service determines that the type of the selection received at block corresponds to executing a job then at block the diagnostics service causes the management system client to display a GUI element such as a dialog box through which an administrator can confirm that a job is to be executed.

At block the diagnostics service executes a job. In particular the diagnostics service transmits to the device to be tested an execution message as discussed in further detail below with respect to . The diagnostic data database is updated with the results of the job and the diagnostics service reports the results to the management system client . The management system client displays the results. The execution of jobs the updating of the diagnostic data database with the results of the job and reporting the results of jobs to the management system client are each discussed in further detail below with respect to .

If at block the diagnostics service determines that the type of the selection received at block corresponds to scheduling the execution of a job to take place at a later time then at block the diagnostics service causes the management system client to display a GUI element such as a window enabling the scheduling of the execution of a job.

Once a job has been scheduled the job is executed according to its schedule. In particular at block the diagnostics service periodically retrieves the current time from the NTP server . The diagnostics service determines whether the current time retrieved from the NTP server matches the time a scheduled job was set to begin at block . If the current time does not match the scheduled time then the diagnostics service waits a predetermined time period before testing the time again. If the current time matches the scheduled time then the diagnostics service progresses to blocks and to execute the job and store and report the results of the job as discussed above.

In one embodiment the diagnostics service determines whether the scheduled time of a job will generate a conflict with another job and or current status of the network and devices or components under test. For example a conflict exists if the diagnostics service attempts to use a turret while the turret is being used by a person. The diagnostics service may also determine that a conflict exists based on a flag included within metadata of a job. Before executing a test on a device the diagnostics service transmits a status request message to a diagnostics agent of the device. The device if functioning properly transmits to the diagnostics service a status message indicating a status of either in use or not in use . If after a predetermined timeout period has passed since transmitting a status request message the diagnostics service has received no response from the device then the diagnostics service times out and does not execute the job. In one embodiment the status request message is communicated in a SIP message or an HTTPS message.

If the diagnostics service identifies a conflict then it causes the management system client to display a warning dialog box indicating that executing the job according to that schedule will interrupt user service. The management system client can permit an administrator to override the warning causing the diagnostics service to execute the job despite the warning.

Alternatively the diagnostics service can prevent the job from being executed if a conflict is identified. In particular if the diagnostics service receives a status message from the device indicating a status of in use then the diagnostics service postpones testing the device for a predetermined amount of time. After the predetermined amount of time as passed the diagnostics service transmits another status request message to the device only executing the job after receiving a status message from the device indicating a status of not in use . If the diagnostics service receives a status message from the device indicating a status of not in use then the diagnostics service executes the test on the device. Alternatively or in addition the diagnostics service schedules testing to occur in a time period during which a user is less likely to be or simply not using a turret. For instance the diagnostics service can schedule a job to be executed overnight while an office is closed for business.

In addition the diagnostics service restricts any tests that utilize a common resource such as a private line by enabling only one test at a time to be executed using the common resource.

As shown in the management system client receives via a user interface a command to execute a job which has been previously configured and has a corresponding entry stored in the diagnostics data database .

The management system client transmits an execution message to the diagnostics service via a communication protocol such as HTTPS. The execution message includes a reference to a job stored in the diagnostics data database . As discussed above with respect to each job entry stored in the diagnostics data database includes metadata such as a test name input parameter s component type s supported a flag indicating whether a test would interrupt a user using a device to be tested etc.

In response to receiving the execution message from the management system client the diagnostics service executes the test s according to the information included in the execution message. In particular for each component specified in the execution message the diagnostics service executes the test s specified in the execution message using the parameters if any specified in the execution message. For example the diagnostics service generates based on the execution message received from the management system client an individualized execution message for each component to be tested. The diagnostics service transmits to each component to be tested e.g. via the diagnostics execution agent of a target device as shown in a corresponding individualized execution message via a communication protocol such as SSH or HTTPS. The individualized execution message identifies a target component of the target device and indicates which tests or routines are to be executed on the target component.

In response to receiving the individualized execution message from the diagnostics service the diagnostics agent of the target device transmits a finalized execution message to the target component. The finalized execution message instructs the target component to execute the tests or routines specified by the individualized execution message.

In response to receiving the finalized execution message from the diagnostics agent the target component executes the test s specified in the finalized execution message.

After the test s have been executed the target component transmits a results message indicating the results of the test to the diagnostics agent. In response the diagnostics agent transmits a post results message to the data service via a communication protocol such as HTTPS. In response to receiving the post results message from the diagnostics agent the data service writes the test results into the inventory database and or the diagnostics data database via an API such as Java Database Connectivity JDBC .

The diagnostics service transmits a return message indicating the status of the job s to the management system client via a communication protocol such as HTTPS. The management system client displays the status of the job s via the GUI of the administrator PC .

The management system client transmits a query status message to the diagnostics service via a communication protocol such as HTTPS. The diagnostics service transmits a read job status message to the data service . The data service reads the job status from the inventory database and or the diagnostics data database via an API such as JDBC and transmits a job status message to the diagnostics service . The diagnostics service forwards the job status message to the management system client via a communication protocol such as HTTPS. The management system client displays the status of the job s via the GUI of the administrator PC .

When the job is complete the diagnostics service aggregates the job results and transmits an aggregated results message to the management system client via a communication protocol such as HTTPS. The management system client displays the aggregated results via the GUI of the administrator PC .

Block represents audio tests. Audio tests may be executed in one or more audio test scenarios such as a detailed audio test scenario a conference call test scenario a turret call via gateway PBX test scenario and a local audio interface test scenario.

As discussed above with respect to the audio processor includes active and passive audio diagnostics modules that enable remote diagnostic testing audio test automation and audio testing. Example audio diagnostics modules included within the audio processor include a single frequency tone generating module a white noise generating module an audio file playback module and an impulse generating module. The turret or accepts Session Initiation Protocol SIP INVITE messages that request auto answer loopback and play a tone on a specific channel handset or speaker.

Referring back to block example audio tests executed by the audio processor via audio diagnostic modules include a speech power test a noise power test an anomaly detection test a loopback test a peak frequency test an echo return loss test and a round trip delay test.

The audio processor executes a speech power test by measuring the power e.g. in dBm0 for portions of audio that contain speech on any channel and in any direction e.g. to or from a mouthpiece or an earpiece . A sinusoidal generator within the audio processor of a local turret generates a stimulus sweeping a sine wave signal from 0 Hz to a maximum bandwidth frequency e.g. 8 kHz for a 16 kHz sampling rate at a constant amplitude. In one embodiment the stimulus is generated as early in the signal chain as possible as close to the microphone of the local turret as possible. The stimulus is transmitted via a communications network to a remote turret. The audio processor of either the local turret or the remote turret computes an amplitude response by performing power measurements at multiple frequencies in the sweep with a predetermined e.g. low or high frequency resolution. Each power measurement can be made at the remote turret late in the signal chain e.g. as close to the speaker as possible or at the local turret after the audio has been looped back by the remote turret. The diagnostics execution agent compares the amplitude response to predetermined amplitude response patterns to identify any effect s the turret has on perceived loudness of speech as well as potential audio quality issues such as hollow sound tinny sound and or bassy sound. Test results are transmitted to the application server .

The audio processor executes a noise power test by measuring the power e.g. in dBm0 for portions of audio that do not contain speech on any channel and in any direction e.g. to or from a mouthpiece or an earpiece . A local turret creates a test call with a remote turret. During a silent portion of the call e.g. a portion that does not contain speech average power is measured. The average power can be measured by the audio processor of the remote turret late in the signal chain as close to a speaker as possible or by the audio processor of the local turret after the audio has been looped back by the remote turret. The average power measurement is compared to a predetermined expected value and the results are transmitted to the application server .

The audio processor initiates an anomaly detection test by transmitting a narrowband signal such as a tone from one turret to another device or turret that is configured in a loopback mode. The audio processor then measures any anomalies detected from the returned signal. The result of an anomaly detection test includes a number of anomalies detected over time for a particular turret.

The audio processor initiates a loopback test by activating early digital loopback late digital loopback or analog loopback as discussed in further detail above with respect to . In general each loopback test includes configuring one device such as a turret to be in a loopback mode transmitting a stimulus signal and measuring the resulting signal that is returned by the looped device. When the audio processor is operating in any of the three loopback modes the audio processor automatically bypasses audio functions that would interfere with loopback testing such as side tone generation and acoustic echo cancellation.

In one embodiment loopback testing is used to verify the functionality of audio interfaces between each turret in a network of turrets. The diagnostics controller uses a predetermined set of turrets for testing. Alternatively the diagnostics controller searches a database for available turrets to avoid interrupting users who are currently utilizing their turrets. The diagnostics controller generates pairings between the turrets to be tested and establishes calls between each pairing. The diagnostics controller assigns each turret a narrowband audio test tone having a unique frequency that is not harmonically related to the test tones of each other turret. In this way potential interference caused by speakers of nearby turrets is mitigated. In one embodiment the diagnostics controller stores a table of turrets and corresponding test tone frequencies in the database or . The loopback test may be a short term test or a long term test.

For each pairing of turrets the diagnostics controller designates one turret as the source one as the destination and initiates a call from the source turret to the destination turret. The destination turret is configured in a loopback mode with any potentially interfering processes e.g. sidetones and echo cancellation bypassed and with a predetermined gain level. The audio processor of the source turret transmits the test tone. The audio processor measures an audio level of the looped back audio signal at the test tone frequency for example by detecting the signal after filtering it with a narrowband filter. The audio processor compares the measured audio level to predetermined threshold. If the audio level is greater than or equal to the threshold then the diagnostics execution agent transmits to the diagnostics service a message indicating that the test has passed. If the measured audio level is less than the threshold then the diagnostics execution agent transmits to the diagnostics service a message indicating that the test has failed and optionally indicating details regarding any failure s .

In one embodiment a long term loopback test is used to detect anomalies that may not be detected with a short term loopback test. In this way anomalies generated by packet loss jitter buffer adjustments buffer overruns buffer underruns etc. can be detected. The audio processor of the source turret transmits the test tone in the same manner as in the short term loopback test. The audio processor of the source turret filters the looped back audio with a high Q bandstop filter. Any audio signals at the output of the filter are unwanted noise and or distortion. The audio processor then measures an audio level of the filtered looped back audio signal across a predetermined band of frequencies over a predetermined period of time. The audio processor compares the measured audio level to predetermined threshold. If the audio level is less than the threshold then the diagnostics execution agent transmits to the diagnostics service a message indicating that the test has passed. If the measured audio level is greater than or equal to the threshold then the diagnostics execution agent transmits to the diagnostics service a message indicating that the test has failed e.g. that an anomaly has occurred and optionally indicating details regarding any failure s such as how many anomalies occurred at a particular frequency over a particular period of time.

The audio processor executes a peak frequency test by measuring the frequency for any peak sustained signals on any channel and in any direction e.g. to or from a mouthpiece or an earpiece . A test call is established between a local turret and a remote turret. The audio processor of either the local turret or the remote turret captures an audio signal and computes an FFT of the captured audio signal storing power measurements in corresponding frequency bins. The audio processor then identifies the frequency bin having the largest consecutive power measurements over a predetermined number of FFT computations. The audio processor transmits the corresponding frequency e.g. in Hz to the diagnostics service .

The audio processor executes an echo return loss test by measuring the echo return loss on a particular channel. In particular the audio processor measures the input output power on a particular channel using a white noise or .WAV file audio stimulus. The audio processor uses this for measuring line echo canceller single talk echo return loss when connected to a gateway with no loopbacks enabled. The white noise generator is used as the audio test stimulus. The return loss in dB is computed as the difference between the output power in dB and the input power in dB .

The audio processor executes a round trip delay test by measuring the audio round trip delay with a loopback in place somewhere in the audio path outside of the turret that is performing the measuring. The impulse generator is used as the audio test stimulus. The audio processor can measure external round trip delay e.g. in milliseconds ms mouth to ear round trip delay in ms and mouth to ear one way delay in ms .

The diagnostics service initiates a DTMF test by transmitting a message to the turret instructing the diagnostics execution agent to emulate the pressing of a button on the turret . The diagnostics execution agent particularly the audio processor detects audio level tone and or noise before and after the emulated button press occurs and compares the audio tone level to a predetermined threshold. If the audio level is greater than or equal to the threshold then the diagnostics execution agent transmits to the diagnostics service a message indicating that the test has passed. If the audio level is less than the threshold then the diagnostics execution agent transmits to the diagnostics service a message indicating that the test has failed.

The diagnostics service initiates a volume test by transmitting a message to the turret instructing the diagnostics execution agent to send a local tone out of a handset of the turret and loop it back in the A D converter to the audio processor . The audio processor measures the receive volume at one or more transmit volume levels and compares the audio level to a predetermined threshold which is adjusted based on the user handset transmit volume. If the audio level is greater than or equal to the threshold then the diagnostics execution agent transmits to the diagnostics service a message indicating that the test has passed. If the audio level is less than the threshold then the diagnostics execution agent transmits to the diagnostics service a message indicating that the test has failed.

The diagnostics service initiates an intercom test by transmitting a message to the turret instructing the diagnostics execution agent to make a direct intercom call from a local turret to a distant turret via a handsfree module on the a local turret with loopback enabled in distant turret. The audio processor measures and compares the audio level to a predetermined threshold. If the audio level is greater than or equal to the threshold then the diagnostics execution agent transmits to the diagnostics service a message indicating that the test has passed. If the audio level is less than the threshold then the diagnostics execution agent transmits to the diagnostics service a message indicating that the test has failed. In addition the audio processor measures the roundtrip mouth to ear delay from the local turret to the distant turret and transmits the measurement to the diagnostics service .

The diagnostics service initiates a conference turret to turret via media server test by transmitting a message to the turret instructing the diagnostics execution agent to open a common manual ringdown communication line on both a source turret and a destination turret. Both the source turret and the destination turret are in conference via a media server. The audio coupling between the source turret and the destination turret via the media server is tested. In particular the audio processor measures an audio level a frequency response and or a time delay. The audio processor compares the measured audio level frequency response and or time delay to predetermined threshold s . If the audio level frequency response and or time delay are greater than or equal to the threshold s then the diagnostics execution agent transmits to the diagnostics service a message indicating that the test has passed. If the audio level frequency response and or time delay are less than the threshold s then the diagnostics execution agent transmits to the diagnostics service a message indicating that the test has failed and optionally indicating details regarding any failure s . For example the message may include a measured audio level a measured frequency response and a measured time delay.

The diagnostics service initiates a turret to turret dialtone test by transmitting a message to the turret instructing the diagnostics execution agent of a source turret to activate a dialtone communication line on its handset and to dial digits corresponding to a destination turret. The audio processor of the destination turret detects an incoming ring notification and answers the call on its handset. This tests an audio coupling between the source turret and the destination turret directly for internal calls or via a PBX for external calls. In particular the audio processor measures an audio level a frequency response and or a delay. The audio processor compares the measured audio level frequency response and or delay to predetermined threshold s . If the audio level frequency response and or delay are greater than or equal to the threshold s then the diagnostics execution agent transmits to the diagnostics service a message indicating that the test has passed. If the audio level frequency response and or delay are less than the threshold s then the diagnostics execution agent transmits to the diagnostics service a message indicating that the test has failed and optionally indicating details regarding any failure s .

The diagnostics service initiates a turret to turret speeddial test by transmitting a message to the turret instructing the diagnostics execution agent of a source turret to activate a speeddial button on its handset causing the dialing of digits corresponding to a destination turret. The audio processor of the destination turret detects an incoming ring notification and answers the call on its handset. This tests an audio coupling between the source turret and the destination turret directly for internal calls or via a PBX for external calls. In particular the audio processor measures an audio level a frequency response and or a delay. The audio processor compares the measured audio level frequency response and or delay to predetermined threshold s . If the audio level frequency response and or delay are greater than or equal to the threshold s then the diagnostics execution agent transmits to the diagnostics service a message indicating that the test has passed. If the audio level frequency response and or delay are less than the threshold s then the diagnostics execution agent transmits to the diagnostics service a message indicating that the test has failed and optionally indicating details regarding any failure s .

The diagnostics service initiates a voice recorder test by transmitting a message to the turret instructing the diagnostics execution agent to activate voice recording via the recording application and to activate one or more communication channels of the turret . The audio processor transmits from the microphone of the activated channel to the recording application via a communication network a voice message including voice data a user identifier and a channel identifier. Alternatively the user identifier and or the channel identifier may be transmitted as voice data. For example the voice data may when audibly reproduced indicate the user identifier and or the channel identifier. An administrator can then verify the data recorded on the recording application via the management system client .

Referring back to block represents device self tests. Examples of device self tests include a media gateway self test and a turret self test. In a self test which may be a power on self test POST or a built in self test BIT basic functionality of internal systems is tested by the device being tested. For example in a media gateway self test the media gateway executes tests on itself verifying for example that the communication line interface is operating correctly.

Block represents time verification tests. Examples of time verification tests include an application server A S to A S time verification test an A S to media server time verification test an A S to media gateway time verification test an A S to turret time verification test and an A S to external NTP server time verification test. The diagnostics service executes a time verification test by querying a target device for a target time retrieving the target time and comparing the target time with a time retrieved from a remote NTP server.

Block represents database integrity tests. The diagnostics service executes database integrity tests to verify that the databases and have not been corrupted. Database integrity tests verify that data entered into the databases or is accurate valid and consistent. Three basic types of database integrity constraints are 1 entity integrity which does not permit any two rows to have the same identity within a table 2 domain integrity which restricts data to predefined data types e.g. dates and 3 referential integrity which requires the existence of a related row in another table e.g. a customer for a given customer ID .

Block represents configuration verification tests. Examples of configuration verification tests include a media gateway configuration verification test a media server configuration verification test and a turret configuration verification test. The diagnostics service executes configuration verification tests to verify that devices e.g. a media gateway a media server a turret have been programmed correctly and that there are no configuration parameters missing from a device that would prevent the device from powering on and functioning.

Block represents software version verification tests. Examples of software version verification tests include a local A S software version verification test a remote A S software version verification test a media server software version verification test a media gateway software version verification test a turret software version verification test and a desktop application or softphone software version verification test. The diagnostics service executes software version verification tests by polling software components for software version information and comparing the responses if any to records stored in the inventory database to ensure that the correct software version is installed on a particular device.

Block represents turret tests. Examples of turret tests include a read button module test a repetitive test a logon turret test a logoff turret test a restore logon turret test a speed dial turret test and a configuration change turret test.

The diagnostics service executes a button module test by transmitting a message to the turret instructing the diagnostics execution agent to return a message indicating the current text being displayed on a button module. The diagnostics service forwards the response message to the management system client to be displayed via a GUI enabling an administrator to determine whether the button display is correct.

The diagnostics service executes a repetitive test by transmitting a message to the turret instructing the diagnostics execution agent to execute any predetermined test repeatedly either for a predetermined number of times or until a failure is detected. The diagnostics execution agent transmits to the diagnostics service a message indicating that the test is passing or that a failure was detected after a particular number of executions. This tests the reliability and or robustness of certain functionality of the turret .

Block represents media gateway tests such as a line status verification test. The diagnostics service executes media gateway tests to verify for example that media gateway lines are physically coupled that the media gateway lines are live etc.

Block represents AFM tests. Examples of AFM tests include an AFM test trap. The diagnostics service executes AFM tests to verify that alarm signals are operating correctly. In particular the diagnostics service transmits a test trap to an AFM interface and verifies that the test trap is received at a local trap management system.

Block represents call control tests. Examples of call control tests include a private line connection test a dial tone line connection test an intercom connection test an inbound call routing test and a voice recording test. Call control tests are executed via the administrator PC . In particular a set of test user profiles is generated via the management system client . A test profile is GUI element that emulates a turret and contains button and speaker configurations. The test profile also includes references to test extensions configured private communication lines dial tone lines and speed dial entries. To execute a call control test of a turret the test profiles log onto the turret being tested and for example make a call via the turret. In this case the voice channel of the turret being tested is used by the test profile. As discussed above with respect to a test that has the potential to generate a conflict with a user of the turret such as a call control test may be scheduled to execute at a time when the turret is less likely to be used. Call control tests particularly audio tests are discussed in further detail above with respect to .

The present invention e.g. systems and procedures and through or any part s or function s thereof can be implemented using hardware software or a combination thereof and can be implemented in one or more computers or other processing systems. However the manipulations performed by the present invention were often referred to in terms such as establishing or discovering which are commonly associated with mental operations performed by a human operator. No such capability of a human operator is necessary or desirable in most cases in any of the operations described herein which form part of the present invention. Rather the operations are machine operations. Useful machines for performing the operation of the present invention include general purpose digital computers or similar devices.

In fact in one embodiment the invention is directed toward one or more computers capable of carrying out the functionality described herein. An example of a computer is shown in .

Computer includes one or more processors such as processor . The processor is coupled to a communication infrastructure e.g. a communications bus cross over bar or network . Various software embodiments are described in terms of this example computer. After reading this description it will become apparent to a person skilled in the relevant art s how to implement the invention using other computers and or architectures.

Computer can include a display interface that forwards graphics text and other data from the communication infrastructure or from a frame buffer not shown for display on the display unit .

Computer also includes a main memory such as random access memory RAM and can also include a secondary memory . The secondary memory can include for example a hard disk drive and or a removable storage drive representing a floppy disk drive a magnetic tape drive an optical disk drive etc. The removable storage drive reads from and or writes to a removable storage unit in a well known manner. Removable storage unit represents a floppy disk magnetic tape optical disk etc. which is read by and written to by removable storage drive . As will be appreciated the removable storage unit includes a computer usable storage medium having stored therein computer software and or data.

In alternative embodiments secondary memory can include other similar devices for allowing computer programs or other instructions to be loaded into computer . Such devices can include for example a removable storage unit and an interface . Examples of such can include a program cartridge and cartridge interface such as that found in video game devices a removable memory chip such as an erasable programmable read only memory EPROM or programmable read only memory PROM and associated socket and other removable storage units and interfaces which allow software and data to be transferred from the removable storage unit to computer .

Computer can also include a communications interface . Communications interface allows software and data to be transferred between computer and external devices. Examples of communications interface can include a modem a network interface such as an Ethernet card a communications port a Personal Computer Memory Card International Association PCMCIA slot and card etc. Software and data transferred via communications interface are in the form of signals which can be electronic electromagnetic optical or other signals capable of being received by communications interface . These signals are provided to communications interface via a communications path e.g. channel . This channel carries signals and can be implemented using wire or cable fiber optics a telephone line a cellular link a radio frequency RF link and other communications channels.

In this document the terms computer program medium computer readable medium and computer usable medium are used to generally refer to media such as removable storage drive a hard disk installed in hard disk drive and or signals . These computer program products provide software to computer . The invention is directed to such computer program products.

Computer programs also referred to as computer control logic are stored in main memory and or secondary memory . Computer programs can also be received via communications interface . Such computer programs when executed enable the computer to perform the features of the present invention as discussed herein. In particular the computer programs when executed enable the processor to perform the features of the present invention. Accordingly such computer programs represent controllers of the computer .

In an embodiment where the invention is implemented using software the software can be stored in a computer program product and loaded into computer using removable storage drive hard drive or communications interface . The control logic software when executed by the processor causes the processor to perform the functions of the invention as described herein.

In another embodiment the invention is implemented primarily in hardware using for example hardware components such as application specific integrated circuits ASICs . Implementation of the hardware state machine so as to perform the functions described herein will be apparent to persons skilled in the relevant art s .

In yet another embodiment the invention is implemented using a combination of both hardware and software.

While various embodiments of the present invention have been described above it should be understood that they have been presented by way of example and not limitation. It will be apparent to persons skilled in the relevant art s that various changes in form and detail can be made therein without departing from the spirit and scope of the present invention. Thus the present invention should not be limited by any of the above described example embodiments but should be defined only in accordance with the following claims and their equivalents.

In addition it should be understood that the figures illustrated in the attachments which highlight the functionality and advantages of the present invention are presented for example purposes only. The architecture of the present invention is sufficiently flexible and configurable such that it can be utilized and navigated in ways other than that shown in the accompanying figures.

Further the purpose of the foregoing Abstract is to enable the U.S. Patent and Trademark Office and the public generally and especially the scientists engineers and practitioners in the art who are not familiar with patent or legal terms or phraseology to determine quickly from a cursory inspection the nature and essence of the technical disclosure of the application. The Abstract is not intended to be limiting as to the scope of the present invention in any way. It is also to be understood that the steps and procedures recited in the claims need not be performed in the order presented.

