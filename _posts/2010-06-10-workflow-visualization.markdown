---

title: Workflow visualization
abstract: A mechanism is provided for saving workflow execution state and mapping the execution state to graphical elements overlaid on a graphical drawing representing the workflow generated by a separate application. The graphical drawing may be a flowchart drawing corresponding to one or more paths of the workflow and the graphical elements may provide status information associated with individual steps or groups of steps of the workflow execution.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08621421&OS=08621421&RS=08621421
owner: Microsoft Corporation
number: 08621421
owner_city: Redmond
owner_country: US
publication_date: 20100610
---
A workflow includes a sequence of connected steps. It is a depiction of a sequence of operations declared as work of a person a group of persons an organization of staff or one or more simple or complex mechanisms. For control purposes workflow may be a view on performed work under a particular aspect thereby serving as a virtual representation of the performed work. The flow being described may often refer to a document that is being transferred from one step to another. In software engineering workflow refers to detailed code specifications for running and coordinating a sequence of events. It can be a simple linear sequence the classic flow chart for example or a conditional many branched series of events linked together and interacting within complex feedback loops.

Workflows may be represented textually or graphically. Graphical representations of workflow may include elements such as flowchart components and typically display a workflow statically i.e. the entire process from beginning to end or a temporal slice of the workflow. Textual representations may describe workflows statically or dynamically. For example workflow reports may list temporal or otherwise progress along a workflow s path s .

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This summary is not intended to exclusively identify key features or essential features of the claimed subject matter nor is it intended as an aid in determining the scope of the claimed subject matter.

Embodiments are directed to a mechanism for saving workflow execution state and mapping the execution state to graphical elements overlaid on a graphical drawing representing the workflow generated by a workflow application. According to some embodiments the graphical drawing may be a flowchart drawing corresponding to one or more paths of the workflow and the graphical elements may provide status information associated with individual steps of the workflow execution.

These and other features and advantages will be apparent from a reading of the following detailed description and a review of the associated drawings. It is to be understood that both the foregoing general description and the following detailed description are explanatory and do not restrict aspects as claimed.

As briefly described above workflow execution state may be saved and mapped to graphical elements that are overlaid on a graphical drawing such as a flowchart representing the static workflow. The graphical elements may provide status information associated with individual steps or groups of steps of the workflow execution. In the following detailed description references are made to the accompanying drawings that form a part hereof and in which are shown by way of illustrations specific embodiments or examples. These aspects may be combined other aspects may be utilized and structural changes may be made without departing from the spirit or scope of the present disclosure. The following detailed description is therefore not to be taken in a limiting sense and the scope of the present invention is defined by the appended claims and their equivalents.

While the embodiments will be described in the general context of program modules that execute in conjunction with an application program that runs on an operating system on a personal computer those skilled in the art will recognize that aspects may also be implemented in combination with other program modules.

Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that embodiments may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and comparable computing devices. Embodiments may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

Embodiments may be implemented as a computer implemented process method a computing system or as an article of manufacture such as a computer program product or computer readable media. The computer program product may be a computer storage medium readable by a computer system and encoding a computer program that comprises instructions for causing a computer or computing system to perform example process es . The computer readable storage medium can for example be implemented via one or more of a volatile computer memory a non volatile memory a hard drive a flash drive a floppy disk or a compact disk and comparable media.

Throughout this specification the term platform may be a combination of software and hardware components for managing web based applications executing workflows visualization applications and similar ones. Examples of platforms include but are not limited to a hosted service executed over a plurality of servers an application executed on a single server and comparable systems. The term server generally refers to a computing device executing one or more software programs typically in a networked environment. However a server may also be implemented as a virtual server software programs executed on one or more computing devices viewed as a server on the network.

Diagram includes the hosted workflow visualization service provided by four servers or clusters which execute a visualization application a workflow application a design application and a rendering application respectively. The servers and data store for maintaining data related to the workflow and visualization operations may communicate over one or more networks . The workflow visualization including graphical elements representing workflow execution state s overlaid on a static workflow diagram may be rendered through a browsing application at a client device. Of course other applications may also be used to view the rendering of the visualized workflow.

For generating a drawing representing a workflow visualization application may expose one or more application programming interfaces APIs in a feature for importing and exporting workflows. Design application may call the APIs which take a structured file e.g. an extended extensible Markup Language file such as xoml and a rules file that represents the workflow execution logic activity tree from workflow application . Visualization application then creates a drawing that includes shapes and connectors to match the constructs explained by the structured data file.

The generated drawing may include shapes each with identifiers. Visualization application may create a new structured data file that includes the identifiers embedded in a description field in each activity that has a corresponding shape and return the new structured data file rules file and the drawing file to design application . The files may be combined in a compressed package. Design application may extract the structured data file and the rules file from the package copy the shape identifiers into the original structured data file and publish the updated structured data file the rules file and the drawing file to the rendering application . Design application may understand the locations of the annotations and preserve them across editing operations.

Differently from the system in the workflow visualization system in diagram may make the graphical elements representing workflow execution state s available to the browsing application at the client device through rendering application . A script executed at the client device may receive the graphical elements and overlay them on a static diagram of the workflow rendering the annotated visualization. In other configurations any of the other applications may be combined into a single application or executed as separate applications on the same server.

Graphical visualization is an example of workflow visualization according to some embodiments. Graphical visualization may include a textual summary of the displayed workflow such as an initiator s name a start date an item descriptor and a status. Diagram of graphical visualization may include a flowchart representation of the entire workflow from start to stop with various flowchart shapes representing different workflow activities. As discussed previously shape information and content for the flowchart shapes may be received from a workflow application through a structured data file and the flowchart generated by a visualization application as a static diagram. The rules file may also impact the visualization. The static diagram may be annotated with graphical elements such as activity type icon user icon and status icon . For example user icon may identify a responsible user for a particular workflow activity. Status icon may identify each step of the workflow as being completed or not. User icon and status icon are rendered at runtime not during generation of the drawing. However the activity type icon is static in the drawing. Some or all of the graphical elements may be actionable i.e. a user may be provided additional information e.g. a user s name address etc. by clicking on a particular graphical element.

Visualization application may also create a new workflow definition with annotations that includes shape identifiers for each activity with a corresponding shape and return the workflow definition with annotations to design application . Design application may update the original workflow definition based on the annotations and publish the workflow definition and the static diagram to rendering server for execution. Updating the original workflow by the design application may include overwriting the entire original workflow definition with the full workflow definition returned by the visualization application.

Thus when the workflow is executed on the server upon serialization the workflow runtime may also store execution state data about the activities it has executed e.g. in progress or completed and a corresponding shape identifier mapped to an activity during drawing generation. In an example implementation the execution state data may be stored as a string in a column called activity details along with the serialized binary for the workflow instance data. Of course other storage methods may also be utilized. Every time the workflow instance executes the server may update the activity details with the updated execution history of the activity tree.

Activities at render time may be summarized as receiving a request for a status page page server loading the page the page loading the static diagram representing the workflow the page retrieving annotated workflow data and a script where the script generates the overlays and displaying the overlays on the static diagram .

Thus when a user opens the workflow status page to view the status of a workflow instance the status page may display a hosted visualization application user interface that loads the static diagram for the workflow definition. The page may then load the activity details for the workflow instance from database parse the shape identifier activity state mappings and use a script to display corresponding overlay graphics over shapes based on those mappings. According to some embodiments default shapes from the visualization application may be modified or re ordered to accommodate the annotations.

The different processes discussed in such as generation of overlay elements i.e. loading of existing images to be overlaid generation of the static diagram and interactions between components of the system may be performed at distinct hardware modules software modules or combinations of hardware and software. Furthermore such modules may perform two or more of the processes in an integrated manner using the principles described herein.

Client applications executed on any of the client devices may interact with a hosted service providing workflow services from the servers or on individual server . The hosted service may execute the workflow coordinate generation of a static drawing representing the workflow and create graphical elements corresponding to the workflow execution state to be overlaid over the static drawing. Relevant data such as workflow data and similar information may be stored and or retrieved at from data store s directly or through database server .

Network s may comprise any topology of servers clients Internet service providers and communication media. A system according to embodiments may have a static or dynamic topology. Network s may include secure networks such as an enterprise network an unsecure network such as a wireless open network or the Internet. Network s may also include especially between the servers and the mobile devices cellular networks. Furthermore network s may include short range wireless networks such as Bluetooth or similar ones. Network s provide communication between the nodes described herein. By way of example and not limitation network s may include wireless media such as acoustic RF infrared and other wireless media.

Many other configurations of computing devices applications data sources and data distribution systems may be employed to implement a platform providing workflow visualization. Furthermore the networked environments discussed in are for illustration purposes only. Embodiments are not limited to the example applications modules or processes.

Workflow application visualization application and rendering application may in practice be executed on separate servers client devices or other components of a distributed system. Workflow application may execute workflows collect information associated with the execution provide execution state data and the like. Visualization application may provide graphical visualizations including diagrams flowcharts shapes and various other graphical elements. Rendering application may render a visualized workflow where graphical elements representing workflow execution state are overlaid on a static workflow drawing as discussed previously. This basic configuration is illustrated in by those components within dashed line .

Computing device may have additional features or functionality. For example the computing device may also include additional data storage devices removable and or non removable such as for example magnetic disks optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage . Computer readable storage media may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. System memory removable storage and non removable storage are all examples of computer readable storage media. Computer readable storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computing device . Any such computer readable storage media may be part of computing device . Computing device may also have input device s such as keyboard mouse pen voice input device touch input device and comparable input devices. Output device s such as a display speakers printer and other types of output devices may also be included. These devices are well known in the art and need not be discussed at length here.

Computing device may also contain communication connections that allow the device to communicate with other devices such as over a wired or wireless network in a distributed computing environment a satellite link a cellular link a short range network and comparable mechanisms. Other devices may include computer device s that execute communication applications other servers and comparable devices. Communication connection s is one example of communication media. Communication media can include therein computer readable instructions data structures program modules or other data. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media.

Example embodiments also include methods. These methods can be implemented in any number of ways including the structures described in this document. One such way is by machine operations of devices of the type described in this document.

Another optional way is for one or more of the individual operations of the methods to be performed in conjunction with one or more human operators performing some. These human operators need not be collocated with each other but each can be only with a machine that performs a portion of the program.

Process begins with operation where workflow description is received. Workflow description may be received at a visualization application in form of a structured data file e.g. an extended XML file . At operation a static visualization diagram may be generated based on the received workflow description. This may include mapping of shape identifiers to an activity tree determining content for individual shapes of the diagram etc. According to some embodiments shapes forming the diagram may be modified from their default forms to accommodate workflow characteristics.

At operation workflow execution state information may be received at workflow execution time. The information may be encoded into a workflow instance table. At operation workflow execution state may be examined by retrieving the state from the instance table and interpreting the state information to generate the appropriate visualizations which are overlaid on the static drawing and rendered for a requesting user at operation .

The operations included in process are for illustration purposes. Providing workflow visualization may be implemented by similar processes with fewer or additional steps as well as in different order of operations using the principles described herein.

The above specification examples and data provide a complete description of the manufacture and use of the composition of the embodiments. Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims and embodiments.

