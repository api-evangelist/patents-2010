---

title: System-level testcase generation
abstract: A system-level testcase may be generated by performing system-level generation tasks by a system-level generator to produce an abstract testcase. Based upon the abstract testcase, one or more unit-level generators may generate the testcase. The testcase may be utilized in simulation of operation of a system-under-test (SUT). The testcase may be utilized for verification of the SUT. The SUT may comprise a plurality of units. The unit-level generator may be associated with units of the SUT and perform generation tasks associated with pertinent units.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08868976&OS=08868976&RS=08868976
owner: International Business Machines Corporation
number: 08868976
owner_city: Armonk
owner_country: US
publication_date: 20101104
---
The present disclosure relates to testing in general and to generation of a system level testcase in particular.

Computerized devices control almost every aspect of our life from writing documents to controlling traffic lights. However computerized devices are bug prone and thus require a testing phase in which the bugs should be discovered. The testing phase is considered one of the most difficult tasks in designing a computerized device. The cost of not discovering a bug may be enormous as the consequences of the bug may be disastrous. For example a bug may cause the injury of a person relying on the designated behavior of the computerized device. Additionally a bug in hardware or firmware may be expensive to fix as patching it requires call back of the computerized device. Hence many developers of computerized devices invest a substantial portion such as 70 of the development cycle to discover erroneous behaviors of the computerized device.

During the testing phase functional verification may be performed. One approach to functional verification is to perform simulation of a system under test SUT . The simulation operates based on stimuli that may be generated. In some exemplary embodiments a testcase generator is operative to generate a testcase to provide for stimuli of the SUT. The testcase may be generated based upon a test template. In some exemplary embodiments the testcase may be a list of instructions to the SUT which are in turn simulated by the simulator. The test template may be a descriptive specification of a set of testcases. The test template may be provided using for example a context free formal language. The test template may comprise commands as to how the generation of the testcase is to be performed. These commands generally define generation tasks such as for example setting an address to be used in the instruction selecting an instruction out of a set of instructions determining a number of repetitions to be performed determining whether a synchronization event occurs or the like. Generally speaking based on the test template a plurality of alternative testcases may be generated all are characterized in fulfilling the requirements of the test template. In some cases the test template may explicitly or implicitly define generation tasks. For example in some cases the test template may describe a template of a resulting testcase and therefore implicitly define generation tasks.

An offline generator is designed to generate a testcase which is in turn utilized by the simulator for simulation. An online generator is designed to operate in generation simulation cycles. In each cycle one or more instructions of the testcase may be generated and in turn simulated by the simulator. Based on the simulated execution of the previous cycle generation of consecutive instruction s may be performed.

In some exemplary embodiments a generator may be a general purpose generator such that may employ a Constraint Satisfaction Problem CSP solver to generate the testcase based on the test template. The CSP solver may for example be utilized to determine an instruction that is in line with the requirements of the test template and that is optionally biased towards a quality testcase. In some exemplary embodiments biasing may be architecture aware such as to invoke specific events of the specific architecture of the SUT e.g. cache events page faults segmentation faults resource contentions address collisions or the like . In some exemplary embodiments the test template is translated into a series of CSPs comprising of hard constraints and soft constraint wherein the soft constraints are utilized to bias the testcase towards a higher quality testcase when possible.

In some exemplary embodiments the generator may be a special purpose generator such as specifically designed for the purpose of generating testcases for the SUT. A dedicated generator may be utilized when a CSP based approach is not efficient. For example a CSP approach of a cryptographic engine which encodes and decodes inputs may require the CSP solver to solve a relatively hard computational problem of computing the encryption function. Use of a dedicated solver may provide for a more efficient solution.

One exemplary embodiment of the disclosed subject matter is a computerized apparatus for generating a testcase the computerized apparatus having a processor and a storage device the computerized apparatus comprising a test template obtainer operative to obtain a test template associated with a system under test SUT wherein the SUT comprises a plurality of units wherein the test template represents alternative testcases in which the plurality of units interact a system level generator operative to generate an abstract testcase based on the test template wherein the system level generator is operative to perform system level generation tasks defined by the test template and at least one unit level generator operative to generate a testcase comprising the abstract testcase wherein the at least one unit level generator is operative to perform unit level generation tasks defined by the test template.

Another exemplary embodiment of the disclosed subject matter is a computer implemented method for generating a testcase wherein the computer implemented method is performed by a processor the computer implemented method comprising obtaining a test template associated with a system under test SUT wherein the SUT comprises a plurality of units wherein the test template defines system level generation tasks and unit level generation tasks generating an abstract testcase based on the test template wherein the generating the abstract testcase comprises performing the system level generation tasks generating the testcase wherein the testcase comprises the abstract testcase wherein the generating the testcase comprises performing the unit level generation tasks and outputting the testcase.

Yet another exemplary embodiment of the disclosed subject matter is a computer program product for generating a testcase the product comprising a non transitory computer readable medium a first program instruction for obtaining a test template associated with a system under test SUT wherein the SUT comprises a plurality of units wherein the test template defines system level generation tasks and unit level generation tasks a second program instruction for generating an abstract testcase based on the test template wherein the generating the abstract testcase comprises performing the system level generation tasks a third program instruction for generating the testcase wherein the testcase comprises the abstract testcase wherein the generating the testcase comprises performing the unit level generation tasks and wherein the first second and third program instructions are stored on the computer readable medium.

The disclosed subject matter is described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the subject matter. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instruction means which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

One technical problem dealt with by the disclosed subject matter is to generate a system level testcase based on a template. Another technical problem is to generate a testcase to a system comprising of a plurality of units. Yet another technical problem is to generate a quality testcase in which operation of the units is coordinated from a system level perspective. Yet another technical problem is to generate testcases comprising stimuli for units having a relatively complex interface.

One technical solution is to divide generation tasks into system level and unit level generation tasks. System level generation tasks may be performed by a system level generator. Unit level generation tasks may be performed by a unit level generator. Another technical solution is to determine which generation task defined by the test template is unit level and which is system level. The determination may be performed based on architecture knowledge of the SUT. The determination may be performed based on indications in the test template such as provided manually by an author of the test template or by an automatic preprocessing tool. Yet another technical solution is to utilize a system level generator to generate an abstract testcase and utilize a unit level generator to generate a testcase based on the abstract testcase. The system level generator may provide instructions to the unit level generator as to how to perform the unit level generation tasks. Yet another technical solution is to utilize a plurality of unit level generators each associated with a different unit. The unit level generators may be predetermined or obtained dynamically. The unit level generators may be special purpose generator designed for a specific generation task e.g. a generator developed ad hoc a dedicated program or the like . The system level generator may be a general purpose generator such as a CSP based generator.

One technical effect of utilizing the disclosed subject matter is to divide the task of generating a system level testcase into tasks that may take into account the SUT as a whole i.e. system level generation tasks and into low level tasks that are generally indifferent of the system as a whole i.e. unit level generation tasks . The above characterization of system level and unit level generation tasks is provided as an exemplary only. It will be specifically noted that in some exemplary embodiments some system level generation tasks may not take into account the SUT as a whole. It will be specifically noted that in some exemplary embodiments some unit level generation tasks may not be indifferent of the system as a whole. Another technical effect is to enable reuse of unit level generators for system level testcase generation. Yet another technical effect is to enable modular approach to system level testcase generation in which different generation techniques are utilized to generate different portions of the testcase. For example system level tasks may be performed using a first approach unit level tasks associated with a first unit may be performed using a second approach and unit level tasks associated with a second unit may be performed using a third approach.

Referring now to showing a computerized environment in which the disclosed subject matter is used in accordance with some exemplary embodiments of the subject matter.

A computerized environment may comprise a SUT . The SUT may be a hardware component a hardware system a software module a firmware module a computerized device a combination thereof or the like. In some exemplary embodiments the SUT may be a system comprising one or more units . A unit is a computerized module that is relatively independent. For example in a SUT of a chip there may be several units such as a general purpose processor a special purpose processor a hardware accelerator a bus a memory controller a bridge to connect I O devices or the like. In some exemplary embodiments a processor may comprise a core as a unit a core may comprise a hardware thread as a unit or the like. In some exemplary embodiments there may be several units of the same type e.g. several cores . There may be several units of different types e.g. a hardware accelerator and a network packets processing units .

In some exemplary embodiments one or more of the units may be characterized in requiring input of predetermined format that is relatively complex. For example a cryptographic hardware accelerator may be characterized in having an input that should obey complex cryptographic rules. As another example a unit may require complex address translation. The translation path in such an example may include several levels of different translation tables that need to be accounted for during generation of a testcase. As yet another example in a network packet processing unit the packet may have a complex multi layer structure e.g. Ethernet TCP packet . Therefore a generated testcase may be required to provide a valid network packet according to the complex structure. It will be noted that the examples herein are provided for the ease of explanation only. The disclosed subject matter is not limited to these examples or to such units. A person of ordinary skill in the art would be able to recognize additional units that may be considered appropriate to be handled based on the teachings of the disclosed subject matter. Generally speaking and as an example only it may be efficient to apply the disclosed subject matter in cases where a unit may be deemed as associated with a relatively complex CSP.

In some exemplary embodiments a test template may be associated with the SUT and describe in a general manner a testcase to be generated and used to test the SUT . The generated testcase may be configured to stimulate the SUT and at least a portion of the units .

The test template may be provided in a predetermined formal language. The test template may be hand written by a user such as a specification engineer a verification engineer a QA staff member a developer or the like.

In some exemplary embodiments a testcase generator may be configured to process the test template and generate a testcase. The testcase may be in line with requirements and definitions of the test template . In some exemplary embodiments the testcase generator may be an offline generator. In some exemplary embodiments the testcase generator may be configured to utilize architecture knowledge of the SUT such as retained in a hard disk drive a Flash disk a Random Access Memory RAM a memory chip a remote storage server or the like. The architecture knowledge may be utilized to bias the generated testcase to be of relatively high quality such as for example invoking predetermined events that are more interesting e.g. cache events sharing of a cache line by a plurality of processors causing a page fault reusing a previously utilized address space and the like . A person of ordinary skill in the art is aware of a large number of classes of such interesting events that are associated with a high quality testcase.

In some exemplary embodiments a simulator may be operative to simulate an execution of the SUT in respect to a testcase. The testcase generated by the testcase generator may be utilized by the simulator . In some exemplary embodiments the simulator may be a Hardware Descriptive Language HDL simulator. In some exemplary embodiments a simulator may operate slower than the actual SUT . However the SUT may not be available at a testing phase prior to fabricating a hardware chip. As the simulator may operate relatively slow it is preferable that testcases utilized in simulation be valid e.g. stimulate a well defined behavior of the SUT and of relatively high quality. A testcase that expands coverage of testing of the SUT may be considered a testcase of high quality. A testcase that stimulate a potentially erroneous behavior of the SUT may be considered a testcase of high quality.

In some exemplary embodiments the user may interact with the computerized system using a Man Machine Interface MMI such as a terminal a display a keyboard an input device or the like. The user may define the test template such as by writing a text file containing the test template. The user may define the architecture knowledge of the SUT . The user may provide rules commands preferences and parameters to the testcase generator . The user may provide rules commands preferences and parameters to the simulator . The user may view the testcase generated by the testcase generator . The user may view the simulated execution performed by the simulator e.g. by viewing a log file . Based upon the simulated execution by the simulator the user may determine to design a new test template such as to modify the test template to generate additional testcases based on the original new or modified test template or the like. In some exemplary embodiments there may be several different users such as for example one user may define the test template while another user may operate the testcase generator .

Referring now to showing an apparatus in accordance with some exemplary embodiments of the disclosed subject matter. An apparatus such as of may be configured to generate at least one testcase based on a test template.

In some exemplary embodiments a test template obtainer may be configured to retrieve receive or otherwise obtain a test template such as a of . In some exemplary embodiments the test template obtainer may utilize an I O module to obtain the test template.

In some exemplary embodiments a system level generator may be configured to generate an abstract testcase based on the test template. The system level generator may be configured to perform system level generation tasks. The system level generation tasks may be tasks that affect coordination of the units of the SUT. For example a first unit may be required to read the address written to by a second unit in order to provide for a quality testcase. As another example a timing of operation of a first unit may be affected by a timing of operation of a second unit.

In some exemplary embodiments the abstract testcase may be a testcase that is not complete i.e. it cannot be utilized as is by a simulator such as of . The abstract testcase may be a file of the form of a test template e.g. the test template obtained may be modified to represent a smaller number of testcases may be a file of the form of a testcase having optionally partial instructions or may be of other format.

In some exemplary embodiments the test template may explicitly or implicitly define generation tasks. In some exemplary embodiments some of the generation tasks may be system level generation tasks and some may be unit level generation tasks. In some exemplary embodiments the test template may define a system level generation task that once performed may require additional unit level generation tasks. Such unit level generation tasks are also said to be defined by the test template.

In some exemplary embodiments the system level generator may utilize an architectural knowledge of the SUT such as retained by an architectural knowledge module in order to bias the generation towards a testcase of a generally high quality. The system level generator may be a general purpose generator configurable to generate quality testcases for the specific SUT using the architectural knowledge of the SUT.

In some exemplary embodiments the system level generator may identify which of the generation tasks defined by the test template are system level and which are not i.e. are deemed as unit level . The determination may be made in accordance with architectural knowledge of the SUT such as retained by the architectural knowledge module . In some exemplary embodiments the test template may indicate which generation task is a system level generation task and which is a unit level generation task. The indication may be provided using a predetermined format such as a comment a symbol or the like. The indication may be hand written by the author of the test template. Alternatively the indication may be automatically generated such as by a preprocessing module that is able to distinguish between the two types of generation tasks.

A unit level generation task may be associated with a specific unit of the SUT. In some exemplary embodiments the system level generator may further utilize the architectural knowledge of the SUT to determine for a unit level generation task an associated unit out of the plurality of units of the SUT.

In some exemplary embodiments the architectural knowledge module may retain architectural knowledge provided by a user such as of or otherwise inputted into the apparatus .

In some exemplary embodiments a CSP solver may be utilized by the system level generator as is known in the art. The system level generator may generate a CSP based on the system level generation tasks and utilize the CSP solver in order to generate the abstract testcase.

In some exemplary embodiments an instructions generator may be operative to generate instructions to an at least one unit level generator . The instruction may define a unit level generation task to be performed by the unit level generator . In some exemplary embodiments the instructions may be incorporated into the abstract testcase. In some exemplary embodiments the instructions may be otherwise provided to the unit level generator such as using an Application Programming Interface API an input file or the like. In some exemplary embodiments some instructions may be incorporated into the abstract testcase while others may be provided in a separate manner. An instruction may indicate a target generator. In other words the instruction may define which of the at least one unit level generator should act upon the instruction.

In some exemplary embodiments the at least one unit level generator may be configured to generate a testcase. The testcase may be a set of stimuli operative to stimulate the SUT. The testcase may comprise stimuli defined by the abstract testcase. In some exemplary embodiments the at least one unit level generator may generate additional stimuli to be included in the testcase. The testcase therefore may be said to comprise the abstract testcase. In some exemplary embodiments the testcase may be a test file comprising instructions for the SUT to perform. In some exemplary embodiments the testcase may be a test file comprising instructions and additional stimuli provided in a different manner such as memory initializations of the SUT as is disclosed further below.

In some exemplary embodiments each generator of the at least one unit level generator may perform unit level generation tasks associated with a predetermined unit. In some exemplary embodiments a plurality of different unit level generators may be utilized each associated with a different type of unit. In some exemplary embodiments a unit level generator may be utilized to perform unit level generation tasks associated with a plurality of units of the same type.

In some exemplary embodiments a unit level generator may be configured to perform memory initialization register initialization or the like for the operation of the SUT. In one exemplary embodiment the abstract testcase may be a valid set of instructions to the SUT which does not perform proper memory initialization. The unit level generator may provide for proper memory initialization which may or may not be incorporated into a file comprising the set of instructions. In one exemplary embodiment initialization instructions may be incorporated in an initialization section of the file. In another exemplary embodiment memory initialization may be performed via another manner which may be external to the file itself. For example memory may be initialized through a predetermined interface with the simulator . In such a case the file itself may include only instructions included in the abstract testcase however prior to executing the file memory initialization may be performed and therefore in accordance with the disclosed subject matter the testcase is viewed as if it incorporates the memory initializations and the instructions comprised by the file.

In some exemplary embodiments the at least one unit level generator may act upon instructions provided by an instructions generator . In some exemplary embodiments the unit level generator may add into a file comprising the abstract testcase with additional stimuli. For example a new instruction may be added a parameter of an existing instruction may be added or the like.

In some exemplary embodiments the at least one unit level generator may generate expected results of executing the testcase. The expected results may be used in checking whether the SUT operates when invoking stimuli of the testcase in accordance with the SUT s design. In some exemplary embodiments the expected results may be compared with simulated results to identify possible bugs in the SUT.

In some exemplary embodiments the unit level generator may be a special purpose generator specifically designed to perform generation tasks associated with a predetermined unit. The special purpose generator may be manually written for the purposes of verifying the SUT. In some exemplary embodiments the special purpose generator may be used both in verifying the unit itself and the SUT that comprises the unit.

In some exemplary embodiments the apparatus may be configured to dynamically obtain one or more of the at least one of the unit level generator from an external source. The unit level generator may be obtained on the fly. The apparatus may be configured to interface with the obtained unit level generator . In some exemplary embodiments the unit level generator may be unaware that it is being used in a system level verification as the abstract testcase appears to be a regular unit level test template.

In some exemplary embodiments the at least one unit level generator may be invoked one by one. Each may parse the abstract testcase and fill in relevant missing parts. The relevant missing parts may be filled in accordance with the instructions generated by the instructions generator .

In some exemplary embodiments the apparatus may comprise a processor . The processor may be a Central Processing Unit CPU a microprocessor an electronic circuit an Integrated Circuit IC or the like. The processor may be utilized to perform computations required by the apparatus or any of it subcomponents.

In some exemplary embodiments of the disclosed subject matter the apparatus may comprise an Input Output I O module . The I O module may be utilized to provide an output to and receive input from a user such as of .

In some exemplary embodiments the apparatus may comprise a storage device . The storage device may be a hard disk drive a Flash disk a Random Access Memory ROM a memory chip or the like. In some exemplary embodiments the storage device may retain program code operative to cause the processor to perform acts associated with any of the subcomponents of the apparatus . The storage device may retain a test template obtained by the test template obtainer . The storage device may retain the generated abstract testcase the generated testcase the architectural knowledge of the SUT the instructions to the unit level generator or the like.

Referring now to showing a flowchart diagram of a method in accordance with some exemplary embodiments of the disclosed subject matter.

In step a test template may be obtained. The test template may be obtained by a test template obtainer such as of .

In step one or more special purpose unit level generators such as of may be obtained. The generators may be obtained by an I O module such as of . In other exemplary embodiments the generators may be predetermined. In some exemplary embodiments all or some of the generators may be computer programs stored in a computer readable medium.

In step generation tasks defined by the test template may be distinguished into two groups system level and unit level generation tasks. Identification of the system level and unit level generation tasks may be performed based on an architectural knowledge of the SUT based on indications in the test template or the like. In some exemplary embodiments the identification may be performed by a system level generator such as of .

In step an abstract testcase may be generated. The abstract testcase may be generated by a system level generator such as of .

In step instructions associated with performing unit level generation tasks may be generated. The instructions may be generated by an instructions generator such as of . The instructions may be incorporated into the abstract testcase may be comprised by a separate file provided using a combination thereof or the like. An instruction may be associated with a predetermined unit level generator such as of .

In step a testcase may be generated. The testcase may be generated by one or more unit level generators such as of .

In some exemplary embodiments in case there is a plurality of unit level generators they may be operated one after the other in order to generate the testcase.

In step operation of the SUT while executing the testcase may be simulated using a simulator such as of .

In some exemplary embodiments steps may be performed a plurality of times in order to generate a plurality of testcases in accordance with the test template. In some exemplary embodiments the disclosed subject matter may be utilized in respect to a variety of test templates. The generated testcases may be utilized in a simulation step .

It will be noted that in some exemplary embodiments a single instruction of the test template may define both a system level generation task and a unit level generation task. For example consider a test template instruction of DECRYPT IN ADDR OUT ADDR where DECRYPT is a command to operate an encryption unit IN ADDR is the address of the data to decrypt and OUT ADDR is an address to which the decrypted data is written and later on processed by the SUT. In some exemplary embodiments determining which OUT ADDR and IN ADDR to use may be system level generation tasks. In some exemplary embodiments determining a content stored within the IN ADDR and determining expected result to be computed and stored in OUT ADDR may be unit level generation tasks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of program code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

As will be appreciated by one skilled in the art the disclosed subject matter may be embodied as a system method or computer program product. Accordingly the disclosed subject matter may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore the present invention may take the form of a computer program product embodied in any tangible medium of expression having computer usable program code embodied in the medium.

Any combination of one or more computer usable or computer readable medium s may be utilized. The computer usable or computer readable medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or propagation medium. More specific examples a non exhaustive list of the computer readable medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CDROM an optical storage device a transmission media such as those supporting the Internet or an intranet or a magnetic storage device. Note that the computer usable or computer readable medium could even be paper or another suitable medium upon which the program is printed as the program can be electronically captured via for instance optical scanning of the paper or other medium then compiled interpreted or otherwise processed in a suitable manner if necessary and then stored in a computer memory. In the context of this document a computer usable or computer readable medium may be any medium that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The computer usable medium may include a propagated data signal with the computer usable program code embodied therewith either in baseband or as part of a carrier wave. The computer usable program code may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF and the like.

Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

