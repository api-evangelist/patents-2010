---

title: Converting business process models to component models in a service oriented architecture domain
abstract: Process artifacts and elements in a business process model, such as a Business Process Modeling Notation (BPMN) compliant model, may be analyzed, converted into component model building blocks for developing applications, and enriched with technical metadata. The component model building blocks may be Service Component Architecture (SCA) Assembly Model building blocks, which may include artifacts, components, composites, and other elements. The building blocks may be structured in an output file, which may be a Simple Capabilities Description Language (SCDL) file, according to the Service Component Architecture (SCA) Assembly Model based on an order provided in the business process model. Business process model elements may be mapped to corresponding component model building blocks, such as SCA artifacts, composites, or components, through a lookup table or database.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08762933&OS=08762933&RS=08762933
owner: SAP AG
number: 08762933
owner_city: Walldorf
owner_country: DE
publication_date: 20100922
---
Organizations rely on computing systems and applications to perform different business processes. For example inventory control systems may be used to manage and track product distribution and task management systems may track progress to a goal. Although organizations often obtain different systems from different manufacturers they nonetheless expect the different systems to interact with each other.

This is especially true when organizations develop new applications or functionality in existing applications to support new business processes. Aside from expecting interactivity between systems organizations also seek to minimize costs when developing these new applications or functionalities. One way of minimizing development costs is to use business process modeling software to enable business analysts and those familiar with the organization s business processes to model those processes. However development costs are not fully minimized because an experienced computer programmer may still be needed to convert the modeled processes into application code.

Business Process Modeling Notation BPMN may be used to graphically represent and model business processes. BPMN uses standardized symbols and flowcharts to visually describe processes intuitively to business users while also incorporating complex functions and semantics for technical users. This functionality makes BPMN useful to both business and technical users.

An event represents a synchronization between a business process and an external environment which may occur by sending or receiving an event to a component of the external environment. An activity or task represent something is performed. A start event triggers the start of a process and is also known as a Catch Event because it may receive or catch an incoming message to begin the process. Intermediate events represent actions such as catch or throw events that occur between the start and end of a process. End events represent a concluding result of completing the process. End events may also be known as Throw Events because they may send or throw the concluding result to another entity process or system.

Activities and tasks may represent work that is to be performed by an entity or process. Sequence flows may represent a chronological order in that steps of a process are executed. Message flows may show the types of messages that may be exchanged between different business processes that may in some instances be exchanged between different organizations systems or entities. Finally data objects may identify a local state of a business process.

While business process models including BPMN compliant models may be used by business users to intuitively model business processes application code may not be directly generated from these business process models. Furthermore organizations with multiple systems from different vendors that expect interactivity between the systems may not be able to simply convert business process models to application code. Thus the practicality of business process models has been limited to intuitive visualizations of business processes.

There is a need for converting business process models to programming and component models better suited for application delivery that conform with the principles of a technologically agnostic service oriented architecture to support connectivity between different systems.

In embodiments of the invention process artifacts and elements in a business process model such as a Business Process Modeling Notation BPMN compliant model may be analyzed converted into programming or component model building blocks for developing applications and enriched with technical metadata. The programming model building blocks may be Service Component Architecture SCA Assembly Model building blocks which may be used to configure runtime services in a Service Oriented Architecture SOA such as an Enterprise Service Bus ESB or a messaging middleware to enable messaging functionality between systems. The building blocks may be structured in an output file which may be a Simple Capabilities Description Language SCDL file according to the Service Component Architecture SCA Assembly Model based on an order provided in the business process model. Business process model elements may be mapped to corresponding programming model building blocks such as SCA artifacts composites or components through a lookup table.

In some instances an entire business process project model may be mapped to one or more programming model files or contributions that contain implementations interfaces and other artifacts necessary to execute functionality provided in the business process model. Some of the collaboration model entities in a BPMN compliant model may map to one or more composites in a programming model with its own output SCDL file. Other model entities such as annotations may not map to any components in the programming model.

Composites may include for example entities provided by a SCA assembly model such as components services references property declarations and wires or wiring that describes the connections between these elements. Composites may be used to group and link components built from different implementation technologies allowing appropriate technologies from different systems to be used for each business task.

Each programming model composite may include one or more components. The components may provide business functions that may be offered as a service to other components. Some components may also include a reference indicating a dependency on a service provided by another component. Wires may be use to represent linkages between references and services.

Once the different entities and systems have been identified in box the artifacts and objects associated with each identified entity and system may be examined. For example since each pool represents a different entity the artifacts and objects in each pool may be examined and associated with the respective entity or system of the pool .

In box application building programming model elements such as elements from a SCA compliant Assembly Model that may be associated with the artifacts and or objects in each system may be identified. In box a lookup table may be used to identify programming model elements associated with each BPMN object or artifact in the BPMN model. An exemplary lookup table is shown in .

In some instances either application building programming model elements or the programming model itself may require additional technical data that may not be included in the business process model. For example the programming model may seek additional identifying information about other systems sending or receiving process related data such as domain name IP address or protocol information. The programming model may also seek additional information about data objects services or communications such as its type stateless RESTful Message Exchange Pattern MEP and so on . In box additional information that is used in the programming model but is not included in the business process model may be identified for subsequent retrieval from another source. This additional information may include information about the information technology landscape in the organization into which the process model may be deployed. Information from the information technology landscape may be used to configure the runtime services in the service oriented architecture SOA to ensure compatibility with the other systems interacting with the process model.

If this additional technology landscape information may be obtained from other sources or systems then in box the additional information may be extracted from the other sources which may include other systems interacting with the business process model. If however the additional technical information is not readily obtainable from other sources or systems then box and associated boxes to may be bypassed in their entireties. In box configuration settings of one or more systems in the business process model may be accessed to obtain the additional information used in the programming model. In box the technical information identified in box may be extracted from the configuration settings. For example if the programming model requires an IP address but the business process model only includes system identifier then the IP address of the system associated with the system identifier in the business process model may be extracted from the configuration settings and so on. In box the extracted configuration setting information may be embedded as metadata in a WSDL file for some web services based interactions or in other formats compatible with other types of interactions.

In box the identified programming model element may be packaged into an output file which may be a SCDL file. The output file may include the identified programming element. In some embodiments the extracted configuration setting information may be used to format the output file to facilitate connectivity through particular protocols or frameworks though in other embodiments the output file may be created independent of the extracted configuration information which may be only embedded as metadata in a separate WSDL file and not used during design time to format the output file.

In box the identified programming element may be incorporated as part of the created output file. This incorporation may involve including the programming element in the output file along with other information in business process model such as attribute or property information. Additional information used in the programming model but not included in the business process model may be obtained from configuration settings of the systems included in the business process model. These configuration settings may be extracted and included as metadata in a separate WSDL file. The configuration settings may also be included directly in the output file as additional parameters or attributes of the programming elements. The configuration settings may also be included indirectly in the output file by formatting the programming elements according to the configuration settings.

For example functionality provided by a BPMN project element may map to functionality provided a SCA contribution element so that the contribution element functionality may be incorporated in an output file such as a SCDL file when converting BPMN models to application models. Functionality associated with a BPMN collaboration element may map to functionality provided by a SCA composite element . Similarly a BPMN pool element functionality may map to a SCA component element functionality. Pool element functionality included in a business process model may include Catch Event functionality and Throw Event functionality . Catch Event functionality may map to SCA Service functionality and Throw Event functionality may map to SCA Reference functionality .

Functionality provided by a BPMN Event Definition subtype may map to binding and implementation type functionality of a SCA element. Data in the Event Definition subtype may be accessed to identify a binding and implementation type used by other systems. Binding types may include SOAP Web Services email MIME JMS RFC EJB POJO SDO JAXB and so on. Implementation type may include an identifier of the other system or application such as an Enterprise Resource Planning ERP system Customer Relationship Management CRM system Business Process Management BPM Suite and so on. The implementation type and binding may be accessed to ensure proper encoding and decoding of communications between the systems.

In some embodiments where the Event Definition subtype is not completed or used the binding implementation type and other technical information may be extracted from configuration settings of the other systems and incorporated as metadata in the application or SCA model. The incorporated metadata may be included in the output file such as a SCDL file or it may be included as part of a separate file associated with the output file. The separate file may be structured in a web services description language WSDL .

Start Event and End Event pair functionality may be mapped to a service such as a SCA Service with the service accepting a request document associated with the Start Event and returning a response document associated with the End Event. The service may be a synchronous service in some embodiments. Alternatively a Start Event may map to an asynchronous service accepting the request document while the End Event may map to an asynchronous reference sending the response document.

Intermediate Event and Boundary Event functionality may be mapped to references such as SCA References that send events such as messages signals instructions and so on internally and from other systems. The references may be asynchronous by default.

Functionality representative of a BPMN Activity may also map to a reference such as SCA Reference . The SCA Reference may identify the service to be consumed as part of the BPMN activity . Indeed the SCA Reference may match the service mapped to the process associated with a respective Start Event and End Event functionality . Message flow functionality such as provided by BPMN Message Flow connectors that denote event exchanges across different BPMN pools may map to wires such as SCA Wires . Mapping to wires such as SCA Wires may enable event recipients to be dynamically changed to facilitate different process extensibility scenarios including Before Process After Process and In Between Process scenarios.

Services may also be reused in different components including different SCA components. In this situation some events may be broadcasted and distributed to different processes sharing a same service. On the other hand references may only be used once to configure a service call in a predetermined system and thus may not be broadcasted.

In mapping table of a start of a message sequence such as a BPMN Message Start Event may map to either a synchronous or asynchronous service such as SCA Service . An endpoint URL or technical binding of the service may be automatically generated during the mapping to the service and may be either included in metadata as part of a WSDL file or as part of the output SCDL file. Intermediate messages or tasks that may be received such as BPMN Message Intermediate Catch Events and Receive Tasks may map to asynchronous services such as SCA Services and respectively. Components such as SCA Components may also be generated for Intermediate Catch Event and Receive Task to support message broadcast cases.

An end of a process flow such as a BPMN Message End Event may map to either an asynchronous reference or synchronous service such as SCA Reference or Service . A start of a message sequence may be linked to an end of a message sequence so that the entire process from start to end may be treated as a synchronous service with the start receiving a request message and the end generating the response message.

Intermediate messages or tasks that may be sent such as BPMN Message Intermediate Throw Event and Send Task may map to asynchronous references such as SCA References and respectively. The Message Intermediate Throw Event in the BPMN model may be configured to send a request message to a service that sends back an asynchronous response. In some of these instances a callback URL and logical interface to the service may be included in the metadata of the WSDL file or as part of the output SCDL file.

The invocation of a sub process or user task such as BPMN Sub process or User Task may be mapped to an asynchronous reference such as SCA Reference or respectively. The completion or cancellation of the sub process or user task BPMN Sub process or User Task may be mapped to an asynchronous service such as SCA Service or . When subflows are invoked as part of a BPMN Sub process corresponding references may be provided and additional services may be generated to match the corresponding references. These references and services may be included in the output SCDL file and may also have property or other information included the metadata of the WSDL file. Additional services may also be generated depending on the properties of a user task such as User Task in the BPMN model.

A service task such as BPMN Service Task may map to a synchronous reference such as SCA Reference . A process such as BPMN Process may map to a configured instance of an implementation such as a piece of program code providing business functions which may include SCA Component . Collaborations between entities to complete a business process such BPMN Collaborations may map to composites such as SCA Composites that may contain the components services references property declarations and the wiring that describes the connections between these elements. The component and composite values may be derived or copied from the values associated with the respective processes and collaborations.

The conversion system may include a processing system with a processing device to perform processing operations related to the conversion and a mapping database including for example the lookup tables from which may contain information to convert business process models to programming models for developing applications.

In an embodiment the processing system may send a request and a business process model identifier to the BPMN model system to select a business process model for conversion. The BPMN model system may retrieve the artifacts objects and other elements of the identified business process model and send the retrieved elements to the processing system .

The processing system may lookup one or more of the retrieved business process elements in the mapping database and retrieve the mapped programming model element from the database . If the information needed to supply the properties and or attributes of the mapped programming element cannot be obtained from the business process model information sent by the BPMN model system then the processing system may send a request for the missing property attribute information to the relevant enterprise system . The request may identify a specific configuration setting property attribute or value that is needed by the mapped programming element. The enterprise system may process the request search the configurations settings for the requested property attribute or value and send the requested information to the processing system .

Each of the configuration setting values received from the enterprise systems and or attributes and properties of programming elements obtained from the business process model may be stored as metadata. In some embodiments the processing system may send the mapped programming elements together with the property attribute metadata to the SCA model system . The SCA model system may then package the programming elements into an output file that may be in SCDL. In some instances the property attribute metadata may also be packaged into the output SCDL file though in other instances the property attribute metadata may be included in a separate WSDL file linked to the output SCDL file. In some instances the processing system may package the programming elements and or metadata into SCDL files and or WSDL files and send the results to the SCA model system for storage or further processing.

The enterprise external third party system may be connected to a firewall system not shown if needed to prevent direct access to other systems of an organization including the SCA model system conversion system and BPMN system .

Each of the systems in may contain a processing device memory containing a database and an input output interface all of which may be interconnected via a system bus. In various embodiments each of the systems and may have an architecture with modular hardware and or software systems that include additional and or different systems communicating through one or more networks. The modular design may enable a business to add exchange and upgrade systems including using systems from different vendors in some embodiments. Because of the highly customized nature of these systems different embodiments may have different types quantities and configurations of systems depending on the environment and organizational demands.

In an embodiment memory may contain different components for retrieving presenting changing and saving data. Memory may include a variety of memory devices for example Dynamic Random Access Memory DRAM Static RAM SRAM flash memory cache memory and other memory devices. Additionally for example memory and processing device s may be distributed across several different computers that collectively comprise a system.

Processing device may perform computation and control functions of a system and comprises a suitable central processing unit CPU . Processing device may comprise a single integrated circuit such as a microprocessing device or may comprise any suitable number of integrated circuit devices and or circuit boards working in cooperation to accomplish the functions of a processing device. Processing device may execute computer programs such as object oriented computer programs within memory .

The foregoing description has been presented for purposes of illustration and description. It is not exhaustive and does not limit embodiments of the invention to the precise forms disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from the practicing embodiments consistent with the invention. For example some of the described embodiments may include software and hardware but some systems and methods consistent with the present invention may be implemented in software or hardware alone. Additionally although aspects of the present invention are described as being stored in memory this may include other computer readable media such as secondary storage devices for example hard disks floppy disks or CD ROM the Internet or other propagation medium or other forms of RAM or ROM.

