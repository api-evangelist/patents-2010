---

title: Central service provisioning system
abstract: A system, which implemented as programming on a suitable computing device, manages the configuration of a software system. The system includes a create properties configuration module that identifies and stores a collection of properties related to the configuration of the software system; a create file configuration that identifies and stores binary data related to the configuration of the software system; a create configuration set module that creates a draft configuration set including the collection of properties and the binary data; and an activate module that activates the draft configuration set and deactivates and persistently stores a prior configuration set as a historic configuration set. The activated configuration set and the historic configuration sets are immutable.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08832651&OS=08832651&RS=08832651
owner: Hewlett-Packard Development Company, L.P.
number: 08832651
owner_city: Houston
owner_country: US
publication_date: 20100330
---
Software systems implemented on hardware systems e.g. individual computers individual servers server clusters and computer networks require some pre execution and then post execution configuration process to ensure the software systems function as intended. The configuration process may be very complicated and time consuming and on some hardware systems may not be feasibly done by a programmer or administrator.

A central service provisioning system stores configuration sets for other software applications executing on a computer system. A configuration set includes Properties Configurations and File Configurations described below each of which in turn includes a number of individual configurations one configuration exists for each configurable item in each application. Examples of configurable items include an IP address for a Properties Configuration and a binary data element such as a bit map For a File Configuration . Each configuration set has a life cycle and can be administered by the central service provisioning system. A configuration set life cycle refers to the existence of that configuration set beginning with its formation as a draft configuration set and modifications to the draft configuration set activation of the draft configuration set and finally deactivation and persistent storage of the deactivated configuration as a historic configuration set.

The central service provisioning system allows easy integration among different applications that may be part of a larger solution and allows the computer system user or administrator to manage configuration sets of the applications by providing for example rollback to previous configuration sets and staging new configuration sets. Such configuration management ordinarily would be more difficult and possibly more critical when the number diversity source and interactions of individual applications in the larger solution increase. In fact rollback in such a situation may be necessary to restore basic functionality to the larger solution. To enable such a rollback the central service provisioning system retains an archive of each configuration set used in enacting the larger solution.

Users who purchase software for a computer system often buy a suite of software applications or products. The software suite may be intended to solve a particular problem or to serve an overall purpose. For example a user may purchase an office support suite of software applications that include specific and individual word processing spread sheet accounting image processing email performance monitoring workload sharing capacity utilization and other software applications all with the overall purpose or intention of supporting the day to day operations of the user s business and maximizing resource usage while minimizing expenditures. Another user may purchase a business support software suite consisting of an asset management application a performance reporting application and a discovery and dependency mapping application. The user expects these software suites to execute in a seamless fashion and further expects that upgrades modifications and patches applicable to the applications to be made without degrading overall performance of the software suite or individual applications or requiring extensive effort to implement. The reality is that such software nirvana seldom exists. Some of the applications may come from different vendors. Some applications may not work well with others or otherwise may not integrate well into the software suites. Future changes or modifications to individual applications may have unknown or unintended consequences with respect to other applications in the software suite. Furthermore while the user may select a number of applications that ultimately will complete the software suite the user may elect to implement the software suite in stages such that not all applications are configured and running with the initial implementation of the software suite. This piece wise implementation of the software suite also may have unknown or unintended consequences. Finally the process of configuring the software suite even if not done initially in a piece wise fashion likely will continue over the life cycle of the software suite as the aforementioned upgrades are implemented and as perhaps new applications are added to the initial software suite.

One difficulty with initially configuring the software suite and then updating that configuration set as the individual applications change is that the applications consist of many thousands of properties. Manually accounting for these properties is essentially beyond the capacity of any programmer or administrator. Furthermore whether attempted manually or as directed by a configuration control program such a configuration process may result in some mistakes. For example addressing of certain application routines may be incorrect such that an expected routine is not called when needed and instead a system error is reported. Still further a change to some properties may cause errors to occur in the execution of the associated application or some other application. In addition the fact that each application in the software suite may be configured separately using different technical terms different configuration user interfaces UIs and different configuration activation schemes i.e. some applications may take effect as soon as they are installed or changed some may require a restart of a server or server cluster and some may require only that a user log out and then log back in makes seamless implementation of the software suite a challenge.

Within the configuration set each configuration may be a File Configuration or a Properties Configuration. A File Configuration contains binary data and is stored without decomposition of the binary data into subsets or smaller data elements that is the File Configuration is stored as is. A Properties Configuration is a set of one or more properties or name value pairs. A property can be any serializable data type such as a string number or date and also can be a multi value representation of any data type. Each property may have associated metadata. An individual configuration also may have associated metadata.

In a computing system shown as a server cluster includes a number of individual servers and central server . The servers and are individual hardware platforms. The servers are connected using network . Network may be a local area network LAN for example. Each of the individual servers has installed software suite . The central server has installed the same software suite and in addition central service processing system . The central service processing system is used for initial configuration and activation of the software suites for reconfiguration editing creating and deleting and activation of the reconfigured software suites and for storing each configuration and reconfiguration of the software suites .

Coupled to the central server is monitor and user interface . The monitor and user interface allows a system administrator to interact directly with all or with selected elements of the central service provisioning system . In addition the monitor and user interface may receive and display SNMP alerts related to provisioning and configuration actions such as activation and deactivation of a configuration set see .

In an alternative arrangement of the system some elements of the central service processing system may be implemented on one or more of the individual servers . These alternative arrangements will be described in more detail with reference to .

In the individual servers are shown in communication with the central server using network . The actual means of communications between a specific server and the central server can vary. For example one server may use Spring remoting another may use Representational State Transfer REST still another may use Java Management Extensions JMX and another may use Simple Object Access Protocol SOAP .

The configuration sets created using the central service processing system are in an embodiment Java Persistence API JPA entities and in an embodiment may be exposed as such. In another embodiment the configuration sets may be exposed by exporting the entire configuration set c to a collection of stored java.util.Properties files originating from Properties Configurations and data files originating from File Configurations in conjunction with a collection of java.util.Properties files that describe the metadata associated with each Properties Configuration. A configuration set also may be exposed using a plain old Java object POJO that represents the configuration set by an XML representation of the configuration set and by using JMX to manage and read the configuration set.

The Properties Configuration and the File Configuration share certain attributes. These shared attributes include a display name a description a unique identification ID and metadata typically a collection of name value pairs that contain data relevant to the consumer of the configuration. In an embodiment both the Properties Configuration and the File Configuration may be hidden from a user interface representation of the configuration set but both files still reside in the configuration set and can be manipulated by the central service provisioning system programmatically only in this embodiment i.e. the system administrator cannot access the files for any purpose .

The Properties Configuration may also be a JPA entity and may be exposed as a POJO representation. A programmer may provide a proxy interface that has strongly typed getters and setters for the properties enumerated in the Properties Configuration. Most generally strong typing implies that the programming language places severe restrictions on the intermixing that is permitted to occur preventing the compiling or running of source code which uses data in what is considered to be an invalid way. For instance an integer division operation may not be used on strings a procedure that operates upon linked lists may not be used on numbers. However the nature and strength of these restrictions is highly variable. The proxy interface allows translation of getter setter method calls into reads puts to an internal properties map within the JPA entity. In this way all Properties Configurations in a configuration set will be represented by a single JPA entity and can be stored in a single database table. However since the Properties Configuration is a collection of properties the Properties Configuration also is exposed as a java.util.Properties object. The Properties Configuration includes as attributes interface name and collection of name value pairs which are the properties.

The File Configuration holds binary data within the configuration set and has in addition to the configuration set attributes the attributes file name file binary data and a checksum.

To access a configuration set the central service processing system shown in more detail in includes configuration set API . Through the API the central service processing system accesses the following functional modules 

One use of the export import modules is to migrate a configuration set from one running environment to another. For example the export import modules allow a user to migrate a configuration set from a test staging environment to a production environment. In combination the export import module functions and the life cycle features provide significant advantages allowing a user to export a configuration from a test staging environment and import it to a production environment as a draft configuration set. This migration can be done with zero downtime to the production system.

Once imported a configuration set that was originated from the test staging environment might require some editing. For example in the production system IP address of integrated systems that reside in the configuration set may be different from those in the test staging environment. The user can edit those properties setting specific configuration required only in the production environment all with zero downtime to the production system.

Once edited and ready the configuration set can be implemented in a very short change window since all that is required is to activate the imported and edited configuration set. Thus versioning of configuration sets and retaining history enables some significant features and services 

Each configuration set has its own life cycle which protects used i.e. activated and activated versions of the configuration set from being modified. Each version of a configuration set is created first in a draft mode. A draft configuration set has a name and can be modified any number of times. The draft configuration set represents a future configuration of a system e.g. the system of to which it applies. The draft configuration set can be activated at any time such as during a scheduled system maintenance outage. Once a draft configuration set is activated it no longer can be modified and the configuration set is in an active state. If another subsequent draft configuration set is activated the current active configuration set c is deactivated and becomes a historic configuration set. The historic configuration sets are maintained in a persistent store or database by the central service provisioning system . Historic configuration sets also cannot be modified. However a historic configuration set can be used to generate a new draft configuration set. The newly created draft configuration set then can be modified and activated becoming a new active configuration set. illustrates the configuration set life cycle.

The Properties Configuration created by the central service processing system is exposed e.g. using POJO to different users in different ways. However a programmer on the system may not want to use a java.lang.Properties object of a derivative because such an object does not meet standard programming idioms such as strongly typed content. Thus the central service provisioning system in an embodiment incorporates or provides for the creation of user defined interfaces and provides a proxy that implements these user defined interfaces and translates the method calls to look ups in the properties configuration map.

Taking as an example a configuration set with a single Properties Configuration that represents the configuration of an application module called the alerts module the Properties Configuration will be enhanced by the following user provided interface 

The above string shows a simple interface with getters and setters. This interface may be implemented by a proxy that translates an invocation of getPattern for example to the pattern property in the Properties Configuration.

This user defined interface capability allows the programmer to use strongly typed interfaces while seamlessly storing files in the configuration set database. The PropertyDefinition allows for fine grained tuning of each property by introducing property level metadata for example hidden requires restart display key etc. .

In both the PropertyDefinition and the ConfigurationDefinition there is a user metadata property that allows the programmer to add user defined metadata on each property and configuration.

Since metadata is allowed on each property and configuration it easy to develop user metadata that allows the programmer to create a generic user interface that reads the configuration set and displays it to the programmer. Such a metadata language is supplied with the central service provisioning system along with a user interface see that displays the configuration set as a tree for example displays different choosers for properties such as date chooser color chooser etc. default values or a closed set of values for a property and many more user interface features.

As part of the central service provisioning system activation logic may be embedded in each consuming application since some application might require a single active configuration and other applications may require several simultaneously active configurations for example in multi tenant applications each tenant may run using a different configuration set . However each configuration set will have an active marker to indicate whether or not the specific configuration set is a currently active configuration set.

The dump file is a simple zip packaged set of properties files and regular files. The properties files represent the Properties Configurations and the regular files represent the File Configurations. However File Configurations are represented by two files the content file itself and a metadata file. Properties Configuration does not require an accompanying metadata since its metadata is stored on the application interfaces using annotations this metadata is resolved at runtime.

Validation of a configuration set may be desired when importing activating or even updating the configuration set. The user may want to know that the properties and files updated in the configuration set are a valid configuration. Validation is made possible using a combination of a JSR 303 mechanism and a custom validation mechanism.

Using JSR 303 annotation on the Properties Configurations application interfaces it is possible to validate the integrity of each property. A custom validation allows validating a configuration and a configuration set as a whole. This is especially useful for validating File Configurations on which JSR 303 annotations cannot be placed.

Comparison of configuration sets is done using the UUIDs of the configurations and of each property. Since there could be multiple configurations with the same name for example two or more File Configurations with the same filename in the same configuration set two or more Properties Configuration of the same application interface in the same configuration set the only connecting thread between the configurations is their UUID. The result of the comparison is a list of differing items with both left and right hand side values of the comparison.

Some applications may use or require a tree of configurations within a configuration set. All configurations within the configuration set are independent. However it is possible to create a virtual dependency using the configuration UUIDs. This is done by adding a configuration file that holds the dependency tree. The structure of the files is a simple properties file in which the keys are UUIDs of the nodes in the tree and the value is a comma separated list of leaf UUIDs.

As noted with respect to the specific implementation of the central service provisioning system may depend on the configuration of the underlying hardware system on which the system software resides. illustrate alternative exemplary implementations of the central service provisioning system . In system includes server and the central service provisioning system is implemented on the server as part of a standalone software package. The central service provisioning system includes embedded CSPS and CSPS UI . The CSPS and CSPS UI perform the same functions as the central service provisioning system and the coupled monitor and user interface of . The CSPS maintains a persistent store of historic configuration sets in data store .

In computing system includes software suite which may be implemented on one or more hardware platforms not shown . Within software suite are applications and . Each application and includes an embedded CSPS . The embedded CSPS reads only configuration set data from configuration set data store . A separate CSPS application including CSPS UI and embedded CSPS are used to manage change create and activate configuration sets.

