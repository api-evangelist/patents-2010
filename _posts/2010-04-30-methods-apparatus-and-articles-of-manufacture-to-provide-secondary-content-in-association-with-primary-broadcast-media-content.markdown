---

title: Methods, apparatus and articles of manufacture to provide secondary content in association with primary broadcast media content
abstract: Example methods, apparatus and articles of manufacture to provide media content are disclosed. A disclosed example method includes receiving audio output by a first media presentation device, obtaining at least one of a Nielsen code or an ArbitronÂ® code from the audio, the obtained code being representative of at least one of the first media content or a broadcaster of the first media content, obtaining second media content based on the extracted code, and presenting the second media content on a second media presentation device different from the first media presentation device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08666528&OS=08666528&RS=08666528
owner: The Nielsen Company (US), LLC
number: 08666528
owner_city: Schaumburg
owner_country: US
publication_date: 20100430
---
This patent claims the benefit of U.S. provisional patent application Ser. No. 61 174 787 entitled Methods and Apparatus To Provide Secondary Content in Association with Primary Broadcast Media Content and filed on May 1 2009 which is hereby incorporated by reference in its entirety.

This disclosure relates generally to content delivery and more particularly to methods and apparatus to provide secondary content in association with primary broadcast media content.

Identifying media content e.g. television TV programs radio programs advertisements commentary audio video content movies commercials advertisements etc. is useful for assessing audience exposure to such content. For example in audience metering applications a code may be inserted into the audio or video of media content e.g. a program or advertisement wherein the code is later detected at one or more monitoring sites when the media content is presented e.g. played at monitored households . The information payload of the code watermark embedded into an original signal can include unique program identification source identification and or time of broadcast. Monitoring sites may include locations such as households stores places of business and or any other public and or private facilities where media content exposure and or consumption of media content is monitored. For example at a monitoring site codes from the audio and or video are captured. The collected codes may then be sent to a central data collection facility for analysis.

Example methods apparatus and articles of manufacture to provide secondary content in association with primary broadcast media content are disclosed. A disclosed example method includes receiving an audio signal output by a first media presentation device the audio signal being associated with first media content decoding the audio signal to extract a code from the audio signal the code identifying at least one of the first media content or a broadcaster of the first media content setting a clock using a timestamp associated with the code obtaining second media content based on the code and the timestamp the second media content comprising a plurality of pieces of secondary content for respective ones of a plurality of timestamps and presenting at a second media presentation device a first of the plurality of pieces of secondary media when its respective timestamp substantially corresponds to time value obtained from the clock.

Another example method includes receiving an audio signal output by a first media presentation device the audio signal being associated with first media content decoding the audio signal to extract a code from the audio signal the code representative of at least one of the first media content or a broadcaster of the first media content and transmitting a wireless signal to a second media presentation device the signal including the extracted code the signal to trigger the second media presentation device to obtain second media content based on the code and to present the second media content at the second media presentation device.

Still another example methods includes receiving audio output by a first media presentation device obtaining at least one of a Nielsen code or an Arbitron code from the audio the obtained code being representative of at least one of the first media content or a broadcaster of the first media content obtaining second media content based on the extracted code and presenting the second media content on a second media presentation device different from the first media presentation device.

A disclosed example apparatus includes an audio interface to receive an audio signal output by a first media presentation device the audio signal being associated with first media content a decoder to decode the audio signal to extract a code from the audio signal the code representative of at least one of the first media content or a broadcaster of the first media content the decoder to obtain a timestamp associated with the code a secondary content module to obtain second media content based on the code and the timestamp the second media content comprising a plurality of pieces of secondary content for respective ones of a plurality of timestamps and a user interface module to present a first of the plurality of pieces of secondary content media when its respective timestamp substantially corresponds to a time value determined from the timestamp.

Another example apparatus includes an audio interface to receive an audio signal output by a first media presentation device the audio signal being associated with first media content a decoder to decode the audio signal to extract a code the code being associated with at least one of the first media content or a broadcaster of the first media content and a wireless interface to transmit a wireless signal to a second media presentation device the signal including the extracted code the signal to trigger the second media presentation device to obtain second media content based on the code and to present the second media content at the second media presentation device.

Still another example apparatus includes an audio input interface to receive audio output by a first media presentation device a decoder to obtain at least one of a Nielsen code or an Arbitron code from the audio the obtained code corresponding to at least one of the first media content or a broadcaster of the first media content a secondary content module to obtain second media content based on the extracted code and a user interface module to present the second media content on a second media presentation device different from the first media presentation device.

The following description makes reference to audio encoding and decoding that is also known as audio watermarking and watermark detection respectively. It should be noted that in this context audio is any type of signal having a frequency falling within the normal human audibility spectrum. For example audio may be speech music an audio portion of an audio and or video program or work e.g. a television TV program a movie an Internet video a radio program a commercial spot etc. noise or any other sound.

In general encoding of audio refers to inserting one or more codes into the audio. In some examples the code is psycho acoustically masked so that the code is inaudible to human hearers of the audio. However there may be certain situations in which the code may be audible to certain human listeners. Additionally these codes may also be referred to as watermarks. The codes that are embedded in audio may be of any suitable length and any suitable technique for mapping information e.g. a channel identifier a station identifier a program identifier a timestamp a broadcast identifier etc. to the codes may be utilized. Furthermore the codes may be converted into symbols that are represented by signals having selected frequencies that are embedded in the audio. Any suitable encoding and or error correcting technique may be used to convert codes into symbols. A Nielsen code is any code embedded into any media content by and or in association with The Nielsen Company US LLC or any affiliate of The Nielsen Company US LLC.

While the following examples are described with reference to broadcast audio video media content e.g. a TV program a commercial a movie etc. that include codes embedded and or encoded into the audio portion thereof such examples are merely illustrative. For example codes may additionally or alternatively be embedded and or encoded into other types of primary media content such as but not limited to video content graphical content an image a game a survey and or a webpage. For example codes can be hidden and or placed in non viewable portions of video by for instance inserting codes into a vertical blanking interval and or a horizontal retrace interval. Moreover the methods and apparatus described herein may be used to detect codes embedded in any number and or type s of additional and or alternative primary media content e.g. a radio broadcast an audio announcement etc. and to trigger the display of secondary content associated with such broadcasted primary media. Further primary media content need not be broadcast in order to trigger the presentation of secondary media content. For example primary media content may be distributed via any number and or type s of tangible medium such as a digital versatile disc DVD and or a compact disc CD that includes embedded codes that can trigger the presentation of secondary media content contained on the tangible medium on a local media store and or on a media store accessible via for example the Internet and or a local area network LAN . Further still non media content data associated with the primary media content may be used to trigger the display of secondary media content associated with the primary media content. For example data variables and or identifiers contained in one or more headers associated with a stream of packets transporting the primary media content e.g. program and system information protocol PSIP information a transport stream identifier a program identifier PID a station identifier SID a timestamp a CRC etc. can be used to trigger the display of secondary media content. It should be understood that such header information is carried along side and or in connection with the data that represents the primary media content and thus occurs in a non payload portion of a stream transporting the primary media content.

In the examples described herein before and or during transmission and or broadcasting the primary media content is encoded to include one or more codes indicative of the source of the primary media content the broadcast time of the primary media content the distribution channel of the primary media content an identifier for the primary media content a link e.g. a URL an ASCII reference to URL etc. particular portions of the primary media content and or any other information deemed relevant to the operator of the system. When the primary media content is presented on a primary content presentation device e.g. played through a TV a radio a computing device a cellular telephone a hand held device and or any other suitable device persons in the area of the presentation are exposed not only to the primary media content but unbeknownst to them are also exposed to the code s embedded in the primary media content. As described herein in addition to the primary media device presenting the broadcasted media content referred to herein as the primary media content or primary broadcast media content persons may be provided with and or utilize a secondary content presentation device e.g. handheld mobile and or otherwise portable devices such as a hand held computer a personal digital assistant PDA a cellular telephone a smartphone a laptop computer a netbook computer an iPod a iPad and or any other type s of hand held mobile and or portable user device capable to present media content to a person . Some example secondary content presentation devices include a microphone and a decoder and use free field detection to detect the code s embedded in the primary media content. Additionally or alternatively secondary content presentation devices can obtain and or receive primary content identifiers e.g. codes signatures non payload information etc. via other methods and or interfaces such as a network interface a Bluetooth interface etc. Based on the detected code s the secondary content presentation device retrieves and presents secondary content related to the primary media content identified by the codes. The secondary content may or may not be related to the primary media content and may itself include media content user interfaces advertisements and or applications. In some examples the secondary content presentation device may be implemented by and or within the primary presentation device.

Further still while the examples described herein utilize embedded audience measurement codes to identify primary media content any number and or type s of additional and or alternative methods may be used to identify primary media content. For example one or more signatures and or fingerprints may be computed from and or based on the primary media content and compared with a database of signatures to identify the primary media content. An example signature is computed via data compression applied to an audio portion of the primary media content. Example methods apparatus and articles of manufacture to compute signatures and or to identify media using signatures are described in U.S. patent application Ser. No. 12 110 951 entitled Methods and Apparatus For Generating Signatures and filed Apr. 28 2008 and U.S. patent application Ser. No. 12 034 489 entitled Methods and Apparatus For Characterizing Media and filed Feb. 20 2008. Each of U.S. patent application Ser. No. 12 110 951 and U.S. patent application Ser. No. 12 034 489 is hereby incorporated by reference in its entirety.

In the example delivery system of the example media server receives primary media content via any number and or type s of sources such as for example a satellite receiver and or antenna a radio frequency RF input signal received via any number and or type s of cable TV signal s and or terrestrial broadcast s a terrestrial and or satellite radio broadcast any number and or type s of data communication network s such as the Internet any number and or type s of local or remote data and or media store s such as for example a hard disk drive HDD a VCR cassette a DVD a CD a flash memory device etc. In the example delivery system of at least some of the primary media content regardless of its source and or type includes embedded audience measurement codes and or watermarks that were purposefully inserted by a content provider audience measurement entity and or broadcaster to facilitate audience measurement and or audience rating determinations for the primary media content. Example methods and apparatus to insert and or embed audience measurement codes such as Nielsen codes in primary content are described below in connection with and . Other example methods and apparatus to insert and or embed audience measurement codes in primary content are described in U.S. patent application Ser. No. 12 604 176 entitled Methods and Apparatus to Extract Data Encoded in Media Content and filed Oct. 22 2009 which is hereby incorporated by reference in its entirety. A preferred example of such audience measurement codes include the Nielsen Audio Encoding System NAES codes a.k.a. Nielsen codes that are proprietary to The Nielsen Company US LLC the assignee of the present patent. Example NAES codes include the NAES II and NAES V audio code systems. However any past present and or future NAES codes may be used. Other example audience measurement codes include but are not limited to those associated with the Arbitron audio encoding system.

To provide and or broadcast primary media content the example delivery system of includes any number and or type s of content provider s and or broadcaster s such as for example RF TV stations Internet protocol TV IPTV broadcasters digital TV DTV broadcasters cable TV broadcasters satellite TV broadcasters movie studios terrestrial radio broadcasters satellite radio broadcasters etc. In the illustrated example of the content provider s and or broadcaster s deliver and or otherwise provide the primary media content to the example media server via any desired medium e.g. a satellite broadcast using a satellite transmitter and a satellite and or satellite relay a terrestrial broadcast a cable TV broadcast the Internet and or the media store s .

To provide secondary content which may or may not be related to primary media content being presented at and or via the media server and or the primary content presentation device the example primary media content and secondary content delivery system of includes any number and or type s of secondary content presentation devices one of which is designated with reference numeral . The example secondary content presentation devices of are customer premises devices consumer devices and or user devices. Example secondary content presentation devices include but are not limited to a hand held computer a PDA a cellular telephone a smartphone a laptop computer a netbook computer and or any other type s of hand held mobile and or portable secondary content presentation device capable to present primary media content and or secondary content to a person. In the illustrated example of the secondary content presentation device can communicate with other devices of a LAN e.g. the media server via any number and or type s of wireless router s and or wireless access point s one of which is designated at reference numeral . The example secondary content presentation device can communicate with the Internet via the example LAN and or via a cellular base station . Moreover while not depicted in the secondary content presentation device can be communicatively coupled to the LAN via a wired communication protocol and or communication signal.

To provide secondary content identified via primary broadcast media content the example secondary content presentation device of includes a secondary content module . The example secondary content module of detects the presence of codes and or watermarks in free field radiating audio signals and emitted by for example one or more speaker s of the media server and or the primary content presentation device . When a code is detected the example secondary content module obtains secondary content associated with the detected code and or watermark from a secondary content server and or the media server via the wireless router and or the base station and presents the thus obtained secondary content on a display of the secondary content presentation device . Example manners of implementing the example secondary content module and or more generally the example secondary content presentation device are described below in connection with and . Example methods and apparatus to detect and decode codes and or watermarks embedded in the audio signals and are described below in connection with and . Other example methods and apparatus to detect and decode codes and or watermarks embedded in the audio signals and are described in U.S. patent application Ser. No. 12 604 176 entitled Methods and Apparatus to Extract Data Encoded in Media Content and filed Oct. 22 2009.

As described below in connection with in some examples the media server includes a secondary content triggerer that detects and decodes codes and or watermarks embedded in primary media content and or in non payload portions of primary media content e.g. a header of a data stream transporting the primary media content and triggers the secondary content presentation device to retrieve and or present secondary content via for example a Bluetooth signal and or a wireless LAN signal. Such triggers include and or identify the code s detected and or decoded by the secondary content triggerer . In some examples the detecting and or decoding of codes at the media server occurs simultaneous to the presentation of the primary media content via the primary content presentation device . When the secondary content presentation device is triggered by the secondary content triggerer the secondary content presentation device retrieves and presents secondary content associated with the detected code as described above. Alternatively the triggering include a push of the secondary content from the media server to the secondary content presentation device so that the secondary content presentation device need not request the secondary media content. The methods and apparatus described below in connection with and and or U.S. patent application Ser. No. 12 604 176 may be used to implement the example secondary content triggerer . An example manner of implementing the example media server of is described below in connection with .

Additionally or alternatively the example media server of may implement a secondary content serving module that allows the example secondary content module to obtain secondary content from the media server and or from the secondary content server . Thus the secondary content module and or more generally the example secondary content presentation device can present locally cached and or available secondary content as well as secondary content available via the Internet .

The example secondary content server of responds to queries for secondary content. For example when the secondary content presentation device of provides a code and or watermark decoded from primary media content the secondary content server provides one or more links e.g. a URL to secondary content provides one or more pieces of secondary content e.g. a webpage a banner an image a video clip etc. and or provides tuning information e.g. to a mobile DTV signal channel and or broadcast and or an IPTV signal channel and or multicast that may be used to obtain the secondary media content to the secondary content presentation device . The secondary content presentation device preferably automatically activates the URLs and or the tuning information to automatically obtain and start displaying the secondary media content. As discussed below a filter may be utilized to determine whether given URL and or tuning information is automatically activated. In some examples the secondary content server and or the ratings server identify the primary media content and or portion s of the primary media content associated with the code and or watermark. This identification is useful for audience measurement purposes. An example manner of implementing the example secondary content server of is described below in connection with .

To determine audience rating information the example delivery system of includes the example ratings server . Using among other things embedded codes computed signatures and or non payload data and or information detected decoded extracted and or computed by the secondary content presentation device the media server an audience measurement device associated with the media server not shown an audience measurement device associated with the primary content presentation device not shown and or similar devices at other locations the example rating server of develops meaningful content exposure statistics. For instance the example ratings server can determine the overall effectiveness reach and or audience demographics of primary media content and or secondary content by processing the collected data e.g. codes URLs person identification information etc. using any number and or type s of statistical method s . These ratings may relate to the primary content the secondary content or both the primary and secondary content. In some examples the media server and or the secondary content presentation device store a log of audience measurement data and periodically e.g. once a day and or aperiodically send the collected data to the ratings server for processing. Additionally or alternatively as each code signatures and or non payload information is detected extracted computed and or decoded it may be provided to the ratings server . Access to secondary content by for example activating a URL is also preferably logged and provided to the rating server .

To decode primary media signals the example media server of includes a media decoder . When a media signal received via the broadcast input interface is encoded and or encrypted the example media decoder decodes and or decrypts the primary media signal into for example a form suitable for output to the example primary content presentation device via a presentation device interface . Example presentation device interfaces include but are not limited to an RF output module a component video output module and or a high definition multimedia interface HDMI module.

To store received media content the example media server of includes the example media store s . Additionally or alternatively the media server may be communicatively coupled to removable media stores such as a DVD reader or a CD reader and or be communicatively coupled to an external storage device. An example media store is a HDD.

To trigger the example secondary content presentation device to retrieve and present secondary content related to primary media content the example media server of includes the example secondary content triggerer . When the example secondary content triggerer of detects a code embedded in primary media content and or an identifier contained in a non payload portion of the primary media content e.g. a PID a SID and or a timestamp contained in one or more packet headers which may be currently being presented the secondary content triggerer notifies the secondary content presentation device via for example any type of short range wireless interface such as a Bluetooth interface and or any type of wireless LAN interface . Some examples exclude the secondary content triggerer and instead rely on the secondary content presentation device to detect inaudible codes and utilize the same to retrieve secondary content. The trigger sent by the secondary content triggerer to the secondary content presentation device may include the code detected in the primary media content a signature and or fingerprint computed based on the primary media content and or an identifier contained in a non payload portion of the primary media content e.g. a PID a SID and or a timestamp contained in one or more packet headers .

To provide secondary content the example media server of includes the example secondary content serving module . When a request for secondary content is received from the example secondary content presentation device via the wireless interface and or any type of wired communication interface the secondary content serving module of queries the example media store s for secondary content associated with a detected code and returns the secondary content to the secondary content presentation device . The request for the secondary content is preferably triggered by the detection of the inaudible code as explained above. The secondary content may or may not be related to the primary media content. The secondary content may be received by the media server via the broadcast input interface and be stored and or cached in the media store s . In some examples the secondary content may be received at the media server in conjunction with the primary media content e.g. on a minor channel of a DTV broadcast . Additionally or alternatively the secondary content may be received via one or more separate program stream s using the same or a different communication medium as the primary content stream and or may be pushed to the media server by the secondary content server . Some examples exclude the secondary content serving module and instead rely on the secondary content presentation device to detect inaudible codes and utilize the same to retrieve secondary content from the secondary content server .

While an example manner of implementing the example media server of has been illustrated in one or more of the interfaces data structures elements processes and or devices illustrated in may be combined divided re arranged omitted eliminated and or implemented in any other way. Further the broadcast input interface the example media decoder the example presentation device interface the example Bluetooth interface the example wireless interface the example communication interface the example media store s the example secondary content triggerer the example secondary content serving module and or more generally the example media server of may be implemented by hardware software firmware and or any combination of hardware software and or firmware. Thus for example any of the broadcast input interface the example media decoder the example presentation device interface the example Bluetooth interface the example wireless interface the example communication interface the example media store s the example secondary content triggerer the example secondary content serving module and or more generally the example media server may be implemented by one or more circuit s programmable processor s application specific integrated circuit s ASIC s programmable logic device s PLD s field programmable logic device s FPLD s and or field programmable gate array s FPGA s etc. When any apparatus claim of this patent incorporating one or more of these elements is read to cover a purely software and or firmware implementation at least one of the broadcast input interface the example media decoder the example presentation device interface the example Bluetooth interface the example wireless interface the example communication interface the example media store s the example secondary content triggerer the example secondary content serving module and or more generally the example media server are hereby expressly defined to include a tangible article of manufacture such as a tangible computer readable medium such as those described below in connection with storing the firmware and or software. Further still the example media server may include interfaces data structures elements processes and or devices instead of or in addition to those illustrated in and or may include more than one of any or all of the illustrated interfaces data structures elements processes and or devices.

It should be apparent that turning off the decoder might affect how promptly the secondary content presentation device can detect a change in primary media content. To reduce such effects the decoder could continuously operate to detect SIDs thereby remaining responsive to for example channels changes while less frequently detecting decoding and or validating timestamps. How often timestamps are detected decoded and or validated may be adjusted depending on the time duration encompassed by a particular secondary content schedule and or to achieve a desired level of time synchronization between primary and secondary media content. For example timestamps may be continuously detected in order to accommodate the skipping of commercials and or other portions of the primary media content when the primary media content was for example pre recorded.

To retrieve and present secondary content the example secondary content presentation device of includes the example secondary content module . When the example decoder detects an embedded code and or watermark the example secondary content module of queries the secondary content server and or the example media server via any type of wireless LAN interface and or any type of cellular interface . In response to the query the example secondary content module receives one or more pieces of secondary content and or one or more links e.g. URLs to secondary content. An example manner of implementing the example secondary content module is described below in connection with .

To present among other things secondary content the example secondary content presentation device of includes any type of user interface module and any type of display . The example secondary content module of generates and provides to the user interface module one or more user interfaces that represent depict and or allow a user to view select and or activate secondary content. Example user interfaces that may be used to represent depict present and or allow a user to select secondary content are described below in connection with . The example user interfaces generated by the example secondary content module may be responsive to user inputs and or selections received via any number and or type s of input device s .

In some examples the user interface module of is implemented in conjunction with an operating system OS executing on a processor not shown of the secondary content presentation device . In such an example the secondary content module may be implemented as a software application executing within the OS that accesses an application programming interface API implemented by the OS to cause a user interface to be displayed on the display and to receive user inputs via the input device s . Example machine accessible instructions that may be executed to implement the example secondary content module of are described below in connection with .

To store among other things primary and or secondary media content received by and or obtained by the secondary content module the example secondary content presentation device of includes any number and or type s of media stores one of which is designated at reference numeral . In some examples secondary content may be obtained cached and or pushed to the secondary content presentation device and stored on the media store prior to presentation and or after presentation via the user interface module and the display .

In some examples the example secondary content module of may be triggered to obtain receive and or present secondary content and or links to secondary content via any type of short range wireless interface such as a Bluetooth interface and or via the example wireless LAN interface . The trigger received via the Bluetooth interface and or the wireless LAN interface includes the embedded code and or non payload code e.g. a PID a SID and or a timestamp extracted from one or more packet headers detected at the media server .

While an example manner of implementing the example secondary content presentation device of has been illustrated in one or more of the interfaces data structures elements processes and or devices illustrated in may be combined divided re arranged omitted eliminated and or implemented in any other way. Further the example audio input interface the example decoder the example wireless interface the example cellular interface the example user interface module the example display the example input device s the example media store the example Bluetooth interface the example secondary content module and or more generally the example secondary content presentation device of may be implemented by hardware software firmware and or any combination of hardware software and or firmware. Thus for example any of the example audio input interface the example decoder the example wireless interface the example cellular interface the example user interface module the example display the example input device s the example media store the example Bluetooth interface the example secondary content module and or more generally the example secondary content presentation device may be implemented by one or more circuit s programmable processor s ASIC s PLD s FPLD s and or FPGA s etc. When any apparatus claim of this patent incorporating one or more of these elements is read to cover a purely software and or firmware implementation at least one of the example audio input interface the example decoder the example wireless interface the example cellular interface the example user interface module the example display the example input device s the example media store the example Bluetooth interface the example secondary content module and or more generally the example secondary content presentation device are hereby expressly defined to include a tangible article of manufacture such as a tangible computer readable medium such as those described below in connection with storing the firmware and or software. Further still the example secondary content presentation device may include interfaces data structures elements processes and or devices instead of or in addition to those illustrated in and or may include more than one of any or all of the illustrated interfaces data structures elements processes and or devices.

Each of the example user interfaces of also include a middle tool bar portion that includes one or more buttons and or activatable user interface elements one of which is designated at reference numeral . Example buttons allow a user to control settings associated with the example secondary content module access and or utilize social networking features implemented by the secondary content module save secondary content for subsequent retrieval get information related to persons appearing in a primary media content etc.

The example user interface of includes a lower portion that displays one or more user selectable and or activatable elements e.g. icons bitmap images text links etc. one of which is designated at reference numeral . When a particular link is activated and or selected by a user the lower portion of the example user interface of is replaced with the secondary content associated with that element as shown in . For example the secondary content may display a webpage associated with and or facilitating purchase of a particular product advertised in a commercial portion of primary media content currently being presented at the primary content presentation device . As shown in a button is provided to stop display of the secondary content and return to the list of selected elements shown in . When more secondary content elements are to be displayed than fit within the display area of the lower portion the example user interface of may include navigation elements to allow a user to navigate through the selectable elements .

While user interfaces are illustrated in any number and or type s of additional and or alternative user interfaces may be used to present secondary content. For example one or more of the depicted elements may be combined divided re arranged omitted eliminated and or implemented in any other way. Moreover the example user interfaces may include elements instead of or in addition to those illustrated in and or and or may include more than one of any or all of the illustrated elements.

The example secondary content delivery scenario of begins with the example media server receiving primary media content via the example broadcast input interface . The example media server and or the example primary content presentation device emits and or outputs the free field radiating audio signal associated with the primary media content via for example one or more speakers.

When the example decoder of the secondary content presentation device detects a code in the audio block the secondary content module provides the code to the example ratings server to facilitate audience measurement. The example secondary content module also queries the content server based on the code to receive one or more links to secondary content. The user interface module and the example secondary content module display the obtained links using for example the example user interface of . When one of the links is selected and or activated by a user block the secondary content module sends an identifier associated with the link to the ratings server also obtains the secondary content associated with the selected and or activated link from the content server lines and and displays the obtained secondary content using for example the user interface of block . If the collection of audience measurement data is not desired the interaction with the ratings server may be omitted in the illustrated example of .

Turning to the first portion of the example scenario of is identical to the first portion of the example scenario of . Accordingly identical references numerals have been used in the first portions of and the interested reader is referred to the discussion presented above in connection with for descriptions of the identically numbered elements.

In the illustrated example of links to secondary content are retrieved from the secondary content server however the secondary content is retrieved and or obtained from the media server rather than from the content server . Thus when a particular link is selected and or activated block the secondary content module sends a request for the secondary content associated with the selected link to the media server and receives the secondary content from the media server . The secondary content module then displays the secondary content obtained from the media server using for example the user interface of block . If the collection of audience measurement data is not desired the interaction with the ratings server may be omitted in the illustrated example of .

In the illustrated example of the secondary content presentation device obtains secondary content and links to secondary content from the media server rather than from the secondary content server . Thus in the illustrated example of the secondary content presentation device need not interact with the secondary content server . The example secondary content delivery scenario of begins with the example media server receiving primary media content via the example broadcast input interface . The example media server and or the example primary content presentation device emits and or outputs the free field radiating audio signal associated with the primary media content via for example one or more speakers.

When the example secondary content serving module receives secondary content the secondary content serving module stores and or caches the secondary content in the media store s block .

When the example decoder of the secondary content presentation device detects a code in the audio block the secondary content module provides the code to the example ratings server to facilitate audience measurement. The example secondary content module queries the secondary content serving module based on the code and receives one or more links to secondary content. The user interface module and the example secondary content module display the obtained links using for example the example user interface of . When one of the links is selected and or activated block the secondary content module sends an identifier associated with the selected link to the ratings server obtains the content associated with the selected and or activated link from the content server lines and and displays the obtained content using for example the user interface of block . If the collection of audience measurement data is not desired the interaction with the ratings server may be omitted in the illustrated example of .

In the illustrated example of the media server detects codes in primary media content and triggers the presentation of secondary content at the secondary content presentation device . The example secondary content delivery scenario of begins with the example media server receiving primary media content via the example broadcast input interface . When the example secondary content serving module receives secondary content the secondary content serving module stores and or caches the secondary content in the media store s block .

When the secondary content triggerer detects a code in the primary media content block the secondary content serving module sends the code to the ratings server and the secondary content triggerer sends a trigger to the secondary content presentation device via the Bluetooth interface and or the wireless interface . The secondary content serving module also sends links associated with the detected code to the secondary content presentation device . In alternative examples rather than sending links and or the trigger the secondary content serving module pushes the secondary content to the secondary content presentation device . The trigger sent by the secondary content triggerer to the secondary content presentation device may additionally or alternatively include the code detected in the primary media content a signature and or fingerprint computed based on the primary media content and or an identifier contained in a non payload portion of the primary media content e.g. a PID a SID and or a timestamp contained in one or more packet headers .

The user interface module and the example secondary content module display the provided links or the secondary content using for example the example user interface of . When one of the links is selected and or activated block the secondary content module obtains the secondary content associated with the selected and or activated link from the content server lines and and displays the obtained secondary content using for example the user interface of block . In response to the request the secondary content serving module sends a content identifier associated with the selected and or activated link to the ratings server . If the collection of audience measurement data is not desired the interaction with the ratings server may be omitted in the illustrated example of .

In the illustrated example of content server caches and or pre stores secondary content on the secondary content presentation device for identified primary media content. The example secondary content delivery scenario of begins with the example media server receiving primary media content via the example broadcast input interface . The example media server and or the example primary content presentation device emits and or outputs the free field radiating audio signal associated with the primary media content via for example one or more speakers.

When the example decoder of the secondary content presentation device detects a code in the audio block the secondary content module provides the code to the example ratings server to facilitate audience measurement. The example secondary content module queries the content server based on the code and receives secondary content for the primary media content . The secondary content is stored and or cached in the example media store block . In the example of the secondary content presentation device sends a content identifier to the ratings server .

The user interface module and the example secondary content module displays the secondary content using for example the example user interface of and or displays links associated with the secondary content using for example the example user interface of block . In some examples the secondary content when displayed may contain one or more selectable and or activatable links. When a particular link is selected block the secondary content module sends an identifier for the selected and or activated link to the ratings server and checks whether the secondary content associated with the identifier is cached block . If the secondary content associated with the selected link is cached in the media store block the secondary content module retrieves the secondary content associated with the selected link from the media store and displays the retrieved secondary content using for example the user interface of block . If the secondary content associated with the selected link is not available in the media store block the secondary content module queries the content server based on an identifier associated with the selected link and receives the secondary content associated with the selected link from the secondary content server .

In alternative examples rather than retrieving links and or secondary content in response to the code the secondary content server may push the secondary content to the secondary content presentation device independent of any code detection at the secondary presentation device . In such alternatives the secondary content module can query the media store for the secondary content associated with the detected code before querying the secondary content server for the secondary content . If the collection of audience measurement data is not desired the interaction with the ratings server may be omitted in the illustrated example of .

The example client interface of also allows the person to interact with an action scheduler to associate defined actions stored in the action database with particular primary media content and or portions of primary media content identified in a program database . Associations of actions to primary media content and or primary media content portions are stored in a content database . In some examples the price s of associating an action with particular primary media content and or portion s thereof depends on time of day day of week number of times action is to be associated etc. An example data structure that may be used to implement the example content database is described below in connection with .

In some examples the action scheduler of builds and or compiles a schedule of secondary content to be provided in response to identified primary media content. Such a secondary content schedule defines one or more secondary content items to be presented at and or during particular times of the identified primary media content. Example data structures that may be used to represent a secondary content schedule are described below in connection with .

To allow the example media server and or the secondary content presentation device to query for and or obtain secondary content the example secondary content server of includes an action server . When a code and an optional timestamp is received from the media server or from the secondary content presentation device the example action server identifies the primary media content and or portion of primary media content associated with the received code. Based on the identified primary media content and or portion thereof the action server queries the content database to identify the action s e.g. secondary content and or a schedule of secondary content associated with the code and the optional timestamp. The action server returns the identified action s and or the identified secondary content schedule to the requesting media server or secondary content presentation device . In some examples the action server provides information regarding which codes have triggered the access of secondary content to an action auditor which may be located or otherwise associated with the ratings server .

Based on access information provided by the example action server and or based on secondary content access and or selection information provided by the example secondary content presentation device and or the example media server the example action auditor of tabulates data representative of exposures e.g. invitations to view secondary content and or secondary content consumption e.g. actual click throughs that have occurred. Such information can be used to determine for example the effectiveness of an advertising campaign. Moreover such information may be used to adjust and or determine the cost s to the user for associating secondary content with primary media content and or portions thereof.

To encode actions secondary content invitations for secondary content and or links to secondary content into primary media content the example secondary content server includes an action encoder . Thus codes in primary media content are not restricted to only identifying the primary media content for audience measurement purposes but may additionally or alternatively be dual use codes corresponding to secondary content and or links thereto. An example of implementing the example action encoder of is described below in connection with and .

To build and or add secondary content items to a secondary content schedule based on loyalty and or affinity groups the example secondary content server of includes a loyalty based scheduler . The example loyalty based scheduler of tabulates which primary media content is viewed by different persons and selects secondary content based on their loyalty and or frequency of consuming particular programs particular advertisements and or programs associated with particular content providers . Additionally or alternatively the example loyalty based scheduler may add secondary media content to a secondary content schedule based on a person s affinity to consume and or respond to the same programs advertisements and or content providers as another person. An example manner of implementing the example loyalty based scheduler is described below in connection with .

The example loyalty based scheduler may be used to reward certain users with special offers based the degree of loyalty that a user exhibits towards certain primary media content and or content provider s . Loyalty may be determined based on any number and or type s of criteria including but not limited to number of hours spent consuming certain primary media content and or episodes telecasts of certain primary media content the diversity of shows watched on a particular content delivery network how often the user activates and or selects secondary content offers etc. Loyalty may be expressed on any number and or type s of scales based on any number and or type s of gradations. For example loyalty may be expressed as the number of times an episode of a particular TV show has been watched in the last ten days.

While an example manner of implementing the example secondary content server of has been illustrated in one or more of the interfaces data structures elements processes and or devices illustrated in may be combined divided re arranged omitted eliminated and or implemented in any other way. Further the example client interface the example action register the example action database the example action scheduler the example program database the example content database the example action server the example action auditor the example action encoder the example loyalty based scheduler and or more generally the example secondary content server of may be implemented by hardware software firmware and or any combination of hardware software and or firmware. Thus for example any of the example client interface the example action register the example action database the example action scheduler the example program database the example content database the example action server the example action auditor the example action encoder the example loyalty based scheduler and or more generally the example secondary content server may be implemented by one or more circuit s programmable processor s ASIC s PLD s FPLD s and or FPGA s etc. When any apparatus claim of this patent incorporating one or more of these elements is read to cover a purely software and or firmware implementation at least one of the example client interface the example action register the example action database the example action scheduler the example program database the example content database the example action server the example action auditor the example action encoder the example loyalty based scheduler and or more generally the example secondary content server are hereby expressly defined to include a tangible article of manufacture such as a tangible computer readable medium such as those described below in connection with storing the firmware and or software. Further still the example secondary content server may include interfaces data structures elements processes and or devices instead of or in addition to those illustrated in and or may include more than one of any or all of the illustrated interfaces data structures elements processes and or devices.

To identify a client person and or organization associated with an action each of the example entries of includes a client field . Each of the example client fields of includes one or more numbers and or letters that uniquely identify a particular user person client and or organization that is associated with defined leased purchased and or owns the code time slot and or the secondary content associated with the action .

To identify an action type each of the example entries of includes a type field . Each of the example type fields of includes one or more numbers letters and or codes that identify a type of the action . Example action types include but are not limited to web access phone dialing and or pass through to a local applet.

To specify the action each of the example entries of includes a script field . Each of the example script fields of includes text and or command s that define the action . Example scripts include but are not limited to a URL a phone number a target applet and or an OS command.

To define when an action is valid each of the example entries of includes a valid field . Each of the example valid fields of includes one or more times and or dates that define one or more time periods during which the action is valid and or activatable.

To define how the action is presented each of the example entries of includes an invite field . Each of the example invite fields of defines how an invitation to the action is to be displayed in for example the lower portion of the example user interface of . For example the invite field may define and or reference a bit mapped image to be displayed.

To define whether the action may be saved each of the example entries of includes a save field . Each of the example save fields of contains a value that represents whether the action can be saved at the secondary content presentation device and or the media server for subsequent retrieval and or display at the secondary content presentation device and or the media server . In some examples the save field defines a time period during which the action may be saved at the secondary content presentation device and or the media server and or a time at which the action is to be flushed from the cache.

While an example data structure that may be used to implement the example action database of has been illustrated in one or more of the entries and or fields may be combined divided re arranged omitted eliminated and or implemented in any other way. Moreover the example data structure of may include fields instead of or in addition to those illustrated in and or may include more than one of any or all of the illustrated fields.

To identify an action each of the example entries of includes an action ID field . Each of the example action ID fields of contains one or more numbers and or letters that uniquely identify a particular action e.g. particular secondary content and or a link to particular secondary content that has been associated with the primary media content and or portion thereof identified in the content ID field .

To identify when the action ID is validly associated with the content ID each of the example entries of includes a day field and a time field . Each of the example day fields of lists and or defines one or more particular days on which the action ID is validly associable with the content ID . In particular if a request for secondary content associated with the content ID is received the secondary content associated with the action ID is only returned if the current day falls within the range and or set of days defined by the day field . Likewise each of the example time fields list and or define one or time portions on which the action ID is validly associable with the content ID .

To record access of the secondary content each of the example entries of includes a count field . Each of the example count fields of includes one or move values that represent the number of times that an invitation has been presented for the secondary content e.g. displayed in an example user interface of and the number of times that the corresponding secondary content was presented e.g. displayed in the example user interface of .

While an example data structure that may be used to implement the example content database of has been illustrated in one or more of the entries and or fields may be combined divided re arranged omitted eliminated and or implemented in any other way. Moreover the example data structure of may include fields instead of or in addition to those illustrated in and or may include more than one of any or all of the illustrated fields.

In the illustrated example of the action encoder encodes identifiers e.g. a link into the primary media content which may be used to obtain secondary media content. Thus the embedded information indirectly represents secondary content. Accordingly when the secondary content presentation device detects an embedded link associated with secondary content it can utilize the link to obtain the secondary content rather than having to first query the secondary content server to obtain the link based on a detected decoded and or extracted code and or identifier.

In the illustrated example of the querying for and obtaining of secondary content by the secondary content presentation device is responsive to only those codes embedded by the content provider . Accordingly when the secondary content presentation device detects a code it interacts with the action server to retrieve the secondary content and or links to secondary content associated with the detected code.

The example machine accessible instructions of may be executed to implement three parallel processes that may be implemented by for example separate substantially asynchronous processes executing within an OS. In a first process the example machine accessible instructions of begin with the example decoder detecting and decoding any codes present in the audio signals and block . When a code is detected and or a trigger received from the example media server block the secondary content module sends a request for secondary content to the example media server and or the example secondary content server block . Control then returns to block to continue detecting and decoding codes.

In a second process the example machine accessible instructions of begins when the example secondary content module receives links to and or invitations for secondary content from for example the example media server and or the example secondary content server block . The secondary content module displays the received links and or invitations via the example user interface module and the display using for example the example user interface of block . Control then returns to the block to wait for additional secondary content information.

In a third process the example machine accessible instructions of begin when a user selects and or activates a secondary content link via the input device s block . The secondary content module obtains and displays the secondary content associated with the selected and or activated link from a local cache the example media server and or the example secondary content server block . When display of the secondary content is ended by the user e.g. using the example close button of block the secondary content module displays previously received links and or invitations via the example user interface module and the display using for example the example user interface of block . Control then returns to the block to wait for another link to be selected and or activated.

An example encoding and decoding system is shown in . The example system may be for example a television audience measurement system which will serve as a context for further description of the encoding and decoding processes described herein. The example system of includes an encoder that adds a code to an audio signal to produce an encoded audio signal. The code may be representative of any selected information. For example in a media monitoring context the code may be representative of and or identify broadcast primary media content such as a television broadcast a radio broadcast or the like. Additionally the code may include timing information indicative of a time at which the code was inserted into audio or a media broadcast time. Alternatively as described below the code may include control information that is used to control the behavior of one or more target devices. It should be understood that the example encoder of and or the example encoders of may be used to implement the example content provider s of and or the example action encoder of . Other example encoders that may be used to implement the example content provider s are described in U.S. patent application Ser. No. 12 604 176 entitled Methods and Apparatus to Extract Data Encoded in Media Content and filed Oct. 22 2009.

The audio signal may be any form of audio including for example voice music noise commercial advertisement audio audio associated with a television program live performance etc. In the example of the encoder passes the encoded audio signal to a transmitter . The transmitter transmits the encoded audio signal along with any video signal associated with the encoded audio signal. While in some instances the encoded audio signal may have an associated video signal the encoded audio signal need not have any associated video.

Although the transmit side of the example system shown in shows a single transmitter the transmit side may be much more complex and may include multiple levels in a distribution chain through which the audio signal may be passed. For example the audio signal may be generated at a national network level and passed to a local network level for local distribution. Accordingly although the encoder is shown in the transmit lineup prior to the transmitter one or more encoders may be placed throughout the distribution chain of the audio signal . Thus the audio signal may be encoded at multiple levels and may include embedded codes associated with those multiple levels. Further details regarding encoding and example encoders are provided below.

The transmitter may include one or more of a radio frequency RF transmitter that may distribute the encoded audio signal through free space propagation e.g. via terrestrial or satellite communication links or a transmitter used to distribute the encoded audio signal through cable fiber etc. In some examples the transmitter may be used to broadcast the encoded audio signal throughout a broad geographical area. In other cases the transmitter may distribute the encoded audio signal through a limited geographical area. The transmission may include up conversion of the encoded audio signal to radio frequencies to enable propagation of the same. Alternatively the transmission may include distributing the encoded audio signal in the form of digital bits or packets of digital bits that may be transmitted over one or more networks such as the Internet wide area networks or local area networks as described above in connection with . Thus the encoded audio signal may be carried by a carrier signal by information packets or by any suitable technique to distribute the audio signals.

When the encoded audio signal is received by a receiver which in the media monitoring context may be located at a statistically selected metering site the audio signal portion of the received program signal is processed to recover the code even though the presence of that code is imperceptible or substantially imperceptible to a listener when the encoded audio signal is presented by speakers of the receiver . To this end a decoder is connected either directly to an audio output available at the receiver or to a microphone placed in the vicinity of the speakers through which the audio is reproduced. The received audio signal can be either in a monaural or stereo format. Further details regarding decoding and example decoders are provided below. It should be understood that the example decoder and the example microphone of and or the example microphone of may be used to implement the example decoder and the example audio input interface of respectively and or the example secondary content triggerer of . Other example decoders that may be used to implement the example decoder are described in U.S. patent application Ser. No. 12 604 176 entitled Methods and Apparatus to Extract Data Encoded in Media Content and filed Oct. 22 2009.

As explained above the encoder inserts one or more inaudible or substantially inaudible codes into the audio to create encoded audio. An example manner of implementing the example encoder of is shown in . In some implementations the example encoder of includes a sampler that receives the audio . The sampler is coupled to a masking evaluator which evaluates the ability of the sampled audio to hide codes therein. The code is provided to a code frequency selector that determines audio code frequencies that are used to represent the code to be inserted into the audio. The code frequency selector may include conversion of codes into symbols and or any suitable detection or correction encoding. An indication of the designated code frequencies that will be used to represent the code are passed to the masking evaluator so that the masking evaluator is aware of the frequencies for which masking by the audio should be determined. Additionally the indication of the code frequencies is provided to a code synthesizer that produces sine wave signals having frequencies designated by the code frequency selector . A combiner receives both the synthesized code frequencies from the code synthesizer and the audio that was provided to the sampler and combines the two to produce encoded audio.

In some examples in which the audio is provided to the encoder in analog form the sampler is implemented using an analog to digital A D converter or any other suitable digitizer. The sampler may sample the audio at for example 48 000 Hertz Hz or any other sampling rate suitable to sample the audio while satisfying the Nyquist criteria. For example if the audio is frequency limited at 15 000 Hz the sampler may operate at 30 000 Hz. Each sample from the sampler may be represented by a string of digital bits wherein the number of bits in the string indicates the precision with which the sampling is carried out. For example the sampler may produce 8 bit 16 bit 24 bit or 32 bit.

In addition to sampling the audio the example sampler accumulates a number of samples i.e. an audio block that are to be processed together. For example the example sampler accumulates a 512 sample audio block that is passed to the masking evaluator at one time. Alternatively in some examples the masking evaluator may include an accumulator in which a number of samples e.g. 512 may be accumulated in a buffer before they are processed.

The masking evaluator receives or accumulates the samples e.g. 512 samples and determines an ability of the accumulated samples to hide code frequencies to human hearing. That is the masking evaluator determines if code frequencies can be hidden within the audio represented by the accumulated samples by evaluating each critical band of the audio as a whole to determine its energy and determining the noise like or tonal like attributes of each critical band and determining the sum total ability of the critical bands to mask the code frequencies. Critical frequency bands which were determined by experimental studies carried out on human auditory perception may vary in width from single frequency bands at the low end of the spectrum to bands containing ten or more adjacent frequencies at the upper end of the audible spectrum. If the masking evaluator determines that code frequencies can be hidden in the audio the masking evaluator indicates the amplitude levels at which the code frequencies can be inserted within the audio while still remaining hidden and provides the amplitude information to the code synthesizer .

In some examples the masking evaluator conducts the masking evaluation by determining a maximum change in energy Eor a masking energy level that can occur at any critical frequency band without making the change perceptible to a listener. The masking evaluation carried out by the masking evaluator may be carried out as outlined in the Moving Pictures Experts Group Advanced Audio Encoding MPEG AAC audio compression standard ISO IEC 13818 7 1997 for example. The acoustic energy in each critical band influences the masking energy of its neighbors and algorithms for computing the masking effect are described in the standards document such as ISO IEC 13818 7 1997. These analyses may be used to determine for each audio block the masking contribution due to tonality e.g. how much the audio being evaluated is like a tone as well as noise like i.e. how much the audio being evaluated is like noise features. Further analysis can evaluate temporal masking that extends masking ability of the audio over short time typically for 50 100 ms. The resulting analysis by the masking evaluator provides a determination on a per critical band basis the amplitude of a code frequency that can be added to the audio without producing any noticeable audio degradation e.g. without being audible .

In some examples the code frequency selector is implemented using a lookup table that relates an input code to a state wherein each state is represented by a number of code frequencies that are to be emphasized in the encoded audio signal. For example the code frequency selector may include information relating symbols or data states to sets of code frequencies that redundantly represent the data states. The number of states selected for use may be based on the types of input codes. For example an input code representing two bits may be converted to code frequencies representing one of four symbols or states e.g. 2 . In other examples an input code representing four bits of information is represented by one of 16 symbols or states e.g. 2 . Some other encoding may be used to build in error correction when converting the code to one or more symbols or states. Additionally in some examples more than one code may be embedded in the audio .

An example chart illustrating a code frequency configuration is shown in at reference numeral . The chart includes frequency indices that range in value from 360 to 1366. These frequency indices correspond to frequencies of the sine waves to be embedded into an audio signal when viewed in the frequency domain via a Discrete Fourier transform DFT of a block of 18 432 samples. The reason that reference is made to frequency indices rather than actual frequencies is that the frequencies to which the indices correspond vary based on the sampling rate used within the encoder and the number of samples processed by the decoder . The higher the sampling rate the closer in frequency each of the indices is to its neighboring indices. Conversely a low sampling rate results in adjacent indices that are relatively widely space in frequency. For example at a sampling rate of 48 000 Hz the spacing between the indices shown in the chart of is 2.6 Hz. Thus frequency index corresponds to 936 Hz 2.6 Hz 360 . Of course other sampling rates and frequency indices may be selected. For example one or more ranges of frequency indices may be selected and or used to avoid interfering with frequencies used to carry other codes and or watermarks. Moreover the selected and or used ranges of frequencies need not be contiguous. In some examples frequencies in the ranges 0.8 kilohertz kHz to 1.03 kHz and 2.9 kHz to 4.6 kHz are used. In other examples frequencies in the ranges 0.75 kHz to 1.03 kHz and 2.9 kHz to 4.4 kHz are used.

As shown in the chart includes a top row listing different states or symbols represented in columns wherein the chart shows the first three states and the last state. The states are selected to represent codes or portions of codes. The states between the third state and the last state are represented by dashed boxes for the sake of clarity. Each of the states occupies a corresponding column in the chart . For example state S occupies a column denoted with reference numeral . Each column includes a number of frequency indices representing a frequency in each of seven different code bands which are denoted in the left hand column of the chart . For example as shown in column the state S is represented by frequency indices and . To send one of the 144 states the code indices in the column of the selected state are emphasized in a block of 18 432 samples. Thus to send state S indices and are emphasized. In some example encoders only the indices of one of the states are ever emphasized at one time.

As shown in each code band includes sequentially numbered frequency indices one of which corresponds to each state. That is Code Band includes frequency indices each corresponding to one of the 144 different states symbols shown in the chart . Additionally adjacent code bands in the system are separated by one frequency index. For example Code Band ranges from index to index and adjacent Code Band ranges from index to index . Thus Code Band is spaced one frequency index from adjacent Code Band . Advantageously the code frequencies shown in are close to one another in frequency and thus are affected in relatively the same manner by multipath interference. Additionally the high level of redundancy in the chart enhances the ability to recover the code.

Thus if the code frequency selector operates premised on the chart of when an input code to the code frequency selector is encoded or mapped to state S the code frequency selector indicates to the masking evaluator and the code synthesizer that frequency indices and should be emphasized in the encoded signal and therefore the code synthesizer should produce sine waves having frequencies corresponding to the frequency indices and and that such sine waves should be generated with amplitudes specified by the masking evaluator so that the generated sine waves can be inserted into the audio but will be inaudible or substantially inaudible . By way of further example when an input code identifies that state S should be encoded into the audio the code frequency selector identifies frequency indices and to the masking evaluator and the code synthesizer so that corresponding sine waves can be generated with appropriate amplitudes.

The encoding used to select states in the chart to convey information may include data blocks and synchronization blocks. For example the message to be encoded by the system using these 144 different states includes a synchronization block that is followed by several data blocks. Each of the synchronization block and the data blocks is encoded into 18 432 samples and is represented by emphasizing the indices of one of the states shown in one column of the chart .

For example a synchronization block is represented by emphasizing the indices of one of 16 states selected to represent synchronization information. That is the synchronization block indicates the start of one of 16 different message types. For example when considering media monitoring network television stations may use a first state to represent synchronization and a local affiliate may use a second state to represent synchronization. Thus at the start of a transmission one of 16 different states is selected to represent synchronization and transmitted by emphasizing the indices associated with that state. Information payload data follows synchronization data.

In the foregoing example with regard to how these 16 states representing synchronization information are distributed throughout the 144 states in some examples the 16 states are selected so that a frequency range including first code frequencies representing each of those 16 states is larger than a frequency amount separating that frequency range from an adjacent frequency range including second code frequencies also representing each of those 16 states. For example the 16 states representing the synchronization information may be spaced every 9 states in the table above such that states S S S S S S S S S S S S S S S S represent possible states that the synchronization information may take. In Code Band and Code Band this corresponds to a width in frequency indices of 135 indices. The frequency spacing between the highest possible synchronization state S of Code Band and the lowest possible synchronization state S of Code Band is 10 frequency indices. Thus the range of each collection of frequency indices representing the synchronization information is much larger e.g. 135 indices than the amount separating adjacent collections e.g. 10 indices .

In this example the remaining 128 states of the 144 state space that are not used to represent synchronization may be used to transmit information data. The data may be represented by any number of suitable states required to represent the number of desired bits. For example 16 states may be used to represent four bits of information per state or 128 states may be used to represent seven bits of information per state. In some examples the states selected to represent data are selected such that a frequency range including first code frequencies representing each of the data states is larger than a frequency amount separating that frequency range from an adjacent frequency range including second code frequencies also representing each of the data states. Thus states used to represent potential data include at least one substantially low numbered state e.g. S and at least one substantially high numbered state e.g. S . This ensures that the ranges including states that may be used to represent data occupy a wide bandwidth within their respective code bands and that the spacing between adjacent ranges are narrow.

The encoder may repeat the encoding process and thereby encode a number of audio blocks with a particular code. That is the selected code frequencies may be inserted into several consecutive 512 sample audio blocks. In some examples the code frequencies representing symbols may be repeated in 36 consecutive audio blocks of 512 samples or 72 overlapping blocks of 256 samples. Thus at the receive side when 18 432 samples are processed by a Fourier transform such as a DFT the emphasized code frequencies will be visible in the resulting spectrum.

As with the chart of the chart indicates that the code bands are separated by the same frequency distance as the frequency indices representing adjacent symbol. For example Code Band includes a code frequency component having a frequency index of 13 which is one frequency index from the Code Band frequency index representing the state S.

Chart of shows another example that may be used by the code frequency selector wherein the chart lists 24 states in the first row each of which includes corresponding frequency indices listed in seven code bands . These frequency indices correspond to frequencies of the sinusoids to be embedded into an audio signal when viewed in the frequency domain via a Fourier transform such as a DFT of a block of 3072 samples. By way of example when state S is to be sent the code frequency selector indicates that frequency indices and are to be used. As described above the indication of these frequencies is communicated to the masking evaluator and the code synthesizer so that sine waves having the proper amplitude and corresponding to the indicated frequency indices may be generated for addition to the audio .

In example encoders operating according to the chart of the code frequencies corresponding to the desired symbol are encoded in 182 overlapping blocks of 256 samples. In such implementations the first 16 columns may be used as data symbols and the 17th column may be used as a synchronization symbol. The remaining seven columns could be used for special data such as Video On Demand for example columns could be used as auxiliary data symbols and these will be decoded as such only when an auxiliary synchronization symbol is present in column .

As with the charts and described above the chart indicates that the code bands are separated by the same frequency distance as the frequency indices representing adjacent symbol. For example Code Band includes a code frequency component having a frequency index of 83 which is one frequency index from the Code Band frequency index representing the state S.

Returning now to as described above the code synthesizer receives from the code frequency selector an indication of the frequency indices required to be included to create an encoded audio signal including an indication of the input code. In response to the indication of the frequency indices the code synthesizer generates a number of sine waves or one composite signal including multiple sine waves having the identified frequencies. The synthesis may result in sine wave signals or in digital data representative of sine wave signals. In some examples the code synthesizer generates the code frequencies with amplitudes dictated by the masking evaluator . In other examples the code synthesizer generates the code frequencies having fixed amplitudes and those amplitudes may be adjusted by one or more gain blocks not shown that are within the code sequencer or are disposed between the code synthesizer and the combiner .

While the foregoing describes an example code synthesizer that generates sine waves or data representing sine waves other example implementations of code synthesizers are possible. For example rather than generating sine waves another example code synthesizer may output frequency domain coefficients that are used to adjust amplitudes of certain frequencies of audio provided to the combiner . In this manner the spectrum of the audio may be adjusted to include the requisite sine waves.

The combiner receives both the output of the code synthesizer and the audio and combines them to form encoded audio. The combiner may combine the output of the code synthesizer and the audio in an analog or digital form. If the combiner performs a digital combination the output of the code synthesizer may be combined with the output of the sampler rather than the audio that is input to the sampler . For example the audio block in digital form may be combined with the sine waves in digital form. Alternatively the combination may be carried out in the frequency domain wherein frequency coefficients of the audio are adjusted in accordance with frequency coefficients representing the sine waves. As a further alternative the sine waves and the audio may be combined in analog form. The encoded audio may be output from the combiner in analog or digital form. If the output of the combiner is digital it may be subsequently converted to analog form before being coupled to the transmitter .

While an example manner of implementing the example encoder of has been illustrated in one or more of the interfaces data structures elements processes and or devices illustrated in may be combined divided re arranged omitted eliminated and or implemented in any other way. Further the example sampler the example masking evaluator the example code frequency selector the example code synthesizer the example combiner and or more generally the example encoder of may be implemented by hardware software firmware and or any combination of hardware software and or firmware. Thus for example any of the example sampler the example masking evaluator the example code frequency selector the example code synthesizer the example combiner and or more generally the example encoder may be implemented by one or more circuit s programmable processor s ASIC s PLD s FPLD s and or FPGA s etc. When any apparatus claim of this patent incorporating one or more of these elements is read to cover a purely software and or firmware implementation at least one of the example sampler the example masking evaluator the example code frequency selector the example code synthesizer the example combiner and or more generally the example encoder are hereby expressly defined to include a tangible article of manufacture such as a tangible computer readable medium such as those described above in connection with storing the firmware and or software. Further still the example encoder may include interfaces data structures elements processes and or devices instead of or in addition to those illustrated in and or may include more than one of any or all of the illustrated interfaces data structures elements processes and or devices.

The example process of begins when the code to be included in the audio is obtained block . The code may be obtained via a data file a memory a register an input port a network connection or any other suitable technique. After the code is obtained block the example process samples the audio into which the code is to be embedded block . The sampling may be carried out at 48 000 Hz or at any other suitable frequency. The example process then assembles the audio samples into a block of audio samples block . The block of samples may include for example 512 audio samples. In some examples blocks of samples may include both old samples e.g. samples that have been used before in encoding information into audio and new samples e.g. samples that have not been used before in encoding information into audio . For example a block of 512 audio samples may include 256 old samples and 256 new samples. Upon a subsequent iteration of the example process the 256 new samples from a prior iteration may be used as the 256 old samples of the next iteration of the example process .

The example process then determines the code frequencies that will be used to include the code obtained at block into the audio block obtained at block block . This is an encoding process in which a code or code bits are converted into symbols that will be represented by frequency components. As described above the example process may use one or more lookup tables to convert codes to be encoded into symbols representative of the codes wherein those symbols are redundantly represented by code frequencies in the audio spectrum. As described above seven frequencies may be used to redundantly represent the selected symbol in the block of audio. The selection of symbols to represent codes may include consideration of the block number being processed error coding etc.

Having obtained the audio into which the codes are to be included block as well as the code frequencies that are to be used to represent the codes block the process computes the ability of the audio block to mask the selected code frequencies block . As explained above the masking evaluation may include conversion of the audio block to the frequency domain and consideration of the tonal or noise like properties of the audio block as well as the amplitudes at various frequencies in the block. Alternatively the evaluation may be carried out in the time domain. Additionally the masking may also include consideration of audio that was in a previous audio block. As noted above the masking evaluation may be carried out in accordance with the MPEG AAC audio compression standard ISO IEC 13818 7 1997 for example. The result of the masking evaluation is a determination of the amplitudes or energies of the code frequencies that are to be added to the audio block while such code frequencies remain inaudible or substantially inaudible to human hearing.

Having determined the amplitudes or energies at which the code frequencies should be generated block the example process synthesizes one or more sine waves having the code frequencies block . The synthesis may result in actual sine waves or may result in digital data equivalent representative of sine waves. Some example sine waves are synthesized with amplitudes specified by the masking evaluation. Alternatively the code frequencies may be synthesized with fixed amplitudes and then amplitudes of the code frequencies may be adjusted subsequent to synthesis.

The example process then combines the synthesized code frequencies with the audio block block . The combination may be carried out through addition of data representing the audio block and data representing the synthesized sine waves or may be carried out in any other suitable manner.

In another example the code frequency synthesis block and the combination block may be carried out in the frequency domain wherein frequency coefficients representative of the audio block in the frequency domain are adjusted per the frequency domain coefficients of the synthesized sine waves.

As explained above the code frequencies are redundantly encoded into consecutive audio blocks. In some examples a particular set of code frequencies is encoded into 36 consecutive blocks. Thus the example process monitors whether it has completed the requisite number of iterations block e.g. the process determines whether the example process has been repeated 36 times to redundantly encode the code frequencies . If the example process has not completed the requisite iterations block the example process samples audio block analyses the masking properties of the same block synthesizes the code frequencies block and combines the code frequencies with the newly acquired audio block block thereby encoding another audio block with the code frequencies.

However when the requisite iterations to redundantly encode the code frequencies into audio blocks have completed block the example process obtains the next code to be included in the audio block and the example process iterates. Thus the example process encodes a first code into a predetermined number of audio blocks before selecting the next code to encode into a predetermined number of audio blocks and so on. It is however possible that there is not always a code to be embedded in the audio. In that instance the example process may be bypassed. Alternatively if no code to be included is obtained block no code frequencies will by synthesized block and thus there will be no code frequencies to alter an audio block. Thus the example process may still operate but audio blocks may not always be modified especially when there is no code to be included in the audio.

In general the decoder detects the code signal that was inserted into the audio to form encoded audio at the encoder . That is the decoder looks for a pattern of emphasis in code frequencies it processes. Once the decoder has determined which of the code frequencies have been emphasized the decoder determines based on the emphasized code frequencies the symbol present within the encoded audio. The decoder may record the symbols or may decode those symbols into the codes that were provided to the encoder for insertion into the audio.

The samples from the sampler are provided to a time to frequency domain converter . The time to frequency domain converter may be implemented using a DFT or any other suitable technique to convert time based information into frequency based information. In some examples the time to frequency domain converter may be implemented using a sliding DFT in which a spectrum is calculated each time a new sample is provided to the example time to frequency converter . In some examples the time to frequency domain converter uses 18 432 samples of the encoded audio and determines a spectrum therefrom. The resolution of the spectrum produced by the time to frequency domain converter increases as the number of samples used to generate the spectrum. Thus the number of samples processed by the time to frequency domain converter should match the resolution used to select the indices in the charts of B or C.

The spectrum produced by the time to frequency domain converter passes to a code frequency monitor which monitors all the frequencies or spectral lines corresponding to the frequency indices that can potentially carry codes inserted by the example encoder . For example if the example encoder sends data based on the chart of the code frequency monitor monitors the frequencies corresponding to indices .

The monitoring of the code frequencies includes evaluating the spectral energies at each of the code frequencies. Thus the code frequency monitor normalizes the energies for a specific row of the chart of to a maximum energy in that row of the chart. For example considering the frequency indices corresponding to Code Band of the chart of if the frequency corresponding to frequency index has the maximum energy of the other frequencies in the row representing Code Band e.g. frequency indices . . . each of the energies at the other frequencies corresponding to the indices in Code Band divided by the energy of the frequency corresponding to frequency index . Thus the normalized energy for frequency index will have a value of 1 and all of the remaining frequencies corresponding to frequency indices in Code Band will have values smaller than 1. This normalization process is repeated for each row of the chart . That is each Code Band in the chart of will include one frequency having its energy normalized to 1 with all remaining energies in that Code Band normalized to something less than 1.

Based on the normalized energies produced by the code frequency monitor a symbol determiner to determines the symbol that was present in the encoded audio. In some examples the symbol determiner sums all of the normalized energies corresponding to each state. That is the symbol determiner creates 144 sums each corresponding to a column or state in the chart . The column or state having the highest sum of normalized energies is determined to be the symbol that was encoded. The symbol determiner may use a lookup table similar to the lookup table of that can be used to map emphasized frequencies to the symbols to which they correspond. For example if state S was encoded into the audio the normalized energies will generally result in a value of one for each frequency index representing state S. That is in general all other frequencies in the Code Bands that do not correspond to state S will have a value less than one. However while this is generally true not every frequency index corresponding to state S will have a value of one. Thus a sum of the normalized energies is calculated for each state. In this manner generally the normalized energies corresponding to the frequency indices representing state S will have a greater sum than energies corresponding to the frequency indices representing other states. If the sum of normalized energies corresponding to the frequency indices representing state S exceeds a threshold of 4.0 for detection state S is determined to be the most probable symbol that was embedded in the encoded audio. If however the sum does not exceed the threshold there is insufficient confidence that state S was encoded and no state is determined to be the most probable state. Thus the output of the symbol determiner is a stream of most probable symbols that were encoded into the audio. Under ideal conditions the code frequencies of S will yield a normalized score of 7.0

The most probable symbols are processed by the validity checker to determine if the received symbols correspond to valid data. That is the validity checker determines if bits corresponding to the most probable symbol are valid given the encoding scheme used to convert the code into a symbol at the code frequency selector of the encoder . The output of the validity checker is the code which corresponds to the code provided to the code frequency selector of .

While an example manner of implementing the example decoder of has been illustrated in one or more of the interfaces data structures elements processes and or devices illustrated in may be combined divided re arranged omitted eliminated and or implemented in any other way. Further the example sampler the example time to frequency domain converter the example code frequency monitor the example symbol determiner the example validity checker and or more generally the example decoder of may be implemented by hardware software firmware and or any combination of hardware software and or firmware. Thus for example any of the example sampler the example time to frequency domain converter the example code frequency monitor the example symbol determiner the example validity checker and or more generally the example decoder may be implemented by one or more circuit s programmable processor s ASIC s PLD s FPLD s and or FPGA s etc. When any apparatus claim of this patent incorporating one or more of these elements is read to cover a purely software and or firmware implementation at least one of the example sampler the example time to frequency domain converter the example code frequency monitor the example symbol determiner the example validity checker and or more generally the example decoder are hereby expressly defined to include a tangible article of manufacture such as a tangible computer readable medium such as those described above in connection with storing the firmware and or software. Further still the example decoder may include interfaces data structures elements processes and or devices instead of or in addition to those illustrated in and or may include more than one of any or all of the illustrated interfaces data structures elements processes and or devices.

The example process of begins by sampling audio block . The audio may be obtained via an audio sensor a hardwired connection via an audio file or through any other suitable technique. As explained above the sampling may be carried out at 48 000 Hz or any other suitable frequency.

As each sample is obtained a sliding time to frequency conversion is performed on a collection of samples including numerous older samples and the newly added sample obtained at block block . In some examples a sliding DFT is used to process streaming input samples including 18 431 old samples and the one newly added sample. In some examples the DFT using 18 432 samples results in a spectrum having a resolution of 2.6 Hz.

After the spectrum is obtained through the time to frequency conversion block the energies of the code frequencies are determined block . In some examples the energies may be obtained by taking the magnitude of the result of the time to frequency conversion block for the frequency components that may be emphasized to encode the audio. To save processing time and minimize memory consumption only frequency information corresponding to the code frequencies may be retained and processed further because those frequencies are the only frequencies at which encoded information may be located. Of course the example process may use other information than the energies. For example the example process could retain both magnitude and phase information and process the same.

Additionally the frequencies that are processed in the process may be further reduced by considering a previously received synchronization symbol. For example if a particular synchronization symbol is always followed by one of six different symbols the frequencies that are processed may be reduced to those of the six different symbols after that particular synchronization symbol is received.

After the energies are determined block the example process normalizes the code frequency energies of each Code Block based on the largest energy in that Code Block block . That is the maximum energy of a code frequency in a Code Block is used as a divisor against itself and all other energies in that Code Block. The normalization results in each Code Block having one frequency component having a normalized energy value of one with all other normalized energy values in that Code Block having values less than one. Thus with reference to each row of the chart will have one entry having a value of one and all other entries will have values less than one.

The example process then operates on the normalized energy values to determine the most likely symbol based thereon block . As explained above this determination includes for example summing the normalized energy values corresponding to each symbol thereby resulting in the same number of sums as symbols e.g. in consideration of the chart of there would be 144 sums each of which corresponds to one of the 144 symbols . The largest sum is then compared to a threshold e.g. 4.0 and if the sum exceeds the threshold the symbol corresponding to the largest sum is determined to be the received symbol. If the largest sum does not exceed the threshold no symbol is determined to be the received symbol.

After having determined the received symbol block the example process determines the code corresponding to the received symbol block . That is the example process decodes the encoding of a code into a symbol that was carried out by the example encoding process e.g. the encoding performed by block .

After the decoding is complete and codes are determined from symbols block the example process analyzes the code for validity block . For example the received codes may be examined to determine if the code sequence is valid based on the encoding process by which codes are sent. Valid codes are logged and may be sent back to a central processing facility at a later time along with a time and date stamp indicating when the codes were received. Additionally or alternatively as described above in connection with the valid codes may be used to obtain and present secondary content for the primary media content associated with the decoded audio.

The processor platform P of the example of includes at least one programmable processor P. The processor P executes coded instructions P and or P present in main memory of the processor P e.g. within a RAM P and or a ROM P . The processor P may be any type of processing unit such as a processor core a processor and or a microcontroller. The processor P may execute among other things the example machine accessible instructions of and the example operations of and the example flows of to deliver secondary content for primary media contents to encode audio and or to decode audio as described herein.

The processor P is in communication with the main memory including a ROM P and or the RAM P via a bus P . The RAM P may be implemented by dynamic random access memory DRAM synchronous dynamic random access memory SDRAM and or any other type of RAM device and ROM may be implemented by flash memory and or any other desired type of memory device. Access to the memory P and the memory P may be controlled by a memory controller not shown . The example memory P may be used to for example implement the example media stores and or the example databases and .

The processor platform P also includes an interface circuit P. Any type of interface standard such as an external memory interface serial port general purpose input output etc may implement the interface circuit P. One or more input devices P and one or more output devices P are connected to the interface circuit P. The input devices P and the output devices P may be used to implement any of the example broadcast input interface the example Bluetooth interface the example wireless interface the example communication interface the example audio input interface the example display the example input device s the example wireless interface the example cellular interface and or the example Bluetooth interface .

To identify a portion of and or location within primary media content the example secondary content module of includes a program clock . When the example fetcher receives a timestamp t n during primary media content the example program clock of is re set so that its time value substantially corresponds to the received timestamp t n . Subsequently the program clock can be used to identify later portions of and or locations within the primary media content.

To select secondary content to be displayed the example secondary content module of includes a selector . The example selector of compares time values provided by the program clock to timestamp values associated with each secondary content items in the secondary content schedule stored in the schedule database to identify one or more secondary content offers to display via for example the example user interface of . As described below in connection with each secondary content offer listed in the schedule has an associated start timestamp and an associated end timestamp. When the current time value generated by the program clock falls within such a range the example selector selects the corresponding secondary content offer for display.

To archive secondary content and or secondary content offers the example secondary content module of includes an archiver and an archive . As configured and or operated by a person via the example user interface module the example archiver stores particular secondary content and or secondary content offers in the example archive for subsequent retrieval. For example the person may configure that certain categories of secondary content and or secondary content offers be automatically archived and or may individually select particular secondary content and or secondary content offers for archival. For example the person can indicate that all recipe and cooking related secondary content offers be archived. The person can also interact with the archiver to query search and or identify secondary content in the archive for presentation. For example the person can search by type of secondary content date time etc.

Example machine accessible instructions that may be executed to implement the example secondary content module of are described below in connection with .

While an example manner of implementing the example secondary content module of has been illustrated in one or more of the interfaces data structures elements processes and or devices illustrated in may be combined divided re arranged omitted eliminated and or implemented in any other way. Further the example fetcher the example program clock the example selector the example archiver the example schedule database the example archive and or more generally the example secondary content module of may be implemented by hardware software firmware and or any combination of hardware software and or firmware. Thus for example any of the example fetcher the example program clock the example selector the example archiver the example schedule database the example archive and or more generally the example secondary content module may be implemented by one or more circuit s programmable processor s ASIC s PLD s FPLD s and or FPGA s etc. When any apparatus claim of this patent incorporating one or more of these elements is read to cover a purely software and or firmware implementation at least one of the example fetcher the example program clock the example selector the example archiver the example schedule database the example archive and or more generally the example secondary content module are hereby expressly defined to include a tangible article of manufacture such as a tangible computer readable medium such as those described above in connection with storing the firmware and or software. Further still the example secondary content module may include interfaces data structures elements processes and or devices instead of or in addition to those illustrated in and or may include more than one of any or all of the illustrated interfaces data structures elements processes and or devices.

The example data structure of contains fields that identify particular primary media content and includes a plurality of entries for respective secondary content offers. To identify primary media content the example data structure of includes a SID field . The example SID field of contains a SID corresponding to particular primary media content. To represent a logo associated with the identified primary media content the example data structure of includes a SID logo field . The example SID logo field contains data representing a logo and or contains one or more characters identifying a file and or a link to the logo. To further identify the primary media content the example data structure of includes a program name field . The example program name field of contains one or more alphanumeric characters that represent the name of the identified primary media content and or the name of a content provider associated with the primary media content.

To identify a secondary content offer each of the example entries of includes an offer ID field . Each of the example offer ID fields of contains one or more alphanumeric characters that uniquely identify a secondary content offer. To further identify the secondary content offer each of the example entries of includes a name field . Each of the example name fields of contains one or more alphanumeric characters representing a name of the identified secondary content offer.

To identify times within the primary media content identified in the SID field during which the secondary content offer is to be displayed each of the example entries of includes a begin field and an end field . Each of the example begin fields of contains a time corresponding to when the secondary content offer may begin being presented. Each of the example end fields of contains a time corresponding to when the secondary content offer is no longer to be presented.

To specify an offer type each of the example entries of includes an offer type field . Each of the example offer type fields of contains one or more alphanumeric characters that represent a type of secondary content offer. Example secondary content offer types include but are not limited to related to primary media content related to product placement related to a commercial related to a user loyalty level related to a user affinity group etc.

To specify a banner to be displayed to present an offer e.g. in the example user interface of each of the example entries of includes a banner field and a banner format field . Each of the example banner fields of contains data representing a banner to be presented and or contains one or more characters identifying a file and or a link to the banner. Each of the example banner type fields of contains one or more alphanumeric characters representing a type of banner. Example banner types include but are not limited to bitmap shockwave flash flash video portable network graphics etc.

To identify an action type each of the example entries of includes a type field . Each of the example type fields of includes one or more numbers letters and or codes that identify a type of action . Example action types include but are not limited to web access web link local module ID phone dialing and or pass through to a local applet.

To specify an action each of the example entries of includes an action field . Each of the example action fields of includes text and or command s that define an action and or secondary content corresponding to the identified offer. Example scripts include but are not limited to a URL a phone number a target applet and or an OS command. When the corresponding secondary content offer is selected and or activated the action is activated and or used to obtain the corresponding secondary content.

To identify content to be cached each of the example entries of includes a content field . Each of the example content fields of identifies for example a set of web pages and or other secondary content to be cached on the secondary content presentation device .

To categorize the secondary content each of the example entries of includes a category field and a sub category field . Each of the example category fields and the sub category fields of contain one or more alphanumeric characteristics useful for categorizing secondary content. Example categories include but are not limited to news cooking sports information educational infomercial etc.

To define whether the secondary content and or secondary content offer may be saved each of the example entries of includes an archivable field . Each of the example archivable fields of contains a value that represents whether the secondary content and or secondary content offer can be saved at the secondary content presentation device and or the media server for subsequent retrieval and or display at the secondary content presentation device and or the media server . In some examples the archivable field defines a time period during which the action may be saved at the secondary content presentation device and or the media server and or a time at which the secondary content and or secondary content offer is to be flushed from the cache.

To identify an expiration date and or time each of the example entries of includes an expiration field . Each of the example expiration fields of includes a day and or time at which the identified secondary content and or secondary content offer expires and thus no longer valid for presentation and or retrieval.

While example data structures that may be used to implement a secondary content schedule have been illustrated in and one or more of the entries and or fields may be combined divided re arranged omitted eliminated and or implemented in any other way. Moreover the example data structures of and or may include fields instead of or in addition to those illustrated in and or and or may include more than one of any or all of the illustrated fields.

The example machine accessible instructions of begin when a user initiates and or starts an application on the secondary content presentation device that implements the example secondary content module block . The secondary content module starts and or enables the decoder block .

When the decoder detects a valid code e.g. a SID the example fetcher determines whether the SID has changed and or is different from a preceding SI block . If the SID has changed block the fetcher fetches a new secondary content schedule from the secondary content server block stores the received schedule in the schedule database block and sets the program clock to correspond to the timestamp t n detected by the decoder block .

Returning to block if the SID has not changed block the fetcher determines whether the current timestamp t n falls within the time interval defined and or encompassed by the secondary content schedule stored in the schedule database block . If the current timestamp t n is falls within the secondary content schedule block the selector determines whether the timestamp t n corresponds to an offer e.g. secondary content in the schedule block . If the timestamp t n corresponds to a secondary content offer in the schedule block the selector obtains the corresponding secondary content from the schedule and displays the corresponding secondary content via the user interface module block .

The example selector compares time values generated by the program clock to the begin times and the end times in the schedule database to determine whether it is time to display any secondary content offers block . If it is time to one or more display secondary content offers block the selector obtains the secondary content offer s from the schedule and displays the secondary content offer s via the user interface module block .

If the user indicates via the user interface module that an offer and or secondary content is to be archived and or an offer is to be automatically archived e.g. based on archive settings block the archiver stores the secondary content offer s and or secondary content in the archive block .

If the user indicates via the user interface module that an secondary content offer and or secondary content is to be retrieved e.g. by providing search query criteria the archiver retrieves the secondary content offer and or secondary content from the archive block and the selector displays the retrieved secondary content via the user interface module block .

If the user indicates via the user interface module that the archive is to be edited and or modified e.g. items removed the archiver makes corresponding changes to the archive block .

Portions of the example machine accessible instructions of are identical to those of . Identical portions of are identified with identical reference numerals and descriptions of the identical portions is not repeated here. Instead the reader is referred to the descriptions of the identical portions presented above in connection with . Compared to the decoding of timestamps t n is not continually performed in the example machine accessible instructions of .

At block if the SID has not changed block the secondary content module activates timestamp decoding block . If a valid timestamp t n is decoded the fetcher determines whether the timestamp t n falls within the time interval defined and or encompassed by the secondary content schedule stored in the schedule database block . If the timestamp t n falls within the schedule block the program timer determines whether the timestamp t n matches an output of the program timer block . If the timestamp t n does not substantially correspond to the output of the program timer block the program timer is reset to match the timestamp t n block .

Returning to block if the timestamp t n does not fall within the secondary content schedule block the fetcher fetches a new secondary content schedule block .

Aperiodically and or periodically the fetcher determines whether it is time to synchronize schedules block . If it is time to synchronize schedules block control proceeds to block to decode another timestamp t n .

The example secondary content delivery scenario of begins with the example secondary content server setting and or selecting a default timeout interval T block and sending a value representative of the timeout T to the secondary content presentation device .

The example media server receives primary media content via the example broadcast input interface . The example media server and or the example primary content presentation device emits and or outputs the free field radiating audio signal associated with the primary media content via for example one or more speakers.

When the example decoder of the secondary content presentation device detects a SID in the audio block the program clock synchronizes its output to the timestamp t n block . If the SID has changed block the fetcher sends the SID and timestamp t n to the secondary content server . The secondary content server forms a schedule of secondary content based on the SID and timestamp t n block and sends the secondary content schedule to the fetcher . The fetcher stores the secondary content schedule received from the secondary content server in the schedule database block .

The example selector displays secondary content offers according to the received secondary content schedule using for example the example user interface of block . As secondary content offers are displayed the selector sends corresponding content IDs to the ratings server . If any displayed link and or offer is selected and or activated by a user block a corresponding link ID is sent to the ratings server and the secondary content server . In response to the link ID the secondary content server provides to the secondary content presentation device secondary content associated with the link ID . The secondary content presentation device displays the received secondary content block . If the collection of audience measurement data is not desired the interactions with the ratings server may be omitted in the illustrated example of .

Returning to block if the SID has not changed block the fetcher determines whether the new timestamp t n is greater than a sum of the previous timestamp t n 1 and the timeout interval T block . If the new timestamp t n is greater than the sum block the fetcher sends the SID and timestamp t n to the secondary content server to request an updated secondary content schedule. If the new timestamp t n is not greater than the sum block control proceeds to block to select and display secondary content.

At some subsequent time depicted by a dashed line and after a secondary content schedule has been received using for example the example process of up to and including block the example selector displays a secondary content offer block and sends a content ID corresponding to the offer to the rating server .

If automatic archiving is enabled for the category of offers including the displayed offer block the archiver archives the offer in the archive block . If automatic archiving is not applicable block but the user has indicated that the offer is to be archived block the archiver archives the offer in the archive block .

If any displayed link and or secondary content offer is selected and or activated by a user block a corresponding link ID is sent to the ratings server and the secondary content server . In response to the link ID the secondary content server provides to the secondary content presentation device secondary content associated with the link ID . The secondary content presentation device displays the received secondary content block .

If at some subsequent time depicted by a dashed line the user desires to retrieve one or more archived secondary content offers block the archiver retrieves and or sorts offers corresponding to one or more criteria provided by the user block . The example selector displays the retrieved and or sorted secondary content offers block and sends a content ID corresponding to the offer to the rating server . If the collection of audience measurement data is not desired the interactions with the ratings server may be omitted in the illustrated example of .

To create user profiles the example loyalty based scheduler of includes a profile manager . As primary media content is identified by the example identifier the example profile manager updates a user profile corresponding to a user ID UID received with the SID and timestamp t n . The user profile represents and or stores which primary media content has been at least partially consumed by the user associated with the UID. The example profile manager stores and or maintains the user profile in a profile database .

An example data structure that may be used to implement the example profile database is illustrated in . The example data structure of is a table that records which of a plurality of primary media content have been consumed by each of a plurality of users .

Returning to to develop user loyalty and or user affinity group metrics the example loyalty based scheduler of includes a loyalty analyzer . The example loyalty analyzer of analyzes a user s behavior to determine their level of loyalty to particular primary media content and or content providers . Additionally or alternatively the loyalty analyzer analyzes a group of user s behavior to determine and or identify affinity groups and to identify each group s likelihood of consuming particular primary media content and or responding to and or consuming particular secondary media content.

For a given loyalty metric e.g. number of episodes of a TV show that were watched during a period of time the example loyalty analyzer segments the users of the secondary content server into for example three groups of equal size. An example group represents the users who are most loyal and thus may be presented additional and or special secondary content offers. In some examples a user is only credited with consuming primary media content when a certain percentage of the primary media content has been consumed e.g. watched and or listened to . In some examples loyalty groups are defined in a loyalty database and the loyalty analyzer compares a user s profile with the defined loyalty groups to determine their level of loyalty.

In some examples affinity groups e.g. those who watch sports a lot those who tend to watch a lot of movies those who watch primarily during the day etc. can be identified and or defined manually. Additionally or alternatively data mining techniques can be applied to the user profiles stored in the profile database to automatically define affinity groups.

An example process that may be carried out to perform data mining to define affinity groups can be illustrated with reference to the example user profiles of . In the example of there are three reality programs R R and R and three sports programs S S and S. As shown different users may watch different combinations of these six programs.

The example loyalty analyzer performs dimensional analysis to develop indicators of a user s volume of media consumption and their propensity and or affinity to watch one type of program versus other types of programs. As shown in the volume of a user s media consumption can be expressed as a ratio PGMS of the number of shows consumed by the user and the total number of possible shows. In the example of the propensity of the user to watch sports rather than reality shows can be expressed by the ratio S R S where S is the number of sports programs watched by the user and R is the number of reality programs watched by the user. For example user watched all three of the reality programs and none of sports programs resulting in S R S 0 3 and PGMS 3 6.

The media consumption volume ratios PGMS and propensity ratios S R S can be used to identify and or define clusters and or affinity groups of users as illustrated in . As shown in the ten users are clustered into four example groups Group A watch reality program exclusively Group B watch sports exclusively Group C watch a variety of programs in limited quantity and Group D watch a variety of programs in large quantity.

While the example process of defining groups described and illustrated in connection with has been simplified for ease of discussion it should be apparent to those of ordinary skill in the art that the described example methods are readily extendible to include any number of users and or any number of dimensions. It should also be apparent that affinity group clusters may change over time. Moreover the affinity group s to which users belong may change over time. In some examples to minimize disruptions to advertisers due to affinity group changes the example loyalty analyzer may apply one or more filters to smooth the data used to define affinity groups and or to restrict how quickly affinity groups can change.

Returning to loyalty and or affinity group analysis may be performed and or updated each time a SID UID and timestamp t n is received. Additionally or alternatively it may run offline on a periodic or aperiodic basis to reduce computing time to take advantage of additional user profile information and or to reduce how long it takes the loyalty based scheduler to identify loyalty and or affinity based offers in response to a received SID UID and t n combination.

To select secondary content offers for the received SID UID and timestamp t n combination the example loyalty based scheduler of includes an offer selector . Based on the loyalty level s and or affinity group membership s identified by the loyalty analyzer the example offer selector queries an offer database to select one or more secondary content offers. The secondary content offers selected by the offer selector may be in addition to or instead of those selected by the action server based only on the UID and timestamp t n .

To allow any number and or type s of advertiser s program owner s content creator s and or content provider s to define specify and or provide secondary content offers for particular loyalty and or affinity groups the example loyalty based scheduler includes a loyalty affinity manager . The example loyalty affinity manager implements any number and or type s of API s and or web based interface s that allow the advertiser s program owner s content creator s and or content provider s to interact with the database and to add create modify remove and or specify loyalty and or affinity based secondary content offers.

The example databases and of may be implemented using any number and or type s of tangible article of manufacture such as a tangible computer readable media including but not limited to volatile and or non volatile memory ies and or memory device s .

While an example manner of implementing the example loyalty based scheduler of has been illustrated in one or more of the interfaces data structures elements processes and or devices illustrated in may be combined divided re arranged omitted eliminated and or implemented in any other way. Further the example identifier the example provider and program database the example profile manager the example profile database the example loyalty analyzer the example loyalty database the example offer selector the example offers database the example loyalty affinity manager and or more generally the example loyalty based scheduler of may be implemented by hardware software firmware and or any combination of hardware software and or firmware. Thus for example any of the example identifier the example provider and program database the example profile manager the example profile database the example loyalty analyzer the example loyalty database the example offer selector the example offers database the example loyalty affinity manager and or more generally the example loyalty based scheduler may be implemented by one or more circuit s programmable processor s ASIC s PLD s FPLD s and or FPGA s etc. When any apparatus claim of this patent incorporating one or more of these elements is read to cover a purely software and or firmware implementation at least one of the example identifier the example provider and program database the example profile manager the example profile database the example loyalty analyzer the example loyalty database the example offer selector the example offers database the example loyalty affinity manager and or more generally the example loyalty based scheduler are hereby expressly defined to include a tangible article of manufacture such as a tangible computer readable medium such as those described above in connection with storing the firmware and or software. Further still the example loyalty based scheduler may include interfaces data structures elements processes and or devices instead of or in addition to those illustrated in and or may include more than one of any or all of the illustrated interfaces data structures elements processes and or devices.

The example machine accessible instructions of begin when a SID UID and timestamp t n are received. The example identifier identifies the primary media content corresponding to the received SID and timestamp t n block . The example profile manager updates the user profile associated with the received UID in the profile database block .

The loyalty analyzer computes and or determines the user s loyalty score e.g. number of times they have watched an episode of a TV show block and computes and or determines the user s loyalty level based on the loyalty score block . In some examples the loyalty analyzer automatically segments the user profiles into loyalty levels block .

Based on the loyalty score determined by the loyalty analyzer block the offer selector queries the offers database to determine whether there are any applicable loyalty based secondary content offers block . If there is an applicable loyalty based secondary content offer block the offer selector adds the identified offer s to the user s schedule block .

If a primary content owner and or a content provider provide loyalty input s and respectively the loyalty affinity manager updates the loyalty database blocks and respectively . If the primary content owner and or the content provider provide loyalty based offer s and respectively the loyalty affinity manager updates the offer database blocks .

The example machine accessible instructions of begin when a SID UID and timestamp t n are received. The example identifier identifies the primary media content corresponding to the received SID and timestamp t n block . The example profile manager updates the user profile associated with the received UID in the profile database block .

The example loyalty analyzer compares the user s profile to one or more affinity groups to determine whether the user belongs to any affinity groups block . The loyalty analyzer periodically or aperiodically analyzes the user profiles stored in the profile database to define the one or more affinity groups block .

Based on the affinity group determination by the loyalty analyzer block the offer selector queries the offers database to determine whether there are any applicable affinity group based secondary content offers block . If there is an applicable affinity based secondary content offer block the offer selector adds the identified offer s to the user s schedule block .

If a user provides an affinity group based offer the loyalty affinity manager updates the offers database block .

An example encoding and decoding system is shown in . The example system may be for example a television audience measurement system which will serve as a context for further description of the encoding and decoding processes described herein. The example system includes an encoder that adds a code or information to an audio signal to produce an encoded audio signal. The information may be any selected information. For example in a media monitoring context the information may be representative of and or identify a broadcast media program such as a television broadcast a radio broadcast or the like. Additionally the information may include timing information indicative of a time at which the information was inserted into audio or a media broadcast time. Alternatively the code may include control information that is used to control the behavior of one or more target devices. Furthermore information from more than one source may be multiplexed and encoded into the audio . For example information provided by a TV network facility may be interleaved with information from for example a local station. In some examples TV network facility information is encoded into each third message slot of the encoded audio. Moreover the audio may be received with the TV network facility information already encoded and a subsequent encoder can encode additional information using a remaining message slot if any of each 3 message slot interval. It should be understood that the example encoder of may be used to implement the example content provider s of and or the example action encoder of .

The audio signal may be any form of audio including for example voice music noise commercial advertisement audio audio associated with a television program live performance etc. In the example of the encoder passes the encoded audio signal to a transmitter . The transmitter transmits the encoded audio signal along with any video signal associated with the encoded audio signal. While in some instances the encoded audio signal may have an associated video signal the encoded audio signal need not have any associated video.

Some example audio signals are a digitized version of an analog audio signal wherein the analog audio signal has been sampled at 48 kHz. As described below in detail two seconds of audio which correspond to 96 000 audio samples at the 48 kHz sampling rate may be used to carry one message which may be a synchronization message and 49 bits of information. Using an encoding scheme of 7 bits per symbol the message requires transmission of eight symbols of information. Alternatively in the context of overwriting described below one synchronization symbol is used and one information symbol conveying one of 128 states follows the synchronization symbol. As described below in detail according to one example one 7 bit symbol of information is embedded in a long block of audio samples which corresponds to 9216 samples. Some such long blocks include 36 overlapping short blocks of 256 samples wherein in a 50 overlapping block of the samples are old and 256 samples are new.

Although the transmit side of the example system shown in shows a single transmitter the transmit side may be much more complex and may include multiple levels in a distribution chain through which the audio signal may be passed. For example the audio signal may be generated at a national network level and passed to a local network level for local distribution. Accordingly although the encoder is shown in the transmit lineup prior to the transmitter one or more encoders may be placed throughout the distribution chain of the audio signal . Thus the audio signal may be encoded at multiple levels and may include embedded codes associated with those multiple levels. Further details regarding encoding and example encoders are provided below.

The transmitter may include one or more of a radio frequency RF transmitter that may distribute the encoded audio signal through free space propagation e.g. via terrestrial or satellite communication links or a transmitter used to distribute the encoded audio signal through cable fiber etc. Some example transmitters are used to broadcast the encoded audio signal throughout a broad geographical area. In other examples the transmitter may distribute the encoded audio signal through a limited geographical area. The transmission may include up conversion of the encoded audio signal to radio frequencies to enable propagation of the same. Alternatively the transmission may include distributing the encoded audio signal in the form of digital bits or packets of digital bits that may be transmitted over one or more networks such as the Internet wide area networks or local area networks. Thus the encoded audio signal may be carried by a carrier signal by information packets or by any suitable technique to distribute the audio signals.

When the encoded audio signal is received by a receiver which in the media monitoring context may be located at a statistically selected metering site the audio signal portion of the received program signal is processed to recover the code even though the presence of that code is imperceptible or substantially imperceptible to a listener when the encoded audio signal is presented by speakers of the receiver . To this end a decoder is connected either directly to an audio output available at the receiver or to a microphone placed in the vicinity of the speakers through which the audio is reproduced. The received audio signal can be either in a monaural or stereo format. Further details regarding decoding and example decoders are provided below. It should be understood that the example decoder and the example microphone of may be used to implement the example decoder and the example audio input interface of respectively and or the example secondary content triggerer of

As explained above the encoder inserts one or more inaudible or substantially inaudible codes into the audio to create encoded audio. One example encoder is shown in . In one implementation the example encoder of may be implemented using for example a digital signal processor programmed with instructions to implement an encoding lineup the operation of which is affected by the operations of a prior code detector and a masking lineup either or both of which can be implemented using a digital signal processor programmed with instructions. Of course any other implementation of the example encoder is possible. For example the encoder may be implemented using one or more processors programmable logic devices or any suitable combination of hardware software and firmware.

In general during operation the encoder receives the audio and the prior code detector determines if the audio has been previously encoded with information which will make it difficult for the encoder to encode additional information into the previously encoded audio. For example a prior encoding may have been performed at a prior location in the audio distribution chain e.g. at a national network level . The prior code detector informs the encoding lineup as to whether the audio has been previously encoded. The prior code detector may be implemented by a decoder as described herein.

The encoding lineup receives the information and produces code frequency signals based thereon and combines the code frequency signal with the audio . The operation of the encoding lineup is influenced by the output of the prior code detector . For example if the audio has been previously encoded and the prior code detector informs the encoding lineup of this fact the encoding lineup may select an alternate message that is to be encoded in the audio and may also alter the details by which the alternate message is encoded e.g. different temporal location within the message different frequencies used to represent symbols etc. .

The encoding lineup is also influenced by the masking lineup . In general the masking lineup processes the audio corresponding to the point in time at which the encoding lineup wants to encode information and determines the amplitude at which the encoding should be performed. As described below the masking lineup may output a signal to control code frequency signal amplitudes to keep the code frequency signal below the threshold of human perception.

As shown in the example of the encoding lineup includes a message generator a symbol selector a code frequency selector a synthesizer an inverse Fourier transform and a combiner . The message generator is responsive to the information and outputs messages having the format generally shown at reference numeral . The information provided to the message generator may be the current time a television or radio station identification a program identification etc. Some example message generators output a message every two seconds. Of course other messaging intervals such as 1.6 seconds are possible.

Some example message formats representative of messages output from the message generator include a synchronization symbol . The synchronization symbol is used by decoders examples of which are described below to obtain timing information indicative of the start of a message. Thus when a decoder receives the synchronization symbol that decoder expects to see additional information following the synchronization symbol .

In the example message format of the synchronization symbol is followed by 42 bits of message information . This information may include a binary representation of a station identifier and coarse timing information. Some example timing information represented in the 42 bits of message information change every 64 seconds or 32 message intervals. Thus the 42 bits of message information remain static for 64 seconds. The seven bits of message information may be high resolution time that increments every two seconds.

The message format also includes pre existing code flag information . However the pre existing code flag information is only selectively used to convey information. When the prior code detector informs the message generator that the audio has not been previously encoded the pre existing code flag information is not used. Accordingly the message output by the message generator only includes the synchronization symbol the 42 bits of message information and the seven bits of message information the pre existing code flag information is blank or filled by unused symbol indications. In contrast when the prior code detector provides to the message generator an indication that the audio into which the message information is to be encoded has previously been encoded the message generator will not output the synchronization symbol the 42 bits of message information or the seven bits of message information . Rather the message generator will utilize only the pre existing code flag information . Some example pre existing code flags information include a pre existing code flag synchronization symbol to signal that pre existing code flag information is present. The pre existing code flag synchronization symbol is different from the synchronization symbol and therefore can be used to signal the start of pre existing code flag information. Upon receipt of the pre existing code flag synchronization symbol a decoder can ignore any prior received information that aligned in time with a synchronization symbol 42 bits of message information or seven bits of message information . To convey information such as a channel indication a distribution identification or any other suitable information a single pre existing code flag information symbol follows the pre existing code flag synchronization symbol. This pre existing code flag information may be used to provide for proper crediting in an audience monitoring system.

The output from the message generator is passed to the symbol selector which selects representative symbols. When the synchronization symbol is output the symbol selector may not need to perform any mapping because the synchronization symbol is already in symbol format. Alternatively if bits of information are output from the message generator the symbol selector may use straight mapping wherein for example seven bits output from the message generator are mapped to a symbol having the decimal value of the seven bits. For example if a value of 1010101 is output from the message generator the symbol selector may map those bits to the symbol . Of course other conversions between bits and symbols may be used. In certain examples redundancy or error encoding may be used in the selection of symbols to represent bits. Additionally any other suitable number of bits than seven may be selected to be converted into symbols. The number of bits used to select the symbol may be determined based on the maximum symbol space available in the communication system. For example if the communication system can only transmit one of four symbols at a time then only two bits from the message generator would be converted into symbols at a time.

Another example message includes 8 long blocks followed by several null short blocks to pad the duration of the message to approximately 1.6 seconds. The first of the 8 long blocks represents the synchronization symbol followed by 7 long blocks representing for example the payload or message content depicted in . The example message format of may be used to represent and or encode 7 7 49 bits of data.

The symbols from the symbol selector are passed to the code frequency selector that selects code frequencies that are used to represent the symbol. The symbol selector may include one or more look up tables LUTs that may be used to map the symbols into code frequencies that represent the symbols. That is a symbol is represented by a plurality of code frequencies that the encoder emphasizes in the audio to form encoded audio that is transmitted. Upon receipt of the encoded audio a decoder detects the presence of the emphasized code frequencies and decodes the pattern of emphasized code frequencies into the transmitted symbol. Thus the same LUT selected at the encoder for selecting the code frequencies needs to be used in the decoder. An example LUT is described in conjunction with . Additionally example techniques for generating LUTs are provided in conjunction with .

The code frequency selector may select any number of different LUTs depending of various criteria. For example a particular LUT or set of LUTs may be used by the code frequency selector in response to the prior receipt of a particular synchronization symbol. Additionally if the prior code detector indicates that a message was previously encoded into the audio the code frequency selector may select a lookup table that is unique to pre existing code situations to avoid confusion between frequencies used to previously encode the audio and the frequencies used to include the pre existing code flag information.

An indication of the code frequencies that are selected to represent a particular symbol is provided to the synthesizer . The synthesizer may store for each short block constituting a long block three complex Fourier coefficients representative of each of the possible code frequencies that the code frequency selector will indicate. These coefficients represent the transform of a windowed sinusoidal code frequency signal whose phase angle corresponds to the starting phase angle of code sinusoid in that short block.

While the foregoing describes an example code synthesizer that generates sine waves or data representing sine waves other example implementations of code synthesizers are possible. For example rather than generating sine waves another example code synthesizer may output Fourier coefficients in the frequency domain that are used to adjust amplitudes of certain frequencies of audio provided to the combiner . In this manner the spectrum of the audio may be adjusted to include the requisite sine waves.

The three complex amplitude adjusted Fourier coefficients corresponding to the symbol to be transmitted are provided from the synthesizer to the inverse Fourier transform which converts the coefficients into time domain signals having the prescribed frequencies and amplitudes to allow their insertion into the audio to convey the desired symbols are coupled to the combiner . The combiner also receives the audio. In particular the combiner inserts the signals from the inverse Fourier transform into one long block of audio samples. As described above for a given sampling rate of 48 kHz a long block is 9216 audio samples. In the provided example the synchronization symbol and 49 bits of information require a total of eight long blocks. Because each long block is 9216 audio samples only 73 728 samples of audio are needed to encode a given message. However because messages begin every two seconds which is every 96 000 audio samples there will be many samples at the end of the 96 000 audio samples that are not encoded. The combining can be done in the digital domain or in the analog domain.

However in the case of a pre existing code flag the pre existing code flag is inserted into the audio after the last symbol representing the previously inserted seven bits of message information. Accordingly insertion of the pre existing code flag information begins at sample 73 729 and runs for two long blocks or 18 432 samples. Accordingly when pre existing code flag information is used fewer of the 96 000 audio samples will be unencoded.

The masking lineup includes an overlapping short block maker that makes short blocks of 512 audio samples wherein 256 of the samples are old and 256 samples are new. That is the overlapping short block maker makes blocks of 512 samples wherein 256 samples are shifted into or out of the buffer at one time. For example when a first set of 256 samples enters the buffer the oldest 256 samples are shifted out of the buffer. On a subsequent iteration the first set of 256 samples are shifted to a latter position of the buffer and 256 samples are shifted into the buffer. Each time a new short block is made by shifting in 256 new samples and removing the 256 oldest samples the new short block is provided to a masking evaluator . The 512 sample block output from the overlapping short block maker is multiplied by a suitable window function such that an overlap and add operation will restore the audio samples to their correct value at the output. A synthesized code signal to be added to an audio signal is also similarly windowed to prevent abrupt transitions at block edges when there is a change in code amplitude from one 512 sample block to the next overlapped 512 sample block. These transitions if present create audible artifacts.

The masking evaluator receives samples of the overlapping short block e.g. 512 samples and determines an ability of the same to hide code frequencies to human hearing. That is the masking evaluator determines if code frequencies can be hidden within the audio represented by the short block by evaluating each critical band of the audio as a whole to determine its energy and determining the noise like or tonal like attributes of each critical band and determining the sum total ability of the critical bands to mask the code frequencies. According to the illustrated example the bandwidth of the critical bands increases with frequency. If the masking evaluator determines that code frequencies can be hidden in the audio the masking evaluator indicates the amplitude levels at which the code frequencies can be inserted within the audio while still remaining hidden and provides the amplitude information to the synthesizer .

Some example the masking evaluators conduct the masking evaluation by determining a maximum change in energy Eor a masking energy level that can occur at any critical frequency band without making the change perceptible to a listener. The masking evaluation carried out by the masking evaluator may be carried out as outlined in the Moving Pictures Experts Group Advanced Audio Encoding MPEG AAC audio compression standard ISO IEC 13818 7 1997 for example. The acoustic energy in each critical band influences the masking energy of its neighbors and algorithms for computing the masking effect are described in the standards document such as ISO IEC 13818 7 1997. These analyses may be used to determine for each short block the masking contribution due to tonality e.g. how much the audio being evaluated is like a tone as well as noise like i.e. how much the audio being evaluated is like noise features. Further analysis can evaluate temporal masking that extends masking ability of the audio over short time typically for 50 100 milliseconds ms . The resulting analysis by the masking evaluator provides a determination on a per critical band basis the amplitude of a code frequency that can be added to the audio without producing any noticeable audio degradation e.g. without being audible .

Because a 256 sample block will appear in both the beginning of one short block and the end of the next short block and thus will be evaluated two times by the masking evaluator the masking evaluator makes two masking evaluations including the 256 sample block. The amplitude indication provided to the synthesizer is a composite of those two evaluations including that 256 sample block and the amplitude indication is timed such that the amplitude of the code inserted into the 256 samples is timed with those samples arriving at the combiner .

Referring now to an example LUT is shown that includes one column representing symbols and seven columns representing numbered code frequency indices. The example LUT of includes 129 rows 128 of which are used to represent data symbols and one of which is used to represent a synchronization symbol. Because the example LUT includes 128 different data symbols data may be sent at a rate of seven bits per symbol. The frequency indices in the table may range from 180 656 and are based on a long block size of 9216 samples and a sampling rate of 48 kHz. Accordingly the frequencies corresponding to these indices range between 937.5 Hz and 3126.6 Hz which falls into the humanly audible range. A description of a process to generate a LUT such as the example table of is provided in conjunction with .

While an example LUT is shown in other sampling rates and frequency indices may be used to represent symbols. For example frequency indices may be selected from a range representing 937.5 Hz to 5010.4 Hz which falls in the humanly audible range. For example one or more ranges of frequency indices may not be selected and or not used to avoid interfering with frequencies used to carry other codes and or watermarks. Moreover the selected and or used ranges of frequencies need not be contiguous. In some examples frequencies in the ranges 0.8 kHz to 1.03 kHz and 2.9 kHz to 4.6 kHz are used. In other examples frequencies in the ranges 0.75 kHz to 1.03 kHz and 2.9 kHz to 4.4 kHz are used.

In some example operations of the code frequency selector a symbol of 25 e.g. a binary value of 0011001 is received from the symbol selector . The code frequency selector accesses the LUT and reads row of the symbol column . From this row the code frequency selector reads that code frequency indices and are to be emphasized in the audio to communicate the symbol to the decoder. The code frequency selector then provides an indication of these indices to the synthesizer which synthesizes the code signals by outputting Fourier coefficients corresponding to these indices.

The combiner receives both the output of the code synthesizer and the audio and combines them to form encoded audio. The combiner may combine the output of the code synthesizer and the audio in an analog or digital form. If the combiner performs a digital combination the output of the code synthesizer may be combined with the output of the sampler rather than the audio that is input to the sampler . For example the audio block in digital form may be combined with the sine waves in digital form. Alternatively the combination may be carried out in the frequency domain wherein frequency coefficients of the audio are adjusted in accordance with frequency coefficients representing the sine waves. As a further alternative the sine waves and the audio may be combined in analog form. The encoded audio may be output from the combiner in analog or digital form. If the output of the combiner is digital it may be subsequently converted to analog form before being coupled to the transmitter .

While an example manner of implementing the example encoder of has been illustrated in one or more of the interfaces data structures elements processes and or devices illustrated in may be combined divided re arranged omitted eliminated and or implemented in any other way. Further the example message generator the example symbol selector the example code frequency selector the example code signal synthesizer the example inverse Fourier transform the example combiner the example prior code detector the example overlapping short block maker the example masking evaluator and or more generally the example encoder of may be implemented by hardware software firmware and or any combination of hardware software and or firmware. Thus for example any of the example message generator the example symbol selector the example code frequency selector the example code signal synthesizer the example inverse Fourier transform the example combiner the example prior code detector the example overlapping short block maker the example masking evaluator and or more generally the example encoder may be implemented by one or more circuit s programmable processor s ASIC s PLD s FPLD s and or FPGA s etc. When any apparatus claim of this patent incorporating one or more of these elements is read to cover a purely software and or firmware implementation at least one of the example message generator the example symbol selector the example code frequency selector the example code signal synthesizer the example inverse Fourier transform the example combiner the example prior code detector the example overlapping short block maker the example masking evaluator and or more generally the example encoder are hereby expressly defined to include a tangible article of manufacture such as a tangible computer readable medium such as those described above in connection with storing the firmware and or software. Further still the example encoder may include interfaces data structures elements processes and or devices instead of or in addition to those illustrated in and or may include more than one of any or all of the illustrated interfaces data structures elements processes and or devices.

The example process of begins when audio samples to be encoded are received block . The process then determines if the received samples have been previously encoded block . This determination may be carried out for example by the prior code detector of or by any suitable decoder configured to examine the audio to be encoded for evidence of a prior encoding.

If the received samples have not been previously encoded block the process generates a communication message block such as a communication message having the format shown in at reference numeral . In one particular example when the audio has not been previously encoded the communication message may include a synchronization portion and one or more portions including data bits. The communication message generation may be carried out for example by the message generator of .

The communication message is then mapped into symbols block . For example the synchronization information need not be mapped into a symbol if the synchronization information is already a symbol. In another example if a portion of the communication message is a series of bits such bits or groups of bits may be represented by one symbol. As described above in conjunction with the symbol selector which is one manner in which the mapping block may be carried out one or more tables or encoding schemes may be used to convert bits into symbols. For example some techniques may include the use of error correction coding or the like to increase message robustness through the use of coding gain. In one particular example implementation having a symbol space sized to accommodate 128 data symbols seven bits may be converted into one symbol. Of course other numbers of bits may be processed depending on many factors including available symbol space error correction encoding etc.

After the communication symbols have been selected block the process selects a LUT that will be used to determine the code frequencies that will be used to represent each symbol block . In some examples the selected LUT may be the example LUT of or may be any other suitable LUT. Additionally the LUT may be any LUT generated as described in conjunction with . The selection of the LUT may be based on a number of factors including the synchronization symbol that is selected during the generation of the communication message block .

After the symbols have been generated block and the LUT is selected block the symbols are mapped into code frequencies using the selected LUT block . In some examples in which the LUT of is selected a symbol of for example 35 would be mapped to the frequency indices and . The data space in the LUT is between symbol and symbol and symbol which uses a unique set of code frequencies that do not match any other code frequencies in the table is used to indicate a synchronization symbol. The LUT selection block and the mapping block may be carried out by for example the code frequency selector of . After the code frequencies are selected an indication of the same is provided to for example the synthesizer of .

Code signals including the code frequencies are then synthesized block at amplitudes according to a masking evaluation which is described in conjunction with blocks and or and is described in conjunction with the process below. In some examples the synthesis of the code frequency signals may be carried out by providing appropriately scaled Fourier coefficients to an inverse Fourier process. For instance three Fourier coefficients may be output to represent each code frequency in the code frequency signals. Accordingly the code frequencies may be synthesized by the inverse Fourier process in a manner in which the synthesized frequencies are windowed to prevent spill over into other portions of the signal into which the code frequency signals are being embedded. An example configuration that may be used to carry out the synthesis of block is shown at blocks and of . Of course other implementations and configurations are possible.

After the code signals including the code frequencies have been synthesized they are combined with the audio samples block . As described in conjunction with the combination of the code signals and the audio is such that one symbol is inserted into each long block of audio samples. Accordingly to communicate one synchronization symbol and 49 data bits information is encoded into eight long blocks of audio information one long block for the synchronization symbol and one long block for each seven bits of data assuming seven bits symbol encoding . The messages are inserted into the audio at two second intervals. Thus the eight long blocks of audio immediately following the start of a message may be encoded with audio and the remaining long blocks that make up the balance of the two second of audio may be unencoded.

The insertion of the code signal into the audio may be carried out by adding samples of the code signal to samples of the host audio signal wherein such addition is done in the analog domain or in the digital domain. Alternatively with proper frequency alignment and registration frequency components of the audio signal may be adjusted in the frequency domain and the adjusted spectrum converted back into the time domain.

The foregoing described the operation of the process when the process determined that the received audio samples have not been previously encoded block . However in situations in which a portion of media has been through a distribution chain and encoded as it was processed the received samples of audio processed at block already include codes. For example a local television station using a courtesy news clip from CNN in a local news broadcast might not get viewing credit based on the prior encoding of the CNN clip. As such additional information is added to the local news broadcast in the form of pre existing code flag information. If the received samples of audio have been previously encoded block the process generates pre existing code flag information block . The pre existing code flag information may include the generation of an pre existing code flag synchronization symbol and for example the generation of seven bits of data which will be represented by a single data symbol. The data symbol may represent a station identification a time or any other suitable information. For example a media monitoring site MMS may be programmed to detect the pre existing code flag information to credit the station identified therein.

After the pre existing code flag information has been generated block the process selects the pre existing code flag LUT that will be used to identify code frequencies representative of the pre existing code flag information block . In some examples the pre existing code flag LUT may be different than other LUTs used in non pre existing code conditions. For instance the pre existing code flag synchronization symbol may be represented by the code frequencies and .

After the pre existing code flag information is generated block and the pre existing code flag LUT is selected block the pre existing code flag symbols are mapped to code frequencies block and the remainder of the processing follows as previously described.

Sometime before the code signal is synthesized block the process conducts a masking evaluation to determine the amplitude at which the code signal should be generated so that it still remains inaudible or substantially inaudible to human hearers. Accordingly the process generates overlapping short blocks of audio samples each containing 512 audio samples block . As described above the overlapping short blocks include 50 old samples and 50 newly received samples. This operation may be carried out by for example the overlapping short block maker of .

After the overlapping short blocks are generated block masking evaluations are performed on the short blocks block . For example this may be carried out as described in conjunction with block of . The results of the masking evaluation are used by the process at block to determine the amplitude of the code signal to be synthesized. The overlapping short block methodology may yield two masking evaluation for a particular 256 samples of audio one when the 256 samples are the new samples and one when the 256 samples are the old samples the result provided to block of the process may be a composite of these masking evaluations. Of course the timing of the process is such that the masking evaluations for a particular block of audio are used to determine code amplitudes for that block of audio.

A system for populating one or more LUTs with code frequencies corresponding to symbols may be implemented using hardware software combinations of hardware and software firmware or the like. The system of may be used to generate any number of LUTs such as the LUT of . The system which operates as described below in conjunction with and results in a code frequency index LUT wherein 1 two symbols of the table are represented by no more than one common frequency index 2 not more than one of the frequency indices representing a symbol reside in one audio critical band as defined by the MPEG AA compression standard ISO IEC 13818 7 1997 and 3 code frequencies of neighboring critical bands are not used to represent a single symbol. Criteria number 3 helps to ensure that audio quality is not compromised during the audio encoding process.

A critical band pair definer defines a number P of critical band pairs. For example referring to a table includes columns representing AAC critical band indices short block indices in the range of the AAC indices and long block indices in the range of the AAC indices. In some examples the value of P may be seven and thus seven critical band pairs are formed from the AAC indices block . shows the frequency relationship between the AAC indices. According to an example as shown at reference numeral in wherein frequencies of critical band pairs are shown as separated by dotted lines AAC indices may be selected into pairs as follows five and six seven and eight nine and ten eleven and twelve thirteen and fourteen fifteen and sixteen and seventeen and seventeen. The AAC index of seventeen includes a wide range of frequencies and therefore index is shown twice once for the low portion and once for the high portion.

A frequency definer defines a number of frequencies N that are selected for use in each critical band pair. In some examples the value of N is sixteen meaning that there are sixteen data positions in the combination of the critical bands that form each critical band pair. Reference numeral in identifies the seventeen frequency positions are shown. The circled position four is reserved for synchronization information and therefore is not used for data.

A number generator defines a number of frequency positions in the critical band pairs defined by the critical band pair definer . In some examples the number generator generates all N P digit numbers. For example if N is 16 and P is 7 the process generates the numbers 0 through 268435456 but may do so in base hexadecimal which would result in the values 0 through 10000000.

A redundancy reducer then eliminates all number from the generated list of numbers sharing more than one common digit between them in the same position. This ensures compliance with criteria 1 above because as described below the digits will be representative of the frequencies selected to represent symbols. An excess reducer may then further reduce the remaining numbers from the generated list of numbers to the number of needed symbols. For example if the symbol space is 129 symbols the remaining numbers are reduced to a count of 129. The reduction may be carried out at random or by selecting remaining numbers with the greatest Euclidean distance or my any other suitable data reduction technique. In another example the reduction may be carried out in a pseudorandom manner.

After the foregoing reductions the count of the list of numbers is equal to the number of symbols in the symbol space. Accordingly a code frequency definer defines the remaining numbers in base P format to represent frequency indices representative of symbols in the critical band pairs. For example referring to the hexadecimal number F1E4B0F is in base which matches P. The first digit of the hexadecimal number maps to a frequency component in the first critical band pair the second digit to the second critical band pair and so on. Each digit represents the frequency index that will be used to represent the symbol corresponding to the hexadecimal number F1E4B0F.

Using the first hexadecimal number as an example of mapping to a particular frequency index the decimal value of Fh is 15. Because position four of each critical band pair is reserved for non data information the value of any hexadecimal digit greater than four is incremented by the value of one decimal. Thus the 15 becomes a 16. The 16 is thus designated as shown with the asterisk in as being the code frequency component in the first critical band pair to represent the symbol corresponding to the hexadecimal number F1E4B0F. Though not shown in the index position e.g. the second position from the far left in the critical band would be used to represent the hexadecimal number F1E4B0F.

A LUT filler receives the symbol indications and corresponding code frequency component indications from the code frequency definer and fills this information into a LUT.

While an example manner of implementing a LUT table generator is illustrated in one or more of the interfaces data structures elements processes and or devices illustrated in may be combined divided re arranged omitted eliminated and or implemented in any other way. Further the example critical band pair definer the example frequency definer the example number generator the example redundancy reducer the example excess reducer the example code frequency definer the example LUT filler and or more generally the example system of may be implemented by hardware software firmware and or any combination of hardware software and or firmware. Thus for example any of the example critical band pair definer the example frequency definer the example number generator the example redundancy reducer the example excess reducer the example code frequency definer the example LUT filler and or more generally the example system may be implemented by one or more circuit s programmable processor s ASIC s PLD s FPLD s and or FPGA s etc. When any apparatus claim of this patent incorporating one or more of these elements is read to cover a purely software and or firmware implementation at least one of the example critical band pair definer the example frequency definer the example number generator the example redundancy reducer the example excess reducer the example code frequency definer the example LUT filler and or more generally the example system are hereby expressly defined to include a tangible article of manufacture such as a tangible computer readable medium such as those described above in connection with storing the firmware and or software. Further still the example system may include interfaces data structures elements processes and or devices instead of or in addition to those illustrated in and or may include more than one of any or all of the illustrated interfaces data structures elements processes and or devices.

The example machine accessible instructions of may be used to generate any number of LUTs such as the LUT of . While an example process is shown other processes may be used. The result of the process is a code frequency index LUT wherein 1 two symbols of the table are represented by no more than one common frequency index 2 not more than one of the frequency indices representing a symbol reside in one audio critical band as defined by the MPEG AA compression standard ISO IEC 13818 7 1997 and 3 code frequencies of neighboring critical bands are not used to represent a single symbol. Criteria number 3 helps to ensure that audio quality is not compromised during the audio encoding process.

The example process of begins by defining a number P of critical band pairs. For example referring to a table includes columns representing AAC critical band indices short block indices in the range of the AAC indices and long block indices in the range of the AAC indices. In some examples the value of P may be seven and thus seven critical band pairs are formed from the AAC indices block . shows the frequency relationship between the AAC indices. According to an example as shown at reference numeral in wherein frequencies of critical band pairs are shown as separated by dotted lines AAC indices may be selected into pairs as follows five and six seven and eight nine and ten eleven and twelve thirteen and fourteen fifteen and sixteen and seventeen and seventeen. The AAC index of seventeen includes a wide range of frequencies and therefore index is shown twice once for the low portion and once for the high portion.

After the band pairs have been defined block a number of frequencies N is selected for use in each critical band pair block . In some examples the value of N is sixteen meaning that there are sixteen data positions in the combination of the critical bands that form each critical band pair. As shown in as reference numeral the seventeen frequency positions are shown. The circled position four is reserved for synchronization information and therefore is not used for data.

After the number of critical band pairs and the number of frequency positions in the pairs is defined the process generates all N P digit numbers with no more than one hexadecimal digit in common block . For example if N is 16 and P is 7 the process generates the numbers 0 through 268435456 but may do so in base hexadecimal which would results in 0 through FFFFFFF but does not include the numbers that share more than one common hexadecimal digit. This ensures compliance with criteria 1 above because as described below the digits will be representative of the frequencies selected to represent symbols.

According to an example process for determining a set of numbers that comply with criteria 1 above and any other desired criteria the numbers in the range from 0 to N 1 are tested. First the value corresponding to zero is stored as the first member of the result set R. Then the numbers from 1 to N 1 are selected for analysis to determine if they meet criteria 1 when compared to the members of R. Each number that meets criteria 1 when compared against all the current entries in R is added to the result set. In particular according to the example process in order to test a number K each hexadecimal digit of interest in K is compared to the corresponding hexadecimal digit of interest in an entry M from the current result set. In the 7 comparisons not more than one hexadecimal digit of K should equal the corresponding hexadecimal digit of M. If after comparing K against all numbers currently in the result set no member of the latter has more than one common hexadecimal digit then K is added to the result set R. The algorithm iterates through the set of possible numbers until all values meeting criteria 1 have been identified.

While the foregoing describes an example process for determining a set of numbers that meets criteria 1 any process or algorithm may be used and this disclosure is not limited to the process described above. For example a process may use heuristics rules etc. to eliminate numbers from the set of numbers before iterating throughout the set. For example all of the numbers where the relevant bits start with two 0 s two 1 s two 2 s etc. and end with two 0 s two 1 s two 2 s etc. could immediately be removed because they will definitely have a hamming distance less than 6. Additionally or alternatively an example process may not iterate through the entire set of possible numbers. For example a process could iterate until enough numbers are found e.g. 128 numbers when 128 symbols are desired . In another implementation the process may randomly select a first value for inclusion in the set of possible values and then may search iteratively or randomly through the remaining set of numbers until a value that meets the desired criteria e.g. criteria 1 is found.

The process then selects the desired numbers from the generated values block . For example if the symbol space is 129 symbols the remaining numbers are reduced to a count of 129. The reduction may be carried out at random or by selecting remaining numbers with the greatest Euclidean distance or my any other suitable data reduction technique.

After the foregoing reductions the count of the list of numbers is equal to the number of symbols in the symbol space. Accordingly the remaining numbers in base P format are defined to represent frequency indices representative of symbols in the critical band pairs block . For example referring to the hexadecimal number F1E4B0F is in base which matches P. The first digit of the hexadecimal number maps to a frequency component in the first critical band pair the second digit to the second critical band pair and so on. Each digit represents the frequency index that will be used to represent the symbol corresponding to the hexadecimal number F1E4B0F.

Using the first hexadecimal number as an example of mapping to a particular frequency index the decimal value of Fh is 15. Because position four of each critical band pair is reserved for non data information the value of any hexadecimal digit greater than four is incremented by the value of one decimal. Thus the 15 becomes a 16. The 16 is thus designated as shown with the asterisk in as being the code frequency component in the first critical band pair to represent the symbol corresponding to the hexadecimal number F1E4B0F. Though not shown in the index position e.g. the second position from the far left in the critical band would be used to represent the hexadecimal number F1E4B0F.

Of course the systems and processes described in conjunction with are only examples that may be used to generate LUTs having desired properties in conjunction the encoding and decoding systems described herein. Other configurations and processes may be used. For example LUTs may be generated using other code frequency plans.

In general the decoder detects a code signal that was inserted into received audio to form encoded audio at the encoder . That is the decoder looks for a pattern of emphasis in code frequencies it processes. Once the decoder has determined which of the code frequencies have been emphasized the decoder determines based on the emphasized code frequencies the symbol present within the encoded audio. The decoder may record the symbols or may decode those symbols into the codes that were provided to the encoder for insertion into the audio.

In one implementation the example decoder of may be implemented using for example a digital signal processor programmed with instructions to implement components of the decoder . Of course any other implementation of the example decoder is possible. For example the decoder may be implemented using one or more processors programmable logic devices or any suitable combination of hardware software and firmware.

As shown in an example decoder includes a sampler which may be implemented using an analog to digital converter A D or any other suitable technology to which encoded audio is provided in analog format. As shown in the encoded audio may be provided by a wired or wireless connection to the receiver . The sampler samples the encoded audio at for example a sampling frequency of 8 kHz or 12 kHz. Of course other sampling frequencies may be advantageously selected in order to increase resolution or reduce the computational load at the time of decoding. At a sampling frequency of 8 kHz the Nyquist frequency is 4 kHz and therefore all of the embedded code signals represented in the example LUT of are preserved because their spectral frequencies are lower than the Nyquist frequency. Were a frequency plan including higher frequencies utilized a higher sampling frequency such as 12 kHz may be needed to ensure the Nyquist sampling criteria is satisfied.

The samples from the sampler are provided to a stacker . In general the stacker accentuates the code signal in the audio signal information by taking advantage of the fact that messages are repeated or substantially repeated e.g. only the least significant bits are changed for a period of time. For example 42 bits of of the 49 bits and of the previously described example message of remain constant for 64 seconds 32 2 second message intervals when the 42 bits of data in the message include a station identifier and a coarse time stamp which increments once every 64 seconds. The variable data in the last 7 bit group represents time increments in seconds and thus varies from message to message. The example stacker aggregates multiple blocks of audio signal information to accentuate the code signal in the audio signal information. In an example implementation the stacker comprises a buffer to store multiple samples of audio information. For example if a complete message is embedded in two seconds of audio the buffer may be twelve seconds long to store six messages. The example stacker additionally comprises an adder to sum the audio signal information associated with the six messages and a divider to divide the sum by the number of repeated messages selected e.g. six .

By way of example a watermarked signal y t can be represented by the sum of the host signal x t and watermark w t 

In the stacked signal S t the contribution of the host signal decreases because the values of samples x t x t T . . . x t nT are independent if the period T is sufficiently large. At the same time the contribution of the watermarks being made of for example in phase sinusoids is enhanced.

Assuming x t x t T . . . x t nT are independent random variables drawn from the same distribution X with zero mean E X 0 

Accordingly the underlying host signal contributions x t . . . x t nT will effectively be canceling each other while the watermark is unchanged allowing the watermark to be more easily detected.

In the illustrated example the power of the resulting signal decreases linearly with the number of stacked signals n. Therefore averaging over independent portions of the host signal can reduce the effects of interference. The watermark is not affected because it will always be added in phase.

The decoder may additionally include a stacker controller to control the operation of the stacker . The example stacker controller receives a signal indicating whether the stacker should be enabled or disabled. For example the stacker controller may receive the received audio signal and may determine if the signal includes significant noise that will distort the signal and in response to the determination cause the stacker to be enabled. In another implementation the stacker controller may receive a signal from a switch that can be manually controlled to enable or disable the stacker based on the placement of the decoder . For example when the decoder is wired to the receiver or the microphone is placed in close proximity to the speaker the stacker controller may disable the stacker because stacking will not be needed and will cause corruption of rapidly changing data in each message e.g. the least significant bits of a timestamp . Alternatively when the decoder is located at a distance from the speaker or in another environment where significant interference may be expected the stacker may be enabled by the stacker controller . Further the stacker may be disabled when a the sampling rate accuracy of the sampler and or the highest frequency used to convey messages are selected such that the stacking may have limited effect and or b the variable data in the last 7 bit group representing time increments in seconds which varies from message to message is to be decoded. Of course any type of desired control may be applied by the stacker controller .

The output of the stacker is provided to a time to frequency domain converter . The time to frequency domain converter may be implemented using a Fourier transform such as a DFT or any other suitable technique to convert time based information into frequency based information. In some examples the time to frequency domain converter may be implemented using a sliding long block fast Fourier transform FFT in which a spectrum of the code frequencies of interest is calculated each time eight new samples are provided to the example time to time to frequency domain converter . In some examples the time to frequency domain converter uses 1 536 samples of the encoded audio and determines a spectrum therefrom using 192 slides of eight samples each. The resolution of the spectrum produced by the time to frequency domain converter increases as the number of samples used to generate the spectrum is increased. Thus the number of samples processed by the time to frequency domain converter should match the resolution used to select the indices in the tables of .

The spectrum produced by the time to frequency domain converter passes to a critical band normalizer which normalizes the spectrum in each of the critical bands. In other words the frequency with the greatest amplitude in each critical band is set to one and all other frequencies within each of the critical bands are normalized accordingly. For example if critical band one includes frequencies having amplitudes of 112 56 56 56 56 56 and 56 the critical band normalizer would adjust the frequencies to be 1 0.5 0.5 0.5 0.5 0.5 and 0.5. Of course any desired maximum value may be used in place of one for the normalization. The critical band normalizer outputs the normalized score for each of the frequencies of the interest.

The spectrum of scores produced by the critical band normalizer is passed to the symbol scorer which calculates a total score for each of the possible symbols in the active symbol table. In an example implementation the symbol scorer iterates through each symbol in the symbol table and sums the normalized score from the critical band normalizer for each of the frequencies of interest for the particular symbol to generate a score for the particular symbol. The symbol scorer outputs a score for each of the symbols to the max score selector which selects the symbol with the greatest score and outputs the symbol and the score.

The identified symbol and score from the max score selector are passed to the comparator which compares the score to a threshold. When the score exceeds the threshold the comparator outputs the received symbol. When the score does not exceed the threshold the comparator outputs an error indication. For example the comparator may output a symbol indicating an error e.g. a symbol not included in the active symbol table when the score does not exceed the threshold. Accordingly when a message has been corrupted such that a great enough score i.e. a score that does not exceed the threshold is not calculated for a symbol an error indication is provided. In an example implementation error indications may be provided to the stacker controller to cause the stacker to be enabled when a threshold number of errors are identified e.g. number of errors over a period of time number of consecutive errors etc. .

The identified symbol or error from the comparator is passed to the circular buffers and the pre existing code flag circular buffers . An example implementation of the standard buffers is described in conjunction with . The example circular buffers comprise one circular buffer for each slide of the time domain to frequency domain converter e.g. 192 buffers . Each circular buffer of the circular buffers includes one storage location for the synchronize symbol and each of the symbol blocks in a message e.g. eight block messages would be stored in eight location circular buffers so that an entire message can be stored in each circular buffer. Accordingly as the audio samples are processed by the time domain to frequency domain converter the identified symbols are stored in the same location of each circular buffer until that location in each circular buffer has been filled. Then symbols are stored in the next location in each circular buffer. In addition to storing symbols the circular buffers may additionally include a location in each circular buffer to store a sample index indicating the sample in the audio signal that was received that resulted in the identified symbol.

The example pre existing code flag circular buffers are implemented in the same manner as the circular buffers except the pre existing code flag circular buffers include one location for the pre existing code flag synchronize symbol and one location for each symbols in the pre existing code flag message e.g. an pre existing code flag synchronize that includes one message symbol would be stored in two location circular buffers . The pre existing code flag circular buffers are populated at the same time and in the same manner as the circular buffers .

The example message identifier analyzes the circular buffers and the pre existing code flag circular buffers for a synchronize symbol. For example the message identifier searches for a synchronize symbol in the circular buffers and an pre existing code flag synchronize symbol in the pre existing code flag circular buffers . When a synchronize symbol is identified the symbols following the synchronize symbol e.g. seven symbols after a synchronize symbol in the circular buffers or one symbol after an pre existing code flag synchronize symbol in the pre existing code flag circular buffers are output by the message identifier . In addition the sample index identifying the last audio signal sample processed is output.

The message symbols and the sample index output by the message identifier are passed to the validator which validates each message. The validator includes a filter stack that stores several consecutively received messages. Because messages are repeated e.g. every 2 seconds or 16 000 samples at 8 kHz or every 1.6 seconds at 12 kHz each message may be compared with other messages in the filter stack that are separated by approximately the number of audio samples in a single message to determine if a match exists. If a match or substantial match exists both messages are validated. If a message cannot be identified it is determined that the message is an error and is not emitted from the validator . In cases where messages might be affected by noise interference messages might be considered a match when a subset of symbols in a message match the same subset in another already validated message. For example if four of seven symbols in a message match the same four symbols in another message that has already been validated the message can be identified as partially validated. Then a sequence of the repeated messages can be observed to identify the non matching symbols in the partially validated message.

Further for each hypothetical long block that is analyzed during decoding a score that represents the strength and or probability that the decoding decision is correct may be computed. For example for each of the seven frequencies that constitute a potential code pattern divide the power of that frequency by the average power of the other code frequencies in its code band. By summing this value across the seven frequencies a score for each potential pattern can be determined. The selected pattern is the code pattern with the highest score and that exceeds a certain minimum threshold. To improved decoding accuracy the score of the winning pattern may be combined with that of the score s corresponding to the same pattern at a long block location that is exactly 3 6 9 etc. message slots away from the current location. If this long block is one of the 6 long blocks of the message that carries a substantially constant payload the score of the winning pattern will be enhanced. However such stacking does not help the 7long block which contains information that changes from message to message. By stacking code detection accuracy may be increased by a factor of 2 or 3 without being sensitive to sampling rate inaccuracies and or jitter. Other example methods and apparatus to increase the accuracy of watermark decoding are described in U.S. patent application Ser. No. 12 604 176 entitled Methods and Apparatus to Extract Data Encoded in Media Content and filed Oct. 22 2009.

The validated messages from the validator are passed to the symbol to bit converter which translates each symbol to the corresponding data bits of the message using the active symbol table.

While an example manner of implementing the example decoder of is illustrated in one or more of the interfaces data structures elements processes and or devices illustrated in may be combined divided re arranged omitted eliminated and or implemented in any other way. Further the example sampler the example stacker the example stacker controller the example time domain to frequency domain the example critical band normalizer the example symbol scorer the example max score selector the comparator the example circular buffers the example pre existing code flag circular buffers the example message identifier the example validator the example symbol to bit converter and or more generally the example system decoder of may be implemented by hardware software firmware and or any combination of hardware software and or firmware. Thus for example any of the example sampler the example stacker the example stacker controller the example time domain to frequency domain the example critical band normalizer the example symbol scorer the example max score selector the comparator the example circular buffers the example pre existing code flag circular buffers the example message identifier the example validator the example symbol to bit converter and or more generally the example system decoder may be implemented by one or more circuit s programmable processor s ASIC s PLD s FPLD s and or FPGA s etc. When any apparatus claim of this patent incorporating one or more of these elements is read to cover a purely software and or firmware implementation at least one of the example sampler the example stacker the example stacker controller the example time domain to frequency domain the example critical band normalizer the example symbol scorer the example max score selector the comparator the example circular buffers the example pre existing code flag circular buffers the example message identifier the example validator the example symbol to bit converter and or more generally the example system decoder are hereby expressly defined to include a tangible article of manufacture such as a tangible computer readable medium such as those described above in connection with storing the firmware and or software. Further still the example decoder may include interfaces data structures elements processes and or devices instead of or in addition to those illustrated in and or may include more than one of any or all of the illustrated interfaces data structures elements processes and or devices.

The example process of begins by sampling audio block . The audio may be obtained via an audio sensor a hardwired connection via an audio file or through any other suitable technique. As explained above the sampling may be carried out at 8 000 Hz or any other suitable frequency.

As each sample is obtained the sample is aggregated by a stacker such as the example stacker of block . An example process for performing the stacking is described in conjunction with .

The new stacked audio samples from the stacker process are inserted into a buffer and the oldest audio samples are removed block . As each sample is obtained a sliding time to frequency conversion is performed on a collection of samples including numerous older samples and the newly added sample obtained at blocks and block . In some examples a sliding FFT may be used to process streaming input samples including 9215 old samples and the one newly added sample. In some examples the FFT using 9216 samples results in a spectrum having a resolution of 5.2 Hz.

After the spectrum is obtained through the time to frequency conversion block the transmitted symbol is determined block . An example process for determining the transmitted symbol is described in conjunction with .

After the transmitted message is identified block buffer post processing is performed to identify a synchronize symbol and corresponding message symbols block . An example process for performing post processing is described in conjunction with .

After post processing is performed to identify a transmitted message block message validation is performed to verify the validity of the message block . An example process for performing the message validation is described in conjunction with .

After a message has been validated block the message is converted from symbols to bits using the active symbol table block . Control then returns to block to process the next set of samples.

When the stacker control is enabled newly received audio signal samples are pushed into a buffer and the oldest samples are pushed out block . The buffer stores a plurality of samples. For example when a particular message is repeatedly encoded in an audio signal every two seconds and the encoded audio is sampled at 8 kHz each message will repeat every 16 000 samples so that buffer will store some multiple of 16 000 samples e.g. the buffer may store six messages with a 96 000 sample buffer . Then the stacker selects substantially equal blocks of samples in the buffer block . The substantially equal blocks of samples are then summed block . For example sample one is added to samples 16 001 32 001 48 001 64 001 and 80 001 sample two is added to samples 16 002 32 002 48 002 64 002 80 002 sample 16 000 is added to samples 32 000 48 000 64 000 80 000 and 96 000.

After the audio signal samples in the buffer are added the resulting sequence is divided by the number of blocks selected e.g. six blocks to calculate an average sequence of samples e.g. 16 000 averaged samples block . The resulting average sequence of samples is output by the stacker block . The process of then ends and control returns to block of .

After the frequencies of interest have been normalized block . The example symbol scorer selects the appropriate symbol table based on the previously determined synchronization table block . For example a system may include two symbol tables one table for a normal synchronization and one table for an pre existing code flag synchronization. Alternatively the system may include a single symbol table or may include multiple synchronization tables that may be identified by synchronization symbols e.g. cross table synchronization symbols . The symbol scorer then computes a symbol score for each symbol in the selected symbol table block . For example the symbol scorer may iterate across each symbol in the symbol table and add the normalized scores for each of the frequencies of interest for the symbol to compute a symbol score.

After each symbol is scored block the example max score selector selects the symbol with the greatest score block . The example comparator then determines if the score for the selected symbol exceeds a maximum score threshold block . When the score does not exceed the maximum score threshold an error indication is stored in the circular buffers e.g. the circular buffers and the pre existing code flag circular buffers block . The process of then completes and control returns to block of .

When the score exceeds the maximum score threshold block the identified symbol is stored in the circular buffers e.g. the circular buffers and the pre existing code flag circular buffers block . The process of then completes and control returns to block of .

For example illustrates an example implementation of circular buffers and illustrates an example implementation of pre existing code flag circular buffers . In the illustrated example of the last location in the circular buffers to have been filled is location three as noted by the arrow. Accordingly the sample index indicates the location in the audio signal samples that resulted in the symbols stored in location three. Because the line corresponding to sliding index is a circular buffer the consecutively identified symbols are 128 57 22 111 37 23 47 and 0. Because 128 in the illustrated example is a synchronize symbol the message can be identified as the symbols following the synchronize symbol. The message identifier would wait until 7 symbols have been located following the identification of the synchronization symbol at sliding index .

The pre existing code flag circular buffers of include two locations for each circular buffer because the pre existing code flag message of the illustrated example comprises one pre existing code flag synchronize symbol e.g. symbol followed by a single message symbol. According to the illustrated example of the pre existing code flag data block is embedded in two long blocks immediately following the 7 bit timestamp long block . Accordingly because there are two long blocks for the pre existing code flag data and each long block of the illustrated example is 1 536 samples at a sampling rate of 8 kHz the pre existing code flag data symbol will be identified in the pre existing code flag circular buffers samples after the original message. In the illustrated example sliding index corresponds to sample index which is 3072 samples later than sliding index of sample index . Accordingly the pre existing code flag data symbol can be determined to correspond to the message in sliding index of indicating that the message in sliding index of identifies an original encoded message e.g. identifies an original broadcaster of audio and the sliding index identifies an pre existing code flag message e.g. identifies a re broadcaster of audio .

Returning to after a synchronize or pre existing code flag synchronize symbol is detected messages in the circular buffers or the pre existing code flag circular buffers are condensed to eliminate redundancy in the messages. For example as illustrated in due to the sliding time domain to frequency domain conversion and duration of encoding for each message messages are identified in audio data for a period of time sliding indexes contain the same message . The identical messages in consecutive sliding indexes can be condensed into a single message because they are representative of only one encoded message. Alternatively condensing may be eliminated and all messages may be output when desired. The message identifier then stores the condensed messages in a filter stack associated with the validator block . The process of then ends and control returns to block of .

For example illustrates an example implementation of a filter stack. The example filter stack includes a message index seven symbol locations for each message index a sample index identification and a validation flag for each message index. Each message is added at message index M and a message at location M is the top message that is read in block of . Due to sampling rate variation and variation of the message boundary within a message identification it is expected that messages will be separated by samples indexes of multiples of approximately 16 000 samples when messages are repeated every 16 000 samples.

Returning to after the top message in the filter stack is selected block the validator determines if the validation flag indicates that the message has been previously validated block . For example indicates that message M has been validated. When the message has been previously validated the validator outputs the message block and control proceeds to block .

When the message has not been previously validated block the validator determines if there is another suitably matching message in the filter stack block . A message may be suitably matching when it is identical to another message when a threshold number of message symbols match another message e.g. four of the seven symbols or when any other error determination indicates that two messages are similar enough to speculate that they are the same. According to the illustrated example messages can only be partially validated with another message that has already been validated. When a suitable match is not identified control proceeds to block .

When a suitable match is identified the validator determines if a time duration e.g. in samples between identical messages is proper block . For example when messages are repeated every 16 000 samples it is determined if the separation between two suitably matching messages is approximately a multiple of 16 000 samples. When the time duration is not proper control proceeds to block .

When the time duration is proper block the validator validates both messages by setting the validation flag for each of the messages block . When the message has been validated completely e.g. an exact match the flag may indicate that the message is fully validated e.g. the message validated in . When the message has only been partially validated e.g. only four of seven symbols matched the message is marked as partially validated e.g. the message partially validated in . The validator then outputs the top message block and control proceeds to block .

When it is determined that there is not a suitable match for the top message block or that the time duration between a suitable match es is not proper block the top message is not validated block . Messages that are not validated are not output from the validator .

After determining not to validate a message blocks and or outputting the top message block the validator pops the filter stack to remove the top message from the filter stack. Control then returns to block to process the next message at the top of the filter stack.

While example manners of implementing any or all of the example encoder and the example decoder have been illustrated and described above one or more of the data structures elements processes and or devices illustrated in the drawings and described above may be combined divided re arranged omitted eliminated and or implemented in any other way. Further the example encoder and example decoder may be implemented by hardware software firmware and or any combination of hardware software and or firmware. Thus for example the example encoder and the example decoder could be implemented by one or more circuit s programmable processor s application specific integrated circuit s ASIC s programmable logic device s PLD s and or field programmable logic device s FPLD s etc. For example the decoder may be implemented using software on a platform device such as a mobile telephone. If any of the appended claims is read to cover a purely software implementation at least one of the prior code detector the example message generator the symbol selector the code frequency selector the synthesizer the inverse FFT the mixer the overlapping short block maker the masking evaluator the critical band pair definer the frequency definer the number generator the redundancy reducer the excess reducer the code frequency definer the LUT filler the sampler the stacker the stacker control the time domain to frequency domain converter the critical band normalize the symbol scorer the max score selector the comparator the circular buffers the pre existing code flag circular buffers the message identifier the validator and the symbol to bit converter are hereby expressly defined to include a tangible medium such as a memory DVD CD etc. Further still the example encoder and the example decoder may include data structures elements processes and or devices instead of or in addition to those illustrated in the drawings and described above and or may include more than one of any or all of the illustrated data structures elements processes and or devices.

Although certain example methods apparatus and articles of manufacture have been described herein the scope of coverage of this patent is not limited thereto. On the contrary this patent covers all methods apparatus and articles of manufacture fairly falling within the scope of the claims of this patent either literally or under the doctrine of equivalents.

