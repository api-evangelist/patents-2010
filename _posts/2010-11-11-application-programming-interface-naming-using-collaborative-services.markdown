---

title: Application programming interface naming using collaborative services
abstract: A method, computer system, and computer program product for improving application programming interface naming. An alternate name is received for a target application programming interface feature from a consumer developer. In addition, an indirection to the application programming interface feature is generated based on the alternate name. Then, the indirection to the application programming interface feature is transmitted to an indirections repository.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08943483&OS=08943483&RS=08943483
owner: International Business Machines Corporation
number: 08943483
owner_city: Armonk
owner_country: US
publication_date: 20101111
---
The disclosure relates to a method computer system and computer program product for improving application programming interface naming using collaborative services.

An application programming interface API is an interface implemented by a software program which enables the software program to interact with other software programs. An application programming interface is implemented by a software program in order to provide access to the program s services. An application programming interface is an abstraction that describes an interface for the interaction with a set of features used by components of a software program. An application programming interface may include a set of methods classes procedures and or protocols that allows a service provider software program to service requests from consumer software programs. In some instances application programming interfaces are public interfaces to services offered by a provider software program. In other instances application programming interfaces implement and encapsulate solutions to a specific class of problems. While most application programming interfaces are language dependent in that they are available only in a particular programming language some application programming interfaces are programming language neutral. In such cases the consumer software program may invoke the application programming interface in a programming language that is different from the programming language used to create the application programming interface.

The various features offered by an application programming interface can be described in the names hereinafter referred to as feature names of methods classes and other such public interfaces of the application programming interface. These feature names and any other associated descriptions allow developers of consumer software programs to determine the functionality provided by the application programming interface.

According to one embodiment of the present invention a method for improving application programming interface naming is provided. A computer receives an alternate name for a target application programming interface feature from a consumer developer. In addition the computer generates an indirection to the application programming interface feature based on the alternate name. Then the computer transmits the indirection to the application programming interface feature to an indirections repository.

According to another embodiment of the present invention a computer system for improving application programming interface naming is provided. The computer system includes one or more processors one or more computer readable memories and one or more computer readable tangible storage devices. At least one of the one or more storage devices stores program instructions which when executed by at least one of the one or more processors via at least one of the one or more memories receive an alternate name for a target application programming interface feature generate an indirection to the application programming interface feature based on the alternate name and transmit the indirection to the application programming interface feature to an indirections repository.

According to a further embodiment of the present invention a computer program product for improving application programming interface naming is provided. The computer program product includes one or more computer readable tangible storage devices and program instructions stored on at least one of the one or more storage devices to receive an alternate name for a target application programming interface feature generate an indirection to the application programming interface feature based on the alternate name and transmit the indirection to the application programming interface feature to an indirections repository.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable storage device s having computer readable program code embodied thereon.

Any combination of one or more computer readable storage device s may be utilized. A computer readable storage device may be for example but not limited to an electronic magnetic optical or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage device would include the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage device may be any tangible device that can store a program for use by or in connection with an instruction execution system apparatus or device. The term computer readable storage device does not mean a signal propagation media such as a copper transmission cable an optical transmission fiber or a wireless transmission media.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable storage device that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium storage device produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

With reference now to the figures and in particular with reference to diagrams of data processing environments are provided in which illustrative embodiments may be implemented. It should be appreciated that are only meant as examples and are not intended to assert or imply any limitation with regard to the environments in which different embodiments may be implemented. Many modifications to the depicted environments may be made.

In the depicted example server and server connect to network along with storage unit . Servers and or may for example be a server device that provides application programming interfaces to consumer client devices.

Storage unit is a network storage device capable of storing data in a structured or unstructured format. Further storage unit may represent a plurality of storage units connected to network . Furthermore storage unit may for example store one or more application programming interface library versions that bundle features of one or more application programming interfaces. Moreover storage unit may also store indirections to alternate names for application programming interfaces. An indirection is a reference or pointer to another name or value for the same object. For example illustrative embodiments use the indirection to point from an alternate application programming interface feature name to the original provider application programming interface feature name for the same target feature.

Clients and also connect to network . Client computers and may for example be personal computers or network computers. In the depicted example server computer and or server computer provide information such as boot files operating system images and applications to client computers and . In addition client computers and may be consumer devices that utilize application programming interface features provided by server computer and or server computer . Client computers and are clients to server computer and or server computer in this example.

Further client computers and may negotiate and collaborate on application programming interface feature naming with server computer and or server computer during initial construction of application programming interfaces. Such negotiation and collaboration may be accomplished via a collaborative application programming naming service that may for example be implemented as a Web service. Furthermore application programming interface consumer developers using client computers and may generate and provide alternate application programming interface feature names to previously generated names provided by an application programming interface provider developers. Moreover network data processing system may include additional server computers client computers and other devices not shown.

Program code located in network data processing system may be stored on a computer readable storage medium and downloaded to a data processing system or other device for use. For example program code may be stored on a computer readable storage medium on server and downloaded to client over network for use on client .

In the depicted example network data processing system is the Internet with network representing a worldwide collection of networks and gateways that use the Transmission Control Protocol Internet Protocol TCP IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high speed data communication lines between major nodes or host computers consisting of thousands of commercial governmental educational and other computer systems that route data and messages. Of course network data processing system also may be implemented as a number of different types of networks such as for example an intranet a local area network LAN or a wide area network WAN . is intended as an example and not as an architectural limitation for the different illustrative embodiments.

With reference now to a diagram of a data processing system is depicted in accordance with an illustrative embodiment. Data processing system is an example of a computer such as server or client in in which computer readable program code or instructions implementing processes of illustrative embodiments may be located. In this illustrative example data processing system includes communications fabric which provides communications between processor unit memory persistent storage communications unit input output I O unit and display .

Processor unit serves to execute instructions for software applications or programs that may be loaded into memory . Processor unit may be a set of one or more processors or may be a multi processor core depending on the particular implementation. Further processor unit may be implemented using one or more heterogeneous processor systems in which a main processor is present with secondary processors on a single chip. As another illustrative example processor unit may be a symmetric multi processor system containing multiple processors of the same type.

Memory and persistent storage are examples of computer readable storage media . Memory in these examples may for example be a random access memory or any other suitable volatile or non volatile computer readable storage medium. Persistent storage may take various forms depending on the particular implementation. For example persistent storage may contain one or more devices. For example persistent storage may be a hard drive a flash memory a rewritable optical disk a rewritable magnetic tape or some combination of the above. The media used by persistent storage may be removable. For example a removable hard drive may be used for persistent storage .

Communications unit in these examples provides for communication with other data processing systems or devices. In these examples communications unit is a network interface card. Communications unit may provide communications through the use of either or both physical and wireless communications links.

Input output unit allows for the input and output of data with other devices that may be connected to data processing system . For example input output unit may provide a connection for user input through a keyboard a mouse and or some other suitable input device. Further input output unit may send output to a printer. Display provides a mechanism to display information to a user.

Instructions for an operating system applications and or programs may be located in computer readable storage media which are in communication with processor unit through communications fabric . In these illustrative examples the instructions are in a functional form on persistent storage . These instructions may be loaded into memory for running by processor unit . The processes of the different embodiments may be performed by processor unit using computer implemented instructions which may be located in a memory such as memory .

These instructions are referred to as program code program instructions or computer readable program instructions that may be read and run by processor unit . The program code in the different embodiments may be embodied on different physical or computer readable storage media such as memory or persistent storage .

Program code is located in a functional form on computer readable storage media that is selectively removable and may be loaded onto or transferred to data processing system for running by processor unit . Program code and computer readable storage medium form computer program product .

In some illustrative embodiments program code may be downloaded over a network to persistent storage from another device or data processing system via communications unit for use within data processing system . For instance program code stored in a computer readable storage media in a server data processing system may be downloaded over a network from the server to data processing system . The data processing system providing program code may be a server computer a client computer or some other device capable of storing and transmitting program code .

The different components illustrated for data processing system are not meant to provide architectural limitations to the manner in which different embodiments may be implemented. The different illustrative embodiments may be implemented in a data processing system including components in addition to or in place of those illustrated for data processing system . Other components shown in can be varied from the illustrative examples shown. The different embodiments may be implemented using any hardware device or system capable of executing program code. As one example data processing system may include organic components integrated with inorganic components and or may be comprised entirely of organic components excluding a human being.

For example a bus system may be used to implement communications fabric and may be comprised of one or more buses such as a system bus or an input output bus. Of course the bus system may be implemented using any suitable type of architecture that provides for a transfer of data between different components or devices attached to the bus system. Additionally a communications unit may include one or more devices used to transmit and receive data such as a modem or a network adapter. Further a memory may be for example memory or a cache such as found in an interface and memory controller hub that may be present in communications fabric .

In the course of developing aspects of the present invention it was discovered that feature names chosen by application programming interface provider developers are ambiguous or if the names poorly represent the features they embody the overall quality of the application programming interface suffers which reduces the business value of the application programming interface. In addition poor naming may even cause incorrect usage of an application programming interface feature.

Illustrative embodiments provide a method computer system and computer program product for improving application programming interface naming using collaborative services between application programming interface provider developers and consumer developers. Illustrative embodiments improve feature naming within application programming interfaces by using community collaborative services. In a first aspect of illustrative embodiments application programming interface consumer developers may specify one or more alternate names and formats for a target feature within an application programming interface. Such alternate names are maintained within the consumer developers integrated development environment. In addition the application programming interface consumer device automatically generates indirections to target features of the application programming interface based on one or more alternate names for the name originally provided by the application programming interface provider developer.

In a second aspect of illustrative embodiments such indirections are transmitted to a central repository accessible by both application programming interface feature consumer devices and provider devices. When an application programming interface provider device accesses a target feature the indirections associated with the target feature are presented by the provider device to the provider developer in a list which in various exemplary embodiments can be a rank ordered list. Further when the application programming interface provider developer modifies a target feature for which there are associated indirections the provider device captures and transmits the modifications to application programming interface consumer devices.

A third aspect of illustrative embodiments enables automatic updates to indirections to alternate names for application programming interface features within the consumer integrated development environment based on captured modifications to features made by the application programming interface provider devices. In a fourth aspect of illustrative embodiments developers of an application programming interface may collaborate and negotiate application programming interface feature names during initial construction of the features. It should be noted that consumers and providers are not human users but instead are physical or logical devices.

Thus illustrative embodiments utilize indirections within the consumer integrated development environment to allow consumer developers to select application programming interface feature names appropriate to the consumer developers naming conventions and schemes without being tied to provider developer choices of names. In addition by being able to access consumer developer name choices for application programming interface features provider developers obtain automatic feedback to their naming choices thus enabling the provider developers to improve the quality of their application programming interfaces. Further with automatic indirection updates illustrative embodiments apply application programming interface feature modifications to the consumer integrated development environment without need for explicit action.

Collaboration between consumer developers and provider developers of application programming interface features provides a framework for better selection of application programming interface feature names. As a result illustrative embodiments solve the problem of provider developers creating application programming interface feature names that do not accurately describe the application programming interface features the names represent.

With reference now to a diagram of a collaborative application programming interface naming system is depicted in accordance with an illustrative embodiment. Collaborative application programming interface naming system may for example be implemented in a network of data processing systems such as network data processing system in . Collaborative application programming interface naming system is a system of hardware and software components that application programming interface provider developers and consumer developers utilize to collaborate on the development of application programming interface features and feature names.

Collaborative application programming interface naming system includes application programming interface consumer device and application programming interface provider device . Application programming interface consumer device and application programming interface provider device may for example be individually or collectively implemented in data processing system in . In addition it should be noted that application programming interface consumer device and application programming interface provider device may represent a plurality of consumer and provider devices and that the devices may be physical devices logical devices or a combination of physical and logical devices.

Application programming interface consumer device includes consumer developer code application programming interface library compiler application programming interface indirections and application programming interface change log . Consumer developer code application programming interface library compiler application programming interface indirections and application programming interface change log may represent examples of program code such as program code in . Consumer developer code is source code that is written by a consumer developer and that utilizes one or more of application programming interface features included in application program interface library . Consumer developer code may for example include one or more feature names for calling one or more of application programming interface features and may process the corresponding results. Application programming interface features may for example include methods classes procedures parameters and protocols for application programming interfaces.

Application programming interface library may be any standard library for use by a consumer developer. In one exemplary embodiment application programming interface library can be a Dynamic linked library DLL of shared files. In another exemplary embodiment application programming interface library can be a collection of application programming interface resources or files.

Compiler compiles consumer developer code . Compiler binds application programming interface library either statically or dynamically into machine processed object code. If compiler generates indirections for one or more feature names within consumer developer code to one or more features in application programming interface features such indirections are maintained in application programming interface indirections . The consumer developer uses the indirection to point from a new alternate name for an application programming interface feature which the new alternate name has been created by the consumer developer to an original or improper feature name created by an application programming interface provider developer.

While compiling consumer developer code compiler automatically resolves indirections to their target application programming interface features. In addition when application programming interface library is updated by the consumer developer or consumer device compiler uses application programming interface change log to update application programming interface indirections . Application programming interface change log is a record of all changes made to application programming interface features feature names and indirections corresponding to the application programming interface features. Application programming interface indirections are locally generated indirections by application programming interface consumer device for alternate application programming interface feature names. In one exemplary embodiment compiler generates application programming interface indirections .

Application programming interface provider device includes application programming interface indirections repository application programming interface provider integrated development environment application programming interface library repository and compiler . Application programming interface indirections repository application programming interface provider integrated development environment application programming interface library repository and compiler may represent examples of program code such as program code in . However it should be noted that in an alternate illustrative embodiment application programming interface indirections repository and or application programming interface library repository may be remotely located from application programming interface provider device in a separate server device such as storage unit in .

Application programming interface indirections repository stores one or more indirections created by one or more consumer developers for features associated with local consumer application programming interface libraries such as application programming interface library . When an application programming interface provider developer accesses a particular target feature application programming interface provider integrated development environment accesses application programming interface indirections repository to retrieve all indirections associated with that particular target feature. An integrated development environment also known as an integrated design environment is a software application that provides facilities to computer software developers for software development. An integrated development environment typically includes a source code editor a compiler and or interpreter a build automation tool and a debugger.

After retrieving all indirections associated with a particular target feature application programming interface provider integrated development environment presents the indirections in a list. In one exemplary embodiment the list can be a rank ordered list. The rank ordered list may for example be ordered by frequency of use of the indirections. Alternatively indirections may be ordered according to some type of rating system. For example consumer developers may rate different indirections for a particular target feature by applying different numbers of stars to each indirection to indicate preferences.

Application programming interface library repository stores the various versions of an application programming interface library and the associated change logs such as application programming interface library versions and associated change logs for one or more consumer devices. Consumer devices access application programming interface library repository to obtain newer versions of their respective application programming interface library such as for example application programming interface library and associated change logs such as for example application programming interface change log . Compiler compiles provider developer code within application programming interface provider integrated development environment to generate an application programming interface library. Additionally compiler uses application programming interface indirections repository to generate appropriate change logs when target application programming interface features are modified. Then compiler stores the generated change log in application programming interface library repository .

Indirections generated by application programming interface consumer device via compiler for example are collected and transmitted by application programming interface consumer device via compiler for example to a central repository such as application programming interface indirections repository which is accessible by application programming interface consumer device and application programming interface provider device . In addition to information regarding the target feature and indirections application programming interface consumer device via compiler for example also transmits to the central repository information regarding the particular version of the application programming interface library and an identifier that uniquely identifies the appropriate application programming interface consumer device. The unique identifier ensures that the same information is not transmitted multiple times. Further identifiers allow rank ordering. The identifier may for example be a globally unique identifier GUID that is assigned by the integrated development environment of application programming interface consumer device . In one illustrative embodiment identifiers may for example be generated when the application programming interface library is downloaded by a consumer device or used for the first time by a consumer device.

When an application programming interface provider developer accesses a target feature from application programming interface provider integrated development environment that is a target of one or more indirections application programming interface provider integrated development environment uses application programming interface indirections repository to generate a list of the indirections. In one exemplary embodiment the list can be rank ordered. While different ordering schemes may be used the preferred illustrative embodiment applies a usage based rank ordering.

For example consider the method boolean getBoolean String name which is an example application programming interface feature that can be stored in application programming interface library and can be a target feature of consumer developers. For purposes of illustration an assumption is made that the following alternate names for the target feature are provided by consumer developers. In this example assume that 60 out of 100 consumer developers changed the name of the target feature to getEnvBoolean another 15 out of the 100 consumer developers changed the name to getEnvironmentBoolean and another 25 out of the 100 consumer developers changed the name to is SysPropertyTrue . It should be noted that the number of consumer developers that did not provide an alternate name for the target feature is not transmitted to application programming interface indirections repository . Application programming interface consumer device via compiler for example generates indirections that map each of the alternate names to the target feature.

When an application programming interface provider developer accesses the target feature within application programming interface provider integrated development environment the indirections generated by application programming interface consumer device via compiler for example for the target feature are presented to the provider developer in a list. In this example the indirections are in a rank order of 1 getEnvBoolean 2 is SysPropertyTrue and 3 getEnvironmentBoolean according to frequency of use by the consumer developers. In an alternative illustrative embodiment this information may also be maintained in application programming interface provider integrated development environment to allow the provider developer to gauge more accurately the need to change a target feature name.

When the application programming interface provider developer modifies a feature that is a target of one or more indirections compiler within application programming interface provider device captures the change within change log . In addition when the consumer developer performs a version update of application programming interface library on application programming interface consumer device compiler uses change log to automatically update any indirections. It should be noted that this indirection update may not always be possible especially if the target feature has been modified to include new parameters. In such cases compiler flags an update error for the indirections.

Another aspect of illustrative embodiments enables provider developers to negotiate the naming of features within the application programming interface being developed. Illustrative embodiments utilize application programming interface provider integrated development environment to enable such community collaboration. By employing existing collaboration technology such as email or instant messaging a first developer may initiate a negotiation with a second developer over the naming and or any other characteristic of a feature within an application programming interface. The negotiation may continue back and forth until a consensus is reached. Additionally a third developer when viewing their respective copy of an application programming interface integrated development environment may see that a feature is flagged indicating that a negotiation is underway regarding that particular feature. Further the third developer may join in the negotiation session.

It should be noted that while the text above appears to only be applicable to compiled languages illustrative embodiments may be applied equally to non compiled languages such as for example an interpreted language where an integrated development environment is used for software development and may provide the services described above. The services may be utilized during some intermediate step such as for example build byte code generation or a code syntax check process to realize different illustrative embodiments.

With reference now to a diagram of an indirection process is depicted in accordance with an illustrative embodiment. Indirection process may for example be implemented in an application programming interface consumer device such as application programming interface consumer device in .

In this example assume an application programming interface consumer developer is editing source code such as consumer developer code in within integrated development environment . In this example the consumer developer code references the class MenuManager feature within application programming interface library . In particular a consumer developer initially desires that section of consumer developer code within integrated development environment such as source code section reference the method add which requires the following three input parameters in this order 1 a Boolean variable called enabled 2 a class variable called action of type IAction and 3 a Boolean variable called checked .

Ultimately the consumer developer determines that the method name and the parameter order are not appropriate for the consumer developer s use. As a result the consumer developer determines that the following changes should be made in the consumer developer s invocation of this particular method 1 the method should be renamed assignAction and 2 the order of the three input parameters listed above should be changed. When the consumer developer makes these changes within source code section which changes are shown in a compiler such as compiler in automatically generates indirection that maps source code section to the target method feature in application programming interface library .

Syntax trees and in particular abstract syntax trees are commonly used to represent the syntax of source code. In different illustrative embodiments where abstract syntax trees are used to represent the consumer developer code in integrated development environment and application programming interface library indirection will contain tree node mappings from alternate feature names to target feature names.

With reference now to a flowchart illustrating a process for providing an alternate application programming interface feature name by a consumer device is shown in accordance with an illustrative embodiment. The process shown in may be implemented in an application programming interface consumer device such as application programming interface consumer device in .

The process begins when the application programming interface consumer device receives an alternate name for a target application programming interface feature from a consumer developer block . In response to the application programming interface consumer device receiving the alternate name for the target application programming interface feature in block a compiler associated with the application programming interface consumer device such as compiler in automatically generates an indirection to the target application programming interface feature based on the alternate name block .

In response to the compiler automatically generating the indirection to the target application programming interface feature based on the alternate name in block the application programming interface consumer device makes a determination as to whether the application programming interface consumer device received another alternate name for the target application programming interface feature block . If the application programming interface consumer device determines that another alternate name for the target application programming interface feature was received yes output of block then the process returns to block where the compiler automatically generates another indirection to the target application programming interface feature based on the additional alternate name. If the application programming interface consumer device determines that another alternate name for the target application programming interface feature was not received no output of block then the application programming interface consumer device makes a determination as to whether the compiler needs to compile consumer developer code for indirections corresponding to the target application programming interface feature block .

If the application programming interface consumer device determines that the compiler does not need to compile consumer developer code for indirections corresponding to the target application programming interface feature no output of block then the process proceeds to block . If the application programming interface consumer device determines that the compiler does need to compile consumer developer code for indirections corresponding to the target application programming interface feature yes output of block then the compiler replaces alternate names with the target application programming interface feature block .

In response to the compiler replacing the alternate names with the target application programming interface feature in block the compiler completes compilation of the consumer developer code for the target application programming interface feature block . In response to the compiler completing compilation of the consumer developer code for the target application programming interface feature in block the compiler stores the compilation of the consumer developer code for the target application programming interface feature in an application programming interface library associated with the application programming interface consumer device block . In addition the compiler transmits indirections for the target application programming interface feature to an application programming interface indirections repository such as application programming interface indirections repository in block . The process terminates thereafter.

With reference now to a flowchart illustrating a process for accessing an application programming interface feature by a provider device is shown in accordance with an illustrative embodiment. The process shown in may be implemented in an application programming interface provider device such as application programming interface provider device in .

The process begins when the application programming interface provider device via an application programming interface provider integrated development environment such as application programming interface provider integrated development environment in accesses a target application programming interface feature in an integrated development environment associated with the application programming interface provider device block . In response to the application programming interface provider device accessing the target application programming interface feature in the integrated development environment associated with the application programming interface provider device in block the application programming interface provider device makes a determination as to whether one or more indirections exist for the target application programming interface feature in an application programming interface indirections repository such as application programming interface indirections repository in block . If the application programming interface provider device determines that one or more indirections do not exist for the target application programming interface feature in an application programming interface indirections repository no output of block then the process proceeds to block . If the application programming interface provider device determines that one or more indirections do exist for the target application programming interface feature in an application programming interface indirections repository yes output of block then the application programming interface provider device retrieves the one or more indirections for the target application programming interface feature from the application programming interface indirections repository block .

In response to retrieving the one or more indirections for the target application programming interface feature from the application programming interface indirections repository in block the application programming interface provider device presents the one or more indirections for the target application programming interface feature in a list that in one exemplary embodiment can be a rank ordered list block . In response to the application programming interface provider device presenting the one or more indirections for the target application programming interface feature in the list in block the application programming interface provider device makes a determination as to whether the application programming interface provider device made modifications to the target application programming interface feature corresponding to the one or more indirections in the list block . If the application programming interface provider device did not make modifications to the target application programming interface feature corresponding to the one or more indirections in the list no output of block then the process terminates thereafter.

If the application programming interface provider device did make modifications to the target application programming interface feature corresponding to the one or more indirections in the list yes output of block then a compiler associated with the application programming interface provider device such as compiler in captures the modifications to the target application programming interface feature in an application programming interface change log block . In response to the compiler capturing the modifications to the target application programming interface feature in the application programming interface change log in block the application programming interface provider device makes a determination as to whether the application programming interface provider device needs to make further modifications to the target application programming interface feature corresponding to the one or more indirections in the list block . If the application programming interface provider device does make further modifications to the target application programming interface feature corresponding to the one or more indirections in the list yes output of block then the process returns to block where the compiler captures the further modifications to the target application programming interface feature in the change log. If the application programming interface provider device does not make further modifications to the target application programming interface feature corresponding to the one or more indirections in the list no output of block then the application programming interface provider device transmits the modifications to the target application programming interface feature to an application programming interface library in an application programming interface consumer device such as application programming interface library in block . The process terminates thereafter.

With reference now to a flowchart illustrating a process for updating an application programming interface version by a consumer device is shown in accordance with an illustrative embodiment. The process shown in may be implemented in an application programming interface consumer device such as application programming interface consumer device in .

The process begins when the application programming interface consumer device updates a version of a target application programming interface feature block . The consumer developer may for example download and install the update or the application programming interface consumer device may include an automatic update feature. In response to the application programming interface consumer device updating the version of the target application programming interface feature in block a compiler associated with the application programming interface consumer device such as compiler in retrieves an application programming interface change log such as application programming interface change log in block . In response to the compiler retrieving the application programming interface change log in block the compiler makes a determination as to whether the application programming interface change log indicates a modification to an indirection corresponding to the target application programming interface feature block . If the compiler determines that the application programming interface change log does not indicate a modification to an indirection corresponding to the target application programming interface feature no output of block then the process terminates thereafter.

If the compiler determines that the application programming interface change log does indicate a modification to an indirection corresponding to the target application programming interface feature yes output of block then the compiler makes a determination as to whether the indirection corresponding to the target application programming interface is updateable block . The compiler may for example determine that the indirection is not updateable because a different compiler originally generated this particular indirection a different utility generated this particular indirection or the name of the application programming interface feature associated with the indirection changed and the compiler is not able to determine the name change. If the compiler determines that the indirection corresponding to the target application programming interface is updateable yes output of block then the compiler updates the indirection corresponding to the target application programming interface feature based on the modification to the indirection found in the application programming interface change log block . In response to the compiler updating the indirection corresponding to the target application programming interface feature based on the modification to the indirection found in the application programming interface change log in block the process proceeds to block .

If the compiler determines that the indirection corresponding to the target application programming interface is not updateable no output of block then the compiler marks an update error for the indirection block . In response to the compiler marking the update error for the indirection in block the compiler makes a determination as to whether the application programming interface change log indicates a modification to another indirection corresponding to the target application programming interface feature block . If the compiler determines that the application programming interface change log does indicate a modification to another indirection corresponding to the target application programming interface feature yes output of block then the process returns to block where the compiler makes a determination as to whether the indirection is updateable. If the compiler determines that the application programming interface change log does not indicate a modification to another indirection corresponding to the target application programming interface feature no output of block then the process terminates thereafter.

Thus illustrative embodiments of the present invention provide a method computer system and computer program product for improving application programming interface naming using collaborative services between application programming interface provider developers and consumer developers. The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

